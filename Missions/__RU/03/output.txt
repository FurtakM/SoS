// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 44278 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2783 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 6504 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 85
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 34
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 88
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 89
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 42
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1352 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 51
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 43
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 3
 291: NOT
 292: PPUSH
 293: LD_EXP 4
 297: PPUSH
 298: CALL 10807 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 44
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 3
 315: NOT
 316: PPUSH
 317: LD_EXP 4
 321: PPUSH
 322: CALL 10807 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 46
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 3
 339: NOT
 340: PPUSH
 341: LD_EXP 4
 345: PPUSH
 346: CALL 10807 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 45
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 3
 363: NOT
 364: PPUSH
 365: LD_EXP 4
 369: PPUSH
 370: CALL 10807 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 47
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 3
 387: NOT
 388: PPUSH
 389: LD_EXP 4
 393: PPUSH
 394: CALL 10807 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 49
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 3
 411: NOT
 412: PPUSH
 413: LD_EXP 4
 417: PPUSH
 418: CALL 10807 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 50
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 3
 435: NOT
 436: PPUSH
 437: LD_EXP 4
 441: PPUSH
 442: CALL 10807 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 55
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 56
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 64
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 65
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 66
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 43
 524: PUSH
 525: LD_EXP 44
 529: PUSH
 530: LD_EXP 46
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 45
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 55
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 55
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 55
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 56
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 56
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 56
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 65
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 65
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 65
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 66
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 66
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 66
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 47
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 47
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 47
 758: PPUSH
 759: LD_EXP 55
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 43
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 43
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 43
 799: PPUSH
 800: LD_EXP 55
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 69
 813: PUSH
 814: LD_EXP 44
 818: PUSH
 819: LD_EXP 46
 823: PUSH
 824: LD_EXP 45
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 51
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 55
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 69
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 55
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_STRING 02_Beria
 963: PPUSH
 964: EMPTY
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 971: LD_ADDR_EXP 54
 975: PUSH
 976: LD_STRING 02_VehiclesCount
 978: PPUSH
 979: EMPTY
 980: PPUSH
 981: CALL_OW 30
 985: ST_TO_ADDR
// uc_side := 3 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// uc_nation := 3 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1002: LD_ADDR_OWVAR 37
1006: PUSH
1007: LD_INT 21
1009: ST_TO_ADDR
// vc_control = control_manual ;
1010: LD_ADDR_OWVAR 38
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// vc_engine = engine_combustion ;
1018: LD_ADDR_OWVAR 39
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1026: LD_ADDR_OWVAR 40
1030: PUSH
1031: LD_INT 42
1033: ST_TO_ADDR
// for i := 1 to beriaBase do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 52
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1173
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1052: LD_ADDR_OWVAR 42
1056: PUSH
1057: LD_EXP 52
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1072: LD_ADDR_OWVAR 43
1076: PUSH
1077: LD_EXP 52
1081: PUSH
1082: LD_VAR 0 2
1086: ARRAY
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: ST_TO_ADDR
// if bc_type = b_lab then
1092: LD_OWVAR 42
1096: PUSH
1097: LD_INT 6
1099: EQUAL
1100: IFFALSE 1118
// begin bc_kind1 := b_lab_basic ;
1102: LD_ADDR_OWVAR 44
1106: PUSH
1107: LD_INT 9
1109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1110: LD_ADDR_OWVAR 45
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1118: LD_EXP 52
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 3
1131: ARRAY
1132: PUSH
1133: LD_INT 46
1135: PLUS
1136: PPUSH
1137: LD_EXP 52
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 4
1150: ARRAY
1151: PPUSH
1152: LD_EXP 52
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 5
1165: ARRAY
1166: PPUSH
1167: CALL_OW 47
// end ;
1171: GO 1049
1173: POP
1174: POP
// for i := 1 to beriaVehs do
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_EXP 54
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1255
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_INT 20
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ARRAY
1227: ST_TO_ADDR
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1238: LD_VAR 0 3
1242: PPUSH
1243: LD_INT 11
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ;
1253: GO 1190
1255: POP
1256: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 30
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 1
1293: ARRAY
1294: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_STRING beria
1302: PPUSH
1303: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , 1 , 100 ) ;
1307: LD_VAR 0 5
1311: PPUSH
1312: CALL_OW 274
1316: PPUSH
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 100
1322: PPUSH
1323: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , 2 , 20 ) ;
1327: LD_VAR 0 5
1331: PPUSH
1332: CALL_OW 274
1336: PPUSH
1337: LD_INT 2
1339: PPUSH
1340: LD_INT 20
1342: PPUSH
1343: CALL_OW 277
// end ;
1347: LD_VAR 0 1
1351: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1352: LD_INT 0
1354: PPUSH
1355: PPUSH
1356: PPUSH
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
1361: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1362: LD_ADDR_EXP 58
1366: PUSH
1367: LD_STRING 02_Kirov
1369: PPUSH
1370: EMPTY
1371: PPUSH
1372: CALL_OW 30
1376: ST_TO_ADDR
// uc_side := 6 ;
1377: LD_ADDR_OWVAR 20
1381: PUSH
1382: LD_INT 6
1384: ST_TO_ADDR
// uc_nation := 3 ;
1385: LD_ADDR_OWVAR 21
1389: PUSH
1390: LD_INT 3
1392: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1393: LD_ADDR_EXP 57
1397: PUSH
1398: LD_STRING 02_kirovTeam
1400: PPUSH
1401: CALL_OW 31
1405: ST_TO_ADDR
// for i := 1 to kirovBase do
1406: LD_ADDR_VAR 0 2
1410: PUSH
1411: DOUBLE
1412: LD_INT 1
1414: DEC
1415: ST_TO_ADDR
1416: LD_EXP 58
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1571
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1424: LD_ADDR_OWVAR 42
1428: PUSH
1429: LD_EXP 58
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 1
1442: ARRAY
1443: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1444: LD_ADDR_OWVAR 43
1448: PUSH
1449: LD_EXP 58
1453: PUSH
1454: LD_VAR 0 2
1458: ARRAY
1459: PUSH
1460: LD_INT 2
1462: ARRAY
1463: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1464: LD_ADDR_VAR 0 6
1468: PUSH
1469: LD_EXP 58
1473: PUSH
1474: LD_VAR 0 2
1478: ARRAY
1479: PUSH
1480: LD_INT 3
1482: ARRAY
1483: PUSH
1484: LD_INT 46
1486: PLUS
1487: ST_TO_ADDR
// if x < 140 then
1488: LD_VAR 0 6
1492: PUSH
1493: LD_INT 140
1495: LESS
1496: IFFALSE 1508
// uc_side := 3 else
1498: LD_ADDR_OWVAR 20
1502: PUSH
1503: LD_INT 3
1505: ST_TO_ADDR
1506: GO 1516
// uc_side := 6 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 6
1515: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1516: LD_EXP 58
1520: PUSH
1521: LD_VAR 0 2
1525: ARRAY
1526: PUSH
1527: LD_INT 3
1529: ARRAY
1530: PUSH
1531: LD_INT 46
1533: PLUS
1534: PPUSH
1535: LD_EXP 58
1539: PUSH
1540: LD_VAR 0 2
1544: ARRAY
1545: PUSH
1546: LD_INT 4
1548: ARRAY
1549: PPUSH
1550: LD_EXP 58
1554: PUSH
1555: LD_VAR 0 2
1559: ARRAY
1560: PUSH
1561: LD_INT 5
1563: ARRAY
1564: PPUSH
1565: CALL_OW 47
// end ;
1569: GO 1421
1571: POP
1572: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1573: LD_ADDR_EXP 59
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 30
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 69
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1611: LD_EXP 59
1615: PPUSH
1616: LD_STRING kirov
1618: PPUSH
1619: CALL_OW 500
// for i := 1 to 2 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 2
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1663
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1639: LD_EXP 59
1643: PPUSH
1644: CALL_OW 274
1648: PPUSH
1649: LD_VAR 0 2
1653: PPUSH
1654: LD_INT 500
1656: PPUSH
1657: CALL_OW 277
1661: GO 1636
1663: POP
1664: POP
// tmp := otherKirovUnits ;
1665: LD_ADDR_VAR 0 4
1669: PUSH
1670: LD_EXP 57
1674: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1675: LD_ADDR_VAR 0 5
1679: PUSH
1680: LD_INT 22
1682: PUSH
1683: LD_INT 6
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 21
1692: PUSH
1693: LD_INT 3
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: PUSH
1700: LD_INT 3
1702: PUSH
1703: LD_INT 30
1705: PUSH
1706: LD_INT 31
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: PPUSH
1722: CALL_OW 69
1726: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1727: LD_ADDR_VAR 0 7
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1741: LD_VAR 0 4
1745: PUSH
1746: LD_INT 1
1748: ARRAY
1749: PPUSH
1750: LD_VAR 0 7
1754: PPUSH
1755: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 3
1776: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1777: LD_VAR 0 7
1781: PPUSH
1782: CALL_OW 313
1786: PUSH
1787: LD_INT 3
1789: EQUAL
1790: IFFALSE 1810
// buildings := Delete ( buildings , 1 ) ;
1792: LD_ADDR_VAR 0 5
1796: PUSH
1797: LD_VAR 0 5
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 3
1809: ST_TO_ADDR
// until not buildings or not tmp ;
1810: LD_VAR 0 5
1814: NOT
1815: PUSH
1816: LD_VAR 0 4
1820: NOT
1821: OR
1822: IFFALSE 1727
// if tmp then
1824: LD_VAR 0 4
1828: IFFALSE 1868
// begin for i in tmp do
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: LD_VAR 0 4
1839: PUSH
1840: FOR_IN
1841: IFFALSE 1866
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 164
1850: PPUSH
1851: LD_INT 109
1853: PPUSH
1854: LD_INT 4
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 50
1864: GO 1840
1866: POP
1867: POP
// end ; end ;
1868: LD_VAR 0 1
1872: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1873: LD_INT 0
1875: PPUSH
1876: PPUSH
1877: PPUSH
1878: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1879: LD_ADDR_VAR 0 4
1883: PUSH
1884: LD_INT 32
1886: PUSH
1887: LD_INT 146
1889: PUSH
1890: LD_INT 106
1892: PUSH
1893: LD_INT 1
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 32
1904: PUSH
1905: LD_INT 175
1907: PUSH
1908: LD_INT 123
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 32
1922: PUSH
1923: LD_INT 170
1925: PUSH
1926: LD_INT 101
1928: PUSH
1929: LD_INT 3
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 32
1940: PUSH
1941: LD_INT 172
1943: PUSH
1944: LD_INT 104
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 32
1958: PUSH
1959: LD_INT 179
1961: PUSH
1962: LD_INT 118
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 26
1976: PUSH
1977: LD_INT 159
1979: PUSH
1980: LD_INT 96
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
2000: LD_ADDR_EXP 70
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 6
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 21
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 25
2027: PUSH
2028: LD_INT 2
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: PPUSH
2040: CALL_OW 69
2044: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2045: LD_ADDR_EXP 61
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 6
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 21
2062: PUSH
2063: LD_INT 3
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 6
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: PUSH
2090: LD_INT 1
2092: ARRAY
2093: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2094: LD_ADDR_EXP 62
2098: PUSH
2099: LD_INT 22
2101: PUSH
2102: LD_INT 6
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 21
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 30
2121: PUSH
2122: LD_INT 4
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PPUSH
2134: CALL_OW 69
2138: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2139: LD_ADDR_EXP 63
2143: PUSH
2144: LD_INT 22
2146: PUSH
2147: LD_INT 6
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 21
2156: PUSH
2157: LD_INT 3
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 30
2166: PUSH
2167: LD_INT 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 69
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 22
2195: PUSH
2196: LD_INT 6
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 21
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 25
2215: PUSH
2216: LD_INT 3
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: PPUSH
2228: CALL_OW 69
2232: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2233: LD_VAR 0 3
2237: PPUSH
2238: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_EXP 63
2251: PPUSH
2252: CALL_OW 180
// wait ( 0 0$1 ) ;
2256: LD_INT 35
2258: PPUSH
2259: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2263: LD_ADDR_VAR 0 3
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 6
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 25
2290: PUSH
2291: LD_INT 4
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PPUSH
2303: CALL_OW 69
2307: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2308: LD_VAR 0 3
2312: PPUSH
2313: LD_EXP 61
2317: PPUSH
2318: CALL_OW 180
// for i in kirovBuildingArray do
2322: LD_ADDR_VAR 0 2
2326: PUSH
2327: LD_VAR 0 4
2331: PUSH
2332: FOR_IN
2333: IFFALSE 2382
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2335: LD_EXP 70
2339: PPUSH
2340: LD_VAR 0 2
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: LD_VAR 0 2
2353: PUSH
2354: LD_INT 2
2356: ARRAY
2357: PPUSH
2358: LD_VAR 0 2
2362: PUSH
2363: LD_INT 3
2365: ARRAY
2366: PPUSH
2367: LD_VAR 0 2
2371: PUSH
2372: LD_INT 4
2374: ARRAY
2375: PPUSH
2376: CALL_OW 205
2380: GO 2332
2382: POP
2383: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2384: LD_ADDR_EXP 2
2388: PUSH
2389: LD_EXP 61
2393: PUSH
2394: LD_EXP 62
2398: PUSH
2399: LD_INT 1
2401: ARRAY
2402: PUSH
2403: LD_EXP 62
2407: PUSH
2408: LD_INT 2
2410: ARRAY
2411: PUSH
2412: LD_EXP 59
2416: PUSH
2417: LD_EXP 63
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// end ;
2429: LD_VAR 0 1
2433: RET
// export function PrepareScholtze ; begin
2434: LD_INT 0
2436: PPUSH
// uc_side := 5 ;
2437: LD_ADDR_OWVAR 20
2441: PUSH
2442: LD_INT 5
2444: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2445: LD_ADDR_EXP 67
2449: PUSH
2450: LD_STRING Scholtze
2452: PPUSH
2453: CALL_OW 25
2457: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2458: LD_ADDR_EXP 68
2462: PUSH
2463: LD_STRING Scholtze
2465: PPUSH
2466: CALL_OW 25
2470: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2471: LD_EXP 67
2475: PPUSH
2476: LD_INT 12
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 49
// end ; end_of_file
2486: LD_VAR 0 1
2490: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
// amIntroUnits = [ ] ;
2497: LD_ADDR_EXP 74
2501: PUSH
2502: EMPTY
2503: ST_TO_ADDR
// uc_side = 1 ;
2504: LD_ADDR_OWVAR 20
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// uc_nation = nation_american ;
2512: LD_ADDR_OWVAR 21
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2520: LD_ADDR_OWVAR 37
2524: PUSH
2525: LD_INT 3
2527: ST_TO_ADDR
// vc_control = control_manual ;
2528: LD_ADDR_OWVAR 38
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// vc_engine = engine_combustion ;
2536: LD_ADDR_OWVAR 39
2540: PUSH
2541: LD_INT 1
2543: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2544: LD_ADDR_OWVAR 40
2548: PUSH
2549: LD_INT 3
2551: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2552: LD_ADDR_OWVAR 41
2556: PUSH
2557: LD_INT 100
2559: ST_TO_ADDR
// veh = CreateVehicle ;
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2570: LD_VAR 0 3
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2582: LD_ADDR_EXP 74
2586: PUSH
2587: LD_EXP 74
2591: PUSH
2592: LD_VAR 0 3
2596: ADD
2597: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2598: LD_VAR 0 3
2602: PPUSH
2603: LD_INT 7
2605: PPUSH
2606: LD_INT 0
2608: PPUSH
2609: CALL_OW 49
// for i := 1 to 3 do
2613: LD_ADDR_VAR 0 2
2617: PUSH
2618: DOUBLE
2619: LD_INT 1
2621: DEC
2622: ST_TO_ADDR
2623: LD_INT 3
2625: PUSH
2626: FOR_TO
2627: IFFALSE 2748
// begin hc_name :=  ;
2629: LD_ADDR_OWVAR 26
2633: PUSH
2634: LD_STRING 
2636: ST_TO_ADDR
// hc_gallery :=  ;
2637: LD_ADDR_OWVAR 33
2641: PUSH
2642: LD_STRING 
2644: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2645: LD_INT 0
2647: PPUSH
2648: LD_EXP 42
2652: PPUSH
2653: CALL_OW 381
// human = CreateHuman ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: CALL_OW 44
2666: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2667: LD_ADDR_EXP 74
2671: PUSH
2672: LD_EXP 74
2676: PUSH
2677: LD_VAR 0 4
2681: ADD
2682: ST_TO_ADDR
// if i < 3 then
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 3
2690: LESS
2691: IFFALSE 2710
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2693: LD_VAR 0 4
2697: PPUSH
2698: LD_INT 7
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL_OW 49
2708: GO 2746
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2710: LD_INT 0
2712: PPUSH
2713: LD_EXP 42
2717: PPUSH
2718: CALL_OW 383
// human = CreateHuman ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2732: LD_VAR 0 4
2736: PPUSH
2737: LD_VAR 0 3
2741: PPUSH
2742: CALL_OW 52
// end ; end ;
2746: GO 2626
2748: POP
2749: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2750: LD_INT 120
2752: PPUSH
2753: LD_INT 36
2755: PPUSH
2756: LD_INT 3
2758: PPUSH
2759: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2763: LD_EXP 74
2767: PPUSH
2768: LD_INT 26
2770: PPUSH
2771: LD_INT 34
2773: PPUSH
2774: CALL_OW 111
// end ;
2778: LD_VAR 0 1
2782: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2783: LD_INT 0
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
2790: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2791: LD_ADDR_EXP 75
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: LD_INT 3
2804: PUSH
2805: LD_INT 5
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_OWVAR 67
2818: ARRAY
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: PUSH
2838: LD_OWVAR 67
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: LD_INT 2
2852: PUSH
2853: LD_INT 2
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: PUSH
2862: LD_OWVAR 67
2866: ARRAY
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: LD_INT 1
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_OWVAR 67
2890: ARRAY
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: LD_INT 1
2897: PUSH
2898: LD_INT 1
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: PUSH
2910: LD_OWVAR 67
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 4
2928: PUSH
2929: LD_INT 5
2931: PUSH
2932: LD_INT 6
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: PUSH
2941: LD_OWVAR 67
2945: ARRAY
2946: PUSH
2947: LD_INT 0
2949: PUSH
2950: LD_INT 1
2952: PUSH
2953: LD_INT 1
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: LD_OWVAR 67
2969: ARRAY
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: LD_INT 2
2979: PUSH
2980: LD_INT 3
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: LD_OWVAR 67
2993: ARRAY
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: LD_INT 3
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: PUSH
3013: LD_OWVAR 67
3017: ARRAY
3018: PUSH
3019: LD_INT 1
3021: PUSH
3022: LD_INT 1
3024: PUSH
3025: LD_INT 2
3027: PUSH
3028: LD_INT 3
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PUSH
3037: LD_OWVAR 67
3041: ARRAY
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: LD_INT 2
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: LD_INT 4
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_OWVAR 67
3072: ARRAY
3073: PUSH
3074: LD_INT 1
3076: PUSH
3077: LD_INT 1
3079: PUSH
3080: LD_INT 1
3082: PUSH
3083: LD_INT 2
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: PUSH
3092: LD_OWVAR 67
3096: ARRAY
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: LD_INT 1
3103: PUSH
3104: LD_INT 2
3106: PUSH
3107: LD_INT 2
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_OWVAR 67
3120: ARRAY
3121: PUSH
3122: LD_INT 1
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: LD_INT 1
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_OWVAR 67
3144: ARRAY
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: PUSH
3164: LD_OWVAR 67
3168: ARRAY
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 4
3182: PUSH
3183: LD_INT 6
3185: PUSH
3186: LD_INT 7
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: PUSH
3195: LD_OWVAR 67
3199: ARRAY
3200: PUSH
3201: LD_INT 1
3203: PUSH
3204: LD_INT 1
3206: PUSH
3207: LD_INT 1
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: PUSH
3219: LD_OWVAR 67
3223: ARRAY
3224: PUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 1
3230: PUSH
3231: LD_INT 2
3233: PUSH
3234: LD_INT 3
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_OWVAR 67
3247: ARRAY
3248: PUSH
3249: LD_INT 1
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 2
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_OWVAR 67
3271: ARRAY
3272: PUSH
3273: LD_INT 1
3275: PUSH
3276: LD_INT 1
3278: PUSH
3279: LD_INT 1
3281: PUSH
3282: LD_INT 3
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_OWVAR 67
3295: ARRAY
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3310: LD_ADDR_VAR 0 6
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: LD_INT 20
3320: PUSH
3321: LD_INT 33
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 29
3335: PUSH
3336: LD_INT 38
3338: PUSH
3339: LD_INT 30
3341: PUSH
3342: LD_INT 5
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 5
3353: PUSH
3354: LD_INT 34
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 4
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 35
3374: PUSH
3375: LD_INT 45
3377: PUSH
3378: LD_INT 4
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 6
3389: PUSH
3390: LD_INT 27
3392: PUSH
3393: LD_INT 27
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 6
3407: PUSH
3408: LD_INT 15
3410: PUSH
3411: LD_INT 23
3413: PUSH
3414: LD_INT 1
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 31
3425: PUSH
3426: LD_INT 25
3428: PUSH
3429: LD_INT 8
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 32
3443: PUSH
3444: LD_INT 37
3446: PUSH
3447: LD_INT 35
3449: PUSH
3450: LD_INT 4
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 32
3461: PUSH
3462: LD_INT 42
3464: PUSH
3465: LD_INT 45
3467: PUSH
3468: LD_INT 4
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 32
3479: PUSH
3480: LD_INT 29
3482: PUSH
3483: LD_INT 17
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 32
3497: PUSH
3498: LD_INT 30
3500: PUSH
3501: LD_INT 53
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 32
3515: PUSH
3516: LD_INT 42
3518: PUSH
3519: LD_INT 56
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 32
3533: PUSH
3534: LD_INT 30
3536: PUSH
3537: LD_INT 20
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 27
3551: PUSH
3552: LD_INT 7
3554: PUSH
3555: LD_INT 8
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 27
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: LD_INT 8
3575: PUSH
3576: LD_INT 1
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: LD_INT 27
3587: PUSH
3588: LD_INT 13
3590: PUSH
3591: LD_INT 8
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 26
3605: PUSH
3606: LD_INT 23
3608: PUSH
3609: LD_INT 42
3611: PUSH
3612: LD_INT 4
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: PUSH
3621: LD_INT 3
3623: PUSH
3624: LD_INT 13
3626: PUSH
3627: LD_INT 14
3629: PUSH
3630: LD_INT 1
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 19
3641: PUSH
3642: LD_INT 10
3644: PUSH
3645: LD_INT 11
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 17
3659: PUSH
3660: LD_INT 9
3662: PUSH
3663: LD_INT 14
3665: PUSH
3666: LD_INT 1
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 16
3677: PUSH
3678: LD_INT 13
3680: PUSH
3681: LD_INT 17
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: ST_TO_ADDR
// for i in omiBuildingArray do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_VAR 0 6
3725: PUSH
3726: FOR_IN
3727: IFFALSE 3783
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3729: LD_INT 1
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: LD_VAR 0 2
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PPUSH
3747: LD_VAR 0 2
3751: PUSH
3752: LD_INT 2
3754: ARRAY
3755: PPUSH
3756: LD_VAR 0 2
3760: PUSH
3761: LD_INT 3
3763: ARRAY
3764: PPUSH
3765: LD_VAR 0 2
3769: PUSH
3770: LD_INT 4
3772: ARRAY
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: CALL 51335 0 8
3781: GO 3726
3783: POP
3784: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3785: LD_ADDR_EXP 73
3789: PUSH
3790: LD_INT 22
3792: PUSH
3793: LD_INT 1
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PPUSH
3814: CALL_OW 69
3818: PUSH
3819: LD_INT 1
3821: ARRAY
3822: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3823: LD_EXP 73
3827: PPUSH
3828: LD_STRING omikron
3830: PPUSH
3831: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3835: LD_ADDR_EXP 77
3839: PUSH
3840: LD_INT 22
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 30
3852: PUSH
3853: LD_INT 5
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 69
3868: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3869: LD_ADDR_EXP 76
3873: PUSH
3874: LD_INT 22
3876: PUSH
3877: LD_INT 1
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 30
3886: PUSH
3887: LD_INT 6
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PPUSH
3898: CALL_OW 69
3902: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3903: LD_ADDR_EXP 78
3907: PUSH
3908: LD_INT 22
3910: PUSH
3911: LD_INT 1
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: LD_INT 30
3920: PUSH
3921: LD_INT 3
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PPUSH
3932: CALL_OW 69
3936: PUSH
3937: LD_INT 1
3939: ARRAY
3940: ST_TO_ADDR
// for i := 1 to 2 do
3941: LD_ADDR_VAR 0 2
3945: PUSH
3946: DOUBLE
3947: LD_INT 1
3949: DEC
3950: ST_TO_ADDR
3951: LD_INT 2
3953: PUSH
3954: FOR_TO
3955: IFFALSE 3981
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3957: LD_EXP 73
3961: PPUSH
3962: CALL_OW 274
3966: PPUSH
3967: LD_VAR 0 2
3971: PPUSH
3972: LD_INT 500
3974: PPUSH
3975: CALL_OW 277
3979: GO 3954
3981: POP
3982: POP
// uc_side := 1 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 1
3990: ST_TO_ADDR
// uc_nation := 1 ;
3991: LD_ADDR_OWVAR 21
3995: PUSH
3996: LD_INT 1
3998: ST_TO_ADDR
// omicronSquad := [ ] ;
3999: LD_ADDR_EXP 71
4003: PUSH
4004: EMPTY
4005: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
4006: LD_ADDR_VAR 0 2
4010: PUSH
4011: LD_INT 22
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: LD_INT 30
4026: PUSH
4027: LD_INT 32
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 30
4036: PUSH
4037: LD_INT 31
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 69
4057: PUSH
4058: FOR_IN
4059: IFFALSE 4178
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4061: LD_INT 1
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 4
4072: PUSH
4073: LD_INT 5
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: LIST
4080: PUSH
4081: LD_OWVAR 67
4085: ARRAY
4086: PPUSH
4087: CALL_OW 380
// un := CreateHuman ;
4091: LD_ADDR_VAR 0 3
4095: PUSH
4096: CALL_OW 44
4100: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4101: LD_ADDR_EXP 71
4105: PUSH
4106: LD_EXP 71
4110: PUSH
4111: LD_VAR 0 3
4115: UNION
4116: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4117: LD_VAR 0 3
4121: PPUSH
4122: LD_VAR 0 2
4126: PPUSH
4127: CALL_OW 254
4131: PUSH
4132: LD_INT 3
4134: MINUS
4135: PPUSH
4136: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4140: LD_VAR 0 3
4144: PPUSH
4145: LD_VAR 0 2
4149: PPUSH
4150: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4154: LD_VAR 0 2
4158: PPUSH
4159: LD_VAR 0 2
4163: PPUSH
4164: LD_INT 8
4166: PPUSH
4167: CALL 20911 0 2
4171: PPUSH
4172: CALL_OW 431
// end ;
4176: GO 4058
4178: POP
4179: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: DOUBLE
4186: LD_INT 1
4188: DEC
4189: ST_TO_ADDR
4190: LD_INT 3
4192: PUSH
4193: LD_INT 4
4195: PUSH
4196: LD_INT 5
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_OWVAR 67
4208: ARRAY
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4268
// begin PrepareHuman ( false , 2 , 2 ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_INT 2
4218: PPUSH
4219: LD_INT 2
4221: PPUSH
4222: CALL_OW 380
// un := CreateHuman ;
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: CALL_OW 44
4235: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4236: LD_ADDR_EXP 71
4240: PUSH
4241: LD_EXP 71
4245: PUSH
4246: LD_VAR 0 3
4250: UNION
4251: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4252: LD_VAR 0 3
4256: PPUSH
4257: LD_EXP 73
4261: PPUSH
4262: CALL_OW 52
// end ;
4266: GO 4210
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4450
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4286: LD_INT 2
4288: PUSH
4289: LD_INT 3
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_VAR 0 2
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 4
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: LD_VAR 0 2
4322: ARRAY
4323: PPUSH
4324: LD_INT 100
4326: PPUSH
4327: CALL 15671 0 5
// veh := CreateVehicle ;
4331: LD_ADDR_VAR 0 5
4335: PUSH
4336: CALL_OW 45
4340: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4341: LD_VAR 0 5
4345: PPUSH
4346: LD_INT 28
4348: PPUSH
4349: LD_INT 37
4351: PPUSH
4352: LD_INT 6
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_INT 3
4367: PPUSH
4368: LD_INT 2
4370: PPUSH
4371: CALL_OW 380
// un := CreateHuman ;
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: CALL_OW 44
4384: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4385: LD_ADDR_EXP 71
4389: PUSH
4390: LD_EXP 71
4394: PUSH
4395: LD_VAR 0 3
4399: UNION
4400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4401: LD_VAR 0 3
4405: PPUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4415: LD_VAR 0 3
4419: PPUSH
4420: LD_VAR 0 3
4424: PPUSH
4425: CALL_OW 250
4429: PUSH
4430: LD_INT 3
4432: PLUS
4433: PPUSH
4434: LD_VAR 0 3
4438: PPUSH
4439: CALL_OW 251
4443: PPUSH
4444: CALL_OW 111
// end ;
4448: GO 4283
4450: POP
4451: POP
// end ;
4452: LD_VAR 0 1
4456: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
4468: PPUSH
// uc_side := 1 ;
4469: LD_ADDR_OWVAR 20
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// uc_nation := 1 ;
4477: LD_ADDR_OWVAR 21
4481: PUSH
4482: LD_INT 1
4484: ST_TO_ADDR
// hc_name :=  ;
4485: LD_ADDR_OWVAR 26
4489: PUSH
4490: LD_STRING 
4492: ST_TO_ADDR
// hc_gallery :=  ;
4493: LD_ADDR_OWVAR 33
4497: PUSH
4498: LD_STRING 
4500: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4501: LD_ADDR_VAR 0 8
4505: PUSH
4506: DOUBLE
4507: LD_INT 1
4509: DEC
4510: ST_TO_ADDR
4511: LD_VAR 0 1
4515: PUSH
4516: FOR_TO
4517: IFFALSE 4592
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4519: LD_INT 0
4521: PPUSH
4522: LD_EXP 42
4526: PPUSH
4527: CALL_OW 381
// un = CreateHuman ;
4531: LD_ADDR_VAR 0 9
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4541: LD_ADDR_EXP 80
4545: PUSH
4546: LD_EXP 80
4550: PUSH
4551: LD_VAR 0 9
4555: ADD
4556: ST_TO_ADDR
// sols := sols ^ un ;
4557: LD_ADDR_VAR 0 12
4561: PUSH
4562: LD_VAR 0 12
4566: PUSH
4567: LD_VAR 0 9
4571: ADD
4572: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4573: LD_VAR 0 9
4577: PPUSH
4578: LD_VAR 0 6
4582: PPUSH
4583: LD_INT 0
4585: PPUSH
4586: CALL_OW 49
// end ;
4590: GO 4516
4592: POP
4593: POP
// for i := 1 to engsAmount do
4594: LD_ADDR_VAR 0 8
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_VAR 0 2
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4685
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4612: LD_INT 0
4614: PPUSH
4615: LD_EXP 42
4619: PPUSH
4620: CALL_OW 382
// un = CreateHuman ;
4624: LD_ADDR_VAR 0 9
4628: PUSH
4629: CALL_OW 44
4633: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4634: LD_ADDR_EXP 80
4638: PUSH
4639: LD_EXP 80
4643: PUSH
4644: LD_VAR 0 9
4648: ADD
4649: ST_TO_ADDR
// engs := engs ^ un ;
4650: LD_ADDR_VAR 0 13
4654: PUSH
4655: LD_VAR 0 13
4659: PUSH
4660: LD_VAR 0 9
4664: ADD
4665: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4666: LD_VAR 0 9
4670: PPUSH
4671: LD_VAR 0 6
4675: PPUSH
4676: LD_INT 0
4678: PPUSH
4679: CALL_OW 49
// end ;
4683: GO 4609
4685: POP
4686: POP
// for i := 1 to mechsAmount do
4687: LD_ADDR_VAR 0 8
4691: PUSH
4692: DOUBLE
4693: LD_INT 1
4695: DEC
4696: ST_TO_ADDR
4697: LD_VAR 0 3
4701: PUSH
4702: FOR_TO
4703: IFFALSE 4778
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4705: LD_INT 0
4707: PPUSH
4708: LD_EXP 42
4712: PPUSH
4713: CALL_OW 383
// un = CreateHuman ;
4717: LD_ADDR_VAR 0 9
4721: PUSH
4722: CALL_OW 44
4726: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4727: LD_ADDR_EXP 80
4731: PUSH
4732: LD_EXP 80
4736: PUSH
4737: LD_VAR 0 9
4741: ADD
4742: ST_TO_ADDR
// mechs := mechs ^ un ;
4743: LD_ADDR_VAR 0 14
4747: PUSH
4748: LD_VAR 0 14
4752: PUSH
4753: LD_VAR 0 9
4757: ADD
4758: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4759: LD_VAR 0 9
4763: PPUSH
4764: LD_VAR 0 6
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL_OW 49
// end ;
4776: GO 4702
4778: POP
4779: POP
// for i := 1 to scientistsAmount do
4780: LD_ADDR_VAR 0 8
4784: PUSH
4785: DOUBLE
4786: LD_INT 1
4788: DEC
4789: ST_TO_ADDR
4790: LD_VAR 0 4
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4871
// begin PrepareScientist ( false , enemySkillLevel ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_EXP 42
4805: PPUSH
4806: CALL_OW 384
// un = CreateHuman ;
4810: LD_ADDR_VAR 0 9
4814: PUSH
4815: CALL_OW 44
4819: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4820: LD_ADDR_EXP 80
4824: PUSH
4825: LD_EXP 80
4829: PUSH
4830: LD_VAR 0 9
4834: ADD
4835: ST_TO_ADDR
// scis := scis ^ un ;
4836: LD_ADDR_VAR 0 15
4840: PUSH
4841: LD_VAR 0 15
4845: PUSH
4846: LD_VAR 0 9
4850: ADD
4851: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4852: LD_VAR 0 9
4856: PPUSH
4857: LD_VAR 0 6
4861: PPUSH
4862: LD_INT 0
4864: PPUSH
4865: CALL_OW 49
// end ;
4869: GO 4795
4871: POP
4872: POP
// for i := 1 to vehiclesAmount do
4873: LD_ADDR_VAR 0 8
4877: PUSH
4878: DOUBLE
4879: LD_INT 1
4881: DEC
4882: ST_TO_ADDR
4883: LD_VAR 0 5
4887: PUSH
4888: FOR_TO
4889: IFFALSE 5071
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4891: LD_ADDR_OWVAR 40
4895: PUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 1
4912: PPUSH
4913: LD_INT 3
4915: PPUSH
4916: CALL_OW 12
4920: ARRAY
4921: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4922: LD_ADDR_OWVAR 37
4926: PUSH
4927: LD_INT 3
4929: ST_TO_ADDR
// vc_control = control_manual ;
4930: LD_ADDR_OWVAR 38
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// vc_engine = engine_combustion ;
4938: LD_ADDR_OWVAR 39
4942: PUSH
4943: LD_INT 1
4945: ST_TO_ADDR
// veh = CreateVehicle ;
4946: LD_ADDR_VAR 0 10
4950: PUSH
4951: CALL_OW 45
4955: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
4956: LD_ADDR_EXP 80
4960: PUSH
4961: LD_EXP 80
4965: PUSH
4966: LD_VAR 0 10
4970: ADD
4971: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4972: LD_VAR 0 10
4976: PPUSH
4977: LD_VAR 0 6
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4989: LD_INT 0
4991: PPUSH
4992: LD_EXP 42
4996: PPUSH
4997: CALL_OW 383
// un = CreateHuman ;
5001: LD_ADDR_VAR 0 9
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
5011: LD_ADDR_EXP 80
5015: PUSH
5016: LD_EXP 80
5020: PUSH
5021: LD_VAR 0 9
5025: ADD
5026: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
5027: LD_ADDR_EXP 79
5031: PUSH
5032: LD_EXP 79
5036: PUSH
5037: LD_VAR 0 10
5041: ADD
5042: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5043: LD_VAR 0 9
5047: PPUSH
5048: LD_VAR 0 10
5052: PPUSH
5053: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5057: LD_VAR 0 10
5061: PPUSH
5062: LD_INT 100
5064: PPUSH
5065: CALL_OW 240
// end ;
5069: GO 4888
5071: POP
5072: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5073: LD_EXP 80
5077: PPUSH
5078: LD_INT 25
5080: PPUSH
5081: LD_INT 31
5083: PPUSH
5084: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5088: LD_EXP 79
5092: PPUSH
5093: LD_INT 95
5095: PUSH
5096: LD_INT 44
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: PPUSH
5106: CALL 50192 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5110: LD_VAR 0 12
5114: PPUSH
5115: LD_EXP 77
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PUSH
5124: LD_EXP 77
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 1
5139: PPUSH
5140: LD_INT 2
5142: PPUSH
5143: CALL_OW 12
5147: ARRAY
5148: PPUSH
5149: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5153: LD_VAR 0 13
5157: PPUSH
5158: LD_EXP 73
5162: PPUSH
5163: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5167: LD_VAR 0 14
5171: PPUSH
5172: LD_EXP 78
5176: PPUSH
5177: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5181: LD_VAR 0 15
5185: PPUSH
5186: LD_EXP 76
5190: PUSH
5191: LD_INT 1
5193: ARRAY
5194: PUSH
5195: LD_EXP 76
5199: PUSH
5200: LD_INT 2
5202: ARRAY
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 2
5213: PPUSH
5214: CALL_OW 12
5218: ARRAY
5219: PPUSH
5220: CALL_OW 180
// amConvoyTroops :=  ;
5224: LD_ADDR_EXP 80
5228: PUSH
5229: LD_STRING 
5231: ST_TO_ADDR
// sols :=  ;
5232: LD_ADDR_VAR 0 12
5236: PUSH
5237: LD_STRING 
5239: ST_TO_ADDR
// engs :=  ;
5240: LD_ADDR_VAR 0 13
5244: PUSH
5245: LD_STRING 
5247: ST_TO_ADDR
// mechs :=  ;
5248: LD_ADDR_VAR 0 14
5252: PUSH
5253: LD_STRING 
5255: ST_TO_ADDR
// scis :=  ;
5256: LD_ADDR_VAR 0 15
5260: PUSH
5261: LD_STRING 
5263: ST_TO_ADDR
// end ;
5264: LD_VAR 0 7
5268: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5269: LD_INT 0
5271: PPUSH
5272: PPUSH
// for i := 1 to amVehs do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_EXP 79
5287: PUSH
5288: FOR_TO
5289: IFFALSE 5332
// begin if GetType ( i ) = unit_vehicle then
5291: LD_VAR 0 2
5295: PPUSH
5296: CALL_OW 247
5300: PUSH
5301: LD_INT 2
5303: EQUAL
5304: IFFALSE 5318
// SetFuel ( i , 100 ) ;
5306: LD_VAR 0 2
5310: PPUSH
5311: LD_INT 100
5313: PPUSH
5314: CALL_OW 240
// SetLives ( i , 1000 ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 1000
5325: PPUSH
5326: CALL_OW 234
// end ;
5330: GO 5288
5332: POP
5333: POP
// for i := 1 to amIntroUnits do
5334: LD_ADDR_VAR 0 2
5338: PUSH
5339: DOUBLE
5340: LD_INT 1
5342: DEC
5343: ST_TO_ADDR
5344: LD_EXP 74
5348: PUSH
5349: FOR_TO
5350: IFFALSE 5393
// begin if GetType ( i ) = unit_vehicle then
5352: LD_VAR 0 2
5356: PPUSH
5357: CALL_OW 247
5361: PUSH
5362: LD_INT 2
5364: EQUAL
5365: IFFALSE 5379
// SetFuel ( i , 100 ) ;
5367: LD_VAR 0 2
5371: PPUSH
5372: LD_INT 100
5374: PPUSH
5375: CALL_OW 240
// SetLives ( i , 1000 ) ;
5379: LD_VAR 0 2
5383: PPUSH
5384: LD_INT 1000
5386: PPUSH
5387: CALL_OW 234
// end ;
5391: GO 5349
5393: POP
5394: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5395: LD_EXP 74
5399: PPUSH
5400: LD_INT 65
5402: PUSH
5403: LD_INT 91
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 116
5412: PUSH
5413: LD_INT 97
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PPUSH
5424: CALL 50192 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5428: LD_EXP 79
5432: PPUSH
5433: LD_INT 65
5435: PUSH
5436: LD_INT 91
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 109
5445: PUSH
5446: LD_INT 97
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL 50192 0 2
// end ; end_of_file end_of_file
5461: LD_VAR 0 1
5465: RET
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 , kaganReady ;
5466: LD_INT 0
5468: PPUSH
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
5473: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5474: LD_VAR 0 1
5478: PPUSH
5479: CALL_OW 255
5483: PUSH
5484: LD_INT 6
5486: EQUAL
5487: PUSH
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 266
5497: PUSH
5498: LD_INT 32
5500: EQUAL
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 266
5511: PUSH
5512: LD_INT 4
5514: EQUAL
5515: OR
5516: AND
5517: IFFALSE 5665
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: LD_INT 22
5526: PUSH
5527: LD_INT 6
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 21
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 25
5546: PUSH
5547: LD_INT 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: LD_INT 54
5556: PUSH
5557: EMPTY
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 69
5570: ST_TO_ADDR
// for un in sols do
5571: LD_ADDR_VAR 0 2
5575: PUSH
5576: LD_VAR 0 5
5580: PUSH
5581: FOR_IN
5582: IFFALSE 5633
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5584: LD_VAR 0 2
5588: PPUSH
5589: CALL_OW 310
5593: PPUSH
5594: CALL_OW 266
5598: PUSH
5599: LD_INT 32
5601: EQUAL
5602: IFFALSE 5606
// continue ;
5604: GO 5581
// ComExit ( un ) ;
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL 47984 0 1
// AddComEnterUnit ( un , building ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 180
// break ;
5629: GO 5633
// end ;
5631: GO 5581
5633: POP
5634: POP
// if labT1 = false then
5635: LD_VAR 0 6
5639: PUSH
5640: LD_INT 0
5642: EQUAL
5643: IFFALSE 5665
// begin labT1 = true ;
5645: LD_ADDR_VAR 0 6
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5653: LD_EXP 61
5657: PPUSH
5658: LD_INT 10
5660: PPUSH
5661: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and kaganReady = false then
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 255
5674: PUSH
5675: LD_INT 3
5677: EQUAL
5678: PUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 266
5688: PUSH
5689: LD_INT 0
5691: EQUAL
5692: AND
5693: PUSH
5694: LD_VAR 0 7
5698: PUSH
5699: LD_INT 0
5701: EQUAL
5702: AND
5703: IFFALSE 5725
// begin SetBName ( building , kagan ) ;
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_STRING kagan
5712: PPUSH
5713: CALL_OW 500
// kaganReady = true ;
5717: LD_ADDR_VAR 0 7
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// end ; end ;
5725: PPOPN 7
5727: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
5728: LD_VAR 0 1
5732: PUSH
5733: LD_EXP 43
5737: EQUAL
5738: IFFALSE 5747
// YouLost ( Burlak ) ;
5740: LD_STRING Burlak
5742: PPUSH
5743: CALL_OW 104
// if un = beriaDepot then
5747: LD_VAR 0 1
5751: PUSH
5752: LD_EXP 53
5756: EQUAL
5757: IFFALSE 5766
// YouLost ( Omicron ) ;
5759: LD_STRING Omicron
5761: PPUSH
5762: CALL_OW 104
// end ;
5766: PPOPN 1
5768: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers ;
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// begin if GetSide ( building ) = 3 then
5776: LD_VAR 0 1
5780: PPUSH
5781: CALL_OW 255
5785: PUSH
5786: LD_INT 3
5788: EQUAL
5789: IFFALSE 6224
// begin dialog_workshop = true ;
5791: LD_ADDR_EXP 16
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
5799: LD_INT 22
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 26
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: NOT
5828: IFFALSE 6217
// begin CenterNowOnUnits ( building ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: CALL_OW 87
// DialogueOn ;
5839: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
5843: LD_EXP 43
5847: PPUSH
5848: LD_STRING D3aa-Bur-1
5850: PPUSH
5851: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
5855: LD_EXP 67
5859: PPUSH
5860: CALL_OW 302
5864: PUSH
5865: LD_EXP 67
5869: PPUSH
5870: CALL_OW 255
5874: PUSH
5875: LD_INT 3
5877: EQUAL
5878: AND
5879: IFFALSE 5895
// Say ( Scholtze , D3aa-Sch-1 ) else
5881: LD_EXP 67
5885: PPUSH
5886: LD_STRING D3aa-Sch-1
5888: PPUSH
5889: CALL_OW 88
5893: GO 6201
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5895: LD_ADDR_VAR 0 5
5899: PUSH
5900: LD_INT 22
5902: PUSH
5903: LD_INT 3
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 21
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 4
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 26
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 50
5942: PUSH
5943: EMPTY
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: PPUSH
5953: CALL_OW 69
5957: PUSH
5958: LD_EXP 43
5962: PUSH
5963: LD_EXP 44
5967: PUSH
5968: LD_EXP 46
5972: PUSH
5973: LD_EXP 47
5977: PUSH
5978: LD_EXP 48
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: DIFF
5990: ST_TO_ADDR
// if maleSci then
5991: LD_VAR 0 5
5995: IFFALSE 6015
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
5997: LD_VAR 0 5
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_STRING D3aa-Sci1-1
6008: PPUSH
6009: CALL_OW 88
6013: GO 6201
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_INT 22
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 21
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: LD_INT 26
6042: PUSH
6043: LD_INT 1
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 50
6052: PUSH
6053: EMPTY
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 69
6066: PUSH
6067: LD_EXP 43
6071: PUSH
6072: LD_EXP 44
6076: PUSH
6077: LD_EXP 46
6081: PUSH
6082: LD_EXP 47
6086: PUSH
6087: LD_EXP 48
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: DIFF
6099: ST_TO_ADDR
// if maleOthers then
6100: LD_VAR 0 6
6104: IFFALSE 6124
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
6106: LD_VAR 0 6
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PPUSH
6115: LD_STRING D3aa-Sci1-1
6117: PPUSH
6118: CALL_OW 88
6122: GO 6201
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
6124: LD_ADDR_VAR 0 6
6128: PUSH
6129: LD_INT 22
6131: PUSH
6132: LD_INT 3
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 21
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 26
6151: PUSH
6152: LD_INT 1
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 50
6161: PUSH
6162: EMPTY
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PPUSH
6171: CALL_OW 69
6175: PUSH
6176: LD_EXP 43
6180: PUSH
6181: EMPTY
6182: LIST
6183: DIFF
6184: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6185: LD_VAR 0 6
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: PPUSH
6194: LD_STRING D3aa-Sci1-1
6196: PPUSH
6197: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6201: LD_EXP 43
6205: PPUSH
6206: LD_STRING D3aa-Bur-2
6208: PPUSH
6209: CALL_OW 88
// DialogueOff ;
6213: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6217: LD_STRING M3
6219: PPUSH
6220: CALL_OW 337
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 255
6233: PUSH
6234: LD_INT 6
6236: EQUAL
6237: PUSH
6238: LD_EXP 2
6242: PPUSH
6243: CALL 51313 0 1
6247: PUSH
6248: LD_INT 0
6250: GREATER
6251: AND
6252: IFFALSE 6342
// begin if comArray [ 1 ] = kirovLab then
6254: LD_EXP 2
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: PUSH
6263: LD_EXP 61
6267: EQUAL
6268: IFFALSE 6288
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6270: LD_EXP 2
6274: PUSH
6275: LD_INT 1
6277: ARRAY
6278: PPUSH
6279: LD_INT 10
6281: PPUSH
6282: CALL_OW 207
6286: GO 6301
// AddComUpgrade ( comArray [ 1 ] ) ;
6288: LD_EXP 2
6292: PUSH
6293: LD_INT 1
6295: ARRAY
6296: PPUSH
6297: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6301: LD_ADDR_EXP 2
6305: PUSH
6306: LD_EXP 2
6310: PUSH
6311: LD_EXP 2
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: DIFF
6320: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6321: LD_INT 35
6323: PPUSH
6324: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6328: LD_EXP 70
6332: PPUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL 18764 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 255
6351: PUSH
6352: LD_INT 6
6354: EQUAL
6355: PUSH
6356: LD_VAR 0 1
6360: PPUSH
6361: CALL_OW 266
6365: PUSH
6366: LD_INT 3
6368: EQUAL
6369: AND
6370: PUSH
6371: LD_VAR 0 1
6375: PPUSH
6376: CALL_OW 266
6380: PUSH
6381: LD_INT 2
6383: EQUAL
6384: OR
6385: IFFALSE 6480
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_INT 22
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 21
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 30
6414: PUSH
6415: LD_INT 32
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 69
6431: ST_TO_ADDR
// for i in un do
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_VAR 0 3
6441: PUSH
6442: FOR_IN
6443: IFFALSE 6478
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6445: LD_VAR 0 2
6449: PPUSH
6450: LD_INT 42
6452: PUSH
6453: LD_INT 43
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: PUSH
6460: LD_INT 1
6462: PPUSH
6463: LD_INT 2
6465: PPUSH
6466: CALL_OW 12
6470: ARRAY
6471: PPUSH
6472: CALL_OW 208
6476: GO 6442
6478: POP
6479: POP
// end ; end ;
6480: PPOPN 6
6482: END
// on BuildingStarted ( building , hum ) do var un , i ;
6483: LD_INT 0
6485: PPUSH
6486: PPUSH
// begin AddComComplete ( kirovEngs , building ) ;
6487: LD_EXP 70
6491: PPUSH
6492: LD_VAR 0 1
6496: PPUSH
6497: CALL 18764 0 2
// end ; end_of_file
6501: PPOPN 4
6503: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople ; begin
6504: LD_INT 0
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
// InGameOn ;
6510: CALL_OW 8
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6514: LD_EXP 43
6518: PUSH
6519: LD_EXP 55
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
6532: LD_ADDR_EXP 87
6536: PUSH
6537: LD_INT 350
6539: PUSH
6540: LD_INT 31500
6542: PUSH
6543: LD_INT 42000
6545: PUSH
6546: LD_INT 52500
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
6555: LD_ADDR_EXP 83
6559: PUSH
6560: LD_STRING D3a-RSol1-1
6562: PUSH
6563: LD_STRING D3b-RSol1-1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: ST_TO_ADDR
// if not Belkov then
6570: LD_EXP 47
6574: NOT
6575: IFFALSE 6651
// begin Say ( Kurin , D1a-Kur-1 ) ;
6577: LD_EXP 55
6581: PPUSH
6582: LD_STRING D1a-Kur-1
6584: PPUSH
6585: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
6589: LD_EXP 43
6593: PPUSH
6594: LD_STRING D1a-Bur-1
6596: PPUSH
6597: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6601: LD_EXP 55
6605: PPUSH
6606: LD_STRING D1a-Kur-2
6608: PPUSH
6609: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6613: LD_EXP 55
6617: PPUSH
6618: LD_STRING D1a-Kur-2a
6620: PPUSH
6621: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6625: LD_EXP 55
6629: PPUSH
6630: LD_STRING D1a-Kur-2b
6632: PPUSH
6633: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6637: LD_EXP 43
6641: PPUSH
6642: LD_STRING D1a-Bur-2
6644: PPUSH
6645: CALL_OW 88
// end else
6649: GO 6687
// begin Say ( Kurin , D1b-Kur-1 ) ;
6651: LD_EXP 55
6655: PPUSH
6656: LD_STRING D1b-Kur-1
6658: PPUSH
6659: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6663: LD_EXP 47
6667: PPUSH
6668: LD_STRING D1b-Bel-1
6670: PPUSH
6671: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6675: LD_EXP 55
6679: PPUSH
6680: LD_STRING D1b-Kur-2
6682: PPUSH
6683: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6687: LD_EXP 55
6691: PPUSH
6692: LD_STRING D2-Kur-1
6694: PPUSH
6695: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6699: LD_EXP 43
6703: PPUSH
6704: LD_STRING D2-Bur-1
6706: PPUSH
6707: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6711: LD_EXP 55
6715: PPUSH
6716: LD_STRING D2-Kur-2
6718: PPUSH
6719: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6723: LD_EXP 43
6727: PPUSH
6728: LD_STRING D2-Bur-2
6730: PPUSH
6731: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6735: LD_EXP 55
6739: PPUSH
6740: LD_STRING D2-Kur-3
6742: PPUSH
6743: CALL_OW 88
// PrepareAmericansMissionIntro ;
6747: CALL 2491 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6751: LD_INT 1
6753: PPUSH
6754: LD_INT 6
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6767: LD_INT 3
6769: PPUSH
6770: LD_INT 5
6772: PPUSH
6773: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6777: LD_EXP 56
6781: PUSH
6782: LD_EXP 65
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 87
// wait ( 0 0$3 ) ;
6795: LD_INT 105
6797: PPUSH
6798: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6802: LD_EXP 56
6806: PPUSH
6807: LD_STRING D2-Pop-3
6809: PPUSH
6810: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6814: LD_INT 10
6816: PPUSH
6817: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6821: LD_EXP 43
6825: PUSH
6826: LD_EXP 55
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6839: LD_EXP 55
6843: PPUSH
6844: LD_STRING D2-Kur-4
6846: PPUSH
6847: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6851: LD_EXP 43
6855: PPUSH
6856: LD_STRING D2-Bur-4
6858: PPUSH
6859: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
6863: LD_EXP 55
6867: PPUSH
6868: LD_STRING D2-Kur-5
6870: PPUSH
6871: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
6875: LD_EXP 43
6879: PPUSH
6880: LD_STRING D2-Bur-5
6882: PPUSH
6883: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
6887: LD_EXP 55
6891: PPUSH
6892: LD_STRING D2-Kur-6
6894: PPUSH
6895: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6899: LD_EXP 43
6903: PPUSH
6904: LD_STRING D2-Bur-4
6906: PPUSH
6907: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
6911: LD_ADDR_EXP 82
6915: PUSH
6916: LD_EXP 57
6920: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
6921: LD_ADDR_EXP 82
6925: PUSH
6926: LD_EXP 82
6930: PUSH
6931: LD_EXP 51
6935: ADD
6936: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
6937: LD_ADDR_VAR 0 4
6941: PUSH
6942: LD_STRING text
6944: PPUSH
6945: LD_INT 6
6947: PPUSH
6948: LD_INT 6
6950: PPUSH
6951: LD_INT -5
6953: PUSH
6954: LD_EXP 43
6958: PUSH
6959: LD_EXP 44
6963: PUSH
6964: LD_EXP 46
6968: PUSH
6969: LD_EXP 45
6973: PUSH
6974: LD_EXP 47
6978: PUSH
6979: LD_INT -6
6981: PUSH
6982: LD_INT -2
6984: PUSH
6985: LD_INT -3
6987: PUSH
6988: LD_INT -5
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: LD_EXP 82
7007: ADD
7008: PUSH
7009: LD_INT -6
7011: PUSH
7012: LD_INT -4
7014: PUSH
7015: LD_EXP 55
7019: PUSH
7020: LD_EXP 56
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: ADD
7031: PPUSH
7032: LD_INT 1
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: LD_INT 2
7040: PUSH
7041: LD_INT 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 4
7050: PUSH
7051: LD_INT 1
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 42
7068: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
7069: LD_EXP 82
7073: PPUSH
7074: LD_INT 6
7076: PPUSH
7077: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7081: LD_VAR 0 4
7085: PPUSH
7086: LD_INT 3
7088: PPUSH
7089: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
7093: LD_EXP 56
7097: PPUSH
7098: LD_INT 135
7100: PPUSH
7101: LD_INT 67
7103: PPUSH
7104: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
7108: LD_EXP 65
7112: PPUSH
7113: LD_INT 209
7115: PPUSH
7116: LD_INT 164
7118: PPUSH
7119: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
7123: LD_ADDR_EXP 62
7127: PUSH
7128: LD_INT 22
7130: PUSH
7131: LD_INT 6
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 4
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 69
7156: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7157: LD_ADDR_EXP 82
7161: PUSH
7162: LD_EXP 82
7166: PUSH
7167: LD_VAR 0 4
7171: DIFF
7172: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7173: LD_EXP 82
7177: PUSH
7178: LD_INT 1
7180: ARRAY
7181: PPUSH
7182: LD_INT 2
7184: PPUSH
7185: CALL_OW 336
// for i := 2 to 3 do
7189: LD_ADDR_VAR 0 2
7193: PUSH
7194: DOUBLE
7195: LD_INT 2
7197: DEC
7198: ST_TO_ADDR
7199: LD_INT 3
7201: PUSH
7202: FOR_TO
7203: IFFALSE 7225
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7205: LD_EXP 82
7209: PUSH
7210: LD_VAR 0 2
7214: ARRAY
7215: PPUSH
7216: LD_INT 3
7218: PPUSH
7219: CALL_OW 336
7223: GO 7202
7225: POP
7226: POP
// for un in selectedPeople do
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_VAR 0 4
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7251
// ComExitBuilding ( un ) ;
7240: LD_VAR 0 3
7244: PPUSH
7245: CALL_OW 122
7249: GO 7237
7251: POP
7252: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7253: LD_ADDR_EXP 81
7257: PUSH
7258: LD_VAR 0 4
7262: PUSH
7263: LD_EXP 43
7267: PUSH
7268: LD_EXP 44
7272: PUSH
7273: LD_EXP 46
7277: PUSH
7278: LD_EXP 47
7282: PUSH
7283: LD_EXP 45
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: UNION
7295: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7296: LD_EXP 81
7300: PPUSH
7301: LD_INT 113
7303: PPUSH
7304: LD_INT 97
7306: PPUSH
7307: CALL_OW 171
// for un in kirovBaseUnits do
7311: LD_ADDR_VAR 0 3
7315: PUSH
7316: LD_EXP 82
7320: PUSH
7321: FOR_IN
7322: IFFALSE 7359
// begin if IsInUnit ( un ) = 0 then
7324: LD_VAR 0 3
7328: PPUSH
7329: CALL_OW 310
7333: PUSH
7334: LD_INT 0
7336: EQUAL
7337: IFFALSE 7357
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7339: LD_VAR 0 3
7343: PPUSH
7344: LD_EXP 62
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// end ;
7357: GO 7321
7359: POP
7360: POP
// ChangeMissionObjectives ( M1 ) ;
7361: LD_STRING M1
7363: PPUSH
7364: CALL_OW 337
// Query ( QReadyInfo ) ;
7368: LD_STRING QReadyInfo
7370: PPUSH
7371: CALL_OW 97
// counterEnable := true ;
7375: LD_ADDR_EXP 84
7379: PUSH
7380: LD_INT 1
7382: ST_TO_ADDR
// SaveForQuickRestart ;
7383: CALL_OW 22
// wait ( 0 0$5 ) ;
7387: LD_INT 175
7389: PPUSH
7390: CALL_OW 67
// InGameOff ;
7394: CALL_OW 9
// for un in kirovBaseUnits do
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: LD_EXP 82
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7462
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7411: LD_VAR 0 3
7415: PPUSH
7416: CALL_OW 310
7420: PUSH
7421: LD_INT 0
7423: EQUAL
7424: PUSH
7425: LD_VAR 0 3
7429: PPUSH
7430: CALL_OW 257
7434: PUSH
7435: LD_INT 2
7437: EQUAL
7438: NOT
7439: AND
7440: IFFALSE 7460
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7442: LD_VAR 0 3
7446: PPUSH
7447: LD_EXP 62
7451: PUSH
7452: LD_INT 2
7454: ARRAY
7455: PPUSH
7456: CALL_OW 120
// end ;
7460: GO 7408
7462: POP
7463: POP
// UpgradeKirovBase ;
7464: CALL 1873 0 0
// end ;
7468: LD_VAR 0 1
7472: RET
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7473: LD_EXP 84
7477: IFFALSE 8148
7479: GO 7481
7481: DISABLE
7482: LD_INT 0
7484: PPUSH
7485: PPUSH
7486: PPUSH
// begin enable ;
7487: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
7488: LD_ADDR_VAR 0 1
7492: PUSH
7493: LD_INT 22
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 21
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 34
7518: PUSH
7519: LD_INT 51
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
7540: LD_ADDR_VAR 0 2
7544: PUSH
7545: LD_INT 22
7547: PUSH
7548: LD_INT 3
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 21
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL_OW 69
7573: PUSH
7574: LD_EXP 34
7578: PLUS
7579: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
7580: LD_ADDR_EXP 86
7584: PUSH
7585: LD_EXP 86
7589: PUSH
7590: LD_INT 35
7592: PLUS
7593: ST_TO_ADDR
// VehNeeded = hum - veh ;
7594: LD_ADDR_EXP 39
7598: PUSH
7599: LD_VAR 0 2
7603: PUSH
7604: LD_VAR 0 1
7608: MINUS
7609: ST_TO_ADDR
// if VehNeeded < 0 then
7610: LD_EXP 39
7614: PUSH
7615: LD_INT 0
7617: LESS
7618: IFFALSE 7630
// enoughVehsForKirov = true else
7620: LD_ADDR_EXP 91
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
7628: GO 7638
// enoughVehsForKirov = false ;
7630: LD_ADDR_EXP 91
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
7638: LD_ADDR_EXP 89
7642: PUSH
7643: LD_EXP 89
7647: PUSH
7648: LD_INT 35
7650: MINUS
7651: ST_TO_ADDR
// case counterIndex of 1 :
7652: LD_EXP 85
7656: PUSH
7657: LD_INT 1
7659: DOUBLE
7660: EQUAL
7661: IFTRUE 7665
7663: GO 7748
7665: POP
// begin if VehNeeded <= 0 then
7666: LD_EXP 39
7670: PUSH
7671: LD_INT 0
7673: LESSEQUAL
7674: IFFALSE 7702
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7676: LD_ADDR_OWVAR 47
7680: PUSH
7681: LD_STRING #Ru03-5a
7683: PUSH
7684: EMPTY
7685: LIST
7686: PUSH
7687: LD_STRING #Ru03-4
7689: PUSH
7690: LD_EXP 88
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: ADD
7699: ST_TO_ADDR
7700: GO 7732
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7702: LD_ADDR_OWVAR 47
7706: PUSH
7707: LD_STRING #Ru03-5
7709: PUSH
7710: LD_EXP 39
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_STRING #Ru03-4
7721: PUSH
7722: LD_EXP 88
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: ADD
7731: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7732: LD_ADDR_EXP 88
7736: PUSH
7737: LD_EXP 88
7741: PUSH
7742: LD_INT 35
7744: MINUS
7745: ST_TO_ADDR
// end ; 2 :
7746: GO 7875
7748: LD_INT 2
7750: DOUBLE
7751: EQUAL
7752: IFTRUE 7756
7754: GO 7790
7756: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7757: LD_ADDR_OWVAR 47
7761: PUSH
7762: LD_STRING #Ru03-1
7764: PUSH
7765: LD_EXP 23
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7774: LD_ADDR_EXP 23
7778: PUSH
7779: LD_EXP 23
7783: PUSH
7784: LD_INT 35
7786: MINUS
7787: ST_TO_ADDR
// end ; 3 :
7788: GO 7875
7790: LD_INT 3
7792: DOUBLE
7793: EQUAL
7794: IFTRUE 7798
7796: GO 7832
7798: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7799: LD_ADDR_OWVAR 47
7803: PUSH
7804: LD_STRING #Ru03-2
7806: PUSH
7807: LD_EXP 23
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7816: LD_ADDR_EXP 23
7820: PUSH
7821: LD_EXP 23
7825: PUSH
7826: LD_INT 35
7828: MINUS
7829: ST_TO_ADDR
// end ; 4 :
7830: GO 7875
7832: LD_INT 4
7834: DOUBLE
7835: EQUAL
7836: IFTRUE 7840
7838: GO 7874
7840: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7841: LD_ADDR_OWVAR 47
7845: PUSH
7846: LD_STRING #Ru03-3
7848: PUSH
7849: LD_EXP 22
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
7858: LD_ADDR_EXP 22
7862: PUSH
7863: LD_EXP 22
7867: PUSH
7868: LD_INT 35
7870: MINUS
7871: ST_TO_ADDR
// end ; end ;
7872: GO 7875
7874: POP
// if ticks = convoyTime [ 1 ] then
7875: LD_EXP 86
7879: PUSH
7880: LD_EXP 87
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: EQUAL
7889: IFFALSE 8148
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
7891: LD_EXP 66
7895: PPUSH
7896: LD_EXP 83
7900: PUSH
7901: LD_INT 1
7903: ARRAY
7904: PPUSH
7905: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
7909: LD_EXP 83
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PUSH
7918: LD_STRING D3a-RSol1-1
7920: EQUAL
7921: IFFALSE 8025
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
7923: LD_EXP 43
7927: PPUSH
7928: LD_STRING D3a-Bur-1
7930: PPUSH
7931: CALL_OW 94
// if IsOk ( Gnyevko ) then
7935: LD_EXP 44
7939: PPUSH
7940: CALL_OW 302
7944: IFFALSE 7958
// Say ( Gnyevko , D3b-Gny-1 ) ;
7946: LD_EXP 44
7950: PPUSH
7951: LD_STRING D3b-Gny-1
7953: PPUSH
7954: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
7958: LD_EXP 43
7962: PPUSH
7963: LD_STRING D3b-Bur-1
7965: PPUSH
7966: CALL_OW 88
// if IsOK ( Kovalyuk ) then
7970: LD_EXP 46
7974: PPUSH
7975: CALL_OW 302
7979: IFFALSE 7993
// Say ( Kovalyuk , D3b-Kov-1 ) ;
7981: LD_EXP 46
7985: PPUSH
7986: LD_STRING D3b-Kov-1
7988: PPUSH
7989: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
7993: LD_EXP 66
7997: PPUSH
7998: LD_STRING D3b-Rsol1-2
8000: PPUSH
8001: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
8005: LD_ADDR_EXP 83
8009: PUSH
8010: LD_EXP 83
8014: PUSH
8015: LD_EXP 83
8019: PUSH
8020: LD_INT 1
8022: ARRAY
8023: DIFF
8024: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
8025: LD_EXP 75
8029: PUSH
8030: LD_INT 1
8032: ARRAY
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: LD_EXP 75
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PUSH
8047: LD_INT 2
8049: ARRAY
8050: PPUSH
8051: LD_EXP 75
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PUSH
8060: LD_INT 3
8062: ARRAY
8063: PPUSH
8064: LD_EXP 75
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PUSH
8073: LD_INT 4
8075: ARRAY
8076: PPUSH
8077: LD_EXP 75
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PUSH
8086: LD_INT 5
8088: ARRAY
8089: PPUSH
8090: LD_INT 6
8092: PPUSH
8093: CALL 4457 0 6
// PrepareAttackOnRus ( ) ;
8097: CALL 5269 0 0
// wait ( 0 0$1 ) ;
8101: LD_INT 35
8103: PPUSH
8104: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
8108: LD_ADDR_EXP 75
8112: PUSH
8113: LD_EXP 75
8117: PUSH
8118: LD_EXP 75
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: DIFF
8127: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
8128: LD_ADDR_EXP 87
8132: PUSH
8133: LD_EXP 87
8137: PUSH
8138: LD_EXP 87
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: DIFF
8147: ST_TO_ADDR
// end ; end ;
8148: PPOPN 3
8150: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
8151: LD_INT 78
8153: PPUSH
8154: LD_INT 112
8156: PPUSH
8157: LD_INT 3
8159: PPUSH
8160: CALL_OW 440
8164: IFFALSE 8218
8166: GO 8168
8168: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
8169: LD_INT 78
8171: PPUSH
8172: LD_INT 112
8174: PPUSH
8175: CALL_OW 84
// DialogueOn ;
8179: CALL_OW 6
// SayRadio ( Burlak , D2a-Bur-1 ) ;
8183: LD_EXP 43
8187: PPUSH
8188: LD_STRING D2a-Bur-1
8190: PPUSH
8191: CALL_OW 94
// SayRadio ( Kurin , D2a-Kur-1 ) ;
8195: LD_EXP 55
8199: PPUSH
8200: LD_STRING D2a-Kur-1
8202: PPUSH
8203: CALL_OW 94
// DialogueOff ;
8207: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8211: LD_STRING M2
8213: PPUSH
8214: CALL_OW 337
// end ;
8218: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
8219: LD_EXP 79
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 700
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: PUSH
8246: LD_EXP 74
8250: PPUSH
8251: LD_INT 3
8253: PUSH
8254: LD_INT 24
8256: PUSH
8257: LD_INT 700
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PPUSH
8268: CALL_OW 72
8272: OR
8273: IFFALSE 8520
8275: GO 8277
8277: DISABLE
8278: LD_INT 0
8280: PPUSH
// begin enable ;
8281: ENABLE
// for i := 1 to amVehs do
8282: LD_ADDR_VAR 0 1
8286: PUSH
8287: DOUBLE
8288: LD_INT 1
8290: DEC
8291: ST_TO_ADDR
8292: LD_EXP 79
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8341
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8300: LD_EXP 79
8304: PUSH
8305: LD_VAR 0 1
8309: ARRAY
8310: PPUSH
8311: CALL_OW 256
8315: PUSH
8316: LD_INT 700
8318: LESSEQUAL
8319: IFFALSE 8339
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8321: LD_EXP 79
8325: PUSH
8326: LD_VAR 0 1
8330: ARRAY
8331: PPUSH
8332: LD_INT 10
8334: PPUSH
8335: CALL_OW 113
// end ;
8339: GO 8297
8341: POP
8342: POP
// for i := 1 to amIntroUnits and GetLives ( i ) <= 700 do
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: DOUBLE
8349: LD_INT 1
8351: DEC
8352: ST_TO_ADDR
8353: LD_EXP 74
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 256
8367: PUSH
8368: LD_INT 700
8370: LESSEQUAL
8371: AND
8372: PUSH
8373: FOR_TO
8374: IFFALSE 8417
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8376: LD_EXP 74
8380: PUSH
8381: LD_VAR 0 1
8385: ARRAY
8386: PPUSH
8387: CALL_OW 256
8391: PUSH
8392: LD_INT 700
8394: LESSEQUAL
8395: IFFALSE 8415
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8397: LD_EXP 74
8401: PUSH
8402: LD_VAR 0 1
8406: ARRAY
8407: PPUSH
8408: LD_INT 10
8410: PPUSH
8411: CALL_OW 113
// end ;
8415: GO 8373
8417: POP
8418: POP
// for i in amIntroUnits do
8419: LD_ADDR_VAR 0 1
8423: PUSH
8424: LD_EXP 74
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8475
// begin if IsInArea ( i , amRetreatArea ) and GetLives ( i ) <= 700 then
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 10
8439: PPUSH
8440: CALL_OW 308
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 256
8454: PUSH
8455: LD_INT 700
8457: LESSEQUAL
8458: AND
8459: IFFALSE 8473
// SetLives ( i , 1000 ) ;
8461: LD_VAR 0 1
8465: PPUSH
8466: LD_INT 1000
8468: PPUSH
8469: CALL_OW 234
// end ;
8473: GO 8429
8475: POP
8476: POP
// for i in amVehs do
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_EXP 79
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8518
// begin if IsInArea ( i , amRetreatArea ) then
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_INT 10
8497: PPUSH
8498: CALL_OW 308
8502: IFFALSE 8516
// SetLives ( i , 1000 ) ;
8504: LD_VAR 0 1
8508: PPUSH
8509: LD_INT 1000
8511: PPUSH
8512: CALL_OW 234
// end ;
8516: GO 8487
8518: POP
8519: POP
// end ;
8520: PPOPN 1
8522: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
8523: LD_EXP 18
8527: NOT
8528: IFFALSE 8736
8530: GO 8532
8532: DISABLE
8533: LD_INT 0
8535: PPUSH
// begin enable ;
8536: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
8537: LD_ADDR_VAR 0 1
8541: PUSH
8542: LD_INT 22
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 21
8554: PUSH
8555: LD_INT 2
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 23
8564: PUSH
8565: LD_INT 3
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 31
8577: PUSH
8578: LD_INT 21
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 31
8587: PUSH
8588: LD_INT 23
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 69
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8734
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 48
8621: PPUSH
8622: LD_INT 81
8624: PPUSH
8625: CALL_OW 297
8629: PUSH
8630: LD_INT 7
8632: LESS
8633: IFFALSE 8732
// begin dialog_track = true ;
8635: LD_ADDR_EXP 18
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
8643: LD_INT 48
8645: PPUSH
8646: LD_INT 81
8648: PPUSH
8649: CALL_OW 86
// DialogueOn ;
8653: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8657: LD_EXP 43
8661: PPUSH
8662: LD_STRING D5a-Bur-1
8664: PPUSH
8665: CALL_OW 88
// DialogueOff ;
8669: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
8673: LD_INT 82
8675: PPUSH
8676: LD_INT 3
8678: PPUSH
8679: CALL_OW 321
8683: PUSH
8684: LD_INT 0
8686: EQUAL
8687: IFFALSE 8702
// SetTech ( 82 , 3 , state_enabled ) ;
8689: LD_INT 82
8691: PPUSH
8692: LD_INT 3
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
8702: LD_INT 84
8704: PPUSH
8705: LD_INT 3
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
8715: LD_INT 16
8717: PPUSH
8718: LD_INT 3
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: CALL_OW 324
// exit ;
8728: POP
8729: POP
8730: GO 8736
// end ;
8732: GO 8611
8734: POP
8735: POP
// end ;
8736: PPOPN 1
8738: END
// every 5 5$30 do
8739: GO 8741
8741: DISABLE
// begin PrepareScholtze ;
8742: CALL 2434 0 0
// wait ( 0 0$2 ) ;
8746: LD_INT 70
8748: PPUSH
8749: CALL_OW 67
// DialogueOn ;
8753: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
8757: LD_EXP 68
8761: PPUSH
8762: LD_STRING D4-Sch-1
8764: PPUSH
8765: CALL 51441 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
8769: LD_EXP 43
8773: PPUSH
8774: LD_STRING D4-Bur-1
8776: PPUSH
8777: CALL_OW 94
// DialogueOff ;
8781: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
8785: LD_STRING M4
8787: PPUSH
8788: CALL_OW 337
// ComHold ( Scholtze ) ;
8792: LD_EXP 67
8796: PPUSH
8797: CALL_OW 140
// scholtzeSpawned = true ;
8801: LD_ADDR_EXP 14
8805: PUSH
8806: LD_INT 1
8808: ST_TO_ADDR
// end ;
8809: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
8810: LD_INT 3
8812: PPUSH
8813: LD_EXP 67
8817: PPUSH
8818: CALL_OW 292
8822: PUSH
8823: LD_EXP 14
8827: AND
8828: PUSH
8829: LD_EXP 15
8833: NOT
8834: AND
8835: IFFALSE 9001
8837: GO 8839
8839: DISABLE
// begin scholtzeSaved = true ;
8840: LD_ADDR_EXP 15
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
8848: LD_EXP 67
8852: PPUSH
8853: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
8857: LD_EXP 67
8861: PPUSH
8862: LD_INT 3
8864: PPUSH
8865: CALL_OW 235
// DialogueOn ;
8869: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
8873: LD_EXP 67
8877: PPUSH
8878: LD_STRING D4a-Sch-1
8880: PPUSH
8881: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
8885: LD_EXP 43
8889: PPUSH
8890: LD_STRING D4a-Bur-1
8892: PPUSH
8893: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
8897: LD_EXP 67
8901: PPUSH
8902: LD_STRING D4a-Sch-2
8904: PPUSH
8905: CALL_OW 88
// DialogueOff ;
8909: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
8913: LD_STRING MScholtzeOut
8915: PPUSH
8916: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
8920: LD_INT 49
8922: PPUSH
8923: LD_INT 3
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
8933: LD_INT 51
8935: PPUSH
8936: LD_INT 3
8938: PPUSH
8939: LD_INT 1
8941: PPUSH
8942: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
8946: LD_INT 82
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 321
8956: PUSH
8957: LD_INT 0
8959: EQUAL
8960: IFFALSE 8975
// SetTech ( 82 , 3 , state_enabled ) ;
8962: LD_INT 82
8964: PPUSH
8965: LD_INT 3
8967: PPUSH
8968: LD_INT 1
8970: PPUSH
8971: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
8975: LD_INT 83
8977: PPUSH
8978: LD_INT 3
8980: PPUSH
8981: LD_INT 1
8983: PPUSH
8984: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
8988: LD_INT 19
8990: PPUSH
8991: LD_INT 3
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: CALL_OW 324
// end ;
9001: END
// every 0 0$30 do
9002: GO 9004
9004: DISABLE
// begin enable ;
9005: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesSpawn , true ) ;
9006: LD_INT 3
9008: PPUSH
9009: LD_INT 5
9011: PPUSH
9012: CALL_OW 12
9016: PPUSH
9017: LD_INT 15
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 55
// end ;
9027: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
9028: LD_EXP 27
9032: NOT
9033: IFFALSE 9328
9035: GO 9037
9037: DISABLE
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
9046: PPUSH
// begin enable ;
9047: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
9048: LD_ADDR_VAR 0 2
9052: PUSH
9053: LD_INT 8
9055: PPUSH
9056: LD_INT 22
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 2
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 70
9113: PUSH
9114: FOR_IN
9115: IFFALSE 9326
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
9117: LD_VAR 0 2
9121: PPUSH
9122: LD_INT 22
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 21
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PPUSH
9169: LD_VAR 0 2
9173: PPUSH
9174: CALL_OW 74
9178: PPUSH
9179: CALL_OW 296
9183: PUSH
9184: LD_INT 17
9186: LESS
9187: IFFALSE 9324
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
9189: LD_INT 22
9191: PUSH
9192: LD_INT 3
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 2
9201: PUSH
9202: LD_INT 21
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 21
9214: PUSH
9215: LD_INT 2
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: PPUSH
9236: LD_VAR 0 2
9240: PPUSH
9241: CALL_OW 74
9245: PPUSH
9246: LD_INT 114
9248: PPUSH
9249: LD_INT 98
9251: PPUSH
9252: CALL_OW 111
// if not dialog_stop then
9256: LD_EXP 19
9260: NOT
9261: IFFALSE 9324
// begin dialog_stop = true ;
9263: LD_ADDR_EXP 19
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if not IsOK ( Gnyevko ) then
9271: LD_EXP 44
9275: PPUSH
9276: CALL_OW 302
9280: NOT
9281: IFFALSE 9297
// SayRadio ( Kurin , D11-Kur-1 ) else
9283: LD_EXP 55
9287: PPUSH
9288: LD_STRING D11-Kur-1
9290: PPUSH
9291: CALL_OW 94
9295: GO 9309
// Say ( Gnyevko , D11-Gny-1 ) ;
9297: LD_EXP 44
9301: PPUSH
9302: LD_STRING D11-Gny-1
9304: PPUSH
9305: CALL_OW 88
// wait ( 0 0$5 ) ;
9309: LD_INT 175
9311: PPUSH
9312: CALL_OW 67
// dialog_stop = false ;
9316: LD_ADDR_EXP 19
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// end ; end ;
9324: GO 9114
9326: POP
9327: POP
// end ;
9328: PPOPN 7
9330: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
9331: LD_INT 3
9333: PPUSH
9334: LD_INT 13
9336: PPUSH
9337: CALL_OW 294
9341: PUSH
9342: LD_INT 6
9344: GREATEREQUAL
9345: PUSH
9346: LD_EXP 84
9350: AND
9351: IFFALSE 9522
9353: GO 9355
9355: DISABLE
9356: LD_INT 0
9358: PPUSH
// begin enable ;
9359: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9360: LD_ADDR_VAR 0 1
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 3
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9520
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
9415: LD_VAR 0 1
9419: PPUSH
9420: LD_INT 13
9422: PPUSH
9423: CALL_OW 308
9427: PUSH
9428: LD_VAR 0 1
9432: PPUSH
9433: LD_INT 21
9435: PUSH
9436: LD_INT 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PPUSH
9443: CALL_OW 72
9447: PUSH
9448: LD_VAR 0 1
9452: PPUSH
9453: CALL_OW 313
9457: OR
9458: AND
9459: IFFALSE 9518
// begin ComMoveXY ( unit , 120 , 98 ) ;
9461: LD_VAR 0 1
9465: PPUSH
9466: LD_INT 120
9468: PPUSH
9469: LD_INT 98
9471: PPUSH
9472: CALL_OW 111
// if not dialog_stop then
9476: LD_EXP 19
9480: NOT
9481: IFFALSE 9518
// begin dialog_stop = true ;
9483: LD_ADDR_EXP 19
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
9491: LD_EXP 55
9495: PPUSH
9496: LD_STRING D12-Kur-1
9498: PPUSH
9499: CALL_OW 88
// wait ( 0 0$5 ) ;
9503: LD_INT 175
9505: PPUSH
9506: CALL_OW 67
// dialog_stop = false ;
9510: LD_ADDR_EXP 19
9514: PUSH
9515: LD_INT 0
9517: ST_TO_ADDR
// end ; end ;
9518: GO 9412
9520: POP
9521: POP
// end ;
9522: PPOPN 1
9524: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
9525: LD_EXP 55
9529: PPUSH
9530: CALL_OW 306
9534: IFFALSE 9726
9536: GO 9538
9538: DISABLE
// begin if true then
9539: LD_INT 1
9541: IFFALSE 9725
// begin case Query ( QReadyToAttack ) of 1 :
9543: LD_STRING QReadyToAttack
9545: PPUSH
9546: CALL_OW 97
9550: PUSH
9551: LD_INT 1
9553: DOUBLE
9554: EQUAL
9555: IFTRUE 9559
9557: GO 9621
9559: POP
// begin DeselectUnits ( Kurin ) ;
9560: LD_EXP 55
9564: PPUSH
9565: CALL_OW 491
// SelectUnits ( Burlak ) ;
9569: LD_EXP 43
9573: PPUSH
9574: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
9578: LD_EXP 43
9582: PPUSH
9583: LD_STRING D6a-Bur-1
9585: PPUSH
9586: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9590: LD_EXP 55
9594: PPUSH
9595: LD_STRING D6a-Kur-1
9597: PPUSH
9598: CALL_OW 94
// meetNearOmicronBase = true ;
9602: LD_ADDR_EXP 27
9606: PUSH
9607: LD_INT 1
9609: ST_TO_ADDR
// kurinCheckVehicles = true ;
9610: LD_ADDR_EXP 26
9614: PUSH
9615: LD_INT 1
9617: ST_TO_ADDR
// disable ;
9618: DISABLE
// end ; 2 :
9619: GO 9725
9621: LD_INT 2
9623: DOUBLE
9624: EQUAL
9625: IFTRUE 9629
9627: GO 9695
9629: POP
// begin DeselectUnits ( Kurin ) ;
9630: LD_EXP 55
9634: PPUSH
9635: CALL_OW 491
// SelectUnits ( Burlak ) ;
9639: LD_EXP 43
9643: PPUSH
9644: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
9648: LD_EXP 43
9652: PPUSH
9653: LD_STRING D6b-Bur-1
9655: PPUSH
9656: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
9660: LD_EXP 55
9664: PPUSH
9665: LD_STRING D6b-Kur-1
9667: PPUSH
9668: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
9672: LD_EXP 43
9676: PPUSH
9677: LD_STRING D6b-Bur-2
9679: PPUSH
9680: CALL_OW 88
// meetNearOmicronBase = true ;
9684: LD_ADDR_EXP 27
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
// disable ;
9692: DISABLE
// end ; 3 :
9693: GO 9725
9695: LD_INT 3
9697: DOUBLE
9698: EQUAL
9699: IFTRUE 9703
9701: GO 9724
9703: POP
// begin DeselectUnits ( Kurin ) ;
9704: LD_EXP 55
9708: PPUSH
9709: CALL_OW 491
// SelectUnits ( Burlak ) ;
9713: LD_EXP 43
9717: PPUSH
9718: CALL_OW 490
// end ; end ;
9722: GO 9725
9724: POP
// end ; enable ;
9725: ENABLE
// end ;
9726: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
9727: LD_EXP 88
9731: PUSH
9732: LD_INT 35
9734: LESS
9735: IFFALSE 9963
9737: GO 9739
9739: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
9740: LD_EXP 55
9744: PPUSH
9745: CALL_OW 87
// InGameOn ;
9749: CALL_OW 8
// DialogueOn ;
9753: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
9757: LD_EXP 55
9761: PPUSH
9762: LD_STRING D5-Kur-1
9764: PPUSH
9765: CALL_OW 94
// case Query ( QVehicles ) of 1 :
9769: LD_STRING QVehicles
9771: PPUSH
9772: CALL_OW 97
9776: PUSH
9777: LD_INT 1
9779: DOUBLE
9780: EQUAL
9781: IFTRUE 9785
9783: GO 9828
9785: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
9786: LD_EXP 43
9790: PPUSH
9791: LD_STRING D6a-Bur-1
9793: PPUSH
9794: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9798: LD_EXP 55
9802: PPUSH
9803: LD_STRING D6a-Kur-1
9805: PPUSH
9806: CALL_OW 94
// meetNearOmicronBase = true ;
9810: LD_ADDR_EXP 27
9814: PUSH
9815: LD_INT 1
9817: ST_TO_ADDR
// kurinCheckVehicles = true ;
9818: LD_ADDR_EXP 26
9822: PUSH
9823: LD_INT 1
9825: ST_TO_ADDR
// end ; 2 :
9826: GO 9955
9828: LD_INT 2
9830: DOUBLE
9831: EQUAL
9832: IFTRUE 9836
9834: GO 9883
9836: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
9837: LD_EXP 43
9841: PPUSH
9842: LD_STRING D6b-Bur-1
9844: PPUSH
9845: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
9849: LD_EXP 55
9853: PPUSH
9854: LD_STRING D6b-Kur-1
9856: PPUSH
9857: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
9861: LD_EXP 43
9865: PPUSH
9866: LD_STRING D6b-Bur-2
9868: PPUSH
9869: CALL_OW 94
// meetNearOmicronBase = true ;
9873: LD_ADDR_EXP 27
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// end ; 3 :
9881: GO 9955
9883: LD_INT 3
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 9954
9891: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
9892: LD_EXP 43
9896: PPUSH
9897: LD_STRING D6c-Bur-1
9899: PPUSH
9900: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
9904: LD_EXP 55
9908: PPUSH
9909: LD_STRING D6c-Kur-1
9911: PPUSH
9912: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
9916: LD_EXP 43
9920: PPUSH
9921: LD_STRING D6c-Bur-2
9923: PPUSH
9924: CALL_OW 94
// kurinGiveMoreTime = true ;
9928: LD_ADDR_EXP 21
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// kurinOpinion = 0 ;
9936: LD_ADDR_EXP 10
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// counterIndex = 4 ;
9944: LD_ADDR_EXP 85
9948: PUSH
9949: LD_INT 4
9951: ST_TO_ADDR
// end ; end ;
9952: GO 9955
9954: POP
// InGameOff ;
9955: CALL_OW 9
// DialogueOff ;
9959: CALL_OW 7
// end ;
9963: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
9964: LD_EXP 22
9968: PUSH
9969: LD_INT 35
9971: LESS
9972: PUSH
9973: LD_EXP 21
9977: AND
9978: IFFALSE 10011
9980: GO 9982
9982: DISABLE
// begin DialogueOn ;
9983: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
9987: LD_EXP 55
9991: PPUSH
9992: LD_STRING D6c-Kur-2
9994: PPUSH
9995: CALL_OW 94
// DialogueOff ;
9999: CALL_OW 7
// meetNearOmicronBase = true ;
10003: LD_ADDR_EXP 27
10007: PUSH
10008: LD_INT 1
10010: ST_TO_ADDR
// end ;
10011: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
10012: LD_EXP 27
10016: IFFALSE 10515
10018: GO 10020
10020: DISABLE
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
// begin mechs = [ ] ;
10030: LD_ADDR_VAR 0 3
10034: PUSH
10035: EMPTY
10036: ST_TO_ADDR
// vehs = [ ] ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: EMPTY
10043: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10044: LD_ADDR_VAR 0 7
10048: PUSH
10049: LD_INT 22
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 23
10071: PUSH
10072: LD_INT 3
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 3
10081: PUSH
10082: LD_INT 34
10084: PUSH
10085: LD_INT 51
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: PUSH
10107: LD_INT 22
10109: PUSH
10110: LD_INT 3
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 21
10119: PUSH
10120: LD_INT 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: MINUS
10136: ST_TO_ADDR
// haveVehs = 0 ;
10137: LD_ADDR_VAR 0 5
10141: PUSH
10142: LD_INT 0
10144: ST_TO_ADDR
// uc_side = 6 ;
10145: LD_ADDR_OWVAR 20
10149: PUSH
10150: LD_INT 6
10152: ST_TO_ADDR
// uc_nation = 3 ;
10153: LD_ADDR_OWVAR 21
10157: PUSH
10158: LD_INT 3
10160: ST_TO_ADDR
// for i := 1 to freeVehs do
10161: LD_ADDR_VAR 0 1
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_VAR 0 7
10175: PUSH
10176: FOR_TO
10177: IFFALSE 10248
// begin PrepareMechanic ( false , 2 ) ;
10179: LD_INT 0
10181: PPUSH
10182: LD_INT 2
10184: PPUSH
10185: CALL_OW 383
// mech = CreateHuman ;
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: CALL_OW 44
10198: ST_TO_ADDR
// mechs = mechs ^ mech ;
10199: LD_ADDR_VAR 0 3
10203: PUSH
10204: LD_VAR 0 3
10208: PUSH
10209: LD_VAR 0 2
10213: ADD
10214: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
10215: LD_VAR 0 2
10219: PPUSH
10220: LD_INT 4
10222: PPUSH
10223: LD_INT 0
10225: PPUSH
10226: CALL_OW 49
// ComExitBuilding ( mech ) ;
10230: LD_VAR 0 2
10234: PPUSH
10235: CALL_OW 122
// wait ( 0 0$1 ) ;
10239: LD_INT 35
10241: PPUSH
10242: CALL_OW 67
// end ;
10246: GO 10176
10248: POP
10249: POP
// if enoughVehsForKirov and freeVehs > 0 then
10250: LD_EXP 91
10254: PUSH
10255: LD_VAR 0 7
10259: PUSH
10260: LD_INT 0
10262: GREATER
10263: AND
10264: IFFALSE 10482
// begin vehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
10266: LD_ADDR_VAR 0 4
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 21
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 23
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: LD_INT 34
10306: PUSH
10307: LD_INT 51
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 3
10320: PUSH
10321: LD_INT 59
10323: PUSH
10324: EMPTY
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: PPUSH
10338: CALL_OW 69
10342: ST_TO_ADDR
// for i := 1 to freeVehs do
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: DOUBLE
10349: LD_INT 1
10351: DEC
10352: ST_TO_ADDR
10353: LD_VAR 0 7
10357: PUSH
10358: FOR_TO
10359: IFFALSE 10385
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
10361: LD_ADDR_EXP 90
10365: PUSH
10366: LD_EXP 90
10370: PUSH
10371: LD_VAR 0 4
10375: PUSH
10376: LD_VAR 0 1
10380: ARRAY
10381: ADD
10382: ST_TO_ADDR
10383: GO 10358
10385: POP
10386: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
10387: LD_EXP 90
10391: PPUSH
10392: LD_INT 6
10394: PPUSH
10395: CALL_OW 235
// produceMoreVehicles = true ;
10399: LD_ADDR_EXP 24
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// for i := 1 to freeVehs do
10407: LD_ADDR_VAR 0 1
10411: PUSH
10412: DOUBLE
10413: LD_INT 1
10415: DEC
10416: ST_TO_ADDR
10417: LD_VAR 0 7
10421: PUSH
10422: FOR_TO
10423: IFFALSE 10453
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
10425: LD_VAR 0 3
10429: PUSH
10430: LD_VAR 0 1
10434: ARRAY
10435: PPUSH
10436: LD_EXP 90
10440: PUSH
10441: LD_VAR 0 1
10445: ARRAY
10446: PPUSH
10447: CALL_OW 180
10451: GO 10422
10453: POP
10454: POP
// if kurinCheckVehicles and not kurinOpinion = 0 then
10455: LD_EXP 26
10459: PUSH
10460: LD_EXP 10
10464: PUSH
10465: LD_INT 0
10467: EQUAL
10468: NOT
10469: AND
10470: IFFALSE 10480
// kurinOpinion = 1 ;
10472: LD_ADDR_EXP 10
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
// end else
10480: GO 10515
// begin if kurinCheckVehicles then
10482: LD_EXP 26
10486: IFFALSE 10515
// begin DialogueOn ;
10488: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
10492: LD_EXP 55
10496: PPUSH
10497: LD_STRING D6d-Kur-1
10499: PPUSH
10500: CALL_OW 94
// DialogueOff ;
10504: CALL_OW 7
// YouLost ( Vehicles ) ;
10508: LD_STRING Vehicles
10510: PPUSH
10511: CALL_OW 104
// end ; end ; end ;
10515: PPOPN 7
10517: END
// every 0 0$1 trigger meetNearOmicronBase do
10518: LD_EXP 27
10522: IFFALSE 10630
10524: GO 10526
10526: DISABLE
// begin spawnCrates = false ;
10527: LD_ADDR_EXP 13
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
10535: LD_INT 6
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 2
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
10551: LD_INT 0
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: LD_INT 0
10559: PPUSH
10560: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
10564: LD_STRING M3a
10566: PPUSH
10567: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
10571: LD_STRING M5
10573: PPUSH
10574: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
10578: LD_INT 14
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
10588: LD_EXP 90
10592: PPUSH
10593: LD_INT 75
10595: PPUSH
10596: LD_INT 38
10598: PPUSH
10599: CALL_OW 111
// counterIndex = 2 ;
10603: LD_ADDR_EXP 85
10607: PUSH
10608: LD_INT 2
10610: ST_TO_ADDR
// if not kurinOpinion = 0 then
10611: LD_EXP 10
10615: PUSH
10616: LD_INT 0
10618: EQUAL
10619: NOT
10620: IFFALSE 10630
// kurinOpinion = 1 ;
10622: LD_ADDR_EXP 10
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// end ; end_of_file
10630: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10631: LD_INT 0
10633: PPUSH
// ar_miner := 81 ;
10634: LD_ADDR_EXP 99
10638: PUSH
10639: LD_INT 81
10641: ST_TO_ADDR
// ar_crane := 88 ;
10642: LD_ADDR_EXP 98
10646: PUSH
10647: LD_INT 88
10649: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10650: LD_ADDR_EXP 93
10654: PUSH
10655: LD_INT 89
10657: ST_TO_ADDR
// us_hack := 99 ;
10658: LD_ADDR_EXP 94
10662: PUSH
10663: LD_INT 99
10665: ST_TO_ADDR
// us_artillery := 97 ;
10666: LD_ADDR_EXP 95
10670: PUSH
10671: LD_INT 97
10673: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10674: LD_ADDR_EXP 96
10678: PUSH
10679: LD_INT 91
10681: ST_TO_ADDR
// ar_mortar := 92 ;
10682: LD_ADDR_EXP 97
10686: PUSH
10687: LD_INT 92
10689: ST_TO_ADDR
// ru_flamethrower := 93 ;
10690: LD_ADDR_EXP 100
10694: PUSH
10695: LD_INT 93
10697: ST_TO_ADDR
// ru_radar := 98 ;
10698: LD_ADDR_EXP 92
10702: PUSH
10703: LD_INT 98
10705: ST_TO_ADDR
// tech_Artillery := 80 ;
10706: LD_ADDR_EXP 101
10710: PUSH
10711: LD_INT 80
10713: ST_TO_ADDR
// tech_RadMat := 81 ;
10714: LD_ADDR_EXP 102
10718: PUSH
10719: LD_INT 81
10721: ST_TO_ADDR
// tech_BasicTools := 82 ;
10722: LD_ADDR_EXP 103
10726: PUSH
10727: LD_INT 82
10729: ST_TO_ADDR
// tech_Cargo := 83 ;
10730: LD_ADDR_EXP 104
10734: PUSH
10735: LD_INT 83
10737: ST_TO_ADDR
// tech_Track := 84 ;
10738: LD_ADDR_EXP 105
10742: PUSH
10743: LD_INT 84
10745: ST_TO_ADDR
// tech_Crane := 85 ;
10746: LD_ADDR_EXP 106
10750: PUSH
10751: LD_INT 85
10753: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10754: LD_ADDR_EXP 107
10758: PUSH
10759: LD_INT 86
10761: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10762: LD_ADDR_EXP 108
10766: PUSH
10767: LD_INT 87
10769: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10770: LD_ADDR_EXP 109
10774: PUSH
10775: LD_INT 88
10777: ST_TO_ADDR
// class_mastodont := 31 ;
10778: LD_ADDR_EXP 110
10782: PUSH
10783: LD_INT 31
10785: ST_TO_ADDR
// class_horse := 21 ;
10786: LD_ADDR_EXP 111
10790: PUSH
10791: LD_INT 21
10793: ST_TO_ADDR
// end ;
10794: LD_VAR 0 1
10798: RET
// every 1 do
10799: GO 10801
10801: DISABLE
// InitGlobalVariables ; end_of_file
10802: CALL 10631 0 0
10806: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10807: LD_INT 0
10809: PPUSH
10810: PPUSH
// if exist_mode then
10811: LD_VAR 0 2
10815: IFFALSE 10840
// unit := CreateCharacter ( prefix & ident ) else
10817: LD_ADDR_VAR 0 5
10821: PUSH
10822: LD_VAR 0 3
10826: PUSH
10827: LD_VAR 0 1
10831: STR
10832: PPUSH
10833: CALL_OW 34
10837: ST_TO_ADDR
10838: GO 10855
// unit := NewCharacter ( ident ) ;
10840: LD_ADDR_VAR 0 5
10844: PUSH
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL_OW 25
10854: ST_TO_ADDR
// result := unit ;
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_VAR 0 5
10864: ST_TO_ADDR
// end ;
10865: LD_VAR 0 4
10869: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10870: LD_INT 0
10872: PPUSH
10873: PPUSH
// if not side or not nation then
10874: LD_VAR 0 1
10878: NOT
10879: PUSH
10880: LD_VAR 0 2
10884: NOT
10885: OR
10886: IFFALSE 10890
// exit ;
10888: GO 11658
// case nation of nation_american :
10890: LD_VAR 0 2
10894: PUSH
10895: LD_INT 1
10897: DOUBLE
10898: EQUAL
10899: IFTRUE 10903
10901: GO 11117
10903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10904: LD_ADDR_VAR 0 4
10908: PUSH
10909: LD_INT 35
10911: PUSH
10912: LD_INT 45
10914: PUSH
10915: LD_INT 46
10917: PUSH
10918: LD_INT 47
10920: PUSH
10921: LD_INT 82
10923: PUSH
10924: LD_INT 83
10926: PUSH
10927: LD_INT 84
10929: PUSH
10930: LD_INT 85
10932: PUSH
10933: LD_INT 86
10935: PUSH
10936: LD_INT 1
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: LD_INT 6
10944: PUSH
10945: LD_INT 15
10947: PUSH
10948: LD_INT 16
10950: PUSH
10951: LD_INT 7
10953: PUSH
10954: LD_INT 12
10956: PUSH
10957: LD_INT 13
10959: PUSH
10960: LD_INT 10
10962: PUSH
10963: LD_INT 14
10965: PUSH
10966: LD_INT 20
10968: PUSH
10969: LD_INT 21
10971: PUSH
10972: LD_INT 22
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 32
10980: PUSH
10981: LD_INT 27
10983: PUSH
10984: LD_INT 36
10986: PUSH
10987: LD_INT 69
10989: PUSH
10990: LD_INT 39
10992: PUSH
10993: LD_INT 34
10995: PUSH
10996: LD_INT 40
10998: PUSH
10999: LD_INT 48
11001: PUSH
11002: LD_INT 49
11004: PUSH
11005: LD_INT 50
11007: PUSH
11008: LD_INT 51
11010: PUSH
11011: LD_INT 52
11013: PUSH
11014: LD_INT 53
11016: PUSH
11017: LD_INT 54
11019: PUSH
11020: LD_INT 55
11022: PUSH
11023: LD_INT 56
11025: PUSH
11026: LD_INT 57
11028: PUSH
11029: LD_INT 58
11031: PUSH
11032: LD_INT 59
11034: PUSH
11035: LD_INT 60
11037: PUSH
11038: LD_INT 61
11040: PUSH
11041: LD_INT 62
11043: PUSH
11044: LD_INT 80
11046: PUSH
11047: LD_INT 82
11049: PUSH
11050: LD_INT 83
11052: PUSH
11053: LD_INT 84
11055: PUSH
11056: LD_INT 85
11058: PUSH
11059: LD_INT 86
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: ST_TO_ADDR
11115: GO 11582
11117: LD_INT 2
11119: DOUBLE
11120: EQUAL
11121: IFTRUE 11125
11123: GO 11351
11125: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
11126: LD_ADDR_VAR 0 4
11130: PUSH
11131: LD_INT 35
11133: PUSH
11134: LD_INT 45
11136: PUSH
11137: LD_INT 46
11139: PUSH
11140: LD_INT 47
11142: PUSH
11143: LD_INT 82
11145: PUSH
11146: LD_INT 83
11148: PUSH
11149: LD_INT 84
11151: PUSH
11152: LD_INT 85
11154: PUSH
11155: LD_INT 87
11157: PUSH
11158: LD_INT 70
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: LD_INT 11
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: LD_INT 4
11172: PUSH
11173: LD_INT 5
11175: PUSH
11176: LD_INT 6
11178: PUSH
11179: LD_INT 15
11181: PUSH
11182: LD_INT 18
11184: PUSH
11185: LD_INT 7
11187: PUSH
11188: LD_INT 17
11190: PUSH
11191: LD_INT 8
11193: PUSH
11194: LD_INT 20
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 72
11205: PUSH
11206: LD_INT 26
11208: PUSH
11209: LD_INT 69
11211: PUSH
11212: LD_INT 39
11214: PUSH
11215: LD_INT 40
11217: PUSH
11218: LD_INT 41
11220: PUSH
11221: LD_INT 42
11223: PUSH
11224: LD_INT 43
11226: PUSH
11227: LD_INT 48
11229: PUSH
11230: LD_INT 49
11232: PUSH
11233: LD_INT 50
11235: PUSH
11236: LD_INT 51
11238: PUSH
11239: LD_INT 52
11241: PUSH
11242: LD_INT 53
11244: PUSH
11245: LD_INT 54
11247: PUSH
11248: LD_INT 55
11250: PUSH
11251: LD_INT 56
11253: PUSH
11254: LD_INT 60
11256: PUSH
11257: LD_INT 61
11259: PUSH
11260: LD_INT 62
11262: PUSH
11263: LD_INT 66
11265: PUSH
11266: LD_INT 67
11268: PUSH
11269: LD_INT 68
11271: PUSH
11272: LD_INT 81
11274: PUSH
11275: LD_INT 82
11277: PUSH
11278: LD_INT 83
11280: PUSH
11281: LD_INT 84
11283: PUSH
11284: LD_INT 85
11286: PUSH
11287: LD_INT 87
11289: PUSH
11290: LD_INT 88
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: ST_TO_ADDR
11349: GO 11582
11351: LD_INT 3
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11581
11359: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: LD_INT 46
11367: PUSH
11368: LD_INT 47
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 82
11379: PUSH
11380: LD_INT 83
11382: PUSH
11383: LD_INT 84
11385: PUSH
11386: LD_INT 85
11388: PUSH
11389: LD_INT 86
11391: PUSH
11392: LD_INT 11
11394: PUSH
11395: LD_INT 9
11397: PUSH
11398: LD_INT 20
11400: PUSH
11401: LD_INT 19
11403: PUSH
11404: LD_INT 21
11406: PUSH
11407: LD_INT 24
11409: PUSH
11410: LD_INT 22
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 28
11418: PUSH
11419: LD_INT 29
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 31
11427: PUSH
11428: LD_INT 37
11430: PUSH
11431: LD_INT 38
11433: PUSH
11434: LD_INT 32
11436: PUSH
11437: LD_INT 27
11439: PUSH
11440: LD_INT 33
11442: PUSH
11443: LD_INT 69
11445: PUSH
11446: LD_INT 39
11448: PUSH
11449: LD_INT 34
11451: PUSH
11452: LD_INT 40
11454: PUSH
11455: LD_INT 71
11457: PUSH
11458: LD_INT 23
11460: PUSH
11461: LD_INT 44
11463: PUSH
11464: LD_INT 48
11466: PUSH
11467: LD_INT 49
11469: PUSH
11470: LD_INT 50
11472: PUSH
11473: LD_INT 51
11475: PUSH
11476: LD_INT 52
11478: PUSH
11479: LD_INT 53
11481: PUSH
11482: LD_INT 54
11484: PUSH
11485: LD_INT 55
11487: PUSH
11488: LD_INT 56
11490: PUSH
11491: LD_INT 57
11493: PUSH
11494: LD_INT 58
11496: PUSH
11497: LD_INT 59
11499: PUSH
11500: LD_INT 63
11502: PUSH
11503: LD_INT 64
11505: PUSH
11506: LD_INT 65
11508: PUSH
11509: LD_INT 82
11511: PUSH
11512: LD_INT 83
11514: PUSH
11515: LD_INT 84
11517: PUSH
11518: LD_INT 85
11520: PUSH
11521: LD_INT 86
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: ST_TO_ADDR
11579: GO 11582
11581: POP
// if state > - 1 and state < 3 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 1
11589: NEG
11590: GREATER
11591: PUSH
11592: LD_VAR 0 3
11596: PUSH
11597: LD_INT 3
11599: LESS
11600: AND
11601: IFFALSE 11658
// for i in result do
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: LD_VAR 0 4
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11656
// if GetTech ( i , side ) <> state then
11616: LD_VAR 0 5
11620: PPUSH
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL_OW 321
11630: PUSH
11631: LD_VAR 0 3
11635: NONEQUAL
11636: IFFALSE 11654
// result := result diff i ;
11638: LD_ADDR_VAR 0 4
11642: PUSH
11643: LD_VAR 0 4
11647: PUSH
11648: LD_VAR 0 5
11652: DIFF
11653: ST_TO_ADDR
11654: GO 11613
11656: POP
11657: POP
// end ;
11658: LD_VAR 0 4
11662: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11663: LD_INT 0
11665: PPUSH
11666: PPUSH
11667: PPUSH
// result := true ;
11668: LD_ADDR_VAR 0 3
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11676: LD_ADDR_VAR 0 5
11680: PUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: CALL_OW 480
11690: ST_TO_ADDR
// if not tmp then
11691: LD_VAR 0 5
11695: NOT
11696: IFFALSE 11700
// exit ;
11698: GO 11749
// for i in tmp do
11700: LD_ADDR_VAR 0 4
11704: PUSH
11705: LD_VAR 0 5
11709: PUSH
11710: FOR_IN
11711: IFFALSE 11747
// if GetTech ( i , side ) <> state_researched then
11713: LD_VAR 0 4
11717: PPUSH
11718: LD_VAR 0 1
11722: PPUSH
11723: CALL_OW 321
11727: PUSH
11728: LD_INT 2
11730: NONEQUAL
11731: IFFALSE 11745
// begin result := false ;
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// exit ;
11741: POP
11742: POP
11743: GO 11749
// end ;
11745: GO 11710
11747: POP
11748: POP
// end ;
11749: LD_VAR 0 3
11753: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
11765: PPUSH
11766: PPUSH
11767: PPUSH
11768: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11769: LD_VAR 0 1
11773: NOT
11774: PUSH
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 257
11784: PUSH
11785: LD_INT 9
11787: NONEQUAL
11788: OR
11789: IFFALSE 11793
// exit ;
11791: GO 12366
// side := GetSide ( unit ) ;
11793: LD_ADDR_VAR 0 9
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL_OW 255
11807: ST_TO_ADDR
// tech_space := tech_spacanom ;
11808: LD_ADDR_VAR 0 12
11812: PUSH
11813: LD_INT 29
11815: ST_TO_ADDR
// tech_time := tech_taurad ;
11816: LD_ADDR_VAR 0 13
11820: PUSH
11821: LD_INT 28
11823: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11824: LD_ADDR_VAR 0 11
11828: PUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 310
11838: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11839: LD_VAR 0 11
11843: PPUSH
11844: CALL_OW 247
11848: PUSH
11849: LD_INT 2
11851: EQUAL
11852: IFFALSE 11856
// exit ;
11854: GO 12366
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11856: LD_ADDR_VAR 0 8
11860: PUSH
11861: LD_INT 81
11863: PUSH
11864: LD_VAR 0 9
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 69
11898: ST_TO_ADDR
// if not tmp then
11899: LD_VAR 0 8
11903: NOT
11904: IFFALSE 11908
// exit ;
11906: GO 12366
// if in_unit then
11908: LD_VAR 0 11
11912: IFFALSE 11936
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11914: LD_ADDR_VAR 0 10
11918: PUSH
11919: LD_VAR 0 8
11923: PPUSH
11924: LD_VAR 0 11
11928: PPUSH
11929: CALL_OW 74
11933: ST_TO_ADDR
11934: GO 11956
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11936: LD_ADDR_VAR 0 10
11940: PUSH
11941: LD_VAR 0 8
11945: PPUSH
11946: LD_VAR 0 1
11950: PPUSH
11951: CALL_OW 74
11955: ST_TO_ADDR
// if not enemy then
11956: LD_VAR 0 10
11960: NOT
11961: IFFALSE 11965
// exit ;
11963: GO 12366
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11965: LD_VAR 0 11
11969: PUSH
11970: LD_VAR 0 11
11974: PPUSH
11975: LD_VAR 0 10
11979: PPUSH
11980: CALL_OW 296
11984: PUSH
11985: LD_INT 13
11987: GREATER
11988: AND
11989: PUSH
11990: LD_VAR 0 1
11994: PPUSH
11995: LD_VAR 0 10
11999: PPUSH
12000: CALL_OW 296
12004: PUSH
12005: LD_INT 12
12007: GREATER
12008: OR
12009: IFFALSE 12013
// exit ;
12011: GO 12366
// missile := [ 1 ] ;
12013: LD_ADDR_VAR 0 14
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12024: LD_VAR 0 9
12028: PPUSH
12029: LD_VAR 0 12
12033: PPUSH
12034: CALL_OW 325
12038: IFFALSE 12067
// missile := Replace ( missile , missile + 1 , 2 ) ;
12040: LD_ADDR_VAR 0 14
12044: PUSH
12045: LD_VAR 0 14
12049: PPUSH
12050: LD_VAR 0 14
12054: PUSH
12055: LD_INT 1
12057: PLUS
12058: PPUSH
12059: LD_INT 2
12061: PPUSH
12062: CALL_OW 1
12066: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12067: LD_VAR 0 9
12071: PPUSH
12072: LD_VAR 0 13
12076: PPUSH
12077: CALL_OW 325
12081: PUSH
12082: LD_VAR 0 10
12086: PPUSH
12087: CALL_OW 255
12091: PPUSH
12092: LD_VAR 0 13
12096: PPUSH
12097: CALL_OW 325
12101: NOT
12102: AND
12103: IFFALSE 12132
// missile := Replace ( missile , missile + 1 , 3 ) ;
12105: LD_ADDR_VAR 0 14
12109: PUSH
12110: LD_VAR 0 14
12114: PPUSH
12115: LD_VAR 0 14
12119: PUSH
12120: LD_INT 1
12122: PLUS
12123: PPUSH
12124: LD_INT 3
12126: PPUSH
12127: CALL_OW 1
12131: ST_TO_ADDR
// if missile < 2 then
12132: LD_VAR 0 14
12136: PUSH
12137: LD_INT 2
12139: LESS
12140: IFFALSE 12144
// exit ;
12142: GO 12366
// x := GetX ( enemy ) ;
12144: LD_ADDR_VAR 0 4
12148: PUSH
12149: LD_VAR 0 10
12153: PPUSH
12154: CALL_OW 250
12158: ST_TO_ADDR
// y := GetY ( enemy ) ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: LD_VAR 0 10
12168: PPUSH
12169: CALL_OW 251
12173: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12174: LD_ADDR_VAR 0 6
12178: PUSH
12179: LD_VAR 0 4
12183: PUSH
12184: LD_INT 1
12186: NEG
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 12
12195: PLUS
12196: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12197: LD_ADDR_VAR 0 7
12201: PUSH
12202: LD_VAR 0 5
12206: PUSH
12207: LD_INT 1
12209: NEG
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 12
12218: PLUS
12219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12220: LD_VAR 0 6
12224: PPUSH
12225: LD_VAR 0 7
12229: PPUSH
12230: CALL_OW 488
12234: NOT
12235: IFFALSE 12257
// begin _x := x ;
12237: LD_ADDR_VAR 0 6
12241: PUSH
12242: LD_VAR 0 4
12246: ST_TO_ADDR
// _y := y ;
12247: LD_ADDR_VAR 0 7
12251: PUSH
12252: LD_VAR 0 5
12256: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12257: LD_ADDR_VAR 0 3
12261: PUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_VAR 0 14
12269: PPUSH
12270: CALL_OW 12
12274: ST_TO_ADDR
// case i of 1 :
12275: LD_VAR 0 3
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12305
12288: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_VAR 0 10
12298: PPUSH
12299: CALL_OW 115
12303: GO 12366
12305: LD_INT 2
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12335
12313: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_VAR 0 6
12323: PPUSH
12324: LD_VAR 0 7
12328: PPUSH
12329: CALL_OW 153
12333: GO 12366
12335: LD_INT 3
12337: DOUBLE
12338: EQUAL
12339: IFTRUE 12343
12341: GO 12365
12343: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12344: LD_VAR 0 1
12348: PPUSH
12349: LD_VAR 0 6
12353: PPUSH
12354: LD_VAR 0 7
12358: PPUSH
12359: CALL_OW 154
12363: GO 12366
12365: POP
// end ;
12366: LD_VAR 0 2
12370: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12371: LD_INT 0
12373: PPUSH
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
// if not unit or not building then
12379: LD_VAR 0 1
12383: NOT
12384: PUSH
12385: LD_VAR 0 2
12389: NOT
12390: OR
12391: IFFALSE 12395
// exit ;
12393: GO 12553
// x := GetX ( building ) ;
12395: LD_ADDR_VAR 0 5
12399: PUSH
12400: LD_VAR 0 2
12404: PPUSH
12405: CALL_OW 250
12409: ST_TO_ADDR
// y := GetY ( building ) ;
12410: LD_ADDR_VAR 0 6
12414: PUSH
12415: LD_VAR 0 2
12419: PPUSH
12420: CALL_OW 251
12424: ST_TO_ADDR
// for i = 0 to 5 do
12425: LD_ADDR_VAR 0 4
12429: PUSH
12430: DOUBLE
12431: LD_INT 0
12433: DEC
12434: ST_TO_ADDR
12435: LD_INT 5
12437: PUSH
12438: FOR_TO
12439: IFFALSE 12551
// begin _x := ShiftX ( x , i , 3 ) ;
12441: LD_ADDR_VAR 0 7
12445: PUSH
12446: LD_VAR 0 5
12450: PPUSH
12451: LD_VAR 0 4
12455: PPUSH
12456: LD_INT 3
12458: PPUSH
12459: CALL_OW 272
12463: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12464: LD_ADDR_VAR 0 8
12468: PUSH
12469: LD_VAR 0 6
12473: PPUSH
12474: LD_VAR 0 4
12478: PPUSH
12479: LD_INT 3
12481: PPUSH
12482: CALL_OW 273
12486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12487: LD_VAR 0 7
12491: PPUSH
12492: LD_VAR 0 8
12496: PPUSH
12497: CALL_OW 488
12501: NOT
12502: IFFALSE 12506
// continue ;
12504: GO 12438
// if HexInfo ( _x , _y ) = 0 then
12506: LD_VAR 0 7
12510: PPUSH
12511: LD_VAR 0 8
12515: PPUSH
12516: CALL_OW 428
12520: PUSH
12521: LD_INT 0
12523: EQUAL
12524: IFFALSE 12549
// begin ComMoveXY ( unit , _x , _y ) ;
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_VAR 0 7
12535: PPUSH
12536: LD_VAR 0 8
12540: PPUSH
12541: CALL_OW 111
// exit ;
12545: POP
12546: POP
12547: GO 12553
// end ; end ;
12549: GO 12438
12551: POP
12552: POP
// end ;
12553: LD_VAR 0 3
12557: RET
// export function ScanBase ( side , base_area ) ; begin
12558: LD_INT 0
12560: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12561: LD_ADDR_VAR 0 3
12565: PUSH
12566: LD_VAR 0 2
12570: PPUSH
12571: LD_INT 81
12573: PUSH
12574: LD_VAR 0 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 70
12587: ST_TO_ADDR
// end ;
12588: LD_VAR 0 3
12592: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
12597: PPUSH
12598: PPUSH
// result := false ;
12599: LD_ADDR_VAR 0 2
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// side := GetSide ( unit ) ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL_OW 255
12621: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12622: LD_ADDR_VAR 0 4
12626: PUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 248
12636: ST_TO_ADDR
// case nat of 1 :
12637: LD_VAR 0 4
12641: PUSH
12642: LD_INT 1
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12661
12650: POP
// tech := tech_lassight ; 2 :
12651: LD_ADDR_VAR 0 5
12655: PUSH
12656: LD_INT 12
12658: ST_TO_ADDR
12659: GO 12700
12661: LD_INT 2
12663: DOUBLE
12664: EQUAL
12665: IFTRUE 12669
12667: GO 12680
12669: POP
// tech := tech_mortar ; 3 :
12670: LD_ADDR_VAR 0 5
12674: PUSH
12675: LD_INT 41
12677: ST_TO_ADDR
12678: GO 12700
12680: LD_INT 3
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12699
12688: POP
// tech := tech_bazooka ; end ;
12689: LD_ADDR_VAR 0 5
12693: PUSH
12694: LD_INT 44
12696: ST_TO_ADDR
12697: GO 12700
12699: POP
// if Researched ( side , tech ) then
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_VAR 0 5
12709: PPUSH
12710: CALL_OW 325
12714: IFFALSE 12741
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_INT 5
12723: PUSH
12724: LD_INT 8
12726: PUSH
12727: LD_INT 9
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_VAR 0 4
12739: ARRAY
12740: ST_TO_ADDR
// end ;
12741: LD_VAR 0 2
12745: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12746: LD_INT 0
12748: PPUSH
12749: PPUSH
12750: PPUSH
// if not mines then
12751: LD_VAR 0 2
12755: NOT
12756: IFFALSE 12760
// exit ;
12758: GO 12904
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12760: LD_ADDR_VAR 0 5
12764: PUSH
12765: LD_INT 81
12767: PUSH
12768: LD_VAR 0 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 3
12779: PUSH
12780: LD_INT 21
12782: PUSH
12783: LD_INT 3
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: ST_TO_ADDR
// for i in mines do
12803: LD_ADDR_VAR 0 4
12807: PUSH
12808: LD_VAR 0 2
12812: PUSH
12813: FOR_IN
12814: IFFALSE 12902
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12816: LD_VAR 0 4
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PPUSH
12825: LD_VAR 0 4
12829: PUSH
12830: LD_INT 2
12832: ARRAY
12833: PPUSH
12834: CALL_OW 458
12838: NOT
12839: IFFALSE 12843
// continue ;
12841: GO 12813
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12843: LD_VAR 0 4
12847: PUSH
12848: LD_INT 1
12850: ARRAY
12851: PPUSH
12852: LD_VAR 0 4
12856: PUSH
12857: LD_INT 2
12859: ARRAY
12860: PPUSH
12861: CALL_OW 428
12865: PUSH
12866: LD_VAR 0 5
12870: IN
12871: IFFALSE 12900
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12873: LD_VAR 0 4
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PPUSH
12882: LD_VAR 0 4
12886: PUSH
12887: LD_INT 2
12889: ARRAY
12890: PPUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 456
// end ;
12900: GO 12813
12902: POP
12903: POP
// end ;
12904: LD_VAR 0 3
12908: RET
// export function Count ( array ) ; var i ; begin
12909: LD_INT 0
12911: PPUSH
12912: PPUSH
// result := 0 ;
12913: LD_ADDR_VAR 0 2
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// for i in array do
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_VAR 0 1
12930: PUSH
12931: FOR_IN
12932: IFFALSE 12956
// if i then
12934: LD_VAR 0 3
12938: IFFALSE 12954
// result := result + 1 ;
12940: LD_ADDR_VAR 0 2
12944: PUSH
12945: LD_VAR 0 2
12949: PUSH
12950: LD_INT 1
12952: PLUS
12953: ST_TO_ADDR
12954: GO 12931
12956: POP
12957: POP
// end ;
12958: LD_VAR 0 2
12962: RET
// export function IsEmpty ( building ) ; begin
12963: LD_INT 0
12965: PPUSH
// if not building then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 13018
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: LD_VAR 0 1
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: CALL_OW 255
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 58
13004: PUSH
13005: EMPTY
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 69
13016: IN
13017: ST_TO_ADDR
// end ;
13018: LD_VAR 0 2
13022: RET
// export function IsNotFull ( building ) ; begin
13023: LD_INT 0
13025: PPUSH
// if not building then
13026: LD_VAR 0 1
13030: NOT
13031: IFFALSE 13035
// exit ;
13033: GO 13054
// result := UnitsInside ( building ) < 6 ;
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 313
13049: PUSH
13050: LD_INT 6
13052: LESS
13053: ST_TO_ADDR
// end ;
13054: LD_VAR 0 2
13058: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13059: LD_INT 0
13061: PPUSH
13062: PPUSH
13063: PPUSH
13064: PPUSH
// tmp := [ ] ;
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: EMPTY
13071: ST_TO_ADDR
// list := [ ] ;
13072: LD_ADDR_VAR 0 5
13076: PUSH
13077: EMPTY
13078: ST_TO_ADDR
// for i = 16 to 25 do
13079: LD_ADDR_VAR 0 4
13083: PUSH
13084: DOUBLE
13085: LD_INT 16
13087: DEC
13088: ST_TO_ADDR
13089: LD_INT 25
13091: PUSH
13092: FOR_TO
13093: IFFALSE 13166
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13095: LD_ADDR_VAR 0 3
13099: PUSH
13100: LD_VAR 0 3
13104: PUSH
13105: LD_INT 22
13107: PUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 91
13124: PUSH
13125: LD_VAR 0 1
13129: PUSH
13130: LD_INT 6
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 30
13140: PUSH
13141: LD_VAR 0 4
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: ADD
13163: ST_TO_ADDR
13164: GO 13092
13166: POP
13167: POP
// for i = 1 to tmp do
13168: LD_ADDR_VAR 0 4
13172: PUSH
13173: DOUBLE
13174: LD_INT 1
13176: DEC
13177: ST_TO_ADDR
13178: LD_VAR 0 3
13182: PUSH
13183: FOR_TO
13184: IFFALSE 13272
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13186: LD_ADDR_VAR 0 5
13190: PUSH
13191: LD_VAR 0 5
13195: PUSH
13196: LD_VAR 0 3
13200: PUSH
13201: LD_VAR 0 4
13205: ARRAY
13206: PPUSH
13207: CALL_OW 266
13211: PUSH
13212: LD_VAR 0 3
13216: PUSH
13217: LD_VAR 0 4
13221: ARRAY
13222: PPUSH
13223: CALL_OW 250
13227: PUSH
13228: LD_VAR 0 3
13232: PUSH
13233: LD_VAR 0 4
13237: ARRAY
13238: PPUSH
13239: CALL_OW 251
13243: PUSH
13244: LD_VAR 0 3
13248: PUSH
13249: LD_VAR 0 4
13253: ARRAY
13254: PPUSH
13255: CALL_OW 254
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: ADD
13269: ST_TO_ADDR
13270: GO 13183
13272: POP
13273: POP
// result := list ;
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_VAR 0 5
13283: ST_TO_ADDR
// end ;
13284: LD_VAR 0 2
13288: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
// if not factory then
13298: LD_VAR 0 1
13302: NOT
13303: IFFALSE 13307
// exit ;
13305: GO 13900
// if control = control_apeman then
13307: LD_VAR 0 4
13311: PUSH
13312: LD_INT 5
13314: EQUAL
13315: IFFALSE 13424
// begin tmp := UnitsInside ( factory ) ;
13317: LD_ADDR_VAR 0 8
13321: PUSH
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 313
13331: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13332: LD_VAR 0 8
13336: PPUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 12
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 72
13351: NOT
13352: IFFALSE 13362
// control := control_manual ;
13354: LD_ADDR_VAR 0 4
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13362: LD_ADDR_VAR 0 8
13366: PUSH
13367: LD_VAR 0 1
13371: PPUSH
13372: CALL 13059 0 1
13376: ST_TO_ADDR
// if tmp then
13377: LD_VAR 0 8
13381: IFFALSE 13424
// begin for i in tmp do
13383: LD_ADDR_VAR 0 7
13387: PUSH
13388: LD_VAR 0 8
13392: PUSH
13393: FOR_IN
13394: IFFALSE 13422
// if i [ 1 ] = b_ext_radio then
13396: LD_VAR 0 7
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PUSH
13405: LD_INT 22
13407: EQUAL
13408: IFFALSE 13420
// begin control := control_remote ;
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: LD_INT 2
13417: ST_TO_ADDR
// break ;
13418: GO 13422
// end ;
13420: GO 13393
13422: POP
13423: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13424: LD_VAR 0 1
13428: PPUSH
13429: LD_VAR 0 2
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_VAR 0 4
13443: PPUSH
13444: LD_VAR 0 5
13448: PPUSH
13449: CALL_OW 448
13453: IFFALSE 13488
// begin result := [ chassis , engine , control , weapon ] ;
13455: LD_ADDR_VAR 0 6
13459: PUSH
13460: LD_VAR 0 2
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: LD_VAR 0 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: ST_TO_ADDR
// exit ;
13486: GO 13900
// end ; _chassis := AvailableChassisList ( factory ) ;
13488: LD_ADDR_VAR 0 9
13492: PUSH
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 475
13502: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13503: LD_ADDR_VAR 0 11
13507: PUSH
13508: LD_VAR 0 1
13512: PPUSH
13513: CALL_OW 476
13517: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13518: LD_ADDR_VAR 0 12
13522: PUSH
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 477
13532: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13533: LD_ADDR_VAR 0 10
13537: PUSH
13538: LD_VAR 0 1
13542: PPUSH
13543: CALL_OW 478
13547: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13548: LD_VAR 0 9
13552: NOT
13553: PUSH
13554: LD_VAR 0 11
13558: NOT
13559: OR
13560: PUSH
13561: LD_VAR 0 12
13565: NOT
13566: OR
13567: PUSH
13568: LD_VAR 0 10
13572: NOT
13573: OR
13574: IFFALSE 13609
// begin result := [ chassis , engine , control , weapon ] ;
13576: LD_ADDR_VAR 0 6
13580: PUSH
13581: LD_VAR 0 2
13585: PUSH
13586: LD_VAR 0 3
13590: PUSH
13591: LD_VAR 0 4
13595: PUSH
13596: LD_VAR 0 5
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: ST_TO_ADDR
// exit ;
13607: GO 13900
// end ; if not chassis in _chassis then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_VAR 0 9
13618: IN
13619: NOT
13620: IFFALSE 13646
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13622: LD_ADDR_VAR 0 2
13626: PUSH
13627: LD_VAR 0 9
13631: PUSH
13632: LD_INT 1
13634: PPUSH
13635: LD_VAR 0 9
13639: PPUSH
13640: CALL_OW 12
13644: ARRAY
13645: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13646: LD_VAR 0 2
13650: PPUSH
13651: LD_VAR 0 3
13655: PPUSH
13656: CALL 13905 0 2
13660: NOT
13661: IFFALSE 13720
// repeat engine := _engine [ 1 ] ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_VAR 0 11
13672: PUSH
13673: LD_INT 1
13675: ARRAY
13676: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13677: LD_ADDR_VAR 0 11
13681: PUSH
13682: LD_VAR 0 11
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 3
13694: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13695: LD_VAR 0 2
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: CALL 13905 0 2
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: EQUAL
13717: OR
13718: IFFALSE 13663
// if not control in _control then
13720: LD_VAR 0 4
13724: PUSH
13725: LD_VAR 0 12
13729: IN
13730: NOT
13731: IFFALSE 13757
// control := _control [ rand ( 1 , _control ) ] ;
13733: LD_ADDR_VAR 0 4
13737: PUSH
13738: LD_VAR 0 12
13742: PUSH
13743: LD_INT 1
13745: PPUSH
13746: LD_VAR 0 12
13750: PPUSH
13751: CALL_OW 12
13755: ARRAY
13756: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_VAR 0 5
13766: PPUSH
13767: CALL 14125 0 2
13771: NOT
13772: IFFALSE 13831
// repeat weapon := _weapon [ 1 ] ;
13774: LD_ADDR_VAR 0 5
13778: PUSH
13779: LD_VAR 0 10
13783: PUSH
13784: LD_INT 1
13786: ARRAY
13787: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13788: LD_ADDR_VAR 0 10
13792: PUSH
13793: LD_VAR 0 10
13797: PPUSH
13798: LD_INT 1
13800: PPUSH
13801: CALL_OW 3
13805: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_VAR 0 5
13815: PPUSH
13816: CALL 14125 0 2
13820: PUSH
13821: LD_VAR 0 10
13825: PUSH
13826: EMPTY
13827: EQUAL
13828: OR
13829: IFFALSE 13774
// result := [ ] ;
13831: LD_ADDR_VAR 0 6
13835: PUSH
13836: EMPTY
13837: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_VAR 0 3
13852: PPUSH
13853: LD_VAR 0 4
13857: PPUSH
13858: LD_VAR 0 5
13862: PPUSH
13863: CALL_OW 448
13867: IFFALSE 13900
// result := [ chassis , engine , control , weapon ] ;
13869: LD_ADDR_VAR 0 6
13873: PUSH
13874: LD_VAR 0 2
13878: PUSH
13879: LD_VAR 0 3
13883: PUSH
13884: LD_VAR 0 4
13888: PUSH
13889: LD_VAR 0 5
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: ST_TO_ADDR
// end ;
13900: LD_VAR 0 6
13904: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13905: LD_INT 0
13907: PPUSH
// if not chassis or not engine then
13908: LD_VAR 0 1
13912: NOT
13913: PUSH
13914: LD_VAR 0 2
13918: NOT
13919: OR
13920: IFFALSE 13924
// exit ;
13922: GO 14120
// case engine of engine_solar :
13924: LD_VAR 0 2
13928: PUSH
13929: LD_INT 2
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 13975
13937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13938: LD_ADDR_VAR 0 3
13942: PUSH
13943: LD_INT 11
13945: PUSH
13946: LD_INT 12
13948: PUSH
13949: LD_INT 13
13951: PUSH
13952: LD_INT 14
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: ST_TO_ADDR
13973: GO 14104
13975: LD_INT 1
13977: DOUBLE
13978: EQUAL
13979: IFTRUE 13983
13981: GO 14045
13983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: LD_INT 11
13991: PUSH
13992: LD_INT 12
13994: PUSH
13995: LD_INT 13
13997: PUSH
13998: LD_INT 14
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: LD_INT 4
14012: PUSH
14013: LD_INT 5
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 23
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: ST_TO_ADDR
14043: GO 14104
14045: LD_INT 3
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14103
14053: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14054: LD_ADDR_VAR 0 3
14058: PUSH
14059: LD_INT 13
14061: PUSH
14062: LD_INT 14
14064: PUSH
14065: LD_INT 2
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: LD_INT 4
14073: PUSH
14074: LD_INT 5
14076: PUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 23
14085: PUSH
14086: LD_INT 24
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: ST_TO_ADDR
14101: GO 14104
14103: POP
// result := ( chassis in result ) ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_VAR 0 1
14113: PUSH
14114: LD_VAR 0 3
14118: IN
14119: ST_TO_ADDR
// end ;
14120: LD_VAR 0 3
14124: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14125: LD_INT 0
14127: PPUSH
// if not chassis or not weapon then
14128: LD_VAR 0 1
14132: NOT
14133: PUSH
14134: LD_VAR 0 2
14138: NOT
14139: OR
14140: IFFALSE 14144
// exit ;
14142: GO 15206
// case weapon of us_machine_gun :
14144: LD_VAR 0 2
14148: PUSH
14149: LD_INT 2
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14157
14155: GO 14187
14157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14158: LD_ADDR_VAR 0 3
14162: PUSH
14163: LD_INT 1
14165: PUSH
14166: LD_INT 2
14168: PUSH
14169: LD_INT 3
14171: PUSH
14172: LD_INT 4
14174: PUSH
14175: LD_INT 5
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: ST_TO_ADDR
14185: GO 15190
14187: LD_INT 3
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14225
14195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: LD_INT 4
14212: PUSH
14213: LD_INT 5
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: ST_TO_ADDR
14223: GO 15190
14225: LD_INT 11
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 14263
14233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: LD_INT 1
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: LD_INT 3
14247: PUSH
14248: LD_INT 4
14250: PUSH
14251: LD_INT 5
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: ST_TO_ADDR
14261: GO 15190
14263: LD_INT 4
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14297
14271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14272: LD_ADDR_VAR 0 3
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: LD_INT 5
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: ST_TO_ADDR
14295: GO 15190
14297: LD_INT 5
14299: DOUBLE
14300: EQUAL
14301: IFTRUE 14305
14303: GO 14331
14305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14306: LD_ADDR_VAR 0 3
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: LD_INT 4
14319: PUSH
14320: LD_INT 5
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: ST_TO_ADDR
14329: GO 15190
14331: LD_INT 9
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14365
14339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14340: LD_ADDR_VAR 0 3
14344: PUSH
14345: LD_INT 2
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 4
14353: PUSH
14354: LD_INT 5
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: ST_TO_ADDR
14363: GO 15190
14365: LD_INT 7
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14399
14373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_INT 2
14381: PUSH
14382: LD_INT 3
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
14397: GO 15190
14399: LD_INT 12
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14433
14407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14408: LD_ADDR_VAR 0 3
14412: PUSH
14413: LD_INT 2
14415: PUSH
14416: LD_INT 3
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: LD_INT 5
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
14431: GO 15190
14433: LD_INT 13
14435: DOUBLE
14436: EQUAL
14437: IFTRUE 14441
14439: GO 14467
14441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: LD_INT 3
14452: PUSH
14453: LD_INT 4
14455: PUSH
14456: LD_INT 5
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: ST_TO_ADDR
14465: GO 15190
14467: LD_INT 14
14469: DOUBLE
14470: EQUAL
14471: IFTRUE 14475
14473: GO 14493
14475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_INT 4
14483: PUSH
14484: LD_INT 5
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 15190
14493: LD_INT 6
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14519
14501: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_INT 4
14509: PUSH
14510: LD_INT 5
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: ST_TO_ADDR
14517: GO 15190
14519: LD_INT 10
14521: DOUBLE
14522: EQUAL
14523: IFTRUE 14527
14525: GO 14545
14527: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14528: LD_ADDR_VAR 0 3
14532: PUSH
14533: LD_INT 4
14535: PUSH
14536: LD_INT 5
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: ST_TO_ADDR
14543: GO 15190
14545: LD_INT 22
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14579
14553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14554: LD_ADDR_VAR 0 3
14558: PUSH
14559: LD_INT 11
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: LD_INT 13
14567: PUSH
14568: LD_INT 14
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: ST_TO_ADDR
14577: GO 15190
14579: LD_INT 23
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14613
14587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14588: LD_ADDR_VAR 0 3
14592: PUSH
14593: LD_INT 11
14595: PUSH
14596: LD_INT 12
14598: PUSH
14599: LD_INT 13
14601: PUSH
14602: LD_INT 14
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 15190
14613: LD_INT 24
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14647
14621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 13
14635: PUSH
14636: LD_INT 14
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: ST_TO_ADDR
14645: GO 15190
14647: LD_INT 30
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14681
14655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14656: LD_ADDR_VAR 0 3
14660: PUSH
14661: LD_INT 11
14663: PUSH
14664: LD_INT 12
14666: PUSH
14667: LD_INT 13
14669: PUSH
14670: LD_INT 14
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: ST_TO_ADDR
14679: GO 15190
14681: LD_INT 25
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14707
14689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_INT 13
14697: PUSH
14698: LD_INT 14
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: ST_TO_ADDR
14705: GO 15190
14707: LD_INT 27
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14733
14715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_INT 13
14723: PUSH
14724: LD_INT 14
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: ST_TO_ADDR
14731: GO 15190
14733: LD_EXP 97
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14769
14743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_INT 11
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: LD_INT 13
14757: PUSH
14758: LD_INT 14
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: ST_TO_ADDR
14767: GO 15190
14769: LD_INT 28
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14777
14775: GO 14795
14777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14778: LD_ADDR_VAR 0 3
14782: PUSH
14783: LD_INT 13
14785: PUSH
14786: LD_INT 14
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 15190
14795: LD_INT 29
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 14821
14803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14804: LD_ADDR_VAR 0 3
14808: PUSH
14809: LD_INT 13
14811: PUSH
14812: LD_INT 14
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: ST_TO_ADDR
14819: GO 15190
14821: LD_INT 31
14823: DOUBLE
14824: EQUAL
14825: IFTRUE 14829
14827: GO 14847
14829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14830: LD_ADDR_VAR 0 3
14834: PUSH
14835: LD_INT 13
14837: PUSH
14838: LD_INT 14
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: ST_TO_ADDR
14845: GO 15190
14847: LD_INT 26
14849: DOUBLE
14850: EQUAL
14851: IFTRUE 14855
14853: GO 14873
14855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14856: LD_ADDR_VAR 0 3
14860: PUSH
14861: LD_INT 13
14863: PUSH
14864: LD_INT 14
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: ST_TO_ADDR
14871: GO 15190
14873: LD_INT 42
14875: DOUBLE
14876: EQUAL
14877: IFTRUE 14881
14879: GO 14907
14881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 22
14892: PUSH
14893: LD_INT 23
14895: PUSH
14896: LD_INT 24
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: ST_TO_ADDR
14905: GO 15190
14907: LD_INT 43
14909: DOUBLE
14910: EQUAL
14911: IFTRUE 14915
14913: GO 14941
14915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: LD_INT 21
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_INT 23
14929: PUSH
14930: LD_INT 24
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: ST_TO_ADDR
14939: GO 15190
14941: LD_INT 44
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 14975
14949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14950: LD_ADDR_VAR 0 3
14954: PUSH
14955: LD_INT 21
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_INT 23
14963: PUSH
14964: LD_INT 24
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: ST_TO_ADDR
14973: GO 15190
14975: LD_INT 45
14977: DOUBLE
14978: EQUAL
14979: IFTRUE 14983
14981: GO 15009
14983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14984: LD_ADDR_VAR 0 3
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 22
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 24
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: ST_TO_ADDR
15007: GO 15190
15009: LD_INT 49
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15043
15017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_INT 21
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 24
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: ST_TO_ADDR
15041: GO 15190
15043: LD_INT 51
15045: DOUBLE
15046: EQUAL
15047: IFTRUE 15051
15049: GO 15077
15051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 24
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
15075: GO 15190
15077: LD_INT 52
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15111
15085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 23
15099: PUSH
15100: LD_INT 24
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: ST_TO_ADDR
15109: GO 15190
15111: LD_INT 53
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15137
15119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_INT 23
15127: PUSH
15128: LD_INT 24
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: ST_TO_ADDR
15135: GO 15190
15137: LD_INT 46
15139: DOUBLE
15140: EQUAL
15141: IFTRUE 15145
15143: GO 15163
15145: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15146: LD_ADDR_VAR 0 3
15150: PUSH
15151: LD_INT 23
15153: PUSH
15154: LD_INT 24
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: ST_TO_ADDR
15161: GO 15190
15163: LD_INT 47
15165: DOUBLE
15166: EQUAL
15167: IFTRUE 15171
15169: GO 15189
15171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15172: LD_ADDR_VAR 0 3
15176: PUSH
15177: LD_INT 23
15179: PUSH
15180: LD_INT 24
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: ST_TO_ADDR
15187: GO 15190
15189: POP
// result := ( chassis in result ) ;
15190: LD_ADDR_VAR 0 3
15194: PUSH
15195: LD_VAR 0 1
15199: PUSH
15200: LD_VAR 0 3
15204: IN
15205: ST_TO_ADDR
// end ;
15206: LD_VAR 0 3
15210: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
15216: PPUSH
15217: PPUSH
15218: PPUSH
15219: PPUSH
// result := array ;
15220: LD_ADDR_VAR 0 5
15224: PUSH
15225: LD_VAR 0 1
15229: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15230: LD_VAR 0 1
15234: NOT
15235: PUSH
15236: LD_VAR 0 2
15240: NOT
15241: OR
15242: PUSH
15243: LD_VAR 0 3
15247: NOT
15248: OR
15249: PUSH
15250: LD_VAR 0 2
15254: PUSH
15255: LD_VAR 0 1
15259: GREATER
15260: OR
15261: PUSH
15262: LD_VAR 0 3
15266: PUSH
15267: LD_VAR 0 1
15271: GREATER
15272: OR
15273: IFFALSE 15277
// exit ;
15275: GO 15573
// if direction then
15277: LD_VAR 0 4
15281: IFFALSE 15345
// begin d := 1 ;
15283: LD_ADDR_VAR 0 9
15287: PUSH
15288: LD_INT 1
15290: ST_TO_ADDR
// if i_from > i_to then
15291: LD_VAR 0 2
15295: PUSH
15296: LD_VAR 0 3
15300: GREATER
15301: IFFALSE 15327
// length := ( array - i_from ) + i_to else
15303: LD_ADDR_VAR 0 11
15307: PUSH
15308: LD_VAR 0 1
15312: PUSH
15313: LD_VAR 0 2
15317: MINUS
15318: PUSH
15319: LD_VAR 0 3
15323: PLUS
15324: ST_TO_ADDR
15325: GO 15343
// length := i_to - i_from ;
15327: LD_ADDR_VAR 0 11
15331: PUSH
15332: LD_VAR 0 3
15336: PUSH
15337: LD_VAR 0 2
15341: MINUS
15342: ST_TO_ADDR
// end else
15343: GO 15406
// begin d := - 1 ;
15345: LD_ADDR_VAR 0 9
15349: PUSH
15350: LD_INT 1
15352: NEG
15353: ST_TO_ADDR
// if i_from > i_to then
15354: LD_VAR 0 2
15358: PUSH
15359: LD_VAR 0 3
15363: GREATER
15364: IFFALSE 15384
// length := i_from - i_to else
15366: LD_ADDR_VAR 0 11
15370: PUSH
15371: LD_VAR 0 2
15375: PUSH
15376: LD_VAR 0 3
15380: MINUS
15381: ST_TO_ADDR
15382: GO 15406
// length := ( array - i_to ) + i_from ;
15384: LD_ADDR_VAR 0 11
15388: PUSH
15389: LD_VAR 0 1
15393: PUSH
15394: LD_VAR 0 3
15398: MINUS
15399: PUSH
15400: LD_VAR 0 2
15404: PLUS
15405: ST_TO_ADDR
// end ; if not length then
15406: LD_VAR 0 11
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 15573
// tmp := array ;
15415: LD_ADDR_VAR 0 10
15419: PUSH
15420: LD_VAR 0 1
15424: ST_TO_ADDR
// for i = 1 to length do
15425: LD_ADDR_VAR 0 6
15429: PUSH
15430: DOUBLE
15431: LD_INT 1
15433: DEC
15434: ST_TO_ADDR
15435: LD_VAR 0 11
15439: PUSH
15440: FOR_TO
15441: IFFALSE 15561
// begin for j = 1 to array do
15443: LD_ADDR_VAR 0 7
15447: PUSH
15448: DOUBLE
15449: LD_INT 1
15451: DEC
15452: ST_TO_ADDR
15453: LD_VAR 0 1
15457: PUSH
15458: FOR_TO
15459: IFFALSE 15547
// begin k := j + d ;
15461: LD_ADDR_VAR 0 8
15465: PUSH
15466: LD_VAR 0 7
15470: PUSH
15471: LD_VAR 0 9
15475: PLUS
15476: ST_TO_ADDR
// if k > array then
15477: LD_VAR 0 8
15481: PUSH
15482: LD_VAR 0 1
15486: GREATER
15487: IFFALSE 15497
// k := 1 ;
15489: LD_ADDR_VAR 0 8
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// if not k then
15497: LD_VAR 0 8
15501: NOT
15502: IFFALSE 15514
// k := array ;
15504: LD_ADDR_VAR 0 8
15508: PUSH
15509: LD_VAR 0 1
15513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15514: LD_ADDR_VAR 0 10
15518: PUSH
15519: LD_VAR 0 10
15523: PPUSH
15524: LD_VAR 0 8
15528: PPUSH
15529: LD_VAR 0 1
15533: PUSH
15534: LD_VAR 0 7
15538: ARRAY
15539: PPUSH
15540: CALL_OW 1
15544: ST_TO_ADDR
// end ;
15545: GO 15458
15547: POP
15548: POP
// array := tmp ;
15549: LD_ADDR_VAR 0 1
15553: PUSH
15554: LD_VAR 0 10
15558: ST_TO_ADDR
// end ;
15559: GO 15440
15561: POP
15562: POP
// result := array ;
15563: LD_ADDR_VAR 0 5
15567: PUSH
15568: LD_VAR 0 1
15572: ST_TO_ADDR
// end ;
15573: LD_VAR 0 5
15577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15578: LD_INT 0
15580: PPUSH
15581: PPUSH
// result := 0 ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 0
15589: ST_TO_ADDR
// if not array or not value in array then
15590: LD_VAR 0 1
15594: NOT
15595: PUSH
15596: LD_VAR 0 2
15600: PUSH
15601: LD_VAR 0 1
15605: IN
15606: NOT
15607: OR
15608: IFFALSE 15612
// exit ;
15610: GO 15666
// for i = 1 to array do
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: DOUBLE
15618: LD_INT 1
15620: DEC
15621: ST_TO_ADDR
15622: LD_VAR 0 1
15626: PUSH
15627: FOR_TO
15628: IFFALSE 15664
// if value = array [ i ] then
15630: LD_VAR 0 2
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_VAR 0 4
15644: ARRAY
15645: EQUAL
15646: IFFALSE 15662
// begin result := i ;
15648: LD_ADDR_VAR 0 3
15652: PUSH
15653: LD_VAR 0 4
15657: ST_TO_ADDR
// exit ;
15658: POP
15659: POP
15660: GO 15666
// end ;
15662: GO 15627
15664: POP
15665: POP
// end ;
15666: LD_VAR 0 3
15670: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15671: LD_INT 0
15673: PPUSH
// vc_chassis := chassis ;
15674: LD_ADDR_OWVAR 37
15678: PUSH
15679: LD_VAR 0 1
15683: ST_TO_ADDR
// vc_engine := engine ;
15684: LD_ADDR_OWVAR 39
15688: PUSH
15689: LD_VAR 0 2
15693: ST_TO_ADDR
// vc_control := control ;
15694: LD_ADDR_OWVAR 38
15698: PUSH
15699: LD_VAR 0 3
15703: ST_TO_ADDR
// vc_weapon := weapon ;
15704: LD_ADDR_OWVAR 40
15708: PUSH
15709: LD_VAR 0 4
15713: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15714: LD_ADDR_OWVAR 41
15718: PUSH
15719: LD_VAR 0 5
15723: ST_TO_ADDR
// end ;
15724: LD_VAR 0 6
15728: RET
// export function WantPlant ( unit ) ; var task ; begin
15729: LD_INT 0
15731: PPUSH
15732: PPUSH
// result := false ;
15733: LD_ADDR_VAR 0 2
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 437
15755: ST_TO_ADDR
// if task then
15756: LD_VAR 0 3
15760: IFFALSE 15788
// if task [ 1 ] [ 1 ] = p then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: PUSH
15771: LD_INT 1
15773: ARRAY
15774: PUSH
15775: LD_STRING p
15777: EQUAL
15778: IFFALSE 15788
// result := true ;
15780: LD_ADDR_VAR 0 2
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// end ;
15788: LD_VAR 0 2
15792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
// if pos < 1 then
15799: LD_VAR 0 2
15803: PUSH
15804: LD_INT 1
15806: LESS
15807: IFFALSE 15811
// exit ;
15809: GO 16114
// if pos = 1 then
15811: LD_VAR 0 2
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: IFFALSE 15852
// result := Replace ( arr , pos [ 1 ] , value ) else
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_VAR 0 1
15830: PPUSH
15831: LD_VAR 0 2
15835: PUSH
15836: LD_INT 1
15838: ARRAY
15839: PPUSH
15840: LD_VAR 0 3
15844: PPUSH
15845: CALL_OW 1
15849: ST_TO_ADDR
15850: GO 16114
// begin tmp := arr ;
15852: LD_ADDR_VAR 0 6
15856: PUSH
15857: LD_VAR 0 1
15861: ST_TO_ADDR
// s_arr := [ tmp ] ;
15862: LD_ADDR_VAR 0 7
15866: PUSH
15867: LD_VAR 0 6
15871: PUSH
15872: EMPTY
15873: LIST
15874: ST_TO_ADDR
// for i = 1 to pos - 1 do
15875: LD_ADDR_VAR 0 5
15879: PUSH
15880: DOUBLE
15881: LD_INT 1
15883: DEC
15884: ST_TO_ADDR
15885: LD_VAR 0 2
15889: PUSH
15890: LD_INT 1
15892: MINUS
15893: PUSH
15894: FOR_TO
15895: IFFALSE 15940
// begin tmp := tmp [ pos [ i ] ] ;
15897: LD_ADDR_VAR 0 6
15901: PUSH
15902: LD_VAR 0 6
15906: PUSH
15907: LD_VAR 0 2
15911: PUSH
15912: LD_VAR 0 5
15916: ARRAY
15917: ARRAY
15918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15919: LD_ADDR_VAR 0 7
15923: PUSH
15924: LD_VAR 0 7
15928: PUSH
15929: LD_VAR 0 6
15933: PUSH
15934: EMPTY
15935: LIST
15936: ADD
15937: ST_TO_ADDR
// end ;
15938: GO 15894
15940: POP
15941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15942: LD_ADDR_VAR 0 6
15946: PUSH
15947: LD_VAR 0 6
15951: PPUSH
15952: LD_VAR 0 2
15956: PUSH
15957: LD_VAR 0 2
15961: ARRAY
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15973: LD_ADDR_VAR 0 7
15977: PUSH
15978: LD_VAR 0 7
15982: PPUSH
15983: LD_VAR 0 7
15987: PPUSH
15988: LD_VAR 0 6
15992: PPUSH
15993: CALL_OW 1
15997: ST_TO_ADDR
// for i = s_arr downto 2 do
15998: LD_ADDR_VAR 0 5
16002: PUSH
16003: DOUBLE
16004: LD_VAR 0 7
16008: INC
16009: ST_TO_ADDR
16010: LD_INT 2
16012: PUSH
16013: FOR_DOWNTO
16014: IFFALSE 16098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16016: LD_ADDR_VAR 0 6
16020: PUSH
16021: LD_VAR 0 7
16025: PUSH
16026: LD_VAR 0 5
16030: PUSH
16031: LD_INT 1
16033: MINUS
16034: ARRAY
16035: PPUSH
16036: LD_VAR 0 2
16040: PUSH
16041: LD_VAR 0 5
16045: PUSH
16046: LD_INT 1
16048: MINUS
16049: ARRAY
16050: PPUSH
16051: LD_VAR 0 7
16055: PUSH
16056: LD_VAR 0 5
16060: ARRAY
16061: PPUSH
16062: CALL_OW 1
16066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16067: LD_ADDR_VAR 0 7
16071: PUSH
16072: LD_VAR 0 7
16076: PPUSH
16077: LD_VAR 0 5
16081: PUSH
16082: LD_INT 1
16084: MINUS
16085: PPUSH
16086: LD_VAR 0 6
16090: PPUSH
16091: CALL_OW 1
16095: ST_TO_ADDR
// end ;
16096: GO 16013
16098: POP
16099: POP
// result := s_arr [ 1 ] ;
16100: LD_ADDR_VAR 0 4
16104: PUSH
16105: LD_VAR 0 7
16109: PUSH
16110: LD_INT 1
16112: ARRAY
16113: ST_TO_ADDR
// end ; end ;
16114: LD_VAR 0 4
16118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16119: LD_INT 0
16121: PPUSH
16122: PPUSH
// if not list then
16123: LD_VAR 0 1
16127: NOT
16128: IFFALSE 16132
// exit ;
16130: GO 16223
// i := list [ pos1 ] ;
16132: LD_ADDR_VAR 0 5
16136: PUSH
16137: LD_VAR 0 1
16141: PUSH
16142: LD_VAR 0 2
16146: ARRAY
16147: ST_TO_ADDR
// if not i then
16148: LD_VAR 0 5
16152: NOT
16153: IFFALSE 16157
// exit ;
16155: GO 16223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16157: LD_ADDR_VAR 0 1
16161: PUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: LD_VAR 0 2
16171: PPUSH
16172: LD_VAR 0 1
16176: PUSH
16177: LD_VAR 0 3
16181: ARRAY
16182: PPUSH
16183: CALL_OW 1
16187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_VAR 0 5
16207: PPUSH
16208: CALL_OW 1
16212: ST_TO_ADDR
// result := list ;
16213: LD_ADDR_VAR 0 4
16217: PUSH
16218: LD_VAR 0 1
16222: ST_TO_ADDR
// end ;
16223: LD_VAR 0 4
16227: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16228: LD_INT 0
16230: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16231: LD_ADDR_VAR 0 5
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 250
16245: PPUSH
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 251
16255: PPUSH
16256: LD_VAR 0 2
16260: PPUSH
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_VAR 0 4
16270: PPUSH
16271: CALL 16281 0 5
16275: ST_TO_ADDR
// end ;
16276: LD_VAR 0 5
16280: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16281: LD_INT 0
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
// if not list then
16287: LD_VAR 0 3
16291: NOT
16292: IFFALSE 16296
// exit ;
16294: GO 16684
// result := [ ] ;
16296: LD_ADDR_VAR 0 6
16300: PUSH
16301: EMPTY
16302: ST_TO_ADDR
// for i in list do
16303: LD_ADDR_VAR 0 7
16307: PUSH
16308: LD_VAR 0 3
16312: PUSH
16313: FOR_IN
16314: IFFALSE 16516
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16316: LD_ADDR_VAR 0 9
16320: PUSH
16321: LD_VAR 0 7
16325: PPUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: LD_VAR 0 2
16335: PPUSH
16336: CALL_OW 297
16340: ST_TO_ADDR
// if not result then
16341: LD_VAR 0 6
16345: NOT
16346: IFFALSE 16372
// result := [ [ i , tmp ] ] else
16348: LD_ADDR_VAR 0 6
16352: PUSH
16353: LD_VAR 0 7
16357: PUSH
16358: LD_VAR 0 9
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: ST_TO_ADDR
16370: GO 16514
// begin if result [ result ] [ 2 ] < tmp then
16372: LD_VAR 0 6
16376: PUSH
16377: LD_VAR 0 6
16381: ARRAY
16382: PUSH
16383: LD_INT 2
16385: ARRAY
16386: PUSH
16387: LD_VAR 0 9
16391: LESS
16392: IFFALSE 16434
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16394: LD_ADDR_VAR 0 6
16398: PUSH
16399: LD_VAR 0 6
16403: PPUSH
16404: LD_VAR 0 6
16408: PUSH
16409: LD_INT 1
16411: PLUS
16412: PPUSH
16413: LD_VAR 0 7
16417: PUSH
16418: LD_VAR 0 9
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PPUSH
16427: CALL_OW 2
16431: ST_TO_ADDR
16432: GO 16514
// for j = 1 to result do
16434: LD_ADDR_VAR 0 8
16438: PUSH
16439: DOUBLE
16440: LD_INT 1
16442: DEC
16443: ST_TO_ADDR
16444: LD_VAR 0 6
16448: PUSH
16449: FOR_TO
16450: IFFALSE 16512
// begin if tmp < result [ j ] [ 2 ] then
16452: LD_VAR 0 9
16456: PUSH
16457: LD_VAR 0 6
16461: PUSH
16462: LD_VAR 0 8
16466: ARRAY
16467: PUSH
16468: LD_INT 2
16470: ARRAY
16471: LESS
16472: IFFALSE 16510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16474: LD_ADDR_VAR 0 6
16478: PUSH
16479: LD_VAR 0 6
16483: PPUSH
16484: LD_VAR 0 8
16488: PPUSH
16489: LD_VAR 0 7
16493: PUSH
16494: LD_VAR 0 9
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PPUSH
16503: CALL_OW 2
16507: ST_TO_ADDR
// break ;
16508: GO 16512
// end ; end ;
16510: GO 16449
16512: POP
16513: POP
// end ; end ;
16514: GO 16313
16516: POP
16517: POP
// if result and not asc then
16518: LD_VAR 0 6
16522: PUSH
16523: LD_VAR 0 4
16527: NOT
16528: AND
16529: IFFALSE 16604
// begin tmp := result ;
16531: LD_ADDR_VAR 0 9
16535: PUSH
16536: LD_VAR 0 6
16540: ST_TO_ADDR
// for i = tmp downto 1 do
16541: LD_ADDR_VAR 0 7
16545: PUSH
16546: DOUBLE
16547: LD_VAR 0 9
16551: INC
16552: ST_TO_ADDR
16553: LD_INT 1
16555: PUSH
16556: FOR_DOWNTO
16557: IFFALSE 16602
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16559: LD_ADDR_VAR 0 6
16563: PUSH
16564: LD_VAR 0 6
16568: PPUSH
16569: LD_VAR 0 9
16573: PUSH
16574: LD_VAR 0 7
16578: MINUS
16579: PUSH
16580: LD_INT 1
16582: PLUS
16583: PPUSH
16584: LD_VAR 0 9
16588: PUSH
16589: LD_VAR 0 7
16593: ARRAY
16594: PPUSH
16595: CALL_OW 1
16599: ST_TO_ADDR
16600: GO 16556
16602: POP
16603: POP
// end ; tmp := [ ] ;
16604: LD_ADDR_VAR 0 9
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// if mode then
16611: LD_VAR 0 5
16615: IFFALSE 16684
// begin for i = 1 to result do
16617: LD_ADDR_VAR 0 7
16621: PUSH
16622: DOUBLE
16623: LD_INT 1
16625: DEC
16626: ST_TO_ADDR
16627: LD_VAR 0 6
16631: PUSH
16632: FOR_TO
16633: IFFALSE 16672
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16635: LD_ADDR_VAR 0 9
16639: PUSH
16640: LD_VAR 0 9
16644: PPUSH
16645: LD_VAR 0 7
16649: PPUSH
16650: LD_VAR 0 6
16654: PUSH
16655: LD_VAR 0 7
16659: ARRAY
16660: PUSH
16661: LD_INT 1
16663: ARRAY
16664: PPUSH
16665: CALL_OW 1
16669: ST_TO_ADDR
16670: GO 16632
16672: POP
16673: POP
// result := tmp ;
16674: LD_ADDR_VAR 0 6
16678: PUSH
16679: LD_VAR 0 9
16683: ST_TO_ADDR
// end ; end ;
16684: LD_VAR 0 6
16688: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
16693: PPUSH
16694: PPUSH
16695: PPUSH
16696: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16697: LD_ADDR_VAR 0 5
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: LD_INT 0
16707: PUSH
16708: LD_INT 0
16710: PUSH
16711: EMPTY
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: ST_TO_ADDR
// if not x or not y then
16719: LD_VAR 0 2
16723: NOT
16724: PUSH
16725: LD_VAR 0 3
16729: NOT
16730: OR
16731: IFFALSE 16735
// exit ;
16733: GO 18387
// if not range then
16735: LD_VAR 0 4
16739: NOT
16740: IFFALSE 16750
// range := 10 ;
16742: LD_ADDR_VAR 0 4
16746: PUSH
16747: LD_INT 10
16749: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16750: LD_ADDR_VAR 0 8
16754: PUSH
16755: LD_INT 81
16757: PUSH
16758: LD_VAR 0 1
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 92
16769: PUSH
16770: LD_VAR 0 2
16774: PUSH
16775: LD_VAR 0 3
16779: PUSH
16780: LD_VAR 0 4
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 3
16793: PUSH
16794: LD_INT 21
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: PPUSH
16813: CALL_OW 69
16817: ST_TO_ADDR
// if not tmp then
16818: LD_VAR 0 8
16822: NOT
16823: IFFALSE 16827
// exit ;
16825: GO 18387
// for i in tmp do
16827: LD_ADDR_VAR 0 6
16831: PUSH
16832: LD_VAR 0 8
16836: PUSH
16837: FOR_IN
16838: IFFALSE 18362
// begin points := [ 0 , 0 , 0 ] ;
16840: LD_ADDR_VAR 0 9
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: LIST
16858: ST_TO_ADDR
// bpoints := 1 ;
16859: LD_ADDR_VAR 0 10
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16867: LD_VAR 0 6
16871: PPUSH
16872: CALL_OW 247
16876: PUSH
16877: LD_INT 1
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 17463
16885: POP
// begin if GetClass ( i ) = 1 then
16886: LD_VAR 0 6
16890: PPUSH
16891: CALL_OW 257
16895: PUSH
16896: LD_INT 1
16898: EQUAL
16899: IFFALSE 16920
// points := [ 10 , 5 , 3 ] ;
16901: LD_ADDR_VAR 0 9
16905: PUSH
16906: LD_INT 10
16908: PUSH
16909: LD_INT 5
16911: PUSH
16912: LD_INT 3
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16920: LD_VAR 0 6
16924: PPUSH
16925: CALL_OW 257
16929: PUSH
16930: LD_INT 2
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: LD_INT 4
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: IN
16944: IFFALSE 16965
// points := [ 3 , 2 , 1 ] ;
16946: LD_ADDR_VAR 0 9
16950: PUSH
16951: LD_INT 3
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16965: LD_VAR 0 6
16969: PPUSH
16970: CALL_OW 257
16974: PUSH
16975: LD_INT 5
16977: EQUAL
16978: IFFALSE 16999
// points := [ 130 , 5 , 2 ] ;
16980: LD_ADDR_VAR 0 9
16984: PUSH
16985: LD_INT 130
16987: PUSH
16988: LD_INT 5
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16999: LD_VAR 0 6
17003: PPUSH
17004: CALL_OW 257
17008: PUSH
17009: LD_INT 8
17011: EQUAL
17012: IFFALSE 17033
// points := [ 35 , 35 , 30 ] ;
17014: LD_ADDR_VAR 0 9
17018: PUSH
17019: LD_INT 35
17021: PUSH
17022: LD_INT 35
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17033: LD_VAR 0 6
17037: PPUSH
17038: CALL_OW 257
17042: PUSH
17043: LD_INT 9
17045: EQUAL
17046: IFFALSE 17067
// points := [ 20 , 55 , 40 ] ;
17048: LD_ADDR_VAR 0 9
17052: PUSH
17053: LD_INT 20
17055: PUSH
17056: LD_INT 55
17058: PUSH
17059: LD_INT 40
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17067: LD_VAR 0 6
17071: PPUSH
17072: CALL_OW 257
17076: PUSH
17077: LD_INT 12
17079: PUSH
17080: LD_INT 16
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: IN
17087: IFFALSE 17108
// points := [ 5 , 3 , 2 ] ;
17089: LD_ADDR_VAR 0 9
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17108: LD_VAR 0 6
17112: PPUSH
17113: CALL_OW 257
17117: PUSH
17118: LD_INT 17
17120: EQUAL
17121: IFFALSE 17142
// points := [ 100 , 50 , 75 ] ;
17123: LD_ADDR_VAR 0 9
17127: PUSH
17128: LD_INT 100
17130: PUSH
17131: LD_INT 50
17133: PUSH
17134: LD_INT 75
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17142: LD_VAR 0 6
17146: PPUSH
17147: CALL_OW 257
17151: PUSH
17152: LD_INT 15
17154: EQUAL
17155: IFFALSE 17176
// points := [ 10 , 5 , 3 ] ;
17157: LD_ADDR_VAR 0 9
17161: PUSH
17162: LD_INT 10
17164: PUSH
17165: LD_INT 5
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17176: LD_VAR 0 6
17180: PPUSH
17181: CALL_OW 257
17185: PUSH
17186: LD_INT 14
17188: EQUAL
17189: IFFALSE 17210
// points := [ 10 , 0 , 0 ] ;
17191: LD_ADDR_VAR 0 9
17195: PUSH
17196: LD_INT 10
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17210: LD_VAR 0 6
17214: PPUSH
17215: CALL_OW 257
17219: PUSH
17220: LD_INT 11
17222: EQUAL
17223: IFFALSE 17244
// points := [ 30 , 10 , 5 ] ;
17225: LD_ADDR_VAR 0 9
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 10
17235: PUSH
17236: LD_INT 5
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 5
17251: PPUSH
17252: CALL_OW 321
17256: PUSH
17257: LD_INT 2
17259: EQUAL
17260: IFFALSE 17277
// bpoints := bpoints * 1.8 ;
17262: LD_ADDR_VAR 0 10
17266: PUSH
17267: LD_VAR 0 10
17271: PUSH
17272: LD_REAL  1.80000000000000E+0000
17275: MUL
17276: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17277: LD_VAR 0 6
17281: PPUSH
17282: CALL_OW 257
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: LD_INT 3
17295: PUSH
17296: LD_INT 4
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: IN
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: LD_INT 51
17313: PPUSH
17314: CALL_OW 321
17318: PUSH
17319: LD_INT 2
17321: EQUAL
17322: AND
17323: IFFALSE 17340
// bpoints := bpoints * 1.2 ;
17325: LD_ADDR_VAR 0 10
17329: PUSH
17330: LD_VAR 0 10
17334: PUSH
17335: LD_REAL  1.20000000000000E+0000
17338: MUL
17339: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17340: LD_VAR 0 6
17344: PPUSH
17345: CALL_OW 257
17349: PUSH
17350: LD_INT 5
17352: PUSH
17353: LD_INT 7
17355: PUSH
17356: LD_INT 9
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: IN
17364: PUSH
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_INT 52
17372: PPUSH
17373: CALL_OW 321
17377: PUSH
17378: LD_INT 2
17380: EQUAL
17381: AND
17382: IFFALSE 17399
// bpoints := bpoints * 1.5 ;
17384: LD_ADDR_VAR 0 10
17388: PUSH
17389: LD_VAR 0 10
17393: PUSH
17394: LD_REAL  1.50000000000000E+0000
17397: MUL
17398: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17399: LD_VAR 0 1
17403: PPUSH
17404: LD_INT 66
17406: PPUSH
17407: CALL_OW 321
17411: PUSH
17412: LD_INT 2
17414: EQUAL
17415: IFFALSE 17432
// bpoints := bpoints * 1.1 ;
17417: LD_ADDR_VAR 0 10
17421: PUSH
17422: LD_VAR 0 10
17426: PUSH
17427: LD_REAL  1.10000000000000E+0000
17430: MUL
17431: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17432: LD_ADDR_VAR 0 10
17436: PUSH
17437: LD_VAR 0 10
17441: PUSH
17442: LD_VAR 0 6
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: CALL_OW 259
17454: PUSH
17455: LD_REAL  1.15000000000000E+0000
17458: MUL
17459: MUL
17460: ST_TO_ADDR
// end ; unit_vehicle :
17461: GO 18291
17463: LD_INT 2
17465: DOUBLE
17466: EQUAL
17467: IFTRUE 17471
17469: GO 18279
17471: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17472: LD_VAR 0 6
17476: PPUSH
17477: CALL_OW 264
17481: PUSH
17482: LD_INT 2
17484: PUSH
17485: LD_INT 42
17487: PUSH
17488: LD_INT 24
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: IN
17496: IFFALSE 17517
// points := [ 25 , 5 , 3 ] ;
17498: LD_ADDR_VAR 0 9
17502: PUSH
17503: LD_INT 25
17505: PUSH
17506: LD_INT 5
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: LIST
17516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17517: LD_VAR 0 6
17521: PPUSH
17522: CALL_OW 264
17526: PUSH
17527: LD_INT 4
17529: PUSH
17530: LD_INT 43
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: IN
17541: IFFALSE 17562
// points := [ 40 , 15 , 5 ] ;
17543: LD_ADDR_VAR 0 9
17547: PUSH
17548: LD_INT 40
17550: PUSH
17551: LD_INT 15
17553: PUSH
17554: LD_INT 5
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17562: LD_VAR 0 6
17566: PPUSH
17567: CALL_OW 264
17571: PUSH
17572: LD_INT 3
17574: PUSH
17575: LD_INT 23
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: IN
17582: IFFALSE 17603
// points := [ 7 , 25 , 8 ] ;
17584: LD_ADDR_VAR 0 9
17588: PUSH
17589: LD_INT 7
17591: PUSH
17592: LD_INT 25
17594: PUSH
17595: LD_INT 8
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17603: LD_VAR 0 6
17607: PPUSH
17608: CALL_OW 264
17612: PUSH
17613: LD_INT 5
17615: PUSH
17616: LD_INT 27
17618: PUSH
17619: LD_INT 44
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: IN
17627: IFFALSE 17648
// points := [ 14 , 50 , 16 ] ;
17629: LD_ADDR_VAR 0 9
17633: PUSH
17634: LD_INT 14
17636: PUSH
17637: LD_INT 50
17639: PUSH
17640: LD_INT 16
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17648: LD_VAR 0 6
17652: PPUSH
17653: CALL_OW 264
17657: PUSH
17658: LD_INT 6
17660: PUSH
17661: LD_INT 46
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: IN
17668: IFFALSE 17689
// points := [ 32 , 120 , 70 ] ;
17670: LD_ADDR_VAR 0 9
17674: PUSH
17675: LD_INT 32
17677: PUSH
17678: LD_INT 120
17680: PUSH
17681: LD_INT 70
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17689: LD_VAR 0 6
17693: PPUSH
17694: CALL_OW 264
17698: PUSH
17699: LD_INT 7
17701: PUSH
17702: LD_INT 28
17704: PUSH
17705: LD_INT 45
17707: PUSH
17708: LD_EXP 97
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: IN
17719: IFFALSE 17740
// points := [ 35 , 20 , 45 ] ;
17721: LD_ADDR_VAR 0 9
17725: PUSH
17726: LD_INT 35
17728: PUSH
17729: LD_INT 20
17731: PUSH
17732: LD_INT 45
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17740: LD_VAR 0 6
17744: PPUSH
17745: CALL_OW 264
17749: PUSH
17750: LD_INT 47
17752: PUSH
17753: EMPTY
17754: LIST
17755: IN
17756: IFFALSE 17777
// points := [ 67 , 45 , 75 ] ;
17758: LD_ADDR_VAR 0 9
17762: PUSH
17763: LD_INT 67
17765: PUSH
17766: LD_INT 45
17768: PUSH
17769: LD_INT 75
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17777: LD_VAR 0 6
17781: PPUSH
17782: CALL_OW 264
17786: PUSH
17787: LD_INT 26
17789: PUSH
17790: EMPTY
17791: LIST
17792: IN
17793: IFFALSE 17814
// points := [ 120 , 30 , 80 ] ;
17795: LD_ADDR_VAR 0 9
17799: PUSH
17800: LD_INT 120
17802: PUSH
17803: LD_INT 30
17805: PUSH
17806: LD_INT 80
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17814: LD_VAR 0 6
17818: PPUSH
17819: CALL_OW 264
17823: PUSH
17824: LD_INT 22
17826: PUSH
17827: EMPTY
17828: LIST
17829: IN
17830: IFFALSE 17851
// points := [ 40 , 1 , 1 ] ;
17832: LD_ADDR_VAR 0 9
17836: PUSH
17837: LD_INT 40
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17851: LD_VAR 0 6
17855: PPUSH
17856: CALL_OW 264
17860: PUSH
17861: LD_INT 29
17863: PUSH
17864: EMPTY
17865: LIST
17866: IN
17867: IFFALSE 17888
// points := [ 70 , 200 , 400 ] ;
17869: LD_ADDR_VAR 0 9
17873: PUSH
17874: LD_INT 70
17876: PUSH
17877: LD_INT 200
17879: PUSH
17880: LD_INT 400
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17888: LD_VAR 0 6
17892: PPUSH
17893: CALL_OW 264
17897: PUSH
17898: LD_INT 14
17900: PUSH
17901: LD_INT 53
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: IN
17908: IFFALSE 17929
// points := [ 40 , 10 , 20 ] ;
17910: LD_ADDR_VAR 0 9
17914: PUSH
17915: LD_INT 40
17917: PUSH
17918: LD_INT 10
17920: PUSH
17921: LD_INT 20
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17929: LD_VAR 0 6
17933: PPUSH
17934: CALL_OW 264
17938: PUSH
17939: LD_INT 9
17941: PUSH
17942: EMPTY
17943: LIST
17944: IN
17945: IFFALSE 17966
// points := [ 5 , 70 , 20 ] ;
17947: LD_ADDR_VAR 0 9
17951: PUSH
17952: LD_INT 5
17954: PUSH
17955: LD_INT 70
17957: PUSH
17958: LD_INT 20
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17966: LD_VAR 0 6
17970: PPUSH
17971: CALL_OW 264
17975: PUSH
17976: LD_INT 10
17978: PUSH
17979: EMPTY
17980: LIST
17981: IN
17982: IFFALSE 18003
// points := [ 35 , 110 , 70 ] ;
17984: LD_ADDR_VAR 0 9
17988: PUSH
17989: LD_INT 35
17991: PUSH
17992: LD_INT 110
17994: PUSH
17995: LD_INT 70
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18003: LD_VAR 0 6
18007: PPUSH
18008: CALL_OW 265
18012: PUSH
18013: LD_INT 25
18015: EQUAL
18016: IFFALSE 18037
// points := [ 80 , 65 , 100 ] ;
18018: LD_ADDR_VAR 0 9
18022: PUSH
18023: LD_INT 80
18025: PUSH
18026: LD_INT 65
18028: PUSH
18029: LD_INT 100
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18037: LD_VAR 0 6
18041: PPUSH
18042: CALL_OW 263
18046: PUSH
18047: LD_INT 1
18049: EQUAL
18050: IFFALSE 18085
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18052: LD_ADDR_VAR 0 10
18056: PUSH
18057: LD_VAR 0 10
18061: PUSH
18062: LD_VAR 0 6
18066: PPUSH
18067: CALL_OW 311
18071: PPUSH
18072: LD_INT 3
18074: PPUSH
18075: CALL_OW 259
18079: PUSH
18080: LD_INT 4
18082: MUL
18083: MUL
18084: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18085: LD_VAR 0 6
18089: PPUSH
18090: CALL_OW 263
18094: PUSH
18095: LD_INT 2
18097: EQUAL
18098: IFFALSE 18149
// begin j := IsControledBy ( i ) ;
18100: LD_ADDR_VAR 0 7
18104: PUSH
18105: LD_VAR 0 6
18109: PPUSH
18110: CALL_OW 312
18114: ST_TO_ADDR
// if j then
18115: LD_VAR 0 7
18119: IFFALSE 18149
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18121: LD_ADDR_VAR 0 10
18125: PUSH
18126: LD_VAR 0 10
18130: PUSH
18131: LD_VAR 0 7
18135: PPUSH
18136: LD_INT 3
18138: PPUSH
18139: CALL_OW 259
18143: PUSH
18144: LD_INT 3
18146: MUL
18147: MUL
18148: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18149: LD_VAR 0 6
18153: PPUSH
18154: CALL_OW 264
18158: PUSH
18159: LD_INT 5
18161: PUSH
18162: LD_INT 6
18164: PUSH
18165: LD_INT 46
18167: PUSH
18168: LD_INT 44
18170: PUSH
18171: LD_INT 47
18173: PUSH
18174: LD_INT 45
18176: PUSH
18177: LD_INT 28
18179: PUSH
18180: LD_INT 7
18182: PUSH
18183: LD_INT 27
18185: PUSH
18186: LD_INT 29
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: IN
18201: PUSH
18202: LD_VAR 0 1
18206: PPUSH
18207: LD_INT 52
18209: PPUSH
18210: CALL_OW 321
18214: PUSH
18215: LD_INT 2
18217: EQUAL
18218: AND
18219: IFFALSE 18236
// bpoints := bpoints * 1.2 ;
18221: LD_ADDR_VAR 0 10
18225: PUSH
18226: LD_VAR 0 10
18230: PUSH
18231: LD_REAL  1.20000000000000E+0000
18234: MUL
18235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18236: LD_VAR 0 6
18240: PPUSH
18241: CALL_OW 264
18245: PUSH
18246: LD_INT 6
18248: PUSH
18249: LD_INT 46
18251: PUSH
18252: LD_INT 47
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: IN
18260: IFFALSE 18277
// bpoints := bpoints * 1.2 ;
18262: LD_ADDR_VAR 0 10
18266: PUSH
18267: LD_VAR 0 10
18271: PUSH
18272: LD_REAL  1.20000000000000E+0000
18275: MUL
18276: ST_TO_ADDR
// end ; unit_building :
18277: GO 18291
18279: LD_INT 3
18281: DOUBLE
18282: EQUAL
18283: IFTRUE 18287
18285: GO 18290
18287: POP
// ; end ;
18288: GO 18291
18290: POP
// for j = 1 to 3 do
18291: LD_ADDR_VAR 0 7
18295: PUSH
18296: DOUBLE
18297: LD_INT 1
18299: DEC
18300: ST_TO_ADDR
18301: LD_INT 3
18303: PUSH
18304: FOR_TO
18305: IFFALSE 18358
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18307: LD_ADDR_VAR 0 5
18311: PUSH
18312: LD_VAR 0 5
18316: PPUSH
18317: LD_VAR 0 7
18321: PPUSH
18322: LD_VAR 0 5
18326: PUSH
18327: LD_VAR 0 7
18331: ARRAY
18332: PUSH
18333: LD_VAR 0 9
18337: PUSH
18338: LD_VAR 0 7
18342: ARRAY
18343: PUSH
18344: LD_VAR 0 10
18348: MUL
18349: PLUS
18350: PPUSH
18351: CALL_OW 1
18355: ST_TO_ADDR
18356: GO 18304
18358: POP
18359: POP
// end ;
18360: GO 16837
18362: POP
18363: POP
// result := Replace ( result , 4 , tmp ) ;
18364: LD_ADDR_VAR 0 5
18368: PUSH
18369: LD_VAR 0 5
18373: PPUSH
18374: LD_INT 4
18376: PPUSH
18377: LD_VAR 0 8
18381: PPUSH
18382: CALL_OW 1
18386: ST_TO_ADDR
// end ;
18387: LD_VAR 0 5
18391: RET
// export function DangerAtRange ( unit , range ) ; begin
18392: LD_INT 0
18394: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18395: LD_ADDR_VAR 0 3
18399: PUSH
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 255
18409: PPUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 250
18419: PPUSH
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 251
18429: PPUSH
18430: LD_VAR 0 2
18434: PPUSH
18435: CALL 16689 0 4
18439: ST_TO_ADDR
// end ;
18440: LD_VAR 0 3
18444: RET
// export function DangerInArea ( side , area ) ; begin
18445: LD_INT 0
18447: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: LD_VAR 0 2
18457: PPUSH
18458: LD_INT 81
18460: PUSH
18461: LD_VAR 0 1
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 70
18474: ST_TO_ADDR
// end ;
18475: LD_VAR 0 3
18479: RET
// export function IsExtension ( b ) ; begin
18480: LD_INT 0
18482: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18483: LD_ADDR_VAR 0 2
18487: PUSH
18488: LD_VAR 0 1
18492: PUSH
18493: LD_INT 23
18495: PUSH
18496: LD_INT 20
18498: PUSH
18499: LD_INT 22
18501: PUSH
18502: LD_INT 17
18504: PUSH
18505: LD_INT 24
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 19
18513: PUSH
18514: LD_INT 16
18516: PUSH
18517: LD_INT 25
18519: PUSH
18520: LD_INT 18
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: IN
18535: ST_TO_ADDR
// end ;
18536: LD_VAR 0 2
18540: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
18545: PPUSH
// result := [ ] ;
18546: LD_ADDR_VAR 0 4
18550: PUSH
18551: EMPTY
18552: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18553: LD_ADDR_VAR 0 5
18557: PUSH
18558: LD_VAR 0 2
18562: PPUSH
18563: LD_INT 21
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PPUSH
18573: CALL_OW 70
18577: ST_TO_ADDR
// if not tmp then
18578: LD_VAR 0 5
18582: NOT
18583: IFFALSE 18587
// exit ;
18585: GO 18651
// if checkLink then
18587: LD_VAR 0 3
18591: IFFALSE 18641
// begin for i in tmp do
18593: LD_ADDR_VAR 0 6
18597: PUSH
18598: LD_VAR 0 5
18602: PUSH
18603: FOR_IN
18604: IFFALSE 18639
// if GetBase ( i ) <> base then
18606: LD_VAR 0 6
18610: PPUSH
18611: CALL_OW 274
18615: PUSH
18616: LD_VAR 0 1
18620: NONEQUAL
18621: IFFALSE 18637
// ComLinkToBase ( base , i ) ;
18623: LD_VAR 0 1
18627: PPUSH
18628: LD_VAR 0 6
18632: PPUSH
18633: CALL_OW 169
18637: GO 18603
18639: POP
18640: POP
// end ; result := tmp ;
18641: LD_ADDR_VAR 0 4
18645: PUSH
18646: LD_VAR 0 5
18650: ST_TO_ADDR
// end ;
18651: LD_VAR 0 4
18655: RET
// export function ComComplete ( units , b ) ; var i ; begin
18656: LD_INT 0
18658: PPUSH
18659: PPUSH
// if not units then
18660: LD_VAR 0 1
18664: NOT
18665: IFFALSE 18669
// exit ;
18667: GO 18759
// for i in units do
18669: LD_ADDR_VAR 0 4
18673: PUSH
18674: LD_VAR 0 1
18678: PUSH
18679: FOR_IN
18680: IFFALSE 18757
// if BuildingStatus ( b ) = bs_build then
18682: LD_VAR 0 2
18686: PPUSH
18687: CALL_OW 461
18691: PUSH
18692: LD_INT 1
18694: EQUAL
18695: IFFALSE 18755
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18697: LD_VAR 0 4
18701: PPUSH
18702: LD_STRING h
18704: PUSH
18705: LD_VAR 0 2
18709: PPUSH
18710: CALL_OW 250
18714: PUSH
18715: LD_VAR 0 2
18719: PPUSH
18720: CALL_OW 251
18724: PUSH
18725: LD_VAR 0 2
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: PPUSH
18751: CALL_OW 446
18755: GO 18679
18757: POP
18758: POP
// end ;
18759: LD_VAR 0 3
18763: RET
// export function AddComComplete ( units , b ) ; var i ; begin
18764: LD_INT 0
18766: PPUSH
18767: PPUSH
// if not units then
18768: LD_VAR 0 1
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 18867
// for i in units do
18777: LD_ADDR_VAR 0 4
18781: PUSH
18782: LD_VAR 0 1
18786: PUSH
18787: FOR_IN
18788: IFFALSE 18865
// if BuildingStatus ( b ) = bs_build then
18790: LD_VAR 0 2
18794: PPUSH
18795: CALL_OW 461
18799: PUSH
18800: LD_INT 1
18802: EQUAL
18803: IFFALSE 18863
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18805: LD_VAR 0 4
18809: PPUSH
18810: LD_STRING h
18812: PUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: CALL_OW 250
18822: PUSH
18823: LD_VAR 0 2
18827: PPUSH
18828: CALL_OW 251
18832: PUSH
18833: LD_VAR 0 2
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: PPUSH
18859: CALL_OW 447
18863: GO 18787
18865: POP
18866: POP
// end ;
18867: LD_VAR 0 3
18871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18872: LD_INT 0
18874: PPUSH
18875: PPUSH
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18880: LD_VAR 0 1
18884: NOT
18885: PUSH
18886: LD_VAR 0 1
18890: PPUSH
18891: CALL_OW 263
18895: PUSH
18896: LD_INT 2
18898: NONEQUAL
18899: OR
18900: IFFALSE 18904
// exit ;
18902: GO 19220
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18904: LD_ADDR_VAR 0 6
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL_OW 255
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_INT 36
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 34
18941: PUSH
18942: LD_INT 31
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 69
18962: ST_TO_ADDR
// if not tmp then
18963: LD_VAR 0 6
18967: NOT
18968: IFFALSE 18972
// exit ;
18970: GO 19220
// result := [ ] ;
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: EMPTY
18978: ST_TO_ADDR
// for i in tmp do
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_VAR 0 6
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19061
// begin t := UnitsInside ( i ) ;
18992: LD_ADDR_VAR 0 4
18996: PUSH
18997: LD_VAR 0 3
19001: PPUSH
19002: CALL_OW 313
19006: ST_TO_ADDR
// if t then
19007: LD_VAR 0 4
19011: IFFALSE 19059
// for j in t do
19013: LD_ADDR_VAR 0 7
19017: PUSH
19018: LD_VAR 0 4
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19057
// result := Replace ( result , result + 1 , j ) ;
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: LD_VAR 0 2
19040: PUSH
19041: LD_INT 1
19043: PLUS
19044: PPUSH
19045: LD_VAR 0 7
19049: PPUSH
19050: CALL_OW 1
19054: ST_TO_ADDR
19055: GO 19023
19057: POP
19058: POP
// end ;
19059: GO 18989
19061: POP
19062: POP
// if not result then
19063: LD_VAR 0 2
19067: NOT
19068: IFFALSE 19072
// exit ;
19070: GO 19220
// mech := result [ 1 ] ;
19072: LD_ADDR_VAR 0 5
19076: PUSH
19077: LD_VAR 0 2
19081: PUSH
19082: LD_INT 1
19084: ARRAY
19085: ST_TO_ADDR
// if result > 1 then
19086: LD_VAR 0 2
19090: PUSH
19091: LD_INT 1
19093: GREATER
19094: IFFALSE 19206
// begin for i = 2 to result do
19096: LD_ADDR_VAR 0 3
19100: PUSH
19101: DOUBLE
19102: LD_INT 2
19104: DEC
19105: ST_TO_ADDR
19106: LD_VAR 0 2
19110: PUSH
19111: FOR_TO
19112: IFFALSE 19204
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19114: LD_ADDR_VAR 0 4
19118: PUSH
19119: LD_VAR 0 2
19123: PUSH
19124: LD_VAR 0 3
19128: ARRAY
19129: PPUSH
19130: LD_INT 3
19132: PPUSH
19133: CALL_OW 259
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: LD_VAR 0 3
19147: ARRAY
19148: PPUSH
19149: CALL_OW 432
19153: MINUS
19154: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19155: LD_VAR 0 4
19159: PUSH
19160: LD_VAR 0 5
19164: PPUSH
19165: LD_INT 3
19167: PPUSH
19168: CALL_OW 259
19172: PUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: CALL_OW 432
19182: MINUS
19183: GREATEREQUAL
19184: IFFALSE 19202
// mech := result [ i ] ;
19186: LD_ADDR_VAR 0 5
19190: PUSH
19191: LD_VAR 0 2
19195: PUSH
19196: LD_VAR 0 3
19200: ARRAY
19201: ST_TO_ADDR
// end ;
19202: GO 19111
19204: POP
19205: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_VAR 0 5
19215: PPUSH
19216: CALL_OW 135
// end ;
19220: LD_VAR 0 2
19224: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
// result := [ ] ;
19240: LD_ADDR_VAR 0 7
19244: PUSH
19245: EMPTY
19246: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19247: LD_VAR 0 1
19251: PPUSH
19252: CALL_OW 266
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: IN
19267: NOT
19268: IFFALSE 19272
// exit ;
19270: GO 20906
// if name then
19272: LD_VAR 0 3
19276: IFFALSE 19292
// SetBName ( base_dep , name ) ;
19278: LD_VAR 0 1
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 500
// base := GetBase ( base_dep ) ;
19292: LD_ADDR_VAR 0 15
19296: PUSH
19297: LD_VAR 0 1
19301: PPUSH
19302: CALL_OW 274
19306: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19307: LD_ADDR_VAR 0 16
19311: PUSH
19312: LD_VAR 0 1
19316: PPUSH
19317: CALL_OW 255
19321: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19322: LD_ADDR_VAR 0 17
19326: PUSH
19327: LD_VAR 0 1
19331: PPUSH
19332: CALL_OW 248
19336: ST_TO_ADDR
// if sources then
19337: LD_VAR 0 5
19341: IFFALSE 19388
// for i = 1 to 3 do
19343: LD_ADDR_VAR 0 8
19347: PUSH
19348: DOUBLE
19349: LD_INT 1
19351: DEC
19352: ST_TO_ADDR
19353: LD_INT 3
19355: PUSH
19356: FOR_TO
19357: IFFALSE 19386
// AddResourceType ( base , i , sources [ i ] ) ;
19359: LD_VAR 0 15
19363: PPUSH
19364: LD_VAR 0 8
19368: PPUSH
19369: LD_VAR 0 5
19373: PUSH
19374: LD_VAR 0 8
19378: ARRAY
19379: PPUSH
19380: CALL_OW 276
19384: GO 19356
19386: POP
19387: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19388: LD_ADDR_VAR 0 18
19392: PUSH
19393: LD_VAR 0 15
19397: PPUSH
19398: LD_VAR 0 2
19402: PPUSH
19403: LD_INT 1
19405: PPUSH
19406: CALL 18541 0 3
19410: ST_TO_ADDR
// InitHc ;
19411: CALL_OW 19
// InitUc ;
19415: CALL_OW 18
// uc_side := side ;
19419: LD_ADDR_OWVAR 20
19423: PUSH
19424: LD_VAR 0 16
19428: ST_TO_ADDR
// uc_nation := nation ;
19429: LD_ADDR_OWVAR 21
19433: PUSH
19434: LD_VAR 0 17
19438: ST_TO_ADDR
// if buildings then
19439: LD_VAR 0 18
19443: IFFALSE 20765
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19445: LD_ADDR_VAR 0 19
19449: PUSH
19450: LD_VAR 0 18
19454: PPUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 29
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 30
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: PPUSH
19483: CALL_OW 72
19487: ST_TO_ADDR
// if tmp then
19488: LD_VAR 0 19
19492: IFFALSE 19540
// for i in tmp do
19494: LD_ADDR_VAR 0 8
19498: PUSH
19499: LD_VAR 0 19
19503: PUSH
19504: FOR_IN
19505: IFFALSE 19538
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19507: LD_VAR 0 8
19511: PPUSH
19512: CALL_OW 250
19516: PPUSH
19517: LD_VAR 0 8
19521: PPUSH
19522: CALL_OW 251
19526: PPUSH
19527: LD_VAR 0 16
19531: PPUSH
19532: CALL_OW 441
19536: GO 19504
19538: POP
19539: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19540: LD_VAR 0 18
19544: PPUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 32
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 30
19560: PUSH
19561: LD_INT 33
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: PPUSH
19573: CALL_OW 72
19577: IFFALSE 19665
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19579: LD_ADDR_VAR 0 8
19583: PUSH
19584: LD_VAR 0 18
19588: PPUSH
19589: LD_INT 2
19591: PUSH
19592: LD_INT 30
19594: PUSH
19595: LD_INT 32
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 30
19604: PUSH
19605: LD_INT 33
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: PPUSH
19617: CALL_OW 72
19621: PUSH
19622: FOR_IN
19623: IFFALSE 19663
// begin if not GetBWeapon ( i ) then
19625: LD_VAR 0 8
19629: PPUSH
19630: CALL_OW 269
19634: NOT
19635: IFFALSE 19661
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19637: LD_VAR 0 8
19641: PPUSH
19642: LD_VAR 0 8
19646: PPUSH
19647: LD_VAR 0 2
19651: PPUSH
19652: CALL 20911 0 2
19656: PPUSH
19657: CALL_OW 431
// end ;
19661: GO 19622
19663: POP
19664: POP
// end ; for i = 1 to personel do
19665: LD_ADDR_VAR 0 8
19669: PUSH
19670: DOUBLE
19671: LD_INT 1
19673: DEC
19674: ST_TO_ADDR
19675: LD_VAR 0 6
19679: PUSH
19680: FOR_TO
19681: IFFALSE 20745
// begin if i > 4 then
19683: LD_VAR 0 8
19687: PUSH
19688: LD_INT 4
19690: GREATER
19691: IFFALSE 19695
// break ;
19693: GO 20745
// case i of 1 :
19695: LD_VAR 0 8
19699: PUSH
19700: LD_INT 1
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19788
19708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19709: LD_ADDR_VAR 0 12
19713: PUSH
19714: LD_VAR 0 18
19718: PPUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 16
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 58
19733: PUSH
19734: EMPTY
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 32
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 4
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 30
19762: PUSH
19763: LD_INT 5
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PPUSH
19781: CALL_OW 72
19785: ST_TO_ADDR
19786: GO 20010
19788: LD_INT 2
19790: DOUBLE
19791: EQUAL
19792: IFTRUE 19796
19794: GO 19858
19796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19797: LD_ADDR_VAR 0 12
19801: PUSH
19802: LD_VAR 0 18
19806: PPUSH
19807: LD_INT 22
19809: PUSH
19810: LD_VAR 0 16
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 30
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 30
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 72
19855: ST_TO_ADDR
19856: GO 20010
19858: LD_INT 3
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19928
19866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19867: LD_ADDR_VAR 0 12
19871: PUSH
19872: LD_VAR 0 18
19876: PPUSH
19877: LD_INT 22
19879: PUSH
19880: LD_VAR 0 16
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 30
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 30
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PPUSH
19921: CALL_OW 72
19925: ST_TO_ADDR
19926: GO 20010
19928: LD_INT 4
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 20009
19936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19937: LD_ADDR_VAR 0 12
19941: PUSH
19942: LD_VAR 0 18
19946: PPUSH
19947: LD_INT 22
19949: PUSH
19950: LD_VAR 0 16
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 30
19964: PUSH
19965: LD_INT 6
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 30
19974: PUSH
19975: LD_INT 7
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 8
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PPUSH
20002: CALL_OW 72
20006: ST_TO_ADDR
20007: GO 20010
20009: POP
// if i = 1 then
20010: LD_VAR 0 8
20014: PUSH
20015: LD_INT 1
20017: EQUAL
20018: IFFALSE 20129
// begin tmp := [ ] ;
20020: LD_ADDR_VAR 0 19
20024: PUSH
20025: EMPTY
20026: ST_TO_ADDR
// for j in f do
20027: LD_ADDR_VAR 0 9
20031: PUSH
20032: LD_VAR 0 12
20036: PUSH
20037: FOR_IN
20038: IFFALSE 20111
// if GetBType ( j ) = b_bunker then
20040: LD_VAR 0 9
20044: PPUSH
20045: CALL_OW 266
20049: PUSH
20050: LD_INT 32
20052: EQUAL
20053: IFFALSE 20080
// tmp := Insert ( tmp , 1 , j ) else
20055: LD_ADDR_VAR 0 19
20059: PUSH
20060: LD_VAR 0 19
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: LD_VAR 0 9
20072: PPUSH
20073: CALL_OW 2
20077: ST_TO_ADDR
20078: GO 20109
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20080: LD_ADDR_VAR 0 19
20084: PUSH
20085: LD_VAR 0 19
20089: PPUSH
20090: LD_VAR 0 19
20094: PUSH
20095: LD_INT 1
20097: PLUS
20098: PPUSH
20099: LD_VAR 0 9
20103: PPUSH
20104: CALL_OW 2
20108: ST_TO_ADDR
20109: GO 20037
20111: POP
20112: POP
// if tmp then
20113: LD_VAR 0 19
20117: IFFALSE 20129
// f := tmp ;
20119: LD_ADDR_VAR 0 12
20123: PUSH
20124: LD_VAR 0 19
20128: ST_TO_ADDR
// end ; x := personel [ i ] ;
20129: LD_ADDR_VAR 0 13
20133: PUSH
20134: LD_VAR 0 6
20138: PUSH
20139: LD_VAR 0 8
20143: ARRAY
20144: ST_TO_ADDR
// if x = - 1 then
20145: LD_VAR 0 13
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: EQUAL
20154: IFFALSE 20363
// begin for j in f do
20156: LD_ADDR_VAR 0 9
20160: PUSH
20161: LD_VAR 0 12
20165: PUSH
20166: FOR_IN
20167: IFFALSE 20359
// repeat InitHc ;
20169: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20173: LD_VAR 0 9
20177: PPUSH
20178: CALL_OW 266
20182: PUSH
20183: LD_INT 5
20185: EQUAL
20186: IFFALSE 20256
// begin if UnitsInside ( j ) < 3 then
20188: LD_VAR 0 9
20192: PPUSH
20193: CALL_OW 313
20197: PUSH
20198: LD_INT 3
20200: LESS
20201: IFFALSE 20237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20203: LD_INT 0
20205: PPUSH
20206: LD_INT 5
20208: PUSH
20209: LD_INT 8
20211: PUSH
20212: LD_INT 9
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: LD_VAR 0 17
20224: ARRAY
20225: PPUSH
20226: LD_VAR 0 4
20230: PPUSH
20231: CALL_OW 380
20235: GO 20254
// PrepareHuman ( false , i , skill ) ;
20237: LD_INT 0
20239: PPUSH
20240: LD_VAR 0 8
20244: PPUSH
20245: LD_VAR 0 4
20249: PPUSH
20250: CALL_OW 380
// end else
20254: GO 20273
// PrepareHuman ( false , i , skill ) ;
20256: LD_INT 0
20258: PPUSH
20259: LD_VAR 0 8
20263: PPUSH
20264: LD_VAR 0 4
20268: PPUSH
20269: CALL_OW 380
// un := CreateHuman ;
20273: LD_ADDR_VAR 0 14
20277: PUSH
20278: CALL_OW 44
20282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20283: LD_ADDR_VAR 0 7
20287: PUSH
20288: LD_VAR 0 7
20292: PPUSH
20293: LD_INT 1
20295: PPUSH
20296: LD_VAR 0 14
20300: PPUSH
20301: CALL_OW 2
20305: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20306: LD_VAR 0 14
20310: PPUSH
20311: LD_VAR 0 9
20315: PPUSH
20316: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20320: LD_VAR 0 9
20324: PPUSH
20325: CALL_OW 313
20329: PUSH
20330: LD_INT 6
20332: EQUAL
20333: PUSH
20334: LD_VAR 0 9
20338: PPUSH
20339: CALL_OW 266
20343: PUSH
20344: LD_INT 32
20346: PUSH
20347: LD_INT 31
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: IN
20354: OR
20355: IFFALSE 20169
20357: GO 20166
20359: POP
20360: POP
// end else
20361: GO 20743
// for j = 1 to x do
20363: LD_ADDR_VAR 0 9
20367: PUSH
20368: DOUBLE
20369: LD_INT 1
20371: DEC
20372: ST_TO_ADDR
20373: LD_VAR 0 13
20377: PUSH
20378: FOR_TO
20379: IFFALSE 20741
// begin InitHc ;
20381: CALL_OW 19
// if not f then
20385: LD_VAR 0 12
20389: NOT
20390: IFFALSE 20479
// begin PrepareHuman ( false , i , skill ) ;
20392: LD_INT 0
20394: PPUSH
20395: LD_VAR 0 8
20399: PPUSH
20400: LD_VAR 0 4
20404: PPUSH
20405: CALL_OW 380
// un := CreateHuman ;
20409: LD_ADDR_VAR 0 14
20413: PUSH
20414: CALL_OW 44
20418: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20419: LD_ADDR_VAR 0 7
20423: PUSH
20424: LD_VAR 0 7
20428: PPUSH
20429: LD_INT 1
20431: PPUSH
20432: LD_VAR 0 14
20436: PPUSH
20437: CALL_OW 2
20441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20442: LD_VAR 0 14
20446: PPUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 250
20456: PPUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 251
20466: PPUSH
20467: LD_INT 10
20469: PPUSH
20470: LD_INT 0
20472: PPUSH
20473: CALL_OW 50
// continue ;
20477: GO 20378
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20479: LD_VAR 0 12
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 313
20492: PUSH
20493: LD_VAR 0 12
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL_OW 266
20506: PUSH
20507: LD_INT 32
20509: PUSH
20510: LD_INT 31
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: IN
20517: AND
20518: PUSH
20519: LD_VAR 0 12
20523: PUSH
20524: LD_INT 1
20526: ARRAY
20527: PPUSH
20528: CALL_OW 313
20532: PUSH
20533: LD_INT 6
20535: EQUAL
20536: OR
20537: IFFALSE 20557
// f := Delete ( f , 1 ) ;
20539: LD_ADDR_VAR 0 12
20543: PUSH
20544: LD_VAR 0 12
20548: PPUSH
20549: LD_INT 1
20551: PPUSH
20552: CALL_OW 3
20556: ST_TO_ADDR
// if not f then
20557: LD_VAR 0 12
20561: NOT
20562: IFFALSE 20580
// begin x := x + 2 ;
20564: LD_ADDR_VAR 0 13
20568: PUSH
20569: LD_VAR 0 13
20573: PUSH
20574: LD_INT 2
20576: PLUS
20577: ST_TO_ADDR
// continue ;
20578: GO 20378
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20580: LD_VAR 0 12
20584: PUSH
20585: LD_INT 1
20587: ARRAY
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 5
20596: EQUAL
20597: IFFALSE 20671
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20599: LD_VAR 0 12
20603: PUSH
20604: LD_INT 1
20606: ARRAY
20607: PPUSH
20608: CALL_OW 313
20612: PUSH
20613: LD_INT 3
20615: LESS
20616: IFFALSE 20652
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20618: LD_INT 0
20620: PPUSH
20621: LD_INT 5
20623: PUSH
20624: LD_INT 8
20626: PUSH
20627: LD_INT 9
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: LD_VAR 0 17
20639: ARRAY
20640: PPUSH
20641: LD_VAR 0 4
20645: PPUSH
20646: CALL_OW 380
20650: GO 20669
// PrepareHuman ( false , i , skill ) ;
20652: LD_INT 0
20654: PPUSH
20655: LD_VAR 0 8
20659: PPUSH
20660: LD_VAR 0 4
20664: PPUSH
20665: CALL_OW 380
// end else
20669: GO 20688
// PrepareHuman ( false , i , skill ) ;
20671: LD_INT 0
20673: PPUSH
20674: LD_VAR 0 8
20678: PPUSH
20679: LD_VAR 0 4
20683: PPUSH
20684: CALL_OW 380
// un := CreateHuman ;
20688: LD_ADDR_VAR 0 14
20692: PUSH
20693: CALL_OW 44
20697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20698: LD_ADDR_VAR 0 7
20702: PUSH
20703: LD_VAR 0 7
20707: PPUSH
20708: LD_INT 1
20710: PPUSH
20711: LD_VAR 0 14
20715: PPUSH
20716: CALL_OW 2
20720: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20721: LD_VAR 0 14
20725: PPUSH
20726: LD_VAR 0 12
20730: PUSH
20731: LD_INT 1
20733: ARRAY
20734: PPUSH
20735: CALL_OW 52
// end ;
20739: GO 20378
20741: POP
20742: POP
// end ;
20743: GO 19680
20745: POP
20746: POP
// result := result ^ buildings ;
20747: LD_ADDR_VAR 0 7
20751: PUSH
20752: LD_VAR 0 7
20756: PUSH
20757: LD_VAR 0 18
20761: ADD
20762: ST_TO_ADDR
// end else
20763: GO 20906
// begin for i = 1 to personel do
20765: LD_ADDR_VAR 0 8
20769: PUSH
20770: DOUBLE
20771: LD_INT 1
20773: DEC
20774: ST_TO_ADDR
20775: LD_VAR 0 6
20779: PUSH
20780: FOR_TO
20781: IFFALSE 20904
// begin if i > 4 then
20783: LD_VAR 0 8
20787: PUSH
20788: LD_INT 4
20790: GREATER
20791: IFFALSE 20795
// break ;
20793: GO 20904
// x := personel [ i ] ;
20795: LD_ADDR_VAR 0 13
20799: PUSH
20800: LD_VAR 0 6
20804: PUSH
20805: LD_VAR 0 8
20809: ARRAY
20810: ST_TO_ADDR
// if x = - 1 then
20811: LD_VAR 0 13
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: EQUAL
20820: IFFALSE 20824
// continue ;
20822: GO 20780
// PrepareHuman ( false , i , skill ) ;
20824: LD_INT 0
20826: PPUSH
20827: LD_VAR 0 8
20831: PPUSH
20832: LD_VAR 0 4
20836: PPUSH
20837: CALL_OW 380
// un := CreateHuman ;
20841: LD_ADDR_VAR 0 14
20845: PUSH
20846: CALL_OW 44
20850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20851: LD_VAR 0 14
20855: PPUSH
20856: LD_VAR 0 1
20860: PPUSH
20861: CALL_OW 250
20865: PPUSH
20866: LD_VAR 0 1
20870: PPUSH
20871: CALL_OW 251
20875: PPUSH
20876: LD_INT 10
20878: PPUSH
20879: LD_INT 0
20881: PPUSH
20882: CALL_OW 50
// result := result ^ un ;
20886: LD_ADDR_VAR 0 7
20890: PUSH
20891: LD_VAR 0 7
20895: PUSH
20896: LD_VAR 0 14
20900: ADD
20901: ST_TO_ADDR
// end ;
20902: GO 20780
20904: POP
20905: POP
// end ; end ;
20906: LD_VAR 0 7
20910: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20911: LD_INT 0
20913: PPUSH
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
20923: PPUSH
20924: PPUSH
20925: PPUSH
20926: PPUSH
20927: PPUSH
20928: PPUSH
// result := false ;
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20937: LD_VAR 0 1
20941: NOT
20942: PUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 266
20952: PUSH
20953: LD_INT 32
20955: PUSH
20956: LD_INT 33
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: IN
20963: NOT
20964: OR
20965: IFFALSE 20969
// exit ;
20967: GO 22078
// nat := GetNation ( tower ) ;
20969: LD_ADDR_VAR 0 12
20973: PUSH
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 248
20983: ST_TO_ADDR
// side := GetSide ( tower ) ;
20984: LD_ADDR_VAR 0 16
20988: PUSH
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 255
20998: ST_TO_ADDR
// x := GetX ( tower ) ;
20999: LD_ADDR_VAR 0 10
21003: PUSH
21004: LD_VAR 0 1
21008: PPUSH
21009: CALL_OW 250
21013: ST_TO_ADDR
// y := GetY ( tower ) ;
21014: LD_ADDR_VAR 0 11
21018: PUSH
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 251
21028: ST_TO_ADDR
// if not x or not y then
21029: LD_VAR 0 10
21033: NOT
21034: PUSH
21035: LD_VAR 0 11
21039: NOT
21040: OR
21041: IFFALSE 21045
// exit ;
21043: GO 22078
// weapon := 0 ;
21045: LD_ADDR_VAR 0 18
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// fac_list := [ ] ;
21053: LD_ADDR_VAR 0 17
21057: PUSH
21058: EMPTY
21059: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21060: LD_ADDR_VAR 0 6
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL_OW 274
21074: PPUSH
21075: LD_VAR 0 2
21079: PPUSH
21080: LD_INT 0
21082: PPUSH
21083: CALL 18541 0 3
21087: PPUSH
21088: LD_INT 30
21090: PUSH
21091: LD_INT 3
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PPUSH
21098: CALL_OW 72
21102: ST_TO_ADDR
// if not factories then
21103: LD_VAR 0 6
21107: NOT
21108: IFFALSE 21112
// exit ;
21110: GO 22078
// for i in factories do
21112: LD_ADDR_VAR 0 8
21116: PUSH
21117: LD_VAR 0 6
21121: PUSH
21122: FOR_IN
21123: IFFALSE 21148
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21125: LD_ADDR_VAR 0 17
21129: PUSH
21130: LD_VAR 0 17
21134: PUSH
21135: LD_VAR 0 8
21139: PPUSH
21140: CALL_OW 478
21144: UNION
21145: ST_TO_ADDR
21146: GO 21122
21148: POP
21149: POP
// if not fac_list then
21150: LD_VAR 0 17
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 22078
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21159: LD_ADDR_VAR 0 5
21163: PUSH
21164: LD_INT 4
21166: PUSH
21167: LD_INT 5
21169: PUSH
21170: LD_INT 9
21172: PUSH
21173: LD_INT 10
21175: PUSH
21176: LD_INT 6
21178: PUSH
21179: LD_INT 7
21181: PUSH
21182: LD_INT 11
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 27
21196: PUSH
21197: LD_INT 28
21199: PUSH
21200: LD_INT 26
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 43
21214: PUSH
21215: LD_INT 44
21217: PUSH
21218: LD_INT 46
21220: PUSH
21221: LD_INT 45
21223: PUSH
21224: LD_INT 47
21226: PUSH
21227: LD_INT 49
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: LD_VAR 0 12
21247: ARRAY
21248: ST_TO_ADDR
// list := list isect fac_list ;
21249: LD_ADDR_VAR 0 5
21253: PUSH
21254: LD_VAR 0 5
21258: PUSH
21259: LD_VAR 0 17
21263: ISECT
21264: ST_TO_ADDR
// if not list then
21265: LD_VAR 0 5
21269: NOT
21270: IFFALSE 21274
// exit ;
21272: GO 22078
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21274: LD_VAR 0 12
21278: PUSH
21279: LD_INT 3
21281: EQUAL
21282: PUSH
21283: LD_INT 49
21285: PUSH
21286: LD_VAR 0 5
21290: IN
21291: AND
21292: PUSH
21293: LD_INT 31
21295: PPUSH
21296: LD_VAR 0 16
21300: PPUSH
21301: CALL_OW 321
21305: PUSH
21306: LD_INT 2
21308: EQUAL
21309: AND
21310: IFFALSE 21370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21312: LD_INT 22
21314: PUSH
21315: LD_VAR 0 16
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 35
21326: PUSH
21327: LD_INT 49
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 91
21336: PUSH
21337: LD_VAR 0 1
21341: PUSH
21342: LD_INT 10
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: PPUSH
21355: CALL_OW 69
21359: NOT
21360: IFFALSE 21370
// weapon := ru_time_lapser ;
21362: LD_ADDR_VAR 0 18
21366: PUSH
21367: LD_INT 49
21369: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21370: LD_VAR 0 12
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: IN
21385: PUSH
21386: LD_INT 11
21388: PUSH
21389: LD_VAR 0 5
21393: IN
21394: PUSH
21395: LD_INT 30
21397: PUSH
21398: LD_VAR 0 5
21402: IN
21403: OR
21404: AND
21405: PUSH
21406: LD_INT 6
21408: PPUSH
21409: LD_VAR 0 16
21413: PPUSH
21414: CALL_OW 321
21418: PUSH
21419: LD_INT 2
21421: EQUAL
21422: AND
21423: IFFALSE 21588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21425: LD_INT 22
21427: PUSH
21428: LD_VAR 0 16
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 35
21442: PUSH
21443: LD_INT 11
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 35
21452: PUSH
21453: LD_INT 30
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 91
21467: PUSH
21468: LD_VAR 0 1
21472: PUSH
21473: LD_INT 18
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: NOT
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_VAR 0 16
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: LD_INT 30
21509: PUSH
21510: LD_INT 32
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 30
21519: PUSH
21520: LD_INT 33
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 91
21534: PUSH
21535: LD_VAR 0 1
21539: PUSH
21540: LD_INT 12
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: PPUSH
21556: CALL_OW 69
21560: PUSH
21561: LD_INT 2
21563: GREATER
21564: AND
21565: IFFALSE 21588
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21567: LD_ADDR_VAR 0 18
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 30
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_VAR 0 12
21586: ARRAY
21587: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21588: LD_VAR 0 18
21592: NOT
21593: PUSH
21594: LD_INT 40
21596: PPUSH
21597: LD_VAR 0 16
21601: PPUSH
21602: CALL_OW 321
21606: PUSH
21607: LD_INT 2
21609: EQUAL
21610: AND
21611: PUSH
21612: LD_INT 7
21614: PUSH
21615: LD_VAR 0 5
21619: IN
21620: PUSH
21621: LD_INT 28
21623: PUSH
21624: LD_VAR 0 5
21628: IN
21629: OR
21630: PUSH
21631: LD_INT 45
21633: PUSH
21634: LD_VAR 0 5
21638: IN
21639: OR
21640: AND
21641: IFFALSE 21895
// begin hex := GetHexInfo ( x , y ) ;
21643: LD_ADDR_VAR 0 4
21647: PUSH
21648: LD_VAR 0 10
21652: PPUSH
21653: LD_VAR 0 11
21657: PPUSH
21658: CALL_OW 546
21662: ST_TO_ADDR
// if hex [ 1 ] then
21663: LD_VAR 0 4
21667: PUSH
21668: LD_INT 1
21670: ARRAY
21671: IFFALSE 21675
// exit ;
21673: GO 22078
// height := hex [ 2 ] ;
21675: LD_ADDR_VAR 0 15
21679: PUSH
21680: LD_VAR 0 4
21684: PUSH
21685: LD_INT 2
21687: ARRAY
21688: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21689: LD_ADDR_VAR 0 14
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: LD_INT 5
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: ST_TO_ADDR
// for i in tmp do
21712: LD_ADDR_VAR 0 8
21716: PUSH
21717: LD_VAR 0 14
21721: PUSH
21722: FOR_IN
21723: IFFALSE 21893
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21725: LD_ADDR_VAR 0 9
21729: PUSH
21730: LD_VAR 0 10
21734: PPUSH
21735: LD_VAR 0 8
21739: PPUSH
21740: LD_INT 5
21742: PPUSH
21743: CALL_OW 272
21747: PUSH
21748: LD_VAR 0 11
21752: PPUSH
21753: LD_VAR 0 8
21757: PPUSH
21758: LD_INT 5
21760: PPUSH
21761: CALL_OW 273
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21770: LD_VAR 0 9
21774: PUSH
21775: LD_INT 1
21777: ARRAY
21778: PPUSH
21779: LD_VAR 0 9
21783: PUSH
21784: LD_INT 2
21786: ARRAY
21787: PPUSH
21788: CALL_OW 488
21792: IFFALSE 21891
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21794: LD_ADDR_VAR 0 4
21798: PUSH
21799: LD_VAR 0 9
21803: PUSH
21804: LD_INT 1
21806: ARRAY
21807: PPUSH
21808: LD_VAR 0 9
21812: PUSH
21813: LD_INT 2
21815: ARRAY
21816: PPUSH
21817: CALL_OW 546
21821: ST_TO_ADDR
// if hex [ 1 ] then
21822: LD_VAR 0 4
21826: PUSH
21827: LD_INT 1
21829: ARRAY
21830: IFFALSE 21834
// continue ;
21832: GO 21722
// h := hex [ 2 ] ;
21834: LD_ADDR_VAR 0 13
21838: PUSH
21839: LD_VAR 0 4
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: ST_TO_ADDR
// if h + 7 < height then
21848: LD_VAR 0 13
21852: PUSH
21853: LD_INT 7
21855: PLUS
21856: PUSH
21857: LD_VAR 0 15
21861: LESS
21862: IFFALSE 21891
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21864: LD_ADDR_VAR 0 18
21868: PUSH
21869: LD_INT 7
21871: PUSH
21872: LD_INT 28
21874: PUSH
21875: LD_INT 45
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: PUSH
21883: LD_VAR 0 12
21887: ARRAY
21888: ST_TO_ADDR
// break ;
21889: GO 21893
// end ; end ; end ;
21891: GO 21722
21893: POP
21894: POP
// end ; if not weapon then
21895: LD_VAR 0 18
21899: NOT
21900: IFFALSE 21960
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21902: LD_ADDR_VAR 0 5
21906: PUSH
21907: LD_VAR 0 5
21911: PUSH
21912: LD_INT 11
21914: PUSH
21915: LD_INT 30
21917: PUSH
21918: LD_INT 49
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: DIFF
21926: ST_TO_ADDR
// if not list then
21927: LD_VAR 0 5
21931: NOT
21932: IFFALSE 21936
// exit ;
21934: GO 22078
// weapon := list [ rand ( 1 , list ) ] ;
21936: LD_ADDR_VAR 0 18
21940: PUSH
21941: LD_VAR 0 5
21945: PUSH
21946: LD_INT 1
21948: PPUSH
21949: LD_VAR 0 5
21953: PPUSH
21954: CALL_OW 12
21958: ARRAY
21959: ST_TO_ADDR
// end ; if weapon then
21960: LD_VAR 0 18
21964: IFFALSE 22078
// begin tmp := CostOfWeapon ( weapon ) ;
21966: LD_ADDR_VAR 0 14
21970: PUSH
21971: LD_VAR 0 18
21975: PPUSH
21976: CALL_OW 451
21980: ST_TO_ADDR
// j := GetBase ( tower ) ;
21981: LD_ADDR_VAR 0 9
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 274
21995: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21996: LD_VAR 0 9
22000: PPUSH
22001: LD_INT 1
22003: PPUSH
22004: CALL_OW 275
22008: PUSH
22009: LD_VAR 0 14
22013: PUSH
22014: LD_INT 1
22016: ARRAY
22017: GREATEREQUAL
22018: PUSH
22019: LD_VAR 0 9
22023: PPUSH
22024: LD_INT 2
22026: PPUSH
22027: CALL_OW 275
22031: PUSH
22032: LD_VAR 0 14
22036: PUSH
22037: LD_INT 2
22039: ARRAY
22040: GREATEREQUAL
22041: AND
22042: PUSH
22043: LD_VAR 0 9
22047: PPUSH
22048: LD_INT 3
22050: PPUSH
22051: CALL_OW 275
22055: PUSH
22056: LD_VAR 0 14
22060: PUSH
22061: LD_INT 3
22063: ARRAY
22064: GREATEREQUAL
22065: AND
22066: IFFALSE 22078
// result := weapon ;
22068: LD_ADDR_VAR 0 3
22072: PUSH
22073: LD_VAR 0 18
22077: ST_TO_ADDR
// end ; end ;
22078: LD_VAR 0 3
22082: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
// result := true ;
22087: LD_ADDR_VAR 0 3
22091: PUSH
22092: LD_INT 1
22094: ST_TO_ADDR
// if array1 = array2 then
22095: LD_VAR 0 1
22099: PUSH
22100: LD_VAR 0 2
22104: EQUAL
22105: IFFALSE 22165
// begin for i = 1 to array1 do
22107: LD_ADDR_VAR 0 4
22111: PUSH
22112: DOUBLE
22113: LD_INT 1
22115: DEC
22116: ST_TO_ADDR
22117: LD_VAR 0 1
22121: PUSH
22122: FOR_TO
22123: IFFALSE 22161
// if array1 [ i ] <> array2 [ i ] then
22125: LD_VAR 0 1
22129: PUSH
22130: LD_VAR 0 4
22134: ARRAY
22135: PUSH
22136: LD_VAR 0 2
22140: PUSH
22141: LD_VAR 0 4
22145: ARRAY
22146: NONEQUAL
22147: IFFALSE 22159
// begin result := false ;
22149: LD_ADDR_VAR 0 3
22153: PUSH
22154: LD_INT 0
22156: ST_TO_ADDR
// break ;
22157: GO 22161
// end ;
22159: GO 22122
22161: POP
22162: POP
// end else
22163: GO 22173
// result := false ;
22165: LD_ADDR_VAR 0 3
22169: PUSH
22170: LD_INT 0
22172: ST_TO_ADDR
// end ;
22173: LD_VAR 0 3
22177: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22178: LD_INT 0
22180: PPUSH
22181: PPUSH
// if not array1 or not array2 then
22182: LD_VAR 0 1
22186: NOT
22187: PUSH
22188: LD_VAR 0 2
22192: NOT
22193: OR
22194: IFFALSE 22198
// exit ;
22196: GO 22262
// result := true ;
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: LD_INT 1
22205: ST_TO_ADDR
// for i = 1 to array1 do
22206: LD_ADDR_VAR 0 4
22210: PUSH
22211: DOUBLE
22212: LD_INT 1
22214: DEC
22215: ST_TO_ADDR
22216: LD_VAR 0 1
22220: PUSH
22221: FOR_TO
22222: IFFALSE 22260
// if array1 [ i ] <> array2 [ i ] then
22224: LD_VAR 0 1
22228: PUSH
22229: LD_VAR 0 4
22233: ARRAY
22234: PUSH
22235: LD_VAR 0 2
22239: PUSH
22240: LD_VAR 0 4
22244: ARRAY
22245: NONEQUAL
22246: IFFALSE 22258
// begin result := false ;
22248: LD_ADDR_VAR 0 3
22252: PUSH
22253: LD_INT 0
22255: ST_TO_ADDR
// break ;
22256: GO 22260
// end ;
22258: GO 22221
22260: POP
22261: POP
// end ;
22262: LD_VAR 0 3
22266: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
// pom := GetBase ( fac ) ;
22272: LD_ADDR_VAR 0 5
22276: PUSH
22277: LD_VAR 0 1
22281: PPUSH
22282: CALL_OW 274
22286: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22287: LD_ADDR_VAR 0 4
22291: PUSH
22292: LD_VAR 0 2
22296: PUSH
22297: LD_INT 1
22299: ARRAY
22300: PPUSH
22301: LD_VAR 0 2
22305: PUSH
22306: LD_INT 2
22308: ARRAY
22309: PPUSH
22310: LD_VAR 0 2
22314: PUSH
22315: LD_INT 3
22317: ARRAY
22318: PPUSH
22319: LD_VAR 0 2
22323: PUSH
22324: LD_INT 4
22326: ARRAY
22327: PPUSH
22328: CALL_OW 449
22332: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_VAR 0 5
22342: PPUSH
22343: LD_INT 1
22345: PPUSH
22346: CALL_OW 275
22350: PUSH
22351: LD_VAR 0 4
22355: PUSH
22356: LD_INT 1
22358: ARRAY
22359: GREATEREQUAL
22360: PUSH
22361: LD_VAR 0 5
22365: PPUSH
22366: LD_INT 2
22368: PPUSH
22369: CALL_OW 275
22373: PUSH
22374: LD_VAR 0 4
22378: PUSH
22379: LD_INT 2
22381: ARRAY
22382: GREATEREQUAL
22383: AND
22384: PUSH
22385: LD_VAR 0 5
22389: PPUSH
22390: LD_INT 3
22392: PPUSH
22393: CALL_OW 275
22397: PUSH
22398: LD_VAR 0 4
22402: PUSH
22403: LD_INT 3
22405: ARRAY
22406: GREATEREQUAL
22407: AND
22408: ST_TO_ADDR
// end ;
22409: LD_VAR 0 3
22413: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
// pom := GetBase ( building ) ;
22420: LD_ADDR_VAR 0 3
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 274
22434: ST_TO_ADDR
// if not pom then
22435: LD_VAR 0 3
22439: NOT
22440: IFFALSE 22444
// exit ;
22442: GO 22614
// btype := GetBType ( building ) ;
22444: LD_ADDR_VAR 0 5
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 266
22458: ST_TO_ADDR
// if btype = b_armoury then
22459: LD_VAR 0 5
22463: PUSH
22464: LD_INT 4
22466: EQUAL
22467: IFFALSE 22477
// btype := b_barracks ;
22469: LD_ADDR_VAR 0 5
22473: PUSH
22474: LD_INT 5
22476: ST_TO_ADDR
// if btype = b_depot then
22477: LD_VAR 0 5
22481: PUSH
22482: LD_INT 0
22484: EQUAL
22485: IFFALSE 22495
// btype := b_warehouse ;
22487: LD_ADDR_VAR 0 5
22491: PUSH
22492: LD_INT 1
22494: ST_TO_ADDR
// if btype = b_workshop then
22495: LD_VAR 0 5
22499: PUSH
22500: LD_INT 2
22502: EQUAL
22503: IFFALSE 22513
// btype := b_factory ;
22505: LD_ADDR_VAR 0 5
22509: PUSH
22510: LD_INT 3
22512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22513: LD_ADDR_VAR 0 4
22517: PUSH
22518: LD_VAR 0 5
22522: PPUSH
22523: LD_VAR 0 1
22527: PPUSH
22528: CALL_OW 248
22532: PPUSH
22533: CALL_OW 450
22537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22538: LD_ADDR_VAR 0 2
22542: PUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 275
22555: PUSH
22556: LD_VAR 0 4
22560: PUSH
22561: LD_INT 1
22563: ARRAY
22564: GREATEREQUAL
22565: PUSH
22566: LD_VAR 0 3
22570: PPUSH
22571: LD_INT 2
22573: PPUSH
22574: CALL_OW 275
22578: PUSH
22579: LD_VAR 0 4
22583: PUSH
22584: LD_INT 2
22586: ARRAY
22587: GREATEREQUAL
22588: AND
22589: PUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 3
22597: PPUSH
22598: CALL_OW 275
22602: PUSH
22603: LD_VAR 0 4
22607: PUSH
22608: LD_INT 3
22610: ARRAY
22611: GREATEREQUAL
22612: AND
22613: ST_TO_ADDR
// end ;
22614: LD_VAR 0 2
22618: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22619: LD_INT 0
22621: PPUSH
22622: PPUSH
22623: PPUSH
// pom := GetBase ( building ) ;
22624: LD_ADDR_VAR 0 4
22628: PUSH
22629: LD_VAR 0 1
22633: PPUSH
22634: CALL_OW 274
22638: ST_TO_ADDR
// if not pom then
22639: LD_VAR 0 4
22643: NOT
22644: IFFALSE 22648
// exit ;
22646: GO 22749
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22648: LD_ADDR_VAR 0 5
22652: PUSH
22653: LD_VAR 0 2
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 248
22667: PPUSH
22668: CALL_OW 450
22672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_VAR 0 4
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 275
22690: PUSH
22691: LD_VAR 0 5
22695: PUSH
22696: LD_INT 1
22698: ARRAY
22699: GREATEREQUAL
22700: PUSH
22701: LD_VAR 0 4
22705: PPUSH
22706: LD_INT 2
22708: PPUSH
22709: CALL_OW 275
22713: PUSH
22714: LD_VAR 0 5
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: GREATEREQUAL
22723: AND
22724: PUSH
22725: LD_VAR 0 4
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: CALL_OW 275
22737: PUSH
22738: LD_VAR 0 5
22742: PUSH
22743: LD_INT 3
22745: ARRAY
22746: GREATEREQUAL
22747: AND
22748: ST_TO_ADDR
// end ;
22749: LD_VAR 0 3
22753: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
// result := false ;
22767: LD_ADDR_VAR 0 8
22771: PUSH
22772: LD_INT 0
22774: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22775: LD_VAR 0 5
22779: NOT
22780: PUSH
22781: LD_VAR 0 1
22785: NOT
22786: OR
22787: PUSH
22788: LD_VAR 0 2
22792: NOT
22793: OR
22794: PUSH
22795: LD_VAR 0 3
22799: NOT
22800: OR
22801: IFFALSE 22805
// exit ;
22803: GO 23619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22805: LD_ADDR_VAR 0 14
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: LD_VAR 0 2
22819: PPUSH
22820: LD_VAR 0 3
22824: PPUSH
22825: LD_VAR 0 4
22829: PPUSH
22830: LD_VAR 0 5
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PPUSH
22839: CALL_OW 248
22843: PPUSH
22844: LD_INT 0
22846: PPUSH
22847: CALL 24856 0 6
22851: ST_TO_ADDR
// if not hexes then
22852: LD_VAR 0 14
22856: NOT
22857: IFFALSE 22861
// exit ;
22859: GO 23619
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22861: LD_ADDR_VAR 0 17
22865: PUSH
22866: LD_VAR 0 5
22870: PPUSH
22871: LD_INT 22
22873: PUSH
22874: LD_VAR 0 13
22878: PPUSH
22879: CALL_OW 255
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 72
22924: ST_TO_ADDR
// for i = 1 to hexes do
22925: LD_ADDR_VAR 0 9
22929: PUSH
22930: DOUBLE
22931: LD_INT 1
22933: DEC
22934: ST_TO_ADDR
22935: LD_VAR 0 14
22939: PUSH
22940: FOR_TO
22941: IFFALSE 23617
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22943: LD_ADDR_VAR 0 13
22947: PUSH
22948: LD_VAR 0 14
22952: PUSH
22953: LD_VAR 0 9
22957: ARRAY
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PPUSH
22963: LD_VAR 0 14
22967: PUSH
22968: LD_VAR 0 9
22972: ARRAY
22973: PUSH
22974: LD_INT 2
22976: ARRAY
22977: PPUSH
22978: CALL_OW 428
22982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22983: LD_VAR 0 14
22987: PUSH
22988: LD_VAR 0 9
22992: ARRAY
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: LD_VAR 0 14
23002: PUSH
23003: LD_VAR 0 9
23007: ARRAY
23008: PUSH
23009: LD_INT 2
23011: ARRAY
23012: PPUSH
23013: CALL_OW 351
23017: PUSH
23018: LD_VAR 0 14
23022: PUSH
23023: LD_VAR 0 9
23027: ARRAY
23028: PUSH
23029: LD_INT 1
23031: ARRAY
23032: PPUSH
23033: LD_VAR 0 14
23037: PUSH
23038: LD_VAR 0 9
23042: ARRAY
23043: PUSH
23044: LD_INT 2
23046: ARRAY
23047: PPUSH
23048: CALL_OW 488
23052: NOT
23053: OR
23054: PUSH
23055: LD_VAR 0 13
23059: PPUSH
23060: CALL_OW 247
23064: PUSH
23065: LD_INT 3
23067: EQUAL
23068: OR
23069: IFFALSE 23075
// exit ;
23071: POP
23072: POP
23073: GO 23619
// if not tmp then
23075: LD_VAR 0 13
23079: NOT
23080: IFFALSE 23084
// continue ;
23082: GO 22940
// result := true ;
23084: LD_ADDR_VAR 0 8
23088: PUSH
23089: LD_INT 1
23091: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23092: LD_VAR 0 6
23096: PUSH
23097: LD_VAR 0 13
23101: PPUSH
23102: CALL_OW 247
23106: PUSH
23107: LD_INT 2
23109: EQUAL
23110: AND
23111: PUSH
23112: LD_VAR 0 13
23116: PPUSH
23117: CALL_OW 263
23121: PUSH
23122: LD_INT 1
23124: EQUAL
23125: AND
23126: IFFALSE 23290
// begin if IsDrivenBy ( tmp ) then
23128: LD_VAR 0 13
23132: PPUSH
23133: CALL_OW 311
23137: IFFALSE 23141
// continue ;
23139: GO 22940
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23141: LD_VAR 0 6
23145: PPUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 60
23151: PUSH
23152: EMPTY
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 3
23161: PUSH
23162: LD_INT 55
23164: PUSH
23165: EMPTY
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PPUSH
23176: CALL_OW 72
23180: IFFALSE 23288
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23182: LD_ADDR_VAR 0 18
23186: PUSH
23187: LD_VAR 0 6
23191: PPUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 60
23197: PUSH
23198: EMPTY
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: LD_INT 55
23210: PUSH
23211: EMPTY
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 72
23226: PUSH
23227: LD_INT 1
23229: ARRAY
23230: ST_TO_ADDR
// if IsInUnit ( driver ) then
23231: LD_VAR 0 18
23235: PPUSH
23236: CALL_OW 310
23240: IFFALSE 23251
// ComExit ( driver ) ;
23242: LD_VAR 0 18
23246: PPUSH
23247: CALL 47984 0 1
// AddComEnterUnit ( driver , tmp ) ;
23251: LD_VAR 0 18
23255: PPUSH
23256: LD_VAR 0 13
23260: PPUSH
23261: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23265: LD_VAR 0 18
23269: PPUSH
23270: LD_VAR 0 7
23274: PPUSH
23275: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23279: LD_VAR 0 18
23283: PPUSH
23284: CALL_OW 181
// end ; continue ;
23288: GO 22940
// end ; if not cleaners or not tmp in cleaners then
23290: LD_VAR 0 6
23294: NOT
23295: PUSH
23296: LD_VAR 0 13
23300: PUSH
23301: LD_VAR 0 6
23305: IN
23306: NOT
23307: OR
23308: IFFALSE 23615
// begin if dep then
23310: LD_VAR 0 17
23314: IFFALSE 23450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23316: LD_ADDR_VAR 0 16
23320: PUSH
23321: LD_VAR 0 17
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PPUSH
23330: CALL_OW 250
23334: PPUSH
23335: LD_VAR 0 17
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PPUSH
23344: CALL_OW 254
23348: PPUSH
23349: LD_INT 5
23351: PPUSH
23352: CALL_OW 272
23356: PUSH
23357: LD_VAR 0 17
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: CALL_OW 251
23370: PPUSH
23371: LD_VAR 0 17
23375: PUSH
23376: LD_INT 1
23378: ARRAY
23379: PPUSH
23380: CALL_OW 254
23384: PPUSH
23385: LD_INT 5
23387: PPUSH
23388: CALL_OW 273
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23397: LD_VAR 0 16
23401: PUSH
23402: LD_INT 1
23404: ARRAY
23405: PPUSH
23406: LD_VAR 0 16
23410: PUSH
23411: LD_INT 2
23413: ARRAY
23414: PPUSH
23415: CALL_OW 488
23419: IFFALSE 23450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23421: LD_VAR 0 13
23425: PPUSH
23426: LD_VAR 0 16
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: LD_VAR 0 16
23439: PUSH
23440: LD_INT 2
23442: ARRAY
23443: PPUSH
23444: CALL_OW 111
// continue ;
23448: GO 22940
// end ; end ; r := GetDir ( tmp ) ;
23450: LD_ADDR_VAR 0 15
23454: PUSH
23455: LD_VAR 0 13
23459: PPUSH
23460: CALL_OW 254
23464: ST_TO_ADDR
// if r = 5 then
23465: LD_VAR 0 15
23469: PUSH
23470: LD_INT 5
23472: EQUAL
23473: IFFALSE 23483
// r := 0 ;
23475: LD_ADDR_VAR 0 15
23479: PUSH
23480: LD_INT 0
23482: ST_TO_ADDR
// for j = r to 5 do
23483: LD_ADDR_VAR 0 10
23487: PUSH
23488: DOUBLE
23489: LD_VAR 0 15
23493: DEC
23494: ST_TO_ADDR
23495: LD_INT 5
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23613
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23501: LD_ADDR_VAR 0 11
23505: PUSH
23506: LD_VAR 0 13
23510: PPUSH
23511: CALL_OW 250
23515: PPUSH
23516: LD_VAR 0 10
23520: PPUSH
23521: LD_INT 2
23523: PPUSH
23524: CALL_OW 272
23528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23529: LD_ADDR_VAR 0 12
23533: PUSH
23534: LD_VAR 0 13
23538: PPUSH
23539: CALL_OW 251
23543: PPUSH
23544: LD_VAR 0 10
23548: PPUSH
23549: LD_INT 2
23551: PPUSH
23552: CALL_OW 273
23556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23557: LD_VAR 0 11
23561: PPUSH
23562: LD_VAR 0 12
23566: PPUSH
23567: CALL_OW 488
23571: PUSH
23572: LD_VAR 0 11
23576: PPUSH
23577: LD_VAR 0 12
23581: PPUSH
23582: CALL_OW 428
23586: NOT
23587: AND
23588: IFFALSE 23611
// begin ComMoveXY ( tmp , _x , _y ) ;
23590: LD_VAR 0 13
23594: PPUSH
23595: LD_VAR 0 11
23599: PPUSH
23600: LD_VAR 0 12
23604: PPUSH
23605: CALL_OW 111
// break ;
23609: GO 23613
// end ; end ;
23611: GO 23498
23613: POP
23614: POP
// end ; end ;
23615: GO 22940
23617: POP
23618: POP
// end ;
23619: LD_VAR 0 8
23623: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23624: LD_INT 0
23626: PPUSH
// result := true ;
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_INT 1
23634: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23635: LD_VAR 0 2
23639: PUSH
23640: LD_INT 24
23642: DOUBLE
23643: EQUAL
23644: IFTRUE 23654
23646: LD_INT 33
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23679
23654: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23655: LD_ADDR_VAR 0 3
23659: PUSH
23660: LD_INT 32
23662: PPUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL_OW 321
23672: PUSH
23673: LD_INT 2
23675: EQUAL
23676: ST_TO_ADDR
23677: GO 23999
23679: LD_INT 20
23681: DOUBLE
23682: EQUAL
23683: IFTRUE 23687
23685: GO 23712
23687: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23688: LD_ADDR_VAR 0 3
23692: PUSH
23693: LD_INT 6
23695: PPUSH
23696: LD_VAR 0 1
23700: PPUSH
23701: CALL_OW 321
23705: PUSH
23706: LD_INT 2
23708: EQUAL
23709: ST_TO_ADDR
23710: GO 23999
23712: LD_INT 22
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23726
23718: LD_INT 36
23720: DOUBLE
23721: EQUAL
23722: IFTRUE 23726
23724: GO 23751
23726: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23727: LD_ADDR_VAR 0 3
23731: PUSH
23732: LD_INT 15
23734: PPUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 321
23744: PUSH
23745: LD_INT 2
23747: EQUAL
23748: ST_TO_ADDR
23749: GO 23999
23751: LD_INT 30
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23784
23759: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_INT 20
23767: PPUSH
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 321
23777: PUSH
23778: LD_INT 2
23780: EQUAL
23781: ST_TO_ADDR
23782: GO 23999
23784: LD_INT 28
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23798
23790: LD_INT 21
23792: DOUBLE
23793: EQUAL
23794: IFTRUE 23798
23796: GO 23823
23798: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23799: LD_ADDR_VAR 0 3
23803: PUSH
23804: LD_INT 21
23806: PPUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 321
23816: PUSH
23817: LD_INT 2
23819: EQUAL
23820: ST_TO_ADDR
23821: GO 23999
23823: LD_INT 16
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23858
23831: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_EXP 105
23841: PPUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 321
23851: PUSH
23852: LD_INT 2
23854: EQUAL
23855: ST_TO_ADDR
23856: GO 23999
23858: LD_INT 19
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23872
23864: LD_INT 23
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23899
23872: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_EXP 104
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 321
23892: PUSH
23893: LD_INT 2
23895: EQUAL
23896: ST_TO_ADDR
23897: GO 23999
23899: LD_INT 17
23901: DOUBLE
23902: EQUAL
23903: IFTRUE 23907
23905: GO 23932
23907: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_INT 39
23915: PPUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 321
23925: PUSH
23926: LD_INT 2
23928: EQUAL
23929: ST_TO_ADDR
23930: GO 23999
23932: LD_INT 18
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23940
23938: GO 23965
23940: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23941: LD_ADDR_VAR 0 3
23945: PUSH
23946: LD_INT 40
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 321
23958: PUSH
23959: LD_INT 2
23961: EQUAL
23962: ST_TO_ADDR
23963: GO 23999
23965: LD_INT 27
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 23998
23973: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_INT 35
23981: PPUSH
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 321
23991: PUSH
23992: LD_INT 2
23994: EQUAL
23995: ST_TO_ADDR
23996: GO 23999
23998: POP
// end ;
23999: LD_VAR 0 3
24003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24004: LD_INT 0
24006: PPUSH
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
// result := false ;
24017: LD_ADDR_VAR 0 6
24021: PUSH
24022: LD_INT 0
24024: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24025: LD_VAR 0 1
24029: NOT
24030: PUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 266
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: IN
24051: NOT
24052: OR
24053: PUSH
24054: LD_VAR 0 2
24058: NOT
24059: OR
24060: PUSH
24061: LD_VAR 0 5
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 3
24077: PUSH
24078: LD_INT 4
24080: PUSH
24081: LD_INT 5
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: IN
24092: NOT
24093: OR
24094: PUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: LD_VAR 0 4
24104: PPUSH
24105: CALL_OW 488
24109: NOT
24110: OR
24111: IFFALSE 24115
// exit ;
24113: GO 24851
// side := GetSide ( depot ) ;
24115: LD_ADDR_VAR 0 9
24119: PUSH
24120: LD_VAR 0 1
24124: PPUSH
24125: CALL_OW 255
24129: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24130: LD_VAR 0 9
24134: PPUSH
24135: LD_VAR 0 2
24139: PPUSH
24140: CALL 23624 0 2
24144: NOT
24145: IFFALSE 24149
// exit ;
24147: GO 24851
// pom := GetBase ( depot ) ;
24149: LD_ADDR_VAR 0 10
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 274
24163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24164: LD_ADDR_VAR 0 11
24168: PUSH
24169: LD_VAR 0 2
24173: PPUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 248
24183: PPUSH
24184: CALL_OW 450
24188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24189: LD_VAR 0 10
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 275
24201: PUSH
24202: LD_VAR 0 11
24206: PUSH
24207: LD_INT 1
24209: ARRAY
24210: GREATEREQUAL
24211: PUSH
24212: LD_VAR 0 10
24216: PPUSH
24217: LD_INT 2
24219: PPUSH
24220: CALL_OW 275
24224: PUSH
24225: LD_VAR 0 11
24229: PUSH
24230: LD_INT 2
24232: ARRAY
24233: GREATEREQUAL
24234: AND
24235: PUSH
24236: LD_VAR 0 10
24240: PPUSH
24241: LD_INT 3
24243: PPUSH
24244: CALL_OW 275
24248: PUSH
24249: LD_VAR 0 11
24253: PUSH
24254: LD_INT 3
24256: ARRAY
24257: GREATEREQUAL
24258: AND
24259: NOT
24260: IFFALSE 24264
// exit ;
24262: GO 24851
// if GetBType ( depot ) = b_depot then
24264: LD_VAR 0 1
24268: PPUSH
24269: CALL_OW 266
24273: PUSH
24274: LD_INT 0
24276: EQUAL
24277: IFFALSE 24289
// dist := 28 else
24279: LD_ADDR_VAR 0 14
24283: PUSH
24284: LD_INT 28
24286: ST_TO_ADDR
24287: GO 24297
// dist := 36 ;
24289: LD_ADDR_VAR 0 14
24293: PUSH
24294: LD_INT 36
24296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24297: LD_VAR 0 1
24301: PPUSH
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_VAR 0 4
24311: PPUSH
24312: CALL_OW 297
24316: PUSH
24317: LD_VAR 0 14
24321: GREATER
24322: IFFALSE 24326
// exit ;
24324: GO 24851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24326: LD_ADDR_VAR 0 12
24330: PUSH
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_VAR 0 3
24340: PPUSH
24341: LD_VAR 0 4
24345: PPUSH
24346: LD_VAR 0 5
24350: PPUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 248
24360: PPUSH
24361: LD_INT 0
24363: PPUSH
24364: CALL 24856 0 6
24368: ST_TO_ADDR
// if not hexes then
24369: LD_VAR 0 12
24373: NOT
24374: IFFALSE 24378
// exit ;
24376: GO 24851
// hex := GetHexInfo ( x , y ) ;
24378: LD_ADDR_VAR 0 15
24382: PUSH
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_VAR 0 4
24392: PPUSH
24393: CALL_OW 546
24397: ST_TO_ADDR
// if hex [ 1 ] then
24398: LD_VAR 0 15
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: IFFALSE 24410
// exit ;
24408: GO 24851
// height := hex [ 2 ] ;
24410: LD_ADDR_VAR 0 13
24414: PUSH
24415: LD_VAR 0 15
24419: PUSH
24420: LD_INT 2
24422: ARRAY
24423: ST_TO_ADDR
// for i = 1 to hexes do
24424: LD_ADDR_VAR 0 7
24428: PUSH
24429: DOUBLE
24430: LD_INT 1
24432: DEC
24433: ST_TO_ADDR
24434: LD_VAR 0 12
24438: PUSH
24439: FOR_TO
24440: IFFALSE 24770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24442: LD_VAR 0 12
24446: PUSH
24447: LD_VAR 0 7
24451: ARRAY
24452: PUSH
24453: LD_INT 1
24455: ARRAY
24456: PPUSH
24457: LD_VAR 0 12
24461: PUSH
24462: LD_VAR 0 7
24466: ARRAY
24467: PUSH
24468: LD_INT 2
24470: ARRAY
24471: PPUSH
24472: CALL_OW 488
24476: NOT
24477: PUSH
24478: LD_VAR 0 12
24482: PUSH
24483: LD_VAR 0 7
24487: ARRAY
24488: PUSH
24489: LD_INT 1
24491: ARRAY
24492: PPUSH
24493: LD_VAR 0 12
24497: PUSH
24498: LD_VAR 0 7
24502: ARRAY
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: CALL_OW 428
24512: PUSH
24513: LD_INT 0
24515: GREATER
24516: OR
24517: PUSH
24518: LD_VAR 0 12
24522: PUSH
24523: LD_VAR 0 7
24527: ARRAY
24528: PUSH
24529: LD_INT 1
24531: ARRAY
24532: PPUSH
24533: LD_VAR 0 12
24537: PUSH
24538: LD_VAR 0 7
24542: ARRAY
24543: PUSH
24544: LD_INT 2
24546: ARRAY
24547: PPUSH
24548: CALL_OW 351
24552: OR
24553: IFFALSE 24559
// exit ;
24555: POP
24556: POP
24557: GO 24851
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24559: LD_ADDR_VAR 0 8
24563: PUSH
24564: LD_VAR 0 12
24568: PUSH
24569: LD_VAR 0 7
24573: ARRAY
24574: PUSH
24575: LD_INT 1
24577: ARRAY
24578: PPUSH
24579: LD_VAR 0 12
24583: PUSH
24584: LD_VAR 0 7
24588: ARRAY
24589: PUSH
24590: LD_INT 2
24592: ARRAY
24593: PPUSH
24594: CALL_OW 546
24598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24599: LD_VAR 0 8
24603: PUSH
24604: LD_INT 1
24606: ARRAY
24607: PUSH
24608: LD_VAR 0 8
24612: PUSH
24613: LD_INT 2
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 13
24621: PUSH
24622: LD_INT 2
24624: PLUS
24625: GREATER
24626: OR
24627: PUSH
24628: LD_VAR 0 8
24632: PUSH
24633: LD_INT 2
24635: ARRAY
24636: PUSH
24637: LD_VAR 0 13
24641: PUSH
24642: LD_INT 2
24644: MINUS
24645: LESS
24646: OR
24647: PUSH
24648: LD_VAR 0 8
24652: PUSH
24653: LD_INT 3
24655: ARRAY
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 8
24662: PUSH
24663: LD_INT 9
24665: PUSH
24666: LD_INT 10
24668: PUSH
24669: LD_INT 11
24671: PUSH
24672: LD_INT 12
24674: PUSH
24675: LD_INT 13
24677: PUSH
24678: LD_INT 16
24680: PUSH
24681: LD_INT 17
24683: PUSH
24684: LD_INT 18
24686: PUSH
24687: LD_INT 19
24689: PUSH
24690: LD_INT 20
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: IN
24711: NOT
24712: OR
24713: PUSH
24714: LD_VAR 0 8
24718: PUSH
24719: LD_INT 5
24721: ARRAY
24722: NOT
24723: OR
24724: PUSH
24725: LD_VAR 0 8
24729: PUSH
24730: LD_INT 6
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 7
24742: PUSH
24743: LD_INT 9
24745: PUSH
24746: LD_INT 10
24748: PUSH
24749: LD_INT 11
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: IN
24760: NOT
24761: OR
24762: IFFALSE 24768
// exit ;
24764: POP
24765: POP
24766: GO 24851
// end ;
24768: GO 24439
24770: POP
24771: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24772: LD_VAR 0 9
24776: PPUSH
24777: LD_VAR 0 3
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: LD_INT 20
24789: PPUSH
24790: CALL 16689 0 4
24794: PUSH
24795: LD_INT 4
24797: ARRAY
24798: IFFALSE 24802
// exit ;
24800: GO 24851
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24802: LD_VAR 0 2
24806: PUSH
24807: LD_INT 29
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: IN
24817: PUSH
24818: LD_VAR 0 3
24822: PPUSH
24823: LD_VAR 0 4
24827: PPUSH
24828: LD_VAR 0 9
24832: PPUSH
24833: CALL_OW 440
24837: NOT
24838: AND
24839: IFFALSE 24843
// exit ;
24841: GO 24851
// result := true ;
24843: LD_ADDR_VAR 0 6
24847: PUSH
24848: LD_INT 1
24850: ST_TO_ADDR
// end ;
24851: LD_VAR 0 6
24855: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24856: LD_INT 0
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
24864: PPUSH
24865: PPUSH
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
24870: PPUSH
24871: PPUSH
24872: PPUSH
24873: PPUSH
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
24882: PPUSH
24883: PPUSH
24884: PPUSH
24885: PPUSH
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
24891: PPUSH
24892: PPUSH
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
// result = [ ] ;
24916: LD_ADDR_VAR 0 7
24920: PUSH
24921: EMPTY
24922: ST_TO_ADDR
// temp_list = [ ] ;
24923: LD_ADDR_VAR 0 9
24927: PUSH
24928: EMPTY
24929: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24930: LD_VAR 0 4
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 3
24946: PUSH
24947: LD_INT 4
24949: PUSH
24950: LD_INT 5
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: IN
24961: NOT
24962: PUSH
24963: LD_VAR 0 1
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: IN
24978: PUSH
24979: LD_VAR 0 5
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: IN
24998: NOT
24999: AND
25000: OR
25001: IFFALSE 25005
// exit ;
25003: GO 43396
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25005: LD_VAR 0 1
25009: PUSH
25010: LD_INT 6
25012: PUSH
25013: LD_INT 7
25015: PUSH
25016: LD_INT 8
25018: PUSH
25019: LD_INT 13
25021: PUSH
25022: LD_INT 12
25024: PUSH
25025: LD_INT 15
25027: PUSH
25028: LD_INT 11
25030: PUSH
25031: LD_INT 14
25033: PUSH
25034: LD_INT 10
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: IN
25048: IFFALSE 25058
// btype = b_lab ;
25050: LD_ADDR_VAR 0 1
25054: PUSH
25055: LD_INT 6
25057: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25058: LD_VAR 0 6
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: IN
25077: NOT
25078: PUSH
25079: LD_VAR 0 1
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: LD_INT 6
25098: PUSH
25099: LD_INT 36
25101: PUSH
25102: LD_INT 4
25104: PUSH
25105: LD_INT 5
25107: PUSH
25108: LD_INT 31
25110: PUSH
25111: LD_INT 32
25113: PUSH
25114: LD_INT 33
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: IN
25130: NOT
25131: PUSH
25132: LD_VAR 0 6
25136: PUSH
25137: LD_INT 1
25139: EQUAL
25140: AND
25141: OR
25142: PUSH
25143: LD_VAR 0 1
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: IN
25158: NOT
25159: PUSH
25160: LD_VAR 0 6
25164: PUSH
25165: LD_INT 2
25167: EQUAL
25168: AND
25169: OR
25170: IFFALSE 25180
// mode = 0 ;
25172: LD_ADDR_VAR 0 6
25176: PUSH
25177: LD_INT 0
25179: ST_TO_ADDR
// case mode of 0 :
25180: LD_VAR 0 6
25184: PUSH
25185: LD_INT 0
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 36646
25193: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25194: LD_ADDR_VAR 0 11
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: LD_INT 2
25290: NEG
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 3
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25387: LD_ADDR_VAR 0 12
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 3
25544: NEG
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 3
25555: NEG
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25583: LD_ADDR_VAR 0 13
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: NEG
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 3
25754: NEG
25755: PUSH
25756: LD_INT 3
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25782: LD_ADDR_VAR 0 14
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 3
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 3
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25978: LD_ADDR_VAR 0 15
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26171: LD_ADDR_VAR 0 16
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: LD_INT 3
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26364: LD_ADDR_VAR 0 17
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 2
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26594: LD_ADDR_VAR 0 18
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: NEG
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: NEG
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: LD_INT 2
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26824: LD_ADDR_VAR 0 19
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 2
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 2
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27054: LD_ADDR_VAR 0 20
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27284: LD_ADDR_VAR 0 21
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 2
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 2
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27514: LD_ADDR_VAR 0 22
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 2
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 2
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27744: LD_ADDR_VAR 0 23
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 2
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 2
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28024: LD_ADDR_VAR 0 24
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 2
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28300: LD_ADDR_VAR 0 25
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 3
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 3
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28574: LD_ADDR_VAR 0 26
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 2
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 3
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28850: LD_ADDR_VAR 0 27
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 2
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29130: LD_ADDR_VAR 0 28
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: LD_INT 2
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: NEG
29342: PUSH
29343: LD_INT 3
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 3
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 3
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29412: LD_ADDR_VAR 0 29
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29691: LD_ADDR_VAR 0 30
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 2
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: LD_INT 2
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 3
29934: NEG
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29969: LD_ADDR_VAR 0 31
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: LD_INT 0
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 2
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: NEG
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 3
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: NEG
30213: PUSH
30214: LD_INT 2
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30247: LD_ADDR_VAR 0 32
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 2
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 2
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30525: LD_ADDR_VAR 0 33
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 3
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 3
30769: NEG
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30804: LD_ADDR_VAR 0 34
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 2
30971: NEG
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: NEG
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31084: LD_ADDR_VAR 0 35
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31196: LD_ADDR_VAR 0 36
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 1
31277: NEG
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31308: LD_ADDR_VAR 0 37
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31420: LD_ADDR_VAR 0 38
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31532: LD_ADDR_VAR 0 39
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31644: LD_ADDR_VAR 0 40
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31756: LD_ADDR_VAR 0 41
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 3
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 3
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 3
32053: NEG
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 3
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32106: LD_ADDR_VAR 0 42
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32456: LD_ADDR_VAR 0 43
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: NEG
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 3
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 3
32752: NEG
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 3
32763: NEG
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32804: LD_ADDR_VAR 0 44
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: NEG
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 3
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 3
33101: NEG
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: NEG
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33154: LD_ADDR_VAR 0 45
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: LD_INT 1
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 2
33332: NEG
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: NEG
33345: PUSH
33346: LD_INT 3
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 3
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 2
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: NEG
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: NEG
33464: PUSH
33465: LD_INT 3
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33504: LD_ADDR_VAR 0 46
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 3
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 3
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: NEG
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: NEG
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33852: LD_ADDR_VAR 0 47
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34003: LD_ADDR_VAR 0 48
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34150: LD_ADDR_VAR 0 49
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34294: LD_ADDR_VAR 0 50
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34438: LD_ADDR_VAR 0 51
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34585: LD_ADDR_VAR 0 52
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34736: LD_ADDR_VAR 0 53
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: NEG
34936: PUSH
34937: LD_INT 2
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34966: LD_ADDR_VAR 0 54
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: NEG
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 2
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35196: LD_ADDR_VAR 0 55
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 2
35372: NEG
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35426: LD_ADDR_VAR 0 56
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35656: LD_ADDR_VAR 0 57
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35886: LD_ADDR_VAR 0 58
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36116: LD_ADDR_VAR 0 59
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36204: LD_ADDR_VAR 0 60
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36292: LD_ADDR_VAR 0 61
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36380: LD_ADDR_VAR 0 62
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36468: LD_ADDR_VAR 0 63
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36556: LD_ADDR_VAR 0 64
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: ST_TO_ADDR
// end ; 1 :
36644: GO 42541
36646: LD_INT 1
36648: DOUBLE
36649: EQUAL
36650: IFTRUE 36654
36652: GO 39277
36654: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36655: LD_ADDR_VAR 0 11
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 3
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36699: LD_ADDR_VAR 0 12
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36740: LD_ADDR_VAR 0 13
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36780: LD_ADDR_VAR 0 14
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 3
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36821: LD_ADDR_VAR 0 15
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36865: LD_ADDR_VAR 0 16
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 3
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36911: LD_ADDR_VAR 0 17
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 3
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 3
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36955: LD_ADDR_VAR 0 18
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36996: LD_ADDR_VAR 0 19
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37036: LD_ADDR_VAR 0 20
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37077: LD_ADDR_VAR 0 21
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 3
37095: NEG
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 3
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37121: LD_ADDR_VAR 0 22
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: LD_INT 3
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: LD_INT 3
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37167: LD_ADDR_VAR 0 23
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 4
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37211: LD_ADDR_VAR 0 24
37215: PUSH
37216: LD_INT 3
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 4
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37252: LD_ADDR_VAR 0 25
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 3
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 4
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: LD_INT 4
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37292: LD_ADDR_VAR 0 26
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 4
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37333: LD_ADDR_VAR 0 27
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 4
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37377: LD_ADDR_VAR 0 28
37381: PUSH
37382: LD_INT 3
37384: NEG
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 3
37396: NEG
37397: PUSH
37398: LD_INT 4
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 4
37408: NEG
37409: PUSH
37410: LD_INT 3
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37423: LD_ADDR_VAR 0 29
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 3
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 3
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 4
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 4
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 3
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 5
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 5
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 4
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 6
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 6
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 5
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37578: LD_ADDR_VAR 0 30
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 4
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 4
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 5
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 5
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 5
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 6
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 6
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37721: LD_ADDR_VAR 0 31
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: LD_INT 3
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 3
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 4
37758: PUSH
37759: LD_INT 3
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: LD_INT 4
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: LD_INT 4
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: LD_INT 4
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 5
37798: PUSH
37799: LD_INT 5
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 4
37808: PUSH
37809: LD_INT 5
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 6
37818: PUSH
37819: LD_INT 5
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 6
37828: PUSH
37829: LD_INT 6
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 5
37838: PUSH
37839: LD_INT 6
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37860: LD_ADDR_VAR 0 32
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 4
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 4
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: LD_INT 3
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 4
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 6
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 6
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: LD_INT 5
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38003: LD_ADDR_VAR 0 33
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 3
38021: NEG
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 4
38055: NEG
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 4
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 4
38078: NEG
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 5
38089: NEG
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 5
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 5
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 6
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 6
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38158: LD_ADDR_VAR 0 34
38162: PUSH
38163: LD_INT 2
38165: NEG
38166: PUSH
38167: LD_INT 3
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 3
38177: NEG
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 3
38189: NEG
38190: PUSH
38191: LD_INT 3
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: LD_INT 4
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 4
38213: NEG
38214: PUSH
38215: LD_INT 3
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 4
38225: NEG
38226: PUSH
38227: LD_INT 4
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 4
38237: NEG
38238: PUSH
38239: LD_INT 5
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 5
38249: NEG
38250: PUSH
38251: LD_INT 4
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 5
38261: NEG
38262: PUSH
38263: LD_INT 5
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 5
38273: NEG
38274: PUSH
38275: LD_INT 6
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 6
38285: NEG
38286: PUSH
38287: LD_INT 5
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 6
38297: NEG
38298: PUSH
38299: LD_INT 6
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38321: LD_ADDR_VAR 0 41
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38365: LD_ADDR_VAR 0 42
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38406: LD_ADDR_VAR 0 43
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38446: LD_ADDR_VAR 0 44
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38487: LD_ADDR_VAR 0 45
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38531: LD_ADDR_VAR 0 46
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: LD_INT 3
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 3
38562: NEG
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38577: LD_ADDR_VAR 0 47
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: LD_INT 3
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 3
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38610: LD_ADDR_VAR 0 48
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38641: LD_ADDR_VAR 0 49
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38670: LD_ADDR_VAR 0 50
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38699: LD_ADDR_VAR 0 51
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38730: LD_ADDR_VAR 0 52
38734: PUSH
38735: LD_INT 3
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 3
38749: NEG
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38763: LD_ADDR_VAR 0 53
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38807: LD_ADDR_VAR 0 54
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38848: LD_ADDR_VAR 0 55
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38888: LD_ADDR_VAR 0 56
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 3
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38929: LD_ADDR_VAR 0 57
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: NEG
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38973: LD_ADDR_VAR 0 58
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: LD_INT 3
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 3
38992: NEG
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 3
39004: NEG
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39019: LD_ADDR_VAR 0 59
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39063: LD_ADDR_VAR 0 60
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39104: LD_ADDR_VAR 0 61
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39144: LD_ADDR_VAR 0 62
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39185: LD_ADDR_VAR 0 63
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39229: LD_ADDR_VAR 0 64
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
// end ; 2 :
39275: GO 42541
39277: LD_INT 2
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 42540
39285: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39286: LD_ADDR_VAR 0 29
39290: PUSH
39291: LD_INT 4
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 5
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 5
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 4
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 3
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 5
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 3
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 4
39416: PUSH
39417: LD_INT 4
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 4
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 4
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 4
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 4
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 5
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 5
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 4
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 5
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 4
39625: NEG
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 4
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 4
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 4
39671: NEG
39672: PUSH
39673: LD_INT 4
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 4
39683: NEG
39684: PUSH
39685: LD_INT 5
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: NEG
39696: PUSH
39697: LD_INT 4
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 3
39707: NEG
39708: PUSH
39709: LD_INT 3
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 4
39719: NEG
39720: PUSH
39721: LD_INT 3
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 5
39731: NEG
39732: PUSH
39733: LD_INT 4
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 5
39743: NEG
39744: PUSH
39745: LD_INT 5
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 3
39755: NEG
39756: PUSH
39757: LD_INT 5
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 5
39767: NEG
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39824: LD_ADDR_VAR 0 30
39828: PUSH
39829: LD_INT 4
39831: PUSH
39832: LD_INT 4
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 4
39841: PUSH
39842: LD_INT 3
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 5
39851: PUSH
39852: LD_INT 4
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 5
39861: PUSH
39862: LD_INT 5
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 5
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 3
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 5
39901: PUSH
39902: LD_INT 3
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 3
39911: PUSH
39912: LD_INT 5
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 4
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 4
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 4
40014: NEG
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 4
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 4
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 5
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 5
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 5
40093: NEG
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 3
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: LD_INT 3
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: LD_INT 4
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 4
40176: NEG
40177: PUSH
40178: LD_INT 3
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 4
40188: NEG
40189: PUSH
40190: LD_INT 4
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 4
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 4
40212: NEG
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 4
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 5
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 4
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 3
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 3
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 4
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 5
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 3
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 5
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40371: LD_ADDR_VAR 0 31
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 4
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 4
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 5
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 5
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: LD_INT 5
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: NEG
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 3
40482: NEG
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 4
40527: NEG
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 4
40550: NEG
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 4
40573: NEG
40574: PUSH
40575: LD_INT 4
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 4
40585: NEG
40586: PUSH
40587: LD_INT 5
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 3
40597: NEG
40598: PUSH
40599: LD_INT 4
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 3
40609: NEG
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: NEG
40622: PUSH
40623: LD_INT 3
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 5
40633: NEG
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 5
40645: NEG
40646: PUSH
40647: LD_INT 5
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 3
40657: NEG
40658: PUSH
40659: LD_INT 5
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 5
40669: NEG
40670: PUSH
40671: LD_INT 3
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 4
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 4
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: LD_INT 4
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 4
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 5
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 5
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 4
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 5
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40921: LD_ADDR_VAR 0 32
40925: PUSH
40926: LD_INT 4
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 4
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 3
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 4
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 5
40984: NEG
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 5
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 5
41007: NEG
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 3
41019: NEG
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 3
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: NEG
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 4
41090: NEG
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 4
41102: NEG
41103: PUSH
41104: LD_INT 4
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 4
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 4
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 4
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 5
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 4
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 3
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 3
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 4
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 5
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 5
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 4
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 4
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 4
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: LD_INT 4
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 5
41353: PUSH
41354: LD_INT 4
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 5
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 4
41373: PUSH
41374: LD_INT 5
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: LD_INT 4
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 5
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: LD_INT 5
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41468: LD_ADDR_VAR 0 33
41472: PUSH
41473: LD_INT 4
41475: NEG
41476: PUSH
41477: LD_INT 4
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 4
41487: NEG
41488: PUSH
41489: LD_INT 5
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: LD_INT 4
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 4
41523: NEG
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 5
41535: NEG
41536: PUSH
41537: LD_INT 4
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 5
41547: NEG
41548: PUSH
41549: LD_INT 5
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 5
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 5
41571: NEG
41572: PUSH
41573: LD_INT 3
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 4
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 3
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 4
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: LD_INT 4
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 4
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 4
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 5
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 5
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 4
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 4
41808: PUSH
41809: LD_INT 4
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: LD_INT 4
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 4
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 4
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 4
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 4
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 5
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 5
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 4
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 5
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 3
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42006: LD_ADDR_VAR 0 34
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 4
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 5
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 4
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 3
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 4
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 5
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: LD_INT 3
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: LD_INT 5
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 4
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 4
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 4
42208: PUSH
42209: LD_INT 4
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 4
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: LD_INT 4
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 5
42238: PUSH
42239: LD_INT 5
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 4
42248: PUSH
42249: LD_INT 5
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 4
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 5
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 5
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 4
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 4
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 4
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 4
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: NEG
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 4
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 5
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 5
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 5
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 3
42482: NEG
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: ST_TO_ADDR
// end ; end ;
42538: GO 42541
42540: POP
// case btype of b_depot , b_warehouse :
42541: LD_VAR 0 1
42545: PUSH
42546: LD_INT 0
42548: DOUBLE
42549: EQUAL
42550: IFTRUE 42560
42552: LD_INT 1
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42761
42560: POP
// case nation of nation_american :
42561: LD_VAR 0 5
42565: PUSH
42566: LD_INT 1
42568: DOUBLE
42569: EQUAL
42570: IFTRUE 42574
42572: GO 42630
42574: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_VAR 0 11
42584: PUSH
42585: LD_VAR 0 12
42589: PUSH
42590: LD_VAR 0 13
42594: PUSH
42595: LD_VAR 0 14
42599: PUSH
42600: LD_VAR 0 15
42604: PUSH
42605: LD_VAR 0 16
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: PUSH
42618: LD_VAR 0 4
42622: PUSH
42623: LD_INT 1
42625: PLUS
42626: ARRAY
42627: ST_TO_ADDR
42628: GO 42759
42630: LD_INT 2
42632: DOUBLE
42633: EQUAL
42634: IFTRUE 42638
42636: GO 42694
42638: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42639: LD_ADDR_VAR 0 9
42643: PUSH
42644: LD_VAR 0 17
42648: PUSH
42649: LD_VAR 0 18
42653: PUSH
42654: LD_VAR 0 19
42658: PUSH
42659: LD_VAR 0 20
42663: PUSH
42664: LD_VAR 0 21
42668: PUSH
42669: LD_VAR 0 22
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: PUSH
42682: LD_VAR 0 4
42686: PUSH
42687: LD_INT 1
42689: PLUS
42690: ARRAY
42691: ST_TO_ADDR
42692: GO 42759
42694: LD_INT 3
42696: DOUBLE
42697: EQUAL
42698: IFTRUE 42702
42700: GO 42758
42702: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42703: LD_ADDR_VAR 0 9
42707: PUSH
42708: LD_VAR 0 23
42712: PUSH
42713: LD_VAR 0 24
42717: PUSH
42718: LD_VAR 0 25
42722: PUSH
42723: LD_VAR 0 26
42727: PUSH
42728: LD_VAR 0 27
42732: PUSH
42733: LD_VAR 0 28
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_VAR 0 4
42750: PUSH
42751: LD_INT 1
42753: PLUS
42754: ARRAY
42755: ST_TO_ADDR
42756: GO 42759
42758: POP
42759: GO 43314
42761: LD_INT 2
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42775
42767: LD_INT 3
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 42831
42775: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42776: LD_ADDR_VAR 0 9
42780: PUSH
42781: LD_VAR 0 29
42785: PUSH
42786: LD_VAR 0 30
42790: PUSH
42791: LD_VAR 0 31
42795: PUSH
42796: LD_VAR 0 32
42800: PUSH
42801: LD_VAR 0 33
42805: PUSH
42806: LD_VAR 0 34
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: PUSH
42819: LD_VAR 0 4
42823: PUSH
42824: LD_INT 1
42826: PLUS
42827: ARRAY
42828: ST_TO_ADDR
42829: GO 43314
42831: LD_INT 16
42833: DOUBLE
42834: EQUAL
42835: IFTRUE 42893
42837: LD_INT 17
42839: DOUBLE
42840: EQUAL
42841: IFTRUE 42893
42843: LD_INT 18
42845: DOUBLE
42846: EQUAL
42847: IFTRUE 42893
42849: LD_INT 19
42851: DOUBLE
42852: EQUAL
42853: IFTRUE 42893
42855: LD_INT 22
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42893
42861: LD_INT 20
42863: DOUBLE
42864: EQUAL
42865: IFTRUE 42893
42867: LD_INT 21
42869: DOUBLE
42870: EQUAL
42871: IFTRUE 42893
42873: LD_INT 23
42875: DOUBLE
42876: EQUAL
42877: IFTRUE 42893
42879: LD_INT 24
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42893
42885: LD_INT 25
42887: DOUBLE
42888: EQUAL
42889: IFTRUE 42893
42891: GO 42949
42893: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42894: LD_ADDR_VAR 0 9
42898: PUSH
42899: LD_VAR 0 35
42903: PUSH
42904: LD_VAR 0 36
42908: PUSH
42909: LD_VAR 0 37
42913: PUSH
42914: LD_VAR 0 38
42918: PUSH
42919: LD_VAR 0 39
42923: PUSH
42924: LD_VAR 0 40
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: PUSH
42937: LD_VAR 0 4
42941: PUSH
42942: LD_INT 1
42944: PLUS
42945: ARRAY
42946: ST_TO_ADDR
42947: GO 43314
42949: LD_INT 6
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 43005
42955: LD_INT 7
42957: DOUBLE
42958: EQUAL
42959: IFTRUE 43005
42961: LD_INT 8
42963: DOUBLE
42964: EQUAL
42965: IFTRUE 43005
42967: LD_INT 13
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 43005
42973: LD_INT 12
42975: DOUBLE
42976: EQUAL
42977: IFTRUE 43005
42979: LD_INT 15
42981: DOUBLE
42982: EQUAL
42983: IFTRUE 43005
42985: LD_INT 11
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 43005
42991: LD_INT 14
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 43005
42997: LD_INT 10
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 43061
43005: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43006: LD_ADDR_VAR 0 9
43010: PUSH
43011: LD_VAR 0 41
43015: PUSH
43016: LD_VAR 0 42
43020: PUSH
43021: LD_VAR 0 43
43025: PUSH
43026: LD_VAR 0 44
43030: PUSH
43031: LD_VAR 0 45
43035: PUSH
43036: LD_VAR 0 46
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: PUSH
43049: LD_VAR 0 4
43053: PUSH
43054: LD_INT 1
43056: PLUS
43057: ARRAY
43058: ST_TO_ADDR
43059: GO 43314
43061: LD_INT 36
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43125
43069: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_VAR 0 47
43079: PUSH
43080: LD_VAR 0 48
43084: PUSH
43085: LD_VAR 0 49
43089: PUSH
43090: LD_VAR 0 50
43094: PUSH
43095: LD_VAR 0 51
43099: PUSH
43100: LD_VAR 0 52
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: LD_VAR 0 4
43117: PUSH
43118: LD_INT 1
43120: PLUS
43121: ARRAY
43122: ST_TO_ADDR
43123: GO 43314
43125: LD_INT 4
43127: DOUBLE
43128: EQUAL
43129: IFTRUE 43151
43131: LD_INT 5
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43151
43137: LD_INT 34
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43151
43143: LD_INT 37
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43207
43151: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43152: LD_ADDR_VAR 0 9
43156: PUSH
43157: LD_VAR 0 53
43161: PUSH
43162: LD_VAR 0 54
43166: PUSH
43167: LD_VAR 0 55
43171: PUSH
43172: LD_VAR 0 56
43176: PUSH
43177: LD_VAR 0 57
43181: PUSH
43182: LD_VAR 0 58
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: PUSH
43195: LD_VAR 0 4
43199: PUSH
43200: LD_INT 1
43202: PLUS
43203: ARRAY
43204: ST_TO_ADDR
43205: GO 43314
43207: LD_INT 31
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43257
43213: LD_INT 32
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43257
43219: LD_INT 33
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43257
43225: LD_INT 27
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43257
43231: LD_INT 26
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43257
43237: LD_INT 28
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43257
43243: LD_INT 29
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43257
43249: LD_INT 30
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43313
43257: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43258: LD_ADDR_VAR 0 9
43262: PUSH
43263: LD_VAR 0 59
43267: PUSH
43268: LD_VAR 0 60
43272: PUSH
43273: LD_VAR 0 61
43277: PUSH
43278: LD_VAR 0 62
43282: PUSH
43283: LD_VAR 0 63
43287: PUSH
43288: LD_VAR 0 64
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: PUSH
43301: LD_VAR 0 4
43305: PUSH
43306: LD_INT 1
43308: PLUS
43309: ARRAY
43310: ST_TO_ADDR
43311: GO 43314
43313: POP
// temp_list2 = [ ] ;
43314: LD_ADDR_VAR 0 10
43318: PUSH
43319: EMPTY
43320: ST_TO_ADDR
// for i in temp_list do
43321: LD_ADDR_VAR 0 8
43325: PUSH
43326: LD_VAR 0 9
43330: PUSH
43331: FOR_IN
43332: IFFALSE 43384
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43334: LD_ADDR_VAR 0 10
43338: PUSH
43339: LD_VAR 0 10
43343: PUSH
43344: LD_VAR 0 8
43348: PUSH
43349: LD_INT 1
43351: ARRAY
43352: PUSH
43353: LD_VAR 0 2
43357: PLUS
43358: PUSH
43359: LD_VAR 0 8
43363: PUSH
43364: LD_INT 2
43366: ARRAY
43367: PUSH
43368: LD_VAR 0 3
43372: PLUS
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: ADD
43381: ST_TO_ADDR
43382: GO 43331
43384: POP
43385: POP
// result = temp_list2 ;
43386: LD_ADDR_VAR 0 7
43390: PUSH
43391: LD_VAR 0 10
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 7
43400: RET
// export function EnemyInRange ( unit , dist ) ; begin
43401: LD_INT 0
43403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_VAR 0 1
43413: PPUSH
43414: CALL_OW 255
43418: PPUSH
43419: LD_VAR 0 1
43423: PPUSH
43424: CALL_OW 250
43428: PPUSH
43429: LD_VAR 0 1
43433: PPUSH
43434: CALL_OW 251
43438: PPUSH
43439: LD_VAR 0 2
43443: PPUSH
43444: CALL 16689 0 4
43448: PUSH
43449: LD_INT 4
43451: ARRAY
43452: ST_TO_ADDR
// end ;
43453: LD_VAR 0 3
43457: RET
// export function PlayerSeeMe ( unit ) ; begin
43458: LD_INT 0
43460: PPUSH
// result := See ( your_side , unit ) ;
43461: LD_ADDR_VAR 0 2
43465: PUSH
43466: LD_OWVAR 2
43470: PPUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 292
43480: ST_TO_ADDR
// end ;
43481: LD_VAR 0 2
43485: RET
// export function ReverseDir ( unit ) ; begin
43486: LD_INT 0
43488: PPUSH
// if not unit then
43489: LD_VAR 0 1
43493: NOT
43494: IFFALSE 43498
// exit ;
43496: GO 43521
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43498: LD_ADDR_VAR 0 2
43502: PUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 254
43512: PUSH
43513: LD_INT 3
43515: PLUS
43516: PUSH
43517: LD_INT 6
43519: MOD
43520: ST_TO_ADDR
// end ;
43521: LD_VAR 0 2
43525: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
// if not hexes then
43533: LD_VAR 0 2
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 43690
// dist := 9999 ;
43542: LD_ADDR_VAR 0 5
43546: PUSH
43547: LD_INT 9999
43549: ST_TO_ADDR
// for i = 1 to hexes do
43550: LD_ADDR_VAR 0 4
43554: PUSH
43555: DOUBLE
43556: LD_INT 1
43558: DEC
43559: ST_TO_ADDR
43560: LD_VAR 0 2
43564: PUSH
43565: FOR_TO
43566: IFFALSE 43678
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43568: LD_VAR 0 1
43572: PPUSH
43573: LD_VAR 0 2
43577: PUSH
43578: LD_VAR 0 4
43582: ARRAY
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: LD_VAR 0 2
43592: PUSH
43593: LD_VAR 0 4
43597: ARRAY
43598: PUSH
43599: LD_INT 2
43601: ARRAY
43602: PPUSH
43603: CALL_OW 297
43607: PUSH
43608: LD_VAR 0 5
43612: LESS
43613: IFFALSE 43676
// begin hex := hexes [ i ] ;
43615: LD_ADDR_VAR 0 7
43619: PUSH
43620: LD_VAR 0 2
43624: PUSH
43625: LD_VAR 0 4
43629: ARRAY
43630: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43631: LD_ADDR_VAR 0 5
43635: PUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: LD_VAR 0 2
43645: PUSH
43646: LD_VAR 0 4
43650: ARRAY
43651: PUSH
43652: LD_INT 1
43654: ARRAY
43655: PPUSH
43656: LD_VAR 0 2
43660: PUSH
43661: LD_VAR 0 4
43665: ARRAY
43666: PUSH
43667: LD_INT 2
43669: ARRAY
43670: PPUSH
43671: CALL_OW 297
43675: ST_TO_ADDR
// end ; end ;
43676: GO 43565
43678: POP
43679: POP
// result := hex ;
43680: LD_ADDR_VAR 0 3
43684: PUSH
43685: LD_VAR 0 7
43689: ST_TO_ADDR
// end ;
43690: LD_VAR 0 3
43694: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43695: LD_INT 0
43697: PPUSH
43698: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43699: LD_VAR 0 1
43703: NOT
43704: PUSH
43705: LD_VAR 0 1
43709: PUSH
43710: LD_INT 21
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 23
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PPUSH
43734: CALL_OW 69
43738: IN
43739: NOT
43740: OR
43741: IFFALSE 43745
// exit ;
43743: GO 43792
// for i = 1 to 3 do
43745: LD_ADDR_VAR 0 3
43749: PUSH
43750: DOUBLE
43751: LD_INT 1
43753: DEC
43754: ST_TO_ADDR
43755: LD_INT 3
43757: PUSH
43758: FOR_TO
43759: IFFALSE 43790
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43761: LD_VAR 0 1
43765: PPUSH
43766: CALL_OW 250
43770: PPUSH
43771: LD_VAR 0 1
43775: PPUSH
43776: CALL_OW 251
43780: PPUSH
43781: LD_INT 1
43783: PPUSH
43784: CALL_OW 453
43788: GO 43758
43790: POP
43791: POP
// end ;
43792: LD_VAR 0 2
43796: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43805: LD_VAR 0 1
43809: NOT
43810: PUSH
43811: LD_VAR 0 2
43815: NOT
43816: OR
43817: PUSH
43818: LD_VAR 0 1
43822: PPUSH
43823: CALL_OW 314
43827: OR
43828: IFFALSE 43832
// exit ;
43830: GO 44273
// x := GetX ( enemy_unit ) ;
43832: LD_ADDR_VAR 0 7
43836: PUSH
43837: LD_VAR 0 2
43841: PPUSH
43842: CALL_OW 250
43846: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43847: LD_ADDR_VAR 0 8
43851: PUSH
43852: LD_VAR 0 2
43856: PPUSH
43857: CALL_OW 251
43861: ST_TO_ADDR
// if not x or not y then
43862: LD_VAR 0 7
43866: NOT
43867: PUSH
43868: LD_VAR 0 8
43872: NOT
43873: OR
43874: IFFALSE 43878
// exit ;
43876: GO 44273
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43878: LD_ADDR_VAR 0 6
43882: PUSH
43883: LD_VAR 0 7
43887: PPUSH
43888: LD_INT 0
43890: PPUSH
43891: LD_INT 4
43893: PPUSH
43894: CALL_OW 272
43898: PUSH
43899: LD_VAR 0 8
43903: PPUSH
43904: LD_INT 0
43906: PPUSH
43907: LD_INT 4
43909: PPUSH
43910: CALL_OW 273
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_VAR 0 7
43923: PPUSH
43924: LD_INT 1
43926: PPUSH
43927: LD_INT 4
43929: PPUSH
43930: CALL_OW 272
43934: PUSH
43935: LD_VAR 0 8
43939: PPUSH
43940: LD_INT 1
43942: PPUSH
43943: LD_INT 4
43945: PPUSH
43946: CALL_OW 273
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_VAR 0 7
43959: PPUSH
43960: LD_INT 2
43962: PPUSH
43963: LD_INT 4
43965: PPUSH
43966: CALL_OW 272
43970: PUSH
43971: LD_VAR 0 8
43975: PPUSH
43976: LD_INT 2
43978: PPUSH
43979: LD_INT 4
43981: PPUSH
43982: CALL_OW 273
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_VAR 0 7
43995: PPUSH
43996: LD_INT 3
43998: PPUSH
43999: LD_INT 4
44001: PPUSH
44002: CALL_OW 272
44006: PUSH
44007: LD_VAR 0 8
44011: PPUSH
44012: LD_INT 3
44014: PPUSH
44015: LD_INT 4
44017: PPUSH
44018: CALL_OW 273
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_VAR 0 7
44031: PPUSH
44032: LD_INT 4
44034: PPUSH
44035: LD_INT 4
44037: PPUSH
44038: CALL_OW 272
44042: PUSH
44043: LD_VAR 0 8
44047: PPUSH
44048: LD_INT 4
44050: PPUSH
44051: LD_INT 4
44053: PPUSH
44054: CALL_OW 273
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_VAR 0 7
44067: PPUSH
44068: LD_INT 5
44070: PPUSH
44071: LD_INT 4
44073: PPUSH
44074: CALL_OW 272
44078: PUSH
44079: LD_VAR 0 8
44083: PPUSH
44084: LD_INT 5
44086: PPUSH
44087: LD_INT 4
44089: PPUSH
44090: CALL_OW 273
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// for i = tmp downto 1 do
44107: LD_ADDR_VAR 0 4
44111: PUSH
44112: DOUBLE
44113: LD_VAR 0 6
44117: INC
44118: ST_TO_ADDR
44119: LD_INT 1
44121: PUSH
44122: FOR_DOWNTO
44123: IFFALSE 44224
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44125: LD_VAR 0 6
44129: PUSH
44130: LD_VAR 0 4
44134: ARRAY
44135: PUSH
44136: LD_INT 1
44138: ARRAY
44139: PPUSH
44140: LD_VAR 0 6
44144: PUSH
44145: LD_VAR 0 4
44149: ARRAY
44150: PUSH
44151: LD_INT 2
44153: ARRAY
44154: PPUSH
44155: CALL_OW 488
44159: NOT
44160: PUSH
44161: LD_VAR 0 6
44165: PUSH
44166: LD_VAR 0 4
44170: ARRAY
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PPUSH
44176: LD_VAR 0 6
44180: PUSH
44181: LD_VAR 0 4
44185: ARRAY
44186: PUSH
44187: LD_INT 2
44189: ARRAY
44190: PPUSH
44191: CALL_OW 428
44195: PUSH
44196: LD_INT 0
44198: NONEQUAL
44199: OR
44200: IFFALSE 44222
// tmp := Delete ( tmp , i ) ;
44202: LD_ADDR_VAR 0 6
44206: PUSH
44207: LD_VAR 0 6
44211: PPUSH
44212: LD_VAR 0 4
44216: PPUSH
44217: CALL_OW 3
44221: ST_TO_ADDR
44222: GO 44122
44224: POP
44225: POP
// j := GetClosestHex ( unit , tmp ) ;
44226: LD_ADDR_VAR 0 5
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: LD_VAR 0 6
44240: PPUSH
44241: CALL 43526 0 2
44245: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44246: LD_VAR 0 1
44250: PPUSH
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: ARRAY
44259: PPUSH
44260: LD_VAR 0 5
44264: PUSH
44265: LD_INT 2
44267: ARRAY
44268: PPUSH
44269: CALL_OW 111
// end ;
44273: LD_VAR 0 3
44277: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44278: LD_INT 0
44280: PPUSH
44281: PPUSH
44282: PPUSH
// uc_side = 0 ;
44283: LD_ADDR_OWVAR 20
44287: PUSH
44288: LD_INT 0
44290: ST_TO_ADDR
// uc_nation = 0 ;
44291: LD_ADDR_OWVAR 21
44295: PUSH
44296: LD_INT 0
44298: ST_TO_ADDR
// InitHc_All ( ) ;
44299: CALL_OW 584
// InitVc ;
44303: CALL_OW 20
// if mastodonts then
44307: LD_VAR 0 6
44311: IFFALSE 44378
// for i = 1 to mastodonts do
44313: LD_ADDR_VAR 0 11
44317: PUSH
44318: DOUBLE
44319: LD_INT 1
44321: DEC
44322: ST_TO_ADDR
44323: LD_VAR 0 6
44327: PUSH
44328: FOR_TO
44329: IFFALSE 44376
// begin vc_chassis := 31 ;
44331: LD_ADDR_OWVAR 37
44335: PUSH
44336: LD_INT 31
44338: ST_TO_ADDR
// vc_control := control_rider ;
44339: LD_ADDR_OWVAR 38
44343: PUSH
44344: LD_INT 4
44346: ST_TO_ADDR
// animal := CreateVehicle ;
44347: LD_ADDR_VAR 0 12
44351: PUSH
44352: CALL_OW 45
44356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44357: LD_VAR 0 12
44361: PPUSH
44362: LD_VAR 0 8
44366: PPUSH
44367: LD_INT 0
44369: PPUSH
44370: CALL 46513 0 3
// end ;
44374: GO 44328
44376: POP
44377: POP
// if horses then
44378: LD_VAR 0 5
44382: IFFALSE 44449
// for i = 1 to horses do
44384: LD_ADDR_VAR 0 11
44388: PUSH
44389: DOUBLE
44390: LD_INT 1
44392: DEC
44393: ST_TO_ADDR
44394: LD_VAR 0 5
44398: PUSH
44399: FOR_TO
44400: IFFALSE 44447
// begin hc_class := 21 ;
44402: LD_ADDR_OWVAR 28
44406: PUSH
44407: LD_INT 21
44409: ST_TO_ADDR
// hc_gallery :=  ;
44410: LD_ADDR_OWVAR 33
44414: PUSH
44415: LD_STRING 
44417: ST_TO_ADDR
// animal := CreateHuman ;
44418: LD_ADDR_VAR 0 12
44422: PUSH
44423: CALL_OW 44
44427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44428: LD_VAR 0 12
44432: PPUSH
44433: LD_VAR 0 8
44437: PPUSH
44438: LD_INT 0
44440: PPUSH
44441: CALL 46513 0 3
// end ;
44445: GO 44399
44447: POP
44448: POP
// if birds then
44449: LD_VAR 0 1
44453: IFFALSE 44520
// for i = 1 to birds do
44455: LD_ADDR_VAR 0 11
44459: PUSH
44460: DOUBLE
44461: LD_INT 1
44463: DEC
44464: ST_TO_ADDR
44465: LD_VAR 0 1
44469: PUSH
44470: FOR_TO
44471: IFFALSE 44518
// begin hc_class = 18 ;
44473: LD_ADDR_OWVAR 28
44477: PUSH
44478: LD_INT 18
44480: ST_TO_ADDR
// hc_gallery =  ;
44481: LD_ADDR_OWVAR 33
44485: PUSH
44486: LD_STRING 
44488: ST_TO_ADDR
// animal := CreateHuman ;
44489: LD_ADDR_VAR 0 12
44493: PUSH
44494: CALL_OW 44
44498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44499: LD_VAR 0 12
44503: PPUSH
44504: LD_VAR 0 8
44508: PPUSH
44509: LD_INT 0
44511: PPUSH
44512: CALL 46513 0 3
// end ;
44516: GO 44470
44518: POP
44519: POP
// if tigers then
44520: LD_VAR 0 2
44524: IFFALSE 44608
// for i = 1 to tigers do
44526: LD_ADDR_VAR 0 11
44530: PUSH
44531: DOUBLE
44532: LD_INT 1
44534: DEC
44535: ST_TO_ADDR
44536: LD_VAR 0 2
44540: PUSH
44541: FOR_TO
44542: IFFALSE 44606
// begin hc_class = class_tiger ;
44544: LD_ADDR_OWVAR 28
44548: PUSH
44549: LD_INT 14
44551: ST_TO_ADDR
// hc_gallery =  ;
44552: LD_ADDR_OWVAR 33
44556: PUSH
44557: LD_STRING 
44559: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44560: LD_ADDR_OWVAR 35
44564: PUSH
44565: LD_INT 7
44567: NEG
44568: PPUSH
44569: LD_INT 7
44571: PPUSH
44572: CALL_OW 12
44576: ST_TO_ADDR
// animal := CreateHuman ;
44577: LD_ADDR_VAR 0 12
44581: PUSH
44582: CALL_OW 44
44586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44587: LD_VAR 0 12
44591: PPUSH
44592: LD_VAR 0 8
44596: PPUSH
44597: LD_INT 0
44599: PPUSH
44600: CALL 46513 0 3
// end ;
44604: GO 44541
44606: POP
44607: POP
// if apemans then
44608: LD_VAR 0 3
44612: IFFALSE 44735
// for i = 1 to apemans do
44614: LD_ADDR_VAR 0 11
44618: PUSH
44619: DOUBLE
44620: LD_INT 1
44622: DEC
44623: ST_TO_ADDR
44624: LD_VAR 0 3
44628: PUSH
44629: FOR_TO
44630: IFFALSE 44733
// begin hc_class = class_apeman ;
44632: LD_ADDR_OWVAR 28
44636: PUSH
44637: LD_INT 12
44639: ST_TO_ADDR
// hc_gallery =  ;
44640: LD_ADDR_OWVAR 33
44644: PUSH
44645: LD_STRING 
44647: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44648: LD_ADDR_OWVAR 35
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PPUSH
44657: LD_INT 2
44659: PPUSH
44660: CALL_OW 12
44664: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44665: LD_ADDR_OWVAR 31
44669: PUSH
44670: LD_INT 1
44672: PPUSH
44673: LD_INT 3
44675: PPUSH
44676: CALL_OW 12
44680: PUSH
44681: LD_INT 1
44683: PPUSH
44684: LD_INT 3
44686: PPUSH
44687: CALL_OW 12
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// animal := CreateHuman ;
44704: LD_ADDR_VAR 0 12
44708: PUSH
44709: CALL_OW 44
44713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44714: LD_VAR 0 12
44718: PPUSH
44719: LD_VAR 0 8
44723: PPUSH
44724: LD_INT 0
44726: PPUSH
44727: CALL 46513 0 3
// end ;
44731: GO 44629
44733: POP
44734: POP
// if enchidnas then
44735: LD_VAR 0 4
44739: IFFALSE 44806
// for i = 1 to enchidnas do
44741: LD_ADDR_VAR 0 11
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_VAR 0 4
44755: PUSH
44756: FOR_TO
44757: IFFALSE 44804
// begin hc_class = 13 ;
44759: LD_ADDR_OWVAR 28
44763: PUSH
44764: LD_INT 13
44766: ST_TO_ADDR
// hc_gallery =  ;
44767: LD_ADDR_OWVAR 33
44771: PUSH
44772: LD_STRING 
44774: ST_TO_ADDR
// animal := CreateHuman ;
44775: LD_ADDR_VAR 0 12
44779: PUSH
44780: CALL_OW 44
44784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44785: LD_VAR 0 12
44789: PPUSH
44790: LD_VAR 0 8
44794: PPUSH
44795: LD_INT 0
44797: PPUSH
44798: CALL 46513 0 3
// end ;
44802: GO 44756
44804: POP
44805: POP
// if fishes then
44806: LD_VAR 0 7
44810: IFFALSE 44877
// for i = 1 to fishes do
44812: LD_ADDR_VAR 0 11
44816: PUSH
44817: DOUBLE
44818: LD_INT 1
44820: DEC
44821: ST_TO_ADDR
44822: LD_VAR 0 7
44826: PUSH
44827: FOR_TO
44828: IFFALSE 44875
// begin hc_class = 20 ;
44830: LD_ADDR_OWVAR 28
44834: PUSH
44835: LD_INT 20
44837: ST_TO_ADDR
// hc_gallery =  ;
44838: LD_ADDR_OWVAR 33
44842: PUSH
44843: LD_STRING 
44845: ST_TO_ADDR
// animal := CreateHuman ;
44846: LD_ADDR_VAR 0 12
44850: PUSH
44851: CALL_OW 44
44855: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44856: LD_VAR 0 12
44860: PPUSH
44861: LD_VAR 0 9
44865: PPUSH
44866: LD_INT 0
44868: PPUSH
44869: CALL 46513 0 3
// end ;
44873: GO 44827
44875: POP
44876: POP
// end ;
44877: LD_VAR 0 10
44881: RET
// export function WantHeal ( sci , unit ) ; begin
44882: LD_INT 0
44884: PPUSH
// if GetTaskList ( sci ) > 0 then
44885: LD_VAR 0 1
44889: PPUSH
44890: CALL_OW 437
44894: PUSH
44895: LD_INT 0
44897: GREATER
44898: IFFALSE 44968
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44900: LD_VAR 0 1
44904: PPUSH
44905: CALL_OW 437
44909: PUSH
44910: LD_INT 1
44912: ARRAY
44913: PUSH
44914: LD_INT 1
44916: ARRAY
44917: PUSH
44918: LD_STRING l
44920: EQUAL
44921: PUSH
44922: LD_VAR 0 1
44926: PPUSH
44927: CALL_OW 437
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: PUSH
44936: LD_INT 4
44938: ARRAY
44939: PUSH
44940: LD_VAR 0 2
44944: EQUAL
44945: AND
44946: IFFALSE 44958
// result := true else
44948: LD_ADDR_VAR 0 3
44952: PUSH
44953: LD_INT 1
44955: ST_TO_ADDR
44956: GO 44966
// result := false ;
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: LD_INT 0
44965: ST_TO_ADDR
// end else
44966: GO 44976
// result := false ;
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_INT 0
44975: ST_TO_ADDR
// end ;
44976: LD_VAR 0 3
44980: RET
// export function HealTarget ( sci ) ; begin
44981: LD_INT 0
44983: PPUSH
// if not sci then
44984: LD_VAR 0 1
44988: NOT
44989: IFFALSE 44993
// exit ;
44991: GO 45058
// result := 0 ;
44993: LD_ADDR_VAR 0 2
44997: PUSH
44998: LD_INT 0
45000: ST_TO_ADDR
// if GetTaskList ( sci ) then
45001: LD_VAR 0 1
45005: PPUSH
45006: CALL_OW 437
45010: IFFALSE 45058
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45012: LD_VAR 0 1
45016: PPUSH
45017: CALL_OW 437
45021: PUSH
45022: LD_INT 1
45024: ARRAY
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: PUSH
45030: LD_STRING l
45032: EQUAL
45033: IFFALSE 45058
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45035: LD_ADDR_VAR 0 2
45039: PUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: CALL_OW 437
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: PUSH
45054: LD_INT 4
45056: ARRAY
45057: ST_TO_ADDR
// end ;
45058: LD_VAR 0 2
45062: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45063: LD_INT 0
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
// if not base_units then
45069: LD_VAR 0 1
45073: NOT
45074: IFFALSE 45078
// exit ;
45076: GO 45165
// result := false ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_INT 0
45085: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45086: LD_ADDR_VAR 0 5
45090: PUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: LD_INT 21
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PPUSH
45106: CALL_OW 72
45110: ST_TO_ADDR
// if not tmp then
45111: LD_VAR 0 5
45115: NOT
45116: IFFALSE 45120
// exit ;
45118: GO 45165
// for i in tmp do
45120: LD_ADDR_VAR 0 3
45124: PUSH
45125: LD_VAR 0 5
45129: PUSH
45130: FOR_IN
45131: IFFALSE 45163
// begin result := EnemyInRange ( i , 22 ) ;
45133: LD_ADDR_VAR 0 2
45137: PUSH
45138: LD_VAR 0 3
45142: PPUSH
45143: LD_INT 22
45145: PPUSH
45146: CALL 43401 0 2
45150: ST_TO_ADDR
// if result then
45151: LD_VAR 0 2
45155: IFFALSE 45161
// exit ;
45157: POP
45158: POP
45159: GO 45165
// end ;
45161: GO 45130
45163: POP
45164: POP
// end ;
45165: LD_VAR 0 2
45169: RET
// export function FilterByTag ( units , tag ) ; begin
45170: LD_INT 0
45172: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 120
45185: PUSH
45186: LD_VAR 0 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PPUSH
45195: CALL_OW 72
45199: ST_TO_ADDR
// end ;
45200: LD_VAR 0 3
45204: RET
// export function IsDriver ( un ) ; begin
45205: LD_INT 0
45207: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45208: LD_ADDR_VAR 0 2
45212: PUSH
45213: LD_VAR 0 1
45217: PUSH
45218: LD_INT 55
45220: PUSH
45221: EMPTY
45222: LIST
45223: PPUSH
45224: CALL_OW 69
45228: IN
45229: ST_TO_ADDR
// end ;
45230: LD_VAR 0 2
45234: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45235: LD_INT 0
45237: PPUSH
45238: PPUSH
// list := [ ] ;
45239: LD_ADDR_VAR 0 5
45243: PUSH
45244: EMPTY
45245: ST_TO_ADDR
// case d of 0 :
45246: LD_VAR 0 3
45250: PUSH
45251: LD_INT 0
45253: DOUBLE
45254: EQUAL
45255: IFTRUE 45259
45257: GO 45392
45259: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45260: LD_ADDR_VAR 0 5
45264: PUSH
45265: LD_VAR 0 1
45269: PUSH
45270: LD_INT 4
45272: MINUS
45273: PUSH
45274: LD_VAR 0 2
45278: PUSH
45279: LD_INT 4
45281: MINUS
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: PUSH
45291: LD_VAR 0 1
45295: PUSH
45296: LD_INT 3
45298: MINUS
45299: PUSH
45300: LD_VAR 0 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: PUSH
45313: LD_VAR 0 1
45317: PUSH
45318: LD_INT 4
45320: PLUS
45321: PUSH
45322: LD_VAR 0 2
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: PUSH
45335: LD_VAR 0 1
45339: PUSH
45340: LD_INT 3
45342: PLUS
45343: PUSH
45344: LD_VAR 0 2
45348: PUSH
45349: LD_INT 3
45351: PLUS
45352: PUSH
45353: LD_INT 5
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: PUSH
45361: LD_VAR 0 1
45365: PUSH
45366: LD_VAR 0 2
45370: PUSH
45371: LD_INT 4
45373: PLUS
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
// end ; 1 :
45390: GO 46090
45392: LD_INT 1
45394: DOUBLE
45395: EQUAL
45396: IFTRUE 45400
45398: GO 45533
45400: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: LD_VAR 0 1
45410: PUSH
45411: LD_VAR 0 2
45415: PUSH
45416: LD_INT 4
45418: MINUS
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: PUSH
45428: LD_VAR 0 1
45432: PUSH
45433: LD_INT 3
45435: MINUS
45436: PUSH
45437: LD_VAR 0 2
45441: PUSH
45442: LD_INT 3
45444: MINUS
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: PUSH
45454: LD_VAR 0 1
45458: PUSH
45459: LD_INT 4
45461: MINUS
45462: PUSH
45463: LD_VAR 0 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: PUSH
45476: LD_VAR 0 1
45480: PUSH
45481: LD_VAR 0 2
45485: PUSH
45486: LD_INT 3
45488: PLUS
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: PUSH
45498: LD_VAR 0 1
45502: PUSH
45503: LD_INT 4
45505: PLUS
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 4
45514: PLUS
45515: PUSH
45516: LD_INT 5
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// end ; 2 :
45531: GO 46090
45533: LD_INT 2
45535: DOUBLE
45536: EQUAL
45537: IFTRUE 45541
45539: GO 45670
45541: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45542: LD_ADDR_VAR 0 5
45546: PUSH
45547: LD_VAR 0 1
45551: PUSH
45552: LD_VAR 0 2
45556: PUSH
45557: LD_INT 3
45559: MINUS
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: PUSH
45569: LD_VAR 0 1
45573: PUSH
45574: LD_INT 4
45576: PLUS
45577: PUSH
45578: LD_VAR 0 2
45582: PUSH
45583: LD_INT 4
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: PUSH
45591: LD_VAR 0 1
45595: PUSH
45596: LD_VAR 0 2
45600: PUSH
45601: LD_INT 4
45603: PLUS
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: PUSH
45613: LD_VAR 0 1
45617: PUSH
45618: LD_INT 3
45620: MINUS
45621: PUSH
45622: LD_VAR 0 2
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: PUSH
45635: LD_VAR 0 1
45639: PUSH
45640: LD_INT 4
45642: MINUS
45643: PUSH
45644: LD_VAR 0 2
45648: PUSH
45649: LD_INT 4
45651: MINUS
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: ST_TO_ADDR
// end ; 3 :
45668: GO 46090
45670: LD_INT 3
45672: DOUBLE
45673: EQUAL
45674: IFTRUE 45678
45676: GO 45811
45678: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45679: LD_ADDR_VAR 0 5
45683: PUSH
45684: LD_VAR 0 1
45688: PUSH
45689: LD_INT 3
45691: PLUS
45692: PUSH
45693: LD_VAR 0 2
45697: PUSH
45698: LD_INT 4
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: PUSH
45706: LD_VAR 0 1
45710: PUSH
45711: LD_INT 4
45713: PLUS
45714: PUSH
45715: LD_VAR 0 2
45719: PUSH
45720: LD_INT 4
45722: PLUS
45723: PUSH
45724: LD_INT 5
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: PUSH
45732: LD_VAR 0 1
45736: PUSH
45737: LD_INT 4
45739: MINUS
45740: PUSH
45741: LD_VAR 0 2
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: PUSH
45754: LD_VAR 0 1
45758: PUSH
45759: LD_VAR 0 2
45763: PUSH
45764: LD_INT 4
45766: MINUS
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: LIST
45775: PUSH
45776: LD_VAR 0 1
45780: PUSH
45781: LD_INT 3
45783: MINUS
45784: PUSH
45785: LD_VAR 0 2
45789: PUSH
45790: LD_INT 3
45792: MINUS
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: ST_TO_ADDR
// end ; 4 :
45809: GO 46090
45811: LD_INT 4
45813: DOUBLE
45814: EQUAL
45815: IFTRUE 45819
45817: GO 45952
45819: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45820: LD_ADDR_VAR 0 5
45824: PUSH
45825: LD_VAR 0 1
45829: PUSH
45830: LD_VAR 0 2
45834: PUSH
45835: LD_INT 4
45837: PLUS
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: LIST
45846: PUSH
45847: LD_VAR 0 1
45851: PUSH
45852: LD_INT 3
45854: PLUS
45855: PUSH
45856: LD_VAR 0 2
45860: PUSH
45861: LD_INT 3
45863: PLUS
45864: PUSH
45865: LD_INT 5
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: PUSH
45873: LD_VAR 0 1
45877: PUSH
45878: LD_INT 4
45880: PLUS
45881: PUSH
45882: LD_VAR 0 2
45886: PUSH
45887: LD_INT 4
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: PUSH
45895: LD_VAR 0 1
45899: PUSH
45900: LD_VAR 0 2
45904: PUSH
45905: LD_INT 3
45907: MINUS
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: PUSH
45917: LD_VAR 0 1
45921: PUSH
45922: LD_INT 4
45924: MINUS
45925: PUSH
45926: LD_VAR 0 2
45930: PUSH
45931: LD_INT 4
45933: MINUS
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// end ; 5 :
45950: GO 46090
45952: LD_INT 5
45954: DOUBLE
45955: EQUAL
45956: IFTRUE 45960
45958: GO 46089
45960: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45961: LD_ADDR_VAR 0 5
45965: PUSH
45966: LD_VAR 0 1
45970: PUSH
45971: LD_INT 4
45973: MINUS
45974: PUSH
45975: LD_VAR 0 2
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: PUSH
45988: LD_VAR 0 1
45992: PUSH
45993: LD_VAR 0 2
45997: PUSH
45998: LD_INT 4
46000: MINUS
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: PUSH
46010: LD_VAR 0 1
46014: PUSH
46015: LD_INT 4
46017: PLUS
46018: PUSH
46019: LD_VAR 0 2
46023: PUSH
46024: LD_INT 4
46026: PLUS
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: PUSH
46036: LD_VAR 0 1
46040: PUSH
46041: LD_INT 3
46043: PLUS
46044: PUSH
46045: LD_VAR 0 2
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: PUSH
46058: LD_VAR 0 1
46062: PUSH
46063: LD_VAR 0 2
46067: PUSH
46068: LD_INT 3
46070: PLUS
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// end ; end ;
46087: GO 46090
46089: POP
// result := list ;
46090: LD_ADDR_VAR 0 4
46094: PUSH
46095: LD_VAR 0 5
46099: ST_TO_ADDR
// end ;
46100: LD_VAR 0 4
46104: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46105: LD_INT 0
46107: PPUSH
46108: PPUSH
46109: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46110: LD_VAR 0 1
46114: NOT
46115: PUSH
46116: LD_VAR 0 2
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 4
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: IN
46139: NOT
46140: OR
46141: IFFALSE 46145
// exit ;
46143: GO 46237
// tmp := [ ] ;
46145: LD_ADDR_VAR 0 5
46149: PUSH
46150: EMPTY
46151: ST_TO_ADDR
// for i in units do
46152: LD_ADDR_VAR 0 4
46156: PUSH
46157: LD_VAR 0 1
46161: PUSH
46162: FOR_IN
46163: IFFALSE 46206
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
46165: LD_ADDR_VAR 0 5
46169: PUSH
46170: LD_VAR 0 5
46174: PPUSH
46175: LD_VAR 0 5
46179: PUSH
46180: LD_INT 1
46182: PLUS
46183: PPUSH
46184: LD_VAR 0 4
46188: PPUSH
46189: LD_VAR 0 2
46193: PPUSH
46194: CALL_OW 259
46198: PPUSH
46199: CALL_OW 2
46203: ST_TO_ADDR
46204: GO 46162
46206: POP
46207: POP
// if not tmp then
46208: LD_VAR 0 5
46212: NOT
46213: IFFALSE 46217
// exit ;
46215: GO 46237
// result := SortListByListDesc ( units , tmp ) ;
46217: LD_ADDR_VAR 0 3
46221: PUSH
46222: LD_VAR 0 1
46226: PPUSH
46227: LD_VAR 0 5
46231: PPUSH
46232: CALL_OW 77
46236: ST_TO_ADDR
// end ;
46237: LD_VAR 0 3
46241: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46242: LD_INT 0
46244: PPUSH
46245: PPUSH
46246: PPUSH
// result := false ;
46247: LD_ADDR_VAR 0 3
46251: PUSH
46252: LD_INT 0
46254: ST_TO_ADDR
// x := GetX ( building ) ;
46255: LD_ADDR_VAR 0 4
46259: PUSH
46260: LD_VAR 0 2
46264: PPUSH
46265: CALL_OW 250
46269: ST_TO_ADDR
// y := GetY ( building ) ;
46270: LD_ADDR_VAR 0 5
46274: PUSH
46275: LD_VAR 0 2
46279: PPUSH
46280: CALL_OW 251
46284: ST_TO_ADDR
// if not building or not x or not y then
46285: LD_VAR 0 2
46289: NOT
46290: PUSH
46291: LD_VAR 0 4
46295: NOT
46296: OR
46297: PUSH
46298: LD_VAR 0 5
46302: NOT
46303: OR
46304: IFFALSE 46308
// exit ;
46306: GO 46400
// if GetTaskList ( unit ) then
46308: LD_VAR 0 1
46312: PPUSH
46313: CALL_OW 437
46317: IFFALSE 46400
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46319: LD_STRING e
46321: PUSH
46322: LD_VAR 0 1
46326: PPUSH
46327: CALL_OW 437
46331: PUSH
46332: LD_INT 1
46334: ARRAY
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: EQUAL
46340: PUSH
46341: LD_VAR 0 4
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: CALL_OW 437
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PUSH
46360: LD_INT 2
46362: ARRAY
46363: EQUAL
46364: AND
46365: PUSH
46366: LD_VAR 0 5
46370: PUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 437
46380: PUSH
46381: LD_INT 1
46383: ARRAY
46384: PUSH
46385: LD_INT 3
46387: ARRAY
46388: EQUAL
46389: AND
46390: IFFALSE 46400
// result := true end ;
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_INT 1
46399: ST_TO_ADDR
// end ;
46400: LD_VAR 0 3
46404: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46405: LD_INT 0
46407: PPUSH
// result := false ;
46408: LD_ADDR_VAR 0 4
46412: PUSH
46413: LD_INT 0
46415: ST_TO_ADDR
// if GetTaskList ( unit ) then
46416: LD_VAR 0 1
46420: PPUSH
46421: CALL_OW 437
46425: IFFALSE 46508
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46427: LD_STRING M
46429: PUSH
46430: LD_VAR 0 1
46434: PPUSH
46435: CALL_OW 437
46439: PUSH
46440: LD_INT 1
46442: ARRAY
46443: PUSH
46444: LD_INT 1
46446: ARRAY
46447: EQUAL
46448: PUSH
46449: LD_VAR 0 2
46453: PUSH
46454: LD_VAR 0 1
46458: PPUSH
46459: CALL_OW 437
46463: PUSH
46464: LD_INT 1
46466: ARRAY
46467: PUSH
46468: LD_INT 2
46470: ARRAY
46471: EQUAL
46472: AND
46473: PUSH
46474: LD_VAR 0 3
46478: PUSH
46479: LD_VAR 0 1
46483: PPUSH
46484: CALL_OW 437
46488: PUSH
46489: LD_INT 1
46491: ARRAY
46492: PUSH
46493: LD_INT 3
46495: ARRAY
46496: EQUAL
46497: AND
46498: IFFALSE 46508
// result := true ;
46500: LD_ADDR_VAR 0 4
46504: PUSH
46505: LD_INT 1
46507: ST_TO_ADDR
// end ; end ;
46508: LD_VAR 0 4
46512: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46513: LD_INT 0
46515: PPUSH
46516: PPUSH
46517: PPUSH
46518: PPUSH
// if not unit or not area then
46519: LD_VAR 0 1
46523: NOT
46524: PUSH
46525: LD_VAR 0 2
46529: NOT
46530: OR
46531: IFFALSE 46535
// exit ;
46533: GO 46699
// tmp := AreaToList ( area , i ) ;
46535: LD_ADDR_VAR 0 6
46539: PUSH
46540: LD_VAR 0 2
46544: PPUSH
46545: LD_VAR 0 5
46549: PPUSH
46550: CALL_OW 517
46554: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46555: LD_ADDR_VAR 0 5
46559: PUSH
46560: DOUBLE
46561: LD_INT 1
46563: DEC
46564: ST_TO_ADDR
46565: LD_VAR 0 6
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PUSH
46574: FOR_TO
46575: IFFALSE 46697
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46577: LD_ADDR_VAR 0 7
46581: PUSH
46582: LD_VAR 0 6
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: PUSH
46591: LD_VAR 0 5
46595: ARRAY
46596: PUSH
46597: LD_VAR 0 6
46601: PUSH
46602: LD_INT 2
46604: ARRAY
46605: PUSH
46606: LD_VAR 0 5
46610: ARRAY
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46616: LD_VAR 0 7
46620: PUSH
46621: LD_INT 1
46623: ARRAY
46624: PPUSH
46625: LD_VAR 0 7
46629: PUSH
46630: LD_INT 2
46632: ARRAY
46633: PPUSH
46634: CALL_OW 428
46638: PUSH
46639: LD_INT 0
46641: EQUAL
46642: IFFALSE 46695
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46644: LD_VAR 0 1
46648: PPUSH
46649: LD_VAR 0 7
46653: PUSH
46654: LD_INT 1
46656: ARRAY
46657: PPUSH
46658: LD_VAR 0 7
46662: PUSH
46663: LD_INT 2
46665: ARRAY
46666: PPUSH
46667: LD_VAR 0 3
46671: PPUSH
46672: CALL_OW 48
// result := IsPlaced ( unit ) ;
46676: LD_ADDR_VAR 0 4
46680: PUSH
46681: LD_VAR 0 1
46685: PPUSH
46686: CALL_OW 305
46690: ST_TO_ADDR
// exit ;
46691: POP
46692: POP
46693: GO 46699
// end ; end ;
46695: GO 46574
46697: POP
46698: POP
// end ;
46699: LD_VAR 0 4
46703: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46704: LD_INT 0
46706: PPUSH
46707: PPUSH
46708: PPUSH
// if not side or side > 8 then
46709: LD_VAR 0 1
46713: NOT
46714: PUSH
46715: LD_VAR 0 1
46719: PUSH
46720: LD_INT 8
46722: GREATER
46723: OR
46724: IFFALSE 46728
// exit ;
46726: GO 46915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46728: LD_ADDR_VAR 0 4
46732: PUSH
46733: LD_INT 22
46735: PUSH
46736: LD_VAR 0 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 21
46747: PUSH
46748: LD_INT 3
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PPUSH
46759: CALL_OW 69
46763: ST_TO_ADDR
// if not tmp then
46764: LD_VAR 0 4
46768: NOT
46769: IFFALSE 46773
// exit ;
46771: GO 46915
// enable_addtolog := true ;
46773: LD_ADDR_OWVAR 81
46777: PUSH
46778: LD_INT 1
46780: ST_TO_ADDR
// AddToLog ( [ ) ;
46781: LD_STRING [
46783: PPUSH
46784: CALL_OW 561
// for i in tmp do
46788: LD_ADDR_VAR 0 3
46792: PUSH
46793: LD_VAR 0 4
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46906
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46801: LD_STRING [
46803: PUSH
46804: LD_VAR 0 3
46808: PPUSH
46809: CALL_OW 266
46813: STR
46814: PUSH
46815: LD_STRING , 
46817: STR
46818: PUSH
46819: LD_VAR 0 3
46823: PPUSH
46824: CALL_OW 250
46828: STR
46829: PUSH
46830: LD_STRING , 
46832: STR
46833: PUSH
46834: LD_VAR 0 3
46838: PPUSH
46839: CALL_OW 251
46843: STR
46844: PUSH
46845: LD_STRING , 
46847: STR
46848: PUSH
46849: LD_VAR 0 3
46853: PPUSH
46854: CALL_OW 254
46858: STR
46859: PUSH
46860: LD_STRING , 
46862: STR
46863: PUSH
46864: LD_VAR 0 3
46868: PPUSH
46869: LD_INT 1
46871: PPUSH
46872: CALL_OW 268
46876: STR
46877: PUSH
46878: LD_STRING , 
46880: STR
46881: PUSH
46882: LD_VAR 0 3
46886: PPUSH
46887: LD_INT 2
46889: PPUSH
46890: CALL_OW 268
46894: STR
46895: PUSH
46896: LD_STRING ],
46898: STR
46899: PPUSH
46900: CALL_OW 561
// end ;
46904: GO 46798
46906: POP
46907: POP
// AddToLog ( ]; ) ;
46908: LD_STRING ];
46910: PPUSH
46911: CALL_OW 561
// end ;
46915: LD_VAR 0 2
46919: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46920: LD_INT 0
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
// if not area or not rate or not max then
46927: LD_VAR 0 1
46931: NOT
46932: PUSH
46933: LD_VAR 0 2
46937: NOT
46938: OR
46939: PUSH
46940: LD_VAR 0 4
46944: NOT
46945: OR
46946: IFFALSE 46950
// exit ;
46948: GO 47139
// while 1 do
46950: LD_INT 1
46952: IFFALSE 47139
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_VAR 0 1
46963: PPUSH
46964: LD_INT 1
46966: PPUSH
46967: CALL_OW 287
46971: PUSH
46972: LD_INT 10
46974: MUL
46975: ST_TO_ADDR
// r := rate / 10 ;
46976: LD_ADDR_VAR 0 7
46980: PUSH
46981: LD_VAR 0 2
46985: PUSH
46986: LD_INT 10
46988: DIVREAL
46989: ST_TO_ADDR
// time := 1 1$00 ;
46990: LD_ADDR_VAR 0 8
46994: PUSH
46995: LD_INT 2100
46997: ST_TO_ADDR
// if amount < min then
46998: LD_VAR 0 9
47002: PUSH
47003: LD_VAR 0 3
47007: LESS
47008: IFFALSE 47026
// r := r * 2 else
47010: LD_ADDR_VAR 0 7
47014: PUSH
47015: LD_VAR 0 7
47019: PUSH
47020: LD_INT 2
47022: MUL
47023: ST_TO_ADDR
47024: GO 47052
// if amount > max then
47026: LD_VAR 0 9
47030: PUSH
47031: LD_VAR 0 4
47035: GREATER
47036: IFFALSE 47052
// r := r / 2 ;
47038: LD_ADDR_VAR 0 7
47042: PUSH
47043: LD_VAR 0 7
47047: PUSH
47048: LD_INT 2
47050: DIVREAL
47051: ST_TO_ADDR
// time := time / r ;
47052: LD_ADDR_VAR 0 8
47056: PUSH
47057: LD_VAR 0 8
47061: PUSH
47062: LD_VAR 0 7
47066: DIVREAL
47067: ST_TO_ADDR
// if time < 0 then
47068: LD_VAR 0 8
47072: PUSH
47073: LD_INT 0
47075: LESS
47076: IFFALSE 47093
// time := time * - 1 ;
47078: LD_ADDR_VAR 0 8
47082: PUSH
47083: LD_VAR 0 8
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: MUL
47092: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47093: LD_VAR 0 8
47097: PUSH
47098: LD_INT 35
47100: PPUSH
47101: LD_INT 875
47103: PPUSH
47104: CALL_OW 12
47108: PLUS
47109: PPUSH
47110: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47114: LD_INT 1
47116: PPUSH
47117: LD_INT 5
47119: PPUSH
47120: CALL_OW 12
47124: PPUSH
47125: LD_VAR 0 1
47129: PPUSH
47130: LD_INT 1
47132: PPUSH
47133: CALL_OW 55
// end ;
47137: GO 46950
// end ;
47139: LD_VAR 0 5
47143: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47144: LD_INT 0
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
// if not turrets or not factories then
47154: LD_VAR 0 1
47158: NOT
47159: PUSH
47160: LD_VAR 0 2
47164: NOT
47165: OR
47166: IFFALSE 47170
// exit ;
47168: GO 47477
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47170: LD_ADDR_VAR 0 10
47174: PUSH
47175: LD_INT 5
47177: PUSH
47178: LD_INT 6
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 4
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 5
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 24
47212: PUSH
47213: LD_INT 25
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 23
47222: PUSH
47223: LD_INT 27
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 42
47236: PUSH
47237: LD_INT 43
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 44
47246: PUSH
47247: LD_INT 46
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 45
47256: PUSH
47257: LD_INT 47
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: ST_TO_ADDR
// result := [ ] ;
47274: LD_ADDR_VAR 0 3
47278: PUSH
47279: EMPTY
47280: ST_TO_ADDR
// for i in turrets do
47281: LD_ADDR_VAR 0 4
47285: PUSH
47286: LD_VAR 0 1
47290: PUSH
47291: FOR_IN
47292: IFFALSE 47475
// begin nat := GetNation ( i ) ;
47294: LD_ADDR_VAR 0 7
47298: PUSH
47299: LD_VAR 0 4
47303: PPUSH
47304: CALL_OW 248
47308: ST_TO_ADDR
// weapon := 0 ;
47309: LD_ADDR_VAR 0 8
47313: PUSH
47314: LD_INT 0
47316: ST_TO_ADDR
// if not nat then
47317: LD_VAR 0 7
47321: NOT
47322: IFFALSE 47326
// continue ;
47324: GO 47291
// for j in list [ nat ] do
47326: LD_ADDR_VAR 0 5
47330: PUSH
47331: LD_VAR 0 10
47335: PUSH
47336: LD_VAR 0 7
47340: ARRAY
47341: PUSH
47342: FOR_IN
47343: IFFALSE 47384
// if GetBWeapon ( i ) = j [ 1 ] then
47345: LD_VAR 0 4
47349: PPUSH
47350: CALL_OW 269
47354: PUSH
47355: LD_VAR 0 5
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: EQUAL
47364: IFFALSE 47382
// begin weapon := j [ 2 ] ;
47366: LD_ADDR_VAR 0 8
47370: PUSH
47371: LD_VAR 0 5
47375: PUSH
47376: LD_INT 2
47378: ARRAY
47379: ST_TO_ADDR
// break ;
47380: GO 47384
// end ;
47382: GO 47342
47384: POP
47385: POP
// if not weapon then
47386: LD_VAR 0 8
47390: NOT
47391: IFFALSE 47395
// continue ;
47393: GO 47291
// for k in factories do
47395: LD_ADDR_VAR 0 6
47399: PUSH
47400: LD_VAR 0 2
47404: PUSH
47405: FOR_IN
47406: IFFALSE 47471
// begin weapons := AvailableWeaponList ( k ) ;
47408: LD_ADDR_VAR 0 9
47412: PUSH
47413: LD_VAR 0 6
47417: PPUSH
47418: CALL_OW 478
47422: ST_TO_ADDR
// if not weapons then
47423: LD_VAR 0 9
47427: NOT
47428: IFFALSE 47432
// continue ;
47430: GO 47405
// if weapon in weapons then
47432: LD_VAR 0 8
47436: PUSH
47437: LD_VAR 0 9
47441: IN
47442: IFFALSE 47469
// begin result := [ i , weapon ] ;
47444: LD_ADDR_VAR 0 3
47448: PUSH
47449: LD_VAR 0 4
47453: PUSH
47454: LD_VAR 0 8
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// exit ;
47463: POP
47464: POP
47465: POP
47466: POP
47467: GO 47477
// end ; end ;
47469: GO 47405
47471: POP
47472: POP
// end ;
47473: GO 47291
47475: POP
47476: POP
// end ;
47477: LD_VAR 0 3
47481: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47482: LD_INT 0
47484: PPUSH
// if not side or side > 8 then
47485: LD_VAR 0 3
47489: NOT
47490: PUSH
47491: LD_VAR 0 3
47495: PUSH
47496: LD_INT 8
47498: GREATER
47499: OR
47500: IFFALSE 47504
// exit ;
47502: GO 47563
// if not range then
47504: LD_VAR 0 4
47508: NOT
47509: IFFALSE 47520
// range := - 12 ;
47511: LD_ADDR_VAR 0 4
47515: PUSH
47516: LD_INT 12
47518: NEG
47519: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47520: LD_VAR 0 1
47524: PPUSH
47525: LD_VAR 0 2
47529: PPUSH
47530: LD_VAR 0 3
47534: PPUSH
47535: LD_VAR 0 4
47539: PPUSH
47540: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47544: LD_VAR 0 1
47548: PPUSH
47549: LD_VAR 0 2
47553: PPUSH
47554: LD_VAR 0 3
47558: PPUSH
47559: CALL_OW 331
// end ;
47563: LD_VAR 0 5
47567: RET
// export function Video ( mode ) ; begin
47568: LD_INT 0
47570: PPUSH
// ingame_video = mode ;
47571: LD_ADDR_OWVAR 52
47575: PUSH
47576: LD_VAR 0 1
47580: ST_TO_ADDR
// interface_hidden = mode ;
47581: LD_ADDR_OWVAR 54
47585: PUSH
47586: LD_VAR 0 1
47590: ST_TO_ADDR
// end ;
47591: LD_VAR 0 2
47595: RET
// export function Join ( array , element ) ; begin
47596: LD_INT 0
47598: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47599: LD_ADDR_VAR 0 3
47603: PUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: LD_VAR 0 1
47613: PUSH
47614: LD_INT 1
47616: PLUS
47617: PPUSH
47618: LD_VAR 0 2
47622: PPUSH
47623: CALL_OW 1
47627: ST_TO_ADDR
// end ;
47628: LD_VAR 0 3
47632: RET
// export function JoinUnion ( array , element ) ; begin
47633: LD_INT 0
47635: PPUSH
// result := array union element ;
47636: LD_ADDR_VAR 0 3
47640: PUSH
47641: LD_VAR 0 1
47645: PUSH
47646: LD_VAR 0 2
47650: UNION
47651: ST_TO_ADDR
// end ;
47652: LD_VAR 0 3
47656: RET
// export function GetBehemoths ( side ) ; begin
47657: LD_INT 0
47659: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47660: LD_ADDR_VAR 0 2
47664: PUSH
47665: LD_INT 22
47667: PUSH
47668: LD_VAR 0 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 31
47679: PUSH
47680: LD_INT 25
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PPUSH
47691: CALL_OW 69
47695: ST_TO_ADDR
// end ;
47696: LD_VAR 0 2
47700: RET
// export function Shuffle ( array ) ; var i , index ; begin
47701: LD_INT 0
47703: PPUSH
47704: PPUSH
47705: PPUSH
// result := [ ] ;
47706: LD_ADDR_VAR 0 2
47710: PUSH
47711: EMPTY
47712: ST_TO_ADDR
// if not array then
47713: LD_VAR 0 1
47717: NOT
47718: IFFALSE 47722
// exit ;
47720: GO 47821
// Randomize ;
47722: CALL_OW 10
// for i = array downto 1 do
47726: LD_ADDR_VAR 0 3
47730: PUSH
47731: DOUBLE
47732: LD_VAR 0 1
47736: INC
47737: ST_TO_ADDR
47738: LD_INT 1
47740: PUSH
47741: FOR_DOWNTO
47742: IFFALSE 47819
// begin index := rand ( 1 , array ) ;
47744: LD_ADDR_VAR 0 4
47748: PUSH
47749: LD_INT 1
47751: PPUSH
47752: LD_VAR 0 1
47756: PPUSH
47757: CALL_OW 12
47761: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47762: LD_ADDR_VAR 0 2
47766: PUSH
47767: LD_VAR 0 2
47771: PPUSH
47772: LD_VAR 0 2
47776: PUSH
47777: LD_INT 1
47779: PLUS
47780: PPUSH
47781: LD_VAR 0 1
47785: PUSH
47786: LD_VAR 0 4
47790: ARRAY
47791: PPUSH
47792: CALL_OW 2
47796: ST_TO_ADDR
// array := Delete ( array , index ) ;
47797: LD_ADDR_VAR 0 1
47801: PUSH
47802: LD_VAR 0 1
47806: PPUSH
47807: LD_VAR 0 4
47811: PPUSH
47812: CALL_OW 3
47816: ST_TO_ADDR
// end ;
47817: GO 47741
47819: POP
47820: POP
// end ;
47821: LD_VAR 0 2
47825: RET
// export function GetBaseMaterials ( base ) ; begin
47826: LD_INT 0
47828: PPUSH
// result := [ 0 , 0 , 0 ] ;
47829: LD_ADDR_VAR 0 2
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// if not base then
47848: LD_VAR 0 1
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 47906
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47857: LD_ADDR_VAR 0 2
47861: PUSH
47862: LD_VAR 0 1
47866: PPUSH
47867: LD_INT 1
47869: PPUSH
47870: CALL_OW 275
47874: PUSH
47875: LD_VAR 0 1
47879: PPUSH
47880: LD_INT 2
47882: PPUSH
47883: CALL_OW 275
47887: PUSH
47888: LD_VAR 0 1
47892: PPUSH
47893: LD_INT 3
47895: PPUSH
47896: CALL_OW 275
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// end ;
47906: LD_VAR 0 2
47910: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47911: LD_INT 0
47913: PPUSH
47914: PPUSH
// result := array ;
47915: LD_ADDR_VAR 0 3
47919: PUSH
47920: LD_VAR 0 1
47924: ST_TO_ADDR
// if size > 0 then
47925: LD_VAR 0 2
47929: PUSH
47930: LD_INT 0
47932: GREATER
47933: IFFALSE 47979
// for i := array downto size do
47935: LD_ADDR_VAR 0 4
47939: PUSH
47940: DOUBLE
47941: LD_VAR 0 1
47945: INC
47946: ST_TO_ADDR
47947: LD_VAR 0 2
47951: PUSH
47952: FOR_DOWNTO
47953: IFFALSE 47977
// result := Delete ( result , result ) ;
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_VAR 0 3
47964: PPUSH
47965: LD_VAR 0 3
47969: PPUSH
47970: CALL_OW 3
47974: ST_TO_ADDR
47975: GO 47952
47977: POP
47978: POP
// end ;
47979: LD_VAR 0 3
47983: RET
// export function ComExit ( unit ) ; var tmp ; begin
47984: LD_INT 0
47986: PPUSH
47987: PPUSH
// if not IsInUnit ( unit ) then
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 310
47997: NOT
47998: IFFALSE 48002
// exit ;
48000: GO 48062
// tmp := IsInUnit ( unit ) ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_VAR 0 1
48011: PPUSH
48012: CALL_OW 310
48016: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48017: LD_VAR 0 3
48021: PPUSH
48022: CALL_OW 247
48026: PUSH
48027: LD_INT 2
48029: EQUAL
48030: IFFALSE 48043
// ComExitVehicle ( unit ) else
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 121
48041: GO 48052
// ComExitBuilding ( unit ) ;
48043: LD_VAR 0 1
48047: PPUSH
48048: CALL_OW 122
// result := tmp ;
48052: LD_ADDR_VAR 0 2
48056: PUSH
48057: LD_VAR 0 3
48061: ST_TO_ADDR
// end ;
48062: LD_VAR 0 2
48066: RET
// export function ComExitAll ( units ) ; var i ; begin
48067: LD_INT 0
48069: PPUSH
48070: PPUSH
// if not units then
48071: LD_VAR 0 1
48075: NOT
48076: IFFALSE 48080
// exit ;
48078: GO 48106
// for i in units do
48080: LD_ADDR_VAR 0 3
48084: PUSH
48085: LD_VAR 0 1
48089: PUSH
48090: FOR_IN
48091: IFFALSE 48104
// ComExit ( i ) ;
48093: LD_VAR 0 3
48097: PPUSH
48098: CALL 47984 0 1
48102: GO 48090
48104: POP
48105: POP
// end ;
48106: LD_VAR 0 2
48110: RET
// export function ResetHc ; begin
48111: LD_INT 0
48113: PPUSH
// InitHc ;
48114: CALL_OW 19
// hc_importance := 0 ;
48118: LD_ADDR_OWVAR 32
48122: PUSH
48123: LD_INT 0
48125: ST_TO_ADDR
// end ;
48126: LD_VAR 0 1
48130: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48131: LD_INT 0
48133: PPUSH
48134: PPUSH
48135: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48136: LD_ADDR_VAR 0 6
48140: PUSH
48141: LD_VAR 0 1
48145: PUSH
48146: LD_VAR 0 3
48150: PLUS
48151: PUSH
48152: LD_INT 2
48154: DIV
48155: ST_TO_ADDR
// if _x < 0 then
48156: LD_VAR 0 6
48160: PUSH
48161: LD_INT 0
48163: LESS
48164: IFFALSE 48181
// _x := _x * - 1 ;
48166: LD_ADDR_VAR 0 6
48170: PUSH
48171: LD_VAR 0 6
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: MUL
48180: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48181: LD_ADDR_VAR 0 7
48185: PUSH
48186: LD_VAR 0 2
48190: PUSH
48191: LD_VAR 0 4
48195: PLUS
48196: PUSH
48197: LD_INT 2
48199: DIV
48200: ST_TO_ADDR
// if _y < 0 then
48201: LD_VAR 0 7
48205: PUSH
48206: LD_INT 0
48208: LESS
48209: IFFALSE 48226
// _y := _y * - 1 ;
48211: LD_ADDR_VAR 0 7
48215: PUSH
48216: LD_VAR 0 7
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: MUL
48225: ST_TO_ADDR
// result := [ _x , _y ] ;
48226: LD_ADDR_VAR 0 5
48230: PUSH
48231: LD_VAR 0 6
48235: PUSH
48236: LD_VAR 0 7
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// end ;
48245: LD_VAR 0 5
48249: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48250: LD_INT 0
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
// task := GetTaskList ( unit ) ;
48256: LD_ADDR_VAR 0 7
48260: PUSH
48261: LD_VAR 0 1
48265: PPUSH
48266: CALL_OW 437
48270: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48271: LD_VAR 0 7
48275: NOT
48276: PUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: LD_VAR 0 2
48286: PPUSH
48287: CALL_OW 308
48291: NOT
48292: AND
48293: IFFALSE 48297
// exit ;
48295: GO 48415
// if IsInArea ( unit , area ) then
48297: LD_VAR 0 1
48301: PPUSH
48302: LD_VAR 0 2
48306: PPUSH
48307: CALL_OW 308
48311: IFFALSE 48329
// begin ComMoveToArea ( unit , goAway ) ;
48313: LD_VAR 0 1
48317: PPUSH
48318: LD_VAR 0 3
48322: PPUSH
48323: CALL_OW 113
// exit ;
48327: GO 48415
// end ; if task [ 1 ] [ 1 ] <> M then
48329: LD_VAR 0 7
48333: PUSH
48334: LD_INT 1
48336: ARRAY
48337: PUSH
48338: LD_INT 1
48340: ARRAY
48341: PUSH
48342: LD_STRING M
48344: NONEQUAL
48345: IFFALSE 48349
// exit ;
48347: GO 48415
// x := task [ 1 ] [ 2 ] ;
48349: LD_ADDR_VAR 0 5
48353: PUSH
48354: LD_VAR 0 7
48358: PUSH
48359: LD_INT 1
48361: ARRAY
48362: PUSH
48363: LD_INT 2
48365: ARRAY
48366: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48367: LD_ADDR_VAR 0 6
48371: PUSH
48372: LD_VAR 0 7
48376: PUSH
48377: LD_INT 1
48379: ARRAY
48380: PUSH
48381: LD_INT 3
48383: ARRAY
48384: ST_TO_ADDR
// if InArea ( x , y , area ) then
48385: LD_VAR 0 5
48389: PPUSH
48390: LD_VAR 0 6
48394: PPUSH
48395: LD_VAR 0 2
48399: PPUSH
48400: CALL_OW 309
48404: IFFALSE 48415
// ComStop ( unit ) ;
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 141
// end ;
48415: LD_VAR 0 4
48419: RET
// export function Abs ( value ) ; begin
48420: LD_INT 0
48422: PPUSH
// result := value ;
48423: LD_ADDR_VAR 0 2
48427: PUSH
48428: LD_VAR 0 1
48432: ST_TO_ADDR
// if value < 0 then
48433: LD_VAR 0 1
48437: PUSH
48438: LD_INT 0
48440: LESS
48441: IFFALSE 48458
// result := value * - 1 ;
48443: LD_ADDR_VAR 0 2
48447: PUSH
48448: LD_VAR 0 1
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: MUL
48457: ST_TO_ADDR
// end ;
48458: LD_VAR 0 2
48462: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48463: LD_INT 0
48465: PPUSH
48466: PPUSH
48467: PPUSH
48468: PPUSH
48469: PPUSH
48470: PPUSH
48471: PPUSH
48472: PPUSH
// if not unit or not building then
48473: LD_VAR 0 1
48477: NOT
48478: PUSH
48479: LD_VAR 0 2
48483: NOT
48484: OR
48485: IFFALSE 48489
// exit ;
48487: GO 48715
// x := GetX ( building ) ;
48489: LD_ADDR_VAR 0 4
48493: PUSH
48494: LD_VAR 0 2
48498: PPUSH
48499: CALL_OW 250
48503: ST_TO_ADDR
// y := GetY ( building ) ;
48504: LD_ADDR_VAR 0 6
48508: PUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: CALL_OW 251
48518: ST_TO_ADDR
// d := GetDir ( building ) ;
48519: LD_ADDR_VAR 0 8
48523: PUSH
48524: LD_VAR 0 2
48528: PPUSH
48529: CALL_OW 254
48533: ST_TO_ADDR
// r := 4 ;
48534: LD_ADDR_VAR 0 9
48538: PUSH
48539: LD_INT 4
48541: ST_TO_ADDR
// for i := 1 to 5 do
48542: LD_ADDR_VAR 0 10
48546: PUSH
48547: DOUBLE
48548: LD_INT 1
48550: DEC
48551: ST_TO_ADDR
48552: LD_INT 5
48554: PUSH
48555: FOR_TO
48556: IFFALSE 48713
// begin _x := ShiftX ( x , d , r + i ) ;
48558: LD_ADDR_VAR 0 5
48562: PUSH
48563: LD_VAR 0 4
48567: PPUSH
48568: LD_VAR 0 8
48572: PPUSH
48573: LD_VAR 0 9
48577: PUSH
48578: LD_VAR 0 10
48582: PLUS
48583: PPUSH
48584: CALL_OW 272
48588: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48589: LD_ADDR_VAR 0 7
48593: PUSH
48594: LD_VAR 0 6
48598: PPUSH
48599: LD_VAR 0 8
48603: PPUSH
48604: LD_VAR 0 9
48608: PUSH
48609: LD_VAR 0 10
48613: PLUS
48614: PPUSH
48615: CALL_OW 273
48619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48620: LD_VAR 0 5
48624: PPUSH
48625: LD_VAR 0 7
48629: PPUSH
48630: CALL_OW 488
48634: PUSH
48635: LD_VAR 0 5
48639: PPUSH
48640: LD_VAR 0 7
48644: PPUSH
48645: CALL_OW 428
48649: PPUSH
48650: CALL_OW 247
48654: PUSH
48655: LD_INT 3
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: IN
48665: NOT
48666: AND
48667: IFFALSE 48711
// begin ComMoveXY ( unit , _x , _y ) ;
48669: LD_VAR 0 1
48673: PPUSH
48674: LD_VAR 0 5
48678: PPUSH
48679: LD_VAR 0 7
48683: PPUSH
48684: CALL_OW 111
// result := [ _x , _y ] ;
48688: LD_ADDR_VAR 0 3
48692: PUSH
48693: LD_VAR 0 5
48697: PUSH
48698: LD_VAR 0 7
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// exit ;
48707: POP
48708: POP
48709: GO 48715
// end ; end ;
48711: GO 48555
48713: POP
48714: POP
// end ;
48715: LD_VAR 0 3
48719: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48720: LD_INT 0
48722: PPUSH
48723: PPUSH
48724: PPUSH
// result := 0 ;
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_INT 0
48732: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48733: LD_VAR 0 1
48737: PUSH
48738: LD_INT 0
48740: LESS
48741: PUSH
48742: LD_VAR 0 1
48746: PUSH
48747: LD_INT 8
48749: GREATER
48750: OR
48751: PUSH
48752: LD_VAR 0 2
48756: PUSH
48757: LD_INT 0
48759: LESS
48760: OR
48761: PUSH
48762: LD_VAR 0 2
48766: PUSH
48767: LD_INT 8
48769: GREATER
48770: OR
48771: IFFALSE 48775
// exit ;
48773: GO 48850
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48775: LD_ADDR_VAR 0 4
48779: PUSH
48780: LD_INT 22
48782: PUSH
48783: LD_VAR 0 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PPUSH
48792: CALL_OW 69
48796: PUSH
48797: FOR_IN
48798: IFFALSE 48848
// begin un := UnitShoot ( i ) ;
48800: LD_ADDR_VAR 0 5
48804: PUSH
48805: LD_VAR 0 4
48809: PPUSH
48810: CALL_OW 504
48814: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48815: LD_VAR 0 5
48819: PPUSH
48820: CALL_OW 255
48824: PUSH
48825: LD_VAR 0 1
48829: EQUAL
48830: IFFALSE 48846
// begin result := un ;
48832: LD_ADDR_VAR 0 3
48836: PUSH
48837: LD_VAR 0 5
48841: ST_TO_ADDR
// exit ;
48842: POP
48843: POP
48844: GO 48850
// end ; end ;
48846: GO 48797
48848: POP
48849: POP
// end ;
48850: LD_VAR 0 3
48854: RET
// export function GetCargoBay ( units ) ; begin
48855: LD_INT 0
48857: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48858: LD_ADDR_VAR 0 2
48862: PUSH
48863: LD_VAR 0 1
48867: PPUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 34
48873: PUSH
48874: LD_INT 12
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 34
48883: PUSH
48884: LD_INT 51
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 34
48893: PUSH
48894: LD_INT 32
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 34
48903: PUSH
48904: LD_EXP 93
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: PPUSH
48920: CALL_OW 72
48924: ST_TO_ADDR
// end ;
48925: LD_VAR 0 2
48929: RET
// export function Negate ( value ) ; begin
48930: LD_INT 0
48932: PPUSH
// result := not value ;
48933: LD_ADDR_VAR 0 2
48937: PUSH
48938: LD_VAR 0 1
48942: NOT
48943: ST_TO_ADDR
// end ;
48944: LD_VAR 0 2
48948: RET
// export function Inc ( value ) ; begin
48949: LD_INT 0
48951: PPUSH
// result := value + 1 ;
48952: LD_ADDR_VAR 0 2
48956: PUSH
48957: LD_VAR 0 1
48961: PUSH
48962: LD_INT 1
48964: PLUS
48965: ST_TO_ADDR
// end ;
48966: LD_VAR 0 2
48970: RET
// export function Dec ( value ) ; begin
48971: LD_INT 0
48973: PPUSH
// result := value - 1 ;
48974: LD_ADDR_VAR 0 2
48978: PUSH
48979: LD_VAR 0 1
48983: PUSH
48984: LD_INT 1
48986: MINUS
48987: ST_TO_ADDR
// end ;
48988: LD_VAR 0 2
48992: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48993: LD_INT 0
48995: PPUSH
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49003: LD_VAR 0 1
49007: PPUSH
49008: LD_VAR 0 2
49012: PPUSH
49013: CALL_OW 488
49017: NOT
49018: PUSH
49019: LD_VAR 0 3
49023: PPUSH
49024: LD_VAR 0 4
49028: PPUSH
49029: CALL_OW 488
49033: NOT
49034: OR
49035: IFFALSE 49048
// begin result := - 1 ;
49037: LD_ADDR_VAR 0 5
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: ST_TO_ADDR
// exit ;
49046: GO 49283
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49048: LD_ADDR_VAR 0 12
49052: PUSH
49053: LD_VAR 0 1
49057: PPUSH
49058: LD_VAR 0 2
49062: PPUSH
49063: LD_VAR 0 3
49067: PPUSH
49068: LD_VAR 0 4
49072: PPUSH
49073: CALL 48131 0 4
49077: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49078: LD_ADDR_VAR 0 11
49082: PUSH
49083: LD_VAR 0 1
49087: PPUSH
49088: LD_VAR 0 2
49092: PPUSH
49093: LD_VAR 0 12
49097: PUSH
49098: LD_INT 1
49100: ARRAY
49101: PPUSH
49102: LD_VAR 0 12
49106: PUSH
49107: LD_INT 2
49109: ARRAY
49110: PPUSH
49111: CALL_OW 298
49115: ST_TO_ADDR
// distance := 9999 ;
49116: LD_ADDR_VAR 0 10
49120: PUSH
49121: LD_INT 9999
49123: ST_TO_ADDR
// for i := 0 to 5 do
49124: LD_ADDR_VAR 0 6
49128: PUSH
49129: DOUBLE
49130: LD_INT 0
49132: DEC
49133: ST_TO_ADDR
49134: LD_INT 5
49136: PUSH
49137: FOR_TO
49138: IFFALSE 49281
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49140: LD_ADDR_VAR 0 7
49144: PUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: LD_VAR 0 6
49154: PPUSH
49155: LD_VAR 0 11
49159: PPUSH
49160: CALL_OW 272
49164: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49165: LD_ADDR_VAR 0 8
49169: PUSH
49170: LD_VAR 0 2
49174: PPUSH
49175: LD_VAR 0 6
49179: PPUSH
49180: LD_VAR 0 11
49184: PPUSH
49185: CALL_OW 273
49189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49190: LD_VAR 0 7
49194: PPUSH
49195: LD_VAR 0 8
49199: PPUSH
49200: CALL_OW 488
49204: NOT
49205: IFFALSE 49209
// continue ;
49207: GO 49137
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49209: LD_ADDR_VAR 0 9
49213: PUSH
49214: LD_VAR 0 12
49218: PUSH
49219: LD_INT 1
49221: ARRAY
49222: PPUSH
49223: LD_VAR 0 12
49227: PUSH
49228: LD_INT 2
49230: ARRAY
49231: PPUSH
49232: LD_VAR 0 7
49236: PPUSH
49237: LD_VAR 0 8
49241: PPUSH
49242: CALL_OW 298
49246: ST_TO_ADDR
// if tmp < distance then
49247: LD_VAR 0 9
49251: PUSH
49252: LD_VAR 0 10
49256: LESS
49257: IFFALSE 49279
// begin result := i ;
49259: LD_ADDR_VAR 0 5
49263: PUSH
49264: LD_VAR 0 6
49268: ST_TO_ADDR
// distance := tmp ;
49269: LD_ADDR_VAR 0 10
49273: PUSH
49274: LD_VAR 0 9
49278: ST_TO_ADDR
// end ; end ;
49279: GO 49137
49281: POP
49282: POP
// end ;
49283: LD_VAR 0 5
49287: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49288: LD_INT 0
49290: PPUSH
49291: PPUSH
// if not driver or not IsInUnit ( driver ) then
49292: LD_VAR 0 1
49296: NOT
49297: PUSH
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 310
49307: NOT
49308: OR
49309: IFFALSE 49313
// exit ;
49311: GO 49403
// vehicle := IsInUnit ( driver ) ;
49313: LD_ADDR_VAR 0 3
49317: PUSH
49318: LD_VAR 0 1
49322: PPUSH
49323: CALL_OW 310
49327: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49328: LD_VAR 0 1
49332: PPUSH
49333: LD_STRING \
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: PUSH
49363: LD_STRING E
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_VAR 0 3
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PPUSH
49399: CALL_OW 446
// end ;
49403: LD_VAR 0 2
49407: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49408: LD_INT 0
49410: PPUSH
49411: PPUSH
// if not driver or not IsInUnit ( driver ) then
49412: LD_VAR 0 1
49416: NOT
49417: PUSH
49418: LD_VAR 0 1
49422: PPUSH
49423: CALL_OW 310
49427: NOT
49428: OR
49429: IFFALSE 49433
// exit ;
49431: GO 49523
// vehicle := IsInUnit ( driver ) ;
49433: LD_ADDR_VAR 0 3
49437: PUSH
49438: LD_VAR 0 1
49442: PPUSH
49443: CALL_OW 310
49447: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49448: LD_VAR 0 1
49452: PPUSH
49453: LD_STRING \
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: PUSH
49483: LD_STRING E
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_VAR 0 3
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PPUSH
49519: CALL_OW 447
// end ;
49523: LD_VAR 0 2
49527: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49528: LD_INT 0
49530: PPUSH
49531: PPUSH
49532: PPUSH
// tmp := [ ] ;
49533: LD_ADDR_VAR 0 5
49537: PUSH
49538: EMPTY
49539: ST_TO_ADDR
// for i in units do
49540: LD_ADDR_VAR 0 4
49544: PUSH
49545: LD_VAR 0 1
49549: PUSH
49550: FOR_IN
49551: IFFALSE 49589
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49553: LD_ADDR_VAR 0 5
49557: PUSH
49558: LD_VAR 0 5
49562: PPUSH
49563: LD_VAR 0 5
49567: PUSH
49568: LD_INT 1
49570: PLUS
49571: PPUSH
49572: LD_VAR 0 4
49576: PPUSH
49577: CALL_OW 256
49581: PPUSH
49582: CALL_OW 2
49586: ST_TO_ADDR
49587: GO 49550
49589: POP
49590: POP
// if not tmp then
49591: LD_VAR 0 5
49595: NOT
49596: IFFALSE 49600
// exit ;
49598: GO 49648
// if asc then
49600: LD_VAR 0 2
49604: IFFALSE 49628
// result := SortListByListAsc ( units , tmp ) else
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: LD_VAR 0 5
49620: PPUSH
49621: CALL_OW 76
49625: ST_TO_ADDR
49626: GO 49648
// result := SortListByListDesc ( units , tmp ) ;
49628: LD_ADDR_VAR 0 3
49632: PUSH
49633: LD_VAR 0 1
49637: PPUSH
49638: LD_VAR 0 5
49642: PPUSH
49643: CALL_OW 77
49647: ST_TO_ADDR
// end ;
49648: LD_VAR 0 3
49652: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49653: LD_INT 0
49655: PPUSH
49656: PPUSH
// task := GetTaskList ( mech ) ;
49657: LD_ADDR_VAR 0 4
49661: PUSH
49662: LD_VAR 0 1
49666: PPUSH
49667: CALL_OW 437
49671: ST_TO_ADDR
// if not task then
49672: LD_VAR 0 4
49676: NOT
49677: IFFALSE 49681
// exit ;
49679: GO 49723
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49681: LD_ADDR_VAR 0 3
49685: PUSH
49686: LD_VAR 0 4
49690: PUSH
49691: LD_INT 1
49693: ARRAY
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: PUSH
49699: LD_STRING r
49701: EQUAL
49702: PUSH
49703: LD_VAR 0 4
49707: PUSH
49708: LD_INT 1
49710: ARRAY
49711: PUSH
49712: LD_INT 4
49714: ARRAY
49715: PUSH
49716: LD_VAR 0 2
49720: EQUAL
49721: AND
49722: ST_TO_ADDR
// end ;
49723: LD_VAR 0 3
49727: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49728: LD_INT 0
49730: PPUSH
// SetDir ( unit , d ) ;
49731: LD_VAR 0 1
49735: PPUSH
49736: LD_VAR 0 4
49740: PPUSH
49741: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49745: LD_VAR 0 1
49749: PPUSH
49750: LD_VAR 0 2
49754: PPUSH
49755: LD_VAR 0 3
49759: PPUSH
49760: LD_VAR 0 5
49764: PPUSH
49765: CALL_OW 48
// end ;
49769: LD_VAR 0 6
49773: RET
// export function ToNaturalNumber ( number ) ; begin
49774: LD_INT 0
49776: PPUSH
// result := number div 1 ;
49777: LD_ADDR_VAR 0 2
49781: PUSH
49782: LD_VAR 0 1
49786: PUSH
49787: LD_INT 1
49789: DIV
49790: ST_TO_ADDR
// if number < 0 then
49791: LD_VAR 0 1
49795: PUSH
49796: LD_INT 0
49798: LESS
49799: IFFALSE 49809
// result := 0 ;
49801: LD_ADDR_VAR 0 2
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// end ;
49809: LD_VAR 0 2
49813: RET
// export function SortByClass ( units , class ) ; var un ; begin
49814: LD_INT 0
49816: PPUSH
49817: PPUSH
// if not units or not class then
49818: LD_VAR 0 1
49822: NOT
49823: PUSH
49824: LD_VAR 0 2
49828: NOT
49829: OR
49830: IFFALSE 49834
// exit ;
49832: GO 49929
// result := [ ] ;
49834: LD_ADDR_VAR 0 3
49838: PUSH
49839: EMPTY
49840: ST_TO_ADDR
// for un in units do
49841: LD_ADDR_VAR 0 4
49845: PUSH
49846: LD_VAR 0 1
49850: PUSH
49851: FOR_IN
49852: IFFALSE 49927
// if GetClass ( un ) = class then
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 257
49863: PUSH
49864: LD_VAR 0 2
49868: EQUAL
49869: IFFALSE 49896
// result := Insert ( result , 1 , un ) else
49871: LD_ADDR_VAR 0 3
49875: PUSH
49876: LD_VAR 0 3
49880: PPUSH
49881: LD_INT 1
49883: PPUSH
49884: LD_VAR 0 4
49888: PPUSH
49889: CALL_OW 2
49893: ST_TO_ADDR
49894: GO 49925
// result := Replace ( result , result + 1 , un ) ;
49896: LD_ADDR_VAR 0 3
49900: PUSH
49901: LD_VAR 0 3
49905: PPUSH
49906: LD_VAR 0 3
49910: PUSH
49911: LD_INT 1
49913: PLUS
49914: PPUSH
49915: LD_VAR 0 4
49919: PPUSH
49920: CALL_OW 1
49924: ST_TO_ADDR
49925: GO 49851
49927: POP
49928: POP
// end ;
49929: LD_VAR 0 3
49933: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49934: LD_INT 0
49936: PPUSH
49937: PPUSH
49938: PPUSH
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
// result := [ ] ;
49943: LD_ADDR_VAR 0 4
49947: PUSH
49948: EMPTY
49949: ST_TO_ADDR
// if x - r < 0 then
49950: LD_VAR 0 1
49954: PUSH
49955: LD_VAR 0 3
49959: MINUS
49960: PUSH
49961: LD_INT 0
49963: LESS
49964: IFFALSE 49976
// min_x := 0 else
49966: LD_ADDR_VAR 0 8
49970: PUSH
49971: LD_INT 0
49973: ST_TO_ADDR
49974: GO 49992
// min_x := x - r ;
49976: LD_ADDR_VAR 0 8
49980: PUSH
49981: LD_VAR 0 1
49985: PUSH
49986: LD_VAR 0 3
49990: MINUS
49991: ST_TO_ADDR
// if y - r < 0 then
49992: LD_VAR 0 2
49996: PUSH
49997: LD_VAR 0 3
50001: MINUS
50002: PUSH
50003: LD_INT 0
50005: LESS
50006: IFFALSE 50018
// min_y := 0 else
50008: LD_ADDR_VAR 0 7
50012: PUSH
50013: LD_INT 0
50015: ST_TO_ADDR
50016: GO 50034
// min_y := y - r ;
50018: LD_ADDR_VAR 0 7
50022: PUSH
50023: LD_VAR 0 2
50027: PUSH
50028: LD_VAR 0 3
50032: MINUS
50033: ST_TO_ADDR
// max_x := x + r ;
50034: LD_ADDR_VAR 0 9
50038: PUSH
50039: LD_VAR 0 1
50043: PUSH
50044: LD_VAR 0 3
50048: PLUS
50049: ST_TO_ADDR
// max_y := y + r ;
50050: LD_ADDR_VAR 0 10
50054: PUSH
50055: LD_VAR 0 2
50059: PUSH
50060: LD_VAR 0 3
50064: PLUS
50065: ST_TO_ADDR
// for _x = min_x to max_x do
50066: LD_ADDR_VAR 0 5
50070: PUSH
50071: DOUBLE
50072: LD_VAR 0 8
50076: DEC
50077: ST_TO_ADDR
50078: LD_VAR 0 9
50082: PUSH
50083: FOR_TO
50084: IFFALSE 50185
// for _y = min_y to max_y do
50086: LD_ADDR_VAR 0 6
50090: PUSH
50091: DOUBLE
50092: LD_VAR 0 7
50096: DEC
50097: ST_TO_ADDR
50098: LD_VAR 0 10
50102: PUSH
50103: FOR_TO
50104: IFFALSE 50181
// begin if not ValidHex ( _x , _y ) then
50106: LD_VAR 0 5
50110: PPUSH
50111: LD_VAR 0 6
50115: PPUSH
50116: CALL_OW 488
50120: NOT
50121: IFFALSE 50125
// continue ;
50123: GO 50103
// if GetResourceTypeXY ( _x , _y ) then
50125: LD_VAR 0 5
50129: PPUSH
50130: LD_VAR 0 6
50134: PPUSH
50135: CALL_OW 283
50139: IFFALSE 50179
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50141: LD_ADDR_VAR 0 4
50145: PUSH
50146: LD_VAR 0 4
50150: PPUSH
50151: LD_VAR 0 4
50155: PUSH
50156: LD_INT 1
50158: PLUS
50159: PPUSH
50160: LD_VAR 0 5
50164: PUSH
50165: LD_VAR 0 6
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PPUSH
50174: CALL_OW 1
50178: ST_TO_ADDR
// end ;
50179: GO 50103
50181: POP
50182: POP
50183: GO 50083
50185: POP
50186: POP
// end ;
50187: LD_VAR 0 4
50191: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50192: LD_INT 0
50194: PPUSH
50195: PPUSH
50196: PPUSH
50197: PPUSH
50198: PPUSH
50199: PPUSH
50200: PPUSH
50201: PPUSH
// if not units then
50202: LD_VAR 0 1
50206: NOT
50207: IFFALSE 50211
// exit ;
50209: GO 50722
// result := UnitFilter ( units , [ f_ok ] ) ;
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: LD_INT 50
50223: PUSH
50224: EMPTY
50225: LIST
50226: PPUSH
50227: CALL_OW 72
50231: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50232: LD_ADDR_VAR 0 8
50236: PUSH
50237: LD_VAR 0 1
50241: PUSH
50242: LD_INT 1
50244: ARRAY
50245: PPUSH
50246: CALL_OW 255
50250: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50251: LD_ADDR_VAR 0 10
50255: PUSH
50256: LD_INT 29
50258: PUSH
50259: LD_EXP 96
50263: PUSH
50264: LD_INT 49
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: ST_TO_ADDR
// if not result then
50272: LD_VAR 0 3
50276: NOT
50277: IFFALSE 50281
// exit ;
50279: GO 50722
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50281: LD_ADDR_VAR 0 5
50285: PUSH
50286: LD_INT 81
50288: PUSH
50289: LD_VAR 0 8
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PPUSH
50298: CALL_OW 69
50302: ST_TO_ADDR
// for i in result do
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_VAR 0 3
50312: PUSH
50313: FOR_IN
50314: IFFALSE 50720
// begin tag := GetTag ( i ) + 1 ;
50316: LD_ADDR_VAR 0 9
50320: PUSH
50321: LD_VAR 0 4
50325: PPUSH
50326: CALL_OW 110
50330: PUSH
50331: LD_INT 1
50333: PLUS
50334: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
50335: LD_ADDR_VAR 0 7
50339: PUSH
50340: LD_VAR 0 4
50344: PPUSH
50345: CALL_OW 250
50349: PPUSH
50350: LD_VAR 0 4
50354: PPUSH
50355: CALL_OW 251
50359: PPUSH
50360: LD_INT 6
50362: PPUSH
50363: CALL 49934 0 3
50367: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
50368: LD_VAR 0 7
50372: PUSH
50373: LD_VAR 0 4
50377: PPUSH
50378: CALL_OW 264
50382: PUSH
50383: LD_VAR 0 10
50387: IN
50388: NOT
50389: AND
50390: IFFALSE 50429
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50392: LD_VAR 0 4
50396: PPUSH
50397: LD_VAR 0 7
50401: PUSH
50402: LD_INT 1
50404: ARRAY
50405: PUSH
50406: LD_INT 1
50408: ARRAY
50409: PPUSH
50410: LD_VAR 0 7
50414: PUSH
50415: LD_INT 1
50417: ARRAY
50418: PUSH
50419: LD_INT 2
50421: ARRAY
50422: PPUSH
50423: CALL_OW 116
50427: GO 50718
// if path > tag then
50429: LD_VAR 0 2
50433: PUSH
50434: LD_VAR 0 9
50438: GREATER
50439: IFFALSE 50647
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
50441: LD_ADDR_VAR 0 6
50445: PUSH
50446: LD_VAR 0 5
50450: PPUSH
50451: LD_INT 91
50453: PUSH
50454: LD_VAR 0 4
50458: PUSH
50459: LD_INT 12
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: PPUSH
50467: CALL_OW 72
50471: ST_TO_ADDR
// if nearEnemy then
50472: LD_VAR 0 6
50476: IFFALSE 50545
// begin if GetWeapon ( i ) = ru_time_lapser then
50478: LD_VAR 0 4
50482: PPUSH
50483: CALL_OW 264
50487: PUSH
50488: LD_INT 49
50490: EQUAL
50491: IFFALSE 50519
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50493: LD_VAR 0 4
50497: PPUSH
50498: LD_VAR 0 6
50502: PPUSH
50503: LD_VAR 0 4
50507: PPUSH
50508: CALL_OW 74
50512: PPUSH
50513: CALL_OW 112
50517: GO 50543
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50519: LD_VAR 0 4
50523: PPUSH
50524: LD_VAR 0 6
50528: PPUSH
50529: LD_VAR 0 4
50533: PPUSH
50534: CALL_OW 74
50538: PPUSH
50539: CALL_OW 115
// end else
50543: GO 50645
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50545: LD_VAR 0 4
50549: PPUSH
50550: LD_VAR 0 2
50554: PUSH
50555: LD_VAR 0 9
50559: ARRAY
50560: PUSH
50561: LD_INT 1
50563: ARRAY
50564: PPUSH
50565: LD_VAR 0 2
50569: PUSH
50570: LD_VAR 0 9
50574: ARRAY
50575: PUSH
50576: LD_INT 2
50578: ARRAY
50579: PPUSH
50580: CALL_OW 297
50584: PUSH
50585: LD_INT 6
50587: GREATER
50588: IFFALSE 50631
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50590: LD_VAR 0 4
50594: PPUSH
50595: LD_VAR 0 2
50599: PUSH
50600: LD_VAR 0 9
50604: ARRAY
50605: PUSH
50606: LD_INT 1
50608: ARRAY
50609: PPUSH
50610: LD_VAR 0 2
50614: PUSH
50615: LD_VAR 0 9
50619: ARRAY
50620: PUSH
50621: LD_INT 2
50623: ARRAY
50624: PPUSH
50625: CALL_OW 114
50629: GO 50645
// SetTag ( i , tag ) ;
50631: LD_VAR 0 4
50635: PPUSH
50636: LD_VAR 0 9
50640: PPUSH
50641: CALL_OW 109
// end else
50645: GO 50718
// if enemy then
50647: LD_VAR 0 5
50651: IFFALSE 50718
// begin if GetWeapon ( i ) = ru_time_lapser then
50653: LD_VAR 0 4
50657: PPUSH
50658: CALL_OW 264
50662: PUSH
50663: LD_INT 49
50665: EQUAL
50666: IFFALSE 50694
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50668: LD_VAR 0 4
50672: PPUSH
50673: LD_VAR 0 5
50677: PPUSH
50678: LD_VAR 0 4
50682: PPUSH
50683: CALL_OW 74
50687: PPUSH
50688: CALL_OW 112
50692: GO 50718
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50694: LD_VAR 0 4
50698: PPUSH
50699: LD_VAR 0 5
50703: PPUSH
50704: LD_VAR 0 4
50708: PPUSH
50709: CALL_OW 74
50713: PPUSH
50714: CALL_OW 115
// end ; end ;
50718: GO 50313
50720: POP
50721: POP
// end ;
50722: LD_VAR 0 3
50726: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50727: LD_INT 0
50729: PPUSH
50730: PPUSH
50731: PPUSH
// if not unit or IsInUnit ( unit ) then
50732: LD_VAR 0 1
50736: NOT
50737: PUSH
50738: LD_VAR 0 1
50742: PPUSH
50743: CALL_OW 310
50747: OR
50748: IFFALSE 50752
// exit ;
50750: GO 50843
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50752: LD_ADDR_VAR 0 4
50756: PUSH
50757: LD_VAR 0 1
50761: PPUSH
50762: CALL_OW 250
50766: PPUSH
50767: LD_VAR 0 2
50771: PPUSH
50772: LD_INT 1
50774: PPUSH
50775: CALL_OW 272
50779: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50780: LD_ADDR_VAR 0 5
50784: PUSH
50785: LD_VAR 0 1
50789: PPUSH
50790: CALL_OW 251
50794: PPUSH
50795: LD_VAR 0 2
50799: PPUSH
50800: LD_INT 1
50802: PPUSH
50803: CALL_OW 273
50807: ST_TO_ADDR
// if ValidHex ( x , y ) then
50808: LD_VAR 0 4
50812: PPUSH
50813: LD_VAR 0 5
50817: PPUSH
50818: CALL_OW 488
50822: IFFALSE 50843
// ComTurnXY ( unit , x , y ) ;
50824: LD_VAR 0 1
50828: PPUSH
50829: LD_VAR 0 4
50833: PPUSH
50834: LD_VAR 0 5
50838: PPUSH
50839: CALL_OW 118
// end ;
50843: LD_VAR 0 3
50847: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50848: LD_INT 0
50850: PPUSH
50851: PPUSH
// result := false ;
50852: LD_ADDR_VAR 0 3
50856: PUSH
50857: LD_INT 0
50859: ST_TO_ADDR
// if not units then
50860: LD_VAR 0 2
50864: NOT
50865: IFFALSE 50869
// exit ;
50867: GO 50914
// for i in units do
50869: LD_ADDR_VAR 0 4
50873: PUSH
50874: LD_VAR 0 2
50878: PUSH
50879: FOR_IN
50880: IFFALSE 50912
// if See ( side , i ) then
50882: LD_VAR 0 1
50886: PPUSH
50887: LD_VAR 0 4
50891: PPUSH
50892: CALL_OW 292
50896: IFFALSE 50910
// begin result := true ;
50898: LD_ADDR_VAR 0 3
50902: PUSH
50903: LD_INT 1
50905: ST_TO_ADDR
// exit ;
50906: POP
50907: POP
50908: GO 50914
// end ;
50910: GO 50879
50912: POP
50913: POP
// end ;
50914: LD_VAR 0 3
50918: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50919: LD_INT 0
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
// if not unit or not points then
50925: LD_VAR 0 1
50929: NOT
50930: PUSH
50931: LD_VAR 0 2
50935: NOT
50936: OR
50937: IFFALSE 50941
// exit ;
50939: GO 51031
// dist := 99999 ;
50941: LD_ADDR_VAR 0 5
50945: PUSH
50946: LD_INT 99999
50948: ST_TO_ADDR
// for i in points do
50949: LD_ADDR_VAR 0 4
50953: PUSH
50954: LD_VAR 0 2
50958: PUSH
50959: FOR_IN
50960: IFFALSE 51029
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50962: LD_ADDR_VAR 0 6
50966: PUSH
50967: LD_VAR 0 1
50971: PPUSH
50972: LD_VAR 0 4
50976: PUSH
50977: LD_INT 1
50979: ARRAY
50980: PPUSH
50981: LD_VAR 0 4
50985: PUSH
50986: LD_INT 2
50988: ARRAY
50989: PPUSH
50990: CALL_OW 297
50994: ST_TO_ADDR
// if tmpDist < dist then
50995: LD_VAR 0 6
50999: PUSH
51000: LD_VAR 0 5
51004: LESS
51005: IFFALSE 51027
// begin result := i ;
51007: LD_ADDR_VAR 0 3
51011: PUSH
51012: LD_VAR 0 4
51016: ST_TO_ADDR
// dist := tmpDist ;
51017: LD_ADDR_VAR 0 5
51021: PUSH
51022: LD_VAR 0 6
51026: ST_TO_ADDR
// end ; end ;
51027: GO 50959
51029: POP
51030: POP
// end ;
51031: LD_VAR 0 3
51035: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51036: LD_INT 0
51038: PPUSH
// uc_side := side ;
51039: LD_ADDR_OWVAR 20
51043: PUSH
51044: LD_VAR 0 1
51048: ST_TO_ADDR
// uc_nation := 3 ;
51049: LD_ADDR_OWVAR 21
51053: PUSH
51054: LD_INT 3
51056: ST_TO_ADDR
// vc_chassis := 25 ;
51057: LD_ADDR_OWVAR 37
51061: PUSH
51062: LD_INT 25
51064: ST_TO_ADDR
// vc_engine := engine_siberite ;
51065: LD_ADDR_OWVAR 39
51069: PUSH
51070: LD_INT 3
51072: ST_TO_ADDR
// vc_control := control_computer ;
51073: LD_ADDR_OWVAR 38
51077: PUSH
51078: LD_INT 3
51080: ST_TO_ADDR
// vc_weapon := 59 ;
51081: LD_ADDR_OWVAR 40
51085: PUSH
51086: LD_INT 59
51088: ST_TO_ADDR
// result := CreateVehicle ;
51089: LD_ADDR_VAR 0 5
51093: PUSH
51094: CALL_OW 45
51098: ST_TO_ADDR
// SetDir ( result , d ) ;
51099: LD_VAR 0 5
51103: PPUSH
51104: LD_VAR 0 4
51108: PPUSH
51109: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51113: LD_VAR 0 5
51117: PPUSH
51118: LD_VAR 0 2
51122: PPUSH
51123: LD_VAR 0 3
51127: PPUSH
51128: LD_INT 0
51130: PPUSH
51131: CALL_OW 48
// end ;
51135: LD_VAR 0 5
51139: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51140: LD_INT 0
51142: PPUSH
51143: PPUSH
51144: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51145: LD_ADDR_VAR 0 2
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51168: LD_VAR 0 1
51172: NOT
51173: PUSH
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 264
51183: PUSH
51184: LD_INT 12
51186: PUSH
51187: LD_INT 51
51189: PUSH
51190: LD_INT 32
51192: PUSH
51193: LD_EXP 93
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: IN
51204: NOT
51205: OR
51206: IFFALSE 51210
// exit ;
51208: GO 51308
// for i := 1 to 3 do
51210: LD_ADDR_VAR 0 3
51214: PUSH
51215: DOUBLE
51216: LD_INT 1
51218: DEC
51219: ST_TO_ADDR
51220: LD_INT 3
51222: PUSH
51223: FOR_TO
51224: IFFALSE 51306
// begin tmp := GetCargo ( cargo , i ) ;
51226: LD_ADDR_VAR 0 4
51230: PUSH
51231: LD_VAR 0 1
51235: PPUSH
51236: LD_VAR 0 3
51240: PPUSH
51241: CALL_OW 289
51245: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51246: LD_ADDR_VAR 0 2
51250: PUSH
51251: LD_VAR 0 2
51255: PPUSH
51256: LD_VAR 0 3
51260: PPUSH
51261: LD_VAR 0 4
51265: PPUSH
51266: CALL_OW 1
51270: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51271: LD_ADDR_VAR 0 2
51275: PUSH
51276: LD_VAR 0 2
51280: PPUSH
51281: LD_INT 4
51283: PPUSH
51284: LD_VAR 0 2
51288: PUSH
51289: LD_INT 4
51291: ARRAY
51292: PUSH
51293: LD_VAR 0 4
51297: PLUS
51298: PPUSH
51299: CALL_OW 1
51303: ST_TO_ADDR
// end ;
51304: GO 51223
51306: POP
51307: POP
// end ;
51308: LD_VAR 0 2
51312: RET
// export function Length ( array ) ; begin
51313: LD_INT 0
51315: PPUSH
// result := array + 0 ;
51316: LD_ADDR_VAR 0 2
51320: PUSH
51321: LD_VAR 0 1
51325: PUSH
51326: LD_INT 0
51328: PLUS
51329: ST_TO_ADDR
// end ;
51330: LD_VAR 0 2
51334: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
51335: LD_INT 0
51337: PPUSH
// uc_side := side ;
51338: LD_ADDR_OWVAR 20
51342: PUSH
51343: LD_VAR 0 1
51347: ST_TO_ADDR
// uc_nation := nation ;
51348: LD_ADDR_OWVAR 21
51352: PUSH
51353: LD_VAR 0 2
51357: ST_TO_ADDR
// bc_level := level ;
51358: LD_ADDR_OWVAR 43
51362: PUSH
51363: LD_VAR 0 3
51367: ST_TO_ADDR
// bc_type := typ ;
51368: LD_ADDR_OWVAR 42
51372: PUSH
51373: LD_VAR 0 4
51377: ST_TO_ADDR
// bc_kind1 := - 1 ;
51378: LD_ADDR_OWVAR 44
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: ST_TO_ADDR
// bc_kind2 := - 1 ;
51387: LD_ADDR_OWVAR 45
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
51396: LD_ADDR_VAR 0 9
51400: PUSH
51401: LD_VAR 0 5
51405: PPUSH
51406: LD_VAR 0 6
51410: PPUSH
51411: LD_VAR 0 7
51415: PPUSH
51416: CALL_OW 47
51420: ST_TO_ADDR
// if isInBuildingStage then
51421: LD_VAR 0 8
51425: IFFALSE 51436
// SetBuildingStage ( result ) ;
51427: LD_VAR 0 9
51431: PPUSH
51432: CALL_OW 593
// end ;
51436: LD_VAR 0 9
51440: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
51441: LD_INT 0
51443: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
51444: LD_VAR 0 1
51448: PPUSH
51449: LD_VAR 0 2
51453: PPUSH
51454: LD_INT 0
51456: PPUSH
51457: LD_INT 1
51459: PPUSH
51460: LD_INT 1
51462: PPUSH
51463: LD_INT 0
51465: PPUSH
51466: CALL_OW 587
// end ; end_of_file
51470: LD_VAR 0 3
51474: RET
// every 0 0$1 do
51475: GO 51477
51477: DISABLE
// begin enable ;
51478: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51479: LD_STRING updateTimer(
51481: PUSH
51482: LD_OWVAR 1
51486: STR
51487: PUSH
51488: LD_STRING );
51490: STR
51491: PPUSH
51492: CALL_OW 559
// end ;
51496: END
// export function SOS_MapStart ( ) ; begin
51497: LD_INT 0
51499: PPUSH
// if streamModeActive then
51500: LD_EXP 112
51504: IFFALSE 51513
// DefineStreamItems ( true ) ;
51506: LD_INT 1
51508: PPUSH
51509: CALL 53163 0 1
// UpdateFactoryWaypoints ( ) ;
51513: CALL 66747 0 0
// end ;
51517: LD_VAR 0 1
51521: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51522: LD_INT 0
51524: PPUSH
// if p2 = 100 then
51525: LD_VAR 0 2
51529: PUSH
51530: LD_INT 100
51532: EQUAL
51533: IFFALSE 52536
// begin if not StreamModeActive then
51535: LD_EXP 112
51539: NOT
51540: IFFALSE 51550
// StreamModeActive := true ;
51542: LD_ADDR_EXP 112
51546: PUSH
51547: LD_INT 1
51549: ST_TO_ADDR
// if p3 = 0 then
51550: LD_VAR 0 3
51554: PUSH
51555: LD_INT 0
51557: EQUAL
51558: IFFALSE 51564
// InitStreamMode ;
51560: CALL 52699 0 0
// if p3 = 1 then
51564: LD_VAR 0 3
51568: PUSH
51569: LD_INT 1
51571: EQUAL
51572: IFFALSE 51582
// sRocket := true ;
51574: LD_ADDR_EXP 117
51578: PUSH
51579: LD_INT 1
51581: ST_TO_ADDR
// if p3 = 2 then
51582: LD_VAR 0 3
51586: PUSH
51587: LD_INT 2
51589: EQUAL
51590: IFFALSE 51600
// sSpeed := true ;
51592: LD_ADDR_EXP 116
51596: PUSH
51597: LD_INT 1
51599: ST_TO_ADDR
// if p3 = 3 then
51600: LD_VAR 0 3
51604: PUSH
51605: LD_INT 3
51607: EQUAL
51608: IFFALSE 51618
// sEngine := true ;
51610: LD_ADDR_EXP 118
51614: PUSH
51615: LD_INT 1
51617: ST_TO_ADDR
// if p3 = 4 then
51618: LD_VAR 0 3
51622: PUSH
51623: LD_INT 4
51625: EQUAL
51626: IFFALSE 51636
// sSpec := true ;
51628: LD_ADDR_EXP 115
51632: PUSH
51633: LD_INT 1
51635: ST_TO_ADDR
// if p3 = 5 then
51636: LD_VAR 0 3
51640: PUSH
51641: LD_INT 5
51643: EQUAL
51644: IFFALSE 51654
// sLevel := true ;
51646: LD_ADDR_EXP 119
51650: PUSH
51651: LD_INT 1
51653: ST_TO_ADDR
// if p3 = 6 then
51654: LD_VAR 0 3
51658: PUSH
51659: LD_INT 6
51661: EQUAL
51662: IFFALSE 51672
// sArmoury := true ;
51664: LD_ADDR_EXP 120
51668: PUSH
51669: LD_INT 1
51671: ST_TO_ADDR
// if p3 = 7 then
51672: LD_VAR 0 3
51676: PUSH
51677: LD_INT 7
51679: EQUAL
51680: IFFALSE 51690
// sRadar := true ;
51682: LD_ADDR_EXP 121
51686: PUSH
51687: LD_INT 1
51689: ST_TO_ADDR
// if p3 = 8 then
51690: LD_VAR 0 3
51694: PUSH
51695: LD_INT 8
51697: EQUAL
51698: IFFALSE 51708
// sBunker := true ;
51700: LD_ADDR_EXP 122
51704: PUSH
51705: LD_INT 1
51707: ST_TO_ADDR
// if p3 = 9 then
51708: LD_VAR 0 3
51712: PUSH
51713: LD_INT 9
51715: EQUAL
51716: IFFALSE 51726
// sHack := true ;
51718: LD_ADDR_EXP 123
51722: PUSH
51723: LD_INT 1
51725: ST_TO_ADDR
// if p3 = 10 then
51726: LD_VAR 0 3
51730: PUSH
51731: LD_INT 10
51733: EQUAL
51734: IFFALSE 51744
// sFire := true ;
51736: LD_ADDR_EXP 124
51740: PUSH
51741: LD_INT 1
51743: ST_TO_ADDR
// if p3 = 11 then
51744: LD_VAR 0 3
51748: PUSH
51749: LD_INT 11
51751: EQUAL
51752: IFFALSE 51762
// sRefresh := true ;
51754: LD_ADDR_EXP 125
51758: PUSH
51759: LD_INT 1
51761: ST_TO_ADDR
// if p3 = 12 then
51762: LD_VAR 0 3
51766: PUSH
51767: LD_INT 12
51769: EQUAL
51770: IFFALSE 51780
// sExp := true ;
51772: LD_ADDR_EXP 126
51776: PUSH
51777: LD_INT 1
51779: ST_TO_ADDR
// if p3 = 13 then
51780: LD_VAR 0 3
51784: PUSH
51785: LD_INT 13
51787: EQUAL
51788: IFFALSE 51798
// sDepot := true ;
51790: LD_ADDR_EXP 127
51794: PUSH
51795: LD_INT 1
51797: ST_TO_ADDR
// if p3 = 14 then
51798: LD_VAR 0 3
51802: PUSH
51803: LD_INT 14
51805: EQUAL
51806: IFFALSE 51816
// sFlag := true ;
51808: LD_ADDR_EXP 128
51812: PUSH
51813: LD_INT 1
51815: ST_TO_ADDR
// if p3 = 15 then
51816: LD_VAR 0 3
51820: PUSH
51821: LD_INT 15
51823: EQUAL
51824: IFFALSE 51834
// sKamikadze := true ;
51826: LD_ADDR_EXP 136
51830: PUSH
51831: LD_INT 1
51833: ST_TO_ADDR
// if p3 = 16 then
51834: LD_VAR 0 3
51838: PUSH
51839: LD_INT 16
51841: EQUAL
51842: IFFALSE 51852
// sTroll := true ;
51844: LD_ADDR_EXP 137
51848: PUSH
51849: LD_INT 1
51851: ST_TO_ADDR
// if p3 = 17 then
51852: LD_VAR 0 3
51856: PUSH
51857: LD_INT 17
51859: EQUAL
51860: IFFALSE 51870
// sSlow := true ;
51862: LD_ADDR_EXP 138
51866: PUSH
51867: LD_INT 1
51869: ST_TO_ADDR
// if p3 = 18 then
51870: LD_VAR 0 3
51874: PUSH
51875: LD_INT 18
51877: EQUAL
51878: IFFALSE 51888
// sLack := true ;
51880: LD_ADDR_EXP 139
51884: PUSH
51885: LD_INT 1
51887: ST_TO_ADDR
// if p3 = 19 then
51888: LD_VAR 0 3
51892: PUSH
51893: LD_INT 19
51895: EQUAL
51896: IFFALSE 51906
// sTank := true ;
51898: LD_ADDR_EXP 141
51902: PUSH
51903: LD_INT 1
51905: ST_TO_ADDR
// if p3 = 20 then
51906: LD_VAR 0 3
51910: PUSH
51911: LD_INT 20
51913: EQUAL
51914: IFFALSE 51924
// sRemote := true ;
51916: LD_ADDR_EXP 142
51920: PUSH
51921: LD_INT 1
51923: ST_TO_ADDR
// if p3 = 21 then
51924: LD_VAR 0 3
51928: PUSH
51929: LD_INT 21
51931: EQUAL
51932: IFFALSE 51942
// sPowell := true ;
51934: LD_ADDR_EXP 143
51938: PUSH
51939: LD_INT 1
51941: ST_TO_ADDR
// if p3 = 22 then
51942: LD_VAR 0 3
51946: PUSH
51947: LD_INT 22
51949: EQUAL
51950: IFFALSE 51960
// sTeleport := true ;
51952: LD_ADDR_EXP 146
51956: PUSH
51957: LD_INT 1
51959: ST_TO_ADDR
// if p3 = 23 then
51960: LD_VAR 0 3
51964: PUSH
51965: LD_INT 23
51967: EQUAL
51968: IFFALSE 51978
// sOilTower := true ;
51970: LD_ADDR_EXP 148
51974: PUSH
51975: LD_INT 1
51977: ST_TO_ADDR
// if p3 = 24 then
51978: LD_VAR 0 3
51982: PUSH
51983: LD_INT 24
51985: EQUAL
51986: IFFALSE 51996
// sShovel := true ;
51988: LD_ADDR_EXP 149
51992: PUSH
51993: LD_INT 1
51995: ST_TO_ADDR
// if p3 = 25 then
51996: LD_VAR 0 3
52000: PUSH
52001: LD_INT 25
52003: EQUAL
52004: IFFALSE 52014
// sSheik := true ;
52006: LD_ADDR_EXP 150
52010: PUSH
52011: LD_INT 1
52013: ST_TO_ADDR
// if p3 = 26 then
52014: LD_VAR 0 3
52018: PUSH
52019: LD_INT 26
52021: EQUAL
52022: IFFALSE 52032
// sEarthquake := true ;
52024: LD_ADDR_EXP 152
52028: PUSH
52029: LD_INT 1
52031: ST_TO_ADDR
// if p3 = 27 then
52032: LD_VAR 0 3
52036: PUSH
52037: LD_INT 27
52039: EQUAL
52040: IFFALSE 52050
// sAI := true ;
52042: LD_ADDR_EXP 153
52046: PUSH
52047: LD_INT 1
52049: ST_TO_ADDR
// if p3 = 28 then
52050: LD_VAR 0 3
52054: PUSH
52055: LD_INT 28
52057: EQUAL
52058: IFFALSE 52068
// sCargo := true ;
52060: LD_ADDR_EXP 156
52064: PUSH
52065: LD_INT 1
52067: ST_TO_ADDR
// if p3 = 29 then
52068: LD_VAR 0 3
52072: PUSH
52073: LD_INT 29
52075: EQUAL
52076: IFFALSE 52086
// sDLaser := true ;
52078: LD_ADDR_EXP 157
52082: PUSH
52083: LD_INT 1
52085: ST_TO_ADDR
// if p3 = 30 then
52086: LD_VAR 0 3
52090: PUSH
52091: LD_INT 30
52093: EQUAL
52094: IFFALSE 52104
// sExchange := true ;
52096: LD_ADDR_EXP 158
52100: PUSH
52101: LD_INT 1
52103: ST_TO_ADDR
// if p3 = 31 then
52104: LD_VAR 0 3
52108: PUSH
52109: LD_INT 31
52111: EQUAL
52112: IFFALSE 52122
// sFac := true ;
52114: LD_ADDR_EXP 159
52118: PUSH
52119: LD_INT 1
52121: ST_TO_ADDR
// if p3 = 32 then
52122: LD_VAR 0 3
52126: PUSH
52127: LD_INT 32
52129: EQUAL
52130: IFFALSE 52140
// sPower := true ;
52132: LD_ADDR_EXP 160
52136: PUSH
52137: LD_INT 1
52139: ST_TO_ADDR
// if p3 = 33 then
52140: LD_VAR 0 3
52144: PUSH
52145: LD_INT 33
52147: EQUAL
52148: IFFALSE 52158
// sRandom := true ;
52150: LD_ADDR_EXP 161
52154: PUSH
52155: LD_INT 1
52157: ST_TO_ADDR
// if p3 = 34 then
52158: LD_VAR 0 3
52162: PUSH
52163: LD_INT 34
52165: EQUAL
52166: IFFALSE 52176
// sShield := true ;
52168: LD_ADDR_EXP 162
52172: PUSH
52173: LD_INT 1
52175: ST_TO_ADDR
// if p3 = 35 then
52176: LD_VAR 0 3
52180: PUSH
52181: LD_INT 35
52183: EQUAL
52184: IFFALSE 52194
// sTime := true ;
52186: LD_ADDR_EXP 163
52190: PUSH
52191: LD_INT 1
52193: ST_TO_ADDR
// if p3 = 36 then
52194: LD_VAR 0 3
52198: PUSH
52199: LD_INT 36
52201: EQUAL
52202: IFFALSE 52212
// sTools := true ;
52204: LD_ADDR_EXP 164
52208: PUSH
52209: LD_INT 1
52211: ST_TO_ADDR
// if p3 = 101 then
52212: LD_VAR 0 3
52216: PUSH
52217: LD_INT 101
52219: EQUAL
52220: IFFALSE 52230
// sSold := true ;
52222: LD_ADDR_EXP 129
52226: PUSH
52227: LD_INT 1
52229: ST_TO_ADDR
// if p3 = 102 then
52230: LD_VAR 0 3
52234: PUSH
52235: LD_INT 102
52237: EQUAL
52238: IFFALSE 52248
// sDiff := true ;
52240: LD_ADDR_EXP 130
52244: PUSH
52245: LD_INT 1
52247: ST_TO_ADDR
// if p3 = 103 then
52248: LD_VAR 0 3
52252: PUSH
52253: LD_INT 103
52255: EQUAL
52256: IFFALSE 52266
// sFog := true ;
52258: LD_ADDR_EXP 133
52262: PUSH
52263: LD_INT 1
52265: ST_TO_ADDR
// if p3 = 104 then
52266: LD_VAR 0 3
52270: PUSH
52271: LD_INT 104
52273: EQUAL
52274: IFFALSE 52284
// sReset := true ;
52276: LD_ADDR_EXP 134
52280: PUSH
52281: LD_INT 1
52283: ST_TO_ADDR
// if p3 = 105 then
52284: LD_VAR 0 3
52288: PUSH
52289: LD_INT 105
52291: EQUAL
52292: IFFALSE 52302
// sSun := true ;
52294: LD_ADDR_EXP 135
52298: PUSH
52299: LD_INT 1
52301: ST_TO_ADDR
// if p3 = 106 then
52302: LD_VAR 0 3
52306: PUSH
52307: LD_INT 106
52309: EQUAL
52310: IFFALSE 52320
// sTiger := true ;
52312: LD_ADDR_EXP 131
52316: PUSH
52317: LD_INT 1
52319: ST_TO_ADDR
// if p3 = 107 then
52320: LD_VAR 0 3
52324: PUSH
52325: LD_INT 107
52327: EQUAL
52328: IFFALSE 52338
// sBomb := true ;
52330: LD_ADDR_EXP 132
52334: PUSH
52335: LD_INT 1
52337: ST_TO_ADDR
// if p3 = 108 then
52338: LD_VAR 0 3
52342: PUSH
52343: LD_INT 108
52345: EQUAL
52346: IFFALSE 52356
// sWound := true ;
52348: LD_ADDR_EXP 140
52352: PUSH
52353: LD_INT 1
52355: ST_TO_ADDR
// if p3 = 109 then
52356: LD_VAR 0 3
52360: PUSH
52361: LD_INT 109
52363: EQUAL
52364: IFFALSE 52374
// sBetray := true ;
52366: LD_ADDR_EXP 144
52370: PUSH
52371: LD_INT 1
52373: ST_TO_ADDR
// if p3 = 110 then
52374: LD_VAR 0 3
52378: PUSH
52379: LD_INT 110
52381: EQUAL
52382: IFFALSE 52392
// sContamin := true ;
52384: LD_ADDR_EXP 145
52388: PUSH
52389: LD_INT 1
52391: ST_TO_ADDR
// if p3 = 111 then
52392: LD_VAR 0 3
52396: PUSH
52397: LD_INT 111
52399: EQUAL
52400: IFFALSE 52410
// sOil := true ;
52402: LD_ADDR_EXP 147
52406: PUSH
52407: LD_INT 1
52409: ST_TO_ADDR
// if p3 = 112 then
52410: LD_VAR 0 3
52414: PUSH
52415: LD_INT 112
52417: EQUAL
52418: IFFALSE 52428
// sStu := true ;
52420: LD_ADDR_EXP 151
52424: PUSH
52425: LD_INT 1
52427: ST_TO_ADDR
// if p3 = 113 then
52428: LD_VAR 0 3
52432: PUSH
52433: LD_INT 113
52435: EQUAL
52436: IFFALSE 52446
// sBazooka := true ;
52438: LD_ADDR_EXP 154
52442: PUSH
52443: LD_INT 1
52445: ST_TO_ADDR
// if p3 = 114 then
52446: LD_VAR 0 3
52450: PUSH
52451: LD_INT 114
52453: EQUAL
52454: IFFALSE 52464
// sMortar := true ;
52456: LD_ADDR_EXP 155
52460: PUSH
52461: LD_INT 1
52463: ST_TO_ADDR
// if p3 = 115 then
52464: LD_VAR 0 3
52468: PUSH
52469: LD_INT 115
52471: EQUAL
52472: IFFALSE 52482
// sRanger := true ;
52474: LD_ADDR_EXP 165
52478: PUSH
52479: LD_INT 1
52481: ST_TO_ADDR
// if p3 = 116 then
52482: LD_VAR 0 3
52486: PUSH
52487: LD_INT 116
52489: EQUAL
52490: IFFALSE 52500
// sComputer := true ;
52492: LD_ADDR_EXP 166
52496: PUSH
52497: LD_INT 1
52499: ST_TO_ADDR
// if p3 = 117 then
52500: LD_VAR 0 3
52504: PUSH
52505: LD_INT 117
52507: EQUAL
52508: IFFALSE 52518
// s30 := true ;
52510: LD_ADDR_EXP 167
52514: PUSH
52515: LD_INT 1
52517: ST_TO_ADDR
// if p3 = 118 then
52518: LD_VAR 0 3
52522: PUSH
52523: LD_INT 118
52525: EQUAL
52526: IFFALSE 52536
// s60 := true ;
52528: LD_ADDR_EXP 168
52532: PUSH
52533: LD_INT 1
52535: ST_TO_ADDR
// end ; if p2 = 101 then
52536: LD_VAR 0 2
52540: PUSH
52541: LD_INT 101
52543: EQUAL
52544: IFFALSE 52672
// begin case p3 of 1 :
52546: LD_VAR 0 3
52550: PUSH
52551: LD_INT 1
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52559
52557: GO 52566
52559: POP
// hHackUnlimitedResources ; 2 :
52560: CALL 64770 0 0
52564: GO 52672
52566: LD_INT 2
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52574
52572: GO 52581
52574: POP
// hHackSetLevel10 ; 3 :
52575: CALL 64903 0 0
52579: GO 52672
52581: LD_INT 3
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52589
52587: GO 52596
52589: POP
// hHackSetLevel10YourUnits ; 4 :
52590: CALL 64988 0 0
52594: GO 52672
52596: LD_INT 4
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52604
52602: GO 52611
52604: POP
// hHackInvincible ; 5 :
52605: CALL 65436 0 0
52609: GO 52672
52611: LD_INT 5
52613: DOUBLE
52614: EQUAL
52615: IFTRUE 52619
52617: GO 52626
52619: POP
// hHackInvisible ; 6 :
52620: CALL 65547 0 0
52624: GO 52672
52626: LD_INT 6
52628: DOUBLE
52629: EQUAL
52630: IFTRUE 52634
52632: GO 52641
52634: POP
// hHackChangeYourSide ; 7 :
52635: CALL 65604 0 0
52639: GO 52672
52641: LD_INT 7
52643: DOUBLE
52644: EQUAL
52645: IFTRUE 52649
52647: GO 52656
52649: POP
// hHackChangeUnitSide ; 8 :
52650: CALL 65646 0 0
52654: GO 52672
52656: LD_INT 8
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52664
52662: GO 52671
52664: POP
// hHackFog ; end ;
52665: CALL 65747 0 0
52669: GO 52672
52671: POP
// end ; end ;
52672: LD_VAR 0 7
52676: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
52677: GO 52679
52679: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
52680: LD_STRING initStreamRollete();
52682: PPUSH
52683: CALL_OW 559
// InitStreamMode ;
52687: CALL 52699 0 0
// DefineStreamItems ( false ) ;
52691: LD_INT 0
52693: PPUSH
52694: CALL 53163 0 1
// end ;
52698: END
// function InitStreamMode ; begin
52699: LD_INT 0
52701: PPUSH
// streamModeActive := false ;
52702: LD_ADDR_EXP 112
52706: PUSH
52707: LD_INT 0
52709: ST_TO_ADDR
// normalCounter := 36 ;
52710: LD_ADDR_EXP 113
52714: PUSH
52715: LD_INT 36
52717: ST_TO_ADDR
// hardcoreCounter := 18 ;
52718: LD_ADDR_EXP 114
52722: PUSH
52723: LD_INT 18
52725: ST_TO_ADDR
// sRocket := false ;
52726: LD_ADDR_EXP 117
52730: PUSH
52731: LD_INT 0
52733: ST_TO_ADDR
// sSpeed := false ;
52734: LD_ADDR_EXP 116
52738: PUSH
52739: LD_INT 0
52741: ST_TO_ADDR
// sEngine := false ;
52742: LD_ADDR_EXP 118
52746: PUSH
52747: LD_INT 0
52749: ST_TO_ADDR
// sSpec := false ;
52750: LD_ADDR_EXP 115
52754: PUSH
52755: LD_INT 0
52757: ST_TO_ADDR
// sLevel := false ;
52758: LD_ADDR_EXP 119
52762: PUSH
52763: LD_INT 0
52765: ST_TO_ADDR
// sArmoury := false ;
52766: LD_ADDR_EXP 120
52770: PUSH
52771: LD_INT 0
52773: ST_TO_ADDR
// sRadar := false ;
52774: LD_ADDR_EXP 121
52778: PUSH
52779: LD_INT 0
52781: ST_TO_ADDR
// sBunker := false ;
52782: LD_ADDR_EXP 122
52786: PUSH
52787: LD_INT 0
52789: ST_TO_ADDR
// sHack := false ;
52790: LD_ADDR_EXP 123
52794: PUSH
52795: LD_INT 0
52797: ST_TO_ADDR
// sFire := false ;
52798: LD_ADDR_EXP 124
52802: PUSH
52803: LD_INT 0
52805: ST_TO_ADDR
// sRefresh := false ;
52806: LD_ADDR_EXP 125
52810: PUSH
52811: LD_INT 0
52813: ST_TO_ADDR
// sExp := false ;
52814: LD_ADDR_EXP 126
52818: PUSH
52819: LD_INT 0
52821: ST_TO_ADDR
// sDepot := false ;
52822: LD_ADDR_EXP 127
52826: PUSH
52827: LD_INT 0
52829: ST_TO_ADDR
// sFlag := false ;
52830: LD_ADDR_EXP 128
52834: PUSH
52835: LD_INT 0
52837: ST_TO_ADDR
// sKamikadze := false ;
52838: LD_ADDR_EXP 136
52842: PUSH
52843: LD_INT 0
52845: ST_TO_ADDR
// sTroll := false ;
52846: LD_ADDR_EXP 137
52850: PUSH
52851: LD_INT 0
52853: ST_TO_ADDR
// sSlow := false ;
52854: LD_ADDR_EXP 138
52858: PUSH
52859: LD_INT 0
52861: ST_TO_ADDR
// sLack := false ;
52862: LD_ADDR_EXP 139
52866: PUSH
52867: LD_INT 0
52869: ST_TO_ADDR
// sTank := false ;
52870: LD_ADDR_EXP 141
52874: PUSH
52875: LD_INT 0
52877: ST_TO_ADDR
// sRemote := false ;
52878: LD_ADDR_EXP 142
52882: PUSH
52883: LD_INT 0
52885: ST_TO_ADDR
// sPowell := false ;
52886: LD_ADDR_EXP 143
52890: PUSH
52891: LD_INT 0
52893: ST_TO_ADDR
// sTeleport := false ;
52894: LD_ADDR_EXP 146
52898: PUSH
52899: LD_INT 0
52901: ST_TO_ADDR
// sOilTower := false ;
52902: LD_ADDR_EXP 148
52906: PUSH
52907: LD_INT 0
52909: ST_TO_ADDR
// sShovel := false ;
52910: LD_ADDR_EXP 149
52914: PUSH
52915: LD_INT 0
52917: ST_TO_ADDR
// sSheik := false ;
52918: LD_ADDR_EXP 150
52922: PUSH
52923: LD_INT 0
52925: ST_TO_ADDR
// sEarthquake := false ;
52926: LD_ADDR_EXP 152
52930: PUSH
52931: LD_INT 0
52933: ST_TO_ADDR
// sAI := false ;
52934: LD_ADDR_EXP 153
52938: PUSH
52939: LD_INT 0
52941: ST_TO_ADDR
// sCargo := false ;
52942: LD_ADDR_EXP 156
52946: PUSH
52947: LD_INT 0
52949: ST_TO_ADDR
// sDLaser := false ;
52950: LD_ADDR_EXP 157
52954: PUSH
52955: LD_INT 0
52957: ST_TO_ADDR
// sExchange := false ;
52958: LD_ADDR_EXP 158
52962: PUSH
52963: LD_INT 0
52965: ST_TO_ADDR
// sFac := false ;
52966: LD_ADDR_EXP 159
52970: PUSH
52971: LD_INT 0
52973: ST_TO_ADDR
// sPower := false ;
52974: LD_ADDR_EXP 160
52978: PUSH
52979: LD_INT 0
52981: ST_TO_ADDR
// sRandom := false ;
52982: LD_ADDR_EXP 161
52986: PUSH
52987: LD_INT 0
52989: ST_TO_ADDR
// sShield := false ;
52990: LD_ADDR_EXP 162
52994: PUSH
52995: LD_INT 0
52997: ST_TO_ADDR
// sTime := false ;
52998: LD_ADDR_EXP 163
53002: PUSH
53003: LD_INT 0
53005: ST_TO_ADDR
// sTools := false ;
53006: LD_ADDR_EXP 164
53010: PUSH
53011: LD_INT 0
53013: ST_TO_ADDR
// sSold := false ;
53014: LD_ADDR_EXP 129
53018: PUSH
53019: LD_INT 0
53021: ST_TO_ADDR
// sDiff := false ;
53022: LD_ADDR_EXP 130
53026: PUSH
53027: LD_INT 0
53029: ST_TO_ADDR
// sFog := false ;
53030: LD_ADDR_EXP 133
53034: PUSH
53035: LD_INT 0
53037: ST_TO_ADDR
// sReset := false ;
53038: LD_ADDR_EXP 134
53042: PUSH
53043: LD_INT 0
53045: ST_TO_ADDR
// sSun := false ;
53046: LD_ADDR_EXP 135
53050: PUSH
53051: LD_INT 0
53053: ST_TO_ADDR
// sTiger := false ;
53054: LD_ADDR_EXP 131
53058: PUSH
53059: LD_INT 0
53061: ST_TO_ADDR
// sBomb := false ;
53062: LD_ADDR_EXP 132
53066: PUSH
53067: LD_INT 0
53069: ST_TO_ADDR
// sWound := false ;
53070: LD_ADDR_EXP 140
53074: PUSH
53075: LD_INT 0
53077: ST_TO_ADDR
// sBetray := false ;
53078: LD_ADDR_EXP 144
53082: PUSH
53083: LD_INT 0
53085: ST_TO_ADDR
// sContamin := false ;
53086: LD_ADDR_EXP 145
53090: PUSH
53091: LD_INT 0
53093: ST_TO_ADDR
// sOil := false ;
53094: LD_ADDR_EXP 147
53098: PUSH
53099: LD_INT 0
53101: ST_TO_ADDR
// sStu := false ;
53102: LD_ADDR_EXP 151
53106: PUSH
53107: LD_INT 0
53109: ST_TO_ADDR
// sBazooka := false ;
53110: LD_ADDR_EXP 154
53114: PUSH
53115: LD_INT 0
53117: ST_TO_ADDR
// sMortar := false ;
53118: LD_ADDR_EXP 155
53122: PUSH
53123: LD_INT 0
53125: ST_TO_ADDR
// sRanger := false ;
53126: LD_ADDR_EXP 165
53130: PUSH
53131: LD_INT 0
53133: ST_TO_ADDR
// sComputer := false ;
53134: LD_ADDR_EXP 166
53138: PUSH
53139: LD_INT 0
53141: ST_TO_ADDR
// s30 := false ;
53142: LD_ADDR_EXP 167
53146: PUSH
53147: LD_INT 0
53149: ST_TO_ADDR
// s60 := false ;
53150: LD_ADDR_EXP 168
53154: PUSH
53155: LD_INT 0
53157: ST_TO_ADDR
// end ;
53158: LD_VAR 0 1
53162: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53163: LD_INT 0
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
// result := [ ] ;
53172: LD_ADDR_VAR 0 2
53176: PUSH
53177: EMPTY
53178: ST_TO_ADDR
// if campaign_id = 1 then
53179: LD_OWVAR 69
53183: PUSH
53184: LD_INT 1
53186: EQUAL
53187: IFFALSE 56353
// begin case mission_number of 1 :
53189: LD_OWVAR 70
53193: PUSH
53194: LD_INT 1
53196: DOUBLE
53197: EQUAL
53198: IFTRUE 53202
53200: GO 53278
53202: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53203: LD_ADDR_VAR 0 2
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: LD_INT 11
53216: PUSH
53217: LD_INT 12
53219: PUSH
53220: LD_INT 15
53222: PUSH
53223: LD_INT 16
53225: PUSH
53226: LD_INT 22
53228: PUSH
53229: LD_INT 23
53231: PUSH
53232: LD_INT 26
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 101
53248: PUSH
53249: LD_INT 102
53251: PUSH
53252: LD_INT 106
53254: PUSH
53255: LD_INT 116
53257: PUSH
53258: LD_INT 117
53260: PUSH
53261: LD_INT 118
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: ST_TO_ADDR
53276: GO 56351
53278: LD_INT 2
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53370
53286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53287: LD_ADDR_VAR 0 2
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: LD_INT 11
53300: PUSH
53301: LD_INT 12
53303: PUSH
53304: LD_INT 15
53306: PUSH
53307: LD_INT 16
53309: PUSH
53310: LD_INT 22
53312: PUSH
53313: LD_INT 23
53315: PUSH
53316: LD_INT 26
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 101
53332: PUSH
53333: LD_INT 102
53335: PUSH
53336: LD_INT 105
53338: PUSH
53339: LD_INT 106
53341: PUSH
53342: LD_INT 108
53344: PUSH
53345: LD_INT 116
53347: PUSH
53348: LD_INT 117
53350: PUSH
53351: LD_INT 118
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: ST_TO_ADDR
53368: GO 56351
53370: LD_INT 3
53372: DOUBLE
53373: EQUAL
53374: IFTRUE 53378
53376: GO 53466
53378: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53379: LD_ADDR_VAR 0 2
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 4
53389: PUSH
53390: LD_INT 5
53392: PUSH
53393: LD_INT 11
53395: PUSH
53396: LD_INT 12
53398: PUSH
53399: LD_INT 15
53401: PUSH
53402: LD_INT 16
53404: PUSH
53405: LD_INT 22
53407: PUSH
53408: LD_INT 26
53410: PUSH
53411: LD_INT 36
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 101
53428: PUSH
53429: LD_INT 102
53431: PUSH
53432: LD_INT 105
53434: PUSH
53435: LD_INT 106
53437: PUSH
53438: LD_INT 108
53440: PUSH
53441: LD_INT 116
53443: PUSH
53444: LD_INT 117
53446: PUSH
53447: LD_INT 118
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: ST_TO_ADDR
53464: GO 56351
53466: LD_INT 4
53468: DOUBLE
53469: EQUAL
53470: IFTRUE 53474
53472: GO 53570
53474: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53475: LD_ADDR_VAR 0 2
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 4
53485: PUSH
53486: LD_INT 5
53488: PUSH
53489: LD_INT 8
53491: PUSH
53492: LD_INT 11
53494: PUSH
53495: LD_INT 12
53497: PUSH
53498: LD_INT 15
53500: PUSH
53501: LD_INT 16
53503: PUSH
53504: LD_INT 22
53506: PUSH
53507: LD_INT 23
53509: PUSH
53510: LD_INT 26
53512: PUSH
53513: LD_INT 36
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 101
53532: PUSH
53533: LD_INT 102
53535: PUSH
53536: LD_INT 105
53538: PUSH
53539: LD_INT 106
53541: PUSH
53542: LD_INT 108
53544: PUSH
53545: LD_INT 116
53547: PUSH
53548: LD_INT 117
53550: PUSH
53551: LD_INT 118
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: ST_TO_ADDR
53568: GO 56351
53570: LD_INT 5
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53578
53576: GO 53690
53578: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53579: LD_ADDR_VAR 0 2
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: LD_INT 5
53592: PUSH
53593: LD_INT 6
53595: PUSH
53596: LD_INT 8
53598: PUSH
53599: LD_INT 11
53601: PUSH
53602: LD_INT 12
53604: PUSH
53605: LD_INT 15
53607: PUSH
53608: LD_INT 16
53610: PUSH
53611: LD_INT 22
53613: PUSH
53614: LD_INT 23
53616: PUSH
53617: LD_INT 25
53619: PUSH
53620: LD_INT 26
53622: PUSH
53623: LD_INT 36
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 101
53644: PUSH
53645: LD_INT 102
53647: PUSH
53648: LD_INT 105
53650: PUSH
53651: LD_INT 106
53653: PUSH
53654: LD_INT 108
53656: PUSH
53657: LD_INT 109
53659: PUSH
53660: LD_INT 112
53662: PUSH
53663: LD_INT 116
53665: PUSH
53666: LD_INT 117
53668: PUSH
53669: LD_INT 118
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: ST_TO_ADDR
53688: GO 56351
53690: LD_INT 6
53692: DOUBLE
53693: EQUAL
53694: IFTRUE 53698
53696: GO 53830
53698: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 4
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: LD_INT 6
53715: PUSH
53716: LD_INT 8
53718: PUSH
53719: LD_INT 11
53721: PUSH
53722: LD_INT 12
53724: PUSH
53725: LD_INT 15
53727: PUSH
53728: LD_INT 16
53730: PUSH
53731: LD_INT 20
53733: PUSH
53734: LD_INT 21
53736: PUSH
53737: LD_INT 22
53739: PUSH
53740: LD_INT 23
53742: PUSH
53743: LD_INT 25
53745: PUSH
53746: LD_INT 26
53748: PUSH
53749: LD_INT 30
53751: PUSH
53752: LD_INT 31
53754: PUSH
53755: LD_INT 32
53757: PUSH
53758: LD_INT 36
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 101
53784: PUSH
53785: LD_INT 102
53787: PUSH
53788: LD_INT 105
53790: PUSH
53791: LD_INT 106
53793: PUSH
53794: LD_INT 108
53796: PUSH
53797: LD_INT 109
53799: PUSH
53800: LD_INT 112
53802: PUSH
53803: LD_INT 116
53805: PUSH
53806: LD_INT 117
53808: PUSH
53809: LD_INT 118
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: ST_TO_ADDR
53828: GO 56351
53830: LD_INT 7
53832: DOUBLE
53833: EQUAL
53834: IFTRUE 53838
53836: GO 53950
53838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53839: LD_ADDR_VAR 0 2
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: LD_INT 5
53852: PUSH
53853: LD_INT 7
53855: PUSH
53856: LD_INT 11
53858: PUSH
53859: LD_INT 12
53861: PUSH
53862: LD_INT 15
53864: PUSH
53865: LD_INT 16
53867: PUSH
53868: LD_INT 20
53870: PUSH
53871: LD_INT 21
53873: PUSH
53874: LD_INT 22
53876: PUSH
53877: LD_INT 23
53879: PUSH
53880: LD_INT 25
53882: PUSH
53883: LD_INT 26
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 101
53904: PUSH
53905: LD_INT 102
53907: PUSH
53908: LD_INT 103
53910: PUSH
53911: LD_INT 105
53913: PUSH
53914: LD_INT 106
53916: PUSH
53917: LD_INT 108
53919: PUSH
53920: LD_INT 112
53922: PUSH
53923: LD_INT 116
53925: PUSH
53926: LD_INT 117
53928: PUSH
53929: LD_INT 118
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: ST_TO_ADDR
53948: GO 56351
53950: LD_INT 8
53952: DOUBLE
53953: EQUAL
53954: IFTRUE 53958
53956: GO 54098
53958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53959: LD_ADDR_VAR 0 2
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: LD_INT 5
53972: PUSH
53973: LD_INT 6
53975: PUSH
53976: LD_INT 7
53978: PUSH
53979: LD_INT 8
53981: PUSH
53982: LD_INT 11
53984: PUSH
53985: LD_INT 12
53987: PUSH
53988: LD_INT 15
53990: PUSH
53991: LD_INT 16
53993: PUSH
53994: LD_INT 20
53996: PUSH
53997: LD_INT 21
53999: PUSH
54000: LD_INT 22
54002: PUSH
54003: LD_INT 23
54005: PUSH
54006: LD_INT 25
54008: PUSH
54009: LD_INT 26
54011: PUSH
54012: LD_INT 30
54014: PUSH
54015: LD_INT 31
54017: PUSH
54018: LD_INT 32
54020: PUSH
54021: LD_INT 36
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 101
54048: PUSH
54049: LD_INT 102
54051: PUSH
54052: LD_INT 103
54054: PUSH
54055: LD_INT 105
54057: PUSH
54058: LD_INT 106
54060: PUSH
54061: LD_INT 108
54063: PUSH
54064: LD_INT 109
54066: PUSH
54067: LD_INT 112
54069: PUSH
54070: LD_INT 116
54072: PUSH
54073: LD_INT 117
54075: PUSH
54076: LD_INT 118
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: ST_TO_ADDR
54096: GO 56351
54098: LD_INT 9
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 54254
54106: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54107: LD_ADDR_VAR 0 2
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 4
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: LD_INT 6
54123: PUSH
54124: LD_INT 7
54126: PUSH
54127: LD_INT 8
54129: PUSH
54130: LD_INT 11
54132: PUSH
54133: LD_INT 12
54135: PUSH
54136: LD_INT 15
54138: PUSH
54139: LD_INT 16
54141: PUSH
54142: LD_INT 20
54144: PUSH
54145: LD_INT 21
54147: PUSH
54148: LD_INT 22
54150: PUSH
54151: LD_INT 23
54153: PUSH
54154: LD_INT 25
54156: PUSH
54157: LD_INT 26
54159: PUSH
54160: LD_INT 28
54162: PUSH
54163: LD_INT 30
54165: PUSH
54166: LD_INT 31
54168: PUSH
54169: LD_INT 32
54171: PUSH
54172: LD_INT 36
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 101
54200: PUSH
54201: LD_INT 102
54203: PUSH
54204: LD_INT 103
54206: PUSH
54207: LD_INT 105
54209: PUSH
54210: LD_INT 106
54212: PUSH
54213: LD_INT 108
54215: PUSH
54216: LD_INT 109
54218: PUSH
54219: LD_INT 112
54221: PUSH
54222: LD_INT 114
54224: PUSH
54225: LD_INT 116
54227: PUSH
54228: LD_INT 117
54230: PUSH
54231: LD_INT 118
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: ST_TO_ADDR
54252: GO 56351
54254: LD_INT 10
54256: DOUBLE
54257: EQUAL
54258: IFTRUE 54262
54260: GO 54458
54262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54263: LD_ADDR_VAR 0 2
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: LD_INT 5
54276: PUSH
54277: LD_INT 6
54279: PUSH
54280: LD_INT 7
54282: PUSH
54283: LD_INT 8
54285: PUSH
54286: LD_INT 9
54288: PUSH
54289: LD_INT 10
54291: PUSH
54292: LD_INT 11
54294: PUSH
54295: LD_INT 12
54297: PUSH
54298: LD_INT 13
54300: PUSH
54301: LD_INT 14
54303: PUSH
54304: LD_INT 15
54306: PUSH
54307: LD_INT 16
54309: PUSH
54310: LD_INT 17
54312: PUSH
54313: LD_INT 18
54315: PUSH
54316: LD_INT 19
54318: PUSH
54319: LD_INT 20
54321: PUSH
54322: LD_INT 21
54324: PUSH
54325: LD_INT 22
54327: PUSH
54328: LD_INT 23
54330: PUSH
54331: LD_INT 24
54333: PUSH
54334: LD_INT 25
54336: PUSH
54337: LD_INT 26
54339: PUSH
54340: LD_INT 28
54342: PUSH
54343: LD_INT 30
54345: PUSH
54346: LD_INT 31
54348: PUSH
54349: LD_INT 32
54351: PUSH
54352: LD_INT 36
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 101
54388: PUSH
54389: LD_INT 102
54391: PUSH
54392: LD_INT 103
54394: PUSH
54395: LD_INT 104
54397: PUSH
54398: LD_INT 105
54400: PUSH
54401: LD_INT 106
54403: PUSH
54404: LD_INT 107
54406: PUSH
54407: LD_INT 108
54409: PUSH
54410: LD_INT 109
54412: PUSH
54413: LD_INT 110
54415: PUSH
54416: LD_INT 111
54418: PUSH
54419: LD_INT 112
54421: PUSH
54422: LD_INT 114
54424: PUSH
54425: LD_INT 116
54427: PUSH
54428: LD_INT 117
54430: PUSH
54431: LD_INT 118
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: ST_TO_ADDR
54456: GO 56351
54458: LD_INT 11
54460: DOUBLE
54461: EQUAL
54462: IFTRUE 54466
54464: GO 54670
54466: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54467: LD_ADDR_VAR 0 2
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: LD_INT 5
54483: PUSH
54484: LD_INT 6
54486: PUSH
54487: LD_INT 7
54489: PUSH
54490: LD_INT 8
54492: PUSH
54493: LD_INT 9
54495: PUSH
54496: LD_INT 10
54498: PUSH
54499: LD_INT 11
54501: PUSH
54502: LD_INT 12
54504: PUSH
54505: LD_INT 13
54507: PUSH
54508: LD_INT 14
54510: PUSH
54511: LD_INT 15
54513: PUSH
54514: LD_INT 16
54516: PUSH
54517: LD_INT 17
54519: PUSH
54520: LD_INT 18
54522: PUSH
54523: LD_INT 19
54525: PUSH
54526: LD_INT 20
54528: PUSH
54529: LD_INT 21
54531: PUSH
54532: LD_INT 22
54534: PUSH
54535: LD_INT 23
54537: PUSH
54538: LD_INT 24
54540: PUSH
54541: LD_INT 25
54543: PUSH
54544: LD_INT 26
54546: PUSH
54547: LD_INT 28
54549: PUSH
54550: LD_INT 30
54552: PUSH
54553: LD_INT 31
54555: PUSH
54556: LD_INT 32
54558: PUSH
54559: LD_INT 34
54561: PUSH
54562: LD_INT 36
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 101
54600: PUSH
54601: LD_INT 102
54603: PUSH
54604: LD_INT 103
54606: PUSH
54607: LD_INT 104
54609: PUSH
54610: LD_INT 105
54612: PUSH
54613: LD_INT 106
54615: PUSH
54616: LD_INT 107
54618: PUSH
54619: LD_INT 108
54621: PUSH
54622: LD_INT 109
54624: PUSH
54625: LD_INT 110
54627: PUSH
54628: LD_INT 111
54630: PUSH
54631: LD_INT 112
54633: PUSH
54634: LD_INT 114
54636: PUSH
54637: LD_INT 116
54639: PUSH
54640: LD_INT 117
54642: PUSH
54643: LD_INT 118
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: ST_TO_ADDR
54668: GO 56351
54670: LD_INT 12
54672: DOUBLE
54673: EQUAL
54674: IFTRUE 54678
54676: GO 54898
54678: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54679: LD_ADDR_VAR 0 2
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: LD_INT 5
54698: PUSH
54699: LD_INT 6
54701: PUSH
54702: LD_INT 7
54704: PUSH
54705: LD_INT 8
54707: PUSH
54708: LD_INT 9
54710: PUSH
54711: LD_INT 10
54713: PUSH
54714: LD_INT 11
54716: PUSH
54717: LD_INT 12
54719: PUSH
54720: LD_INT 13
54722: PUSH
54723: LD_INT 14
54725: PUSH
54726: LD_INT 15
54728: PUSH
54729: LD_INT 16
54731: PUSH
54732: LD_INT 17
54734: PUSH
54735: LD_INT 18
54737: PUSH
54738: LD_INT 19
54740: PUSH
54741: LD_INT 20
54743: PUSH
54744: LD_INT 21
54746: PUSH
54747: LD_INT 22
54749: PUSH
54750: LD_INT 23
54752: PUSH
54753: LD_INT 24
54755: PUSH
54756: LD_INT 25
54758: PUSH
54759: LD_INT 26
54761: PUSH
54762: LD_INT 27
54764: PUSH
54765: LD_INT 28
54767: PUSH
54768: LD_INT 30
54770: PUSH
54771: LD_INT 31
54773: PUSH
54774: LD_INT 32
54776: PUSH
54777: LD_INT 33
54779: PUSH
54780: LD_INT 34
54782: PUSH
54783: LD_INT 36
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 101
54824: PUSH
54825: LD_INT 102
54827: PUSH
54828: LD_INT 103
54830: PUSH
54831: LD_INT 104
54833: PUSH
54834: LD_INT 105
54836: PUSH
54837: LD_INT 106
54839: PUSH
54840: LD_INT 107
54842: PUSH
54843: LD_INT 108
54845: PUSH
54846: LD_INT 109
54848: PUSH
54849: LD_INT 110
54851: PUSH
54852: LD_INT 111
54854: PUSH
54855: LD_INT 112
54857: PUSH
54858: LD_INT 113
54860: PUSH
54861: LD_INT 114
54863: PUSH
54864: LD_INT 116
54866: PUSH
54867: LD_INT 117
54869: PUSH
54870: LD_INT 118
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: ST_TO_ADDR
54896: GO 56351
54898: LD_INT 13
54900: DOUBLE
54901: EQUAL
54902: IFTRUE 54906
54904: GO 55114
54906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54907: LD_ADDR_VAR 0 2
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 4
54923: PUSH
54924: LD_INT 5
54926: PUSH
54927: LD_INT 8
54929: PUSH
54930: LD_INT 9
54932: PUSH
54933: LD_INT 10
54935: PUSH
54936: LD_INT 11
54938: PUSH
54939: LD_INT 12
54941: PUSH
54942: LD_INT 14
54944: PUSH
54945: LD_INT 15
54947: PUSH
54948: LD_INT 16
54950: PUSH
54951: LD_INT 17
54953: PUSH
54954: LD_INT 18
54956: PUSH
54957: LD_INT 19
54959: PUSH
54960: LD_INT 20
54962: PUSH
54963: LD_INT 21
54965: PUSH
54966: LD_INT 22
54968: PUSH
54969: LD_INT 23
54971: PUSH
54972: LD_INT 24
54974: PUSH
54975: LD_INT 25
54977: PUSH
54978: LD_INT 26
54980: PUSH
54981: LD_INT 27
54983: PUSH
54984: LD_INT 28
54986: PUSH
54987: LD_INT 30
54989: PUSH
54990: LD_INT 31
54992: PUSH
54993: LD_INT 32
54995: PUSH
54996: LD_INT 33
54998: PUSH
54999: LD_INT 34
55001: PUSH
55002: LD_INT 36
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 101
55040: PUSH
55041: LD_INT 102
55043: PUSH
55044: LD_INT 103
55046: PUSH
55047: LD_INT 104
55049: PUSH
55050: LD_INT 105
55052: PUSH
55053: LD_INT 106
55055: PUSH
55056: LD_INT 107
55058: PUSH
55059: LD_INT 108
55061: PUSH
55062: LD_INT 109
55064: PUSH
55065: LD_INT 110
55067: PUSH
55068: LD_INT 111
55070: PUSH
55071: LD_INT 112
55073: PUSH
55074: LD_INT 113
55076: PUSH
55077: LD_INT 114
55079: PUSH
55080: LD_INT 116
55082: PUSH
55083: LD_INT 117
55085: PUSH
55086: LD_INT 118
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: ST_TO_ADDR
55112: GO 56351
55114: LD_INT 14
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55122
55120: GO 55346
55122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55123: LD_ADDR_VAR 0 2
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: LD_INT 6
55145: PUSH
55146: LD_INT 7
55148: PUSH
55149: LD_INT 8
55151: PUSH
55152: LD_INT 9
55154: PUSH
55155: LD_INT 10
55157: PUSH
55158: LD_INT 11
55160: PUSH
55161: LD_INT 12
55163: PUSH
55164: LD_INT 13
55166: PUSH
55167: LD_INT 14
55169: PUSH
55170: LD_INT 15
55172: PUSH
55173: LD_INT 16
55175: PUSH
55176: LD_INT 17
55178: PUSH
55179: LD_INT 18
55181: PUSH
55182: LD_INT 19
55184: PUSH
55185: LD_INT 20
55187: PUSH
55188: LD_INT 21
55190: PUSH
55191: LD_INT 22
55193: PUSH
55194: LD_INT 23
55196: PUSH
55197: LD_INT 24
55199: PUSH
55200: LD_INT 25
55202: PUSH
55203: LD_INT 26
55205: PUSH
55206: LD_INT 27
55208: PUSH
55209: LD_INT 28
55211: PUSH
55212: LD_INT 29
55214: PUSH
55215: LD_INT 30
55217: PUSH
55218: LD_INT 31
55220: PUSH
55221: LD_INT 32
55223: PUSH
55224: LD_INT 33
55226: PUSH
55227: LD_INT 34
55229: PUSH
55230: LD_INT 36
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 101
55272: PUSH
55273: LD_INT 102
55275: PUSH
55276: LD_INT 103
55278: PUSH
55279: LD_INT 104
55281: PUSH
55282: LD_INT 105
55284: PUSH
55285: LD_INT 106
55287: PUSH
55288: LD_INT 107
55290: PUSH
55291: LD_INT 108
55293: PUSH
55294: LD_INT 109
55296: PUSH
55297: LD_INT 110
55299: PUSH
55300: LD_INT 111
55302: PUSH
55303: LD_INT 112
55305: PUSH
55306: LD_INT 113
55308: PUSH
55309: LD_INT 114
55311: PUSH
55312: LD_INT 116
55314: PUSH
55315: LD_INT 117
55317: PUSH
55318: LD_INT 118
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: ST_TO_ADDR
55344: GO 56351
55346: LD_INT 15
55348: DOUBLE
55349: EQUAL
55350: IFTRUE 55354
55352: GO 55578
55354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55355: LD_ADDR_VAR 0 2
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: LD_INT 5
55374: PUSH
55375: LD_INT 6
55377: PUSH
55378: LD_INT 7
55380: PUSH
55381: LD_INT 8
55383: PUSH
55384: LD_INT 9
55386: PUSH
55387: LD_INT 10
55389: PUSH
55390: LD_INT 11
55392: PUSH
55393: LD_INT 12
55395: PUSH
55396: LD_INT 13
55398: PUSH
55399: LD_INT 14
55401: PUSH
55402: LD_INT 15
55404: PUSH
55405: LD_INT 16
55407: PUSH
55408: LD_INT 17
55410: PUSH
55411: LD_INT 18
55413: PUSH
55414: LD_INT 19
55416: PUSH
55417: LD_INT 20
55419: PUSH
55420: LD_INT 21
55422: PUSH
55423: LD_INT 22
55425: PUSH
55426: LD_INT 23
55428: PUSH
55429: LD_INT 24
55431: PUSH
55432: LD_INT 25
55434: PUSH
55435: LD_INT 26
55437: PUSH
55438: LD_INT 27
55440: PUSH
55441: LD_INT 28
55443: PUSH
55444: LD_INT 29
55446: PUSH
55447: LD_INT 30
55449: PUSH
55450: LD_INT 31
55452: PUSH
55453: LD_INT 32
55455: PUSH
55456: LD_INT 33
55458: PUSH
55459: LD_INT 34
55461: PUSH
55462: LD_INT 36
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 101
55504: PUSH
55505: LD_INT 102
55507: PUSH
55508: LD_INT 103
55510: PUSH
55511: LD_INT 104
55513: PUSH
55514: LD_INT 105
55516: PUSH
55517: LD_INT 106
55519: PUSH
55520: LD_INT 107
55522: PUSH
55523: LD_INT 108
55525: PUSH
55526: LD_INT 109
55528: PUSH
55529: LD_INT 110
55531: PUSH
55532: LD_INT 111
55534: PUSH
55535: LD_INT 112
55537: PUSH
55538: LD_INT 113
55540: PUSH
55541: LD_INT 114
55543: PUSH
55544: LD_INT 116
55546: PUSH
55547: LD_INT 117
55549: PUSH
55550: LD_INT 118
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: ST_TO_ADDR
55576: GO 56351
55578: LD_INT 16
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55586
55584: GO 55722
55586: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55587: LD_ADDR_VAR 0 2
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 4
55597: PUSH
55598: LD_INT 5
55600: PUSH
55601: LD_INT 7
55603: PUSH
55604: LD_INT 11
55606: PUSH
55607: LD_INT 12
55609: PUSH
55610: LD_INT 15
55612: PUSH
55613: LD_INT 16
55615: PUSH
55616: LD_INT 20
55618: PUSH
55619: LD_INT 21
55621: PUSH
55622: LD_INT 22
55624: PUSH
55625: LD_INT 23
55627: PUSH
55628: LD_INT 25
55630: PUSH
55631: LD_INT 26
55633: PUSH
55634: LD_INT 30
55636: PUSH
55637: LD_INT 31
55639: PUSH
55640: LD_INT 32
55642: PUSH
55643: LD_INT 33
55645: PUSH
55646: LD_INT 34
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 101
55672: PUSH
55673: LD_INT 102
55675: PUSH
55676: LD_INT 103
55678: PUSH
55679: LD_INT 106
55681: PUSH
55682: LD_INT 108
55684: PUSH
55685: LD_INT 112
55687: PUSH
55688: LD_INT 113
55690: PUSH
55691: LD_INT 114
55693: PUSH
55694: LD_INT 116
55696: PUSH
55697: LD_INT 117
55699: PUSH
55700: LD_INT 118
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: ST_TO_ADDR
55720: GO 56351
55722: LD_INT 17
55724: DOUBLE
55725: EQUAL
55726: IFTRUE 55730
55728: GO 55954
55730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55731: LD_ADDR_VAR 0 2
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: LD_INT 5
55750: PUSH
55751: LD_INT 6
55753: PUSH
55754: LD_INT 7
55756: PUSH
55757: LD_INT 8
55759: PUSH
55760: LD_INT 9
55762: PUSH
55763: LD_INT 10
55765: PUSH
55766: LD_INT 11
55768: PUSH
55769: LD_INT 12
55771: PUSH
55772: LD_INT 13
55774: PUSH
55775: LD_INT 14
55777: PUSH
55778: LD_INT 15
55780: PUSH
55781: LD_INT 16
55783: PUSH
55784: LD_INT 17
55786: PUSH
55787: LD_INT 18
55789: PUSH
55790: LD_INT 19
55792: PUSH
55793: LD_INT 20
55795: PUSH
55796: LD_INT 21
55798: PUSH
55799: LD_INT 22
55801: PUSH
55802: LD_INT 23
55804: PUSH
55805: LD_INT 24
55807: PUSH
55808: LD_INT 25
55810: PUSH
55811: LD_INT 26
55813: PUSH
55814: LD_INT 27
55816: PUSH
55817: LD_INT 28
55819: PUSH
55820: LD_INT 29
55822: PUSH
55823: LD_INT 30
55825: PUSH
55826: LD_INT 31
55828: PUSH
55829: LD_INT 32
55831: PUSH
55832: LD_INT 33
55834: PUSH
55835: LD_INT 34
55837: PUSH
55838: LD_INT 36
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 101
55880: PUSH
55881: LD_INT 102
55883: PUSH
55884: LD_INT 103
55886: PUSH
55887: LD_INT 104
55889: PUSH
55890: LD_INT 105
55892: PUSH
55893: LD_INT 106
55895: PUSH
55896: LD_INT 107
55898: PUSH
55899: LD_INT 108
55901: PUSH
55902: LD_INT 109
55904: PUSH
55905: LD_INT 110
55907: PUSH
55908: LD_INT 111
55910: PUSH
55911: LD_INT 112
55913: PUSH
55914: LD_INT 113
55916: PUSH
55917: LD_INT 114
55919: PUSH
55920: LD_INT 116
55922: PUSH
55923: LD_INT 117
55925: PUSH
55926: LD_INT 118
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: ST_TO_ADDR
55952: GO 56351
55954: LD_INT 18
55956: DOUBLE
55957: EQUAL
55958: IFTRUE 55962
55960: GO 56110
55962: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55963: LD_ADDR_VAR 0 2
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 5
55976: PUSH
55977: LD_INT 7
55979: PUSH
55980: LD_INT 11
55982: PUSH
55983: LD_INT 12
55985: PUSH
55986: LD_INT 15
55988: PUSH
55989: LD_INT 16
55991: PUSH
55992: LD_INT 20
55994: PUSH
55995: LD_INT 21
55997: PUSH
55998: LD_INT 22
56000: PUSH
56001: LD_INT 23
56003: PUSH
56004: LD_INT 25
56006: PUSH
56007: LD_INT 26
56009: PUSH
56010: LD_INT 30
56012: PUSH
56013: LD_INT 31
56015: PUSH
56016: LD_INT 32
56018: PUSH
56019: LD_INT 33
56021: PUSH
56022: LD_INT 34
56024: PUSH
56025: LD_INT 35
56027: PUSH
56028: LD_INT 36
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 101
56056: PUSH
56057: LD_INT 102
56059: PUSH
56060: LD_INT 103
56062: PUSH
56063: LD_INT 106
56065: PUSH
56066: LD_INT 108
56068: PUSH
56069: LD_INT 112
56071: PUSH
56072: LD_INT 113
56074: PUSH
56075: LD_INT 114
56077: PUSH
56078: LD_INT 115
56080: PUSH
56081: LD_INT 116
56083: PUSH
56084: LD_INT 117
56086: PUSH
56087: LD_INT 118
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: ST_TO_ADDR
56108: GO 56351
56110: LD_INT 19
56112: DOUBLE
56113: EQUAL
56114: IFTRUE 56118
56116: GO 56350
56118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56119: LD_ADDR_VAR 0 2
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 4
56135: PUSH
56136: LD_INT 5
56138: PUSH
56139: LD_INT 6
56141: PUSH
56142: LD_INT 7
56144: PUSH
56145: LD_INT 8
56147: PUSH
56148: LD_INT 9
56150: PUSH
56151: LD_INT 10
56153: PUSH
56154: LD_INT 11
56156: PUSH
56157: LD_INT 12
56159: PUSH
56160: LD_INT 13
56162: PUSH
56163: LD_INT 14
56165: PUSH
56166: LD_INT 15
56168: PUSH
56169: LD_INT 16
56171: PUSH
56172: LD_INT 17
56174: PUSH
56175: LD_INT 18
56177: PUSH
56178: LD_INT 19
56180: PUSH
56181: LD_INT 20
56183: PUSH
56184: LD_INT 21
56186: PUSH
56187: LD_INT 22
56189: PUSH
56190: LD_INT 23
56192: PUSH
56193: LD_INT 24
56195: PUSH
56196: LD_INT 25
56198: PUSH
56199: LD_INT 26
56201: PUSH
56202: LD_INT 27
56204: PUSH
56205: LD_INT 28
56207: PUSH
56208: LD_INT 29
56210: PUSH
56211: LD_INT 30
56213: PUSH
56214: LD_INT 31
56216: PUSH
56217: LD_INT 32
56219: PUSH
56220: LD_INT 33
56222: PUSH
56223: LD_INT 34
56225: PUSH
56226: LD_INT 35
56228: PUSH
56229: LD_INT 36
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 101
56272: PUSH
56273: LD_INT 102
56275: PUSH
56276: LD_INT 103
56278: PUSH
56279: LD_INT 104
56281: PUSH
56282: LD_INT 105
56284: PUSH
56285: LD_INT 106
56287: PUSH
56288: LD_INT 107
56290: PUSH
56291: LD_INT 108
56293: PUSH
56294: LD_INT 109
56296: PUSH
56297: LD_INT 110
56299: PUSH
56300: LD_INT 111
56302: PUSH
56303: LD_INT 112
56305: PUSH
56306: LD_INT 113
56308: PUSH
56309: LD_INT 114
56311: PUSH
56312: LD_INT 115
56314: PUSH
56315: LD_INT 116
56317: PUSH
56318: LD_INT 117
56320: PUSH
56321: LD_INT 118
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: ST_TO_ADDR
56348: GO 56351
56350: POP
// end else
56351: GO 56582
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56353: LD_ADDR_VAR 0 2
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: LD_INT 6
56375: PUSH
56376: LD_INT 7
56378: PUSH
56379: LD_INT 8
56381: PUSH
56382: LD_INT 9
56384: PUSH
56385: LD_INT 10
56387: PUSH
56388: LD_INT 11
56390: PUSH
56391: LD_INT 12
56393: PUSH
56394: LD_INT 13
56396: PUSH
56397: LD_INT 14
56399: PUSH
56400: LD_INT 15
56402: PUSH
56403: LD_INT 16
56405: PUSH
56406: LD_INT 17
56408: PUSH
56409: LD_INT 18
56411: PUSH
56412: LD_INT 19
56414: PUSH
56415: LD_INT 20
56417: PUSH
56418: LD_INT 21
56420: PUSH
56421: LD_INT 22
56423: PUSH
56424: LD_INT 23
56426: PUSH
56427: LD_INT 24
56429: PUSH
56430: LD_INT 25
56432: PUSH
56433: LD_INT 26
56435: PUSH
56436: LD_INT 27
56438: PUSH
56439: LD_INT 28
56441: PUSH
56442: LD_INT 29
56444: PUSH
56445: LD_INT 30
56447: PUSH
56448: LD_INT 31
56450: PUSH
56451: LD_INT 32
56453: PUSH
56454: LD_INT 33
56456: PUSH
56457: LD_INT 34
56459: PUSH
56460: LD_INT 35
56462: PUSH
56463: LD_INT 36
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 101
56506: PUSH
56507: LD_INT 102
56509: PUSH
56510: LD_INT 103
56512: PUSH
56513: LD_INT 104
56515: PUSH
56516: LD_INT 105
56518: PUSH
56519: LD_INT 106
56521: PUSH
56522: LD_INT 107
56524: PUSH
56525: LD_INT 108
56527: PUSH
56528: LD_INT 109
56530: PUSH
56531: LD_INT 110
56533: PUSH
56534: LD_INT 111
56536: PUSH
56537: LD_INT 112
56539: PUSH
56540: LD_INT 113
56542: PUSH
56543: LD_INT 114
56545: PUSH
56546: LD_INT 115
56548: PUSH
56549: LD_INT 116
56551: PUSH
56552: LD_INT 117
56554: PUSH
56555: LD_INT 118
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// if result then
56582: LD_VAR 0 2
56586: IFFALSE 57372
// begin normal :=  ;
56588: LD_ADDR_VAR 0 5
56592: PUSH
56593: LD_STRING 
56595: ST_TO_ADDR
// hardcore :=  ;
56596: LD_ADDR_VAR 0 6
56600: PUSH
56601: LD_STRING 
56603: ST_TO_ADDR
// active :=  ;
56604: LD_ADDR_VAR 0 7
56608: PUSH
56609: LD_STRING 
56611: ST_TO_ADDR
// for i = 1 to normalCounter do
56612: LD_ADDR_VAR 0 8
56616: PUSH
56617: DOUBLE
56618: LD_INT 1
56620: DEC
56621: ST_TO_ADDR
56622: LD_EXP 113
56626: PUSH
56627: FOR_TO
56628: IFFALSE 56729
// begin tmp := 0 ;
56630: LD_ADDR_VAR 0 3
56634: PUSH
56635: LD_STRING 0
56637: ST_TO_ADDR
// if result [ 1 ] then
56638: LD_VAR 0 2
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: IFFALSE 56711
// if result [ 1 ] [ 1 ] = i then
56648: LD_VAR 0 2
56652: PUSH
56653: LD_INT 1
56655: ARRAY
56656: PUSH
56657: LD_INT 1
56659: ARRAY
56660: PUSH
56661: LD_VAR 0 8
56665: EQUAL
56666: IFFALSE 56711
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56668: LD_ADDR_VAR 0 2
56672: PUSH
56673: LD_VAR 0 2
56677: PPUSH
56678: LD_INT 1
56680: PPUSH
56681: LD_VAR 0 2
56685: PUSH
56686: LD_INT 1
56688: ARRAY
56689: PPUSH
56690: LD_INT 1
56692: PPUSH
56693: CALL_OW 3
56697: PPUSH
56698: CALL_OW 1
56702: ST_TO_ADDR
// tmp := 1 ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_STRING 1
56710: ST_TO_ADDR
// end ; normal := normal & tmp ;
56711: LD_ADDR_VAR 0 5
56715: PUSH
56716: LD_VAR 0 5
56720: PUSH
56721: LD_VAR 0 3
56725: STR
56726: ST_TO_ADDR
// end ;
56727: GO 56627
56729: POP
56730: POP
// for i = 1 to hardcoreCounter do
56731: LD_ADDR_VAR 0 8
56735: PUSH
56736: DOUBLE
56737: LD_INT 1
56739: DEC
56740: ST_TO_ADDR
56741: LD_EXP 114
56745: PUSH
56746: FOR_TO
56747: IFFALSE 56852
// begin tmp := 0 ;
56749: LD_ADDR_VAR 0 3
56753: PUSH
56754: LD_STRING 0
56756: ST_TO_ADDR
// if result [ 2 ] then
56757: LD_VAR 0 2
56761: PUSH
56762: LD_INT 2
56764: ARRAY
56765: IFFALSE 56834
// if result [ 2 ] [ 1 ] = 100 + i then
56767: LD_VAR 0 2
56771: PUSH
56772: LD_INT 2
56774: ARRAY
56775: PUSH
56776: LD_INT 1
56778: ARRAY
56779: PUSH
56780: LD_INT 100
56782: PUSH
56783: LD_VAR 0 8
56787: PLUS
56788: EQUAL
56789: IFFALSE 56834
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56791: LD_ADDR_VAR 0 2
56795: PUSH
56796: LD_VAR 0 2
56800: PPUSH
56801: LD_INT 2
56803: PPUSH
56804: LD_VAR 0 2
56808: PUSH
56809: LD_INT 2
56811: ARRAY
56812: PPUSH
56813: LD_INT 1
56815: PPUSH
56816: CALL_OW 3
56820: PPUSH
56821: CALL_OW 1
56825: ST_TO_ADDR
// tmp := 1 ;
56826: LD_ADDR_VAR 0 3
56830: PUSH
56831: LD_STRING 1
56833: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56834: LD_ADDR_VAR 0 6
56838: PUSH
56839: LD_VAR 0 6
56843: PUSH
56844: LD_VAR 0 3
56848: STR
56849: ST_TO_ADDR
// end ;
56850: GO 56746
56852: POP
56853: POP
// if isGameLoad then
56854: LD_VAR 0 1
56858: IFFALSE 57333
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56860: LD_ADDR_VAR 0 4
56864: PUSH
56865: LD_EXP 117
56869: PUSH
56870: LD_EXP 116
56874: PUSH
56875: LD_EXP 118
56879: PUSH
56880: LD_EXP 115
56884: PUSH
56885: LD_EXP 119
56889: PUSH
56890: LD_EXP 120
56894: PUSH
56895: LD_EXP 121
56899: PUSH
56900: LD_EXP 122
56904: PUSH
56905: LD_EXP 123
56909: PUSH
56910: LD_EXP 124
56914: PUSH
56915: LD_EXP 125
56919: PUSH
56920: LD_EXP 126
56924: PUSH
56925: LD_EXP 127
56929: PUSH
56930: LD_EXP 128
56934: PUSH
56935: LD_EXP 136
56939: PUSH
56940: LD_EXP 137
56944: PUSH
56945: LD_EXP 138
56949: PUSH
56950: LD_EXP 139
56954: PUSH
56955: LD_EXP 141
56959: PUSH
56960: LD_EXP 142
56964: PUSH
56965: LD_EXP 143
56969: PUSH
56970: LD_EXP 146
56974: PUSH
56975: LD_EXP 148
56979: PUSH
56980: LD_EXP 149
56984: PUSH
56985: LD_EXP 150
56989: PUSH
56990: LD_EXP 152
56994: PUSH
56995: LD_EXP 153
56999: PUSH
57000: LD_EXP 156
57004: PUSH
57005: LD_EXP 157
57009: PUSH
57010: LD_EXP 158
57014: PUSH
57015: LD_EXP 159
57019: PUSH
57020: LD_EXP 160
57024: PUSH
57025: LD_EXP 161
57029: PUSH
57030: LD_EXP 162
57034: PUSH
57035: LD_EXP 163
57039: PUSH
57040: LD_EXP 164
57044: PUSH
57045: LD_EXP 129
57049: PUSH
57050: LD_EXP 130
57054: PUSH
57055: LD_EXP 133
57059: PUSH
57060: LD_EXP 134
57064: PUSH
57065: LD_EXP 135
57069: PUSH
57070: LD_EXP 131
57074: PUSH
57075: LD_EXP 132
57079: PUSH
57080: LD_EXP 140
57084: PUSH
57085: LD_EXP 144
57089: PUSH
57090: LD_EXP 145
57094: PUSH
57095: LD_EXP 147
57099: PUSH
57100: LD_EXP 151
57104: PUSH
57105: LD_EXP 154
57109: PUSH
57110: LD_EXP 155
57114: PUSH
57115: LD_EXP 165
57119: PUSH
57120: LD_EXP 166
57124: PUSH
57125: LD_EXP 167
57129: PUSH
57130: LD_EXP 168
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// tmp :=  ;
57191: LD_ADDR_VAR 0 3
57195: PUSH
57196: LD_STRING 
57198: ST_TO_ADDR
// for i = 1 to normalCounter do
57199: LD_ADDR_VAR 0 8
57203: PUSH
57204: DOUBLE
57205: LD_INT 1
57207: DEC
57208: ST_TO_ADDR
57209: LD_EXP 113
57213: PUSH
57214: FOR_TO
57215: IFFALSE 57251
// begin if flags [ i ] then
57217: LD_VAR 0 4
57221: PUSH
57222: LD_VAR 0 8
57226: ARRAY
57227: IFFALSE 57249
// tmp := tmp & i & ; ;
57229: LD_ADDR_VAR 0 3
57233: PUSH
57234: LD_VAR 0 3
57238: PUSH
57239: LD_VAR 0 8
57243: STR
57244: PUSH
57245: LD_STRING ;
57247: STR
57248: ST_TO_ADDR
// end ;
57249: GO 57214
57251: POP
57252: POP
// for i = 1 to hardcoreCounter do
57253: LD_ADDR_VAR 0 8
57257: PUSH
57258: DOUBLE
57259: LD_INT 1
57261: DEC
57262: ST_TO_ADDR
57263: LD_EXP 114
57267: PUSH
57268: FOR_TO
57269: IFFALSE 57315
// begin if flags [ normalCounter + i ] then
57271: LD_VAR 0 4
57275: PUSH
57276: LD_EXP 113
57280: PUSH
57281: LD_VAR 0 8
57285: PLUS
57286: ARRAY
57287: IFFALSE 57313
// tmp := tmp & ( 100 + i ) & ; ;
57289: LD_ADDR_VAR 0 3
57293: PUSH
57294: LD_VAR 0 3
57298: PUSH
57299: LD_INT 100
57301: PUSH
57302: LD_VAR 0 8
57306: PLUS
57307: STR
57308: PUSH
57309: LD_STRING ;
57311: STR
57312: ST_TO_ADDR
// end ;
57313: GO 57268
57315: POP
57316: POP
// if tmp then
57317: LD_VAR 0 3
57321: IFFALSE 57333
// active := tmp ;
57323: LD_ADDR_VAR 0 7
57327: PUSH
57328: LD_VAR 0 3
57332: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57333: LD_STRING getStreamItemsFromMission("
57335: PUSH
57336: LD_VAR 0 5
57340: STR
57341: PUSH
57342: LD_STRING ","
57344: STR
57345: PUSH
57346: LD_VAR 0 6
57350: STR
57351: PUSH
57352: LD_STRING ","
57354: STR
57355: PUSH
57356: LD_VAR 0 7
57360: STR
57361: PUSH
57362: LD_STRING ")
57364: STR
57365: PPUSH
57366: CALL_OW 559
// end else
57370: GO 57379
// ToLua ( getStreamItemsFromMission("","","") ) ;
57372: LD_STRING getStreamItemsFromMission("","","")
57374: PPUSH
57375: CALL_OW 559
// end ;
57379: LD_VAR 0 2
57383: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57384: LD_EXP 112
57388: PUSH
57389: LD_EXP 117
57393: AND
57394: IFFALSE 57518
57396: GO 57398
57398: DISABLE
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
// begin enable ;
57403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_INT 22
57411: PUSH
57412: LD_OWVAR 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 34
57426: PUSH
57427: LD_INT 7
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 34
57436: PUSH
57437: LD_INT 45
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 34
57446: PUSH
57447: LD_INT 28
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 34
57456: PUSH
57457: LD_INT 47
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PPUSH
57475: CALL_OW 69
57479: ST_TO_ADDR
// if not tmp then
57480: LD_VAR 0 2
57484: NOT
57485: IFFALSE 57489
// exit ;
57487: GO 57518
// for i in tmp do
57489: LD_ADDR_VAR 0 1
57493: PUSH
57494: LD_VAR 0 2
57498: PUSH
57499: FOR_IN
57500: IFFALSE 57516
// begin SetLives ( i , 0 ) ;
57502: LD_VAR 0 1
57506: PPUSH
57507: LD_INT 0
57509: PPUSH
57510: CALL_OW 234
// end ;
57514: GO 57499
57516: POP
57517: POP
// end ;
57518: PPOPN 2
57520: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57521: LD_EXP 112
57525: PUSH
57526: LD_EXP 118
57530: AND
57531: IFFALSE 57615
57533: GO 57535
57535: DISABLE
57536: LD_INT 0
57538: PPUSH
57539: PPUSH
// begin enable ;
57540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57541: LD_ADDR_VAR 0 2
57545: PUSH
57546: LD_INT 22
57548: PUSH
57549: LD_OWVAR 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 32
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PPUSH
57572: CALL_OW 69
57576: ST_TO_ADDR
// if not tmp then
57577: LD_VAR 0 2
57581: NOT
57582: IFFALSE 57586
// exit ;
57584: GO 57615
// for i in tmp do
57586: LD_ADDR_VAR 0 1
57590: PUSH
57591: LD_VAR 0 2
57595: PUSH
57596: FOR_IN
57597: IFFALSE 57613
// begin SetLives ( i , 0 ) ;
57599: LD_VAR 0 1
57603: PPUSH
57604: LD_INT 0
57606: PPUSH
57607: CALL_OW 234
// end ;
57611: GO 57596
57613: POP
57614: POP
// end ;
57615: PPOPN 2
57617: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57618: LD_EXP 112
57622: PUSH
57623: LD_EXP 115
57627: AND
57628: IFFALSE 57721
57630: GO 57632
57632: DISABLE
57633: LD_INT 0
57635: PPUSH
// begin enable ;
57636: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57637: LD_ADDR_VAR 0 1
57641: PUSH
57642: LD_INT 22
57644: PUSH
57645: LD_OWVAR 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 25
57659: PUSH
57660: LD_INT 5
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 25
57669: PUSH
57670: LD_INT 9
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 25
57679: PUSH
57680: LD_INT 8
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PPUSH
57697: CALL_OW 69
57701: PUSH
57702: FOR_IN
57703: IFFALSE 57719
// begin SetClass ( i , 1 ) ;
57705: LD_VAR 0 1
57709: PPUSH
57710: LD_INT 1
57712: PPUSH
57713: CALL_OW 336
// end ;
57717: GO 57702
57719: POP
57720: POP
// end ;
57721: PPOPN 1
57723: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57724: LD_EXP 112
57728: PUSH
57729: LD_EXP 116
57733: AND
57734: PUSH
57735: LD_OWVAR 65
57739: PUSH
57740: LD_INT 7
57742: LESS
57743: AND
57744: IFFALSE 57758
57746: GO 57748
57748: DISABLE
// begin enable ;
57749: ENABLE
// game_speed := 7 ;
57750: LD_ADDR_OWVAR 65
57754: PUSH
57755: LD_INT 7
57757: ST_TO_ADDR
// end ;
57758: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57759: LD_EXP 112
57763: PUSH
57764: LD_EXP 119
57768: AND
57769: IFFALSE 57971
57771: GO 57773
57773: DISABLE
57774: LD_INT 0
57776: PPUSH
57777: PPUSH
57778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: LD_INT 81
57786: PUSH
57787: LD_OWVAR 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 21
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PPUSH
57810: CALL_OW 69
57814: ST_TO_ADDR
// if not tmp then
57815: LD_VAR 0 3
57819: NOT
57820: IFFALSE 57824
// exit ;
57822: GO 57971
// if tmp > 5 then
57824: LD_VAR 0 3
57828: PUSH
57829: LD_INT 5
57831: GREATER
57832: IFFALSE 57844
// k := 5 else
57834: LD_ADDR_VAR 0 2
57838: PUSH
57839: LD_INT 5
57841: ST_TO_ADDR
57842: GO 57854
// k := tmp ;
57844: LD_ADDR_VAR 0 2
57848: PUSH
57849: LD_VAR 0 3
57853: ST_TO_ADDR
// for i := 1 to k do
57854: LD_ADDR_VAR 0 1
57858: PUSH
57859: DOUBLE
57860: LD_INT 1
57862: DEC
57863: ST_TO_ADDR
57864: LD_VAR 0 2
57868: PUSH
57869: FOR_TO
57870: IFFALSE 57969
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57872: LD_VAR 0 3
57876: PUSH
57877: LD_VAR 0 1
57881: ARRAY
57882: PPUSH
57883: LD_VAR 0 1
57887: PUSH
57888: LD_INT 4
57890: MOD
57891: PUSH
57892: LD_INT 1
57894: PLUS
57895: PPUSH
57896: CALL_OW 259
57900: PUSH
57901: LD_INT 10
57903: LESS
57904: IFFALSE 57967
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57906: LD_VAR 0 3
57910: PUSH
57911: LD_VAR 0 1
57915: ARRAY
57916: PPUSH
57917: LD_VAR 0 1
57921: PUSH
57922: LD_INT 4
57924: MOD
57925: PUSH
57926: LD_INT 1
57928: PLUS
57929: PPUSH
57930: LD_VAR 0 3
57934: PUSH
57935: LD_VAR 0 1
57939: ARRAY
57940: PPUSH
57941: LD_VAR 0 1
57945: PUSH
57946: LD_INT 4
57948: MOD
57949: PUSH
57950: LD_INT 1
57952: PLUS
57953: PPUSH
57954: CALL_OW 259
57958: PUSH
57959: LD_INT 1
57961: PLUS
57962: PPUSH
57963: CALL_OW 237
57967: GO 57869
57969: POP
57970: POP
// end ;
57971: PPOPN 3
57973: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57974: LD_EXP 112
57978: PUSH
57979: LD_EXP 120
57983: AND
57984: IFFALSE 58004
57986: GO 57988
57988: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57989: LD_INT 4
57991: PPUSH
57992: LD_OWVAR 2
57996: PPUSH
57997: LD_INT 0
57999: PPUSH
58000: CALL_OW 324
58004: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58005: LD_EXP 112
58009: PUSH
58010: LD_EXP 149
58014: AND
58015: IFFALSE 58035
58017: GO 58019
58019: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58020: LD_INT 19
58022: PPUSH
58023: LD_OWVAR 2
58027: PPUSH
58028: LD_INT 0
58030: PPUSH
58031: CALL_OW 324
58035: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58036: LD_EXP 112
58040: PUSH
58041: LD_EXP 121
58045: AND
58046: IFFALSE 58148
58048: GO 58050
58050: DISABLE
58051: LD_INT 0
58053: PPUSH
58054: PPUSH
// begin enable ;
58055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58056: LD_ADDR_VAR 0 2
58060: PUSH
58061: LD_INT 22
58063: PUSH
58064: LD_OWVAR 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 34
58078: PUSH
58079: LD_INT 11
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 34
58088: PUSH
58089: LD_INT 30
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PPUSH
58105: CALL_OW 69
58109: ST_TO_ADDR
// if not tmp then
58110: LD_VAR 0 2
58114: NOT
58115: IFFALSE 58119
// exit ;
58117: GO 58148
// for i in tmp do
58119: LD_ADDR_VAR 0 1
58123: PUSH
58124: LD_VAR 0 2
58128: PUSH
58129: FOR_IN
58130: IFFALSE 58146
// begin SetLives ( i , 0 ) ;
58132: LD_VAR 0 1
58136: PPUSH
58137: LD_INT 0
58139: PPUSH
58140: CALL_OW 234
// end ;
58144: GO 58129
58146: POP
58147: POP
// end ;
58148: PPOPN 2
58150: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58151: LD_EXP 112
58155: PUSH
58156: LD_EXP 122
58160: AND
58161: IFFALSE 58181
58163: GO 58165
58165: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58166: LD_INT 32
58168: PPUSH
58169: LD_OWVAR 2
58173: PPUSH
58174: LD_INT 0
58176: PPUSH
58177: CALL_OW 324
58181: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58182: LD_EXP 112
58186: PUSH
58187: LD_EXP 123
58191: AND
58192: IFFALSE 58373
58194: GO 58196
58196: DISABLE
58197: LD_INT 0
58199: PPUSH
58200: PPUSH
58201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: LD_INT 22
58209: PUSH
58210: LD_OWVAR 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 33
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PPUSH
58233: CALL_OW 69
58237: ST_TO_ADDR
// if not tmp then
58238: LD_VAR 0 2
58242: NOT
58243: IFFALSE 58247
// exit ;
58245: GO 58373
// side := 0 ;
58247: LD_ADDR_VAR 0 3
58251: PUSH
58252: LD_INT 0
58254: ST_TO_ADDR
// for i := 1 to 8 do
58255: LD_ADDR_VAR 0 1
58259: PUSH
58260: DOUBLE
58261: LD_INT 1
58263: DEC
58264: ST_TO_ADDR
58265: LD_INT 8
58267: PUSH
58268: FOR_TO
58269: IFFALSE 58317
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58271: LD_OWVAR 2
58275: PUSH
58276: LD_VAR 0 1
58280: NONEQUAL
58281: PUSH
58282: LD_OWVAR 2
58286: PPUSH
58287: LD_VAR 0 1
58291: PPUSH
58292: CALL_OW 81
58296: PUSH
58297: LD_INT 2
58299: EQUAL
58300: AND
58301: IFFALSE 58315
// begin side := i ;
58303: LD_ADDR_VAR 0 3
58307: PUSH
58308: LD_VAR 0 1
58312: ST_TO_ADDR
// break ;
58313: GO 58317
// end ;
58315: GO 58268
58317: POP
58318: POP
// if not side then
58319: LD_VAR 0 3
58323: NOT
58324: IFFALSE 58328
// exit ;
58326: GO 58373
// for i := 1 to tmp do
58328: LD_ADDR_VAR 0 1
58332: PUSH
58333: DOUBLE
58334: LD_INT 1
58336: DEC
58337: ST_TO_ADDR
58338: LD_VAR 0 2
58342: PUSH
58343: FOR_TO
58344: IFFALSE 58371
// if Prob ( 60 ) then
58346: LD_INT 60
58348: PPUSH
58349: CALL_OW 13
58353: IFFALSE 58369
// SetSide ( i , side ) ;
58355: LD_VAR 0 1
58359: PPUSH
58360: LD_VAR 0 3
58364: PPUSH
58365: CALL_OW 235
58369: GO 58343
58371: POP
58372: POP
// end ;
58373: PPOPN 3
58375: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58376: LD_EXP 112
58380: PUSH
58381: LD_EXP 125
58385: AND
58386: IFFALSE 58505
58388: GO 58390
58390: DISABLE
58391: LD_INT 0
58393: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58394: LD_ADDR_VAR 0 1
58398: PUSH
58399: LD_INT 22
58401: PUSH
58402: LD_OWVAR 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 21
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: LD_INT 23
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: PPUSH
58443: CALL_OW 69
58447: PUSH
58448: FOR_IN
58449: IFFALSE 58503
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58451: LD_VAR 0 1
58455: PPUSH
58456: CALL_OW 257
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 4
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: IN
58479: IFFALSE 58501
// SetClass ( un , rand ( 1 , 4 ) ) ;
58481: LD_VAR 0 1
58485: PPUSH
58486: LD_INT 1
58488: PPUSH
58489: LD_INT 4
58491: PPUSH
58492: CALL_OW 12
58496: PPUSH
58497: CALL_OW 336
58501: GO 58448
58503: POP
58504: POP
// end ;
58505: PPOPN 1
58507: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58508: LD_EXP 112
58512: PUSH
58513: LD_EXP 124
58517: AND
58518: IFFALSE 58597
58520: GO 58522
58522: DISABLE
58523: LD_INT 0
58525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58526: LD_ADDR_VAR 0 1
58530: PUSH
58531: LD_INT 22
58533: PUSH
58534: LD_OWVAR 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 21
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PPUSH
58557: CALL_OW 69
58561: ST_TO_ADDR
// if not tmp then
58562: LD_VAR 0 1
58566: NOT
58567: IFFALSE 58571
// exit ;
58569: GO 58597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58571: LD_VAR 0 1
58575: PUSH
58576: LD_INT 1
58578: PPUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: CALL_OW 12
58588: ARRAY
58589: PPUSH
58590: LD_INT 100
58592: PPUSH
58593: CALL_OW 234
// end ;
58597: PPOPN 1
58599: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58600: LD_EXP 112
58604: PUSH
58605: LD_EXP 126
58609: AND
58610: IFFALSE 58708
58612: GO 58614
58614: DISABLE
58615: LD_INT 0
58617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58618: LD_ADDR_VAR 0 1
58622: PUSH
58623: LD_INT 22
58625: PUSH
58626: LD_OWVAR 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 21
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PPUSH
58649: CALL_OW 69
58653: ST_TO_ADDR
// if not tmp then
58654: LD_VAR 0 1
58658: NOT
58659: IFFALSE 58663
// exit ;
58661: GO 58708
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58663: LD_VAR 0 1
58667: PUSH
58668: LD_INT 1
58670: PPUSH
58671: LD_VAR 0 1
58675: PPUSH
58676: CALL_OW 12
58680: ARRAY
58681: PPUSH
58682: LD_INT 1
58684: PPUSH
58685: LD_INT 4
58687: PPUSH
58688: CALL_OW 12
58692: PPUSH
58693: LD_INT 3000
58695: PPUSH
58696: LD_INT 9000
58698: PPUSH
58699: CALL_OW 12
58703: PPUSH
58704: CALL_OW 492
// end ;
58708: PPOPN 1
58710: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58711: LD_EXP 112
58715: PUSH
58716: LD_EXP 127
58720: AND
58721: IFFALSE 58741
58723: GO 58725
58725: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58726: LD_INT 1
58728: PPUSH
58729: LD_OWVAR 2
58733: PPUSH
58734: LD_INT 0
58736: PPUSH
58737: CALL_OW 324
58741: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58742: LD_EXP 112
58746: PUSH
58747: LD_EXP 128
58751: AND
58752: IFFALSE 58835
58754: GO 58756
58756: DISABLE
58757: LD_INT 0
58759: PPUSH
58760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58761: LD_ADDR_VAR 0 2
58765: PUSH
58766: LD_INT 22
58768: PUSH
58769: LD_OWVAR 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 21
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PPUSH
58792: CALL_OW 69
58796: ST_TO_ADDR
// if not tmp then
58797: LD_VAR 0 2
58801: NOT
58802: IFFALSE 58806
// exit ;
58804: GO 58835
// for i in tmp do
58806: LD_ADDR_VAR 0 1
58810: PUSH
58811: LD_VAR 0 2
58815: PUSH
58816: FOR_IN
58817: IFFALSE 58833
// SetBLevel ( i , 10 ) ;
58819: LD_VAR 0 1
58823: PPUSH
58824: LD_INT 10
58826: PPUSH
58827: CALL_OW 241
58831: GO 58816
58833: POP
58834: POP
// end ;
58835: PPOPN 2
58837: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58838: LD_EXP 112
58842: PUSH
58843: LD_EXP 129
58847: AND
58848: IFFALSE 58959
58850: GO 58852
58852: DISABLE
58853: LD_INT 0
58855: PPUSH
58856: PPUSH
58857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58858: LD_ADDR_VAR 0 3
58862: PUSH
58863: LD_INT 22
58865: PUSH
58866: LD_OWVAR 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 25
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PPUSH
58889: CALL_OW 69
58893: ST_TO_ADDR
// if not tmp then
58894: LD_VAR 0 3
58898: NOT
58899: IFFALSE 58903
// exit ;
58901: GO 58959
// un := tmp [ rand ( 1 , tmp ) ] ;
58903: LD_ADDR_VAR 0 2
58907: PUSH
58908: LD_VAR 0 3
58912: PUSH
58913: LD_INT 1
58915: PPUSH
58916: LD_VAR 0 3
58920: PPUSH
58921: CALL_OW 12
58925: ARRAY
58926: ST_TO_ADDR
// if Crawls ( un ) then
58927: LD_VAR 0 2
58931: PPUSH
58932: CALL_OW 318
58936: IFFALSE 58947
// ComWalk ( un ) ;
58938: LD_VAR 0 2
58942: PPUSH
58943: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58947: LD_VAR 0 2
58951: PPUSH
58952: LD_INT 5
58954: PPUSH
58955: CALL_OW 336
// end ;
58959: PPOPN 3
58961: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58962: LD_EXP 112
58966: PUSH
58967: LD_EXP 130
58971: AND
58972: PUSH
58973: LD_OWVAR 67
58977: PUSH
58978: LD_INT 4
58980: LESS
58981: AND
58982: IFFALSE 59001
58984: GO 58986
58986: DISABLE
// begin Difficulty := Difficulty + 1 ;
58987: LD_ADDR_OWVAR 67
58991: PUSH
58992: LD_OWVAR 67
58996: PUSH
58997: LD_INT 1
58999: PLUS
59000: ST_TO_ADDR
// end ;
59001: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59002: LD_EXP 112
59006: PUSH
59007: LD_EXP 131
59011: AND
59012: IFFALSE 59115
59014: GO 59016
59016: DISABLE
59017: LD_INT 0
59019: PPUSH
// begin for i := 1 to 5 do
59020: LD_ADDR_VAR 0 1
59024: PUSH
59025: DOUBLE
59026: LD_INT 1
59028: DEC
59029: ST_TO_ADDR
59030: LD_INT 5
59032: PUSH
59033: FOR_TO
59034: IFFALSE 59113
// begin uc_nation := nation_nature ;
59036: LD_ADDR_OWVAR 21
59040: PUSH
59041: LD_INT 0
59043: ST_TO_ADDR
// uc_side := 0 ;
59044: LD_ADDR_OWVAR 20
59048: PUSH
59049: LD_INT 0
59051: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59052: LD_ADDR_OWVAR 29
59056: PUSH
59057: LD_INT 12
59059: PUSH
59060: LD_INT 12
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: ST_TO_ADDR
// hc_agressivity := 20 ;
59067: LD_ADDR_OWVAR 35
59071: PUSH
59072: LD_INT 20
59074: ST_TO_ADDR
// hc_class := class_tiger ;
59075: LD_ADDR_OWVAR 28
59079: PUSH
59080: LD_INT 14
59082: ST_TO_ADDR
// hc_gallery :=  ;
59083: LD_ADDR_OWVAR 33
59087: PUSH
59088: LD_STRING 
59090: ST_TO_ADDR
// hc_name :=  ;
59091: LD_ADDR_OWVAR 26
59095: PUSH
59096: LD_STRING 
59098: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59099: CALL_OW 44
59103: PPUSH
59104: LD_INT 0
59106: PPUSH
59107: CALL_OW 51
// end ;
59111: GO 59033
59113: POP
59114: POP
// end ;
59115: PPOPN 1
59117: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59118: LD_EXP 112
59122: PUSH
59123: LD_EXP 132
59127: AND
59128: IFFALSE 59137
59130: GO 59132
59132: DISABLE
// StreamSibBomb ;
59133: CALL 59138 0 0
59137: END
// export function StreamSibBomb ; var i , x , y ; begin
59138: LD_INT 0
59140: PPUSH
59141: PPUSH
59142: PPUSH
59143: PPUSH
// result := false ;
59144: LD_ADDR_VAR 0 1
59148: PUSH
59149: LD_INT 0
59151: ST_TO_ADDR
// for i := 1 to 16 do
59152: LD_ADDR_VAR 0 2
59156: PUSH
59157: DOUBLE
59158: LD_INT 1
59160: DEC
59161: ST_TO_ADDR
59162: LD_INT 16
59164: PUSH
59165: FOR_TO
59166: IFFALSE 59365
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59168: LD_ADDR_VAR 0 3
59172: PUSH
59173: LD_INT 10
59175: PUSH
59176: LD_INT 20
59178: PUSH
59179: LD_INT 30
59181: PUSH
59182: LD_INT 40
59184: PUSH
59185: LD_INT 50
59187: PUSH
59188: LD_INT 60
59190: PUSH
59191: LD_INT 70
59193: PUSH
59194: LD_INT 80
59196: PUSH
59197: LD_INT 90
59199: PUSH
59200: LD_INT 100
59202: PUSH
59203: LD_INT 110
59205: PUSH
59206: LD_INT 120
59208: PUSH
59209: LD_INT 130
59211: PUSH
59212: LD_INT 140
59214: PUSH
59215: LD_INT 150
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PPUSH
59238: LD_INT 15
59240: PPUSH
59241: CALL_OW 12
59245: ARRAY
59246: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59247: LD_ADDR_VAR 0 4
59251: PUSH
59252: LD_INT 10
59254: PUSH
59255: LD_INT 20
59257: PUSH
59258: LD_INT 30
59260: PUSH
59261: LD_INT 40
59263: PUSH
59264: LD_INT 50
59266: PUSH
59267: LD_INT 60
59269: PUSH
59270: LD_INT 70
59272: PUSH
59273: LD_INT 80
59275: PUSH
59276: LD_INT 90
59278: PUSH
59279: LD_INT 100
59281: PUSH
59282: LD_INT 110
59284: PUSH
59285: LD_INT 120
59287: PUSH
59288: LD_INT 130
59290: PUSH
59291: LD_INT 140
59293: PUSH
59294: LD_INT 150
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PPUSH
59317: LD_INT 15
59319: PPUSH
59320: CALL_OW 12
59324: ARRAY
59325: ST_TO_ADDR
// if ValidHex ( x , y ) then
59326: LD_VAR 0 3
59330: PPUSH
59331: LD_VAR 0 4
59335: PPUSH
59336: CALL_OW 488
59340: IFFALSE 59363
// begin result := [ x , y ] ;
59342: LD_ADDR_VAR 0 1
59346: PUSH
59347: LD_VAR 0 3
59351: PUSH
59352: LD_VAR 0 4
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// break ;
59361: GO 59365
// end ; end ;
59363: GO 59165
59365: POP
59366: POP
// if result then
59367: LD_VAR 0 1
59371: IFFALSE 59431
// begin ToLua ( playSibBomb() ) ;
59373: LD_STRING playSibBomb()
59375: PPUSH
59376: CALL_OW 559
// wait ( 0 0$14 ) ;
59380: LD_INT 490
59382: PPUSH
59383: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59387: LD_VAR 0 1
59391: PUSH
59392: LD_INT 1
59394: ARRAY
59395: PPUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 2
59403: ARRAY
59404: PPUSH
59405: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59409: LD_VAR 0 1
59413: PUSH
59414: LD_INT 1
59416: ARRAY
59417: PPUSH
59418: LD_VAR 0 1
59422: PUSH
59423: LD_INT 2
59425: ARRAY
59426: PPUSH
59427: CALL_OW 429
// end ; end ;
59431: LD_VAR 0 1
59435: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59436: LD_EXP 112
59440: PUSH
59441: LD_EXP 134
59445: AND
59446: IFFALSE 59458
59448: GO 59450
59450: DISABLE
// YouLost (  ) ;
59451: LD_STRING 
59453: PPUSH
59454: CALL_OW 104
59458: END
// every 0 0$1 trigger StreamModeActive and sFog do
59459: LD_EXP 112
59463: PUSH
59464: LD_EXP 133
59468: AND
59469: IFFALSE 59483
59471: GO 59473
59473: DISABLE
// FogOff ( your_side ) ;
59474: LD_OWVAR 2
59478: PPUSH
59479: CALL_OW 344
59483: END
// every 0 0$1 trigger StreamModeActive and sSun do
59484: LD_EXP 112
59488: PUSH
59489: LD_EXP 135
59493: AND
59494: IFFALSE 59522
59496: GO 59498
59498: DISABLE
// begin solar_recharge_percent := 0 ;
59499: LD_ADDR_OWVAR 79
59503: PUSH
59504: LD_INT 0
59506: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59507: LD_INT 10500
59509: PPUSH
59510: CALL_OW 67
// solar_recharge_percent := 100 ;
59514: LD_ADDR_OWVAR 79
59518: PUSH
59519: LD_INT 100
59521: ST_TO_ADDR
// end ;
59522: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59523: LD_EXP 112
59527: PUSH
59528: LD_EXP 136
59532: AND
59533: IFFALSE 59772
59535: GO 59537
59537: DISABLE
59538: LD_INT 0
59540: PPUSH
59541: PPUSH
59542: PPUSH
// begin tmp := [ ] ;
59543: LD_ADDR_VAR 0 3
59547: PUSH
59548: EMPTY
59549: ST_TO_ADDR
// for i := 1 to 6 do
59550: LD_ADDR_VAR 0 1
59554: PUSH
59555: DOUBLE
59556: LD_INT 1
59558: DEC
59559: ST_TO_ADDR
59560: LD_INT 6
59562: PUSH
59563: FOR_TO
59564: IFFALSE 59669
// begin uc_nation := nation_nature ;
59566: LD_ADDR_OWVAR 21
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// uc_side := 0 ;
59574: LD_ADDR_OWVAR 20
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59582: LD_ADDR_OWVAR 29
59586: PUSH
59587: LD_INT 12
59589: PUSH
59590: LD_INT 12
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: ST_TO_ADDR
// hc_agressivity := 20 ;
59597: LD_ADDR_OWVAR 35
59601: PUSH
59602: LD_INT 20
59604: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59605: LD_ADDR_OWVAR 28
59609: PUSH
59610: LD_INT 17
59612: ST_TO_ADDR
// hc_gallery :=  ;
59613: LD_ADDR_OWVAR 33
59617: PUSH
59618: LD_STRING 
59620: ST_TO_ADDR
// hc_name :=  ;
59621: LD_ADDR_OWVAR 26
59625: PUSH
59626: LD_STRING 
59628: ST_TO_ADDR
// un := CreateHuman ;
59629: LD_ADDR_VAR 0 2
59633: PUSH
59634: CALL_OW 44
59638: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59639: LD_VAR 0 2
59643: PPUSH
59644: LD_INT 1
59646: PPUSH
59647: CALL_OW 51
// tmp := tmp ^ un ;
59651: LD_ADDR_VAR 0 3
59655: PUSH
59656: LD_VAR 0 3
59660: PUSH
59661: LD_VAR 0 2
59665: ADD
59666: ST_TO_ADDR
// end ;
59667: GO 59563
59669: POP
59670: POP
// repeat wait ( 0 0$1 ) ;
59671: LD_INT 35
59673: PPUSH
59674: CALL_OW 67
// for un in tmp do
59678: LD_ADDR_VAR 0 2
59682: PUSH
59683: LD_VAR 0 3
59687: PUSH
59688: FOR_IN
59689: IFFALSE 59763
// begin if IsDead ( un ) then
59691: LD_VAR 0 2
59695: PPUSH
59696: CALL_OW 301
59700: IFFALSE 59720
// begin tmp := tmp diff un ;
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: LD_VAR 0 3
59711: PUSH
59712: LD_VAR 0 2
59716: DIFF
59717: ST_TO_ADDR
// continue ;
59718: GO 59688
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59720: LD_VAR 0 2
59724: PPUSH
59725: LD_INT 3
59727: PUSH
59728: LD_INT 22
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PPUSH
59742: CALL_OW 69
59746: PPUSH
59747: LD_VAR 0 2
59751: PPUSH
59752: CALL_OW 74
59756: PPUSH
59757: CALL_OW 115
// end ;
59761: GO 59688
59763: POP
59764: POP
// until not tmp ;
59765: LD_VAR 0 3
59769: NOT
59770: IFFALSE 59671
// end ;
59772: PPOPN 3
59774: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59775: LD_EXP 112
59779: PUSH
59780: LD_EXP 137
59784: AND
59785: IFFALSE 59839
59787: GO 59789
59789: DISABLE
// begin ToLua ( displayTroll(); ) ;
59790: LD_STRING displayTroll();
59792: PPUSH
59793: CALL_OW 559
// wait ( 3 3$00 ) ;
59797: LD_INT 6300
59799: PPUSH
59800: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59804: LD_STRING hideTroll();
59806: PPUSH
59807: CALL_OW 559
// wait ( 1 1$00 ) ;
59811: LD_INT 2100
59813: PPUSH
59814: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59818: LD_STRING displayTroll();
59820: PPUSH
59821: CALL_OW 559
// wait ( 1 1$00 ) ;
59825: LD_INT 2100
59827: PPUSH
59828: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59832: LD_STRING hideTroll();
59834: PPUSH
59835: CALL_OW 559
// end ;
59839: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59840: LD_EXP 112
59844: PUSH
59845: LD_EXP 138
59849: AND
59850: IFFALSE 59913
59852: GO 59854
59854: DISABLE
59855: LD_INT 0
59857: PPUSH
// begin p := 0 ;
59858: LD_ADDR_VAR 0 1
59862: PUSH
59863: LD_INT 0
59865: ST_TO_ADDR
// repeat game_speed := 1 ;
59866: LD_ADDR_OWVAR 65
59870: PUSH
59871: LD_INT 1
59873: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59874: LD_INT 35
59876: PPUSH
59877: CALL_OW 67
// p := p + 1 ;
59881: LD_ADDR_VAR 0 1
59885: PUSH
59886: LD_VAR 0 1
59890: PUSH
59891: LD_INT 1
59893: PLUS
59894: ST_TO_ADDR
// until p >= 60 ;
59895: LD_VAR 0 1
59899: PUSH
59900: LD_INT 60
59902: GREATEREQUAL
59903: IFFALSE 59866
// game_speed := 4 ;
59905: LD_ADDR_OWVAR 65
59909: PUSH
59910: LD_INT 4
59912: ST_TO_ADDR
// end ;
59913: PPOPN 1
59915: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59916: LD_EXP 112
59920: PUSH
59921: LD_EXP 139
59925: AND
59926: IFFALSE 60072
59928: GO 59930
59930: DISABLE
59931: LD_INT 0
59933: PPUSH
59934: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59935: LD_ADDR_VAR 0 1
59939: PUSH
59940: LD_INT 22
59942: PUSH
59943: LD_OWVAR 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 30
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 30
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PPUSH
59984: CALL_OW 69
59988: ST_TO_ADDR
// if not depot then
59989: LD_VAR 0 1
59993: NOT
59994: IFFALSE 59998
// exit ;
59996: GO 60072
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59998: LD_ADDR_VAR 0 2
60002: PUSH
60003: LD_VAR 0 1
60007: PUSH
60008: LD_INT 1
60010: PPUSH
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 12
60020: ARRAY
60021: PPUSH
60022: CALL_OW 274
60026: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60027: LD_VAR 0 2
60031: PPUSH
60032: LD_INT 1
60034: PPUSH
60035: LD_INT 0
60037: PPUSH
60038: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60042: LD_VAR 0 2
60046: PPUSH
60047: LD_INT 2
60049: PPUSH
60050: LD_INT 0
60052: PPUSH
60053: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60057: LD_VAR 0 2
60061: PPUSH
60062: LD_INT 3
60064: PPUSH
60065: LD_INT 0
60067: PPUSH
60068: CALL_OW 277
// end ;
60072: PPOPN 2
60074: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60075: LD_EXP 112
60079: PUSH
60080: LD_EXP 140
60084: AND
60085: IFFALSE 60182
60087: GO 60089
60089: DISABLE
60090: LD_INT 0
60092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60093: LD_ADDR_VAR 0 1
60097: PUSH
60098: LD_INT 22
60100: PUSH
60101: LD_OWVAR 2
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 21
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: PUSH
60123: LD_INT 23
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: PPUSH
60142: CALL_OW 69
60146: ST_TO_ADDR
// if not tmp then
60147: LD_VAR 0 1
60151: NOT
60152: IFFALSE 60156
// exit ;
60154: GO 60182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60156: LD_VAR 0 1
60160: PUSH
60161: LD_INT 1
60163: PPUSH
60164: LD_VAR 0 1
60168: PPUSH
60169: CALL_OW 12
60173: ARRAY
60174: PPUSH
60175: LD_INT 200
60177: PPUSH
60178: CALL_OW 234
// end ;
60182: PPOPN 1
60184: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60185: LD_EXP 112
60189: PUSH
60190: LD_EXP 141
60194: AND
60195: IFFALSE 60274
60197: GO 60199
60199: DISABLE
60200: LD_INT 0
60202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60203: LD_ADDR_VAR 0 1
60207: PUSH
60208: LD_INT 22
60210: PUSH
60211: LD_OWVAR 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 21
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PPUSH
60234: CALL_OW 69
60238: ST_TO_ADDR
// if not tmp then
60239: LD_VAR 0 1
60243: NOT
60244: IFFALSE 60248
// exit ;
60246: GO 60274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60248: LD_VAR 0 1
60252: PUSH
60253: LD_INT 1
60255: PPUSH
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 12
60265: ARRAY
60266: PPUSH
60267: LD_INT 60
60269: PPUSH
60270: CALL_OW 234
// end ;
60274: PPOPN 1
60276: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60277: LD_EXP 112
60281: PUSH
60282: LD_EXP 142
60286: AND
60287: IFFALSE 60386
60289: GO 60291
60291: DISABLE
60292: LD_INT 0
60294: PPUSH
60295: PPUSH
// begin enable ;
60296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60297: LD_ADDR_VAR 0 1
60301: PUSH
60302: LD_INT 22
60304: PUSH
60305: LD_OWVAR 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 61
60316: PUSH
60317: EMPTY
60318: LIST
60319: PUSH
60320: LD_INT 33
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: PPUSH
60335: CALL_OW 69
60339: ST_TO_ADDR
// if not tmp then
60340: LD_VAR 0 1
60344: NOT
60345: IFFALSE 60349
// exit ;
60347: GO 60386
// for i in tmp do
60349: LD_ADDR_VAR 0 2
60353: PUSH
60354: LD_VAR 0 1
60358: PUSH
60359: FOR_IN
60360: IFFALSE 60384
// if IsControledBy ( i ) then
60362: LD_VAR 0 2
60366: PPUSH
60367: CALL_OW 312
60371: IFFALSE 60382
// ComUnlink ( i ) ;
60373: LD_VAR 0 2
60377: PPUSH
60378: CALL_OW 136
60382: GO 60359
60384: POP
60385: POP
// end ;
60386: PPOPN 2
60388: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60389: LD_EXP 112
60393: PUSH
60394: LD_EXP 143
60398: AND
60399: IFFALSE 60539
60401: GO 60403
60403: DISABLE
60404: LD_INT 0
60406: PPUSH
60407: PPUSH
// begin ToLua ( displayPowell(); ) ;
60408: LD_STRING displayPowell();
60410: PPUSH
60411: CALL_OW 559
// uc_side := 0 ;
60415: LD_ADDR_OWVAR 20
60419: PUSH
60420: LD_INT 0
60422: ST_TO_ADDR
// uc_nation := 2 ;
60423: LD_ADDR_OWVAR 21
60427: PUSH
60428: LD_INT 2
60430: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60431: LD_ADDR_OWVAR 37
60435: PUSH
60436: LD_INT 14
60438: ST_TO_ADDR
// vc_engine := engine_siberite ;
60439: LD_ADDR_OWVAR 39
60443: PUSH
60444: LD_INT 3
60446: ST_TO_ADDR
// vc_control := control_apeman ;
60447: LD_ADDR_OWVAR 38
60451: PUSH
60452: LD_INT 5
60454: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60455: LD_ADDR_OWVAR 40
60459: PUSH
60460: LD_INT 29
60462: ST_TO_ADDR
// un := CreateVehicle ;
60463: LD_ADDR_VAR 0 2
60467: PUSH
60468: CALL_OW 45
60472: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60473: LD_VAR 0 2
60477: PPUSH
60478: LD_INT 1
60480: PPUSH
60481: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60485: LD_INT 35
60487: PPUSH
60488: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_INT 22
60499: PUSH
60500: LD_OWVAR 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PPUSH
60509: CALL_OW 69
60513: PPUSH
60514: LD_VAR 0 2
60518: PPUSH
60519: CALL_OW 74
60523: PPUSH
60524: CALL_OW 115
// until IsDead ( un ) ;
60528: LD_VAR 0 2
60532: PPUSH
60533: CALL_OW 301
60537: IFFALSE 60485
// end ;
60539: PPOPN 2
60541: END
// every 0 0$1 trigger StreamModeActive and sStu do
60542: LD_EXP 112
60546: PUSH
60547: LD_EXP 151
60551: AND
60552: IFFALSE 60568
60554: GO 60556
60556: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60557: LD_STRING displayStucuk();
60559: PPUSH
60560: CALL_OW 559
// ResetFog ;
60564: CALL_OW 335
// end ;
60568: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60569: LD_EXP 112
60573: PUSH
60574: LD_EXP 144
60578: AND
60579: IFFALSE 60720
60581: GO 60583
60583: DISABLE
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60588: LD_ADDR_VAR 0 2
60592: PUSH
60593: LD_INT 22
60595: PUSH
60596: LD_OWVAR 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 21
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PPUSH
60619: CALL_OW 69
60623: ST_TO_ADDR
// if not tmp then
60624: LD_VAR 0 2
60628: NOT
60629: IFFALSE 60633
// exit ;
60631: GO 60720
// un := tmp [ rand ( 1 , tmp ) ] ;
60633: LD_ADDR_VAR 0 1
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: LD_INT 1
60645: PPUSH
60646: LD_VAR 0 2
60650: PPUSH
60651: CALL_OW 12
60655: ARRAY
60656: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60657: LD_VAR 0 1
60661: PPUSH
60662: LD_INT 0
60664: PPUSH
60665: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60669: LD_VAR 0 1
60673: PPUSH
60674: LD_OWVAR 3
60678: PUSH
60679: LD_VAR 0 1
60683: DIFF
60684: PPUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 74
60694: PPUSH
60695: CALL_OW 115
// wait ( 0 0$20 ) ;
60699: LD_INT 700
60701: PPUSH
60702: CALL_OW 67
// SetSide ( un , your_side ) ;
60706: LD_VAR 0 1
60710: PPUSH
60711: LD_OWVAR 2
60715: PPUSH
60716: CALL_OW 235
// end ;
60720: PPOPN 2
60722: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60723: LD_EXP 112
60727: PUSH
60728: LD_EXP 145
60732: AND
60733: IFFALSE 60839
60735: GO 60737
60737: DISABLE
60738: LD_INT 0
60740: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60741: LD_ADDR_VAR 0 1
60745: PUSH
60746: LD_INT 22
60748: PUSH
60749: LD_OWVAR 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 30
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 30
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PPUSH
60790: CALL_OW 69
60794: ST_TO_ADDR
// if not depot then
60795: LD_VAR 0 1
60799: NOT
60800: IFFALSE 60804
// exit ;
60802: GO 60839
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60804: LD_VAR 0 1
60808: PUSH
60809: LD_INT 1
60811: ARRAY
60812: PPUSH
60813: CALL_OW 250
60817: PPUSH
60818: LD_VAR 0 1
60822: PUSH
60823: LD_INT 1
60825: ARRAY
60826: PPUSH
60827: CALL_OW 251
60831: PPUSH
60832: LD_INT 70
60834: PPUSH
60835: CALL_OW 495
// end ;
60839: PPOPN 1
60841: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60842: LD_EXP 112
60846: PUSH
60847: LD_EXP 146
60851: AND
60852: IFFALSE 61063
60854: GO 60856
60856: DISABLE
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60864: LD_ADDR_VAR 0 5
60868: PUSH
60869: LD_INT 22
60871: PUSH
60872: LD_OWVAR 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 21
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PPUSH
60895: CALL_OW 69
60899: ST_TO_ADDR
// if not tmp then
60900: LD_VAR 0 5
60904: NOT
60905: IFFALSE 60909
// exit ;
60907: GO 61063
// for i in tmp do
60909: LD_ADDR_VAR 0 1
60913: PUSH
60914: LD_VAR 0 5
60918: PUSH
60919: FOR_IN
60920: IFFALSE 61061
// begin d := rand ( 0 , 5 ) ;
60922: LD_ADDR_VAR 0 4
60926: PUSH
60927: LD_INT 0
60929: PPUSH
60930: LD_INT 5
60932: PPUSH
60933: CALL_OW 12
60937: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: LD_VAR 0 1
60947: PPUSH
60948: CALL_OW 250
60952: PPUSH
60953: LD_VAR 0 4
60957: PPUSH
60958: LD_INT 3
60960: PPUSH
60961: LD_INT 12
60963: PPUSH
60964: CALL_OW 12
60968: PPUSH
60969: CALL_OW 272
60973: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60974: LD_ADDR_VAR 0 3
60978: PUSH
60979: LD_VAR 0 1
60983: PPUSH
60984: CALL_OW 251
60988: PPUSH
60989: LD_VAR 0 4
60993: PPUSH
60994: LD_INT 3
60996: PPUSH
60997: LD_INT 12
60999: PPUSH
61000: CALL_OW 12
61004: PPUSH
61005: CALL_OW 273
61009: ST_TO_ADDR
// if ValidHex ( x , y ) then
61010: LD_VAR 0 2
61014: PPUSH
61015: LD_VAR 0 3
61019: PPUSH
61020: CALL_OW 488
61024: IFFALSE 61059
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61026: LD_VAR 0 1
61030: PPUSH
61031: LD_VAR 0 2
61035: PPUSH
61036: LD_VAR 0 3
61040: PPUSH
61041: LD_INT 3
61043: PPUSH
61044: LD_INT 6
61046: PPUSH
61047: CALL_OW 12
61051: PPUSH
61052: LD_INT 1
61054: PPUSH
61055: CALL_OW 483
// end ;
61059: GO 60919
61061: POP
61062: POP
// end ;
61063: PPOPN 5
61065: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61066: LD_EXP 112
61070: PUSH
61071: LD_EXP 147
61075: AND
61076: IFFALSE 61170
61078: GO 61080
61080: DISABLE
61081: LD_INT 0
61083: PPUSH
61084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61085: LD_ADDR_VAR 0 2
61089: PUSH
61090: LD_INT 22
61092: PUSH
61093: LD_OWVAR 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 32
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 21
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: PPUSH
61127: CALL_OW 69
61131: ST_TO_ADDR
// if not tmp then
61132: LD_VAR 0 2
61136: NOT
61137: IFFALSE 61141
// exit ;
61139: GO 61170
// for i in tmp do
61141: LD_ADDR_VAR 0 1
61145: PUSH
61146: LD_VAR 0 2
61150: PUSH
61151: FOR_IN
61152: IFFALSE 61168
// SetFuel ( i , 0 ) ;
61154: LD_VAR 0 1
61158: PPUSH
61159: LD_INT 0
61161: PPUSH
61162: CALL_OW 240
61166: GO 61151
61168: POP
61169: POP
// end ;
61170: PPOPN 2
61172: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61173: LD_EXP 112
61177: PUSH
61178: LD_EXP 148
61182: AND
61183: IFFALSE 61249
61185: GO 61187
61187: DISABLE
61188: LD_INT 0
61190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61191: LD_ADDR_VAR 0 1
61195: PUSH
61196: LD_INT 22
61198: PUSH
61199: LD_OWVAR 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 30
61210: PUSH
61211: LD_INT 29
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PPUSH
61222: CALL_OW 69
61226: ST_TO_ADDR
// if not tmp then
61227: LD_VAR 0 1
61231: NOT
61232: IFFALSE 61236
// exit ;
61234: GO 61249
// DestroyUnit ( tmp [ 1 ] ) ;
61236: LD_VAR 0 1
61240: PUSH
61241: LD_INT 1
61243: ARRAY
61244: PPUSH
61245: CALL_OW 65
// end ;
61249: PPOPN 1
61251: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61252: LD_EXP 112
61256: PUSH
61257: LD_EXP 150
61261: AND
61262: IFFALSE 61391
61264: GO 61266
61266: DISABLE
61267: LD_INT 0
61269: PPUSH
// begin uc_side := 0 ;
61270: LD_ADDR_OWVAR 20
61274: PUSH
61275: LD_INT 0
61277: ST_TO_ADDR
// uc_nation := nation_arabian ;
61278: LD_ADDR_OWVAR 21
61282: PUSH
61283: LD_INT 2
61285: ST_TO_ADDR
// hc_gallery :=  ;
61286: LD_ADDR_OWVAR 33
61290: PUSH
61291: LD_STRING 
61293: ST_TO_ADDR
// hc_name :=  ;
61294: LD_ADDR_OWVAR 26
61298: PUSH
61299: LD_STRING 
61301: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61302: LD_INT 1
61304: PPUSH
61305: LD_INT 11
61307: PPUSH
61308: LD_INT 10
61310: PPUSH
61311: CALL_OW 380
// un := CreateHuman ;
61315: LD_ADDR_VAR 0 1
61319: PUSH
61320: CALL_OW 44
61324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61325: LD_VAR 0 1
61329: PPUSH
61330: LD_INT 1
61332: PPUSH
61333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61337: LD_INT 35
61339: PPUSH
61340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61344: LD_VAR 0 1
61348: PPUSH
61349: LD_INT 22
61351: PUSH
61352: LD_OWVAR 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PPUSH
61361: CALL_OW 69
61365: PPUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 74
61375: PPUSH
61376: CALL_OW 115
// until IsDead ( un ) ;
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL_OW 301
61389: IFFALSE 61337
// end ;
61391: PPOPN 1
61393: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61394: LD_EXP 112
61398: PUSH
61399: LD_EXP 152
61403: AND
61404: IFFALSE 61416
61406: GO 61408
61408: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61409: LD_STRING earthquake(getX(game), 0, 32)
61411: PPUSH
61412: CALL_OW 559
61416: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61417: LD_EXP 112
61421: PUSH
61422: LD_EXP 153
61426: AND
61427: IFFALSE 61518
61429: GO 61431
61431: DISABLE
61432: LD_INT 0
61434: PPUSH
// begin enable ;
61435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61436: LD_ADDR_VAR 0 1
61440: PUSH
61441: LD_INT 22
61443: PUSH
61444: LD_OWVAR 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 21
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 33
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: PPUSH
61478: CALL_OW 69
61482: ST_TO_ADDR
// if not tmp then
61483: LD_VAR 0 1
61487: NOT
61488: IFFALSE 61492
// exit ;
61490: GO 61518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61492: LD_VAR 0 1
61496: PUSH
61497: LD_INT 1
61499: PPUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 12
61509: ARRAY
61510: PPUSH
61511: LD_INT 1
61513: PPUSH
61514: CALL_OW 234
// end ;
61518: PPOPN 1
61520: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61521: LD_EXP 112
61525: PUSH
61526: LD_EXP 154
61530: AND
61531: IFFALSE 61672
61533: GO 61535
61535: DISABLE
61536: LD_INT 0
61538: PPUSH
61539: PPUSH
61540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61541: LD_ADDR_VAR 0 3
61545: PUSH
61546: LD_INT 22
61548: PUSH
61549: LD_OWVAR 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 25
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PPUSH
61572: CALL_OW 69
61576: ST_TO_ADDR
// if not tmp then
61577: LD_VAR 0 3
61581: NOT
61582: IFFALSE 61586
// exit ;
61584: GO 61672
// un := tmp [ rand ( 1 , tmp ) ] ;
61586: LD_ADDR_VAR 0 2
61590: PUSH
61591: LD_VAR 0 3
61595: PUSH
61596: LD_INT 1
61598: PPUSH
61599: LD_VAR 0 3
61603: PPUSH
61604: CALL_OW 12
61608: ARRAY
61609: ST_TO_ADDR
// if Crawls ( un ) then
61610: LD_VAR 0 2
61614: PPUSH
61615: CALL_OW 318
61619: IFFALSE 61630
// ComWalk ( un ) ;
61621: LD_VAR 0 2
61625: PPUSH
61626: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61630: LD_VAR 0 2
61634: PPUSH
61635: LD_INT 9
61637: PPUSH
61638: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61642: LD_INT 28
61644: PPUSH
61645: LD_OWVAR 2
61649: PPUSH
61650: LD_INT 2
61652: PPUSH
61653: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61657: LD_INT 29
61659: PPUSH
61660: LD_OWVAR 2
61664: PPUSH
61665: LD_INT 2
61667: PPUSH
61668: CALL_OW 322
// end ;
61672: PPOPN 3
61674: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61675: LD_EXP 112
61679: PUSH
61680: LD_EXP 155
61684: AND
61685: IFFALSE 61796
61687: GO 61689
61689: DISABLE
61690: LD_INT 0
61692: PPUSH
61693: PPUSH
61694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61695: LD_ADDR_VAR 0 3
61699: PUSH
61700: LD_INT 22
61702: PUSH
61703: LD_OWVAR 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 25
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PPUSH
61726: CALL_OW 69
61730: ST_TO_ADDR
// if not tmp then
61731: LD_VAR 0 3
61735: NOT
61736: IFFALSE 61740
// exit ;
61738: GO 61796
// un := tmp [ rand ( 1 , tmp ) ] ;
61740: LD_ADDR_VAR 0 2
61744: PUSH
61745: LD_VAR 0 3
61749: PUSH
61750: LD_INT 1
61752: PPUSH
61753: LD_VAR 0 3
61757: PPUSH
61758: CALL_OW 12
61762: ARRAY
61763: ST_TO_ADDR
// if Crawls ( un ) then
61764: LD_VAR 0 2
61768: PPUSH
61769: CALL_OW 318
61773: IFFALSE 61784
// ComWalk ( un ) ;
61775: LD_VAR 0 2
61779: PPUSH
61780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61784: LD_VAR 0 2
61788: PPUSH
61789: LD_INT 8
61791: PPUSH
61792: CALL_OW 336
// end ;
61796: PPOPN 3
61798: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61799: LD_EXP 112
61803: PUSH
61804: LD_EXP 156
61808: AND
61809: IFFALSE 61953
61811: GO 61813
61813: DISABLE
61814: LD_INT 0
61816: PPUSH
61817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61818: LD_ADDR_VAR 0 2
61822: PUSH
61823: LD_INT 22
61825: PUSH
61826: LD_OWVAR 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 21
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 34
61850: PUSH
61851: LD_INT 12
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 34
61860: PUSH
61861: LD_INT 51
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 34
61870: PUSH
61871: LD_INT 32
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: PPUSH
61889: CALL_OW 69
61893: ST_TO_ADDR
// if not tmp then
61894: LD_VAR 0 2
61898: NOT
61899: IFFALSE 61903
// exit ;
61901: GO 61953
// for i in tmp do
61903: LD_ADDR_VAR 0 1
61907: PUSH
61908: LD_VAR 0 2
61912: PUSH
61913: FOR_IN
61914: IFFALSE 61951
// if GetCargo ( i , mat_artifact ) = 0 then
61916: LD_VAR 0 1
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: CALL_OW 289
61928: PUSH
61929: LD_INT 0
61931: EQUAL
61932: IFFALSE 61949
// SetCargo ( i , mat_siberit , 100 ) ;
61934: LD_VAR 0 1
61938: PPUSH
61939: LD_INT 3
61941: PPUSH
61942: LD_INT 100
61944: PPUSH
61945: CALL_OW 290
61949: GO 61913
61951: POP
61952: POP
// end ;
61953: PPOPN 2
61955: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61956: LD_EXP 112
61960: PUSH
61961: LD_EXP 157
61965: AND
61966: IFFALSE 62149
61968: GO 61970
61970: DISABLE
61971: LD_INT 0
61973: PPUSH
61974: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61975: LD_ADDR_VAR 0 2
61979: PUSH
61980: LD_INT 22
61982: PUSH
61983: LD_OWVAR 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PPUSH
61992: CALL_OW 69
61996: ST_TO_ADDR
// if not tmp then
61997: LD_VAR 0 2
62001: NOT
62002: IFFALSE 62006
// exit ;
62004: GO 62149
// for i := 1 to 2 do
62006: LD_ADDR_VAR 0 1
62010: PUSH
62011: DOUBLE
62012: LD_INT 1
62014: DEC
62015: ST_TO_ADDR
62016: LD_INT 2
62018: PUSH
62019: FOR_TO
62020: IFFALSE 62147
// begin uc_side := your_side ;
62022: LD_ADDR_OWVAR 20
62026: PUSH
62027: LD_OWVAR 2
62031: ST_TO_ADDR
// uc_nation := nation_american ;
62032: LD_ADDR_OWVAR 21
62036: PUSH
62037: LD_INT 1
62039: ST_TO_ADDR
// vc_chassis := us_morphling ;
62040: LD_ADDR_OWVAR 37
62044: PUSH
62045: LD_INT 5
62047: ST_TO_ADDR
// vc_engine := engine_siberite ;
62048: LD_ADDR_OWVAR 39
62052: PUSH
62053: LD_INT 3
62055: ST_TO_ADDR
// vc_control := control_computer ;
62056: LD_ADDR_OWVAR 38
62060: PUSH
62061: LD_INT 3
62063: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62064: LD_ADDR_OWVAR 40
62068: PUSH
62069: LD_INT 10
62071: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62072: LD_VAR 0 2
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: CALL_OW 310
62085: NOT
62086: IFFALSE 62133
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62088: CALL_OW 45
62092: PPUSH
62093: LD_VAR 0 2
62097: PUSH
62098: LD_INT 1
62100: ARRAY
62101: PPUSH
62102: CALL_OW 250
62106: PPUSH
62107: LD_VAR 0 2
62111: PUSH
62112: LD_INT 1
62114: ARRAY
62115: PPUSH
62116: CALL_OW 251
62120: PPUSH
62121: LD_INT 12
62123: PPUSH
62124: LD_INT 1
62126: PPUSH
62127: CALL_OW 50
62131: GO 62145
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62133: CALL_OW 45
62137: PPUSH
62138: LD_INT 1
62140: PPUSH
62141: CALL_OW 51
// end ;
62145: GO 62019
62147: POP
62148: POP
// end ;
62149: PPOPN 2
62151: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62152: LD_EXP 112
62156: PUSH
62157: LD_EXP 158
62161: AND
62162: IFFALSE 62384
62164: GO 62166
62166: DISABLE
62167: LD_INT 0
62169: PPUSH
62170: PPUSH
62171: PPUSH
62172: PPUSH
62173: PPUSH
62174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62175: LD_ADDR_VAR 0 6
62179: PUSH
62180: LD_INT 22
62182: PUSH
62183: LD_OWVAR 2
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 21
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: LD_INT 23
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: PPUSH
62224: CALL_OW 69
62228: ST_TO_ADDR
// if not tmp then
62229: LD_VAR 0 6
62233: NOT
62234: IFFALSE 62238
// exit ;
62236: GO 62384
// s1 := rand ( 1 , 4 ) ;
62238: LD_ADDR_VAR 0 2
62242: PUSH
62243: LD_INT 1
62245: PPUSH
62246: LD_INT 4
62248: PPUSH
62249: CALL_OW 12
62253: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62254: LD_ADDR_VAR 0 4
62258: PUSH
62259: LD_VAR 0 6
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PPUSH
62268: LD_VAR 0 2
62272: PPUSH
62273: CALL_OW 259
62277: ST_TO_ADDR
// if s1 = 1 then
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 1
62285: EQUAL
62286: IFFALSE 62306
// s2 := rand ( 2 , 4 ) else
62288: LD_ADDR_VAR 0 3
62292: PUSH
62293: LD_INT 2
62295: PPUSH
62296: LD_INT 4
62298: PPUSH
62299: CALL_OW 12
62303: ST_TO_ADDR
62304: GO 62314
// s2 := 1 ;
62306: LD_ADDR_VAR 0 3
62310: PUSH
62311: LD_INT 1
62313: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62314: LD_ADDR_VAR 0 5
62318: PUSH
62319: LD_VAR 0 6
62323: PUSH
62324: LD_INT 1
62326: ARRAY
62327: PPUSH
62328: LD_VAR 0 3
62332: PPUSH
62333: CALL_OW 259
62337: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62338: LD_VAR 0 6
62342: PUSH
62343: LD_INT 1
62345: ARRAY
62346: PPUSH
62347: LD_VAR 0 2
62351: PPUSH
62352: LD_VAR 0 5
62356: PPUSH
62357: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62361: LD_VAR 0 6
62365: PUSH
62366: LD_INT 1
62368: ARRAY
62369: PPUSH
62370: LD_VAR 0 3
62374: PPUSH
62375: LD_VAR 0 4
62379: PPUSH
62380: CALL_OW 237
// end ;
62384: PPOPN 6
62386: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62387: LD_EXP 112
62391: PUSH
62392: LD_EXP 159
62396: AND
62397: IFFALSE 62476
62399: GO 62401
62401: DISABLE
62402: LD_INT 0
62404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62405: LD_ADDR_VAR 0 1
62409: PUSH
62410: LD_INT 22
62412: PUSH
62413: LD_OWVAR 2
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 30
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PPUSH
62436: CALL_OW 69
62440: ST_TO_ADDR
// if not tmp then
62441: LD_VAR 0 1
62445: NOT
62446: IFFALSE 62450
// exit ;
62448: GO 62476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62450: LD_VAR 0 1
62454: PUSH
62455: LD_INT 1
62457: PPUSH
62458: LD_VAR 0 1
62462: PPUSH
62463: CALL_OW 12
62467: ARRAY
62468: PPUSH
62469: LD_INT 1
62471: PPUSH
62472: CALL_OW 234
// end ;
62476: PPOPN 1
62478: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62479: LD_EXP 112
62483: PUSH
62484: LD_EXP 160
62488: AND
62489: IFFALSE 62601
62491: GO 62493
62493: DISABLE
62494: LD_INT 0
62496: PPUSH
62497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62498: LD_ADDR_VAR 0 2
62502: PUSH
62503: LD_INT 22
62505: PUSH
62506: LD_OWVAR 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 30
62520: PUSH
62521: LD_INT 27
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 30
62530: PUSH
62531: LD_INT 26
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 30
62540: PUSH
62541: LD_INT 28
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PPUSH
62558: CALL_OW 69
62562: ST_TO_ADDR
// if not tmp then
62563: LD_VAR 0 2
62567: NOT
62568: IFFALSE 62572
// exit ;
62570: GO 62601
// for i in tmp do
62572: LD_ADDR_VAR 0 1
62576: PUSH
62577: LD_VAR 0 2
62581: PUSH
62582: FOR_IN
62583: IFFALSE 62599
// SetLives ( i , 1 ) ;
62585: LD_VAR 0 1
62589: PPUSH
62590: LD_INT 1
62592: PPUSH
62593: CALL_OW 234
62597: GO 62582
62599: POP
62600: POP
// end ;
62601: PPOPN 2
62603: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62604: LD_EXP 112
62608: PUSH
62609: LD_EXP 161
62613: AND
62614: IFFALSE 62901
62616: GO 62618
62618: DISABLE
62619: LD_INT 0
62621: PPUSH
62622: PPUSH
62623: PPUSH
// begin i := rand ( 1 , 7 ) ;
62624: LD_ADDR_VAR 0 1
62628: PUSH
62629: LD_INT 1
62631: PPUSH
62632: LD_INT 7
62634: PPUSH
62635: CALL_OW 12
62639: ST_TO_ADDR
// case i of 1 :
62640: LD_VAR 0 1
62644: PUSH
62645: LD_INT 1
62647: DOUBLE
62648: EQUAL
62649: IFTRUE 62653
62651: GO 62663
62653: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62654: LD_STRING earthquake(getX(game), 0, 32)
62656: PPUSH
62657: CALL_OW 559
62661: GO 62901
62663: LD_INT 2
62665: DOUBLE
62666: EQUAL
62667: IFTRUE 62671
62669: GO 62685
62671: POP
// begin ToLua ( displayStucuk(); ) ;
62672: LD_STRING displayStucuk();
62674: PPUSH
62675: CALL_OW 559
// ResetFog ;
62679: CALL_OW 335
// end ; 3 :
62683: GO 62901
62685: LD_INT 3
62687: DOUBLE
62688: EQUAL
62689: IFTRUE 62693
62691: GO 62797
62693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62694: LD_ADDR_VAR 0 2
62698: PUSH
62699: LD_INT 22
62701: PUSH
62702: LD_OWVAR 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 25
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PPUSH
62725: CALL_OW 69
62729: ST_TO_ADDR
// if not tmp then
62730: LD_VAR 0 2
62734: NOT
62735: IFFALSE 62739
// exit ;
62737: GO 62901
// un := tmp [ rand ( 1 , tmp ) ] ;
62739: LD_ADDR_VAR 0 3
62743: PUSH
62744: LD_VAR 0 2
62748: PUSH
62749: LD_INT 1
62751: PPUSH
62752: LD_VAR 0 2
62756: PPUSH
62757: CALL_OW 12
62761: ARRAY
62762: ST_TO_ADDR
// if Crawls ( un ) then
62763: LD_VAR 0 3
62767: PPUSH
62768: CALL_OW 318
62772: IFFALSE 62783
// ComWalk ( un ) ;
62774: LD_VAR 0 3
62778: PPUSH
62779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62783: LD_VAR 0 3
62787: PPUSH
62788: LD_INT 8
62790: PPUSH
62791: CALL_OW 336
// end ; 4 :
62795: GO 62901
62797: LD_INT 4
62799: DOUBLE
62800: EQUAL
62801: IFTRUE 62805
62803: GO 62879
62805: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62806: LD_ADDR_VAR 0 2
62810: PUSH
62811: LD_INT 22
62813: PUSH
62814: LD_OWVAR 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 30
62825: PUSH
62826: LD_INT 29
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PPUSH
62837: CALL_OW 69
62841: ST_TO_ADDR
// if not tmp then
62842: LD_VAR 0 2
62846: NOT
62847: IFFALSE 62851
// exit ;
62849: GO 62901
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62851: LD_VAR 0 2
62855: PUSH
62856: LD_INT 1
62858: ARRAY
62859: PPUSH
62860: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62864: LD_VAR 0 2
62868: PUSH
62869: LD_INT 1
62871: ARRAY
62872: PPUSH
62873: CALL_OW 65
// end ; 5 .. 7 :
62877: GO 62901
62879: LD_INT 5
62881: DOUBLE
62882: GREATEREQUAL
62883: IFFALSE 62891
62885: LD_INT 7
62887: DOUBLE
62888: LESSEQUAL
62889: IFTRUE 62893
62891: GO 62900
62893: POP
// StreamSibBomb ; end ;
62894: CALL 59138 0 0
62898: GO 62901
62900: POP
// end ;
62901: PPOPN 3
62903: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62904: LD_EXP 112
62908: PUSH
62909: LD_EXP 162
62913: AND
62914: IFFALSE 63070
62916: GO 62918
62918: DISABLE
62919: LD_INT 0
62921: PPUSH
62922: PPUSH
62923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62924: LD_ADDR_VAR 0 2
62928: PUSH
62929: LD_INT 81
62931: PUSH
62932: LD_OWVAR 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 21
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 21
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PPUSH
62973: CALL_OW 69
62977: ST_TO_ADDR
// if not tmp then
62978: LD_VAR 0 2
62982: NOT
62983: IFFALSE 62987
// exit ;
62985: GO 63070
// p := 0 ;
62987: LD_ADDR_VAR 0 3
62991: PUSH
62992: LD_INT 0
62994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62995: LD_INT 35
62997: PPUSH
62998: CALL_OW 67
// p := p + 1 ;
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_VAR 0 3
63011: PUSH
63012: LD_INT 1
63014: PLUS
63015: ST_TO_ADDR
// for i in tmp do
63016: LD_ADDR_VAR 0 1
63020: PUSH
63021: LD_VAR 0 2
63025: PUSH
63026: FOR_IN
63027: IFFALSE 63058
// if GetLives ( i ) < 1000 then
63029: LD_VAR 0 1
63033: PPUSH
63034: CALL_OW 256
63038: PUSH
63039: LD_INT 1000
63041: LESS
63042: IFFALSE 63056
// SetLives ( i , 1000 ) ;
63044: LD_VAR 0 1
63048: PPUSH
63049: LD_INT 1000
63051: PPUSH
63052: CALL_OW 234
63056: GO 63026
63058: POP
63059: POP
// until p > 20 ;
63060: LD_VAR 0 3
63064: PUSH
63065: LD_INT 20
63067: GREATER
63068: IFFALSE 62995
// end ;
63070: PPOPN 3
63072: END
// every 0 0$1 trigger StreamModeActive and sTime do
63073: LD_EXP 112
63077: PUSH
63078: LD_EXP 163
63082: AND
63083: IFFALSE 63118
63085: GO 63087
63087: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63088: LD_INT 28
63090: PPUSH
63091: LD_OWVAR 2
63095: PPUSH
63096: LD_INT 2
63098: PPUSH
63099: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63103: LD_INT 30
63105: PPUSH
63106: LD_OWVAR 2
63110: PPUSH
63111: LD_INT 2
63113: PPUSH
63114: CALL_OW 322
// end ;
63118: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63119: LD_EXP 112
63123: PUSH
63124: LD_EXP 164
63128: AND
63129: IFFALSE 63250
63131: GO 63133
63133: DISABLE
63134: LD_INT 0
63136: PPUSH
63137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_INT 22
63145: PUSH
63146: LD_OWVAR 2
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 21
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: LD_INT 23
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: PPUSH
63187: CALL_OW 69
63191: ST_TO_ADDR
// if not tmp then
63192: LD_VAR 0 2
63196: NOT
63197: IFFALSE 63201
// exit ;
63199: GO 63250
// for i in tmp do
63201: LD_ADDR_VAR 0 1
63205: PUSH
63206: LD_VAR 0 2
63210: PUSH
63211: FOR_IN
63212: IFFALSE 63248
// begin if Crawls ( i ) then
63214: LD_VAR 0 1
63218: PPUSH
63219: CALL_OW 318
63223: IFFALSE 63234
// ComWalk ( i ) ;
63225: LD_VAR 0 1
63229: PPUSH
63230: CALL_OW 138
// SetClass ( i , 2 ) ;
63234: LD_VAR 0 1
63238: PPUSH
63239: LD_INT 2
63241: PPUSH
63242: CALL_OW 336
// end ;
63246: GO 63211
63248: POP
63249: POP
// end ;
63250: PPOPN 2
63252: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63253: LD_EXP 112
63257: PUSH
63258: LD_EXP 165
63262: AND
63263: IFFALSE 63551
63265: GO 63267
63267: DISABLE
63268: LD_INT 0
63270: PPUSH
63271: PPUSH
63272: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63273: LD_OWVAR 2
63277: PPUSH
63278: LD_INT 9
63280: PPUSH
63281: LD_INT 1
63283: PPUSH
63284: LD_INT 1
63286: PPUSH
63287: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63291: LD_INT 9
63293: PPUSH
63294: LD_OWVAR 2
63298: PPUSH
63299: CALL_OW 343
// uc_side := 9 ;
63303: LD_ADDR_OWVAR 20
63307: PUSH
63308: LD_INT 9
63310: ST_TO_ADDR
// uc_nation := 2 ;
63311: LD_ADDR_OWVAR 21
63315: PUSH
63316: LD_INT 2
63318: ST_TO_ADDR
// hc_name := Dark Warrior ;
63319: LD_ADDR_OWVAR 26
63323: PUSH
63324: LD_STRING Dark Warrior
63326: ST_TO_ADDR
// hc_gallery :=  ;
63327: LD_ADDR_OWVAR 33
63331: PUSH
63332: LD_STRING 
63334: ST_TO_ADDR
// hc_noskilllimit := true ;
63335: LD_ADDR_OWVAR 76
63339: PUSH
63340: LD_INT 1
63342: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63343: LD_ADDR_OWVAR 31
63347: PUSH
63348: LD_INT 30
63350: PUSH
63351: LD_INT 30
63353: PUSH
63354: LD_INT 30
63356: PUSH
63357: LD_INT 30
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: ST_TO_ADDR
// un := CreateHuman ;
63366: LD_ADDR_VAR 0 3
63370: PUSH
63371: CALL_OW 44
63375: ST_TO_ADDR
// hc_noskilllimit := false ;
63376: LD_ADDR_OWVAR 76
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63384: LD_VAR 0 3
63388: PPUSH
63389: LD_INT 1
63391: PPUSH
63392: CALL_OW 51
// ToLua ( playRanger() ) ;
63396: LD_STRING playRanger()
63398: PPUSH
63399: CALL_OW 559
// p := 0 ;
63403: LD_ADDR_VAR 0 2
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63411: LD_INT 35
63413: PPUSH
63414: CALL_OW 67
// p := p + 1 ;
63418: LD_ADDR_VAR 0 2
63422: PUSH
63423: LD_VAR 0 2
63427: PUSH
63428: LD_INT 1
63430: PLUS
63431: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63432: LD_VAR 0 3
63436: PPUSH
63437: CALL_OW 256
63441: PUSH
63442: LD_INT 1000
63444: LESS
63445: IFFALSE 63459
// SetLives ( un , 1000 ) ;
63447: LD_VAR 0 3
63451: PPUSH
63452: LD_INT 1000
63454: PPUSH
63455: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63459: LD_VAR 0 3
63463: PPUSH
63464: LD_INT 81
63466: PUSH
63467: LD_OWVAR 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 91
63478: PUSH
63479: LD_VAR 0 3
63483: PUSH
63484: LD_INT 30
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PPUSH
63496: CALL_OW 69
63500: PPUSH
63501: LD_VAR 0 3
63505: PPUSH
63506: CALL_OW 74
63510: PPUSH
63511: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63515: LD_VAR 0 2
63519: PUSH
63520: LD_INT 80
63522: GREATER
63523: PUSH
63524: LD_VAR 0 3
63528: PPUSH
63529: CALL_OW 301
63533: OR
63534: IFFALSE 63411
// if un then
63536: LD_VAR 0 3
63540: IFFALSE 63551
// RemoveUnit ( un ) ;
63542: LD_VAR 0 3
63546: PPUSH
63547: CALL_OW 64
// end ;
63551: PPOPN 3
63553: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63554: LD_EXP 166
63558: IFFALSE 63674
63560: GO 63562
63562: DISABLE
63563: LD_INT 0
63565: PPUSH
63566: PPUSH
63567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63568: LD_ADDR_VAR 0 2
63572: PUSH
63573: LD_INT 81
63575: PUSH
63576: LD_OWVAR 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 21
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PPUSH
63599: CALL_OW 69
63603: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63604: LD_STRING playComputer()
63606: PPUSH
63607: CALL_OW 559
// if not tmp then
63611: LD_VAR 0 2
63615: NOT
63616: IFFALSE 63620
// exit ;
63618: GO 63674
// for i in tmp do
63620: LD_ADDR_VAR 0 1
63624: PUSH
63625: LD_VAR 0 2
63629: PUSH
63630: FOR_IN
63631: IFFALSE 63672
// for j := 1 to 4 do
63633: LD_ADDR_VAR 0 3
63637: PUSH
63638: DOUBLE
63639: LD_INT 1
63641: DEC
63642: ST_TO_ADDR
63643: LD_INT 4
63645: PUSH
63646: FOR_TO
63647: IFFALSE 63668
// SetSkill ( i , j , 10 ) ;
63649: LD_VAR 0 1
63653: PPUSH
63654: LD_VAR 0 3
63658: PPUSH
63659: LD_INT 10
63661: PPUSH
63662: CALL_OW 237
63666: GO 63646
63668: POP
63669: POP
63670: GO 63630
63672: POP
63673: POP
// end ;
63674: PPOPN 3
63676: END
// every 0 0$1 trigger s30 do var i , tmp ;
63677: LD_EXP 167
63681: IFFALSE 63750
63683: GO 63685
63685: DISABLE
63686: LD_INT 0
63688: PPUSH
63689: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: LD_INT 22
63697: PUSH
63698: LD_OWVAR 2
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PPUSH
63707: CALL_OW 69
63711: ST_TO_ADDR
// if not tmp then
63712: LD_VAR 0 2
63716: NOT
63717: IFFALSE 63721
// exit ;
63719: GO 63750
// for i in tmp do
63721: LD_ADDR_VAR 0 1
63725: PUSH
63726: LD_VAR 0 2
63730: PUSH
63731: FOR_IN
63732: IFFALSE 63748
// SetLives ( i , 300 ) ;
63734: LD_VAR 0 1
63738: PPUSH
63739: LD_INT 300
63741: PPUSH
63742: CALL_OW 234
63746: GO 63731
63748: POP
63749: POP
// end ;
63750: PPOPN 2
63752: END
// every 0 0$1 trigger s60 do var i , tmp ;
63753: LD_EXP 168
63757: IFFALSE 63826
63759: GO 63761
63761: DISABLE
63762: LD_INT 0
63764: PPUSH
63765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63766: LD_ADDR_VAR 0 2
63770: PUSH
63771: LD_INT 22
63773: PUSH
63774: LD_OWVAR 2
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PPUSH
63783: CALL_OW 69
63787: ST_TO_ADDR
// if not tmp then
63788: LD_VAR 0 2
63792: NOT
63793: IFFALSE 63797
// exit ;
63795: GO 63826
// for i in tmp do
63797: LD_ADDR_VAR 0 1
63801: PUSH
63802: LD_VAR 0 2
63806: PUSH
63807: FOR_IN
63808: IFFALSE 63824
// SetLives ( i , 600 ) ;
63810: LD_VAR 0 1
63814: PPUSH
63815: LD_INT 600
63817: PPUSH
63818: CALL_OW 234
63822: GO 63807
63824: POP
63825: POP
// end ;
63826: PPOPN 2
63828: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63829: LD_INT 0
63831: PPUSH
// case cmd of 301 :
63832: LD_VAR 0 1
63836: PUSH
63837: LD_INT 301
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63845
63843: GO 63877
63845: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63846: LD_VAR 0 6
63850: PPUSH
63851: LD_VAR 0 7
63855: PPUSH
63856: LD_VAR 0 8
63860: PPUSH
63861: LD_VAR 0 4
63865: PPUSH
63866: LD_VAR 0 5
63870: PPUSH
63871: CALL 65078 0 5
63875: GO 63998
63877: LD_INT 302
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63885
63883: GO 63922
63885: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63886: LD_VAR 0 6
63890: PPUSH
63891: LD_VAR 0 7
63895: PPUSH
63896: LD_VAR 0 8
63900: PPUSH
63901: LD_VAR 0 9
63905: PPUSH
63906: LD_VAR 0 4
63910: PPUSH
63911: LD_VAR 0 5
63915: PPUSH
63916: CALL 65169 0 6
63920: GO 63998
63922: LD_INT 303
63924: DOUBLE
63925: EQUAL
63926: IFTRUE 63930
63928: GO 63967
63930: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63931: LD_VAR 0 6
63935: PPUSH
63936: LD_VAR 0 7
63940: PPUSH
63941: LD_VAR 0 8
63945: PPUSH
63946: LD_VAR 0 9
63950: PPUSH
63951: LD_VAR 0 4
63955: PPUSH
63956: LD_VAR 0 5
63960: PPUSH
63961: CALL 64003 0 6
63965: GO 63998
63967: LD_INT 304
63969: DOUBLE
63970: EQUAL
63971: IFTRUE 63975
63973: GO 63997
63975: POP
// hHackTeleport ( unit , x , y ) ; end ;
63976: LD_VAR 0 2
63980: PPUSH
63981: LD_VAR 0 4
63985: PPUSH
63986: LD_VAR 0 5
63990: PPUSH
63991: CALL 65762 0 3
63995: GO 63998
63997: POP
// end ;
63998: LD_VAR 0 12
64002: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64003: LD_INT 0
64005: PPUSH
64006: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64007: LD_VAR 0 1
64011: PUSH
64012: LD_INT 1
64014: LESS
64015: PUSH
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 3
64023: GREATER
64024: OR
64025: PUSH
64026: LD_VAR 0 5
64030: PPUSH
64031: LD_VAR 0 6
64035: PPUSH
64036: CALL_OW 428
64040: OR
64041: IFFALSE 64045
// exit ;
64043: GO 64765
// uc_side := your_side ;
64045: LD_ADDR_OWVAR 20
64049: PUSH
64050: LD_OWVAR 2
64054: ST_TO_ADDR
// uc_nation := nation ;
64055: LD_ADDR_OWVAR 21
64059: PUSH
64060: LD_VAR 0 1
64064: ST_TO_ADDR
// bc_level = 1 ;
64065: LD_ADDR_OWVAR 43
64069: PUSH
64070: LD_INT 1
64072: ST_TO_ADDR
// case btype of 1 :
64073: LD_VAR 0 2
64077: PUSH
64078: LD_INT 1
64080: DOUBLE
64081: EQUAL
64082: IFTRUE 64086
64084: GO 64097
64086: POP
// bc_type := b_depot ; 2 :
64087: LD_ADDR_OWVAR 42
64091: PUSH
64092: LD_INT 0
64094: ST_TO_ADDR
64095: GO 64709
64097: LD_INT 2
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64105
64103: GO 64116
64105: POP
// bc_type := b_warehouse ; 3 :
64106: LD_ADDR_OWVAR 42
64110: PUSH
64111: LD_INT 1
64113: ST_TO_ADDR
64114: GO 64709
64116: LD_INT 3
64118: DOUBLE
64119: EQUAL
64120: IFTRUE 64124
64122: GO 64135
64124: POP
// bc_type := b_lab ; 4 .. 9 :
64125: LD_ADDR_OWVAR 42
64129: PUSH
64130: LD_INT 6
64132: ST_TO_ADDR
64133: GO 64709
64135: LD_INT 4
64137: DOUBLE
64138: GREATEREQUAL
64139: IFFALSE 64147
64141: LD_INT 9
64143: DOUBLE
64144: LESSEQUAL
64145: IFTRUE 64149
64147: GO 64201
64149: POP
// begin bc_type := b_lab_half ;
64150: LD_ADDR_OWVAR 42
64154: PUSH
64155: LD_INT 7
64157: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64158: LD_ADDR_OWVAR 44
64162: PUSH
64163: LD_INT 10
64165: PUSH
64166: LD_INT 11
64168: PUSH
64169: LD_INT 12
64171: PUSH
64172: LD_INT 15
64174: PUSH
64175: LD_INT 14
64177: PUSH
64178: LD_INT 13
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: PUSH
64189: LD_VAR 0 2
64193: PUSH
64194: LD_INT 3
64196: MINUS
64197: ARRAY
64198: ST_TO_ADDR
// end ; 10 .. 13 :
64199: GO 64709
64201: LD_INT 10
64203: DOUBLE
64204: GREATEREQUAL
64205: IFFALSE 64213
64207: LD_INT 13
64209: DOUBLE
64210: LESSEQUAL
64211: IFTRUE 64215
64213: GO 64292
64215: POP
// begin bc_type := b_lab_full ;
64216: LD_ADDR_OWVAR 42
64220: PUSH
64221: LD_INT 8
64223: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64224: LD_ADDR_OWVAR 44
64228: PUSH
64229: LD_INT 10
64231: PUSH
64232: LD_INT 12
64234: PUSH
64235: LD_INT 14
64237: PUSH
64238: LD_INT 13
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: PUSH
64247: LD_VAR 0 2
64251: PUSH
64252: LD_INT 9
64254: MINUS
64255: ARRAY
64256: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64257: LD_ADDR_OWVAR 45
64261: PUSH
64262: LD_INT 11
64264: PUSH
64265: LD_INT 15
64267: PUSH
64268: LD_INT 12
64270: PUSH
64271: LD_INT 15
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 9
64287: MINUS
64288: ARRAY
64289: ST_TO_ADDR
// end ; 14 :
64290: GO 64709
64292: LD_INT 14
64294: DOUBLE
64295: EQUAL
64296: IFTRUE 64300
64298: GO 64311
64300: POP
// bc_type := b_workshop ; 15 :
64301: LD_ADDR_OWVAR 42
64305: PUSH
64306: LD_INT 2
64308: ST_TO_ADDR
64309: GO 64709
64311: LD_INT 15
64313: DOUBLE
64314: EQUAL
64315: IFTRUE 64319
64317: GO 64330
64319: POP
// bc_type := b_factory ; 16 :
64320: LD_ADDR_OWVAR 42
64324: PUSH
64325: LD_INT 3
64327: ST_TO_ADDR
64328: GO 64709
64330: LD_INT 16
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64338
64336: GO 64349
64338: POP
// bc_type := b_ext_gun ; 17 :
64339: LD_ADDR_OWVAR 42
64343: PUSH
64344: LD_INT 17
64346: ST_TO_ADDR
64347: GO 64709
64349: LD_INT 17
64351: DOUBLE
64352: EQUAL
64353: IFTRUE 64357
64355: GO 64385
64357: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64358: LD_ADDR_OWVAR 42
64362: PUSH
64363: LD_INT 19
64365: PUSH
64366: LD_INT 23
64368: PUSH
64369: LD_INT 19
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: LIST
64376: PUSH
64377: LD_VAR 0 1
64381: ARRAY
64382: ST_TO_ADDR
64383: GO 64709
64385: LD_INT 18
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64393
64391: GO 64404
64393: POP
// bc_type := b_ext_radar ; 19 :
64394: LD_ADDR_OWVAR 42
64398: PUSH
64399: LD_INT 20
64401: ST_TO_ADDR
64402: GO 64709
64404: LD_INT 19
64406: DOUBLE
64407: EQUAL
64408: IFTRUE 64412
64410: GO 64423
64412: POP
// bc_type := b_ext_radio ; 20 :
64413: LD_ADDR_OWVAR 42
64417: PUSH
64418: LD_INT 22
64420: ST_TO_ADDR
64421: GO 64709
64423: LD_INT 20
64425: DOUBLE
64426: EQUAL
64427: IFTRUE 64431
64429: GO 64442
64431: POP
// bc_type := b_ext_siberium ; 21 :
64432: LD_ADDR_OWVAR 42
64436: PUSH
64437: LD_INT 21
64439: ST_TO_ADDR
64440: GO 64709
64442: LD_INT 21
64444: DOUBLE
64445: EQUAL
64446: IFTRUE 64450
64448: GO 64461
64450: POP
// bc_type := b_ext_computer ; 22 :
64451: LD_ADDR_OWVAR 42
64455: PUSH
64456: LD_INT 24
64458: ST_TO_ADDR
64459: GO 64709
64461: LD_INT 22
64463: DOUBLE
64464: EQUAL
64465: IFTRUE 64469
64467: GO 64480
64469: POP
// bc_type := b_ext_track ; 23 :
64470: LD_ADDR_OWVAR 42
64474: PUSH
64475: LD_INT 16
64477: ST_TO_ADDR
64478: GO 64709
64480: LD_INT 23
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64488
64486: GO 64499
64488: POP
// bc_type := b_ext_laser ; 24 :
64489: LD_ADDR_OWVAR 42
64493: PUSH
64494: LD_INT 25
64496: ST_TO_ADDR
64497: GO 64709
64499: LD_INT 24
64501: DOUBLE
64502: EQUAL
64503: IFTRUE 64507
64505: GO 64518
64507: POP
// bc_type := b_control_tower ; 25 :
64508: LD_ADDR_OWVAR 42
64512: PUSH
64513: LD_INT 36
64515: ST_TO_ADDR
64516: GO 64709
64518: LD_INT 25
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64526
64524: GO 64537
64526: POP
// bc_type := b_breastwork ; 26 :
64527: LD_ADDR_OWVAR 42
64531: PUSH
64532: LD_INT 31
64534: ST_TO_ADDR
64535: GO 64709
64537: LD_INT 26
64539: DOUBLE
64540: EQUAL
64541: IFTRUE 64545
64543: GO 64556
64545: POP
// bc_type := b_bunker ; 27 :
64546: LD_ADDR_OWVAR 42
64550: PUSH
64551: LD_INT 32
64553: ST_TO_ADDR
64554: GO 64709
64556: LD_INT 27
64558: DOUBLE
64559: EQUAL
64560: IFTRUE 64564
64562: GO 64575
64564: POP
// bc_type := b_turret ; 28 :
64565: LD_ADDR_OWVAR 42
64569: PUSH
64570: LD_INT 33
64572: ST_TO_ADDR
64573: GO 64709
64575: LD_INT 28
64577: DOUBLE
64578: EQUAL
64579: IFTRUE 64583
64581: GO 64594
64583: POP
// bc_type := b_armoury ; 29 :
64584: LD_ADDR_OWVAR 42
64588: PUSH
64589: LD_INT 4
64591: ST_TO_ADDR
64592: GO 64709
64594: LD_INT 29
64596: DOUBLE
64597: EQUAL
64598: IFTRUE 64602
64600: GO 64613
64602: POP
// bc_type := b_barracks ; 30 :
64603: LD_ADDR_OWVAR 42
64607: PUSH
64608: LD_INT 5
64610: ST_TO_ADDR
64611: GO 64709
64613: LD_INT 30
64615: DOUBLE
64616: EQUAL
64617: IFTRUE 64621
64619: GO 64632
64621: POP
// bc_type := b_solar_power ; 31 :
64622: LD_ADDR_OWVAR 42
64626: PUSH
64627: LD_INT 27
64629: ST_TO_ADDR
64630: GO 64709
64632: LD_INT 31
64634: DOUBLE
64635: EQUAL
64636: IFTRUE 64640
64638: GO 64651
64640: POP
// bc_type := b_oil_power ; 32 :
64641: LD_ADDR_OWVAR 42
64645: PUSH
64646: LD_INT 26
64648: ST_TO_ADDR
64649: GO 64709
64651: LD_INT 32
64653: DOUBLE
64654: EQUAL
64655: IFTRUE 64659
64657: GO 64670
64659: POP
// bc_type := b_siberite_power ; 33 :
64660: LD_ADDR_OWVAR 42
64664: PUSH
64665: LD_INT 28
64667: ST_TO_ADDR
64668: GO 64709
64670: LD_INT 33
64672: DOUBLE
64673: EQUAL
64674: IFTRUE 64678
64676: GO 64689
64678: POP
// bc_type := b_oil_mine ; 34 :
64679: LD_ADDR_OWVAR 42
64683: PUSH
64684: LD_INT 29
64686: ST_TO_ADDR
64687: GO 64709
64689: LD_INT 34
64691: DOUBLE
64692: EQUAL
64693: IFTRUE 64697
64695: GO 64708
64697: POP
// bc_type := b_siberite_mine ; end ;
64698: LD_ADDR_OWVAR 42
64702: PUSH
64703: LD_INT 30
64705: ST_TO_ADDR
64706: GO 64709
64708: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64709: LD_ADDR_VAR 0 8
64713: PUSH
64714: LD_VAR 0 5
64718: PPUSH
64719: LD_VAR 0 6
64723: PPUSH
64724: LD_VAR 0 3
64728: PPUSH
64729: CALL_OW 47
64733: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64734: LD_OWVAR 42
64738: PUSH
64739: LD_INT 32
64741: PUSH
64742: LD_INT 33
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: IN
64749: IFFALSE 64765
// PlaceWeaponTurret ( b , weapon ) ;
64751: LD_VAR 0 8
64755: PPUSH
64756: LD_VAR 0 4
64760: PPUSH
64761: CALL_OW 431
// end ;
64765: LD_VAR 0 7
64769: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64770: LD_INT 0
64772: PPUSH
64773: PPUSH
64774: PPUSH
64775: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64776: LD_ADDR_VAR 0 4
64780: PUSH
64781: LD_INT 22
64783: PUSH
64784: LD_OWVAR 2
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: LD_INT 30
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 30
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PPUSH
64825: CALL_OW 69
64829: ST_TO_ADDR
// if not tmp then
64830: LD_VAR 0 4
64834: NOT
64835: IFFALSE 64839
// exit ;
64837: GO 64898
// for i in tmp do
64839: LD_ADDR_VAR 0 2
64843: PUSH
64844: LD_VAR 0 4
64848: PUSH
64849: FOR_IN
64850: IFFALSE 64896
// for j = 1 to 3 do
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: DOUBLE
64858: LD_INT 1
64860: DEC
64861: ST_TO_ADDR
64862: LD_INT 3
64864: PUSH
64865: FOR_TO
64866: IFFALSE 64892
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL_OW 274
64877: PPUSH
64878: LD_VAR 0 3
64882: PPUSH
64883: LD_INT 99999
64885: PPUSH
64886: CALL_OW 277
64890: GO 64865
64892: POP
64893: POP
64894: GO 64849
64896: POP
64897: POP
// end ;
64898: LD_VAR 0 1
64902: RET
// export function hHackSetLevel10 ; var i , j ; begin
64903: LD_INT 0
64905: PPUSH
64906: PPUSH
64907: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64908: LD_ADDR_VAR 0 2
64912: PUSH
64913: LD_INT 21
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PPUSH
64923: CALL_OW 69
64927: PUSH
64928: FOR_IN
64929: IFFALSE 64981
// if IsSelected ( i ) then
64931: LD_VAR 0 2
64935: PPUSH
64936: CALL_OW 306
64940: IFFALSE 64979
// begin for j := 1 to 4 do
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: DOUBLE
64948: LD_INT 1
64950: DEC
64951: ST_TO_ADDR
64952: LD_INT 4
64954: PUSH
64955: FOR_TO
64956: IFFALSE 64977
// SetSkill ( i , j , 10 ) ;
64958: LD_VAR 0 2
64962: PPUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: LD_INT 10
64970: PPUSH
64971: CALL_OW 237
64975: GO 64955
64977: POP
64978: POP
// end ;
64979: GO 64928
64981: POP
64982: POP
// end ;
64983: LD_VAR 0 1
64987: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64988: LD_INT 0
64990: PPUSH
64991: PPUSH
64992: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64993: LD_ADDR_VAR 0 2
64997: PUSH
64998: LD_INT 22
65000: PUSH
65001: LD_OWVAR 2
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 21
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PPUSH
65024: CALL_OW 69
65028: PUSH
65029: FOR_IN
65030: IFFALSE 65071
// begin for j := 1 to 4 do
65032: LD_ADDR_VAR 0 3
65036: PUSH
65037: DOUBLE
65038: LD_INT 1
65040: DEC
65041: ST_TO_ADDR
65042: LD_INT 4
65044: PUSH
65045: FOR_TO
65046: IFFALSE 65067
// SetSkill ( i , j , 10 ) ;
65048: LD_VAR 0 2
65052: PPUSH
65053: LD_VAR 0 3
65057: PPUSH
65058: LD_INT 10
65060: PPUSH
65061: CALL_OW 237
65065: GO 65045
65067: POP
65068: POP
// end ;
65069: GO 65029
65071: POP
65072: POP
// end ;
65073: LD_VAR 0 1
65077: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65078: LD_INT 0
65080: PPUSH
// uc_side := your_side ;
65081: LD_ADDR_OWVAR 20
65085: PUSH
65086: LD_OWVAR 2
65090: ST_TO_ADDR
// uc_nation := nation ;
65091: LD_ADDR_OWVAR 21
65095: PUSH
65096: LD_VAR 0 1
65100: ST_TO_ADDR
// InitHc ;
65101: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65105: LD_INT 0
65107: PPUSH
65108: LD_VAR 0 2
65112: PPUSH
65113: LD_VAR 0 3
65117: PPUSH
65118: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65122: LD_VAR 0 4
65126: PPUSH
65127: LD_VAR 0 5
65131: PPUSH
65132: CALL_OW 428
65136: PUSH
65137: LD_INT 0
65139: EQUAL
65140: IFFALSE 65164
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65142: CALL_OW 44
65146: PPUSH
65147: LD_VAR 0 4
65151: PPUSH
65152: LD_VAR 0 5
65156: PPUSH
65157: LD_INT 1
65159: PPUSH
65160: CALL_OW 48
// end ;
65164: LD_VAR 0 6
65168: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65169: LD_INT 0
65171: PPUSH
65172: PPUSH
// uc_side := your_side ;
65173: LD_ADDR_OWVAR 20
65177: PUSH
65178: LD_OWVAR 2
65182: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65183: LD_VAR 0 1
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 4
65199: PUSH
65200: LD_INT 5
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: IN
65210: IFFALSE 65222
// uc_nation := nation_american else
65212: LD_ADDR_OWVAR 21
65216: PUSH
65217: LD_INT 1
65219: ST_TO_ADDR
65220: GO 65265
// if chassis in [ 11 , 12 , 13 , 14 ] then
65222: LD_VAR 0 1
65226: PUSH
65227: LD_INT 11
65229: PUSH
65230: LD_INT 12
65232: PUSH
65233: LD_INT 13
65235: PUSH
65236: LD_INT 14
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: IN
65245: IFFALSE 65257
// uc_nation := nation_arabian else
65247: LD_ADDR_OWVAR 21
65251: PUSH
65252: LD_INT 2
65254: ST_TO_ADDR
65255: GO 65265
// uc_nation := nation_russian ;
65257: LD_ADDR_OWVAR 21
65261: PUSH
65262: LD_INT 3
65264: ST_TO_ADDR
// vc_chassis := chassis ;
65265: LD_ADDR_OWVAR 37
65269: PUSH
65270: LD_VAR 0 1
65274: ST_TO_ADDR
// vc_engine := engine ;
65275: LD_ADDR_OWVAR 39
65279: PUSH
65280: LD_VAR 0 2
65284: ST_TO_ADDR
// vc_control := control ;
65285: LD_ADDR_OWVAR 38
65289: PUSH
65290: LD_VAR 0 3
65294: ST_TO_ADDR
// vc_weapon := weapon ;
65295: LD_ADDR_OWVAR 40
65299: PUSH
65300: LD_VAR 0 4
65304: ST_TO_ADDR
// un := CreateVehicle ;
65305: LD_ADDR_VAR 0 8
65309: PUSH
65310: CALL_OW 45
65314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65315: LD_VAR 0 8
65319: PPUSH
65320: LD_INT 0
65322: PPUSH
65323: LD_INT 5
65325: PPUSH
65326: CALL_OW 12
65330: PPUSH
65331: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65335: LD_VAR 0 8
65339: PPUSH
65340: LD_VAR 0 5
65344: PPUSH
65345: LD_VAR 0 6
65349: PPUSH
65350: LD_INT 1
65352: PPUSH
65353: CALL_OW 48
// end ;
65357: LD_VAR 0 7
65361: RET
// export hInvincible ; every 1 do
65362: GO 65364
65364: DISABLE
// hInvincible := [ ] ;
65365: LD_ADDR_EXP 169
65369: PUSH
65370: EMPTY
65371: ST_TO_ADDR
65372: END
// every 10 do var i ;
65373: GO 65375
65375: DISABLE
65376: LD_INT 0
65378: PPUSH
// begin enable ;
65379: ENABLE
// if not hInvincible then
65380: LD_EXP 169
65384: NOT
65385: IFFALSE 65389
// exit ;
65387: GO 65433
// for i in hInvincible do
65389: LD_ADDR_VAR 0 1
65393: PUSH
65394: LD_EXP 169
65398: PUSH
65399: FOR_IN
65400: IFFALSE 65431
// if GetLives ( i ) < 1000 then
65402: LD_VAR 0 1
65406: PPUSH
65407: CALL_OW 256
65411: PUSH
65412: LD_INT 1000
65414: LESS
65415: IFFALSE 65429
// SetLives ( i , 1000 ) ;
65417: LD_VAR 0 1
65421: PPUSH
65422: LD_INT 1000
65424: PPUSH
65425: CALL_OW 234
65429: GO 65399
65431: POP
65432: POP
// end ;
65433: PPOPN 1
65435: END
// export function hHackInvincible ; var i ; begin
65436: LD_INT 0
65438: PPUSH
65439: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65440: LD_ADDR_VAR 0 2
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 21
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 21
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: PPUSH
65473: CALL_OW 69
65477: PUSH
65478: FOR_IN
65479: IFFALSE 65540
// if IsSelected ( i ) then
65481: LD_VAR 0 2
65485: PPUSH
65486: CALL_OW 306
65490: IFFALSE 65538
// begin if i in hInvincible then
65492: LD_VAR 0 2
65496: PUSH
65497: LD_EXP 169
65501: IN
65502: IFFALSE 65522
// hInvincible := hInvincible diff i else
65504: LD_ADDR_EXP 169
65508: PUSH
65509: LD_EXP 169
65513: PUSH
65514: LD_VAR 0 2
65518: DIFF
65519: ST_TO_ADDR
65520: GO 65538
// hInvincible := hInvincible union i ;
65522: LD_ADDR_EXP 169
65526: PUSH
65527: LD_EXP 169
65531: PUSH
65532: LD_VAR 0 2
65536: UNION
65537: ST_TO_ADDR
// end ;
65538: GO 65478
65540: POP
65541: POP
// end ;
65542: LD_VAR 0 1
65546: RET
// export function hHackInvisible ; var i , j ; begin
65547: LD_INT 0
65549: PPUSH
65550: PPUSH
65551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65552: LD_ADDR_VAR 0 2
65556: PUSH
65557: LD_INT 21
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PPUSH
65567: CALL_OW 69
65571: PUSH
65572: FOR_IN
65573: IFFALSE 65597
// if IsSelected ( i ) then
65575: LD_VAR 0 2
65579: PPUSH
65580: CALL_OW 306
65584: IFFALSE 65595
// ComForceInvisible ( i ) ;
65586: LD_VAR 0 2
65590: PPUSH
65591: CALL_OW 496
65595: GO 65572
65597: POP
65598: POP
// end ;
65599: LD_VAR 0 1
65603: RET
// export function hHackChangeYourSide ; begin
65604: LD_INT 0
65606: PPUSH
// if your_side = 8 then
65607: LD_OWVAR 2
65611: PUSH
65612: LD_INT 8
65614: EQUAL
65615: IFFALSE 65627
// your_side := 0 else
65617: LD_ADDR_OWVAR 2
65621: PUSH
65622: LD_INT 0
65624: ST_TO_ADDR
65625: GO 65641
// your_side := your_side + 1 ;
65627: LD_ADDR_OWVAR 2
65631: PUSH
65632: LD_OWVAR 2
65636: PUSH
65637: LD_INT 1
65639: PLUS
65640: ST_TO_ADDR
// end ;
65641: LD_VAR 0 1
65645: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65646: LD_INT 0
65648: PPUSH
65649: PPUSH
65650: PPUSH
// for i in all_units do
65651: LD_ADDR_VAR 0 2
65655: PUSH
65656: LD_OWVAR 3
65660: PUSH
65661: FOR_IN
65662: IFFALSE 65740
// if IsSelected ( i ) then
65664: LD_VAR 0 2
65668: PPUSH
65669: CALL_OW 306
65673: IFFALSE 65738
// begin j := GetSide ( i ) ;
65675: LD_ADDR_VAR 0 3
65679: PUSH
65680: LD_VAR 0 2
65684: PPUSH
65685: CALL_OW 255
65689: ST_TO_ADDR
// if j = 8 then
65690: LD_VAR 0 3
65694: PUSH
65695: LD_INT 8
65697: EQUAL
65698: IFFALSE 65710
// j := 0 else
65700: LD_ADDR_VAR 0 3
65704: PUSH
65705: LD_INT 0
65707: ST_TO_ADDR
65708: GO 65724
// j := j + 1 ;
65710: LD_ADDR_VAR 0 3
65714: PUSH
65715: LD_VAR 0 3
65719: PUSH
65720: LD_INT 1
65722: PLUS
65723: ST_TO_ADDR
// SetSide ( i , j ) ;
65724: LD_VAR 0 2
65728: PPUSH
65729: LD_VAR 0 3
65733: PPUSH
65734: CALL_OW 235
// end ;
65738: GO 65661
65740: POP
65741: POP
// end ;
65742: LD_VAR 0 1
65746: RET
// export function hHackFog ; begin
65747: LD_INT 0
65749: PPUSH
// FogOff ( true ) ;
65750: LD_INT 1
65752: PPUSH
65753: CALL_OW 344
// end ;
65757: LD_VAR 0 1
65761: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65762: LD_INT 0
65764: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65765: LD_VAR 0 1
65769: PPUSH
65770: LD_VAR 0 2
65774: PPUSH
65775: LD_VAR 0 3
65779: PPUSH
65780: LD_INT 1
65782: PPUSH
65783: LD_INT 1
65785: PPUSH
65786: CALL_OW 483
// CenterOnXY ( x , y ) ;
65790: LD_VAR 0 2
65794: PPUSH
65795: LD_VAR 0 3
65799: PPUSH
65800: CALL_OW 84
// end ; end_of_file
65804: LD_VAR 0 4
65808: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65809: LD_INT 0
65811: PPUSH
65812: PPUSH
65813: PPUSH
65814: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65815: LD_VAR 0 1
65819: PPUSH
65820: CALL_OW 264
65824: PUSH
65825: LD_EXP 96
65829: EQUAL
65830: IFFALSE 65902
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65832: LD_INT 68
65834: PPUSH
65835: LD_VAR 0 1
65839: PPUSH
65840: CALL_OW 255
65844: PPUSH
65845: CALL_OW 321
65849: PUSH
65850: LD_INT 2
65852: EQUAL
65853: IFFALSE 65865
// eff := 70 else
65855: LD_ADDR_VAR 0 4
65859: PUSH
65860: LD_INT 70
65862: ST_TO_ADDR
65863: GO 65873
// eff := 30 ;
65865: LD_ADDR_VAR 0 4
65869: PUSH
65870: LD_INT 30
65872: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 250
65882: PPUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: CALL_OW 251
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: CALL_OW 495
// end ; end ;
65902: LD_VAR 0 2
65906: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65907: LD_INT 0
65909: PPUSH
// end ;
65910: LD_VAR 0 4
65914: RET
// export function SOS_Command ( cmd ) ; begin
65915: LD_INT 0
65917: PPUSH
// end ;
65918: LD_VAR 0 2
65922: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65923: LD_INT 0
65925: PPUSH
// end ;
65926: LD_VAR 0 6
65930: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65931: LD_INT 0
65933: PPUSH
65934: PPUSH
// if not vehicle or not factory then
65935: LD_VAR 0 1
65939: NOT
65940: PUSH
65941: LD_VAR 0 2
65945: NOT
65946: OR
65947: IFFALSE 65951
// exit ;
65949: GO 66182
// if factoryWaypoints >= factory then
65951: LD_EXP 170
65955: PUSH
65956: LD_VAR 0 2
65960: GREATEREQUAL
65961: IFFALSE 66182
// if factoryWaypoints [ factory ] then
65963: LD_EXP 170
65967: PUSH
65968: LD_VAR 0 2
65972: ARRAY
65973: IFFALSE 66182
// begin if GetControl ( vehicle ) = control_manual then
65975: LD_VAR 0 1
65979: PPUSH
65980: CALL_OW 263
65984: PUSH
65985: LD_INT 1
65987: EQUAL
65988: IFFALSE 66069
// begin driver := IsDrivenBy ( vehicle ) ;
65990: LD_ADDR_VAR 0 4
65994: PUSH
65995: LD_VAR 0 1
65999: PPUSH
66000: CALL_OW 311
66004: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66005: LD_VAR 0 4
66009: PPUSH
66010: LD_EXP 170
66014: PUSH
66015: LD_VAR 0 2
66019: ARRAY
66020: PUSH
66021: LD_INT 3
66023: ARRAY
66024: PPUSH
66025: LD_EXP 170
66029: PUSH
66030: LD_VAR 0 2
66034: ARRAY
66035: PUSH
66036: LD_INT 4
66038: ARRAY
66039: PPUSH
66040: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66044: LD_VAR 0 4
66048: PPUSH
66049: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66053: LD_VAR 0 4
66057: PPUSH
66058: LD_VAR 0 2
66062: PPUSH
66063: CALL_OW 180
// end else
66067: GO 66182
// if GetControl ( vehicle ) = control_remote then
66069: LD_VAR 0 1
66073: PPUSH
66074: CALL_OW 263
66078: PUSH
66079: LD_INT 2
66081: EQUAL
66082: IFFALSE 66143
// begin wait ( 0 0$2 ) ;
66084: LD_INT 70
66086: PPUSH
66087: CALL_OW 67
// if Connect ( vehicle ) then
66091: LD_VAR 0 1
66095: PPUSH
66096: CALL 18872 0 1
66100: IFFALSE 66141
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66102: LD_VAR 0 1
66106: PPUSH
66107: LD_EXP 170
66111: PUSH
66112: LD_VAR 0 2
66116: ARRAY
66117: PUSH
66118: LD_INT 3
66120: ARRAY
66121: PPUSH
66122: LD_EXP 170
66126: PUSH
66127: LD_VAR 0 2
66131: ARRAY
66132: PUSH
66133: LD_INT 4
66135: ARRAY
66136: PPUSH
66137: CALL_OW 171
// end else
66141: GO 66182
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66143: LD_VAR 0 1
66147: PPUSH
66148: LD_EXP 170
66152: PUSH
66153: LD_VAR 0 2
66157: ARRAY
66158: PUSH
66159: LD_INT 3
66161: ARRAY
66162: PPUSH
66163: LD_EXP 170
66167: PUSH
66168: LD_VAR 0 2
66172: ARRAY
66173: PUSH
66174: LD_INT 4
66176: ARRAY
66177: PPUSH
66178: CALL_OW 171
// end ; end ;
66182: LD_VAR 0 3
66186: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66187: LD_INT 0
66189: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66190: LD_VAR 0 1
66194: PUSH
66195: LD_INT 250
66197: EQUAL
66198: PUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: CALL_OW 264
66208: PUSH
66209: LD_EXP 99
66213: EQUAL
66214: AND
66215: IFFALSE 66236
// MinerPlaceMine ( unit , x , y ) ;
66217: LD_VAR 0 2
66221: PPUSH
66222: LD_VAR 0 4
66226: PPUSH
66227: LD_VAR 0 5
66231: PPUSH
66232: CALL 68964 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66236: LD_VAR 0 1
66240: PUSH
66241: LD_INT 251
66243: EQUAL
66244: PUSH
66245: LD_VAR 0 2
66249: PPUSH
66250: CALL_OW 264
66254: PUSH
66255: LD_EXP 99
66259: EQUAL
66260: AND
66261: IFFALSE 66282
// MinerDetonateMine ( unit , x , y ) ;
66263: LD_VAR 0 2
66267: PPUSH
66268: LD_VAR 0 4
66272: PPUSH
66273: LD_VAR 0 5
66277: PPUSH
66278: CALL 69241 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 252
66289: EQUAL
66290: PUSH
66291: LD_VAR 0 2
66295: PPUSH
66296: CALL_OW 264
66300: PUSH
66301: LD_EXP 99
66305: EQUAL
66306: AND
66307: IFFALSE 66328
// MinerCreateMinefield ( unit , x , y ) ;
66309: LD_VAR 0 2
66313: PPUSH
66314: LD_VAR 0 4
66318: PPUSH
66319: LD_VAR 0 5
66323: PPUSH
66324: CALL 69658 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66328: LD_VAR 0 1
66332: PUSH
66333: LD_INT 253
66335: EQUAL
66336: PUSH
66337: LD_VAR 0 2
66341: PPUSH
66342: CALL_OW 257
66346: PUSH
66347: LD_INT 5
66349: EQUAL
66350: AND
66351: IFFALSE 66372
// ComBinocular ( unit , x , y ) ;
66353: LD_VAR 0 2
66357: PPUSH
66358: LD_VAR 0 4
66362: PPUSH
66363: LD_VAR 0 5
66367: PPUSH
66368: CALL 70029 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66372: LD_VAR 0 1
66376: PUSH
66377: LD_INT 254
66379: EQUAL
66380: PUSH
66381: LD_VAR 0 2
66385: PPUSH
66386: CALL_OW 264
66390: PUSH
66391: LD_EXP 94
66395: EQUAL
66396: AND
66397: PUSH
66398: LD_VAR 0 3
66402: PPUSH
66403: CALL_OW 263
66407: PUSH
66408: LD_INT 3
66410: EQUAL
66411: AND
66412: IFFALSE 66428
// HackDestroyVehicle ( unit , selectedUnit ) ;
66414: LD_VAR 0 2
66418: PPUSH
66419: LD_VAR 0 3
66423: PPUSH
66424: CALL 68324 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66428: LD_VAR 0 1
66432: PUSH
66433: LD_INT 255
66435: EQUAL
66436: PUSH
66437: LD_VAR 0 2
66441: PPUSH
66442: CALL_OW 264
66446: PUSH
66447: LD_INT 14
66449: PUSH
66450: LD_INT 53
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: IN
66457: AND
66458: PUSH
66459: LD_VAR 0 4
66463: PPUSH
66464: LD_VAR 0 5
66468: PPUSH
66469: CALL_OW 488
66473: AND
66474: IFFALSE 66498
// CutTreeXYR ( unit , x , y , 12 ) ;
66476: LD_VAR 0 2
66480: PPUSH
66481: LD_VAR 0 4
66485: PPUSH
66486: LD_VAR 0 5
66490: PPUSH
66491: LD_INT 12
66493: PPUSH
66494: CALL 66890 0 4
// if cmd = 256 then
66498: LD_VAR 0 1
66502: PUSH
66503: LD_INT 256
66505: EQUAL
66506: IFFALSE 66527
// SetFactoryWaypoint ( unit , x , y ) ;
66508: LD_VAR 0 2
66512: PPUSH
66513: LD_VAR 0 4
66517: PPUSH
66518: LD_VAR 0 5
66522: PPUSH
66523: CALL 66532 0 3
// end ;
66527: LD_VAR 0 6
66531: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66532: LD_INT 0
66534: PPUSH
66535: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66536: LD_VAR 0 1
66540: NOT
66541: PUSH
66542: LD_VAR 0 2
66546: PPUSH
66547: LD_VAR 0 3
66551: PPUSH
66552: CALL_OW 488
66556: NOT
66557: OR
66558: PUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: CALL_OW 266
66568: PUSH
66569: LD_INT 3
66571: NONEQUAL
66572: PUSH
66573: LD_VAR 0 1
66577: PPUSH
66578: CALL_OW 247
66582: PUSH
66583: LD_INT 1
66585: EQUAL
66586: NOT
66587: AND
66588: OR
66589: IFFALSE 66593
// exit ;
66591: GO 66742
// if GetType ( factory ) = unit_human then
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 247
66602: PUSH
66603: LD_INT 1
66605: EQUAL
66606: IFFALSE 66623
// factory := IsInUnit ( factory ) ;
66608: LD_ADDR_VAR 0 1
66612: PUSH
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 310
66622: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66623: LD_VAR 0 1
66627: PPUSH
66628: CALL_OW 266
66632: PUSH
66633: LD_INT 3
66635: NONEQUAL
66636: IFFALSE 66640
// exit ;
66638: GO 66742
// if HexInfo ( x , y ) = factory then
66640: LD_VAR 0 2
66644: PPUSH
66645: LD_VAR 0 3
66649: PPUSH
66650: CALL_OW 428
66654: PUSH
66655: LD_VAR 0 1
66659: EQUAL
66660: IFFALSE 66687
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66662: LD_ADDR_EXP 170
66666: PUSH
66667: LD_EXP 170
66671: PPUSH
66672: LD_VAR 0 1
66676: PPUSH
66677: LD_INT 0
66679: PPUSH
66680: CALL_OW 1
66684: ST_TO_ADDR
66685: GO 66738
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66687: LD_ADDR_EXP 170
66691: PUSH
66692: LD_EXP 170
66696: PPUSH
66697: LD_VAR 0 1
66701: PPUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: CALL_OW 255
66711: PUSH
66712: LD_VAR 0 1
66716: PUSH
66717: LD_VAR 0 2
66721: PUSH
66722: LD_VAR 0 3
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: PPUSH
66733: CALL_OW 1
66737: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66738: CALL 66747 0 0
// end ;
66742: LD_VAR 0 4
66746: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
66747: LD_INT 0
66749: PPUSH
66750: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66751: LD_STRING resetFactoryWaypoint();
66753: PPUSH
66754: CALL_OW 559
// if factoryWaypoints then
66758: LD_EXP 170
66762: IFFALSE 66885
// begin for i := 1 to factoryWaypoints do
66764: LD_ADDR_VAR 0 2
66768: PUSH
66769: DOUBLE
66770: LD_INT 1
66772: DEC
66773: ST_TO_ADDR
66774: LD_EXP 170
66778: PUSH
66779: FOR_TO
66780: IFFALSE 66883
// if factoryWaypoints [ i ] then
66782: LD_EXP 170
66786: PUSH
66787: LD_VAR 0 2
66791: ARRAY
66792: IFFALSE 66881
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
66794: LD_STRING setFactoryWaypointXY(
66796: PUSH
66797: LD_EXP 170
66801: PUSH
66802: LD_VAR 0 2
66806: ARRAY
66807: PUSH
66808: LD_INT 1
66810: ARRAY
66811: STR
66812: PUSH
66813: LD_STRING ,
66815: STR
66816: PUSH
66817: LD_EXP 170
66821: PUSH
66822: LD_VAR 0 2
66826: ARRAY
66827: PUSH
66828: LD_INT 2
66830: ARRAY
66831: STR
66832: PUSH
66833: LD_STRING ,
66835: STR
66836: PUSH
66837: LD_EXP 170
66841: PUSH
66842: LD_VAR 0 2
66846: ARRAY
66847: PUSH
66848: LD_INT 3
66850: ARRAY
66851: STR
66852: PUSH
66853: LD_STRING ,
66855: STR
66856: PUSH
66857: LD_EXP 170
66861: PUSH
66862: LD_VAR 0 2
66866: ARRAY
66867: PUSH
66868: LD_INT 4
66870: ARRAY
66871: STR
66872: PUSH
66873: LD_STRING )
66875: STR
66876: PPUSH
66877: CALL_OW 559
66881: GO 66779
66883: POP
66884: POP
// end ; end ;
66885: LD_VAR 0 1
66889: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66890: LD_INT 0
66892: PPUSH
66893: PPUSH
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
66898: PPUSH
66899: PPUSH
66900: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66901: LD_VAR 0 1
66905: NOT
66906: PUSH
66907: LD_VAR 0 2
66911: PPUSH
66912: LD_VAR 0 3
66916: PPUSH
66917: CALL_OW 488
66921: NOT
66922: OR
66923: PUSH
66924: LD_VAR 0 4
66928: NOT
66929: OR
66930: IFFALSE 66934
// exit ;
66932: GO 67274
// list := [ ] ;
66934: LD_ADDR_VAR 0 13
66938: PUSH
66939: EMPTY
66940: ST_TO_ADDR
// if x - r < 0 then
66941: LD_VAR 0 2
66945: PUSH
66946: LD_VAR 0 4
66950: MINUS
66951: PUSH
66952: LD_INT 0
66954: LESS
66955: IFFALSE 66967
// min_x := 0 else
66957: LD_ADDR_VAR 0 7
66961: PUSH
66962: LD_INT 0
66964: ST_TO_ADDR
66965: GO 66983
// min_x := x - r ;
66967: LD_ADDR_VAR 0 7
66971: PUSH
66972: LD_VAR 0 2
66976: PUSH
66977: LD_VAR 0 4
66981: MINUS
66982: ST_TO_ADDR
// if y - r < 0 then
66983: LD_VAR 0 3
66987: PUSH
66988: LD_VAR 0 4
66992: MINUS
66993: PUSH
66994: LD_INT 0
66996: LESS
66997: IFFALSE 67009
// min_y := 0 else
66999: LD_ADDR_VAR 0 8
67003: PUSH
67004: LD_INT 0
67006: ST_TO_ADDR
67007: GO 67025
// min_y := y - r ;
67009: LD_ADDR_VAR 0 8
67013: PUSH
67014: LD_VAR 0 3
67018: PUSH
67019: LD_VAR 0 4
67023: MINUS
67024: ST_TO_ADDR
// max_x := x + r ;
67025: LD_ADDR_VAR 0 9
67029: PUSH
67030: LD_VAR 0 2
67034: PUSH
67035: LD_VAR 0 4
67039: PLUS
67040: ST_TO_ADDR
// max_y := y + r ;
67041: LD_ADDR_VAR 0 10
67045: PUSH
67046: LD_VAR 0 3
67050: PUSH
67051: LD_VAR 0 4
67055: PLUS
67056: ST_TO_ADDR
// for _x = min_x to max_x do
67057: LD_ADDR_VAR 0 11
67061: PUSH
67062: DOUBLE
67063: LD_VAR 0 7
67067: DEC
67068: ST_TO_ADDR
67069: LD_VAR 0 9
67073: PUSH
67074: FOR_TO
67075: IFFALSE 67192
// for _y = min_y to max_y do
67077: LD_ADDR_VAR 0 12
67081: PUSH
67082: DOUBLE
67083: LD_VAR 0 8
67087: DEC
67088: ST_TO_ADDR
67089: LD_VAR 0 10
67093: PUSH
67094: FOR_TO
67095: IFFALSE 67188
// begin if not ValidHex ( _x , _y ) then
67097: LD_VAR 0 11
67101: PPUSH
67102: LD_VAR 0 12
67106: PPUSH
67107: CALL_OW 488
67111: NOT
67112: IFFALSE 67116
// continue ;
67114: GO 67094
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67116: LD_VAR 0 11
67120: PPUSH
67121: LD_VAR 0 12
67125: PPUSH
67126: CALL_OW 351
67130: PUSH
67131: LD_VAR 0 11
67135: PPUSH
67136: LD_VAR 0 12
67140: PPUSH
67141: CALL_OW 554
67145: AND
67146: IFFALSE 67186
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67148: LD_ADDR_VAR 0 13
67152: PUSH
67153: LD_VAR 0 13
67157: PPUSH
67158: LD_VAR 0 13
67162: PUSH
67163: LD_INT 1
67165: PLUS
67166: PPUSH
67167: LD_VAR 0 11
67171: PUSH
67172: LD_VAR 0 12
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PPUSH
67181: CALL_OW 2
67185: ST_TO_ADDR
// end ;
67186: GO 67094
67188: POP
67189: POP
67190: GO 67074
67192: POP
67193: POP
// if not list then
67194: LD_VAR 0 13
67198: NOT
67199: IFFALSE 67203
// exit ;
67201: GO 67274
// for i in list do
67203: LD_ADDR_VAR 0 6
67207: PUSH
67208: LD_VAR 0 13
67212: PUSH
67213: FOR_IN
67214: IFFALSE 67272
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67216: LD_VAR 0 1
67220: PPUSH
67221: LD_STRING M
67223: PUSH
67224: LD_VAR 0 6
67228: PUSH
67229: LD_INT 1
67231: ARRAY
67232: PUSH
67233: LD_VAR 0 6
67237: PUSH
67238: LD_INT 2
67240: ARRAY
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: PPUSH
67266: CALL_OW 447
67270: GO 67213
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 5
67278: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67279: LD_EXP 171
67283: NOT
67284: IFFALSE 67334
67286: GO 67288
67288: DISABLE
// begin initHack := true ;
67289: LD_ADDR_EXP 171
67293: PUSH
67294: LD_INT 1
67296: ST_TO_ADDR
// hackTanks := [ ] ;
67297: LD_ADDR_EXP 172
67301: PUSH
67302: EMPTY
67303: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67304: LD_ADDR_EXP 173
67308: PUSH
67309: EMPTY
67310: ST_TO_ADDR
// hackLimit := 3 ;
67311: LD_ADDR_EXP 174
67315: PUSH
67316: LD_INT 3
67318: ST_TO_ADDR
// hackDist := 12 ;
67319: LD_ADDR_EXP 175
67323: PUSH
67324: LD_INT 12
67326: ST_TO_ADDR
// hackCounter := [ ] ;
67327: LD_ADDR_EXP 176
67331: PUSH
67332: EMPTY
67333: ST_TO_ADDR
// end ;
67334: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67335: LD_EXP 171
67339: PUSH
67340: LD_INT 34
67342: PUSH
67343: LD_EXP 94
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PPUSH
67352: CALL_OW 69
67356: AND
67357: IFFALSE 67612
67359: GO 67361
67361: DISABLE
67362: LD_INT 0
67364: PPUSH
67365: PPUSH
// begin enable ;
67366: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67367: LD_ADDR_VAR 0 1
67371: PUSH
67372: LD_INT 34
67374: PUSH
67375: LD_EXP 94
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PPUSH
67384: CALL_OW 69
67388: PUSH
67389: FOR_IN
67390: IFFALSE 67610
// begin if not i in hackTanks then
67392: LD_VAR 0 1
67396: PUSH
67397: LD_EXP 172
67401: IN
67402: NOT
67403: IFFALSE 67486
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67405: LD_ADDR_EXP 172
67409: PUSH
67410: LD_EXP 172
67414: PPUSH
67415: LD_EXP 172
67419: PUSH
67420: LD_INT 1
67422: PLUS
67423: PPUSH
67424: LD_VAR 0 1
67428: PPUSH
67429: CALL_OW 1
67433: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67434: LD_ADDR_EXP 173
67438: PUSH
67439: LD_EXP 173
67443: PPUSH
67444: LD_EXP 173
67448: PUSH
67449: LD_INT 1
67451: PLUS
67452: PPUSH
67453: EMPTY
67454: PPUSH
67455: CALL_OW 1
67459: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67460: LD_ADDR_EXP 176
67464: PUSH
67465: LD_EXP 176
67469: PPUSH
67470: LD_EXP 176
67474: PUSH
67475: LD_INT 1
67477: PLUS
67478: PPUSH
67479: EMPTY
67480: PPUSH
67481: CALL_OW 1
67485: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67486: LD_VAR 0 1
67490: PPUSH
67491: CALL_OW 302
67495: NOT
67496: IFFALSE 67509
// begin HackUnlinkAll ( i ) ;
67498: LD_VAR 0 1
67502: PPUSH
67503: CALL 67615 0 1
// continue ;
67507: GO 67389
// end ; HackCheckCapturedStatus ( i ) ;
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL 68058 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67518: LD_ADDR_VAR 0 2
67522: PUSH
67523: LD_INT 81
67525: PUSH
67526: LD_VAR 0 1
67530: PPUSH
67531: CALL_OW 255
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 33
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 91
67552: PUSH
67553: LD_VAR 0 1
67557: PUSH
67558: LD_EXP 175
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 50
67570: PUSH
67571: EMPTY
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: PPUSH
67580: CALL_OW 69
67584: ST_TO_ADDR
// if not tmp then
67585: LD_VAR 0 2
67589: NOT
67590: IFFALSE 67594
// continue ;
67592: GO 67389
// HackLink ( i , tmp ) ;
67594: LD_VAR 0 1
67598: PPUSH
67599: LD_VAR 0 2
67603: PPUSH
67604: CALL 67751 0 2
// end ;
67608: GO 67389
67610: POP
67611: POP
// end ;
67612: PPOPN 2
67614: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67615: LD_INT 0
67617: PPUSH
67618: PPUSH
67619: PPUSH
// if not hack in hackTanks then
67620: LD_VAR 0 1
67624: PUSH
67625: LD_EXP 172
67629: IN
67630: NOT
67631: IFFALSE 67635
// exit ;
67633: GO 67746
// index := GetElementIndex ( hackTanks , hack ) ;
67635: LD_ADDR_VAR 0 4
67639: PUSH
67640: LD_EXP 172
67644: PPUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: CALL 15578 0 2
67654: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67655: LD_EXP 173
67659: PUSH
67660: LD_VAR 0 4
67664: ARRAY
67665: IFFALSE 67746
// begin for i in hackTanksCaptured [ index ] do
67667: LD_ADDR_VAR 0 3
67671: PUSH
67672: LD_EXP 173
67676: PUSH
67677: LD_VAR 0 4
67681: ARRAY
67682: PUSH
67683: FOR_IN
67684: IFFALSE 67710
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67686: LD_VAR 0 3
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PPUSH
67695: LD_VAR 0 3
67699: PUSH
67700: LD_INT 2
67702: ARRAY
67703: PPUSH
67704: CALL_OW 235
67708: GO 67683
67710: POP
67711: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67712: LD_ADDR_EXP 173
67716: PUSH
67717: LD_EXP 173
67721: PPUSH
67722: LD_VAR 0 4
67726: PPUSH
67727: EMPTY
67728: PPUSH
67729: CALL_OW 1
67733: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67734: LD_VAR 0 1
67738: PPUSH
67739: LD_INT 0
67741: PPUSH
67742: CALL_OW 505
// end ; end ;
67746: LD_VAR 0 2
67750: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67751: LD_INT 0
67753: PPUSH
67754: PPUSH
67755: PPUSH
// if not hack in hackTanks or not vehicles then
67756: LD_VAR 0 1
67760: PUSH
67761: LD_EXP 172
67765: IN
67766: NOT
67767: PUSH
67768: LD_VAR 0 2
67772: NOT
67773: OR
67774: IFFALSE 67778
// exit ;
67776: GO 68053
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67778: LD_ADDR_VAR 0 2
67782: PUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: LD_VAR 0 2
67792: PPUSH
67793: LD_INT 1
67795: PPUSH
67796: LD_INT 1
67798: PPUSH
67799: CALL 16228 0 4
67803: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67804: LD_ADDR_VAR 0 5
67808: PUSH
67809: LD_EXP 172
67813: PPUSH
67814: LD_VAR 0 1
67818: PPUSH
67819: CALL 15578 0 2
67823: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67824: LD_EXP 173
67828: PUSH
67829: LD_VAR 0 5
67833: ARRAY
67834: PUSH
67835: LD_EXP 174
67839: LESS
67840: IFFALSE 68029
// begin for i := 1 to vehicles do
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: DOUBLE
67848: LD_INT 1
67850: DEC
67851: ST_TO_ADDR
67852: LD_VAR 0 2
67856: PUSH
67857: FOR_TO
67858: IFFALSE 68027
// begin if hackTanksCaptured [ index ] = hackLimit then
67860: LD_EXP 173
67864: PUSH
67865: LD_VAR 0 5
67869: ARRAY
67870: PUSH
67871: LD_EXP 174
67875: EQUAL
67876: IFFALSE 67880
// break ;
67878: GO 68027
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67880: LD_ADDR_EXP 176
67884: PUSH
67885: LD_EXP 176
67889: PPUSH
67890: LD_VAR 0 5
67894: PPUSH
67895: LD_EXP 176
67899: PUSH
67900: LD_VAR 0 5
67904: ARRAY
67905: PUSH
67906: LD_INT 1
67908: PLUS
67909: PPUSH
67910: CALL_OW 1
67914: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67915: LD_ADDR_EXP 173
67919: PUSH
67920: LD_EXP 173
67924: PPUSH
67925: LD_VAR 0 5
67929: PUSH
67930: LD_EXP 173
67934: PUSH
67935: LD_VAR 0 5
67939: ARRAY
67940: PUSH
67941: LD_INT 1
67943: PLUS
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PPUSH
67949: LD_VAR 0 2
67953: PUSH
67954: LD_VAR 0 4
67958: ARRAY
67959: PUSH
67960: LD_VAR 0 2
67964: PUSH
67965: LD_VAR 0 4
67969: ARRAY
67970: PPUSH
67971: CALL_OW 255
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PPUSH
67980: CALL 15793 0 3
67984: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67985: LD_VAR 0 2
67989: PUSH
67990: LD_VAR 0 4
67994: ARRAY
67995: PPUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 255
68005: PPUSH
68006: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68010: LD_VAR 0 2
68014: PUSH
68015: LD_VAR 0 4
68019: ARRAY
68020: PPUSH
68021: CALL_OW 141
// end ;
68025: GO 67857
68027: POP
68028: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68029: LD_VAR 0 1
68033: PPUSH
68034: LD_EXP 173
68038: PUSH
68039: LD_VAR 0 5
68043: ARRAY
68044: PUSH
68045: LD_INT 0
68047: PLUS
68048: PPUSH
68049: CALL_OW 505
// end ;
68053: LD_VAR 0 3
68057: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68058: LD_INT 0
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
// if not hack in hackTanks then
68064: LD_VAR 0 1
68068: PUSH
68069: LD_EXP 172
68073: IN
68074: NOT
68075: IFFALSE 68079
// exit ;
68077: GO 68319
// index := GetElementIndex ( hackTanks , hack ) ;
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_EXP 172
68088: PPUSH
68089: LD_VAR 0 1
68093: PPUSH
68094: CALL 15578 0 2
68098: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68099: LD_ADDR_VAR 0 3
68103: PUSH
68104: DOUBLE
68105: LD_EXP 173
68109: PUSH
68110: LD_VAR 0 4
68114: ARRAY
68115: INC
68116: ST_TO_ADDR
68117: LD_INT 1
68119: PUSH
68120: FOR_DOWNTO
68121: IFFALSE 68293
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68123: LD_ADDR_VAR 0 5
68127: PUSH
68128: LD_EXP 173
68132: PUSH
68133: LD_VAR 0 4
68137: ARRAY
68138: PUSH
68139: LD_VAR 0 3
68143: ARRAY
68144: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68145: LD_VAR 0 5
68149: PUSH
68150: LD_INT 1
68152: ARRAY
68153: PPUSH
68154: CALL_OW 302
68158: NOT
68159: PUSH
68160: LD_VAR 0 5
68164: PUSH
68165: LD_INT 1
68167: ARRAY
68168: PPUSH
68169: CALL_OW 255
68173: PUSH
68174: LD_VAR 0 1
68178: PPUSH
68179: CALL_OW 255
68183: NONEQUAL
68184: OR
68185: IFFALSE 68291
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68187: LD_VAR 0 5
68191: PUSH
68192: LD_INT 1
68194: ARRAY
68195: PPUSH
68196: CALL_OW 305
68200: PUSH
68201: LD_VAR 0 5
68205: PUSH
68206: LD_INT 1
68208: ARRAY
68209: PPUSH
68210: CALL_OW 255
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 255
68224: EQUAL
68225: AND
68226: IFFALSE 68250
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68228: LD_VAR 0 5
68232: PUSH
68233: LD_INT 1
68235: ARRAY
68236: PPUSH
68237: LD_VAR 0 5
68241: PUSH
68242: LD_INT 2
68244: ARRAY
68245: PPUSH
68246: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68250: LD_ADDR_EXP 173
68254: PUSH
68255: LD_EXP 173
68259: PPUSH
68260: LD_VAR 0 4
68264: PPUSH
68265: LD_EXP 173
68269: PUSH
68270: LD_VAR 0 4
68274: ARRAY
68275: PPUSH
68276: LD_VAR 0 3
68280: PPUSH
68281: CALL_OW 3
68285: PPUSH
68286: CALL_OW 1
68290: ST_TO_ADDR
// end ; end ;
68291: GO 68120
68293: POP
68294: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68295: LD_VAR 0 1
68299: PPUSH
68300: LD_EXP 173
68304: PUSH
68305: LD_VAR 0 4
68309: ARRAY
68310: PUSH
68311: LD_INT 0
68313: PLUS
68314: PPUSH
68315: CALL_OW 505
// end ;
68319: LD_VAR 0 2
68323: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68324: LD_INT 0
68326: PPUSH
68327: PPUSH
68328: PPUSH
68329: PPUSH
// if not hack in hackTanks then
68330: LD_VAR 0 1
68334: PUSH
68335: LD_EXP 172
68339: IN
68340: NOT
68341: IFFALSE 68345
// exit ;
68343: GO 68430
// index := GetElementIndex ( hackTanks , hack ) ;
68345: LD_ADDR_VAR 0 5
68349: PUSH
68350: LD_EXP 172
68354: PPUSH
68355: LD_VAR 0 1
68359: PPUSH
68360: CALL 15578 0 2
68364: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68365: LD_ADDR_VAR 0 4
68369: PUSH
68370: DOUBLE
68371: LD_INT 1
68373: DEC
68374: ST_TO_ADDR
68375: LD_EXP 173
68379: PUSH
68380: LD_VAR 0 5
68384: ARRAY
68385: PUSH
68386: FOR_TO
68387: IFFALSE 68428
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68389: LD_EXP 173
68393: PUSH
68394: LD_VAR 0 5
68398: ARRAY
68399: PUSH
68400: LD_VAR 0 4
68404: ARRAY
68405: PUSH
68406: LD_INT 1
68408: ARRAY
68409: PUSH
68410: LD_VAR 0 2
68414: EQUAL
68415: IFFALSE 68426
// KillUnit ( vehicle ) ;
68417: LD_VAR 0 2
68421: PPUSH
68422: CALL_OW 66
68426: GO 68386
68428: POP
68429: POP
// end ;
68430: LD_VAR 0 3
68434: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68435: LD_EXP 177
68439: NOT
68440: IFFALSE 68475
68442: GO 68444
68444: DISABLE
// begin initMiner := true ;
68445: LD_ADDR_EXP 177
68449: PUSH
68450: LD_INT 1
68452: ST_TO_ADDR
// minersList := [ ] ;
68453: LD_ADDR_EXP 178
68457: PUSH
68458: EMPTY
68459: ST_TO_ADDR
// minerMinesList := [ ] ;
68460: LD_ADDR_EXP 179
68464: PUSH
68465: EMPTY
68466: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68467: LD_ADDR_EXP 180
68471: PUSH
68472: LD_INT 5
68474: ST_TO_ADDR
// end ;
68475: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68476: LD_EXP 177
68480: PUSH
68481: LD_INT 34
68483: PUSH
68484: LD_EXP 99
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PPUSH
68493: CALL_OW 69
68497: AND
68498: IFFALSE 68961
68500: GO 68502
68502: DISABLE
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
68507: PPUSH
68508: PPUSH
// begin enable ;
68509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68510: LD_ADDR_VAR 0 1
68514: PUSH
68515: LD_INT 34
68517: PUSH
68518: LD_EXP 99
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PPUSH
68527: CALL_OW 69
68531: PUSH
68532: FOR_IN
68533: IFFALSE 68605
// begin if not i in minersList then
68535: LD_VAR 0 1
68539: PUSH
68540: LD_EXP 178
68544: IN
68545: NOT
68546: IFFALSE 68603
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68548: LD_ADDR_EXP 178
68552: PUSH
68553: LD_EXP 178
68557: PPUSH
68558: LD_EXP 178
68562: PUSH
68563: LD_INT 1
68565: PLUS
68566: PPUSH
68567: LD_VAR 0 1
68571: PPUSH
68572: CALL_OW 1
68576: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68577: LD_ADDR_EXP 179
68581: PUSH
68582: LD_EXP 179
68586: PPUSH
68587: LD_EXP 179
68591: PUSH
68592: LD_INT 1
68594: PLUS
68595: PPUSH
68596: EMPTY
68597: PPUSH
68598: CALL_OW 1
68602: ST_TO_ADDR
// end end ;
68603: GO 68532
68605: POP
68606: POP
// for i := minerMinesList downto 1 do
68607: LD_ADDR_VAR 0 1
68611: PUSH
68612: DOUBLE
68613: LD_EXP 179
68617: INC
68618: ST_TO_ADDR
68619: LD_INT 1
68621: PUSH
68622: FOR_DOWNTO
68623: IFFALSE 68959
// begin if IsLive ( minersList [ i ] ) then
68625: LD_EXP 178
68629: PUSH
68630: LD_VAR 0 1
68634: ARRAY
68635: PPUSH
68636: CALL_OW 300
68640: IFFALSE 68668
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68642: LD_EXP 178
68646: PUSH
68647: LD_VAR 0 1
68651: ARRAY
68652: PPUSH
68653: LD_EXP 179
68657: PUSH
68658: LD_VAR 0 1
68662: ARRAY
68663: PPUSH
68664: CALL_OW 505
// if not minerMinesList [ i ] then
68668: LD_EXP 179
68672: PUSH
68673: LD_VAR 0 1
68677: ARRAY
68678: NOT
68679: IFFALSE 68683
// continue ;
68681: GO 68622
// for j := minerMinesList [ i ] downto 1 do
68683: LD_ADDR_VAR 0 2
68687: PUSH
68688: DOUBLE
68689: LD_EXP 179
68693: PUSH
68694: LD_VAR 0 1
68698: ARRAY
68699: INC
68700: ST_TO_ADDR
68701: LD_INT 1
68703: PUSH
68704: FOR_DOWNTO
68705: IFFALSE 68955
// begin side := GetSide ( minersList [ i ] ) ;
68707: LD_ADDR_VAR 0 3
68711: PUSH
68712: LD_EXP 178
68716: PUSH
68717: LD_VAR 0 1
68721: ARRAY
68722: PPUSH
68723: CALL_OW 255
68727: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68728: LD_ADDR_VAR 0 4
68732: PUSH
68733: LD_EXP 179
68737: PUSH
68738: LD_VAR 0 1
68742: ARRAY
68743: PUSH
68744: LD_VAR 0 2
68748: ARRAY
68749: PUSH
68750: LD_INT 1
68752: ARRAY
68753: PPUSH
68754: LD_EXP 179
68758: PUSH
68759: LD_VAR 0 1
68763: ARRAY
68764: PUSH
68765: LD_VAR 0 2
68769: ARRAY
68770: PUSH
68771: LD_INT 2
68773: ARRAY
68774: PPUSH
68775: CALL_OW 428
68779: ST_TO_ADDR
// if not tmp then
68780: LD_VAR 0 4
68784: NOT
68785: IFFALSE 68789
// continue ;
68787: GO 68704
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68789: LD_VAR 0 4
68793: PUSH
68794: LD_INT 81
68796: PUSH
68797: LD_VAR 0 3
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PPUSH
68806: CALL_OW 69
68810: IN
68811: PUSH
68812: LD_EXP 179
68816: PUSH
68817: LD_VAR 0 1
68821: ARRAY
68822: PUSH
68823: LD_VAR 0 2
68827: ARRAY
68828: PUSH
68829: LD_INT 1
68831: ARRAY
68832: PPUSH
68833: LD_EXP 179
68837: PUSH
68838: LD_VAR 0 1
68842: ARRAY
68843: PUSH
68844: LD_VAR 0 2
68848: ARRAY
68849: PUSH
68850: LD_INT 2
68852: ARRAY
68853: PPUSH
68854: CALL_OW 458
68858: AND
68859: IFFALSE 68953
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68861: LD_EXP 179
68865: PUSH
68866: LD_VAR 0 1
68870: ARRAY
68871: PUSH
68872: LD_VAR 0 2
68876: ARRAY
68877: PUSH
68878: LD_INT 1
68880: ARRAY
68881: PPUSH
68882: LD_EXP 179
68886: PUSH
68887: LD_VAR 0 1
68891: ARRAY
68892: PUSH
68893: LD_VAR 0 2
68897: ARRAY
68898: PUSH
68899: LD_INT 2
68901: ARRAY
68902: PPUSH
68903: LD_VAR 0 3
68907: PPUSH
68908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68912: LD_ADDR_EXP 179
68916: PUSH
68917: LD_EXP 179
68921: PPUSH
68922: LD_VAR 0 1
68926: PPUSH
68927: LD_EXP 179
68931: PUSH
68932: LD_VAR 0 1
68936: ARRAY
68937: PPUSH
68938: LD_VAR 0 2
68942: PPUSH
68943: CALL_OW 3
68947: PPUSH
68948: CALL_OW 1
68952: ST_TO_ADDR
// end ; end ;
68953: GO 68704
68955: POP
68956: POP
// end ;
68957: GO 68622
68959: POP
68960: POP
// end ;
68961: PPOPN 4
68963: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68964: LD_INT 0
68966: PPUSH
68967: PPUSH
// result := false ;
68968: LD_ADDR_VAR 0 4
68972: PUSH
68973: LD_INT 0
68975: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68976: LD_VAR 0 1
68980: PPUSH
68981: CALL_OW 264
68985: PUSH
68986: LD_EXP 99
68990: EQUAL
68991: NOT
68992: IFFALSE 68996
// exit ;
68994: GO 69236
// index := GetElementIndex ( minersList , unit ) ;
68996: LD_ADDR_VAR 0 5
69000: PUSH
69001: LD_EXP 178
69005: PPUSH
69006: LD_VAR 0 1
69010: PPUSH
69011: CALL 15578 0 2
69015: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69016: LD_EXP 179
69020: PUSH
69021: LD_VAR 0 5
69025: ARRAY
69026: PUSH
69027: LD_EXP 180
69031: GREATEREQUAL
69032: IFFALSE 69036
// exit ;
69034: GO 69236
// ComMoveXY ( unit , x , y ) ;
69036: LD_VAR 0 1
69040: PPUSH
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69055: LD_INT 35
69057: PPUSH
69058: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69062: LD_VAR 0 1
69066: PPUSH
69067: LD_VAR 0 2
69071: PPUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: CALL 46405 0 3
69081: NOT
69082: PUSH
69083: LD_VAR 0 1
69087: PPUSH
69088: CALL_OW 314
69092: AND
69093: IFFALSE 69097
// exit ;
69095: GO 69236
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69097: LD_VAR 0 2
69101: PPUSH
69102: LD_VAR 0 3
69106: PPUSH
69107: CALL_OW 428
69111: PUSH
69112: LD_VAR 0 1
69116: EQUAL
69117: PUSH
69118: LD_VAR 0 1
69122: PPUSH
69123: CALL_OW 314
69127: NOT
69128: AND
69129: IFFALSE 69055
// PlaySoundXY ( x , y , PlantMine ) ;
69131: LD_VAR 0 2
69135: PPUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: LD_STRING PlantMine
69143: PPUSH
69144: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69148: LD_VAR 0 2
69152: PPUSH
69153: LD_VAR 0 3
69157: PPUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 255
69167: PPUSH
69168: LD_INT 0
69170: PPUSH
69171: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69175: LD_ADDR_EXP 179
69179: PUSH
69180: LD_EXP 179
69184: PPUSH
69185: LD_VAR 0 5
69189: PUSH
69190: LD_EXP 179
69194: PUSH
69195: LD_VAR 0 5
69199: ARRAY
69200: PUSH
69201: LD_INT 1
69203: PLUS
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PPUSH
69209: LD_VAR 0 2
69213: PUSH
69214: LD_VAR 0 3
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PPUSH
69223: CALL 15793 0 3
69227: ST_TO_ADDR
// result := true ;
69228: LD_ADDR_VAR 0 4
69232: PUSH
69233: LD_INT 1
69235: ST_TO_ADDR
// end ;
69236: LD_VAR 0 4
69240: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69241: LD_INT 0
69243: PPUSH
69244: PPUSH
69245: PPUSH
// if not unit in minersList then
69246: LD_VAR 0 1
69250: PUSH
69251: LD_EXP 178
69255: IN
69256: NOT
69257: IFFALSE 69261
// exit ;
69259: GO 69653
// index := GetElementIndex ( minersList , unit ) ;
69261: LD_ADDR_VAR 0 6
69265: PUSH
69266: LD_EXP 178
69270: PPUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL 15578 0 2
69280: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69281: LD_ADDR_VAR 0 5
69285: PUSH
69286: DOUBLE
69287: LD_EXP 179
69291: PUSH
69292: LD_VAR 0 6
69296: ARRAY
69297: INC
69298: ST_TO_ADDR
69299: LD_INT 1
69301: PUSH
69302: FOR_DOWNTO
69303: IFFALSE 69464
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69305: LD_EXP 179
69309: PUSH
69310: LD_VAR 0 6
69314: ARRAY
69315: PUSH
69316: LD_VAR 0 5
69320: ARRAY
69321: PUSH
69322: LD_INT 1
69324: ARRAY
69325: PUSH
69326: LD_VAR 0 2
69330: EQUAL
69331: PUSH
69332: LD_EXP 179
69336: PUSH
69337: LD_VAR 0 6
69341: ARRAY
69342: PUSH
69343: LD_VAR 0 5
69347: ARRAY
69348: PUSH
69349: LD_INT 2
69351: ARRAY
69352: PUSH
69353: LD_VAR 0 3
69357: EQUAL
69358: AND
69359: IFFALSE 69462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69361: LD_EXP 179
69365: PUSH
69366: LD_VAR 0 6
69370: ARRAY
69371: PUSH
69372: LD_VAR 0 5
69376: ARRAY
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PPUSH
69382: LD_EXP 179
69386: PUSH
69387: LD_VAR 0 6
69391: ARRAY
69392: PUSH
69393: LD_VAR 0 5
69397: ARRAY
69398: PUSH
69399: LD_INT 2
69401: ARRAY
69402: PPUSH
69403: LD_VAR 0 1
69407: PPUSH
69408: CALL_OW 255
69412: PPUSH
69413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69417: LD_ADDR_EXP 179
69421: PUSH
69422: LD_EXP 179
69426: PPUSH
69427: LD_VAR 0 6
69431: PPUSH
69432: LD_EXP 179
69436: PUSH
69437: LD_VAR 0 6
69441: ARRAY
69442: PPUSH
69443: LD_VAR 0 5
69447: PPUSH
69448: CALL_OW 3
69452: PPUSH
69453: CALL_OW 1
69457: ST_TO_ADDR
// exit ;
69458: POP
69459: POP
69460: GO 69653
// end ; end ;
69462: GO 69302
69464: POP
69465: POP
// for i := minerMinesList [ index ] downto 1 do
69466: LD_ADDR_VAR 0 5
69470: PUSH
69471: DOUBLE
69472: LD_EXP 179
69476: PUSH
69477: LD_VAR 0 6
69481: ARRAY
69482: INC
69483: ST_TO_ADDR
69484: LD_INT 1
69486: PUSH
69487: FOR_DOWNTO
69488: IFFALSE 69651
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69490: LD_EXP 179
69494: PUSH
69495: LD_VAR 0 6
69499: ARRAY
69500: PUSH
69501: LD_VAR 0 5
69505: ARRAY
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PPUSH
69511: LD_EXP 179
69515: PUSH
69516: LD_VAR 0 6
69520: ARRAY
69521: PUSH
69522: LD_VAR 0 5
69526: ARRAY
69527: PUSH
69528: LD_INT 2
69530: ARRAY
69531: PPUSH
69532: LD_VAR 0 2
69536: PPUSH
69537: LD_VAR 0 3
69541: PPUSH
69542: CALL_OW 298
69546: PUSH
69547: LD_INT 6
69549: LESS
69550: IFFALSE 69649
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69552: LD_EXP 179
69556: PUSH
69557: LD_VAR 0 6
69561: ARRAY
69562: PUSH
69563: LD_VAR 0 5
69567: ARRAY
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: LD_EXP 179
69577: PUSH
69578: LD_VAR 0 6
69582: ARRAY
69583: PUSH
69584: LD_VAR 0 5
69588: ARRAY
69589: PUSH
69590: LD_INT 2
69592: ARRAY
69593: PPUSH
69594: LD_VAR 0 1
69598: PPUSH
69599: CALL_OW 255
69603: PPUSH
69604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69608: LD_ADDR_EXP 179
69612: PUSH
69613: LD_EXP 179
69617: PPUSH
69618: LD_VAR 0 6
69622: PPUSH
69623: LD_EXP 179
69627: PUSH
69628: LD_VAR 0 6
69632: ARRAY
69633: PPUSH
69634: LD_VAR 0 5
69638: PPUSH
69639: CALL_OW 3
69643: PPUSH
69644: CALL_OW 1
69648: ST_TO_ADDR
// end ; end ;
69649: GO 69487
69651: POP
69652: POP
// end ;
69653: LD_VAR 0 4
69657: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69658: LD_INT 0
69660: PPUSH
69661: PPUSH
69662: PPUSH
69663: PPUSH
69664: PPUSH
69665: PPUSH
69666: PPUSH
69667: PPUSH
69668: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69669: LD_VAR 0 1
69673: PPUSH
69674: CALL_OW 264
69678: PUSH
69679: LD_EXP 99
69683: EQUAL
69684: NOT
69685: PUSH
69686: LD_VAR 0 1
69690: PUSH
69691: LD_EXP 178
69695: IN
69696: NOT
69697: OR
69698: IFFALSE 69702
// exit ;
69700: GO 70024
// index := GetElementIndex ( minersList , unit ) ;
69702: LD_ADDR_VAR 0 6
69706: PUSH
69707: LD_EXP 178
69711: PPUSH
69712: LD_VAR 0 1
69716: PPUSH
69717: CALL 15578 0 2
69721: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69722: LD_ADDR_VAR 0 8
69726: PUSH
69727: LD_EXP 180
69731: PUSH
69732: LD_EXP 179
69736: PUSH
69737: LD_VAR 0 6
69741: ARRAY
69742: MINUS
69743: ST_TO_ADDR
// if not minesFreeAmount then
69744: LD_VAR 0 8
69748: NOT
69749: IFFALSE 69753
// exit ;
69751: GO 70024
// tmp := [ ] ;
69753: LD_ADDR_VAR 0 7
69757: PUSH
69758: EMPTY
69759: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69760: LD_ADDR_VAR 0 5
69764: PUSH
69765: DOUBLE
69766: LD_INT 1
69768: DEC
69769: ST_TO_ADDR
69770: LD_VAR 0 8
69774: PUSH
69775: FOR_TO
69776: IFFALSE 69971
// begin _d := rand ( 0 , 5 ) ;
69778: LD_ADDR_VAR 0 11
69782: PUSH
69783: LD_INT 0
69785: PPUSH
69786: LD_INT 5
69788: PPUSH
69789: CALL_OW 12
69793: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69794: LD_ADDR_VAR 0 12
69798: PUSH
69799: LD_INT 2
69801: PPUSH
69802: LD_INT 6
69804: PPUSH
69805: CALL_OW 12
69809: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69810: LD_ADDR_VAR 0 9
69814: PUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: LD_VAR 0 11
69824: PPUSH
69825: LD_VAR 0 12
69829: PPUSH
69830: CALL_OW 272
69834: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69835: LD_ADDR_VAR 0 10
69839: PUSH
69840: LD_VAR 0 3
69844: PPUSH
69845: LD_VAR 0 11
69849: PPUSH
69850: LD_VAR 0 12
69854: PPUSH
69855: CALL_OW 273
69859: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69860: LD_VAR 0 9
69864: PPUSH
69865: LD_VAR 0 10
69869: PPUSH
69870: CALL_OW 488
69874: PUSH
69875: LD_VAR 0 9
69879: PUSH
69880: LD_VAR 0 10
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_VAR 0 7
69893: IN
69894: NOT
69895: AND
69896: PUSH
69897: LD_VAR 0 9
69901: PPUSH
69902: LD_VAR 0 10
69906: PPUSH
69907: CALL_OW 458
69911: NOT
69912: AND
69913: IFFALSE 69955
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69915: LD_ADDR_VAR 0 7
69919: PUSH
69920: LD_VAR 0 7
69924: PPUSH
69925: LD_VAR 0 7
69929: PUSH
69930: LD_INT 1
69932: PLUS
69933: PPUSH
69934: LD_VAR 0 9
69938: PUSH
69939: LD_VAR 0 10
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PPUSH
69948: CALL_OW 1
69952: ST_TO_ADDR
69953: GO 69969
// i := i - 1 ;
69955: LD_ADDR_VAR 0 5
69959: PUSH
69960: LD_VAR 0 5
69964: PUSH
69965: LD_INT 1
69967: MINUS
69968: ST_TO_ADDR
// end ;
69969: GO 69775
69971: POP
69972: POP
// for i in tmp do
69973: LD_ADDR_VAR 0 5
69977: PUSH
69978: LD_VAR 0 7
69982: PUSH
69983: FOR_IN
69984: IFFALSE 70022
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_VAR 0 5
69995: PUSH
69996: LD_INT 1
69998: ARRAY
69999: PPUSH
70000: LD_VAR 0 5
70004: PUSH
70005: LD_INT 2
70007: ARRAY
70008: PPUSH
70009: CALL 68964 0 3
70013: NOT
70014: IFFALSE 70020
// exit ;
70016: POP
70017: POP
70018: GO 70024
70020: GO 69983
70022: POP
70023: POP
// end ;
70024: LD_VAR 0 4
70028: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
70035: PPUSH
70036: PPUSH
70037: PPUSH
// if not GetClass ( unit ) = class_sniper then
70038: LD_VAR 0 1
70042: PPUSH
70043: CALL_OW 257
70047: PUSH
70048: LD_INT 5
70050: EQUAL
70051: NOT
70052: IFFALSE 70056
// exit ;
70054: GO 70444
// dist := 8 ;
70056: LD_ADDR_VAR 0 5
70060: PUSH
70061: LD_INT 8
70063: ST_TO_ADDR
// viewRange := 12 ;
70064: LD_ADDR_VAR 0 7
70068: PUSH
70069: LD_INT 12
70071: ST_TO_ADDR
// side := GetSide ( unit ) ;
70072: LD_ADDR_VAR 0 6
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 255
70086: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70087: LD_INT 61
70089: PPUSH
70090: LD_VAR 0 6
70094: PPUSH
70095: CALL_OW 321
70099: PUSH
70100: LD_INT 2
70102: EQUAL
70103: IFFALSE 70113
// viewRange := 16 ;
70105: LD_ADDR_VAR 0 7
70109: PUSH
70110: LD_INT 16
70112: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70113: LD_VAR 0 1
70117: PPUSH
70118: LD_VAR 0 2
70122: PPUSH
70123: LD_VAR 0 3
70127: PPUSH
70128: CALL_OW 297
70132: PUSH
70133: LD_VAR 0 5
70137: GREATER
70138: IFFALSE 70217
// begin ComMoveXY ( unit , x , y ) ;
70140: LD_VAR 0 1
70144: PPUSH
70145: LD_VAR 0 2
70149: PPUSH
70150: LD_VAR 0 3
70154: PPUSH
70155: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70159: LD_INT 35
70161: PPUSH
70162: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70166: LD_VAR 0 1
70170: PPUSH
70171: LD_VAR 0 2
70175: PPUSH
70176: LD_VAR 0 3
70180: PPUSH
70181: CALL 46405 0 3
70185: NOT
70186: IFFALSE 70190
// exit ;
70188: GO 70444
// until GetDistUnitXY ( unit , x , y ) < dist ;
70190: LD_VAR 0 1
70194: PPUSH
70195: LD_VAR 0 2
70199: PPUSH
70200: LD_VAR 0 3
70204: PPUSH
70205: CALL_OW 297
70209: PUSH
70210: LD_VAR 0 5
70214: LESS
70215: IFFALSE 70159
// end ; ComTurnXY ( unit , x , y ) ;
70217: LD_VAR 0 1
70221: PPUSH
70222: LD_VAR 0 2
70226: PPUSH
70227: LD_VAR 0 3
70231: PPUSH
70232: CALL_OW 118
// wait ( 5 ) ;
70236: LD_INT 5
70238: PPUSH
70239: CALL_OW 67
// _d := GetDir ( unit ) ;
70243: LD_ADDR_VAR 0 10
70247: PUSH
70248: LD_VAR 0 1
70252: PPUSH
70253: CALL_OW 254
70257: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70258: LD_ADDR_VAR 0 8
70262: PUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: CALL_OW 250
70272: PPUSH
70273: LD_VAR 0 10
70277: PPUSH
70278: LD_VAR 0 5
70282: PPUSH
70283: CALL_OW 272
70287: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70288: LD_ADDR_VAR 0 9
70292: PUSH
70293: LD_VAR 0 1
70297: PPUSH
70298: CALL_OW 251
70302: PPUSH
70303: LD_VAR 0 10
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: CALL_OW 273
70317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70318: LD_VAR 0 8
70322: PPUSH
70323: LD_VAR 0 9
70327: PPUSH
70328: CALL_OW 488
70332: NOT
70333: IFFALSE 70337
// exit ;
70335: GO 70444
// ComAnimCustom ( unit , 1 ) ;
70337: LD_VAR 0 1
70341: PPUSH
70342: LD_INT 1
70344: PPUSH
70345: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70349: LD_VAR 0 8
70353: PPUSH
70354: LD_VAR 0 9
70358: PPUSH
70359: LD_VAR 0 6
70363: PPUSH
70364: LD_VAR 0 7
70368: PPUSH
70369: CALL_OW 330
// repeat wait ( 1 ) ;
70373: LD_INT 1
70375: PPUSH
70376: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70380: LD_VAR 0 1
70384: PPUSH
70385: CALL_OW 316
70389: PUSH
70390: LD_VAR 0 1
70394: PPUSH
70395: CALL_OW 314
70399: OR
70400: PUSH
70401: LD_VAR 0 1
70405: PPUSH
70406: CALL_OW 302
70410: NOT
70411: OR
70412: PUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 301
70422: OR
70423: IFFALSE 70373
// RemoveSeeing ( _x , _y , side ) ;
70425: LD_VAR 0 8
70429: PPUSH
70430: LD_VAR 0 9
70434: PPUSH
70435: LD_VAR 0 6
70439: PPUSH
70440: CALL_OW 331
// end ; end_of_file
70444: LD_VAR 0 4
70448: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70449: LD_VAR 0 1
70453: PUSH
70454: LD_INT 200
70456: DOUBLE
70457: GREATEREQUAL
70458: IFFALSE 70466
70460: LD_INT 299
70462: DOUBLE
70463: LESSEQUAL
70464: IFTRUE 70468
70466: GO 70500
70468: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70469: LD_VAR 0 1
70473: PPUSH
70474: LD_VAR 0 2
70478: PPUSH
70479: LD_VAR 0 3
70483: PPUSH
70484: LD_VAR 0 4
70488: PPUSH
70489: LD_VAR 0 5
70493: PPUSH
70494: CALL 66187 0 5
70498: GO 70577
70500: LD_INT 300
70502: DOUBLE
70503: GREATEREQUAL
70504: IFFALSE 70512
70506: LD_INT 399
70508: DOUBLE
70509: LESSEQUAL
70510: IFTRUE 70514
70512: GO 70576
70514: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70515: LD_VAR 0 1
70519: PPUSH
70520: LD_VAR 0 2
70524: PPUSH
70525: LD_VAR 0 3
70529: PPUSH
70530: LD_VAR 0 4
70534: PPUSH
70535: LD_VAR 0 5
70539: PPUSH
70540: LD_VAR 0 6
70544: PPUSH
70545: LD_VAR 0 7
70549: PPUSH
70550: LD_VAR 0 8
70554: PPUSH
70555: LD_VAR 0 9
70559: PPUSH
70560: LD_VAR 0 10
70564: PPUSH
70565: LD_VAR 0 11
70569: PPUSH
70570: CALL 63829 0 11
70574: GO 70577
70576: POP
// end ;
70577: PPOPN 11
70579: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70580: LD_VAR 0 1
70584: PPUSH
70585: LD_VAR 0 2
70589: PPUSH
70590: LD_VAR 0 3
70594: PPUSH
70595: LD_VAR 0 4
70599: PPUSH
70600: LD_VAR 0 5
70604: PPUSH
70605: CALL 65923 0 5
// end ;
70609: PPOPN 5
70611: END
