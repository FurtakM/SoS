// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export kurinOpinion , platonovOpinion ; export vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 324 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 5
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// vehiclesToSave = [ ] ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: EMPTY
 119: ST_TO_ADDR
// scholtzeSpawned = false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// scholtzeSaved = false ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 136: LD_ADDR_EXP 15
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// spawnCrates = true ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 1
 151: ST_TO_ADDR
// dialog_track = false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dialog_workshop = false ;
 160: LD_ADDR_EXP 11
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dialog_stop = false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// counterEnable = false ;
 176: LD_ADDR_EXP 90
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// extraTime = 7 7$00 ;
 184: LD_ADDR_EXP 17
 188: PUSH
 189: LD_INT 14700
 191: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 192: LD_ADDR_EXP 16
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 200: LD_ADDR_EXP 18
 204: PUSH
 205: LD_INT 4200
 207: ST_TO_ADDR
// produceOnlyForYou = false ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// produceMoreVehicles = false ;
 216: LD_ADDR_EXP 19
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// kurinCheckVehicles = false ;
 224: LD_ADDR_EXP 21
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// omicronSurrender = false ;
 232: LD_ADDR_EXP 26
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// canExitBattlefield = true ;
 240: LD_ADDR_EXP 27
 244: PUSH
 245: LD_INT 1
 247: ST_TO_ADDR
// immortalSurvivors = false ;
 248: LD_ADDR_EXP 28
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 256: LD_ADDR_EXP 29
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// endCutscene = false ;
 264: LD_ADDR_EXP 32
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 272: LD_ADDR_EXP 31
 276: PUSH
 277: EMPTY
 278: ST_TO_ADDR
// kirovFactory = 0 ;
 279: LD_ADDR_EXP 24
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// kirovCompleteFactory = false ;
 287: LD_ADDR_EXP 25
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// enableOmicronAI = true ;
 295: LD_ADDR_EXP 30
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// PrepareRussians ;
 303: CALL 1020 0 0
// PrepareAmericans ;
 307: CALL 5509 0 0
// Nef_PrepareNature ;
 311: CALL 31502 0 0
// MissionIntro ;
 315: CALL 21873 0 0
// end ; end_of_file
 319: LD_VAR 0 1
 323: RET
// export function InitMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// BaseMapConfig ;
 327: CALL 340 0 0
// MissionMapConfig ;
 331: CALL 442 0 0
// end ;
 335: LD_VAR 0 1
 339: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 340: LD_INT 0
 342: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 343: LD_ADDR_EXP 33
 347: PUSH
 348: LD_INT 8
 350: PUSH
 351: LD_INT 12
 353: PUSH
 354: LD_INT 6
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 370: LD_ADDR_EXP 34
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 2
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 393: LD_ADDR_EXP 35
 397: PUSH
 398: LD_INT 5
 400: NEG
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL_OW 12
 409: PUSH
 410: EMPTY
 411: LIST
 412: ST_TO_ADDR
// debugMode = 0 ;
 413: LD_ADDR_EXP 38
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// missionPrefix = 03_ ;
 421: LD_ADDR_EXP 36
 425: PUSH
 426: LD_STRING 03_
 428: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 429: LD_ADDR_EXP 37
 433: PUSH
 434: LD_STRING 02_
 436: ST_TO_ADDR
// end ;
 437: LD_VAR 0 1
 441: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 442: LD_INT 0
 444: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 445: LD_ADDR_EXP 39
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: LD_INT 6
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_OWVAR 67
 468: ARRAY
 469: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 470: LD_ADDR_EXP 41
 474: PUSH
 475: LD_INT 84000
 477: PUSH
 478: LD_INT 73500
 480: PUSH
 481: LD_INT 63000
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 495: LD_ADDR_EXP 42
 499: PUSH
 500: LD_INT 150
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: LIST
 513: PUSH
 514: LD_OWVAR 67
 518: ARRAY
 519: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 520: LD_ADDR_EXP 43
 524: PUSH
 525: LD_INT 100
 527: PUSH
 528: LD_INT 50
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PUSH
 539: LD_OWVAR 67
 543: ARRAY
 544: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 545: LD_ADDR_EXP 44
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 570: LD_ADDR_EXP 47
 574: PUSH
 575: LD_INT 8
 577: PUSH
 578: LD_INT 6
 580: PUSH
 581: LD_INT 5
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_OWVAR 67
 593: ARRAY
 594: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 595: LD_ADDR_EXP 48
 599: PUSH
 600: LD_INT 17850
 602: PUSH
 603: LD_INT 16800
 605: PUSH
 606: LD_INT 15750
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PUSH
 614: LD_OWVAR 67
 618: ARRAY
 619: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 620: LD_ADDR_EXP 49
 624: PUSH
 625: LD_INT 47
 627: PUSH
 628: LD_INT 14
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 57
 637: PUSH
 638: LD_INT 39
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 61
 647: PUSH
 648: LD_INT 60
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 44
 657: PUSH
 658: LD_INT 76
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 44
 667: PUSH
 668: LD_INT 4
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 55
 677: PUSH
 678: LD_INT 29
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: ST_TO_ADDR
// end ;
 693: LD_VAR 0 1
 697: RET
// every 0 0$1 trigger debugMode do var i ;
 698: LD_EXP 38
 702: IFFALSE 1017
 704: GO 706
 706: DISABLE
 707: LD_INT 0
 709: PPUSH
// begin enable ;
 710: ENABLE
// FogOff ( your_side ) ;
 711: LD_OWVAR 2
 715: PPUSH
 716: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 720: LD_ADDR_VAR 0 1
 724: PUSH
 725: LD_INT 22
 727: PUSH
 728: LD_OWVAR 2
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: LD_INT 21
 742: PUSH
 743: LD_INT 1
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 21
 752: PUSH
 753: LD_INT 2
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PPUSH
 769: CALL_OW 69
 773: PUSH
 774: FOR_IN
 775: IFFALSE 791
// SetLives ( i , 1000 ) ;
 777: LD_VAR 0 1
 781: PPUSH
 782: LD_INT 1000
 784: PPUSH
 785: CALL_OW 234
 789: GO 774
 791: POP
 792: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 793: LD_ADDR_VAR 0 1
 797: PUSH
 798: LD_INT 22
 800: PUSH
 801: LD_OWVAR 2
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 21
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 894
// begin SetSkill ( i , skill_combat , 10 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1
 839: PPUSH
 840: LD_INT 10
 842: PPUSH
 843: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 847: LD_VAR 0 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: LD_INT 10
 857: PPUSH
 858: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: LD_INT 10
 872: PPUSH
 873: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 877: LD_VAR 0 1
 881: PPUSH
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 10
 887: PPUSH
 888: CALL_OW 237
// end ;
 892: GO 829
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 896: LD_ADDR_VAR 0 1
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_OWVAR 2
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: LD_INT 30
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 30
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1015
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: CALL_OW 274
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 9999
 968: PPUSH
 969: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 274
 982: PPUSH
 983: LD_INT 2
 985: PPUSH
 986: LD_INT 9999
 988: PPUSH
 989: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 993: LD_VAR 0 1
 997: PPUSH
 998: CALL_OW 274
1002: PPUSH
1003: LD_INT 3
1005: PPUSH
1006: LD_INT 9999
1008: PPUSH
1009: CALL_OW 277
// end ;
1013: GO 950
1015: POP
1016: POP
// end ; end_of_file
1017: PPOPN 1
1019: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1020: LD_INT 0
1022: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1023: LD_ADDR_EXP 82
1027: PUSH
1028: LD_INT 0
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1046: LD_ADDR_EXP 76
1050: PUSH
1051: EMPTY
1052: ST_TO_ADDR
// PrepareKirovBase ;
1053: CALL 2109 0 0
// PrepareHeroes ;
1057: CALL 1090 0 0
// PrepareKirovPersonel ;
1061: CALL 2874 0 0
// PrepareBeriaBase ;
1065: CALL 1511 0 0
// PrepareSecondBaseTeam ;
1069: CALL 4037 0 0
// PrepareGrishko ;
1073: CALL 3202 0 0
// PrepareOtherBuildings ;
1077: CALL 3471 0 0
// PrepareVehicles ;
1081: CALL 3275 0 0
// end ;
1085: LD_VAR 0 1
1089: RET
// function PrepareHeroes ; begin
1090: LD_INT 0
1092: PPUSH
// uc_side = 3 ;
1093: LD_ADDR_OWVAR 20
1097: PUSH
1098: LD_INT 3
1100: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1101: LD_ADDR_EXP 50
1105: PUSH
1106: LD_STRING Burlak
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: CALL 6971 0 2
1116: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1117: LD_ADDR_EXP 51
1121: PUSH
1122: LD_STRING Gnyevko
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: CALL 6971 0 2
1132: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1133: LD_ADDR_EXP 53
1137: PUSH
1138: LD_STRING Kovalyuk
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL 6971 0 2
1148: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1149: LD_ADDR_EXP 52
1153: PUSH
1154: LD_STRING Kirilenkova
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL 6971 0 2
1164: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1165: LD_EXP 50
1169: PUSH
1170: LD_EXP 51
1174: PUSH
1175: LD_EXP 53
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PPUSH
1185: LD_INT 3
1187: PPUSH
1188: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1192: LD_EXP 52
1196: PPUSH
1197: LD_INT 4
1199: PPUSH
1200: CALL_OW 336
// uc_side = 6 ;
1204: LD_ADDR_OWVAR 20
1208: PUSH
1209: LD_INT 6
1211: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1212: LD_EXP 1
1216: NOT
1217: PUSH
1218: LD_STRING 02_Belkov
1220: PPUSH
1221: CALL_OW 28
1225: AND
1226: IFFALSE 1327
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1228: LD_ADDR_EXP 54
1232: PUSH
1233: LD_STRING Belkov
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: CALL 6971 0 2
1243: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1244: LD_STRING 02_Belkov2
1246: PPUSH
1247: CALL_OW 28
1251: IFFALSE 1290
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1253: LD_ADDR_EXP 55
1257: PUSH
1258: LD_STRING Belkov2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL 6971 0 2
1268: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1269: LD_EXP 55
1273: PPUSH
1274: LD_INT 159
1276: PPUSH
1277: LD_INT 107
1279: PPUSH
1280: LD_INT 5
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1290: LD_ADDR_EXP 64
1294: PUSH
1295: LD_EXP 54
1299: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1300: LD_EXP 54
1304: PPUSH
1305: LD_INT 165
1307: PPUSH
1308: LD_INT 110
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 48
// ComHold ( Belkov ) ;
1318: LD_EXP 54
1322: PPUSH
1323: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1327: LD_EXP 1
1331: PUSH
1332: LD_STRING 02_Belkov2
1334: PPUSH
1335: CALL_OW 28
1339: AND
1340: IFFALSE 1395
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1342: LD_ADDR_EXP 55
1346: PUSH
1347: LD_STRING Belkov2
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: CALL 6971 0 2
1357: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1358: LD_ADDR_EXP 64
1362: PUSH
1363: LD_EXP 55
1367: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1368: LD_EXP 55
1372: PPUSH
1373: LD_INT 165
1375: PPUSH
1376: LD_INT 110
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 48
// ComHold ( Belkov2 ) ;
1386: LD_EXP 55
1390: PPUSH
1391: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1395: LD_EXP 54
1399: PUSH
1400: LD_EXP 55
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1416: LD_EXP 50
1420: PPUSH
1421: LD_INT 164
1423: PPUSH
1424: LD_INT 108
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 48
// ComHold ( Burlak ) ;
1434: LD_EXP 50
1438: PPUSH
1439: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1443: LD_EXP 51
1447: PPUSH
1448: LD_INT 159
1450: PPUSH
1451: LD_INT 107
1453: PPUSH
1454: LD_INT 5
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1464: LD_EXP 53
1468: PPUSH
1469: LD_INT 159
1471: PPUSH
1472: LD_INT 107
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1485: LD_EXP 52
1489: PPUSH
1490: LD_INT 159
1492: PPUSH
1493: LD_INT 107
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 50
// end ;
1506: LD_VAR 0 1
1510: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1516: LD_ADDR_EXP 60
1520: PUSH
1521: LD_STRING 02_BeriaBase_2
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1531: LD_ADDR_EXP 59
1535: PUSH
1536: LD_STRING 02_other_beria
1538: PPUSH
1539: CALL_OW 31
1543: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1544: LD_ADDR_EXP 57
1548: PUSH
1549: LD_STRING 02_other_survivors
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// uc_side = 3 ;
1557: LD_ADDR_OWVAR 20
1561: PUSH
1562: LD_INT 3
1564: ST_TO_ADDR
// uc_nation = 3 ;
1565: LD_ADDR_OWVAR 21
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// for i := 1 to beriaBase do
1573: LD_ADDR_VAR 0 2
1577: PUSH
1578: DOUBLE
1579: LD_INT 1
1581: DEC
1582: ST_TO_ADDR
1583: LD_EXP 60
1587: PUSH
1588: FOR_TO
1589: IFFALSE 1842
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1591: LD_ADDR_OWVAR 42
1595: PUSH
1596: LD_EXP 60
1600: PUSH
1601: LD_VAR 0 2
1605: ARRAY
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1611: LD_ADDR_OWVAR 43
1615: PUSH
1616: LD_EXP 60
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PUSH
1627: LD_INT 5
1629: ARRAY
1630: ST_TO_ADDR
// if bc_type = b_lab then
1631: LD_OWVAR 42
1635: PUSH
1636: LD_INT 6
1638: EQUAL
1639: IFFALSE 1657
// begin bc_kind1 = b_lab_basic ;
1641: LD_ADDR_OWVAR 44
1645: PUSH
1646: LD_INT 9
1648: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_INT 9
1656: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1657: LD_OWVAR 42
1661: PUSH
1662: LD_INT 7
1664: EQUAL
1665: PUSH
1666: LD_OWVAR 42
1670: PUSH
1671: LD_INT 8
1673: EQUAL
1674: OR
1675: IFFALSE 1791
// begin if beriaBase [ i ] [ 7 ] then
1677: LD_EXP 60
1681: PUSH
1682: LD_VAR 0 2
1686: ARRAY
1687: PUSH
1688: LD_INT 7
1690: ARRAY
1691: IFFALSE 1713
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1693: LD_ADDR_OWVAR 44
1697: PUSH
1698: LD_EXP 60
1702: PUSH
1703: LD_VAR 0 2
1707: ARRAY
1708: PUSH
1709: LD_INT 7
1711: ARRAY
1712: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1713: LD_EXP 60
1717: PUSH
1718: LD_VAR 0 2
1722: ARRAY
1723: PUSH
1724: LD_INT 8
1726: ARRAY
1727: IFFALSE 1749
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1729: LD_ADDR_OWVAR 45
1733: PUSH
1734: LD_EXP 60
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 8
1747: ARRAY
1748: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1749: LD_EXP 60
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: NOT
1764: PUSH
1765: LD_EXP 60
1769: PUSH
1770: LD_VAR 0 2
1774: ARRAY
1775: PUSH
1776: LD_INT 8
1778: ARRAY
1779: NOT
1780: AND
1781: IFFALSE 1791
// bc_type := b_lab ;
1783: LD_ADDR_OWVAR 42
1787: PUSH
1788: LD_INT 6
1790: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1791: LD_EXP 60
1795: PUSH
1796: LD_VAR 0 2
1800: ARRAY
1801: PUSH
1802: LD_INT 2
1804: ARRAY
1805: PPUSH
1806: LD_EXP 60
1810: PUSH
1811: LD_VAR 0 2
1815: ARRAY
1816: PUSH
1817: LD_INT 3
1819: ARRAY
1820: PPUSH
1821: LD_EXP 60
1825: PUSH
1826: LD_VAR 0 2
1830: ARRAY
1831: PUSH
1832: LD_INT 4
1834: ARRAY
1835: PPUSH
1836: CALL_OW 47
// end ;
1840: GO 1588
1842: POP
1843: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1844: LD_ADDR_EXP 61
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: CALL_OW 69
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1882: LD_EXP 61
1886: PPUSH
1887: LD_STRING beria
1889: PPUSH
1890: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1894: LD_EXP 61
1898: PPUSH
1899: CALL_OW 274
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_EXP 2
1911: PPUSH
1912: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1916: LD_EXP 61
1920: PPUSH
1921: CALL_OW 274
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: LD_EXP 3
1933: PPUSH
1934: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1938: LD_EXP 61
1942: PPUSH
1943: CALL_OW 274
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_EXP 61
1955: PPUSH
1956: CALL_OW 274
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: CALL_OW 275
1968: PUSH
1969: LD_EXP 42
1973: PLUS
1974: PPUSH
1975: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1979: LD_EXP 61
1983: PPUSH
1984: CALL_OW 274
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: LD_EXP 61
1996: PPUSH
1997: CALL_OW 274
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: CALL_OW 275
2009: PUSH
2010: LD_EXP 43
2014: PLUS
2015: PPUSH
2016: CALL_OW 277
// uc_side = 6 ;
2020: LD_ADDR_OWVAR 20
2024: PUSH
2025: LD_INT 6
2027: ST_TO_ADDR
// for i in otherBeriaUnits do
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_EXP 59
2037: PUSH
2038: FOR_IN
2039: IFFALSE 2064
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_INT 159
2048: PPUSH
2049: LD_INT 107
2051: PPUSH
2052: LD_INT 10
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
2062: GO 2038
2064: POP
2065: POP
// for i in other_survivors do
2066: LD_ADDR_VAR 0 2
2070: PUSH
2071: LD_EXP 57
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2102
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2079: LD_VAR 0 2
2083: PPUSH
2084: LD_INT 159
2086: PPUSH
2087: LD_INT 107
2089: PPUSH
2090: LD_INT 10
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 50
2100: GO 2076
2102: POP
2103: POP
// end ;
2104: LD_VAR 0 1
2108: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2115: LD_ADDR_EXP 67
2119: PUSH
2120: LD_STRING 02_KirovBase_3
2122: PPUSH
2123: EMPTY
2124: PPUSH
2125: CALL_OW 30
2129: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2130: LD_ADDR_EXP 66
2134: PUSH
2135: LD_STRING 02_other_kirov
2137: PPUSH
2138: CALL_OW 31
2142: ST_TO_ADDR
// uc_side = 6 ;
2143: LD_ADDR_OWVAR 20
2147: PUSH
2148: LD_INT 6
2150: ST_TO_ADDR
// uc_nation = 3 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2159: LD_ADDR_EXP 62
2163: PUSH
2164: LD_STRING Kurin
2166: PPUSH
2167: LD_INT 0
2169: PPUSH
2170: CALL 6971 0 2
2174: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2175: LD_EXP 62
2179: PPUSH
2180: LD_INT 166
2182: PPUSH
2183: LD_INT 109
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// ComHold ( Kurin ) ;
2193: LD_EXP 62
2197: PPUSH
2198: CALL_OW 140
// for i := 1 to kirovBase do
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: DOUBLE
2208: LD_INT 1
2210: DEC
2211: ST_TO_ADDR
2212: LD_EXP 67
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2656
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2220: LD_ADDR_OWVAR 42
2224: PUSH
2225: LD_EXP 67
2229: PUSH
2230: LD_VAR 0 2
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: ARRAY
2239: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2240: LD_ADDR_OWVAR 43
2244: PUSH
2245: LD_EXP 67
2249: PUSH
2250: LD_VAR 0 2
2254: ARRAY
2255: PUSH
2256: LD_INT 5
2258: ARRAY
2259: ST_TO_ADDR
// if bc_type = b_depot then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2278
// bc_type = b_warehouse ;
2270: LD_ADDR_OWVAR 42
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if bc_type = b_armoury then
2278: LD_OWVAR 42
2282: PUSH
2283: LD_INT 4
2285: EQUAL
2286: IFFALSE 2296
// bc_type = b_barracks ;
2288: LD_ADDR_OWVAR 42
2292: PUSH
2293: LD_INT 5
2295: ST_TO_ADDR
// if bc_type = b_lab then
2296: LD_OWVAR 42
2300: PUSH
2301: LD_INT 6
2303: EQUAL
2304: IFFALSE 2322
// begin bc_kind1 = b_lab_weapon ;
2306: LD_ADDR_OWVAR 44
2310: PUSH
2311: LD_INT 10
2313: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2314: LD_ADDR_OWVAR 45
2318: PUSH
2319: LD_INT 9
2321: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 2
2329: EQUAL
2330: IFFALSE 2340
// bc_type = b_factory ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2340: LD_OWVAR 42
2344: PUSH
2345: LD_INT 7
2347: EQUAL
2348: PUSH
2349: LD_OWVAR 42
2353: PUSH
2354: LD_INT 8
2356: EQUAL
2357: OR
2358: IFFALSE 2474
// begin if kirovBase [ i ] [ 7 ] then
2360: LD_EXP 67
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 7
2373: ARRAY
2374: IFFALSE 2396
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2376: LD_ADDR_OWVAR 44
2380: PUSH
2381: LD_EXP 67
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: PUSH
2392: LD_INT 7
2394: ARRAY
2395: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2396: LD_EXP 67
2400: PUSH
2401: LD_VAR 0 2
2405: ARRAY
2406: PUSH
2407: LD_INT 8
2409: ARRAY
2410: IFFALSE 2432
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2412: LD_ADDR_OWVAR 45
2416: PUSH
2417: LD_EXP 67
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_INT 8
2430: ARRAY
2431: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2432: LD_EXP 67
2436: PUSH
2437: LD_VAR 0 2
2441: ARRAY
2442: PUSH
2443: LD_INT 7
2445: ARRAY
2446: NOT
2447: PUSH
2448: LD_EXP 67
2452: PUSH
2453: LD_VAR 0 2
2457: ARRAY
2458: PUSH
2459: LD_INT 8
2461: ARRAY
2462: NOT
2463: AND
2464: IFFALSE 2474
// bc_type := b_lab ;
2466: LD_ADDR_OWVAR 42
2470: PUSH
2471: LD_INT 6
2473: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2474: LD_OWVAR 42
2478: PUSH
2479: LD_INT 31
2481: EQUAL
2482: IFFALSE 2506
// begin bc_type = b_bunker ;
2484: LD_ADDR_OWVAR 42
2488: PUSH
2489: LD_INT 32
2491: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2492: LD_ADDR_EXP 78
2496: PUSH
2497: LD_EXP 78
2501: PUSH
2502: LD_INT 1
2504: PLUS
2505: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2506: LD_ADDR_VAR 0 4
2510: PUSH
2511: LD_EXP 67
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: PPUSH
2526: LD_EXP 67
2530: PUSH
2531: LD_VAR 0 2
2535: ARRAY
2536: PUSH
2537: LD_INT 3
2539: ARRAY
2540: PPUSH
2541: LD_EXP 67
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 47
2560: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 4
2568: LESS
2569: PUSH
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 32
2577: EQUAL
2578: AND
2579: IFFALSE 2628
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 42
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: LD_INT 1
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 12
2606: ARRAY
2607: PPUSH
2608: CALL_OW 431
// tmp = tmp + 1 ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: ST_TO_ADDR
// end else
2626: GO 2654
// if bc_type = b_bunker then
2628: LD_OWVAR 42
2632: PUSH
2633: LD_INT 32
2635: EQUAL
2636: IFFALSE 2654
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2638: LD_ADDR_EXP 73
2642: PUSH
2643: LD_EXP 73
2647: PUSH
2648: LD_VAR 0 4
2652: ADD
2653: ST_TO_ADDR
// end ;
2654: GO 2217
2656: POP
2657: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2658: LD_ADDR_EXP 68
2662: PUSH
2663: LD_INT 22
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2696: LD_EXP 68
2700: PPUSH
2701: LD_STRING kirov
2703: PPUSH
2704: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2708: LD_EXP 68
2712: PPUSH
2713: CALL_OW 274
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 5000
2723: PPUSH
2724: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2728: LD_EXP 68
2732: PPUSH
2733: CALL_OW 274
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: LD_INT 2000
2743: PPUSH
2744: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2748: LD_ADDR_EXP 70
2752: PUSH
2753: LD_INT 22
2755: PUSH
2756: LD_INT 6
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 21
2765: PUSH
2766: LD_INT 3
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: LD_INT 30
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: PPUSH
2793: LD_INT 145
2795: PPUSH
2796: LD_INT 102
2798: PPUSH
2799: CALL_OW 73
2803: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2804: LD_ADDR_EXP 71
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 6
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 21
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 5
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: PPUSH
2844: CALL_OW 69
2848: PUSH
2849: LD_EXP 70
2853: DIFF
2854: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2855: LD_ADDR_EXP 71
2859: PUSH
2860: LD_EXP 71
2864: PUSH
2865: LD_INT 1
2867: ARRAY
2868: ST_TO_ADDR
// end ;
2869: LD_VAR 0 1
2873: RET
// export function PrepareKirovPersonel ; var i ; begin
2874: LD_INT 0
2876: PPUSH
2877: PPUSH
// PrepareEngineer ( false , 7 ) ;
2878: LD_INT 0
2880: PPUSH
2881: LD_INT 7
2883: PPUSH
2884: CALL_OW 382
// kirovEng = CreateHuman ;
2888: LD_ADDR_EXP 72
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2898: LD_EXP 72
2902: PPUSH
2903: LD_INT 159
2905: PPUSH
2906: LD_INT 107
2908: PPUSH
2909: LD_INT 10
2911: PPUSH
2912: LD_INT 0
2914: PPUSH
2915: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2919: LD_ADDR_EXP 63
2923: PUSH
2924: LD_STRING Popov
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL 6971 0 2
2934: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2935: LD_EXP 63
2939: PPUSH
2940: LD_INT 4
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2950: LD_EXP 63
2954: PPUSH
2955: LD_INT 98
2957: PPUSH
2958: LD_INT 36
2960: PPUSH
2961: CALL_OW 118
// hc_name :=  ;
2965: LD_ADDR_OWVAR 26
2969: PUSH
2970: LD_STRING 
2972: ST_TO_ADDR
// hc_gallery :=  ;
2973: LD_ADDR_OWVAR 33
2977: PUSH
2978: LD_STRING 
2980: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2981: LD_INT 0
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: CALL_OW 381
// ruScout = CreateHuman ;
2991: LD_ADDR_EXP 65
2995: PUSH
2996: CALL_OW 44
3000: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
3001: LD_EXP 65
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_INT 0
3011: PPUSH
3012: CALL_OW 49
// ComCrawl ( ruScout ) ;
3016: LD_EXP 65
3020: PPUSH
3021: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3025: LD_EXP 65
3029: PPUSH
3030: LD_INT 98
3032: PPUSH
3033: LD_INT 36
3035: PPUSH
3036: CALL_OW 178
// uc_side = 6 ;
3040: LD_ADDR_OWVAR 20
3044: PUSH
3045: LD_INT 6
3047: ST_TO_ADDR
// for i in otherKirovUnits do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_EXP 66
3057: PUSH
3058: FOR_IN
3059: IFFALSE 3195
// begin SetSide ( i , 6 ) ;
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 6
3068: PPUSH
3069: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3073: LD_VAR 0 2
3077: PPUSH
3078: CALL_OW 257
3082: PUSH
3083: LD_INT 1
3085: EQUAL
3086: PUSH
3087: LD_EXP 78
3091: PUSH
3092: LD_INT 0
3094: GREATER
3095: AND
3096: IFFALSE 3172
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_INT 18
3105: PPUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 6
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 21
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 32
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 70
3145: PUSH
3146: LD_EXP 78
3150: ARRAY
3151: PPUSH
3152: CALL 8515 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3156: LD_ADDR_EXP 78
3160: PUSH
3161: LD_EXP 78
3165: PUSH
3166: LD_INT 1
3168: MINUS
3169: ST_TO_ADDR
// end else
3170: GO 3193
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_INT 159
3179: PPUSH
3180: LD_INT 107
3182: PPUSH
3183: LD_INT 10
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 50
// end ; end ;
3193: GO 3058
3195: POP
3196: POP
// end ;
3197: LD_VAR 0 1
3201: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3202: LD_INT 0
3204: PPUSH
3205: PPUSH
3206: PPUSH
3207: PPUSH
// uc_side = 6 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 6
3215: ST_TO_ADDR
// uc_nation = 3 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 3
3223: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3224: LD_ADDR_EXP 83
3228: PUSH
3229: LD_STRING Grishko
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL 6971 0 2
3239: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3240: LD_EXP 83
3244: PPUSH
3245: LD_INT 218
3247: PPUSH
3248: LD_INT 108
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: LD_INT 0
3256: PPUSH
3257: CALL_OW 50
// ComHold ( Grishko ) ;
3261: LD_EXP 83
3265: PPUSH
3266: CALL_OW 140
// end ;
3270: LD_VAR 0 1
3274: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3275: LD_INT 0
3277: PPUSH
3278: PPUSH
3279: PPUSH
// uc_side = 3 ;
3280: LD_ADDR_OWVAR 20
3284: PUSH
3285: LD_INT 3
3287: ST_TO_ADDR
// uc_nation = 3 ;
3288: LD_ADDR_OWVAR 21
3292: PUSH
3293: LD_INT 3
3295: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: DOUBLE
3302: LD_INT 1
3304: DEC
3305: ST_TO_ADDR
3306: LD_EXP 4
3310: PUSH
3311: FOR_TO
3312: IFFALSE 3464
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3314: LD_EXP 4
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 4
3333: PUSH
3334: LD_VAR 0 2
3338: ARRAY
3339: PUSH
3340: LD_INT 2
3342: ARRAY
3343: PPUSH
3344: LD_EXP 4
3348: PUSH
3349: LD_VAR 0 2
3353: ARRAY
3354: PUSH
3355: LD_INT 3
3357: ARRAY
3358: PPUSH
3359: LD_EXP 4
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PUSH
3370: LD_INT 4
3372: ARRAY
3373: PPUSH
3374: LD_EXP 4
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 5
3387: ARRAY
3388: PPUSH
3389: CALL 37153 0 5
// vehicle = CreateVehicle ;
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: CALL_OW 45
3402: ST_TO_ADDR
// SetDir ( vehicle , rand ( 0 , 5 ) ) ;
3403: LD_VAR 0 3
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 5
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: CALL_OW 233
// PlaceUnitArea ( vehicle , BeriaParkingArea , false ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 33
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_EXP 4
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 6
3456: ARRAY
3457: PPUSH
3458: CALL_OW 234
// end ;
3462: GO 3311
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 1
3470: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_STRING 02_OtherBuildings_4
3484: PPUSH
3485: EMPTY
3486: PPUSH
3487: CALL_OW 30
3491: ST_TO_ADDR
// uc_side = 3 ;
3492: LD_ADDR_OWVAR 20
3496: PUSH
3497: LD_INT 3
3499: ST_TO_ADDR
// for i := 1 to otherBuildings do
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_VAR 0 3
3514: PUSH
3515: FOR_TO
3516: IFFALSE 3777
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 2
3532: ARRAY
3533: PUSH
3534: LD_INT 6
3536: ARRAY
3537: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3538: LD_ADDR_OWVAR 42
3542: PUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_VAR 0 2
3552: ARRAY
3553: PUSH
3554: LD_INT 1
3556: ARRAY
3557: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3558: LD_ADDR_OWVAR 43
3562: PUSH
3563: LD_VAR 0 3
3567: PUSH
3568: LD_VAR 0 2
3572: ARRAY
3573: PUSH
3574: LD_INT 5
3576: ARRAY
3577: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_VAR 0 3
3587: PUSH
3588: LD_VAR 0 2
3592: ARRAY
3593: PUSH
3594: LD_INT 2
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_VAR 0 2
3607: ARRAY
3608: PUSH
3609: LD_INT 3
3611: ARRAY
3612: PPUSH
3613: LD_VAR 0 3
3617: PUSH
3618: LD_VAR 0 2
3622: ARRAY
3623: PUSH
3624: LD_INT 4
3626: ARRAY
3627: PPUSH
3628: CALL_OW 47
3632: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 3
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: PUSH
3649: LD_INT 7
3651: ARRAY
3652: PPUSH
3653: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3657: LD_VAR 0 4
3661: PPUSH
3662: CALL_OW 266
3666: PUSH
3667: LD_INT 0
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: IN
3677: IFFALSE 3775
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 1
3691: PPUSH
3692: LD_VAR 0 3
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PUSH
3703: LD_INT 8
3705: ARRAY
3706: PPUSH
3707: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3711: LD_VAR 0 4
3715: PPUSH
3716: CALL_OW 274
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_VAR 0 2
3733: ARRAY
3734: PUSH
3735: LD_INT 9
3737: ARRAY
3738: PPUSH
3739: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3743: LD_VAR 0 4
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_VAR 0 3
3760: PUSH
3761: LD_VAR 0 2
3765: ARRAY
3766: PUSH
3767: LD_INT 10
3769: ARRAY
3770: PPUSH
3771: CALL_OW 277
// end ; end ;
3775: GO 3515
3777: POP
3778: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_STRING 02_AmericanBuildings_5
3786: PPUSH
3787: EMPTY
3788: PPUSH
3789: CALL_OW 30
3793: ST_TO_ADDR
// uc_side = 1 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// for i := 1 to otherBuildings do
3810: LD_ADDR_VAR 0 2
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 3
3824: PUSH
3825: FOR_TO
3826: IFFALSE 4030
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3828: LD_ADDR_OWVAR 42
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_VAR 0 2
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3848: LD_ADDR_OWVAR 43
3852: PUSH
3853: LD_VAR 0 3
3857: PUSH
3858: LD_VAR 0 2
3862: ARRAY
3863: PUSH
3864: LD_INT 5
3866: ARRAY
3867: ST_TO_ADDR
// if bc_type = b_breastwork then
3868: LD_OWVAR 42
3872: PUSH
3873: LD_INT 31
3875: EQUAL
3876: IFFALSE 3949
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3878: LD_ADDR_VAR 0 4
3882: PUSH
3883: LD_VAR 0 3
3887: PUSH
3888: LD_VAR 0 2
3892: ARRAY
3893: PUSH
3894: LD_INT 2
3896: ARRAY
3897: PPUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 2
3907: ARRAY
3908: PUSH
3909: LD_INT 3
3911: ARRAY
3912: PPUSH
3913: LD_VAR 0 3
3917: PUSH
3918: LD_VAR 0 2
3922: ARRAY
3923: PUSH
3924: LD_INT 4
3926: ARRAY
3927: PPUSH
3928: CALL_OW 47
3932: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3933: LD_EXP 44
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL 8605 0 2
// end else
3947: GO 4004
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 2
3963: ARRAY
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 3
3973: PUSH
3974: LD_VAR 0 2
3978: ARRAY
3979: PUSH
3980: LD_INT 3
3982: ARRAY
3983: PPUSH
3984: LD_VAR 0 3
3988: PUSH
3989: LD_VAR 0 2
3993: ARRAY
3994: PUSH
3995: LD_INT 4
3997: ARRAY
3998: PPUSH
3999: CALL_OW 47
4003: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 3
4013: PUSH
4014: LD_VAR 0 2
4018: ARRAY
4019: PUSH
4020: LD_INT 7
4022: ARRAY
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3825
4030: POP
4031: POP
// end ;
4032: LD_VAR 0 1
4036: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4037: LD_INT 0
4039: PPUSH
4040: PPUSH
// secondBaseTeam = [ ] ;
4041: LD_ADDR_EXP 79
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4048: LD_INT 226
4050: PPUSH
4051: LD_INT 109
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: CALL_OW 441
// uc_side = 6 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 6
4068: ST_TO_ADDR
// uc_nation = 3 ;
4069: LD_ADDR_OWVAR 21
4073: PUSH
4074: LD_INT 3
4076: ST_TO_ADDR
// hc_name =  ;
4077: LD_ADDR_OWVAR 26
4081: PUSH
4082: LD_STRING 
4084: ST_TO_ADDR
// hc_gallery =  ;
4085: LD_ADDR_OWVAR 33
4089: PUSH
4090: LD_STRING 
4092: ST_TO_ADDR
// for i := 1 to 3 do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_INT 3
4105: PUSH
4106: FOR_TO
4107: IFFALSE 4160
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 44
4116: PPUSH
4117: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 79
4125: PUSH
4126: LD_EXP 79
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 79
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: PPUSH
4148: LD_INT 19
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 49
// end ;
4158: GO 4106
4160: POP
4161: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_EXP 44
4169: PPUSH
4170: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4174: LD_ADDR_EXP 79
4178: PUSH
4179: LD_EXP 79
4183: PUSH
4184: CALL_OW 44
4188: ADD
4189: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4190: LD_EXP 79
4194: PUSH
4195: LD_INT 4
4197: ARRAY
4198: PPUSH
4199: LD_INT 19
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4209: LD_INT 0
4211: PPUSH
4212: LD_EXP 44
4216: PPUSH
4217: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4221: LD_ADDR_EXP 79
4225: PUSH
4226: LD_EXP 79
4230: PUSH
4231: CALL_OW 44
4235: ADD
4236: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4237: LD_EXP 79
4241: PUSH
4242: LD_INT 5
4244: ARRAY
4245: PPUSH
4246: LD_INT 19
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4256: LD_EXP 79
4260: PPUSH
4261: LD_INT 214
4263: PPUSH
4264: LD_INT 105
4266: PPUSH
4267: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4271: LD_EXP 79
4275: PPUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 2
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 72
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 222
4296: PPUSH
4297: LD_INT 115
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4307: LD_EXP 79
4311: PPUSH
4312: LD_INT 25
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: PPUSH
4327: LD_INT 224
4329: PPUSH
4330: LD_INT 107
4332: PPUSH
4333: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4337: LD_EXP 79
4341: PPUSH
4342: LD_INT 25
4344: PUSH
4345: LD_INT 2
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 72
4356: PPUSH
4357: LD_INT 228
4359: PPUSH
4360: LD_INT 110
4362: PPUSH
4363: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4367: LD_EXP 79
4371: PPUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 72
4386: PPUSH
4387: LD_INT 29
4389: PPUSH
4390: LD_INT 226
4392: PPUSH
4393: LD_INT 109
4395: PPUSH
4396: LD_INT 3
4398: PPUSH
4399: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4403: LD_EXP 79
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: PPUSH
4423: LD_INT 4
4425: PPUSH
4426: LD_INT 216
4428: PPUSH
4429: LD_INT 114
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4439: LD_EXP 79
4443: PPUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 72
4458: PPUSH
4459: LD_INT 31
4461: PPUSH
4462: LD_INT 215
4464: PPUSH
4465: LD_INT 103
4467: PPUSH
4468: LD_INT 3
4470: PPUSH
4471: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4475: LD_EXP 79
4479: PPUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 72
4494: PPUSH
4495: LD_INT 31
4497: PPUSH
4498: LD_INT 227
4500: PPUSH
4501: LD_INT 116
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4511: LD_EXP 79
4515: PPUSH
4516: LD_INT 25
4518: PUSH
4519: LD_INT 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 72
4530: PPUSH
4531: LD_INT 208
4533: PPUSH
4534: LD_INT 106
4536: PPUSH
4537: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4541: LD_EXP 79
4545: PPUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PPUSH
4556: CALL_OW 72
4560: PPUSH
4561: LD_INT 209
4563: PPUSH
4564: LD_INT 105
4566: PPUSH
4567: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4571: LD_EXP 79
4575: PUSH
4576: LD_INT 5
4578: ARRAY
4579: PPUSH
4580: LD_INT 209
4582: PPUSH
4583: LD_INT 105
4585: PPUSH
4586: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4590: LD_EXP 79
4594: PUSH
4595: LD_INT 5
4597: ARRAY
4598: PPUSH
4599: LD_INT 208
4601: PPUSH
4602: LD_INT 106
4604: PPUSH
4605: CALL_OW 178
// end ;
4609: LD_VAR 0 1
4613: RET
// export function SpawnKirovSupport ; var i , un ; begin
4614: LD_INT 0
4616: PPUSH
4617: PPUSH
4618: PPUSH
// uc_side = 6 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 6
4626: ST_TO_ADDR
// uc_nation = 3 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 3
4634: ST_TO_ADDR
// hc_name =  ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_gallery :=  ;
4643: LD_ADDR_OWVAR 33
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_EXP 81
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4755
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4669: LD_INT 0
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: CALL_OW 12
4693: PPUSH
4694: CALL_OW 380
// un = CreateHuman ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4708: LD_ADDR_EXP 80
4712: PUSH
4713: LD_EXP 80
4717: PUSH
4718: LD_VAR 0 3
4722: ADD
4723: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4724: LD_VAR 0 3
4728: PPUSH
4729: LD_INT 19
4731: PPUSH
4732: LD_INT 0
4734: PPUSH
4735: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4739: LD_VAR 0 3
4743: PPUSH
4744: LD_EXP 68
4748: PPUSH
4749: CALL_OW 120
// end ;
4753: GO 4666
4755: POP
4756: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4757: LD_ADDR_VAR 0 2
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_EXP 82
4771: PUSH
4772: LD_INT 1
4774: ARRAY
4775: PUSH
4776: LD_INT 4
4778: PLUS
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4879
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4783: LD_INT 0
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 3
4794: PPUSH
4795: CALL_OW 12
4799: PPUSH
4800: CALL_OW 380
// un = CreateHuman ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_INT 19
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// if i > kirovBunkersToOccupy then
4829: LD_VAR 0 2
4833: PUSH
4834: LD_EXP 74
4838: GREATER
4839: IFFALSE 4857
// ComEnterUnit ( un , ru2_bar2 ) else
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_EXP 71
4850: PPUSH
4851: CALL_OW 120
4855: GO 4877
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4857: LD_VAR 0 3
4861: PPUSH
4862: LD_EXP 74
4866: PUSH
4867: LD_VAR 0 2
4871: ARRAY
4872: PPUSH
4873: CALL_OW 120
// end ;
4877: GO 4780
4879: POP
4880: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: DOUBLE
4887: LD_INT 1
4889: DEC
4890: ST_TO_ADDR
4891: LD_EXP 82
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: FOR_TO
4901: IFFALSE 5004
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_INT 3
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 3
4914: PPUSH
4915: CALL_OW 12
4919: PPUSH
4920: CALL_OW 380
// un = CreateHuman ;
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: CALL_OW 44
4933: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4934: LD_VAR 0 3
4938: PPUSH
4939: LD_INT 19
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 6
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 30
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: CALL_OW 69
4993: PUSH
4994: LD_INT 1
4996: ARRAY
4997: PPUSH
4998: CALL_OW 120
// end ;
5002: GO 4900
5004: POP
5005: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
5006: LD_ADDR_VAR 0 2
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 82
5020: PUSH
5021: LD_INT 4
5023: ARRAY
5024: PUSH
5025: LD_INT 2
5027: PLUS
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5136
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: LD_INT 1
5040: PPUSH
5041: LD_INT 3
5043: PPUSH
5044: CALL_OW 12
5048: PPUSH
5049: CALL_OW 380
// un = CreateHuman ;
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: CALL_OW 44
5062: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5063: LD_VAR 0 3
5067: PPUSH
5068: LD_INT 19
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5078: LD_VAR 0 3
5082: PPUSH
5083: LD_INT 18
5085: PPUSH
5086: LD_INT 22
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 3
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL_OW 70
5125: PUSH
5126: LD_INT 1
5128: ARRAY
5129: PPUSH
5130: CALL_OW 120
// end ;
5134: GO 5029
5136: POP
5137: POP
// end ;
5138: LD_VAR 0 1
5142: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5143: LD_INT 0
5145: PPUSH
5146: PPUSH
5147: PPUSH
// survivorsArabianAttack = [ ] ;
5148: LD_ADDR_EXP 80
5152: PUSH
5153: EMPTY
5154: ST_TO_ADDR
// limit = 9 ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_INT 9
5162: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5163: LD_ADDR_EXP 80
5167: PUSH
5168: LD_EXP 80
5172: PUSH
5173: LD_EXP 63
5177: ADD
5178: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5179: LD_EXP 54
5183: PPUSH
5184: CALL_OW 302
5188: PUSH
5189: LD_EXP 54
5193: PPUSH
5194: CALL_OW 255
5198: PUSH
5199: LD_INT 6
5201: EQUAL
5202: AND
5203: IFFALSE 5235
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5205: LD_ADDR_EXP 80
5209: PUSH
5210: LD_EXP 80
5214: PUSH
5215: LD_EXP 54
5219: ADD
5220: ST_TO_ADDR
// limit = limit - 1 ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_INT 1
5233: MINUS
5234: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5235: LD_EXP 55
5239: PPUSH
5240: CALL_OW 302
5244: PUSH
5245: LD_EXP 55
5249: PPUSH
5250: CALL_OW 255
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: AND
5259: IFFALSE 5291
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5261: LD_ADDR_EXP 80
5265: PUSH
5266: LD_EXP 80
5270: PUSH
5271: LD_EXP 55
5275: ADD
5276: ST_TO_ADDR
// limit = limit - 1 ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_VAR 0 2
5286: PUSH
5287: LD_INT 1
5289: MINUS
5290: ST_TO_ADDR
// end ; for unit in other_survivors do
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_EXP 57
5300: PUSH
5301: FOR_IN
5302: IFFALSE 5362
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5304: LD_VAR 0 3
5308: PPUSH
5309: CALL_OW 302
5313: PUSH
5314: LD_VAR 0 3
5318: PPUSH
5319: CALL_OW 255
5323: PUSH
5324: LD_INT 6
5326: EQUAL
5327: AND
5328: IFFALSE 5360
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5330: LD_ADDR_EXP 80
5334: PUSH
5335: LD_EXP 80
5339: PUSH
5340: LD_VAR 0 3
5344: ADD
5345: ST_TO_ADDR
// limit = limit - 1 ;
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: MINUS
5359: ST_TO_ADDR
// end ; end ;
5360: GO 5301
5362: POP
5363: POP
// for unit in otherBeriaUnits do
5364: LD_ADDR_VAR 0 3
5368: PUSH
5369: LD_EXP 59
5373: PUSH
5374: FOR_IN
5375: IFFALSE 5435
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 302
5386: PUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 255
5396: PUSH
5397: LD_INT 6
5399: EQUAL
5400: AND
5401: IFFALSE 5433
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5403: LD_ADDR_EXP 80
5407: PUSH
5408: LD_EXP 80
5412: PUSH
5413: LD_VAR 0 3
5417: ADD
5418: ST_TO_ADDR
// limit = limit - 1 ;
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 2
5428: PUSH
5429: LD_INT 1
5431: MINUS
5432: ST_TO_ADDR
// end ; end ;
5433: GO 5374
5435: POP
5436: POP
// if limit > 0 then
5437: LD_VAR 0 2
5441: PUSH
5442: LD_INT 0
5444: GREATER
5445: IFFALSE 5457
// survivorsToSpawn = limit ;
5447: LD_ADDR_EXP 81
5451: PUSH
5452: LD_VAR 0 2
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// export function PrepareScholtze ; begin
5462: LD_INT 0
5464: PPUSH
// uc_side = 8 ;
5465: LD_ADDR_OWVAR 20
5469: PUSH
5470: LD_INT 8
5472: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5473: LD_ADDR_EXP 56
5477: PUSH
5478: LD_STRING Scholtze
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL 6971 0 2
5488: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5489: LD_EXP 56
5493: PPUSH
5494: LD_INT 30
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 49
// end ; end_of_file
5504: LD_VAR 0 1
5508: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5509: LD_INT 0
5511: PPUSH
// amSupportTroops = [ ] ;
5512: LD_ADDR_EXP 85
5516: PUSH
5517: EMPTY
5518: ST_TO_ADDR
// PrepareOmicronBase ;
5519: CALL 5528 0 0
// end ;
5523: LD_VAR 0 1
5527: RET
// function PrepareOmicronBase ; var base ; begin
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5532: LD_ADDR_EXP 87
5536: PUSH
5537: LD_INT 64
5539: PPUSH
5540: LD_INT 13
5542: PPUSH
5543: LD_STRING omikron
5545: PPUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_OWVAR 67
5564: ARRAY
5565: PPUSH
5566: LD_INT 3000
5568: PUSH
5569: LD_INT 3000
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: LD_INT 7
5582: PUSH
5583: LD_INT 3
5585: PUSH
5586: LD_INT 4
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: PPUSH
5598: CALL 40562 0 6
5602: ST_TO_ADDR
// case Difficulty of 2 :
5603: LD_OWVAR 67
5607: PUSH
5608: LD_INT 2
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5632
5616: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5617: LD_INT 51
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 322
// end ; 3 :
5630: GO 5670
5632: LD_INT 3
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5669
5640: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5654: LD_INT 51
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// end ; end ;
5667: GO 5670
5669: POP
// end ;
5670: LD_VAR 0 1
5674: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
5679: PPUSH
5680: PPUSH
// amIntroUnits = [ ] ;
5681: LD_ADDR_EXP 84
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// uc_side = 1 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 1
5695: ST_TO_ADDR
// uc_nation = nation_american ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5704: LD_ADDR_OWVAR 37
5708: PUSH
5709: LD_INT 3
5711: ST_TO_ADDR
// vc_control = control_manual ;
5712: LD_ADDR_OWVAR 38
5716: PUSH
5717: LD_INT 1
5719: ST_TO_ADDR
// vc_engine = engine_combustion ;
5720: LD_ADDR_OWVAR 39
5724: PUSH
5725: LD_INT 1
5727: ST_TO_ADDR
// vc_weapon = us_light_gun ;
5728: LD_ADDR_OWVAR 40
5732: PUSH
5733: LD_INT 3
5735: ST_TO_ADDR
// vc_fuel_battery = 100 ;
5736: LD_ADDR_OWVAR 41
5740: PUSH
5741: LD_INT 100
5743: ST_TO_ADDR
// veh = CreateVehicle ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: CALL_OW 45
5753: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5754: LD_VAR 0 3
5758: PPUSH
5759: LD_INT 4
5761: PPUSH
5762: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5766: LD_ADDR_EXP 84
5770: PUSH
5771: LD_EXP 84
5775: PUSH
5776: LD_VAR 0 3
5780: ADD
5781: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5782: LD_VAR 0 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: LD_INT 0
5792: PPUSH
5793: CALL_OW 49
// for i := 1 to 3 do
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: DOUBLE
5803: LD_INT 1
5805: DEC
5806: ST_TO_ADDR
5807: LD_INT 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5932
// begin hc_name :=  ;
5813: LD_ADDR_OWVAR 26
5817: PUSH
5818: LD_STRING 
5820: ST_TO_ADDR
// hc_gallery :=  ;
5821: LD_ADDR_OWVAR 33
5825: PUSH
5826: LD_STRING 
5828: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
5829: LD_INT 0
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 381
// human = CreateHuman ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: CALL_OW 44
5850: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5851: LD_ADDR_EXP 84
5855: PUSH
5856: LD_EXP 84
5860: PUSH
5861: LD_VAR 0 4
5865: ADD
5866: ST_TO_ADDR
// if i < 3 then
5867: LD_VAR 0 2
5871: PUSH
5872: LD_INT 3
5874: LESS
5875: IFFALSE 5894
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5877: LD_VAR 0 4
5881: PPUSH
5882: LD_INT 5
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 49
5892: GO 5930
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5894: LD_INT 0
5896: PPUSH
5897: LD_EXP 44
5901: PPUSH
5902: CALL_OW 383
// human = CreateHuman ;
5906: LD_ADDR_VAR 0 4
5910: PUSH
5911: CALL_OW 44
5915: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
5916: LD_VAR 0 4
5920: PPUSH
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 52
// end ; end ;
5930: GO 5810
5932: POP
5933: POP
// end ;
5934: LD_VAR 0 1
5938: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5939: LD_INT 0
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
// uc_side := 1 ;
5946: LD_ADDR_OWVAR 20
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// uc_nation := 1 ;
5954: LD_ADDR_OWVAR 21
5958: PUSH
5959: LD_INT 1
5961: ST_TO_ADDR
// hc_name :=  ;
5962: LD_ADDR_OWVAR 26
5966: PUSH
5967: LD_STRING 
5969: ST_TO_ADDR
// hc_gallery :=  ;
5970: LD_ADDR_OWVAR 33
5974: PUSH
5975: LD_STRING 
5977: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5978: LD_ADDR_VAR 0 6
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_VAR 0 1
5992: PUSH
5993: FOR_TO
5994: IFFALSE 6053
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5996: LD_INT 0
5998: PPUSH
5999: LD_EXP 44
6003: PPUSH
6004: CALL_OW 381
// un = CreateHuman ;
6008: LD_ADDR_VAR 0 7
6012: PUSH
6013: CALL_OW 44
6017: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6018: LD_ADDR_EXP 85
6022: PUSH
6023: LD_EXP 85
6027: PUSH
6028: LD_VAR 0 7
6032: ADD
6033: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6034: LD_VAR 0 7
6038: PPUSH
6039: LD_VAR 0 4
6043: PPUSH
6044: LD_INT 0
6046: PPUSH
6047: CALL_OW 49
// end ;
6051: GO 5993
6053: POP
6054: POP
// for i := 1 to scientistsAmount do
6055: LD_ADDR_VAR 0 6
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_VAR 0 2
6069: PUSH
6070: FOR_TO
6071: IFFALSE 6130
// begin PrepareScientist ( false , enemySkillLevel ) ;
6073: LD_INT 0
6075: PPUSH
6076: LD_EXP 44
6080: PPUSH
6081: CALL_OW 384
// un = CreateHuman ;
6085: LD_ADDR_VAR 0 7
6089: PUSH
6090: CALL_OW 44
6094: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6095: LD_ADDR_EXP 85
6099: PUSH
6100: LD_EXP 85
6104: PUSH
6105: LD_VAR 0 7
6109: ADD
6110: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6111: LD_VAR 0 7
6115: PPUSH
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// end ;
6128: GO 6070
6130: POP
6131: POP
// for i := 1 to vehiclesAmount do
6132: LD_ADDR_VAR 0 6
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_VAR 0 3
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6314
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6150: LD_ADDR_OWVAR 40
6154: PUSH
6155: LD_INT 2
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 3
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6181: LD_ADDR_OWVAR 37
6185: PUSH
6186: LD_INT 3
6188: ST_TO_ADDR
// vc_control = control_manual ;
6189: LD_ADDR_OWVAR 38
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// vc_engine = engine_combustion ;
6197: LD_ADDR_OWVAR 39
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// veh = CreateVehicle ;
6205: LD_ADDR_VAR 0 8
6209: PUSH
6210: CALL_OW 45
6214: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6215: LD_ADDR_EXP 85
6219: PUSH
6220: LD_EXP 85
6224: PUSH
6225: LD_VAR 0 8
6229: ADD
6230: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6231: LD_VAR 0 8
6235: PPUSH
6236: LD_VAR 0 4
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_EXP 44
6255: PPUSH
6256: CALL_OW 383
// un = CreateHuman ;
6260: LD_ADDR_VAR 0 7
6264: PUSH
6265: CALL_OW 44
6269: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6270: LD_ADDR_EXP 85
6274: PUSH
6275: LD_EXP 85
6279: PUSH
6280: LD_VAR 0 7
6284: ADD
6285: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 8
6295: PPUSH
6296: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6300: LD_VAR 0 8
6304: PPUSH
6305: LD_INT 100
6307: PPUSH
6308: CALL_OW 240
// end ;
6312: GO 6147
6314: POP
6315: POP
// case area of NorthAmericanSpawnArea :
6316: LD_VAR 0 4
6320: PUSH
6321: LD_INT 7
6323: DOUBLE
6324: EQUAL
6325: IFTRUE 6329
6327: GO 6340
6329: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6330: LD_ADDR_VAR 0 9
6334: PUSH
6335: LD_INT 10
6337: ST_TO_ADDR
6338: GO 6379
6340: LD_INT 9
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6359
6348: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6349: LD_ADDR_VAR 0 9
6353: PUSH
6354: LD_INT 11
6356: ST_TO_ADDR
6357: GO 6379
6359: LD_INT 8
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6378
6367: POP
// road = SouthRoadArea2 ; end ;
6368: LD_ADDR_VAR 0 9
6372: PUSH
6373: LD_INT 12
6375: ST_TO_ADDR
6376: GO 6379
6378: POP
// MoveToBase ( amSupportTroops , road ) ;
6379: LD_EXP 85
6383: PPUSH
6384: LD_VAR 0 9
6388: PPUSH
6389: CALL 18979 0 2
// end ;
6393: LD_VAR 0 5
6397: RET
// export function PrepareAmericanPatrol ; var un ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
// amPatrol = [ ] ;
6402: LD_ADDR_EXP 86
6406: PUSH
6407: EMPTY
6408: ST_TO_ADDR
// uc_side = 1 ;
6409: LD_ADDR_OWVAR 20
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// uc_nation = 1 ;
6417: LD_ADDR_OWVAR 21
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6425: LD_ADDR_VAR 0 2
6429: PUSH
6430: LD_STRING Campell
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL 6971 0 2
6440: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6441: LD_ADDR_EXP 86
6445: PUSH
6446: LD_EXP 86
6450: PUSH
6451: LD_VAR 0 2
6455: ADD
6456: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 14
6464: PPUSH
6465: LD_INT 0
6467: PPUSH
6468: CALL_OW 49
// SetClass ( un , 1 ) ;
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6484: LD_INT 1
6486: PPUSH
6487: LD_EXP 44
6491: PPUSH
6492: CALL_OW 381
// un = CreateHuman ;
6496: LD_ADDR_VAR 0 2
6500: PUSH
6501: CALL_OW 44
6505: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6506: LD_ADDR_EXP 86
6510: PUSH
6511: LD_EXP 86
6515: PUSH
6516: LD_VAR 0 2
6520: ADD
6521: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 14
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6537: LD_EXP 86
6541: PPUSH
6542: LD_EXP 56
6546: PPUSH
6547: CALL_OW 115
// end ; end_of_file
6551: LD_VAR 0 1
6555: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// northGroup = [ ] ;
6562: LD_ADDR_EXP 88
6566: PUSH
6567: EMPTY
6568: ST_TO_ADDR
// southGroup = [ ] ;
6569: LD_ADDR_EXP 89
6573: PUSH
6574: EMPTY
6575: ST_TO_ADDR
// uc_side = 2 ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_INT 2
6583: ST_TO_ADDR
// uc_nation = 2 ;
6584: LD_ADDR_OWVAR 21
6588: PUSH
6589: LD_INT 2
6591: ST_TO_ADDR
// hc_name :=  ;
6592: LD_ADDR_OWVAR 26
6596: PUSH
6597: LD_STRING 
6599: ST_TO_ADDR
// hc_gallery :=  ;
6600: LD_ADDR_OWVAR 33
6604: PUSH
6605: LD_STRING 
6607: ST_TO_ADDR
// for i := 1 to 5 do
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: DOUBLE
6614: LD_INT 1
6616: DEC
6617: ST_TO_ADDR
6618: LD_INT 5
6620: PUSH
6621: FOR_TO
6622: IFFALSE 6736
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6624: LD_INT 13
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 1
6632: PPUSH
6633: LD_INT 26
6635: PPUSH
6636: LD_INT 100
6638: PPUSH
6639: CALL 37153 0 5
// veh = CreateVehicle ;
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: CALL_OW 45
6652: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6653: LD_ADDR_EXP 89
6657: PUSH
6658: LD_EXP 89
6662: PUSH
6663: LD_VAR 0 4
6667: ADD
6668: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6669: LD_VAR 0 4
6673: PPUSH
6674: LD_INT 23
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 8
6689: PPUSH
6690: CALL_OW 383
// un = CreateHuman ;
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: CALL_OW 44
6703: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6704: LD_ADDR_EXP 89
6708: PUSH
6709: LD_EXP 89
6713: PUSH
6714: LD_VAR 0 3
6718: ADD
6719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6720: LD_VAR 0 3
6724: PPUSH
6725: LD_VAR 0 4
6729: PPUSH
6730: CALL_OW 52
// end ;
6734: GO 6621
6736: POP
6737: POP
// for i := 1 to 5 do
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_INT 5
6750: PUSH
6751: FOR_TO
6752: IFFALSE 6807
// begin PrepareSoldier ( false , 8 ) ;
6754: LD_INT 0
6756: PPUSH
6757: LD_INT 8
6759: PPUSH
6760: CALL_OW 381
// un = CreateHuman ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: CALL_OW 44
6773: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6774: LD_ADDR_EXP 89
6778: PUSH
6779: LD_EXP 89
6783: PUSH
6784: LD_VAR 0 3
6788: ADD
6789: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6790: LD_VAR 0 3
6794: PPUSH
6795: LD_INT 23
6797: PPUSH
6798: LD_INT 0
6800: PPUSH
6801: CALL_OW 49
// end ;
6805: GO 6751
6807: POP
6808: POP
// for i := 1 to 10 do
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: DOUBLE
6815: LD_INT 1
6817: DEC
6818: ST_TO_ADDR
6819: LD_INT 10
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6964
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6825: LD_INT 13
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: LD_INT 25
6836: PUSH
6837: LD_INT 27
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_INT 4
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_INT 100
6866: PPUSH
6867: CALL 37153 0 5
// veh = CreateVehicle ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 45
6880: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6881: LD_ADDR_EXP 88
6885: PUSH
6886: LD_EXP 88
6890: PUSH
6891: LD_VAR 0 4
6895: ADD
6896: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6897: LD_VAR 0 4
6901: PPUSH
6902: LD_INT 22
6904: PPUSH
6905: LD_INT 0
6907: PPUSH
6908: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6912: LD_INT 0
6914: PPUSH
6915: LD_INT 8
6917: PPUSH
6918: CALL_OW 383
// un = CreateHuman ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: CALL_OW 44
6931: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6932: LD_ADDR_EXP 88
6936: PUSH
6937: LD_EXP 88
6941: PUSH
6942: LD_VAR 0 3
6946: ADD
6947: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 52
// end ;
6962: GO 6822
6964: POP
6965: POP
// end ; end_of_file
6966: LD_VAR 0 1
6970: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
// if exist_mode then
6975: LD_VAR 0 2
6979: IFFALSE 7004
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6981: LD_ADDR_VAR 0 4
6985: PUSH
6986: LD_EXP 37
6990: PUSH
6991: LD_VAR 0 1
6995: STR
6996: PPUSH
6997: CALL_OW 34
7001: ST_TO_ADDR
7002: GO 7019
// unit := NewCharacter ( ident ) ;
7004: LD_ADDR_VAR 0 4
7008: PUSH
7009: LD_VAR 0 1
7013: PPUSH
7014: CALL_OW 25
7018: ST_TO_ADDR
// result := unit ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_VAR 0 4
7028: ST_TO_ADDR
// end ;
7029: LD_VAR 0 3
7033: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// units = characters ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_VAR 0 1
7049: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
7050: LD_ADDR_VAR 0 9
7054: PUSH
7055: LD_VAR 0 9
7059: PUSH
7060: LD_EXP 50
7064: PUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 52
7074: PUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_EXP 54
7084: PUSH
7085: LD_EXP 55
7089: PUSH
7090: LD_EXP 56
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: DIFF
7104: ST_TO_ADDR
// if not units and not canTalkHero then
7105: LD_VAR 0 9
7109: NOT
7110: PUSH
7111: LD_VAR 0 5
7115: NOT
7116: AND
7117: IFFALSE 7121
// exit ;
7119: GO 7294
// if not units then
7121: LD_VAR 0 9
7125: NOT
7126: IFFALSE 7147
// units = characters diff [ Burlak ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: LD_EXP 50
7142: PUSH
7143: EMPTY
7144: LIST
7145: DIFF
7146: ST_TO_ADDR
// if not units and canTalkHero then
7147: LD_VAR 0 9
7151: NOT
7152: PUSH
7153: LD_VAR 0 5
7157: AND
7158: IFFALSE 7162
// exit ;
7160: GO 7294
// speaker := units [ rand ( 1 , units ) ] ;
7162: LD_ADDR_VAR 0 8
7166: PUSH
7167: LD_VAR 0 9
7171: PUSH
7172: LD_INT 1
7174: PPUSH
7175: LD_VAR 0 9
7179: PPUSH
7180: CALL_OW 12
7184: ARRAY
7185: ST_TO_ADDR
// if radio then
7186: LD_VAR 0 4
7190: IFFALSE 7239
// begin if GetSex ( speaker ) = sex_male then
7192: LD_VAR 0 8
7196: PPUSH
7197: CALL_OW 258
7201: PUSH
7202: LD_INT 1
7204: EQUAL
7205: IFFALSE 7223
// SayRadio ( speaker , dialogMID ) else
7207: LD_VAR 0 8
7211: PPUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 94
7221: GO 7237
// SayRadio ( speaker , dialogFID ) ;
7223: LD_VAR 0 8
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: CALL_OW 94
// end else
7237: GO 7284
// begin if GetSex ( speaker ) = sex_male then
7239: LD_VAR 0 8
7243: PPUSH
7244: CALL_OW 258
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: IFFALSE 7270
// Say ( speaker , dialogMID ) else
7254: LD_VAR 0 8
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: CALL_OW 88
7268: GO 7284
// Say ( speaker , dialogFID ) ;
7270: LD_VAR 0 8
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 88
// end ; result := speaker ;
7284: LD_ADDR_VAR 0 6
7288: PUSH
7289: LD_VAR 0 8
7293: ST_TO_ADDR
// end ;
7294: LD_VAR 0 6
7298: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7299: LD_INT 0
7301: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: LD_VAR 0 3
7316: EQUAL
7317: PUSH
7318: LD_VAR 0 1
7322: PPUSH
7323: CALL_OW 302
7327: AND
7328: IFFALSE 7350
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7330: LD_VAR 0 1
7334: PPUSH
7335: LD_EXP 36
7339: PUSH
7340: LD_VAR 0 2
7344: STR
7345: PPUSH
7346: CALL_OW 38
// end ;
7350: LD_VAR 0 4
7354: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7355: LD_INT 0
7357: PPUSH
7358: PPUSH
7359: PPUSH
// resultCharactersToSave = [ ] ;
7360: LD_ADDR_VAR 0 6
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// for unit in characters do
7367: LD_ADDR_VAR 0 5
7371: PUSH
7372: LD_VAR 0 1
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7426
// if GetSide ( unit ) = side and IsOK ( unit ) then
7380: LD_VAR 0 5
7384: PPUSH
7385: CALL_OW 255
7389: PUSH
7390: LD_VAR 0 3
7394: EQUAL
7395: PUSH
7396: LD_VAR 0 5
7400: PPUSH
7401: CALL_OW 302
7405: AND
7406: IFFALSE 7424
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7408: LD_ADDR_VAR 0 6
7412: PUSH
7413: LD_VAR 0 6
7417: PUSH
7418: LD_VAR 0 5
7422: ADD
7423: ST_TO_ADDR
7424: GO 7377
7426: POP
7427: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7428: LD_VAR 0 6
7432: PPUSH
7433: LD_EXP 36
7437: PUSH
7438: LD_VAR 0 2
7442: STR
7443: PPUSH
7444: CALL_OW 38
// end ;
7448: LD_VAR 0 4
7452: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// charsToChoose = otherKirovUnits ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_EXP 66
7468: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 4
7478: PUSH
7479: LD_EXP 59
7483: ADD
7484: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7485: LD_ADDR_VAR 0 4
7489: PUSH
7490: LD_VAR 0 4
7494: PUSH
7495: LD_EXP 57
7499: ADD
7500: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7501: LD_ADDR_VAR 0 4
7505: PUSH
7506: LD_VAR 0 4
7510: PUSH
7511: LD_EXP 54
7515: ADD
7516: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 4
7526: PUSH
7527: LD_EXP 55
7531: ADD
7532: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7533: LD_ADDR_VAR 0 5
7537: PUSH
7538: LD_STRING text
7540: PPUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT -5
7553: PUSH
7554: LD_EXP 50
7558: PUSH
7559: LD_EXP 51
7563: PUSH
7564: LD_EXP 53
7568: PUSH
7569: LD_EXP 52
7573: PUSH
7574: LD_INT -6
7576: PUSH
7577: LD_INT -2
7579: PUSH
7580: LD_INT -3
7582: PUSH
7583: LD_INT -5
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_VAR 0 4
7601: ADD
7602: PUSH
7603: LD_INT -6
7605: PUSH
7606: LD_INT -4
7608: PUSH
7609: LD_EXP 62
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: ADD
7619: PPUSH
7620: LD_INT 1
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 4
7638: PUSH
7639: LD_INT 1
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 42
7656: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7657: LD_VAR 0 4
7661: PPUSH
7662: LD_INT 6
7664: PPUSH
7665: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7669: LD_VAR 0 5
7673: PPUSH
7674: LD_INT 3
7676: PPUSH
7677: CALL_OW 235
// SetSurvivorsArabianAttack ;
7681: CALL 5143 0 0
// MoveKurinUnitsToBuildings ;
7685: CALL 9223 0 0
// end ;
7689: LD_VAR 0 2
7693: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7694: LD_INT 0
7696: PPUSH
7697: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7698: LD_ADDR_VAR 0 5
7702: PUSH
7703: LD_VAR 0 1
7707: PPUSH
7708: LD_INT 22
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 21
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 30
7732: PUSH
7733: LD_VAR 0 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 70
7751: PUSH
7752: FOR_IN
7753: IFFALSE 7786
// begin if UnitsInside ( building ) < 6 then
7755: LD_VAR 0 5
7759: PPUSH
7760: CALL_OW 313
7764: PUSH
7765: LD_INT 6
7767: LESS
7768: IFFALSE 7784
// begin result = building ;
7770: LD_ADDR_VAR 0 4
7774: PUSH
7775: LD_VAR 0 5
7779: ST_TO_ADDR
// exit ;
7780: POP
7781: POP
7782: GO 7796
// end ; end ;
7784: GO 7752
7786: POP
7787: POP
// result = 0 ;
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// end ;
7796: LD_VAR 0 4
7800: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7801: LD_INT 0
7803: PPUSH
7804: PPUSH
7805: PPUSH
7806: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 34
7814: PUSH
7815: LD_INT 71
7817: PUSH
7818: LD_INT 70
7820: PUSH
7821: LD_INT 69
7823: PUSH
7824: LD_INT 39
7826: PUSH
7827: LD_INT 31
7829: PUSH
7830: LD_INT 14
7832: PUSH
7833: LD_INT 10
7835: PUSH
7836: LD_INT 40
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// resultWeapons = [ ] ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: EMPTY
7856: ST_TO_ADDR
// for i := 1 to weaponTechs do
7857: LD_ADDR_VAR 0 4
7861: PUSH
7862: DOUBLE
7863: LD_INT 1
7865: DEC
7866: ST_TO_ADDR
7867: LD_VAR 0 6
7871: PUSH
7872: FOR_TO
7873: IFFALSE 8060
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7875: LD_VAR 0 6
7879: PUSH
7880: LD_VAR 0 4
7884: ARRAY
7885: PPUSH
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 482
7895: PUSH
7896: LD_VAR 0 6
7900: PUSH
7901: LD_VAR 0 4
7905: ARRAY
7906: PPUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 321
7916: PUSH
7917: LD_INT 2
7919: EQUAL
7920: AND
7921: IFFALSE 8058
// case nation of nation_american :
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 1
7930: DOUBLE
7931: EQUAL
7932: IFTRUE 7936
7934: GO 7971
7936: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_VAR 0 5
7946: PUSH
7947: LD_VAR 0 6
7951: PUSH
7952: LD_VAR 0 4
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 2
7962: PPUSH
7963: CALL 8077 0 2
7967: ADD
7968: ST_TO_ADDR
7969: GO 8058
7971: LD_INT 2
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 8014
7979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: LD_VAR 0 5
7989: PUSH
7990: LD_VAR 0 6
7994: PUSH
7995: LD_VAR 0 4
7999: ARRAY
8000: PPUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL 8077 0 2
8010: ADD
8011: ST_TO_ADDR
8012: GO 8058
8014: LD_INT 3
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8057
8022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
8023: LD_ADDR_VAR 0 5
8027: PUSH
8028: LD_VAR 0 5
8032: PUSH
8033: LD_VAR 0 6
8037: PUSH
8038: LD_VAR 0 4
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL 8077 0 2
8053: ADD
8054: ST_TO_ADDR
8055: GO 8058
8057: POP
// end ;
8058: GO 7872
8060: POP
8061: POP
// result = resultWeapons ;
8062: LD_ADDR_VAR 0 3
8066: PUSH
8067: LD_VAR 0 5
8071: ST_TO_ADDR
// end ;
8072: LD_VAR 0 3
8076: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8077: LD_INT 0
8079: PPUSH
// case tech of tech_AdvMet :
8080: LD_VAR 0 1
8084: PUSH
8085: LD_INT 34
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8121
8093: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_STRING 
8104: PUSH
8105: LD_INT 46
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: ST_TO_ADDR
8119: GO 8410
8121: LD_INT 71
8123: DOUBLE
8124: EQUAL
8125: IFTRUE 8129
8127: GO 8157
8129: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_STRING 
8137: PUSH
8138: LD_STRING 
8140: PUSH
8141: LD_INT 47
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: ST_TO_ADDR
8155: GO 8410
8157: LD_INT 70
8159: DOUBLE
8160: EQUAL
8161: IFTRUE 8165
8163: GO 8193
8165: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_STRING 
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_STRING 
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: LD_VAR 0 2
8189: ARRAY
8190: ST_TO_ADDR
8191: GO 8410
8193: LD_INT 69
8195: DOUBLE
8196: EQUAL
8197: IFTRUE 8201
8199: GO 8229
8201: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8202: LD_ADDR_VAR 0 3
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 43
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: LD_VAR 0 2
8225: ARRAY
8226: ST_TO_ADDR
8227: GO 8410
8229: LD_INT 39
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8265
8237: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 5
8245: PUSH
8246: LD_INT 27
8248: PUSH
8249: LD_INT 44
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: LD_VAR 0 2
8261: ARRAY
8262: ST_TO_ADDR
8263: GO 8410
8265: LD_INT 31
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8301
8273: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_STRING 
8281: PUSH
8282: LD_STRING 
8284: PUSH
8285: LD_INT 49
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_VAR 0 2
8297: ARRAY
8298: ST_TO_ADDR
8299: GO 8410
8301: LD_INT 14
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8337
8309: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8310: LD_ADDR_VAR 0 3
8314: PUSH
8315: LD_INT 10
8317: PUSH
8318: LD_STRING 
8320: PUSH
8321: LD_STRING 
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_VAR 0 2
8333: ARRAY
8334: ST_TO_ADDR
8335: GO 8410
8337: LD_INT 10
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8373
8345: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8346: LD_ADDR_VAR 0 3
8350: PUSH
8351: LD_INT 9
8353: PUSH
8354: LD_STRING 
8356: PUSH
8357: LD_STRING 
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_VAR 0 2
8369: ARRAY
8370: ST_TO_ADDR
8371: GO 8410
8373: LD_INT 40
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8409
8381: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_INT 7
8389: PUSH
8390: LD_INT 28
8392: PUSH
8393: LD_INT 45
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: LD_VAR 0 2
8405: ARRAY
8406: ST_TO_ADDR
8407: GO 8410
8409: POP
// end ;
8410: LD_VAR 0 3
8414: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
// for veh in units do
8419: LD_ADDR_VAR 0 4
8423: PUSH
8424: LD_VAR 0 1
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8508
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8432: LD_VAR 0 4
8436: PPUSH
8437: CALL_OW 247
8441: PUSH
8442: LD_INT 2
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 4
8450: PPUSH
8451: CALL_OW 261
8455: PUSH
8456: LD_INT 100
8458: LESS
8459: AND
8460: IFFALSE 8506
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_STRING X
8469: PUSH
8470: LD_INT 0
8472: PUSH
8473: LD_INT 0
8475: PUSH
8476: LD_VAR 0 2
8480: PUSH
8481: LD_INT 0
8483: PUSH
8484: LD_INT 0
8486: PUSH
8487: LD_INT 0
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: PPUSH
8502: CALL_OW 446
// end ;
8506: GO 8429
8508: POP
8509: POP
// end ;
8510: LD_VAR 0 3
8514: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8519: LD_ADDR_VAR 0 4
8523: PUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: CALL_OW 254
8533: PUSH
8534: LD_INT 3
8536: MINUS
8537: ST_TO_ADDR
// if dir < 0 then
8538: LD_VAR 0 4
8542: PUSH
8543: LD_INT 0
8545: LESS
8546: IFFALSE 8562
// dir := 6 + dir ;
8548: LD_ADDR_VAR 0 4
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_VAR 0 4
8560: PLUS
8561: ST_TO_ADDR
// SetDir ( un , dir ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_VAR 0 4
8571: PPUSH
8572: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_VAR 0 2
8585: PPUSH
8586: CALL_OW 52
// result = un ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 1
8599: ST_TO_ADDR
// end ;
8600: LD_VAR 0 3
8604: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8605: LD_INT 0
8607: PPUSH
8608: PPUSH
8609: PPUSH
// uc_side := GetSide ( b ) ;
8610: LD_ADDR_OWVAR 20
8614: PUSH
8615: LD_VAR 0 2
8619: PPUSH
8620: CALL_OW 255
8624: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8625: LD_ADDR_OWVAR 21
8629: PUSH
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 248
8639: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8640: LD_INT 0
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 380
// un = CreateHuman ;
8655: LD_ADDR_VAR 0 4
8659: PUSH
8660: CALL_OW 44
8664: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8665: LD_ADDR_VAR 0 5
8669: PUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: CALL_OW 254
8679: PUSH
8680: LD_INT 3
8682: MINUS
8683: ST_TO_ADDR
// if dir < 0 then
8684: LD_VAR 0 5
8688: PUSH
8689: LD_INT 0
8691: LESS
8692: IFFALSE 8708
// dir := 6 + dir ;
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: LD_INT 6
8701: PUSH
8702: LD_VAR 0 5
8706: PLUS
8707: ST_TO_ADDR
// SetDir ( un , dir ) ;
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_VAR 0 5
8717: PPUSH
8718: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 52
// result = un ;
8736: LD_ADDR_VAR 0 3
8740: PUSH
8741: LD_VAR 0 4
8745: ST_TO_ADDR
// end ;
8746: LD_VAR 0 3
8750: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
// for building in buildings do
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_VAR 0 2
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8861
// begin x = GetX ( building ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 5
8780: PPUSH
8781: CALL_OW 250
8785: ST_TO_ADDR
// y = GetY ( building ) ;
8786: LD_ADDR_VAR 0 7
8790: PUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: CALL_OW 251
8800: ST_TO_ADDR
// dir = GetDir ( building ) ;
8801: LD_ADDR_VAR 0 8
8805: PUSH
8806: LD_VAR 0 5
8810: PPUSH
8811: CALL_OW 254
8815: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8816: LD_VAR 0 1
8820: PPUSH
8821: LD_VAR 0 5
8825: PPUSH
8826: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_VAR 0 6
8844: PPUSH
8845: LD_VAR 0 7
8849: PPUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: CALL_OW 205
// end ;
8859: GO 8768
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 4
8867: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8876: LD_ADDR_VAR 0 8
8880: PUSH
8881: LD_INT 48
8883: PUSH
8884: LD_INT 49
8886: PUSH
8887: LD_INT 50
8889: PUSH
8890: LD_INT 20
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: LD_INT 51
8898: PUSH
8899: LD_INT 52
8901: PUSH
8902: LD_INT 69
8904: PUSH
8905: LD_INT 39
8907: PUSH
8908: LD_INT 34
8910: PUSH
8911: LD_INT 40
8913: PUSH
8914: LD_INT 53
8916: PUSH
8917: LD_INT 71
8919: PUSH
8920: LD_INT 57
8922: PUSH
8923: LD_INT 58
8925: PUSH
8926: LD_INT 44
8928: PUSH
8929: LD_INT 32
8931: PUSH
8932: LD_INT 27
8934: PUSH
8935: LD_INT 23
8937: PUSH
8938: LD_INT 33
8940: PUSH
8941: LD_INT 59
8943: PUSH
8944: LD_INT 54
8946: PUSH
8947: LD_INT 55
8949: PUSH
8950: LD_INT 56
8952: PUSH
8953: LD_INT 63
8955: PUSH
8956: LD_INT 64
8958: PUSH
8959: LD_INT 65
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
9011: LD_ADDR_VAR 0 9
9015: PUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL 32392 0 3
9029: ST_TO_ADDR
// for i = 1 to ru_tech_list do
9030: LD_ADDR_VAR 0 5
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 8
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9122
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 5
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 321
9068: PUSH
9069: LD_INT 1
9071: EQUAL
9072: PUSH
9073: LD_VAR 0 8
9077: PUSH
9078: LD_VAR 0 5
9082: ARRAY
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: CALL_OW 482
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: AND
9098: IFFALSE 9120
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 5
9114: ARRAY
9115: PPUSH
9116: CALL_OW 184
9120: GO 9045
9122: POP
9123: POP
// for i = 1 to am_tech_list do
9124: LD_ADDR_VAR 0 5
9128: PUSH
9129: DOUBLE
9130: LD_INT 1
9132: DEC
9133: ST_TO_ADDR
9134: LD_VAR 0 9
9138: PUSH
9139: FOR_TO
9140: IFFALSE 9216
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9142: LD_VAR 0 9
9146: PUSH
9147: LD_VAR 0 5
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 321
9162: PUSH
9163: LD_INT 1
9165: EQUAL
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 5
9176: ARRAY
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 482
9187: PUSH
9188: LD_INT 1
9190: EQUAL
9191: AND
9192: IFFALSE 9214
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9194: LD_VAR 0 2
9198: PPUSH
9199: LD_VAR 0 9
9203: PUSH
9204: LD_VAR 0 5
9208: ARRAY
9209: PPUSH
9210: CALL_OW 184
9214: GO 9139
9216: POP
9217: POP
// end ;
9218: LD_VAR 0 4
9222: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9223: LD_INT 0
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9234: LD_ADDR_VAR 0 3
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 6
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 21
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 6
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_INT 6
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 21
9300: PUSH
9301: LD_INT 3
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 30
9310: PUSH
9311: LD_INT 3
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 69
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9332: LD_ADDR_VAR 0 9
9336: PUSH
9337: LD_VAR 0 9
9341: PUSH
9342: LD_EXP 62
9346: ADD
9347: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9348: LD_ADDR_VAR 0 9
9352: PUSH
9353: LD_VAR 0 9
9357: PUSH
9358: LD_EXP 80
9362: ADD
9363: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9364: LD_ADDR_VAR 0 9
9368: PUSH
9369: LD_VAR 0 9
9373: PUSH
9374: LD_EXP 72
9378: ADD
9379: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_INT 18
9387: PPUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 6
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 60
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 70
9430: PUSH
9431: LD_VAR 0 9
9435: DIFF
9436: ST_TO_ADDR
// if not canTakeUnits then
9437: LD_VAR 0 8
9441: NOT
9442: IFFALSE 9475
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9444: LD_ADDR_EXP 82
9448: PUSH
9449: LD_EXP 82
9453: PPUSH
9454: LD_INT 4
9456: PPUSH
9457: LD_EXP 82
9461: PUSH
9462: LD_INT 3
9464: ARRAY
9465: PUSH
9466: LD_INT 2
9468: PLUS
9469: PPUSH
9470: CALL_OW 1
9474: ST_TO_ADDR
// if canTakeUnits > 2 then
9475: LD_VAR 0 8
9479: PUSH
9480: LD_INT 2
9482: GREATER
9483: IFFALSE 9553
// begin for i := 1 to rand ( 1 , 2 ) do
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_INT 1
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 12
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9549
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9509: LD_VAR 0 8
9513: PUSH
9514: LD_VAR 0 2
9518: ARRAY
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9529: LD_VAR 0 8
9533: PUSH
9534: LD_VAR 0 2
9538: ARRAY
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 183
// end ;
9547: GO 9506
9549: POP
9550: POP
// end else
9551: GO 9621
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9553: LD_ADDR_VAR 0 2
9557: PUSH
9558: DOUBLE
9559: LD_INT 1
9561: DEC
9562: ST_TO_ADDR
9563: LD_INT 1
9565: PPUSH
9566: LD_VAR 0 8
9570: PPUSH
9571: CALL_OW 12
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9619
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9579: LD_VAR 0 8
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9599: LD_VAR 0 8
9603: PUSH
9604: LD_VAR 0 2
9608: ARRAY
9609: PPUSH
9610: LD_INT 4
9612: PPUSH
9613: CALL_OW 183
// end ;
9617: GO 9576
9619: POP
9620: POP
// end ; wait ( 0 0$01 ) ;
9621: LD_INT 35
9623: PPUSH
9624: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9628: LD_ADDR_VAR 0 8
9632: PUSH
9633: LD_INT 18
9635: PPUSH
9636: LD_INT 22
9638: PUSH
9639: LD_INT 6
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 21
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 60
9661: PUSH
9662: EMPTY
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 70
9678: PUSH
9679: LD_VAR 0 9
9683: DIFF
9684: ST_TO_ADDR
// pom = 6 ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_INT 6
9692: ST_TO_ADDR
// if canTakeUnits then
9693: LD_VAR 0 8
9697: IFFALSE 9814
// for i = 1 to canTakeUnits do
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_VAR 0 8
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9812
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: PPUSH
9728: CALL_OW 257
9732: PUSH
9733: LD_INT 3
9735: NONEQUAL
9736: IFFALSE 9776
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9738: LD_VAR 0 8
9742: PUSH
9743: LD_VAR 0 2
9747: ARRAY
9748: PPUSH
9749: LD_VAR 0 4
9753: PPUSH
9754: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9758: LD_VAR 0 8
9762: PUSH
9763: LD_VAR 0 2
9767: ARRAY
9768: PPUSH
9769: LD_INT 3
9771: PPUSH
9772: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9776: LD_VAR 0 8
9780: PUSH
9781: LD_VAR 0 2
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: CALL_OW 120
// pom = pom - 1 ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: LD_VAR 0 7
9805: PUSH
9806: LD_INT 1
9808: MINUS
9809: ST_TO_ADDR
// end ;
9810: GO 9714
9812: POP
9813: POP
// if pom > 0 then
9814: LD_VAR 0 7
9818: PUSH
9819: LD_INT 0
9821: GREATER
9822: IFFALSE 9847
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9824: LD_ADDR_EXP 82
9828: PUSH
9829: LD_EXP 82
9833: PPUSH
9834: LD_INT 3
9836: PPUSH
9837: LD_VAR 0 7
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9847: LD_INT 35
9849: PPUSH
9850: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 6
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 32
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 3
9891: PUSH
9892: LD_INT 59
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 69
9912: PUSH
9913: FOR_IN
9914: IFFALSE 10160
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9916: LD_ADDR_VAR 0 8
9920: PUSH
9921: LD_INT 18
9923: PPUSH
9924: LD_INT 22
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 21
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 60
9949: PUSH
9950: EMPTY
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 70
9966: PUSH
9967: LD_VAR 0 9
9971: DIFF
9972: ST_TO_ADDR
// if canTakeUnits then
9973: LD_VAR 0 8
9977: IFFALSE 10111
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9979: LD_VAR 0 8
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: CALL_OW 257
9992: PUSH
9993: LD_INT 1
9995: NONEQUAL
9996: IFFALSE 10091
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9998: LD_VAR 0 8
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PPUSH
10007: LD_INT 22
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 3
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: PUSH
10047: LD_INT 1
10049: ARRAY
10050: PPUSH
10051: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
10055: LD_VAR 0 8
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10071: LD_VAR 0 8
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: CALL_OW 182
// wait ( 0 0$1 ) ;
10084: LD_INT 35
10086: PPUSH
10087: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10091: LD_VAR 0 8
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 5
10104: PPUSH
10105: CALL_OW 120
// end else
10109: GO 10158
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10111: LD_ADDR_EXP 74
10115: PUSH
10116: LD_EXP 74
10120: PUSH
10121: LD_VAR 0 5
10125: ADD
10126: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10127: LD_ADDR_EXP 82
10131: PUSH
10132: LD_EXP 82
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: LD_EXP 82
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: PPUSH
10153: CALL_OW 1
10157: ST_TO_ADDR
// end ; end ;
10158: GO 9913
10160: POP
10161: POP
// end ;
10162: LD_VAR 0 1
10166: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10171: LD_ADDR_VAR 0 4
10175: PUSH
10176: LD_INT 22
10178: PUSH
10179: LD_VAR 0 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: LD_INT 21
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 21
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PPUSH
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 74
10241: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10242: LD_VAR 0 4
10246: PPUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: CALL_OW 296
10256: PUSH
10257: LD_INT 13
10259: LESS
10260: IFFALSE 10272
// begin result = true ;
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// exit ;
10270: GO 10280
// end ; result = false ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// end ;
10280: LD_VAR 0 3
10284: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 302
10308: NOT
10309: PUSH
10310: LD_VAR 0 4
10314: PUSH
10315: LD_INT 1
10317: EQUAL
10318: OR
10319: PUSH
10320: LD_VAR 0 2
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: CALL_OW 488
10334: NOT
10335: OR
10336: PUSH
10337: LD_VAR 0 1
10341: PPUSH
10342: LD_VAR 0 2
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: CALL_OW 297
10356: PUSH
10357: LD_VAR 0 4
10361: GREATEREQUAL
10362: OR
10363: PUSH
10364: LD_VAR 0 5
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: LD_INT 0
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: IN
10379: NOT
10380: OR
10381: IFFALSE 10385
// exit ;
10383: GO 11942
// attempts = 0 ;
10385: LD_ADDR_VAR 0 17
10389: PUSH
10390: LD_INT 0
10392: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10393: LD_ADDR_VAR 0 7
10397: PUSH
10398: EMPTY
10399: ST_TO_ADDR
// list_coords = [ ] ;
10400: LD_ADDR_VAR 0 8
10404: PUSH
10405: EMPTY
10406: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10407: LD_ADDR_VAR 0 9
10411: PUSH
10412: LD_VAR 0 2
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_VAR 0 1
10426: PPUSH
10427: CALL_OW 250
10431: PPUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 251
10441: PPUSH
10442: CALL 11947 0 4
10446: ST_TO_ADDR
// if attempts = 0 then
10447: LD_VAR 0 17
10451: PUSH
10452: LD_INT 0
10454: EQUAL
10455: IFFALSE 10563
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10457: LD_ADDR_VAR 0 10
10461: PUSH
10462: LD_VAR 0 9
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_INT 1
10474: PLUS
10475: PUSH
10476: LD_VAR 0 9
10480: PUSH
10481: LD_INT 1
10483: MINUS
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10490: LD_VAR 0 10
10494: PUSH
10495: LD_INT 2
10497: ARRAY
10498: PUSH
10499: LD_INT 6
10501: EQUAL
10502: IFFALSE 10525
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10504: LD_ADDR_VAR 0 10
10508: PUSH
10509: LD_VAR 0 10
10513: PPUSH
10514: LD_INT 2
10516: PPUSH
10517: LD_INT 0
10519: PPUSH
10520: CALL_OW 1
10524: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10525: LD_VAR 0 10
10529: PUSH
10530: LD_INT 3
10532: ARRAY
10533: PUSH
10534: LD_INT 1
10536: NEG
10537: EQUAL
10538: IFFALSE 10561
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10540: LD_ADDR_VAR 0 10
10544: PUSH
10545: LD_VAR 0 10
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 5
10555: PPUSH
10556: CALL_OW 1
10560: ST_TO_ADDR
// end else
10561: GO 10600
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10563: LD_ADDR_VAR 0 10
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: LD_INT 3
10579: PUSH
10580: LD_INT 4
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 9
10598: DIFF
10599: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10600: LD_ADDR_VAR 0 14
10604: PUSH
10605: DOUBLE
10606: LD_INT 1
10608: DEC
10609: ST_TO_ADDR
10610: LD_VAR 0 10
10614: PUSH
10615: LD_INT 0
10617: PLUS
10618: PUSH
10619: FOR_TO
10620: IFFALSE 10942
// case dir_list [ c ] of 0 :
10622: LD_VAR 0 10
10626: PUSH
10627: LD_VAR 0 14
10631: ARRAY
10632: PUSH
10633: LD_INT 0
10635: DOUBLE
10636: EQUAL
10637: IFTRUE 10641
10639: GO 10682
10641: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10642: LD_ADDR_VAR 0 8
10646: PUSH
10647: LD_VAR 0 8
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: LD_VAR 0 2
10659: PUSH
10660: LD_VAR 0 3
10664: PUSH
10665: LD_VAR 0 4
10669: MINUS
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
10680: GO 10940
10682: LD_INT 1
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10731
10690: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PUSH
10709: LD_VAR 0 4
10713: PLUS
10714: PUSH
10715: LD_VAR 0 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 2
10728: ST_TO_ADDR
10729: GO 10940
10731: LD_INT 2
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10786
10739: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10740: LD_ADDR_VAR 0 8
10744: PUSH
10745: LD_VAR 0 8
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: LD_VAR 0 2
10757: PUSH
10758: LD_VAR 0 4
10762: PLUS
10763: PUSH
10764: LD_VAR 0 3
10768: PUSH
10769: LD_VAR 0 4
10773: PLUS
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PPUSH
10779: CALL_OW 2
10783: ST_TO_ADDR
10784: GO 10940
10786: LD_INT 3
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10835
10794: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10795: LD_ADDR_VAR 0 8
10799: PUSH
10800: LD_VAR 0 8
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_VAR 0 2
10812: PUSH
10813: LD_VAR 0 3
10817: PUSH
10818: LD_VAR 0 4
10822: PLUS
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 2
10832: ST_TO_ADDR
10833: GO 10940
10835: LD_INT 4
10837: DOUBLE
10838: EQUAL
10839: IFTRUE 10843
10841: GO 10884
10843: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10844: LD_ADDR_VAR 0 8
10848: PUSH
10849: LD_VAR 0 8
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PUSH
10862: LD_VAR 0 4
10866: MINUS
10867: PUSH
10868: LD_VAR 0 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 2
10881: ST_TO_ADDR
10882: GO 10940
10884: LD_INT 5
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 10939
10892: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10893: LD_ADDR_VAR 0 8
10897: PUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 2
10910: PUSH
10911: LD_VAR 0 4
10915: MINUS
10916: PUSH
10917: LD_VAR 0 3
10921: PUSH
10922: LD_VAR 0 4
10926: MINUS
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 2
10936: ST_TO_ADDR
10937: GO 10940
10939: POP
10940: GO 10619
10942: POP
10943: POP
// if dist < 30 then
10944: LD_VAR 0 4
10948: PUSH
10949: LD_INT 30
10951: LESS
10952: IFFALSE 10964
// c = 1 else
10954: LD_ADDR_VAR 0 14
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
10962: GO 10972
// c = 2 ;
10964: LD_ADDR_VAR 0 14
10968: PUSH
10969: LD_INT 2
10971: ST_TO_ADDR
// b = 1 ;
10972: LD_ADDR_VAR 0 11
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10980: LD_VAR 0 11
10984: PUSH
10985: LD_VAR 0 4
10989: PUSH
10990: LD_INT 1
10992: MINUS
10993: LESSEQUAL
10994: IFFALSE 11422
// begin if 0 in dir_list and 1 in dir_list then
10996: LD_INT 0
10998: PUSH
10999: LD_VAR 0 10
11003: IN
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: LD_VAR 0 10
11012: IN
11013: AND
11014: IFFALSE 11066
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
11016: LD_ADDR_VAR 0 8
11020: PUSH
11021: LD_VAR 0 8
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PUSH
11034: LD_VAR 0 11
11038: PLUS
11039: PUSH
11040: LD_VAR 0 3
11044: PUSH
11045: LD_VAR 0 4
11049: MINUS
11050: PUSH
11051: LD_VAR 0 11
11055: PLUS
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 2
11065: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11066: LD_INT 1
11068: PUSH
11069: LD_VAR 0 10
11073: IN
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_VAR 0 10
11082: IN
11083: AND
11084: IFFALSE 11130
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11086: LD_ADDR_VAR 0 8
11090: PUSH
11091: LD_VAR 0 8
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: LD_VAR 0 2
11103: PUSH
11104: LD_VAR 0 4
11108: PLUS
11109: PUSH
11110: LD_VAR 0 3
11114: PUSH
11115: LD_VAR 0 11
11119: PLUS
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 2
11129: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11130: LD_INT 2
11132: PUSH
11133: LD_VAR 0 10
11137: IN
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: LD_VAR 0 10
11146: IN
11147: AND
11148: IFFALSE 11200
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11150: LD_ADDR_VAR 0 8
11154: PUSH
11155: LD_VAR 0 8
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 4
11172: PLUS
11173: PUSH
11174: LD_VAR 0 11
11178: MINUS
11179: PUSH
11180: LD_VAR 0 3
11184: PUSH
11185: LD_VAR 0 4
11189: PLUS
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 2
11199: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11200: LD_INT 3
11202: PUSH
11203: LD_VAR 0 10
11207: IN
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: LD_VAR 0 10
11216: IN
11217: AND
11218: IFFALSE 11270
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11220: LD_ADDR_VAR 0 8
11224: PUSH
11225: LD_VAR 0 8
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_VAR 0 2
11237: PUSH
11238: LD_VAR 0 11
11242: MINUS
11243: PUSH
11244: LD_VAR 0 3
11248: PUSH
11249: LD_VAR 0 4
11253: PLUS
11254: PUSH
11255: LD_VAR 0 11
11259: MINUS
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 2
11269: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11270: LD_INT 4
11272: PUSH
11273: LD_VAR 0 10
11277: IN
11278: PUSH
11279: LD_INT 5
11281: PUSH
11282: LD_VAR 0 10
11286: IN
11287: AND
11288: IFFALSE 11334
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11290: LD_ADDR_VAR 0 8
11294: PUSH
11295: LD_VAR 0 8
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_VAR 0 4
11312: MINUS
11313: PUSH
11314: LD_VAR 0 3
11318: PUSH
11319: LD_VAR 0 11
11323: MINUS
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 2
11333: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11334: LD_INT 5
11336: PUSH
11337: LD_VAR 0 10
11341: IN
11342: PUSH
11343: LD_INT 0
11345: PUSH
11346: LD_VAR 0 10
11350: IN
11351: AND
11352: IFFALSE 11404
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11354: LD_ADDR_VAR 0 8
11358: PUSH
11359: LD_VAR 0 8
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_VAR 0 4
11376: MINUS
11377: PUSH
11378: LD_VAR 0 11
11382: PLUS
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 4
11393: MINUS
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 2
11403: ST_TO_ADDR
// b = b + c end ;
11404: LD_ADDR_VAR 0 11
11408: PUSH
11409: LD_VAR 0 11
11413: PUSH
11414: LD_VAR 0 14
11418: PLUS
11419: ST_TO_ADDR
11420: GO 10980
// if list_coords = 0 then
11422: LD_VAR 0 8
11426: PUSH
11427: LD_INT 0
11429: EQUAL
11430: IFFALSE 11434
// exit ;
11432: GO 11942
// repeat min_dist = 5000 ;
11434: LD_ADDR_VAR 0 12
11438: PUSH
11439: LD_INT 5000
11441: ST_TO_ADDR
// for b in list_coords do
11442: LD_ADDR_VAR 0 11
11446: PUSH
11447: LD_VAR 0 8
11451: PUSH
11452: FOR_IN
11453: IFFALSE 11512
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11455: LD_ADDR_VAR 0 13
11459: PUSH
11460: LD_VAR 0 1
11464: PPUSH
11465: LD_VAR 0 11
11469: PUSH
11470: LD_INT 1
11472: ARRAY
11473: PPUSH
11474: LD_VAR 0 11
11478: PUSH
11479: LD_INT 2
11481: ARRAY
11482: PPUSH
11483: CALL_OW 297
11487: ST_TO_ADDR
// if temp_dist < min_dist then
11488: LD_VAR 0 13
11492: PUSH
11493: LD_VAR 0 12
11497: LESS
11498: IFFALSE 11510
// min_dist = temp_dist ;
11500: LD_ADDR_VAR 0 12
11504: PUSH
11505: LD_VAR 0 13
11509: ST_TO_ADDR
// end ;
11510: GO 11452
11512: POP
11513: POP
// c = 0 ;
11514: LD_ADDR_VAR 0 14
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// repeat c = c + 1 ;
11522: LD_ADDR_VAR 0 14
11526: PUSH
11527: LD_VAR 0 14
11531: PUSH
11532: LD_INT 1
11534: PLUS
11535: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 8
11545: PUSH
11546: LD_VAR 0 14
11550: ARRAY
11551: PUSH
11552: LD_INT 1
11554: ARRAY
11555: PPUSH
11556: LD_VAR 0 8
11560: PUSH
11561: LD_VAR 0 14
11565: ARRAY
11566: PUSH
11567: LD_INT 2
11569: ARRAY
11570: PPUSH
11571: CALL_OW 297
11575: PUSH
11576: LD_VAR 0 12
11580: EQUAL
11581: IFFALSE 11646
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11583: LD_ADDR_VAR 0 7
11587: PUSH
11588: LD_VAR 0 7
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_VAR 0 8
11600: PUSH
11601: LD_VAR 0 14
11605: ARRAY
11606: PPUSH
11607: CALL_OW 2
11611: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11612: LD_ADDR_VAR 0 8
11616: PUSH
11617: LD_VAR 0 8
11621: PPUSH
11622: LD_VAR 0 14
11626: PPUSH
11627: CALL_OW 3
11631: ST_TO_ADDR
// c = c - 1 ;
11632: LD_ADDR_VAR 0 14
11636: PUSH
11637: LD_VAR 0 14
11641: PUSH
11642: LD_INT 1
11644: MINUS
11645: ST_TO_ADDR
// end ; until c = list_coords ;
11646: LD_VAR 0 14
11650: PUSH
11651: LD_VAR 0 8
11655: EQUAL
11656: IFFALSE 11522
// c = 0 ;
11658: LD_ADDR_VAR 0 14
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// if list_nearest > 0 then
11666: LD_VAR 0 7
11670: PUSH
11671: LD_INT 0
11673: GREATER
11674: IFFALSE 11816
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11676: LD_ADDR_VAR 0 15
11680: PUSH
11681: LD_INT 1
11683: PPUSH
11684: LD_VAR 0 7
11688: PPUSH
11689: CALL_OW 12
11693: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11694: LD_ADDR_VAR 0 16
11698: PUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_VAR 0 15
11708: ARRAY
11709: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11710: LD_VAR 0 16
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: PPUSH
11719: LD_VAR 0 16
11723: PUSH
11724: LD_INT 2
11726: ARRAY
11727: PPUSH
11728: CALL_OW 488
11732: PUSH
11733: LD_INT 0
11735: GREATER
11736: PUSH
11737: LD_VAR 0 16
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 16
11750: PUSH
11751: LD_INT 2
11753: ARRAY
11754: PPUSH
11755: CALL_OW 428
11759: PUSH
11760: LD_INT 0
11762: EQUAL
11763: AND
11764: IFFALSE 11776
// c = 1 else
11766: LD_ADDR_VAR 0 14
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
11774: GO 11796
// list_nearest = Delete ( list_nearest , rand_num ) ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 7
11785: PPUSH
11786: LD_VAR 0 15
11790: PPUSH
11791: CALL_OW 3
11795: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11796: LD_VAR 0 14
11800: PUSH
11801: LD_INT 1
11803: EQUAL
11804: PUSH
11805: LD_VAR 0 7
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: OR
11814: IFFALSE 11676
// end ; until c = 1 or list_coords = 0 ;
11816: LD_VAR 0 14
11820: PUSH
11821: LD_INT 1
11823: EQUAL
11824: PUSH
11825: LD_VAR 0 8
11829: PUSH
11830: LD_INT 0
11832: EQUAL
11833: OR
11834: IFFALSE 11434
// attempts = attempts + 1 ;
11836: LD_ADDR_VAR 0 17
11840: PUSH
11841: LD_VAR 0 17
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11850: LD_VAR 0 14
11854: PUSH
11855: LD_INT 1
11857: EQUAL
11858: PUSH
11859: LD_VAR 0 17
11863: PUSH
11864: LD_INT 1
11866: GREATER
11867: OR
11868: IFFALSE 10393
// if c = 1 then
11870: LD_VAR 0 14
11874: PUSH
11875: LD_INT 1
11877: EQUAL
11878: IFFALSE 11942
// if add then
11880: LD_VAR 0 5
11884: IFFALSE 11915
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11886: LD_VAR 0 1
11890: PPUSH
11891: LD_VAR 0 16
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: LD_VAR 0 16
11904: PUSH
11905: LD_INT 2
11907: ARRAY
11908: PPUSH
11909: CALL_OW 171
11913: GO 11942
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_VAR 0 16
11924: PUSH
11925: LD_INT 1
11927: ARRAY
11928: PPUSH
11929: LD_VAR 0 16
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 111
// end ;
11942: LD_VAR 0 6
11946: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL_OW 488
11969: NOT
11970: PUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 488
11985: NOT
11986: OR
11987: IFFALSE 12000
// begin result = - 1 ;
11989: LD_ADDR_VAR 0 5
11993: PUSH
11994: LD_INT 1
11996: NEG
11997: ST_TO_ADDR
// exit ;
11998: GO 12160
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
12000: LD_ADDR_VAR 0 6
12004: PUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: CALL_OW 298
12029: ST_TO_ADDR
// dist_2 = 99999 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 99999
12037: ST_TO_ADDR
// for b = 0 to 5 do
12038: LD_ADDR_VAR 0 8
12042: PUSH
12043: DOUBLE
12044: LD_INT 0
12046: DEC
12047: ST_TO_ADDR
12048: LD_INT 5
12050: PUSH
12051: FOR_TO
12052: IFFALSE 12148
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
12054: LD_ADDR_VAR 0 9
12058: PUSH
12059: LD_VAR 0 1
12063: PPUSH
12064: LD_VAR 0 8
12068: PPUSH
12069: LD_VAR 0 6
12073: PPUSH
12074: CALL_OW 272
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 8
12088: PPUSH
12089: LD_VAR 0 6
12093: PPUSH
12094: CALL_OW 273
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_VAR 0 4
12108: PPUSH
12109: CALL_OW 298
12113: ST_TO_ADDR
// if temp_dist < dist_2 then
12114: LD_VAR 0 9
12118: PUSH
12119: LD_VAR 0 7
12123: LESS
12124: IFFALSE 12146
// begin dist_2 = temp_dist ;
12126: LD_ADDR_VAR 0 7
12130: PUSH
12131: LD_VAR 0 9
12135: ST_TO_ADDR
// dir = b ;
12136: LD_ADDR_VAR 0 10
12140: PUSH
12141: LD_VAR 0 8
12145: ST_TO_ADDR
// end ; end ;
12146: GO 12051
12148: POP
12149: POP
// result = dir ;
12150: LD_ADDR_VAR 0 5
12154: PUSH
12155: LD_VAR 0 10
12159: ST_TO_ADDR
// end ; end_of_file
12160: LD_VAR 0 5
12164: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
12170: PPUSH
12171: PPUSH
12172: PPUSH
12173: PPUSH
12174: PPUSH
12175: PPUSH
12176: PPUSH
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
// personel = [ ] ;
12195: LD_ADDR_VAR 0 18
12199: PUSH
12200: EMPTY
12201: ST_TO_ADDR
// vehicles = [ ] ;
12202: LD_ADDR_VAR 0 24
12206: PUSH
12207: EMPTY
12208: ST_TO_ADDR
// for unit in basePersonel do
12209: LD_ADDR_VAR 0 17
12213: PUSH
12214: LD_VAR 0 3
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12268
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12222: LD_ADDR_VAR 0 18
12226: PUSH
12227: LD_VAR 0 18
12231: PUSH
12232: LD_VAR 0 17
12236: PUSH
12237: LD_VAR 0 17
12241: PPUSH
12242: CALL_OW 310
12246: PUSH
12247: LD_VAR 0 17
12251: PPUSH
12252: CALL_OW 302
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: ADD
12265: ST_TO_ADDR
12266: GO 12219
12268: POP
12269: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12270: LD_ADDR_VAR 0 23
12274: PUSH
12275: LD_VAR 0 4
12279: PPUSH
12280: LD_INT 22
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 50
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: LD_INT 3
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 12
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 34
12326: PUSH
12327: LD_INT 51
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 34
12336: PUSH
12337: LD_INT 32
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 70
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12414
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12368: LD_ADDR_VAR 0 24
12372: PUSH
12373: LD_VAR 0 24
12377: PUSH
12378: LD_VAR 0 23
12382: PUSH
12383: LD_VAR 0 23
12387: PPUSH
12388: CALL_OW 310
12392: PUSH
12393: LD_VAR 0 23
12397: PPUSH
12398: CALL_OW 302
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: ADD
12411: ST_TO_ADDR
12412: GO 12365
12414: POP
12415: POP
// repeat soldiers = [ ] ;
12416: LD_ADDR_VAR 0 19
12420: PUSH
12421: EMPTY
12422: ST_TO_ADDR
// engineers = [ ] ;
12423: LD_ADDR_VAR 0 20
12427: PUSH
12428: EMPTY
12429: ST_TO_ADDR
// mechanics = [ ] ;
12430: LD_ADDR_VAR 0 21
12434: PUSH
12435: EMPTY
12436: ST_TO_ADDR
// scientists = [ ] ;
12437: LD_ADDR_VAR 0 22
12441: PUSH
12442: EMPTY
12443: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12444: LD_ADDR_VAR 0 29
12448: PUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: LD_INT 22
12456: PUSH
12457: LD_VAR 0 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 50
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 70
12520: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12521: LD_ADDR_VAR 0 30
12525: PUSH
12526: LD_VAR 0 4
12530: PPUSH
12531: LD_INT 22
12533: PUSH
12534: LD_VAR 0 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 50
12555: PUSH
12556: EMPTY
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 70
12597: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12598: LD_ADDR_VAR 0 31
12602: PUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: LD_INT 22
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 21
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 50
12632: PUSH
12633: EMPTY
12634: LIST
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 6
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 8
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 70
12685: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12686: LD_ADDR_VAR 0 32
12690: PUSH
12691: LD_VAR 0 4
12695: PPUSH
12696: LD_INT 22
12698: PUSH
12699: LD_VAR 0 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 21
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 50
12720: PUSH
12721: EMPTY
12722: LIST
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 70
12762: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12763: LD_ADDR_VAR 0 33
12767: PUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_INT 22
12775: PUSH
12776: LD_VAR 0 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 70
12839: ST_TO_ADDR
// for i := 1 to personel do
12840: LD_ADDR_VAR 0 13
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 18
12854: PUSH
12855: FOR_TO
12856: IFFALSE 13062
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12858: LD_VAR 0 18
12862: PUSH
12863: LD_VAR 0 13
12867: ARRAY
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 256
12877: PUSH
12878: LD_INT 1000
12880: EQUAL
12881: IFFALSE 12923
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12883: LD_ADDR_VAR 0 18
12887: PUSH
12888: LD_VAR 0 18
12892: PPUSH
12893: LD_VAR 0 13
12897: PUSH
12898: LD_VAR 0 18
12902: PUSH
12903: LD_VAR 0 13
12907: ARRAY
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL 37275 0 3
12920: ST_TO_ADDR
// end else
12921: GO 13010
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12923: LD_VAR 0 18
12927: PUSH
12928: LD_VAR 0 13
12932: ARRAY
12933: PUSH
12934: LD_INT 1
12936: ARRAY
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 950
12945: LESSEQUAL
12946: IFFALSE 13010
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12948: LD_ADDR_VAR 0 18
12952: PUSH
12953: LD_VAR 0 18
12957: PPUSH
12958: LD_VAR 0 13
12962: PUSH
12963: LD_VAR 0 18
12967: PUSH
12968: LD_VAR 0 13
12972: ARRAY
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: LD_INT 0
12980: PPUSH
12981: CALL 37275 0 3
12985: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 13
12995: ARRAY
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 5
13005: PPUSH
13006: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
13010: LD_VAR 0 18
13014: PUSH
13015: LD_VAR 0 13
13019: ARRAY
13020: PUSH
13021: LD_INT 1
13023: ARRAY
13024: PPUSH
13025: CALL_OW 256
13029: PUSH
13030: LD_INT 250
13032: LESS
13033: IFFALSE 13060
// personel = personel diff [ personel [ i ] ] ;
13035: LD_ADDR_VAR 0 18
13039: PUSH
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 18
13049: PUSH
13050: LD_VAR 0 13
13054: ARRAY
13055: PUSH
13056: EMPTY
13057: LIST
13058: DIFF
13059: ST_TO_ADDR
// end ;
13060: GO 12855
13062: POP
13063: POP
// for i := 1 to vehicles do
13064: LD_ADDR_VAR 0 13
13068: PUSH
13069: DOUBLE
13070: LD_INT 1
13072: DEC
13073: ST_TO_ADDR
13074: LD_VAR 0 24
13078: PUSH
13079: FOR_TO
13080: IFFALSE 13466
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13082: LD_VAR 0 24
13086: PUSH
13087: LD_VAR 0 13
13091: ARRAY
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 261
13101: PUSH
13102: LD_INT 50
13104: LESS
13105: IFFALSE 13129
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13107: LD_VAR 0 24
13111: PUSH
13112: LD_VAR 0 13
13116: ARRAY
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: LD_INT 100
13124: PPUSH
13125: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13129: LD_VAR 0 24
13133: PUSH
13134: LD_VAR 0 13
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PPUSH
13144: CALL_OW 256
13148: PUSH
13149: LD_INT 1000
13151: EQUAL
13152: IFFALSE 13327
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13154: LD_VAR 0 24
13158: PUSH
13159: LD_VAR 0 13
13163: ARRAY
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 263
13173: PUSH
13174: LD_INT 1
13176: EQUAL
13177: IFFALSE 13235
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13179: LD_VAR 0 24
13183: PUSH
13184: LD_VAR 0 13
13188: ARRAY
13189: PUSH
13190: LD_INT 2
13192: ARRAY
13193: PPUSH
13194: CALL_OW 310
13198: NOT
13199: IFFALSE 13235
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13201: LD_VAR 0 24
13205: PUSH
13206: LD_VAR 0 13
13210: ARRAY
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PPUSH
13216: LD_VAR 0 24
13220: PUSH
13221: LD_VAR 0 13
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13235: LD_VAR 0 24
13239: PUSH
13240: LD_VAR 0 10
13244: LESS
13245: IFFALSE 13287
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13247: LD_ADDR_VAR 0 24
13251: PUSH
13252: LD_VAR 0 24
13256: PPUSH
13257: LD_VAR 0 13
13261: PUSH
13262: LD_VAR 0 24
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL 37275 0 3
13284: ST_TO_ADDR
13285: GO 13325
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13287: LD_ADDR_VAR 0 24
13291: PUSH
13292: LD_VAR 0 24
13296: PPUSH
13297: LD_VAR 0 13
13301: PUSH
13302: LD_VAR 0 24
13306: PUSH
13307: LD_VAR 0 13
13311: ARRAY
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL 37275 0 3
13324: ST_TO_ADDR
// end else
13325: GO 13414
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13327: LD_VAR 0 24
13331: PUSH
13332: LD_VAR 0 13
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 256
13346: PUSH
13347: LD_INT 650
13349: LESSEQUAL
13350: IFFALSE 13414
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13352: LD_ADDR_VAR 0 24
13356: PUSH
13357: LD_VAR 0 24
13361: PPUSH
13362: LD_VAR 0 13
13366: PUSH
13367: LD_VAR 0 24
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PPUSH
13382: LD_INT 0
13384: PPUSH
13385: CALL 37275 0 3
13389: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13390: LD_VAR 0 24
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: LD_VAR 0 6
13409: PPUSH
13410: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13414: LD_VAR 0 24
13418: PUSH
13419: LD_VAR 0 13
13423: ARRAY
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 256
13433: PUSH
13434: LD_INT 250
13436: LESS
13437: IFFALSE 13464
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13439: LD_ADDR_VAR 0 24
13443: PUSH
13444: LD_VAR 0 24
13448: PUSH
13449: LD_VAR 0 24
13453: PUSH
13454: LD_VAR 0 13
13458: ARRAY
13459: PUSH
13460: EMPTY
13461: LIST
13462: DIFF
13463: ST_TO_ADDR
// end ;
13464: GO 13079
13466: POP
13467: POP
// for i := 1 to personel do
13468: LD_ADDR_VAR 0 13
13472: PUSH
13473: DOUBLE
13474: LD_INT 1
13476: DEC
13477: ST_TO_ADDR
13478: LD_VAR 0 18
13482: PUSH
13483: FOR_TO
13484: IFFALSE 13525
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13486: LD_ADDR_VAR 0 19
13490: PUSH
13491: LD_VAR 0 19
13495: PUSH
13496: LD_VAR 0 18
13500: PUSH
13501: LD_VAR 0 13
13505: ARRAY
13506: PPUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: ADD
13522: ST_TO_ADDR
13523: GO 13483
13525: POP
13526: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13527: LD_VAR 0 19
13531: PUSH
13532: LD_VAR 0 32
13536: PPUSH
13537: LD_INT 3
13539: PUSH
13540: LD_INT 59
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: AND
13555: IFFALSE 13843
// begin for i := 1 to personel do
13557: LD_ADDR_VAR 0 13
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_VAR 0 18
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13839
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13575: LD_VAR 0 18
13579: PUSH
13580: LD_VAR 0 13
13584: ARRAY
13585: PUSH
13586: LD_INT 1
13588: ARRAY
13589: PPUSH
13590: CALL_OW 257
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: PUSH
13599: LD_VAR 0 18
13603: PUSH
13604: LD_VAR 0 13
13608: ARRAY
13609: PUSH
13610: LD_INT 3
13612: ARRAY
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: AND
13618: IFFALSE 13837
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13620: LD_VAR 0 18
13624: PUSH
13625: LD_VAR 0 13
13629: ARRAY
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 437
13639: IFFALSE 13740
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13641: LD_VAR 0 18
13645: PUSH
13646: LD_VAR 0 13
13650: ARRAY
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: CALL_OW 437
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PUSH
13669: LD_STRING e
13671: EQUAL
13672: PUSH
13673: LD_VAR 0 18
13677: PUSH
13678: LD_VAR 0 13
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: CALL_OW 437
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PUSH
13697: LD_INT 4
13699: ARRAY
13700: PPUSH
13701: CALL_OW 266
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: IN
13716: AND
13717: IFFALSE 13740
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13719: LD_VAR 0 18
13723: PUSH
13724: LD_VAR 0 13
13728: ARRAY
13729: PUSH
13730: LD_INT 1
13732: ARRAY
13733: PPUSH
13734: EMPTY
13735: PPUSH
13736: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13740: LD_ADDR_VAR 0 36
13744: PUSH
13745: LD_VAR 0 32
13749: PPUSH
13750: LD_INT 3
13752: PUSH
13753: LD_INT 59
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: PUSH
13768: FOR_IN
13769: IFFALSE 13835
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13771: LD_VAR 0 18
13775: PUSH
13776: LD_VAR 0 13
13780: ARRAY
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: CALL_OW 310
13790: PPUSH
13791: CALL_OW 266
13795: PUSH
13796: LD_INT 31
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: IN
13806: NOT
13807: IFFALSE 13833
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13809: LD_VAR 0 18
13813: PUSH
13814: LD_VAR 0 13
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: LD_VAR 0 36
13828: PPUSH
13829: CALL_OW 120
13833: GO 13768
13835: POP
13836: POP
// end ; end ;
13837: GO 13572
13839: POP
13840: POP
// end else
13841: GO 14058
// if soldiers and barracks then
13843: LD_VAR 0 19
13847: PUSH
13848: LD_VAR 0 33
13852: AND
13853: IFFALSE 14058
// for i := 1 to personel do
13855: LD_ADDR_VAR 0 13
13859: PUSH
13860: DOUBLE
13861: LD_INT 1
13863: DEC
13864: ST_TO_ADDR
13865: LD_VAR 0 18
13869: PUSH
13870: FOR_TO
13871: IFFALSE 14056
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13873: LD_VAR 0 18
13877: PUSH
13878: LD_VAR 0 13
13882: ARRAY
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: CALL_OW 257
13892: PUSH
13893: LD_INT 1
13895: EQUAL
13896: PUSH
13897: LD_VAR 0 18
13901: PUSH
13902: LD_VAR 0 13
13906: ARRAY
13907: PUSH
13908: LD_INT 3
13910: ARRAY
13911: PUSH
13912: LD_INT 1
13914: EQUAL
13915: AND
13916: PUSH
13917: LD_VAR 0 18
13921: PUSH
13922: LD_VAR 0 13
13926: ARRAY
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: LD_INT 56
13934: PUSH
13935: EMPTY
13936: LIST
13937: PPUSH
13938: CALL_OW 72
13942: AND
13943: IFFALSE 14054
// begin if not personel [ i ] [ 2 ] then
13945: LD_VAR 0 18
13949: PUSH
13950: LD_VAR 0 13
13954: ARRAY
13955: PUSH
13956: LD_INT 2
13958: ARRAY
13959: NOT
13960: IFFALSE 14020
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13962: LD_ADDR_VAR 0 18
13966: PUSH
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_VAR 0 13
13976: PUSH
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 1
13990: MINUS
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: LD_VAR 0 33
14000: PUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_VAR 0 33
14008: PPUSH
14009: CALL_OW 12
14013: ARRAY
14014: PPUSH
14015: CALL 37275 0 3
14019: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14020: LD_VAR 0 18
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_VAR 0 18
14039: PUSH
14040: LD_VAR 0 13
14044: ARRAY
14045: PUSH
14046: LD_INT 2
14048: ARRAY
14049: PPUSH
14050: CALL_OW 120
// end ;
14054: GO 13870
14056: POP
14057: POP
// for i := 1 to personel do
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: LD_VAR 0 18
14072: PUSH
14073: FOR_TO
14074: IFFALSE 14115
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14076: LD_ADDR_VAR 0 20
14080: PUSH
14081: LD_VAR 0 20
14085: PUSH
14086: LD_VAR 0 18
14090: PUSH
14091: LD_VAR 0 13
14095: ARRAY
14096: PPUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: ADD
14112: ST_TO_ADDR
14113: GO 14073
14115: POP
14116: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14117: LD_VAR 0 20
14121: PUSH
14122: LD_VAR 0 4
14126: PPUSH
14127: LD_INT 22
14129: PUSH
14130: LD_VAR 0 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 3
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: LD_INT 1000
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 70
14175: AND
14176: IFFALSE 14452
// begin for i := 1 to personel do
14178: LD_ADDR_VAR 0 13
14182: PUSH
14183: DOUBLE
14184: LD_INT 1
14186: DEC
14187: ST_TO_ADDR
14188: LD_VAR 0 18
14192: PUSH
14193: FOR_TO
14194: IFFALSE 14448
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14196: LD_VAR 0 18
14200: PUSH
14201: LD_VAR 0 13
14205: ARRAY
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 257
14215: PUSH
14216: LD_INT 2
14218: EQUAL
14219: PUSH
14220: LD_VAR 0 18
14224: PUSH
14225: LD_VAR 0 13
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PUSH
14235: LD_INT 1
14237: EQUAL
14238: AND
14239: IFFALSE 14446
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14241: LD_VAR 0 18
14245: PUSH
14246: LD_VAR 0 13
14250: ARRAY
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: CALL_OW 437
14260: IFFALSE 14316
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14262: LD_VAR 0 18
14266: PUSH
14267: LD_VAR 0 13
14271: ARRAY
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 437
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PUSH
14290: LD_STRING e
14292: EQUAL
14293: IFFALSE 14316
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14295: LD_VAR 0 18
14299: PUSH
14300: LD_VAR 0 13
14304: ARRAY
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: EMPTY
14311: PPUSH
14312: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14316: LD_VAR 0 18
14320: PUSH
14321: LD_VAR 0 13
14325: ARRAY
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: CALL_OW 310
14335: IFFALSE 14356
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14337: LD_VAR 0 18
14341: PUSH
14342: LD_VAR 0 13
14346: ARRAY
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PPUSH
14352: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14356: LD_ADDR_VAR 0 34
14360: PUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: LD_INT 22
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 21
14380: PUSH
14381: LD_INT 3
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: LD_INT 24
14393: PUSH
14394: LD_INT 1000
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 70
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14444
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14418: LD_VAR 0 18
14422: PUSH
14423: LD_VAR 0 13
14427: ARRAY
14428: PUSH
14429: LD_INT 1
14431: ARRAY
14432: PPUSH
14433: LD_VAR 0 34
14437: PPUSH
14438: CALL_OW 190
14442: GO 14415
14444: POP
14445: POP
// end ;
14446: GO 14193
14448: POP
14449: POP
// end else
14450: GO 14714
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14452: LD_VAR 0 20
14456: PUSH
14457: LD_VAR 0 20
14461: PPUSH
14462: LD_INT 56
14464: PUSH
14465: EMPTY
14466: LIST
14467: PPUSH
14468: CALL_OW 72
14472: AND
14473: PUSH
14474: LD_VAR 0 29
14478: AND
14479: IFFALSE 14714
// for i := 1 to personel do
14481: LD_ADDR_VAR 0 13
14485: PUSH
14486: DOUBLE
14487: LD_INT 1
14489: DEC
14490: ST_TO_ADDR
14491: LD_VAR 0 18
14495: PUSH
14496: FOR_TO
14497: IFFALSE 14712
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14499: LD_VAR 0 18
14503: PUSH
14504: LD_VAR 0 13
14508: ARRAY
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: CALL_OW 257
14518: PUSH
14519: LD_INT 2
14521: EQUAL
14522: PUSH
14523: LD_VAR 0 18
14527: PUSH
14528: LD_VAR 0 13
14532: ARRAY
14533: PUSH
14534: LD_INT 3
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: EQUAL
14541: AND
14542: IFFALSE 14710
// begin if not personel [ i ] [ 2 ] then
14544: LD_VAR 0 18
14548: PUSH
14549: LD_VAR 0 13
14553: ARRAY
14554: PUSH
14555: LD_INT 2
14557: ARRAY
14558: NOT
14559: IFFALSE 14676
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14561: LD_ADDR_VAR 0 18
14565: PUSH
14566: LD_VAR 0 18
14570: PPUSH
14571: LD_VAR 0 13
14575: PUSH
14576: LD_VAR 0 18
14580: PUSH
14581: LD_VAR 0 13
14585: ARRAY
14586: PUSH
14587: LD_INT 1
14589: MINUS
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_INT 22
14602: PUSH
14603: LD_VAR 0 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 50
14624: PUSH
14625: EMPTY
14626: LIST
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 70
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL 37275 0 3
14675: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 18
14695: PUSH
14696: LD_VAR 0 13
14700: ARRAY
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: PPUSH
14706: CALL_OW 120
// end ; end ;
14710: GO 14496
14712: POP
14713: POP
// for i := 1 to personel do
14714: LD_ADDR_VAR 0 13
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_VAR 0 18
14728: PUSH
14729: FOR_TO
14730: IFFALSE 14771
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14732: LD_ADDR_VAR 0 21
14736: PUSH
14737: LD_VAR 0 21
14741: PUSH
14742: LD_VAR 0 18
14746: PUSH
14747: LD_VAR 0 13
14751: ARRAY
14752: PPUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 72
14767: ADD
14768: ST_TO_ADDR
14769: GO 14729
14771: POP
14772: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14773: LD_VAR 0 21
14777: PUSH
14778: LD_VAR 0 4
14782: PPUSH
14783: LD_INT 22
14785: PUSH
14786: LD_VAR 0 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 3
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: LD_INT 1000
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 70
14831: AND
14832: IFFALSE 15436
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14834: LD_ADDR_VAR 0 35
14838: PUSH
14839: LD_VAR 0 4
14843: PPUSH
14844: LD_INT 22
14846: PUSH
14847: LD_VAR 0 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 3
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 1000
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 70
14892: PUSH
14893: FOR_IN
14894: IFFALSE 15432
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14896: LD_VAR 0 35
14900: PPUSH
14901: LD_VAR 0 6
14905: PPUSH
14906: CALL_OW 299
14910: PUSH
14911: LD_INT 5
14913: LESS
14914: IFFALSE 15209
// begin for i := 1 to vehicles do
14916: LD_ADDR_VAR 0 13
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 24
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15001
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14934: LD_VAR 0 24
14938: PUSH
14939: LD_VAR 0 13
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PUSH
14949: LD_VAR 0 35
14953: EQUAL
14954: IFFALSE 14975
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14956: LD_VAR 0 24
14960: PUSH
14961: LD_VAR 0 13
14965: ARRAY
14966: PUSH
14967: LD_INT 2
14969: ARRAY
14970: PPUSH
14971: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14975: LD_VAR 0 24
14979: PUSH
14980: LD_VAR 0 13
14984: ARRAY
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 35
14994: PPUSH
14995: CALL_OW 189
// end ;
14999: GO 14931
15001: POP
15002: POP
// for i := 1 to personel do
15003: LD_ADDR_VAR 0 13
15007: PUSH
15008: DOUBLE
15009: LD_INT 1
15011: DEC
15012: ST_TO_ADDR
15013: LD_VAR 0 18
15017: PUSH
15018: FOR_TO
15019: IFFALSE 15207
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: CALL_OW 257
15040: PUSH
15041: LD_INT 3
15043: EQUAL
15044: PUSH
15045: LD_VAR 0 18
15049: PUSH
15050: LD_VAR 0 13
15054: ARRAY
15055: PUSH
15056: LD_INT 3
15058: ARRAY
15059: PUSH
15060: LD_INT 1
15062: EQUAL
15063: AND
15064: IFFALSE 15205
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15066: LD_VAR 0 18
15070: PUSH
15071: LD_VAR 0 13
15075: ARRAY
15076: PUSH
15077: LD_INT 1
15079: ARRAY
15080: PPUSH
15081: CALL_OW 437
15085: IFFALSE 15141
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15087: LD_VAR 0 18
15091: PUSH
15092: LD_VAR 0 13
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: CALL_OW 437
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: PUSH
15115: LD_STRING e
15117: EQUAL
15118: IFFALSE 15141
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15120: LD_VAR 0 18
15124: PUSH
15125: LD_VAR 0 13
15129: ARRAY
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: EMPTY
15136: PPUSH
15137: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15141: LD_VAR 0 18
15145: PUSH
15146: LD_VAR 0 13
15150: ARRAY
15151: PUSH
15152: LD_INT 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15181
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15162: LD_VAR 0 18
15166: PUSH
15167: LD_VAR 0 13
15171: ARRAY
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15181: LD_VAR 0 18
15185: PUSH
15186: LD_VAR 0 13
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: LD_VAR 0 35
15200: PPUSH
15201: CALL_OW 189
// end ;
15205: GO 15018
15207: POP
15208: POP
// end ; if GetLives ( damageUnit ) < 250 then
15209: LD_VAR 0 35
15213: PPUSH
15214: CALL_OW 256
15218: PUSH
15219: LD_INT 250
15221: LESS
15222: IFFALSE 15430
// for i := 1 to personel do
15224: LD_ADDR_VAR 0 13
15228: PUSH
15229: DOUBLE
15230: LD_INT 1
15232: DEC
15233: ST_TO_ADDR
15234: LD_VAR 0 18
15238: PUSH
15239: FOR_TO
15240: IFFALSE 15428
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15242: LD_VAR 0 18
15246: PUSH
15247: LD_VAR 0 13
15251: ARRAY
15252: PUSH
15253: LD_INT 1
15255: ARRAY
15256: PPUSH
15257: CALL_OW 257
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: PUSH
15266: LD_VAR 0 18
15270: PUSH
15271: LD_VAR 0 13
15275: ARRAY
15276: PUSH
15277: LD_INT 3
15279: ARRAY
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: IFFALSE 15426
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15287: LD_VAR 0 18
15291: PUSH
15292: LD_VAR 0 13
15296: ARRAY
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: CALL_OW 437
15306: IFFALSE 15362
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15308: LD_VAR 0 18
15312: PUSH
15313: LD_VAR 0 13
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 437
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: PUSH
15336: LD_STRING e
15338: EQUAL
15339: IFFALSE 15362
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15341: LD_VAR 0 18
15345: PUSH
15346: LD_VAR 0 13
15350: ARRAY
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: EMPTY
15357: PPUSH
15358: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15362: LD_VAR 0 18
15366: PUSH
15367: LD_VAR 0 13
15371: ARRAY
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: PPUSH
15377: CALL_OW 310
15381: IFFALSE 15402
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15383: LD_VAR 0 18
15387: PUSH
15388: LD_VAR 0 13
15392: ARRAY
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15402: LD_VAR 0 18
15406: PUSH
15407: LD_VAR 0 13
15411: ARRAY
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: LD_VAR 0 35
15421: PPUSH
15422: CALL_OW 189
// end ;
15426: GO 15239
15428: POP
15429: POP
// end ;
15430: GO 14893
15432: POP
15433: POP
// end else
15434: GO 15641
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15436: LD_VAR 0 21
15440: PUSH
15441: LD_VAR 0 21
15445: PPUSH
15446: LD_INT 56
15448: PUSH
15449: EMPTY
15450: LIST
15451: PPUSH
15452: CALL_OW 72
15456: AND
15457: PUSH
15458: LD_VAR 0 30
15462: AND
15463: IFFALSE 15641
// for i := 1 to personel do
15465: LD_ADDR_VAR 0 13
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_VAR 0 18
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15639
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15483: LD_VAR 0 18
15487: PUSH
15488: LD_VAR 0 13
15492: ARRAY
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 257
15502: PUSH
15503: LD_INT 3
15505: EQUAL
15506: PUSH
15507: LD_VAR 0 18
15511: PUSH
15512: LD_VAR 0 13
15516: ARRAY
15517: PUSH
15518: LD_INT 3
15520: ARRAY
15521: PUSH
15522: LD_INT 1
15524: EQUAL
15525: AND
15526: IFFALSE 15637
// begin if not personel [ i ] [ 2 ] then
15528: LD_VAR 0 18
15532: PUSH
15533: LD_VAR 0 13
15537: ARRAY
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: NOT
15543: IFFALSE 15603
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15545: LD_ADDR_VAR 0 18
15549: PUSH
15550: LD_VAR 0 18
15554: PPUSH
15555: LD_VAR 0 13
15559: PUSH
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 1
15573: MINUS
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: LD_VAR 0 30
15583: PUSH
15584: LD_INT 1
15586: PPUSH
15587: LD_VAR 0 30
15591: PPUSH
15592: CALL_OW 12
15596: ARRAY
15597: PPUSH
15598: CALL 37275 0 3
15602: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15603: LD_VAR 0 18
15607: PUSH
15608: LD_VAR 0 13
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_VAR 0 18
15622: PUSH
15623: LD_VAR 0 13
15627: ARRAY
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 120
// end ;
15637: GO 15480
15639: POP
15640: POP
// for i := 1 to personel do
15641: LD_ADDR_VAR 0 13
15645: PUSH
15646: DOUBLE
15647: LD_INT 1
15649: DEC
15650: ST_TO_ADDR
15651: LD_VAR 0 18
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15698
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15659: LD_ADDR_VAR 0 22
15663: PUSH
15664: LD_VAR 0 22
15668: PUSH
15669: LD_VAR 0 18
15673: PUSH
15674: LD_VAR 0 13
15678: ARRAY
15679: PPUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 72
15694: ADD
15695: ST_TO_ADDR
15696: GO 15656
15698: POP
15699: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15700: LD_VAR 0 22
15704: PUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 24
15737: PUSH
15738: LD_INT 1000
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 70
15758: AND
15759: IFFALSE 16276
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15761: LD_ADDR_VAR 0 35
15765: PUSH
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_INT 22
15773: PUSH
15774: LD_VAR 0 1
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 21
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 3
15795: PUSH
15796: LD_INT 24
15798: PUSH
15799: LD_INT 1000
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 70
15819: PUSH
15820: FOR_IN
15821: IFFALSE 16272
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15823: LD_VAR 0 35
15827: PPUSH
15828: LD_VAR 0 5
15832: PPUSH
15833: CALL_OW 299
15837: PUSH
15838: LD_INT 5
15840: LESS
15841: IFFALSE 16049
// for i := 1 to personel do
15843: LD_ADDR_VAR 0 13
15847: PUSH
15848: DOUBLE
15849: LD_INT 1
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 18
15857: PUSH
15858: FOR_TO
15859: IFFALSE 16047
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15861: LD_VAR 0 18
15865: PUSH
15866: LD_VAR 0 13
15870: ARRAY
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL_OW 257
15880: PUSH
15881: LD_INT 4
15883: EQUAL
15884: PUSH
15885: LD_VAR 0 18
15889: PUSH
15890: LD_VAR 0 13
15894: ARRAY
15895: PUSH
15896: LD_INT 3
15898: ARRAY
15899: PUSH
15900: LD_INT 1
15902: EQUAL
15903: AND
15904: IFFALSE 16045
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15906: LD_VAR 0 18
15910: PUSH
15911: LD_VAR 0 13
15915: ARRAY
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: PPUSH
15921: CALL_OW 437
15925: IFFALSE 15981
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15927: LD_VAR 0 18
15931: PUSH
15932: LD_VAR 0 13
15936: ARRAY
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: CALL_OW 437
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PUSH
15955: LD_STRING e
15957: EQUAL
15958: IFFALSE 15981
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15960: LD_VAR 0 18
15964: PUSH
15965: LD_VAR 0 13
15969: ARRAY
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: PPUSH
15975: EMPTY
15976: PPUSH
15977: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15981: LD_VAR 0 18
15985: PUSH
15986: LD_VAR 0 13
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: PPUSH
15996: CALL_OW 310
16000: IFFALSE 16021
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16002: LD_VAR 0 18
16006: PUSH
16007: LD_VAR 0 13
16011: ARRAY
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16021: LD_VAR 0 18
16025: PUSH
16026: LD_VAR 0 13
16030: ARRAY
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: LD_VAR 0 35
16040: PPUSH
16041: CALL_OW 188
// end ;
16045: GO 15858
16047: POP
16048: POP
// if GetLives ( damageUnit ) < 250 then
16049: LD_VAR 0 35
16053: PPUSH
16054: CALL_OW 256
16058: PUSH
16059: LD_INT 250
16061: LESS
16062: IFFALSE 16270
// for i := 1 to personel do
16064: LD_ADDR_VAR 0 13
16068: PUSH
16069: DOUBLE
16070: LD_INT 1
16072: DEC
16073: ST_TO_ADDR
16074: LD_VAR 0 18
16078: PUSH
16079: FOR_TO
16080: IFFALSE 16268
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16082: LD_VAR 0 18
16086: PUSH
16087: LD_VAR 0 13
16091: ARRAY
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 4
16104: EQUAL
16105: PUSH
16106: LD_VAR 0 18
16110: PUSH
16111: LD_VAR 0 13
16115: ARRAY
16116: PUSH
16117: LD_INT 3
16119: ARRAY
16120: PUSH
16121: LD_INT 1
16123: EQUAL
16124: AND
16125: IFFALSE 16266
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16127: LD_VAR 0 18
16131: PUSH
16132: LD_VAR 0 13
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: PPUSH
16142: CALL_OW 437
16146: IFFALSE 16202
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16148: LD_VAR 0 18
16152: PUSH
16153: LD_VAR 0 13
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 437
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PUSH
16176: LD_STRING e
16178: EQUAL
16179: IFFALSE 16202
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16181: LD_VAR 0 18
16185: PUSH
16186: LD_VAR 0 13
16190: ARRAY
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: EMPTY
16197: PPUSH
16198: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16202: LD_VAR 0 18
16206: PUSH
16207: LD_VAR 0 13
16211: ARRAY
16212: PUSH
16213: LD_INT 1
16215: ARRAY
16216: PPUSH
16217: CALL_OW 310
16221: IFFALSE 16242
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16223: LD_VAR 0 18
16227: PUSH
16228: LD_VAR 0 13
16232: ARRAY
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16242: LD_VAR 0 18
16246: PUSH
16247: LD_VAR 0 13
16251: ARRAY
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: LD_VAR 0 35
16261: PPUSH
16262: CALL_OW 188
// end ;
16266: GO 16079
16268: POP
16269: POP
// end ;
16270: GO 15820
16272: POP
16273: POP
// end else
16274: GO 16481
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16276: LD_VAR 0 22
16280: PUSH
16281: LD_VAR 0 22
16285: PPUSH
16286: LD_INT 56
16288: PUSH
16289: EMPTY
16290: LIST
16291: PPUSH
16292: CALL_OW 72
16296: AND
16297: PUSH
16298: LD_VAR 0 31
16302: AND
16303: IFFALSE 16481
// for i := 1 to personel do
16305: LD_ADDR_VAR 0 13
16309: PUSH
16310: DOUBLE
16311: LD_INT 1
16313: DEC
16314: ST_TO_ADDR
16315: LD_VAR 0 18
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16479
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16323: LD_VAR 0 18
16327: PUSH
16328: LD_VAR 0 13
16332: ARRAY
16333: PUSH
16334: LD_INT 1
16336: ARRAY
16337: PPUSH
16338: CALL_OW 257
16342: PUSH
16343: LD_INT 4
16345: EQUAL
16346: PUSH
16347: LD_VAR 0 18
16351: PUSH
16352: LD_VAR 0 13
16356: ARRAY
16357: PUSH
16358: LD_INT 3
16360: ARRAY
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: AND
16366: IFFALSE 16477
// begin if not personel [ i ] [ 2 ] then
16368: LD_VAR 0 18
16372: PUSH
16373: LD_VAR 0 13
16377: ARRAY
16378: PUSH
16379: LD_INT 2
16381: ARRAY
16382: NOT
16383: IFFALSE 16443
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16385: LD_ADDR_VAR 0 18
16389: PUSH
16390: LD_VAR 0 18
16394: PPUSH
16395: LD_VAR 0 13
16399: PUSH
16400: LD_VAR 0 18
16404: PUSH
16405: LD_VAR 0 13
16409: ARRAY
16410: PUSH
16411: LD_INT 1
16413: MINUS
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: LD_VAR 0 31
16423: PUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_VAR 0 31
16431: PPUSH
16432: CALL_OW 12
16436: ARRAY
16437: PPUSH
16438: CALL 37275 0 3
16442: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16443: LD_VAR 0 18
16447: PUSH
16448: LD_VAR 0 13
16452: ARRAY
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PPUSH
16458: LD_VAR 0 18
16462: PUSH
16463: LD_VAR 0 13
16467: ARRAY
16468: PUSH
16469: LD_INT 2
16471: ARRAY
16472: PPUSH
16473: CALL_OW 120
// end ;
16477: GO 16320
16479: POP
16480: POP
// wait ( 0 0$01 ) ;
16481: LD_INT 35
16483: PPUSH
16484: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16488: LD_VAR 0 24
16492: PUSH
16493: LD_VAR 0 8
16497: LESS
16498: PUSH
16499: LD_VAR 0 30
16503: AND
16504: IFFALSE 16754
// begin tmp = vehiclesAmount - vehicles ;
16506: LD_ADDR_VAR 0 15
16510: PUSH
16511: LD_VAR 0 8
16515: PUSH
16516: LD_VAR 0 24
16520: MINUS
16521: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16522: LD_ADDR_VAR 0 27
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 2
16536: PPUSH
16537: CALL 7801 0 2
16541: ST_TO_ADDR
// for i := 1 to tmp do
16542: LD_ADDR_VAR 0 13
16546: PUSH
16547: DOUBLE
16548: LD_INT 1
16550: DEC
16551: ST_TO_ADDR
16552: LD_VAR 0 15
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16750
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16560: LD_ADDR_VAR 0 15
16564: PUSH
16565: LD_VAR 0 27
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 27
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: ST_TO_ADDR
// if tmp then
16584: LD_VAR 0 15
16588: IFFALSE 16748
// begin if tmp in [ 34 , 14 , 71 ] then
16590: LD_VAR 0 15
16594: PUSH
16595: LD_INT 34
16597: PUSH
16598: LD_INT 14
16600: PUSH
16601: LD_INT 71
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: IN
16609: IFFALSE 16647
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16611: LD_ADDR_VAR 0 28
16615: PUSH
16616: LD_INT 4
16618: PUSH
16619: EMPTY
16620: LIST
16621: PUSH
16622: LD_INT 14
16624: PUSH
16625: EMPTY
16626: LIST
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: EMPTY
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: LD_VAR 0 2
16643: ARRAY
16644: ST_TO_ADDR
16645: GO 16705
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16647: LD_ADDR_VAR 0 28
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: LD_INT 4
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 13
16668: PUSH
16669: LD_INT 14
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 21
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_VAR 0 2
16703: ARRAY
16704: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16705: LD_VAR 0 30
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: LD_VAR 0 28
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 28
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 15
16743: PPUSH
16744: CALL_OW 185
// end ; end ;
16748: GO 16557
16750: POP
16751: POP
// end else
16752: GO 16767
// ComCancel ( factory [ 1 ] ) ;
16754: LD_VAR 0 30
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16767: LD_ADDR_VAR 0 23
16771: PUSH
16772: LD_VAR 0 4
16776: PPUSH
16777: LD_INT 22
16779: PUSH
16780: LD_VAR 0 1
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 21
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 70
16807: PUSH
16808: FOR_IN
16809: IFFALSE 16979
// begin vehicleInList = false ;
16811: LD_ADDR_VAR 0 25
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// for i := 1 to vehicles do
16819: LD_ADDR_VAR 0 13
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_VAR 0 24
16833: PUSH
16834: FOR_TO
16835: IFFALSE 16865
// begin if vehicle in vehicles [ i ] then
16837: LD_VAR 0 23
16841: PUSH
16842: LD_VAR 0 24
16846: PUSH
16847: LD_VAR 0 13
16851: ARRAY
16852: IN
16853: IFFALSE 16863
// vehicleInList = true ;
16855: LD_ADDR_VAR 0 25
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// end ;
16863: GO 16834
16865: POP
16866: POP
// if not vehicleInList then
16867: LD_VAR 0 25
16871: NOT
16872: IFFALSE 16977
// if vehicles < vehiclesToAttackAmount then
16874: LD_VAR 0 24
16878: PUSH
16879: LD_VAR 0 10
16883: LESS
16884: IFFALSE 16936
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16886: LD_ADDR_VAR 0 24
16890: PUSH
16891: LD_VAR 0 24
16895: PUSH
16896: LD_VAR 0 23
16900: PUSH
16901: LD_VAR 0 23
16905: PPUSH
16906: CALL_OW 313
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PUSH
16915: LD_VAR 0 23
16919: PPUSH
16920: CALL_OW 302
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: ADD
16933: ST_TO_ADDR
16934: GO 16977
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16936: LD_ADDR_VAR 0 24
16940: PUSH
16941: LD_VAR 0 24
16945: PUSH
16946: LD_VAR 0 23
16950: PUSH
16951: LD_VAR 0 23
16955: PPUSH
16956: CALL_OW 313
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: ADD
16976: ST_TO_ADDR
// end ;
16977: GO 16808
16979: POP
16980: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16981: LD_ADDR_VAR 0 37
16985: PUSH
16986: LD_VAR 0 7
16990: PPUSH
16991: LD_INT 81
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 70
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17188
// begin defenceUnits = [ ] ;
17011: LD_ADDR_VAR 0 26
17015: PUSH
17016: EMPTY
17017: ST_TO_ADDR
// for i := 1 to personel do
17018: LD_ADDR_VAR 0 13
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 18
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17084
// if personel [ i ] [ 3 ] = 2 then
17036: LD_VAR 0 18
17040: PUSH
17041: LD_VAR 0 13
17045: ARRAY
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PUSH
17051: LD_INT 2
17053: EQUAL
17054: IFFALSE 17082
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
17056: LD_ADDR_VAR 0 26
17060: PUSH
17061: LD_VAR 0 26
17065: PUSH
17066: LD_VAR 0 18
17070: PUSH
17071: LD_VAR 0 13
17075: ARRAY
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: ADD
17081: ST_TO_ADDR
17082: GO 17033
17084: POP
17085: POP
// for i := 1 to vehicles do
17086: LD_ADDR_VAR 0 13
17090: PUSH
17091: DOUBLE
17092: LD_INT 1
17094: DEC
17095: ST_TO_ADDR
17096: LD_VAR 0 24
17100: PUSH
17101: FOR_TO
17102: IFFALSE 17152
// if vehicles [ i ] [ 3 ] = 2 then
17104: LD_VAR 0 24
17108: PUSH
17109: LD_VAR 0 13
17113: ARRAY
17114: PUSH
17115: LD_INT 3
17117: ARRAY
17118: PUSH
17119: LD_INT 2
17121: EQUAL
17122: IFFALSE 17150
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17124: LD_ADDR_VAR 0 26
17128: PUSH
17129: LD_VAR 0 26
17133: PUSH
17134: LD_VAR 0 24
17138: PUSH
17139: LD_VAR 0 13
17143: ARRAY
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: ADD
17149: ST_TO_ADDR
17150: GO 17101
17152: POP
17153: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17154: LD_VAR 0 26
17158: PPUSH
17159: LD_INT 3
17161: PUSH
17162: LD_INT 60
17164: PUSH
17165: EMPTY
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 72
17176: PPUSH
17177: LD_VAR 0 37
17181: PPUSH
17182: CALL_OW 175
// end ;
17186: GO 17008
17188: POP
17189: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17190: LD_ADDR_VAR 0 38
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 30
17222: PUSH
17223: LD_INT 32
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 33
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 30
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 5
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17277: LD_ADDR_VAR 0 39
17281: PUSH
17282: LD_INT 81
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 58
17306: PUSH
17307: EMPTY
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17320: LD_VAR 0 38
17324: PUSH
17325: LD_VAR 0 39
17329: AND
17330: IFFALSE 17400
// for i in attackBuildings do
17332: LD_ADDR_VAR 0 13
17336: PUSH
17337: LD_VAR 0 38
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17398
// for j in enemyBuildings do
17345: LD_ADDR_VAR 0 14
17349: PUSH
17350: LD_VAR 0 39
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17394
// if GetDistUnits ( i , j ) < 12 then
17358: LD_VAR 0 13
17362: PPUSH
17363: LD_VAR 0 14
17367: PPUSH
17368: CALL_OW 296
17372: PUSH
17373: LD_INT 12
17375: LESS
17376: IFFALSE 17392
// ComAttackUnit ( i , j ) ;
17378: LD_VAR 0 13
17382: PPUSH
17383: LD_VAR 0 14
17387: PPUSH
17388: CALL_OW 115
17392: GO 17355
17394: POP
17395: POP
17396: GO 17342
17398: POP
17399: POP
// until not personel or not enableOmicronAI ;
17400: LD_VAR 0 18
17404: NOT
17405: PUSH
17406: LD_EXP 30
17410: NOT
17411: OR
17412: IFFALSE 12416
// end ;
17414: LD_VAR 0 12
17418: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// weapons = [ ru_gun ] ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 44
17431: PUSH
17432: EMPTY
17433: LIST
17434: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_EXP 73
17444: PUSH
17445: FOR_IN
17446: IFFALSE 17478
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_VAR 0 3
17457: PUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: CALL_OW 12
17470: ARRAY
17471: PPUSH
17472: CALL_OW 208
17476: GO 17445
17478: POP
17479: POP
// end ;
17480: LD_VAR 0 1
17484: RET
// export function KirovProduceVehicles ( factory ) ; begin
17485: LD_INT 0
17487: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_INT 21
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 51
17504: PPUSH
17505: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 21
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_INT 51
17525: PPUSH
17526: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17530: LD_VAR 0 1
17534: PPUSH
17535: LD_INT 21
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 51
17546: PPUSH
17547: CALL_OW 185
// case Difficulty of 1 :
17551: LD_OWVAR 67
17555: PUSH
17556: LD_INT 1
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17687
17564: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_INT 21
17572: PUSH
17573: LD_INT 23
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PPUSH
17583: LD_INT 2
17585: PPUSH
17586: CALL_OW 12
17590: ARRAY
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 43
17600: PPUSH
17601: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17605: LD_VAR 0 1
17609: PPUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 23
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: PPUSH
17623: LD_INT 2
17625: PPUSH
17626: CALL_OW 12
17630: ARRAY
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 43
17640: PPUSH
17641: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 23
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 1
17662: PPUSH
17663: LD_INT 2
17665: PPUSH
17666: CALL_OW 12
17670: ARRAY
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_INT 44
17680: PPUSH
17681: CALL_OW 185
// end ; 2 :
17685: GO 17950
17687: LD_INT 2
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17818
17695: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 21
17703: PUSH
17704: LD_INT 23
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PPUSH
17714: LD_INT 2
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_INT 42
17731: PPUSH
17732: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17736: LD_VAR 0 1
17740: PPUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PPUSH
17754: LD_INT 2
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: LD_INT 43
17771: PPUSH
17772: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 23
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PPUSH
17794: LD_INT 2
17796: PPUSH
17797: CALL_OW 12
17801: ARRAY
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: LD_INT 44
17811: PPUSH
17812: CALL_OW 185
// end ; 3 :
17816: GO 17950
17818: LD_INT 3
17820: DOUBLE
17821: EQUAL
17822: IFTRUE 17826
17824: GO 17949
17826: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17827: LD_VAR 0 1
17831: PPUSH
17832: LD_INT 21
17834: PUSH
17835: LD_INT 23
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 2
17847: PPUSH
17848: CALL_OW 12
17852: ARRAY
17853: PPUSH
17854: LD_INT 1
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 42
17862: PPUSH
17863: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17867: LD_VAR 0 1
17871: PPUSH
17872: LD_INT 21
17874: PUSH
17875: LD_INT 23
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: PPUSH
17885: LD_INT 2
17887: PPUSH
17888: CALL_OW 12
17892: ARRAY
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_INT 42
17902: PPUSH
17903: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17907: LD_VAR 0 1
17911: PPUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 23
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 2
17927: PPUSH
17928: CALL_OW 12
17932: ARRAY
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 44
17942: PPUSH
17943: CALL_OW 185
// end ; end ;
17947: GO 17950
17949: POP
// end ;
17950: LD_VAR 0 2
17954: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17955: LD_INT 0
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
// vehicles = [ ] ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: EMPTY
17970: ST_TO_ADDR
// cargoRefuel = [ ] ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: EMPTY
17977: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17978: LD_ADDR_VAR 0 4
17982: PUSH
17983: LD_EXP 77
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18038
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: LD_VAR 0 4
18008: PUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: CALL_OW 313
18018: PUSH
18019: LD_INT 1
18021: ARRAY
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 2
18035: ST_TO_ADDR
18036: GO 17988
18038: POP
18039: POP
// repeat for i := 1 to vehicles do
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: DOUBLE
18046: LD_INT 1
18048: DEC
18049: ST_TO_ADDR
18050: LD_VAR 0 3
18054: PUSH
18055: FOR_TO
18056: IFFALSE 18094
// if vehicles [ i ] [ 3 ] = 1 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 2
18067: ARRAY
18068: PUSH
18069: LD_INT 3
18071: ARRAY
18072: PUSH
18073: LD_INT 1
18075: EQUAL
18076: IFFALSE 18092
// goodVehs = goodVehs + 1 ;
18078: LD_ADDR_VAR 0 5
18082: PUSH
18083: LD_VAR 0 5
18087: PUSH
18088: LD_INT 1
18090: PLUS
18091: ST_TO_ADDR
18092: GO 18055
18094: POP
18095: POP
// if goodVehs = vehicles then
18096: LD_VAR 0 5
18100: PUSH
18101: LD_VAR 0 3
18105: EQUAL
18106: IFFALSE 18329
// for i := 1 to vehicles do
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: DOUBLE
18114: LD_INT 1
18116: DEC
18117: ST_TO_ADDR
18118: LD_VAR 0 3
18122: PUSH
18123: FOR_TO
18124: IFFALSE 18327
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18126: LD_VAR 0 3
18130: PUSH
18131: LD_VAR 0 2
18135: ARRAY
18136: PUSH
18137: LD_INT 1
18139: ARRAY
18140: PPUSH
18141: CALL_OW 314
18145: NOT
18146: IFFALSE 18325
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18148: LD_VAR 0 3
18152: PUSH
18153: LD_VAR 0 2
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PPUSH
18163: CALL_OW 261
18167: PUSH
18168: LD_INT 50
18170: LESS
18171: IFFALSE 18300
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18173: LD_ADDR_VAR 0 6
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 6
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: LD_INT 51
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 50
18210: PUSH
18211: EMPTY
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18264
// if GetCargo ( cargo , mat_oil ) > 0 then
18228: LD_VAR 0 6
18232: PPUSH
18233: LD_INT 2
18235: PPUSH
18236: CALL_OW 289
18240: PUSH
18241: LD_INT 0
18243: GREATER
18244: IFFALSE 18262
// cargoRefuel = cargoRefuel ^ cargo ;
18246: LD_ADDR_VAR 0 7
18250: PUSH
18251: LD_VAR 0 7
18255: PUSH
18256: LD_VAR 0 6
18260: ADD
18261: ST_TO_ADDR
18262: GO 18225
18264: POP
18265: POP
// if cargo then
18266: LD_VAR 0 6
18270: IFFALSE 18300
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18272: LD_VAR 0 3
18276: PUSH
18277: LD_VAR 0 2
18281: ARRAY
18282: PUSH
18283: LD_INT 1
18285: ARRAY
18286: PPUSH
18287: LD_VAR 0 6
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PPUSH
18296: CALL 8415 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18300: LD_VAR 0 3
18304: PUSH
18305: LD_VAR 0 2
18309: ARRAY
18310: PUSH
18311: LD_INT 1
18313: ARRAY
18314: PPUSH
18315: LD_INT 26
18317: PPUSH
18318: LD_INT 35
18320: PPUSH
18321: CALL_OW 174
// end ; end ;
18325: GO 18123
18327: POP
18328: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 2
18338: ARRAY
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL 10167 0 2
18351: PUSH
18352: LD_VAR 0 3
18356: PUSH
18357: LD_VAR 0 2
18361: ARRAY
18362: PUSH
18363: LD_INT 2
18365: ARRAY
18366: PPUSH
18367: CALL_OW 310
18371: NOT
18372: AND
18373: IFFALSE 18409
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18375: LD_VAR 0 3
18379: PUSH
18380: LD_VAR 0 2
18384: ARRAY
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 3
18394: PUSH
18395: LD_VAR 0 2
18399: ARRAY
18400: PUSH
18401: LD_INT 1
18403: ARRAY
18404: PPUSH
18405: CALL_OW 120
// goodVehs = 0 ;
18409: LD_ADDR_VAR 0 5
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
// for i := 1 to vehicles do
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: DOUBLE
18423: LD_INT 1
18425: DEC
18426: ST_TO_ADDR
18427: LD_VAR 0 3
18431: PUSH
18432: FOR_TO
18433: IFFALSE 18959
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 2
18444: ARRAY
18445: PUSH
18446: LD_INT 1
18448: ARRAY
18449: PPUSH
18450: CALL_OW 256
18454: PUSH
18455: LD_INT 500
18457: LESS
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_VAR 0 2
18468: ARRAY
18469: PUSH
18470: LD_INT 1
18472: ARRAY
18473: PPUSH
18474: LD_INT 78
18476: PPUSH
18477: LD_INT 39
18479: PPUSH
18480: CALL_OW 297
18484: PUSH
18485: LD_INT 9
18487: LESS
18488: NOT
18489: AND
18490: IFFALSE 18555
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 3
18511: PUSH
18512: LD_VAR 0 2
18516: ARRAY
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: LD_INT 2
18524: PPUSH
18525: CALL 37275 0 3
18529: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18530: LD_VAR 0 3
18534: PUSH
18535: LD_VAR 0 2
18539: ARRAY
18540: PUSH
18541: LD_INT 1
18543: ARRAY
18544: PPUSH
18545: LD_INT 78
18547: PPUSH
18548: LD_INT 39
18550: PPUSH
18551: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18555: LD_VAR 0 3
18559: PUSH
18560: LD_VAR 0 2
18564: ARRAY
18565: PUSH
18566: LD_INT 1
18568: ARRAY
18569: PPUSH
18570: CALL_OW 256
18574: PUSH
18575: LD_INT 500
18577: LESS
18578: PUSH
18579: LD_VAR 0 3
18583: PUSH
18584: LD_VAR 0 2
18588: ARRAY
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: LD_INT 78
18596: PPUSH
18597: LD_INT 39
18599: PPUSH
18600: CALL_OW 297
18604: PUSH
18605: LD_INT 9
18607: LESS
18608: AND
18609: PUSH
18610: LD_VAR 0 3
18614: PUSH
18615: LD_VAR 0 2
18619: ARRAY
18620: PUSH
18621: LD_INT 1
18623: ARRAY
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL 10167 0 2
18632: NOT
18633: AND
18634: IFFALSE 18689
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 2
18645: ARRAY
18646: PUSH
18647: LD_INT 2
18649: ARRAY
18650: PPUSH
18651: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 2
18664: ARRAY
18665: PUSH
18666: LD_INT 2
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 3
18674: PUSH
18675: LD_VAR 0 2
18679: ARRAY
18680: PUSH
18681: LD_INT 1
18683: ARRAY
18684: PPUSH
18685: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_VAR 0 2
18698: ARRAY
18699: PUSH
18700: LD_INT 1
18702: ARRAY
18703: PPUSH
18704: CALL_OW 256
18708: PUSH
18709: LD_INT 1000
18711: EQUAL
18712: PUSH
18713: LD_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: ARRAY
18723: PUSH
18724: LD_INT 3
18726: ARRAY
18727: PUSH
18728: LD_INT 2
18730: EQUAL
18731: AND
18732: IFFALSE 18806
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_VAR 0 3
18753: PUSH
18754: LD_VAR 0 2
18758: ARRAY
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL 37275 0 3
18771: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 2
18781: ARRAY
18782: PUSH
18783: LD_INT 2
18785: ARRAY
18786: PPUSH
18787: LD_VAR 0 3
18791: PUSH
18792: LD_VAR 0 2
18796: ARRAY
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_VAR 0 2
18815: ARRAY
18816: PUSH
18817: LD_INT 1
18819: ARRAY
18820: PPUSH
18821: CALL_OW 256
18825: PUSH
18826: LD_INT 250
18828: LESS
18829: IFFALSE 18856
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_VAR 0 3
18840: PUSH
18841: LD_VAR 0 3
18845: PUSH
18846: LD_VAR 0 2
18850: ARRAY
18851: PUSH
18852: EMPTY
18853: LIST
18854: DIFF
18855: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_VAR 0 2
18865: ARRAY
18866: PUSH
18867: LD_INT 2
18869: ARRAY
18870: PPUSH
18871: CALL_OW 256
18875: PUSH
18876: LD_INT 250
18878: LESS
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 2
18889: ARRAY
18890: PUSH
18891: LD_INT 1
18893: ARRAY
18894: PPUSH
18895: CALL_OW 256
18899: PUSH
18900: LD_INT 250
18902: GREATER
18903: AND
18904: IFFALSE 18957
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18906: LD_ADDR_EXP 31
18910: PUSH
18911: LD_EXP 31
18915: PUSH
18916: LD_VAR 0 3
18920: PUSH
18921: LD_VAR 0 2
18925: ARRAY
18926: PUSH
18927: LD_INT 1
18929: ARRAY
18930: ADD
18931: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18932: LD_ADDR_VAR 0 3
18936: PUSH
18937: LD_VAR 0 3
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_VAR 0 2
18951: ARRAY
18952: PUSH
18953: EMPTY
18954: LIST
18955: DIFF
18956: ST_TO_ADDR
// end ; end ;
18957: GO 18432
18959: POP
18960: POP
// wait ( 0 0$1 ) ;
18961: LD_INT 35
18963: PPUSH
18964: CALL_OW 67
// until omicronSurrender ;
18968: LD_EXP 26
18972: IFFALSE 18040
// end ;
18974: LD_VAR 0 1
18978: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// inBase = false ;
18995: LD_ADDR_VAR 0 15
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: PPUSH
19026: CALL_OW 70
19030: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
19031: LD_ADDR_VAR 0 9
19035: PUSH
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 435
19045: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
19046: LD_ADDR_VAR 0 12
19050: PUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_INT 50
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 72
19109: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19110: LD_ADDR_VAR 0 13
19114: PUSH
19115: LD_VAR 0 1
19119: PPUSH
19120: LD_INT 50
19122: PUSH
19123: EMPTY
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 4
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 72
19144: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19145: LD_ADDR_VAR 0 14
19149: PUSH
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_INT 3
19157: PUSH
19158: LD_INT 24
19160: PUSH
19161: LD_INT 1000
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 72
19176: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19177: LD_ADDR_VAR 0 6
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_INT 3
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19200: LD_ADDR_VAR 0 5
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 50
19212: PUSH
19213: EMPTY
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: PPUSH
19219: CALL_OW 72
19223: PUSH
19224: FOR_IN
19225: IFFALSE 19972
// begin if attackUnits and medics then
19227: LD_VAR 0 12
19231: PUSH
19232: LD_VAR 0 13
19236: AND
19237: IFFALSE 19304
// begin if damageUnits then
19239: LD_VAR 0 14
19243: IFFALSE 19265
// ComHeal ( medics , damageUnits [ 1 ] ) else
19245: LD_VAR 0 13
19249: PPUSH
19250: LD_VAR 0 14
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: PPUSH
19259: CALL_OW 128
19263: GO 19302
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19265: LD_VAR 0 13
19269: PPUSH
19270: LD_VAR 0 12
19274: PUSH
19275: LD_INT 1
19277: ARRAY
19278: PPUSH
19279: CALL_OW 250
19283: PPUSH
19284: LD_VAR 0 12
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PPUSH
19293: CALL_OW 251
19297: PPUSH
19298: CALL_OW 111
// end else
19302: GO 19333
// begin if not attackUnits and medics then
19304: LD_VAR 0 12
19308: NOT
19309: PUSH
19310: LD_VAR 0 13
19314: AND
19315: IFFALSE 19333
// attackUnits = attackUnits ^ medics ;
19317: LD_ADDR_VAR 0 12
19321: PUSH
19322: LD_VAR 0 12
19326: PUSH
19327: LD_VAR 0 13
19331: ADD
19332: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: DOUBLE
19339: LD_INT 1
19341: DEC
19342: ST_TO_ADDR
19343: LD_VAR 0 9
19347: PUSH
19348: LD_INT 2
19350: DIVREAL
19351: PUSH
19352: FOR_TO
19353: IFFALSE 19392
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19355: LD_VAR 0 12
19359: PPUSH
19360: LD_VAR 0 9
19364: PUSH
19365: LD_VAR 0 4
19369: ARRAY
19370: PPUSH
19371: LD_VAR 0 9
19375: PUSH
19376: LD_VAR 0 4
19380: PUSH
19381: LD_INT 1
19383: PLUS
19384: ARRAY
19385: PPUSH
19386: CALL_OW 176
19390: GO 19352
19392: POP
19393: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19394: LD_VAR 0 12
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 60
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: PPUSH
19431: LD_INT 27
19433: PPUSH
19434: LD_INT 34
19436: PPUSH
19437: CALL_OW 111
// wait ( 0 0$01 ) ;
19441: LD_INT 35
19443: PPUSH
19444: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19448: LD_VAR 0 8
19452: PUSH
19453: LD_VAR 0 12
19457: PPUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: LD_INT 60
19473: PUSH
19474: EMPTY
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 72
19489: AND
19490: IFFALSE 19673
// begin for playerUnit in playerUnits do
19492: LD_ADDR_VAR 0 7
19496: PUSH
19497: LD_VAR 0 6
19501: PUSH
19502: FOR_IN
19503: IFFALSE 19669
// begin if Attacks ( playerUnit ) then
19505: LD_VAR 0 7
19509: PPUSH
19510: CALL_OW 320
19514: IFFALSE 19601
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19516: LD_VAR 0 7
19520: PPUSH
19521: CALL_OW 320
19525: PUSH
19526: LD_VAR 0 1
19530: IN
19531: PUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: LD_VAR 0 5
19541: PPUSH
19542: CALL_OW 296
19546: PUSH
19547: LD_INT 13
19549: LESS
19550: AND
19551: IFFALSE 19599
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19553: LD_VAR 0 12
19557: PPUSH
19558: LD_INT 21
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 60
19573: PUSH
19574: EMPTY
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 72
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: CALL_OW 115
19599: GO 19667
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19601: LD_ADDR_VAR 0 10
19605: PUSH
19606: LD_VAR 0 8
19610: PPUSH
19611: LD_VAR 0 5
19615: PPUSH
19616: CALL_OW 74
19620: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19621: LD_VAR 0 12
19625: PPUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 60
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 72
19657: PPUSH
19658: LD_VAR 0 10
19662: PPUSH
19663: CALL_OW 115
// end ; end ;
19667: GO 19502
19669: POP
19670: POP
// end else
19671: GO 19720
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19673: LD_VAR 0 12
19677: PPUSH
19678: LD_INT 21
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 60
19693: PUSH
19694: EMPTY
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PPUSH
19705: CALL_OW 72
19709: PPUSH
19710: LD_INT 27
19712: PPUSH
19713: LD_INT 34
19715: PPUSH
19716: CALL_OW 111
// if enemyUnitsOnRoad then
19720: LD_VAR 0 8
19724: IFFALSE 19908
// begin for playerUnit in playerUnits do
19726: LD_ADDR_VAR 0 7
19730: PUSH
19731: LD_VAR 0 6
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19904
// begin if Attacks ( playerUnit ) then
19739: LD_VAR 0 7
19743: PPUSH
19744: CALL_OW 320
19748: IFFALSE 19821
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19750: LD_VAR 0 7
19754: PPUSH
19755: CALL_OW 320
19759: PUSH
19760: LD_VAR 0 1
19764: IN
19765: PUSH
19766: LD_VAR 0 7
19770: PPUSH
19771: LD_VAR 0 5
19775: PPUSH
19776: CALL_OW 296
19780: PUSH
19781: LD_INT 13
19783: LESS
19784: AND
19785: IFFALSE 19819
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19787: LD_VAR 0 12
19791: PPUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 72
19809: PPUSH
19810: LD_VAR 0 7
19814: PPUSH
19815: CALL_OW 115
19819: GO 19902
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19821: LD_ADDR_VAR 0 10
19825: PUSH
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_VAR 0 12
19835: PPUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 50
19848: PUSH
19849: EMPTY
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 72
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: CALL_OW 74
19869: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19870: LD_VAR 0 12
19874: PPUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: PPUSH
19888: CALL_OW 72
19892: PPUSH
19893: LD_VAR 0 10
19897: PPUSH
19898: CALL_OW 115
// end ; end ;
19902: GO 19736
19904: POP
19905: POP
// end else
19906: GO 19941
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19908: LD_VAR 0 12
19912: PPUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: PPUSH
19926: CALL_OW 72
19930: PPUSH
19931: LD_INT 27
19933: PPUSH
19934: LD_INT 34
19936: PPUSH
19937: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_INT 27
19948: PPUSH
19949: LD_INT 34
19951: PPUSH
19952: CALL_OW 297
19956: PUSH
19957: LD_INT 5
19959: LESS
19960: IFFALSE 19970
// inBase = true ;
19962: LD_ADDR_VAR 0 15
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// end ;
19970: GO 19224
19972: POP
19973: POP
// wait ( 0 0$1 ) ;
19974: LD_INT 35
19976: PPUSH
19977: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_INT 50
19988: PUSH
19989: EMPTY
19990: LIST
19991: PPUSH
19992: CALL_OW 72
19996: PUSH
19997: LD_INT 0
19999: EQUAL
20000: PUSH
20001: LD_VAR 0 15
20005: OR
20006: IFFALSE 19003
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 21
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 50
20025: PUSH
20026: EMPTY
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 72
20037: PPUSH
20038: LD_INT 27
20040: PPUSH
20041: LD_INT 34
20043: PPUSH
20044: CALL_OW 111
// for i := 1 to units do
20048: LD_ADDR_VAR 0 4
20052: PUSH
20053: DOUBLE
20054: LD_INT 1
20056: DEC
20057: ST_TO_ADDR
20058: LD_VAR 0 1
20062: PUSH
20063: FOR_TO
20064: IFFALSE 20099
// if IsOk ( units [ i ] ) then
20066: LD_VAR 0 1
20070: PUSH
20071: LD_VAR 0 4
20075: ARRAY
20076: PPUSH
20077: CALL_OW 302
20081: IFFALSE 20097
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20083: LD_ADDR_EXP 15
20087: PUSH
20088: LD_EXP 15
20092: PUSH
20093: LD_INT 1
20095: PLUS
20096: ST_TO_ADDR
20097: GO 20063
20099: POP
20100: POP
// amSupportTroops = amSupportTroops diff units ;
20101: LD_ADDR_EXP 85
20105: PUSH
20106: LD_EXP 85
20110: PUSH
20111: LD_VAR 0 1
20115: DIFF
20116: ST_TO_ADDR
// newBase = amBase ;
20117: LD_ADDR_VAR 0 16
20121: PUSH
20122: LD_EXP 87
20126: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20127: LD_ADDR_VAR 0 16
20131: PUSH
20132: LD_VAR 0 16
20136: PUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_INT 50
20144: PUSH
20145: EMPTY
20146: LIST
20147: PPUSH
20148: CALL_OW 72
20152: ADD
20153: ST_TO_ADDR
// amBase = newBase ;
20154: LD_ADDR_EXP 87
20158: PUSH
20159: LD_VAR 0 16
20163: ST_TO_ADDR
// end ; end_of_file
20164: LD_VAR 0 3
20168: RET
// export function Lose_Burlak ; begin
20169: LD_INT 0
20171: PPUSH
// YouLost ( Burlak ) ;
20172: LD_STRING Burlak
20174: PPUSH
20175: CALL_OW 104
// end ;
20179: LD_VAR 0 1
20183: RET
// export function Lose_Omicron ; begin
20184: LD_INT 0
20186: PPUSH
// YouLost ( Omicron ) ;
20187: LD_STRING Omicron
20189: PPUSH
20190: CALL_OW 104
// end ;
20194: LD_VAR 0 1
20198: RET
// export function Lose_Vehicles ; begin
20199: LD_INT 0
20201: PPUSH
// YouLost ( Vehicles ) ;
20202: LD_STRING Vehicles
20204: PPUSH
20205: CALL_OW 104
// end ;
20209: LD_VAR 0 1
20213: RET
// export function Lose_SelfAttack ; begin
20214: LD_INT 0
20216: PPUSH
// YouLost ( SelfAttack ) ;
20217: LD_STRING SelfAttack
20219: PPUSH
20220: CALL_OW 104
// end ;
20224: LD_VAR 0 1
20228: RET
// export function Lose_Delay ; begin
20229: LD_INT 0
20231: PPUSH
// YouLost ( Delay ) ;
20232: LD_STRING Delay
20234: PPUSH
20235: CALL_OW 104
// end ; end_of_file
20239: LD_VAR 0 1
20243: RET
// export function FinishMission ; begin
20244: LD_INT 0
20246: PPUSH
// SetRewards ;
20247: CALL 20268 0 0
// SavePlayerCharacters ;
20251: CALL 20482 0 0
// SaveGlobalVariables ;
20255: CALL 20811 0 0
// YouWin ;
20259: CALL_OW 103
// end ;
20263: LD_VAR 0 1
20267: RET
// function SetRewards ; var unitsToReward ; begin
20268: LD_INT 0
20270: PPUSH
20271: PPUSH
// if produceMoreVehicles then
20272: LD_EXP 19
20276: IFFALSE 20290
// AddMedal ( Surplus , 1 ) else
20278: LD_STRING Surplus
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 101
20288: GO 20320
// if produceOnlyForYou then
20290: LD_EXP 20
20294: IFFALSE 20309
// AddMedal ( Surplus , - 1 ) else
20296: LD_STRING Surplus
20298: PPUSH
20299: LD_INT 1
20301: NEG
20302: PPUSH
20303: CALL_OW 101
20307: GO 20320
// AddMedal ( Surplus , - 2 ) ;
20309: LD_STRING Surplus
20311: PPUSH
20312: LD_INT 2
20314: NEG
20315: PPUSH
20316: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20320: LD_EXP 15
20324: PUSH
20325: LD_EXP 47
20329: LESS
20330: IFFALSE 20344
// AddMedal ( PreventReinforcements , 1 ) else
20332: LD_STRING PreventReinforcements
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 101
20342: GO 20355
// AddMedal ( PreventReinforcements , - 1 ) ;
20344: LD_STRING PreventReinforcements
20346: PPUSH
20347: LD_INT 1
20349: NEG
20350: PPUSH
20351: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20355: LD_EXP 10
20359: PUSH
20360: LD_EXP 56
20364: PPUSH
20365: CALL_OW 302
20369: AND
20370: IFFALSE 20384
// AddMedal ( Scholtze , 1 ) else
20372: LD_STRING Scholtze
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 101
20382: GO 20395
// AddMedal ( Scholtze , - 1 ) ;
20384: LD_STRING Scholtze
20386: PPUSH
20387: LD_INT 1
20389: NEG
20390: PPUSH
20391: CALL_OW 101
// GiveMedals ( Main ) ;
20395: LD_STRING Main
20397: PPUSH
20398: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20402: LD_ADDR_VAR 0 2
20406: PUSH
20407: LD_INT 22
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 21
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_EXP 80
20450: ADD
20451: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_VAR 0 2
20461: PUSH
20462: LD_EXP 63
20466: DIFF
20467: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: CALL_OW 43
// end ;
20477: LD_VAR 0 1
20481: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20482: LD_INT 0
20484: PPUSH
20485: PPUSH
20486: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20487: LD_EXP 50
20491: PPUSH
20492: LD_STRING Burlak
20494: PPUSH
20495: LD_INT 3
20497: PPUSH
20498: CALL 7299 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20502: LD_EXP 51
20506: PPUSH
20507: LD_STRING Gnyevko
20509: PPUSH
20510: LD_INT 3
20512: PPUSH
20513: CALL 7299 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20517: LD_EXP 53
20521: PPUSH
20522: LD_STRING Kovalyuk
20524: PPUSH
20525: LD_INT 3
20527: PPUSH
20528: CALL 7299 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20532: LD_EXP 52
20536: PPUSH
20537: LD_STRING Kirilenkova
20539: PPUSH
20540: LD_INT 3
20542: PPUSH
20543: CALL 7299 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20547: LD_EXP 56
20551: PPUSH
20552: LD_STRING Scholtze
20554: PPUSH
20555: LD_INT 3
20557: PPUSH
20558: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20562: LD_EXP 54
20566: PPUSH
20567: LD_STRING Belkov
20569: PPUSH
20570: LD_INT 3
20572: PPUSH
20573: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20577: LD_EXP 55
20581: PPUSH
20582: LD_STRING Belkov2
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20592: LD_EXP 54
20596: PPUSH
20597: LD_STRING Belkov
20599: PPUSH
20600: LD_INT 6
20602: PPUSH
20603: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20607: LD_EXP 55
20611: PPUSH
20612: LD_STRING Belkov2
20614: PPUSH
20615: LD_INT 6
20617: PPUSH
20618: CALL 7299 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_INT 3
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 50
20649: PUSH
20650: EMPTY
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: PPUSH
20658: CALL_OW 69
20662: PUSH
20663: LD_EXP 50
20667: PUSH
20668: LD_EXP 51
20672: PUSH
20673: LD_EXP 54
20677: PUSH
20678: LD_EXP 55
20682: PUSH
20683: LD_EXP 53
20687: PUSH
20688: LD_EXP 52
20692: PUSH
20693: LD_EXP 56
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: DIFF
20707: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_STRING other_survivors
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: CALL 7355 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20723: LD_ADDR_VAR 0 3
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 6
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 21
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 50
20750: PUSH
20751: EMPTY
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: PUSH
20764: LD_EXP 62
20768: PUSH
20769: LD_EXP 63
20773: PUSH
20774: LD_EXP 54
20778: PUSH
20779: LD_EXP 55
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: DIFF
20790: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_STRING other_kirov
20798: PPUSH
20799: LD_INT 6
20801: PPUSH
20802: CALL 7355 0 3
// end ;
20806: LD_VAR 0 1
20810: RET
// function SaveGlobalVariables ; begin
20811: LD_INT 0
20813: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20814: LD_EXP 5
20818: PPUSH
20819: LD_STRING 03_KurinOpinion_1
20821: PPUSH
20822: CALL_OW 39
// SaveVariable ( vehiclesToSave , 03_SavedVehicles_2 ) ;
20826: LD_EXP 7
20830: PPUSH
20831: LD_STRING 03_SavedVehicles_2
20833: PPUSH
20834: CALL_OW 39
// end ; end_of_file
20838: LD_VAR 0 1
20842: RET
// export function CustomEvent ( event ) ; begin
20843: LD_INT 0
20845: PPUSH
// end ;
20846: LD_VAR 0 2
20850: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20851: LD_INT 0
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: PUSH
20894: FOR_IN
20895: IFFALSE 21092
// if GetTaskList ( i ) > 0 then
20897: LD_VAR 0 2
20901: PPUSH
20902: CALL_OW 437
20906: PUSH
20907: LD_INT 0
20909: GREATER
20910: IFFALSE 21090
// for j = 1 to GetTaskList ( i ) do
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 437
20931: PUSH
20932: FOR_TO
20933: IFFALSE 21088
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20935: LD_ADDR_VAR 0 4
20939: PUSH
20940: LD_VAR 0 2
20944: PPUSH
20945: CALL_OW 437
20949: PUSH
20950: LD_VAR 0 3
20954: ARRAY
20955: PUSH
20956: LD_INT 4
20958: ARRAY
20959: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20960: LD_ADDR_VAR 0 8
20964: PUSH
20965: LD_VAR 0 2
20969: PPUSH
20970: CALL_OW 437
20974: PUSH
20975: LD_VAR 0 3
20979: ARRAY
20980: PUSH
20981: LD_INT 5
20983: ARRAY
20984: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20985: LD_ADDR_VAR 0 6
20989: PUSH
20990: LD_VAR 0 2
20994: PPUSH
20995: CALL_OW 437
20999: PUSH
21000: LD_VAR 0 3
21004: ARRAY
21005: PUSH
21006: LD_INT 2
21008: ARRAY
21009: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
21010: LD_ADDR_VAR 0 7
21014: PUSH
21015: LD_VAR 0 2
21019: PPUSH
21020: CALL_OW 437
21024: PUSH
21025: LD_VAR 0 3
21029: ARRAY
21030: PUSH
21031: LD_INT 3
21033: ARRAY
21034: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
21035: LD_VAR 0 4
21039: PPUSH
21040: CALL_OW 255
21044: PUSH
21045: LD_INT 6
21047: EQUAL
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 437
21058: PUSH
21059: LD_VAR 0 3
21063: ARRAY
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: PUSH
21069: LD_STRING <
21071: EQUAL
21072: AND
21073: IFFALSE 21086
// SetTaskList ( i , [ ] ) ;
21075: LD_VAR 0 2
21079: PPUSH
21080: EMPTY
21081: PPUSH
21082: CALL_OW 446
// end ;
21086: GO 20932
21088: POP
21089: POP
21090: GO 20894
21092: POP
21093: POP
// end ;
21094: PPOPN 8
21096: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21097: LD_VAR 0 2
21101: PUSH
21102: LD_INT 6
21104: EQUAL
21105: IFFALSE 21119
// SetSide ( building , 6 ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_INT 6
21114: PPUSH
21115: CALL_OW 235
// end ;
21119: PPOPN 3
21121: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
// begin diffUnits = [ ] ;
21126: LD_ADDR_VAR 0 2
21130: PUSH
21131: EMPTY
21132: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 255
21142: PUSH
21143: LD_INT 3
21145: EQUAL
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 266
21156: PUSH
21157: LD_INT 0
21159: EQUAL
21160: AND
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: LD_INT 21
21169: PPUSH
21170: CALL_OW 308
21174: AND
21175: IFFALSE 21189
// SetBName ( building , kagan ) ;
21177: LD_VAR 0 1
21181: PPUSH
21182: LD_STRING kagan
21184: PPUSH
21185: CALL_OW 500
// if GetSide ( building ) = 6 then
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 255
21198: PUSH
21199: LD_INT 6
21201: EQUAL
21202: IFFALSE 21383
// begin if GetBType ( building ) = b_ext_noncombat then
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 266
21213: PUSH
21214: LD_INT 19
21216: EQUAL
21217: IFFALSE 21223
// begin SpawnKirovSupport ;
21219: CALL 4614 0 0
// end ; if GetBType ( building ) = b_depot then
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 266
21232: PUSH
21233: LD_INT 0
21235: EQUAL
21236: IFFALSE 21282
// begin kirovOilDepot = building ;
21238: LD_ADDR_EXP 69
21242: PUSH
21243: LD_VAR 0 1
21247: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21248: LD_EXP 69
21252: PPUSH
21253: CALL_OW 274
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: LD_INT 3000
21263: PPUSH
21264: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21268: LD_EXP 83
21272: PPUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 266
21291: PUSH
21292: LD_INT 31
21294: EQUAL
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 266
21305: PUSH
21306: LD_INT 4
21308: EQUAL
21309: OR
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_INT 20
21318: PPUSH
21319: CALL_OW 308
21323: AND
21324: IFFALSE 21383
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21326: LD_EXP 79
21330: PPUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 56
21343: PUSH
21344: EMPTY
21345: LIST
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 60
21352: PUSH
21353: EMPTY
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 72
21369: PUSH
21370: LD_INT 1
21372: ARRAY
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 120
// end ; end ;
21383: PPOPN 3
21385: END
// on UpgradeComplete ( building ) do var i , tmp ;
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 255
21399: PUSH
21400: LD_INT 3
21402: EQUAL
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 266
21413: PUSH
21414: LD_INT 3
21416: EQUAL
21417: AND
21418: PUSH
21419: LD_EXP 11
21423: NOT
21424: AND
21425: IFFALSE 21436
// Dial_UpgradeWorkshop ( building ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL 24576 0 1
// end ;
21436: PPOPN 3
21438: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21439: LD_VAR 0 1
21443: PUSH
21444: LD_EXP 50
21448: EQUAL
21449: IFFALSE 21455
// Lose_Burlak ;
21451: CALL 20169 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21455: LD_VAR 0 1
21459: PUSH
21460: LD_EXP 61
21464: EQUAL
21465: PUSH
21466: LD_EXP 29
21470: NOT
21471: AND
21472: IFFALSE 21478
// Lose_Omicron ;
21474: CALL 20184 0 0
// end ;
21478: PPOPN 1
21480: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21481: LD_VAR 0 1
21485: PUSH
21486: LD_INT 3
21488: EQUAL
21489: PUSH
21490: LD_VAR 0 2
21494: PUSH
21495: LD_INT 6
21497: EQUAL
21498: AND
21499: IFFALSE 21505
// Lose_SelfAttack ;
21501: CALL 20214 0 0
// end ;
21505: PPOPN 2
21507: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 255
21517: PUSH
21518: LD_INT 6
21520: EQUAL
21521: IFFALSE 21686
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 264
21532: PUSH
21533: LD_INT 51
21535: EQUAL
21536: PUSH
21537: LD_EXP 75
21541: NOT
21542: AND
21543: IFFALSE 21557
// kirovTransportCargo = vehicle else
21545: LD_ADDR_EXP 75
21549: PUSH
21550: LD_VAR 0 1
21554: ST_TO_ADDR
21555: GO 21629
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 264
21566: PUSH
21567: LD_INT 51
21569: EQUAL
21570: IFFALSE 21629
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_EXP 69
21581: PPUSH
21582: LD_INT 2
21584: PPUSH
21585: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21589: LD_VAR 0 1
21593: PPUSH
21594: LD_INT 137
21596: PPUSH
21597: LD_INT 99
21599: PPUSH
21600: CALL_OW 171
// AddComHold ( vehicle ) ;
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21613: LD_ADDR_EXP 76
21617: PUSH
21618: LD_EXP 76
21622: PUSH
21623: LD_VAR 0 1
21627: ADD
21628: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 264
21638: PUSH
21639: LD_INT 42
21641: PUSH
21642: LD_INT 43
21644: PUSH
21645: LD_INT 44
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: IN
21653: IFFALSE 21686
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21655: LD_ADDR_EXP 77
21659: PUSH
21660: LD_EXP 77
21664: PUSH
21665: LD_VAR 0 1
21669: ADD
21670: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 137
21678: PPUSH
21679: LD_INT 99
21681: PPUSH
21682: CALL_OW 111
// end ; end ; end ;
21686: PPOPN 2
21688: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 6
21696: EQUAL
21697: PUSH
21698: LD_VAR 0 2
21702: PUSH
21703: LD_EXP 31
21707: IN
21708: NOT
21709: AND
21710: IFFALSE 21733
// begin ComExitVehicle ( capturing_unit ) ;
21712: LD_VAR 0 4
21716: PPUSH
21717: CALL_OW 121
// SetSide ( new , 6 ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_INT 6
21728: PPUSH
21729: CALL_OW 235
// end ; end ;
21733: PPOPN 4
21735: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 255
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: PUSH
21750: LD_EXP 22
21754: AND
21755: IFFALSE 21783
// begin wait ( 0 0$2 ) ;
21757: LD_INT 70
21759: PPUSH
21760: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: LD_INT 78
21771: PPUSH
21772: LD_INT 39
21774: PPUSH
21775: CALL_OW 174
// KirovAttackOmicron ;
21779: CALL 17955 0 0
// end ; end ;
21783: PPOPN 2
21785: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21786: LD_VAR 0 2
21790: PPUSH
21791: CALL_OW 255
21795: PUSH
21796: LD_INT 6
21798: EQUAL
21799: PUSH
21800: LD_VAR 0 1
21804: PUSH
21805: LD_INT 39
21807: EQUAL
21808: AND
21809: IFFALSE 21870
// begin MountWeaponTurrent ;
21811: CALL 17419 0 0
// wait ( 3 3$30 ) ;
21815: LD_INT 7350
21817: PPUSH
21818: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 6
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 30
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 69
21861: PUSH
21862: LD_INT 1
21864: ARRAY
21865: PPUSH
21866: CALL 17485 0 1
// end ; end ; end_of_file
21870: PPOPN 2
21872: END
// export function MissionIntro ; var i , unit , freeSlots , tmp , timer ; begin
21873: LD_INT 0
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21881: LD_EXP 50
21885: PUSH
21886: LD_EXP 62
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21899: LD_EXP 50
21903: PUSH
21904: LD_EXP 64
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PPUSH
21913: LD_EXP 62
21917: PPUSH
21918: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21922: LD_EXP 62
21926: PPUSH
21927: LD_EXP 50
21931: PPUSH
21932: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21936: LD_INT 3
21938: PPUSH
21939: LD_INT 24
21941: PPUSH
21942: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21946: LD_EXP 54
21950: PPUSH
21951: CALL_OW 305
21955: NOT
21956: PUSH
21957: LD_EXP 55
21961: PPUSH
21962: CALL_OW 305
21966: NOT
21967: AND
21968: IFFALSE 22056
// begin Say ( Kurin , D1a-Kur-1 ) ;
21970: LD_EXP 62
21974: PPUSH
21975: LD_STRING D1a-Kur-1
21977: PPUSH
21978: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21982: LD_EXP 50
21986: PPUSH
21987: LD_STRING D1a-Bur-1
21989: PPUSH
21990: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21994: LD_EXP 62
21998: PPUSH
21999: LD_STRING D1a-Kur-2
22001: PPUSH
22002: CALL_OW 88
// if platonovOpinion <= 1 then
22006: LD_EXP 6
22010: PUSH
22011: LD_INT 1
22013: LESSEQUAL
22014: IFFALSE 22030
// Say ( Kurin , D1a-Kur-2a ) else
22016: LD_EXP 62
22020: PPUSH
22021: LD_STRING D1a-Kur-2a
22023: PPUSH
22024: CALL_OW 88
22028: GO 22042
// Say ( Kurin , D1a-Kur-2b ) ;
22030: LD_EXP 62
22034: PPUSH
22035: LD_STRING D1a-Kur-2b
22037: PPUSH
22038: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
22042: LD_EXP 50
22046: PPUSH
22047: LD_STRING D1a-Bur-2
22049: PPUSH
22050: CALL_OW 88
// end else
22054: GO 22092
// begin Say ( Kurin , D1b-Kur-1 ) ;
22056: LD_EXP 62
22060: PPUSH
22061: LD_STRING D1b-Kur-1
22063: PPUSH
22064: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
22068: LD_EXP 64
22072: PPUSH
22073: LD_STRING D1b-Bel-1
22075: PPUSH
22076: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22080: LD_EXP 62
22084: PPUSH
22085: LD_STRING D1b-Kur-2
22087: PPUSH
22088: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22092: LD_EXP 62
22096: PPUSH
22097: LD_STRING D2-Kur-1
22099: PPUSH
22100: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22104: LD_EXP 50
22108: PPUSH
22109: LD_STRING D2-Bur-1
22111: PPUSH
22112: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22116: LD_EXP 62
22120: PPUSH
22121: LD_STRING D2-Kur-2
22123: PPUSH
22124: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22128: LD_EXP 50
22132: PPUSH
22133: LD_STRING D2-Bur-2
22135: PPUSH
22136: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22140: LD_EXP 62
22144: PPUSH
22145: LD_STRING D2-Kur-3
22147: PPUSH
22148: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22152: LD_INT 1
22154: PPUSH
22155: LD_INT 6
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL_OW 80
// PrepareAmericansMissionIntro ;
22168: CALL 5675 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22172: LD_EXP 84
22176: PPUSH
22177: LD_INT 28
22179: PPUSH
22180: LD_INT 35
22182: PPUSH
22183: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22187: LD_INT 93
22189: PPUSH
22190: LD_INT 36
22192: PPUSH
22193: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22197: LD_INT 93
22199: PPUSH
22200: LD_INT 36
22202: PPUSH
22203: LD_INT 3
22205: PPUSH
22206: LD_INT 9
22208: NEG
22209: PPUSH
22210: CALL_OW 330
// wait ( 0 0$6 ) ;
22214: LD_INT 210
22216: PPUSH
22217: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22221: LD_EXP 63
22225: PPUSH
22226: CALL_OW 85
// wait ( 0 0$1 ) ;
22230: LD_INT 35
22232: PPUSH
22233: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22237: LD_EXP 63
22241: PPUSH
22242: LD_STRING D2-Pop-3
22244: PPUSH
22245: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22249: LD_EXP 50
22253: PUSH
22254: LD_EXP 62
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 87
// wait ( 0 0$1 ) ;
22267: LD_INT 35
22269: PPUSH
22270: CALL_OW 67
// Say ( Kurin , D2-Kur-4 ) ;
22274: LD_EXP 62
22278: PPUSH
22279: LD_STRING D2-Kur-4
22281: PPUSH
22282: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22286: LD_EXP 50
22290: PPUSH
22291: LD_STRING D2-Bur-4
22293: PPUSH
22294: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22298: LD_EXP 62
22302: PPUSH
22303: LD_STRING D2-Kur-5
22305: PPUSH
22306: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22310: LD_EXP 50
22314: PPUSH
22315: LD_STRING D2-Bur-5
22317: PPUSH
22318: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22322: LD_EXP 62
22326: PPUSH
22327: LD_STRING D2-Kur-6
22329: PPUSH
22330: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22334: LD_EXP 51
22338: PPUSH
22339: CALL_OW 305
22343: IFFALSE 22359
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22345: LD_ADDR_EXP 39
22349: PUSH
22350: LD_EXP 39
22354: PUSH
22355: LD_INT 1
22357: MINUS
22358: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22359: LD_EXP 53
22363: PPUSH
22364: CALL_OW 305
22368: IFFALSE 22384
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22370: LD_ADDR_EXP 39
22374: PUSH
22375: LD_EXP 39
22379: PUSH
22380: LD_INT 1
22382: MINUS
22383: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22384: LD_EXP 52
22388: PPUSH
22389: CALL_OW 305
22393: IFFALSE 22409
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22395: LD_ADDR_EXP 39
22399: PUSH
22400: LD_EXP 39
22404: PUSH
22405: LD_INT 1
22407: MINUS
22408: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22409: LD_EXP 39
22413: PPUSH
22414: CALL 7453 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22418: LD_INT 93
22420: PPUSH
22421: LD_INT 36
22423: PPUSH
22424: LD_INT 3
22426: PPUSH
22427: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22431: LD_INT 3
22433: PPUSH
22434: LD_INT 24
22436: PPUSH
22437: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22441: LD_INT 22
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: PPUSH
22470: CALL_OW 122
// wait ( 0 0$1 ) ;
22474: LD_INT 35
22476: PPUSH
22477: CALL_OW 67
// AddComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22481: LD_INT 22
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 21
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 69
22509: PPUSH
22510: LD_EXP 61
22514: PPUSH
22515: CALL_OW 172
// timer := 0 ;
22519: LD_ADDR_VAR 0 6
22523: PUSH
22524: LD_INT 0
22526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22527: LD_INT 35
22529: PPUSH
22530: CALL_OW 67
// timer := timer + 1 ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_VAR 0 6
22543: PUSH
22544: LD_INT 1
22546: PLUS
22547: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
22548: LD_EXP 50
22552: PPUSH
22553: CALL_OW 87
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22557: LD_INT 22
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 21
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL_OW 69
22585: PPUSH
22586: LD_EXP 61
22590: PPUSH
22591: CALL_OW 112
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) or timer > 10 ;
22595: LD_EXP 50
22599: PPUSH
22600: LD_EXP 61
22604: PPUSH
22605: CALL_OW 296
22609: PUSH
22610: LD_INT 6
22612: LESS
22613: PUSH
22614: LD_EXP 50
22618: PPUSH
22619: CALL_OW 314
22623: NOT
22624: OR
22625: PUSH
22626: LD_VAR 0 6
22630: PUSH
22631: LD_INT 10
22633: GREATER
22634: OR
22635: IFFALSE 22527
// InGameOff ;
22637: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22641: LD_STRING M1
22643: PPUSH
22644: CALL_OW 337
// SaveForQuickRestart ;
22648: CALL_OW 22
// counterEnable = true ;
22652: LD_ADDR_EXP 90
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// counterIndex = 1 ;
22660: LD_ADDR_EXP 91
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22668: LD_INT 3
22670: PPUSH
22671: LD_INT 24
22673: PPUSH
22674: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22678: LD_INT 6
22680: PPUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 21
22693: PUSH
22694: LD_INT 3
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 30
22703: PUSH
22704: LD_INT 6
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_INT 3
22727: PPUSH
22728: CALL 8868 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 22
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL 8868 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22786: LD_INT 18
22788: PPUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 21
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 70
22828: PPUSH
22829: LD_INT 17
22831: PPUSH
22832: LD_INT 159
22834: PPUSH
22835: LD_INT 116
22837: PPUSH
22838: LD_INT 0
22840: PPUSH
22841: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22845: LD_INT 18
22847: PPUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 6
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 70
22887: PPUSH
22888: LD_INT 19
22890: PPUSH
22891: LD_INT 161
22893: PPUSH
22894: LD_INT 115
22896: PPUSH
22897: LD_INT 5
22899: PPUSH
22900: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22904: LD_INT 18
22906: PPUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 6
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 21
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 70
22946: PPUSH
22947: LD_EXP 68
22951: PPUSH
22952: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22956: LD_EXP 80
22960: PPUSH
22961: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22965: LD_ADDR_VAR 0 5
22969: PUSH
22970: LD_EXP 80
22974: PUSH
22975: LD_EXP 63
22979: DIFF
22980: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22981: LD_ADDR_VAR 0 4
22985: PUSH
22986: LD_INT 6
22988: PUSH
22989: LD_EXP 70
22993: PPUSH
22994: CALL_OW 313
22998: MINUS
22999: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
23000: LD_EXP 80
23004: PUSH
23005: LD_EXP 63
23009: DIFF
23010: PPUSH
23011: LD_EXP 70
23015: PPUSH
23016: CALL_OW 180
// for i = 1 to tmp do
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: DOUBLE
23026: LD_INT 1
23028: DEC
23029: ST_TO_ADDR
23030: LD_VAR 0 5
23034: PUSH
23035: FOR_TO
23036: IFFALSE 23088
// begin if freeSlots > 0 then
23038: LD_VAR 0 4
23042: PUSH
23043: LD_INT 0
23045: GREATER
23046: IFFALSE 23084
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23048: LD_VAR 0 5
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PPUSH
23059: LD_EXP 70
23063: PPUSH
23064: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_VAR 0 4
23077: PUSH
23078: LD_INT 1
23080: MINUS
23081: ST_TO_ADDR
// end else
23082: GO 23086
// break ;
23084: GO 23088
// end ;
23086: GO 23035
23088: POP
23089: POP
// wait ( 0 0$1 ) ;
23090: LD_INT 35
23092: PPUSH
23093: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23097: LD_VAR 0 5
23101: PPUSH
23102: LD_INT 56
23104: PUSH
23105: EMPTY
23106: LIST
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 60
23113: PUSH
23114: EMPTY
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 72
23129: PPUSH
23130: LD_EXP 68
23134: PPUSH
23135: CALL_OW 120
// ComWalk ( ruScout ) ;
23139: LD_EXP 65
23143: PPUSH
23144: CALL_OW 138
// wait ( 0 0$1 ) ;
23148: LD_INT 35
23150: PPUSH
23151: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23155: LD_EXP 65
23159: PUSH
23160: LD_EXP 63
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: LD_INT 99
23171: PPUSH
23172: LD_INT 37
23174: PPUSH
23175: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23179: LD_EXP 65
23183: PUSH
23184: LD_EXP 63
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: LD_INT 88
23195: PPUSH
23196: LD_INT 60
23198: PPUSH
23199: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23203: LD_EXP 65
23207: PUSH
23208: LD_EXP 63
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PPUSH
23217: LD_INT 129
23219: PPUSH
23220: LD_INT 99
23222: PPUSH
23223: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23227: LD_EXP 63
23231: PUSH
23232: LD_EXP 65
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PPUSH
23241: LD_EXP 68
23245: PPUSH
23246: CALL_OW 180
// end ;
23250: LD_VAR 0 1
23254: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23255: LD_EXP 25
23259: IFFALSE 23531
23261: GO 23263
23263: DISABLE
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23271: LD_ADDR_VAR 0 4
23275: PUSH
23276: LD_VAR 0 4
23280: PUSH
23281: LD_EXP 62
23285: ADD
23286: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23287: LD_ADDR_VAR 0 4
23291: PUSH
23292: LD_VAR 0 4
23296: PUSH
23297: LD_EXP 80
23301: ADD
23302: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23303: LD_ADDR_VAR 0 4
23307: PUSH
23308: LD_VAR 0 4
23312: PUSH
23313: LD_EXP 72
23317: ADD
23318: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23319: LD_ADDR_VAR 0 5
23323: PUSH
23324: LD_INT 18
23326: PPUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 6
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 21
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PPUSH
23351: CALL_OW 70
23355: PUSH
23356: LD_VAR 0 4
23360: DIFF
23361: ST_TO_ADDR
// pom = 6 ;
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_INT 6
23369: ST_TO_ADDR
// if canTakeUnits then
23370: LD_VAR 0 5
23374: IFFALSE 23498
// for i = 1 to canTakeUnits do
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: DOUBLE
23382: LD_INT 1
23384: DEC
23385: ST_TO_ADDR
23386: LD_VAR 0 5
23390: PUSH
23391: FOR_TO
23392: IFFALSE 23496
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23394: LD_VAR 0 5
23398: PUSH
23399: LD_VAR 0 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 257
23409: PUSH
23410: LD_INT 3
23412: NONEQUAL
23413: IFFALSE 23460
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23415: LD_VAR 0 5
23419: PUSH
23420: LD_VAR 0 1
23424: ARRAY
23425: PPUSH
23426: LD_EXP 24
23430: PPUSH
23431: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23435: LD_VAR 0 5
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 183
// wait ( 0 0$1 ) ;
23453: LD_INT 35
23455: PPUSH
23456: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23460: LD_VAR 0 5
23464: PUSH
23465: LD_VAR 0 1
23469: ARRAY
23470: PPUSH
23471: LD_EXP 24
23475: PPUSH
23476: CALL_OW 120
// pom = pom - 1 ;
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: MINUS
23493: ST_TO_ADDR
// end ;
23494: GO 23391
23496: POP
23497: POP
// if pom > 0 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_INT 0
23505: GREATER
23506: IFFALSE 23531
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23508: LD_ADDR_EXP 82
23512: PUSH
23513: LD_EXP 82
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: LD_VAR 0 3
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
// end ;
23531: PPOPN 5
23533: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23534: LD_EXP 75
23538: PUSH
23539: LD_EXP 32
23543: NOT
23544: AND
23545: IFFALSE 23594
23547: GO 23549
23549: DISABLE
// begin enable ;
23550: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23551: LD_EXP 75
23555: PPUSH
23556: LD_EXP 69
23560: PPUSH
23561: LD_INT 2
23563: PPUSH
23564: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23568: LD_EXP 75
23572: PPUSH
23573: LD_EXP 68
23577: PPUSH
23578: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23582: LD_EXP 75
23586: PPUSH
23587: LD_INT 100
23589: PPUSH
23590: CALL_OW 240
// end ;
23594: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23595: LD_INT 78
23597: PPUSH
23598: LD_INT 112
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: CALL_OW 440
23608: IFFALSE 23662
23610: GO 23612
23612: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23613: LD_INT 78
23615: PPUSH
23616: LD_INT 112
23618: PPUSH
23619: CALL_OW 84
// DialogueOn ;
23623: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23627: LD_EXP 50
23631: PPUSH
23632: LD_STRING D2a-Bur-1
23634: PPUSH
23635: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23639: LD_EXP 62
23643: PPUSH
23644: LD_STRING D2a-Kur-1
23646: PPUSH
23647: CALL_OW 94
// DialogueOff ;
23651: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23655: LD_STRING M2
23657: PPUSH
23658: CALL_OW 337
// end ;
23662: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23663: LD_EXP 13
23667: NOT
23668: IFFALSE 23876
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
// begin enable ;
23676: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 23
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 31
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 23
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 69
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23874
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23754: LD_VAR 0 1
23758: PPUSH
23759: LD_INT 48
23761: PPUSH
23762: LD_INT 81
23764: PPUSH
23765: CALL_OW 297
23769: PUSH
23770: LD_INT 7
23772: LESS
23773: IFFALSE 23872
// begin dialog_track = true ;
23775: LD_ADDR_EXP 13
23779: PUSH
23780: LD_INT 1
23782: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23783: LD_INT 48
23785: PPUSH
23786: LD_INT 81
23788: PPUSH
23789: CALL_OW 86
// DialogueOn ;
23793: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23797: LD_EXP 50
23801: PPUSH
23802: LD_STRING D5a-Bur-1
23804: PPUSH
23805: CALL_OW 88
// DialogueOff ;
23809: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23813: LD_INT 82
23815: PPUSH
23816: LD_INT 3
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 0
23826: EQUAL
23827: IFFALSE 23842
// SetTech ( 82 , 3 , state_enabled ) ;
23829: LD_INT 82
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23842: LD_INT 84
23844: PPUSH
23845: LD_INT 3
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23855: LD_INT 16
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: CALL_OW 324
// exit ;
23868: POP
23869: POP
23870: GO 23876
// end ;
23872: GO 23751
23874: POP
23875: POP
// end ;
23876: PPOPN 1
23878: END
// every 5 5$30 do
23879: GO 23881
23881: DISABLE
// begin PrepareScholtze ;
23882: CALL 5462 0 0
// wait ( 0 0$2 ) ;
23886: LD_INT 70
23888: PPUSH
23889: CALL_OW 67
// DialogueOn ;
23893: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23897: LD_EXP 56
23901: PPUSH
23902: LD_STRING D4-Sch-1
23904: PPUSH
23905: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23909: LD_EXP 50
23913: PPUSH
23914: LD_STRING D4-Bur-1
23916: PPUSH
23917: CALL_OW 88
// DialogueOff ;
23921: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23925: LD_STRING M4
23927: PPUSH
23928: CALL_OW 337
// ComHold ( Scholtze ) ;
23932: LD_EXP 56
23936: PPUSH
23937: CALL_OW 140
// scholtzeSpawned = true ;
23941: LD_ADDR_EXP 9
23945: PUSH
23946: LD_INT 1
23948: ST_TO_ADDR
// end ;
23949: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23950: LD_INT 3
23952: PPUSH
23953: LD_EXP 56
23957: PPUSH
23958: CALL_OW 292
23962: PUSH
23963: LD_EXP 9
23967: AND
23968: PUSH
23969: LD_EXP 10
23973: NOT
23974: AND
23975: IFFALSE 24156
23977: GO 23979
23979: DISABLE
// begin scholtzeSaved = true ;
23980: LD_ADDR_EXP 10
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23988: LD_EXP 56
23992: PPUSH
23993: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23997: LD_EXP 56
24001: PPUSH
24002: LD_INT 3
24004: PPUSH
24005: CALL_OW 235
// DialogueOn ;
24009: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
24013: LD_EXP 56
24017: PPUSH
24018: LD_STRING D4a-Sch-1
24020: PPUSH
24021: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
24025: LD_EXP 50
24029: PPUSH
24030: LD_STRING D4a-Bur-1
24032: PPUSH
24033: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
24037: LD_EXP 56
24041: PPUSH
24042: LD_STRING D4a-Sch-2
24044: PPUSH
24045: CALL_OW 88
// DialogueOff ;
24049: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24053: LD_EXP 86
24057: PPUSH
24058: LD_INT 28
24060: PPUSH
24061: LD_INT 36
24063: PPUSH
24064: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24068: LD_STRING MScholtzeOut
24070: PPUSH
24071: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24075: LD_INT 49
24077: PPUSH
24078: LD_INT 3
24080: PPUSH
24081: LD_INT 1
24083: PPUSH
24084: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24088: LD_INT 51
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24101: LD_INT 82
24103: PPUSH
24104: LD_INT 3
24106: PPUSH
24107: CALL_OW 321
24111: PUSH
24112: LD_INT 0
24114: EQUAL
24115: IFFALSE 24130
// SetTech ( 82 , 3 , state_enabled ) ;
24117: LD_INT 82
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24130: LD_INT 83
24132: PPUSH
24133: LD_INT 3
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24143: LD_INT 19
24145: PPUSH
24146: LD_INT 3
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL_OW 324
// end ;
24156: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24157: LD_EXP 56
24161: PPUSH
24162: CALL_OW 305
24166: PUSH
24167: LD_EXP 10
24171: NOT
24172: AND
24173: IFFALSE 24182
24175: GO 24177
24177: DISABLE
// PrepareAmericanPatrol ;
24178: CALL 6398 0 0
24182: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24183: LD_EXP 56
24187: PPUSH
24188: CALL_OW 305
24192: PUSH
24193: LD_EXP 56
24197: PPUSH
24198: CALL_OW 255
24202: PUSH
24203: LD_INT 8
24205: EQUAL
24206: AND
24207: PUSH
24208: LD_EXP 48
24212: PUSH
24213: LD_INT 35
24215: GREATER
24216: AND
24217: IFFALSE 24393
24219: GO 24221
24221: DISABLE
24222: LD_INT 0
24224: PPUSH
24225: PPUSH
// begin enable ;
24226: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24227: LD_ADDR_EXP 48
24231: PUSH
24232: LD_EXP 48
24236: PUSH
24237: LD_INT 35
24239: MINUS
24240: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 25
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: PUSH
24275: FOR_IN
24276: IFFALSE 24315
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24278: LD_VAR 0 1
24282: PPUSH
24283: LD_EXP 56
24287: PPUSH
24288: CALL_OW 250
24292: PPUSH
24293: LD_EXP 56
24297: PPUSH
24298: CALL_OW 251
24302: PPUSH
24303: LD_INT 12
24305: PPUSH
24306: LD_INT 0
24308: PPUSH
24309: CALL 10285 0 5
24313: GO 24275
24315: POP
24316: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 22
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 14
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: PUSH
24351: FOR_IN
24352: IFFALSE 24391
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24354: LD_VAR 0 2
24358: PPUSH
24359: LD_EXP 56
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_EXP 56
24373: PPUSH
24374: CALL_OW 251
24378: PPUSH
24379: LD_INT 12
24381: PPUSH
24382: LD_INT 0
24384: PPUSH
24385: CALL 10285 0 5
24389: GO 24351
24391: POP
24392: POP
// end ;
24393: PPOPN 2
24395: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24396: LD_INT 1
24398: PPUSH
24399: LD_EXP 56
24403: PPUSH
24404: CALL_OW 292
24408: PUSH
24409: LD_EXP 86
24413: AND
24414: PUSH
24415: LD_EXP 10
24419: NOT
24420: AND
24421: IFFALSE 24575
24423: GO 24425
24425: DISABLE
// begin enable ;
24426: ENABLE
// if not IsPlaced ( Scholtze ) then
24427: LD_EXP 56
24431: PPUSH
24432: CALL_OW 305
24436: NOT
24437: IFFALSE 24441
// exit ;
24439: GO 24575
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24441: LD_EXP 86
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: CALL_OW 320
24454: PUSH
24455: LD_EXP 56
24459: EQUAL
24460: PUSH
24461: LD_EXP 86
24465: PUSH
24466: LD_INT 2
24468: ARRAY
24469: PPUSH
24470: CALL_OW 320
24474: PUSH
24475: LD_EXP 56
24479: EQUAL
24480: OR
24481: IFFALSE 24575
// begin DialogueOn ;
24483: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24487: LD_EXP 56
24491: PPUSH
24492: LD_STRING D4b-Sch-1
24494: PPUSH
24495: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24499: LD_EXP 86
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: LD_STRING D4b-Sol1-1
24510: PPUSH
24511: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24515: LD_EXP 86
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: PPUSH
24524: LD_STRING D4b-Sol2-1
24526: PPUSH
24527: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24531: LD_EXP 56
24535: PPUSH
24536: LD_STRING D4b-Sch-2
24538: PPUSH
24539: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24543: LD_EXP 50
24547: PPUSH
24548: LD_STRING D4b-Bur-2
24550: PPUSH
24551: CALL_OW 88
// DialogueOff ;
24555: CALL_OW 7
// Killunit ( Scholtze ) ;
24559: LD_EXP 56
24563: PPUSH
24564: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24568: LD_STRING MScholtzeDel
24570: PPUSH
24571: CALL_OW 337
// end ; end ;
24575: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24576: LD_INT 0
24578: PPUSH
24579: PPUSH
24580: PPUSH
// dialog_workshop = true ;
24581: LD_ADDR_EXP 11
24585: PUSH
24586: LD_INT 1
24588: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24589: LD_INT 22
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 26
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PPUSH
24613: CALL_OW 69
24617: NOT
24618: IFFALSE 25007
// begin CenterNowOnUnits ( building ) ;
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 87
// DialogueOn ;
24629: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24633: LD_EXP 50
24637: PPUSH
24638: LD_STRING D3aa-Bur-1
24640: PPUSH
24641: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24645: LD_EXP 56
24649: PPUSH
24650: CALL_OW 302
24654: PUSH
24655: LD_EXP 56
24659: PPUSH
24660: CALL_OW 255
24664: PUSH
24665: LD_INT 3
24667: EQUAL
24668: AND
24669: IFFALSE 24685
// Say ( Scholtze , D3aa-Sch-1 ) else
24671: LD_EXP 56
24675: PPUSH
24676: LD_STRING D3aa-Sch-1
24678: PPUSH
24679: CALL_OW 88
24683: GO 24991
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 22
24692: PUSH
24693: LD_INT 3
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 25
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 26
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 50
24732: PUSH
24733: EMPTY
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: PUSH
24748: LD_EXP 50
24752: PUSH
24753: LD_EXP 51
24757: PUSH
24758: LD_EXP 53
24762: PUSH
24763: LD_EXP 54
24767: PUSH
24768: LD_EXP 55
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: DIFF
24780: ST_TO_ADDR
// if maleSci then
24781: LD_VAR 0 3
24785: IFFALSE 24805
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: LD_STRING D3aa-Sci1-1
24798: PPUSH
24799: CALL_OW 88
24803: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 26
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 50
24842: PUSH
24843: EMPTY
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: PUSH
24857: LD_EXP 50
24861: PUSH
24862: LD_EXP 51
24866: PUSH
24867: LD_EXP 53
24871: PUSH
24872: LD_EXP 54
24876: PUSH
24877: LD_EXP 55
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: DIFF
24889: ST_TO_ADDR
// if maleOthers then
24890: LD_VAR 0 4
24894: IFFALSE 24914
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24896: LD_VAR 0 4
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_STRING D3aa-Sci1-1
24907: PPUSH
24908: CALL_OW 88
24912: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24914: LD_ADDR_VAR 0 4
24918: PUSH
24919: LD_INT 22
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 21
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 26
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: EMPTY
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: PUSH
24966: LD_EXP 50
24970: PUSH
24971: EMPTY
24972: LIST
24973: DIFF
24974: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24975: LD_VAR 0 4
24979: PUSH
24980: LD_INT 1
24982: ARRAY
24983: PPUSH
24984: LD_STRING D3aa-Sci1-1
24986: PPUSH
24987: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24991: LD_EXP 50
24995: PPUSH
24996: LD_STRING D3aa-Bur-2
24998: PPUSH
24999: CALL_OW 88
// DialogueOff ;
25003: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
25007: LD_STRING M3
25009: PPUSH
25010: CALL_OW 337
// end ;
25014: LD_VAR 0 2
25018: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
25019: LD_EXP 12
25023: NOT
25024: IFFALSE 25362
25026: GO 25028
25028: DISABLE
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
// begin enable ;
25033: ENABLE
// for amUnit in amSupportTroops do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_EXP 85
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25360
// begin if See ( 3 , amUnit ) then
25047: LD_INT 3
25049: PPUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 292
25059: IFFALSE 25358
// begin dialog_amSupportTroops = true ;
25061: LD_ADDR_EXP 12
25065: PUSH
25066: LD_INT 1
25068: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25069: LD_VAR 0 1
25073: PPUSH
25074: CALL_OW 87
// DialogueOn ;
25078: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 22
25089: PUSH
25090: LD_INT 3
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 26
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 50
25119: PUSH
25120: EMPTY
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: PUSH
25134: LD_EXP 50
25138: PUSH
25139: LD_EXP 51
25143: PUSH
25144: LD_EXP 53
25148: PUSH
25149: LD_EXP 54
25153: PUSH
25154: LD_EXP 55
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: DIFF
25166: ST_TO_ADDR
// if randomMale then
25167: LD_VAR 0 2
25171: IFFALSE 25238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25173: LD_INT 22
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 26
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 50
25205: PUSH
25206: EMPTY
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: PPUSH
25220: LD_STRING D3b-RSol1-1
25222: PPUSH
25223: LD_STRING 
25225: PPUSH
25226: LD_INT 0
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL 7034 0 5
25236: GO 25315
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 26
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 50
25275: PUSH
25276: EMPTY
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: LD_EXP 50
25294: PUSH
25295: EMPTY
25296: LIST
25297: DIFF
25298: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25299: LD_VAR 0 2
25303: PUSH
25304: LD_INT 1
25306: ARRAY
25307: PPUSH
25308: LD_STRING D3b-RSol1-1
25310: PPUSH
25311: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25315: LD_EXP 51
25319: PPUSH
25320: CALL_OW 302
25324: IFFALSE 25338
// Say ( Gnyevko , D3b-Gny-1 ) ;
25326: LD_EXP 51
25330: PPUSH
25331: LD_STRING D3b-Gny-1
25333: PPUSH
25334: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25338: LD_EXP 50
25342: PPUSH
25343: LD_STRING D3b-Bur-1
25345: PPUSH
25346: CALL_OW 88
// DialogueOff ;
25350: CALL_OW 7
// exit ;
25354: POP
25355: POP
25356: GO 25362
// end ; end ;
25358: GO 25044
25360: POP
25361: POP
// end ;
25362: PPOPN 2
25364: END
// every 2 2$0 trigger dialog_amSupportTroops do
25365: LD_EXP 12
25369: IFFALSE 25453
25371: GO 25373
25373: DISABLE
// begin if IsOK ( Kovalyuk ) then
25374: LD_EXP 53
25378: PPUSH
25379: CALL_OW 302
25383: IFFALSE 25397
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25385: LD_EXP 53
25389: PPUSH
25390: LD_STRING D3b-Kov-1
25392: PPUSH
25393: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25397: LD_INT 22
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 21
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 26
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: PPUSH
25432: CALL_OW 69
25436: PPUSH
25437: LD_STRING D3b-RSol1-2
25439: PPUSH
25440: LD_STRING 
25442: PPUSH
25443: LD_INT 0
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL 7034 0 5
// end ;
25453: END
// every 1 trigger not endCutscene do
25454: LD_EXP 32
25458: NOT
25459: IFFALSE 25477
25461: GO 25463
25463: DISABLE
// begin enable ;
25464: ENABLE
// SetLives ( Kurin , 1000 ) ;
25465: LD_EXP 62
25469: PPUSH
25470: LD_INT 1000
25472: PPUSH
25473: CALL_OW 234
// end ;
25477: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25478: LD_EXP 41
25482: PUSH
25483: LD_INT 35
25485: LESS
25486: IFFALSE 25714
25488: GO 25490
25490: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25491: LD_EXP 62
25495: PPUSH
25496: CALL_OW 87
// InGameOn ;
25500: CALL_OW 8
// DialogueOn ;
25504: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25508: LD_EXP 62
25512: PPUSH
25513: LD_STRING D5-Kur-1
25515: PPUSH
25516: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25520: LD_STRING QVehicles
25522: PPUSH
25523: CALL_OW 97
25527: PUSH
25528: LD_INT 1
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25579
25536: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25537: LD_EXP 50
25541: PPUSH
25542: LD_STRING D6a-Bur-1
25544: PPUSH
25545: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25549: LD_EXP 62
25553: PPUSH
25554: LD_STRING D6a-Kur-1
25556: PPUSH
25557: CALL_OW 94
// meetNearOmicronBase = true ;
25561: LD_ADDR_EXP 22
25565: PUSH
25566: LD_INT 1
25568: ST_TO_ADDR
// kurinCheckVehicles = true ;
25569: LD_ADDR_EXP 21
25573: PUSH
25574: LD_INT 1
25576: ST_TO_ADDR
// end ; 2 :
25577: GO 25706
25579: LD_INT 2
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25634
25587: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25588: LD_EXP 50
25592: PPUSH
25593: LD_STRING D6b-Bur-1
25595: PPUSH
25596: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25600: LD_EXP 62
25604: PPUSH
25605: LD_STRING D6b-Kur-1
25607: PPUSH
25608: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25612: LD_EXP 50
25616: PPUSH
25617: LD_STRING D6b-Bur-2
25619: PPUSH
25620: CALL_OW 88
// meetNearOmicronBase = true ;
25624: LD_ADDR_EXP 22
25628: PUSH
25629: LD_INT 1
25631: ST_TO_ADDR
// end ; 3 :
25632: GO 25706
25634: LD_INT 3
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25705
25642: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25643: LD_EXP 50
25647: PPUSH
25648: LD_STRING D6c-Bur-1
25650: PPUSH
25651: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25655: LD_EXP 62
25659: PPUSH
25660: LD_STRING D6c-Kur-1
25662: PPUSH
25663: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25667: LD_EXP 50
25671: PPUSH
25672: LD_STRING D6c-Bur-2
25674: PPUSH
25675: CALL_OW 88
// kurinGiveMoreTime = true ;
25679: LD_ADDR_EXP 16
25683: PUSH
25684: LD_INT 1
25686: ST_TO_ADDR
// kurinOpinion = 0 ;
25687: LD_ADDR_EXP 5
25691: PUSH
25692: LD_INT 0
25694: ST_TO_ADDR
// counterIndex = 4 ;
25695: LD_ADDR_EXP 91
25699: PUSH
25700: LD_INT 4
25702: ST_TO_ADDR
// end ; end ;
25703: GO 25706
25705: POP
// InGameOff ;
25706: CALL_OW 9
// DialogueOff ;
25710: CALL_OW 7
// end ;
25714: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25715: LD_EXP 17
25719: PUSH
25720: LD_INT 35
25722: LESS
25723: PUSH
25724: LD_EXP 16
25728: AND
25729: IFFALSE 25762
25731: GO 25733
25733: DISABLE
// begin DialogueOn ;
25734: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25738: LD_EXP 62
25742: PPUSH
25743: LD_STRING D6c-Kur-2
25745: PPUSH
25746: CALL_OW 94
// DialogueOff ;
25750: CALL_OW 7
// meetNearOmicronBase = true ;
25754: LD_ADDR_EXP 22
25758: PUSH
25759: LD_INT 1
25761: ST_TO_ADDR
// end ;
25762: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25763: LD_EXP 22
25767: IFFALSE 26422
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
// begin mechs = [ ] ;
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: EMPTY
25785: ST_TO_ADDR
// vehs = [ ] ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: EMPTY
25792: ST_TO_ADDR
// haveVehs = 0 ;
25793: LD_ADDR_VAR 0 5
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// uc_side = 6 ;
25801: LD_ADDR_OWVAR 20
25805: PUSH
25806: LD_INT 6
25808: ST_TO_ADDR
// uc_nation = 3 ;
25809: LD_ADDR_OWVAR 21
25813: PUSH
25814: LD_INT 3
25816: ST_TO_ADDR
// for i := 1 to 2 do
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: DOUBLE
25823: LD_INT 1
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 2
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25930
// begin PrepareMechanic ( false , 2 ) ;
25833: LD_INT 0
25835: PPUSH
25836: LD_INT 2
25838: PPUSH
25839: CALL_OW 383
// mech = CreateHuman ;
25843: LD_ADDR_VAR 0 2
25847: PUSH
25848: CALL_OW 44
25852: ST_TO_ADDR
// mechs = mechs ^ mech ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 3
25862: PUSH
25863: LD_VAR 0 2
25867: ADD
25868: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_EXP 68
25878: PPUSH
25879: CALL_OW 52
// ComExitBuilding ( mech ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 122
// wait ( 0 0$1 ) ;
25892: LD_INT 35
25894: PPUSH
25895: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25899: LD_VAR 0 2
25903: PPUSH
25904: LD_EXP 61
25908: PPUSH
25909: CALL_OW 250
25913: PPUSH
25914: LD_EXP 61
25918: PPUSH
25919: CALL_OW 251
25923: PPUSH
25924: CALL_OW 171
// end ;
25928: GO 25830
25930: POP
25931: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25932: LD_INT 22
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 23
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 69
25971: PUSH
25972: LD_INT 22
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 21
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 69
26000: EQUAL
26001: IFFALSE 26011
// produceOnlyForYou = true ;
26003: LD_ADDR_EXP 20
26007: PUSH
26008: LD_INT 1
26010: ST_TO_ADDR
// wait ( 0 0$20 ) ;
26011: LD_INT 700
26013: PPUSH
26014: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
26018: LD_INT 22
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 3
26050: PUSH
26051: LD_INT 34
26053: PUSH
26054: LD_INT 51
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_INT 3
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 21
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: PUSH
26105: LD_INT 2
26107: PLUS
26108: GREATEREQUAL
26109: IFFALSE 26392
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26111: LD_ADDR_VAR 0 4
26115: PUSH
26116: LD_VAR 0 4
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 23
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 34
26156: PUSH
26157: LD_INT 51
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 59
26173: PUSH
26174: EMPTY
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: PPUSH
26188: CALL_OW 69
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: ADD
26197: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26198: LD_ADDR_VAR 0 4
26202: PUSH
26203: LD_VAR 0 4
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 23
26230: PUSH
26231: LD_INT 3
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: LD_INT 34
26243: PUSH
26244: LD_INT 51
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 59
26260: PUSH
26261: EMPTY
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: PUSH
26280: LD_INT 2
26282: ARRAY
26283: ADD
26284: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26285: LD_ADDR_EXP 77
26289: PUSH
26290: LD_EXP 77
26294: PUSH
26295: LD_VAR 0 4
26299: ADD
26300: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26301: LD_VAR 0 4
26305: PPUSH
26306: LD_INT 6
26308: PPUSH
26309: CALL_OW 235
// produceMoreVehicles = true ;
26313: LD_ADDR_EXP 19
26317: PUSH
26318: LD_INT 1
26320: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26321: LD_VAR 0 3
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 4
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: PPUSH
26339: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26343: LD_VAR 0 3
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: PPUSH
26352: LD_VAR 0 4
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: PPUSH
26361: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26365: LD_EXP 21
26369: PUSH
26370: LD_EXP 5
26374: PUSH
26375: LD_INT 0
26377: EQUAL
26378: NOT
26379: AND
26380: IFFALSE 26390
// kurinOpinion = 1 ;
26382: LD_ADDR_EXP 5
26386: PUSH
26387: LD_INT 1
26389: ST_TO_ADDR
// end else
26390: GO 26422
// begin if kurinCheckVehicles then
26392: LD_EXP 21
26396: IFFALSE 26422
// begin DialogueOn ;
26398: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26402: LD_EXP 62
26406: PPUSH
26407: LD_STRING D6d-Kur-1
26409: PPUSH
26410: CALL_OW 94
// DialogueOff ;
26414: CALL_OW 7
// Lose_Vehicles ;
26418: CALL 20199 0 0
// end ; end ; end ;
26422: PPOPN 5
26424: END
// every 0 0$1 trigger meetNearOmicronBase do
26425: LD_EXP 22
26429: IFFALSE 26649
26431: GO 26433
26433: DISABLE
// begin spawnCrates = false ;
26434: LD_ADDR_EXP 8
26438: PUSH
26439: LD_INT 0
26441: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26442: LD_INT 6
26444: PPUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 2
26450: PPUSH
26451: LD_INT 1
26453: PPUSH
26454: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26458: LD_INT 0
26460: PPUSH
26461: LD_INT 3
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26471: LD_STRING M3a
26473: PPUSH
26474: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26478: LD_STRING M5
26480: PPUSH
26481: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26485: LD_INT 15
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26495: LD_EXP 77
26499: PPUSH
26500: LD_INT 75
26502: PPUSH
26503: LD_INT 38
26505: PPUSH
26506: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26510: LD_EXP 76
26514: PPUSH
26515: LD_INT 75
26517: PPUSH
26518: LD_INT 38
26520: PPUSH
26521: CALL_OW 111
// counterIndex = 2 ;
26525: LD_ADDR_EXP 91
26529: PUSH
26530: LD_INT 2
26532: ST_TO_ADDR
// if not kurinOpinion = 0 then
26533: LD_EXP 5
26537: PUSH
26538: LD_INT 0
26540: EQUAL
26541: NOT
26542: IFFALSE 26552
// kurinOpinion = 1 ;
26544: LD_ADDR_EXP 5
26548: PUSH
26549: LD_INT 1
26551: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26552: LD_INT 1
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: LD_INT 22
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 21
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: PPUSH
26587: LD_INT 13
26589: PPUSH
26590: LD_INT 28
26592: PPUSH
26593: LD_INT 17
26595: PPUSH
26596: LD_INT 29
26598: PPUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 3
26604: PUSH
26605: LD_INT 4
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: LD_OWVAR 67
26617: ARRAY
26618: PPUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 4
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: LD_OWVAR 67
26637: ARRAY
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: LD_INT 0
26644: PPUSH
26645: CALL 12165 0 11
// end ;
26649: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26650: LD_EXP 18
26654: PUSH
26655: LD_INT 35
26657: LESS
26658: PUSH
26659: LD_EXP 91
26663: PUSH
26664: LD_INT 2
26666: EQUAL
26667: AND
26668: IFFALSE 26717
26670: GO 26672
26672: DISABLE
// begin DialogueOn ;
26673: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26677: LD_EXP 62
26681: PPUSH
26682: LD_STRING D7a-Kur-1
26684: PPUSH
26685: CALL_OW 94
// DialogueOff ;
26689: CALL_OW 7
// counterIndex = 3 ;
26693: LD_ADDR_EXP 91
26697: PUSH
26698: LD_INT 3
26700: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26701: LD_ADDR_EXP 18
26705: PUSH
26706: LD_INT 4200
26708: ST_TO_ADDR
// kurinOpinion = 0 ;
26709: LD_ADDR_EXP 5
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// end ;
26717: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26718: LD_EXP 18
26722: PUSH
26723: LD_INT 35
26725: LESS
26726: PUSH
26727: LD_EXP 91
26731: PUSH
26732: LD_INT 3
26734: EQUAL
26735: AND
26736: IFFALSE 26745
26738: GO 26740
26740: DISABLE
// Lose_Delay ;
26741: CALL 20229 0 0
26745: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26746: LD_EXP 22
26750: PUSH
26751: LD_INT 15
26753: PPUSH
26754: LD_INT 22
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 21
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 71
26782: PUSH
26783: LD_INT 0
26785: EQUAL
26786: AND
26787: IFFALSE 26875
26789: GO 26791
26791: DISABLE
// begin counterEnable = false ;
26792: LD_ADDR_EXP 90
26796: PUSH
26797: LD_INT 0
26799: ST_TO_ADDR
// Display_strings = [ ] ;
26800: LD_ADDR_OWVAR 47
26804: PUSH
26805: EMPTY
26806: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26807: LD_INT 15
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 424
// canExitBattlefield = false ;
26817: LD_ADDR_EXP 27
26821: PUSH
26822: LD_INT 0
26824: ST_TO_ADDR
// DialogueOn ;
26825: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26829: LD_EXP 50
26833: PPUSH
26834: LD_STRING D7-Bur-1
26836: PPUSH
26837: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26841: LD_EXP 62
26845: PPUSH
26846: LD_STRING D7-Kur-1
26848: PPUSH
26849: CALL_OW 94
// DialogueOff ;
26853: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26857: LD_STRING M5a
26859: PPUSH
26860: CALL_OW 337
// Query ( QRefuel ) ;
26864: LD_STRING QRefuel
26866: PPUSH
26867: CALL_OW 97
// KirovAttackOmicron ;
26871: CALL 17955 0 0
// end ;
26875: END
// every 1 trigger not canExitBattlefield do var unit ;
26876: LD_EXP 27
26880: NOT
26881: IFFALSE 27050
26883: GO 26885
26885: DISABLE
26886: LD_INT 0
26888: PPUSH
// begin enable ;
26889: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: PUSH
26942: FOR_IN
26943: IFFALSE 27048
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_INT 26
26952: PPUSH
26953: CALL_OW 308
26957: NOT
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_INT 21
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 72
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 313
26988: OR
26989: AND
26990: IFFALSE 27046
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_INT 26
26999: PPUSH
27000: CALL_OW 113
// if not dialog_stop then
27004: LD_EXP 14
27008: NOT
27009: IFFALSE 27046
// begin dialog_stop = true ;
27011: LD_ADDR_EXP 14
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27019: LD_EXP 62
27023: PPUSH
27024: LD_STRING D12-Kur-1
27026: PPUSH
27027: CALL_OW 88
// wait ( 0 0$5 ) ;
27031: LD_INT 175
27033: PPUSH
27034: CALL_OW 67
// dialog_stop = false ;
27038: LD_ADDR_EXP 14
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// end ; end ;
27046: GO 26942
27048: POP
27049: POP
// end ;
27050: PPOPN 1
27052: END
// every 1 do var unit ;
27053: GO 27055
27055: DISABLE
27056: LD_INT 0
27058: PPUSH
// begin enable ;
27059: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 21
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 21
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: PUSH
27112: FOR_IN
27113: IFFALSE 27188
// if IsInArea ( unit , SecondKurinBase ) then
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_INT 20
27122: PPUSH
27123: CALL_OW 308
27127: IFFALSE 27186
// begin ComMoveXY ( unit , 200 , 114 ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: LD_INT 200
27136: PPUSH
27137: LD_INT 114
27139: PPUSH
27140: CALL_OW 111
// if not dialog_stop then
27144: LD_EXP 14
27148: NOT
27149: IFFALSE 27186
// begin dialog_stop = true ;
27151: LD_ADDR_EXP 14
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27159: LD_EXP 62
27163: PPUSH
27164: LD_STRING D12-Kur-1
27166: PPUSH
27167: CALL_OW 88
// wait ( 0 0$5 ) ;
27171: LD_INT 175
27173: PPUSH
27174: CALL_OW 67
// dialog_stop = false ;
27178: LD_ADDR_EXP 14
27182: PUSH
27183: LD_INT 0
27185: ST_TO_ADDR
// end ; end ;
27186: GO 27112
27188: POP
27189: POP
// end ;
27190: PPOPN 1
27192: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27193: LD_EXP 22
27197: NOT
27198: PUSH
27199: LD_INT 290
27201: PPUSH
27202: CALL_OW 302
27206: AND
27207: IFFALSE 27717
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
// begin enable ;
27221: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_INT 13
27229: PPUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: LD_INT 21
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 21
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 21
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 70
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27715
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: LD_INT 21
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 21
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PPUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 74
27352: PPUSH
27353: CALL_OW 296
27357: PUSH
27358: LD_INT 17
27360: LESS
27361: IFFALSE 27713
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 50
27380: PUSH
27381: EMPTY
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 21
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: PPUSH
27417: CALL_OW 69
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: CALL_OW 74
27431: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27432: LD_ADDR_VAR 0 4
27436: PUSH
27437: LD_VAR 0 6
27441: PPUSH
27442: LD_EXP 49
27446: PUSH
27447: LD_INT 1
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: LD_EXP 49
27459: PUSH
27460: LD_INT 1
27462: ARRAY
27463: PUSH
27464: LD_INT 2
27466: ARRAY
27467: PPUSH
27468: CALL_OW 297
27472: ST_TO_ADDR
// index = 1 ;
27473: LD_ADDR_VAR 0 7
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27481: LD_ADDR_VAR 0 1
27485: PUSH
27486: DOUBLE
27487: LD_INT 2
27489: DEC
27490: ST_TO_ADDR
27491: LD_EXP 49
27495: PUSH
27496: FOR_TO
27497: IFFALSE 27578
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: LD_VAR 0 6
27508: PPUSH
27509: LD_EXP 49
27513: PUSH
27514: LD_VAR 0 1
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: PPUSH
27524: LD_EXP 49
27528: PUSH
27529: LD_VAR 0 1
27533: ARRAY
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 297
27543: ST_TO_ADDR
// if tmpDist < currentDist then
27544: LD_VAR 0 5
27548: PUSH
27549: LD_VAR 0 4
27553: LESS
27554: IFFALSE 27576
// begin index = i ;
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: LD_VAR 0 1
27565: ST_TO_ADDR
// currentDist = tmpDist ;
27566: LD_ADDR_VAR 0 4
27570: PUSH
27571: LD_VAR 0 5
27575: ST_TO_ADDR
// end ; end ;
27576: GO 27496
27578: POP
27579: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27580: LD_VAR 0 6
27584: PPUSH
27585: LD_EXP 49
27589: PUSH
27590: LD_VAR 0 7
27594: ARRAY
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_EXP 49
27604: PUSH
27605: LD_VAR 0 7
27609: ARRAY
27610: PUSH
27611: LD_INT 2
27613: ARRAY
27614: PPUSH
27615: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_INT 1
27626: PPUSH
27627: LD_INT 2
27629: PPUSH
27630: CALL_OW 12
27634: ST_TO_ADDR
// if not dialog_stop then
27635: LD_EXP 14
27639: NOT
27640: IFFALSE 27713
// begin dialog_stop = true ;
27642: LD_ADDR_EXP 14
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 1
27657: EQUAL
27658: PUSH
27659: LD_EXP 51
27663: PPUSH
27664: CALL_OW 302
27668: NOT
27669: OR
27670: IFFALSE 27686
// SayRadio ( Kurin , D11-Kur-1 ) else
27672: LD_EXP 62
27676: PPUSH
27677: LD_STRING D11-Kur-1
27679: PPUSH
27680: CALL_OW 94
27684: GO 27698
// Say ( Gnyevko , D11-Gny-1 ) ;
27686: LD_EXP 51
27690: PPUSH
27691: LD_STRING D11-Gny-1
27693: PPUSH
27694: CALL_OW 88
// wait ( 0 0$5 ) ;
27698: LD_INT 175
27700: PPUSH
27701: CALL_OW 67
// dialog_stop = false ;
27705: LD_ADDR_EXP 14
27709: PUSH
27710: LD_INT 0
27712: ST_TO_ADDR
// end ; end ;
27713: GO 27288
27715: POP
27716: POP
// end ;
27717: PPOPN 7
27719: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
27720: LD_INT 290
27722: PPUSH
27723: CALL_OW 301
27727: PUSH
27728: LD_INT 22
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 21
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PPUSH
27752: CALL_OW 69
27756: PUSH
27757: LD_INT 5
27759: LESS
27760: AND
27761: IFFALSE 31058
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// begin omicronSurrender = true ;
27777: LD_ADDR_EXP 26
27781: PUSH
27782: LD_INT 1
27784: ST_TO_ADDR
// canExitBattlefield = true ;
27785: LD_ADDR_EXP 27
27789: PUSH
27790: LD_INT 1
27792: ST_TO_ADDR
// enableOmicronAI = false ;
27793: LD_ADDR_EXP 30
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// endCutscene = true ;
27801: LD_ADDR_EXP 32
27805: PUSH
27806: LD_INT 1
27808: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27809: LD_INT 1
27811: PPUSH
27812: LD_INT 3
27814: PPUSH
27815: LD_INT 1
27817: PPUSH
27818: LD_INT 0
27820: PPUSH
27821: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27825: LD_INT 2
27827: PPUSH
27828: LD_INT 3
27830: PPUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_INT 1
27836: PPUSH
27837: CALL_OW 80
// if not IsOk ( beriaBase ) or not beriaBase then
27841: LD_EXP 60
27845: PPUSH
27846: CALL_OW 302
27850: NOT
27851: PUSH
27852: LD_EXP 60
27856: NOT
27857: OR
27858: IFFALSE 27926
// beriaBase = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ b_warehouse ] ] ] ) [ 1 ] ;
27860: LD_ADDR_EXP 60
27864: PUSH
27865: LD_INT 25
27867: PPUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 21
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 70
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
27926: LD_EXP 50
27930: PPUSH
27931: CALL_OW 87
// uc_side = 1 ;
27935: LD_ADDR_OWVAR 20
27939: PUSH
27940: LD_INT 1
27942: ST_TO_ADDR
// uc_nation = 1 ;
27943: LD_ADDR_OWVAR 21
27947: PUSH
27948: LD_INT 1
27950: ST_TO_ADDR
// hc_name :=  ;
27951: LD_ADDR_OWVAR 26
27955: PUSH
27956: LD_STRING 
27958: ST_TO_ADDR
// hc_gallery =  ;
27959: LD_ADDR_OWVAR 33
27963: PUSH
27964: LD_STRING 
27966: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27967: LD_INT 1
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: CALL_OW 381
// tmpUs = CreateHuman ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: CALL_OW 44
27986: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27987: LD_INT 22
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: PPUSH
28002: CALL_OW 141
// InGameOn ;
28006: CALL_OW 8
// DialogueOn ;
28010: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
28014: LD_INT 26
28016: PPUSH
28017: LD_INT 33
28019: PPUSH
28020: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
28024: LD_VAR 0 2
28028: PPUSH
28029: LD_STRING D8-Sol1-1
28031: PPUSH
28032: CALL_OW 94
// if IsOk ( Kovalyuk ) then
28036: LD_EXP 53
28040: PPUSH
28041: CALL_OW 302
28045: IFFALSE 28059
// Say ( Kovalyuk , D8-Kov-1 ) ;
28047: LD_EXP 53
28051: PPUSH
28052: LD_STRING D8-Kov-1
28054: PPUSH
28055: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: LD_INT 22
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 21
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 26
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: PPUSH
28104: LD_STRING D8-RSol1-1
28106: PPUSH
28107: LD_STRING 
28109: PPUSH
28110: LD_INT 0
28112: PPUSH
28113: LD_INT 0
28115: PPUSH
28116: CALL 7034 0 5
28120: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
28121: LD_EXP 51
28125: PPUSH
28126: CALL_OW 302
28130: IFFALSE 28144
// Say ( Gnyevko , D8-Gny-1 ) ;
28132: LD_EXP 51
28136: PPUSH
28137: LD_STRING D8-Gny-1
28139: PPUSH
28140: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28144: LD_INT 22
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 21
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 26
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: PUSH
28184: LD_VAR 0 3
28188: DIFF
28189: PPUSH
28190: LD_STRING D8-RSol2-1
28192: PPUSH
28193: LD_STRING 
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: LD_INT 0
28201: PPUSH
28202: CALL 7034 0 5
// DialogueOff ;
28206: CALL_OW 7
// PrepareArabian ;
28210: CALL 6556 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28214: LD_INT 234
28216: PPUSH
28217: LD_INT 122
28219: PPUSH
28220: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28224: LD_EXP 88
28228: PPUSH
28229: LD_INT 221
28231: PPUSH
28232: LD_INT 110
28234: PPUSH
28235: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28239: LD_EXP 89
28243: PPUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 72
28258: PPUSH
28259: LD_INT 221
28261: PPUSH
28262: LD_INT 110
28264: PPUSH
28265: CALL_OW 114
// wait ( 0 0$7 ) ;
28269: LD_INT 245
28271: PPUSH
28272: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28276: LD_EXP 89
28280: PPUSH
28281: LD_INT 221
28283: PPUSH
28284: LD_INT 110
28286: PPUSH
28287: CALL_OW 174
// wait ( 0 0$8 ) ;
28291: LD_INT 280
28293: PPUSH
28294: CALL_OW 67
// music_nat = nation_arabian ;
28298: LD_ADDR_OWVAR 71
28302: PUSH
28303: LD_INT 2
28305: ST_TO_ADDR
// music_class = music_combat ;
28306: LD_ADDR_OWVAR 72
28310: PUSH
28311: LD_INT 1
28313: ST_TO_ADDR
// game_speed = 4 ;
28314: LD_ADDR_OWVAR 65
28318: PUSH
28319: LD_INT 4
28321: ST_TO_ADDR
// DialogueOn ;
28322: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28326: LD_EXP 83
28330: PPUSH
28331: LD_STRING D9-Gri-1
28333: PPUSH
28334: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28338: LD_EXP 62
28342: PPUSH
28343: LD_STRING D9-Kur-1
28345: PPUSH
28346: CALL_OW 94
// DialogueOff ;
28350: CALL_OW 7
// CenterOnXY ( 221 , 109 ) ;
28354: LD_INT 221
28356: PPUSH
28357: LD_INT 109
28359: PPUSH
28360: CALL_OW 84
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28364: LD_EXP 79
28368: PPUSH
28369: LD_INT 25
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 72
28383: PPUSH
28384: LD_INT 158
28386: PPUSH
28387: LD_INT 105
28389: PPUSH
28390: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28394: LD_EXP 79
28398: PPUSH
28399: LD_INT 25
28401: PUSH
28402: LD_INT 4
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 72
28413: PPUSH
28414: LD_INT 158
28416: PPUSH
28417: LD_INT 105
28419: PPUSH
28420: CALL_OW 111
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28424: LD_EXP 75
28428: PPUSH
28429: LD_INT 158
28431: PPUSH
28432: LD_INT 105
28434: PPUSH
28435: CALL_OW 111
// if not beriaDepot then
28439: LD_EXP 61
28443: NOT
28444: IFFALSE 28514
// begin AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , EndMissionMeetArea ) ;
28446: LD_EXP 79
28450: PPUSH
28451: LD_INT 25
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: PPUSH
28466: LD_INT 32
28468: PPUSH
28469: CALL_OW 173
// AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , EndMissionMeetArea ) ;
28473: LD_EXP 79
28477: PPUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: PPUSH
28493: LD_INT 32
28495: PPUSH
28496: CALL_OW 173
// AddComMoveToArea ( kirovTransportCargo , EndMissionMeetArea ) ;
28500: LD_EXP 75
28504: PPUSH
28505: LD_INT 32
28507: PPUSH
28508: CALL_OW 173
// end else
28512: GO 28631
// begin AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28514: LD_EXP 79
28518: PPUSH
28519: LD_INT 25
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 72
28533: PPUSH
28534: LD_EXP 61
28538: PPUSH
28539: CALL_OW 250
28543: PPUSH
28544: LD_EXP 61
28548: PPUSH
28549: CALL_OW 251
28553: PPUSH
28554: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28558: LD_EXP 79
28562: PPUSH
28563: LD_INT 25
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PPUSH
28573: CALL_OW 72
28577: PPUSH
28578: LD_EXP 61
28582: PPUSH
28583: CALL_OW 250
28587: PPUSH
28588: LD_EXP 61
28592: PPUSH
28593: CALL_OW 251
28597: PPUSH
28598: CALL_OW 171
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28602: LD_EXP 75
28606: PPUSH
28607: LD_EXP 61
28611: PPUSH
28612: CALL_OW 250
28616: PPUSH
28617: LD_EXP 61
28621: PPUSH
28622: CALL_OW 251
28626: PPUSH
28627: CALL_OW 171
// end ; wait ( 0 0$2.5 ) ;
28631: LD_INT 88
28633: PPUSH
28634: CALL_OW 67
// DialogueOn ;
28638: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28642: LD_EXP 83
28646: PPUSH
28647: LD_STRING D9-Gri-2
28649: PPUSH
28650: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28654: LD_EXP 62
28658: PPUSH
28659: LD_STRING D9-Kur-2
28661: PPUSH
28662: CALL_OW 94
// DialogueOff ;
28666: CALL_OW 7
// repeat wait ( 1 ) ;
28670: LD_INT 1
28672: PPUSH
28673: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28677: LD_EXP 83
28681: PPUSH
28682: CALL_OW 256
28686: PUSH
28687: LD_INT 1000
28689: LESS
28690: IFFALSE 28670
// DialogueOn ;
28692: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28696: LD_EXP 83
28700: PPUSH
28701: LD_STRING D9-Gri-3
28703: PPUSH
28704: CALL_OW 94
// DialogueOff ;
28708: CALL_OW 7
// KillUnit ( Grishko ) ;
28712: LD_EXP 83
28716: PPUSH
28717: CALL_OW 66
// wait ( 0 0$12 ) ;
28721: LD_INT 420
28723: PPUSH
28724: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28728: LD_EXP 62
28732: PPUSH
28733: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28737: LD_EXP 62
28741: PPUSH
28742: LD_STRING D9-Kur-3
28744: PPUSH
28745: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28749: LD_INT 176
28751: PPUSH
28752: LD_INT 110
28754: PPUSH
28755: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28759: LD_EXP 89
28763: PPUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 72
28778: PPUSH
28779: LD_INT 221
28781: PPUSH
28782: LD_INT 110
28784: PPUSH
28785: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28789: LD_EXP 88
28793: PPUSH
28794: LD_INT 161
28796: PPUSH
28797: LD_INT 109
28799: PPUSH
28800: CALL_OW 114
// wait ( 0 0$7 ) ;
28804: LD_INT 245
28806: PPUSH
28807: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28811: LD_EXP 89
28815: PPUSH
28816: LD_INT 161
28818: PPUSH
28819: LD_INT 109
28821: PPUSH
28822: CALL_OW 114
// wait ( 0 0$11 ) ;
28826: LD_INT 385
28828: PPUSH
28829: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28833: LD_EXP 62
28837: PPUSH
28838: LD_EXP 68
28842: PPUSH
28843: CALL_OW 120
// DialogueOn ;
28847: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28851: LD_EXP 62
28855: PPUSH
28856: LD_STRING D9a-Kur-1
28858: PPUSH
28859: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28863: LD_EXP 50
28867: PPUSH
28868: LD_STRING D9a-Bur-1
28870: PPUSH
28871: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28875: LD_EXP 62
28879: PPUSH
28880: LD_STRING D9a-Kur-2
28882: PPUSH
28883: CALL_OW 94
// DialogueOff ;
28887: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28891: LD_EXP 80
28895: PPUSH
28896: CALL_OW 122
// wait ( 0 0$1 ) ;
28900: LD_INT 35
28902: PPUSH
28903: CALL_OW 67
// if not beriaBase then
28907: LD_EXP 60
28911: NOT
28912: IFFALSE 28928
// ComMoveToArea ( survivorsArabianAttack , EndMissionMeetArea ) else
28914: LD_EXP 80
28918: PPUSH
28919: LD_INT 32
28921: PPUSH
28922: CALL_OW 113
28926: GO 28957
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28928: LD_EXP 80
28932: PPUSH
28933: LD_EXP 61
28937: PPUSH
28938: CALL_OW 250
28942: PPUSH
28943: LD_EXP 61
28947: PPUSH
28948: CALL_OW 251
28952: PPUSH
28953: CALL_OW 111
// immortalSurvivors = true ;
28957: LD_ADDR_EXP 28
28961: PUSH
28962: LD_INT 1
28964: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 21
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 50
28992: PUSH
28993: EMPTY
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29020
// RemoveUnit ( tmpUS ) ;
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 64
29018: GO 29006
29020: POP
29021: POP
// repeat wait ( 0 0$1 ) ;
29022: LD_INT 35
29024: PPUSH
29025: CALL_OW 67
// until IsDead ( Kurin ) ;
29029: LD_EXP 62
29033: PPUSH
29034: CALL_OW 301
29038: IFFALSE 29022
// wait ( 0 0$1 ) ;
29040: LD_INT 35
29042: PPUSH
29043: CALL_OW 67
// nearTurrets = [ ] ;
29047: LD_ADDR_VAR 0 8
29051: PUSH
29052: EMPTY
29053: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_INT 6
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 32
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 50
29081: PUSH
29082: EMPTY
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 69
29094: ST_TO_ADDR
// for i = 1 to 2 do
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: DOUBLE
29101: LD_INT 1
29103: DEC
29104: ST_TO_ADDR
29105: LD_INT 2
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29240
// begin nearTurrets = nearTurrets ^ NearestUnitToXY ( turrets , 129 , 99 ) ;
29111: LD_ADDR_VAR 0 8
29115: PUSH
29116: LD_VAR 0 8
29120: PUSH
29121: LD_VAR 0 7
29125: PPUSH
29126: LD_INT 129
29128: PPUSH
29129: LD_INT 99
29131: PPUSH
29132: CALL_OW 73
29136: ADD
29137: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: LD_VAR 0 7
29147: PUSH
29148: LD_VAR 0 8
29152: DIFF
29153: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: LD_VAR 0 8
29163: PUSH
29164: LD_VAR 0 1
29168: ARRAY
29169: PPUSH
29170: CALL_OW 313
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29179: LD_VAR 0 3
29183: PPUSH
29184: CALL_OW 122
// if not beriaDepot then
29188: LD_EXP 61
29192: NOT
29193: IFFALSE 29209
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29195: LD_VAR 0 3
29199: PPUSH
29200: LD_INT 32
29202: PPUSH
29203: CALL_OW 173
29207: GO 29238
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29209: LD_VAR 0 3
29213: PPUSH
29214: LD_EXP 61
29218: PPUSH
29219: CALL_OW 250
29223: PPUSH
29224: LD_EXP 61
29228: PPUSH
29229: CALL_OW 251
29233: PPUSH
29234: CALL_OW 171
// end ;
29238: GO 29108
29240: POP
29241: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 22
29249: PUSH
29250: LD_INT 6
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 21
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 6
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 7
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 69
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PPUSH
29309: CALL_OW 313
29313: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL_OW 122
// if not beriaDepot then
29323: LD_EXP 61
29327: NOT
29328: IFFALSE 29344
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29330: LD_VAR 0 3
29334: PPUSH
29335: LD_INT 32
29337: PPUSH
29338: CALL_OW 173
29342: GO 29373
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29344: LD_VAR 0 3
29348: PPUSH
29349: LD_EXP 61
29353: PPUSH
29354: CALL_OW 250
29358: PPUSH
29359: LD_EXP 61
29363: PPUSH
29364: CALL_OW 251
29368: PPUSH
29369: CALL_OW 171
// wait ( 0 0$14 ) ;
29373: LD_INT 490
29375: PPUSH
29376: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29380: LD_INT 26
29382: PPUSH
29383: LD_INT 22
29385: PUSH
29386: LD_INT 6
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 21
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PPUSH
29407: CALL_OW 70
29411: PPUSH
29412: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29416: LD_ADDR_VAR 0 1
29420: PUSH
29421: LD_INT 26
29423: PPUSH
29424: LD_INT 22
29426: PUSH
29427: LD_INT 6
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 70
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29565
// begin if GetLives ( i ) < 15 then
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 256
29465: PUSH
29466: LD_INT 15
29468: LESS
29469: IFFALSE 29534
// begin tmpRu = UnitsInside ( i ) ;
29471: LD_ADDR_VAR 0 3
29475: PUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 313
29485: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29486: LD_VAR 0 3
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29499: LD_VAR 0 3
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_EXP 61
29512: PPUSH
29513: CALL_OW 250
29517: PPUSH
29518: LD_EXP 61
29522: PPUSH
29523: CALL_OW 251
29527: PPUSH
29528: CALL_OW 171
// end else
29532: GO 29563
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_EXP 61
29543: PPUSH
29544: CALL_OW 250
29548: PPUSH
29549: LD_EXP 61
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: CALL_OW 171
// end ;
29563: GO 29453
29565: POP
29566: POP
// wait ( 0 0$1 ) ;
29567: LD_INT 35
29569: PPUSH
29570: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29574: LD_INT 26
29576: PPUSH
29577: LD_INT 22
29579: PUSH
29580: LD_INT 6
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 21
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 70
29605: PPUSH
29606: LD_EXP 61
29610: PPUSH
29611: CALL_OW 250
29615: PPUSH
29616: LD_EXP 61
29620: PPUSH
29621: CALL_OW 251
29625: PPUSH
29626: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29630: LD_EXP 75
29634: PPUSH
29635: CALL_OW 313
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PPUSH
29644: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29648: LD_ADDR_VAR 0 1
29652: PUSH
29653: LD_INT 26
29655: PPUSH
29656: LD_INT 22
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 21
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 70
29684: PUSH
29685: FOR_IN
29686: IFFALSE 29843
// begin if GetLives ( i ) < 15 then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 256
29697: PUSH
29698: LD_INT 15
29700: LESS
29701: IFFALSE 29791
// begin tmpRu = UnitsInside ( i ) ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 313
29717: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29718: LD_VAR 0 3
29722: PUSH
29723: LD_INT 1
29725: ARRAY
29726: PPUSH
29727: CALL_OW 121
// if not beriaDepot then
29731: LD_EXP 61
29735: NOT
29736: IFFALSE 29756
// AddComMoveToArea ( tmpRu [ 1 ] , EndMissionMeetArea ) else
29738: LD_VAR 0 3
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_INT 32
29749: PPUSH
29750: CALL_OW 173
29754: GO 29789
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29756: LD_VAR 0 3
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: PPUSH
29765: LD_EXP 61
29769: PPUSH
29770: CALL_OW 250
29774: PPUSH
29775: LD_EXP 61
29779: PPUSH
29780: CALL_OW 251
29784: PPUSH
29785: CALL_OW 171
// end else
29789: GO 29841
// if not beriaDepot then
29791: LD_EXP 61
29795: NOT
29796: IFFALSE 29812
// AddComMoveToArea ( i , EndMissionMeetArea ) else
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 32
29805: PPUSH
29806: CALL_OW 173
29810: GO 29841
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_EXP 61
29821: PPUSH
29822: CALL_OW 250
29826: PPUSH
29827: LD_EXP 61
29831: PPUSH
29832: CALL_OW 251
29836: PPUSH
29837: CALL_OW 171
// end ;
29841: GO 29685
29843: POP
29844: POP
// wait ( 0 0$1 ) ;
29845: LD_INT 35
29847: PPUSH
29848: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29852: LD_INT 22
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 21
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 69
29880: PPUSH
29881: LD_EXP 63
29885: PPUSH
29886: CALL_OW 250
29890: PPUSH
29891: LD_EXP 63
29895: PPUSH
29896: CALL_OW 251
29900: PPUSH
29901: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29905: LD_INT 22
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: PPUSH
29934: LD_EXP 63
29938: PPUSH
29939: CALL_OW 250
29943: PPUSH
29944: LD_EXP 63
29948: PPUSH
29949: CALL_OW 251
29953: PPUSH
29954: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29958: LD_EXP 50
29962: PPUSH
29963: CALL_OW 310
29967: PPUSH
29968: LD_EXP 63
29972: PPUSH
29973: CALL_OW 250
29977: PPUSH
29978: LD_EXP 63
29982: PPUSH
29983: CALL_OW 251
29987: PPUSH
29988: CALL_OW 111
// if IsInUnit ( Burlak ) then
29992: LD_EXP 50
29996: PPUSH
29997: CALL_OW 310
30001: IFFALSE 30019
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
30003: LD_EXP 50
30007: PPUSH
30008: CALL_OW 310
30012: PPUSH
30013: CALL_OW 87
30017: GO 30028
// CenterNowOnUnits ( Burlak ) ;
30019: LD_EXP 50
30023: PPUSH
30024: CALL_OW 87
// wait ( 0 0$1 ) ;
30028: LD_INT 35
30030: PPUSH
30031: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
30035: LD_EXP 50
30039: PPUSH
30040: LD_EXP 63
30044: PPUSH
30045: CALL_OW 296
30049: PUSH
30050: LD_INT 8
30052: LESS
30053: PUSH
30054: LD_EXP 50
30058: PPUSH
30059: CALL_OW 310
30063: PUSH
30064: LD_INT 8
30066: LESS
30067: PUSH
30068: LD_EXP 50
30072: PPUSH
30073: CALL_OW 310
30077: AND
30078: OR
30079: IFFALSE 29905
// if IsInUnit ( Burlak ) then
30081: LD_EXP 50
30085: PPUSH
30086: CALL_OW 310
30090: IFFALSE 30108
// begin ComExitVehicle ( Burlak ) ;
30092: LD_EXP 50
30096: PPUSH
30097: CALL_OW 121
// wait ( 0 0$1 ) ;
30101: LD_INT 35
30103: PPUSH
30104: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
30108: LD_EXP 50
30112: PUSH
30113: LD_EXP 63
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
30126: LD_EXP 50
30130: PPUSH
30131: LD_EXP 63
30135: PPUSH
30136: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
30140: LD_EXP 63
30144: PPUSH
30145: LD_EXP 50
30149: PPUSH
30150: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
30154: LD_EXP 50
30158: PPUSH
30159: LD_STRING D10a-Bur-1
30161: PPUSH
30162: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
30166: LD_EXP 63
30170: PPUSH
30171: LD_STRING D10a-Pop-1
30173: PPUSH
30174: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
30178: LD_EXP 50
30182: PPUSH
30183: LD_STRING D10a-Bur-2
30185: PPUSH
30186: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
30190: LD_EXP 63
30194: PPUSH
30195: LD_STRING D10a-Pop-2
30197: PPUSH
30198: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
30202: LD_EXP 50
30206: PPUSH
30207: LD_STRING D10a-Bur-3
30209: PPUSH
30210: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
30214: LD_EXP 63
30218: PPUSH
30219: LD_STRING D10a-Pop-3
30221: PPUSH
30222: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
30226: LD_EXP 50
30230: PPUSH
30231: LD_STRING D10a-Bur-4
30233: PPUSH
30234: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
30238: LD_EXP 63
30242: PPUSH
30243: LD_STRING D10a-Pop-4
30245: PPUSH
30246: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
30250: LD_EXP 50
30254: PPUSH
30255: LD_STRING D10a-Bur-5
30257: PPUSH
30258: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
30262: LD_EXP 63
30266: PPUSH
30267: LD_STRING D10a-Pop-5
30269: PPUSH
30270: CALL_OW 88
// survivorsArabianAttack = [ ] ;
30274: LD_ADDR_EXP 80
30278: PUSH
30279: EMPTY
30280: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
30281: LD_ADDR_EXP 80
30285: PUSH
30286: LD_INT 22
30288: PUSH
30289: LD_INT 6
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 50
30298: PUSH
30299: EMPTY
30300: LIST
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// emptyVehicles = [ ] ;
30322: LD_ADDR_VAR 0 9
30326: PUSH
30327: EMPTY
30328: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30329: LD_ADDR_VAR 0 1
30333: PUSH
30334: LD_INT 22
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 21
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 50
30356: PUSH
30357: EMPTY
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: PUSH
30370: FOR_IN
30371: IFFALSE 30406
// if GetFuel ( i ) >= 50 then
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 261
30382: PUSH
30383: LD_INT 50
30385: GREATEREQUAL
30386: IFFALSE 30404
// emptyVehicles = emptyVehicles ^ i ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_VAR 0 1
30402: ADD
30403: ST_TO_ADDR
30404: GO 30370
30406: POP
30407: POP
// if emptyVehicles then
30408: LD_VAR 0 9
30412: IFFALSE 30605
// for i = 1 to emptyVehicles do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: DOUBLE
30420: LD_INT 1
30422: DEC
30423: ST_TO_ADDR
30424: LD_VAR 0 9
30428: PUSH
30429: FOR_TO
30430: IFFALSE 30603
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) [ i ] , emptyVehicles [ i ] ) ;
30432: LD_INT 22
30434: PUSH
30435: LD_INT 3
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 21
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 60
30457: PUSH
30458: EMPTY
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PPUSH
30470: CALL_OW 69
30474: PUSH
30475: LD_VAR 0 1
30479: ARRAY
30480: PPUSH
30481: LD_VAR 0 9
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PPUSH
30492: CALL_OW 180
// if GetFuel ( emptyVehicles [ i ] ) >= 65 then
30496: LD_VAR 0 9
30500: PUSH
30501: LD_VAR 0 1
30505: ARRAY
30506: PPUSH
30507: CALL_OW 261
30511: PUSH
30512: LD_INT 65
30514: GREATEREQUAL
30515: IFFALSE 30601
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( emptyVehicles [ i ] ) , GetEngine ( emptyVehicles [ i ] ) , GetControl ( emptyVehicles [ i ] ) , GetWeapon ( emptyVehicles [ i ] ) ] ] ;
30517: LD_ADDR_EXP 7
30521: PUSH
30522: LD_EXP 7
30526: PUSH
30527: LD_VAR 0 9
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 265
30542: PUSH
30543: LD_VAR 0 9
30547: PUSH
30548: LD_VAR 0 1
30552: ARRAY
30553: PPUSH
30554: CALL_OW 262
30558: PUSH
30559: LD_VAR 0 9
30563: PUSH
30564: LD_VAR 0 1
30568: ARRAY
30569: PPUSH
30570: CALL_OW 263
30574: PUSH
30575: LD_VAR 0 9
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 264
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: ADD
30600: ST_TO_ADDR
// end ;
30601: GO 30429
30603: POP
30604: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30605: LD_ADDR_VAR 0 1
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 21
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 50
30632: PUSH
30633: EMPTY
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: PUSH
30646: FOR_IN
30647: IFFALSE 30726
// if GetFuel ( i ) >= 65 then
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 261
30658: PUSH
30659: LD_INT 65
30661: GREATEREQUAL
30662: IFFALSE 30724
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
30664: LD_ADDR_EXP 7
30668: PUSH
30669: LD_EXP 7
30673: PUSH
30674: LD_VAR 0 1
30678: PPUSH
30679: CALL_OW 265
30683: PUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 262
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 263
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 264
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: ADD
30723: ST_TO_ADDR
30724: GO 30646
30726: POP
30727: POP
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
30728: LD_INT 22
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 21
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 21
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: PPUSH
30775: LD_INT 83
30777: PPUSH
30778: LD_INT 157
30780: PPUSH
30781: CALL_OW 171
// AddComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30785: LD_EXP 80
30789: PPUSH
30790: LD_INT 83
30792: PPUSH
30793: LD_INT 157
30795: PPUSH
30796: CALL_OW 171
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30800: LD_INT 22
30802: PUSH
30803: LD_INT 6
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PPUSH
30824: CALL_OW 69
30828: PPUSH
30829: LD_INT 83
30831: PPUSH
30832: LD_INT 157
30834: PPUSH
30835: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30839: LD_EXP 50
30843: PPUSH
30844: CALL_OW 87
// wait ( 0 0$1 ) ;
30848: LD_INT 35
30850: PPUSH
30851: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30855: LD_EXP 50
30859: PPUSH
30860: LD_EXP 61
30864: PPUSH
30865: CALL_OW 296
30869: PUSH
30870: LD_INT 23
30872: GREATER
30873: IFFALSE 30800
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30875: LD_INT 113
30877: PPUSH
30878: LD_INT 96
30880: PPUSH
30881: LD_INT 3
30883: PPUSH
30884: LD_INT 12
30886: NEG
30887: PPUSH
30888: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30892: LD_INT 113
30894: PPUSH
30895: LD_INT 96
30897: PPUSH
30898: CALL_OW 86
// canDestroyBeriaBase = true ;
30902: LD_ADDR_EXP 29
30906: PUSH
30907: LD_INT 1
30909: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30910: LD_ADDR_VAR 0 5
30914: PUSH
30915: LD_INT 25
30917: PPUSH
30918: LD_INT 22
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 21
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 70
30946: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: DOUBLE
30953: LD_INT 1
30955: DEC
30956: ST_TO_ADDR
30957: LD_VAR 0 5
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31045
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30965: LD_ADDR_VAR 0 6
30969: PUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 22
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 69
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: CALL_OW 74
30998: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30999: LD_ADDR_VAR 0 5
31003: PUSH
31004: LD_VAR 0 5
31008: PUSH
31009: LD_VAR 0 6
31013: DIFF
31014: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
31015: LD_EXP 88
31019: PPUSH
31020: LD_VAR 0 6
31024: PPUSH
31025: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
31029: LD_EXP 89
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 175
// end ;
31043: GO 30962
31045: POP
31046: POP
// wait ( 0 0$35 ) ;
31047: LD_INT 1225
31049: PPUSH
31050: CALL_OW 67
// FinishMission ;
31054: CALL 20244 0 0
// end ;
31058: PPOPN 9
31060: END
// every 1 trigger immortalSurvivors do var unit ;
31061: LD_EXP 28
31065: IFFALSE 31103
31067: GO 31069
31069: DISABLE
31070: LD_INT 0
31072: PPUSH
// begin enable ;
31073: ENABLE
// for unit in survivorsArabianAttack do
31074: LD_ADDR_VAR 0 1
31078: PUSH
31079: LD_EXP 80
31083: PUSH
31084: FOR_IN
31085: IFFALSE 31101
// SetLives ( unit , 1000 ) ;
31087: LD_VAR 0 1
31091: PPUSH
31092: LD_INT 1000
31094: PPUSH
31095: CALL_OW 234
31099: GO 31084
31101: POP
31102: POP
// end ; end_of_file
31103: PPOPN 1
31105: END
// every 0 0$30 do
31106: GO 31108
31108: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
31109: LD_INT 3
31111: PPUSH
31112: LD_INT 5
31114: PPUSH
31115: CALL_OW 12
31119: PPUSH
31120: LD_INT 76
31122: PPUSH
31123: LD_INT 111
31125: PPUSH
31126: LD_INT 5
31128: PPUSH
31129: LD_INT 1
31131: PPUSH
31132: CALL_OW 56
31136: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
31137: LD_EXP 8
31141: IFFALSE 31213
31143: GO 31145
31145: DISABLE
31146: LD_INT 0
31148: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
31149: LD_INT 50
31151: PPUSH
31152: LD_INT 4200
31154: PPUSH
31155: CALL_OW 12
31159: PPUSH
31160: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
31164: LD_VAR 0 1
31168: PUSH
31169: LD_INT 175
31171: MUL
31172: PPUSH
31173: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
31177: LD_ADDR_VAR 0 1
31181: PUSH
31182: LD_VAR 0 1
31186: PUSH
31187: LD_INT 1
31189: PLUS
31190: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
31191: LD_INT 3
31193: PPUSH
31194: LD_INT 5
31196: PPUSH
31197: CALL_OW 12
31201: PPUSH
31202: LD_INT 6
31204: PPUSH
31205: LD_INT 1
31207: PPUSH
31208: CALL_OW 55
// enable ;
31212: ENABLE
// end ; end_of_file
31213: PPOPN 1
31215: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
31216: LD_EXP 90
31220: IFFALSE 31383
31222: GO 31224
31224: DISABLE
// begin enable ;
31225: ENABLE
// case counterIndex of 1 :
31226: LD_EXP 91
31230: PUSH
31231: LD_INT 1
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31256
31239: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
31240: LD_ADDR_EXP 41
31244: PUSH
31245: LD_EXP 41
31249: PUSH
31250: LD_INT 35
31252: MINUS
31253: ST_TO_ADDR
31254: GO 31383
31256: LD_INT 2
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31298
31264: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
31265: LD_ADDR_OWVAR 47
31269: PUSH
31270: LD_STRING #Ru03-1
31272: PUSH
31273: LD_EXP 18
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31282: LD_ADDR_EXP 18
31286: PUSH
31287: LD_EXP 18
31291: PUSH
31292: LD_INT 35
31294: MINUS
31295: ST_TO_ADDR
// end ; 3 :
31296: GO 31383
31298: LD_INT 3
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31340
31306: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
31307: LD_ADDR_OWVAR 47
31311: PUSH
31312: LD_STRING #Ru03-2
31314: PUSH
31315: LD_EXP 18
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31324: LD_ADDR_EXP 18
31328: PUSH
31329: LD_EXP 18
31333: PUSH
31334: LD_INT 35
31336: MINUS
31337: ST_TO_ADDR
// end ; 4 :
31338: GO 31383
31340: LD_INT 4
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31382
31348: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
31349: LD_ADDR_OWVAR 47
31353: PUSH
31354: LD_STRING #Ru03-3
31356: PUSH
31357: LD_EXP 17
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
31366: LD_ADDR_EXP 17
31370: PUSH
31371: LD_EXP 17
31375: PUSH
31376: LD_INT 35
31378: MINUS
31379: ST_TO_ADDR
// end ; end ;
31380: GO 31383
31382: POP
// end ; end_of_file
31383: END
// every 7 7$0 do
31384: GO 31386
31386: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
31387: LD_INT 3
31389: PPUSH
31390: LD_INT 1
31392: PPUSH
31393: LD_INT 0
31395: PPUSH
31396: LD_INT 7
31398: PPUSH
31399: CALL 5939 0 4
31403: END
// every 12 12$0 do
31404: GO 31406
31406: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
31407: LD_INT 2
31409: PPUSH
31410: LD_INT 2
31412: PPUSH
31413: LD_INT 1
31415: PPUSH
31416: LD_INT 9
31418: PUSH
31419: LD_INT 8
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PPUSH
31429: LD_INT 2
31431: PPUSH
31432: CALL_OW 12
31436: ARRAY
31437: PPUSH
31438: CALL 5939 0 4
31442: END
// every 20 20$0 do
31443: GO 31445
31445: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
31446: LD_INT 4
31448: PPUSH
31449: LD_INT 2
31451: PPUSH
31452: LD_INT 0
31454: PPUSH
31455: LD_INT 7
31457: PPUSH
31458: CALL 5939 0 4
31462: END
// every 23 23$0 do
31463: GO 31465
31465: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
31466: LD_INT 3
31468: PPUSH
31469: LD_INT 1
31471: PPUSH
31472: LD_INT 2
31474: PPUSH
31475: LD_INT 9
31477: PUSH
31478: LD_INT 8
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PPUSH
31488: LD_INT 2
31490: PPUSH
31491: CALL_OW 12
31495: ARRAY
31496: PPUSH
31497: CALL 5939 0 4
31501: END
// export function Nef_PrepareNature ; var i , un ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
31507: LD_ADDR_VAR 0 2
31511: PUSH
31512: DOUBLE
31513: LD_INT 1
31515: DEC
31516: ST_TO_ADDR
31517: LD_EXP 33
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31637
// begin uc_side = 0 ;
31529: LD_ADDR_OWVAR 20
31533: PUSH
31534: LD_INT 0
31536: ST_TO_ADDR
// uc_nation = nation_nature ;
31537: LD_ADDR_OWVAR 21
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// hc_class = class_apeman ;
31545: LD_ADDR_OWVAR 28
31549: PUSH
31550: LD_INT 12
31552: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31553: LD_ADDR_OWVAR 31
31557: PUSH
31558: LD_EXP 34
31562: PUSH
31563: LD_INT 1
31565: ARRAY
31566: PUSH
31567: LD_EXP 34
31571: PUSH
31572: LD_INT 2
31574: ARRAY
31575: PUSH
31576: LD_EXP 34
31580: PUSH
31581: LD_INT 3
31583: ARRAY
31584: PUSH
31585: LD_EXP 34
31589: PUSH
31590: LD_INT 4
31592: ARRAY
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31600: LD_ADDR_OWVAR 35
31604: PUSH
31605: LD_EXP 35
31609: ST_TO_ADDR
// un = CreateHuman ;
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: CALL_OW 44
31619: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31620: LD_VAR 0 3
31624: PPUSH
31625: LD_INT 27
31627: PPUSH
31628: LD_INT 0
31630: PPUSH
31631: CALL_OW 49
// end ;
31635: GO 31526
31637: POP
31638: POP
// for i := 1 to animalsAmount [ 2 ] do
31639: LD_ADDR_VAR 0 2
31643: PUSH
31644: DOUBLE
31645: LD_INT 1
31647: DEC
31648: ST_TO_ADDR
31649: LD_EXP 33
31653: PUSH
31654: LD_INT 2
31656: ARRAY
31657: PUSH
31658: FOR_TO
31659: IFFALSE 31769
// begin uc_side = 0 ;
31661: LD_ADDR_OWVAR 20
31665: PUSH
31666: LD_INT 0
31668: ST_TO_ADDR
// uc_nation = nation_nature ;
31669: LD_ADDR_OWVAR 21
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
// hc_class = class_phororhacos ;
31677: LD_ADDR_OWVAR 28
31681: PUSH
31682: LD_INT 18
31684: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31685: LD_ADDR_OWVAR 31
31689: PUSH
31690: LD_EXP 34
31694: PUSH
31695: LD_INT 1
31697: ARRAY
31698: PUSH
31699: LD_EXP 34
31703: PUSH
31704: LD_INT 2
31706: ARRAY
31707: PUSH
31708: LD_EXP 34
31712: PUSH
31713: LD_INT 3
31715: ARRAY
31716: PUSH
31717: LD_EXP 34
31721: PUSH
31722: LD_INT 4
31724: ARRAY
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31732: LD_ADDR_OWVAR 35
31736: PUSH
31737: LD_EXP 35
31741: ST_TO_ADDR
// un = CreateHuman ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: CALL_OW 44
31751: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31752: LD_VAR 0 3
31756: PPUSH
31757: LD_INT 27
31759: PPUSH
31760: LD_INT 0
31762: PPUSH
31763: CALL_OW 49
// end ;
31767: GO 31658
31769: POP
31770: POP
// for i := 1 to animalsAmount [ 3 ] do
31771: LD_ADDR_VAR 0 2
31775: PUSH
31776: DOUBLE
31777: LD_INT 1
31779: DEC
31780: ST_TO_ADDR
31781: LD_EXP 33
31785: PUSH
31786: LD_INT 3
31788: ARRAY
31789: PUSH
31790: FOR_TO
31791: IFFALSE 31901
// begin uc_side = 0 ;
31793: LD_ADDR_OWVAR 20
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// uc_nation = nation_nature ;
31801: LD_ADDR_OWVAR 21
31805: PUSH
31806: LD_INT 0
31808: ST_TO_ADDR
// hc_class = class_tiger ;
31809: LD_ADDR_OWVAR 28
31813: PUSH
31814: LD_INT 14
31816: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31817: LD_ADDR_OWVAR 31
31821: PUSH
31822: LD_EXP 34
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: PUSH
31831: LD_EXP 34
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: PUSH
31840: LD_EXP 34
31844: PUSH
31845: LD_INT 3
31847: ARRAY
31848: PUSH
31849: LD_EXP 34
31853: PUSH
31854: LD_INT 4
31856: ARRAY
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31864: LD_ADDR_OWVAR 35
31868: PUSH
31869: LD_EXP 35
31873: ST_TO_ADDR
// un = CreateHuman ;
31874: LD_ADDR_VAR 0 3
31878: PUSH
31879: CALL_OW 44
31883: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31884: LD_VAR 0 3
31888: PPUSH
31889: LD_INT 27
31891: PPUSH
31892: LD_INT 0
31894: PPUSH
31895: CALL_OW 49
// end ;
31899: GO 31790
31901: POP
31902: POP
// for i := 1 to animalsAmount [ 4 ] do
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: DOUBLE
31909: LD_INT 1
31911: DEC
31912: ST_TO_ADDR
31913: LD_EXP 33
31917: PUSH
31918: LD_INT 4
31920: ARRAY
31921: PUSH
31922: FOR_TO
31923: IFFALSE 32033
// begin uc_side = 0 ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_INT 0
31932: ST_TO_ADDR
// uc_nation = nation_nature ;
31933: LD_ADDR_OWVAR 21
31937: PUSH
31938: LD_INT 0
31940: ST_TO_ADDR
// hc_class = 21 ;
31941: LD_ADDR_OWVAR 28
31945: PUSH
31946: LD_INT 21
31948: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31949: LD_ADDR_OWVAR 31
31953: PUSH
31954: LD_EXP 34
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PUSH
31963: LD_EXP 34
31967: PUSH
31968: LD_INT 2
31970: ARRAY
31971: PUSH
31972: LD_EXP 34
31976: PUSH
31977: LD_INT 3
31979: ARRAY
31980: PUSH
31981: LD_EXP 34
31985: PUSH
31986: LD_INT 4
31988: ARRAY
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31996: LD_ADDR_OWVAR 35
32000: PUSH
32001: LD_EXP 35
32005: ST_TO_ADDR
// un = CreateHuman ;
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: CALL_OW 44
32015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32016: LD_VAR 0 3
32020: PPUSH
32021: LD_INT 27
32023: PPUSH
32024: LD_INT 0
32026: PPUSH
32027: CALL_OW 49
// end ;
32031: GO 31922
32033: POP
32034: POP
// for i := 1 to animalsAmount [ 5 ] do
32035: LD_ADDR_VAR 0 2
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_EXP 33
32049: PUSH
32050: LD_INT 5
32052: ARRAY
32053: PUSH
32054: FOR_TO
32055: IFFALSE 32116
// begin uc_side = 0 ;
32057: LD_ADDR_OWVAR 20
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
// uc_nation = nation_nature ;
32065: LD_ADDR_OWVAR 21
32069: PUSH
32070: LD_INT 0
32072: ST_TO_ADDR
// vc_chassis := 31 ;
32073: LD_ADDR_OWVAR 37
32077: PUSH
32078: LD_INT 31
32080: ST_TO_ADDR
// vc_control := control_rider ;
32081: LD_ADDR_OWVAR 38
32085: PUSH
32086: LD_INT 4
32088: ST_TO_ADDR
// un := CreateVehicle ;
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: CALL_OW 45
32098: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32099: LD_VAR 0 3
32103: PPUSH
32104: LD_INT 27
32106: PPUSH
32107: LD_INT 0
32109: PPUSH
32110: CALL_OW 49
// end ;
32114: GO 32054
32116: POP
32117: POP
// end ; end_of_file
32118: LD_VAR 0 1
32122: RET
// every 1 trigger scholtzeSaved do
32123: LD_EXP 10
32127: IFFALSE 32139
32129: GO 32131
32131: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
32132: LD_STRING ACH_PROFESSOR
32134: PPUSH
32135: CALL_OW 543
32139: END
// every 1 trigger IsDead ( Sikorski ) do
32140: LD_INT 290
32142: PPUSH
32143: CALL_OW 301
32147: IFFALSE 32159
32149: GO 32151
32151: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
32152: LD_STRING ACH_SIKORSKI
32154: PPUSH
32155: CALL_OW 543
32159: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
32160: LD_EXP 15
32164: NOT
32165: PUSH
32166: LD_EXP 27
32170: NOT
32171: AND
32172: IFFALSE 32184
32174: GO 32176
32176: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
32177: LD_STRING ACH_REINFORCE
32179: PPUSH
32180: CALL_OW 543
32184: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
32185: LD_INT 0
32187: PPUSH
// ar_miner := 81 ;
32188: LD_ADDR_EXP 99
32192: PUSH
32193: LD_INT 81
32195: ST_TO_ADDR
// ar_crane := 88 ;
32196: LD_ADDR_EXP 98
32200: PUSH
32201: LD_INT 88
32203: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32204: LD_ADDR_EXP 93
32208: PUSH
32209: LD_INT 89
32211: ST_TO_ADDR
// us_hack := 99 ;
32212: LD_ADDR_EXP 94
32216: PUSH
32217: LD_INT 99
32219: ST_TO_ADDR
// us_artillery := 97 ;
32220: LD_ADDR_EXP 95
32224: PUSH
32225: LD_INT 97
32227: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32228: LD_ADDR_EXP 96
32232: PUSH
32233: LD_INT 91
32235: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
32236: LD_ADDR_EXP 97
32240: PUSH
32241: LD_INT 92
32243: ST_TO_ADDR
// ru_radar := 98 ;
32244: LD_ADDR_EXP 92
32248: PUSH
32249: LD_INT 98
32251: ST_TO_ADDR
// tech_Artillery := 80 ;
32252: LD_ADDR_EXP 100
32256: PUSH
32257: LD_INT 80
32259: ST_TO_ADDR
// tech_RadMat := 81 ;
32260: LD_ADDR_EXP 101
32264: PUSH
32265: LD_INT 81
32267: ST_TO_ADDR
// tech_BasicTools := 82 ;
32268: LD_ADDR_EXP 102
32272: PUSH
32273: LD_INT 82
32275: ST_TO_ADDR
// tech_Cargo := 83 ;
32276: LD_ADDR_EXP 103
32280: PUSH
32281: LD_INT 83
32283: ST_TO_ADDR
// tech_Track := 84 ;
32284: LD_ADDR_EXP 104
32288: PUSH
32289: LD_INT 84
32291: ST_TO_ADDR
// tech_Crane := 85 ;
32292: LD_ADDR_EXP 105
32296: PUSH
32297: LD_INT 85
32299: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32300: LD_ADDR_EXP 106
32304: PUSH
32305: LD_INT 86
32307: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32308: LD_ADDR_EXP 107
32312: PUSH
32313: LD_INT 87
32315: ST_TO_ADDR
// end ;
32316: LD_VAR 0 1
32320: RET
// every 1 do
32321: GO 32323
32323: DISABLE
// InitGlobalVariables ; end_of_file
32324: CALL 32185 0 0
32328: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32329: LD_INT 0
32331: PPUSH
32332: PPUSH
// if exist_mode then
32333: LD_VAR 0 2
32337: IFFALSE 32362
// unit := CreateCharacter ( prefix & ident ) else
32339: LD_ADDR_VAR 0 5
32343: PUSH
32344: LD_VAR 0 3
32348: PUSH
32349: LD_VAR 0 1
32353: STR
32354: PPUSH
32355: CALL_OW 34
32359: ST_TO_ADDR
32360: GO 32377
// unit := NewCharacter ( ident ) ;
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 25
32376: ST_TO_ADDR
// result := unit ;
32377: LD_ADDR_VAR 0 4
32381: PUSH
32382: LD_VAR 0 5
32386: ST_TO_ADDR
// end ;
32387: LD_VAR 0 4
32391: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
// if not side or not nation then
32396: LD_VAR 0 1
32400: NOT
32401: PUSH
32402: LD_VAR 0 2
32406: NOT
32407: OR
32408: IFFALSE 32412
// exit ;
32410: GO 33176
// case nation of nation_american :
32412: LD_VAR 0 2
32416: PUSH
32417: LD_INT 1
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32639
32425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32426: LD_ADDR_VAR 0 4
32430: PUSH
32431: LD_INT 35
32433: PUSH
32434: LD_INT 45
32436: PUSH
32437: LD_INT 46
32439: PUSH
32440: LD_INT 47
32442: PUSH
32443: LD_INT 82
32445: PUSH
32446: LD_INT 83
32448: PUSH
32449: LD_INT 84
32451: PUSH
32452: LD_INT 85
32454: PUSH
32455: LD_INT 86
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 6
32466: PUSH
32467: LD_INT 15
32469: PUSH
32470: LD_INT 16
32472: PUSH
32473: LD_INT 7
32475: PUSH
32476: LD_INT 12
32478: PUSH
32479: LD_INT 13
32481: PUSH
32482: LD_INT 10
32484: PUSH
32485: LD_INT 14
32487: PUSH
32488: LD_INT 20
32490: PUSH
32491: LD_INT 21
32493: PUSH
32494: LD_INT 22
32496: PUSH
32497: LD_INT 25
32499: PUSH
32500: LD_INT 32
32502: PUSH
32503: LD_INT 27
32505: PUSH
32506: LD_INT 36
32508: PUSH
32509: LD_INT 69
32511: PUSH
32512: LD_INT 39
32514: PUSH
32515: LD_INT 34
32517: PUSH
32518: LD_INT 40
32520: PUSH
32521: LD_INT 48
32523: PUSH
32524: LD_INT 49
32526: PUSH
32527: LD_INT 50
32529: PUSH
32530: LD_INT 51
32532: PUSH
32533: LD_INT 52
32535: PUSH
32536: LD_INT 53
32538: PUSH
32539: LD_INT 54
32541: PUSH
32542: LD_INT 55
32544: PUSH
32545: LD_INT 56
32547: PUSH
32548: LD_INT 57
32550: PUSH
32551: LD_INT 58
32553: PUSH
32554: LD_INT 59
32556: PUSH
32557: LD_INT 60
32559: PUSH
32560: LD_INT 61
32562: PUSH
32563: LD_INT 62
32565: PUSH
32566: LD_INT 80
32568: PUSH
32569: LD_INT 82
32571: PUSH
32572: LD_INT 83
32574: PUSH
32575: LD_INT 84
32577: PUSH
32578: LD_INT 85
32580: PUSH
32581: LD_INT 86
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
32637: GO 33100
32639: LD_INT 2
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32869
32647: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32648: LD_ADDR_VAR 0 4
32652: PUSH
32653: LD_INT 35
32655: PUSH
32656: LD_INT 45
32658: PUSH
32659: LD_INT 46
32661: PUSH
32662: LD_INT 47
32664: PUSH
32665: LD_INT 82
32667: PUSH
32668: LD_INT 83
32670: PUSH
32671: LD_INT 84
32673: PUSH
32674: LD_INT 85
32676: PUSH
32677: LD_INT 87
32679: PUSH
32680: LD_INT 70
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 11
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 4
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: LD_INT 6
32700: PUSH
32701: LD_INT 15
32703: PUSH
32704: LD_INT 18
32706: PUSH
32707: LD_INT 7
32709: PUSH
32710: LD_INT 17
32712: PUSH
32713: LD_INT 8
32715: PUSH
32716: LD_INT 20
32718: PUSH
32719: LD_INT 21
32721: PUSH
32722: LD_INT 22
32724: PUSH
32725: LD_INT 72
32727: PUSH
32728: LD_INT 26
32730: PUSH
32731: LD_INT 69
32733: PUSH
32734: LD_INT 39
32736: PUSH
32737: LD_INT 40
32739: PUSH
32740: LD_INT 41
32742: PUSH
32743: LD_INT 42
32745: PUSH
32746: LD_INT 43
32748: PUSH
32749: LD_INT 48
32751: PUSH
32752: LD_INT 49
32754: PUSH
32755: LD_INT 50
32757: PUSH
32758: LD_INT 51
32760: PUSH
32761: LD_INT 52
32763: PUSH
32764: LD_INT 53
32766: PUSH
32767: LD_INT 54
32769: PUSH
32770: LD_INT 55
32772: PUSH
32773: LD_INT 56
32775: PUSH
32776: LD_INT 60
32778: PUSH
32779: LD_INT 61
32781: PUSH
32782: LD_INT 62
32784: PUSH
32785: LD_INT 66
32787: PUSH
32788: LD_INT 67
32790: PUSH
32791: LD_INT 68
32793: PUSH
32794: LD_INT 81
32796: PUSH
32797: LD_INT 82
32799: PUSH
32800: LD_INT 83
32802: PUSH
32803: LD_INT 84
32805: PUSH
32806: LD_INT 85
32808: PUSH
32809: LD_INT 87
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
32867: GO 33100
32869: LD_INT 3
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 33099
32877: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32878: LD_ADDR_VAR 0 4
32882: PUSH
32883: LD_INT 46
32885: PUSH
32886: LD_INT 47
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 82
32897: PUSH
32898: LD_INT 83
32900: PUSH
32901: LD_INT 84
32903: PUSH
32904: LD_INT 85
32906: PUSH
32907: LD_INT 86
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 9
32915: PUSH
32916: LD_INT 20
32918: PUSH
32919: LD_INT 19
32921: PUSH
32922: LD_INT 21
32924: PUSH
32925: LD_INT 24
32927: PUSH
32928: LD_INT 22
32930: PUSH
32931: LD_INT 25
32933: PUSH
32934: LD_INT 28
32936: PUSH
32937: LD_INT 29
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: LD_INT 31
32945: PUSH
32946: LD_INT 37
32948: PUSH
32949: LD_INT 38
32951: PUSH
32952: LD_INT 32
32954: PUSH
32955: LD_INT 27
32957: PUSH
32958: LD_INT 33
32960: PUSH
32961: LD_INT 69
32963: PUSH
32964: LD_INT 39
32966: PUSH
32967: LD_INT 34
32969: PUSH
32970: LD_INT 40
32972: PUSH
32973: LD_INT 71
32975: PUSH
32976: LD_INT 23
32978: PUSH
32979: LD_INT 44
32981: PUSH
32982: LD_INT 48
32984: PUSH
32985: LD_INT 49
32987: PUSH
32988: LD_INT 50
32990: PUSH
32991: LD_INT 51
32993: PUSH
32994: LD_INT 52
32996: PUSH
32997: LD_INT 53
32999: PUSH
33000: LD_INT 54
33002: PUSH
33003: LD_INT 55
33005: PUSH
33006: LD_INT 56
33008: PUSH
33009: LD_INT 57
33011: PUSH
33012: LD_INT 58
33014: PUSH
33015: LD_INT 59
33017: PUSH
33018: LD_INT 63
33020: PUSH
33021: LD_INT 64
33023: PUSH
33024: LD_INT 65
33026: PUSH
33027: LD_INT 82
33029: PUSH
33030: LD_INT 83
33032: PUSH
33033: LD_INT 84
33035: PUSH
33036: LD_INT 85
33038: PUSH
33039: LD_INT 86
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
33097: GO 33100
33099: POP
// if state > - 1 and state < 3 then
33100: LD_VAR 0 3
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: GREATER
33109: PUSH
33110: LD_VAR 0 3
33114: PUSH
33115: LD_INT 3
33117: LESS
33118: AND
33119: IFFALSE 33176
// for i in result do
33121: LD_ADDR_VAR 0 5
33125: PUSH
33126: LD_VAR 0 4
33130: PUSH
33131: FOR_IN
33132: IFFALSE 33174
// if GetTech ( i , side ) <> state then
33134: LD_VAR 0 5
33138: PPUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: CALL_OW 321
33148: PUSH
33149: LD_VAR 0 3
33153: NONEQUAL
33154: IFFALSE 33172
// result := result diff i ;
33156: LD_ADDR_VAR 0 4
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_VAR 0 5
33170: DIFF
33171: ST_TO_ADDR
33172: GO 33131
33174: POP
33175: POP
// end ;
33176: LD_VAR 0 4
33180: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33181: LD_INT 0
33183: PPUSH
33184: PPUSH
33185: PPUSH
// result := true ;
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 1
33193: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33194: LD_ADDR_VAR 0 5
33198: PUSH
33199: LD_VAR 0 2
33203: PPUSH
33204: CALL_OW 480
33208: ST_TO_ADDR
// if not tmp then
33209: LD_VAR 0 5
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33267
// for i in tmp do
33218: LD_ADDR_VAR 0 4
33222: PUSH
33223: LD_VAR 0 5
33227: PUSH
33228: FOR_IN
33229: IFFALSE 33265
// if GetTech ( i , side ) <> state_researched then
33231: LD_VAR 0 4
33235: PPUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 321
33245: PUSH
33246: LD_INT 2
33248: NONEQUAL
33249: IFFALSE 33263
// begin result := false ;
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 0
33258: ST_TO_ADDR
// exit ;
33259: POP
33260: POP
33261: GO 33267
// end ;
33263: GO 33228
33265: POP
33266: POP
// end ;
33267: LD_VAR 0 3
33271: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33272: LD_INT 0
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33287: LD_VAR 0 1
33291: NOT
33292: PUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 257
33302: PUSH
33303: LD_INT 9
33305: NONEQUAL
33306: OR
33307: IFFALSE 33311
// exit ;
33309: GO 33884
// side := GetSide ( unit ) ;
33311: LD_ADDR_VAR 0 9
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 255
33325: ST_TO_ADDR
// tech_space := tech_spacanom ;
33326: LD_ADDR_VAR 0 12
33330: PUSH
33331: LD_INT 29
33333: ST_TO_ADDR
// tech_time := tech_taurad ;
33334: LD_ADDR_VAR 0 13
33338: PUSH
33339: LD_INT 28
33341: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33342: LD_ADDR_VAR 0 11
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 310
33356: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33357: LD_VAR 0 11
33361: PPUSH
33362: CALL_OW 247
33366: PUSH
33367: LD_INT 2
33369: EQUAL
33370: IFFALSE 33374
// exit ;
33372: GO 33884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_INT 81
33381: PUSH
33382: LD_VAR 0 9
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 21
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PPUSH
33412: CALL_OW 69
33416: ST_TO_ADDR
// if not tmp then
33417: LD_VAR 0 8
33421: NOT
33422: IFFALSE 33426
// exit ;
33424: GO 33884
// if in_unit then
33426: LD_VAR 0 11
33430: IFFALSE 33454
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33432: LD_ADDR_VAR 0 10
33436: PUSH
33437: LD_VAR 0 8
33441: PPUSH
33442: LD_VAR 0 11
33446: PPUSH
33447: CALL_OW 74
33451: ST_TO_ADDR
33452: GO 33474
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33454: LD_ADDR_VAR 0 10
33458: PUSH
33459: LD_VAR 0 8
33463: PPUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 74
33473: ST_TO_ADDR
// if not enemy then
33474: LD_VAR 0 10
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33884
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33483: LD_VAR 0 11
33487: PUSH
33488: LD_VAR 0 11
33492: PPUSH
33493: LD_VAR 0 10
33497: PPUSH
33498: CALL_OW 296
33502: PUSH
33503: LD_INT 13
33505: GREATER
33506: AND
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: LD_VAR 0 10
33517: PPUSH
33518: CALL_OW 296
33522: PUSH
33523: LD_INT 12
33525: GREATER
33526: OR
33527: IFFALSE 33531
// exit ;
33529: GO 33884
// missile := [ 1 ] ;
33531: LD_ADDR_VAR 0 14
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33542: LD_VAR 0 9
33546: PPUSH
33547: LD_VAR 0 12
33551: PPUSH
33552: CALL_OW 325
33556: IFFALSE 33585
// missile := Insert ( missile , missile + 1 , 2 ) ;
33558: LD_ADDR_VAR 0 14
33562: PUSH
33563: LD_VAR 0 14
33567: PPUSH
33568: LD_VAR 0 14
33572: PUSH
33573: LD_INT 1
33575: PLUS
33576: PPUSH
33577: LD_INT 2
33579: PPUSH
33580: CALL_OW 2
33584: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33585: LD_VAR 0 9
33589: PPUSH
33590: LD_VAR 0 13
33594: PPUSH
33595: CALL_OW 325
33599: PUSH
33600: LD_VAR 0 10
33604: PPUSH
33605: CALL_OW 255
33609: PPUSH
33610: LD_VAR 0 13
33614: PPUSH
33615: CALL_OW 325
33619: NOT
33620: AND
33621: IFFALSE 33650
// missile := Insert ( missile , missile + 1 , 3 ) ;
33623: LD_ADDR_VAR 0 14
33627: PUSH
33628: LD_VAR 0 14
33632: PPUSH
33633: LD_VAR 0 14
33637: PUSH
33638: LD_INT 1
33640: PLUS
33641: PPUSH
33642: LD_INT 3
33644: PPUSH
33645: CALL_OW 2
33649: ST_TO_ADDR
// if missile < 2 then
33650: LD_VAR 0 14
33654: PUSH
33655: LD_INT 2
33657: LESS
33658: IFFALSE 33662
// exit ;
33660: GO 33884
// x := GetX ( enemy ) ;
33662: LD_ADDR_VAR 0 4
33666: PUSH
33667: LD_VAR 0 10
33671: PPUSH
33672: CALL_OW 250
33676: ST_TO_ADDR
// y := GetY ( enemy ) ;
33677: LD_ADDR_VAR 0 5
33681: PUSH
33682: LD_VAR 0 10
33686: PPUSH
33687: CALL_OW 251
33691: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PPUSH
33706: LD_INT 1
33708: PPUSH
33709: CALL_OW 12
33713: PLUS
33714: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33715: LD_ADDR_VAR 0 7
33719: PUSH
33720: LD_VAR 0 5
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PPUSH
33729: LD_INT 1
33731: PPUSH
33732: CALL_OW 12
33736: PLUS
33737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33738: LD_VAR 0 6
33742: PPUSH
33743: LD_VAR 0 7
33747: PPUSH
33748: CALL_OW 488
33752: NOT
33753: IFFALSE 33775
// begin _x := x ;
33755: LD_ADDR_VAR 0 6
33759: PUSH
33760: LD_VAR 0 4
33764: ST_TO_ADDR
// _y := y ;
33765: LD_ADDR_VAR 0 7
33769: PUSH
33770: LD_VAR 0 5
33774: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: LD_INT 1
33782: PPUSH
33783: LD_VAR 0 14
33787: PPUSH
33788: CALL_OW 12
33792: ST_TO_ADDR
// case i of 1 :
33793: LD_VAR 0 3
33797: PUSH
33798: LD_INT 1
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33823
33806: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33807: LD_VAR 0 1
33811: PPUSH
33812: LD_VAR 0 10
33816: PPUSH
33817: CALL_OW 115
33821: GO 33884
33823: LD_INT 2
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33853
33831: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33832: LD_VAR 0 1
33836: PPUSH
33837: LD_VAR 0 6
33841: PPUSH
33842: LD_VAR 0 7
33846: PPUSH
33847: CALL_OW 153
33851: GO 33884
33853: LD_INT 3
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 33883
33861: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33862: LD_VAR 0 1
33866: PPUSH
33867: LD_VAR 0 6
33871: PPUSH
33872: LD_VAR 0 7
33876: PPUSH
33877: CALL_OW 154
33881: GO 33884
33883: POP
// end ;
33884: LD_VAR 0 2
33888: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
// if not unit or not building then
33897: LD_VAR 0 1
33901: NOT
33902: PUSH
33903: LD_VAR 0 2
33907: NOT
33908: OR
33909: IFFALSE 33913
// exit ;
33911: GO 34071
// x := GetX ( building ) ;
33913: LD_ADDR_VAR 0 5
33917: PUSH
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 250
33927: ST_TO_ADDR
// y := GetY ( building ) ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL_OW 251
33942: ST_TO_ADDR
// for i = 0 to 5 do
33943: LD_ADDR_VAR 0 4
33947: PUSH
33948: DOUBLE
33949: LD_INT 0
33951: DEC
33952: ST_TO_ADDR
33953: LD_INT 5
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34069
// begin _x := ShiftX ( x , i , 3 ) ;
33959: LD_ADDR_VAR 0 7
33963: PUSH
33964: LD_VAR 0 5
33968: PPUSH
33969: LD_VAR 0 4
33973: PPUSH
33974: LD_INT 3
33976: PPUSH
33977: CALL_OW 272
33981: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33982: LD_ADDR_VAR 0 8
33986: PUSH
33987: LD_VAR 0 6
33991: PPUSH
33992: LD_VAR 0 4
33996: PPUSH
33997: LD_INT 3
33999: PPUSH
34000: CALL_OW 273
34004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34005: LD_VAR 0 7
34009: PPUSH
34010: LD_VAR 0 8
34014: PPUSH
34015: CALL_OW 488
34019: NOT
34020: IFFALSE 34024
// continue ;
34022: GO 33956
// if HexInfo ( _x , _y ) = 0 then
34024: LD_VAR 0 7
34028: PPUSH
34029: LD_VAR 0 8
34033: PPUSH
34034: CALL_OW 428
34038: PUSH
34039: LD_INT 0
34041: EQUAL
34042: IFFALSE 34067
// begin ComMoveXY ( unit , _x , _y ) ;
34044: LD_VAR 0 1
34048: PPUSH
34049: LD_VAR 0 7
34053: PPUSH
34054: LD_VAR 0 8
34058: PPUSH
34059: CALL_OW 111
// exit ;
34063: POP
34064: POP
34065: GO 34071
// end ; end ;
34067: GO 33956
34069: POP
34070: POP
// end ;
34071: LD_VAR 0 3
34075: RET
// export function ScanBase ( side , base_area ) ; begin
34076: LD_INT 0
34078: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: LD_INT 81
34091: PUSH
34092: LD_VAR 0 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PPUSH
34101: CALL_OW 70
34105: ST_TO_ADDR
// end ;
34106: LD_VAR 0 3
34110: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34111: LD_INT 0
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
// result := false ;
34117: LD_ADDR_VAR 0 2
34121: PUSH
34122: LD_INT 0
34124: ST_TO_ADDR
// side := GetSide ( unit ) ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: CALL_OW 255
34139: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34140: LD_ADDR_VAR 0 4
34144: PUSH
34145: LD_VAR 0 1
34149: PPUSH
34150: CALL_OW 248
34154: ST_TO_ADDR
// case nat of 1 :
34155: LD_VAR 0 4
34159: PUSH
34160: LD_INT 1
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34179
34168: POP
// tech := tech_lassight ; 2 :
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_INT 12
34176: ST_TO_ADDR
34177: GO 34218
34179: LD_INT 2
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34198
34187: POP
// tech := tech_mortar ; 3 :
34188: LD_ADDR_VAR 0 5
34192: PUSH
34193: LD_INT 41
34195: ST_TO_ADDR
34196: GO 34218
34198: LD_INT 3
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34217
34206: POP
// tech := tech_bazooka ; end ;
34207: LD_ADDR_VAR 0 5
34211: PUSH
34212: LD_INT 44
34214: ST_TO_ADDR
34215: GO 34218
34217: POP
// if Researched ( side , tech ) then
34218: LD_VAR 0 3
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: CALL_OW 325
34232: IFFALSE 34259
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34234: LD_ADDR_VAR 0 2
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: LD_INT 8
34244: PUSH
34245: LD_INT 9
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: PUSH
34253: LD_VAR 0 4
34257: ARRAY
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 2
34263: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
34268: PPUSH
// if not mines then
34269: LD_VAR 0 2
34273: NOT
34274: IFFALSE 34278
// exit ;
34276: GO 34422
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34278: LD_ADDR_VAR 0 5
34282: PUSH
34283: LD_INT 81
34285: PUSH
34286: LD_VAR 0 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 21
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 69
34320: ST_TO_ADDR
// for i in mines do
34321: LD_ADDR_VAR 0 4
34325: PUSH
34326: LD_VAR 0 2
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34420
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34334: LD_VAR 0 4
34338: PUSH
34339: LD_INT 1
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 4
34347: PUSH
34348: LD_INT 2
34350: ARRAY
34351: PPUSH
34352: CALL_OW 458
34356: NOT
34357: IFFALSE 34361
// continue ;
34359: GO 34331
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34361: LD_VAR 0 4
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PPUSH
34370: LD_VAR 0 4
34374: PUSH
34375: LD_INT 2
34377: ARRAY
34378: PPUSH
34379: CALL_OW 428
34383: PUSH
34384: LD_VAR 0 5
34388: IN
34389: IFFALSE 34418
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34391: LD_VAR 0 4
34395: PUSH
34396: LD_INT 1
34398: ARRAY
34399: PPUSH
34400: LD_VAR 0 4
34404: PUSH
34405: LD_INT 2
34407: ARRAY
34408: PPUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 456
// end ;
34418: GO 34331
34420: POP
34421: POP
// end ;
34422: LD_VAR 0 3
34426: RET
// export function Count ( array ) ; var i ; begin
34427: LD_INT 0
34429: PPUSH
34430: PPUSH
// result := 0 ;
34431: LD_ADDR_VAR 0 2
34435: PUSH
34436: LD_INT 0
34438: ST_TO_ADDR
// for i in array do
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: FOR_IN
34450: IFFALSE 34474
// if i then
34452: LD_VAR 0 3
34456: IFFALSE 34472
// result := result + 1 ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_VAR 0 2
34467: PUSH
34468: LD_INT 1
34470: PLUS
34471: ST_TO_ADDR
34472: GO 34449
34474: POP
34475: POP
// end ;
34476: LD_VAR 0 2
34480: RET
// export function IsEmpty ( building ) ; begin
34481: LD_INT 0
34483: PPUSH
// if not building then
34484: LD_VAR 0 1
34488: NOT
34489: IFFALSE 34493
// exit ;
34491: GO 34536
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34493: LD_ADDR_VAR 0 2
34497: PUSH
34498: LD_VAR 0 1
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 255
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 58
34522: PUSH
34523: EMPTY
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PPUSH
34530: CALL_OW 69
34534: IN
34535: ST_TO_ADDR
// end ;
34536: LD_VAR 0 2
34540: RET
// export function IsNotFull ( building ) ; begin
34541: LD_INT 0
34543: PPUSH
// if not building then
34544: LD_VAR 0 1
34548: NOT
34549: IFFALSE 34553
// exit ;
34551: GO 34572
// result := UnitsInside ( building ) < 6 ;
34553: LD_ADDR_VAR 0 2
34557: PUSH
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 313
34567: PUSH
34568: LD_INT 6
34570: LESS
34571: ST_TO_ADDR
// end ;
34572: LD_VAR 0 2
34576: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34577: LD_INT 0
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
// tmp := [ ] ;
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: EMPTY
34589: ST_TO_ADDR
// list := [ ] ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: EMPTY
34596: ST_TO_ADDR
// for i = 16 to 25 do
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: DOUBLE
34603: LD_INT 16
34605: DEC
34606: ST_TO_ADDR
34607: LD_INT 25
34609: PUSH
34610: FOR_TO
34611: IFFALSE 34684
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: LD_INT 22
34625: PUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: CALL_OW 255
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 91
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: LD_INT 6
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 30
34658: PUSH
34659: LD_VAR 0 4
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: PPUSH
34676: CALL_OW 69
34680: ADD
34681: ST_TO_ADDR
34682: GO 34610
34684: POP
34685: POP
// for i = 1 to tmp do
34686: LD_ADDR_VAR 0 4
34690: PUSH
34691: DOUBLE
34692: LD_INT 1
34694: DEC
34695: ST_TO_ADDR
34696: LD_VAR 0 3
34700: PUSH
34701: FOR_TO
34702: IFFALSE 34790
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: LD_VAR 0 5
34713: PUSH
34714: LD_VAR 0 3
34718: PUSH
34719: LD_VAR 0 4
34723: ARRAY
34724: PPUSH
34725: CALL_OW 266
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 4
34739: ARRAY
34740: PPUSH
34741: CALL_OW 250
34745: PUSH
34746: LD_VAR 0 3
34750: PUSH
34751: LD_VAR 0 4
34755: ARRAY
34756: PPUSH
34757: CALL_OW 251
34761: PUSH
34762: LD_VAR 0 3
34766: PUSH
34767: LD_VAR 0 4
34771: ARRAY
34772: PPUSH
34773: CALL_OW 254
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: ADD
34787: ST_TO_ADDR
34788: GO 34701
34790: POP
34791: POP
// result := list ;
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_VAR 0 5
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 2
34806: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
// if not factory then
34816: LD_VAR 0 1
34820: NOT
34821: IFFALSE 34825
// exit ;
34823: GO 35418
// if control = control_apeman then
34825: LD_VAR 0 4
34829: PUSH
34830: LD_INT 5
34832: EQUAL
34833: IFFALSE 34942
// begin tmp := UnitsInside ( factory ) ;
34835: LD_ADDR_VAR 0 8
34839: PUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: CALL_OW 313
34849: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34850: LD_VAR 0 8
34854: PPUSH
34855: LD_INT 25
34857: PUSH
34858: LD_INT 12
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 72
34869: NOT
34870: IFFALSE 34880
// control := control_manual ;
34872: LD_ADDR_VAR 0 4
34876: PUSH
34877: LD_INT 1
34879: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34880: LD_ADDR_VAR 0 8
34884: PUSH
34885: LD_VAR 0 1
34889: PPUSH
34890: CALL 34577 0 1
34894: ST_TO_ADDR
// if tmp then
34895: LD_VAR 0 8
34899: IFFALSE 34942
// begin for i in tmp do
34901: LD_ADDR_VAR 0 7
34905: PUSH
34906: LD_VAR 0 8
34910: PUSH
34911: FOR_IN
34912: IFFALSE 34940
// if i [ 1 ] = b_ext_radio then
34914: LD_VAR 0 7
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PUSH
34923: LD_INT 22
34925: EQUAL
34926: IFFALSE 34938
// begin control := control_remote ;
34928: LD_ADDR_VAR 0 4
34932: PUSH
34933: LD_INT 2
34935: ST_TO_ADDR
// break ;
34936: GO 34940
// end ;
34938: GO 34911
34940: POP
34941: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_VAR 0 2
34951: PPUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: LD_VAR 0 4
34961: PPUSH
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL_OW 448
34971: IFFALSE 35006
// begin result := [ chassis , engine , control , weapon ] ;
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 2
34982: PUSH
34983: LD_VAR 0 3
34987: PUSH
34988: LD_VAR 0 4
34992: PUSH
34993: LD_VAR 0 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: ST_TO_ADDR
// exit ;
35004: GO 35418
// end ; _chassis := AvailableChassisList ( factory ) ;
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 475
35020: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35021: LD_ADDR_VAR 0 11
35025: PUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: CALL_OW 476
35035: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35036: LD_ADDR_VAR 0 12
35040: PUSH
35041: LD_VAR 0 1
35045: PPUSH
35046: CALL_OW 477
35050: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35051: LD_ADDR_VAR 0 10
35055: PUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 478
35065: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35066: LD_VAR 0 9
35070: NOT
35071: PUSH
35072: LD_VAR 0 11
35076: NOT
35077: OR
35078: PUSH
35079: LD_VAR 0 12
35083: NOT
35084: OR
35085: PUSH
35086: LD_VAR 0 10
35090: NOT
35091: OR
35092: IFFALSE 35127
// begin result := [ chassis , engine , control , weapon ] ;
35094: LD_ADDR_VAR 0 6
35098: PUSH
35099: LD_VAR 0 2
35103: PUSH
35104: LD_VAR 0 3
35108: PUSH
35109: LD_VAR 0 4
35113: PUSH
35114: LD_VAR 0 5
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// exit ;
35125: GO 35418
// end ; if not chassis in _chassis then
35127: LD_VAR 0 2
35131: PUSH
35132: LD_VAR 0 9
35136: IN
35137: NOT
35138: IFFALSE 35164
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35140: LD_ADDR_VAR 0 2
35144: PUSH
35145: LD_VAR 0 9
35149: PUSH
35150: LD_INT 1
35152: PPUSH
35153: LD_VAR 0 9
35157: PPUSH
35158: CALL_OW 12
35162: ARRAY
35163: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35164: LD_VAR 0 2
35168: PPUSH
35169: LD_VAR 0 3
35173: PPUSH
35174: CALL 35423 0 2
35178: NOT
35179: IFFALSE 35238
// repeat engine := _engine [ 1 ] ;
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_VAR 0 11
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35195: LD_ADDR_VAR 0 11
35199: PUSH
35200: LD_VAR 0 11
35204: PPUSH
35205: LD_INT 1
35207: PPUSH
35208: CALL_OW 3
35212: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35213: LD_VAR 0 2
35217: PPUSH
35218: LD_VAR 0 3
35222: PPUSH
35223: CALL 35423 0 2
35227: PUSH
35228: LD_VAR 0 11
35232: PUSH
35233: EMPTY
35234: EQUAL
35235: OR
35236: IFFALSE 35181
// if not control in _control then
35238: LD_VAR 0 4
35242: PUSH
35243: LD_VAR 0 12
35247: IN
35248: NOT
35249: IFFALSE 35275
// control := _control [ rand ( 1 , _control ) ] ;
35251: LD_ADDR_VAR 0 4
35255: PUSH
35256: LD_VAR 0 12
35260: PUSH
35261: LD_INT 1
35263: PPUSH
35264: LD_VAR 0 12
35268: PPUSH
35269: CALL_OW 12
35273: ARRAY
35274: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35275: LD_VAR 0 2
35279: PPUSH
35280: LD_VAR 0 5
35284: PPUSH
35285: CALL 35643 0 2
35289: NOT
35290: IFFALSE 35349
// repeat weapon := _weapon [ 1 ] ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: LD_VAR 0 10
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35306: LD_ADDR_VAR 0 10
35310: PUSH
35311: LD_VAR 0 10
35315: PPUSH
35316: LD_INT 1
35318: PPUSH
35319: CALL_OW 3
35323: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_VAR 0 5
35333: PPUSH
35334: CALL 35643 0 2
35338: PUSH
35339: LD_VAR 0 10
35343: PUSH
35344: EMPTY
35345: EQUAL
35346: OR
35347: IFFALSE 35292
// result := [ ] ;
35349: LD_ADDR_VAR 0 6
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35356: LD_VAR 0 1
35360: PPUSH
35361: LD_VAR 0 2
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: LD_VAR 0 5
35380: PPUSH
35381: CALL_OW 448
35385: IFFALSE 35418
// result := [ chassis , engine , control , weapon ] ;
35387: LD_ADDR_VAR 0 6
35391: PUSH
35392: LD_VAR 0 2
35396: PUSH
35397: LD_VAR 0 3
35401: PUSH
35402: LD_VAR 0 4
35406: PUSH
35407: LD_VAR 0 5
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// end ;
35418: LD_VAR 0 6
35422: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35423: LD_INT 0
35425: PPUSH
// if not chassis or not engine then
35426: LD_VAR 0 1
35430: NOT
35431: PUSH
35432: LD_VAR 0 2
35436: NOT
35437: OR
35438: IFFALSE 35442
// exit ;
35440: GO 35638
// case engine of engine_solar :
35442: LD_VAR 0 2
35446: PUSH
35447: LD_INT 2
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 35493
35455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_INT 11
35463: PUSH
35464: LD_INT 12
35466: PUSH
35467: LD_INT 13
35469: PUSH
35470: LD_INT 14
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 35622
35493: LD_INT 1
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35563
35501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 11
35509: PUSH
35510: LD_INT 12
35512: PUSH
35513: LD_INT 13
35515: PUSH
35516: LD_INT 14
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: LD_INT 4
35530: PUSH
35531: LD_INT 5
35533: PUSH
35534: LD_INT 21
35536: PUSH
35537: LD_INT 23
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_INT 24
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
35561: GO 35622
35563: LD_INT 3
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35621
35571: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_INT 13
35579: PUSH
35580: LD_INT 14
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: LD_INT 4
35591: PUSH
35592: LD_INT 5
35594: PUSH
35595: LD_INT 21
35597: PUSH
35598: LD_INT 22
35600: PUSH
35601: LD_INT 23
35603: PUSH
35604: LD_INT 24
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 35622
35621: POP
// result := ( chassis in result ) ;
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_VAR 0 1
35631: PUSH
35632: LD_VAR 0 3
35636: IN
35637: ST_TO_ADDR
// end ;
35638: LD_VAR 0 3
35642: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35643: LD_INT 0
35645: PPUSH
// if not chassis or not weapon then
35646: LD_VAR 0 1
35650: NOT
35651: PUSH
35652: LD_VAR 0 2
35656: NOT
35657: OR
35658: IFFALSE 35662
// exit ;
35660: GO 36688
// case weapon of us_machine_gun :
35662: LD_VAR 0 2
35666: PUSH
35667: LD_INT 2
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35705
35675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35676: LD_ADDR_VAR 0 3
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: LD_INT 5
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: ST_TO_ADDR
35703: GO 36672
35705: LD_INT 3
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35713
35711: GO 35743
35713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35714: LD_ADDR_VAR 0 3
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 3
35727: PUSH
35728: LD_INT 4
35730: PUSH
35731: LD_INT 5
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
35741: GO 36672
35743: LD_INT 11
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35781
35751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 4
35768: PUSH
35769: LD_INT 5
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
35779: GO 36672
35781: LD_INT 4
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35815
35789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35790: LD_ADDR_VAR 0 3
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: LD_INT 4
35803: PUSH
35804: LD_INT 5
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 36672
35815: LD_INT 5
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35849
35823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: LD_INT 4
35837: PUSH
35838: LD_INT 5
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
35847: GO 36672
35849: LD_INT 9
35851: DOUBLE
35852: EQUAL
35853: IFTRUE 35857
35855: GO 35883
35857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: LD_INT 5
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
35881: GO 36672
35883: LD_INT 7
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35917
35891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35892: LD_ADDR_VAR 0 3
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
35915: GO 36672
35917: LD_INT 12
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 35951
35925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: LD_INT 5
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
35949: GO 36672
35951: LD_INT 13
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 35985
35959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35960: LD_ADDR_VAR 0 3
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: LD_INT 3
35970: PUSH
35971: LD_INT 4
35973: PUSH
35974: LD_INT 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
35983: GO 36672
35985: LD_INT 14
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35993
35991: GO 36011
35993: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35994: LD_ADDR_VAR 0 3
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: LD_INT 5
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: ST_TO_ADDR
36009: GO 36672
36011: LD_INT 6
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 36037
36019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 4
36027: PUSH
36028: LD_INT 5
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36672
36037: LD_INT 10
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36063
36045: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 4
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: ST_TO_ADDR
36061: GO 36672
36063: LD_INT 22
36065: DOUBLE
36066: EQUAL
36067: IFTRUE 36071
36069: GO 36097
36071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_INT 11
36079: PUSH
36080: LD_INT 12
36082: PUSH
36083: LD_INT 13
36085: PUSH
36086: LD_INT 14
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
36095: GO 36672
36097: LD_INT 23
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36105
36103: GO 36131
36105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36106: LD_ADDR_VAR 0 3
36110: PUSH
36111: LD_INT 11
36113: PUSH
36114: LD_INT 12
36116: PUSH
36117: LD_INT 13
36119: PUSH
36120: LD_INT 14
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
36129: GO 36672
36131: LD_INT 24
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36165
36139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36140: LD_ADDR_VAR 0 3
36144: PUSH
36145: LD_INT 11
36147: PUSH
36148: LD_INT 12
36150: PUSH
36151: LD_INT 13
36153: PUSH
36154: LD_INT 14
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36672
36165: LD_INT 30
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36199
36173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 13
36187: PUSH
36188: LD_INT 14
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
36197: GO 36672
36199: LD_INT 25
36201: DOUBLE
36202: EQUAL
36203: IFTRUE 36207
36205: GO 36225
36207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: LD_INT 13
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: ST_TO_ADDR
36223: GO 36672
36225: LD_INT 27
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36251
36233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 13
36241: PUSH
36242: LD_INT 14
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: ST_TO_ADDR
36249: GO 36672
36251: LD_INT 28
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36277
36259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_INT 13
36267: PUSH
36268: LD_INT 14
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: ST_TO_ADDR
36275: GO 36672
36277: LD_INT 29
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36285
36283: GO 36303
36285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36286: LD_ADDR_VAR 0 3
36290: PUSH
36291: LD_INT 13
36293: PUSH
36294: LD_INT 14
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: ST_TO_ADDR
36301: GO 36672
36303: LD_INT 31
36305: DOUBLE
36306: EQUAL
36307: IFTRUE 36311
36309: GO 36329
36311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36312: LD_ADDR_VAR 0 3
36316: PUSH
36317: LD_INT 13
36319: PUSH
36320: LD_INT 14
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: ST_TO_ADDR
36327: GO 36672
36329: LD_INT 26
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36355
36337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 13
36345: PUSH
36346: LD_INT 14
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: ST_TO_ADDR
36353: GO 36672
36355: LD_INT 42
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36363
36361: GO 36389
36363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_INT 21
36371: PUSH
36372: LD_INT 22
36374: PUSH
36375: LD_INT 23
36377: PUSH
36378: LD_INT 24
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: ST_TO_ADDR
36387: GO 36672
36389: LD_INT 43
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36397
36395: GO 36423
36397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36398: LD_ADDR_VAR 0 3
36402: PUSH
36403: LD_INT 21
36405: PUSH
36406: LD_INT 22
36408: PUSH
36409: LD_INT 23
36411: PUSH
36412: LD_INT 24
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 36672
36423: LD_INT 44
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36457
36431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36432: LD_ADDR_VAR 0 3
36436: PUSH
36437: LD_INT 21
36439: PUSH
36440: LD_INT 22
36442: PUSH
36443: LD_INT 23
36445: PUSH
36446: LD_INT 24
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 36672
36457: LD_INT 45
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36465
36463: GO 36491
36465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 21
36473: PUSH
36474: LD_INT 22
36476: PUSH
36477: LD_INT 23
36479: PUSH
36480: LD_INT 24
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 36672
36491: LD_INT 49
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36525
36499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 21
36507: PUSH
36508: LD_INT 22
36510: PUSH
36511: LD_INT 23
36513: PUSH
36514: LD_INT 24
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 36672
36525: LD_INT 51
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36559
36533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 21
36541: PUSH
36542: LD_INT 22
36544: PUSH
36545: LD_INT 23
36547: PUSH
36548: LD_INT 24
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 36672
36559: LD_INT 52
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36593
36567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 21
36575: PUSH
36576: LD_INT 22
36578: PUSH
36579: LD_INT 23
36581: PUSH
36582: LD_INT 24
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
36591: GO 36672
36593: LD_INT 53
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36619
36601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_INT 23
36609: PUSH
36610: LD_INT 24
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 36672
36619: LD_INT 46
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36645
36627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 23
36635: PUSH
36636: LD_INT 24
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: ST_TO_ADDR
36643: GO 36672
36645: LD_INT 47
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36671
36653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36654: LD_ADDR_VAR 0 3
36658: PUSH
36659: LD_INT 23
36661: PUSH
36662: LD_INT 24
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: ST_TO_ADDR
36669: GO 36672
36671: POP
// result := ( chassis in result ) ;
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_VAR 0 1
36681: PUSH
36682: LD_VAR 0 3
36686: IN
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 3
36692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
// result := array ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_VAR 0 1
36711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36712: LD_VAR 0 1
36716: NOT
36717: PUSH
36718: LD_VAR 0 2
36722: NOT
36723: OR
36724: PUSH
36725: LD_VAR 0 3
36729: NOT
36730: OR
36731: PUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_VAR 0 1
36741: GREATER
36742: OR
36743: PUSH
36744: LD_VAR 0 3
36748: PUSH
36749: LD_VAR 0 1
36753: GREATER
36754: OR
36755: IFFALSE 36759
// exit ;
36757: GO 37055
// if direction then
36759: LD_VAR 0 4
36763: IFFALSE 36827
// begin d := 1 ;
36765: LD_ADDR_VAR 0 9
36769: PUSH
36770: LD_INT 1
36772: ST_TO_ADDR
// if i_from > i_to then
36773: LD_VAR 0 2
36777: PUSH
36778: LD_VAR 0 3
36782: GREATER
36783: IFFALSE 36809
// length := ( array - i_from ) + i_to else
36785: LD_ADDR_VAR 0 11
36789: PUSH
36790: LD_VAR 0 1
36794: PUSH
36795: LD_VAR 0 2
36799: MINUS
36800: PUSH
36801: LD_VAR 0 3
36805: PLUS
36806: ST_TO_ADDR
36807: GO 36825
// length := i_to - i_from ;
36809: LD_ADDR_VAR 0 11
36813: PUSH
36814: LD_VAR 0 3
36818: PUSH
36819: LD_VAR 0 2
36823: MINUS
36824: ST_TO_ADDR
// end else
36825: GO 36888
// begin d := - 1 ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: ST_TO_ADDR
// if i_from > i_to then
36836: LD_VAR 0 2
36840: PUSH
36841: LD_VAR 0 3
36845: GREATER
36846: IFFALSE 36866
// length := i_from - i_to else
36848: LD_ADDR_VAR 0 11
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_VAR 0 3
36862: MINUS
36863: ST_TO_ADDR
36864: GO 36888
// length := ( array - i_to ) + i_from ;
36866: LD_ADDR_VAR 0 11
36870: PUSH
36871: LD_VAR 0 1
36875: PUSH
36876: LD_VAR 0 3
36880: MINUS
36881: PUSH
36882: LD_VAR 0 2
36886: PLUS
36887: ST_TO_ADDR
// end ; if not length then
36888: LD_VAR 0 11
36892: NOT
36893: IFFALSE 36897
// exit ;
36895: GO 37055
// tmp := array ;
36897: LD_ADDR_VAR 0 10
36901: PUSH
36902: LD_VAR 0 1
36906: ST_TO_ADDR
// for i = 1 to length do
36907: LD_ADDR_VAR 0 6
36911: PUSH
36912: DOUBLE
36913: LD_INT 1
36915: DEC
36916: ST_TO_ADDR
36917: LD_VAR 0 11
36921: PUSH
36922: FOR_TO
36923: IFFALSE 37043
// begin for j = 1 to array do
36925: LD_ADDR_VAR 0 7
36929: PUSH
36930: DOUBLE
36931: LD_INT 1
36933: DEC
36934: ST_TO_ADDR
36935: LD_VAR 0 1
36939: PUSH
36940: FOR_TO
36941: IFFALSE 37029
// begin k := j + d ;
36943: LD_ADDR_VAR 0 8
36947: PUSH
36948: LD_VAR 0 7
36952: PUSH
36953: LD_VAR 0 9
36957: PLUS
36958: ST_TO_ADDR
// if k > array then
36959: LD_VAR 0 8
36963: PUSH
36964: LD_VAR 0 1
36968: GREATER
36969: IFFALSE 36979
// k := 1 ;
36971: LD_ADDR_VAR 0 8
36975: PUSH
36976: LD_INT 1
36978: ST_TO_ADDR
// if not k then
36979: LD_VAR 0 8
36983: NOT
36984: IFFALSE 36996
// k := array ;
36986: LD_ADDR_VAR 0 8
36990: PUSH
36991: LD_VAR 0 1
36995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36996: LD_ADDR_VAR 0 10
37000: PUSH
37001: LD_VAR 0 10
37005: PPUSH
37006: LD_VAR 0 8
37010: PPUSH
37011: LD_VAR 0 1
37015: PUSH
37016: LD_VAR 0 7
37020: ARRAY
37021: PPUSH
37022: CALL_OW 1
37026: ST_TO_ADDR
// end ;
37027: GO 36940
37029: POP
37030: POP
// array := tmp ;
37031: LD_ADDR_VAR 0 1
37035: PUSH
37036: LD_VAR 0 10
37040: ST_TO_ADDR
// end ;
37041: GO 36922
37043: POP
37044: POP
// result := array ;
37045: LD_ADDR_VAR 0 5
37049: PUSH
37050: LD_VAR 0 1
37054: ST_TO_ADDR
// end ;
37055: LD_VAR 0 5
37059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
// result := 0 ;
37064: LD_ADDR_VAR 0 3
37068: PUSH
37069: LD_INT 0
37071: ST_TO_ADDR
// if not array or not value in array then
37072: LD_VAR 0 1
37076: NOT
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 1
37087: IN
37088: NOT
37089: OR
37090: IFFALSE 37094
// exit ;
37092: GO 37148
// for i = 1 to array do
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: DOUBLE
37100: LD_INT 1
37102: DEC
37103: ST_TO_ADDR
37104: LD_VAR 0 1
37108: PUSH
37109: FOR_TO
37110: IFFALSE 37146
// if value = array [ i ] then
37112: LD_VAR 0 2
37116: PUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_VAR 0 4
37126: ARRAY
37127: EQUAL
37128: IFFALSE 37144
// begin result := i ;
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_VAR 0 4
37139: ST_TO_ADDR
// exit ;
37140: POP
37141: POP
37142: GO 37148
// end ;
37144: GO 37109
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 3
37152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37153: LD_INT 0
37155: PPUSH
// vc_chassis := chassis ;
37156: LD_ADDR_OWVAR 37
37160: PUSH
37161: LD_VAR 0 1
37165: ST_TO_ADDR
// vc_engine := engine ;
37166: LD_ADDR_OWVAR 39
37170: PUSH
37171: LD_VAR 0 2
37175: ST_TO_ADDR
// vc_control := control ;
37176: LD_ADDR_OWVAR 38
37180: PUSH
37181: LD_VAR 0 3
37185: ST_TO_ADDR
// vc_weapon := weapon ;
37186: LD_ADDR_OWVAR 40
37190: PUSH
37191: LD_VAR 0 4
37195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37196: LD_ADDR_OWVAR 41
37200: PUSH
37201: LD_VAR 0 5
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 6
37210: RET
// export function WantPlant ( unit ) ; var task ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
// result := false ;
37215: LD_ADDR_VAR 0 2
37219: PUSH
37220: LD_INT 0
37222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37223: LD_ADDR_VAR 0 3
37227: PUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 437
37237: ST_TO_ADDR
// if task then
37238: LD_VAR 0 3
37242: IFFALSE 37270
// if task [ 1 ] [ 1 ] = p then
37244: LD_VAR 0 3
37248: PUSH
37249: LD_INT 1
37251: ARRAY
37252: PUSH
37253: LD_INT 1
37255: ARRAY
37256: PUSH
37257: LD_STRING p
37259: EQUAL
37260: IFFALSE 37270
// result := true ;
37262: LD_ADDR_VAR 0 2
37266: PUSH
37267: LD_INT 1
37269: ST_TO_ADDR
// end ;
37270: LD_VAR 0 2
37274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37275: LD_INT 0
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
// if pos < 1 then
37281: LD_VAR 0 2
37285: PUSH
37286: LD_INT 1
37288: LESS
37289: IFFALSE 37293
// exit ;
37291: GO 37596
// if pos = 1 then
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 1
37300: EQUAL
37301: IFFALSE 37334
// result := Replace ( arr , pos [ 1 ] , value ) else
37303: LD_ADDR_VAR 0 4
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 1
37320: ARRAY
37321: PPUSH
37322: LD_VAR 0 3
37326: PPUSH
37327: CALL_OW 1
37331: ST_TO_ADDR
37332: GO 37596
// begin tmp := arr ;
37334: LD_ADDR_VAR 0 6
37338: PUSH
37339: LD_VAR 0 1
37343: ST_TO_ADDR
// s_arr := [ tmp ] ;
37344: LD_ADDR_VAR 0 7
37348: PUSH
37349: LD_VAR 0 6
37353: PUSH
37354: EMPTY
37355: LIST
37356: ST_TO_ADDR
// for i = 1 to pos - 1 do
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: DOUBLE
37363: LD_INT 1
37365: DEC
37366: ST_TO_ADDR
37367: LD_VAR 0 2
37371: PUSH
37372: LD_INT 1
37374: MINUS
37375: PUSH
37376: FOR_TO
37377: IFFALSE 37422
// begin tmp := tmp [ pos [ i ] ] ;
37379: LD_ADDR_VAR 0 6
37383: PUSH
37384: LD_VAR 0 6
37388: PUSH
37389: LD_VAR 0 2
37393: PUSH
37394: LD_VAR 0 5
37398: ARRAY
37399: ARRAY
37400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37401: LD_ADDR_VAR 0 7
37405: PUSH
37406: LD_VAR 0 7
37410: PUSH
37411: LD_VAR 0 6
37415: PUSH
37416: EMPTY
37417: LIST
37418: ADD
37419: ST_TO_ADDR
// end ;
37420: GO 37376
37422: POP
37423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37424: LD_ADDR_VAR 0 6
37428: PUSH
37429: LD_VAR 0 6
37433: PPUSH
37434: LD_VAR 0 2
37438: PUSH
37439: LD_VAR 0 2
37443: ARRAY
37444: PPUSH
37445: LD_VAR 0 3
37449: PPUSH
37450: CALL_OW 1
37454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37455: LD_ADDR_VAR 0 7
37459: PUSH
37460: LD_VAR 0 7
37464: PPUSH
37465: LD_VAR 0 7
37469: PPUSH
37470: LD_VAR 0 6
37474: PPUSH
37475: CALL_OW 1
37479: ST_TO_ADDR
// for i = s_arr downto 2 do
37480: LD_ADDR_VAR 0 5
37484: PUSH
37485: DOUBLE
37486: LD_VAR 0 7
37490: INC
37491: ST_TO_ADDR
37492: LD_INT 2
37494: PUSH
37495: FOR_DOWNTO
37496: IFFALSE 37580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37498: LD_ADDR_VAR 0 6
37502: PUSH
37503: LD_VAR 0 7
37507: PUSH
37508: LD_VAR 0 5
37512: PUSH
37513: LD_INT 1
37515: MINUS
37516: ARRAY
37517: PPUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: LD_INT 1
37530: MINUS
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 7
37537: PUSH
37538: LD_VAR 0 5
37542: ARRAY
37543: PPUSH
37544: CALL_OW 1
37548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37549: LD_ADDR_VAR 0 7
37553: PUSH
37554: LD_VAR 0 7
37558: PPUSH
37559: LD_VAR 0 5
37563: PUSH
37564: LD_INT 1
37566: MINUS
37567: PPUSH
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 1
37577: ST_TO_ADDR
// end ;
37578: GO 37495
37580: POP
37581: POP
// result := s_arr [ 1 ] ;
37582: LD_ADDR_VAR 0 4
37586: PUSH
37587: LD_VAR 0 7
37591: PUSH
37592: LD_INT 1
37594: ARRAY
37595: ST_TO_ADDR
// end ; end ;
37596: LD_VAR 0 4
37600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37601: LD_INT 0
37603: PPUSH
37604: PPUSH
// if not list then
37605: LD_VAR 0 1
37609: NOT
37610: IFFALSE 37614
// exit ;
37612: GO 37705
// i := list [ pos1 ] ;
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: LD_VAR 0 1
37623: PUSH
37624: LD_VAR 0 2
37628: ARRAY
37629: ST_TO_ADDR
// if not i then
37630: LD_VAR 0 5
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37639: LD_ADDR_VAR 0 1
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: LD_VAR 0 1
37658: PUSH
37659: LD_VAR 0 3
37663: ARRAY
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37670: LD_ADDR_VAR 0 1
37674: PUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: LD_VAR 0 5
37689: PPUSH
37690: CALL_OW 1
37694: ST_TO_ADDR
// result := list ;
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_VAR 0 1
37704: ST_TO_ADDR
// end ;
37705: LD_VAR 0 4
37709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37710: LD_INT 0
37712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 250
37727: PPUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 251
37737: PPUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: CALL 37763 0 5
37757: ST_TO_ADDR
// end ;
37758: LD_VAR 0 5
37762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37763: LD_INT 0
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
// if not list then
37769: LD_VAR 0 3
37773: NOT
37774: IFFALSE 37778
// exit ;
37776: GO 38166
// result := [ ] ;
37778: LD_ADDR_VAR 0 6
37782: PUSH
37783: EMPTY
37784: ST_TO_ADDR
// for i in list do
37785: LD_ADDR_VAR 0 7
37789: PUSH
37790: LD_VAR 0 3
37794: PUSH
37795: FOR_IN
37796: IFFALSE 37998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37798: LD_ADDR_VAR 0 9
37802: PUSH
37803: LD_VAR 0 7
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: LD_VAR 0 2
37817: PPUSH
37818: CALL_OW 297
37822: ST_TO_ADDR
// if not result then
37823: LD_VAR 0 6
37827: NOT
37828: IFFALSE 37854
// result := [ [ i , tmp ] ] else
37830: LD_ADDR_VAR 0 6
37834: PUSH
37835: LD_VAR 0 7
37839: PUSH
37840: LD_VAR 0 9
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: ST_TO_ADDR
37852: GO 37996
// begin if result [ result ] [ 2 ] < tmp then
37854: LD_VAR 0 6
37858: PUSH
37859: LD_VAR 0 6
37863: ARRAY
37864: PUSH
37865: LD_INT 2
37867: ARRAY
37868: PUSH
37869: LD_VAR 0 9
37873: LESS
37874: IFFALSE 37916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37876: LD_ADDR_VAR 0 6
37880: PUSH
37881: LD_VAR 0 6
37885: PPUSH
37886: LD_VAR 0 6
37890: PUSH
37891: LD_INT 1
37893: PLUS
37894: PPUSH
37895: LD_VAR 0 7
37899: PUSH
37900: LD_VAR 0 9
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PPUSH
37909: CALL_OW 2
37913: ST_TO_ADDR
37914: GO 37996
// for j = 1 to result do
37916: LD_ADDR_VAR 0 8
37920: PUSH
37921: DOUBLE
37922: LD_INT 1
37924: DEC
37925: ST_TO_ADDR
37926: LD_VAR 0 6
37930: PUSH
37931: FOR_TO
37932: IFFALSE 37994
// begin if tmp < result [ j ] [ 2 ] then
37934: LD_VAR 0 9
37938: PUSH
37939: LD_VAR 0 6
37943: PUSH
37944: LD_VAR 0 8
37948: ARRAY
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: LESS
37954: IFFALSE 37992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37956: LD_ADDR_VAR 0 6
37960: PUSH
37961: LD_VAR 0 6
37965: PPUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: LD_VAR 0 7
37975: PUSH
37976: LD_VAR 0 9
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PPUSH
37985: CALL_OW 2
37989: ST_TO_ADDR
// break ;
37990: GO 37994
// end ; end ;
37992: GO 37931
37994: POP
37995: POP
// end ; end ;
37996: GO 37795
37998: POP
37999: POP
// if result and not asc then
38000: LD_VAR 0 6
38004: PUSH
38005: LD_VAR 0 4
38009: NOT
38010: AND
38011: IFFALSE 38086
// begin tmp := result ;
38013: LD_ADDR_VAR 0 9
38017: PUSH
38018: LD_VAR 0 6
38022: ST_TO_ADDR
// for i = tmp downto 1 do
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: DOUBLE
38029: LD_VAR 0 9
38033: INC
38034: ST_TO_ADDR
38035: LD_INT 1
38037: PUSH
38038: FOR_DOWNTO
38039: IFFALSE 38084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38041: LD_ADDR_VAR 0 6
38045: PUSH
38046: LD_VAR 0 6
38050: PPUSH
38051: LD_VAR 0 9
38055: PUSH
38056: LD_VAR 0 7
38060: MINUS
38061: PUSH
38062: LD_INT 1
38064: PLUS
38065: PPUSH
38066: LD_VAR 0 9
38070: PUSH
38071: LD_VAR 0 7
38075: ARRAY
38076: PPUSH
38077: CALL_OW 1
38081: ST_TO_ADDR
38082: GO 38038
38084: POP
38085: POP
// end ; tmp := [ ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: EMPTY
38092: ST_TO_ADDR
// if mode then
38093: LD_VAR 0 5
38097: IFFALSE 38166
// begin for i = 1 to result do
38099: LD_ADDR_VAR 0 7
38103: PUSH
38104: DOUBLE
38105: LD_INT 1
38107: DEC
38108: ST_TO_ADDR
38109: LD_VAR 0 6
38113: PUSH
38114: FOR_TO
38115: IFFALSE 38154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38117: LD_ADDR_VAR 0 9
38121: PUSH
38122: LD_VAR 0 9
38126: PPUSH
38127: LD_VAR 0 7
38131: PPUSH
38132: LD_VAR 0 6
38136: PUSH
38137: LD_VAR 0 7
38141: ARRAY
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PPUSH
38147: CALL_OW 1
38151: ST_TO_ADDR
38152: GO 38114
38154: POP
38155: POP
// result := tmp ;
38156: LD_ADDR_VAR 0 6
38160: PUSH
38161: LD_VAR 0 9
38165: ST_TO_ADDR
// end ; end ;
38166: LD_VAR 0 6
38170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38171: LD_INT 0
38173: PPUSH
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38179: LD_ADDR_VAR 0 5
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// if not x or not y then
38201: LD_VAR 0 2
38205: NOT
38206: PUSH
38207: LD_VAR 0 3
38211: NOT
38212: OR
38213: IFFALSE 38217
// exit ;
38215: GO 39863
// if not range then
38217: LD_VAR 0 4
38221: NOT
38222: IFFALSE 38232
// range := 10 ;
38224: LD_ADDR_VAR 0 4
38228: PUSH
38229: LD_INT 10
38231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38232: LD_ADDR_VAR 0 8
38236: PUSH
38237: LD_INT 81
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 92
38251: PUSH
38252: LD_VAR 0 2
38256: PUSH
38257: LD_VAR 0 3
38261: PUSH
38262: LD_VAR 0 4
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: LD_INT 21
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: PPUSH
38295: CALL_OW 69
38299: ST_TO_ADDR
// if not tmp then
38300: LD_VAR 0 8
38304: NOT
38305: IFFALSE 38309
// exit ;
38307: GO 39863
// for i in tmp do
38309: LD_ADDR_VAR 0 6
38313: PUSH
38314: LD_VAR 0 8
38318: PUSH
38319: FOR_IN
38320: IFFALSE 39838
// begin points := [ 0 , 0 , 0 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// bpoints := 1 ;
38341: LD_ADDR_VAR 0 10
38345: PUSH
38346: LD_INT 1
38348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38349: LD_VAR 0 6
38353: PPUSH
38354: CALL_OW 247
38358: PUSH
38359: LD_INT 1
38361: DOUBLE
38362: EQUAL
38363: IFTRUE 38367
38365: GO 38945
38367: POP
// begin if GetClass ( i ) = 1 then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 257
38377: PUSH
38378: LD_INT 1
38380: EQUAL
38381: IFFALSE 38402
// points := [ 10 , 5 , 3 ] ;
38383: LD_ADDR_VAR 0 9
38387: PUSH
38388: LD_INT 10
38390: PUSH
38391: LD_INT 5
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38402: LD_VAR 0 6
38406: PPUSH
38407: CALL_OW 257
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: IN
38426: IFFALSE 38447
// points := [ 3 , 2 , 1 ] ;
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 257
38456: PUSH
38457: LD_INT 5
38459: EQUAL
38460: IFFALSE 38481
// points := [ 130 , 5 , 2 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 130
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 257
38490: PUSH
38491: LD_INT 8
38493: EQUAL
38494: IFFALSE 38515
// points := [ 35 , 35 , 30 ] ;
38496: LD_ADDR_VAR 0 9
38500: PUSH
38501: LD_INT 35
38503: PUSH
38504: LD_INT 35
38506: PUSH
38507: LD_INT 30
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38515: LD_VAR 0 6
38519: PPUSH
38520: CALL_OW 257
38524: PUSH
38525: LD_INT 9
38527: EQUAL
38528: IFFALSE 38549
// points := [ 20 , 55 , 40 ] ;
38530: LD_ADDR_VAR 0 9
38534: PUSH
38535: LD_INT 20
38537: PUSH
38538: LD_INT 55
38540: PUSH
38541: LD_INT 40
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38549: LD_VAR 0 6
38553: PPUSH
38554: CALL_OW 257
38558: PUSH
38559: LD_INT 12
38561: PUSH
38562: LD_INT 16
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: IN
38569: IFFALSE 38590
// points := [ 5 , 3 , 2 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 5
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 257
38599: PUSH
38600: LD_INT 17
38602: EQUAL
38603: IFFALSE 38624
// points := [ 100 , 50 , 75 ] ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_INT 100
38612: PUSH
38613: LD_INT 50
38615: PUSH
38616: LD_INT 75
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38624: LD_VAR 0 6
38628: PPUSH
38629: CALL_OW 257
38633: PUSH
38634: LD_INT 15
38636: EQUAL
38637: IFFALSE 38658
// points := [ 10 , 5 , 3 ] ;
38639: LD_ADDR_VAR 0 9
38643: PUSH
38644: LD_INT 10
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38658: LD_VAR 0 6
38662: PPUSH
38663: CALL_OW 257
38667: PUSH
38668: LD_INT 14
38670: EQUAL
38671: IFFALSE 38692
// points := [ 10 , 0 , 0 ] ;
38673: LD_ADDR_VAR 0 9
38677: PUSH
38678: LD_INT 10
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 257
38701: PUSH
38702: LD_INT 11
38704: EQUAL
38705: IFFALSE 38726
// points := [ 30 , 10 , 5 ] ;
38707: LD_ADDR_VAR 0 9
38711: PUSH
38712: LD_INT 30
38714: PUSH
38715: LD_INT 10
38717: PUSH
38718: LD_INT 5
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38726: LD_VAR 0 1
38730: PPUSH
38731: LD_INT 5
38733: PPUSH
38734: CALL_OW 321
38738: PUSH
38739: LD_INT 2
38741: EQUAL
38742: IFFALSE 38759
// bpoints := bpoints * 1.8 ;
38744: LD_ADDR_VAR 0 10
38748: PUSH
38749: LD_VAR 0 10
38753: PUSH
38754: LD_REAL  1.80000000000000E+0000
38757: MUL
38758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38759: LD_VAR 0 6
38763: PPUSH
38764: CALL_OW 257
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: IN
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_INT 51
38795: PPUSH
38796: CALL_OW 321
38800: PUSH
38801: LD_INT 2
38803: EQUAL
38804: AND
38805: IFFALSE 38822
// bpoints := bpoints * 1.2 ;
38807: LD_ADDR_VAR 0 10
38811: PUSH
38812: LD_VAR 0 10
38816: PUSH
38817: LD_REAL  1.20000000000000E+0000
38820: MUL
38821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38822: LD_VAR 0 6
38826: PPUSH
38827: CALL_OW 257
38831: PUSH
38832: LD_INT 5
38834: PUSH
38835: LD_INT 7
38837: PUSH
38838: LD_INT 9
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: IN
38846: PUSH
38847: LD_VAR 0 1
38851: PPUSH
38852: LD_INT 52
38854: PPUSH
38855: CALL_OW 321
38859: PUSH
38860: LD_INT 2
38862: EQUAL
38863: AND
38864: IFFALSE 38881
// bpoints := bpoints * 1.5 ;
38866: LD_ADDR_VAR 0 10
38870: PUSH
38871: LD_VAR 0 10
38875: PUSH
38876: LD_REAL  1.50000000000000E+0000
38879: MUL
38880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38881: LD_VAR 0 1
38885: PPUSH
38886: LD_INT 66
38888: PPUSH
38889: CALL_OW 321
38893: PUSH
38894: LD_INT 2
38896: EQUAL
38897: IFFALSE 38914
// bpoints := bpoints * 1.1 ;
38899: LD_ADDR_VAR 0 10
38903: PUSH
38904: LD_VAR 0 10
38908: PUSH
38909: LD_REAL  1.10000000000000E+0000
38912: MUL
38913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38914: LD_ADDR_VAR 0 10
38918: PUSH
38919: LD_VAR 0 10
38923: PUSH
38924: LD_VAR 0 6
38928: PPUSH
38929: LD_INT 1
38931: PPUSH
38932: CALL_OW 259
38936: PUSH
38937: LD_REAL  1.15000000000000E+0000
38940: MUL
38941: MUL
38942: ST_TO_ADDR
// end ; unit_vehicle :
38943: GO 39767
38945: LD_INT 2
38947: DOUBLE
38948: EQUAL
38949: IFTRUE 38953
38951: GO 39755
38953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38954: LD_VAR 0 6
38958: PPUSH
38959: CALL_OW 264
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 42
38969: PUSH
38970: LD_INT 24
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: IN
38978: IFFALSE 38999
// points := [ 25 , 5 , 3 ] ;
38980: LD_ADDR_VAR 0 9
38984: PUSH
38985: LD_INT 25
38987: PUSH
38988: LD_INT 5
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38999: LD_VAR 0 6
39003: PPUSH
39004: CALL_OW 264
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: LD_INT 43
39014: PUSH
39015: LD_INT 25
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: IN
39023: IFFALSE 39044
// points := [ 40 , 15 , 5 ] ;
39025: LD_ADDR_VAR 0 9
39029: PUSH
39030: LD_INT 40
39032: PUSH
39033: LD_INT 15
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39044: LD_VAR 0 6
39048: PPUSH
39049: CALL_OW 264
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: LD_INT 23
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: IN
39064: IFFALSE 39085
// points := [ 7 , 25 , 8 ] ;
39066: LD_ADDR_VAR 0 9
39070: PUSH
39071: LD_INT 7
39073: PUSH
39074: LD_INT 25
39076: PUSH
39077: LD_INT 8
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39085: LD_VAR 0 6
39089: PPUSH
39090: CALL_OW 264
39094: PUSH
39095: LD_INT 5
39097: PUSH
39098: LD_INT 27
39100: PUSH
39101: LD_INT 44
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: IN
39109: IFFALSE 39130
// points := [ 14 , 50 , 16 ] ;
39111: LD_ADDR_VAR 0 9
39115: PUSH
39116: LD_INT 14
39118: PUSH
39119: LD_INT 50
39121: PUSH
39122: LD_INT 16
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 264
39139: PUSH
39140: LD_INT 6
39142: PUSH
39143: LD_INT 46
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: IN
39150: IFFALSE 39171
// points := [ 32 , 120 , 70 ] ;
39152: LD_ADDR_VAR 0 9
39156: PUSH
39157: LD_INT 32
39159: PUSH
39160: LD_INT 120
39162: PUSH
39163: LD_INT 70
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39171: LD_VAR 0 6
39175: PPUSH
39176: CALL_OW 264
39180: PUSH
39181: LD_INT 7
39183: PUSH
39184: LD_INT 28
39186: PUSH
39187: LD_INT 45
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: IN
39195: IFFALSE 39216
// points := [ 35 , 20 , 45 ] ;
39197: LD_ADDR_VAR 0 9
39201: PUSH
39202: LD_INT 35
39204: PUSH
39205: LD_INT 20
39207: PUSH
39208: LD_INT 45
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39216: LD_VAR 0 6
39220: PPUSH
39221: CALL_OW 264
39225: PUSH
39226: LD_INT 47
39228: PUSH
39229: EMPTY
39230: LIST
39231: IN
39232: IFFALSE 39253
// points := [ 67 , 45 , 75 ] ;
39234: LD_ADDR_VAR 0 9
39238: PUSH
39239: LD_INT 67
39241: PUSH
39242: LD_INT 45
39244: PUSH
39245: LD_INT 75
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39253: LD_VAR 0 6
39257: PPUSH
39258: CALL_OW 264
39262: PUSH
39263: LD_INT 26
39265: PUSH
39266: EMPTY
39267: LIST
39268: IN
39269: IFFALSE 39290
// points := [ 120 , 30 , 80 ] ;
39271: LD_ADDR_VAR 0 9
39275: PUSH
39276: LD_INT 120
39278: PUSH
39279: LD_INT 30
39281: PUSH
39282: LD_INT 80
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39290: LD_VAR 0 6
39294: PPUSH
39295: CALL_OW 264
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: EMPTY
39304: LIST
39305: IN
39306: IFFALSE 39327
// points := [ 40 , 1 , 1 ] ;
39308: LD_ADDR_VAR 0 9
39312: PUSH
39313: LD_INT 40
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39327: LD_VAR 0 6
39331: PPUSH
39332: CALL_OW 264
39336: PUSH
39337: LD_INT 29
39339: PUSH
39340: EMPTY
39341: LIST
39342: IN
39343: IFFALSE 39364
// points := [ 70 , 200 , 400 ] ;
39345: LD_ADDR_VAR 0 9
39349: PUSH
39350: LD_INT 70
39352: PUSH
39353: LD_INT 200
39355: PUSH
39356: LD_INT 400
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39364: LD_VAR 0 6
39368: PPUSH
39369: CALL_OW 264
39373: PUSH
39374: LD_INT 14
39376: PUSH
39377: LD_INT 53
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: IN
39384: IFFALSE 39405
// points := [ 40 , 10 , 20 ] ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_INT 40
39393: PUSH
39394: LD_INT 10
39396: PUSH
39397: LD_INT 20
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39405: LD_VAR 0 6
39409: PPUSH
39410: CALL_OW 264
39414: PUSH
39415: LD_INT 9
39417: PUSH
39418: EMPTY
39419: LIST
39420: IN
39421: IFFALSE 39442
// points := [ 5 , 70 , 20 ] ;
39423: LD_ADDR_VAR 0 9
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: LD_INT 70
39433: PUSH
39434: LD_INT 20
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39442: LD_VAR 0 6
39446: PPUSH
39447: CALL_OW 264
39451: PUSH
39452: LD_INT 10
39454: PUSH
39455: EMPTY
39456: LIST
39457: IN
39458: IFFALSE 39479
// points := [ 35 , 110 , 70 ] ;
39460: LD_ADDR_VAR 0 9
39464: PUSH
39465: LD_INT 35
39467: PUSH
39468: LD_INT 110
39470: PUSH
39471: LD_INT 70
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39479: LD_VAR 0 6
39483: PPUSH
39484: CALL_OW 265
39488: PUSH
39489: LD_INT 25
39491: EQUAL
39492: IFFALSE 39513
// points := [ 80 , 65 , 100 ] ;
39494: LD_ADDR_VAR 0 9
39498: PUSH
39499: LD_INT 80
39501: PUSH
39502: LD_INT 65
39504: PUSH
39505: LD_INT 100
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39513: LD_VAR 0 6
39517: PPUSH
39518: CALL_OW 263
39522: PUSH
39523: LD_INT 1
39525: EQUAL
39526: IFFALSE 39561
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39528: LD_ADDR_VAR 0 10
39532: PUSH
39533: LD_VAR 0 10
39537: PUSH
39538: LD_VAR 0 6
39542: PPUSH
39543: CALL_OW 311
39547: PPUSH
39548: LD_INT 3
39550: PPUSH
39551: CALL_OW 259
39555: PUSH
39556: LD_INT 4
39558: MUL
39559: MUL
39560: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39561: LD_VAR 0 6
39565: PPUSH
39566: CALL_OW 263
39570: PUSH
39571: LD_INT 2
39573: EQUAL
39574: IFFALSE 39625
// begin j := IsControledBy ( i ) ;
39576: LD_ADDR_VAR 0 7
39580: PUSH
39581: LD_VAR 0 6
39585: PPUSH
39586: CALL_OW 312
39590: ST_TO_ADDR
// if j then
39591: LD_VAR 0 7
39595: IFFALSE 39625
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39597: LD_ADDR_VAR 0 10
39601: PUSH
39602: LD_VAR 0 10
39606: PUSH
39607: LD_VAR 0 7
39611: PPUSH
39612: LD_INT 3
39614: PPUSH
39615: CALL_OW 259
39619: PUSH
39620: LD_INT 3
39622: MUL
39623: MUL
39624: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39625: LD_VAR 0 6
39629: PPUSH
39630: CALL_OW 264
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: LD_INT 6
39640: PUSH
39641: LD_INT 46
39643: PUSH
39644: LD_INT 44
39646: PUSH
39647: LD_INT 47
39649: PUSH
39650: LD_INT 45
39652: PUSH
39653: LD_INT 28
39655: PUSH
39656: LD_INT 7
39658: PUSH
39659: LD_INT 27
39661: PUSH
39662: LD_INT 29
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: IN
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_INT 52
39685: PPUSH
39686: CALL_OW 321
39690: PUSH
39691: LD_INT 2
39693: EQUAL
39694: AND
39695: IFFALSE 39712
// bpoints := bpoints * 1.2 ;
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: LD_VAR 0 10
39706: PUSH
39707: LD_REAL  1.20000000000000E+0000
39710: MUL
39711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39712: LD_VAR 0 6
39716: PPUSH
39717: CALL_OW 264
39721: PUSH
39722: LD_INT 6
39724: PUSH
39725: LD_INT 46
39727: PUSH
39728: LD_INT 47
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: IN
39736: IFFALSE 39753
// bpoints := bpoints * 1.2 ;
39738: LD_ADDR_VAR 0 10
39742: PUSH
39743: LD_VAR 0 10
39747: PUSH
39748: LD_REAL  1.20000000000000E+0000
39751: MUL
39752: ST_TO_ADDR
// end ; unit_building :
39753: GO 39767
39755: LD_INT 3
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39763
39761: GO 39766
39763: POP
// ; end ;
39764: GO 39767
39766: POP
// for j = 1 to 3 do
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: DOUBLE
39773: LD_INT 1
39775: DEC
39776: ST_TO_ADDR
39777: LD_INT 3
39779: PUSH
39780: FOR_TO
39781: IFFALSE 39834
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_VAR 0 5
39792: PPUSH
39793: LD_VAR 0 7
39797: PPUSH
39798: LD_VAR 0 5
39802: PUSH
39803: LD_VAR 0 7
39807: ARRAY
39808: PUSH
39809: LD_VAR 0 9
39813: PUSH
39814: LD_VAR 0 7
39818: ARRAY
39819: PUSH
39820: LD_VAR 0 10
39824: MUL
39825: PLUS
39826: PPUSH
39827: CALL_OW 1
39831: ST_TO_ADDR
39832: GO 39780
39834: POP
39835: POP
// end ;
39836: GO 38319
39838: POP
39839: POP
// result := Replace ( result , 4 , tmp ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: LD_INT 4
39852: PPUSH
39853: LD_VAR 0 8
39857: PPUSH
39858: CALL_OW 1
39862: ST_TO_ADDR
// end ;
39863: LD_VAR 0 5
39867: RET
// export function DangerAtRange ( unit , range ) ; begin
39868: LD_INT 0
39870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 255
39885: PPUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 250
39895: PPUSH
39896: LD_VAR 0 1
39900: PPUSH
39901: CALL_OW 251
39905: PPUSH
39906: LD_VAR 0 2
39910: PPUSH
39911: CALL 38171 0 4
39915: ST_TO_ADDR
// end ;
39916: LD_VAR 0 3
39920: RET
// export function DangerInArea ( side , area ) ; begin
39921: LD_INT 0
39923: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_VAR 0 2
39933: PPUSH
39934: LD_INT 81
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PPUSH
39946: CALL_OW 70
39950: ST_TO_ADDR
// end ;
39951: LD_VAR 0 3
39955: RET
// export function IsExtension ( b ) ; begin
39956: LD_INT 0
39958: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39959: LD_ADDR_VAR 0 2
39963: PUSH
39964: LD_VAR 0 1
39968: PUSH
39969: LD_INT 23
39971: PUSH
39972: LD_INT 20
39974: PUSH
39975: LD_INT 22
39977: PUSH
39978: LD_INT 17
39980: PUSH
39981: LD_INT 24
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 19
39989: PUSH
39990: LD_INT 16
39992: PUSH
39993: LD_INT 25
39995: PUSH
39996: LD_INT 18
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: IN
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 2
40016: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
// result := [ ] ;
40022: LD_ADDR_VAR 0 3
40026: PUSH
40027: EMPTY
40028: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40029: LD_ADDR_VAR 0 4
40033: PUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: LD_INT 21
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PPUSH
40049: CALL_OW 70
40053: ST_TO_ADDR
// if not tmp then
40054: LD_VAR 0 4
40058: NOT
40059: IFFALSE 40063
// exit ;
40061: GO 40121
// for i in tmp do
40063: LD_ADDR_VAR 0 5
40067: PUSH
40068: LD_VAR 0 4
40072: PUSH
40073: FOR_IN
40074: IFFALSE 40109
// if GetBase ( i ) <> base then
40076: LD_VAR 0 5
40080: PPUSH
40081: CALL_OW 274
40085: PUSH
40086: LD_VAR 0 1
40090: NONEQUAL
40091: IFFALSE 40107
// ComLinkToBase ( base , i ) ;
40093: LD_VAR 0 1
40097: PPUSH
40098: LD_VAR 0 5
40102: PPUSH
40103: CALL_OW 169
40107: GO 40073
40109: POP
40110: POP
// result := tmp ;
40111: LD_ADDR_VAR 0 3
40115: PUSH
40116: LD_VAR 0 4
40120: ST_TO_ADDR
// end ;
40121: LD_VAR 0 3
40125: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40126: LD_INT 0
40128: PPUSH
40129: PPUSH
// if BuildingStatus ( b ) = bs_build then
40130: LD_VAR 0 2
40134: PPUSH
40135: CALL_OW 461
40139: PUSH
40140: LD_INT 1
40142: EQUAL
40143: IFFALSE 40203
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40145: LD_VAR 0 1
40149: PPUSH
40150: LD_STRING h
40152: PUSH
40153: LD_VAR 0 2
40157: PPUSH
40158: CALL_OW 250
40162: PUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: CALL_OW 251
40172: PUSH
40173: LD_VAR 0 2
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: PPUSH
40199: CALL_OW 446
// end ;
40203: LD_VAR 0 3
40207: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40208: LD_INT 0
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
40215: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40216: LD_VAR 0 1
40220: NOT
40221: PUSH
40222: LD_VAR 0 1
40226: PPUSH
40227: CALL_OW 263
40231: PUSH
40232: LD_INT 2
40234: EQUAL
40235: NOT
40236: OR
40237: IFFALSE 40241
// exit ;
40239: GO 40557
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40241: LD_ADDR_VAR 0 6
40245: PUSH
40246: LD_INT 22
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 255
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 30
40268: PUSH
40269: LD_INT 36
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 34
40278: PUSH
40279: LD_INT 31
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PPUSH
40295: CALL_OW 69
40299: ST_TO_ADDR
// if not tmp then
40300: LD_VAR 0 6
40304: NOT
40305: IFFALSE 40309
// exit ;
40307: GO 40557
// result := [ ] ;
40309: LD_ADDR_VAR 0 2
40313: PUSH
40314: EMPTY
40315: ST_TO_ADDR
// for i in tmp do
40316: LD_ADDR_VAR 0 3
40320: PUSH
40321: LD_VAR 0 6
40325: PUSH
40326: FOR_IN
40327: IFFALSE 40398
// begin t := UnitsInside ( i ) ;
40329: LD_ADDR_VAR 0 4
40333: PUSH
40334: LD_VAR 0 3
40338: PPUSH
40339: CALL_OW 313
40343: ST_TO_ADDR
// if t then
40344: LD_VAR 0 4
40348: IFFALSE 40396
// for j in t do
40350: LD_ADDR_VAR 0 7
40354: PUSH
40355: LD_VAR 0 4
40359: PUSH
40360: FOR_IN
40361: IFFALSE 40394
// result := Insert ( result , result + 1 , j ) ;
40363: LD_ADDR_VAR 0 2
40367: PUSH
40368: LD_VAR 0 2
40372: PPUSH
40373: LD_VAR 0 2
40377: PUSH
40378: LD_INT 1
40380: PLUS
40381: PPUSH
40382: LD_VAR 0 7
40386: PPUSH
40387: CALL_OW 2
40391: ST_TO_ADDR
40392: GO 40360
40394: POP
40395: POP
// end ;
40396: GO 40326
40398: POP
40399: POP
// if not result then
40400: LD_VAR 0 2
40404: NOT
40405: IFFALSE 40409
// exit ;
40407: GO 40557
// mech := result [ 1 ] ;
40409: LD_ADDR_VAR 0 5
40413: PUSH
40414: LD_VAR 0 2
40418: PUSH
40419: LD_INT 1
40421: ARRAY
40422: ST_TO_ADDR
// if result > 1 then
40423: LD_VAR 0 2
40427: PUSH
40428: LD_INT 1
40430: GREATER
40431: IFFALSE 40543
// for i = 2 to result do
40433: LD_ADDR_VAR 0 3
40437: PUSH
40438: DOUBLE
40439: LD_INT 2
40441: DEC
40442: ST_TO_ADDR
40443: LD_VAR 0 2
40447: PUSH
40448: FOR_TO
40449: IFFALSE 40541
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40451: LD_ADDR_VAR 0 4
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_VAR 0 3
40465: ARRAY
40466: PPUSH
40467: LD_INT 3
40469: PPUSH
40470: CALL_OW 259
40474: PUSH
40475: LD_VAR 0 2
40479: PUSH
40480: LD_VAR 0 3
40484: ARRAY
40485: PPUSH
40486: CALL_OW 432
40490: MINUS
40491: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40492: LD_VAR 0 4
40496: PUSH
40497: LD_VAR 0 5
40501: PPUSH
40502: LD_INT 3
40504: PPUSH
40505: CALL_OW 259
40509: PUSH
40510: LD_VAR 0 5
40514: PPUSH
40515: CALL_OW 432
40519: MINUS
40520: GREATEREQUAL
40521: IFFALSE 40539
// mech := result [ i ] ;
40523: LD_ADDR_VAR 0 5
40527: PUSH
40528: LD_VAR 0 2
40532: PUSH
40533: LD_VAR 0 3
40537: ARRAY
40538: ST_TO_ADDR
// end ;
40539: GO 40448
40541: POP
40542: POP
// ComLinkTo ( vehicle , mech ) ;
40543: LD_VAR 0 1
40547: PPUSH
40548: LD_VAR 0 5
40552: PPUSH
40553: CALL_OW 135
// end ;
40557: LD_VAR 0 2
40561: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40562: LD_INT 0
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
// result := [ ] ;
40577: LD_ADDR_VAR 0 7
40581: PUSH
40582: EMPTY
40583: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 266
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: IN
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 42240
// if name then
40609: LD_VAR 0 3
40613: IFFALSE 40629
// SetBName ( base_dep , name ) ;
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_VAR 0 3
40624: PPUSH
40625: CALL_OW 500
// base := GetBase ( base_dep ) ;
40629: LD_ADDR_VAR 0 15
40633: PUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 274
40643: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40644: LD_ADDR_VAR 0 16
40648: PUSH
40649: LD_VAR 0 1
40653: PPUSH
40654: CALL_OW 255
40658: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40659: LD_ADDR_VAR 0 17
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 248
40673: ST_TO_ADDR
// if sources then
40674: LD_VAR 0 5
40678: IFFALSE 40725
// for i = 1 to 3 do
40680: LD_ADDR_VAR 0 8
40684: PUSH
40685: DOUBLE
40686: LD_INT 1
40688: DEC
40689: ST_TO_ADDR
40690: LD_INT 3
40692: PUSH
40693: FOR_TO
40694: IFFALSE 40723
// AddResourceType ( base , i , sources [ i ] ) ;
40696: LD_VAR 0 15
40700: PPUSH
40701: LD_VAR 0 8
40705: PPUSH
40706: LD_VAR 0 5
40710: PUSH
40711: LD_VAR 0 8
40715: ARRAY
40716: PPUSH
40717: CALL_OW 276
40721: GO 40693
40723: POP
40724: POP
// buildings := GetBaseBuildings ( base , area ) ;
40725: LD_ADDR_VAR 0 18
40729: PUSH
40730: LD_VAR 0 15
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: CALL 40017 0 2
40744: ST_TO_ADDR
// InitHc ;
40745: CALL_OW 19
// InitUc ;
40749: CALL_OW 18
// uc_side := side ;
40753: LD_ADDR_OWVAR 20
40757: PUSH
40758: LD_VAR 0 16
40762: ST_TO_ADDR
// uc_nation := nation ;
40763: LD_ADDR_OWVAR 21
40767: PUSH
40768: LD_VAR 0 17
40772: ST_TO_ADDR
// if buildings then
40773: LD_VAR 0 18
40777: IFFALSE 42099
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40779: LD_ADDR_VAR 0 19
40783: PUSH
40784: LD_VAR 0 18
40788: PPUSH
40789: LD_INT 2
40791: PUSH
40792: LD_INT 30
40794: PUSH
40795: LD_INT 29
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 30
40804: PUSH
40805: LD_INT 30
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: PPUSH
40817: CALL_OW 72
40821: ST_TO_ADDR
// if tmp then
40822: LD_VAR 0 19
40826: IFFALSE 40874
// for i in tmp do
40828: LD_ADDR_VAR 0 8
40832: PUSH
40833: LD_VAR 0 19
40837: PUSH
40838: FOR_IN
40839: IFFALSE 40872
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40841: LD_VAR 0 8
40845: PPUSH
40846: CALL_OW 250
40850: PPUSH
40851: LD_VAR 0 8
40855: PPUSH
40856: CALL_OW 251
40860: PPUSH
40861: LD_VAR 0 16
40865: PPUSH
40866: CALL_OW 441
40870: GO 40838
40872: POP
40873: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40874: LD_VAR 0 18
40878: PPUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 30
40884: PUSH
40885: LD_INT 32
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 30
40894: PUSH
40895: LD_INT 33
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: PPUSH
40907: CALL_OW 72
40911: IFFALSE 40999
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40913: LD_ADDR_VAR 0 8
40917: PUSH
40918: LD_VAR 0 18
40922: PPUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 30
40928: PUSH
40929: LD_INT 32
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 30
40938: PUSH
40939: LD_INT 33
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: PPUSH
40951: CALL_OW 72
40955: PUSH
40956: FOR_IN
40957: IFFALSE 40997
// begin if not GetBWeapon ( i ) then
40959: LD_VAR 0 8
40963: PPUSH
40964: CALL_OW 269
40968: NOT
40969: IFFALSE 40995
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40971: LD_VAR 0 8
40975: PPUSH
40976: LD_VAR 0 8
40980: PPUSH
40981: LD_VAR 0 2
40985: PPUSH
40986: CALL 42245 0 2
40990: PPUSH
40991: CALL_OW 431
// end ;
40995: GO 40956
40997: POP
40998: POP
// end ; for i = 1 to personel do
40999: LD_ADDR_VAR 0 8
41003: PUSH
41004: DOUBLE
41005: LD_INT 1
41007: DEC
41008: ST_TO_ADDR
41009: LD_VAR 0 6
41013: PUSH
41014: FOR_TO
41015: IFFALSE 42079
// begin if i > 4 then
41017: LD_VAR 0 8
41021: PUSH
41022: LD_INT 4
41024: GREATER
41025: IFFALSE 41029
// break ;
41027: GO 42079
// case i of 1 :
41029: LD_VAR 0 8
41033: PUSH
41034: LD_INT 1
41036: DOUBLE
41037: EQUAL
41038: IFTRUE 41042
41040: GO 41122
41042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41043: LD_ADDR_VAR 0 12
41047: PUSH
41048: LD_VAR 0 18
41052: PPUSH
41053: LD_INT 22
41055: PUSH
41056: LD_VAR 0 16
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 58
41067: PUSH
41068: EMPTY
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 30
41076: PUSH
41077: LD_INT 32
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 30
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 30
41096: PUSH
41097: LD_INT 5
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: PPUSH
41115: CALL_OW 72
41119: ST_TO_ADDR
41120: GO 41344
41122: LD_INT 2
41124: DOUBLE
41125: EQUAL
41126: IFTRUE 41130
41128: GO 41192
41130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41131: LD_ADDR_VAR 0 12
41135: PUSH
41136: LD_VAR 0 18
41140: PPUSH
41141: LD_INT 22
41143: PUSH
41144: LD_VAR 0 16
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 30
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 30
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PPUSH
41185: CALL_OW 72
41189: ST_TO_ADDR
41190: GO 41344
41192: LD_INT 3
41194: DOUBLE
41195: EQUAL
41196: IFTRUE 41200
41198: GO 41262
41200: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41201: LD_ADDR_VAR 0 12
41205: PUSH
41206: LD_VAR 0 18
41210: PPUSH
41211: LD_INT 22
41213: PUSH
41214: LD_VAR 0 16
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: LD_INT 30
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 30
41238: PUSH
41239: LD_INT 3
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PPUSH
41255: CALL_OW 72
41259: ST_TO_ADDR
41260: GO 41344
41262: LD_INT 4
41264: DOUBLE
41265: EQUAL
41266: IFTRUE 41270
41268: GO 41343
41270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41271: LD_ADDR_VAR 0 12
41275: PUSH
41276: LD_VAR 0 18
41280: PPUSH
41281: LD_INT 22
41283: PUSH
41284: LD_VAR 0 16
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 30
41298: PUSH
41299: LD_INT 6
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 30
41308: PUSH
41309: LD_INT 7
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 30
41318: PUSH
41319: LD_INT 8
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PPUSH
41336: CALL_OW 72
41340: ST_TO_ADDR
41341: GO 41344
41343: POP
// if i = 1 then
41344: LD_VAR 0 8
41348: PUSH
41349: LD_INT 1
41351: EQUAL
41352: IFFALSE 41463
// begin tmp := [ ] ;
41354: LD_ADDR_VAR 0 19
41358: PUSH
41359: EMPTY
41360: ST_TO_ADDR
// for j in f do
41361: LD_ADDR_VAR 0 9
41365: PUSH
41366: LD_VAR 0 12
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41445
// if GetBType ( j ) = b_bunker then
41374: LD_VAR 0 9
41378: PPUSH
41379: CALL_OW 266
41383: PUSH
41384: LD_INT 32
41386: EQUAL
41387: IFFALSE 41414
// tmp := Insert ( tmp , 1 , j ) else
41389: LD_ADDR_VAR 0 19
41393: PUSH
41394: LD_VAR 0 19
41398: PPUSH
41399: LD_INT 1
41401: PPUSH
41402: LD_VAR 0 9
41406: PPUSH
41407: CALL_OW 2
41411: ST_TO_ADDR
41412: GO 41443
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41414: LD_ADDR_VAR 0 19
41418: PUSH
41419: LD_VAR 0 19
41423: PPUSH
41424: LD_VAR 0 19
41428: PUSH
41429: LD_INT 1
41431: PLUS
41432: PPUSH
41433: LD_VAR 0 9
41437: PPUSH
41438: CALL_OW 2
41442: ST_TO_ADDR
41443: GO 41371
41445: POP
41446: POP
// if tmp then
41447: LD_VAR 0 19
41451: IFFALSE 41463
// f := tmp ;
41453: LD_ADDR_VAR 0 12
41457: PUSH
41458: LD_VAR 0 19
41462: ST_TO_ADDR
// end ; x := personel [ i ] ;
41463: LD_ADDR_VAR 0 13
41467: PUSH
41468: LD_VAR 0 6
41472: PUSH
41473: LD_VAR 0 8
41477: ARRAY
41478: ST_TO_ADDR
// if x = - 1 then
41479: LD_VAR 0 13
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: EQUAL
41488: IFFALSE 41697
// begin for j in f do
41490: LD_ADDR_VAR 0 9
41494: PUSH
41495: LD_VAR 0 12
41499: PUSH
41500: FOR_IN
41501: IFFALSE 41693
// repeat InitHc ;
41503: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41507: LD_VAR 0 9
41511: PPUSH
41512: CALL_OW 266
41516: PUSH
41517: LD_INT 5
41519: EQUAL
41520: IFFALSE 41590
// begin if UnitsInside ( j ) < 3 then
41522: LD_VAR 0 9
41526: PPUSH
41527: CALL_OW 313
41531: PUSH
41532: LD_INT 3
41534: LESS
41535: IFFALSE 41571
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41537: LD_INT 0
41539: PPUSH
41540: LD_INT 5
41542: PUSH
41543: LD_INT 8
41545: PUSH
41546: LD_INT 9
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: PUSH
41554: LD_VAR 0 17
41558: ARRAY
41559: PPUSH
41560: LD_VAR 0 4
41564: PPUSH
41565: CALL_OW 380
41569: GO 41588
// PrepareHuman ( false , i , skill ) ;
41571: LD_INT 0
41573: PPUSH
41574: LD_VAR 0 8
41578: PPUSH
41579: LD_VAR 0 4
41583: PPUSH
41584: CALL_OW 380
// end else
41588: GO 41607
// PrepareHuman ( false , i , skill ) ;
41590: LD_INT 0
41592: PPUSH
41593: LD_VAR 0 8
41597: PPUSH
41598: LD_VAR 0 4
41602: PPUSH
41603: CALL_OW 380
// un := CreateHuman ;
41607: LD_ADDR_VAR 0 14
41611: PUSH
41612: CALL_OW 44
41616: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41617: LD_ADDR_VAR 0 7
41621: PUSH
41622: LD_VAR 0 7
41626: PPUSH
41627: LD_INT 1
41629: PPUSH
41630: LD_VAR 0 14
41634: PPUSH
41635: CALL_OW 2
41639: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41640: LD_VAR 0 14
41644: PPUSH
41645: LD_VAR 0 9
41649: PPUSH
41650: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41654: LD_VAR 0 9
41658: PPUSH
41659: CALL_OW 313
41663: PUSH
41664: LD_INT 6
41666: EQUAL
41667: PUSH
41668: LD_VAR 0 9
41672: PPUSH
41673: CALL_OW 266
41677: PUSH
41678: LD_INT 32
41680: PUSH
41681: LD_INT 31
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: IN
41688: OR
41689: IFFALSE 41503
41691: GO 41500
41693: POP
41694: POP
// end else
41695: GO 42077
// for j = 1 to x do
41697: LD_ADDR_VAR 0 9
41701: PUSH
41702: DOUBLE
41703: LD_INT 1
41705: DEC
41706: ST_TO_ADDR
41707: LD_VAR 0 13
41711: PUSH
41712: FOR_TO
41713: IFFALSE 42075
// begin InitHc ;
41715: CALL_OW 19
// if not f then
41719: LD_VAR 0 12
41723: NOT
41724: IFFALSE 41813
// begin PrepareHuman ( false , i , skill ) ;
41726: LD_INT 0
41728: PPUSH
41729: LD_VAR 0 8
41733: PPUSH
41734: LD_VAR 0 4
41738: PPUSH
41739: CALL_OW 380
// un := CreateHuman ;
41743: LD_ADDR_VAR 0 14
41747: PUSH
41748: CALL_OW 44
41752: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41753: LD_ADDR_VAR 0 7
41757: PUSH
41758: LD_VAR 0 7
41762: PPUSH
41763: LD_INT 1
41765: PPUSH
41766: LD_VAR 0 14
41770: PPUSH
41771: CALL_OW 2
41775: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41776: LD_VAR 0 14
41780: PPUSH
41781: LD_VAR 0 1
41785: PPUSH
41786: CALL_OW 250
41790: PPUSH
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 251
41800: PPUSH
41801: LD_INT 10
41803: PPUSH
41804: LD_INT 0
41806: PPUSH
41807: CALL_OW 50
// continue ;
41811: GO 41712
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41813: LD_VAR 0 12
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PPUSH
41822: CALL_OW 313
41826: PUSH
41827: LD_VAR 0 12
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PPUSH
41836: CALL_OW 266
41840: PUSH
41841: LD_INT 32
41843: PUSH
41844: LD_INT 31
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: IN
41851: AND
41852: PUSH
41853: LD_VAR 0 12
41857: PUSH
41858: LD_INT 1
41860: ARRAY
41861: PPUSH
41862: CALL_OW 313
41866: PUSH
41867: LD_INT 6
41869: EQUAL
41870: OR
41871: IFFALSE 41891
// f := Delete ( f , 1 ) ;
41873: LD_ADDR_VAR 0 12
41877: PUSH
41878: LD_VAR 0 12
41882: PPUSH
41883: LD_INT 1
41885: PPUSH
41886: CALL_OW 3
41890: ST_TO_ADDR
// if not f then
41891: LD_VAR 0 12
41895: NOT
41896: IFFALSE 41914
// begin x := x + 2 ;
41898: LD_ADDR_VAR 0 13
41902: PUSH
41903: LD_VAR 0 13
41907: PUSH
41908: LD_INT 2
41910: PLUS
41911: ST_TO_ADDR
// continue ;
41912: GO 41712
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41914: LD_VAR 0 12
41918: PUSH
41919: LD_INT 1
41921: ARRAY
41922: PPUSH
41923: CALL_OW 266
41927: PUSH
41928: LD_INT 5
41930: EQUAL
41931: IFFALSE 42005
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41933: LD_VAR 0 12
41937: PUSH
41938: LD_INT 1
41940: ARRAY
41941: PPUSH
41942: CALL_OW 313
41946: PUSH
41947: LD_INT 3
41949: LESS
41950: IFFALSE 41986
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41952: LD_INT 0
41954: PPUSH
41955: LD_INT 5
41957: PUSH
41958: LD_INT 8
41960: PUSH
41961: LD_INT 9
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: PUSH
41969: LD_VAR 0 17
41973: ARRAY
41974: PPUSH
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 380
41984: GO 42003
// PrepareHuman ( false , i , skill ) ;
41986: LD_INT 0
41988: PPUSH
41989: LD_VAR 0 8
41993: PPUSH
41994: LD_VAR 0 4
41998: PPUSH
41999: CALL_OW 380
// end else
42003: GO 42022
// PrepareHuman ( false , i , skill ) ;
42005: LD_INT 0
42007: PPUSH
42008: LD_VAR 0 8
42012: PPUSH
42013: LD_VAR 0 4
42017: PPUSH
42018: CALL_OW 380
// un := CreateHuman ;
42022: LD_ADDR_VAR 0 14
42026: PUSH
42027: CALL_OW 44
42031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42032: LD_ADDR_VAR 0 7
42036: PUSH
42037: LD_VAR 0 7
42041: PPUSH
42042: LD_INT 1
42044: PPUSH
42045: LD_VAR 0 14
42049: PPUSH
42050: CALL_OW 2
42054: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42055: LD_VAR 0 14
42059: PPUSH
42060: LD_VAR 0 12
42064: PUSH
42065: LD_INT 1
42067: ARRAY
42068: PPUSH
42069: CALL_OW 52
// end ;
42073: GO 41712
42075: POP
42076: POP
// end ;
42077: GO 41014
42079: POP
42080: POP
// result := result ^ buildings ;
42081: LD_ADDR_VAR 0 7
42085: PUSH
42086: LD_VAR 0 7
42090: PUSH
42091: LD_VAR 0 18
42095: ADD
42096: ST_TO_ADDR
// end else
42097: GO 42240
// begin for i = 1 to personel do
42099: LD_ADDR_VAR 0 8
42103: PUSH
42104: DOUBLE
42105: LD_INT 1
42107: DEC
42108: ST_TO_ADDR
42109: LD_VAR 0 6
42113: PUSH
42114: FOR_TO
42115: IFFALSE 42238
// begin if i > 4 then
42117: LD_VAR 0 8
42121: PUSH
42122: LD_INT 4
42124: GREATER
42125: IFFALSE 42129
// break ;
42127: GO 42238
// x := personel [ i ] ;
42129: LD_ADDR_VAR 0 13
42133: PUSH
42134: LD_VAR 0 6
42138: PUSH
42139: LD_VAR 0 8
42143: ARRAY
42144: ST_TO_ADDR
// if x = - 1 then
42145: LD_VAR 0 13
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: EQUAL
42154: IFFALSE 42158
// continue ;
42156: GO 42114
// PrepareHuman ( false , i , skill ) ;
42158: LD_INT 0
42160: PPUSH
42161: LD_VAR 0 8
42165: PPUSH
42166: LD_VAR 0 4
42170: PPUSH
42171: CALL_OW 380
// un := CreateHuman ;
42175: LD_ADDR_VAR 0 14
42179: PUSH
42180: CALL_OW 44
42184: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42185: LD_VAR 0 14
42189: PPUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 250
42199: PPUSH
42200: LD_VAR 0 1
42204: PPUSH
42205: CALL_OW 251
42209: PPUSH
42210: LD_INT 10
42212: PPUSH
42213: LD_INT 0
42215: PPUSH
42216: CALL_OW 50
// result := result ^ un ;
42220: LD_ADDR_VAR 0 7
42224: PUSH
42225: LD_VAR 0 7
42229: PUSH
42230: LD_VAR 0 14
42234: ADD
42235: ST_TO_ADDR
// end ;
42236: GO 42114
42238: POP
42239: POP
// end ; end ;
42240: LD_VAR 0 7
42244: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42245: LD_INT 0
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
// result := false ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 0
42270: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42271: LD_VAR 0 1
42275: NOT
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 266
42286: PUSH
42287: LD_INT 32
42289: PUSH
42290: LD_INT 33
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: IN
42297: NOT
42298: OR
42299: IFFALSE 42303
// exit ;
42301: GO 43439
// nat := GetNation ( tower ) ;
42303: LD_ADDR_VAR 0 12
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: CALL_OW 248
42317: ST_TO_ADDR
// side := GetSide ( tower ) ;
42318: LD_ADDR_VAR 0 16
42322: PUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 255
42332: ST_TO_ADDR
// x := GetX ( tower ) ;
42333: LD_ADDR_VAR 0 10
42337: PUSH
42338: LD_VAR 0 1
42342: PPUSH
42343: CALL_OW 250
42347: ST_TO_ADDR
// y := GetY ( tower ) ;
42348: LD_ADDR_VAR 0 11
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 251
42362: ST_TO_ADDR
// if not x or not y then
42363: LD_VAR 0 10
42367: NOT
42368: PUSH
42369: LD_VAR 0 11
42373: NOT
42374: OR
42375: IFFALSE 42379
// exit ;
42377: GO 43439
// weapon := 0 ;
42379: LD_ADDR_VAR 0 18
42383: PUSH
42384: LD_INT 0
42386: ST_TO_ADDR
// fac_list := [ ] ;
42387: LD_ADDR_VAR 0 17
42391: PUSH
42392: EMPTY
42393: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
42394: LD_ADDR_VAR 0 6
42398: PUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 274
42408: PPUSH
42409: LD_VAR 0 2
42413: PPUSH
42414: CALL 40017 0 2
42418: PPUSH
42419: LD_INT 30
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PPUSH
42429: CALL_OW 72
42433: ST_TO_ADDR
// if not factories then
42434: LD_VAR 0 6
42438: NOT
42439: IFFALSE 42443
// exit ;
42441: GO 43439
// for i in factories do
42443: LD_ADDR_VAR 0 8
42447: PUSH
42448: LD_VAR 0 6
42452: PUSH
42453: FOR_IN
42454: IFFALSE 42479
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42456: LD_ADDR_VAR 0 17
42460: PUSH
42461: LD_VAR 0 17
42465: PUSH
42466: LD_VAR 0 8
42470: PPUSH
42471: CALL_OW 478
42475: UNION
42476: ST_TO_ADDR
42477: GO 42453
42479: POP
42480: POP
// if not fac_list then
42481: LD_VAR 0 17
42485: NOT
42486: IFFALSE 42490
// exit ;
42488: GO 43439
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42490: LD_ADDR_VAR 0 5
42494: PUSH
42495: LD_INT 4
42497: PUSH
42498: LD_INT 5
42500: PUSH
42501: LD_INT 9
42503: PUSH
42504: LD_INT 10
42506: PUSH
42507: LD_INT 6
42509: PUSH
42510: LD_INT 7
42512: PUSH
42513: LD_INT 11
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 27
42527: PUSH
42528: LD_INT 28
42530: PUSH
42531: LD_INT 26
42533: PUSH
42534: LD_INT 30
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 43
42545: PUSH
42546: LD_INT 44
42548: PUSH
42549: LD_INT 46
42551: PUSH
42552: LD_INT 45
42554: PUSH
42555: LD_INT 47
42557: PUSH
42558: LD_INT 49
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: PUSH
42574: LD_VAR 0 12
42578: ARRAY
42579: ST_TO_ADDR
// for i in list do
42580: LD_ADDR_VAR 0 8
42584: PUSH
42585: LD_VAR 0 5
42589: PUSH
42590: FOR_IN
42591: IFFALSE 42624
// if not i in fac_list then
42593: LD_VAR 0 8
42597: PUSH
42598: LD_VAR 0 17
42602: IN
42603: NOT
42604: IFFALSE 42622
// list := list diff i ;
42606: LD_ADDR_VAR 0 5
42610: PUSH
42611: LD_VAR 0 5
42615: PUSH
42616: LD_VAR 0 8
42620: DIFF
42621: ST_TO_ADDR
42622: GO 42590
42624: POP
42625: POP
// if not list then
42626: LD_VAR 0 5
42630: NOT
42631: IFFALSE 42635
// exit ;
42633: GO 43439
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42635: LD_VAR 0 12
42639: PUSH
42640: LD_INT 3
42642: EQUAL
42643: PUSH
42644: LD_INT 49
42646: PUSH
42647: LD_VAR 0 5
42651: IN
42652: AND
42653: PUSH
42654: LD_INT 31
42656: PPUSH
42657: LD_VAR 0 16
42661: PPUSH
42662: CALL_OW 321
42666: PUSH
42667: LD_INT 2
42669: EQUAL
42670: AND
42671: IFFALSE 42731
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42673: LD_INT 22
42675: PUSH
42676: LD_VAR 0 16
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 35
42687: PUSH
42688: LD_INT 49
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 91
42697: PUSH
42698: LD_VAR 0 1
42702: PUSH
42703: LD_INT 10
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: PPUSH
42716: CALL_OW 69
42720: NOT
42721: IFFALSE 42731
// weapon := ru_time_lapser ;
42723: LD_ADDR_VAR 0 18
42727: PUSH
42728: LD_INT 49
42730: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42731: LD_VAR 0 12
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: IN
42746: PUSH
42747: LD_INT 11
42749: PUSH
42750: LD_VAR 0 5
42754: IN
42755: PUSH
42756: LD_INT 30
42758: PUSH
42759: LD_VAR 0 5
42763: IN
42764: OR
42765: AND
42766: PUSH
42767: LD_INT 6
42769: PPUSH
42770: LD_VAR 0 16
42774: PPUSH
42775: CALL_OW 321
42779: PUSH
42780: LD_INT 2
42782: EQUAL
42783: AND
42784: IFFALSE 42949
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42786: LD_INT 22
42788: PUSH
42789: LD_VAR 0 16
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 35
42803: PUSH
42804: LD_INT 11
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 35
42813: PUSH
42814: LD_INT 30
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 91
42828: PUSH
42829: LD_VAR 0 1
42833: PUSH
42834: LD_INT 18
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: PPUSH
42847: CALL_OW 69
42851: NOT
42852: PUSH
42853: LD_INT 22
42855: PUSH
42856: LD_VAR 0 16
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 30
42870: PUSH
42871: LD_INT 32
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 30
42880: PUSH
42881: LD_INT 33
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 91
42895: PUSH
42896: LD_VAR 0 1
42900: PUSH
42901: LD_INT 12
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: PPUSH
42917: CALL_OW 69
42921: PUSH
42922: LD_INT 2
42924: GREATER
42925: AND
42926: IFFALSE 42949
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42928: LD_ADDR_VAR 0 18
42932: PUSH
42933: LD_INT 11
42935: PUSH
42936: LD_INT 30
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_VAR 0 12
42947: ARRAY
42948: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42949: LD_VAR 0 18
42953: NOT
42954: PUSH
42955: LD_INT 40
42957: PPUSH
42958: LD_VAR 0 16
42962: PPUSH
42963: CALL_OW 321
42967: PUSH
42968: LD_INT 2
42970: EQUAL
42971: AND
42972: PUSH
42973: LD_INT 7
42975: PUSH
42976: LD_VAR 0 5
42980: IN
42981: PUSH
42982: LD_INT 28
42984: PUSH
42985: LD_VAR 0 5
42989: IN
42990: OR
42991: PUSH
42992: LD_INT 45
42994: PUSH
42995: LD_VAR 0 5
42999: IN
43000: OR
43001: AND
43002: IFFALSE 43256
// begin hex := GetHexInfo ( x , y ) ;
43004: LD_ADDR_VAR 0 4
43008: PUSH
43009: LD_VAR 0 10
43013: PPUSH
43014: LD_VAR 0 11
43018: PPUSH
43019: CALL_OW 546
43023: ST_TO_ADDR
// if hex [ 1 ] then
43024: LD_VAR 0 4
43028: PUSH
43029: LD_INT 1
43031: ARRAY
43032: IFFALSE 43036
// exit ;
43034: GO 43439
// height := hex [ 2 ] ;
43036: LD_ADDR_VAR 0 15
43040: PUSH
43041: LD_VAR 0 4
43045: PUSH
43046: LD_INT 2
43048: ARRAY
43049: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43050: LD_ADDR_VAR 0 14
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: LD_INT 5
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// for i in tmp do
43073: LD_ADDR_VAR 0 8
43077: PUSH
43078: LD_VAR 0 14
43082: PUSH
43083: FOR_IN
43084: IFFALSE 43254
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: LD_VAR 0 10
43095: PPUSH
43096: LD_VAR 0 8
43100: PPUSH
43101: LD_INT 5
43103: PPUSH
43104: CALL_OW 272
43108: PUSH
43109: LD_VAR 0 11
43113: PPUSH
43114: LD_VAR 0 8
43118: PPUSH
43119: LD_INT 5
43121: PPUSH
43122: CALL_OW 273
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43131: LD_VAR 0 9
43135: PUSH
43136: LD_INT 1
43138: ARRAY
43139: PPUSH
43140: LD_VAR 0 9
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: PPUSH
43149: CALL_OW 488
43153: IFFALSE 43252
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43155: LD_ADDR_VAR 0 4
43159: PUSH
43160: LD_VAR 0 9
43164: PUSH
43165: LD_INT 1
43167: ARRAY
43168: PPUSH
43169: LD_VAR 0 9
43173: PUSH
43174: LD_INT 2
43176: ARRAY
43177: PPUSH
43178: CALL_OW 546
43182: ST_TO_ADDR
// if hex [ 1 ] then
43183: LD_VAR 0 4
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: IFFALSE 43195
// continue ;
43193: GO 43083
// h := hex [ 2 ] ;
43195: LD_ADDR_VAR 0 13
43199: PUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: ST_TO_ADDR
// if h + 7 < height then
43209: LD_VAR 0 13
43213: PUSH
43214: LD_INT 7
43216: PLUS
43217: PUSH
43218: LD_VAR 0 15
43222: LESS
43223: IFFALSE 43252
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43225: LD_ADDR_VAR 0 18
43229: PUSH
43230: LD_INT 7
43232: PUSH
43233: LD_INT 28
43235: PUSH
43236: LD_INT 45
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: PUSH
43244: LD_VAR 0 12
43248: ARRAY
43249: ST_TO_ADDR
// break ;
43250: GO 43254
// end ; end ; end ;
43252: GO 43083
43254: POP
43255: POP
// end ; if not weapon then
43256: LD_VAR 0 18
43260: NOT
43261: IFFALSE 43321
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43263: LD_ADDR_VAR 0 5
43267: PUSH
43268: LD_VAR 0 5
43272: PUSH
43273: LD_INT 11
43275: PUSH
43276: LD_INT 30
43278: PUSH
43279: LD_INT 49
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: DIFF
43287: ST_TO_ADDR
// if not list then
43288: LD_VAR 0 5
43292: NOT
43293: IFFALSE 43297
// exit ;
43295: GO 43439
// weapon := list [ rand ( 1 , list ) ] ;
43297: LD_ADDR_VAR 0 18
43301: PUSH
43302: LD_VAR 0 5
43306: PUSH
43307: LD_INT 1
43309: PPUSH
43310: LD_VAR 0 5
43314: PPUSH
43315: CALL_OW 12
43319: ARRAY
43320: ST_TO_ADDR
// end ; if weapon then
43321: LD_VAR 0 18
43325: IFFALSE 43439
// begin tmp := CostOfWeapon ( weapon ) ;
43327: LD_ADDR_VAR 0 14
43331: PUSH
43332: LD_VAR 0 18
43336: PPUSH
43337: CALL_OW 451
43341: ST_TO_ADDR
// j := GetBase ( tower ) ;
43342: LD_ADDR_VAR 0 9
43346: PUSH
43347: LD_VAR 0 1
43351: PPUSH
43352: CALL_OW 274
43356: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43357: LD_VAR 0 9
43361: PPUSH
43362: LD_INT 1
43364: PPUSH
43365: CALL_OW 275
43369: PUSH
43370: LD_VAR 0 14
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: GREATEREQUAL
43379: PUSH
43380: LD_VAR 0 9
43384: PPUSH
43385: LD_INT 2
43387: PPUSH
43388: CALL_OW 275
43392: PUSH
43393: LD_VAR 0 14
43397: PUSH
43398: LD_INT 2
43400: ARRAY
43401: GREATEREQUAL
43402: AND
43403: PUSH
43404: LD_VAR 0 9
43408: PPUSH
43409: LD_INT 3
43411: PPUSH
43412: CALL_OW 275
43416: PUSH
43417: LD_VAR 0 14
43421: PUSH
43422: LD_INT 3
43424: ARRAY
43425: GREATEREQUAL
43426: AND
43427: IFFALSE 43439
// result := weapon ;
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_VAR 0 18
43438: ST_TO_ADDR
// end ; end ;
43439: LD_VAR 0 3
43443: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43444: LD_INT 0
43446: PPUSH
43447: PPUSH
// result := true ;
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_INT 1
43455: ST_TO_ADDR
// if array1 = array2 then
43456: LD_VAR 0 1
43460: PUSH
43461: LD_VAR 0 2
43465: EQUAL
43466: IFFALSE 43526
// begin for i = 1 to array1 do
43468: LD_ADDR_VAR 0 4
43472: PUSH
43473: DOUBLE
43474: LD_INT 1
43476: DEC
43477: ST_TO_ADDR
43478: LD_VAR 0 1
43482: PUSH
43483: FOR_TO
43484: IFFALSE 43522
// if array1 [ i ] <> array2 [ i ] then
43486: LD_VAR 0 1
43490: PUSH
43491: LD_VAR 0 4
43495: ARRAY
43496: PUSH
43497: LD_VAR 0 2
43501: PUSH
43502: LD_VAR 0 4
43506: ARRAY
43507: NONEQUAL
43508: IFFALSE 43520
// begin result := false ;
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 0
43517: ST_TO_ADDR
// break ;
43518: GO 43522
// end ;
43520: GO 43483
43522: POP
43523: POP
// end else
43524: GO 43534
// result := false ;
43526: LD_ADDR_VAR 0 3
43530: PUSH
43531: LD_INT 0
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 3
43538: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43539: LD_INT 0
43541: PPUSH
43542: PPUSH
43543: PPUSH
// pom := GetBase ( fac ) ;
43544: LD_ADDR_VAR 0 5
43548: PUSH
43549: LD_VAR 0 1
43553: PPUSH
43554: CALL_OW 274
43558: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43559: LD_ADDR_VAR 0 4
43563: PUSH
43564: LD_VAR 0 2
43568: PUSH
43569: LD_INT 1
43571: ARRAY
43572: PPUSH
43573: LD_VAR 0 2
43577: PUSH
43578: LD_INT 2
43580: ARRAY
43581: PPUSH
43582: LD_VAR 0 2
43586: PUSH
43587: LD_INT 3
43589: ARRAY
43590: PPUSH
43591: LD_VAR 0 2
43595: PUSH
43596: LD_INT 4
43598: ARRAY
43599: PPUSH
43600: CALL_OW 449
43604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_VAR 0 5
43614: PPUSH
43615: LD_INT 1
43617: PPUSH
43618: CALL_OW 275
43622: PUSH
43623: LD_VAR 0 4
43627: PUSH
43628: LD_INT 1
43630: ARRAY
43631: GREATEREQUAL
43632: PUSH
43633: LD_VAR 0 5
43637: PPUSH
43638: LD_INT 2
43640: PPUSH
43641: CALL_OW 275
43645: PUSH
43646: LD_VAR 0 4
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: GREATEREQUAL
43655: AND
43656: PUSH
43657: LD_VAR 0 5
43661: PPUSH
43662: LD_INT 3
43664: PPUSH
43665: CALL_OW 275
43669: PUSH
43670: LD_VAR 0 4
43674: PUSH
43675: LD_INT 3
43677: ARRAY
43678: GREATEREQUAL
43679: AND
43680: ST_TO_ADDR
// end ;
43681: LD_VAR 0 3
43685: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43686: LD_INT 0
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
// pom := GetBase ( building ) ;
43692: LD_ADDR_VAR 0 3
43696: PUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: CALL_OW 274
43706: ST_TO_ADDR
// if not pom then
43707: LD_VAR 0 3
43711: NOT
43712: IFFALSE 43716
// exit ;
43714: GO 43886
// btype := GetBType ( building ) ;
43716: LD_ADDR_VAR 0 5
43720: PUSH
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL_OW 266
43730: ST_TO_ADDR
// if btype = b_armoury then
43731: LD_VAR 0 5
43735: PUSH
43736: LD_INT 4
43738: EQUAL
43739: IFFALSE 43749
// btype := b_barracks ;
43741: LD_ADDR_VAR 0 5
43745: PUSH
43746: LD_INT 5
43748: ST_TO_ADDR
// if btype = b_depot then
43749: LD_VAR 0 5
43753: PUSH
43754: LD_INT 0
43756: EQUAL
43757: IFFALSE 43767
// btype := b_warehouse ;
43759: LD_ADDR_VAR 0 5
43763: PUSH
43764: LD_INT 1
43766: ST_TO_ADDR
// if btype = b_workshop then
43767: LD_VAR 0 5
43771: PUSH
43772: LD_INT 2
43774: EQUAL
43775: IFFALSE 43785
// btype := b_factory ;
43777: LD_ADDR_VAR 0 5
43781: PUSH
43782: LD_INT 3
43784: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43785: LD_ADDR_VAR 0 4
43789: PUSH
43790: LD_VAR 0 5
43794: PPUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 248
43804: PPUSH
43805: CALL_OW 450
43809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43810: LD_ADDR_VAR 0 2
43814: PUSH
43815: LD_VAR 0 3
43819: PPUSH
43820: LD_INT 1
43822: PPUSH
43823: CALL_OW 275
43827: PUSH
43828: LD_VAR 0 4
43832: PUSH
43833: LD_INT 1
43835: ARRAY
43836: GREATEREQUAL
43837: PUSH
43838: LD_VAR 0 3
43842: PPUSH
43843: LD_INT 2
43845: PPUSH
43846: CALL_OW 275
43850: PUSH
43851: LD_VAR 0 4
43855: PUSH
43856: LD_INT 2
43858: ARRAY
43859: GREATEREQUAL
43860: AND
43861: PUSH
43862: LD_VAR 0 3
43866: PPUSH
43867: LD_INT 3
43869: PPUSH
43870: CALL_OW 275
43874: PUSH
43875: LD_VAR 0 4
43879: PUSH
43880: LD_INT 3
43882: ARRAY
43883: GREATEREQUAL
43884: AND
43885: ST_TO_ADDR
// end ;
43886: LD_VAR 0 2
43890: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43891: LD_INT 0
43893: PPUSH
43894: PPUSH
43895: PPUSH
// pom := GetBase ( building ) ;
43896: LD_ADDR_VAR 0 4
43900: PUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: CALL_OW 274
43910: ST_TO_ADDR
// if not pom then
43911: LD_VAR 0 4
43915: NOT
43916: IFFALSE 43920
// exit ;
43918: GO 44021
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43920: LD_ADDR_VAR 0 5
43924: PUSH
43925: LD_VAR 0 2
43929: PPUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL_OW 248
43939: PPUSH
43940: CALL_OW 450
43944: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_VAR 0 4
43954: PPUSH
43955: LD_INT 1
43957: PPUSH
43958: CALL_OW 275
43962: PUSH
43963: LD_VAR 0 5
43967: PUSH
43968: LD_INT 1
43970: ARRAY
43971: GREATEREQUAL
43972: PUSH
43973: LD_VAR 0 4
43977: PPUSH
43978: LD_INT 2
43980: PPUSH
43981: CALL_OW 275
43985: PUSH
43986: LD_VAR 0 5
43990: PUSH
43991: LD_INT 2
43993: ARRAY
43994: GREATEREQUAL
43995: AND
43996: PUSH
43997: LD_VAR 0 4
44001: PPUSH
44002: LD_INT 3
44004: PPUSH
44005: CALL_OW 275
44009: PUSH
44010: LD_VAR 0 5
44014: PUSH
44015: LD_INT 3
44017: ARRAY
44018: GREATEREQUAL
44019: AND
44020: ST_TO_ADDR
// end ;
44021: LD_VAR 0 3
44025: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44026: LD_INT 0
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
// result := false ;
44038: LD_ADDR_VAR 0 6
44042: PUSH
44043: LD_INT 0
44045: ST_TO_ADDR
// if not base or not btype or not x or not y then
44046: LD_VAR 0 1
44050: NOT
44051: PUSH
44052: LD_VAR 0 2
44056: NOT
44057: OR
44058: PUSH
44059: LD_VAR 0 3
44063: NOT
44064: OR
44065: PUSH
44066: LD_VAR 0 4
44070: NOT
44071: OR
44072: IFFALSE 44076
// exit ;
44074: GO 44685
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44076: LD_ADDR_VAR 0 12
44080: PUSH
44081: LD_VAR 0 2
44085: PPUSH
44086: LD_VAR 0 3
44090: PPUSH
44091: LD_VAR 0 4
44095: PPUSH
44096: LD_VAR 0 5
44100: PPUSH
44101: LD_VAR 0 1
44105: PUSH
44106: LD_INT 1
44108: ARRAY
44109: PPUSH
44110: CALL_OW 248
44114: PPUSH
44115: LD_INT 0
44117: PPUSH
44118: CALL 45522 0 6
44122: ST_TO_ADDR
// if not hexes then
44123: LD_VAR 0 12
44127: NOT
44128: IFFALSE 44132
// exit ;
44130: GO 44685
// for i = 1 to hexes do
44132: LD_ADDR_VAR 0 7
44136: PUSH
44137: DOUBLE
44138: LD_INT 1
44140: DEC
44141: ST_TO_ADDR
44142: LD_VAR 0 12
44146: PUSH
44147: FOR_TO
44148: IFFALSE 44683
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44150: LD_ADDR_VAR 0 11
44154: PUSH
44155: LD_VAR 0 12
44159: PUSH
44160: LD_VAR 0 7
44164: ARRAY
44165: PUSH
44166: LD_INT 1
44168: ARRAY
44169: PPUSH
44170: LD_VAR 0 12
44174: PUSH
44175: LD_VAR 0 7
44179: ARRAY
44180: PUSH
44181: LD_INT 2
44183: ARRAY
44184: PPUSH
44185: CALL_OW 428
44189: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44190: LD_VAR 0 12
44194: PUSH
44195: LD_VAR 0 7
44199: ARRAY
44200: PUSH
44201: LD_INT 1
44203: ARRAY
44204: PPUSH
44205: LD_VAR 0 12
44209: PUSH
44210: LD_VAR 0 7
44214: ARRAY
44215: PUSH
44216: LD_INT 2
44218: ARRAY
44219: PPUSH
44220: CALL_OW 351
44224: PUSH
44225: LD_VAR 0 12
44229: PUSH
44230: LD_VAR 0 7
44234: ARRAY
44235: PUSH
44236: LD_INT 1
44238: ARRAY
44239: PPUSH
44240: LD_VAR 0 12
44244: PUSH
44245: LD_VAR 0 7
44249: ARRAY
44250: PUSH
44251: LD_INT 2
44253: ARRAY
44254: PPUSH
44255: CALL_OW 488
44259: NOT
44260: OR
44261: PUSH
44262: LD_VAR 0 11
44266: PPUSH
44267: CALL_OW 247
44271: PUSH
44272: LD_INT 3
44274: EQUAL
44275: OR
44276: IFFALSE 44282
// exit ;
44278: POP
44279: POP
44280: GO 44685
// if not tmp or not tmp in base then
44282: LD_VAR 0 11
44286: NOT
44287: PUSH
44288: LD_VAR 0 11
44292: PUSH
44293: LD_VAR 0 1
44297: IN
44298: NOT
44299: OR
44300: IFFALSE 44304
// continue ;
44302: GO 44147
// result := true ;
44304: LD_ADDR_VAR 0 6
44308: PUSH
44309: LD_INT 1
44311: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44312: LD_ADDR_VAR 0 15
44316: PUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: LD_INT 22
44324: PUSH
44325: LD_VAR 0 11
44329: PPUSH
44330: CALL_OW 255
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 30
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 30
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 72
44375: ST_TO_ADDR
// if dep then
44376: LD_VAR 0 15
44380: IFFALSE 44516
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44382: LD_ADDR_VAR 0 14
44386: PUSH
44387: LD_VAR 0 15
44391: PUSH
44392: LD_INT 1
44394: ARRAY
44395: PPUSH
44396: CALL_OW 250
44400: PPUSH
44401: LD_VAR 0 15
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: PPUSH
44410: CALL_OW 254
44414: PPUSH
44415: LD_INT 5
44417: PPUSH
44418: CALL_OW 272
44422: PUSH
44423: LD_VAR 0 15
44427: PUSH
44428: LD_INT 1
44430: ARRAY
44431: PPUSH
44432: CALL_OW 251
44436: PPUSH
44437: LD_VAR 0 15
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: PPUSH
44446: CALL_OW 254
44450: PPUSH
44451: LD_INT 5
44453: PPUSH
44454: CALL_OW 273
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44463: LD_VAR 0 14
44467: PUSH
44468: LD_INT 1
44470: ARRAY
44471: PPUSH
44472: LD_VAR 0 14
44476: PUSH
44477: LD_INT 2
44479: ARRAY
44480: PPUSH
44481: CALL_OW 488
44485: IFFALSE 44516
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44487: LD_VAR 0 11
44491: PPUSH
44492: LD_VAR 0 14
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: PPUSH
44501: LD_VAR 0 14
44505: PUSH
44506: LD_INT 2
44508: ARRAY
44509: PPUSH
44510: CALL_OW 111
// continue ;
44514: GO 44147
// end ; end ; r := GetDir ( tmp ) ;
44516: LD_ADDR_VAR 0 13
44520: PUSH
44521: LD_VAR 0 11
44525: PPUSH
44526: CALL_OW 254
44530: ST_TO_ADDR
// if r = 5 then
44531: LD_VAR 0 13
44535: PUSH
44536: LD_INT 5
44538: EQUAL
44539: IFFALSE 44549
// r := 0 ;
44541: LD_ADDR_VAR 0 13
44545: PUSH
44546: LD_INT 0
44548: ST_TO_ADDR
// for j = r to 5 do
44549: LD_ADDR_VAR 0 8
44553: PUSH
44554: DOUBLE
44555: LD_VAR 0 13
44559: DEC
44560: ST_TO_ADDR
44561: LD_INT 5
44563: PUSH
44564: FOR_TO
44565: IFFALSE 44679
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44567: LD_ADDR_VAR 0 9
44571: PUSH
44572: LD_VAR 0 11
44576: PPUSH
44577: CALL_OW 250
44581: PPUSH
44582: LD_VAR 0 8
44586: PPUSH
44587: LD_INT 2
44589: PPUSH
44590: CALL_OW 272
44594: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44595: LD_ADDR_VAR 0 10
44599: PUSH
44600: LD_VAR 0 11
44604: PPUSH
44605: CALL_OW 251
44609: PPUSH
44610: LD_VAR 0 8
44614: PPUSH
44615: LD_INT 2
44617: PPUSH
44618: CALL_OW 273
44622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44623: LD_VAR 0 9
44627: PPUSH
44628: LD_VAR 0 10
44632: PPUSH
44633: CALL_OW 488
44637: PUSH
44638: LD_VAR 0 9
44642: PPUSH
44643: LD_VAR 0 10
44647: PPUSH
44648: CALL_OW 428
44652: NOT
44653: AND
44654: IFFALSE 44677
// begin ComMoveXY ( tmp , _x , _y ) ;
44656: LD_VAR 0 11
44660: PPUSH
44661: LD_VAR 0 9
44665: PPUSH
44666: LD_VAR 0 10
44670: PPUSH
44671: CALL_OW 111
// break ;
44675: GO 44679
// end ; end ;
44677: GO 44564
44679: POP
44680: POP
// end ;
44681: GO 44147
44683: POP
44684: POP
// end ;
44685: LD_VAR 0 6
44689: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44690: LD_INT 0
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
// result := false ;
44702: LD_ADDR_VAR 0 6
44706: PUSH
44707: LD_INT 0
44709: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44710: LD_VAR 0 1
44714: NOT
44715: PUSH
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 266
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: IN
44736: NOT
44737: OR
44738: PUSH
44739: LD_VAR 0 2
44743: NOT
44744: OR
44745: PUSH
44746: LD_VAR 0 5
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 4
44765: PUSH
44766: LD_INT 5
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: IN
44777: NOT
44778: OR
44779: PUSH
44780: LD_VAR 0 3
44784: PPUSH
44785: LD_VAR 0 4
44789: PPUSH
44790: CALL_OW 488
44794: NOT
44795: OR
44796: IFFALSE 44800
// exit ;
44798: GO 45517
// pom := GetBase ( depot ) ;
44800: LD_ADDR_VAR 0 10
44804: PUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 274
44814: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44815: LD_ADDR_VAR 0 11
44819: PUSH
44820: LD_VAR 0 2
44824: PPUSH
44825: LD_VAR 0 1
44829: PPUSH
44830: CALL_OW 248
44834: PPUSH
44835: CALL_OW 450
44839: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44840: LD_VAR 0 10
44844: PPUSH
44845: LD_INT 1
44847: PPUSH
44848: CALL_OW 275
44852: PUSH
44853: LD_VAR 0 11
44857: PUSH
44858: LD_INT 1
44860: ARRAY
44861: GREATEREQUAL
44862: PUSH
44863: LD_VAR 0 10
44867: PPUSH
44868: LD_INT 2
44870: PPUSH
44871: CALL_OW 275
44875: PUSH
44876: LD_VAR 0 11
44880: PUSH
44881: LD_INT 2
44883: ARRAY
44884: GREATEREQUAL
44885: AND
44886: PUSH
44887: LD_VAR 0 10
44891: PPUSH
44892: LD_INT 3
44894: PPUSH
44895: CALL_OW 275
44899: PUSH
44900: LD_VAR 0 11
44904: PUSH
44905: LD_INT 3
44907: ARRAY
44908: GREATEREQUAL
44909: AND
44910: NOT
44911: IFFALSE 44915
// exit ;
44913: GO 45517
// if GetBType ( depot ) = b_depot then
44915: LD_VAR 0 1
44919: PPUSH
44920: CALL_OW 266
44924: PUSH
44925: LD_INT 0
44927: EQUAL
44928: IFFALSE 44940
// dist := 28 else
44930: LD_ADDR_VAR 0 14
44934: PUSH
44935: LD_INT 28
44937: ST_TO_ADDR
44938: GO 44948
// dist := 36 ;
44940: LD_ADDR_VAR 0 14
44944: PUSH
44945: LD_INT 36
44947: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44948: LD_VAR 0 1
44952: PPUSH
44953: LD_VAR 0 3
44957: PPUSH
44958: LD_VAR 0 4
44962: PPUSH
44963: CALL_OW 297
44967: PUSH
44968: LD_VAR 0 14
44972: GREATER
44973: IFFALSE 44977
// exit ;
44975: GO 45517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44977: LD_ADDR_VAR 0 12
44981: PUSH
44982: LD_VAR 0 2
44986: PPUSH
44987: LD_VAR 0 3
44991: PPUSH
44992: LD_VAR 0 4
44996: PPUSH
44997: LD_VAR 0 5
45001: PPUSH
45002: LD_VAR 0 1
45006: PPUSH
45007: CALL_OW 248
45011: PPUSH
45012: LD_INT 0
45014: PPUSH
45015: CALL 45522 0 6
45019: ST_TO_ADDR
// if not hexes then
45020: LD_VAR 0 12
45024: NOT
45025: IFFALSE 45029
// exit ;
45027: GO 45517
// hex := GetHexInfo ( x , y ) ;
45029: LD_ADDR_VAR 0 15
45033: PUSH
45034: LD_VAR 0 3
45038: PPUSH
45039: LD_VAR 0 4
45043: PPUSH
45044: CALL_OW 546
45048: ST_TO_ADDR
// if hex [ 1 ] then
45049: LD_VAR 0 15
45053: PUSH
45054: LD_INT 1
45056: ARRAY
45057: IFFALSE 45061
// exit ;
45059: GO 45517
// height := hex [ 2 ] ;
45061: LD_ADDR_VAR 0 13
45065: PUSH
45066: LD_VAR 0 15
45070: PUSH
45071: LD_INT 2
45073: ARRAY
45074: ST_TO_ADDR
// for i = 1 to hexes do
45075: LD_ADDR_VAR 0 7
45079: PUSH
45080: DOUBLE
45081: LD_INT 1
45083: DEC
45084: ST_TO_ADDR
45085: LD_VAR 0 12
45089: PUSH
45090: FOR_TO
45091: IFFALSE 45421
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45093: LD_VAR 0 12
45097: PUSH
45098: LD_VAR 0 7
45102: ARRAY
45103: PUSH
45104: LD_INT 1
45106: ARRAY
45107: PPUSH
45108: LD_VAR 0 12
45112: PUSH
45113: LD_VAR 0 7
45117: ARRAY
45118: PUSH
45119: LD_INT 2
45121: ARRAY
45122: PPUSH
45123: CALL_OW 488
45127: NOT
45128: PUSH
45129: LD_VAR 0 12
45133: PUSH
45134: LD_VAR 0 7
45138: ARRAY
45139: PUSH
45140: LD_INT 1
45142: ARRAY
45143: PPUSH
45144: LD_VAR 0 12
45148: PUSH
45149: LD_VAR 0 7
45153: ARRAY
45154: PUSH
45155: LD_INT 2
45157: ARRAY
45158: PPUSH
45159: CALL_OW 428
45163: PUSH
45164: LD_INT 0
45166: GREATER
45167: OR
45168: PUSH
45169: LD_VAR 0 12
45173: PUSH
45174: LD_VAR 0 7
45178: ARRAY
45179: PUSH
45180: LD_INT 1
45182: ARRAY
45183: PPUSH
45184: LD_VAR 0 12
45188: PUSH
45189: LD_VAR 0 7
45193: ARRAY
45194: PUSH
45195: LD_INT 2
45197: ARRAY
45198: PPUSH
45199: CALL_OW 351
45203: OR
45204: IFFALSE 45210
// exit ;
45206: POP
45207: POP
45208: GO 45517
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45210: LD_ADDR_VAR 0 8
45214: PUSH
45215: LD_VAR 0 12
45219: PUSH
45220: LD_VAR 0 7
45224: ARRAY
45225: PUSH
45226: LD_INT 1
45228: ARRAY
45229: PPUSH
45230: LD_VAR 0 12
45234: PUSH
45235: LD_VAR 0 7
45239: ARRAY
45240: PUSH
45241: LD_INT 2
45243: ARRAY
45244: PPUSH
45245: CALL_OW 546
45249: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45250: LD_VAR 0 8
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PUSH
45259: LD_VAR 0 8
45263: PUSH
45264: LD_INT 2
45266: ARRAY
45267: PUSH
45268: LD_VAR 0 13
45272: PUSH
45273: LD_INT 2
45275: PLUS
45276: GREATER
45277: OR
45278: PUSH
45279: LD_VAR 0 8
45283: PUSH
45284: LD_INT 2
45286: ARRAY
45287: PUSH
45288: LD_VAR 0 13
45292: PUSH
45293: LD_INT 2
45295: MINUS
45296: LESS
45297: OR
45298: PUSH
45299: LD_VAR 0 8
45303: PUSH
45304: LD_INT 3
45306: ARRAY
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 8
45313: PUSH
45314: LD_INT 9
45316: PUSH
45317: LD_INT 10
45319: PUSH
45320: LD_INT 11
45322: PUSH
45323: LD_INT 12
45325: PUSH
45326: LD_INT 13
45328: PUSH
45329: LD_INT 16
45331: PUSH
45332: LD_INT 17
45334: PUSH
45335: LD_INT 18
45337: PUSH
45338: LD_INT 19
45340: PUSH
45341: LD_INT 20
45343: PUSH
45344: LD_INT 21
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: IN
45362: NOT
45363: OR
45364: PUSH
45365: LD_VAR 0 8
45369: PUSH
45370: LD_INT 5
45372: ARRAY
45373: NOT
45374: OR
45375: PUSH
45376: LD_VAR 0 8
45380: PUSH
45381: LD_INT 6
45383: ARRAY
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 7
45393: PUSH
45394: LD_INT 9
45396: PUSH
45397: LD_INT 10
45399: PUSH
45400: LD_INT 11
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: IN
45411: NOT
45412: OR
45413: IFFALSE 45419
// exit ;
45415: POP
45416: POP
45417: GO 45517
// end ;
45419: GO 45090
45421: POP
45422: POP
// side := GetSide ( depot ) ;
45423: LD_ADDR_VAR 0 9
45427: PUSH
45428: LD_VAR 0 1
45432: PPUSH
45433: CALL_OW 255
45437: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45438: LD_VAR 0 9
45442: PPUSH
45443: LD_VAR 0 3
45447: PPUSH
45448: LD_VAR 0 4
45452: PPUSH
45453: LD_INT 20
45455: PPUSH
45456: CALL 38171 0 4
45460: PUSH
45461: LD_INT 4
45463: ARRAY
45464: IFFALSE 45468
// exit ;
45466: GO 45517
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45468: LD_VAR 0 2
45472: PUSH
45473: LD_INT 29
45475: PUSH
45476: LD_INT 30
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: IN
45483: PUSH
45484: LD_VAR 0 3
45488: PPUSH
45489: LD_VAR 0 4
45493: PPUSH
45494: LD_VAR 0 9
45498: PPUSH
45499: CALL_OW 440
45503: NOT
45504: AND
45505: IFFALSE 45509
// exit ;
45507: GO 45517
// result := true ;
45509: LD_ADDR_VAR 0 6
45513: PUSH
45514: LD_INT 1
45516: ST_TO_ADDR
// end ;
45517: LD_VAR 0 6
45521: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45522: LD_INT 0
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
// result = [ ] ;
45582: LD_ADDR_VAR 0 7
45586: PUSH
45587: EMPTY
45588: ST_TO_ADDR
// temp_list = [ ] ;
45589: LD_ADDR_VAR 0 9
45593: PUSH
45594: EMPTY
45595: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45596: LD_VAR 0 4
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 3
45612: PUSH
45613: LD_INT 4
45615: PUSH
45616: LD_INT 5
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: IN
45627: NOT
45628: PUSH
45629: LD_VAR 0 1
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: IN
45644: PUSH
45645: LD_VAR 0 5
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: IN
45664: NOT
45665: AND
45666: OR
45667: IFFALSE 45671
// exit ;
45669: GO 64062
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45671: LD_VAR 0 1
45675: PUSH
45676: LD_INT 6
45678: PUSH
45679: LD_INT 7
45681: PUSH
45682: LD_INT 8
45684: PUSH
45685: LD_INT 13
45687: PUSH
45688: LD_INT 12
45690: PUSH
45691: LD_INT 15
45693: PUSH
45694: LD_INT 11
45696: PUSH
45697: LD_INT 14
45699: PUSH
45700: LD_INT 10
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: IN
45714: IFFALSE 45724
// btype = b_lab ;
45716: LD_ADDR_VAR 0 1
45720: PUSH
45721: LD_INT 6
45723: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45724: LD_VAR 0 6
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: IN
45743: NOT
45744: PUSH
45745: LD_VAR 0 1
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 6
45764: PUSH
45765: LD_INT 36
45767: PUSH
45768: LD_INT 4
45770: PUSH
45771: LD_INT 5
45773: PUSH
45774: LD_INT 31
45776: PUSH
45777: LD_INT 32
45779: PUSH
45780: LD_INT 33
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: IN
45796: NOT
45797: PUSH
45798: LD_VAR 0 6
45802: PUSH
45803: LD_INT 1
45805: EQUAL
45806: AND
45807: OR
45808: PUSH
45809: LD_VAR 0 1
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: IN
45824: NOT
45825: PUSH
45826: LD_VAR 0 6
45830: PUSH
45831: LD_INT 2
45833: EQUAL
45834: AND
45835: OR
45836: IFFALSE 45846
// mode = 0 ;
45838: LD_ADDR_VAR 0 6
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// case mode of 0 :
45846: LD_VAR 0 6
45850: PUSH
45851: LD_INT 0
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45859
45857: GO 57312
45859: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45860: LD_ADDR_VAR 0 11
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 3
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46053: LD_ADDR_VAR 0 12
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46249: LD_ADDR_VAR 0 13
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 14
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46644: LD_ADDR_VAR 0 15
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46837: LD_ADDR_VAR 0 16
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47030: LD_ADDR_VAR 0 17
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47260: LD_ADDR_VAR 0 18
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47490: LD_ADDR_VAR 0 19
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47720: LD_ADDR_VAR 0 20
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47950: LD_ADDR_VAR 0 21
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48180: LD_ADDR_VAR 0 22
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48410: LD_ADDR_VAR 0 23
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48690: LD_ADDR_VAR 0 24
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48966: LD_ADDR_VAR 0 25
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49240: LD_ADDR_VAR 0 26
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49516: LD_ADDR_VAR 0 27
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49796: LD_ADDR_VAR 0 28
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50078: LD_ADDR_VAR 0 29
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 3
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50357: LD_ADDR_VAR 0 30
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50635: LD_ADDR_VAR 0 31
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50913: LD_ADDR_VAR 0 32
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51191: LD_ADDR_VAR 0 33
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51470: LD_ADDR_VAR 0 34
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51750: LD_ADDR_VAR 0 35
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51862: LD_ADDR_VAR 0 36
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51974: LD_ADDR_VAR 0 37
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52086: LD_ADDR_VAR 0 38
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52198: LD_ADDR_VAR 0 39
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52310: LD_ADDR_VAR 0 40
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52422: LD_ADDR_VAR 0 41
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52772: LD_ADDR_VAR 0 42
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53122: LD_ADDR_VAR 0 43
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53470: LD_ADDR_VAR 0 44
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53820: LD_ADDR_VAR 0 45
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54170: LD_ADDR_VAR 0 46
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54518: LD_ADDR_VAR 0 47
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54669: LD_ADDR_VAR 0 48
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54816: LD_ADDR_VAR 0 49
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54960: LD_ADDR_VAR 0 50
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55104: LD_ADDR_VAR 0 51
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55251: LD_ADDR_VAR 0 52
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55402: LD_ADDR_VAR 0 53
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55632: LD_ADDR_VAR 0 54
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55862: LD_ADDR_VAR 0 55
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56092: LD_ADDR_VAR 0 56
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56322: LD_ADDR_VAR 0 57
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56552: LD_ADDR_VAR 0 58
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56782: LD_ADDR_VAR 0 59
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56870: LD_ADDR_VAR 0 60
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 61
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57046: LD_ADDR_VAR 0 62
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57134: LD_ADDR_VAR 0 63
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57222: LD_ADDR_VAR 0 64
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// end ; 1 :
57310: GO 63207
57312: LD_INT 1
57314: DOUBLE
57315: EQUAL
57316: IFTRUE 57320
57318: GO 59943
57320: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57321: LD_ADDR_VAR 0 11
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57365: LD_ADDR_VAR 0 12
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57406: LD_ADDR_VAR 0 13
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57446: LD_ADDR_VAR 0 14
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 3
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: LIST
57486: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57487: LD_ADDR_VAR 0 15
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57531: LD_ADDR_VAR 0 16
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57577: LD_ADDR_VAR 0 17
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 3
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57621: LD_ADDR_VAR 0 18
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57662: LD_ADDR_VAR 0 19
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57702: LD_ADDR_VAR 0 20
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57743: LD_ADDR_VAR 0 21
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57787: LD_ADDR_VAR 0 22
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 3
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57833: LD_ADDR_VAR 0 23
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 4
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57877: LD_ADDR_VAR 0 24
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57918: LD_ADDR_VAR 0 25
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57958: LD_ADDR_VAR 0 26
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 4
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57999: LD_ADDR_VAR 0 27
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 4
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58043: LD_ADDR_VAR 0 28
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58089: LD_ADDR_VAR 0 29
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 4
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 4
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 5
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 5
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 4
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 6
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 6
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58244: LD_ADDR_VAR 0 30
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 6
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 6
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58387: LD_ADDR_VAR 0 31
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: PUSH
58455: LD_INT 4
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: LD_INT 5
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 5
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 6
58484: PUSH
58485: LD_INT 5
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 6
58494: PUSH
58495: LD_INT 6
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 5
58504: PUSH
58505: LD_INT 6
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58526: LD_ADDR_VAR 0 32
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 5
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 5
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 4
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 6
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 6
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 5
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58669: LD_ADDR_VAR 0 33
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 4
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 4
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 5
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 5
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 6
58789: NEG
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 6
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58824: LD_ADDR_VAR 0 34
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 4
58879: NEG
58880: PUSH
58881: LD_INT 3
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: NEG
58892: PUSH
58893: LD_INT 4
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 5
58915: NEG
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 5
58927: NEG
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 5
58939: NEG
58940: PUSH
58941: LD_INT 6
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 6
58951: NEG
58952: PUSH
58953: LD_INT 5
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 6
58963: NEG
58964: PUSH
58965: LD_INT 6
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58987: LD_ADDR_VAR 0 41
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59031: LD_ADDR_VAR 0 42
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59072: LD_ADDR_VAR 0 43
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59112: LD_ADDR_VAR 0 44
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 3
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59153: LD_ADDR_VAR 0 45
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 46
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59243: LD_ADDR_VAR 0 47
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59276: LD_ADDR_VAR 0 48
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59307: LD_ADDR_VAR 0 49
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59336: LD_ADDR_VAR 0 50
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59365: LD_ADDR_VAR 0 51
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59396: LD_ADDR_VAR 0 52
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59429: LD_ADDR_VAR 0 53
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59473: LD_ADDR_VAR 0 54
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59514: LD_ADDR_VAR 0 55
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59554: LD_ADDR_VAR 0 56
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59595: LD_ADDR_VAR 0 57
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59639: LD_ADDR_VAR 0 58
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59685: LD_ADDR_VAR 0 59
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59729: LD_ADDR_VAR 0 60
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59770: LD_ADDR_VAR 0 61
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59810: LD_ADDR_VAR 0 62
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59851: LD_ADDR_VAR 0 63
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59895: LD_ADDR_VAR 0 64
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: ST_TO_ADDR
// end ; 2 :
59941: GO 63207
59943: LD_INT 2
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59951
59949: GO 63206
59951: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59952: LD_ADDR_VAR 0 29
59956: PUSH
59957: LD_INT 4
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 5
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: LD_INT 4
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 4
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 5
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 5
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 4
60337: NEG
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 4
60349: NEG
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 4
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 5
60397: NEG
60398: PUSH
60399: LD_INT 4
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 5
60409: NEG
60410: PUSH
60411: LD_INT 5
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: LD_INT 5
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 5
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60490: LD_ADDR_VAR 0 30
60494: PUSH
60495: LD_INT 4
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 5
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 5
60527: PUSH
60528: LD_INT 5
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: LD_INT 5
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: LD_INT 5
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 4
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 5
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 5
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 5
60759: NEG
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: LD_INT 3
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 4
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 5
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61037: LD_ADDR_VAR 0 31
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 4
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 4
61193: NEG
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: NEG
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 4
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: LD_INT 5
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 4
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 4
61287: NEG
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: LD_INT 4
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 5
61311: NEG
61312: PUSH
61313: LD_INT 5
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: LD_INT 5
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 5
61335: NEG
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 4
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 4
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 5
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 5
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 5
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61587: LD_ADDR_VAR 0 32
61591: PUSH
61592: LD_INT 4
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: NEG
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 5
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 5
61673: NEG
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: LD_INT 4
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 4
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: NEG
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 4
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 5
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 4
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 5
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 4
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: LD_INT 4
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 4
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 5
62019: PUSH
62020: LD_INT 4
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: LD_INT 5
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 4
62039: PUSH
62040: LD_INT 5
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: LD_INT 4
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62134: LD_ADDR_VAR 0 33
62138: PUSH
62139: LD_INT 4
62141: NEG
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: LD_INT 5
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 4
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 4
62189: NEG
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: NEG
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 5
62213: NEG
62214: PUSH
62215: LD_INT 5
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: LD_INT 5
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 5
62237: NEG
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 4
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: LD_INT 4
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 4
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 4
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 5
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 4
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 5
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: LD_INT 4
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 4
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 4
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 4
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 5
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 5
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: LD_INT 5
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62672: LD_ADDR_VAR 0 34
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 4
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 5
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 4
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 5
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: LD_INT 5
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 4
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 4
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: LD_INT 4
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: LD_INT 5
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 4
62914: PUSH
62915: LD_INT 5
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: LD_INT 4
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 5
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 5
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 4
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 4
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 4
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 4
63057: NEG
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 4
63068: NEG
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: NEG
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 4
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 5
63113: NEG
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 5
63124: NEG
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 5
63136: NEG
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: ST_TO_ADDR
// end ; end ;
63204: GO 63207
63206: POP
// case btype of b_depot , b_warehouse :
63207: LD_VAR 0 1
63211: PUSH
63212: LD_INT 0
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63226
63218: LD_INT 1
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63226
63224: GO 63427
63226: POP
// case nation of nation_american :
63227: LD_VAR 0 5
63231: PUSH
63232: LD_INT 1
63234: DOUBLE
63235: EQUAL
63236: IFTRUE 63240
63238: GO 63296
63240: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63241: LD_ADDR_VAR 0 9
63245: PUSH
63246: LD_VAR 0 11
63250: PUSH
63251: LD_VAR 0 12
63255: PUSH
63256: LD_VAR 0 13
63260: PUSH
63261: LD_VAR 0 14
63265: PUSH
63266: LD_VAR 0 15
63270: PUSH
63271: LD_VAR 0 16
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 4
63288: PUSH
63289: LD_INT 1
63291: PLUS
63292: ARRAY
63293: ST_TO_ADDR
63294: GO 63425
63296: LD_INT 2
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63304
63302: GO 63360
63304: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63305: LD_ADDR_VAR 0 9
63309: PUSH
63310: LD_VAR 0 17
63314: PUSH
63315: LD_VAR 0 18
63319: PUSH
63320: LD_VAR 0 19
63324: PUSH
63325: LD_VAR 0 20
63329: PUSH
63330: LD_VAR 0 21
63334: PUSH
63335: LD_VAR 0 22
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: PUSH
63348: LD_VAR 0 4
63352: PUSH
63353: LD_INT 1
63355: PLUS
63356: ARRAY
63357: ST_TO_ADDR
63358: GO 63425
63360: LD_INT 3
63362: DOUBLE
63363: EQUAL
63364: IFTRUE 63368
63366: GO 63424
63368: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63369: LD_ADDR_VAR 0 9
63373: PUSH
63374: LD_VAR 0 23
63378: PUSH
63379: LD_VAR 0 24
63383: PUSH
63384: LD_VAR 0 25
63388: PUSH
63389: LD_VAR 0 26
63393: PUSH
63394: LD_VAR 0 27
63398: PUSH
63399: LD_VAR 0 28
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: PUSH
63412: LD_VAR 0 4
63416: PUSH
63417: LD_INT 1
63419: PLUS
63420: ARRAY
63421: ST_TO_ADDR
63422: GO 63425
63424: POP
63425: GO 63980
63427: LD_INT 2
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63441
63433: LD_INT 3
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63441
63439: GO 63497
63441: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63442: LD_ADDR_VAR 0 9
63446: PUSH
63447: LD_VAR 0 29
63451: PUSH
63452: LD_VAR 0 30
63456: PUSH
63457: LD_VAR 0 31
63461: PUSH
63462: LD_VAR 0 32
63466: PUSH
63467: LD_VAR 0 33
63471: PUSH
63472: LD_VAR 0 34
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: PUSH
63485: LD_VAR 0 4
63489: PUSH
63490: LD_INT 1
63492: PLUS
63493: ARRAY
63494: ST_TO_ADDR
63495: GO 63980
63497: LD_INT 16
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63559
63503: LD_INT 17
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63559
63509: LD_INT 18
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63559
63515: LD_INT 19
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63559
63521: LD_INT 22
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63559
63527: LD_INT 20
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63559
63533: LD_INT 21
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63559
63539: LD_INT 23
63541: DOUBLE
63542: EQUAL
63543: IFTRUE 63559
63545: LD_INT 24
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63559
63551: LD_INT 25
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63559
63557: GO 63615
63559: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63560: LD_ADDR_VAR 0 9
63564: PUSH
63565: LD_VAR 0 35
63569: PUSH
63570: LD_VAR 0 36
63574: PUSH
63575: LD_VAR 0 37
63579: PUSH
63580: LD_VAR 0 38
63584: PUSH
63585: LD_VAR 0 39
63589: PUSH
63590: LD_VAR 0 40
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_INT 1
63610: PLUS
63611: ARRAY
63612: ST_TO_ADDR
63613: GO 63980
63615: LD_INT 6
63617: DOUBLE
63618: EQUAL
63619: IFTRUE 63671
63621: LD_INT 7
63623: DOUBLE
63624: EQUAL
63625: IFTRUE 63671
63627: LD_INT 8
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63671
63633: LD_INT 13
63635: DOUBLE
63636: EQUAL
63637: IFTRUE 63671
63639: LD_INT 12
63641: DOUBLE
63642: EQUAL
63643: IFTRUE 63671
63645: LD_INT 15
63647: DOUBLE
63648: EQUAL
63649: IFTRUE 63671
63651: LD_INT 11
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63671
63657: LD_INT 14
63659: DOUBLE
63660: EQUAL
63661: IFTRUE 63671
63663: LD_INT 10
63665: DOUBLE
63666: EQUAL
63667: IFTRUE 63671
63669: GO 63727
63671: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63672: LD_ADDR_VAR 0 9
63676: PUSH
63677: LD_VAR 0 41
63681: PUSH
63682: LD_VAR 0 42
63686: PUSH
63687: LD_VAR 0 43
63691: PUSH
63692: LD_VAR 0 44
63696: PUSH
63697: LD_VAR 0 45
63701: PUSH
63702: LD_VAR 0 46
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: PUSH
63715: LD_VAR 0 4
63719: PUSH
63720: LD_INT 1
63722: PLUS
63723: ARRAY
63724: ST_TO_ADDR
63725: GO 63980
63727: LD_INT 36
63729: DOUBLE
63730: EQUAL
63731: IFTRUE 63735
63733: GO 63791
63735: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63736: LD_ADDR_VAR 0 9
63740: PUSH
63741: LD_VAR 0 47
63745: PUSH
63746: LD_VAR 0 48
63750: PUSH
63751: LD_VAR 0 49
63755: PUSH
63756: LD_VAR 0 50
63760: PUSH
63761: LD_VAR 0 51
63765: PUSH
63766: LD_VAR 0 52
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: LD_VAR 0 4
63783: PUSH
63784: LD_INT 1
63786: PLUS
63787: ARRAY
63788: ST_TO_ADDR
63789: GO 63980
63791: LD_INT 4
63793: DOUBLE
63794: EQUAL
63795: IFTRUE 63817
63797: LD_INT 5
63799: DOUBLE
63800: EQUAL
63801: IFTRUE 63817
63803: LD_INT 34
63805: DOUBLE
63806: EQUAL
63807: IFTRUE 63817
63809: LD_INT 37
63811: DOUBLE
63812: EQUAL
63813: IFTRUE 63817
63815: GO 63873
63817: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63818: LD_ADDR_VAR 0 9
63822: PUSH
63823: LD_VAR 0 53
63827: PUSH
63828: LD_VAR 0 54
63832: PUSH
63833: LD_VAR 0 55
63837: PUSH
63838: LD_VAR 0 56
63842: PUSH
63843: LD_VAR 0 57
63847: PUSH
63848: LD_VAR 0 58
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: PUSH
63861: LD_VAR 0 4
63865: PUSH
63866: LD_INT 1
63868: PLUS
63869: ARRAY
63870: ST_TO_ADDR
63871: GO 63980
63873: LD_INT 31
63875: DOUBLE
63876: EQUAL
63877: IFTRUE 63923
63879: LD_INT 32
63881: DOUBLE
63882: EQUAL
63883: IFTRUE 63923
63885: LD_INT 33
63887: DOUBLE
63888: EQUAL
63889: IFTRUE 63923
63891: LD_INT 27
63893: DOUBLE
63894: EQUAL
63895: IFTRUE 63923
63897: LD_INT 26
63899: DOUBLE
63900: EQUAL
63901: IFTRUE 63923
63903: LD_INT 28
63905: DOUBLE
63906: EQUAL
63907: IFTRUE 63923
63909: LD_INT 29
63911: DOUBLE
63912: EQUAL
63913: IFTRUE 63923
63915: LD_INT 30
63917: DOUBLE
63918: EQUAL
63919: IFTRUE 63923
63921: GO 63979
63923: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63924: LD_ADDR_VAR 0 9
63928: PUSH
63929: LD_VAR 0 59
63933: PUSH
63934: LD_VAR 0 60
63938: PUSH
63939: LD_VAR 0 61
63943: PUSH
63944: LD_VAR 0 62
63948: PUSH
63949: LD_VAR 0 63
63953: PUSH
63954: LD_VAR 0 64
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: PUSH
63967: LD_VAR 0 4
63971: PUSH
63972: LD_INT 1
63974: PLUS
63975: ARRAY
63976: ST_TO_ADDR
63977: GO 63980
63979: POP
// temp_list2 = [ ] ;
63980: LD_ADDR_VAR 0 10
63984: PUSH
63985: EMPTY
63986: ST_TO_ADDR
// for i in temp_list do
63987: LD_ADDR_VAR 0 8
63991: PUSH
63992: LD_VAR 0 9
63996: PUSH
63997: FOR_IN
63998: IFFALSE 64050
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64000: LD_ADDR_VAR 0 10
64004: PUSH
64005: LD_VAR 0 10
64009: PUSH
64010: LD_VAR 0 8
64014: PUSH
64015: LD_INT 1
64017: ARRAY
64018: PUSH
64019: LD_VAR 0 2
64023: PLUS
64024: PUSH
64025: LD_VAR 0 8
64029: PUSH
64030: LD_INT 2
64032: ARRAY
64033: PUSH
64034: LD_VAR 0 3
64038: PLUS
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: ADD
64047: ST_TO_ADDR
64048: GO 63997
64050: POP
64051: POP
// result = temp_list2 ;
64052: LD_ADDR_VAR 0 7
64056: PUSH
64057: LD_VAR 0 10
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 7
64066: RET
// export function EnemyInRange ( unit , dist ) ; begin
64067: LD_INT 0
64069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64070: LD_ADDR_VAR 0 3
64074: PUSH
64075: LD_VAR 0 1
64079: PPUSH
64080: CALL_OW 255
64084: PPUSH
64085: LD_VAR 0 1
64089: PPUSH
64090: CALL_OW 250
64094: PPUSH
64095: LD_VAR 0 1
64099: PPUSH
64100: CALL_OW 251
64104: PPUSH
64105: LD_VAR 0 2
64109: PPUSH
64110: CALL 38171 0 4
64114: PUSH
64115: LD_INT 4
64117: ARRAY
64118: ST_TO_ADDR
// end ;
64119: LD_VAR 0 3
64123: RET
// export function PlayerSeeMe ( unit ) ; begin
64124: LD_INT 0
64126: PPUSH
// result := See ( your_side , unit ) ;
64127: LD_ADDR_VAR 0 2
64131: PUSH
64132: LD_OWVAR 2
64136: PPUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: CALL_OW 292
64146: ST_TO_ADDR
// end ;
64147: LD_VAR 0 2
64151: RET
// export function ReverseDir ( unit ) ; begin
64152: LD_INT 0
64154: PPUSH
// if not unit then
64155: LD_VAR 0 1
64159: NOT
64160: IFFALSE 64164
// exit ;
64162: GO 64187
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64164: LD_ADDR_VAR 0 2
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 254
64178: PUSH
64179: LD_INT 3
64181: PLUS
64182: PUSH
64183: LD_INT 6
64185: MOD
64186: ST_TO_ADDR
// end ;
64187: LD_VAR 0 2
64191: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64192: LD_INT 0
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
// if not hexes then
64199: LD_VAR 0 2
64203: NOT
64204: IFFALSE 64208
// exit ;
64206: GO 64356
// dist := 9999 ;
64208: LD_ADDR_VAR 0 5
64212: PUSH
64213: LD_INT 9999
64215: ST_TO_ADDR
// for i = 1 to hexes do
64216: LD_ADDR_VAR 0 4
64220: PUSH
64221: DOUBLE
64222: LD_INT 1
64224: DEC
64225: ST_TO_ADDR
64226: LD_VAR 0 2
64230: PUSH
64231: FOR_TO
64232: IFFALSE 64344
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_VAR 0 2
64243: PUSH
64244: LD_VAR 0 4
64248: ARRAY
64249: PUSH
64250: LD_INT 1
64252: ARRAY
64253: PPUSH
64254: LD_VAR 0 2
64258: PUSH
64259: LD_VAR 0 4
64263: ARRAY
64264: PUSH
64265: LD_INT 2
64267: ARRAY
64268: PPUSH
64269: CALL_OW 297
64273: PUSH
64274: LD_VAR 0 5
64278: LESS
64279: IFFALSE 64342
// begin hex := hexes [ i ] ;
64281: LD_ADDR_VAR 0 7
64285: PUSH
64286: LD_VAR 0 2
64290: PUSH
64291: LD_VAR 0 4
64295: ARRAY
64296: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: LD_VAR 0 1
64306: PPUSH
64307: LD_VAR 0 2
64311: PUSH
64312: LD_VAR 0 4
64316: ARRAY
64317: PUSH
64318: LD_INT 1
64320: ARRAY
64321: PPUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_VAR 0 4
64331: ARRAY
64332: PUSH
64333: LD_INT 2
64335: ARRAY
64336: PPUSH
64337: CALL_OW 297
64341: ST_TO_ADDR
// end ; end ;
64342: GO 64231
64344: POP
64345: POP
// result := hex ;
64346: LD_ADDR_VAR 0 3
64350: PUSH
64351: LD_VAR 0 7
64355: ST_TO_ADDR
// end ;
64356: LD_VAR 0 3
64360: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64361: LD_INT 0
64363: PPUSH
64364: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64365: LD_VAR 0 1
64369: NOT
64370: PUSH
64371: LD_VAR 0 1
64375: PUSH
64376: LD_INT 21
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 23
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PPUSH
64400: CALL_OW 69
64404: IN
64405: NOT
64406: OR
64407: IFFALSE 64411
// exit ;
64409: GO 64458
// for i = 1 to 3 do
64411: LD_ADDR_VAR 0 3
64415: PUSH
64416: DOUBLE
64417: LD_INT 1
64419: DEC
64420: ST_TO_ADDR
64421: LD_INT 3
64423: PUSH
64424: FOR_TO
64425: IFFALSE 64456
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 250
64436: PPUSH
64437: LD_VAR 0 1
64441: PPUSH
64442: CALL_OW 251
64446: PPUSH
64447: LD_INT 1
64449: PPUSH
64450: CALL_OW 453
64454: GO 64424
64456: POP
64457: POP
// end ;
64458: LD_VAR 0 2
64462: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
64467: PPUSH
64468: PPUSH
64469: PPUSH
64470: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64471: LD_VAR 0 1
64475: NOT
64476: PUSH
64477: LD_VAR 0 2
64481: NOT
64482: OR
64483: PUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: CALL_OW 314
64493: OR
64494: IFFALSE 64498
// exit ;
64496: GO 64939
// x := GetX ( enemy_unit ) ;
64498: LD_ADDR_VAR 0 7
64502: PUSH
64503: LD_VAR 0 2
64507: PPUSH
64508: CALL_OW 250
64512: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64513: LD_ADDR_VAR 0 8
64517: PUSH
64518: LD_VAR 0 2
64522: PPUSH
64523: CALL_OW 251
64527: ST_TO_ADDR
// if not x or not y then
64528: LD_VAR 0 7
64532: NOT
64533: PUSH
64534: LD_VAR 0 8
64538: NOT
64539: OR
64540: IFFALSE 64544
// exit ;
64542: GO 64939
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64544: LD_ADDR_VAR 0 6
64548: PUSH
64549: LD_VAR 0 7
64553: PPUSH
64554: LD_INT 0
64556: PPUSH
64557: LD_INT 4
64559: PPUSH
64560: CALL_OW 272
64564: PUSH
64565: LD_VAR 0 8
64569: PPUSH
64570: LD_INT 0
64572: PPUSH
64573: LD_INT 4
64575: PPUSH
64576: CALL_OW 273
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_VAR 0 7
64589: PPUSH
64590: LD_INT 1
64592: PPUSH
64593: LD_INT 4
64595: PPUSH
64596: CALL_OW 272
64600: PUSH
64601: LD_VAR 0 8
64605: PPUSH
64606: LD_INT 1
64608: PPUSH
64609: LD_INT 4
64611: PPUSH
64612: CALL_OW 273
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_VAR 0 7
64625: PPUSH
64626: LD_INT 2
64628: PPUSH
64629: LD_INT 4
64631: PPUSH
64632: CALL_OW 272
64636: PUSH
64637: LD_VAR 0 8
64641: PPUSH
64642: LD_INT 2
64644: PPUSH
64645: LD_INT 4
64647: PPUSH
64648: CALL_OW 273
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_VAR 0 7
64661: PPUSH
64662: LD_INT 3
64664: PPUSH
64665: LD_INT 4
64667: PPUSH
64668: CALL_OW 272
64672: PUSH
64673: LD_VAR 0 8
64677: PPUSH
64678: LD_INT 3
64680: PPUSH
64681: LD_INT 4
64683: PPUSH
64684: CALL_OW 273
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_VAR 0 7
64697: PPUSH
64698: LD_INT 4
64700: PPUSH
64701: LD_INT 4
64703: PPUSH
64704: CALL_OW 272
64708: PUSH
64709: LD_VAR 0 8
64713: PPUSH
64714: LD_INT 4
64716: PPUSH
64717: LD_INT 4
64719: PPUSH
64720: CALL_OW 273
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_VAR 0 7
64733: PPUSH
64734: LD_INT 5
64736: PPUSH
64737: LD_INT 4
64739: PPUSH
64740: CALL_OW 272
64744: PUSH
64745: LD_VAR 0 8
64749: PPUSH
64750: LD_INT 5
64752: PPUSH
64753: LD_INT 4
64755: PPUSH
64756: CALL_OW 273
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// for i = tmp downto 1 do
64773: LD_ADDR_VAR 0 4
64777: PUSH
64778: DOUBLE
64779: LD_VAR 0 6
64783: INC
64784: ST_TO_ADDR
64785: LD_INT 1
64787: PUSH
64788: FOR_DOWNTO
64789: IFFALSE 64890
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64791: LD_VAR 0 6
64795: PUSH
64796: LD_VAR 0 4
64800: ARRAY
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PPUSH
64806: LD_VAR 0 6
64810: PUSH
64811: LD_VAR 0 4
64815: ARRAY
64816: PUSH
64817: LD_INT 2
64819: ARRAY
64820: PPUSH
64821: CALL_OW 488
64825: NOT
64826: PUSH
64827: LD_VAR 0 6
64831: PUSH
64832: LD_VAR 0 4
64836: ARRAY
64837: PUSH
64838: LD_INT 1
64840: ARRAY
64841: PPUSH
64842: LD_VAR 0 6
64846: PUSH
64847: LD_VAR 0 4
64851: ARRAY
64852: PUSH
64853: LD_INT 2
64855: ARRAY
64856: PPUSH
64857: CALL_OW 428
64861: PUSH
64862: LD_INT 0
64864: NONEQUAL
64865: OR
64866: IFFALSE 64888
// tmp := Delete ( tmp , i ) ;
64868: LD_ADDR_VAR 0 6
64872: PUSH
64873: LD_VAR 0 6
64877: PPUSH
64878: LD_VAR 0 4
64882: PPUSH
64883: CALL_OW 3
64887: ST_TO_ADDR
64888: GO 64788
64890: POP
64891: POP
// j := GetClosestHex ( unit , tmp ) ;
64892: LD_ADDR_VAR 0 5
64896: PUSH
64897: LD_VAR 0 1
64901: PPUSH
64902: LD_VAR 0 6
64906: PPUSH
64907: CALL 64192 0 2
64911: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64912: LD_VAR 0 1
64916: PPUSH
64917: LD_VAR 0 5
64921: PUSH
64922: LD_INT 1
64924: ARRAY
64925: PPUSH
64926: LD_VAR 0 5
64930: PUSH
64931: LD_INT 2
64933: ARRAY
64934: PPUSH
64935: CALL_OW 111
// end ;
64939: LD_VAR 0 3
64943: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64944: LD_INT 0
64946: PPUSH
64947: PPUSH
64948: PPUSH
// uc_side = 0 ;
64949: LD_ADDR_OWVAR 20
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// uc_nation = 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// InitHc_All ( ) ;
64965: CALL_OW 584
// InitVc ;
64969: CALL_OW 20
// if mastodonts then
64973: LD_VAR 0 6
64977: IFFALSE 65044
// for i = 1 to mastodonts do
64979: LD_ADDR_VAR 0 11
64983: PUSH
64984: DOUBLE
64985: LD_INT 1
64987: DEC
64988: ST_TO_ADDR
64989: LD_VAR 0 6
64993: PUSH
64994: FOR_TO
64995: IFFALSE 65042
// begin vc_chassis := 31 ;
64997: LD_ADDR_OWVAR 37
65001: PUSH
65002: LD_INT 31
65004: ST_TO_ADDR
// vc_control := control_rider ;
65005: LD_ADDR_OWVAR 38
65009: PUSH
65010: LD_INT 4
65012: ST_TO_ADDR
// animal := CreateVehicle ;
65013: LD_ADDR_VAR 0 12
65017: PUSH
65018: CALL_OW 45
65022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65023: LD_VAR 0 12
65027: PPUSH
65028: LD_VAR 0 8
65032: PPUSH
65033: LD_INT 0
65035: PPUSH
65036: CALL 67232 0 3
// end ;
65040: GO 64994
65042: POP
65043: POP
// if horses then
65044: LD_VAR 0 5
65048: IFFALSE 65115
// for i = 1 to horses do
65050: LD_ADDR_VAR 0 11
65054: PUSH
65055: DOUBLE
65056: LD_INT 1
65058: DEC
65059: ST_TO_ADDR
65060: LD_VAR 0 5
65064: PUSH
65065: FOR_TO
65066: IFFALSE 65113
// begin hc_class := 21 ;
65068: LD_ADDR_OWVAR 28
65072: PUSH
65073: LD_INT 21
65075: ST_TO_ADDR
// hc_gallery :=  ;
65076: LD_ADDR_OWVAR 33
65080: PUSH
65081: LD_STRING 
65083: ST_TO_ADDR
// animal := CreateHuman ;
65084: LD_ADDR_VAR 0 12
65088: PUSH
65089: CALL_OW 44
65093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65094: LD_VAR 0 12
65098: PPUSH
65099: LD_VAR 0 8
65103: PPUSH
65104: LD_INT 0
65106: PPUSH
65107: CALL 67232 0 3
// end ;
65111: GO 65065
65113: POP
65114: POP
// if birds then
65115: LD_VAR 0 1
65119: IFFALSE 65186
// for i = 1 to birds do
65121: LD_ADDR_VAR 0 11
65125: PUSH
65126: DOUBLE
65127: LD_INT 1
65129: DEC
65130: ST_TO_ADDR
65131: LD_VAR 0 1
65135: PUSH
65136: FOR_TO
65137: IFFALSE 65184
// begin hc_class = 18 ;
65139: LD_ADDR_OWVAR 28
65143: PUSH
65144: LD_INT 18
65146: ST_TO_ADDR
// hc_gallery =  ;
65147: LD_ADDR_OWVAR 33
65151: PUSH
65152: LD_STRING 
65154: ST_TO_ADDR
// animal := CreateHuman ;
65155: LD_ADDR_VAR 0 12
65159: PUSH
65160: CALL_OW 44
65164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65165: LD_VAR 0 12
65169: PPUSH
65170: LD_VAR 0 8
65174: PPUSH
65175: LD_INT 0
65177: PPUSH
65178: CALL 67232 0 3
// end ;
65182: GO 65136
65184: POP
65185: POP
// if tigers then
65186: LD_VAR 0 2
65190: IFFALSE 65274
// for i = 1 to tigers do
65192: LD_ADDR_VAR 0 11
65196: PUSH
65197: DOUBLE
65198: LD_INT 1
65200: DEC
65201: ST_TO_ADDR
65202: LD_VAR 0 2
65206: PUSH
65207: FOR_TO
65208: IFFALSE 65272
// begin hc_class = class_tiger ;
65210: LD_ADDR_OWVAR 28
65214: PUSH
65215: LD_INT 14
65217: ST_TO_ADDR
// hc_gallery =  ;
65218: LD_ADDR_OWVAR 33
65222: PUSH
65223: LD_STRING 
65225: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65226: LD_ADDR_OWVAR 35
65230: PUSH
65231: LD_INT 7
65233: NEG
65234: PPUSH
65235: LD_INT 7
65237: PPUSH
65238: CALL_OW 12
65242: ST_TO_ADDR
// animal := CreateHuman ;
65243: LD_ADDR_VAR 0 12
65247: PUSH
65248: CALL_OW 44
65252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65253: LD_VAR 0 12
65257: PPUSH
65258: LD_VAR 0 8
65262: PPUSH
65263: LD_INT 0
65265: PPUSH
65266: CALL 67232 0 3
// end ;
65270: GO 65207
65272: POP
65273: POP
// if apemans then
65274: LD_VAR 0 3
65278: IFFALSE 65401
// for i = 1 to apemans do
65280: LD_ADDR_VAR 0 11
65284: PUSH
65285: DOUBLE
65286: LD_INT 1
65288: DEC
65289: ST_TO_ADDR
65290: LD_VAR 0 3
65294: PUSH
65295: FOR_TO
65296: IFFALSE 65399
// begin hc_class = class_apeman ;
65298: LD_ADDR_OWVAR 28
65302: PUSH
65303: LD_INT 12
65305: ST_TO_ADDR
// hc_gallery =  ;
65306: LD_ADDR_OWVAR 33
65310: PUSH
65311: LD_STRING 
65313: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65314: LD_ADDR_OWVAR 35
65318: PUSH
65319: LD_INT 5
65321: NEG
65322: PPUSH
65323: LD_INT 5
65325: PPUSH
65326: CALL_OW 12
65330: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65331: LD_ADDR_OWVAR 31
65335: PUSH
65336: LD_INT 1
65338: PPUSH
65339: LD_INT 3
65341: PPUSH
65342: CALL_OW 12
65346: PUSH
65347: LD_INT 1
65349: PPUSH
65350: LD_INT 3
65352: PPUSH
65353: CALL_OW 12
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// animal := CreateHuman ;
65370: LD_ADDR_VAR 0 12
65374: PUSH
65375: CALL_OW 44
65379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65380: LD_VAR 0 12
65384: PPUSH
65385: LD_VAR 0 8
65389: PPUSH
65390: LD_INT 0
65392: PPUSH
65393: CALL 67232 0 3
// end ;
65397: GO 65295
65399: POP
65400: POP
// if enchidnas then
65401: LD_VAR 0 4
65405: IFFALSE 65472
// for i = 1 to enchidnas do
65407: LD_ADDR_VAR 0 11
65411: PUSH
65412: DOUBLE
65413: LD_INT 1
65415: DEC
65416: ST_TO_ADDR
65417: LD_VAR 0 4
65421: PUSH
65422: FOR_TO
65423: IFFALSE 65470
// begin hc_class = 13 ;
65425: LD_ADDR_OWVAR 28
65429: PUSH
65430: LD_INT 13
65432: ST_TO_ADDR
// hc_gallery =  ;
65433: LD_ADDR_OWVAR 33
65437: PUSH
65438: LD_STRING 
65440: ST_TO_ADDR
// animal := CreateHuman ;
65441: LD_ADDR_VAR 0 12
65445: PUSH
65446: CALL_OW 44
65450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65451: LD_VAR 0 12
65455: PPUSH
65456: LD_VAR 0 8
65460: PPUSH
65461: LD_INT 0
65463: PPUSH
65464: CALL 67232 0 3
// end ;
65468: GO 65422
65470: POP
65471: POP
// if fishes then
65472: LD_VAR 0 7
65476: IFFALSE 65543
// for i = 1 to fishes do
65478: LD_ADDR_VAR 0 11
65482: PUSH
65483: DOUBLE
65484: LD_INT 1
65486: DEC
65487: ST_TO_ADDR
65488: LD_VAR 0 7
65492: PUSH
65493: FOR_TO
65494: IFFALSE 65541
// begin hc_class = 20 ;
65496: LD_ADDR_OWVAR 28
65500: PUSH
65501: LD_INT 20
65503: ST_TO_ADDR
// hc_gallery =  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// animal := CreateHuman ;
65512: LD_ADDR_VAR 0 12
65516: PUSH
65517: CALL_OW 44
65521: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65522: LD_VAR 0 12
65526: PPUSH
65527: LD_VAR 0 9
65531: PPUSH
65532: LD_INT 0
65534: PPUSH
65535: CALL 67232 0 3
// end ;
65539: GO 65493
65541: POP
65542: POP
// end ;
65543: LD_VAR 0 10
65547: RET
// export function WantHeal ( sci , unit ) ; begin
65548: LD_INT 0
65550: PPUSH
// if GetTaskList ( sci ) > 0 then
65551: LD_VAR 0 1
65555: PPUSH
65556: CALL_OW 437
65560: PUSH
65561: LD_INT 0
65563: GREATER
65564: IFFALSE 65634
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65566: LD_VAR 0 1
65570: PPUSH
65571: CALL_OW 437
65575: PUSH
65576: LD_INT 1
65578: ARRAY
65579: PUSH
65580: LD_INT 1
65582: ARRAY
65583: PUSH
65584: LD_STRING l
65586: EQUAL
65587: PUSH
65588: LD_VAR 0 1
65592: PPUSH
65593: CALL_OW 437
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: PUSH
65602: LD_INT 4
65604: ARRAY
65605: PUSH
65606: LD_VAR 0 2
65610: EQUAL
65611: AND
65612: IFFALSE 65624
// result := true else
65614: LD_ADDR_VAR 0 3
65618: PUSH
65619: LD_INT 1
65621: ST_TO_ADDR
65622: GO 65632
// result := false ;
65624: LD_ADDR_VAR 0 3
65628: PUSH
65629: LD_INT 0
65631: ST_TO_ADDR
// end else
65632: GO 65642
// result := false ;
65634: LD_ADDR_VAR 0 3
65638: PUSH
65639: LD_INT 0
65641: ST_TO_ADDR
// end ;
65642: LD_VAR 0 3
65646: RET
// export function HealTarget ( sci ) ; begin
65647: LD_INT 0
65649: PPUSH
// if not sci then
65650: LD_VAR 0 1
65654: NOT
65655: IFFALSE 65659
// exit ;
65657: GO 65724
// result := 0 ;
65659: LD_ADDR_VAR 0 2
65663: PUSH
65664: LD_INT 0
65666: ST_TO_ADDR
// if GetTaskList ( sci ) then
65667: LD_VAR 0 1
65671: PPUSH
65672: CALL_OW 437
65676: IFFALSE 65724
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65678: LD_VAR 0 1
65682: PPUSH
65683: CALL_OW 437
65687: PUSH
65688: LD_INT 1
65690: ARRAY
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PUSH
65696: LD_STRING l
65698: EQUAL
65699: IFFALSE 65724
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65701: LD_ADDR_VAR 0 2
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: CALL_OW 437
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: PUSH
65720: LD_INT 4
65722: ARRAY
65723: ST_TO_ADDR
// end ;
65724: LD_VAR 0 2
65728: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
// if not base_units then
65735: LD_VAR 0 1
65739: NOT
65740: IFFALSE 65744
// exit ;
65742: GO 65831
// result := false ;
65744: LD_ADDR_VAR 0 2
65748: PUSH
65749: LD_INT 0
65751: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65752: LD_ADDR_VAR 0 5
65756: PUSH
65757: LD_VAR 0 1
65761: PPUSH
65762: LD_INT 21
65764: PUSH
65765: LD_INT 3
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PPUSH
65772: CALL_OW 72
65776: ST_TO_ADDR
// if not tmp then
65777: LD_VAR 0 5
65781: NOT
65782: IFFALSE 65786
// exit ;
65784: GO 65831
// for i in tmp do
65786: LD_ADDR_VAR 0 3
65790: PUSH
65791: LD_VAR 0 5
65795: PUSH
65796: FOR_IN
65797: IFFALSE 65829
// begin result := EnemyInRange ( i , 22 ) ;
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: LD_VAR 0 3
65808: PPUSH
65809: LD_INT 22
65811: PPUSH
65812: CALL 64067 0 2
65816: ST_TO_ADDR
// if result then
65817: LD_VAR 0 2
65821: IFFALSE 65827
// exit ;
65823: POP
65824: POP
65825: GO 65831
// end ;
65827: GO 65796
65829: POP
65830: POP
// end ;
65831: LD_VAR 0 2
65835: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65836: LD_INT 0
65838: PPUSH
65839: PPUSH
// if not units then
65840: LD_VAR 0 1
65844: NOT
65845: IFFALSE 65849
// exit ;
65847: GO 65919
// result := [ ] ;
65849: LD_ADDR_VAR 0 3
65853: PUSH
65854: EMPTY
65855: ST_TO_ADDR
// for i in units do
65856: LD_ADDR_VAR 0 4
65860: PUSH
65861: LD_VAR 0 1
65865: PUSH
65866: FOR_IN
65867: IFFALSE 65917
// if GetTag ( i ) = tag then
65869: LD_VAR 0 4
65873: PPUSH
65874: CALL_OW 110
65878: PUSH
65879: LD_VAR 0 2
65883: EQUAL
65884: IFFALSE 65915
// result := Insert ( result , result + 1 , i ) ;
65886: LD_ADDR_VAR 0 3
65890: PUSH
65891: LD_VAR 0 3
65895: PPUSH
65896: LD_VAR 0 3
65900: PUSH
65901: LD_INT 1
65903: PLUS
65904: PPUSH
65905: LD_VAR 0 4
65909: PPUSH
65910: CALL_OW 2
65914: ST_TO_ADDR
65915: GO 65866
65917: POP
65918: POP
// end ;
65919: LD_VAR 0 3
65923: RET
// export function IsDriver ( un ) ; begin
65924: LD_INT 0
65926: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65927: LD_ADDR_VAR 0 2
65931: PUSH
65932: LD_VAR 0 1
65936: PUSH
65937: LD_INT 55
65939: PUSH
65940: EMPTY
65941: LIST
65942: PPUSH
65943: CALL_OW 69
65947: IN
65948: ST_TO_ADDR
// end ;
65949: LD_VAR 0 2
65953: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65954: LD_INT 0
65956: PPUSH
65957: PPUSH
// list := [ ] ;
65958: LD_ADDR_VAR 0 5
65962: PUSH
65963: EMPTY
65964: ST_TO_ADDR
// case d of 0 :
65965: LD_VAR 0 3
65969: PUSH
65970: LD_INT 0
65972: DOUBLE
65973: EQUAL
65974: IFTRUE 65978
65976: GO 66111
65978: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65979: LD_ADDR_VAR 0 5
65983: PUSH
65984: LD_VAR 0 1
65988: PUSH
65989: LD_INT 4
65991: MINUS
65992: PUSH
65993: LD_VAR 0 2
65997: PUSH
65998: LD_INT 4
66000: MINUS
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: PUSH
66010: LD_VAR 0 1
66014: PUSH
66015: LD_INT 3
66017: MINUS
66018: PUSH
66019: LD_VAR 0 2
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: PUSH
66032: LD_VAR 0 1
66036: PUSH
66037: LD_INT 4
66039: PLUS
66040: PUSH
66041: LD_VAR 0 2
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: PUSH
66054: LD_VAR 0 1
66058: PUSH
66059: LD_INT 3
66061: PLUS
66062: PUSH
66063: LD_VAR 0 2
66067: PUSH
66068: LD_INT 3
66070: PLUS
66071: PUSH
66072: LD_INT 5
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: PUSH
66080: LD_VAR 0 1
66084: PUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_INT 4
66092: PLUS
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: ST_TO_ADDR
// end ; 1 :
66109: GO 66809
66111: LD_INT 1
66113: DOUBLE
66114: EQUAL
66115: IFTRUE 66119
66117: GO 66252
66119: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66120: LD_ADDR_VAR 0 5
66124: PUSH
66125: LD_VAR 0 1
66129: PUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_INT 4
66137: MINUS
66138: PUSH
66139: LD_INT 3
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 1
66151: PUSH
66152: LD_INT 3
66154: MINUS
66155: PUSH
66156: LD_VAR 0 2
66160: PUSH
66161: LD_INT 3
66163: MINUS
66164: PUSH
66165: LD_INT 2
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: PUSH
66173: LD_VAR 0 1
66177: PUSH
66178: LD_INT 4
66180: MINUS
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: PUSH
66195: LD_VAR 0 1
66199: PUSH
66200: LD_VAR 0 2
66204: PUSH
66205: LD_INT 3
66207: PLUS
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: PUSH
66217: LD_VAR 0 1
66221: PUSH
66222: LD_INT 4
66224: PLUS
66225: PUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_INT 4
66233: PLUS
66234: PUSH
66235: LD_INT 5
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: ST_TO_ADDR
// end ; 2 :
66250: GO 66809
66252: LD_INT 2
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66260
66258: GO 66389
66260: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66261: LD_ADDR_VAR 0 5
66265: PUSH
66266: LD_VAR 0 1
66270: PUSH
66271: LD_VAR 0 2
66275: PUSH
66276: LD_INT 3
66278: MINUS
66279: PUSH
66280: LD_INT 3
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: PUSH
66288: LD_VAR 0 1
66292: PUSH
66293: LD_INT 4
66295: PLUS
66296: PUSH
66297: LD_VAR 0 2
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_INT 4
66322: PLUS
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: LD_VAR 0 1
66336: PUSH
66337: LD_INT 3
66339: MINUS
66340: PUSH
66341: LD_VAR 0 2
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: PUSH
66354: LD_VAR 0 1
66358: PUSH
66359: LD_INT 4
66361: MINUS
66362: PUSH
66363: LD_VAR 0 2
66367: PUSH
66368: LD_INT 4
66370: MINUS
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// end ; 3 :
66387: GO 66809
66389: LD_INT 3
66391: DOUBLE
66392: EQUAL
66393: IFTRUE 66397
66395: GO 66530
66397: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66398: LD_ADDR_VAR 0 5
66402: PUSH
66403: LD_VAR 0 1
66407: PUSH
66408: LD_INT 3
66410: PLUS
66411: PUSH
66412: LD_VAR 0 2
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: PUSH
66425: LD_VAR 0 1
66429: PUSH
66430: LD_INT 4
66432: PLUS
66433: PUSH
66434: LD_VAR 0 2
66438: PUSH
66439: LD_INT 4
66441: PLUS
66442: PUSH
66443: LD_INT 5
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: PUSH
66451: LD_VAR 0 1
66455: PUSH
66456: LD_INT 4
66458: MINUS
66459: PUSH
66460: LD_VAR 0 2
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: LD_VAR 0 1
66477: PUSH
66478: LD_VAR 0 2
66482: PUSH
66483: LD_INT 4
66485: MINUS
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: PUSH
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 3
66502: MINUS
66503: PUSH
66504: LD_VAR 0 2
66508: PUSH
66509: LD_INT 3
66511: MINUS
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: ST_TO_ADDR
// end ; 4 :
66528: GO 66809
66530: LD_INT 4
66532: DOUBLE
66533: EQUAL
66534: IFTRUE 66538
66536: GO 66671
66538: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66539: LD_ADDR_VAR 0 5
66543: PUSH
66544: LD_VAR 0 1
66548: PUSH
66549: LD_VAR 0 2
66553: PUSH
66554: LD_INT 4
66556: PLUS
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_INT 3
66573: PLUS
66574: PUSH
66575: LD_VAR 0 2
66579: PUSH
66580: LD_INT 3
66582: PLUS
66583: PUSH
66584: LD_INT 5
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: PUSH
66592: LD_VAR 0 1
66596: PUSH
66597: LD_INT 4
66599: PLUS
66600: PUSH
66601: LD_VAR 0 2
66605: PUSH
66606: LD_INT 4
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: PUSH
66614: LD_VAR 0 1
66618: PUSH
66619: LD_VAR 0 2
66623: PUSH
66624: LD_INT 3
66626: MINUS
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: PUSH
66636: LD_VAR 0 1
66640: PUSH
66641: LD_INT 4
66643: MINUS
66644: PUSH
66645: LD_VAR 0 2
66649: PUSH
66650: LD_INT 4
66652: MINUS
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// end ; 5 :
66669: GO 66809
66671: LD_INT 5
66673: DOUBLE
66674: EQUAL
66675: IFTRUE 66679
66677: GO 66808
66679: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66680: LD_ADDR_VAR 0 5
66684: PUSH
66685: LD_VAR 0 1
66689: PUSH
66690: LD_INT 4
66692: MINUS
66693: PUSH
66694: LD_VAR 0 2
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: PUSH
66707: LD_VAR 0 1
66711: PUSH
66712: LD_VAR 0 2
66716: PUSH
66717: LD_INT 4
66719: MINUS
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 1
66733: PUSH
66734: LD_INT 4
66736: PLUS
66737: PUSH
66738: LD_VAR 0 2
66742: PUSH
66743: LD_INT 4
66745: PLUS
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: PUSH
66755: LD_VAR 0 1
66759: PUSH
66760: LD_INT 3
66762: PLUS
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: PUSH
66777: LD_VAR 0 1
66781: PUSH
66782: LD_VAR 0 2
66786: PUSH
66787: LD_INT 3
66789: PLUS
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: ST_TO_ADDR
// end ; end ;
66806: GO 66809
66808: POP
// result := list ;
66809: LD_ADDR_VAR 0 4
66813: PUSH
66814: LD_VAR 0 5
66818: ST_TO_ADDR
// end ;
66819: LD_VAR 0 4
66823: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66824: LD_INT 0
66826: PPUSH
66827: PPUSH
66828: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66829: LD_VAR 0 1
66833: NOT
66834: PUSH
66835: LD_VAR 0 2
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: LD_INT 3
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: IN
66858: NOT
66859: OR
66860: IFFALSE 66864
// exit ;
66862: GO 66956
// tmp := [ ] ;
66864: LD_ADDR_VAR 0 5
66868: PUSH
66869: EMPTY
66870: ST_TO_ADDR
// for i in units do
66871: LD_ADDR_VAR 0 4
66875: PUSH
66876: LD_VAR 0 1
66880: PUSH
66881: FOR_IN
66882: IFFALSE 66925
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66884: LD_ADDR_VAR 0 5
66888: PUSH
66889: LD_VAR 0 5
66893: PPUSH
66894: LD_VAR 0 5
66898: PUSH
66899: LD_INT 1
66901: PLUS
66902: PPUSH
66903: LD_VAR 0 4
66907: PPUSH
66908: LD_VAR 0 2
66912: PPUSH
66913: CALL_OW 259
66917: PPUSH
66918: CALL_OW 2
66922: ST_TO_ADDR
66923: GO 66881
66925: POP
66926: POP
// if not tmp then
66927: LD_VAR 0 5
66931: NOT
66932: IFFALSE 66936
// exit ;
66934: GO 66956
// result := SortListByListDesc ( units , tmp ) ;
66936: LD_ADDR_VAR 0 3
66940: PUSH
66941: LD_VAR 0 1
66945: PPUSH
66946: LD_VAR 0 5
66950: PPUSH
66951: CALL_OW 77
66955: ST_TO_ADDR
// end ;
66956: LD_VAR 0 3
66960: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66961: LD_INT 0
66963: PPUSH
66964: PPUSH
66965: PPUSH
// result := false ;
66966: LD_ADDR_VAR 0 3
66970: PUSH
66971: LD_INT 0
66973: ST_TO_ADDR
// x := GetX ( building ) ;
66974: LD_ADDR_VAR 0 4
66978: PUSH
66979: LD_VAR 0 2
66983: PPUSH
66984: CALL_OW 250
66988: ST_TO_ADDR
// y := GetY ( building ) ;
66989: LD_ADDR_VAR 0 5
66993: PUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: CALL_OW 251
67003: ST_TO_ADDR
// if not building or not x or not y then
67004: LD_VAR 0 2
67008: NOT
67009: PUSH
67010: LD_VAR 0 4
67014: NOT
67015: OR
67016: PUSH
67017: LD_VAR 0 5
67021: NOT
67022: OR
67023: IFFALSE 67027
// exit ;
67025: GO 67119
// if GetTaskList ( unit ) then
67027: LD_VAR 0 1
67031: PPUSH
67032: CALL_OW 437
67036: IFFALSE 67119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67038: LD_STRING e
67040: PUSH
67041: LD_VAR 0 1
67045: PPUSH
67046: CALL_OW 437
67050: PUSH
67051: LD_INT 1
67053: ARRAY
67054: PUSH
67055: LD_INT 1
67057: ARRAY
67058: EQUAL
67059: PUSH
67060: LD_VAR 0 4
67064: PUSH
67065: LD_VAR 0 1
67069: PPUSH
67070: CALL_OW 437
67074: PUSH
67075: LD_INT 1
67077: ARRAY
67078: PUSH
67079: LD_INT 2
67081: ARRAY
67082: EQUAL
67083: AND
67084: PUSH
67085: LD_VAR 0 5
67089: PUSH
67090: LD_VAR 0 1
67094: PPUSH
67095: CALL_OW 437
67099: PUSH
67100: LD_INT 1
67102: ARRAY
67103: PUSH
67104: LD_INT 3
67106: ARRAY
67107: EQUAL
67108: AND
67109: IFFALSE 67119
// result := true end ;
67111: LD_ADDR_VAR 0 3
67115: PUSH
67116: LD_INT 1
67118: ST_TO_ADDR
// end ;
67119: LD_VAR 0 3
67123: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67124: LD_INT 0
67126: PPUSH
// result := false ;
67127: LD_ADDR_VAR 0 4
67131: PUSH
67132: LD_INT 0
67134: ST_TO_ADDR
// if GetTaskList ( unit ) then
67135: LD_VAR 0 1
67139: PPUSH
67140: CALL_OW 437
67144: IFFALSE 67227
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67146: LD_STRING M
67148: PUSH
67149: LD_VAR 0 1
67153: PPUSH
67154: CALL_OW 437
67158: PUSH
67159: LD_INT 1
67161: ARRAY
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: EQUAL
67167: PUSH
67168: LD_VAR 0 2
67172: PUSH
67173: LD_VAR 0 1
67177: PPUSH
67178: CALL_OW 437
67182: PUSH
67183: LD_INT 1
67185: ARRAY
67186: PUSH
67187: LD_INT 2
67189: ARRAY
67190: EQUAL
67191: AND
67192: PUSH
67193: LD_VAR 0 3
67197: PUSH
67198: LD_VAR 0 1
67202: PPUSH
67203: CALL_OW 437
67207: PUSH
67208: LD_INT 1
67210: ARRAY
67211: PUSH
67212: LD_INT 3
67214: ARRAY
67215: EQUAL
67216: AND
67217: IFFALSE 67227
// result := true ;
67219: LD_ADDR_VAR 0 4
67223: PUSH
67224: LD_INT 1
67226: ST_TO_ADDR
// end ; end ;
67227: LD_VAR 0 4
67231: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67232: LD_INT 0
67234: PPUSH
67235: PPUSH
67236: PPUSH
67237: PPUSH
// if not unit or not area then
67238: LD_VAR 0 1
67242: NOT
67243: PUSH
67244: LD_VAR 0 2
67248: NOT
67249: OR
67250: IFFALSE 67254
// exit ;
67252: GO 67418
// tmp := AreaToList ( area , i ) ;
67254: LD_ADDR_VAR 0 6
67258: PUSH
67259: LD_VAR 0 2
67263: PPUSH
67264: LD_VAR 0 5
67268: PPUSH
67269: CALL_OW 517
67273: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67274: LD_ADDR_VAR 0 5
67278: PUSH
67279: DOUBLE
67280: LD_INT 1
67282: DEC
67283: ST_TO_ADDR
67284: LD_VAR 0 6
67288: PUSH
67289: LD_INT 1
67291: ARRAY
67292: PUSH
67293: FOR_TO
67294: IFFALSE 67416
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67296: LD_ADDR_VAR 0 7
67300: PUSH
67301: LD_VAR 0 6
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: PUSH
67310: LD_VAR 0 5
67314: ARRAY
67315: PUSH
67316: LD_VAR 0 6
67320: PUSH
67321: LD_INT 2
67323: ARRAY
67324: PUSH
67325: LD_VAR 0 5
67329: ARRAY
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67335: LD_VAR 0 7
67339: PUSH
67340: LD_INT 1
67342: ARRAY
67343: PPUSH
67344: LD_VAR 0 7
67348: PUSH
67349: LD_INT 2
67351: ARRAY
67352: PPUSH
67353: CALL_OW 428
67357: PUSH
67358: LD_INT 0
67360: EQUAL
67361: IFFALSE 67414
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67363: LD_VAR 0 1
67367: PPUSH
67368: LD_VAR 0 7
67372: PUSH
67373: LD_INT 1
67375: ARRAY
67376: PPUSH
67377: LD_VAR 0 7
67381: PUSH
67382: LD_INT 2
67384: ARRAY
67385: PPUSH
67386: LD_VAR 0 3
67390: PPUSH
67391: CALL_OW 48
// result := IsPlaced ( unit ) ;
67395: LD_ADDR_VAR 0 4
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: CALL_OW 305
67409: ST_TO_ADDR
// exit ;
67410: POP
67411: POP
67412: GO 67418
// end ; end ;
67414: GO 67293
67416: POP
67417: POP
// end ;
67418: LD_VAR 0 4
67422: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67423: LD_INT 0
67425: PPUSH
67426: PPUSH
67427: PPUSH
// if not side or side > 8 then
67428: LD_VAR 0 1
67432: NOT
67433: PUSH
67434: LD_VAR 0 1
67438: PUSH
67439: LD_INT 8
67441: GREATER
67442: OR
67443: IFFALSE 67447
// exit ;
67445: GO 67634
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67447: LD_ADDR_VAR 0 4
67451: PUSH
67452: LD_INT 22
67454: PUSH
67455: LD_VAR 0 1
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 21
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PPUSH
67478: CALL_OW 69
67482: ST_TO_ADDR
// if not tmp then
67483: LD_VAR 0 4
67487: NOT
67488: IFFALSE 67492
// exit ;
67490: GO 67634
// enable_addtolog := true ;
67492: LD_ADDR_OWVAR 81
67496: PUSH
67497: LD_INT 1
67499: ST_TO_ADDR
// AddToLog ( [ ) ;
67500: LD_STRING [
67502: PPUSH
67503: CALL_OW 561
// for i in tmp do
67507: LD_ADDR_VAR 0 3
67511: PUSH
67512: LD_VAR 0 4
67516: PUSH
67517: FOR_IN
67518: IFFALSE 67625
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67520: LD_STRING [
67522: PUSH
67523: LD_VAR 0 3
67527: PPUSH
67528: CALL_OW 266
67532: STR
67533: PUSH
67534: LD_STRING , 
67536: STR
67537: PUSH
67538: LD_VAR 0 3
67542: PPUSH
67543: CALL_OW 250
67547: STR
67548: PUSH
67549: LD_STRING , 
67551: STR
67552: PUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: CALL_OW 251
67562: STR
67563: PUSH
67564: LD_STRING , 
67566: STR
67567: PUSH
67568: LD_VAR 0 3
67572: PPUSH
67573: CALL_OW 254
67577: STR
67578: PUSH
67579: LD_STRING , 
67581: STR
67582: PUSH
67583: LD_VAR 0 3
67587: PPUSH
67588: LD_INT 1
67590: PPUSH
67591: CALL_OW 268
67595: STR
67596: PUSH
67597: LD_STRING , 
67599: STR
67600: PUSH
67601: LD_VAR 0 3
67605: PPUSH
67606: LD_INT 2
67608: PPUSH
67609: CALL_OW 268
67613: STR
67614: PUSH
67615: LD_STRING ],
67617: STR
67618: PPUSH
67619: CALL_OW 561
// end ;
67623: GO 67517
67625: POP
67626: POP
// AddToLog ( ]; ) ;
67627: LD_STRING ];
67629: PPUSH
67630: CALL_OW 561
// end ;
67634: LD_VAR 0 2
67638: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67639: LD_INT 0
67641: PPUSH
67642: PPUSH
67643: PPUSH
67644: PPUSH
67645: PPUSH
// if not area or not rate or not max then
67646: LD_VAR 0 1
67650: NOT
67651: PUSH
67652: LD_VAR 0 2
67656: NOT
67657: OR
67658: PUSH
67659: LD_VAR 0 4
67663: NOT
67664: OR
67665: IFFALSE 67669
// exit ;
67667: GO 67861
// while 1 do
67669: LD_INT 1
67671: IFFALSE 67861
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67673: LD_ADDR_VAR 0 9
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_INT 1
67685: PPUSH
67686: CALL_OW 287
67690: PUSH
67691: LD_INT 10
67693: MUL
67694: ST_TO_ADDR
// r := rate / 10 ;
67695: LD_ADDR_VAR 0 7
67699: PUSH
67700: LD_VAR 0 2
67704: PUSH
67705: LD_INT 10
67707: DIVREAL
67708: ST_TO_ADDR
// time := 1 1$00 ;
67709: LD_ADDR_VAR 0 8
67713: PUSH
67714: LD_INT 2100
67716: ST_TO_ADDR
// if amount < min then
67717: LD_VAR 0 9
67721: PUSH
67722: LD_VAR 0 3
67726: LESS
67727: IFFALSE 67745
// r := r * 2 else
67729: LD_ADDR_VAR 0 7
67733: PUSH
67734: LD_VAR 0 7
67738: PUSH
67739: LD_INT 2
67741: MUL
67742: ST_TO_ADDR
67743: GO 67771
// if amount > max then
67745: LD_VAR 0 9
67749: PUSH
67750: LD_VAR 0 4
67754: GREATER
67755: IFFALSE 67771
// r := r / 2 ;
67757: LD_ADDR_VAR 0 7
67761: PUSH
67762: LD_VAR 0 7
67766: PUSH
67767: LD_INT 2
67769: DIVREAL
67770: ST_TO_ADDR
// time := time / r ;
67771: LD_ADDR_VAR 0 8
67775: PUSH
67776: LD_VAR 0 8
67780: PUSH
67781: LD_VAR 0 7
67785: DIVREAL
67786: ST_TO_ADDR
// if time < 0 then
67787: LD_VAR 0 8
67791: PUSH
67792: LD_INT 0
67794: LESS
67795: IFFALSE 67812
// time := time * - 1 ;
67797: LD_ADDR_VAR 0 8
67801: PUSH
67802: LD_VAR 0 8
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: MUL
67811: ST_TO_ADDR
// wait ( time ) ;
67812: LD_VAR 0 8
67816: PPUSH
67817: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67821: LD_INT 35
67823: PPUSH
67824: LD_INT 875
67826: PPUSH
67827: CALL_OW 12
67831: PPUSH
67832: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67836: LD_INT 1
67838: PPUSH
67839: LD_INT 5
67841: PPUSH
67842: CALL_OW 12
67846: PPUSH
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_INT 1
67854: PPUSH
67855: CALL_OW 55
// end ;
67859: GO 67669
// end ;
67861: LD_VAR 0 5
67865: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67866: LD_INT 0
67868: PPUSH
67869: PPUSH
67870: PPUSH
67871: PPUSH
67872: PPUSH
67873: PPUSH
67874: PPUSH
67875: PPUSH
// if not turrets or not factories then
67876: LD_VAR 0 1
67880: NOT
67881: PUSH
67882: LD_VAR 0 2
67886: NOT
67887: OR
67888: IFFALSE 67892
// exit ;
67890: GO 68199
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67892: LD_ADDR_VAR 0 10
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: LD_INT 6
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 4
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 24
67934: PUSH
67935: LD_INT 25
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 23
67944: PUSH
67945: LD_INT 27
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 42
67958: PUSH
67959: LD_INT 43
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 44
67968: PUSH
67969: LD_INT 46
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 45
67978: PUSH
67979: LD_INT 47
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: ST_TO_ADDR
// result := [ ] ;
67996: LD_ADDR_VAR 0 3
68000: PUSH
68001: EMPTY
68002: ST_TO_ADDR
// for i in turrets do
68003: LD_ADDR_VAR 0 4
68007: PUSH
68008: LD_VAR 0 1
68012: PUSH
68013: FOR_IN
68014: IFFALSE 68197
// begin nat := GetNation ( i ) ;
68016: LD_ADDR_VAR 0 7
68020: PUSH
68021: LD_VAR 0 4
68025: PPUSH
68026: CALL_OW 248
68030: ST_TO_ADDR
// weapon := 0 ;
68031: LD_ADDR_VAR 0 8
68035: PUSH
68036: LD_INT 0
68038: ST_TO_ADDR
// if not nat then
68039: LD_VAR 0 7
68043: NOT
68044: IFFALSE 68048
// continue ;
68046: GO 68013
// for j in list [ nat ] do
68048: LD_ADDR_VAR 0 5
68052: PUSH
68053: LD_VAR 0 10
68057: PUSH
68058: LD_VAR 0 7
68062: ARRAY
68063: PUSH
68064: FOR_IN
68065: IFFALSE 68106
// if GetBWeapon ( i ) = j [ 1 ] then
68067: LD_VAR 0 4
68071: PPUSH
68072: CALL_OW 269
68076: PUSH
68077: LD_VAR 0 5
68081: PUSH
68082: LD_INT 1
68084: ARRAY
68085: EQUAL
68086: IFFALSE 68104
// begin weapon := j [ 2 ] ;
68088: LD_ADDR_VAR 0 8
68092: PUSH
68093: LD_VAR 0 5
68097: PUSH
68098: LD_INT 2
68100: ARRAY
68101: ST_TO_ADDR
// break ;
68102: GO 68106
// end ;
68104: GO 68064
68106: POP
68107: POP
// if not weapon then
68108: LD_VAR 0 8
68112: NOT
68113: IFFALSE 68117
// continue ;
68115: GO 68013
// for k in factories do
68117: LD_ADDR_VAR 0 6
68121: PUSH
68122: LD_VAR 0 2
68126: PUSH
68127: FOR_IN
68128: IFFALSE 68193
// begin weapons := AvailableWeaponList ( k ) ;
68130: LD_ADDR_VAR 0 9
68134: PUSH
68135: LD_VAR 0 6
68139: PPUSH
68140: CALL_OW 478
68144: ST_TO_ADDR
// if not weapons then
68145: LD_VAR 0 9
68149: NOT
68150: IFFALSE 68154
// continue ;
68152: GO 68127
// if weapon in weapons then
68154: LD_VAR 0 8
68158: PUSH
68159: LD_VAR 0 9
68163: IN
68164: IFFALSE 68191
// begin result := [ i , weapon ] ;
68166: LD_ADDR_VAR 0 3
68170: PUSH
68171: LD_VAR 0 4
68175: PUSH
68176: LD_VAR 0 8
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// exit ;
68185: POP
68186: POP
68187: POP
68188: POP
68189: GO 68199
// end ; end ;
68191: GO 68127
68193: POP
68194: POP
// end ;
68195: GO 68013
68197: POP
68198: POP
// end ;
68199: LD_VAR 0 3
68203: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68204: LD_INT 0
68206: PPUSH
// if not side or side > 8 then
68207: LD_VAR 0 3
68211: NOT
68212: PUSH
68213: LD_VAR 0 3
68217: PUSH
68218: LD_INT 8
68220: GREATER
68221: OR
68222: IFFALSE 68226
// exit ;
68224: GO 68285
// if not range then
68226: LD_VAR 0 4
68230: NOT
68231: IFFALSE 68242
// range := - 12 ;
68233: LD_ADDR_VAR 0 4
68237: PUSH
68238: LD_INT 12
68240: NEG
68241: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68242: LD_VAR 0 1
68246: PPUSH
68247: LD_VAR 0 2
68251: PPUSH
68252: LD_VAR 0 3
68256: PPUSH
68257: LD_VAR 0 4
68261: PPUSH
68262: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68266: LD_VAR 0 1
68270: PPUSH
68271: LD_VAR 0 2
68275: PPUSH
68276: LD_VAR 0 3
68280: PPUSH
68281: CALL_OW 331
// end ;
68285: LD_VAR 0 5
68289: RET
// export function Video ( mode ) ; begin
68290: LD_INT 0
68292: PPUSH
// ingame_video = mode ;
68293: LD_ADDR_OWVAR 52
68297: PUSH
68298: LD_VAR 0 1
68302: ST_TO_ADDR
// interface_hidden = mode ;
68303: LD_ADDR_OWVAR 54
68307: PUSH
68308: LD_VAR 0 1
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 2
68317: RET
// export function Join ( array , element ) ; begin
68318: LD_INT 0
68320: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68321: LD_ADDR_VAR 0 3
68325: PUSH
68326: LD_VAR 0 1
68330: PPUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_INT 1
68338: PLUS
68339: PPUSH
68340: LD_VAR 0 2
68344: PPUSH
68345: CALL_OW 1
68349: ST_TO_ADDR
// end ;
68350: LD_VAR 0 3
68354: RET
// export function JoinUnion ( array , element ) ; begin
68355: LD_INT 0
68357: PPUSH
// result := array union element ;
68358: LD_ADDR_VAR 0 3
68362: PUSH
68363: LD_VAR 0 1
68367: PUSH
68368: LD_VAR 0 2
68372: UNION
68373: ST_TO_ADDR
// end ;
68374: LD_VAR 0 3
68378: RET
// export function GetBehemoths ( side ) ; begin
68379: LD_INT 0
68381: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68382: LD_ADDR_VAR 0 2
68386: PUSH
68387: LD_INT 22
68389: PUSH
68390: LD_VAR 0 1
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 31
68401: PUSH
68402: LD_INT 25
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PPUSH
68413: CALL_OW 69
68417: ST_TO_ADDR
// end ;
68418: LD_VAR 0 2
68422: RET
// export function Shuffle ( array ) ; var i , index ; begin
68423: LD_INT 0
68425: PPUSH
68426: PPUSH
68427: PPUSH
// result := [ ] ;
68428: LD_ADDR_VAR 0 2
68432: PUSH
68433: EMPTY
68434: ST_TO_ADDR
// if not array then
68435: LD_VAR 0 1
68439: NOT
68440: IFFALSE 68444
// exit ;
68442: GO 68543
// Randomize ;
68444: CALL_OW 10
// for i = array downto 1 do
68448: LD_ADDR_VAR 0 3
68452: PUSH
68453: DOUBLE
68454: LD_VAR 0 1
68458: INC
68459: ST_TO_ADDR
68460: LD_INT 1
68462: PUSH
68463: FOR_DOWNTO
68464: IFFALSE 68541
// begin index := rand ( 1 , array ) ;
68466: LD_ADDR_VAR 0 4
68470: PUSH
68471: LD_INT 1
68473: PPUSH
68474: LD_VAR 0 1
68478: PPUSH
68479: CALL_OW 12
68483: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68484: LD_ADDR_VAR 0 2
68488: PUSH
68489: LD_VAR 0 2
68493: PPUSH
68494: LD_VAR 0 2
68498: PUSH
68499: LD_INT 1
68501: PLUS
68502: PPUSH
68503: LD_VAR 0 1
68507: PUSH
68508: LD_VAR 0 4
68512: ARRAY
68513: PPUSH
68514: CALL_OW 2
68518: ST_TO_ADDR
// array := Delete ( array , index ) ;
68519: LD_ADDR_VAR 0 1
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 4
68533: PPUSH
68534: CALL_OW 3
68538: ST_TO_ADDR
// end ;
68539: GO 68463
68541: POP
68542: POP
// end ;
68543: LD_VAR 0 2
68547: RET
// export function GetBaseMaterials ( base ) ; begin
68548: LD_INT 0
68550: PPUSH
// result := [ 0 , 0 , 0 ] ;
68551: LD_ADDR_VAR 0 2
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// if not base then
68570: LD_VAR 0 1
68574: NOT
68575: IFFALSE 68579
// exit ;
68577: GO 68628
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_INT 1
68591: PPUSH
68592: CALL_OW 275
68596: PUSH
68597: LD_VAR 0 1
68601: PPUSH
68602: LD_INT 2
68604: PPUSH
68605: CALL_OW 275
68609: PUSH
68610: LD_VAR 0 1
68614: PPUSH
68615: LD_INT 3
68617: PPUSH
68618: CALL_OW 275
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// end ;
68628: LD_VAR 0 2
68632: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68633: LD_INT 0
68635: PPUSH
68636: PPUSH
// result := array ;
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_VAR 0 1
68646: ST_TO_ADDR
// if size > 0 then
68647: LD_VAR 0 2
68651: PUSH
68652: LD_INT 0
68654: GREATER
68655: IFFALSE 68701
// for i := array downto size do
68657: LD_ADDR_VAR 0 4
68661: PUSH
68662: DOUBLE
68663: LD_VAR 0 1
68667: INC
68668: ST_TO_ADDR
68669: LD_VAR 0 2
68673: PUSH
68674: FOR_DOWNTO
68675: IFFALSE 68699
// result := Delete ( result , result ) ;
68677: LD_ADDR_VAR 0 3
68681: PUSH
68682: LD_VAR 0 3
68686: PPUSH
68687: LD_VAR 0 3
68691: PPUSH
68692: CALL_OW 3
68696: ST_TO_ADDR
68697: GO 68674
68699: POP
68700: POP
// end ;
68701: LD_VAR 0 3
68705: RET
// export function ComExit ( unit ) ; var tmp ; begin
68706: LD_INT 0
68708: PPUSH
68709: PPUSH
// if not IsInUnit ( unit ) then
68710: LD_VAR 0 1
68714: PPUSH
68715: CALL_OW 310
68719: NOT
68720: IFFALSE 68724
// exit ;
68722: GO 68784
// tmp := IsInUnit ( unit ) ;
68724: LD_ADDR_VAR 0 3
68728: PUSH
68729: LD_VAR 0 1
68733: PPUSH
68734: CALL_OW 310
68738: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68739: LD_VAR 0 3
68743: PPUSH
68744: CALL_OW 247
68748: PUSH
68749: LD_INT 2
68751: EQUAL
68752: IFFALSE 68765
// ComExitVehicle ( unit ) else
68754: LD_VAR 0 1
68758: PPUSH
68759: CALL_OW 121
68763: GO 68774
// ComExitBuilding ( unit ) ;
68765: LD_VAR 0 1
68769: PPUSH
68770: CALL_OW 122
// result := tmp ;
68774: LD_ADDR_VAR 0 2
68778: PUSH
68779: LD_VAR 0 3
68783: ST_TO_ADDR
// end ;
68784: LD_VAR 0 2
68788: RET
// export function ResetHc ; begin
68789: LD_INT 0
68791: PPUSH
// InitHc ;
68792: CALL_OW 19
// hc_importance := 0 ;
68796: LD_ADDR_OWVAR 32
68800: PUSH
68801: LD_INT 0
68803: ST_TO_ADDR
// end ;
68804: LD_VAR 0 1
68808: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68809: LD_INT 0
68811: PPUSH
68812: PPUSH
68813: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68814: LD_ADDR_VAR 0 6
68818: PUSH
68819: LD_VAR 0 1
68823: PUSH
68824: LD_VAR 0 3
68828: PLUS
68829: PUSH
68830: LD_INT 2
68832: DIV
68833: ST_TO_ADDR
// if _x < 0 then
68834: LD_VAR 0 6
68838: PUSH
68839: LD_INT 0
68841: LESS
68842: IFFALSE 68859
// _x := _x * - 1 ;
68844: LD_ADDR_VAR 0 6
68848: PUSH
68849: LD_VAR 0 6
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: MUL
68858: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68859: LD_ADDR_VAR 0 7
68863: PUSH
68864: LD_VAR 0 2
68868: PUSH
68869: LD_VAR 0 4
68873: PLUS
68874: PUSH
68875: LD_INT 2
68877: DIV
68878: ST_TO_ADDR
// if _y < 0 then
68879: LD_VAR 0 7
68883: PUSH
68884: LD_INT 0
68886: LESS
68887: IFFALSE 68904
// _y := _y * - 1 ;
68889: LD_ADDR_VAR 0 7
68893: PUSH
68894: LD_VAR 0 7
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: MUL
68903: ST_TO_ADDR
// result := [ _x , _y ] ;
68904: LD_ADDR_VAR 0 5
68908: PUSH
68909: LD_VAR 0 6
68913: PUSH
68914: LD_VAR 0 7
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// end ;
68923: LD_VAR 0 5
68927: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68928: LD_INT 0
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
// task := GetTaskList ( unit ) ;
68934: LD_ADDR_VAR 0 7
68938: PUSH
68939: LD_VAR 0 1
68943: PPUSH
68944: CALL_OW 437
68948: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68949: LD_VAR 0 7
68953: NOT
68954: PUSH
68955: LD_VAR 0 1
68959: PPUSH
68960: LD_VAR 0 2
68964: PPUSH
68965: CALL_OW 308
68969: NOT
68970: AND
68971: IFFALSE 68975
// exit ;
68973: GO 69093
// if IsInArea ( unit , area ) then
68975: LD_VAR 0 1
68979: PPUSH
68980: LD_VAR 0 2
68984: PPUSH
68985: CALL_OW 308
68989: IFFALSE 69007
// begin ComMoveToArea ( unit , goAway ) ;
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 3
69000: PPUSH
69001: CALL_OW 113
// exit ;
69005: GO 69093
// end ; if task [ 1 ] [ 1 ] <> M then
69007: LD_VAR 0 7
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PUSH
69016: LD_INT 1
69018: ARRAY
69019: PUSH
69020: LD_STRING M
69022: NONEQUAL
69023: IFFALSE 69027
// exit ;
69025: GO 69093
// x := task [ 1 ] [ 2 ] ;
69027: LD_ADDR_VAR 0 5
69031: PUSH
69032: LD_VAR 0 7
69036: PUSH
69037: LD_INT 1
69039: ARRAY
69040: PUSH
69041: LD_INT 2
69043: ARRAY
69044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69045: LD_ADDR_VAR 0 6
69049: PUSH
69050: LD_VAR 0 7
69054: PUSH
69055: LD_INT 1
69057: ARRAY
69058: PUSH
69059: LD_INT 3
69061: ARRAY
69062: ST_TO_ADDR
// if InArea ( x , y , area ) then
69063: LD_VAR 0 5
69067: PPUSH
69068: LD_VAR 0 6
69072: PPUSH
69073: LD_VAR 0 2
69077: PPUSH
69078: CALL_OW 309
69082: IFFALSE 69093
// ComStop ( unit ) ;
69084: LD_VAR 0 1
69088: PPUSH
69089: CALL_OW 141
// end ;
69093: LD_VAR 0 4
69097: RET
// export function Abs ( value ) ; begin
69098: LD_INT 0
69100: PPUSH
// result := value ;
69101: LD_ADDR_VAR 0 2
69105: PUSH
69106: LD_VAR 0 1
69110: ST_TO_ADDR
// if value < 0 then
69111: LD_VAR 0 1
69115: PUSH
69116: LD_INT 0
69118: LESS
69119: IFFALSE 69136
// result := value * - 1 ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 1
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: MUL
69135: ST_TO_ADDR
// end ;
69136: LD_VAR 0 2
69140: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69141: LD_INT 0
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
69150: PPUSH
// if not unit or not building then
69151: LD_VAR 0 1
69155: NOT
69156: PUSH
69157: LD_VAR 0 2
69161: NOT
69162: OR
69163: IFFALSE 69167
// exit ;
69165: GO 69393
// x := GetX ( building ) ;
69167: LD_ADDR_VAR 0 4
69171: PUSH
69172: LD_VAR 0 2
69176: PPUSH
69177: CALL_OW 250
69181: ST_TO_ADDR
// y := GetY ( building ) ;
69182: LD_ADDR_VAR 0 6
69186: PUSH
69187: LD_VAR 0 2
69191: PPUSH
69192: CALL_OW 251
69196: ST_TO_ADDR
// d := GetDir ( building ) ;
69197: LD_ADDR_VAR 0 8
69201: PUSH
69202: LD_VAR 0 2
69206: PPUSH
69207: CALL_OW 254
69211: ST_TO_ADDR
// r := 4 ;
69212: LD_ADDR_VAR 0 9
69216: PUSH
69217: LD_INT 4
69219: ST_TO_ADDR
// for i := 1 to 5 do
69220: LD_ADDR_VAR 0 10
69224: PUSH
69225: DOUBLE
69226: LD_INT 1
69228: DEC
69229: ST_TO_ADDR
69230: LD_INT 5
69232: PUSH
69233: FOR_TO
69234: IFFALSE 69391
// begin _x := ShiftX ( x , d , r + i ) ;
69236: LD_ADDR_VAR 0 5
69240: PUSH
69241: LD_VAR 0 4
69245: PPUSH
69246: LD_VAR 0 8
69250: PPUSH
69251: LD_VAR 0 9
69255: PUSH
69256: LD_VAR 0 10
69260: PLUS
69261: PPUSH
69262: CALL_OW 272
69266: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69267: LD_ADDR_VAR 0 7
69271: PUSH
69272: LD_VAR 0 6
69276: PPUSH
69277: LD_VAR 0 8
69281: PPUSH
69282: LD_VAR 0 9
69286: PUSH
69287: LD_VAR 0 10
69291: PLUS
69292: PPUSH
69293: CALL_OW 273
69297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69298: LD_VAR 0 5
69302: PPUSH
69303: LD_VAR 0 7
69307: PPUSH
69308: CALL_OW 488
69312: PUSH
69313: LD_VAR 0 5
69317: PPUSH
69318: LD_VAR 0 7
69322: PPUSH
69323: CALL_OW 428
69327: PPUSH
69328: CALL_OW 247
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: IN
69343: NOT
69344: AND
69345: IFFALSE 69389
// begin ComMoveXY ( unit , _x , _y ) ;
69347: LD_VAR 0 1
69351: PPUSH
69352: LD_VAR 0 5
69356: PPUSH
69357: LD_VAR 0 7
69361: PPUSH
69362: CALL_OW 111
// result := [ _x , _y ] ;
69366: LD_ADDR_VAR 0 3
69370: PUSH
69371: LD_VAR 0 5
69375: PUSH
69376: LD_VAR 0 7
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: ST_TO_ADDR
// exit ;
69385: POP
69386: POP
69387: GO 69393
// end ; end ;
69389: GO 69233
69391: POP
69392: POP
// end ; end_of_file
69393: LD_VAR 0 3
69397: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
69398: LD_VAR 0 2
69402: PUSH
69403: LD_INT 100
69405: EQUAL
69406: IFFALSE 70355
// begin if not StreamModeActive then
69408: LD_EXP 108
69412: NOT
69413: IFFALSE 69423
// StreamModeActive := true ;
69415: LD_ADDR_EXP 108
69419: PUSH
69420: LD_INT 1
69422: ST_TO_ADDR
// if p3 = 0 then
69423: LD_VAR 0 3
69427: PUSH
69428: LD_INT 0
69430: EQUAL
69431: IFFALSE 69437
// InitStreamMode ;
69433: CALL 70513 0 0
// if p3 = 1 then
69437: LD_VAR 0 3
69441: PUSH
69442: LD_INT 1
69444: EQUAL
69445: IFFALSE 69455
// sRocket := true ;
69447: LD_ADDR_EXP 113
69451: PUSH
69452: LD_INT 1
69454: ST_TO_ADDR
// if p3 = 2 then
69455: LD_VAR 0 3
69459: PUSH
69460: LD_INT 2
69462: EQUAL
69463: IFFALSE 69473
// sSpeed := true ;
69465: LD_ADDR_EXP 112
69469: PUSH
69470: LD_INT 1
69472: ST_TO_ADDR
// if p3 = 3 then
69473: LD_VAR 0 3
69477: PUSH
69478: LD_INT 3
69480: EQUAL
69481: IFFALSE 69491
// sEngine := true ;
69483: LD_ADDR_EXP 114
69487: PUSH
69488: LD_INT 1
69490: ST_TO_ADDR
// if p3 = 4 then
69491: LD_VAR 0 3
69495: PUSH
69496: LD_INT 4
69498: EQUAL
69499: IFFALSE 69509
// sSpec := true ;
69501: LD_ADDR_EXP 111
69505: PUSH
69506: LD_INT 1
69508: ST_TO_ADDR
// if p3 = 5 then
69509: LD_VAR 0 3
69513: PUSH
69514: LD_INT 5
69516: EQUAL
69517: IFFALSE 69527
// sLevel := true ;
69519: LD_ADDR_EXP 115
69523: PUSH
69524: LD_INT 1
69526: ST_TO_ADDR
// if p3 = 6 then
69527: LD_VAR 0 3
69531: PUSH
69532: LD_INT 6
69534: EQUAL
69535: IFFALSE 69545
// sArmoury := true ;
69537: LD_ADDR_EXP 116
69541: PUSH
69542: LD_INT 1
69544: ST_TO_ADDR
// if p3 = 7 then
69545: LD_VAR 0 3
69549: PUSH
69550: LD_INT 7
69552: EQUAL
69553: IFFALSE 69563
// sRadar := true ;
69555: LD_ADDR_EXP 117
69559: PUSH
69560: LD_INT 1
69562: ST_TO_ADDR
// if p3 = 8 then
69563: LD_VAR 0 3
69567: PUSH
69568: LD_INT 8
69570: EQUAL
69571: IFFALSE 69581
// sBunker := true ;
69573: LD_ADDR_EXP 118
69577: PUSH
69578: LD_INT 1
69580: ST_TO_ADDR
// if p3 = 9 then
69581: LD_VAR 0 3
69585: PUSH
69586: LD_INT 9
69588: EQUAL
69589: IFFALSE 69599
// sHack := true ;
69591: LD_ADDR_EXP 119
69595: PUSH
69596: LD_INT 1
69598: ST_TO_ADDR
// if p3 = 10 then
69599: LD_VAR 0 3
69603: PUSH
69604: LD_INT 10
69606: EQUAL
69607: IFFALSE 69617
// sFire := true ;
69609: LD_ADDR_EXP 120
69613: PUSH
69614: LD_INT 1
69616: ST_TO_ADDR
// if p3 = 11 then
69617: LD_VAR 0 3
69621: PUSH
69622: LD_INT 11
69624: EQUAL
69625: IFFALSE 69635
// sRefresh := true ;
69627: LD_ADDR_EXP 121
69631: PUSH
69632: LD_INT 1
69634: ST_TO_ADDR
// if p3 = 12 then
69635: LD_VAR 0 3
69639: PUSH
69640: LD_INT 12
69642: EQUAL
69643: IFFALSE 69653
// sExp := true ;
69645: LD_ADDR_EXP 122
69649: PUSH
69650: LD_INT 1
69652: ST_TO_ADDR
// if p3 = 13 then
69653: LD_VAR 0 3
69657: PUSH
69658: LD_INT 13
69660: EQUAL
69661: IFFALSE 69671
// sDepot := true ;
69663: LD_ADDR_EXP 123
69667: PUSH
69668: LD_INT 1
69670: ST_TO_ADDR
// if p3 = 14 then
69671: LD_VAR 0 3
69675: PUSH
69676: LD_INT 14
69678: EQUAL
69679: IFFALSE 69689
// sFlag := true ;
69681: LD_ADDR_EXP 124
69685: PUSH
69686: LD_INT 1
69688: ST_TO_ADDR
// if p3 = 15 then
69689: LD_VAR 0 3
69693: PUSH
69694: LD_INT 15
69696: EQUAL
69697: IFFALSE 69707
// sKamikadze := true ;
69699: LD_ADDR_EXP 132
69703: PUSH
69704: LD_INT 1
69706: ST_TO_ADDR
// if p3 = 16 then
69707: LD_VAR 0 3
69711: PUSH
69712: LD_INT 16
69714: EQUAL
69715: IFFALSE 69725
// sTroll := true ;
69717: LD_ADDR_EXP 133
69721: PUSH
69722: LD_INT 1
69724: ST_TO_ADDR
// if p3 = 17 then
69725: LD_VAR 0 3
69729: PUSH
69730: LD_INT 17
69732: EQUAL
69733: IFFALSE 69743
// sSlow := true ;
69735: LD_ADDR_EXP 134
69739: PUSH
69740: LD_INT 1
69742: ST_TO_ADDR
// if p3 = 18 then
69743: LD_VAR 0 3
69747: PUSH
69748: LD_INT 18
69750: EQUAL
69751: IFFALSE 69761
// sLack := true ;
69753: LD_ADDR_EXP 135
69757: PUSH
69758: LD_INT 1
69760: ST_TO_ADDR
// if p3 = 19 then
69761: LD_VAR 0 3
69765: PUSH
69766: LD_INT 19
69768: EQUAL
69769: IFFALSE 69779
// sTank := true ;
69771: LD_ADDR_EXP 137
69775: PUSH
69776: LD_INT 1
69778: ST_TO_ADDR
// if p3 = 20 then
69779: LD_VAR 0 3
69783: PUSH
69784: LD_INT 20
69786: EQUAL
69787: IFFALSE 69797
// sRemote := true ;
69789: LD_ADDR_EXP 138
69793: PUSH
69794: LD_INT 1
69796: ST_TO_ADDR
// if p3 = 21 then
69797: LD_VAR 0 3
69801: PUSH
69802: LD_INT 21
69804: EQUAL
69805: IFFALSE 69815
// sPowell := true ;
69807: LD_ADDR_EXP 139
69811: PUSH
69812: LD_INT 1
69814: ST_TO_ADDR
// if p3 = 22 then
69815: LD_VAR 0 3
69819: PUSH
69820: LD_INT 22
69822: EQUAL
69823: IFFALSE 69833
// sTeleport := true ;
69825: LD_ADDR_EXP 142
69829: PUSH
69830: LD_INT 1
69832: ST_TO_ADDR
// if p3 = 23 then
69833: LD_VAR 0 3
69837: PUSH
69838: LD_INT 23
69840: EQUAL
69841: IFFALSE 69851
// sOilTower := true ;
69843: LD_ADDR_EXP 144
69847: PUSH
69848: LD_INT 1
69850: ST_TO_ADDR
// if p3 = 24 then
69851: LD_VAR 0 3
69855: PUSH
69856: LD_INT 24
69858: EQUAL
69859: IFFALSE 69869
// sShovel := true ;
69861: LD_ADDR_EXP 145
69865: PUSH
69866: LD_INT 1
69868: ST_TO_ADDR
// if p3 = 25 then
69869: LD_VAR 0 3
69873: PUSH
69874: LD_INT 25
69876: EQUAL
69877: IFFALSE 69887
// sSheik := true ;
69879: LD_ADDR_EXP 146
69883: PUSH
69884: LD_INT 1
69886: ST_TO_ADDR
// if p3 = 26 then
69887: LD_VAR 0 3
69891: PUSH
69892: LD_INT 26
69894: EQUAL
69895: IFFALSE 69905
// sEarthquake := true ;
69897: LD_ADDR_EXP 148
69901: PUSH
69902: LD_INT 1
69904: ST_TO_ADDR
// if p3 = 27 then
69905: LD_VAR 0 3
69909: PUSH
69910: LD_INT 27
69912: EQUAL
69913: IFFALSE 69923
// sAI := true ;
69915: LD_ADDR_EXP 149
69919: PUSH
69920: LD_INT 1
69922: ST_TO_ADDR
// if p3 = 28 then
69923: LD_VAR 0 3
69927: PUSH
69928: LD_INT 28
69930: EQUAL
69931: IFFALSE 69941
// sCargo := true ;
69933: LD_ADDR_EXP 152
69937: PUSH
69938: LD_INT 1
69940: ST_TO_ADDR
// if p3 = 29 then
69941: LD_VAR 0 3
69945: PUSH
69946: LD_INT 29
69948: EQUAL
69949: IFFALSE 69959
// sDLaser := true ;
69951: LD_ADDR_EXP 153
69955: PUSH
69956: LD_INT 1
69958: ST_TO_ADDR
// if p3 = 30 then
69959: LD_VAR 0 3
69963: PUSH
69964: LD_INT 30
69966: EQUAL
69967: IFFALSE 69977
// sExchange := true ;
69969: LD_ADDR_EXP 154
69973: PUSH
69974: LD_INT 1
69976: ST_TO_ADDR
// if p3 = 31 then
69977: LD_VAR 0 3
69981: PUSH
69982: LD_INT 31
69984: EQUAL
69985: IFFALSE 69995
// sFac := true ;
69987: LD_ADDR_EXP 155
69991: PUSH
69992: LD_INT 1
69994: ST_TO_ADDR
// if p3 = 32 then
69995: LD_VAR 0 3
69999: PUSH
70000: LD_INT 32
70002: EQUAL
70003: IFFALSE 70013
// sPower := true ;
70005: LD_ADDR_EXP 156
70009: PUSH
70010: LD_INT 1
70012: ST_TO_ADDR
// if p3 = 33 then
70013: LD_VAR 0 3
70017: PUSH
70018: LD_INT 33
70020: EQUAL
70021: IFFALSE 70031
// sRandom := true ;
70023: LD_ADDR_EXP 157
70027: PUSH
70028: LD_INT 1
70030: ST_TO_ADDR
// if p3 = 34 then
70031: LD_VAR 0 3
70035: PUSH
70036: LD_INT 34
70038: EQUAL
70039: IFFALSE 70049
// sShield := true ;
70041: LD_ADDR_EXP 158
70045: PUSH
70046: LD_INT 1
70048: ST_TO_ADDR
// if p3 = 35 then
70049: LD_VAR 0 3
70053: PUSH
70054: LD_INT 35
70056: EQUAL
70057: IFFALSE 70067
// sTime := true ;
70059: LD_ADDR_EXP 159
70063: PUSH
70064: LD_INT 1
70066: ST_TO_ADDR
// if p3 = 36 then
70067: LD_VAR 0 3
70071: PUSH
70072: LD_INT 36
70074: EQUAL
70075: IFFALSE 70085
// sTools := true ;
70077: LD_ADDR_EXP 160
70081: PUSH
70082: LD_INT 1
70084: ST_TO_ADDR
// if p3 = 101 then
70085: LD_VAR 0 3
70089: PUSH
70090: LD_INT 101
70092: EQUAL
70093: IFFALSE 70103
// sSold := true ;
70095: LD_ADDR_EXP 125
70099: PUSH
70100: LD_INT 1
70102: ST_TO_ADDR
// if p3 = 102 then
70103: LD_VAR 0 3
70107: PUSH
70108: LD_INT 102
70110: EQUAL
70111: IFFALSE 70121
// sDiff := true ;
70113: LD_ADDR_EXP 126
70117: PUSH
70118: LD_INT 1
70120: ST_TO_ADDR
// if p3 = 103 then
70121: LD_VAR 0 3
70125: PUSH
70126: LD_INT 103
70128: EQUAL
70129: IFFALSE 70139
// sFog := true ;
70131: LD_ADDR_EXP 129
70135: PUSH
70136: LD_INT 1
70138: ST_TO_ADDR
// if p3 = 104 then
70139: LD_VAR 0 3
70143: PUSH
70144: LD_INT 104
70146: EQUAL
70147: IFFALSE 70157
// sReset := true ;
70149: LD_ADDR_EXP 130
70153: PUSH
70154: LD_INT 1
70156: ST_TO_ADDR
// if p3 = 105 then
70157: LD_VAR 0 3
70161: PUSH
70162: LD_INT 105
70164: EQUAL
70165: IFFALSE 70175
// sSun := true ;
70167: LD_ADDR_EXP 131
70171: PUSH
70172: LD_INT 1
70174: ST_TO_ADDR
// if p3 = 106 then
70175: LD_VAR 0 3
70179: PUSH
70180: LD_INT 106
70182: EQUAL
70183: IFFALSE 70193
// sTiger := true ;
70185: LD_ADDR_EXP 127
70189: PUSH
70190: LD_INT 1
70192: ST_TO_ADDR
// if p3 = 107 then
70193: LD_VAR 0 3
70197: PUSH
70198: LD_INT 107
70200: EQUAL
70201: IFFALSE 70211
// sBomb := true ;
70203: LD_ADDR_EXP 128
70207: PUSH
70208: LD_INT 1
70210: ST_TO_ADDR
// if p3 = 108 then
70211: LD_VAR 0 3
70215: PUSH
70216: LD_INT 108
70218: EQUAL
70219: IFFALSE 70229
// sWound := true ;
70221: LD_ADDR_EXP 136
70225: PUSH
70226: LD_INT 1
70228: ST_TO_ADDR
// if p3 = 109 then
70229: LD_VAR 0 3
70233: PUSH
70234: LD_INT 109
70236: EQUAL
70237: IFFALSE 70247
// sBetray := true ;
70239: LD_ADDR_EXP 140
70243: PUSH
70244: LD_INT 1
70246: ST_TO_ADDR
// if p3 = 110 then
70247: LD_VAR 0 3
70251: PUSH
70252: LD_INT 110
70254: EQUAL
70255: IFFALSE 70265
// sContamin := true ;
70257: LD_ADDR_EXP 141
70261: PUSH
70262: LD_INT 1
70264: ST_TO_ADDR
// if p3 = 111 then
70265: LD_VAR 0 3
70269: PUSH
70270: LD_INT 111
70272: EQUAL
70273: IFFALSE 70283
// sOil := true ;
70275: LD_ADDR_EXP 143
70279: PUSH
70280: LD_INT 1
70282: ST_TO_ADDR
// if p3 = 112 then
70283: LD_VAR 0 3
70287: PUSH
70288: LD_INT 112
70290: EQUAL
70291: IFFALSE 70301
// sStu := true ;
70293: LD_ADDR_EXP 147
70297: PUSH
70298: LD_INT 1
70300: ST_TO_ADDR
// if p3 = 113 then
70301: LD_VAR 0 3
70305: PUSH
70306: LD_INT 113
70308: EQUAL
70309: IFFALSE 70319
// sBazooka := true ;
70311: LD_ADDR_EXP 150
70315: PUSH
70316: LD_INT 1
70318: ST_TO_ADDR
// if p3 = 114 then
70319: LD_VAR 0 3
70323: PUSH
70324: LD_INT 114
70326: EQUAL
70327: IFFALSE 70337
// sMortar := true ;
70329: LD_ADDR_EXP 151
70333: PUSH
70334: LD_INT 1
70336: ST_TO_ADDR
// if p3 = 115 then
70337: LD_VAR 0 3
70341: PUSH
70342: LD_INT 115
70344: EQUAL
70345: IFFALSE 70355
// sRanger := true ;
70347: LD_ADDR_EXP 161
70351: PUSH
70352: LD_INT 1
70354: ST_TO_ADDR
// end ; if p2 = 101 then
70355: LD_VAR 0 2
70359: PUSH
70360: LD_INT 101
70362: EQUAL
70363: IFFALSE 70491
// begin case p3 of 1 :
70365: LD_VAR 0 3
70369: PUSH
70370: LD_INT 1
70372: DOUBLE
70373: EQUAL
70374: IFTRUE 70378
70376: GO 70385
70378: POP
// hHackUnlimitedResources ; 2 :
70379: CALL 81526 0 0
70383: GO 70491
70385: LD_INT 2
70387: DOUBLE
70388: EQUAL
70389: IFTRUE 70393
70391: GO 70400
70393: POP
// hHackSetLevel10 ; 3 :
70394: CALL 81659 0 0
70398: GO 70491
70400: LD_INT 3
70402: DOUBLE
70403: EQUAL
70404: IFTRUE 70408
70406: GO 70415
70408: POP
// hHackSetLevel10YourUnits ; 4 :
70409: CALL 81744 0 0
70413: GO 70491
70415: LD_INT 4
70417: DOUBLE
70418: EQUAL
70419: IFTRUE 70423
70421: GO 70430
70423: POP
// hHackInvincible ; 5 :
70424: CALL 82192 0 0
70428: GO 70491
70430: LD_INT 5
70432: DOUBLE
70433: EQUAL
70434: IFTRUE 70438
70436: GO 70445
70438: POP
// hHackInvisible ; 6 :
70439: CALL 82303 0 0
70443: GO 70491
70445: LD_INT 6
70447: DOUBLE
70448: EQUAL
70449: IFTRUE 70453
70451: GO 70460
70453: POP
// hHackChangeYourSide ; 7 :
70454: CALL 82360 0 0
70458: GO 70491
70460: LD_INT 7
70462: DOUBLE
70463: EQUAL
70464: IFTRUE 70468
70466: GO 70475
70468: POP
// hHackChangeUnitSide ; 8 :
70469: CALL 82402 0 0
70473: GO 70491
70475: LD_INT 8
70477: DOUBLE
70478: EQUAL
70479: IFTRUE 70483
70481: GO 70490
70483: POP
// hHackFog ; end ;
70484: CALL 82503 0 0
70488: GO 70491
70490: POP
// end ; end ;
70491: PPOPN 6
70493: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
70494: GO 70496
70496: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
70497: LD_STRING initStreamRollete();
70499: PPUSH
70500: CALL_OW 559
// InitStreamMode ;
70504: CALL 70513 0 0
// DefineStreamItems ( ) ;
70508: CALL 70953 0 0
// end ;
70512: END
// function InitStreamMode ; begin
70513: LD_INT 0
70515: PPUSH
// streamModeActive := false ;
70516: LD_ADDR_EXP 108
70520: PUSH
70521: LD_INT 0
70523: ST_TO_ADDR
// normalCounter := 36 ;
70524: LD_ADDR_EXP 109
70528: PUSH
70529: LD_INT 36
70531: ST_TO_ADDR
// hardcoreCounter := 16 ;
70532: LD_ADDR_EXP 110
70536: PUSH
70537: LD_INT 16
70539: ST_TO_ADDR
// sRocket := false ;
70540: LD_ADDR_EXP 113
70544: PUSH
70545: LD_INT 0
70547: ST_TO_ADDR
// sSpeed := false ;
70548: LD_ADDR_EXP 112
70552: PUSH
70553: LD_INT 0
70555: ST_TO_ADDR
// sEngine := false ;
70556: LD_ADDR_EXP 114
70560: PUSH
70561: LD_INT 0
70563: ST_TO_ADDR
// sSpec := false ;
70564: LD_ADDR_EXP 111
70568: PUSH
70569: LD_INT 0
70571: ST_TO_ADDR
// sLevel := false ;
70572: LD_ADDR_EXP 115
70576: PUSH
70577: LD_INT 0
70579: ST_TO_ADDR
// sArmoury := false ;
70580: LD_ADDR_EXP 116
70584: PUSH
70585: LD_INT 0
70587: ST_TO_ADDR
// sRadar := false ;
70588: LD_ADDR_EXP 117
70592: PUSH
70593: LD_INT 0
70595: ST_TO_ADDR
// sBunker := false ;
70596: LD_ADDR_EXP 118
70600: PUSH
70601: LD_INT 0
70603: ST_TO_ADDR
// sHack := false ;
70604: LD_ADDR_EXP 119
70608: PUSH
70609: LD_INT 0
70611: ST_TO_ADDR
// sFire := false ;
70612: LD_ADDR_EXP 120
70616: PUSH
70617: LD_INT 0
70619: ST_TO_ADDR
// sRefresh := false ;
70620: LD_ADDR_EXP 121
70624: PUSH
70625: LD_INT 0
70627: ST_TO_ADDR
// sExp := false ;
70628: LD_ADDR_EXP 122
70632: PUSH
70633: LD_INT 0
70635: ST_TO_ADDR
// sDepot := false ;
70636: LD_ADDR_EXP 123
70640: PUSH
70641: LD_INT 0
70643: ST_TO_ADDR
// sFlag := false ;
70644: LD_ADDR_EXP 124
70648: PUSH
70649: LD_INT 0
70651: ST_TO_ADDR
// sKamikadze := false ;
70652: LD_ADDR_EXP 132
70656: PUSH
70657: LD_INT 0
70659: ST_TO_ADDR
// sTroll := false ;
70660: LD_ADDR_EXP 133
70664: PUSH
70665: LD_INT 0
70667: ST_TO_ADDR
// sSlow := false ;
70668: LD_ADDR_EXP 134
70672: PUSH
70673: LD_INT 0
70675: ST_TO_ADDR
// sLack := false ;
70676: LD_ADDR_EXP 135
70680: PUSH
70681: LD_INT 0
70683: ST_TO_ADDR
// sTank := false ;
70684: LD_ADDR_EXP 137
70688: PUSH
70689: LD_INT 0
70691: ST_TO_ADDR
// sRemote := false ;
70692: LD_ADDR_EXP 138
70696: PUSH
70697: LD_INT 0
70699: ST_TO_ADDR
// sPowell := false ;
70700: LD_ADDR_EXP 139
70704: PUSH
70705: LD_INT 0
70707: ST_TO_ADDR
// sTeleport := false ;
70708: LD_ADDR_EXP 142
70712: PUSH
70713: LD_INT 0
70715: ST_TO_ADDR
// sOilTower := false ;
70716: LD_ADDR_EXP 144
70720: PUSH
70721: LD_INT 0
70723: ST_TO_ADDR
// sShovel := false ;
70724: LD_ADDR_EXP 145
70728: PUSH
70729: LD_INT 0
70731: ST_TO_ADDR
// sSheik := false ;
70732: LD_ADDR_EXP 146
70736: PUSH
70737: LD_INT 0
70739: ST_TO_ADDR
// sEarthquake := false ;
70740: LD_ADDR_EXP 148
70744: PUSH
70745: LD_INT 0
70747: ST_TO_ADDR
// sAI := false ;
70748: LD_ADDR_EXP 149
70752: PUSH
70753: LD_INT 0
70755: ST_TO_ADDR
// sCargo := false ;
70756: LD_ADDR_EXP 152
70760: PUSH
70761: LD_INT 0
70763: ST_TO_ADDR
// sDLaser := false ;
70764: LD_ADDR_EXP 153
70768: PUSH
70769: LD_INT 0
70771: ST_TO_ADDR
// sExchange := false ;
70772: LD_ADDR_EXP 154
70776: PUSH
70777: LD_INT 0
70779: ST_TO_ADDR
// sFac := false ;
70780: LD_ADDR_EXP 155
70784: PUSH
70785: LD_INT 0
70787: ST_TO_ADDR
// sPower := false ;
70788: LD_ADDR_EXP 156
70792: PUSH
70793: LD_INT 0
70795: ST_TO_ADDR
// sRandom := false ;
70796: LD_ADDR_EXP 157
70800: PUSH
70801: LD_INT 0
70803: ST_TO_ADDR
// sShield := false ;
70804: LD_ADDR_EXP 158
70808: PUSH
70809: LD_INT 0
70811: ST_TO_ADDR
// sTime := false ;
70812: LD_ADDR_EXP 159
70816: PUSH
70817: LD_INT 0
70819: ST_TO_ADDR
// sTools := false ;
70820: LD_ADDR_EXP 160
70824: PUSH
70825: LD_INT 0
70827: ST_TO_ADDR
// sSold := false ;
70828: LD_ADDR_EXP 125
70832: PUSH
70833: LD_INT 0
70835: ST_TO_ADDR
// sDiff := false ;
70836: LD_ADDR_EXP 126
70840: PUSH
70841: LD_INT 0
70843: ST_TO_ADDR
// sFog := false ;
70844: LD_ADDR_EXP 129
70848: PUSH
70849: LD_INT 0
70851: ST_TO_ADDR
// sReset := false ;
70852: LD_ADDR_EXP 130
70856: PUSH
70857: LD_INT 0
70859: ST_TO_ADDR
// sSun := false ;
70860: LD_ADDR_EXP 131
70864: PUSH
70865: LD_INT 0
70867: ST_TO_ADDR
// sTiger := false ;
70868: LD_ADDR_EXP 127
70872: PUSH
70873: LD_INT 0
70875: ST_TO_ADDR
// sBomb := false ;
70876: LD_ADDR_EXP 128
70880: PUSH
70881: LD_INT 0
70883: ST_TO_ADDR
// sWound := false ;
70884: LD_ADDR_EXP 136
70888: PUSH
70889: LD_INT 0
70891: ST_TO_ADDR
// sBetray := false ;
70892: LD_ADDR_EXP 140
70896: PUSH
70897: LD_INT 0
70899: ST_TO_ADDR
// sContamin := false ;
70900: LD_ADDR_EXP 141
70904: PUSH
70905: LD_INT 0
70907: ST_TO_ADDR
// sOil := false ;
70908: LD_ADDR_EXP 143
70912: PUSH
70913: LD_INT 0
70915: ST_TO_ADDR
// sStu := false ;
70916: LD_ADDR_EXP 147
70920: PUSH
70921: LD_INT 0
70923: ST_TO_ADDR
// sBazooka := false ;
70924: LD_ADDR_EXP 150
70928: PUSH
70929: LD_INT 0
70931: ST_TO_ADDR
// sMortar := false ;
70932: LD_ADDR_EXP 151
70936: PUSH
70937: LD_INT 0
70939: ST_TO_ADDR
// sRanger := false ;
70940: LD_ADDR_EXP 161
70944: PUSH
70945: LD_INT 0
70947: ST_TO_ADDR
// end ;
70948: LD_VAR 0 1
70952: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
70953: LD_INT 0
70955: PPUSH
70956: PPUSH
70957: PPUSH
70958: PPUSH
70959: PPUSH
// result := [ ] ;
70960: LD_ADDR_VAR 0 1
70964: PUSH
70965: EMPTY
70966: ST_TO_ADDR
// if campaign_id = 1 then
70967: LD_OWVAR 69
70971: PUSH
70972: LD_INT 1
70974: EQUAL
70975: IFFALSE 73913
// begin case mission_number of 1 :
70977: LD_OWVAR 70
70981: PUSH
70982: LD_INT 1
70984: DOUBLE
70985: EQUAL
70986: IFTRUE 70990
70988: GO 71054
70990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
70991: LD_ADDR_VAR 0 1
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: LD_INT 4
71001: PUSH
71002: LD_INT 11
71004: PUSH
71005: LD_INT 12
71007: PUSH
71008: LD_INT 15
71010: PUSH
71011: LD_INT 16
71013: PUSH
71014: LD_INT 22
71016: PUSH
71017: LD_INT 23
71019: PUSH
71020: LD_INT 26
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 101
71036: PUSH
71037: LD_INT 102
71039: PUSH
71040: LD_INT 106
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: ST_TO_ADDR
71052: GO 73911
71054: LD_INT 2
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71062
71060: GO 71134
71062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
71063: LD_ADDR_VAR 0 1
71067: PUSH
71068: LD_INT 2
71070: PUSH
71071: LD_INT 4
71073: PUSH
71074: LD_INT 11
71076: PUSH
71077: LD_INT 12
71079: PUSH
71080: LD_INT 15
71082: PUSH
71083: LD_INT 16
71085: PUSH
71086: LD_INT 22
71088: PUSH
71089: LD_INT 23
71091: PUSH
71092: LD_INT 26
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 101
71108: PUSH
71109: LD_INT 102
71111: PUSH
71112: LD_INT 105
71114: PUSH
71115: LD_INT 106
71117: PUSH
71118: LD_INT 108
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: ST_TO_ADDR
71132: GO 73911
71134: LD_INT 3
71136: DOUBLE
71137: EQUAL
71138: IFTRUE 71142
71140: GO 71218
71142: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
71143: LD_ADDR_VAR 0 1
71147: PUSH
71148: LD_INT 2
71150: PUSH
71151: LD_INT 4
71153: PUSH
71154: LD_INT 5
71156: PUSH
71157: LD_INT 11
71159: PUSH
71160: LD_INT 12
71162: PUSH
71163: LD_INT 15
71165: PUSH
71166: LD_INT 16
71168: PUSH
71169: LD_INT 22
71171: PUSH
71172: LD_INT 26
71174: PUSH
71175: LD_INT 36
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 101
71192: PUSH
71193: LD_INT 102
71195: PUSH
71196: LD_INT 105
71198: PUSH
71199: LD_INT 106
71201: PUSH
71202: LD_INT 108
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: ST_TO_ADDR
71216: GO 73911
71218: LD_INT 4
71220: DOUBLE
71221: EQUAL
71222: IFTRUE 71226
71224: GO 71310
71226: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
71227: LD_ADDR_VAR 0 1
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: LD_INT 4
71237: PUSH
71238: LD_INT 5
71240: PUSH
71241: LD_INT 8
71243: PUSH
71244: LD_INT 11
71246: PUSH
71247: LD_INT 12
71249: PUSH
71250: LD_INT 15
71252: PUSH
71253: LD_INT 16
71255: PUSH
71256: LD_INT 22
71258: PUSH
71259: LD_INT 23
71261: PUSH
71262: LD_INT 26
71264: PUSH
71265: LD_INT 36
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 101
71284: PUSH
71285: LD_INT 102
71287: PUSH
71288: LD_INT 105
71290: PUSH
71291: LD_INT 106
71293: PUSH
71294: LD_INT 108
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: ST_TO_ADDR
71308: GO 73911
71310: LD_INT 5
71312: DOUBLE
71313: EQUAL
71314: IFTRUE 71318
71316: GO 71418
71318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
71319: LD_ADDR_VAR 0 1
71323: PUSH
71324: LD_INT 2
71326: PUSH
71327: LD_INT 4
71329: PUSH
71330: LD_INT 5
71332: PUSH
71333: LD_INT 6
71335: PUSH
71336: LD_INT 8
71338: PUSH
71339: LD_INT 11
71341: PUSH
71342: LD_INT 12
71344: PUSH
71345: LD_INT 15
71347: PUSH
71348: LD_INT 16
71350: PUSH
71351: LD_INT 22
71353: PUSH
71354: LD_INT 23
71356: PUSH
71357: LD_INT 25
71359: PUSH
71360: LD_INT 26
71362: PUSH
71363: LD_INT 36
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 101
71384: PUSH
71385: LD_INT 102
71387: PUSH
71388: LD_INT 105
71390: PUSH
71391: LD_INT 106
71393: PUSH
71394: LD_INT 108
71396: PUSH
71397: LD_INT 109
71399: PUSH
71400: LD_INT 112
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: ST_TO_ADDR
71416: GO 73911
71418: LD_INT 6
71420: DOUBLE
71421: EQUAL
71422: IFTRUE 71426
71424: GO 71546
71426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
71427: LD_ADDR_VAR 0 1
71431: PUSH
71432: LD_INT 2
71434: PUSH
71435: LD_INT 4
71437: PUSH
71438: LD_INT 5
71440: PUSH
71441: LD_INT 6
71443: PUSH
71444: LD_INT 8
71446: PUSH
71447: LD_INT 11
71449: PUSH
71450: LD_INT 12
71452: PUSH
71453: LD_INT 15
71455: PUSH
71456: LD_INT 16
71458: PUSH
71459: LD_INT 20
71461: PUSH
71462: LD_INT 21
71464: PUSH
71465: LD_INT 22
71467: PUSH
71468: LD_INT 23
71470: PUSH
71471: LD_INT 25
71473: PUSH
71474: LD_INT 26
71476: PUSH
71477: LD_INT 30
71479: PUSH
71480: LD_INT 31
71482: PUSH
71483: LD_INT 32
71485: PUSH
71486: LD_INT 36
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 101
71512: PUSH
71513: LD_INT 102
71515: PUSH
71516: LD_INT 105
71518: PUSH
71519: LD_INT 106
71521: PUSH
71522: LD_INT 108
71524: PUSH
71525: LD_INT 109
71527: PUSH
71528: LD_INT 112
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: ST_TO_ADDR
71544: GO 73911
71546: LD_INT 7
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71554
71552: GO 71654
71554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
71555: LD_ADDR_VAR 0 1
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: LD_INT 4
71565: PUSH
71566: LD_INT 5
71568: PUSH
71569: LD_INT 7
71571: PUSH
71572: LD_INT 11
71574: PUSH
71575: LD_INT 12
71577: PUSH
71578: LD_INT 15
71580: PUSH
71581: LD_INT 16
71583: PUSH
71584: LD_INT 20
71586: PUSH
71587: LD_INT 21
71589: PUSH
71590: LD_INT 22
71592: PUSH
71593: LD_INT 23
71595: PUSH
71596: LD_INT 25
71598: PUSH
71599: LD_INT 26
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 101
71620: PUSH
71621: LD_INT 102
71623: PUSH
71624: LD_INT 103
71626: PUSH
71627: LD_INT 105
71629: PUSH
71630: LD_INT 106
71632: PUSH
71633: LD_INT 108
71635: PUSH
71636: LD_INT 112
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: ST_TO_ADDR
71652: GO 73911
71654: LD_INT 8
71656: DOUBLE
71657: EQUAL
71658: IFTRUE 71662
71660: GO 71790
71662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
71663: LD_ADDR_VAR 0 1
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: LD_INT 4
71673: PUSH
71674: LD_INT 5
71676: PUSH
71677: LD_INT 6
71679: PUSH
71680: LD_INT 7
71682: PUSH
71683: LD_INT 8
71685: PUSH
71686: LD_INT 11
71688: PUSH
71689: LD_INT 12
71691: PUSH
71692: LD_INT 15
71694: PUSH
71695: LD_INT 16
71697: PUSH
71698: LD_INT 20
71700: PUSH
71701: LD_INT 21
71703: PUSH
71704: LD_INT 22
71706: PUSH
71707: LD_INT 23
71709: PUSH
71710: LD_INT 25
71712: PUSH
71713: LD_INT 26
71715: PUSH
71716: LD_INT 30
71718: PUSH
71719: LD_INT 31
71721: PUSH
71722: LD_INT 32
71724: PUSH
71725: LD_INT 36
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 101
71752: PUSH
71753: LD_INT 102
71755: PUSH
71756: LD_INT 103
71758: PUSH
71759: LD_INT 105
71761: PUSH
71762: LD_INT 106
71764: PUSH
71765: LD_INT 108
71767: PUSH
71768: LD_INT 109
71770: PUSH
71771: LD_INT 112
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: ST_TO_ADDR
71788: GO 73911
71790: LD_INT 9
71792: DOUBLE
71793: EQUAL
71794: IFTRUE 71798
71796: GO 71934
71798: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
71799: LD_ADDR_VAR 0 1
71803: PUSH
71804: LD_INT 2
71806: PUSH
71807: LD_INT 4
71809: PUSH
71810: LD_INT 5
71812: PUSH
71813: LD_INT 6
71815: PUSH
71816: LD_INT 7
71818: PUSH
71819: LD_INT 8
71821: PUSH
71822: LD_INT 11
71824: PUSH
71825: LD_INT 12
71827: PUSH
71828: LD_INT 15
71830: PUSH
71831: LD_INT 16
71833: PUSH
71834: LD_INT 20
71836: PUSH
71837: LD_INT 21
71839: PUSH
71840: LD_INT 22
71842: PUSH
71843: LD_INT 23
71845: PUSH
71846: LD_INT 25
71848: PUSH
71849: LD_INT 26
71851: PUSH
71852: LD_INT 28
71854: PUSH
71855: LD_INT 30
71857: PUSH
71858: LD_INT 31
71860: PUSH
71861: LD_INT 32
71863: PUSH
71864: LD_INT 36
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 101
71892: PUSH
71893: LD_INT 102
71895: PUSH
71896: LD_INT 103
71898: PUSH
71899: LD_INT 105
71901: PUSH
71902: LD_INT 106
71904: PUSH
71905: LD_INT 108
71907: PUSH
71908: LD_INT 109
71910: PUSH
71911: LD_INT 112
71913: PUSH
71914: LD_INT 114
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: ST_TO_ADDR
71932: GO 73911
71934: LD_INT 10
71936: DOUBLE
71937: EQUAL
71938: IFTRUE 71942
71940: GO 72126
71942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
71943: LD_ADDR_VAR 0 1
71947: PUSH
71948: LD_INT 2
71950: PUSH
71951: LD_INT 4
71953: PUSH
71954: LD_INT 5
71956: PUSH
71957: LD_INT 6
71959: PUSH
71960: LD_INT 7
71962: PUSH
71963: LD_INT 8
71965: PUSH
71966: LD_INT 9
71968: PUSH
71969: LD_INT 10
71971: PUSH
71972: LD_INT 11
71974: PUSH
71975: LD_INT 12
71977: PUSH
71978: LD_INT 13
71980: PUSH
71981: LD_INT 14
71983: PUSH
71984: LD_INT 15
71986: PUSH
71987: LD_INT 16
71989: PUSH
71990: LD_INT 17
71992: PUSH
71993: LD_INT 18
71995: PUSH
71996: LD_INT 19
71998: PUSH
71999: LD_INT 20
72001: PUSH
72002: LD_INT 21
72004: PUSH
72005: LD_INT 22
72007: PUSH
72008: LD_INT 23
72010: PUSH
72011: LD_INT 24
72013: PUSH
72014: LD_INT 25
72016: PUSH
72017: LD_INT 26
72019: PUSH
72020: LD_INT 28
72022: PUSH
72023: LD_INT 30
72025: PUSH
72026: LD_INT 31
72028: PUSH
72029: LD_INT 32
72031: PUSH
72032: LD_INT 36
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 101
72068: PUSH
72069: LD_INT 102
72071: PUSH
72072: LD_INT 103
72074: PUSH
72075: LD_INT 104
72077: PUSH
72078: LD_INT 105
72080: PUSH
72081: LD_INT 106
72083: PUSH
72084: LD_INT 107
72086: PUSH
72087: LD_INT 108
72089: PUSH
72090: LD_INT 109
72092: PUSH
72093: LD_INT 110
72095: PUSH
72096: LD_INT 111
72098: PUSH
72099: LD_INT 112
72101: PUSH
72102: LD_INT 114
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: ST_TO_ADDR
72124: GO 73911
72126: LD_INT 11
72128: DOUBLE
72129: EQUAL
72130: IFTRUE 72134
72132: GO 72326
72134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
72135: LD_ADDR_VAR 0 1
72139: PUSH
72140: LD_INT 2
72142: PUSH
72143: LD_INT 3
72145: PUSH
72146: LD_INT 4
72148: PUSH
72149: LD_INT 5
72151: PUSH
72152: LD_INT 6
72154: PUSH
72155: LD_INT 7
72157: PUSH
72158: LD_INT 8
72160: PUSH
72161: LD_INT 9
72163: PUSH
72164: LD_INT 10
72166: PUSH
72167: LD_INT 11
72169: PUSH
72170: LD_INT 12
72172: PUSH
72173: LD_INT 13
72175: PUSH
72176: LD_INT 14
72178: PUSH
72179: LD_INT 15
72181: PUSH
72182: LD_INT 16
72184: PUSH
72185: LD_INT 17
72187: PUSH
72188: LD_INT 18
72190: PUSH
72191: LD_INT 19
72193: PUSH
72194: LD_INT 20
72196: PUSH
72197: LD_INT 21
72199: PUSH
72200: LD_INT 22
72202: PUSH
72203: LD_INT 23
72205: PUSH
72206: LD_INT 24
72208: PUSH
72209: LD_INT 25
72211: PUSH
72212: LD_INT 26
72214: PUSH
72215: LD_INT 28
72217: PUSH
72218: LD_INT 30
72220: PUSH
72221: LD_INT 31
72223: PUSH
72224: LD_INT 32
72226: PUSH
72227: LD_INT 34
72229: PUSH
72230: LD_INT 36
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 101
72268: PUSH
72269: LD_INT 102
72271: PUSH
72272: LD_INT 103
72274: PUSH
72275: LD_INT 104
72277: PUSH
72278: LD_INT 105
72280: PUSH
72281: LD_INT 106
72283: PUSH
72284: LD_INT 107
72286: PUSH
72287: LD_INT 108
72289: PUSH
72290: LD_INT 109
72292: PUSH
72293: LD_INT 110
72295: PUSH
72296: LD_INT 111
72298: PUSH
72299: LD_INT 112
72301: PUSH
72302: LD_INT 114
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: ST_TO_ADDR
72324: GO 73911
72326: LD_INT 12
72328: DOUBLE
72329: EQUAL
72330: IFTRUE 72334
72332: GO 72542
72334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
72335: LD_ADDR_VAR 0 1
72339: PUSH
72340: LD_INT 1
72342: PUSH
72343: LD_INT 2
72345: PUSH
72346: LD_INT 3
72348: PUSH
72349: LD_INT 4
72351: PUSH
72352: LD_INT 5
72354: PUSH
72355: LD_INT 6
72357: PUSH
72358: LD_INT 7
72360: PUSH
72361: LD_INT 8
72363: PUSH
72364: LD_INT 9
72366: PUSH
72367: LD_INT 10
72369: PUSH
72370: LD_INT 11
72372: PUSH
72373: LD_INT 12
72375: PUSH
72376: LD_INT 13
72378: PUSH
72379: LD_INT 14
72381: PUSH
72382: LD_INT 15
72384: PUSH
72385: LD_INT 16
72387: PUSH
72388: LD_INT 17
72390: PUSH
72391: LD_INT 18
72393: PUSH
72394: LD_INT 19
72396: PUSH
72397: LD_INT 20
72399: PUSH
72400: LD_INT 21
72402: PUSH
72403: LD_INT 22
72405: PUSH
72406: LD_INT 23
72408: PUSH
72409: LD_INT 24
72411: PUSH
72412: LD_INT 25
72414: PUSH
72415: LD_INT 26
72417: PUSH
72418: LD_INT 27
72420: PUSH
72421: LD_INT 28
72423: PUSH
72424: LD_INT 30
72426: PUSH
72427: LD_INT 31
72429: PUSH
72430: LD_INT 32
72432: PUSH
72433: LD_INT 33
72435: PUSH
72436: LD_INT 34
72438: PUSH
72439: LD_INT 36
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 101
72480: PUSH
72481: LD_INT 102
72483: PUSH
72484: LD_INT 103
72486: PUSH
72487: LD_INT 104
72489: PUSH
72490: LD_INT 105
72492: PUSH
72493: LD_INT 106
72495: PUSH
72496: LD_INT 107
72498: PUSH
72499: LD_INT 108
72501: PUSH
72502: LD_INT 109
72504: PUSH
72505: LD_INT 110
72507: PUSH
72508: LD_INT 111
72510: PUSH
72511: LD_INT 112
72513: PUSH
72514: LD_INT 113
72516: PUSH
72517: LD_INT 114
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: ST_TO_ADDR
72540: GO 73911
72542: LD_INT 13
72544: DOUBLE
72545: EQUAL
72546: IFTRUE 72550
72548: GO 72746
72550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
72551: LD_ADDR_VAR 0 1
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: LD_INT 2
72561: PUSH
72562: LD_INT 3
72564: PUSH
72565: LD_INT 4
72567: PUSH
72568: LD_INT 5
72570: PUSH
72571: LD_INT 8
72573: PUSH
72574: LD_INT 9
72576: PUSH
72577: LD_INT 10
72579: PUSH
72580: LD_INT 11
72582: PUSH
72583: LD_INT 12
72585: PUSH
72586: LD_INT 14
72588: PUSH
72589: LD_INT 15
72591: PUSH
72592: LD_INT 16
72594: PUSH
72595: LD_INT 17
72597: PUSH
72598: LD_INT 18
72600: PUSH
72601: LD_INT 19
72603: PUSH
72604: LD_INT 20
72606: PUSH
72607: LD_INT 21
72609: PUSH
72610: LD_INT 22
72612: PUSH
72613: LD_INT 23
72615: PUSH
72616: LD_INT 24
72618: PUSH
72619: LD_INT 25
72621: PUSH
72622: LD_INT 26
72624: PUSH
72625: LD_INT 27
72627: PUSH
72628: LD_INT 28
72630: PUSH
72631: LD_INT 30
72633: PUSH
72634: LD_INT 31
72636: PUSH
72637: LD_INT 32
72639: PUSH
72640: LD_INT 33
72642: PUSH
72643: LD_INT 34
72645: PUSH
72646: LD_INT 36
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 101
72684: PUSH
72685: LD_INT 102
72687: PUSH
72688: LD_INT 103
72690: PUSH
72691: LD_INT 104
72693: PUSH
72694: LD_INT 105
72696: PUSH
72697: LD_INT 106
72699: PUSH
72700: LD_INT 107
72702: PUSH
72703: LD_INT 108
72705: PUSH
72706: LD_INT 109
72708: PUSH
72709: LD_INT 110
72711: PUSH
72712: LD_INT 111
72714: PUSH
72715: LD_INT 112
72717: PUSH
72718: LD_INT 113
72720: PUSH
72721: LD_INT 114
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: ST_TO_ADDR
72744: GO 73911
72746: LD_INT 14
72748: DOUBLE
72749: EQUAL
72750: IFTRUE 72754
72752: GO 72966
72754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
72755: LD_ADDR_VAR 0 1
72759: PUSH
72760: LD_INT 1
72762: PUSH
72763: LD_INT 2
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: LD_INT 4
72771: PUSH
72772: LD_INT 5
72774: PUSH
72775: LD_INT 6
72777: PUSH
72778: LD_INT 7
72780: PUSH
72781: LD_INT 8
72783: PUSH
72784: LD_INT 9
72786: PUSH
72787: LD_INT 10
72789: PUSH
72790: LD_INT 11
72792: PUSH
72793: LD_INT 12
72795: PUSH
72796: LD_INT 13
72798: PUSH
72799: LD_INT 14
72801: PUSH
72802: LD_INT 15
72804: PUSH
72805: LD_INT 16
72807: PUSH
72808: LD_INT 17
72810: PUSH
72811: LD_INT 18
72813: PUSH
72814: LD_INT 19
72816: PUSH
72817: LD_INT 20
72819: PUSH
72820: LD_INT 21
72822: PUSH
72823: LD_INT 22
72825: PUSH
72826: LD_INT 23
72828: PUSH
72829: LD_INT 24
72831: PUSH
72832: LD_INT 25
72834: PUSH
72835: LD_INT 26
72837: PUSH
72838: LD_INT 27
72840: PUSH
72841: LD_INT 28
72843: PUSH
72844: LD_INT 29
72846: PUSH
72847: LD_INT 30
72849: PUSH
72850: LD_INT 31
72852: PUSH
72853: LD_INT 32
72855: PUSH
72856: LD_INT 33
72858: PUSH
72859: LD_INT 34
72861: PUSH
72862: LD_INT 36
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 101
72904: PUSH
72905: LD_INT 102
72907: PUSH
72908: LD_INT 103
72910: PUSH
72911: LD_INT 104
72913: PUSH
72914: LD_INT 105
72916: PUSH
72917: LD_INT 106
72919: PUSH
72920: LD_INT 107
72922: PUSH
72923: LD_INT 108
72925: PUSH
72926: LD_INT 109
72928: PUSH
72929: LD_INT 110
72931: PUSH
72932: LD_INT 111
72934: PUSH
72935: LD_INT 112
72937: PUSH
72938: LD_INT 113
72940: PUSH
72941: LD_INT 114
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: ST_TO_ADDR
72964: GO 73911
72966: LD_INT 15
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72974
72972: GO 73186
72974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
72975: LD_ADDR_VAR 0 1
72979: PUSH
72980: LD_INT 1
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: LD_INT 3
72988: PUSH
72989: LD_INT 4
72991: PUSH
72992: LD_INT 5
72994: PUSH
72995: LD_INT 6
72997: PUSH
72998: LD_INT 7
73000: PUSH
73001: LD_INT 8
73003: PUSH
73004: LD_INT 9
73006: PUSH
73007: LD_INT 10
73009: PUSH
73010: LD_INT 11
73012: PUSH
73013: LD_INT 12
73015: PUSH
73016: LD_INT 13
73018: PUSH
73019: LD_INT 14
73021: PUSH
73022: LD_INT 15
73024: PUSH
73025: LD_INT 16
73027: PUSH
73028: LD_INT 17
73030: PUSH
73031: LD_INT 18
73033: PUSH
73034: LD_INT 19
73036: PUSH
73037: LD_INT 20
73039: PUSH
73040: LD_INT 21
73042: PUSH
73043: LD_INT 22
73045: PUSH
73046: LD_INT 23
73048: PUSH
73049: LD_INT 24
73051: PUSH
73052: LD_INT 25
73054: PUSH
73055: LD_INT 26
73057: PUSH
73058: LD_INT 27
73060: PUSH
73061: LD_INT 28
73063: PUSH
73064: LD_INT 29
73066: PUSH
73067: LD_INT 30
73069: PUSH
73070: LD_INT 31
73072: PUSH
73073: LD_INT 32
73075: PUSH
73076: LD_INT 33
73078: PUSH
73079: LD_INT 34
73081: PUSH
73082: LD_INT 36
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 101
73124: PUSH
73125: LD_INT 102
73127: PUSH
73128: LD_INT 103
73130: PUSH
73131: LD_INT 104
73133: PUSH
73134: LD_INT 105
73136: PUSH
73137: LD_INT 106
73139: PUSH
73140: LD_INT 107
73142: PUSH
73143: LD_INT 108
73145: PUSH
73146: LD_INT 109
73148: PUSH
73149: LD_INT 110
73151: PUSH
73152: LD_INT 111
73154: PUSH
73155: LD_INT 112
73157: PUSH
73158: LD_INT 113
73160: PUSH
73161: LD_INT 114
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: ST_TO_ADDR
73184: GO 73911
73186: LD_INT 16
73188: DOUBLE
73189: EQUAL
73190: IFTRUE 73194
73192: GO 73318
73194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
73195: LD_ADDR_VAR 0 1
73199: PUSH
73200: LD_INT 2
73202: PUSH
73203: LD_INT 4
73205: PUSH
73206: LD_INT 5
73208: PUSH
73209: LD_INT 7
73211: PUSH
73212: LD_INT 11
73214: PUSH
73215: LD_INT 12
73217: PUSH
73218: LD_INT 15
73220: PUSH
73221: LD_INT 16
73223: PUSH
73224: LD_INT 20
73226: PUSH
73227: LD_INT 21
73229: PUSH
73230: LD_INT 22
73232: PUSH
73233: LD_INT 23
73235: PUSH
73236: LD_INT 25
73238: PUSH
73239: LD_INT 26
73241: PUSH
73242: LD_INT 30
73244: PUSH
73245: LD_INT 31
73247: PUSH
73248: LD_INT 32
73250: PUSH
73251: LD_INT 33
73253: PUSH
73254: LD_INT 34
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 101
73280: PUSH
73281: LD_INT 102
73283: PUSH
73284: LD_INT 103
73286: PUSH
73287: LD_INT 106
73289: PUSH
73290: LD_INT 108
73292: PUSH
73293: LD_INT 112
73295: PUSH
73296: LD_INT 113
73298: PUSH
73299: LD_INT 114
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: ST_TO_ADDR
73316: GO 73911
73318: LD_INT 17
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73326
73324: GO 73538
73326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
73327: LD_ADDR_VAR 0 1
73331: PUSH
73332: LD_INT 1
73334: PUSH
73335: LD_INT 2
73337: PUSH
73338: LD_INT 3
73340: PUSH
73341: LD_INT 4
73343: PUSH
73344: LD_INT 5
73346: PUSH
73347: LD_INT 6
73349: PUSH
73350: LD_INT 7
73352: PUSH
73353: LD_INT 8
73355: PUSH
73356: LD_INT 9
73358: PUSH
73359: LD_INT 10
73361: PUSH
73362: LD_INT 11
73364: PUSH
73365: LD_INT 12
73367: PUSH
73368: LD_INT 13
73370: PUSH
73371: LD_INT 14
73373: PUSH
73374: LD_INT 15
73376: PUSH
73377: LD_INT 16
73379: PUSH
73380: LD_INT 17
73382: PUSH
73383: LD_INT 18
73385: PUSH
73386: LD_INT 19
73388: PUSH
73389: LD_INT 20
73391: PUSH
73392: LD_INT 21
73394: PUSH
73395: LD_INT 22
73397: PUSH
73398: LD_INT 23
73400: PUSH
73401: LD_INT 24
73403: PUSH
73404: LD_INT 25
73406: PUSH
73407: LD_INT 26
73409: PUSH
73410: LD_INT 27
73412: PUSH
73413: LD_INT 28
73415: PUSH
73416: LD_INT 29
73418: PUSH
73419: LD_INT 30
73421: PUSH
73422: LD_INT 31
73424: PUSH
73425: LD_INT 32
73427: PUSH
73428: LD_INT 33
73430: PUSH
73431: LD_INT 34
73433: PUSH
73434: LD_INT 36
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 101
73476: PUSH
73477: LD_INT 102
73479: PUSH
73480: LD_INT 103
73482: PUSH
73483: LD_INT 104
73485: PUSH
73486: LD_INT 105
73488: PUSH
73489: LD_INT 106
73491: PUSH
73492: LD_INT 107
73494: PUSH
73495: LD_INT 108
73497: PUSH
73498: LD_INT 109
73500: PUSH
73501: LD_INT 110
73503: PUSH
73504: LD_INT 111
73506: PUSH
73507: LD_INT 112
73509: PUSH
73510: LD_INT 113
73512: PUSH
73513: LD_INT 114
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: ST_TO_ADDR
73536: GO 73911
73538: LD_INT 18
73540: DOUBLE
73541: EQUAL
73542: IFTRUE 73546
73544: GO 73682
73546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
73547: LD_ADDR_VAR 0 1
73551: PUSH
73552: LD_INT 2
73554: PUSH
73555: LD_INT 4
73557: PUSH
73558: LD_INT 5
73560: PUSH
73561: LD_INT 7
73563: PUSH
73564: LD_INT 11
73566: PUSH
73567: LD_INT 12
73569: PUSH
73570: LD_INT 15
73572: PUSH
73573: LD_INT 16
73575: PUSH
73576: LD_INT 20
73578: PUSH
73579: LD_INT 21
73581: PUSH
73582: LD_INT 22
73584: PUSH
73585: LD_INT 23
73587: PUSH
73588: LD_INT 25
73590: PUSH
73591: LD_INT 26
73593: PUSH
73594: LD_INT 30
73596: PUSH
73597: LD_INT 31
73599: PUSH
73600: LD_INT 32
73602: PUSH
73603: LD_INT 33
73605: PUSH
73606: LD_INT 34
73608: PUSH
73609: LD_INT 35
73611: PUSH
73612: LD_INT 36
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 101
73640: PUSH
73641: LD_INT 102
73643: PUSH
73644: LD_INT 103
73646: PUSH
73647: LD_INT 106
73649: PUSH
73650: LD_INT 108
73652: PUSH
73653: LD_INT 112
73655: PUSH
73656: LD_INT 113
73658: PUSH
73659: LD_INT 114
73661: PUSH
73662: LD_INT 115
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: ST_TO_ADDR
73680: GO 73911
73682: LD_INT 19
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73690
73688: GO 73910
73690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
73691: LD_ADDR_VAR 0 1
73695: PUSH
73696: LD_INT 1
73698: PUSH
73699: LD_INT 2
73701: PUSH
73702: LD_INT 3
73704: PUSH
73705: LD_INT 4
73707: PUSH
73708: LD_INT 5
73710: PUSH
73711: LD_INT 6
73713: PUSH
73714: LD_INT 7
73716: PUSH
73717: LD_INT 8
73719: PUSH
73720: LD_INT 9
73722: PUSH
73723: LD_INT 10
73725: PUSH
73726: LD_INT 11
73728: PUSH
73729: LD_INT 12
73731: PUSH
73732: LD_INT 13
73734: PUSH
73735: LD_INT 14
73737: PUSH
73738: LD_INT 15
73740: PUSH
73741: LD_INT 16
73743: PUSH
73744: LD_INT 17
73746: PUSH
73747: LD_INT 18
73749: PUSH
73750: LD_INT 19
73752: PUSH
73753: LD_INT 20
73755: PUSH
73756: LD_INT 21
73758: PUSH
73759: LD_INT 22
73761: PUSH
73762: LD_INT 23
73764: PUSH
73765: LD_INT 24
73767: PUSH
73768: LD_INT 25
73770: PUSH
73771: LD_INT 26
73773: PUSH
73774: LD_INT 27
73776: PUSH
73777: LD_INT 28
73779: PUSH
73780: LD_INT 29
73782: PUSH
73783: LD_INT 30
73785: PUSH
73786: LD_INT 31
73788: PUSH
73789: LD_INT 32
73791: PUSH
73792: LD_INT 33
73794: PUSH
73795: LD_INT 34
73797: PUSH
73798: LD_INT 35
73800: PUSH
73801: LD_INT 36
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 101
73844: PUSH
73845: LD_INT 102
73847: PUSH
73848: LD_INT 103
73850: PUSH
73851: LD_INT 104
73853: PUSH
73854: LD_INT 105
73856: PUSH
73857: LD_INT 106
73859: PUSH
73860: LD_INT 107
73862: PUSH
73863: LD_INT 108
73865: PUSH
73866: LD_INT 109
73868: PUSH
73869: LD_INT 110
73871: PUSH
73872: LD_INT 111
73874: PUSH
73875: LD_INT 112
73877: PUSH
73878: LD_INT 113
73880: PUSH
73881: LD_INT 114
73883: PUSH
73884: LD_INT 115
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: ST_TO_ADDR
73908: GO 73911
73910: POP
// end else
73911: GO 74130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
73913: LD_ADDR_VAR 0 1
73917: PUSH
73918: LD_INT 1
73920: PUSH
73921: LD_INT 2
73923: PUSH
73924: LD_INT 3
73926: PUSH
73927: LD_INT 4
73929: PUSH
73930: LD_INT 5
73932: PUSH
73933: LD_INT 6
73935: PUSH
73936: LD_INT 7
73938: PUSH
73939: LD_INT 8
73941: PUSH
73942: LD_INT 9
73944: PUSH
73945: LD_INT 10
73947: PUSH
73948: LD_INT 11
73950: PUSH
73951: LD_INT 12
73953: PUSH
73954: LD_INT 13
73956: PUSH
73957: LD_INT 14
73959: PUSH
73960: LD_INT 15
73962: PUSH
73963: LD_INT 16
73965: PUSH
73966: LD_INT 17
73968: PUSH
73969: LD_INT 18
73971: PUSH
73972: LD_INT 19
73974: PUSH
73975: LD_INT 20
73977: PUSH
73978: LD_INT 21
73980: PUSH
73981: LD_INT 22
73983: PUSH
73984: LD_INT 23
73986: PUSH
73987: LD_INT 24
73989: PUSH
73990: LD_INT 25
73992: PUSH
73993: LD_INT 26
73995: PUSH
73996: LD_INT 27
73998: PUSH
73999: LD_INT 28
74001: PUSH
74002: LD_INT 29
74004: PUSH
74005: LD_INT 30
74007: PUSH
74008: LD_INT 31
74010: PUSH
74011: LD_INT 32
74013: PUSH
74014: LD_INT 33
74016: PUSH
74017: LD_INT 34
74019: PUSH
74020: LD_INT 35
74022: PUSH
74023: LD_INT 36
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 101
74066: PUSH
74067: LD_INT 102
74069: PUSH
74070: LD_INT 103
74072: PUSH
74073: LD_INT 104
74075: PUSH
74076: LD_INT 105
74078: PUSH
74079: LD_INT 106
74081: PUSH
74082: LD_INT 107
74084: PUSH
74085: LD_INT 108
74087: PUSH
74088: LD_INT 109
74090: PUSH
74091: LD_INT 110
74093: PUSH
74094: LD_INT 111
74096: PUSH
74097: LD_INT 112
74099: PUSH
74100: LD_INT 113
74102: PUSH
74103: LD_INT 114
74105: PUSH
74106: LD_INT 115
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: ST_TO_ADDR
// if result then
74130: LD_VAR 0 1
74134: IFFALSE 74423
// begin normal :=  ;
74136: LD_ADDR_VAR 0 3
74140: PUSH
74141: LD_STRING 
74143: ST_TO_ADDR
// hardcore :=  ;
74144: LD_ADDR_VAR 0 4
74148: PUSH
74149: LD_STRING 
74151: ST_TO_ADDR
// for i = 1 to normalCounter do
74152: LD_ADDR_VAR 0 5
74156: PUSH
74157: DOUBLE
74158: LD_INT 1
74160: DEC
74161: ST_TO_ADDR
74162: LD_EXP 109
74166: PUSH
74167: FOR_TO
74168: IFFALSE 74269
// begin tmp := 0 ;
74170: LD_ADDR_VAR 0 2
74174: PUSH
74175: LD_STRING 0
74177: ST_TO_ADDR
// if result [ 1 ] then
74178: LD_VAR 0 1
74182: PUSH
74183: LD_INT 1
74185: ARRAY
74186: IFFALSE 74251
// if result [ 1 ] [ 1 ] = i then
74188: LD_VAR 0 1
74192: PUSH
74193: LD_INT 1
74195: ARRAY
74196: PUSH
74197: LD_INT 1
74199: ARRAY
74200: PUSH
74201: LD_VAR 0 5
74205: EQUAL
74206: IFFALSE 74251
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
74208: LD_ADDR_VAR 0 1
74212: PUSH
74213: LD_VAR 0 1
74217: PPUSH
74218: LD_INT 1
74220: PPUSH
74221: LD_VAR 0 1
74225: PUSH
74226: LD_INT 1
74228: ARRAY
74229: PPUSH
74230: LD_INT 1
74232: PPUSH
74233: CALL_OW 3
74237: PPUSH
74238: CALL_OW 1
74242: ST_TO_ADDR
// tmp := 1 ;
74243: LD_ADDR_VAR 0 2
74247: PUSH
74248: LD_STRING 1
74250: ST_TO_ADDR
// end ; normal := normal & tmp ;
74251: LD_ADDR_VAR 0 3
74255: PUSH
74256: LD_VAR 0 3
74260: PUSH
74261: LD_VAR 0 2
74265: STR
74266: ST_TO_ADDR
// end ;
74267: GO 74167
74269: POP
74270: POP
// for i = 1 to hardcoreCounter do
74271: LD_ADDR_VAR 0 5
74275: PUSH
74276: DOUBLE
74277: LD_INT 1
74279: DEC
74280: ST_TO_ADDR
74281: LD_EXP 110
74285: PUSH
74286: FOR_TO
74287: IFFALSE 74392
// begin tmp := 0 ;
74289: LD_ADDR_VAR 0 2
74293: PUSH
74294: LD_STRING 0
74296: ST_TO_ADDR
// if result [ 2 ] then
74297: LD_VAR 0 1
74301: PUSH
74302: LD_INT 2
74304: ARRAY
74305: IFFALSE 74374
// if result [ 2 ] [ 1 ] = 100 + i then
74307: LD_VAR 0 1
74311: PUSH
74312: LD_INT 2
74314: ARRAY
74315: PUSH
74316: LD_INT 1
74318: ARRAY
74319: PUSH
74320: LD_INT 100
74322: PUSH
74323: LD_VAR 0 5
74327: PLUS
74328: EQUAL
74329: IFFALSE 74374
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
74331: LD_ADDR_VAR 0 1
74335: PUSH
74336: LD_VAR 0 1
74340: PPUSH
74341: LD_INT 2
74343: PPUSH
74344: LD_VAR 0 1
74348: PUSH
74349: LD_INT 2
74351: ARRAY
74352: PPUSH
74353: LD_INT 1
74355: PPUSH
74356: CALL_OW 3
74360: PPUSH
74361: CALL_OW 1
74365: ST_TO_ADDR
// tmp := 1 ;
74366: LD_ADDR_VAR 0 2
74370: PUSH
74371: LD_STRING 1
74373: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
74374: LD_ADDR_VAR 0 4
74378: PUSH
74379: LD_VAR 0 4
74383: PUSH
74384: LD_VAR 0 2
74388: STR
74389: ST_TO_ADDR
// end ;
74390: GO 74286
74392: POP
74393: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
74394: LD_STRING getStreamItemsFromMission("
74396: PUSH
74397: LD_VAR 0 3
74401: STR
74402: PUSH
74403: LD_STRING ","
74405: STR
74406: PUSH
74407: LD_VAR 0 4
74411: STR
74412: PUSH
74413: LD_STRING ")
74415: STR
74416: PPUSH
74417: CALL_OW 559
// end else
74421: GO 74430
// ToLua ( getStreamItemsFromMission("","") ) ;
74423: LD_STRING getStreamItemsFromMission("","")
74425: PPUSH
74426: CALL_OW 559
// end ;
74430: LD_VAR 0 1
74434: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74435: LD_EXP 108
74439: PUSH
74440: LD_EXP 113
74444: AND
74445: IFFALSE 74569
74447: GO 74449
74449: DISABLE
74450: LD_INT 0
74452: PPUSH
74453: PPUSH
// begin enable ;
74454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74455: LD_ADDR_VAR 0 2
74459: PUSH
74460: LD_INT 22
74462: PUSH
74463: LD_OWVAR 2
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 2
74474: PUSH
74475: LD_INT 34
74477: PUSH
74478: LD_INT 7
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 34
74487: PUSH
74488: LD_INT 45
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 34
74497: PUSH
74498: LD_INT 28
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 34
74507: PUSH
74508: LD_INT 47
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PPUSH
74526: CALL_OW 69
74530: ST_TO_ADDR
// if not tmp then
74531: LD_VAR 0 2
74535: NOT
74536: IFFALSE 74540
// exit ;
74538: GO 74569
// for i in tmp do
74540: LD_ADDR_VAR 0 1
74544: PUSH
74545: LD_VAR 0 2
74549: PUSH
74550: FOR_IN
74551: IFFALSE 74567
// begin SetLives ( i , 0 ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_INT 0
74560: PPUSH
74561: CALL_OW 234
// end ;
74565: GO 74550
74567: POP
74568: POP
// end ;
74569: PPOPN 2
74571: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74572: LD_EXP 108
74576: PUSH
74577: LD_EXP 114
74581: AND
74582: IFFALSE 74666
74584: GO 74586
74586: DISABLE
74587: LD_INT 0
74589: PPUSH
74590: PPUSH
// begin enable ;
74591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74592: LD_ADDR_VAR 0 2
74596: PUSH
74597: LD_INT 22
74599: PUSH
74600: LD_OWVAR 2
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 32
74611: PUSH
74612: LD_INT 3
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PPUSH
74623: CALL_OW 69
74627: ST_TO_ADDR
// if not tmp then
74628: LD_VAR 0 2
74632: NOT
74633: IFFALSE 74637
// exit ;
74635: GO 74666
// for i in tmp do
74637: LD_ADDR_VAR 0 1
74641: PUSH
74642: LD_VAR 0 2
74646: PUSH
74647: FOR_IN
74648: IFFALSE 74664
// begin SetLives ( i , 0 ) ;
74650: LD_VAR 0 1
74654: PPUSH
74655: LD_INT 0
74657: PPUSH
74658: CALL_OW 234
// end ;
74662: GO 74647
74664: POP
74665: POP
// end ;
74666: PPOPN 2
74668: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74669: LD_EXP 108
74673: PUSH
74674: LD_EXP 111
74678: AND
74679: IFFALSE 74772
74681: GO 74683
74683: DISABLE
74684: LD_INT 0
74686: PPUSH
// begin enable ;
74687: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74688: LD_ADDR_VAR 0 1
74692: PUSH
74693: LD_INT 22
74695: PUSH
74696: LD_OWVAR 2
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 2
74707: PUSH
74708: LD_INT 25
74710: PUSH
74711: LD_INT 5
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: PUSH
74718: LD_INT 25
74720: PUSH
74721: LD_INT 9
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 25
74730: PUSH
74731: LD_INT 8
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PPUSH
74748: CALL_OW 69
74752: PUSH
74753: FOR_IN
74754: IFFALSE 74770
// begin SetClass ( i , 1 ) ;
74756: LD_VAR 0 1
74760: PPUSH
74761: LD_INT 1
74763: PPUSH
74764: CALL_OW 336
// end ;
74768: GO 74753
74770: POP
74771: POP
// end ;
74772: PPOPN 1
74774: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74775: LD_EXP 108
74779: PUSH
74780: LD_EXP 112
74784: AND
74785: PUSH
74786: LD_OWVAR 65
74790: PUSH
74791: LD_INT 7
74793: LESS
74794: AND
74795: IFFALSE 74809
74797: GO 74799
74799: DISABLE
// begin enable ;
74800: ENABLE
// game_speed := 7 ;
74801: LD_ADDR_OWVAR 65
74805: PUSH
74806: LD_INT 7
74808: ST_TO_ADDR
// end ;
74809: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74810: LD_EXP 108
74814: PUSH
74815: LD_EXP 115
74819: AND
74820: IFFALSE 75022
74822: GO 74824
74824: DISABLE
74825: LD_INT 0
74827: PPUSH
74828: PPUSH
74829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: LD_INT 81
74837: PUSH
74838: LD_OWVAR 2
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_INT 21
74849: PUSH
74850: LD_INT 1
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PPUSH
74861: CALL_OW 69
74865: ST_TO_ADDR
// if not tmp then
74866: LD_VAR 0 3
74870: NOT
74871: IFFALSE 74875
// exit ;
74873: GO 75022
// if tmp > 5 then
74875: LD_VAR 0 3
74879: PUSH
74880: LD_INT 5
74882: GREATER
74883: IFFALSE 74895
// k := 5 else
74885: LD_ADDR_VAR 0 2
74889: PUSH
74890: LD_INT 5
74892: ST_TO_ADDR
74893: GO 74905
// k := tmp ;
74895: LD_ADDR_VAR 0 2
74899: PUSH
74900: LD_VAR 0 3
74904: ST_TO_ADDR
// for i := 1 to k do
74905: LD_ADDR_VAR 0 1
74909: PUSH
74910: DOUBLE
74911: LD_INT 1
74913: DEC
74914: ST_TO_ADDR
74915: LD_VAR 0 2
74919: PUSH
74920: FOR_TO
74921: IFFALSE 75020
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74923: LD_VAR 0 3
74927: PUSH
74928: LD_VAR 0 1
74932: ARRAY
74933: PPUSH
74934: LD_VAR 0 1
74938: PUSH
74939: LD_INT 4
74941: MOD
74942: PUSH
74943: LD_INT 1
74945: PLUS
74946: PPUSH
74947: CALL_OW 259
74951: PUSH
74952: LD_INT 10
74954: LESS
74955: IFFALSE 75018
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74957: LD_VAR 0 3
74961: PUSH
74962: LD_VAR 0 1
74966: ARRAY
74967: PPUSH
74968: LD_VAR 0 1
74972: PUSH
74973: LD_INT 4
74975: MOD
74976: PUSH
74977: LD_INT 1
74979: PLUS
74980: PPUSH
74981: LD_VAR 0 3
74985: PUSH
74986: LD_VAR 0 1
74990: ARRAY
74991: PPUSH
74992: LD_VAR 0 1
74996: PUSH
74997: LD_INT 4
74999: MOD
75000: PUSH
75001: LD_INT 1
75003: PLUS
75004: PPUSH
75005: CALL_OW 259
75009: PUSH
75010: LD_INT 1
75012: PLUS
75013: PPUSH
75014: CALL_OW 237
75018: GO 74920
75020: POP
75021: POP
// end ;
75022: PPOPN 3
75024: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
75025: LD_EXP 108
75029: PUSH
75030: LD_EXP 116
75034: AND
75035: IFFALSE 75055
75037: GO 75039
75039: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
75040: LD_INT 4
75042: PPUSH
75043: LD_OWVAR 2
75047: PPUSH
75048: LD_INT 0
75050: PPUSH
75051: CALL_OW 324
75055: END
// every 0 0$1 trigger StreamModeActive and sShovel do
75056: LD_EXP 108
75060: PUSH
75061: LD_EXP 145
75065: AND
75066: IFFALSE 75086
75068: GO 75070
75070: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
75071: LD_INT 19
75073: PPUSH
75074: LD_OWVAR 2
75078: PPUSH
75079: LD_INT 0
75081: PPUSH
75082: CALL_OW 324
75086: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
75087: LD_EXP 108
75091: PUSH
75092: LD_EXP 117
75096: AND
75097: IFFALSE 75199
75099: GO 75101
75101: DISABLE
75102: LD_INT 0
75104: PPUSH
75105: PPUSH
// begin enable ;
75106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75107: LD_ADDR_VAR 0 2
75111: PUSH
75112: LD_INT 22
75114: PUSH
75115: LD_OWVAR 2
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 2
75126: PUSH
75127: LD_INT 34
75129: PUSH
75130: LD_INT 11
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 34
75139: PUSH
75140: LD_INT 30
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PPUSH
75156: CALL_OW 69
75160: ST_TO_ADDR
// if not tmp then
75161: LD_VAR 0 2
75165: NOT
75166: IFFALSE 75170
// exit ;
75168: GO 75199
// for i in tmp do
75170: LD_ADDR_VAR 0 1
75174: PUSH
75175: LD_VAR 0 2
75179: PUSH
75180: FOR_IN
75181: IFFALSE 75197
// begin SetLives ( i , 0 ) ;
75183: LD_VAR 0 1
75187: PPUSH
75188: LD_INT 0
75190: PPUSH
75191: CALL_OW 234
// end ;
75195: GO 75180
75197: POP
75198: POP
// end ;
75199: PPOPN 2
75201: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75202: LD_EXP 108
75206: PUSH
75207: LD_EXP 118
75211: AND
75212: IFFALSE 75232
75214: GO 75216
75216: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75217: LD_INT 32
75219: PPUSH
75220: LD_OWVAR 2
75224: PPUSH
75225: LD_INT 0
75227: PPUSH
75228: CALL_OW 324
75232: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75233: LD_EXP 108
75237: PUSH
75238: LD_EXP 119
75242: AND
75243: IFFALSE 75424
75245: GO 75247
75247: DISABLE
75248: LD_INT 0
75250: PPUSH
75251: PPUSH
75252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75253: LD_ADDR_VAR 0 2
75257: PUSH
75258: LD_INT 22
75260: PUSH
75261: LD_OWVAR 2
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 33
75272: PUSH
75273: LD_INT 3
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PPUSH
75284: CALL_OW 69
75288: ST_TO_ADDR
// if not tmp then
75289: LD_VAR 0 2
75293: NOT
75294: IFFALSE 75298
// exit ;
75296: GO 75424
// side := 0 ;
75298: LD_ADDR_VAR 0 3
75302: PUSH
75303: LD_INT 0
75305: ST_TO_ADDR
// for i := 1 to 8 do
75306: LD_ADDR_VAR 0 1
75310: PUSH
75311: DOUBLE
75312: LD_INT 1
75314: DEC
75315: ST_TO_ADDR
75316: LD_INT 8
75318: PUSH
75319: FOR_TO
75320: IFFALSE 75368
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75322: LD_OWVAR 2
75326: PUSH
75327: LD_VAR 0 1
75331: NONEQUAL
75332: PUSH
75333: LD_OWVAR 2
75337: PPUSH
75338: LD_VAR 0 1
75342: PPUSH
75343: CALL_OW 81
75347: PUSH
75348: LD_INT 2
75350: EQUAL
75351: AND
75352: IFFALSE 75366
// begin side := i ;
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: LD_VAR 0 1
75363: ST_TO_ADDR
// break ;
75364: GO 75368
// end ;
75366: GO 75319
75368: POP
75369: POP
// if not side then
75370: LD_VAR 0 3
75374: NOT
75375: IFFALSE 75379
// exit ;
75377: GO 75424
// for i := 1 to tmp do
75379: LD_ADDR_VAR 0 1
75383: PUSH
75384: DOUBLE
75385: LD_INT 1
75387: DEC
75388: ST_TO_ADDR
75389: LD_VAR 0 2
75393: PUSH
75394: FOR_TO
75395: IFFALSE 75422
// if Prob ( 60 ) then
75397: LD_INT 60
75399: PPUSH
75400: CALL_OW 13
75404: IFFALSE 75420
// SetSide ( i , side ) ;
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_VAR 0 3
75415: PPUSH
75416: CALL_OW 235
75420: GO 75394
75422: POP
75423: POP
// end ;
75424: PPOPN 3
75426: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75427: LD_EXP 108
75431: PUSH
75432: LD_EXP 121
75436: AND
75437: IFFALSE 75556
75439: GO 75441
75441: DISABLE
75442: LD_INT 0
75444: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75445: LD_ADDR_VAR 0 1
75449: PUSH
75450: LD_INT 22
75452: PUSH
75453: LD_OWVAR 2
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 21
75464: PUSH
75465: LD_INT 1
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 3
75474: PUSH
75475: LD_INT 23
75477: PUSH
75478: LD_INT 0
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: LIST
75493: PPUSH
75494: CALL_OW 69
75498: PUSH
75499: FOR_IN
75500: IFFALSE 75554
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75502: LD_VAR 0 1
75506: PPUSH
75507: CALL_OW 257
75511: PUSH
75512: LD_INT 1
75514: PUSH
75515: LD_INT 2
75517: PUSH
75518: LD_INT 3
75520: PUSH
75521: LD_INT 4
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: IN
75530: IFFALSE 75552
// SetClass ( un , rand ( 1 , 4 ) ) ;
75532: LD_VAR 0 1
75536: PPUSH
75537: LD_INT 1
75539: PPUSH
75540: LD_INT 4
75542: PPUSH
75543: CALL_OW 12
75547: PPUSH
75548: CALL_OW 336
75552: GO 75499
75554: POP
75555: POP
// end ;
75556: PPOPN 1
75558: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75559: LD_EXP 108
75563: PUSH
75564: LD_EXP 120
75568: AND
75569: IFFALSE 75648
75571: GO 75573
75573: DISABLE
75574: LD_INT 0
75576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75577: LD_ADDR_VAR 0 1
75581: PUSH
75582: LD_INT 22
75584: PUSH
75585: LD_OWVAR 2
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: LD_INT 21
75596: PUSH
75597: LD_INT 3
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PPUSH
75608: CALL_OW 69
75612: ST_TO_ADDR
// if not tmp then
75613: LD_VAR 0 1
75617: NOT
75618: IFFALSE 75622
// exit ;
75620: GO 75648
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75622: LD_VAR 0 1
75626: PUSH
75627: LD_INT 1
75629: PPUSH
75630: LD_VAR 0 1
75634: PPUSH
75635: CALL_OW 12
75639: ARRAY
75640: PPUSH
75641: LD_INT 100
75643: PPUSH
75644: CALL_OW 234
// end ;
75648: PPOPN 1
75650: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75651: LD_EXP 108
75655: PUSH
75656: LD_EXP 122
75660: AND
75661: IFFALSE 75759
75663: GO 75665
75665: DISABLE
75666: LD_INT 0
75668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75669: LD_ADDR_VAR 0 1
75673: PUSH
75674: LD_INT 22
75676: PUSH
75677: LD_OWVAR 2
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 21
75688: PUSH
75689: LD_INT 1
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PPUSH
75700: CALL_OW 69
75704: ST_TO_ADDR
// if not tmp then
75705: LD_VAR 0 1
75709: NOT
75710: IFFALSE 75714
// exit ;
75712: GO 75759
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75714: LD_VAR 0 1
75718: PUSH
75719: LD_INT 1
75721: PPUSH
75722: LD_VAR 0 1
75726: PPUSH
75727: CALL_OW 12
75731: ARRAY
75732: PPUSH
75733: LD_INT 1
75735: PPUSH
75736: LD_INT 4
75738: PPUSH
75739: CALL_OW 12
75743: PPUSH
75744: LD_INT 3000
75746: PPUSH
75747: LD_INT 9000
75749: PPUSH
75750: CALL_OW 12
75754: PPUSH
75755: CALL_OW 492
// end ;
75759: PPOPN 1
75761: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75762: LD_EXP 108
75766: PUSH
75767: LD_EXP 123
75771: AND
75772: IFFALSE 75792
75774: GO 75776
75776: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75777: LD_INT 1
75779: PPUSH
75780: LD_OWVAR 2
75784: PPUSH
75785: LD_INT 0
75787: PPUSH
75788: CALL_OW 324
75792: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75793: LD_EXP 108
75797: PUSH
75798: LD_EXP 124
75802: AND
75803: IFFALSE 75886
75805: GO 75807
75807: DISABLE
75808: LD_INT 0
75810: PPUSH
75811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75812: LD_ADDR_VAR 0 2
75816: PUSH
75817: LD_INT 22
75819: PUSH
75820: LD_OWVAR 2
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 21
75831: PUSH
75832: LD_INT 3
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: PPUSH
75843: CALL_OW 69
75847: ST_TO_ADDR
// if not tmp then
75848: LD_VAR 0 2
75852: NOT
75853: IFFALSE 75857
// exit ;
75855: GO 75886
// for i in tmp do
75857: LD_ADDR_VAR 0 1
75861: PUSH
75862: LD_VAR 0 2
75866: PUSH
75867: FOR_IN
75868: IFFALSE 75884
// SetBLevel ( i , 10 ) ;
75870: LD_VAR 0 1
75874: PPUSH
75875: LD_INT 10
75877: PPUSH
75878: CALL_OW 241
75882: GO 75867
75884: POP
75885: POP
// end ;
75886: PPOPN 2
75888: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75889: LD_EXP 108
75893: PUSH
75894: LD_EXP 125
75898: AND
75899: IFFALSE 76010
75901: GO 75903
75903: DISABLE
75904: LD_INT 0
75906: PPUSH
75907: PPUSH
75908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75909: LD_ADDR_VAR 0 3
75913: PUSH
75914: LD_INT 22
75916: PUSH
75917: LD_OWVAR 2
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 25
75928: PUSH
75929: LD_INT 1
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PPUSH
75940: CALL_OW 69
75944: ST_TO_ADDR
// if not tmp then
75945: LD_VAR 0 3
75949: NOT
75950: IFFALSE 75954
// exit ;
75952: GO 76010
// un := tmp [ rand ( 1 , tmp ) ] ;
75954: LD_ADDR_VAR 0 2
75958: PUSH
75959: LD_VAR 0 3
75963: PUSH
75964: LD_INT 1
75966: PPUSH
75967: LD_VAR 0 3
75971: PPUSH
75972: CALL_OW 12
75976: ARRAY
75977: ST_TO_ADDR
// if Crawls ( un ) then
75978: LD_VAR 0 2
75982: PPUSH
75983: CALL_OW 318
75987: IFFALSE 75998
// ComWalk ( un ) ;
75989: LD_VAR 0 2
75993: PPUSH
75994: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75998: LD_VAR 0 2
76002: PPUSH
76003: LD_INT 5
76005: PPUSH
76006: CALL_OW 336
// end ;
76010: PPOPN 3
76012: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
76013: LD_EXP 108
76017: PUSH
76018: LD_EXP 126
76022: AND
76023: PUSH
76024: LD_OWVAR 67
76028: PUSH
76029: LD_INT 3
76031: LESS
76032: AND
76033: IFFALSE 76052
76035: GO 76037
76037: DISABLE
// Difficulty := Difficulty + 1 ;
76038: LD_ADDR_OWVAR 67
76042: PUSH
76043: LD_OWVAR 67
76047: PUSH
76048: LD_INT 1
76050: PLUS
76051: ST_TO_ADDR
76052: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
76053: LD_EXP 108
76057: PUSH
76058: LD_EXP 127
76062: AND
76063: IFFALSE 76166
76065: GO 76067
76067: DISABLE
76068: LD_INT 0
76070: PPUSH
// begin for i := 1 to 5 do
76071: LD_ADDR_VAR 0 1
76075: PUSH
76076: DOUBLE
76077: LD_INT 1
76079: DEC
76080: ST_TO_ADDR
76081: LD_INT 5
76083: PUSH
76084: FOR_TO
76085: IFFALSE 76164
// begin uc_nation := nation_nature ;
76087: LD_ADDR_OWVAR 21
76091: PUSH
76092: LD_INT 0
76094: ST_TO_ADDR
// uc_side := 0 ;
76095: LD_ADDR_OWVAR 20
76099: PUSH
76100: LD_INT 0
76102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76103: LD_ADDR_OWVAR 29
76107: PUSH
76108: LD_INT 12
76110: PUSH
76111: LD_INT 12
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: ST_TO_ADDR
// hc_agressivity := 20 ;
76118: LD_ADDR_OWVAR 35
76122: PUSH
76123: LD_INT 20
76125: ST_TO_ADDR
// hc_class := class_tiger ;
76126: LD_ADDR_OWVAR 28
76130: PUSH
76131: LD_INT 14
76133: ST_TO_ADDR
// hc_gallery :=  ;
76134: LD_ADDR_OWVAR 33
76138: PUSH
76139: LD_STRING 
76141: ST_TO_ADDR
// hc_name :=  ;
76142: LD_ADDR_OWVAR 26
76146: PUSH
76147: LD_STRING 
76149: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76150: CALL_OW 44
76154: PPUSH
76155: LD_INT 0
76157: PPUSH
76158: CALL_OW 51
// end ;
76162: GO 76084
76164: POP
76165: POP
// end ;
76166: PPOPN 1
76168: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76169: LD_EXP 108
76173: PUSH
76174: LD_EXP 128
76178: AND
76179: IFFALSE 76188
76181: GO 76183
76183: DISABLE
// StreamSibBomb ;
76184: CALL 76189 0 0
76188: END
// export function StreamSibBomb ; var i , x , y ; begin
76189: LD_INT 0
76191: PPUSH
76192: PPUSH
76193: PPUSH
76194: PPUSH
// result := false ;
76195: LD_ADDR_VAR 0 1
76199: PUSH
76200: LD_INT 0
76202: ST_TO_ADDR
// for i := 1 to 16 do
76203: LD_ADDR_VAR 0 2
76207: PUSH
76208: DOUBLE
76209: LD_INT 1
76211: DEC
76212: ST_TO_ADDR
76213: LD_INT 16
76215: PUSH
76216: FOR_TO
76217: IFFALSE 76416
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: LD_INT 10
76226: PUSH
76227: LD_INT 20
76229: PUSH
76230: LD_INT 30
76232: PUSH
76233: LD_INT 40
76235: PUSH
76236: LD_INT 50
76238: PUSH
76239: LD_INT 60
76241: PUSH
76242: LD_INT 70
76244: PUSH
76245: LD_INT 80
76247: PUSH
76248: LD_INT 90
76250: PUSH
76251: LD_INT 100
76253: PUSH
76254: LD_INT 110
76256: PUSH
76257: LD_INT 120
76259: PUSH
76260: LD_INT 130
76262: PUSH
76263: LD_INT 140
76265: PUSH
76266: LD_INT 150
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 1
76288: PPUSH
76289: LD_INT 15
76291: PPUSH
76292: CALL_OW 12
76296: ARRAY
76297: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76298: LD_ADDR_VAR 0 4
76302: PUSH
76303: LD_INT 10
76305: PUSH
76306: LD_INT 20
76308: PUSH
76309: LD_INT 30
76311: PUSH
76312: LD_INT 40
76314: PUSH
76315: LD_INT 50
76317: PUSH
76318: LD_INT 60
76320: PUSH
76321: LD_INT 70
76323: PUSH
76324: LD_INT 80
76326: PUSH
76327: LD_INT 90
76329: PUSH
76330: LD_INT 100
76332: PUSH
76333: LD_INT 110
76335: PUSH
76336: LD_INT 120
76338: PUSH
76339: LD_INT 130
76341: PUSH
76342: LD_INT 140
76344: PUSH
76345: LD_INT 150
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: LIST
76355: LIST
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 1
76367: PPUSH
76368: LD_INT 15
76370: PPUSH
76371: CALL_OW 12
76375: ARRAY
76376: ST_TO_ADDR
// if ValidHex ( x , y ) then
76377: LD_VAR 0 3
76381: PPUSH
76382: LD_VAR 0 4
76386: PPUSH
76387: CALL_OW 488
76391: IFFALSE 76414
// begin result := [ x , y ] ;
76393: LD_ADDR_VAR 0 1
76397: PUSH
76398: LD_VAR 0 3
76402: PUSH
76403: LD_VAR 0 4
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: ST_TO_ADDR
// break ;
76412: GO 76416
// end ; end ;
76414: GO 76216
76416: POP
76417: POP
// if result then
76418: LD_VAR 0 1
76422: IFFALSE 76482
// begin ToLua ( playSibBomb() ) ;
76424: LD_STRING playSibBomb()
76426: PPUSH
76427: CALL_OW 559
// wait ( 0 0$14 ) ;
76431: LD_INT 490
76433: PPUSH
76434: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76438: LD_VAR 0 1
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PPUSH
76447: LD_VAR 0 1
76451: PUSH
76452: LD_INT 2
76454: ARRAY
76455: PPUSH
76456: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76460: LD_VAR 0 1
76464: PUSH
76465: LD_INT 1
76467: ARRAY
76468: PPUSH
76469: LD_VAR 0 1
76473: PUSH
76474: LD_INT 2
76476: ARRAY
76477: PPUSH
76478: CALL_OW 429
// end ; end ;
76482: LD_VAR 0 1
76486: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76487: LD_EXP 108
76491: PUSH
76492: LD_EXP 130
76496: AND
76497: IFFALSE 76509
76499: GO 76501
76501: DISABLE
// YouLost (  ) ;
76502: LD_STRING 
76504: PPUSH
76505: CALL_OW 104
76509: END
// every 0 0$1 trigger StreamModeActive and sFog do
76510: LD_EXP 108
76514: PUSH
76515: LD_EXP 129
76519: AND
76520: IFFALSE 76534
76522: GO 76524
76524: DISABLE
// FogOff ( your_side ) ;
76525: LD_OWVAR 2
76529: PPUSH
76530: CALL_OW 344
76534: END
// every 0 0$1 trigger StreamModeActive and sSun do
76535: LD_EXP 108
76539: PUSH
76540: LD_EXP 131
76544: AND
76545: IFFALSE 76573
76547: GO 76549
76549: DISABLE
// begin solar_recharge_percent := 0 ;
76550: LD_ADDR_OWVAR 79
76554: PUSH
76555: LD_INT 0
76557: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76558: LD_INT 10500
76560: PPUSH
76561: CALL_OW 67
// solar_recharge_percent := 100 ;
76565: LD_ADDR_OWVAR 79
76569: PUSH
76570: LD_INT 100
76572: ST_TO_ADDR
// end ;
76573: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76574: LD_EXP 108
76578: PUSH
76579: LD_EXP 132
76583: AND
76584: IFFALSE 76823
76586: GO 76588
76588: DISABLE
76589: LD_INT 0
76591: PPUSH
76592: PPUSH
76593: PPUSH
// begin tmp := [ ] ;
76594: LD_ADDR_VAR 0 3
76598: PUSH
76599: EMPTY
76600: ST_TO_ADDR
// for i := 1 to 6 do
76601: LD_ADDR_VAR 0 1
76605: PUSH
76606: DOUBLE
76607: LD_INT 1
76609: DEC
76610: ST_TO_ADDR
76611: LD_INT 6
76613: PUSH
76614: FOR_TO
76615: IFFALSE 76720
// begin uc_nation := nation_nature ;
76617: LD_ADDR_OWVAR 21
76621: PUSH
76622: LD_INT 0
76624: ST_TO_ADDR
// uc_side := 0 ;
76625: LD_ADDR_OWVAR 20
76629: PUSH
76630: LD_INT 0
76632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76633: LD_ADDR_OWVAR 29
76637: PUSH
76638: LD_INT 12
76640: PUSH
76641: LD_INT 12
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: ST_TO_ADDR
// hc_agressivity := 20 ;
76648: LD_ADDR_OWVAR 35
76652: PUSH
76653: LD_INT 20
76655: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76656: LD_ADDR_OWVAR 28
76660: PUSH
76661: LD_INT 17
76663: ST_TO_ADDR
// hc_gallery :=  ;
76664: LD_ADDR_OWVAR 33
76668: PUSH
76669: LD_STRING 
76671: ST_TO_ADDR
// hc_name :=  ;
76672: LD_ADDR_OWVAR 26
76676: PUSH
76677: LD_STRING 
76679: ST_TO_ADDR
// un := CreateHuman ;
76680: LD_ADDR_VAR 0 2
76684: PUSH
76685: CALL_OW 44
76689: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76690: LD_VAR 0 2
76694: PPUSH
76695: LD_INT 1
76697: PPUSH
76698: CALL_OW 51
// tmp := tmp ^ un ;
76702: LD_ADDR_VAR 0 3
76706: PUSH
76707: LD_VAR 0 3
76711: PUSH
76712: LD_VAR 0 2
76716: ADD
76717: ST_TO_ADDR
// end ;
76718: GO 76614
76720: POP
76721: POP
// repeat wait ( 0 0$1 ) ;
76722: LD_INT 35
76724: PPUSH
76725: CALL_OW 67
// for un in tmp do
76729: LD_ADDR_VAR 0 2
76733: PUSH
76734: LD_VAR 0 3
76738: PUSH
76739: FOR_IN
76740: IFFALSE 76814
// begin if IsDead ( un ) then
76742: LD_VAR 0 2
76746: PPUSH
76747: CALL_OW 301
76751: IFFALSE 76771
// begin tmp := tmp diff un ;
76753: LD_ADDR_VAR 0 3
76757: PUSH
76758: LD_VAR 0 3
76762: PUSH
76763: LD_VAR 0 2
76767: DIFF
76768: ST_TO_ADDR
// continue ;
76769: GO 76739
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76771: LD_VAR 0 2
76775: PPUSH
76776: LD_INT 3
76778: PUSH
76779: LD_INT 22
76781: PUSH
76782: LD_INT 0
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PPUSH
76793: CALL_OW 69
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: CALL_OW 74
76807: PPUSH
76808: CALL_OW 115
// end ;
76812: GO 76739
76814: POP
76815: POP
// until not tmp ;
76816: LD_VAR 0 3
76820: NOT
76821: IFFALSE 76722
// end ;
76823: PPOPN 3
76825: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76826: LD_EXP 108
76830: PUSH
76831: LD_EXP 133
76835: AND
76836: IFFALSE 76890
76838: GO 76840
76840: DISABLE
// begin ToLua ( displayTroll(); ) ;
76841: LD_STRING displayTroll();
76843: PPUSH
76844: CALL_OW 559
// wait ( 3 3$00 ) ;
76848: LD_INT 6300
76850: PPUSH
76851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76855: LD_STRING hideTroll();
76857: PPUSH
76858: CALL_OW 559
// wait ( 1 1$00 ) ;
76862: LD_INT 2100
76864: PPUSH
76865: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76869: LD_STRING displayTroll();
76871: PPUSH
76872: CALL_OW 559
// wait ( 1 1$00 ) ;
76876: LD_INT 2100
76878: PPUSH
76879: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76883: LD_STRING hideTroll();
76885: PPUSH
76886: CALL_OW 559
// end ;
76890: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76891: LD_EXP 108
76895: PUSH
76896: LD_EXP 134
76900: AND
76901: IFFALSE 76964
76903: GO 76905
76905: DISABLE
76906: LD_INT 0
76908: PPUSH
// begin p := 0 ;
76909: LD_ADDR_VAR 0 1
76913: PUSH
76914: LD_INT 0
76916: ST_TO_ADDR
// repeat game_speed := 1 ;
76917: LD_ADDR_OWVAR 65
76921: PUSH
76922: LD_INT 1
76924: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76925: LD_INT 35
76927: PPUSH
76928: CALL_OW 67
// p := p + 1 ;
76932: LD_ADDR_VAR 0 1
76936: PUSH
76937: LD_VAR 0 1
76941: PUSH
76942: LD_INT 1
76944: PLUS
76945: ST_TO_ADDR
// until p >= 60 ;
76946: LD_VAR 0 1
76950: PUSH
76951: LD_INT 60
76953: GREATEREQUAL
76954: IFFALSE 76917
// game_speed := 4 ;
76956: LD_ADDR_OWVAR 65
76960: PUSH
76961: LD_INT 4
76963: ST_TO_ADDR
// end ;
76964: PPOPN 1
76966: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76967: LD_EXP 108
76971: PUSH
76972: LD_EXP 135
76976: AND
76977: IFFALSE 77123
76979: GO 76981
76981: DISABLE
76982: LD_INT 0
76984: PPUSH
76985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76986: LD_ADDR_VAR 0 1
76990: PUSH
76991: LD_INT 22
76993: PUSH
76994: LD_OWVAR 2
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 2
77005: PUSH
77006: LD_INT 30
77008: PUSH
77009: LD_INT 0
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 30
77018: PUSH
77019: LD_INT 1
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: LIST
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PPUSH
77035: CALL_OW 69
77039: ST_TO_ADDR
// if not depot then
77040: LD_VAR 0 1
77044: NOT
77045: IFFALSE 77049
// exit ;
77047: GO 77123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
77049: LD_ADDR_VAR 0 2
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 1
77061: PPUSH
77062: LD_VAR 0 1
77066: PPUSH
77067: CALL_OW 12
77071: ARRAY
77072: PPUSH
77073: CALL_OW 274
77077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
77078: LD_VAR 0 2
77082: PPUSH
77083: LD_INT 1
77085: PPUSH
77086: LD_INT 0
77088: PPUSH
77089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
77093: LD_VAR 0 2
77097: PPUSH
77098: LD_INT 2
77100: PPUSH
77101: LD_INT 0
77103: PPUSH
77104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77108: LD_VAR 0 2
77112: PPUSH
77113: LD_INT 3
77115: PPUSH
77116: LD_INT 0
77118: PPUSH
77119: CALL_OW 277
// end ;
77123: PPOPN 2
77125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77126: LD_EXP 108
77130: PUSH
77131: LD_EXP 136
77135: AND
77136: IFFALSE 77233
77138: GO 77140
77140: DISABLE
77141: LD_INT 0
77143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77144: LD_ADDR_VAR 0 1
77148: PUSH
77149: LD_INT 22
77151: PUSH
77152: LD_OWVAR 2
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 21
77163: PUSH
77164: LD_INT 1
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 3
77173: PUSH
77174: LD_INT 23
77176: PUSH
77177: LD_INT 0
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: PPUSH
77193: CALL_OW 69
77197: ST_TO_ADDR
// if not tmp then
77198: LD_VAR 0 1
77202: NOT
77203: IFFALSE 77207
// exit ;
77205: GO 77233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77207: LD_VAR 0 1
77211: PUSH
77212: LD_INT 1
77214: PPUSH
77215: LD_VAR 0 1
77219: PPUSH
77220: CALL_OW 12
77224: ARRAY
77225: PPUSH
77226: LD_INT 200
77228: PPUSH
77229: CALL_OW 234
// end ;
77233: PPOPN 1
77235: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77236: LD_EXP 108
77240: PUSH
77241: LD_EXP 137
77245: AND
77246: IFFALSE 77325
77248: GO 77250
77250: DISABLE
77251: LD_INT 0
77253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77254: LD_ADDR_VAR 0 1
77258: PUSH
77259: LD_INT 22
77261: PUSH
77262: LD_OWVAR 2
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 21
77273: PUSH
77274: LD_INT 2
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PPUSH
77285: CALL_OW 69
77289: ST_TO_ADDR
// if not tmp then
77290: LD_VAR 0 1
77294: NOT
77295: IFFALSE 77299
// exit ;
77297: GO 77325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77299: LD_VAR 0 1
77303: PUSH
77304: LD_INT 1
77306: PPUSH
77307: LD_VAR 0 1
77311: PPUSH
77312: CALL_OW 12
77316: ARRAY
77317: PPUSH
77318: LD_INT 60
77320: PPUSH
77321: CALL_OW 234
// end ;
77325: PPOPN 1
77327: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77328: LD_EXP 108
77332: PUSH
77333: LD_EXP 138
77337: AND
77338: IFFALSE 77437
77340: GO 77342
77342: DISABLE
77343: LD_INT 0
77345: PPUSH
77346: PPUSH
// begin enable ;
77347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77348: LD_ADDR_VAR 0 1
77352: PUSH
77353: LD_INT 22
77355: PUSH
77356: LD_OWVAR 2
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: LD_INT 61
77367: PUSH
77368: EMPTY
77369: LIST
77370: PUSH
77371: LD_INT 33
77373: PUSH
77374: LD_INT 2
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: LIST
77385: PPUSH
77386: CALL_OW 69
77390: ST_TO_ADDR
// if not tmp then
77391: LD_VAR 0 1
77395: NOT
77396: IFFALSE 77400
// exit ;
77398: GO 77437
// for i in tmp do
77400: LD_ADDR_VAR 0 2
77404: PUSH
77405: LD_VAR 0 1
77409: PUSH
77410: FOR_IN
77411: IFFALSE 77435
// if IsControledBy ( i ) then
77413: LD_VAR 0 2
77417: PPUSH
77418: CALL_OW 312
77422: IFFALSE 77433
// ComUnlink ( i ) ;
77424: LD_VAR 0 2
77428: PPUSH
77429: CALL_OW 136
77433: GO 77410
77435: POP
77436: POP
// end ;
77437: PPOPN 2
77439: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77440: LD_EXP 108
77444: PUSH
77445: LD_EXP 139
77449: AND
77450: IFFALSE 77590
77452: GO 77454
77454: DISABLE
77455: LD_INT 0
77457: PPUSH
77458: PPUSH
// begin ToLua ( displayPowell(); ) ;
77459: LD_STRING displayPowell();
77461: PPUSH
77462: CALL_OW 559
// uc_side := 0 ;
77466: LD_ADDR_OWVAR 20
77470: PUSH
77471: LD_INT 0
77473: ST_TO_ADDR
// uc_nation := 2 ;
77474: LD_ADDR_OWVAR 21
77478: PUSH
77479: LD_INT 2
77481: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77482: LD_ADDR_OWVAR 37
77486: PUSH
77487: LD_INT 14
77489: ST_TO_ADDR
// vc_engine := engine_siberite ;
77490: LD_ADDR_OWVAR 39
77494: PUSH
77495: LD_INT 3
77497: ST_TO_ADDR
// vc_control := control_apeman ;
77498: LD_ADDR_OWVAR 38
77502: PUSH
77503: LD_INT 5
77505: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77506: LD_ADDR_OWVAR 40
77510: PUSH
77511: LD_INT 29
77513: ST_TO_ADDR
// un := CreateVehicle ;
77514: LD_ADDR_VAR 0 2
77518: PUSH
77519: CALL_OW 45
77523: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77524: LD_VAR 0 2
77528: PPUSH
77529: LD_INT 1
77531: PPUSH
77532: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77536: LD_INT 35
77538: PPUSH
77539: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77543: LD_VAR 0 2
77547: PPUSH
77548: LD_INT 22
77550: PUSH
77551: LD_OWVAR 2
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: PPUSH
77560: CALL_OW 69
77564: PPUSH
77565: LD_VAR 0 2
77569: PPUSH
77570: CALL_OW 74
77574: PPUSH
77575: CALL_OW 115
// until IsDead ( un ) ;
77579: LD_VAR 0 2
77583: PPUSH
77584: CALL_OW 301
77588: IFFALSE 77536
// end ;
77590: PPOPN 2
77592: END
// every 0 0$1 trigger StreamModeActive and sStu do
77593: LD_EXP 108
77597: PUSH
77598: LD_EXP 147
77602: AND
77603: IFFALSE 77619
77605: GO 77607
77607: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77608: LD_STRING displayStucuk();
77610: PPUSH
77611: CALL_OW 559
// ResetFog ;
77615: CALL_OW 335
// end ;
77619: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77620: LD_EXP 108
77624: PUSH
77625: LD_EXP 140
77629: AND
77630: IFFALSE 77771
77632: GO 77634
77634: DISABLE
77635: LD_INT 0
77637: PPUSH
77638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77639: LD_ADDR_VAR 0 2
77643: PUSH
77644: LD_INT 22
77646: PUSH
77647: LD_OWVAR 2
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PUSH
77656: LD_INT 21
77658: PUSH
77659: LD_INT 1
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PPUSH
77670: CALL_OW 69
77674: ST_TO_ADDR
// if not tmp then
77675: LD_VAR 0 2
77679: NOT
77680: IFFALSE 77684
// exit ;
77682: GO 77771
// un := tmp [ rand ( 1 , tmp ) ] ;
77684: LD_ADDR_VAR 0 1
77688: PUSH
77689: LD_VAR 0 2
77693: PUSH
77694: LD_INT 1
77696: PPUSH
77697: LD_VAR 0 2
77701: PPUSH
77702: CALL_OW 12
77706: ARRAY
77707: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77708: LD_VAR 0 1
77712: PPUSH
77713: LD_INT 0
77715: PPUSH
77716: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77720: LD_VAR 0 1
77724: PPUSH
77725: LD_OWVAR 3
77729: PUSH
77730: LD_VAR 0 1
77734: DIFF
77735: PPUSH
77736: LD_VAR 0 1
77740: PPUSH
77741: CALL_OW 74
77745: PPUSH
77746: CALL_OW 115
// wait ( 0 0$20 ) ;
77750: LD_INT 700
77752: PPUSH
77753: CALL_OW 67
// SetSide ( un , your_side ) ;
77757: LD_VAR 0 1
77761: PPUSH
77762: LD_OWVAR 2
77766: PPUSH
77767: CALL_OW 235
// end ;
77771: PPOPN 2
77773: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77774: LD_EXP 108
77778: PUSH
77779: LD_EXP 141
77783: AND
77784: IFFALSE 77890
77786: GO 77788
77788: DISABLE
77789: LD_INT 0
77791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77792: LD_ADDR_VAR 0 1
77796: PUSH
77797: LD_INT 22
77799: PUSH
77800: LD_OWVAR 2
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: LD_INT 2
77811: PUSH
77812: LD_INT 30
77814: PUSH
77815: LD_INT 0
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: PUSH
77822: LD_INT 30
77824: PUSH
77825: LD_INT 1
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: LIST
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PPUSH
77841: CALL_OW 69
77845: ST_TO_ADDR
// if not depot then
77846: LD_VAR 0 1
77850: NOT
77851: IFFALSE 77855
// exit ;
77853: GO 77890
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77855: LD_VAR 0 1
77859: PUSH
77860: LD_INT 1
77862: ARRAY
77863: PPUSH
77864: CALL_OW 250
77868: PPUSH
77869: LD_VAR 0 1
77873: PUSH
77874: LD_INT 1
77876: ARRAY
77877: PPUSH
77878: CALL_OW 251
77882: PPUSH
77883: LD_INT 70
77885: PPUSH
77886: CALL_OW 495
// end ;
77890: PPOPN 1
77892: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77893: LD_EXP 108
77897: PUSH
77898: LD_EXP 142
77902: AND
77903: IFFALSE 78114
77905: GO 77907
77907: DISABLE
77908: LD_INT 0
77910: PPUSH
77911: PPUSH
77912: PPUSH
77913: PPUSH
77914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77915: LD_ADDR_VAR 0 5
77919: PUSH
77920: LD_INT 22
77922: PUSH
77923: LD_OWVAR 2
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: PUSH
77932: LD_INT 21
77934: PUSH
77935: LD_INT 1
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PPUSH
77946: CALL_OW 69
77950: ST_TO_ADDR
// if not tmp then
77951: LD_VAR 0 5
77955: NOT
77956: IFFALSE 77960
// exit ;
77958: GO 78114
// for i in tmp do
77960: LD_ADDR_VAR 0 1
77964: PUSH
77965: LD_VAR 0 5
77969: PUSH
77970: FOR_IN
77971: IFFALSE 78112
// begin d := rand ( 0 , 5 ) ;
77973: LD_ADDR_VAR 0 4
77977: PUSH
77978: LD_INT 0
77980: PPUSH
77981: LD_INT 5
77983: PPUSH
77984: CALL_OW 12
77988: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77989: LD_ADDR_VAR 0 2
77993: PUSH
77994: LD_VAR 0 1
77998: PPUSH
77999: CALL_OW 250
78003: PPUSH
78004: LD_VAR 0 4
78008: PPUSH
78009: LD_INT 3
78011: PPUSH
78012: LD_INT 12
78014: PPUSH
78015: CALL_OW 12
78019: PPUSH
78020: CALL_OW 272
78024: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
78025: LD_ADDR_VAR 0 3
78029: PUSH
78030: LD_VAR 0 1
78034: PPUSH
78035: CALL_OW 251
78039: PPUSH
78040: LD_VAR 0 4
78044: PPUSH
78045: LD_INT 3
78047: PPUSH
78048: LD_INT 12
78050: PPUSH
78051: CALL_OW 12
78055: PPUSH
78056: CALL_OW 273
78060: ST_TO_ADDR
// if ValidHex ( x , y ) then
78061: LD_VAR 0 2
78065: PPUSH
78066: LD_VAR 0 3
78070: PPUSH
78071: CALL_OW 488
78075: IFFALSE 78110
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
78077: LD_VAR 0 1
78081: PPUSH
78082: LD_VAR 0 2
78086: PPUSH
78087: LD_VAR 0 3
78091: PPUSH
78092: LD_INT 3
78094: PPUSH
78095: LD_INT 6
78097: PPUSH
78098: CALL_OW 12
78102: PPUSH
78103: LD_INT 1
78105: PPUSH
78106: CALL_OW 483
// end ;
78110: GO 77970
78112: POP
78113: POP
// end ;
78114: PPOPN 5
78116: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78117: LD_EXP 108
78121: PUSH
78122: LD_EXP 143
78126: AND
78127: IFFALSE 78221
78129: GO 78131
78131: DISABLE
78132: LD_INT 0
78134: PPUSH
78135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78136: LD_ADDR_VAR 0 2
78140: PUSH
78141: LD_INT 22
78143: PUSH
78144: LD_OWVAR 2
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 32
78155: PUSH
78156: LD_INT 1
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 21
78165: PUSH
78166: LD_INT 2
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: LIST
78177: PPUSH
78178: CALL_OW 69
78182: ST_TO_ADDR
// if not tmp then
78183: LD_VAR 0 2
78187: NOT
78188: IFFALSE 78192
// exit ;
78190: GO 78221
// for i in tmp do
78192: LD_ADDR_VAR 0 1
78196: PUSH
78197: LD_VAR 0 2
78201: PUSH
78202: FOR_IN
78203: IFFALSE 78219
// SetFuel ( i , 0 ) ;
78205: LD_VAR 0 1
78209: PPUSH
78210: LD_INT 0
78212: PPUSH
78213: CALL_OW 240
78217: GO 78202
78219: POP
78220: POP
// end ;
78221: PPOPN 2
78223: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78224: LD_EXP 108
78228: PUSH
78229: LD_EXP 144
78233: AND
78234: IFFALSE 78300
78236: GO 78238
78238: DISABLE
78239: LD_INT 0
78241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78242: LD_ADDR_VAR 0 1
78246: PUSH
78247: LD_INT 22
78249: PUSH
78250: LD_OWVAR 2
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 30
78261: PUSH
78262: LD_INT 29
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: PPUSH
78273: CALL_OW 69
78277: ST_TO_ADDR
// if not tmp then
78278: LD_VAR 0 1
78282: NOT
78283: IFFALSE 78287
// exit ;
78285: GO 78300
// DestroyUnit ( tmp [ 1 ] ) ;
78287: LD_VAR 0 1
78291: PUSH
78292: LD_INT 1
78294: ARRAY
78295: PPUSH
78296: CALL_OW 65
// end ;
78300: PPOPN 1
78302: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78303: LD_EXP 108
78307: PUSH
78308: LD_EXP 146
78312: AND
78313: IFFALSE 78442
78315: GO 78317
78317: DISABLE
78318: LD_INT 0
78320: PPUSH
// begin uc_side := 0 ;
78321: LD_ADDR_OWVAR 20
78325: PUSH
78326: LD_INT 0
78328: ST_TO_ADDR
// uc_nation := nation_arabian ;
78329: LD_ADDR_OWVAR 21
78333: PUSH
78334: LD_INT 2
78336: ST_TO_ADDR
// hc_gallery :=  ;
78337: LD_ADDR_OWVAR 33
78341: PUSH
78342: LD_STRING 
78344: ST_TO_ADDR
// hc_name :=  ;
78345: LD_ADDR_OWVAR 26
78349: PUSH
78350: LD_STRING 
78352: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78353: LD_INT 1
78355: PPUSH
78356: LD_INT 11
78358: PPUSH
78359: LD_INT 10
78361: PPUSH
78362: CALL_OW 380
// un := CreateHuman ;
78366: LD_ADDR_VAR 0 1
78370: PUSH
78371: CALL_OW 44
78375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78376: LD_VAR 0 1
78380: PPUSH
78381: LD_INT 1
78383: PPUSH
78384: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78388: LD_INT 35
78390: PPUSH
78391: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78395: LD_VAR 0 1
78399: PPUSH
78400: LD_INT 22
78402: PUSH
78403: LD_OWVAR 2
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PPUSH
78412: CALL_OW 69
78416: PPUSH
78417: LD_VAR 0 1
78421: PPUSH
78422: CALL_OW 74
78426: PPUSH
78427: CALL_OW 115
// until IsDead ( un ) ;
78431: LD_VAR 0 1
78435: PPUSH
78436: CALL_OW 301
78440: IFFALSE 78388
// end ;
78442: PPOPN 1
78444: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78445: LD_EXP 108
78449: PUSH
78450: LD_EXP 148
78454: AND
78455: IFFALSE 78467
78457: GO 78459
78459: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78460: LD_STRING earthquake(getX(game), 0, 32)
78462: PPUSH
78463: CALL_OW 559
78467: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78468: LD_EXP 108
78472: PUSH
78473: LD_EXP 149
78477: AND
78478: IFFALSE 78569
78480: GO 78482
78482: DISABLE
78483: LD_INT 0
78485: PPUSH
// begin enable ;
78486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78487: LD_ADDR_VAR 0 1
78491: PUSH
78492: LD_INT 22
78494: PUSH
78495: LD_OWVAR 2
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 21
78506: PUSH
78507: LD_INT 2
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 33
78516: PUSH
78517: LD_INT 3
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: LIST
78528: PPUSH
78529: CALL_OW 69
78533: ST_TO_ADDR
// if not tmp then
78534: LD_VAR 0 1
78538: NOT
78539: IFFALSE 78543
// exit ;
78541: GO 78569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78543: LD_VAR 0 1
78547: PUSH
78548: LD_INT 1
78550: PPUSH
78551: LD_VAR 0 1
78555: PPUSH
78556: CALL_OW 12
78560: ARRAY
78561: PPUSH
78562: LD_INT 1
78564: PPUSH
78565: CALL_OW 234
// end ;
78569: PPOPN 1
78571: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78572: LD_EXP 108
78576: PUSH
78577: LD_EXP 150
78581: AND
78582: IFFALSE 78723
78584: GO 78586
78586: DISABLE
78587: LD_INT 0
78589: PPUSH
78590: PPUSH
78591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78592: LD_ADDR_VAR 0 3
78596: PUSH
78597: LD_INT 22
78599: PUSH
78600: LD_OWVAR 2
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PUSH
78609: LD_INT 25
78611: PUSH
78612: LD_INT 1
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PPUSH
78623: CALL_OW 69
78627: ST_TO_ADDR
// if not tmp then
78628: LD_VAR 0 3
78632: NOT
78633: IFFALSE 78637
// exit ;
78635: GO 78723
// un := tmp [ rand ( 1 , tmp ) ] ;
78637: LD_ADDR_VAR 0 2
78641: PUSH
78642: LD_VAR 0 3
78646: PUSH
78647: LD_INT 1
78649: PPUSH
78650: LD_VAR 0 3
78654: PPUSH
78655: CALL_OW 12
78659: ARRAY
78660: ST_TO_ADDR
// if Crawls ( un ) then
78661: LD_VAR 0 2
78665: PPUSH
78666: CALL_OW 318
78670: IFFALSE 78681
// ComWalk ( un ) ;
78672: LD_VAR 0 2
78676: PPUSH
78677: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78681: LD_VAR 0 2
78685: PPUSH
78686: LD_INT 9
78688: PPUSH
78689: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78693: LD_INT 28
78695: PPUSH
78696: LD_OWVAR 2
78700: PPUSH
78701: LD_INT 2
78703: PPUSH
78704: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78708: LD_INT 29
78710: PPUSH
78711: LD_OWVAR 2
78715: PPUSH
78716: LD_INT 2
78718: PPUSH
78719: CALL_OW 322
// end ;
78723: PPOPN 3
78725: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78726: LD_EXP 108
78730: PUSH
78731: LD_EXP 151
78735: AND
78736: IFFALSE 78847
78738: GO 78740
78740: DISABLE
78741: LD_INT 0
78743: PPUSH
78744: PPUSH
78745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78746: LD_ADDR_VAR 0 3
78750: PUSH
78751: LD_INT 22
78753: PUSH
78754: LD_OWVAR 2
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 25
78765: PUSH
78766: LD_INT 1
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PPUSH
78777: CALL_OW 69
78781: ST_TO_ADDR
// if not tmp then
78782: LD_VAR 0 3
78786: NOT
78787: IFFALSE 78791
// exit ;
78789: GO 78847
// un := tmp [ rand ( 1 , tmp ) ] ;
78791: LD_ADDR_VAR 0 2
78795: PUSH
78796: LD_VAR 0 3
78800: PUSH
78801: LD_INT 1
78803: PPUSH
78804: LD_VAR 0 3
78808: PPUSH
78809: CALL_OW 12
78813: ARRAY
78814: ST_TO_ADDR
// if Crawls ( un ) then
78815: LD_VAR 0 2
78819: PPUSH
78820: CALL_OW 318
78824: IFFALSE 78835
// ComWalk ( un ) ;
78826: LD_VAR 0 2
78830: PPUSH
78831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78835: LD_VAR 0 2
78839: PPUSH
78840: LD_INT 8
78842: PPUSH
78843: CALL_OW 336
// end ;
78847: PPOPN 3
78849: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78850: LD_EXP 108
78854: PUSH
78855: LD_EXP 152
78859: AND
78860: IFFALSE 79004
78862: GO 78864
78864: DISABLE
78865: LD_INT 0
78867: PPUSH
78868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78869: LD_ADDR_VAR 0 2
78873: PUSH
78874: LD_INT 22
78876: PUSH
78877: LD_OWVAR 2
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 21
78888: PUSH
78889: LD_INT 2
78891: PUSH
78892: EMPTY
78893: LIST
78894: LIST
78895: PUSH
78896: LD_INT 2
78898: PUSH
78899: LD_INT 34
78901: PUSH
78902: LD_INT 12
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: PUSH
78909: LD_INT 34
78911: PUSH
78912: LD_INT 51
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: PUSH
78919: LD_INT 34
78921: PUSH
78922: LD_INT 32
78924: PUSH
78925: EMPTY
78926: LIST
78927: LIST
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: LIST
78933: LIST
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: LIST
78939: PPUSH
78940: CALL_OW 69
78944: ST_TO_ADDR
// if not tmp then
78945: LD_VAR 0 2
78949: NOT
78950: IFFALSE 78954
// exit ;
78952: GO 79004
// for i in tmp do
78954: LD_ADDR_VAR 0 1
78958: PUSH
78959: LD_VAR 0 2
78963: PUSH
78964: FOR_IN
78965: IFFALSE 79002
// if GetCargo ( i , mat_artifact ) = 0 then
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_INT 4
78974: PPUSH
78975: CALL_OW 289
78979: PUSH
78980: LD_INT 0
78982: EQUAL
78983: IFFALSE 79000
// SetCargo ( i , mat_siberit , 100 ) ;
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_INT 3
78992: PPUSH
78993: LD_INT 100
78995: PPUSH
78996: CALL_OW 290
79000: GO 78964
79002: POP
79003: POP
// end ;
79004: PPOPN 2
79006: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
79007: LD_EXP 108
79011: PUSH
79012: LD_EXP 153
79016: AND
79017: IFFALSE 79200
79019: GO 79021
79021: DISABLE
79022: LD_INT 0
79024: PPUSH
79025: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79026: LD_ADDR_VAR 0 2
79030: PUSH
79031: LD_INT 22
79033: PUSH
79034: LD_OWVAR 2
79038: PUSH
79039: EMPTY
79040: LIST
79041: LIST
79042: PPUSH
79043: CALL_OW 69
79047: ST_TO_ADDR
// if not tmp then
79048: LD_VAR 0 2
79052: NOT
79053: IFFALSE 79057
// exit ;
79055: GO 79200
// for i := 1 to 2 do
79057: LD_ADDR_VAR 0 1
79061: PUSH
79062: DOUBLE
79063: LD_INT 1
79065: DEC
79066: ST_TO_ADDR
79067: LD_INT 2
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79198
// begin uc_side := your_side ;
79073: LD_ADDR_OWVAR 20
79077: PUSH
79078: LD_OWVAR 2
79082: ST_TO_ADDR
// uc_nation := nation_american ;
79083: LD_ADDR_OWVAR 21
79087: PUSH
79088: LD_INT 1
79090: ST_TO_ADDR
// vc_chassis := us_morphling ;
79091: LD_ADDR_OWVAR 37
79095: PUSH
79096: LD_INT 5
79098: ST_TO_ADDR
// vc_engine := engine_siberite ;
79099: LD_ADDR_OWVAR 39
79103: PUSH
79104: LD_INT 3
79106: ST_TO_ADDR
// vc_control := control_computer ;
79107: LD_ADDR_OWVAR 38
79111: PUSH
79112: LD_INT 3
79114: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79115: LD_ADDR_OWVAR 40
79119: PUSH
79120: LD_INT 10
79122: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79123: LD_VAR 0 2
79127: PUSH
79128: LD_INT 1
79130: ARRAY
79131: PPUSH
79132: CALL_OW 310
79136: NOT
79137: IFFALSE 79184
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79139: CALL_OW 45
79143: PPUSH
79144: LD_VAR 0 2
79148: PUSH
79149: LD_INT 1
79151: ARRAY
79152: PPUSH
79153: CALL_OW 250
79157: PPUSH
79158: LD_VAR 0 2
79162: PUSH
79163: LD_INT 1
79165: ARRAY
79166: PPUSH
79167: CALL_OW 251
79171: PPUSH
79172: LD_INT 12
79174: PPUSH
79175: LD_INT 1
79177: PPUSH
79178: CALL_OW 50
79182: GO 79196
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79184: CALL_OW 45
79188: PPUSH
79189: LD_INT 1
79191: PPUSH
79192: CALL_OW 51
// end ;
79196: GO 79070
79198: POP
79199: POP
// end ;
79200: PPOPN 2
79202: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79203: LD_EXP 108
79207: PUSH
79208: LD_EXP 154
79212: AND
79213: IFFALSE 79435
79215: GO 79217
79217: DISABLE
79218: LD_INT 0
79220: PPUSH
79221: PPUSH
79222: PPUSH
79223: PPUSH
79224: PPUSH
79225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79226: LD_ADDR_VAR 0 6
79230: PUSH
79231: LD_INT 22
79233: PUSH
79234: LD_OWVAR 2
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: PUSH
79243: LD_INT 21
79245: PUSH
79246: LD_INT 1
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 3
79255: PUSH
79256: LD_INT 23
79258: PUSH
79259: LD_INT 0
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: LIST
79274: PPUSH
79275: CALL_OW 69
79279: ST_TO_ADDR
// if not tmp then
79280: LD_VAR 0 6
79284: NOT
79285: IFFALSE 79289
// exit ;
79287: GO 79435
// s1 := rand ( 1 , 4 ) ;
79289: LD_ADDR_VAR 0 2
79293: PUSH
79294: LD_INT 1
79296: PPUSH
79297: LD_INT 4
79299: PPUSH
79300: CALL_OW 12
79304: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79305: LD_ADDR_VAR 0 4
79309: PUSH
79310: LD_VAR 0 6
79314: PUSH
79315: LD_INT 1
79317: ARRAY
79318: PPUSH
79319: LD_VAR 0 2
79323: PPUSH
79324: CALL_OW 259
79328: ST_TO_ADDR
// if s1 = 1 then
79329: LD_VAR 0 2
79333: PUSH
79334: LD_INT 1
79336: EQUAL
79337: IFFALSE 79357
// s2 := rand ( 2 , 4 ) else
79339: LD_ADDR_VAR 0 3
79343: PUSH
79344: LD_INT 2
79346: PPUSH
79347: LD_INT 4
79349: PPUSH
79350: CALL_OW 12
79354: ST_TO_ADDR
79355: GO 79365
// s2 := 1 ;
79357: LD_ADDR_VAR 0 3
79361: PUSH
79362: LD_INT 1
79364: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79365: LD_ADDR_VAR 0 5
79369: PUSH
79370: LD_VAR 0 6
79374: PUSH
79375: LD_INT 1
79377: ARRAY
79378: PPUSH
79379: LD_VAR 0 3
79383: PPUSH
79384: CALL_OW 259
79388: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79389: LD_VAR 0 6
79393: PUSH
79394: LD_INT 1
79396: ARRAY
79397: PPUSH
79398: LD_VAR 0 2
79402: PPUSH
79403: LD_VAR 0 5
79407: PPUSH
79408: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79412: LD_VAR 0 6
79416: PUSH
79417: LD_INT 1
79419: ARRAY
79420: PPUSH
79421: LD_VAR 0 3
79425: PPUSH
79426: LD_VAR 0 4
79430: PPUSH
79431: CALL_OW 237
// end ;
79435: PPOPN 6
79437: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79438: LD_EXP 108
79442: PUSH
79443: LD_EXP 155
79447: AND
79448: IFFALSE 79527
79450: GO 79452
79452: DISABLE
79453: LD_INT 0
79455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79456: LD_ADDR_VAR 0 1
79460: PUSH
79461: LD_INT 22
79463: PUSH
79464: LD_OWVAR 2
79468: PUSH
79469: EMPTY
79470: LIST
79471: LIST
79472: PUSH
79473: LD_INT 30
79475: PUSH
79476: LD_INT 3
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PPUSH
79487: CALL_OW 69
79491: ST_TO_ADDR
// if not tmp then
79492: LD_VAR 0 1
79496: NOT
79497: IFFALSE 79501
// exit ;
79499: GO 79527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79501: LD_VAR 0 1
79505: PUSH
79506: LD_INT 1
79508: PPUSH
79509: LD_VAR 0 1
79513: PPUSH
79514: CALL_OW 12
79518: ARRAY
79519: PPUSH
79520: LD_INT 1
79522: PPUSH
79523: CALL_OW 234
// end ;
79527: PPOPN 1
79529: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79530: LD_EXP 108
79534: PUSH
79535: LD_EXP 156
79539: AND
79540: IFFALSE 79652
79542: GO 79544
79544: DISABLE
79545: LD_INT 0
79547: PPUSH
79548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79549: LD_ADDR_VAR 0 2
79553: PUSH
79554: LD_INT 22
79556: PUSH
79557: LD_OWVAR 2
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PUSH
79566: LD_INT 2
79568: PUSH
79569: LD_INT 30
79571: PUSH
79572: LD_INT 27
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: LD_INT 30
79581: PUSH
79582: LD_INT 26
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: PUSH
79589: LD_INT 30
79591: PUSH
79592: LD_INT 28
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PUSH
79599: EMPTY
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PPUSH
79609: CALL_OW 69
79613: ST_TO_ADDR
// if not tmp then
79614: LD_VAR 0 2
79618: NOT
79619: IFFALSE 79623
// exit ;
79621: GO 79652
// for i in tmp do
79623: LD_ADDR_VAR 0 1
79627: PUSH
79628: LD_VAR 0 2
79632: PUSH
79633: FOR_IN
79634: IFFALSE 79650
// SetLives ( i , 1 ) ;
79636: LD_VAR 0 1
79640: PPUSH
79641: LD_INT 1
79643: PPUSH
79644: CALL_OW 234
79648: GO 79633
79650: POP
79651: POP
// end ;
79652: PPOPN 2
79654: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79655: LD_EXP 108
79659: PUSH
79660: LD_EXP 157
79664: AND
79665: IFFALSE 79939
79667: GO 79669
79669: DISABLE
79670: LD_INT 0
79672: PPUSH
79673: PPUSH
79674: PPUSH
// begin i := rand ( 1 , 7 ) ;
79675: LD_ADDR_VAR 0 1
79679: PUSH
79680: LD_INT 1
79682: PPUSH
79683: LD_INT 7
79685: PPUSH
79686: CALL_OW 12
79690: ST_TO_ADDR
// case i of 1 :
79691: LD_VAR 0 1
79695: PUSH
79696: LD_INT 1
79698: DOUBLE
79699: EQUAL
79700: IFTRUE 79704
79702: GO 79714
79704: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79705: LD_STRING earthquake(getX(game), 0, 32)
79707: PPUSH
79708: CALL_OW 559
79712: GO 79939
79714: LD_INT 2
79716: DOUBLE
79717: EQUAL
79718: IFTRUE 79722
79720: GO 79736
79722: POP
// begin ToLua ( displayStucuk(); ) ;
79723: LD_STRING displayStucuk();
79725: PPUSH
79726: CALL_OW 559
// ResetFog ;
79730: CALL_OW 335
// end ; 3 :
79734: GO 79939
79736: LD_INT 3
79738: DOUBLE
79739: EQUAL
79740: IFTRUE 79744
79742: GO 79848
79744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79745: LD_ADDR_VAR 0 2
79749: PUSH
79750: LD_INT 22
79752: PUSH
79753: LD_OWVAR 2
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 25
79764: PUSH
79765: LD_INT 1
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: PPUSH
79776: CALL_OW 69
79780: ST_TO_ADDR
// if not tmp then
79781: LD_VAR 0 2
79785: NOT
79786: IFFALSE 79790
// exit ;
79788: GO 79939
// un := tmp [ rand ( 1 , tmp ) ] ;
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: LD_VAR 0 2
79799: PUSH
79800: LD_INT 1
79802: PPUSH
79803: LD_VAR 0 2
79807: PPUSH
79808: CALL_OW 12
79812: ARRAY
79813: ST_TO_ADDR
// if Crawls ( un ) then
79814: LD_VAR 0 3
79818: PPUSH
79819: CALL_OW 318
79823: IFFALSE 79834
// ComWalk ( un ) ;
79825: LD_VAR 0 3
79829: PPUSH
79830: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79834: LD_VAR 0 3
79838: PPUSH
79839: LD_INT 8
79841: PPUSH
79842: CALL_OW 336
// end ; 4 :
79846: GO 79939
79848: LD_INT 4
79850: DOUBLE
79851: EQUAL
79852: IFTRUE 79856
79854: GO 79917
79856: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79857: LD_ADDR_VAR 0 2
79861: PUSH
79862: LD_INT 22
79864: PUSH
79865: LD_OWVAR 2
79869: PUSH
79870: EMPTY
79871: LIST
79872: LIST
79873: PUSH
79874: LD_INT 30
79876: PUSH
79877: LD_INT 29
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: PPUSH
79888: CALL_OW 69
79892: ST_TO_ADDR
// if not tmp then
79893: LD_VAR 0 2
79897: NOT
79898: IFFALSE 79902
// exit ;
79900: GO 79939
// DestroyUnit ( tmp [ 1 ] ) ;
79902: LD_VAR 0 2
79906: PUSH
79907: LD_INT 1
79909: ARRAY
79910: PPUSH
79911: CALL_OW 65
// end ; 5 .. 7 :
79915: GO 79939
79917: LD_INT 5
79919: DOUBLE
79920: GREATEREQUAL
79921: IFFALSE 79929
79923: LD_INT 7
79925: DOUBLE
79926: LESSEQUAL
79927: IFTRUE 79931
79929: GO 79938
79931: POP
// StreamSibBomb ; end ;
79932: CALL 76189 0 0
79936: GO 79939
79938: POP
// end ;
79939: PPOPN 3
79941: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79942: LD_EXP 108
79946: PUSH
79947: LD_EXP 158
79951: AND
79952: IFFALSE 80108
79954: GO 79956
79956: DISABLE
79957: LD_INT 0
79959: PPUSH
79960: PPUSH
79961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79962: LD_ADDR_VAR 0 2
79966: PUSH
79967: LD_INT 81
79969: PUSH
79970: LD_OWVAR 2
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: PUSH
79979: LD_INT 2
79981: PUSH
79982: LD_INT 21
79984: PUSH
79985: LD_INT 1
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PUSH
79992: LD_INT 21
79994: PUSH
79995: LD_INT 2
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: LIST
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PPUSH
80011: CALL_OW 69
80015: ST_TO_ADDR
// if not tmp then
80016: LD_VAR 0 2
80020: NOT
80021: IFFALSE 80025
// exit ;
80023: GO 80108
// p := 0 ;
80025: LD_ADDR_VAR 0 3
80029: PUSH
80030: LD_INT 0
80032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80033: LD_INT 35
80035: PPUSH
80036: CALL_OW 67
// p := p + 1 ;
80040: LD_ADDR_VAR 0 3
80044: PUSH
80045: LD_VAR 0 3
80049: PUSH
80050: LD_INT 1
80052: PLUS
80053: ST_TO_ADDR
// for i in tmp do
80054: LD_ADDR_VAR 0 1
80058: PUSH
80059: LD_VAR 0 2
80063: PUSH
80064: FOR_IN
80065: IFFALSE 80096
// if GetLives ( i ) < 1000 then
80067: LD_VAR 0 1
80071: PPUSH
80072: CALL_OW 256
80076: PUSH
80077: LD_INT 1000
80079: LESS
80080: IFFALSE 80094
// SetLives ( i , 1000 ) ;
80082: LD_VAR 0 1
80086: PPUSH
80087: LD_INT 1000
80089: PPUSH
80090: CALL_OW 234
80094: GO 80064
80096: POP
80097: POP
// until p > 20 ;
80098: LD_VAR 0 3
80102: PUSH
80103: LD_INT 20
80105: GREATER
80106: IFFALSE 80033
// end ;
80108: PPOPN 3
80110: END
// every 0 0$1 trigger StreamModeActive and sTime do
80111: LD_EXP 108
80115: PUSH
80116: LD_EXP 159
80120: AND
80121: IFFALSE 80156
80123: GO 80125
80125: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80126: LD_INT 28
80128: PPUSH
80129: LD_OWVAR 2
80133: PPUSH
80134: LD_INT 2
80136: PPUSH
80137: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80141: LD_INT 30
80143: PPUSH
80144: LD_OWVAR 2
80148: PPUSH
80149: LD_INT 2
80151: PPUSH
80152: CALL_OW 322
// end ;
80156: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80157: LD_EXP 108
80161: PUSH
80162: LD_EXP 160
80166: AND
80167: IFFALSE 80288
80169: GO 80171
80171: DISABLE
80172: LD_INT 0
80174: PPUSH
80175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80176: LD_ADDR_VAR 0 2
80180: PUSH
80181: LD_INT 22
80183: PUSH
80184: LD_OWVAR 2
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 21
80195: PUSH
80196: LD_INT 1
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 3
80205: PUSH
80206: LD_INT 23
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: EMPTY
80213: LIST
80214: LIST
80215: PUSH
80216: EMPTY
80217: LIST
80218: LIST
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: LIST
80224: PPUSH
80225: CALL_OW 69
80229: ST_TO_ADDR
// if not tmp then
80230: LD_VAR 0 2
80234: NOT
80235: IFFALSE 80239
// exit ;
80237: GO 80288
// for i in tmp do
80239: LD_ADDR_VAR 0 1
80243: PUSH
80244: LD_VAR 0 2
80248: PUSH
80249: FOR_IN
80250: IFFALSE 80286
// begin if Crawls ( i ) then
80252: LD_VAR 0 1
80256: PPUSH
80257: CALL_OW 318
80261: IFFALSE 80272
// ComWalk ( i ) ;
80263: LD_VAR 0 1
80267: PPUSH
80268: CALL_OW 138
// SetClass ( i , 2 ) ;
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_INT 2
80279: PPUSH
80280: CALL_OW 336
// end ;
80284: GO 80249
80286: POP
80287: POP
// end ;
80288: PPOPN 2
80290: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80291: LD_EXP 108
80295: PUSH
80296: LD_EXP 161
80300: AND
80301: IFFALSE 80582
80303: GO 80305
80305: DISABLE
80306: LD_INT 0
80308: PPUSH
80309: PPUSH
80310: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80311: LD_OWVAR 2
80315: PPUSH
80316: LD_INT 9
80318: PPUSH
80319: LD_INT 1
80321: PPUSH
80322: LD_INT 1
80324: PPUSH
80325: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80329: LD_INT 9
80331: PPUSH
80332: LD_OWVAR 2
80336: PPUSH
80337: CALL_OW 343
// uc_side := 9 ;
80341: LD_ADDR_OWVAR 20
80345: PUSH
80346: LD_INT 9
80348: ST_TO_ADDR
// uc_nation := 2 ;
80349: LD_ADDR_OWVAR 21
80353: PUSH
80354: LD_INT 2
80356: ST_TO_ADDR
// hc_name := Dark Warrior ;
80357: LD_ADDR_OWVAR 26
80361: PUSH
80362: LD_STRING Dark Warrior
80364: ST_TO_ADDR
// hc_gallery :=  ;
80365: LD_ADDR_OWVAR 33
80369: PUSH
80370: LD_STRING 
80372: ST_TO_ADDR
// hc_noskilllimit := true ;
80373: LD_ADDR_OWVAR 76
80377: PUSH
80378: LD_INT 1
80380: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80381: LD_ADDR_OWVAR 31
80385: PUSH
80386: LD_INT 30
80388: PUSH
80389: LD_INT 30
80391: PUSH
80392: LD_INT 30
80394: PUSH
80395: LD_INT 30
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: ST_TO_ADDR
// un := CreateHuman ;
80404: LD_ADDR_VAR 0 3
80408: PUSH
80409: CALL_OW 44
80413: ST_TO_ADDR
// hc_noskilllimit := false ;
80414: LD_ADDR_OWVAR 76
80418: PUSH
80419: LD_INT 0
80421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80422: LD_VAR 0 3
80426: PPUSH
80427: LD_INT 1
80429: PPUSH
80430: CALL_OW 51
// p := 0 ;
80434: LD_ADDR_VAR 0 2
80438: PUSH
80439: LD_INT 0
80441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80442: LD_INT 35
80444: PPUSH
80445: CALL_OW 67
// p := p + 1 ;
80449: LD_ADDR_VAR 0 2
80453: PUSH
80454: LD_VAR 0 2
80458: PUSH
80459: LD_INT 1
80461: PLUS
80462: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80463: LD_VAR 0 3
80467: PPUSH
80468: CALL_OW 256
80472: PUSH
80473: LD_INT 1000
80475: LESS
80476: IFFALSE 80490
// SetLives ( un , 1000 ) ;
80478: LD_VAR 0 3
80482: PPUSH
80483: LD_INT 1000
80485: PPUSH
80486: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80490: LD_VAR 0 3
80494: PPUSH
80495: LD_INT 81
80497: PUSH
80498: LD_OWVAR 2
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: LD_INT 91
80509: PUSH
80510: LD_VAR 0 3
80514: PUSH
80515: LD_INT 30
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: LIST
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: PPUSH
80527: CALL_OW 69
80531: PPUSH
80532: LD_VAR 0 3
80536: PPUSH
80537: CALL_OW 74
80541: PPUSH
80542: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
80546: LD_VAR 0 2
80550: PUSH
80551: LD_INT 60
80553: GREATER
80554: PUSH
80555: LD_VAR 0 3
80559: PPUSH
80560: CALL_OW 301
80564: OR
80565: IFFALSE 80442
// if un then
80567: LD_VAR 0 3
80571: IFFALSE 80582
// RemoveUnit ( un ) ;
80573: LD_VAR 0 3
80577: PPUSH
80578: CALL_OW 64
// end ;
80582: PPOPN 3
80584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80585: LD_INT 0
80587: PPUSH
// case cmd of 301 :
80588: LD_VAR 0 1
80592: PUSH
80593: LD_INT 301
80595: DOUBLE
80596: EQUAL
80597: IFTRUE 80601
80599: GO 80633
80601: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80602: LD_VAR 0 6
80606: PPUSH
80607: LD_VAR 0 7
80611: PPUSH
80612: LD_VAR 0 8
80616: PPUSH
80617: LD_VAR 0 4
80621: PPUSH
80622: LD_VAR 0 5
80626: PPUSH
80627: CALL 81834 0 5
80631: GO 80754
80633: LD_INT 302
80635: DOUBLE
80636: EQUAL
80637: IFTRUE 80641
80639: GO 80678
80641: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80642: LD_VAR 0 6
80646: PPUSH
80647: LD_VAR 0 7
80651: PPUSH
80652: LD_VAR 0 8
80656: PPUSH
80657: LD_VAR 0 9
80661: PPUSH
80662: LD_VAR 0 4
80666: PPUSH
80667: LD_VAR 0 5
80671: PPUSH
80672: CALL 81925 0 6
80676: GO 80754
80678: LD_INT 303
80680: DOUBLE
80681: EQUAL
80682: IFTRUE 80686
80684: GO 80723
80686: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80687: LD_VAR 0 6
80691: PPUSH
80692: LD_VAR 0 7
80696: PPUSH
80697: LD_VAR 0 8
80701: PPUSH
80702: LD_VAR 0 9
80706: PPUSH
80707: LD_VAR 0 4
80711: PPUSH
80712: LD_VAR 0 5
80716: PPUSH
80717: CALL 80759 0 6
80721: GO 80754
80723: LD_INT 304
80725: DOUBLE
80726: EQUAL
80727: IFTRUE 80731
80729: GO 80753
80731: POP
// hHackTeleport ( unit , x , y ) ; end ;
80732: LD_VAR 0 2
80736: PPUSH
80737: LD_VAR 0 4
80741: PPUSH
80742: LD_VAR 0 5
80746: PPUSH
80747: CALL 82518 0 3
80751: GO 80754
80753: POP
// end ;
80754: LD_VAR 0 12
80758: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80759: LD_INT 0
80761: PPUSH
80762: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80763: LD_VAR 0 1
80767: PUSH
80768: LD_INT 1
80770: LESS
80771: PUSH
80772: LD_VAR 0 1
80776: PUSH
80777: LD_INT 3
80779: GREATER
80780: OR
80781: PUSH
80782: LD_VAR 0 5
80786: PPUSH
80787: LD_VAR 0 6
80791: PPUSH
80792: CALL_OW 428
80796: OR
80797: IFFALSE 80801
// exit ;
80799: GO 81521
// uc_side := your_side ;
80801: LD_ADDR_OWVAR 20
80805: PUSH
80806: LD_OWVAR 2
80810: ST_TO_ADDR
// uc_nation := nation ;
80811: LD_ADDR_OWVAR 21
80815: PUSH
80816: LD_VAR 0 1
80820: ST_TO_ADDR
// bc_level = 1 ;
80821: LD_ADDR_OWVAR 43
80825: PUSH
80826: LD_INT 1
80828: ST_TO_ADDR
// case btype of 1 :
80829: LD_VAR 0 2
80833: PUSH
80834: LD_INT 1
80836: DOUBLE
80837: EQUAL
80838: IFTRUE 80842
80840: GO 80853
80842: POP
// bc_type := b_depot ; 2 :
80843: LD_ADDR_OWVAR 42
80847: PUSH
80848: LD_INT 0
80850: ST_TO_ADDR
80851: GO 81465
80853: LD_INT 2
80855: DOUBLE
80856: EQUAL
80857: IFTRUE 80861
80859: GO 80872
80861: POP
// bc_type := b_warehouse ; 3 :
80862: LD_ADDR_OWVAR 42
80866: PUSH
80867: LD_INT 1
80869: ST_TO_ADDR
80870: GO 81465
80872: LD_INT 3
80874: DOUBLE
80875: EQUAL
80876: IFTRUE 80880
80878: GO 80891
80880: POP
// bc_type := b_lab ; 4 .. 9 :
80881: LD_ADDR_OWVAR 42
80885: PUSH
80886: LD_INT 6
80888: ST_TO_ADDR
80889: GO 81465
80891: LD_INT 4
80893: DOUBLE
80894: GREATEREQUAL
80895: IFFALSE 80903
80897: LD_INT 9
80899: DOUBLE
80900: LESSEQUAL
80901: IFTRUE 80905
80903: GO 80957
80905: POP
// begin bc_type := b_lab_half ;
80906: LD_ADDR_OWVAR 42
80910: PUSH
80911: LD_INT 7
80913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80914: LD_ADDR_OWVAR 44
80918: PUSH
80919: LD_INT 10
80921: PUSH
80922: LD_INT 11
80924: PUSH
80925: LD_INT 12
80927: PUSH
80928: LD_INT 15
80930: PUSH
80931: LD_INT 14
80933: PUSH
80934: LD_INT 13
80936: PUSH
80937: EMPTY
80938: LIST
80939: LIST
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: PUSH
80945: LD_VAR 0 2
80949: PUSH
80950: LD_INT 3
80952: MINUS
80953: ARRAY
80954: ST_TO_ADDR
// end ; 10 .. 13 :
80955: GO 81465
80957: LD_INT 10
80959: DOUBLE
80960: GREATEREQUAL
80961: IFFALSE 80969
80963: LD_INT 13
80965: DOUBLE
80966: LESSEQUAL
80967: IFTRUE 80971
80969: GO 81048
80971: POP
// begin bc_type := b_lab_full ;
80972: LD_ADDR_OWVAR 42
80976: PUSH
80977: LD_INT 8
80979: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80980: LD_ADDR_OWVAR 44
80984: PUSH
80985: LD_INT 10
80987: PUSH
80988: LD_INT 12
80990: PUSH
80991: LD_INT 14
80993: PUSH
80994: LD_INT 13
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: LIST
81001: LIST
81002: PUSH
81003: LD_VAR 0 2
81007: PUSH
81008: LD_INT 9
81010: MINUS
81011: ARRAY
81012: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81013: LD_ADDR_OWVAR 45
81017: PUSH
81018: LD_INT 11
81020: PUSH
81021: LD_INT 15
81023: PUSH
81024: LD_INT 12
81026: PUSH
81027: LD_INT 15
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: LIST
81034: LIST
81035: PUSH
81036: LD_VAR 0 2
81040: PUSH
81041: LD_INT 9
81043: MINUS
81044: ARRAY
81045: ST_TO_ADDR
// end ; 14 :
81046: GO 81465
81048: LD_INT 14
81050: DOUBLE
81051: EQUAL
81052: IFTRUE 81056
81054: GO 81067
81056: POP
// bc_type := b_workshop ; 15 :
81057: LD_ADDR_OWVAR 42
81061: PUSH
81062: LD_INT 2
81064: ST_TO_ADDR
81065: GO 81465
81067: LD_INT 15
81069: DOUBLE
81070: EQUAL
81071: IFTRUE 81075
81073: GO 81086
81075: POP
// bc_type := b_factory ; 16 :
81076: LD_ADDR_OWVAR 42
81080: PUSH
81081: LD_INT 3
81083: ST_TO_ADDR
81084: GO 81465
81086: LD_INT 16
81088: DOUBLE
81089: EQUAL
81090: IFTRUE 81094
81092: GO 81105
81094: POP
// bc_type := b_ext_gun ; 17 :
81095: LD_ADDR_OWVAR 42
81099: PUSH
81100: LD_INT 17
81102: ST_TO_ADDR
81103: GO 81465
81105: LD_INT 17
81107: DOUBLE
81108: EQUAL
81109: IFTRUE 81113
81111: GO 81141
81113: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81114: LD_ADDR_OWVAR 42
81118: PUSH
81119: LD_INT 19
81121: PUSH
81122: LD_INT 23
81124: PUSH
81125: LD_INT 19
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: LIST
81132: PUSH
81133: LD_VAR 0 1
81137: ARRAY
81138: ST_TO_ADDR
81139: GO 81465
81141: LD_INT 18
81143: DOUBLE
81144: EQUAL
81145: IFTRUE 81149
81147: GO 81160
81149: POP
// bc_type := b_ext_radar ; 19 :
81150: LD_ADDR_OWVAR 42
81154: PUSH
81155: LD_INT 20
81157: ST_TO_ADDR
81158: GO 81465
81160: LD_INT 19
81162: DOUBLE
81163: EQUAL
81164: IFTRUE 81168
81166: GO 81179
81168: POP
// bc_type := b_ext_radio ; 20 :
81169: LD_ADDR_OWVAR 42
81173: PUSH
81174: LD_INT 22
81176: ST_TO_ADDR
81177: GO 81465
81179: LD_INT 20
81181: DOUBLE
81182: EQUAL
81183: IFTRUE 81187
81185: GO 81198
81187: POP
// bc_type := b_ext_siberium ; 21 :
81188: LD_ADDR_OWVAR 42
81192: PUSH
81193: LD_INT 21
81195: ST_TO_ADDR
81196: GO 81465
81198: LD_INT 21
81200: DOUBLE
81201: EQUAL
81202: IFTRUE 81206
81204: GO 81217
81206: POP
// bc_type := b_ext_computer ; 22 :
81207: LD_ADDR_OWVAR 42
81211: PUSH
81212: LD_INT 24
81214: ST_TO_ADDR
81215: GO 81465
81217: LD_INT 22
81219: DOUBLE
81220: EQUAL
81221: IFTRUE 81225
81223: GO 81236
81225: POP
// bc_type := b_ext_track ; 23 :
81226: LD_ADDR_OWVAR 42
81230: PUSH
81231: LD_INT 16
81233: ST_TO_ADDR
81234: GO 81465
81236: LD_INT 23
81238: DOUBLE
81239: EQUAL
81240: IFTRUE 81244
81242: GO 81255
81244: POP
// bc_type := b_ext_laser ; 24 :
81245: LD_ADDR_OWVAR 42
81249: PUSH
81250: LD_INT 25
81252: ST_TO_ADDR
81253: GO 81465
81255: LD_INT 24
81257: DOUBLE
81258: EQUAL
81259: IFTRUE 81263
81261: GO 81274
81263: POP
// bc_type := b_control_tower ; 25 :
81264: LD_ADDR_OWVAR 42
81268: PUSH
81269: LD_INT 36
81271: ST_TO_ADDR
81272: GO 81465
81274: LD_INT 25
81276: DOUBLE
81277: EQUAL
81278: IFTRUE 81282
81280: GO 81293
81282: POP
// bc_type := b_breastwork ; 26 :
81283: LD_ADDR_OWVAR 42
81287: PUSH
81288: LD_INT 31
81290: ST_TO_ADDR
81291: GO 81465
81293: LD_INT 26
81295: DOUBLE
81296: EQUAL
81297: IFTRUE 81301
81299: GO 81312
81301: POP
// bc_type := b_bunker ; 27 :
81302: LD_ADDR_OWVAR 42
81306: PUSH
81307: LD_INT 32
81309: ST_TO_ADDR
81310: GO 81465
81312: LD_INT 27
81314: DOUBLE
81315: EQUAL
81316: IFTRUE 81320
81318: GO 81331
81320: POP
// bc_type := b_turret ; 28 :
81321: LD_ADDR_OWVAR 42
81325: PUSH
81326: LD_INT 33
81328: ST_TO_ADDR
81329: GO 81465
81331: LD_INT 28
81333: DOUBLE
81334: EQUAL
81335: IFTRUE 81339
81337: GO 81350
81339: POP
// bc_type := b_armoury ; 29 :
81340: LD_ADDR_OWVAR 42
81344: PUSH
81345: LD_INT 4
81347: ST_TO_ADDR
81348: GO 81465
81350: LD_INT 29
81352: DOUBLE
81353: EQUAL
81354: IFTRUE 81358
81356: GO 81369
81358: POP
// bc_type := b_barracks ; 30 :
81359: LD_ADDR_OWVAR 42
81363: PUSH
81364: LD_INT 5
81366: ST_TO_ADDR
81367: GO 81465
81369: LD_INT 30
81371: DOUBLE
81372: EQUAL
81373: IFTRUE 81377
81375: GO 81388
81377: POP
// bc_type := b_solar_power ; 31 :
81378: LD_ADDR_OWVAR 42
81382: PUSH
81383: LD_INT 27
81385: ST_TO_ADDR
81386: GO 81465
81388: LD_INT 31
81390: DOUBLE
81391: EQUAL
81392: IFTRUE 81396
81394: GO 81407
81396: POP
// bc_type := b_oil_power ; 32 :
81397: LD_ADDR_OWVAR 42
81401: PUSH
81402: LD_INT 26
81404: ST_TO_ADDR
81405: GO 81465
81407: LD_INT 32
81409: DOUBLE
81410: EQUAL
81411: IFTRUE 81415
81413: GO 81426
81415: POP
// bc_type := b_siberite_power ; 33 :
81416: LD_ADDR_OWVAR 42
81420: PUSH
81421: LD_INT 28
81423: ST_TO_ADDR
81424: GO 81465
81426: LD_INT 33
81428: DOUBLE
81429: EQUAL
81430: IFTRUE 81434
81432: GO 81445
81434: POP
// bc_type := b_oil_mine ; 34 :
81435: LD_ADDR_OWVAR 42
81439: PUSH
81440: LD_INT 29
81442: ST_TO_ADDR
81443: GO 81465
81445: LD_INT 34
81447: DOUBLE
81448: EQUAL
81449: IFTRUE 81453
81451: GO 81464
81453: POP
// bc_type := b_siberite_mine ; end ;
81454: LD_ADDR_OWVAR 42
81458: PUSH
81459: LD_INT 30
81461: ST_TO_ADDR
81462: GO 81465
81464: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81465: LD_ADDR_VAR 0 8
81469: PUSH
81470: LD_VAR 0 5
81474: PPUSH
81475: LD_VAR 0 6
81479: PPUSH
81480: LD_VAR 0 3
81484: PPUSH
81485: CALL_OW 47
81489: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81490: LD_OWVAR 42
81494: PUSH
81495: LD_INT 32
81497: PUSH
81498: LD_INT 33
81500: PUSH
81501: EMPTY
81502: LIST
81503: LIST
81504: IN
81505: IFFALSE 81521
// PlaceWeaponTurret ( b , weapon ) ;
81507: LD_VAR 0 8
81511: PPUSH
81512: LD_VAR 0 4
81516: PPUSH
81517: CALL_OW 431
// end ;
81521: LD_VAR 0 7
81525: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81526: LD_INT 0
81528: PPUSH
81529: PPUSH
81530: PPUSH
81531: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81532: LD_ADDR_VAR 0 4
81536: PUSH
81537: LD_INT 22
81539: PUSH
81540: LD_OWVAR 2
81544: PUSH
81545: EMPTY
81546: LIST
81547: LIST
81548: PUSH
81549: LD_INT 2
81551: PUSH
81552: LD_INT 30
81554: PUSH
81555: LD_INT 0
81557: PUSH
81558: EMPTY
81559: LIST
81560: LIST
81561: PUSH
81562: LD_INT 30
81564: PUSH
81565: LD_INT 1
81567: PUSH
81568: EMPTY
81569: LIST
81570: LIST
81571: PUSH
81572: EMPTY
81573: LIST
81574: LIST
81575: LIST
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: PPUSH
81581: CALL_OW 69
81585: ST_TO_ADDR
// if not tmp then
81586: LD_VAR 0 4
81590: NOT
81591: IFFALSE 81595
// exit ;
81593: GO 81654
// for i in tmp do
81595: LD_ADDR_VAR 0 2
81599: PUSH
81600: LD_VAR 0 4
81604: PUSH
81605: FOR_IN
81606: IFFALSE 81652
// for j = 1 to 3 do
81608: LD_ADDR_VAR 0 3
81612: PUSH
81613: DOUBLE
81614: LD_INT 1
81616: DEC
81617: ST_TO_ADDR
81618: LD_INT 3
81620: PUSH
81621: FOR_TO
81622: IFFALSE 81648
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81624: LD_VAR 0 2
81628: PPUSH
81629: CALL_OW 274
81633: PPUSH
81634: LD_VAR 0 3
81638: PPUSH
81639: LD_INT 99999
81641: PPUSH
81642: CALL_OW 277
81646: GO 81621
81648: POP
81649: POP
81650: GO 81605
81652: POP
81653: POP
// end ;
81654: LD_VAR 0 1
81658: RET
// export function hHackSetLevel10 ; var i , j ; begin
81659: LD_INT 0
81661: PPUSH
81662: PPUSH
81663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81664: LD_ADDR_VAR 0 2
81668: PUSH
81669: LD_INT 21
81671: PUSH
81672: LD_INT 1
81674: PUSH
81675: EMPTY
81676: LIST
81677: LIST
81678: PPUSH
81679: CALL_OW 69
81683: PUSH
81684: FOR_IN
81685: IFFALSE 81737
// if IsSelected ( i ) then
81687: LD_VAR 0 2
81691: PPUSH
81692: CALL_OW 306
81696: IFFALSE 81735
// begin for j := 1 to 4 do
81698: LD_ADDR_VAR 0 3
81702: PUSH
81703: DOUBLE
81704: LD_INT 1
81706: DEC
81707: ST_TO_ADDR
81708: LD_INT 4
81710: PUSH
81711: FOR_TO
81712: IFFALSE 81733
// SetSkill ( i , j , 10 ) ;
81714: LD_VAR 0 2
81718: PPUSH
81719: LD_VAR 0 3
81723: PPUSH
81724: LD_INT 10
81726: PPUSH
81727: CALL_OW 237
81731: GO 81711
81733: POP
81734: POP
// end ;
81735: GO 81684
81737: POP
81738: POP
// end ;
81739: LD_VAR 0 1
81743: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81744: LD_INT 0
81746: PPUSH
81747: PPUSH
81748: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81749: LD_ADDR_VAR 0 2
81753: PUSH
81754: LD_INT 22
81756: PUSH
81757: LD_OWVAR 2
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: PUSH
81766: LD_INT 21
81768: PUSH
81769: LD_INT 1
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PPUSH
81780: CALL_OW 69
81784: PUSH
81785: FOR_IN
81786: IFFALSE 81827
// begin for j := 1 to 4 do
81788: LD_ADDR_VAR 0 3
81792: PUSH
81793: DOUBLE
81794: LD_INT 1
81796: DEC
81797: ST_TO_ADDR
81798: LD_INT 4
81800: PUSH
81801: FOR_TO
81802: IFFALSE 81823
// SetSkill ( i , j , 10 ) ;
81804: LD_VAR 0 2
81808: PPUSH
81809: LD_VAR 0 3
81813: PPUSH
81814: LD_INT 10
81816: PPUSH
81817: CALL_OW 237
81821: GO 81801
81823: POP
81824: POP
// end ;
81825: GO 81785
81827: POP
81828: POP
// end ;
81829: LD_VAR 0 1
81833: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81834: LD_INT 0
81836: PPUSH
// uc_side := your_side ;
81837: LD_ADDR_OWVAR 20
81841: PUSH
81842: LD_OWVAR 2
81846: ST_TO_ADDR
// uc_nation := nation ;
81847: LD_ADDR_OWVAR 21
81851: PUSH
81852: LD_VAR 0 1
81856: ST_TO_ADDR
// InitHc ;
81857: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81861: LD_INT 0
81863: PPUSH
81864: LD_VAR 0 2
81868: PPUSH
81869: LD_VAR 0 3
81873: PPUSH
81874: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81878: LD_VAR 0 4
81882: PPUSH
81883: LD_VAR 0 5
81887: PPUSH
81888: CALL_OW 428
81892: PUSH
81893: LD_INT 0
81895: EQUAL
81896: IFFALSE 81920
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81898: CALL_OW 44
81902: PPUSH
81903: LD_VAR 0 4
81907: PPUSH
81908: LD_VAR 0 5
81912: PPUSH
81913: LD_INT 1
81915: PPUSH
81916: CALL_OW 48
// end ;
81920: LD_VAR 0 6
81924: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81925: LD_INT 0
81927: PPUSH
81928: PPUSH
// uc_side := your_side ;
81929: LD_ADDR_OWVAR 20
81933: PUSH
81934: LD_OWVAR 2
81938: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81939: LD_VAR 0 1
81943: PUSH
81944: LD_INT 1
81946: PUSH
81947: LD_INT 2
81949: PUSH
81950: LD_INT 3
81952: PUSH
81953: LD_INT 4
81955: PUSH
81956: LD_INT 5
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: LIST
81963: LIST
81964: LIST
81965: IN
81966: IFFALSE 81978
// uc_nation := nation_american else
81968: LD_ADDR_OWVAR 21
81972: PUSH
81973: LD_INT 1
81975: ST_TO_ADDR
81976: GO 82021
// if chassis in [ 11 , 12 , 13 , 14 ] then
81978: LD_VAR 0 1
81982: PUSH
81983: LD_INT 11
81985: PUSH
81986: LD_INT 12
81988: PUSH
81989: LD_INT 13
81991: PUSH
81992: LD_INT 14
81994: PUSH
81995: EMPTY
81996: LIST
81997: LIST
81998: LIST
81999: LIST
82000: IN
82001: IFFALSE 82013
// uc_nation := nation_arabian else
82003: LD_ADDR_OWVAR 21
82007: PUSH
82008: LD_INT 2
82010: ST_TO_ADDR
82011: GO 82021
// uc_nation := nation_russian ;
82013: LD_ADDR_OWVAR 21
82017: PUSH
82018: LD_INT 3
82020: ST_TO_ADDR
// vc_chassis := chassis ;
82021: LD_ADDR_OWVAR 37
82025: PUSH
82026: LD_VAR 0 1
82030: ST_TO_ADDR
// vc_engine := engine ;
82031: LD_ADDR_OWVAR 39
82035: PUSH
82036: LD_VAR 0 2
82040: ST_TO_ADDR
// vc_control := control ;
82041: LD_ADDR_OWVAR 38
82045: PUSH
82046: LD_VAR 0 3
82050: ST_TO_ADDR
// vc_weapon := weapon ;
82051: LD_ADDR_OWVAR 40
82055: PUSH
82056: LD_VAR 0 4
82060: ST_TO_ADDR
// un := CreateVehicle ;
82061: LD_ADDR_VAR 0 8
82065: PUSH
82066: CALL_OW 45
82070: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82071: LD_VAR 0 8
82075: PPUSH
82076: LD_INT 0
82078: PPUSH
82079: LD_INT 5
82081: PPUSH
82082: CALL_OW 12
82086: PPUSH
82087: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82091: LD_VAR 0 8
82095: PPUSH
82096: LD_VAR 0 5
82100: PPUSH
82101: LD_VAR 0 6
82105: PPUSH
82106: LD_INT 1
82108: PPUSH
82109: CALL_OW 48
// end ;
82113: LD_VAR 0 7
82117: RET
// export hInvincible ; every 1 do
82118: GO 82120
82120: DISABLE
// hInvincible := [ ] ;
82121: LD_ADDR_EXP 162
82125: PUSH
82126: EMPTY
82127: ST_TO_ADDR
82128: END
// every 10 do var i ;
82129: GO 82131
82131: DISABLE
82132: LD_INT 0
82134: PPUSH
// begin enable ;
82135: ENABLE
// if not hInvincible then
82136: LD_EXP 162
82140: NOT
82141: IFFALSE 82145
// exit ;
82143: GO 82189
// for i in hInvincible do
82145: LD_ADDR_VAR 0 1
82149: PUSH
82150: LD_EXP 162
82154: PUSH
82155: FOR_IN
82156: IFFALSE 82187
// if GetLives ( i ) < 1000 then
82158: LD_VAR 0 1
82162: PPUSH
82163: CALL_OW 256
82167: PUSH
82168: LD_INT 1000
82170: LESS
82171: IFFALSE 82185
// SetLives ( i , 1000 ) ;
82173: LD_VAR 0 1
82177: PPUSH
82178: LD_INT 1000
82180: PPUSH
82181: CALL_OW 234
82185: GO 82155
82187: POP
82188: POP
// end ;
82189: PPOPN 1
82191: END
// export function hHackInvincible ; var i ; begin
82192: LD_INT 0
82194: PPUSH
82195: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82196: LD_ADDR_VAR 0 2
82200: PUSH
82201: LD_INT 2
82203: PUSH
82204: LD_INT 21
82206: PUSH
82207: LD_INT 1
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: PUSH
82214: LD_INT 21
82216: PUSH
82217: LD_INT 2
82219: PUSH
82220: EMPTY
82221: LIST
82222: LIST
82223: PUSH
82224: EMPTY
82225: LIST
82226: LIST
82227: LIST
82228: PPUSH
82229: CALL_OW 69
82233: PUSH
82234: FOR_IN
82235: IFFALSE 82296
// if IsSelected ( i ) then
82237: LD_VAR 0 2
82241: PPUSH
82242: CALL_OW 306
82246: IFFALSE 82294
// begin if i in hInvincible then
82248: LD_VAR 0 2
82252: PUSH
82253: LD_EXP 162
82257: IN
82258: IFFALSE 82278
// hInvincible := hInvincible diff i else
82260: LD_ADDR_EXP 162
82264: PUSH
82265: LD_EXP 162
82269: PUSH
82270: LD_VAR 0 2
82274: DIFF
82275: ST_TO_ADDR
82276: GO 82294
// hInvincible := hInvincible union i ;
82278: LD_ADDR_EXP 162
82282: PUSH
82283: LD_EXP 162
82287: PUSH
82288: LD_VAR 0 2
82292: UNION
82293: ST_TO_ADDR
// end ;
82294: GO 82234
82296: POP
82297: POP
// end ;
82298: LD_VAR 0 1
82302: RET
// export function hHackInvisible ; var i , j ; begin
82303: LD_INT 0
82305: PPUSH
82306: PPUSH
82307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82308: LD_ADDR_VAR 0 2
82312: PUSH
82313: LD_INT 21
82315: PUSH
82316: LD_INT 1
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: PPUSH
82323: CALL_OW 69
82327: PUSH
82328: FOR_IN
82329: IFFALSE 82353
// if IsSelected ( i ) then
82331: LD_VAR 0 2
82335: PPUSH
82336: CALL_OW 306
82340: IFFALSE 82351
// ComForceInvisible ( i ) ;
82342: LD_VAR 0 2
82346: PPUSH
82347: CALL_OW 496
82351: GO 82328
82353: POP
82354: POP
// end ;
82355: LD_VAR 0 1
82359: RET
// export function hHackChangeYourSide ; begin
82360: LD_INT 0
82362: PPUSH
// if your_side = 8 then
82363: LD_OWVAR 2
82367: PUSH
82368: LD_INT 8
82370: EQUAL
82371: IFFALSE 82383
// your_side := 0 else
82373: LD_ADDR_OWVAR 2
82377: PUSH
82378: LD_INT 0
82380: ST_TO_ADDR
82381: GO 82397
// your_side := your_side + 1 ;
82383: LD_ADDR_OWVAR 2
82387: PUSH
82388: LD_OWVAR 2
82392: PUSH
82393: LD_INT 1
82395: PLUS
82396: ST_TO_ADDR
// end ;
82397: LD_VAR 0 1
82401: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82402: LD_INT 0
82404: PPUSH
82405: PPUSH
82406: PPUSH
// for i in all_units do
82407: LD_ADDR_VAR 0 2
82411: PUSH
82412: LD_OWVAR 3
82416: PUSH
82417: FOR_IN
82418: IFFALSE 82496
// if IsSelected ( i ) then
82420: LD_VAR 0 2
82424: PPUSH
82425: CALL_OW 306
82429: IFFALSE 82494
// begin j := GetSide ( i ) ;
82431: LD_ADDR_VAR 0 3
82435: PUSH
82436: LD_VAR 0 2
82440: PPUSH
82441: CALL_OW 255
82445: ST_TO_ADDR
// if j = 8 then
82446: LD_VAR 0 3
82450: PUSH
82451: LD_INT 8
82453: EQUAL
82454: IFFALSE 82466
// j := 0 else
82456: LD_ADDR_VAR 0 3
82460: PUSH
82461: LD_INT 0
82463: ST_TO_ADDR
82464: GO 82480
// j := j + 1 ;
82466: LD_ADDR_VAR 0 3
82470: PUSH
82471: LD_VAR 0 3
82475: PUSH
82476: LD_INT 1
82478: PLUS
82479: ST_TO_ADDR
// SetSide ( i , j ) ;
82480: LD_VAR 0 2
82484: PPUSH
82485: LD_VAR 0 3
82489: PPUSH
82490: CALL_OW 235
// end ;
82494: GO 82417
82496: POP
82497: POP
// end ;
82498: LD_VAR 0 1
82502: RET
// export function hHackFog ; begin
82503: LD_INT 0
82505: PPUSH
// FogOff ( true ) ;
82506: LD_INT 1
82508: PPUSH
82509: CALL_OW 344
// end ;
82513: LD_VAR 0 1
82517: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82518: LD_INT 0
82520: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82521: LD_VAR 0 1
82525: PPUSH
82526: LD_VAR 0 2
82530: PPUSH
82531: LD_VAR 0 3
82535: PPUSH
82536: LD_INT 1
82538: PPUSH
82539: LD_INT 1
82541: PPUSH
82542: CALL_OW 483
// CenterOnXY ( x , y ) ;
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_VAR 0 3
82555: PPUSH
82556: CALL_OW 84
// end ; end_of_file
82560: LD_VAR 0 4
82564: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82565: LD_INT 0
82567: PPUSH
82568: PPUSH
82569: PPUSH
82570: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82571: LD_VAR 0 1
82575: PPUSH
82576: CALL_OW 264
82580: PUSH
82581: LD_EXP 96
82585: EQUAL
82586: IFFALSE 82658
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82588: LD_INT 68
82590: PPUSH
82591: LD_VAR 0 1
82595: PPUSH
82596: CALL_OW 255
82600: PPUSH
82601: CALL_OW 321
82605: PUSH
82606: LD_INT 2
82608: EQUAL
82609: IFFALSE 82621
// eff := 70 else
82611: LD_ADDR_VAR 0 4
82615: PUSH
82616: LD_INT 70
82618: ST_TO_ADDR
82619: GO 82629
// eff := 30 ;
82621: LD_ADDR_VAR 0 4
82625: PUSH
82626: LD_INT 30
82628: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82629: LD_VAR 0 1
82633: PPUSH
82634: CALL_OW 250
82638: PPUSH
82639: LD_VAR 0 1
82643: PPUSH
82644: CALL_OW 251
82648: PPUSH
82649: LD_VAR 0 4
82653: PPUSH
82654: CALL_OW 495
// end ; end ;
82658: LD_VAR 0 2
82662: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82663: LD_INT 0
82665: PPUSH
// end ;
82666: LD_VAR 0 4
82670: RET
// export function SOS_Command ( cmd ) ; begin
82671: LD_INT 0
82673: PPUSH
// end ;
82674: LD_VAR 0 2
82678: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82679: LD_INT 0
82681: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82682: LD_VAR 0 1
82686: PUSH
82687: LD_INT 250
82689: EQUAL
82690: PUSH
82691: LD_VAR 0 2
82695: PPUSH
82696: CALL_OW 264
82700: PUSH
82701: LD_EXP 99
82705: EQUAL
82706: AND
82707: IFFALSE 82728
// MinerPlaceMine ( unit , x , y ) ;
82709: LD_VAR 0 2
82713: PPUSH
82714: LD_VAR 0 4
82718: PPUSH
82719: LD_VAR 0 5
82723: PPUSH
82724: CALL 85069 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82728: LD_VAR 0 1
82732: PUSH
82733: LD_INT 251
82735: EQUAL
82736: PUSH
82737: LD_VAR 0 2
82741: PPUSH
82742: CALL_OW 264
82746: PUSH
82747: LD_EXP 99
82751: EQUAL
82752: AND
82753: IFFALSE 82774
// MinerDetonateMine ( unit , x , y ) ;
82755: LD_VAR 0 2
82759: PPUSH
82760: LD_VAR 0 4
82764: PPUSH
82765: LD_VAR 0 5
82769: PPUSH
82770: CALL 85346 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82774: LD_VAR 0 1
82778: PUSH
82779: LD_INT 252
82781: EQUAL
82782: PUSH
82783: LD_VAR 0 2
82787: PPUSH
82788: CALL_OW 264
82792: PUSH
82793: LD_EXP 99
82797: EQUAL
82798: AND
82799: IFFALSE 82820
// MinerCreateMinefield ( unit , x , y ) ;
82801: LD_VAR 0 2
82805: PPUSH
82806: LD_VAR 0 4
82810: PPUSH
82811: LD_VAR 0 5
82815: PPUSH
82816: CALL 85763 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82820: LD_VAR 0 1
82824: PUSH
82825: LD_INT 253
82827: EQUAL
82828: PUSH
82829: LD_VAR 0 2
82833: PPUSH
82834: CALL_OW 257
82838: PUSH
82839: LD_INT 5
82841: EQUAL
82842: AND
82843: IFFALSE 82864
// ComBinocular ( unit , x , y ) ;
82845: LD_VAR 0 2
82849: PPUSH
82850: LD_VAR 0 4
82854: PPUSH
82855: LD_VAR 0 5
82859: PPUSH
82860: CALL 86134 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82864: LD_VAR 0 1
82868: PUSH
82869: LD_INT 254
82871: EQUAL
82872: PUSH
82873: LD_VAR 0 2
82877: PPUSH
82878: CALL_OW 264
82882: PUSH
82883: LD_EXP 94
82887: EQUAL
82888: AND
82889: PUSH
82890: LD_VAR 0 3
82894: PPUSH
82895: CALL_OW 263
82899: PUSH
82900: LD_INT 3
82902: EQUAL
82903: AND
82904: IFFALSE 82920
// HackDestroyVehicle ( unit , selectedUnit ) ;
82906: LD_VAR 0 2
82910: PPUSH
82911: LD_VAR 0 3
82915: PPUSH
82916: CALL 84429 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82920: LD_VAR 0 1
82924: PUSH
82925: LD_INT 255
82927: EQUAL
82928: PUSH
82929: LD_VAR 0 2
82933: PPUSH
82934: CALL_OW 264
82938: PUSH
82939: LD_INT 14
82941: PUSH
82942: LD_INT 53
82944: PUSH
82945: EMPTY
82946: LIST
82947: LIST
82948: IN
82949: AND
82950: PUSH
82951: LD_VAR 0 4
82955: PPUSH
82956: LD_VAR 0 5
82960: PPUSH
82961: CALL_OW 488
82965: AND
82966: IFFALSE 82990
// CutTreeXYR ( unit , x , y , 12 ) ;
82968: LD_VAR 0 2
82972: PPUSH
82973: LD_VAR 0 4
82977: PPUSH
82978: LD_VAR 0 5
82982: PPUSH
82983: LD_INT 12
82985: PPUSH
82986: CALL 82995 0 4
// end ;
82990: LD_VAR 0 6
82994: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82995: LD_INT 0
82997: PPUSH
82998: PPUSH
82999: PPUSH
83000: PPUSH
83001: PPUSH
83002: PPUSH
83003: PPUSH
83004: PPUSH
83005: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83006: LD_VAR 0 1
83010: NOT
83011: PUSH
83012: LD_VAR 0 2
83016: PPUSH
83017: LD_VAR 0 3
83021: PPUSH
83022: CALL_OW 488
83026: NOT
83027: OR
83028: PUSH
83029: LD_VAR 0 4
83033: NOT
83034: OR
83035: IFFALSE 83039
// exit ;
83037: GO 83379
// list := [ ] ;
83039: LD_ADDR_VAR 0 13
83043: PUSH
83044: EMPTY
83045: ST_TO_ADDR
// if x - r < 0 then
83046: LD_VAR 0 2
83050: PUSH
83051: LD_VAR 0 4
83055: MINUS
83056: PUSH
83057: LD_INT 0
83059: LESS
83060: IFFALSE 83072
// min_x := 0 else
83062: LD_ADDR_VAR 0 7
83066: PUSH
83067: LD_INT 0
83069: ST_TO_ADDR
83070: GO 83088
// min_x := x - r ;
83072: LD_ADDR_VAR 0 7
83076: PUSH
83077: LD_VAR 0 2
83081: PUSH
83082: LD_VAR 0 4
83086: MINUS
83087: ST_TO_ADDR
// if y - r < 0 then
83088: LD_VAR 0 3
83092: PUSH
83093: LD_VAR 0 4
83097: MINUS
83098: PUSH
83099: LD_INT 0
83101: LESS
83102: IFFALSE 83114
// min_y := 0 else
83104: LD_ADDR_VAR 0 8
83108: PUSH
83109: LD_INT 0
83111: ST_TO_ADDR
83112: GO 83130
// min_y := y - r ;
83114: LD_ADDR_VAR 0 8
83118: PUSH
83119: LD_VAR 0 3
83123: PUSH
83124: LD_VAR 0 4
83128: MINUS
83129: ST_TO_ADDR
// max_x := x + r ;
83130: LD_ADDR_VAR 0 9
83134: PUSH
83135: LD_VAR 0 2
83139: PUSH
83140: LD_VAR 0 4
83144: PLUS
83145: ST_TO_ADDR
// max_y := y + r ;
83146: LD_ADDR_VAR 0 10
83150: PUSH
83151: LD_VAR 0 3
83155: PUSH
83156: LD_VAR 0 4
83160: PLUS
83161: ST_TO_ADDR
// for _x = min_x to max_x do
83162: LD_ADDR_VAR 0 11
83166: PUSH
83167: DOUBLE
83168: LD_VAR 0 7
83172: DEC
83173: ST_TO_ADDR
83174: LD_VAR 0 9
83178: PUSH
83179: FOR_TO
83180: IFFALSE 83297
// for _y = min_y to max_y do
83182: LD_ADDR_VAR 0 12
83186: PUSH
83187: DOUBLE
83188: LD_VAR 0 8
83192: DEC
83193: ST_TO_ADDR
83194: LD_VAR 0 10
83198: PUSH
83199: FOR_TO
83200: IFFALSE 83293
// begin if not ValidHex ( _x , _y ) then
83202: LD_VAR 0 11
83206: PPUSH
83207: LD_VAR 0 12
83211: PPUSH
83212: CALL_OW 488
83216: NOT
83217: IFFALSE 83221
// continue ;
83219: GO 83199
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83221: LD_VAR 0 11
83225: PPUSH
83226: LD_VAR 0 12
83230: PPUSH
83231: CALL_OW 351
83235: PUSH
83236: LD_VAR 0 11
83240: PPUSH
83241: LD_VAR 0 12
83245: PPUSH
83246: CALL_OW 554
83250: AND
83251: IFFALSE 83291
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83253: LD_ADDR_VAR 0 13
83257: PUSH
83258: LD_VAR 0 13
83262: PPUSH
83263: LD_VAR 0 13
83267: PUSH
83268: LD_INT 1
83270: PLUS
83271: PPUSH
83272: LD_VAR 0 11
83276: PUSH
83277: LD_VAR 0 12
83281: PUSH
83282: EMPTY
83283: LIST
83284: LIST
83285: PPUSH
83286: CALL_OW 2
83290: ST_TO_ADDR
// end ;
83291: GO 83199
83293: POP
83294: POP
83295: GO 83179
83297: POP
83298: POP
// if not list then
83299: LD_VAR 0 13
83303: NOT
83304: IFFALSE 83308
// exit ;
83306: GO 83379
// for i in list do
83308: LD_ADDR_VAR 0 6
83312: PUSH
83313: LD_VAR 0 13
83317: PUSH
83318: FOR_IN
83319: IFFALSE 83377
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83321: LD_VAR 0 1
83325: PPUSH
83326: LD_STRING M
83328: PUSH
83329: LD_VAR 0 6
83333: PUSH
83334: LD_INT 1
83336: ARRAY
83337: PUSH
83338: LD_VAR 0 6
83342: PUSH
83343: LD_INT 2
83345: ARRAY
83346: PUSH
83347: LD_INT 0
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: LD_INT 0
83355: PUSH
83356: LD_INT 0
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: LIST
83363: LIST
83364: LIST
83365: LIST
83366: LIST
83367: PUSH
83368: EMPTY
83369: LIST
83370: PPUSH
83371: CALL_OW 447
83375: GO 83318
83377: POP
83378: POP
// end ;
83379: LD_VAR 0 5
83383: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83384: LD_EXP 163
83388: NOT
83389: IFFALSE 83439
83391: GO 83393
83393: DISABLE
// begin initHack := true ;
83394: LD_ADDR_EXP 163
83398: PUSH
83399: LD_INT 1
83401: ST_TO_ADDR
// hackTanks := [ ] ;
83402: LD_ADDR_EXP 164
83406: PUSH
83407: EMPTY
83408: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83409: LD_ADDR_EXP 165
83413: PUSH
83414: EMPTY
83415: ST_TO_ADDR
// hackLimit := 3 ;
83416: LD_ADDR_EXP 166
83420: PUSH
83421: LD_INT 3
83423: ST_TO_ADDR
// hackDist := 12 ;
83424: LD_ADDR_EXP 167
83428: PUSH
83429: LD_INT 12
83431: ST_TO_ADDR
// hackCounter := [ ] ;
83432: LD_ADDR_EXP 168
83436: PUSH
83437: EMPTY
83438: ST_TO_ADDR
// end ;
83439: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83440: LD_EXP 163
83444: PUSH
83445: LD_INT 34
83447: PUSH
83448: LD_EXP 94
83452: PUSH
83453: EMPTY
83454: LIST
83455: LIST
83456: PPUSH
83457: CALL_OW 69
83461: AND
83462: IFFALSE 83717
83464: GO 83466
83466: DISABLE
83467: LD_INT 0
83469: PPUSH
83470: PPUSH
// begin enable ;
83471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83472: LD_ADDR_VAR 0 1
83476: PUSH
83477: LD_INT 34
83479: PUSH
83480: LD_EXP 94
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PPUSH
83489: CALL_OW 69
83493: PUSH
83494: FOR_IN
83495: IFFALSE 83715
// begin if not i in hackTanks then
83497: LD_VAR 0 1
83501: PUSH
83502: LD_EXP 164
83506: IN
83507: NOT
83508: IFFALSE 83591
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83510: LD_ADDR_EXP 164
83514: PUSH
83515: LD_EXP 164
83519: PPUSH
83520: LD_EXP 164
83524: PUSH
83525: LD_INT 1
83527: PLUS
83528: PPUSH
83529: LD_VAR 0 1
83533: PPUSH
83534: CALL_OW 1
83538: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83539: LD_ADDR_EXP 165
83543: PUSH
83544: LD_EXP 165
83548: PPUSH
83549: LD_EXP 165
83553: PUSH
83554: LD_INT 1
83556: PLUS
83557: PPUSH
83558: EMPTY
83559: PPUSH
83560: CALL_OW 1
83564: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83565: LD_ADDR_EXP 168
83569: PUSH
83570: LD_EXP 168
83574: PPUSH
83575: LD_EXP 168
83579: PUSH
83580: LD_INT 1
83582: PLUS
83583: PPUSH
83584: EMPTY
83585: PPUSH
83586: CALL_OW 1
83590: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83591: LD_VAR 0 1
83595: PPUSH
83596: CALL_OW 302
83600: NOT
83601: IFFALSE 83614
// begin HackUnlinkAll ( i ) ;
83603: LD_VAR 0 1
83607: PPUSH
83608: CALL 83720 0 1
// continue ;
83612: GO 83494
// end ; HackCheckCapturedStatus ( i ) ;
83614: LD_VAR 0 1
83618: PPUSH
83619: CALL 84163 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83623: LD_ADDR_VAR 0 2
83627: PUSH
83628: LD_INT 81
83630: PUSH
83631: LD_VAR 0 1
83635: PPUSH
83636: CALL_OW 255
83640: PUSH
83641: EMPTY
83642: LIST
83643: LIST
83644: PUSH
83645: LD_INT 33
83647: PUSH
83648: LD_INT 3
83650: PUSH
83651: EMPTY
83652: LIST
83653: LIST
83654: PUSH
83655: LD_INT 91
83657: PUSH
83658: LD_VAR 0 1
83662: PUSH
83663: LD_EXP 167
83667: PUSH
83668: EMPTY
83669: LIST
83670: LIST
83671: LIST
83672: PUSH
83673: LD_INT 50
83675: PUSH
83676: EMPTY
83677: LIST
83678: PUSH
83679: EMPTY
83680: LIST
83681: LIST
83682: LIST
83683: LIST
83684: PPUSH
83685: CALL_OW 69
83689: ST_TO_ADDR
// if not tmp then
83690: LD_VAR 0 2
83694: NOT
83695: IFFALSE 83699
// continue ;
83697: GO 83494
// HackLink ( i , tmp ) ;
83699: LD_VAR 0 1
83703: PPUSH
83704: LD_VAR 0 2
83708: PPUSH
83709: CALL 83856 0 2
// end ;
83713: GO 83494
83715: POP
83716: POP
// end ;
83717: PPOPN 2
83719: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83720: LD_INT 0
83722: PPUSH
83723: PPUSH
83724: PPUSH
// if not hack in hackTanks then
83725: LD_VAR 0 1
83729: PUSH
83730: LD_EXP 164
83734: IN
83735: NOT
83736: IFFALSE 83740
// exit ;
83738: GO 83851
// index := GetElementIndex ( hackTanks , hack ) ;
83740: LD_ADDR_VAR 0 4
83744: PUSH
83745: LD_EXP 164
83749: PPUSH
83750: LD_VAR 0 1
83754: PPUSH
83755: CALL 37060 0 2
83759: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83760: LD_EXP 165
83764: PUSH
83765: LD_VAR 0 4
83769: ARRAY
83770: IFFALSE 83851
// begin for i in hackTanksCaptured [ index ] do
83772: LD_ADDR_VAR 0 3
83776: PUSH
83777: LD_EXP 165
83781: PUSH
83782: LD_VAR 0 4
83786: ARRAY
83787: PUSH
83788: FOR_IN
83789: IFFALSE 83815
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83791: LD_VAR 0 3
83795: PUSH
83796: LD_INT 1
83798: ARRAY
83799: PPUSH
83800: LD_VAR 0 3
83804: PUSH
83805: LD_INT 2
83807: ARRAY
83808: PPUSH
83809: CALL_OW 235
83813: GO 83788
83815: POP
83816: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83817: LD_ADDR_EXP 165
83821: PUSH
83822: LD_EXP 165
83826: PPUSH
83827: LD_VAR 0 4
83831: PPUSH
83832: EMPTY
83833: PPUSH
83834: CALL_OW 1
83838: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83839: LD_VAR 0 1
83843: PPUSH
83844: LD_INT 0
83846: PPUSH
83847: CALL_OW 505
// end ; end ;
83851: LD_VAR 0 2
83855: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83856: LD_INT 0
83858: PPUSH
83859: PPUSH
83860: PPUSH
// if not hack in hackTanks or not vehicles then
83861: LD_VAR 0 1
83865: PUSH
83866: LD_EXP 164
83870: IN
83871: NOT
83872: PUSH
83873: LD_VAR 0 2
83877: NOT
83878: OR
83879: IFFALSE 83883
// exit ;
83881: GO 84158
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
83883: LD_ADDR_VAR 0 2
83887: PUSH
83888: LD_VAR 0 1
83892: PPUSH
83893: LD_VAR 0 2
83897: PPUSH
83898: LD_INT 1
83900: PPUSH
83901: LD_INT 1
83903: PPUSH
83904: CALL 37710 0 4
83908: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
83909: LD_ADDR_VAR 0 5
83913: PUSH
83914: LD_EXP 164
83918: PPUSH
83919: LD_VAR 0 1
83923: PPUSH
83924: CALL 37060 0 2
83928: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
83929: LD_EXP 165
83933: PUSH
83934: LD_VAR 0 5
83938: ARRAY
83939: PUSH
83940: LD_EXP 166
83944: LESS
83945: IFFALSE 84134
// begin for i := 1 to vehicles do
83947: LD_ADDR_VAR 0 4
83951: PUSH
83952: DOUBLE
83953: LD_INT 1
83955: DEC
83956: ST_TO_ADDR
83957: LD_VAR 0 2
83961: PUSH
83962: FOR_TO
83963: IFFALSE 84132
// begin if hackTanksCaptured [ index ] = hackLimit then
83965: LD_EXP 165
83969: PUSH
83970: LD_VAR 0 5
83974: ARRAY
83975: PUSH
83976: LD_EXP 166
83980: EQUAL
83981: IFFALSE 83985
// break ;
83983: GO 84132
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
83985: LD_ADDR_EXP 168
83989: PUSH
83990: LD_EXP 168
83994: PPUSH
83995: LD_VAR 0 5
83999: PPUSH
84000: LD_EXP 168
84004: PUSH
84005: LD_VAR 0 5
84009: ARRAY
84010: PUSH
84011: LD_INT 1
84013: PLUS
84014: PPUSH
84015: CALL_OW 1
84019: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84020: LD_ADDR_EXP 165
84024: PUSH
84025: LD_EXP 165
84029: PPUSH
84030: LD_VAR 0 5
84034: PUSH
84035: LD_EXP 165
84039: PUSH
84040: LD_VAR 0 5
84044: ARRAY
84045: PUSH
84046: LD_INT 1
84048: PLUS
84049: PUSH
84050: EMPTY
84051: LIST
84052: LIST
84053: PPUSH
84054: LD_VAR 0 2
84058: PUSH
84059: LD_VAR 0 4
84063: ARRAY
84064: PUSH
84065: LD_VAR 0 2
84069: PUSH
84070: LD_VAR 0 4
84074: ARRAY
84075: PPUSH
84076: CALL_OW 255
84080: PUSH
84081: EMPTY
84082: LIST
84083: LIST
84084: PPUSH
84085: CALL 37275 0 3
84089: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84090: LD_VAR 0 2
84094: PUSH
84095: LD_VAR 0 4
84099: ARRAY
84100: PPUSH
84101: LD_VAR 0 1
84105: PPUSH
84106: CALL_OW 255
84110: PPUSH
84111: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84115: LD_VAR 0 2
84119: PUSH
84120: LD_VAR 0 4
84124: ARRAY
84125: PPUSH
84126: CALL_OW 141
// end ;
84130: GO 83962
84132: POP
84133: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84134: LD_VAR 0 1
84138: PPUSH
84139: LD_EXP 165
84143: PUSH
84144: LD_VAR 0 5
84148: ARRAY
84149: PUSH
84150: LD_INT 0
84152: PLUS
84153: PPUSH
84154: CALL_OW 505
// end ;
84158: LD_VAR 0 3
84162: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84163: LD_INT 0
84165: PPUSH
84166: PPUSH
84167: PPUSH
84168: PPUSH
// if not hack in hackTanks then
84169: LD_VAR 0 1
84173: PUSH
84174: LD_EXP 164
84178: IN
84179: NOT
84180: IFFALSE 84184
// exit ;
84182: GO 84424
// index := GetElementIndex ( hackTanks , hack ) ;
84184: LD_ADDR_VAR 0 4
84188: PUSH
84189: LD_EXP 164
84193: PPUSH
84194: LD_VAR 0 1
84198: PPUSH
84199: CALL 37060 0 2
84203: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84204: LD_ADDR_VAR 0 3
84208: PUSH
84209: DOUBLE
84210: LD_EXP 165
84214: PUSH
84215: LD_VAR 0 4
84219: ARRAY
84220: INC
84221: ST_TO_ADDR
84222: LD_INT 1
84224: PUSH
84225: FOR_DOWNTO
84226: IFFALSE 84398
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84228: LD_ADDR_VAR 0 5
84232: PUSH
84233: LD_EXP 165
84237: PUSH
84238: LD_VAR 0 4
84242: ARRAY
84243: PUSH
84244: LD_VAR 0 3
84248: ARRAY
84249: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84250: LD_VAR 0 5
84254: PUSH
84255: LD_INT 1
84257: ARRAY
84258: PPUSH
84259: CALL_OW 302
84263: NOT
84264: PUSH
84265: LD_VAR 0 5
84269: PUSH
84270: LD_INT 1
84272: ARRAY
84273: PPUSH
84274: CALL_OW 255
84278: PUSH
84279: LD_VAR 0 1
84283: PPUSH
84284: CALL_OW 255
84288: NONEQUAL
84289: OR
84290: IFFALSE 84396
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84292: LD_VAR 0 5
84296: PUSH
84297: LD_INT 1
84299: ARRAY
84300: PPUSH
84301: CALL_OW 305
84305: PUSH
84306: LD_VAR 0 5
84310: PUSH
84311: LD_INT 1
84313: ARRAY
84314: PPUSH
84315: CALL_OW 255
84319: PUSH
84320: LD_VAR 0 1
84324: PPUSH
84325: CALL_OW 255
84329: EQUAL
84330: AND
84331: IFFALSE 84355
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84333: LD_VAR 0 5
84337: PUSH
84338: LD_INT 1
84340: ARRAY
84341: PPUSH
84342: LD_VAR 0 5
84346: PUSH
84347: LD_INT 2
84349: ARRAY
84350: PPUSH
84351: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84355: LD_ADDR_EXP 165
84359: PUSH
84360: LD_EXP 165
84364: PPUSH
84365: LD_VAR 0 4
84369: PPUSH
84370: LD_EXP 165
84374: PUSH
84375: LD_VAR 0 4
84379: ARRAY
84380: PPUSH
84381: LD_VAR 0 3
84385: PPUSH
84386: CALL_OW 3
84390: PPUSH
84391: CALL_OW 1
84395: ST_TO_ADDR
// end ; end ;
84396: GO 84225
84398: POP
84399: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84400: LD_VAR 0 1
84404: PPUSH
84405: LD_EXP 165
84409: PUSH
84410: LD_VAR 0 4
84414: ARRAY
84415: PUSH
84416: LD_INT 0
84418: PLUS
84419: PPUSH
84420: CALL_OW 505
// end ;
84424: LD_VAR 0 2
84428: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84429: LD_INT 0
84431: PPUSH
84432: PPUSH
84433: PPUSH
84434: PPUSH
// if not hack in hackTanks then
84435: LD_VAR 0 1
84439: PUSH
84440: LD_EXP 164
84444: IN
84445: NOT
84446: IFFALSE 84450
// exit ;
84448: GO 84535
// index := GetElementIndex ( hackTanks , hack ) ;
84450: LD_ADDR_VAR 0 5
84454: PUSH
84455: LD_EXP 164
84459: PPUSH
84460: LD_VAR 0 1
84464: PPUSH
84465: CALL 37060 0 2
84469: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84470: LD_ADDR_VAR 0 4
84474: PUSH
84475: DOUBLE
84476: LD_INT 1
84478: DEC
84479: ST_TO_ADDR
84480: LD_EXP 165
84484: PUSH
84485: LD_VAR 0 5
84489: ARRAY
84490: PUSH
84491: FOR_TO
84492: IFFALSE 84533
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84494: LD_EXP 165
84498: PUSH
84499: LD_VAR 0 5
84503: ARRAY
84504: PUSH
84505: LD_VAR 0 4
84509: ARRAY
84510: PUSH
84511: LD_INT 1
84513: ARRAY
84514: PUSH
84515: LD_VAR 0 2
84519: EQUAL
84520: IFFALSE 84531
// KillUnit ( vehicle ) ;
84522: LD_VAR 0 2
84526: PPUSH
84527: CALL_OW 66
84531: GO 84491
84533: POP
84534: POP
// end ;
84535: LD_VAR 0 3
84539: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84540: LD_EXP 169
84544: NOT
84545: IFFALSE 84580
84547: GO 84549
84549: DISABLE
// begin initMiner := true ;
84550: LD_ADDR_EXP 169
84554: PUSH
84555: LD_INT 1
84557: ST_TO_ADDR
// minersList := [ ] ;
84558: LD_ADDR_EXP 170
84562: PUSH
84563: EMPTY
84564: ST_TO_ADDR
// minerMinesList := [ ] ;
84565: LD_ADDR_EXP 171
84569: PUSH
84570: EMPTY
84571: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84572: LD_ADDR_EXP 172
84576: PUSH
84577: LD_INT 5
84579: ST_TO_ADDR
// end ;
84580: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84581: LD_EXP 169
84585: PUSH
84586: LD_INT 34
84588: PUSH
84589: LD_EXP 99
84593: PUSH
84594: EMPTY
84595: LIST
84596: LIST
84597: PPUSH
84598: CALL_OW 69
84602: AND
84603: IFFALSE 85066
84605: GO 84607
84607: DISABLE
84608: LD_INT 0
84610: PPUSH
84611: PPUSH
84612: PPUSH
84613: PPUSH
// begin enable ;
84614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84615: LD_ADDR_VAR 0 1
84619: PUSH
84620: LD_INT 34
84622: PUSH
84623: LD_EXP 99
84627: PUSH
84628: EMPTY
84629: LIST
84630: LIST
84631: PPUSH
84632: CALL_OW 69
84636: PUSH
84637: FOR_IN
84638: IFFALSE 84710
// begin if not i in minersList then
84640: LD_VAR 0 1
84644: PUSH
84645: LD_EXP 170
84649: IN
84650: NOT
84651: IFFALSE 84708
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84653: LD_ADDR_EXP 170
84657: PUSH
84658: LD_EXP 170
84662: PPUSH
84663: LD_EXP 170
84667: PUSH
84668: LD_INT 1
84670: PLUS
84671: PPUSH
84672: LD_VAR 0 1
84676: PPUSH
84677: CALL_OW 1
84681: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84682: LD_ADDR_EXP 171
84686: PUSH
84687: LD_EXP 171
84691: PPUSH
84692: LD_EXP 171
84696: PUSH
84697: LD_INT 1
84699: PLUS
84700: PPUSH
84701: EMPTY
84702: PPUSH
84703: CALL_OW 1
84707: ST_TO_ADDR
// end end ;
84708: GO 84637
84710: POP
84711: POP
// for i := minerMinesList downto 1 do
84712: LD_ADDR_VAR 0 1
84716: PUSH
84717: DOUBLE
84718: LD_EXP 171
84722: INC
84723: ST_TO_ADDR
84724: LD_INT 1
84726: PUSH
84727: FOR_DOWNTO
84728: IFFALSE 85064
// begin if IsLive ( minersList [ i ] ) then
84730: LD_EXP 170
84734: PUSH
84735: LD_VAR 0 1
84739: ARRAY
84740: PPUSH
84741: CALL_OW 300
84745: IFFALSE 84773
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84747: LD_EXP 170
84751: PUSH
84752: LD_VAR 0 1
84756: ARRAY
84757: PPUSH
84758: LD_EXP 171
84762: PUSH
84763: LD_VAR 0 1
84767: ARRAY
84768: PPUSH
84769: CALL_OW 505
// if not minerMinesList [ i ] then
84773: LD_EXP 171
84777: PUSH
84778: LD_VAR 0 1
84782: ARRAY
84783: NOT
84784: IFFALSE 84788
// continue ;
84786: GO 84727
// for j := minerMinesList [ i ] downto 1 do
84788: LD_ADDR_VAR 0 2
84792: PUSH
84793: DOUBLE
84794: LD_EXP 171
84798: PUSH
84799: LD_VAR 0 1
84803: ARRAY
84804: INC
84805: ST_TO_ADDR
84806: LD_INT 1
84808: PUSH
84809: FOR_DOWNTO
84810: IFFALSE 85060
// begin side := GetSide ( minersList [ i ] ) ;
84812: LD_ADDR_VAR 0 3
84816: PUSH
84817: LD_EXP 170
84821: PUSH
84822: LD_VAR 0 1
84826: ARRAY
84827: PPUSH
84828: CALL_OW 255
84832: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84833: LD_ADDR_VAR 0 4
84837: PUSH
84838: LD_EXP 171
84842: PUSH
84843: LD_VAR 0 1
84847: ARRAY
84848: PUSH
84849: LD_VAR 0 2
84853: ARRAY
84854: PUSH
84855: LD_INT 1
84857: ARRAY
84858: PPUSH
84859: LD_EXP 171
84863: PUSH
84864: LD_VAR 0 1
84868: ARRAY
84869: PUSH
84870: LD_VAR 0 2
84874: ARRAY
84875: PUSH
84876: LD_INT 2
84878: ARRAY
84879: PPUSH
84880: CALL_OW 428
84884: ST_TO_ADDR
// if not tmp then
84885: LD_VAR 0 4
84889: NOT
84890: IFFALSE 84894
// continue ;
84892: GO 84809
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
84894: LD_VAR 0 4
84898: PUSH
84899: LD_INT 81
84901: PUSH
84902: LD_VAR 0 3
84906: PUSH
84907: EMPTY
84908: LIST
84909: LIST
84910: PPUSH
84911: CALL_OW 69
84915: IN
84916: PUSH
84917: LD_EXP 171
84921: PUSH
84922: LD_VAR 0 1
84926: ARRAY
84927: PUSH
84928: LD_VAR 0 2
84932: ARRAY
84933: PUSH
84934: LD_INT 1
84936: ARRAY
84937: PPUSH
84938: LD_EXP 171
84942: PUSH
84943: LD_VAR 0 1
84947: ARRAY
84948: PUSH
84949: LD_VAR 0 2
84953: ARRAY
84954: PUSH
84955: LD_INT 2
84957: ARRAY
84958: PPUSH
84959: CALL_OW 458
84963: AND
84964: IFFALSE 85058
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
84966: LD_EXP 171
84970: PUSH
84971: LD_VAR 0 1
84975: ARRAY
84976: PUSH
84977: LD_VAR 0 2
84981: ARRAY
84982: PUSH
84983: LD_INT 1
84985: ARRAY
84986: PPUSH
84987: LD_EXP 171
84991: PUSH
84992: LD_VAR 0 1
84996: ARRAY
84997: PUSH
84998: LD_VAR 0 2
85002: ARRAY
85003: PUSH
85004: LD_INT 2
85006: ARRAY
85007: PPUSH
85008: LD_VAR 0 3
85012: PPUSH
85013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85017: LD_ADDR_EXP 171
85021: PUSH
85022: LD_EXP 171
85026: PPUSH
85027: LD_VAR 0 1
85031: PPUSH
85032: LD_EXP 171
85036: PUSH
85037: LD_VAR 0 1
85041: ARRAY
85042: PPUSH
85043: LD_VAR 0 2
85047: PPUSH
85048: CALL_OW 3
85052: PPUSH
85053: CALL_OW 1
85057: ST_TO_ADDR
// end ; end ;
85058: GO 84809
85060: POP
85061: POP
// end ;
85062: GO 84727
85064: POP
85065: POP
// end ;
85066: PPOPN 4
85068: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85069: LD_INT 0
85071: PPUSH
85072: PPUSH
// result := false ;
85073: LD_ADDR_VAR 0 4
85077: PUSH
85078: LD_INT 0
85080: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85081: LD_VAR 0 1
85085: PPUSH
85086: CALL_OW 264
85090: PUSH
85091: LD_EXP 99
85095: EQUAL
85096: NOT
85097: IFFALSE 85101
// exit ;
85099: GO 85341
// index := GetElementIndex ( minersList , unit ) ;
85101: LD_ADDR_VAR 0 5
85105: PUSH
85106: LD_EXP 170
85110: PPUSH
85111: LD_VAR 0 1
85115: PPUSH
85116: CALL 37060 0 2
85120: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85121: LD_EXP 171
85125: PUSH
85126: LD_VAR 0 5
85130: ARRAY
85131: PUSH
85132: LD_EXP 172
85136: GREATEREQUAL
85137: IFFALSE 85141
// exit ;
85139: GO 85341
// ComMoveXY ( unit , x , y ) ;
85141: LD_VAR 0 1
85145: PPUSH
85146: LD_VAR 0 2
85150: PPUSH
85151: LD_VAR 0 3
85155: PPUSH
85156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85160: LD_INT 35
85162: PPUSH
85163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85167: LD_VAR 0 1
85171: PPUSH
85172: LD_VAR 0 2
85176: PPUSH
85177: LD_VAR 0 3
85181: PPUSH
85182: CALL 67124 0 3
85186: NOT
85187: PUSH
85188: LD_VAR 0 1
85192: PPUSH
85193: CALL_OW 314
85197: AND
85198: IFFALSE 85202
// exit ;
85200: GO 85341
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85202: LD_VAR 0 2
85206: PPUSH
85207: LD_VAR 0 3
85211: PPUSH
85212: CALL_OW 428
85216: PUSH
85217: LD_VAR 0 1
85221: EQUAL
85222: PUSH
85223: LD_VAR 0 1
85227: PPUSH
85228: CALL_OW 314
85232: NOT
85233: AND
85234: IFFALSE 85160
// PlaySoundXY ( x , y , PlantMine ) ;
85236: LD_VAR 0 2
85240: PPUSH
85241: LD_VAR 0 3
85245: PPUSH
85246: LD_STRING PlantMine
85248: PPUSH
85249: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85253: LD_VAR 0 2
85257: PPUSH
85258: LD_VAR 0 3
85262: PPUSH
85263: LD_VAR 0 1
85267: PPUSH
85268: CALL_OW 255
85272: PPUSH
85273: LD_INT 0
85275: PPUSH
85276: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85280: LD_ADDR_EXP 171
85284: PUSH
85285: LD_EXP 171
85289: PPUSH
85290: LD_VAR 0 5
85294: PUSH
85295: LD_EXP 171
85299: PUSH
85300: LD_VAR 0 5
85304: ARRAY
85305: PUSH
85306: LD_INT 1
85308: PLUS
85309: PUSH
85310: EMPTY
85311: LIST
85312: LIST
85313: PPUSH
85314: LD_VAR 0 2
85318: PUSH
85319: LD_VAR 0 3
85323: PUSH
85324: EMPTY
85325: LIST
85326: LIST
85327: PPUSH
85328: CALL 37275 0 3
85332: ST_TO_ADDR
// result := true ;
85333: LD_ADDR_VAR 0 4
85337: PUSH
85338: LD_INT 1
85340: ST_TO_ADDR
// end ;
85341: LD_VAR 0 4
85345: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85346: LD_INT 0
85348: PPUSH
85349: PPUSH
85350: PPUSH
// if not unit in minersList then
85351: LD_VAR 0 1
85355: PUSH
85356: LD_EXP 170
85360: IN
85361: NOT
85362: IFFALSE 85366
// exit ;
85364: GO 85758
// index := GetElementIndex ( minersList , unit ) ;
85366: LD_ADDR_VAR 0 6
85370: PUSH
85371: LD_EXP 170
85375: PPUSH
85376: LD_VAR 0 1
85380: PPUSH
85381: CALL 37060 0 2
85385: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85386: LD_ADDR_VAR 0 5
85390: PUSH
85391: DOUBLE
85392: LD_EXP 171
85396: PUSH
85397: LD_VAR 0 6
85401: ARRAY
85402: INC
85403: ST_TO_ADDR
85404: LD_INT 1
85406: PUSH
85407: FOR_DOWNTO
85408: IFFALSE 85569
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
85410: LD_EXP 171
85414: PUSH
85415: LD_VAR 0 6
85419: ARRAY
85420: PUSH
85421: LD_VAR 0 5
85425: ARRAY
85426: PUSH
85427: LD_INT 1
85429: ARRAY
85430: PUSH
85431: LD_VAR 0 2
85435: EQUAL
85436: PUSH
85437: LD_EXP 171
85441: PUSH
85442: LD_VAR 0 6
85446: ARRAY
85447: PUSH
85448: LD_VAR 0 5
85452: ARRAY
85453: PUSH
85454: LD_INT 2
85456: ARRAY
85457: PUSH
85458: LD_VAR 0 3
85462: EQUAL
85463: AND
85464: IFFALSE 85567
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85466: LD_EXP 171
85470: PUSH
85471: LD_VAR 0 6
85475: ARRAY
85476: PUSH
85477: LD_VAR 0 5
85481: ARRAY
85482: PUSH
85483: LD_INT 1
85485: ARRAY
85486: PPUSH
85487: LD_EXP 171
85491: PUSH
85492: LD_VAR 0 6
85496: ARRAY
85497: PUSH
85498: LD_VAR 0 5
85502: ARRAY
85503: PUSH
85504: LD_INT 2
85506: ARRAY
85507: PPUSH
85508: LD_VAR 0 1
85512: PPUSH
85513: CALL_OW 255
85517: PPUSH
85518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85522: LD_ADDR_EXP 171
85526: PUSH
85527: LD_EXP 171
85531: PPUSH
85532: LD_VAR 0 6
85536: PPUSH
85537: LD_EXP 171
85541: PUSH
85542: LD_VAR 0 6
85546: ARRAY
85547: PPUSH
85548: LD_VAR 0 5
85552: PPUSH
85553: CALL_OW 3
85557: PPUSH
85558: CALL_OW 1
85562: ST_TO_ADDR
// exit ;
85563: POP
85564: POP
85565: GO 85758
// end ; end ;
85567: GO 85407
85569: POP
85570: POP
// for i := minerMinesList [ index ] downto 1 do
85571: LD_ADDR_VAR 0 5
85575: PUSH
85576: DOUBLE
85577: LD_EXP 171
85581: PUSH
85582: LD_VAR 0 6
85586: ARRAY
85587: INC
85588: ST_TO_ADDR
85589: LD_INT 1
85591: PUSH
85592: FOR_DOWNTO
85593: IFFALSE 85756
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85595: LD_EXP 171
85599: PUSH
85600: LD_VAR 0 6
85604: ARRAY
85605: PUSH
85606: LD_VAR 0 5
85610: ARRAY
85611: PUSH
85612: LD_INT 1
85614: ARRAY
85615: PPUSH
85616: LD_EXP 171
85620: PUSH
85621: LD_VAR 0 6
85625: ARRAY
85626: PUSH
85627: LD_VAR 0 5
85631: ARRAY
85632: PUSH
85633: LD_INT 2
85635: ARRAY
85636: PPUSH
85637: LD_VAR 0 2
85641: PPUSH
85642: LD_VAR 0 3
85646: PPUSH
85647: CALL_OW 298
85651: PUSH
85652: LD_INT 6
85654: LESS
85655: IFFALSE 85754
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85657: LD_EXP 171
85661: PUSH
85662: LD_VAR 0 6
85666: ARRAY
85667: PUSH
85668: LD_VAR 0 5
85672: ARRAY
85673: PUSH
85674: LD_INT 1
85676: ARRAY
85677: PPUSH
85678: LD_EXP 171
85682: PUSH
85683: LD_VAR 0 6
85687: ARRAY
85688: PUSH
85689: LD_VAR 0 5
85693: ARRAY
85694: PUSH
85695: LD_INT 2
85697: ARRAY
85698: PPUSH
85699: LD_VAR 0 1
85703: PPUSH
85704: CALL_OW 255
85708: PPUSH
85709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85713: LD_ADDR_EXP 171
85717: PUSH
85718: LD_EXP 171
85722: PPUSH
85723: LD_VAR 0 6
85727: PPUSH
85728: LD_EXP 171
85732: PUSH
85733: LD_VAR 0 6
85737: ARRAY
85738: PPUSH
85739: LD_VAR 0 5
85743: PPUSH
85744: CALL_OW 3
85748: PPUSH
85749: CALL_OW 1
85753: ST_TO_ADDR
// end ; end ;
85754: GO 85592
85756: POP
85757: POP
// end ;
85758: LD_VAR 0 4
85762: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85763: LD_INT 0
85765: PPUSH
85766: PPUSH
85767: PPUSH
85768: PPUSH
85769: PPUSH
85770: PPUSH
85771: PPUSH
85772: PPUSH
85773: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85774: LD_VAR 0 1
85778: PPUSH
85779: CALL_OW 264
85783: PUSH
85784: LD_EXP 99
85788: EQUAL
85789: NOT
85790: PUSH
85791: LD_VAR 0 1
85795: PUSH
85796: LD_EXP 170
85800: IN
85801: NOT
85802: OR
85803: IFFALSE 85807
// exit ;
85805: GO 86129
// index := GetElementIndex ( minersList , unit ) ;
85807: LD_ADDR_VAR 0 6
85811: PUSH
85812: LD_EXP 170
85816: PPUSH
85817: LD_VAR 0 1
85821: PPUSH
85822: CALL 37060 0 2
85826: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85827: LD_ADDR_VAR 0 8
85831: PUSH
85832: LD_EXP 172
85836: PUSH
85837: LD_EXP 171
85841: PUSH
85842: LD_VAR 0 6
85846: ARRAY
85847: MINUS
85848: ST_TO_ADDR
// if not minesFreeAmount then
85849: LD_VAR 0 8
85853: NOT
85854: IFFALSE 85858
// exit ;
85856: GO 86129
// tmp := [ ] ;
85858: LD_ADDR_VAR 0 7
85862: PUSH
85863: EMPTY
85864: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
85865: LD_ADDR_VAR 0 5
85869: PUSH
85870: DOUBLE
85871: LD_INT 1
85873: DEC
85874: ST_TO_ADDR
85875: LD_VAR 0 8
85879: PUSH
85880: FOR_TO
85881: IFFALSE 86076
// begin _d := rand ( 0 , 5 ) ;
85883: LD_ADDR_VAR 0 11
85887: PUSH
85888: LD_INT 0
85890: PPUSH
85891: LD_INT 5
85893: PPUSH
85894: CALL_OW 12
85898: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
85899: LD_ADDR_VAR 0 12
85903: PUSH
85904: LD_INT 2
85906: PPUSH
85907: LD_INT 6
85909: PPUSH
85910: CALL_OW 12
85914: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
85915: LD_ADDR_VAR 0 9
85919: PUSH
85920: LD_VAR 0 2
85924: PPUSH
85925: LD_VAR 0 11
85929: PPUSH
85930: LD_VAR 0 12
85934: PPUSH
85935: CALL_OW 272
85939: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
85940: LD_ADDR_VAR 0 10
85944: PUSH
85945: LD_VAR 0 3
85949: PPUSH
85950: LD_VAR 0 11
85954: PPUSH
85955: LD_VAR 0 12
85959: PPUSH
85960: CALL_OW 273
85964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
85965: LD_VAR 0 9
85969: PPUSH
85970: LD_VAR 0 10
85974: PPUSH
85975: CALL_OW 488
85979: PUSH
85980: LD_VAR 0 9
85984: PUSH
85985: LD_VAR 0 10
85989: PUSH
85990: EMPTY
85991: LIST
85992: LIST
85993: PUSH
85994: LD_VAR 0 7
85998: IN
85999: NOT
86000: AND
86001: PUSH
86002: LD_VAR 0 9
86006: PPUSH
86007: LD_VAR 0 10
86011: PPUSH
86012: CALL_OW 458
86016: NOT
86017: AND
86018: IFFALSE 86060
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86020: LD_ADDR_VAR 0 7
86024: PUSH
86025: LD_VAR 0 7
86029: PPUSH
86030: LD_VAR 0 7
86034: PUSH
86035: LD_INT 1
86037: PLUS
86038: PPUSH
86039: LD_VAR 0 9
86043: PUSH
86044: LD_VAR 0 10
86048: PUSH
86049: EMPTY
86050: LIST
86051: LIST
86052: PPUSH
86053: CALL_OW 1
86057: ST_TO_ADDR
86058: GO 86074
// i := i - 1 ;
86060: LD_ADDR_VAR 0 5
86064: PUSH
86065: LD_VAR 0 5
86069: PUSH
86070: LD_INT 1
86072: MINUS
86073: ST_TO_ADDR
// end ;
86074: GO 85880
86076: POP
86077: POP
// for i in tmp do
86078: LD_ADDR_VAR 0 5
86082: PUSH
86083: LD_VAR 0 7
86087: PUSH
86088: FOR_IN
86089: IFFALSE 86127
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86091: LD_VAR 0 1
86095: PPUSH
86096: LD_VAR 0 5
86100: PUSH
86101: LD_INT 1
86103: ARRAY
86104: PPUSH
86105: LD_VAR 0 5
86109: PUSH
86110: LD_INT 2
86112: ARRAY
86113: PPUSH
86114: CALL 85069 0 3
86118: NOT
86119: IFFALSE 86125
// exit ;
86121: POP
86122: POP
86123: GO 86129
86125: GO 86088
86127: POP
86128: POP
// end ;
86129: LD_VAR 0 4
86133: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86134: LD_INT 0
86136: PPUSH
86137: PPUSH
86138: PPUSH
86139: PPUSH
86140: PPUSH
86141: PPUSH
86142: PPUSH
// if not GetClass ( unit ) = class_sniper then
86143: LD_VAR 0 1
86147: PPUSH
86148: CALL_OW 257
86152: PUSH
86153: LD_INT 5
86155: EQUAL
86156: NOT
86157: IFFALSE 86161
// exit ;
86159: GO 86549
// dist := 8 ;
86161: LD_ADDR_VAR 0 5
86165: PUSH
86166: LD_INT 8
86168: ST_TO_ADDR
// viewRange := 12 ;
86169: LD_ADDR_VAR 0 7
86173: PUSH
86174: LD_INT 12
86176: ST_TO_ADDR
// side := GetSide ( unit ) ;
86177: LD_ADDR_VAR 0 6
86181: PUSH
86182: LD_VAR 0 1
86186: PPUSH
86187: CALL_OW 255
86191: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86192: LD_INT 61
86194: PPUSH
86195: LD_VAR 0 6
86199: PPUSH
86200: CALL_OW 321
86204: PUSH
86205: LD_INT 2
86207: EQUAL
86208: IFFALSE 86218
// viewRange := 16 ;
86210: LD_ADDR_VAR 0 7
86214: PUSH
86215: LD_INT 16
86217: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86218: LD_VAR 0 1
86222: PPUSH
86223: LD_VAR 0 2
86227: PPUSH
86228: LD_VAR 0 3
86232: PPUSH
86233: CALL_OW 297
86237: PUSH
86238: LD_VAR 0 5
86242: GREATER
86243: IFFALSE 86322
// begin ComMoveXY ( unit , x , y ) ;
86245: LD_VAR 0 1
86249: PPUSH
86250: LD_VAR 0 2
86254: PPUSH
86255: LD_VAR 0 3
86259: PPUSH
86260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86264: LD_INT 35
86266: PPUSH
86267: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86271: LD_VAR 0 1
86275: PPUSH
86276: LD_VAR 0 2
86280: PPUSH
86281: LD_VAR 0 3
86285: PPUSH
86286: CALL 67124 0 3
86290: NOT
86291: IFFALSE 86295
// exit ;
86293: GO 86549
// until GetDistUnitXY ( unit , x , y ) < dist ;
86295: LD_VAR 0 1
86299: PPUSH
86300: LD_VAR 0 2
86304: PPUSH
86305: LD_VAR 0 3
86309: PPUSH
86310: CALL_OW 297
86314: PUSH
86315: LD_VAR 0 5
86319: LESS
86320: IFFALSE 86264
// end ; ComTurnXY ( unit , x , y ) ;
86322: LD_VAR 0 1
86326: PPUSH
86327: LD_VAR 0 2
86331: PPUSH
86332: LD_VAR 0 3
86336: PPUSH
86337: CALL_OW 118
// wait ( 5 ) ;
86341: LD_INT 5
86343: PPUSH
86344: CALL_OW 67
// _d := GetDir ( unit ) ;
86348: LD_ADDR_VAR 0 10
86352: PUSH
86353: LD_VAR 0 1
86357: PPUSH
86358: CALL_OW 254
86362: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86363: LD_ADDR_VAR 0 8
86367: PUSH
86368: LD_VAR 0 1
86372: PPUSH
86373: CALL_OW 250
86377: PPUSH
86378: LD_VAR 0 10
86382: PPUSH
86383: LD_VAR 0 5
86387: PPUSH
86388: CALL_OW 272
86392: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
86393: LD_ADDR_VAR 0 9
86397: PUSH
86398: LD_VAR 0 1
86402: PPUSH
86403: CALL_OW 251
86407: PPUSH
86408: LD_VAR 0 10
86412: PPUSH
86413: LD_VAR 0 5
86417: PPUSH
86418: CALL_OW 273
86422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86423: LD_VAR 0 8
86427: PPUSH
86428: LD_VAR 0 9
86432: PPUSH
86433: CALL_OW 488
86437: NOT
86438: IFFALSE 86442
// exit ;
86440: GO 86549
// ComAnimCustom ( unit , 1 ) ;
86442: LD_VAR 0 1
86446: PPUSH
86447: LD_INT 1
86449: PPUSH
86450: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86454: LD_VAR 0 8
86458: PPUSH
86459: LD_VAR 0 9
86463: PPUSH
86464: LD_VAR 0 6
86468: PPUSH
86469: LD_VAR 0 7
86473: PPUSH
86474: CALL_OW 330
// repeat wait ( 1 ) ;
86478: LD_INT 1
86480: PPUSH
86481: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
86485: LD_VAR 0 1
86489: PPUSH
86490: CALL_OW 316
86494: PUSH
86495: LD_VAR 0 1
86499: PPUSH
86500: CALL_OW 314
86504: OR
86505: PUSH
86506: LD_VAR 0 1
86510: PPUSH
86511: CALL_OW 302
86515: NOT
86516: OR
86517: PUSH
86518: LD_VAR 0 1
86522: PPUSH
86523: CALL_OW 301
86527: OR
86528: IFFALSE 86478
// RemoveSeeing ( _x , _y , side ) ;
86530: LD_VAR 0 8
86534: PPUSH
86535: LD_VAR 0 9
86539: PPUSH
86540: LD_VAR 0 6
86544: PPUSH
86545: CALL_OW 331
// end ; end_of_file
86549: LD_VAR 0 4
86553: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86554: LD_VAR 0 1
86558: PUSH
86559: LD_INT 200
86561: DOUBLE
86562: GREATEREQUAL
86563: IFFALSE 86571
86565: LD_INT 299
86567: DOUBLE
86568: LESSEQUAL
86569: IFTRUE 86573
86571: GO 86605
86573: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86574: LD_VAR 0 1
86578: PPUSH
86579: LD_VAR 0 2
86583: PPUSH
86584: LD_VAR 0 3
86588: PPUSH
86589: LD_VAR 0 4
86593: PPUSH
86594: LD_VAR 0 5
86598: PPUSH
86599: CALL 82679 0 5
86603: GO 86682
86605: LD_INT 300
86607: DOUBLE
86608: GREATEREQUAL
86609: IFFALSE 86617
86611: LD_INT 399
86613: DOUBLE
86614: LESSEQUAL
86615: IFTRUE 86619
86617: GO 86681
86619: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86620: LD_VAR 0 1
86624: PPUSH
86625: LD_VAR 0 2
86629: PPUSH
86630: LD_VAR 0 3
86634: PPUSH
86635: LD_VAR 0 4
86639: PPUSH
86640: LD_VAR 0 5
86644: PPUSH
86645: LD_VAR 0 6
86649: PPUSH
86650: LD_VAR 0 7
86654: PPUSH
86655: LD_VAR 0 8
86659: PPUSH
86660: LD_VAR 0 9
86664: PPUSH
86665: LD_VAR 0 10
86669: PPUSH
86670: LD_VAR 0 11
86674: PPUSH
86675: CALL 80585 0 11
86679: GO 86682
86681: POP
// end ;
86682: PPOPN 11
86684: END
