// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 89
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 1013 0 0
// PrepareAmericans ;
 300: CALL 5482 0 0
// Nef_PrepareNature ;
 304: CALL 30702 0 0
// MissionIntro ;
 308: CALL 21802 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 613: LD_ADDR_EXP 48
 617: PUSH
 618: LD_INT 47
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 57
 630: PUSH
 631: LD_INT 39
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 61
 640: PUSH
 641: LD_INT 60
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: LD_INT 44
 650: PUSH
 651: LD_INT 76
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 44
 660: PUSH
 661: LD_INT 4
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: LD_INT 55
 670: PUSH
 671: LD_INT 29
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ;
 686: LD_VAR 0 1
 690: RET
// every 0 0$1 trigger debugMode do var i ;
 691: LD_EXP 37
 695: IFFALSE 1010
 697: GO 699
 699: DISABLE
 700: LD_INT 0
 702: PPUSH
// begin enable ;
 703: ENABLE
// FogOff ( your_side ) ;
 704: LD_OWVAR 2
 708: PPUSH
 709: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 1
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 21
 745: PUSH
 746: LD_INT 2
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: FOR_IN
 768: IFFALSE 784
// SetLives ( i , 1000 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 1000
 777: PPUSH
 778: CALL_OW 234
 782: GO 767
 784: POP
 785: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 786: LD_ADDR_VAR 0 1
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_OWVAR 2
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 21
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PPUSH
 817: CALL_OW 69
 821: PUSH
 822: FOR_IN
 823: IFFALSE 887
// begin SetSkill ( i , skill_combat , 10 ) ;
 825: LD_VAR 0 1
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 10
 835: PPUSH
 836: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 840: LD_VAR 0 1
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: LD_INT 10
 850: PPUSH
 851: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: LD_INT 3
 862: PPUSH
 863: LD_INT 10
 865: PPUSH
 866: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 870: LD_VAR 0 1
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 10
 880: PPUSH
 881: CALL_OW 237
// end ;
 885: GO 822
 887: POP
 888: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 889: LD_ADDR_VAR 0 1
 893: PUSH
 894: LD_INT 22
 896: PUSH
 897: LD_OWVAR 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 2
 908: PUSH
 909: LD_INT 30
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 1008
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 946: LD_VAR 0 1
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 9999
 961: PPUSH
 962: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: CALL_OW 274
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 9999
 981: PPUSH
 982: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 986: LD_VAR 0 1
 990: PPUSH
 991: CALL_OW 274
 995: PPUSH
 996: LD_INT 3
 998: PPUSH
 999: LD_INT 9999
1001: PPUSH
1002: CALL_OW 277
// end ;
1006: GO 943
1008: POP
1009: POP
// end ; end_of_file
1010: PPOPN 1
1012: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1013: LD_INT 0
1015: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1016: LD_ADDR_EXP 81
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 0
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 0
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1039: LD_ADDR_EXP 75
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// PrepareKirovBase ;
1046: CALL 2102 0 0
// PrepareHeroes ;
1050: CALL 1083 0 0
// PrepareKirovPersonel ;
1054: CALL 2867 0 0
// PrepareBeriaBase ;
1058: CALL 1504 0 0
// PrepareSecondBaseTeam ;
1062: CALL 4010 0 0
// PrepareGrishko ;
1066: CALL 3195 0 0
// PrepareOtherBuildings ;
1070: CALL 3444 0 0
// PrepareVehicles ;
1074: CALL 3268 0 0
// end ;
1078: LD_VAR 0 1
1082: RET
// function PrepareHeroes ; begin
1083: LD_INT 0
1085: PPUSH
// uc_side = 3 ;
1086: LD_ADDR_OWVAR 20
1090: PUSH
1091: LD_INT 3
1093: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1094: LD_ADDR_EXP 49
1098: PUSH
1099: LD_STRING Burlak
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL 6912 0 2
1109: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1110: LD_ADDR_EXP 50
1114: PUSH
1115: LD_STRING Gnyevko
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL 6912 0 2
1125: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1126: LD_ADDR_EXP 52
1130: PUSH
1131: LD_STRING Kovalyuk
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL 6912 0 2
1141: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1142: LD_ADDR_EXP 51
1146: PUSH
1147: LD_STRING Kirilenkova
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL 6912 0 2
1157: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1158: LD_EXP 49
1162: PUSH
1163: LD_EXP 50
1167: PUSH
1168: LD_EXP 52
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1185: LD_EXP 51
1189: PPUSH
1190: LD_INT 4
1192: PPUSH
1193: CALL_OW 336
// uc_side = 6 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 6
1204: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1205: LD_EXP 1
1209: NOT
1210: PUSH
1211: LD_STRING 02_Belkov
1213: PPUSH
1214: CALL_OW 28
1218: AND
1219: IFFALSE 1320
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1221: LD_ADDR_EXP 53
1225: PUSH
1226: LD_STRING Belkov
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: CALL 6912 0 2
1236: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1237: LD_STRING 02_Belkov2
1239: PPUSH
1240: CALL_OW 28
1244: IFFALSE 1283
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1246: LD_ADDR_EXP 54
1250: PUSH
1251: LD_STRING Belkov2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL 6912 0 2
1261: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1262: LD_EXP 54
1266: PPUSH
1267: LD_INT 159
1269: PPUSH
1270: LD_INT 107
1272: PPUSH
1273: LD_INT 5
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1283: LD_ADDR_EXP 63
1287: PUSH
1288: LD_EXP 53
1292: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1293: LD_EXP 53
1297: PPUSH
1298: LD_INT 165
1300: PPUSH
1301: LD_INT 110
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 48
// ComHold ( Belkov ) ;
1311: LD_EXP 53
1315: PPUSH
1316: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1320: LD_EXP 1
1324: PUSH
1325: LD_STRING 02_Belkov2
1327: PPUSH
1328: CALL_OW 28
1332: AND
1333: IFFALSE 1388
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1335: LD_ADDR_EXP 54
1339: PUSH
1340: LD_STRING Belkov2
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL 6912 0 2
1350: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1351: LD_ADDR_EXP 63
1355: PUSH
1356: LD_EXP 54
1360: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1361: LD_EXP 54
1365: PPUSH
1366: LD_INT 165
1368: PPUSH
1369: LD_INT 110
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 48
// ComHold ( Belkov2 ) ;
1379: LD_EXP 54
1383: PPUSH
1384: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1388: LD_EXP 53
1392: PUSH
1393: LD_EXP 54
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1409: LD_EXP 49
1413: PPUSH
1414: LD_INT 164
1416: PPUSH
1417: LD_INT 108
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 48
// ComHold ( Burlak ) ;
1427: LD_EXP 49
1431: PPUSH
1432: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1436: LD_EXP 50
1440: PPUSH
1441: LD_INT 159
1443: PPUSH
1444: LD_INT 107
1446: PPUSH
1447: LD_INT 5
1449: PPUSH
1450: LD_INT 0
1452: PPUSH
1453: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1457: LD_EXP 52
1461: PPUSH
1462: LD_INT 159
1464: PPUSH
1465: LD_INT 107
1467: PPUSH
1468: LD_INT 5
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1478: LD_EXP 51
1482: PPUSH
1483: LD_INT 159
1485: PPUSH
1486: LD_INT 107
1488: PPUSH
1489: LD_INT 5
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 50
// end ;
1499: LD_VAR 0 1
1503: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1504: LD_INT 0
1506: PPUSH
1507: PPUSH
1508: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1509: LD_ADDR_EXP 59
1513: PUSH
1514: LD_STRING 02_BeriaBase_2
1516: PPUSH
1517: EMPTY
1518: PPUSH
1519: CALL_OW 30
1523: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1524: LD_ADDR_EXP 58
1528: PUSH
1529: LD_STRING 02_other_beria
1531: PPUSH
1532: CALL_OW 31
1536: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1537: LD_ADDR_EXP 56
1541: PUSH
1542: LD_STRING 02_other_survivors
1544: PPUSH
1545: CALL_OW 31
1549: ST_TO_ADDR
// uc_side = 3 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 3
1557: ST_TO_ADDR
// uc_nation = 3 ;
1558: LD_ADDR_OWVAR 21
1562: PUSH
1563: LD_INT 3
1565: ST_TO_ADDR
// for i := 1 to beriaBase do
1566: LD_ADDR_VAR 0 2
1570: PUSH
1571: DOUBLE
1572: LD_INT 1
1574: DEC
1575: ST_TO_ADDR
1576: LD_EXP 59
1580: PUSH
1581: FOR_TO
1582: IFFALSE 1835
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1584: LD_ADDR_OWVAR 42
1588: PUSH
1589: LD_EXP 59
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 1
1602: ARRAY
1603: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1604: LD_ADDR_OWVAR 43
1608: PUSH
1609: LD_EXP 59
1613: PUSH
1614: LD_VAR 0 2
1618: ARRAY
1619: PUSH
1620: LD_INT 5
1622: ARRAY
1623: ST_TO_ADDR
// if bc_type = b_lab then
1624: LD_OWVAR 42
1628: PUSH
1629: LD_INT 6
1631: EQUAL
1632: IFFALSE 1650
// begin bc_kind1 = b_lab_basic ;
1634: LD_ADDR_OWVAR 44
1638: PUSH
1639: LD_INT 9
1641: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1642: LD_ADDR_OWVAR 45
1646: PUSH
1647: LD_INT 9
1649: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1650: LD_OWVAR 42
1654: PUSH
1655: LD_INT 7
1657: EQUAL
1658: PUSH
1659: LD_OWVAR 42
1663: PUSH
1664: LD_INT 8
1666: EQUAL
1667: OR
1668: IFFALSE 1784
// begin if beriaBase [ i ] [ 7 ] then
1670: LD_EXP 59
1674: PUSH
1675: LD_VAR 0 2
1679: ARRAY
1680: PUSH
1681: LD_INT 7
1683: ARRAY
1684: IFFALSE 1706
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1686: LD_ADDR_OWVAR 44
1690: PUSH
1691: LD_EXP 59
1695: PUSH
1696: LD_VAR 0 2
1700: ARRAY
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1706: LD_EXP 59
1710: PUSH
1711: LD_VAR 0 2
1715: ARRAY
1716: PUSH
1717: LD_INT 8
1719: ARRAY
1720: IFFALSE 1742
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_EXP 59
1731: PUSH
1732: LD_VAR 0 2
1736: ARRAY
1737: PUSH
1738: LD_INT 8
1740: ARRAY
1741: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1742: LD_EXP 59
1746: PUSH
1747: LD_VAR 0 2
1751: ARRAY
1752: PUSH
1753: LD_INT 7
1755: ARRAY
1756: NOT
1757: PUSH
1758: LD_EXP 59
1762: PUSH
1763: LD_VAR 0 2
1767: ARRAY
1768: PUSH
1769: LD_INT 8
1771: ARRAY
1772: NOT
1773: AND
1774: IFFALSE 1784
// bc_type := b_lab ;
1776: LD_ADDR_OWVAR 42
1780: PUSH
1781: LD_INT 6
1783: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1784: LD_EXP 59
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: LD_EXP 59
1803: PUSH
1804: LD_VAR 0 2
1808: ARRAY
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_EXP 59
1818: PUSH
1819: LD_VAR 0 2
1823: ARRAY
1824: PUSH
1825: LD_INT 4
1827: ARRAY
1828: PPUSH
1829: CALL_OW 47
// end ;
1833: GO 1581
1835: POP
1836: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1837: LD_ADDR_EXP 60
1841: PUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 30
1854: PUSH
1855: LD_INT 0
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PPUSH
1866: CALL_OW 69
1870: PUSH
1871: LD_INT 1
1873: ARRAY
1874: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1875: LD_EXP 60
1879: PPUSH
1880: LD_STRING beria
1882: PPUSH
1883: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1887: LD_EXP 60
1891: PPUSH
1892: CALL_OW 274
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: LD_EXP 2
1904: PPUSH
1905: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1909: LD_EXP 60
1913: PPUSH
1914: CALL_OW 274
1918: PPUSH
1919: LD_INT 2
1921: PPUSH
1922: LD_EXP 3
1926: PPUSH
1927: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1931: LD_EXP 60
1935: PPUSH
1936: CALL_OW 274
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_EXP 60
1948: PPUSH
1949: CALL_OW 274
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 275
1961: PUSH
1962: LD_EXP 41
1966: PLUS
1967: PPUSH
1968: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1972: LD_EXP 60
1976: PPUSH
1977: CALL_OW 274
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_EXP 60
1989: PPUSH
1990: CALL_OW 274
1994: PPUSH
1995: LD_INT 2
1997: PPUSH
1998: CALL_OW 275
2002: PUSH
2003: LD_EXP 42
2007: PLUS
2008: PPUSH
2009: CALL_OW 277
// uc_side = 6 ;
2013: LD_ADDR_OWVAR 20
2017: PUSH
2018: LD_INT 6
2020: ST_TO_ADDR
// for i in otherBeriaUnits do
2021: LD_ADDR_VAR 0 2
2025: PUSH
2026: LD_EXP 58
2030: PUSH
2031: FOR_IN
2032: IFFALSE 2057
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2034: LD_VAR 0 2
2038: PPUSH
2039: LD_INT 159
2041: PPUSH
2042: LD_INT 107
2044: PPUSH
2045: LD_INT 10
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 50
2055: GO 2031
2057: POP
2058: POP
// for i in other_survivors do
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: LD_EXP 56
2068: PUSH
2069: FOR_IN
2070: IFFALSE 2095
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 159
2079: PPUSH
2080: LD_INT 107
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 50
2093: GO 2069
2095: POP
2096: POP
// end ;
2097: LD_VAR 0 1
2101: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2102: LD_INT 0
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2108: LD_ADDR_EXP 66
2112: PUSH
2113: LD_STRING 02_KirovBase_3
2115: PPUSH
2116: EMPTY
2117: PPUSH
2118: CALL_OW 30
2122: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2123: LD_ADDR_EXP 65
2127: PUSH
2128: LD_STRING 02_other_kirov
2130: PPUSH
2131: CALL_OW 31
2135: ST_TO_ADDR
// uc_side = 6 ;
2136: LD_ADDR_OWVAR 20
2140: PUSH
2141: LD_INT 6
2143: ST_TO_ADDR
// uc_nation = 3 ;
2144: LD_ADDR_OWVAR 21
2148: PUSH
2149: LD_INT 3
2151: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2152: LD_ADDR_EXP 61
2156: PUSH
2157: LD_STRING Kurin
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL 6912 0 2
2167: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2168: LD_EXP 61
2172: PPUSH
2173: LD_INT 166
2175: PPUSH
2176: LD_INT 109
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 48
// ComHold ( Kurin ) ;
2186: LD_EXP 61
2190: PPUSH
2191: CALL_OW 140
// for i := 1 to kirovBase do
2195: LD_ADDR_VAR 0 2
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_EXP 66
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2649
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2213: LD_ADDR_OWVAR 42
2217: PUSH
2218: LD_EXP 66
2222: PUSH
2223: LD_VAR 0 2
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_EXP 66
2242: PUSH
2243: LD_VAR 0 2
2247: ARRAY
2248: PUSH
2249: LD_INT 5
2251: ARRAY
2252: ST_TO_ADDR
// if bc_type = b_depot then
2253: LD_OWVAR 42
2257: PUSH
2258: LD_INT 0
2260: EQUAL
2261: IFFALSE 2271
// bc_type = b_warehouse ;
2263: LD_ADDR_OWVAR 42
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if bc_type = b_armoury then
2271: LD_OWVAR 42
2275: PUSH
2276: LD_INT 4
2278: EQUAL
2279: IFFALSE 2289
// bc_type = b_barracks ;
2281: LD_ADDR_OWVAR 42
2285: PUSH
2286: LD_INT 5
2288: ST_TO_ADDR
// if bc_type = b_lab then
2289: LD_OWVAR 42
2293: PUSH
2294: LD_INT 6
2296: EQUAL
2297: IFFALSE 2315
// begin bc_kind1 = b_lab_weapon ;
2299: LD_ADDR_OWVAR 44
2303: PUSH
2304: LD_INT 10
2306: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2307: LD_ADDR_OWVAR 45
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2315: LD_OWVAR 42
2319: PUSH
2320: LD_INT 2
2322: EQUAL
2323: IFFALSE 2333
// bc_type = b_factory ;
2325: LD_ADDR_OWVAR 42
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2333: LD_OWVAR 42
2337: PUSH
2338: LD_INT 7
2340: EQUAL
2341: PUSH
2342: LD_OWVAR 42
2346: PUSH
2347: LD_INT 8
2349: EQUAL
2350: OR
2351: IFFALSE 2467
// begin if kirovBase [ i ] [ 7 ] then
2353: LD_EXP 66
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: PUSH
2364: LD_INT 7
2366: ARRAY
2367: IFFALSE 2389
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2369: LD_ADDR_OWVAR 44
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 7
2387: ARRAY
2388: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2389: LD_EXP 66
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 8
2402: ARRAY
2403: IFFALSE 2425
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2405: LD_ADDR_OWVAR 45
2409: PUSH
2410: LD_EXP 66
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 8
2423: ARRAY
2424: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2425: LD_EXP 66
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: PUSH
2436: LD_INT 7
2438: ARRAY
2439: NOT
2440: PUSH
2441: LD_EXP 66
2445: PUSH
2446: LD_VAR 0 2
2450: ARRAY
2451: PUSH
2452: LD_INT 8
2454: ARRAY
2455: NOT
2456: AND
2457: IFFALSE 2467
// bc_type := b_lab ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_INT 6
2466: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2467: LD_OWVAR 42
2471: PUSH
2472: LD_INT 31
2474: EQUAL
2475: IFFALSE 2499
// begin bc_type = b_bunker ;
2477: LD_ADDR_OWVAR 42
2481: PUSH
2482: LD_INT 32
2484: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2485: LD_ADDR_EXP 77
2489: PUSH
2490: LD_EXP 77
2494: PUSH
2495: LD_INT 1
2497: PLUS
2498: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2499: LD_ADDR_VAR 0 4
2503: PUSH
2504: LD_EXP 66
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: PPUSH
2519: LD_EXP 66
2523: PUSH
2524: LD_VAR 0 2
2528: ARRAY
2529: PUSH
2530: LD_INT 3
2532: ARRAY
2533: PPUSH
2534: LD_EXP 66
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 4
2547: ARRAY
2548: PPUSH
2549: CALL_OW 47
2553: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 4
2561: LESS
2562: PUSH
2563: LD_OWVAR 42
2567: PUSH
2568: LD_INT 32
2570: EQUAL
2571: AND
2572: IFFALSE 2621
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_INT 42
2581: PUSH
2582: LD_INT 43
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 1
2591: PPUSH
2592: LD_INT 2
2594: PPUSH
2595: CALL_OW 12
2599: ARRAY
2600: PPUSH
2601: CALL_OW 431
// tmp = tmp + 1 ;
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: ST_TO_ADDR
// end else
2619: GO 2647
// if bc_type = b_bunker then
2621: LD_OWVAR 42
2625: PUSH
2626: LD_INT 32
2628: EQUAL
2629: IFFALSE 2647
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2631: LD_ADDR_EXP 72
2635: PUSH
2636: LD_EXP 72
2640: PUSH
2641: LD_VAR 0 4
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2210
2649: POP
2650: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2651: LD_ADDR_EXP 67
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 6
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 1
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2689: LD_EXP 67
2693: PPUSH
2694: LD_STRING kirov
2696: PPUSH
2697: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2701: LD_EXP 67
2705: PPUSH
2706: CALL_OW 274
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 5000
2716: PPUSH
2717: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2721: LD_EXP 67
2725: PPUSH
2726: CALL_OW 274
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: LD_INT 2000
2736: PPUSH
2737: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2741: LD_ADDR_EXP 69
2745: PUSH
2746: LD_INT 22
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 21
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 5
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PPUSH
2786: LD_INT 145
2788: PPUSH
2789: LD_INT 102
2791: PPUSH
2792: CALL_OW 73
2796: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2797: LD_ADDR_EXP 70
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 6
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL_OW 69
2841: PUSH
2842: LD_EXP 69
2846: DIFF
2847: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2848: LD_ADDR_EXP 70
2852: PUSH
2853: LD_EXP 70
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: ST_TO_ADDR
// end ;
2862: LD_VAR 0 1
2866: RET
// export function PrepareKirovPersonel ; var i ; begin
2867: LD_INT 0
2869: PPUSH
2870: PPUSH
// PrepareEngineer ( false , 7 ) ;
2871: LD_INT 0
2873: PPUSH
2874: LD_INT 7
2876: PPUSH
2877: CALL_OW 382
// kirovEng = CreateHuman ;
2881: LD_ADDR_EXP 71
2885: PUSH
2886: CALL_OW 44
2890: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2891: LD_EXP 71
2895: PPUSH
2896: LD_INT 159
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 10
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2912: LD_ADDR_EXP 62
2916: PUSH
2917: LD_STRING Popov
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL 6912 0 2
2927: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2928: LD_EXP 62
2932: PPUSH
2933: LD_INT 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2943: LD_EXP 62
2947: PPUSH
2948: LD_INT 98
2950: PPUSH
2951: LD_INT 36
2953: PPUSH
2954: CALL_OW 118
// hc_name :=  ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING 
2965: ST_TO_ADDR
// hc_gallery :=  ;
2966: LD_ADDR_OWVAR 33
2970: PUSH
2971: LD_STRING 
2973: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 381
// ruScout = CreateHuman ;
2984: LD_ADDR_EXP 64
2988: PUSH
2989: CALL_OW 44
2993: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2994: LD_EXP 64
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: CALL_OW 49
// ComCrawl ( ruScout ) ;
3009: LD_EXP 64
3013: PPUSH
3014: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3018: LD_EXP 64
3022: PPUSH
3023: LD_INT 98
3025: PPUSH
3026: LD_INT 36
3028: PPUSH
3029: CALL_OW 178
// uc_side = 6 ;
3033: LD_ADDR_OWVAR 20
3037: PUSH
3038: LD_INT 6
3040: ST_TO_ADDR
// for i in otherKirovUnits do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: LD_EXP 65
3050: PUSH
3051: FOR_IN
3052: IFFALSE 3188
// begin SetSide ( i , 6 ) ;
3054: LD_VAR 0 2
3058: PPUSH
3059: LD_INT 6
3061: PPUSH
3062: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3066: LD_VAR 0 2
3070: PPUSH
3071: CALL_OW 257
3075: PUSH
3076: LD_INT 1
3078: EQUAL
3079: PUSH
3080: LD_EXP 77
3084: PUSH
3085: LD_INT 0
3087: GREATER
3088: AND
3089: IFFALSE 3165
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_INT 18
3098: PPUSH
3099: LD_INT 22
3101: PUSH
3102: LD_INT 6
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 21
3111: PUSH
3112: LD_INT 3
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 30
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 70
3138: PUSH
3139: LD_EXP 77
3143: ARRAY
3144: PPUSH
3145: CALL 8456 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3149: LD_ADDR_EXP 77
3153: PUSH
3154: LD_EXP 77
3158: PUSH
3159: LD_INT 1
3161: MINUS
3162: ST_TO_ADDR
// end else
3163: GO 3186
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3165: LD_VAR 0 2
3169: PPUSH
3170: LD_INT 159
3172: PPUSH
3173: LD_INT 107
3175: PPUSH
3176: LD_INT 10
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 50
// end ; end ;
3186: GO 3051
3188: POP
3189: POP
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
3200: PPUSH
// uc_side = 6 ;
3201: LD_ADDR_OWVAR 20
3205: PUSH
3206: LD_INT 6
3208: ST_TO_ADDR
// uc_nation = 3 ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: LD_INT 3
3216: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3217: LD_ADDR_EXP 82
3221: PUSH
3222: LD_STRING Grishko
3224: PPUSH
3225: LD_INT 0
3227: PPUSH
3228: CALL 6912 0 2
3232: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3233: LD_EXP 82
3237: PPUSH
3238: LD_INT 218
3240: PPUSH
3241: LD_INT 108
3243: PPUSH
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 50
// ComHold ( Grishko ) ;
3254: LD_EXP 82
3258: PPUSH
3259: CALL_OW 140
// end ;
3263: LD_VAR 0 1
3267: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
// uc_side = 3 ;
3273: LD_ADDR_OWVAR 20
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// uc_nation = 3 ;
3281: LD_ADDR_OWVAR 21
3285: PUSH
3286: LD_INT 3
3288: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_EXP 4
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3437
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3307: LD_EXP 4
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: LD_EXP 4
3326: PUSH
3327: LD_VAR 0 2
3331: ARRAY
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_EXP 4
3341: PUSH
3342: LD_VAR 0 2
3346: ARRAY
3347: PUSH
3348: LD_INT 3
3350: ARRAY
3351: PPUSH
3352: LD_EXP 4
3356: PUSH
3357: LD_VAR 0 2
3361: ARRAY
3362: PUSH
3363: LD_INT 4
3365: ARRAY
3366: PPUSH
3367: LD_EXP 4
3371: PUSH
3372: LD_VAR 0 2
3376: ARRAY
3377: PUSH
3378: LD_INT 5
3380: ARRAY
3381: PPUSH
3382: CALL 36345 0 5
// vehicle = CreateVehicle ;
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: CALL_OW 45
3395: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_INT 25
3403: PPUSH
3404: LD_INT 0
3406: PPUSH
3407: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3411: LD_VAR 0 3
3415: PPUSH
3416: LD_EXP 4
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: PUSH
3427: LD_INT 6
3429: ARRAY
3430: PPUSH
3431: CALL_OW 234
// end ;
3435: GO 3304
3437: POP
3438: POP
// end ;
3439: LD_VAR 0 1
3443: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3444: LD_INT 0
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: LD_STRING 02_OtherBuildings_4
3457: PPUSH
3458: EMPTY
3459: PPUSH
3460: CALL_OW 30
3464: ST_TO_ADDR
// uc_side = 3 ;
3465: LD_ADDR_OWVAR 20
3469: PUSH
3470: LD_INT 3
3472: ST_TO_ADDR
// for i := 1 to otherBuildings do
3473: LD_ADDR_VAR 0 2
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_VAR 0 3
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3750
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3491: LD_ADDR_OWVAR 21
3495: PUSH
3496: LD_VAR 0 3
3500: PUSH
3501: LD_VAR 0 2
3505: ARRAY
3506: PUSH
3507: LD_INT 6
3509: ARRAY
3510: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_VAR 0 3
3520: PUSH
3521: LD_VAR 0 2
3525: ARRAY
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3531: LD_ADDR_OWVAR 43
3535: PUSH
3536: LD_VAR 0 3
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 5
3549: ARRAY
3550: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PUSH
3567: LD_INT 2
3569: ARRAY
3570: PPUSH
3571: LD_VAR 0 3
3575: PUSH
3576: LD_VAR 0 2
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: PPUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_VAR 0 2
3595: ARRAY
3596: PUSH
3597: LD_INT 4
3599: ARRAY
3600: PPUSH
3601: CALL_OW 47
3605: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_VAR 0 3
3615: PUSH
3616: LD_VAR 0 2
3620: ARRAY
3621: PUSH
3622: LD_INT 7
3624: ARRAY
3625: PPUSH
3626: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3630: LD_VAR 0 4
3634: PPUSH
3635: CALL_OW 266
3639: PUSH
3640: LD_INT 0
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: IN
3650: IFFALSE 3748
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3652: LD_VAR 0 4
3656: PPUSH
3657: CALL_OW 274
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: PUSH
3676: LD_INT 8
3678: ARRAY
3679: PPUSH
3680: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3684: LD_VAR 0 4
3688: PPUSH
3689: CALL_OW 274
3693: PPUSH
3694: LD_INT 1
3696: PPUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_VAR 0 2
3706: ARRAY
3707: PUSH
3708: LD_INT 9
3710: ARRAY
3711: PPUSH
3712: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3716: LD_VAR 0 4
3720: PPUSH
3721: CALL_OW 274
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_VAR 0 2
3738: ARRAY
3739: PUSH
3740: LD_INT 10
3742: ARRAY
3743: PPUSH
3744: CALL_OW 277
// end ; end ;
3748: GO 3488
3750: POP
3751: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3752: LD_ADDR_VAR 0 3
3756: PUSH
3757: LD_STRING 02_AmericanBuildings_5
3759: PPUSH
3760: EMPTY
3761: PPUSH
3762: CALL_OW 30
3766: ST_TO_ADDR
// uc_side = 1 ;
3767: LD_ADDR_OWVAR 20
3771: PUSH
3772: LD_INT 1
3774: ST_TO_ADDR
// uc_nation = 1 ;
3775: LD_ADDR_OWVAR 21
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// for i := 1 to otherBuildings do
3783: LD_ADDR_VAR 0 2
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_VAR 0 3
3797: PUSH
3798: FOR_TO
3799: IFFALSE 4003
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3801: LD_ADDR_OWVAR 42
3805: PUSH
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 2
3815: ARRAY
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3821: LD_ADDR_OWVAR 43
3825: PUSH
3826: LD_VAR 0 3
3830: PUSH
3831: LD_VAR 0 2
3835: ARRAY
3836: PUSH
3837: LD_INT 5
3839: ARRAY
3840: ST_TO_ADDR
// if bc_type = b_breastwork then
3841: LD_OWVAR 42
3845: PUSH
3846: LD_INT 31
3848: EQUAL
3849: IFFALSE 3922
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3851: LD_ADDR_VAR 0 4
3855: PUSH
3856: LD_VAR 0 3
3860: PUSH
3861: LD_VAR 0 2
3865: ARRAY
3866: PUSH
3867: LD_INT 2
3869: ARRAY
3870: PPUSH
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 2
3880: ARRAY
3881: PUSH
3882: LD_INT 3
3884: ARRAY
3885: PPUSH
3886: LD_VAR 0 3
3890: PUSH
3891: LD_VAR 0 2
3895: ARRAY
3896: PUSH
3897: LD_INT 4
3899: ARRAY
3900: PPUSH
3901: CALL_OW 47
3905: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3906: LD_EXP 43
3910: PPUSH
3911: LD_VAR 0 4
3915: PPUSH
3916: CALL 8546 0 2
// end else
3920: GO 3977
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3922: LD_ADDR_VAR 0 4
3926: PUSH
3927: LD_VAR 0 3
3931: PUSH
3932: LD_VAR 0 2
3936: ARRAY
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PPUSH
3942: LD_VAR 0 3
3946: PUSH
3947: LD_VAR 0 2
3951: ARRAY
3952: PUSH
3953: LD_INT 3
3955: ARRAY
3956: PPUSH
3957: LD_VAR 0 3
3961: PUSH
3962: LD_VAR 0 2
3966: ARRAY
3967: PUSH
3968: LD_INT 4
3970: ARRAY
3971: PPUSH
3972: CALL_OW 47
3976: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3977: LD_VAR 0 4
3981: PPUSH
3982: LD_VAR 0 3
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: PUSH
3993: LD_INT 7
3995: ARRAY
3996: PPUSH
3997: CALL_OW 234
// end ;
4001: GO 3798
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// secondBaseTeam = [ ] ;
4014: LD_ADDR_EXP 78
4018: PUSH
4019: EMPTY
4020: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4021: LD_INT 226
4023: PPUSH
4024: LD_INT 109
4026: PPUSH
4027: LD_INT 6
4029: PPUSH
4030: CALL_OW 441
// uc_side = 6 ;
4034: LD_ADDR_OWVAR 20
4038: PUSH
4039: LD_INT 6
4041: ST_TO_ADDR
// uc_nation = 3 ;
4042: LD_ADDR_OWVAR 21
4046: PUSH
4047: LD_INT 3
4049: ST_TO_ADDR
// hc_name =  ;
4050: LD_ADDR_OWVAR 26
4054: PUSH
4055: LD_STRING 
4057: ST_TO_ADDR
// hc_gallery =  ;
4058: LD_ADDR_OWVAR 33
4062: PUSH
4063: LD_STRING 
4065: ST_TO_ADDR
// for i := 1 to 3 do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_INT 3
4078: PUSH
4079: FOR_TO
4080: IFFALSE 4133
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_EXP 43
4089: PPUSH
4090: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4094: LD_ADDR_EXP 78
4098: PUSH
4099: LD_EXP 78
4103: PUSH
4104: CALL_OW 44
4108: ADD
4109: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4110: LD_EXP 78
4114: PUSH
4115: LD_VAR 0 2
4119: ARRAY
4120: PPUSH
4121: LD_INT 19
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 49
// end ;
4131: GO 4079
4133: POP
4134: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4135: LD_INT 0
4137: PPUSH
4138: LD_EXP 43
4142: PPUSH
4143: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4147: LD_ADDR_EXP 78
4151: PUSH
4152: LD_EXP 78
4156: PUSH
4157: CALL_OW 44
4161: ADD
4162: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4163: LD_EXP 78
4167: PUSH
4168: LD_INT 4
4170: ARRAY
4171: PPUSH
4172: LD_INT 19
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4182: LD_INT 0
4184: PPUSH
4185: LD_EXP 43
4189: PPUSH
4190: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4194: LD_ADDR_EXP 78
4198: PUSH
4199: LD_EXP 78
4203: PUSH
4204: CALL_OW 44
4208: ADD
4209: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4210: LD_EXP 78
4214: PUSH
4215: LD_INT 5
4217: ARRAY
4218: PPUSH
4219: LD_INT 19
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4229: LD_EXP 78
4233: PPUSH
4234: LD_INT 214
4236: PPUSH
4237: LD_INT 105
4239: PPUSH
4240: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4244: LD_EXP 78
4248: PPUSH
4249: LD_INT 25
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PPUSH
4259: CALL_OW 72
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 222
4269: PPUSH
4270: LD_INT 115
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4280: LD_EXP 78
4284: PPUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 2
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 72
4299: PPUSH
4300: LD_INT 224
4302: PPUSH
4303: LD_INT 107
4305: PPUSH
4306: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4310: LD_EXP 78
4314: PPUSH
4315: LD_INT 25
4317: PUSH
4318: LD_INT 2
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 72
4329: PPUSH
4330: LD_INT 228
4332: PPUSH
4333: LD_INT 110
4335: PPUSH
4336: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4340: LD_EXP 78
4344: PPUSH
4345: LD_INT 25
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PPUSH
4355: CALL_OW 72
4359: PPUSH
4360: LD_INT 29
4362: PPUSH
4363: LD_INT 226
4365: PPUSH
4366: LD_INT 109
4368: PPUSH
4369: LD_INT 3
4371: PPUSH
4372: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4376: LD_EXP 78
4380: PPUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 72
4395: PPUSH
4396: LD_INT 4
4398: PPUSH
4399: LD_INT 216
4401: PPUSH
4402: LD_INT 114
4404: PPUSH
4405: LD_INT 0
4407: PPUSH
4408: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4412: LD_EXP 78
4416: PPUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PPUSH
4432: LD_INT 31
4434: PPUSH
4435: LD_INT 215
4437: PPUSH
4438: LD_INT 103
4440: PPUSH
4441: LD_INT 3
4443: PPUSH
4444: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4448: LD_EXP 78
4452: PPUSH
4453: LD_INT 25
4455: PUSH
4456: LD_INT 2
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 72
4467: PPUSH
4468: LD_INT 31
4470: PPUSH
4471: LD_INT 227
4473: PPUSH
4474: LD_INT 116
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4484: LD_EXP 78
4488: PPUSH
4489: LD_INT 25
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PPUSH
4499: CALL_OW 72
4503: PPUSH
4504: LD_INT 208
4506: PPUSH
4507: LD_INT 106
4509: PPUSH
4510: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4514: LD_EXP 78
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 2
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: PPUSH
4534: LD_INT 209
4536: PPUSH
4537: LD_INT 105
4539: PPUSH
4540: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4544: LD_EXP 78
4548: PUSH
4549: LD_INT 5
4551: ARRAY
4552: PPUSH
4553: LD_INT 209
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4563: LD_EXP 78
4567: PUSH
4568: LD_INT 5
4570: ARRAY
4571: PPUSH
4572: LD_INT 208
4574: PPUSH
4575: LD_INT 106
4577: PPUSH
4578: CALL_OW 178
// end ;
4582: LD_VAR 0 1
4586: RET
// export function SpawnKirovSupport ; var i , un ; begin
4587: LD_INT 0
4589: PPUSH
4590: PPUSH
4591: PPUSH
// uc_side = 6 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 6
4599: ST_TO_ADDR
// uc_nation = 3 ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 3
4607: ST_TO_ADDR
// hc_name =  ;
4608: LD_ADDR_OWVAR 26
4612: PUSH
4613: LD_STRING 
4615: ST_TO_ADDR
// hc_gallery :=  ;
4616: LD_ADDR_OWVAR 33
4620: PUSH
4621: LD_STRING 
4623: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_EXP 80
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4728
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4642: LD_INT 0
4644: PPUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 4
4650: PPUSH
4651: CALL_OW 12
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 2
4661: PPUSH
4662: CALL_OW 12
4666: PPUSH
4667: CALL_OW 380
// un = CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4681: LD_ADDR_EXP 79
4685: PUSH
4686: LD_EXP 79
4690: PUSH
4691: LD_VAR 0 3
4695: ADD
4696: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 19
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4712: LD_VAR 0 3
4716: PPUSH
4717: LD_EXP 67
4721: PPUSH
4722: CALL_OW 120
// end ;
4726: GO 4639
4728: POP
4729: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 81
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PUSH
4749: LD_INT 4
4751: PLUS
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4852
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4756: LD_INT 0
4758: PPUSH
4759: LD_INT 1
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 12
4772: PPUSH
4773: CALL_OW 380
// un = CreateHuman ;
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: CALL_OW 44
4786: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4787: LD_VAR 0 3
4791: PPUSH
4792: LD_INT 19
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
// if i > kirovBunkersToOccupy then
4802: LD_VAR 0 2
4806: PUSH
4807: LD_EXP 73
4811: GREATER
4812: IFFALSE 4830
// ComEnterUnit ( un , ru2_bar2 ) else
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_EXP 70
4823: PPUSH
4824: CALL_OW 120
4828: GO 4850
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_EXP 73
4839: PUSH
4840: LD_VAR 0 2
4844: ARRAY
4845: PPUSH
4846: CALL_OW 120
// end ;
4850: GO 4753
4852: POP
4853: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_EXP 81
4868: PUSH
4869: LD_INT 3
4871: ARRAY
4872: PUSH
4873: FOR_TO
4874: IFFALSE 4977
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4876: LD_INT 0
4878: PPUSH
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: LD_INT 3
4887: PPUSH
4888: CALL_OW 12
4892: PPUSH
4893: CALL_OW 380
// un = CreateHuman ;
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: CALL_OW 44
4906: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_INT 19
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4922: LD_VAR 0 3
4926: PPUSH
4927: LD_INT 22
4929: PUSH
4930: LD_INT 6
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 21
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 3
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: PPUSH
4962: CALL_OW 69
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: CALL_OW 120
// end ;
4975: GO 4873
4977: POP
4978: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4979: LD_ADDR_VAR 0 2
4983: PUSH
4984: DOUBLE
4985: LD_INT 1
4987: DEC
4988: ST_TO_ADDR
4989: LD_EXP 81
4993: PUSH
4994: LD_INT 4
4996: ARRAY
4997: PUSH
4998: LD_INT 2
5000: PLUS
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5109
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5005: LD_INT 0
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: LD_INT 3
5016: PPUSH
5017: CALL_OW 12
5021: PPUSH
5022: CALL_OW 380
// un = CreateHuman ;
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: CALL_OW 44
5035: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5036: LD_VAR 0 3
5040: PPUSH
5041: LD_INT 19
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 18
5058: PPUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 21
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 70
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PPUSH
5103: CALL_OW 120
// end ;
5107: GO 5002
5109: POP
5110: POP
// end ;
5111: LD_VAR 0 1
5115: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5116: LD_INT 0
5118: PPUSH
5119: PPUSH
5120: PPUSH
// survivorsArabianAttack = [ ] ;
5121: LD_ADDR_EXP 79
5125: PUSH
5126: EMPTY
5127: ST_TO_ADDR
// limit = 9 ;
5128: LD_ADDR_VAR 0 2
5132: PUSH
5133: LD_INT 9
5135: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5136: LD_ADDR_EXP 79
5140: PUSH
5141: LD_EXP 79
5145: PUSH
5146: LD_EXP 62
5150: ADD
5151: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5152: LD_EXP 53
5156: PPUSH
5157: CALL_OW 302
5161: PUSH
5162: LD_EXP 53
5166: PPUSH
5167: CALL_OW 255
5171: PUSH
5172: LD_INT 6
5174: EQUAL
5175: AND
5176: IFFALSE 5208
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5178: LD_ADDR_EXP 79
5182: PUSH
5183: LD_EXP 79
5187: PUSH
5188: LD_EXP 53
5192: ADD
5193: ST_TO_ADDR
// limit = limit - 1 ;
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_VAR 0 2
5203: PUSH
5204: LD_INT 1
5206: MINUS
5207: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5208: LD_EXP 54
5212: PPUSH
5213: CALL_OW 302
5217: PUSH
5218: LD_EXP 54
5222: PPUSH
5223: CALL_OW 255
5227: PUSH
5228: LD_INT 6
5230: EQUAL
5231: AND
5232: IFFALSE 5264
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5234: LD_ADDR_EXP 79
5238: PUSH
5239: LD_EXP 79
5243: PUSH
5244: LD_EXP 54
5248: ADD
5249: ST_TO_ADDR
// limit = limit - 1 ;
5250: LD_ADDR_VAR 0 2
5254: PUSH
5255: LD_VAR 0 2
5259: PUSH
5260: LD_INT 1
5262: MINUS
5263: ST_TO_ADDR
// end ; for unit in other_survivors do
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_EXP 56
5273: PUSH
5274: FOR_IN
5275: IFFALSE 5335
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5277: LD_VAR 0 3
5281: PPUSH
5282: CALL_OW 302
5286: PUSH
5287: LD_VAR 0 3
5291: PPUSH
5292: CALL_OW 255
5296: PUSH
5297: LD_INT 6
5299: EQUAL
5300: AND
5301: IFFALSE 5333
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5303: LD_ADDR_EXP 79
5307: PUSH
5308: LD_EXP 79
5312: PUSH
5313: LD_VAR 0 3
5317: ADD
5318: ST_TO_ADDR
// limit = limit - 1 ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: MINUS
5332: ST_TO_ADDR
// end ; end ;
5333: GO 5274
5335: POP
5336: POP
// for unit in otherBeriaUnits do
5337: LD_ADDR_VAR 0 3
5341: PUSH
5342: LD_EXP 58
5346: PUSH
5347: FOR_IN
5348: IFFALSE 5408
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5350: LD_VAR 0 3
5354: PPUSH
5355: CALL_OW 302
5359: PUSH
5360: LD_VAR 0 3
5364: PPUSH
5365: CALL_OW 255
5369: PUSH
5370: LD_INT 6
5372: EQUAL
5373: AND
5374: IFFALSE 5406
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5376: LD_ADDR_EXP 79
5380: PUSH
5381: LD_EXP 79
5385: PUSH
5386: LD_VAR 0 3
5390: ADD
5391: ST_TO_ADDR
// limit = limit - 1 ;
5392: LD_ADDR_VAR 0 2
5396: PUSH
5397: LD_VAR 0 2
5401: PUSH
5402: LD_INT 1
5404: MINUS
5405: ST_TO_ADDR
// end ; end ;
5406: GO 5347
5408: POP
5409: POP
// if limit > 0 then
5410: LD_VAR 0 2
5414: PUSH
5415: LD_INT 0
5417: GREATER
5418: IFFALSE 5430
// survivorsToSpawn = limit ;
5420: LD_ADDR_EXP 80
5424: PUSH
5425: LD_VAR 0 2
5429: ST_TO_ADDR
// end ;
5430: LD_VAR 0 1
5434: RET
// export function PrepareScholtze ; begin
5435: LD_INT 0
5437: PPUSH
// uc_side = 8 ;
5438: LD_ADDR_OWVAR 20
5442: PUSH
5443: LD_INT 8
5445: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5446: LD_ADDR_EXP 55
5450: PUSH
5451: LD_STRING Scholtze
5453: PPUSH
5454: LD_INT 0
5456: PPUSH
5457: CALL 6912 0 2
5461: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5462: LD_EXP 55
5466: PPUSH
5467: LD_INT 30
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// end ; end_of_file
5477: LD_VAR 0 1
5481: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5482: LD_INT 0
5484: PPUSH
// amSupportTroops = [ ] ;
5485: LD_ADDR_EXP 84
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// PrepareOmicronBase ;
5492: CALL 5501 0 0
// end ;
5496: LD_VAR 0 1
5500: RET
// function PrepareOmicronBase ; var base ; begin
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5505: LD_ADDR_EXP 86
5509: PUSH
5510: LD_INT 64
5512: PPUSH
5513: LD_INT 13
5515: PPUSH
5516: LD_STRING omikron
5518: PPUSH
5519: LD_INT 1
5521: PUSH
5522: LD_INT 2
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_OWVAR 67
5537: ARRAY
5538: PPUSH
5539: LD_INT 3000
5541: PUSH
5542: LD_INT 3000
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: LD_INT 7
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 4
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL 39754 0 6
5575: ST_TO_ADDR
// case Difficulty of 2 :
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: DOUBLE
5584: EQUAL
5585: IFTRUE 5589
5587: GO 5605
5589: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5590: LD_INT 51
5592: PPUSH
5593: LD_INT 1
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 322
// end ; 3 :
5603: GO 5643
5605: LD_INT 3
5607: DOUBLE
5608: EQUAL
5609: IFTRUE 5613
5611: GO 5642
5613: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5614: LD_INT 49
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5627: LD_INT 51
5629: PPUSH
5630: LD_INT 1
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: CALL_OW 322
// end ; end ;
5640: GO 5643
5642: POP
// end ;
5643: LD_VAR 0 1
5647: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
// amIntroUnits = [ ] ;
5654: LD_ADDR_EXP 83
5658: PUSH
5659: EMPTY
5660: ST_TO_ADDR
// uc_side = 1 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// uc_nation = nation_american ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5677: LD_ADDR_OWVAR 37
5681: PUSH
5682: LD_INT 3
5684: ST_TO_ADDR
// vc_control = control_manual ;
5685: LD_ADDR_OWVAR 38
5689: PUSH
5690: LD_INT 1
5692: ST_TO_ADDR
// vc_engine = engine_combustion ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 1
5700: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5701: LD_ADDR_OWVAR 40
5705: PUSH
5706: LD_INT 5
5708: ST_TO_ADDR
// veh = CreateVehicle ;
5709: LD_ADDR_VAR 0 3
5713: PUSH
5714: CALL_OW 45
5718: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5731: LD_ADDR_EXP 83
5735: PUSH
5736: LD_EXP 83
5740: PUSH
5741: LD_VAR 0 3
5745: ADD
5746: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5747: LD_VAR 0 3
5751: PPUSH
5752: LD_INT 5
5754: PPUSH
5755: LD_INT 0
5757: PPUSH
5758: CALL_OW 49
// for i := 1 to 5 do
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: DOUBLE
5768: LD_INT 1
5770: DEC
5771: ST_TO_ADDR
5772: LD_INT 5
5774: PUSH
5775: FOR_TO
5776: IFFALSE 5873
// begin hc_name :=  ;
5778: LD_ADDR_OWVAR 26
5782: PUSH
5783: LD_STRING 
5785: ST_TO_ADDR
// hc_gallery :=  ;
5786: LD_ADDR_OWVAR 33
5790: PUSH
5791: LD_STRING 
5793: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: CALL_OW 381
// human = CreateHuman ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5814: LD_ADDR_EXP 83
5818: PUSH
5819: LD_EXP 83
5823: PUSH
5824: LD_VAR 0 4
5828: ADD
5829: ST_TO_ADDR
// if i < 5 then
5830: LD_VAR 0 2
5834: PUSH
5835: LD_INT 5
5837: LESS
5838: IFFALSE 5857
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5840: LD_VAR 0 4
5844: PPUSH
5845: LD_INT 5
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 49
5855: GO 5871
// begin PlaceHumanInUnit ( human , veh ) ;
5857: LD_VAR 0 4
5861: PPUSH
5862: LD_VAR 0 3
5866: PPUSH
5867: CALL_OW 52
// end ; end ;
5871: GO 5775
5873: POP
5874: POP
// end ;
5875: LD_VAR 0 1
5879: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
// uc_side := 1 ;
5887: LD_ADDR_OWVAR 20
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
// uc_nation := 1 ;
5895: LD_ADDR_OWVAR 21
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// hc_name :=  ;
5903: LD_ADDR_OWVAR 26
5907: PUSH
5908: LD_STRING 
5910: ST_TO_ADDR
// hc_gallery :=  ;
5911: LD_ADDR_OWVAR 33
5915: PUSH
5916: LD_STRING 
5918: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: DOUBLE
5925: LD_INT 1
5927: DEC
5928: ST_TO_ADDR
5929: LD_VAR 0 1
5933: PUSH
5934: FOR_TO
5935: IFFALSE 5994
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5937: LD_INT 0
5939: PPUSH
5940: LD_EXP 43
5944: PPUSH
5945: CALL_OW 381
// un = CreateHuman ;
5949: LD_ADDR_VAR 0 7
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5959: LD_ADDR_EXP 84
5963: PUSH
5964: LD_EXP 84
5968: PUSH
5969: LD_VAR 0 7
5973: ADD
5974: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5975: LD_VAR 0 7
5979: PPUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 49
// end ;
5992: GO 5934
5994: POP
5995: POP
// for i := 1 to scientistsAmount do
5996: LD_ADDR_VAR 0 6
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_VAR 0 2
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6071
// begin PrepareScientist ( false , enemySkillLevel ) ;
6014: LD_INT 0
6016: PPUSH
6017: LD_EXP 43
6021: PPUSH
6022: CALL_OW 384
// un = CreateHuman ;
6026: LD_ADDR_VAR 0 7
6030: PUSH
6031: CALL_OW 44
6035: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6036: LD_ADDR_EXP 84
6040: PUSH
6041: LD_EXP 84
6045: PUSH
6046: LD_VAR 0 7
6050: ADD
6051: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_VAR 0 4
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: CALL_OW 49
// end ;
6069: GO 6011
6071: POP
6072: POP
// for i := 1 to vehiclesAmount do
6073: LD_ADDR_VAR 0 6
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_VAR 0 3
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6255
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6091: LD_ADDR_OWVAR 40
6095: PUSH
6096: LD_INT 2
6098: PUSH
6099: LD_INT 4
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 1
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: CALL_OW 12
6120: ARRAY
6121: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6122: LD_ADDR_OWVAR 37
6126: PUSH
6127: LD_INT 3
6129: ST_TO_ADDR
// vc_control = control_manual ;
6130: LD_ADDR_OWVAR 38
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// vc_engine = engine_combustion ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 1
6145: ST_TO_ADDR
// veh = CreateVehicle ;
6146: LD_ADDR_VAR 0 8
6150: PUSH
6151: CALL_OW 45
6155: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6156: LD_ADDR_EXP 84
6160: PUSH
6161: LD_EXP 84
6165: PUSH
6166: LD_VAR 0 8
6170: ADD
6171: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6172: LD_VAR 0 8
6176: PPUSH
6177: LD_VAR 0 4
6181: PPUSH
6182: LD_INT 0
6184: PPUSH
6185: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6189: LD_INT 0
6191: PPUSH
6192: LD_EXP 43
6196: PPUSH
6197: CALL_OW 383
// un = CreateHuman ;
6201: LD_ADDR_VAR 0 7
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6211: LD_ADDR_EXP 84
6215: PUSH
6216: LD_EXP 84
6220: PUSH
6221: LD_VAR 0 7
6225: ADD
6226: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6227: LD_VAR 0 7
6231: PPUSH
6232: LD_VAR 0 8
6236: PPUSH
6237: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6241: LD_VAR 0 8
6245: PPUSH
6246: LD_INT 100
6248: PPUSH
6249: CALL_OW 240
// end ;
6253: GO 6088
6255: POP
6256: POP
// case area of NorthAmericanSpawnArea :
6257: LD_VAR 0 4
6261: PUSH
6262: LD_INT 7
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6281
6270: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6271: LD_ADDR_VAR 0 9
6275: PUSH
6276: LD_INT 10
6278: ST_TO_ADDR
6279: GO 6320
6281: LD_INT 9
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6300
6289: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6290: LD_ADDR_VAR 0 9
6294: PUSH
6295: LD_INT 11
6297: ST_TO_ADDR
6298: GO 6320
6300: LD_INT 8
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6319
6308: POP
// road = SouthRoadArea2 ; end ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_INT 12
6316: ST_TO_ADDR
6317: GO 6320
6319: POP
// MoveToBase ( amSupportTroops , road ) ;
6320: LD_EXP 84
6324: PPUSH
6325: LD_VAR 0 9
6329: PPUSH
6330: CALL 18920 0 2
// end ;
6334: LD_VAR 0 5
6338: RET
// export function PrepareAmericanPatrol ; var un ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
// amPatrol = [ ] ;
6343: LD_ADDR_EXP 85
6347: PUSH
6348: EMPTY
6349: ST_TO_ADDR
// uc_side = 1 ;
6350: LD_ADDR_OWVAR 20
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// uc_nation = 1 ;
6358: LD_ADDR_OWVAR 21
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_STRING Campell
6373: PPUSH
6374: LD_INT 0
6376: PPUSH
6377: CALL 6912 0 2
6381: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6382: LD_ADDR_EXP 85
6386: PUSH
6387: LD_EXP 85
6391: PUSH
6392: LD_VAR 0 2
6396: ADD
6397: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6398: LD_VAR 0 2
6402: PPUSH
6403: LD_INT 14
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 49
// SetClass ( un , 1 ) ;
6413: LD_VAR 0 2
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6425: LD_INT 1
6427: PPUSH
6428: LD_EXP 43
6432: PPUSH
6433: CALL_OW 381
// un = CreateHuman ;
6437: LD_ADDR_VAR 0 2
6441: PUSH
6442: CALL_OW 44
6446: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6447: LD_ADDR_EXP 85
6451: PUSH
6452: LD_EXP 85
6456: PUSH
6457: LD_VAR 0 2
6461: ADD
6462: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6463: LD_VAR 0 2
6467: PPUSH
6468: LD_INT 14
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6478: LD_EXP 85
6482: PPUSH
6483: LD_EXP 55
6487: PPUSH
6488: CALL_OW 115
// end ; end_of_file
6492: LD_VAR 0 1
6496: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6497: LD_INT 0
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
// northGroup = [ ] ;
6503: LD_ADDR_EXP 87
6507: PUSH
6508: EMPTY
6509: ST_TO_ADDR
// southGroup = [ ] ;
6510: LD_ADDR_EXP 88
6514: PUSH
6515: EMPTY
6516: ST_TO_ADDR
// uc_side = 2 ;
6517: LD_ADDR_OWVAR 20
6521: PUSH
6522: LD_INT 2
6524: ST_TO_ADDR
// uc_nation = 2 ;
6525: LD_ADDR_OWVAR 21
6529: PUSH
6530: LD_INT 2
6532: ST_TO_ADDR
// hc_name :=  ;
6533: LD_ADDR_OWVAR 26
6537: PUSH
6538: LD_STRING 
6540: ST_TO_ADDR
// hc_gallery :=  ;
6541: LD_ADDR_OWVAR 33
6545: PUSH
6546: LD_STRING 
6548: ST_TO_ADDR
// for i := 1 to 5 do
6549: LD_ADDR_VAR 0 2
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_INT 5
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6677
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6565: LD_INT 13
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: LD_INT 26
6576: PPUSH
6577: LD_INT 100
6579: PPUSH
6580: CALL 36345 0 5
// veh = CreateVehicle ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: CALL_OW 45
6593: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6594: LD_ADDR_EXP 88
6598: PUSH
6599: LD_EXP 88
6603: PUSH
6604: LD_VAR 0 4
6608: ADD
6609: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6610: LD_VAR 0 4
6614: PPUSH
6615: LD_INT 23
6617: PPUSH
6618: LD_INT 0
6620: PPUSH
6621: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6625: LD_INT 0
6627: PPUSH
6628: LD_INT 8
6630: PPUSH
6631: CALL_OW 383
// un = CreateHuman ;
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: CALL_OW 44
6644: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6645: LD_ADDR_EXP 88
6649: PUSH
6650: LD_EXP 88
6654: PUSH
6655: LD_VAR 0 3
6659: ADD
6660: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6661: LD_VAR 0 3
6665: PPUSH
6666: LD_VAR 0 4
6670: PPUSH
6671: CALL_OW 52
// end ;
6675: GO 6562
6677: POP
6678: POP
// for i := 1 to 5 do
6679: LD_ADDR_VAR 0 2
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_INT 5
6691: PUSH
6692: FOR_TO
6693: IFFALSE 6748
// begin PrepareSoldier ( false , 8 ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 8
6700: PPUSH
6701: CALL_OW 381
// un = CreateHuman ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6715: LD_ADDR_EXP 88
6719: PUSH
6720: LD_EXP 88
6724: PUSH
6725: LD_VAR 0 3
6729: ADD
6730: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6731: LD_VAR 0 3
6735: PPUSH
6736: LD_INT 23
6738: PPUSH
6739: LD_INT 0
6741: PPUSH
6742: CALL_OW 49
// end ;
6746: GO 6692
6748: POP
6749: POP
// for i := 1 to 10 do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: DOUBLE
6756: LD_INT 1
6758: DEC
6759: ST_TO_ADDR
6760: LD_INT 10
6762: PUSH
6763: FOR_TO
6764: IFFALSE 6905
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6766: LD_INT 13
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 1
6774: PPUSH
6775: LD_INT 25
6777: PUSH
6778: LD_INT 27
6780: PUSH
6781: LD_INT 23
6783: PUSH
6784: LD_INT 26
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 4
6798: PPUSH
6799: CALL_OW 12
6803: ARRAY
6804: PPUSH
6805: LD_INT 100
6807: PPUSH
6808: CALL 36345 0 5
// veh = CreateVehicle ;
6812: LD_ADDR_VAR 0 4
6816: PUSH
6817: CALL_OW 45
6821: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6822: LD_ADDR_EXP 87
6826: PUSH
6827: LD_EXP 87
6831: PUSH
6832: LD_VAR 0 4
6836: ADD
6837: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6838: LD_VAR 0 4
6842: PPUSH
6843: LD_INT 22
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 8
6858: PPUSH
6859: CALL_OW 383
// un = CreateHuman ;
6863: LD_ADDR_VAR 0 3
6867: PUSH
6868: CALL_OW 44
6872: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6873: LD_ADDR_EXP 87
6877: PUSH
6878: LD_EXP 87
6882: PUSH
6883: LD_VAR 0 3
6887: ADD
6888: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6889: LD_VAR 0 3
6893: PPUSH
6894: LD_VAR 0 4
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: GO 6763
6905: POP
6906: POP
// end ; end_of_file
6907: LD_VAR 0 1
6911: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
// if exist_mode then
6916: LD_VAR 0 2
6920: IFFALSE 6945
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6922: LD_ADDR_VAR 0 4
6926: PUSH
6927: LD_EXP 36
6931: PUSH
6932: LD_VAR 0 1
6936: STR
6937: PPUSH
6938: CALL_OW 34
6942: ST_TO_ADDR
6943: GO 6960
// unit := NewCharacter ( ident ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL_OW 25
6959: ST_TO_ADDR
// result := unit ;
6960: LD_ADDR_VAR 0 3
6964: PUSH
6965: LD_VAR 0 4
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 3
6974: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// units = characters ;
6981: LD_ADDR_VAR 0 9
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6991: LD_ADDR_VAR 0 9
6995: PUSH
6996: LD_VAR 0 9
7000: PUSH
7001: LD_EXP 49
7005: PUSH
7006: LD_EXP 50
7010: PUSH
7011: LD_EXP 51
7015: PUSH
7016: LD_EXP 52
7020: PUSH
7021: LD_EXP 53
7025: PUSH
7026: LD_EXP 54
7030: PUSH
7031: LD_EXP 55
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: DIFF
7045: ST_TO_ADDR
// if not units and not canTalkHero then
7046: LD_VAR 0 9
7050: NOT
7051: PUSH
7052: LD_VAR 0 5
7056: NOT
7057: AND
7058: IFFALSE 7062
// exit ;
7060: GO 7235
// if not units then
7062: LD_VAR 0 9
7066: NOT
7067: IFFALSE 7088
// units = characters diff [ Burlak ] ;
7069: LD_ADDR_VAR 0 9
7073: PUSH
7074: LD_VAR 0 1
7078: PUSH
7079: LD_EXP 49
7083: PUSH
7084: EMPTY
7085: LIST
7086: DIFF
7087: ST_TO_ADDR
// if not units and canTalkHero then
7088: LD_VAR 0 9
7092: NOT
7093: PUSH
7094: LD_VAR 0 5
7098: AND
7099: IFFALSE 7103
// exit ;
7101: GO 7235
// speaker := units [ rand ( 1 , units ) ] ;
7103: LD_ADDR_VAR 0 8
7107: PUSH
7108: LD_VAR 0 9
7112: PUSH
7113: LD_INT 1
7115: PPUSH
7116: LD_VAR 0 9
7120: PPUSH
7121: CALL_OW 12
7125: ARRAY
7126: ST_TO_ADDR
// if radio then
7127: LD_VAR 0 4
7131: IFFALSE 7180
// begin if GetSex ( speaker ) = sex_male then
7133: LD_VAR 0 8
7137: PPUSH
7138: CALL_OW 258
7142: PUSH
7143: LD_INT 1
7145: EQUAL
7146: IFFALSE 7164
// SayRadio ( speaker , dialogMID ) else
7148: LD_VAR 0 8
7152: PPUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 94
7162: GO 7178
// SayRadio ( speaker , dialogFID ) ;
7164: LD_VAR 0 8
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 94
// end else
7178: GO 7225
// begin if GetSex ( speaker ) = sex_male then
7180: LD_VAR 0 8
7184: PPUSH
7185: CALL_OW 258
7189: PUSH
7190: LD_INT 1
7192: EQUAL
7193: IFFALSE 7211
// Say ( speaker , dialogMID ) else
7195: LD_VAR 0 8
7199: PPUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL_OW 88
7209: GO 7225
// Say ( speaker , dialogFID ) ;
7211: LD_VAR 0 8
7215: PPUSH
7216: LD_VAR 0 3
7220: PPUSH
7221: CALL_OW 88
// end ; result := speaker ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_VAR 0 8
7234: ST_TO_ADDR
// end ;
7235: LD_VAR 0 6
7239: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7240: LD_INT 0
7242: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 255
7252: PUSH
7253: LD_VAR 0 3
7257: EQUAL
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 302
7268: AND
7269: IFFALSE 7291
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7271: LD_VAR 0 1
7275: PPUSH
7276: LD_EXP 35
7280: PUSH
7281: LD_VAR 0 2
7285: STR
7286: PPUSH
7287: CALL_OW 38
// end ;
7291: LD_VAR 0 4
7295: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7296: LD_INT 0
7298: PPUSH
7299: PPUSH
7300: PPUSH
// resultCharactersToSave = [ ] ;
7301: LD_ADDR_VAR 0 6
7305: PUSH
7306: EMPTY
7307: ST_TO_ADDR
// for unit in characters do
7308: LD_ADDR_VAR 0 5
7312: PUSH
7313: LD_VAR 0 1
7317: PUSH
7318: FOR_IN
7319: IFFALSE 7367
// if GetSide ( unit ) = side and IsOK ( unit ) then
7321: LD_VAR 0 5
7325: PPUSH
7326: CALL_OW 255
7330: PUSH
7331: LD_VAR 0 3
7335: EQUAL
7336: PUSH
7337: LD_VAR 0 5
7341: PPUSH
7342: CALL_OW 302
7346: AND
7347: IFFALSE 7365
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 6
7358: PUSH
7359: LD_VAR 0 5
7363: ADD
7364: ST_TO_ADDR
7365: GO 7318
7367: POP
7368: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7369: LD_VAR 0 6
7373: PPUSH
7374: LD_EXP 35
7378: PUSH
7379: LD_VAR 0 2
7383: STR
7384: PPUSH
7385: CALL_OW 38
// end ;
7389: LD_VAR 0 4
7393: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7394: LD_INT 0
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
// charsToChoose = otherKirovUnits ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_EXP 65
7409: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7410: LD_ADDR_VAR 0 4
7414: PUSH
7415: LD_VAR 0 4
7419: PUSH
7420: LD_EXP 58
7424: ADD
7425: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7426: LD_ADDR_VAR 0 4
7430: PUSH
7431: LD_VAR 0 4
7435: PUSH
7436: LD_EXP 56
7440: ADD
7441: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_VAR 0 4
7451: PUSH
7452: LD_EXP 53
7456: ADD
7457: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7458: LD_ADDR_VAR 0 4
7462: PUSH
7463: LD_VAR 0 4
7467: PUSH
7468: LD_EXP 54
7472: ADD
7473: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7474: LD_ADDR_VAR 0 5
7478: PUSH
7479: LD_STRING text
7481: PPUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 1
7491: PPUSH
7492: LD_INT -5
7494: PUSH
7495: LD_EXP 49
7499: PUSH
7500: LD_EXP 50
7504: PUSH
7505: LD_EXP 52
7509: PUSH
7510: LD_EXP 51
7514: PUSH
7515: LD_INT -6
7517: PUSH
7518: LD_INT -2
7520: PUSH
7521: LD_INT -3
7523: PUSH
7524: LD_INT -5
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_VAR 0 4
7542: ADD
7543: PUSH
7544: LD_INT -6
7546: PUSH
7547: LD_INT -4
7549: PUSH
7550: LD_EXP 61
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: ADD
7560: PPUSH
7561: LD_INT 1
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 42
7597: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7598: LD_VAR 0 4
7602: PPUSH
7603: LD_INT 6
7605: PPUSH
7606: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7610: LD_VAR 0 5
7614: PPUSH
7615: LD_INT 3
7617: PPUSH
7618: CALL_OW 235
// SetSurvivorsArabianAttack ;
7622: CALL 5116 0 0
// MoveKurinUnitsToBuildings ;
7626: CALL 9164 0 0
// end ;
7630: LD_VAR 0 2
7634: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7635: LD_INT 0
7637: PPUSH
7638: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7639: LD_ADDR_VAR 0 5
7643: PUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_INT 22
7651: PUSH
7652: LD_VAR 0 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 30
7673: PUSH
7674: LD_VAR 0 3
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 70
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7727
// begin if UnitsInside ( building ) < 6 then
7696: LD_VAR 0 5
7700: PPUSH
7701: CALL_OW 313
7705: PUSH
7706: LD_INT 6
7708: LESS
7709: IFFALSE 7725
// begin result = building ;
7711: LD_ADDR_VAR 0 4
7715: PUSH
7716: LD_VAR 0 5
7720: ST_TO_ADDR
// exit ;
7721: POP
7722: POP
7723: GO 7737
// end ; end ;
7725: GO 7693
7727: POP
7728: POP
// result = 0 ;
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_INT 0
7736: ST_TO_ADDR
// end ;
7737: LD_VAR 0 4
7741: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7748: LD_ADDR_VAR 0 6
7752: PUSH
7753: LD_INT 34
7755: PUSH
7756: LD_INT 71
7758: PUSH
7759: LD_INT 70
7761: PUSH
7762: LD_INT 69
7764: PUSH
7765: LD_INT 39
7767: PUSH
7768: LD_INT 31
7770: PUSH
7771: LD_INT 14
7773: PUSH
7774: LD_INT 10
7776: PUSH
7777: LD_INT 40
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// resultWeapons = [ ] ;
7791: LD_ADDR_VAR 0 5
7795: PUSH
7796: EMPTY
7797: ST_TO_ADDR
// for i := 1 to weaponTechs do
7798: LD_ADDR_VAR 0 4
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_VAR 0 6
7812: PUSH
7813: FOR_TO
7814: IFFALSE 8001
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7816: LD_VAR 0 6
7820: PUSH
7821: LD_VAR 0 4
7825: ARRAY
7826: PPUSH
7827: LD_VAR 0 2
7831: PPUSH
7832: CALL_OW 482
7836: PUSH
7837: LD_VAR 0 6
7841: PUSH
7842: LD_VAR 0 4
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 321
7857: PUSH
7858: LD_INT 2
7860: EQUAL
7861: AND
7862: IFFALSE 7999
// case nation of nation_american :
7864: LD_VAR 0 2
7868: PUSH
7869: LD_INT 1
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7877
7875: GO 7912
7877: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7878: LD_ADDR_VAR 0 5
7882: PUSH
7883: LD_VAR 0 5
7887: PUSH
7888: LD_VAR 0 6
7892: PUSH
7893: LD_VAR 0 4
7897: ARRAY
7898: PPUSH
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL 8018 0 2
7908: ADD
7909: ST_TO_ADDR
7910: GO 7999
7912: LD_INT 2
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7955
7920: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 5
7930: PUSH
7931: LD_VAR 0 6
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PPUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: CALL 8018 0 2
7951: ADD
7952: ST_TO_ADDR
7953: GO 7999
7955: LD_INT 3
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 7998
7963: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7964: LD_ADDR_VAR 0 5
7968: PUSH
7969: LD_VAR 0 5
7973: PUSH
7974: LD_VAR 0 6
7978: PUSH
7979: LD_VAR 0 4
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 2
7989: PPUSH
7990: CALL 8018 0 2
7994: ADD
7995: ST_TO_ADDR
7996: GO 7999
7998: POP
// end ;
7999: GO 7813
8001: POP
8002: POP
// result = resultWeapons ;
8003: LD_ADDR_VAR 0 3
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// end ;
8013: LD_VAR 0 3
8017: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8018: LD_INT 0
8020: PPUSH
// case tech of tech_AdvMet :
8021: LD_VAR 0 1
8025: PUSH
8026: LD_INT 34
8028: DOUBLE
8029: EQUAL
8030: IFTRUE 8034
8032: GO 8062
8034: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8035: LD_ADDR_VAR 0 3
8039: PUSH
8040: LD_INT 6
8042: PUSH
8043: LD_STRING 
8045: PUSH
8046: LD_INT 46
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: LD_VAR 0 2
8058: ARRAY
8059: ST_TO_ADDR
8060: GO 8351
8062: LD_INT 71
8064: DOUBLE
8065: EQUAL
8066: IFTRUE 8070
8068: GO 8098
8070: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8071: LD_ADDR_VAR 0 3
8075: PUSH
8076: LD_STRING 
8078: PUSH
8079: LD_STRING 
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_VAR 0 2
8094: ARRAY
8095: ST_TO_ADDR
8096: GO 8351
8098: LD_INT 70
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8134
8106: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: LD_STRING 
8114: PUSH
8115: LD_INT 26
8117: PUSH
8118: LD_STRING 
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: LD_VAR 0 2
8130: ARRAY
8131: ST_TO_ADDR
8132: GO 8351
8134: LD_INT 69
8136: DOUBLE
8137: EQUAL
8138: IFTRUE 8142
8140: GO 8170
8142: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 4
8150: PUSH
8151: LD_INT 25
8153: PUSH
8154: LD_INT 43
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: PUSH
8162: LD_VAR 0 2
8166: ARRAY
8167: ST_TO_ADDR
8168: GO 8351
8170: LD_INT 39
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8206
8178: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8179: LD_ADDR_VAR 0 3
8183: PUSH
8184: LD_INT 5
8186: PUSH
8187: LD_INT 27
8189: PUSH
8190: LD_INT 44
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: PUSH
8198: LD_VAR 0 2
8202: ARRAY
8203: ST_TO_ADDR
8204: GO 8351
8206: LD_INT 31
8208: DOUBLE
8209: EQUAL
8210: IFTRUE 8214
8212: GO 8242
8214: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8215: LD_ADDR_VAR 0 3
8219: PUSH
8220: LD_STRING 
8222: PUSH
8223: LD_STRING 
8225: PUSH
8226: LD_INT 49
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_VAR 0 2
8238: ARRAY
8239: ST_TO_ADDR
8240: GO 8351
8242: LD_INT 14
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8278
8250: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: LD_INT 10
8258: PUSH
8259: LD_STRING 
8261: PUSH
8262: LD_STRING 
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_VAR 0 2
8274: ARRAY
8275: ST_TO_ADDR
8276: GO 8351
8278: LD_INT 10
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8314
8286: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_INT 9
8294: PUSH
8295: LD_STRING 
8297: PUSH
8298: LD_STRING 
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_VAR 0 2
8310: ARRAY
8311: ST_TO_ADDR
8312: GO 8351
8314: LD_INT 40
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8350
8322: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8323: LD_ADDR_VAR 0 3
8327: PUSH
8328: LD_INT 7
8330: PUSH
8331: LD_INT 28
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_VAR 0 2
8346: ARRAY
8347: ST_TO_ADDR
8348: GO 8351
8350: POP
// end ;
8351: LD_VAR 0 3
8355: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
// for veh in units do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8449
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8373: LD_VAR 0 4
8377: PPUSH
8378: CALL_OW 247
8382: PUSH
8383: LD_INT 2
8385: EQUAL
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: CALL_OW 261
8396: PUSH
8397: LD_INT 100
8399: LESS
8400: AND
8401: IFFALSE 8447
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8403: LD_VAR 0 4
8407: PPUSH
8408: LD_STRING X
8410: PUSH
8411: LD_INT 0
8413: PUSH
8414: LD_INT 0
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_INT 0
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 0
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: PPUSH
8443: CALL_OW 446
// end ;
8447: GO 8370
8449: POP
8450: POP
// end ;
8451: LD_VAR 0 3
8455: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8456: LD_INT 0
8458: PPUSH
8459: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8460: LD_ADDR_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: CALL_OW 254
8474: PUSH
8475: LD_INT 3
8477: MINUS
8478: ST_TO_ADDR
// if dir < 0 then
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 0
8486: LESS
8487: IFFALSE 8503
// dir := 6 + dir ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: LD_INT 6
8496: PUSH
8497: LD_VAR 0 4
8501: PLUS
8502: ST_TO_ADDR
// SetDir ( un , dir ) ;
8503: LD_VAR 0 1
8507: PPUSH
8508: LD_VAR 0 4
8512: PPUSH
8513: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 52
// result = un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 1
8540: ST_TO_ADDR
// end ;
8541: LD_VAR 0 3
8545: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// uc_side := GetSide ( b ) ;
8551: LD_ADDR_OWVAR 20
8555: PUSH
8556: LD_VAR 0 2
8560: PPUSH
8561: CALL_OW 255
8565: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8566: LD_ADDR_OWVAR 21
8570: PUSH
8571: LD_VAR 0 2
8575: PPUSH
8576: CALL_OW 248
8580: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 380
// un = CreateHuman ;
8596: LD_ADDR_VAR 0 4
8600: PUSH
8601: CALL_OW 44
8605: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8606: LD_ADDR_VAR 0 5
8610: PUSH
8611: LD_VAR 0 2
8615: PPUSH
8616: CALL_OW 254
8620: PUSH
8621: LD_INT 3
8623: MINUS
8624: ST_TO_ADDR
// if dir < 0 then
8625: LD_VAR 0 5
8629: PUSH
8630: LD_INT 0
8632: LESS
8633: IFFALSE 8649
// dir := 6 + dir ;
8635: LD_ADDR_VAR 0 5
8639: PUSH
8640: LD_INT 6
8642: PUSH
8643: LD_VAR 0 5
8647: PLUS
8648: ST_TO_ADDR
// SetDir ( un , dir ) ;
8649: LD_VAR 0 4
8653: PPUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8663: LD_VAR 0 4
8667: PPUSH
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 52
// result = un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 4
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 3
8691: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
// for building in buildings do
8699: LD_ADDR_VAR 0 5
8703: PUSH
8704: LD_VAR 0 2
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8802
// begin x = GetX ( building ) ;
8712: LD_ADDR_VAR 0 6
8716: PUSH
8717: LD_VAR 0 5
8721: PPUSH
8722: CALL_OW 250
8726: ST_TO_ADDR
// y = GetY ( building ) ;
8727: LD_ADDR_VAR 0 7
8731: PUSH
8732: LD_VAR 0 5
8736: PPUSH
8737: CALL_OW 251
8741: ST_TO_ADDR
// dir = GetDir ( building ) ;
8742: LD_ADDR_VAR 0 8
8746: PUSH
8747: LD_VAR 0 5
8751: PPUSH
8752: CALL_OW 254
8756: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 5
8766: PPUSH
8767: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8771: LD_VAR 0 1
8775: PPUSH
8776: LD_VAR 0 3
8780: PPUSH
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 7
8790: PPUSH
8791: LD_VAR 0 8
8795: PPUSH
8796: CALL_OW 205
// end ;
8800: GO 8709
8802: POP
8803: POP
// end ;
8804: LD_VAR 0 4
8808: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8809: LD_INT 0
8811: PPUSH
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8817: LD_ADDR_VAR 0 8
8821: PUSH
8822: LD_INT 48
8824: PUSH
8825: LD_INT 49
8827: PUSH
8828: LD_INT 50
8830: PUSH
8831: LD_INT 20
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: LD_INT 51
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 69
8845: PUSH
8846: LD_INT 39
8848: PUSH
8849: LD_INT 34
8851: PUSH
8852: LD_INT 40
8854: PUSH
8855: LD_INT 53
8857: PUSH
8858: LD_INT 71
8860: PUSH
8861: LD_INT 57
8863: PUSH
8864: LD_INT 58
8866: PUSH
8867: LD_INT 44
8869: PUSH
8870: LD_INT 32
8872: PUSH
8873: LD_INT 27
8875: PUSH
8876: LD_INT 23
8878: PUSH
8879: LD_INT 33
8881: PUSH
8882: LD_INT 59
8884: PUSH
8885: LD_INT 54
8887: PUSH
8888: LD_INT 55
8890: PUSH
8891: LD_INT 56
8893: PUSH
8894: LD_INT 63
8896: PUSH
8897: LD_INT 64
8899: PUSH
8900: LD_INT 65
8902: PUSH
8903: LD_INT 30
8905: PUSH
8906: LD_INT 31
8908: PUSH
8909: LD_INT 21
8911: PUSH
8912: LD_INT 22
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8952: LD_ADDR_VAR 0 9
8956: PUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 1
8965: PPUSH
8966: CALL 31584 0 3
8970: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8971: LD_ADDR_VAR 0 5
8975: PUSH
8976: DOUBLE
8977: LD_INT 1
8979: DEC
8980: ST_TO_ADDR
8981: LD_VAR 0 8
8985: PUSH
8986: FOR_TO
8987: IFFALSE 9063
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8989: LD_VAR 0 8
8993: PUSH
8994: LD_VAR 0 5
8998: ARRAY
8999: PPUSH
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 321
9009: PUSH
9010: LD_INT 1
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 8
9018: PUSH
9019: LD_VAR 0 5
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 3
9029: PPUSH
9030: CALL_OW 482
9034: PUSH
9035: LD_INT 1
9037: EQUAL
9038: AND
9039: IFFALSE 9061
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_VAR 0 8
9050: PUSH
9051: LD_VAR 0 5
9055: ARRAY
9056: PPUSH
9057: CALL_OW 184
9061: GO 8986
9063: POP
9064: POP
// for i = 1 to am_tech_list do
9065: LD_ADDR_VAR 0 5
9069: PUSH
9070: DOUBLE
9071: LD_INT 1
9073: DEC
9074: ST_TO_ADDR
9075: LD_VAR 0 9
9079: PUSH
9080: FOR_TO
9081: IFFALSE 9157
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9083: LD_VAR 0 9
9087: PUSH
9088: LD_VAR 0 5
9092: ARRAY
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 321
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: PUSH
9108: LD_VAR 0 9
9112: PUSH
9113: LD_VAR 0 5
9117: ARRAY
9118: PPUSH
9119: LD_VAR 0 3
9123: PPUSH
9124: CALL_OW 482
9128: PUSH
9129: LD_INT 1
9131: EQUAL
9132: AND
9133: IFFALSE 9155
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9135: LD_VAR 0 2
9139: PPUSH
9140: LD_VAR 0 9
9144: PUSH
9145: LD_VAR 0 5
9149: ARRAY
9150: PPUSH
9151: CALL_OW 184
9155: GO 9080
9157: POP
9158: POP
// end ;
9159: LD_VAR 0 4
9163: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9175: LD_ADDR_VAR 0 3
9179: PUSH
9180: LD_INT 22
9182: PUSH
9183: LD_INT 6
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 21
9192: PUSH
9193: LD_INT 3
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 30
9202: PUSH
9203: LD_INT 6
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: PUSH
9220: LD_INT 1
9222: ARRAY
9223: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9224: LD_ADDR_VAR 0 4
9228: PUSH
9229: LD_INT 22
9231: PUSH
9232: LD_INT 6
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: LD_INT 21
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 30
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 69
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9273: LD_ADDR_VAR 0 9
9277: PUSH
9278: LD_VAR 0 9
9282: PUSH
9283: LD_EXP 61
9287: ADD
9288: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9289: LD_ADDR_VAR 0 9
9293: PUSH
9294: LD_VAR 0 9
9298: PUSH
9299: LD_EXP 79
9303: ADD
9304: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_VAR 0 9
9314: PUSH
9315: LD_EXP 71
9319: ADD
9320: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9321: LD_ADDR_VAR 0 8
9325: PUSH
9326: LD_INT 18
9328: PPUSH
9329: LD_INT 22
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 1
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: LD_INT 60
9354: PUSH
9355: EMPTY
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 70
9371: PUSH
9372: LD_VAR 0 9
9376: DIFF
9377: ST_TO_ADDR
// if not canTakeUnits then
9378: LD_VAR 0 8
9382: NOT
9383: IFFALSE 9416
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9385: LD_ADDR_EXP 81
9389: PUSH
9390: LD_EXP 81
9394: PPUSH
9395: LD_INT 4
9397: PPUSH
9398: LD_EXP 81
9402: PUSH
9403: LD_INT 3
9405: ARRAY
9406: PUSH
9407: LD_INT 2
9409: PLUS
9410: PPUSH
9411: CALL_OW 1
9415: ST_TO_ADDR
// if canTakeUnits > 2 then
9416: LD_VAR 0 8
9420: PUSH
9421: LD_INT 2
9423: GREATER
9424: IFFALSE 9494
// begin for i := 1 to rand ( 1 , 2 ) do
9426: LD_ADDR_VAR 0 2
9430: PUSH
9431: DOUBLE
9432: LD_INT 1
9434: DEC
9435: ST_TO_ADDR
9436: LD_INT 1
9438: PPUSH
9439: LD_INT 2
9441: PPUSH
9442: CALL_OW 12
9446: PUSH
9447: FOR_TO
9448: IFFALSE 9490
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9450: LD_VAR 0 8
9454: PUSH
9455: LD_VAR 0 2
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 2
9479: ARRAY
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: CALL_OW 183
// end ;
9488: GO 9447
9490: POP
9491: POP
// end else
9492: GO 9562
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9494: LD_ADDR_VAR 0 2
9498: PUSH
9499: DOUBLE
9500: LD_INT 1
9502: DEC
9503: ST_TO_ADDR
9504: LD_INT 1
9506: PPUSH
9507: LD_VAR 0 8
9511: PPUSH
9512: CALL_OW 12
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9560
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9520: LD_VAR 0 8
9524: PUSH
9525: LD_VAR 0 2
9529: ARRAY
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9540: LD_VAR 0 8
9544: PUSH
9545: LD_VAR 0 2
9549: ARRAY
9550: PPUSH
9551: LD_INT 4
9553: PPUSH
9554: CALL_OW 183
// end ;
9558: GO 9517
9560: POP
9561: POP
// end ; wait ( 0 0$01 ) ;
9562: LD_INT 35
9564: PPUSH
9565: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_INT 18
9576: PPUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 6
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 3
9599: PUSH
9600: LD_INT 60
9602: PUSH
9603: EMPTY
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: PUSH
9620: LD_VAR 0 9
9624: DIFF
9625: ST_TO_ADDR
// pom = 6 ;
9626: LD_ADDR_VAR 0 7
9630: PUSH
9631: LD_INT 6
9633: ST_TO_ADDR
// if canTakeUnits then
9634: LD_VAR 0 8
9638: IFFALSE 9755
// for i = 1 to canTakeUnits do
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_VAR 0 8
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9753
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9658: LD_VAR 0 8
9662: PUSH
9663: LD_VAR 0 2
9667: ARRAY
9668: PPUSH
9669: CALL_OW 257
9673: PUSH
9674: LD_INT 3
9676: NONEQUAL
9677: IFFALSE 9717
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9679: LD_VAR 0 8
9683: PUSH
9684: LD_VAR 0 2
9688: ARRAY
9689: PPUSH
9690: LD_VAR 0 4
9694: PPUSH
9695: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9699: LD_VAR 0 8
9703: PUSH
9704: LD_VAR 0 2
9708: ARRAY
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: PPUSH
9728: LD_VAR 0 4
9732: PPUSH
9733: CALL_OW 120
// pom = pom - 1 ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PUSH
9747: LD_INT 1
9749: MINUS
9750: ST_TO_ADDR
// end ;
9751: GO 9655
9753: POP
9754: POP
// if pom > 0 then
9755: LD_VAR 0 7
9759: PUSH
9760: LD_INT 0
9762: GREATER
9763: IFFALSE 9788
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9765: LD_ADDR_EXP 81
9769: PUSH
9770: LD_EXP 81
9774: PPUSH
9775: LD_INT 3
9777: PPUSH
9778: LD_VAR 0 7
9782: PPUSH
9783: CALL_OW 1
9787: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9788: LD_INT 35
9790: PPUSH
9791: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9795: LD_ADDR_VAR 0 5
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_INT 6
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 21
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 30
9822: PUSH
9823: LD_INT 32
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 59
9835: PUSH
9836: EMPTY
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: PUSH
9854: FOR_IN
9855: IFFALSE 10101
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9857: LD_ADDR_VAR 0 8
9861: PUSH
9862: LD_INT 18
9864: PPUSH
9865: LD_INT 22
9867: PUSH
9868: LD_INT 6
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: LD_INT 60
9890: PUSH
9891: EMPTY
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: LD_VAR 0 9
9912: DIFF
9913: ST_TO_ADDR
// if canTakeUnits then
9914: LD_VAR 0 8
9918: IFFALSE 10052
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9920: LD_VAR 0 8
9924: PUSH
9925: LD_INT 1
9927: ARRAY
9928: PPUSH
9929: CALL_OW 257
9933: PUSH
9934: LD_INT 1
9936: NONEQUAL
9937: IFFALSE 10032
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9939: LD_VAR 0 8
9943: PUSH
9944: LD_INT 1
9946: ARRAY
9947: PPUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 6
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 3
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 30
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PPUSH
9992: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9996: LD_VAR 0 8
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10012: LD_VAR 0 8
10016: PUSH
10017: LD_INT 1
10019: ARRAY
10020: PPUSH
10021: CALL_OW 182
// wait ( 0 0$1 ) ;
10025: LD_INT 35
10027: PPUSH
10028: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10032: LD_VAR 0 8
10036: PUSH
10037: LD_INT 1
10039: ARRAY
10040: PPUSH
10041: LD_VAR 0 5
10045: PPUSH
10046: CALL_OW 120
// end else
10050: GO 10099
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10052: LD_ADDR_EXP 73
10056: PUSH
10057: LD_EXP 73
10061: PUSH
10062: LD_VAR 0 5
10066: ADD
10067: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10068: LD_ADDR_EXP 81
10072: PUSH
10073: LD_EXP 81
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: LD_EXP 81
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PUSH
10090: LD_INT 1
10092: PLUS
10093: PPUSH
10094: CALL_OW 1
10098: ST_TO_ADDR
// end ; end ;
10099: GO 9854
10101: POP
10102: POP
// end ;
10103: LD_VAR 0 1
10107: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10112: LD_ADDR_VAR 0 4
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_VAR 0 2
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 50
10131: PUSH
10132: EMPTY
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 69
10172: PPUSH
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 74
10182: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10183: LD_VAR 0 4
10187: PPUSH
10188: LD_VAR 0 1
10192: PPUSH
10193: CALL_OW 296
10197: PUSH
10198: LD_INT 13
10200: LESS
10201: IFFALSE 10213
// begin result = true ;
10203: LD_ADDR_VAR 0 3
10207: PUSH
10208: LD_INT 1
10210: ST_TO_ADDR
// exit ;
10211: GO 10221
// end ; result = false ;
10213: LD_ADDR_VAR 0 3
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// end ;
10221: LD_VAR 0 3
10225: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10240: LD_VAR 0 1
10244: PPUSH
10245: CALL_OW 302
10249: NOT
10250: PUSH
10251: LD_VAR 0 4
10255: PUSH
10256: LD_INT 1
10258: EQUAL
10259: OR
10260: PUSH
10261: LD_VAR 0 2
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: CALL_OW 488
10275: NOT
10276: OR
10277: PUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_VAR 0 2
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: CALL_OW 297
10297: PUSH
10298: LD_VAR 0 4
10302: GREATEREQUAL
10303: OR
10304: PUSH
10305: LD_VAR 0 5
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: LD_INT 0
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: IN
10320: NOT
10321: OR
10322: IFFALSE 10326
// exit ;
10324: GO 11883
// attempts = 0 ;
10326: LD_ADDR_VAR 0 17
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10334: LD_ADDR_VAR 0 7
10338: PUSH
10339: EMPTY
10340: ST_TO_ADDR
// list_coords = [ ] ;
10341: LD_ADDR_VAR 0 8
10345: PUSH
10346: EMPTY
10347: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10348: LD_ADDR_VAR 0 9
10352: PUSH
10353: LD_VAR 0 2
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 250
10372: PPUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: CALL_OW 251
10382: PPUSH
10383: CALL 11888 0 4
10387: ST_TO_ADDR
// if attempts = 0 then
10388: LD_VAR 0 17
10392: PUSH
10393: LD_INT 0
10395: EQUAL
10396: IFFALSE 10504
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10398: LD_ADDR_VAR 0 10
10402: PUSH
10403: LD_VAR 0 9
10407: PUSH
10408: LD_VAR 0 9
10412: PUSH
10413: LD_INT 1
10415: PLUS
10416: PUSH
10417: LD_VAR 0 9
10421: PUSH
10422: LD_INT 1
10424: MINUS
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10431: LD_VAR 0 10
10435: PUSH
10436: LD_INT 2
10438: ARRAY
10439: PUSH
10440: LD_INT 6
10442: EQUAL
10443: IFFALSE 10466
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10445: LD_ADDR_VAR 0 10
10449: PUSH
10450: LD_VAR 0 10
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: LD_INT 0
10460: PPUSH
10461: CALL_OW 1
10465: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10466: LD_VAR 0 10
10470: PUSH
10471: LD_INT 3
10473: ARRAY
10474: PUSH
10475: LD_INT 1
10477: NEG
10478: EQUAL
10479: IFFALSE 10502
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10481: LD_ADDR_VAR 0 10
10485: PUSH
10486: LD_VAR 0 10
10490: PPUSH
10491: LD_INT 3
10493: PPUSH
10494: LD_INT 5
10496: PPUSH
10497: CALL_OW 1
10501: ST_TO_ADDR
// end else
10502: GO 10541
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10504: LD_ADDR_VAR 0 10
10508: PUSH
10509: LD_INT 0
10511: PUSH
10512: LD_INT 1
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: LD_INT 4
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_VAR 0 9
10539: DIFF
10540: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10541: LD_ADDR_VAR 0 14
10545: PUSH
10546: DOUBLE
10547: LD_INT 1
10549: DEC
10550: ST_TO_ADDR
10551: LD_VAR 0 10
10555: PUSH
10556: LD_INT 0
10558: PLUS
10559: PUSH
10560: FOR_TO
10561: IFFALSE 10883
// case dir_list [ c ] of 0 :
10563: LD_VAR 0 10
10567: PUSH
10568: LD_VAR 0 14
10572: ARRAY
10573: PUSH
10574: LD_INT 0
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10623
10582: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10583: LD_ADDR_VAR 0 8
10587: PUSH
10588: LD_VAR 0 8
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: LD_VAR 0 2
10600: PUSH
10601: LD_VAR 0 3
10605: PUSH
10606: LD_VAR 0 4
10610: MINUS
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 2
10620: ST_TO_ADDR
10621: GO 10881
10623: LD_INT 1
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10672
10631: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10632: LD_ADDR_VAR 0 8
10636: PUSH
10637: LD_VAR 0 8
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_VAR 0 2
10649: PUSH
10650: LD_VAR 0 4
10654: PLUS
10655: PUSH
10656: LD_VAR 0 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 2
10669: ST_TO_ADDR
10670: GO 10881
10672: LD_INT 2
10674: DOUBLE
10675: EQUAL
10676: IFTRUE 10680
10678: GO 10727
10680: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10681: LD_ADDR_VAR 0 8
10685: PUSH
10686: LD_VAR 0 8
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: LD_VAR 0 2
10698: PUSH
10699: LD_VAR 0 4
10703: PLUS
10704: PUSH
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 4
10714: PLUS
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PPUSH
10720: CALL_OW 2
10724: ST_TO_ADDR
10725: GO 10881
10727: LD_INT 3
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 10776
10735: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10736: LD_ADDR_VAR 0 8
10740: PUSH
10741: LD_VAR 0 8
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: LD_VAR 0 2
10753: PUSH
10754: LD_VAR 0 3
10758: PUSH
10759: LD_VAR 0 4
10763: PLUS
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 2
10773: ST_TO_ADDR
10774: GO 10881
10776: LD_INT 4
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10825
10784: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10785: LD_ADDR_VAR 0 8
10789: PUSH
10790: LD_VAR 0 8
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: LD_VAR 0 2
10802: PUSH
10803: LD_VAR 0 4
10807: MINUS
10808: PUSH
10809: LD_VAR 0 3
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 2
10822: ST_TO_ADDR
10823: GO 10881
10825: LD_INT 5
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 10880
10833: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10834: LD_ADDR_VAR 0 8
10838: PUSH
10839: LD_VAR 0 8
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: LD_VAR 0 2
10851: PUSH
10852: LD_VAR 0 4
10856: MINUS
10857: PUSH
10858: LD_VAR 0 3
10862: PUSH
10863: LD_VAR 0 4
10867: MINUS
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 2
10877: ST_TO_ADDR
10878: GO 10881
10880: POP
10881: GO 10560
10883: POP
10884: POP
// if dist < 30 then
10885: LD_VAR 0 4
10889: PUSH
10890: LD_INT 30
10892: LESS
10893: IFFALSE 10905
// c = 1 else
10895: LD_ADDR_VAR 0 14
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
10903: GO 10913
// c = 2 ;
10905: LD_ADDR_VAR 0 14
10909: PUSH
10910: LD_INT 2
10912: ST_TO_ADDR
// b = 1 ;
10913: LD_ADDR_VAR 0 11
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10921: LD_VAR 0 11
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: LD_INT 1
10933: MINUS
10934: LESSEQUAL
10935: IFFALSE 11363
// begin if 0 in dir_list and 1 in dir_list then
10937: LD_INT 0
10939: PUSH
10940: LD_VAR 0 10
10944: IN
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_VAR 0 10
10953: IN
10954: AND
10955: IFFALSE 11007
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10957: LD_ADDR_VAR 0 8
10961: PUSH
10962: LD_VAR 0 8
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_VAR 0 2
10974: PUSH
10975: LD_VAR 0 11
10979: PLUS
10980: PUSH
10981: LD_VAR 0 3
10985: PUSH
10986: LD_VAR 0 4
10990: MINUS
10991: PUSH
10992: LD_VAR 0 11
10996: PLUS
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 2
11006: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11007: LD_INT 1
11009: PUSH
11010: LD_VAR 0 10
11014: IN
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_VAR 0 10
11023: IN
11024: AND
11025: IFFALSE 11071
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11027: LD_ADDR_VAR 0 8
11031: PUSH
11032: LD_VAR 0 8
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_VAR 0 4
11049: PLUS
11050: PUSH
11051: LD_VAR 0 3
11055: PUSH
11056: LD_VAR 0 11
11060: PLUS
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 2
11070: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11071: LD_INT 2
11073: PUSH
11074: LD_VAR 0 10
11078: IN
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_VAR 0 10
11087: IN
11088: AND
11089: IFFALSE 11141
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11091: LD_ADDR_VAR 0 8
11095: PUSH
11096: LD_VAR 0 8
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_VAR 0 2
11108: PUSH
11109: LD_VAR 0 4
11113: PLUS
11114: PUSH
11115: LD_VAR 0 11
11119: MINUS
11120: PUSH
11121: LD_VAR 0 3
11125: PUSH
11126: LD_VAR 0 4
11130: PLUS
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 2
11140: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11141: LD_INT 3
11143: PUSH
11144: LD_VAR 0 10
11148: IN
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: LD_VAR 0 10
11157: IN
11158: AND
11159: IFFALSE 11211
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: LD_VAR 0 8
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: LD_VAR 0 2
11178: PUSH
11179: LD_VAR 0 11
11183: MINUS
11184: PUSH
11185: LD_VAR 0 3
11189: PUSH
11190: LD_VAR 0 4
11194: PLUS
11195: PUSH
11196: LD_VAR 0 11
11200: MINUS
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 2
11210: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11211: LD_INT 4
11213: PUSH
11214: LD_VAR 0 10
11218: IN
11219: PUSH
11220: LD_INT 5
11222: PUSH
11223: LD_VAR 0 10
11227: IN
11228: AND
11229: IFFALSE 11275
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11231: LD_ADDR_VAR 0 8
11235: PUSH
11236: LD_VAR 0 8
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: LD_VAR 0 2
11248: PUSH
11249: LD_VAR 0 4
11253: MINUS
11254: PUSH
11255: LD_VAR 0 3
11259: PUSH
11260: LD_VAR 0 11
11264: MINUS
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 2
11274: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11275: LD_INT 5
11277: PUSH
11278: LD_VAR 0 10
11282: IN
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_VAR 0 10
11291: IN
11292: AND
11293: IFFALSE 11345
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11295: LD_ADDR_VAR 0 8
11299: PUSH
11300: LD_VAR 0 8
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_VAR 0 4
11317: MINUS
11318: PUSH
11319: LD_VAR 0 11
11323: PLUS
11324: PUSH
11325: LD_VAR 0 3
11329: PUSH
11330: LD_VAR 0 4
11334: MINUS
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 2
11344: ST_TO_ADDR
// b = b + c end ;
11345: LD_ADDR_VAR 0 11
11349: PUSH
11350: LD_VAR 0 11
11354: PUSH
11355: LD_VAR 0 14
11359: PLUS
11360: ST_TO_ADDR
11361: GO 10921
// if list_coords = 0 then
11363: LD_VAR 0 8
11367: PUSH
11368: LD_INT 0
11370: EQUAL
11371: IFFALSE 11375
// exit ;
11373: GO 11883
// repeat min_dist = 5000 ;
11375: LD_ADDR_VAR 0 12
11379: PUSH
11380: LD_INT 5000
11382: ST_TO_ADDR
// for b in list_coords do
11383: LD_ADDR_VAR 0 11
11387: PUSH
11388: LD_VAR 0 8
11392: PUSH
11393: FOR_IN
11394: IFFALSE 11453
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11396: LD_ADDR_VAR 0 13
11400: PUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_VAR 0 11
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PPUSH
11415: LD_VAR 0 11
11419: PUSH
11420: LD_INT 2
11422: ARRAY
11423: PPUSH
11424: CALL_OW 297
11428: ST_TO_ADDR
// if temp_dist < min_dist then
11429: LD_VAR 0 13
11433: PUSH
11434: LD_VAR 0 12
11438: LESS
11439: IFFALSE 11451
// min_dist = temp_dist ;
11441: LD_ADDR_VAR 0 12
11445: PUSH
11446: LD_VAR 0 13
11450: ST_TO_ADDR
// end ;
11451: GO 11393
11453: POP
11454: POP
// c = 0 ;
11455: LD_ADDR_VAR 0 14
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// repeat c = c + 1 ;
11463: LD_ADDR_VAR 0 14
11467: PUSH
11468: LD_VAR 0 14
11472: PUSH
11473: LD_INT 1
11475: PLUS
11476: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11477: LD_VAR 0 1
11481: PPUSH
11482: LD_VAR 0 8
11486: PUSH
11487: LD_VAR 0 14
11491: ARRAY
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 8
11501: PUSH
11502: LD_VAR 0 14
11506: ARRAY
11507: PUSH
11508: LD_INT 2
11510: ARRAY
11511: PPUSH
11512: CALL_OW 297
11516: PUSH
11517: LD_VAR 0 12
11521: EQUAL
11522: IFFALSE 11587
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11524: LD_ADDR_VAR 0 7
11528: PUSH
11529: LD_VAR 0 7
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_VAR 0 8
11541: PUSH
11542: LD_VAR 0 14
11546: ARRAY
11547: PPUSH
11548: CALL_OW 2
11552: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11553: LD_ADDR_VAR 0 8
11557: PUSH
11558: LD_VAR 0 8
11562: PPUSH
11563: LD_VAR 0 14
11567: PPUSH
11568: CALL_OW 3
11572: ST_TO_ADDR
// c = c - 1 ;
11573: LD_ADDR_VAR 0 14
11577: PUSH
11578: LD_VAR 0 14
11582: PUSH
11583: LD_INT 1
11585: MINUS
11586: ST_TO_ADDR
// end ; until c = list_coords ;
11587: LD_VAR 0 14
11591: PUSH
11592: LD_VAR 0 8
11596: EQUAL
11597: IFFALSE 11463
// c = 0 ;
11599: LD_ADDR_VAR 0 14
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// if list_nearest > 0 then
11607: LD_VAR 0 7
11611: PUSH
11612: LD_INT 0
11614: GREATER
11615: IFFALSE 11757
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11617: LD_ADDR_VAR 0 15
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 7
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11635: LD_ADDR_VAR 0 16
11639: PUSH
11640: LD_VAR 0 7
11644: PUSH
11645: LD_VAR 0 15
11649: ARRAY
11650: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11651: LD_VAR 0 16
11655: PUSH
11656: LD_INT 1
11658: ARRAY
11659: PPUSH
11660: LD_VAR 0 16
11664: PUSH
11665: LD_INT 2
11667: ARRAY
11668: PPUSH
11669: CALL_OW 488
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 16
11682: PUSH
11683: LD_INT 1
11685: ARRAY
11686: PPUSH
11687: LD_VAR 0 16
11691: PUSH
11692: LD_INT 2
11694: ARRAY
11695: PPUSH
11696: CALL_OW 428
11700: PUSH
11701: LD_INT 0
11703: EQUAL
11704: AND
11705: IFFALSE 11717
// c = 1 else
11707: LD_ADDR_VAR 0 14
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
11715: GO 11737
// list_nearest = Delete ( list_nearest , rand_num ) ;
11717: LD_ADDR_VAR 0 7
11721: PUSH
11722: LD_VAR 0 7
11726: PPUSH
11727: LD_VAR 0 15
11731: PPUSH
11732: CALL_OW 3
11736: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11737: LD_VAR 0 14
11741: PUSH
11742: LD_INT 1
11744: EQUAL
11745: PUSH
11746: LD_VAR 0 7
11750: PUSH
11751: LD_INT 0
11753: EQUAL
11754: OR
11755: IFFALSE 11617
// end ; until c = 1 or list_coords = 0 ;
11757: LD_VAR 0 14
11761: PUSH
11762: LD_INT 1
11764: EQUAL
11765: PUSH
11766: LD_VAR 0 8
11770: PUSH
11771: LD_INT 0
11773: EQUAL
11774: OR
11775: IFFALSE 11375
// attempts = attempts + 1 ;
11777: LD_ADDR_VAR 0 17
11781: PUSH
11782: LD_VAR 0 17
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11791: LD_VAR 0 14
11795: PUSH
11796: LD_INT 1
11798: EQUAL
11799: PUSH
11800: LD_VAR 0 17
11804: PUSH
11805: LD_INT 1
11807: GREATER
11808: OR
11809: IFFALSE 10334
// if c = 1 then
11811: LD_VAR 0 14
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11883
// if add then
11821: LD_VAR 0 5
11825: IFFALSE 11856
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_VAR 0 16
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: LD_VAR 0 16
11845: PUSH
11846: LD_INT 2
11848: ARRAY
11849: PPUSH
11850: CALL_OW 171
11854: GO 11883
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_VAR 0 16
11865: PUSH
11866: LD_INT 1
11868: ARRAY
11869: PPUSH
11870: LD_VAR 0 16
11874: PUSH
11875: LD_INT 2
11877: ARRAY
11878: PPUSH
11879: CALL_OW 111
// end ;
11883: LD_VAR 0 6
11887: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11896: LD_VAR 0 1
11900: PPUSH
11901: LD_VAR 0 2
11905: PPUSH
11906: CALL_OW 488
11910: NOT
11911: PUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_VAR 0 4
11921: PPUSH
11922: CALL_OW 488
11926: NOT
11927: OR
11928: IFFALSE 11941
// begin result = - 1 ;
11930: LD_ADDR_VAR 0 5
11934: PUSH
11935: LD_INT 1
11937: NEG
11938: ST_TO_ADDR
// exit ;
11939: GO 12101
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11941: LD_ADDR_VAR 0 6
11945: PUSH
11946: LD_VAR 0 1
11950: PPUSH
11951: LD_VAR 0 2
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_VAR 0 4
11965: PPUSH
11966: CALL_OW 298
11970: ST_TO_ADDR
// dist_2 = 99999 ;
11971: LD_ADDR_VAR 0 7
11975: PUSH
11976: LD_INT 99999
11978: ST_TO_ADDR
// for b = 0 to 5 do
11979: LD_ADDR_VAR 0 8
11983: PUSH
11984: DOUBLE
11985: LD_INT 0
11987: DEC
11988: ST_TO_ADDR
11989: LD_INT 5
11991: PUSH
11992: FOR_TO
11993: IFFALSE 12089
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11995: LD_ADDR_VAR 0 9
11999: PUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: LD_VAR 0 8
12009: PPUSH
12010: LD_VAR 0 6
12014: PPUSH
12015: CALL_OW 272
12019: PPUSH
12020: LD_VAR 0 2
12024: PPUSH
12025: LD_VAR 0 8
12029: PPUSH
12030: LD_VAR 0 6
12034: PPUSH
12035: CALL_OW 273
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_VAR 0 4
12049: PPUSH
12050: CALL_OW 298
12054: ST_TO_ADDR
// if temp_dist < dist_2 then
12055: LD_VAR 0 9
12059: PUSH
12060: LD_VAR 0 7
12064: LESS
12065: IFFALSE 12087
// begin dist_2 = temp_dist ;
12067: LD_ADDR_VAR 0 7
12071: PUSH
12072: LD_VAR 0 9
12076: ST_TO_ADDR
// dir = b ;
12077: LD_ADDR_VAR 0 10
12081: PUSH
12082: LD_VAR 0 8
12086: ST_TO_ADDR
// end ; end ;
12087: GO 11992
12089: POP
12090: POP
// result = dir ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 10
12100: ST_TO_ADDR
// end ; end_of_file
12101: LD_VAR 0 5
12105: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// personel = [ ] ;
12136: LD_ADDR_VAR 0 18
12140: PUSH
12141: EMPTY
12142: ST_TO_ADDR
// vehicles = [ ] ;
12143: LD_ADDR_VAR 0 24
12147: PUSH
12148: EMPTY
12149: ST_TO_ADDR
// for unit in basePersonel do
12150: LD_ADDR_VAR 0 17
12154: PUSH
12155: LD_VAR 0 3
12159: PUSH
12160: FOR_IN
12161: IFFALSE 12209
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12163: LD_ADDR_VAR 0 18
12167: PUSH
12168: LD_VAR 0 18
12172: PUSH
12173: LD_VAR 0 17
12177: PUSH
12178: LD_VAR 0 17
12182: PPUSH
12183: CALL_OW 310
12187: PUSH
12188: LD_VAR 0 17
12192: PPUSH
12193: CALL_OW 302
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: ADD
12206: ST_TO_ADDR
12207: GO 12160
12209: POP
12210: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12211: LD_ADDR_VAR 0 23
12215: PUSH
12216: LD_VAR 0 4
12220: PPUSH
12221: LD_INT 22
12223: PUSH
12224: LD_VAR 0 1
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 2
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 50
12245: PUSH
12246: EMPTY
12247: LIST
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: LD_INT 34
12257: PUSH
12258: LD_INT 12
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 34
12267: PUSH
12268: LD_INT 51
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 34
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 70
12305: PUSH
12306: FOR_IN
12307: IFFALSE 12355
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12309: LD_ADDR_VAR 0 24
12313: PUSH
12314: LD_VAR 0 24
12318: PUSH
12319: LD_VAR 0 23
12323: PUSH
12324: LD_VAR 0 23
12328: PPUSH
12329: CALL_OW 310
12333: PUSH
12334: LD_VAR 0 23
12338: PPUSH
12339: CALL_OW 302
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: ADD
12352: ST_TO_ADDR
12353: GO 12306
12355: POP
12356: POP
// repeat soldiers = [ ] ;
12357: LD_ADDR_VAR 0 19
12361: PUSH
12362: EMPTY
12363: ST_TO_ADDR
// engineers = [ ] ;
12364: LD_ADDR_VAR 0 20
12368: PUSH
12369: EMPTY
12370: ST_TO_ADDR
// mechanics = [ ] ;
12371: LD_ADDR_VAR 0 21
12375: PUSH
12376: EMPTY
12377: ST_TO_ADDR
// scientists = [ ] ;
12378: LD_ADDR_VAR 0 22
12382: PUSH
12383: EMPTY
12384: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12385: LD_ADDR_VAR 0 29
12389: PUSH
12390: LD_VAR 0 4
12394: PPUSH
12395: LD_INT 22
12397: PUSH
12398: LD_VAR 0 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 21
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 50
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 30
12428: PUSH
12429: LD_INT 0
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 70
12461: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12462: LD_ADDR_VAR 0 30
12466: PUSH
12467: LD_VAR 0 4
12471: PPUSH
12472: LD_INT 22
12474: PUSH
12475: LD_VAR 0 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 3
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 50
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 30
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 70
12538: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12539: LD_ADDR_VAR 0 31
12543: PUSH
12544: LD_VAR 0 4
12548: PPUSH
12549: LD_INT 22
12551: PUSH
12552: LD_VAR 0 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 3
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 50
12573: PUSH
12574: EMPTY
12575: LIST
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 30
12582: PUSH
12583: LD_INT 6
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 30
12592: PUSH
12593: LD_INT 7
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 8
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 70
12626: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12627: LD_ADDR_VAR 0 32
12631: PUSH
12632: LD_VAR 0 4
12636: PPUSH
12637: LD_INT 22
12639: PUSH
12640: LD_VAR 0 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 21
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 50
12661: PUSH
12662: EMPTY
12663: LIST
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 30
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 70
12703: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12704: LD_ADDR_VAR 0 33
12708: PUSH
12709: LD_VAR 0 4
12713: PPUSH
12714: LD_INT 22
12716: PUSH
12717: LD_VAR 0 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 3
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 50
12738: PUSH
12739: EMPTY
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 5
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 70
12780: ST_TO_ADDR
// for i := 1 to personel do
12781: LD_ADDR_VAR 0 13
12785: PUSH
12786: DOUBLE
12787: LD_INT 1
12789: DEC
12790: ST_TO_ADDR
12791: LD_VAR 0 18
12795: PUSH
12796: FOR_TO
12797: IFFALSE 13003
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12799: LD_VAR 0 18
12803: PUSH
12804: LD_VAR 0 13
12808: ARRAY
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 256
12818: PUSH
12819: LD_INT 1000
12821: EQUAL
12822: IFFALSE 12864
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12824: LD_ADDR_VAR 0 18
12828: PUSH
12829: LD_VAR 0 18
12833: PPUSH
12834: LD_VAR 0 13
12838: PUSH
12839: LD_VAR 0 18
12843: PUSH
12844: LD_VAR 0 13
12848: ARRAY
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL 36467 0 3
12861: ST_TO_ADDR
// end else
12862: GO 12951
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12864: LD_VAR 0 18
12868: PUSH
12869: LD_VAR 0 13
12873: ARRAY
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: CALL_OW 256
12883: PUSH
12884: LD_INT 950
12886: LESSEQUAL
12887: IFFALSE 12951
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12889: LD_ADDR_VAR 0 18
12893: PUSH
12894: LD_VAR 0 18
12898: PPUSH
12899: LD_VAR 0 13
12903: PUSH
12904: LD_VAR 0 18
12908: PUSH
12909: LD_VAR 0 13
12913: ARRAY
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: LD_INT 0
12921: PPUSH
12922: CALL 36467 0 3
12926: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12927: LD_VAR 0 18
12931: PUSH
12932: LD_VAR 0 13
12936: ARRAY
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12951: LD_VAR 0 18
12955: PUSH
12956: LD_VAR 0 13
12960: ARRAY
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: PPUSH
12966: CALL_OW 256
12970: PUSH
12971: LD_INT 250
12973: LESS
12974: IFFALSE 13001
// personel = personel diff [ personel [ i ] ] ;
12976: LD_ADDR_VAR 0 18
12980: PUSH
12981: LD_VAR 0 18
12985: PUSH
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 13
12995: ARRAY
12996: PUSH
12997: EMPTY
12998: LIST
12999: DIFF
13000: ST_TO_ADDR
// end ;
13001: GO 12796
13003: POP
13004: POP
// for i := 1 to vehicles do
13005: LD_ADDR_VAR 0 13
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_VAR 0 24
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13407
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13023: LD_VAR 0 24
13027: PUSH
13028: LD_VAR 0 13
13032: ARRAY
13033: PUSH
13034: LD_INT 1
13036: ARRAY
13037: PPUSH
13038: CALL_OW 261
13042: PUSH
13043: LD_INT 50
13045: LESS
13046: IFFALSE 13070
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13048: LD_VAR 0 24
13052: PUSH
13053: LD_VAR 0 13
13057: ARRAY
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_INT 100
13065: PPUSH
13066: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13070: LD_VAR 0 24
13074: PUSH
13075: LD_VAR 0 13
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PPUSH
13085: CALL_OW 256
13089: PUSH
13090: LD_INT 1000
13092: EQUAL
13093: IFFALSE 13268
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13095: LD_VAR 0 24
13099: PUSH
13100: LD_VAR 0 13
13104: ARRAY
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: PPUSH
13110: CALL_OW 263
13114: PUSH
13115: LD_INT 1
13117: EQUAL
13118: IFFALSE 13176
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13120: LD_VAR 0 24
13124: PUSH
13125: LD_VAR 0 13
13129: ARRAY
13130: PUSH
13131: LD_INT 2
13133: ARRAY
13134: PPUSH
13135: CALL_OW 310
13139: NOT
13140: IFFALSE 13176
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13142: LD_VAR 0 24
13146: PUSH
13147: LD_VAR 0 13
13151: ARRAY
13152: PUSH
13153: LD_INT 2
13155: ARRAY
13156: PPUSH
13157: LD_VAR 0 24
13161: PUSH
13162: LD_VAR 0 13
13166: ARRAY
13167: PUSH
13168: LD_INT 1
13170: ARRAY
13171: PPUSH
13172: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13176: LD_VAR 0 24
13180: PUSH
13181: LD_VAR 0 10
13185: LESS
13186: IFFALSE 13228
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13188: LD_ADDR_VAR 0 24
13192: PUSH
13193: LD_VAR 0 24
13197: PPUSH
13198: LD_VAR 0 13
13202: PUSH
13203: LD_VAR 0 24
13207: PUSH
13208: LD_VAR 0 13
13212: ARRAY
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL 36467 0 3
13225: ST_TO_ADDR
13226: GO 13266
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13228: LD_ADDR_VAR 0 24
13232: PUSH
13233: LD_VAR 0 24
13237: PPUSH
13238: LD_VAR 0 13
13242: PUSH
13243: LD_VAR 0 24
13247: PUSH
13248: LD_VAR 0 13
13252: ARRAY
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: CALL 36467 0 3
13265: ST_TO_ADDR
// end else
13266: GO 13355
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13268: LD_VAR 0 24
13272: PUSH
13273: LD_VAR 0 13
13277: ARRAY
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PPUSH
13283: CALL_OW 256
13287: PUSH
13288: LD_INT 650
13290: LESSEQUAL
13291: IFFALSE 13355
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13293: LD_ADDR_VAR 0 24
13297: PUSH
13298: LD_VAR 0 24
13302: PPUSH
13303: LD_VAR 0 13
13307: PUSH
13308: LD_VAR 0 24
13312: PUSH
13313: LD_VAR 0 13
13317: ARRAY
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: LD_INT 0
13325: PPUSH
13326: CALL 36467 0 3
13330: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13331: LD_VAR 0 24
13335: PUSH
13336: LD_VAR 0 13
13340: ARRAY
13341: PUSH
13342: LD_INT 1
13344: ARRAY
13345: PPUSH
13346: LD_VAR 0 6
13350: PPUSH
13351: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13355: LD_VAR 0 24
13359: PUSH
13360: LD_VAR 0 13
13364: ARRAY
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PPUSH
13370: CALL_OW 256
13374: PUSH
13375: LD_INT 250
13377: LESS
13378: IFFALSE 13405
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13380: LD_ADDR_VAR 0 24
13384: PUSH
13385: LD_VAR 0 24
13389: PUSH
13390: LD_VAR 0 24
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: EMPTY
13402: LIST
13403: DIFF
13404: ST_TO_ADDR
// end ;
13405: GO 13020
13407: POP
13408: POP
// for i := 1 to personel do
13409: LD_ADDR_VAR 0 13
13413: PUSH
13414: DOUBLE
13415: LD_INT 1
13417: DEC
13418: ST_TO_ADDR
13419: LD_VAR 0 18
13423: PUSH
13424: FOR_TO
13425: IFFALSE 13466
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13427: LD_ADDR_VAR 0 19
13431: PUSH
13432: LD_VAR 0 19
13436: PUSH
13437: LD_VAR 0 18
13441: PUSH
13442: LD_VAR 0 13
13446: ARRAY
13447: PPUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: ADD
13463: ST_TO_ADDR
13464: GO 13424
13466: POP
13467: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13468: LD_VAR 0 19
13472: PUSH
13473: LD_VAR 0 32
13477: PPUSH
13478: LD_INT 3
13480: PUSH
13481: LD_INT 59
13483: PUSH
13484: EMPTY
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: AND
13496: IFFALSE 13784
// begin for i := 1 to personel do
13498: LD_ADDR_VAR 0 13
13502: PUSH
13503: DOUBLE
13504: LD_INT 1
13506: DEC
13507: ST_TO_ADDR
13508: LD_VAR 0 18
13512: PUSH
13513: FOR_TO
13514: IFFALSE 13780
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13516: LD_VAR 0 18
13520: PUSH
13521: LD_VAR 0 13
13525: ARRAY
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: CALL_OW 257
13535: PUSH
13536: LD_INT 1
13538: EQUAL
13539: PUSH
13540: LD_VAR 0 18
13544: PUSH
13545: LD_VAR 0 13
13549: ARRAY
13550: PUSH
13551: LD_INT 3
13553: ARRAY
13554: PUSH
13555: LD_INT 1
13557: EQUAL
13558: AND
13559: IFFALSE 13778
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13561: LD_VAR 0 18
13565: PUSH
13566: LD_VAR 0 13
13570: ARRAY
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: CALL_OW 437
13580: IFFALSE 13681
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13582: LD_VAR 0 18
13586: PUSH
13587: LD_VAR 0 13
13591: ARRAY
13592: PUSH
13593: LD_INT 1
13595: ARRAY
13596: PPUSH
13597: CALL_OW 437
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PUSH
13610: LD_STRING e
13612: EQUAL
13613: PUSH
13614: LD_VAR 0 18
13618: PUSH
13619: LD_VAR 0 13
13623: ARRAY
13624: PUSH
13625: LD_INT 1
13627: ARRAY
13628: PPUSH
13629: CALL_OW 437
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PUSH
13638: LD_INT 4
13640: ARRAY
13641: PPUSH
13642: CALL_OW 266
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: IN
13657: AND
13658: IFFALSE 13681
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13660: LD_VAR 0 18
13664: PUSH
13665: LD_VAR 0 13
13669: ARRAY
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: EMPTY
13676: PPUSH
13677: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13681: LD_ADDR_VAR 0 36
13685: PUSH
13686: LD_VAR 0 32
13690: PPUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 59
13696: PUSH
13697: EMPTY
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 72
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13776
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13712: LD_VAR 0 18
13716: PUSH
13717: LD_VAR 0 13
13721: ARRAY
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 310
13731: PPUSH
13732: CALL_OW 266
13736: PUSH
13737: LD_INT 31
13739: PUSH
13740: LD_INT 32
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: IN
13747: NOT
13748: IFFALSE 13774
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13750: LD_VAR 0 18
13754: PUSH
13755: LD_VAR 0 13
13759: ARRAY
13760: PUSH
13761: LD_INT 1
13763: ARRAY
13764: PPUSH
13765: LD_VAR 0 36
13769: PPUSH
13770: CALL_OW 120
13774: GO 13709
13776: POP
13777: POP
// end ; end ;
13778: GO 13513
13780: POP
13781: POP
// end else
13782: GO 13999
// if soldiers and barracks then
13784: LD_VAR 0 19
13788: PUSH
13789: LD_VAR 0 33
13793: AND
13794: IFFALSE 13999
// for i := 1 to personel do
13796: LD_ADDR_VAR 0 13
13800: PUSH
13801: DOUBLE
13802: LD_INT 1
13804: DEC
13805: ST_TO_ADDR
13806: LD_VAR 0 18
13810: PUSH
13811: FOR_TO
13812: IFFALSE 13997
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13814: LD_VAR 0 18
13818: PUSH
13819: LD_VAR 0 13
13823: ARRAY
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PPUSH
13829: CALL_OW 257
13833: PUSH
13834: LD_INT 1
13836: EQUAL
13837: PUSH
13838: LD_VAR 0 18
13842: PUSH
13843: LD_VAR 0 13
13847: ARRAY
13848: PUSH
13849: LD_INT 3
13851: ARRAY
13852: PUSH
13853: LD_INT 1
13855: EQUAL
13856: AND
13857: PUSH
13858: LD_VAR 0 18
13862: PUSH
13863: LD_VAR 0 13
13867: ARRAY
13868: PUSH
13869: LD_INT 1
13871: ARRAY
13872: PPUSH
13873: LD_INT 56
13875: PUSH
13876: EMPTY
13877: LIST
13878: PPUSH
13879: CALL_OW 72
13883: AND
13884: IFFALSE 13995
// begin if not personel [ i ] [ 2 ] then
13886: LD_VAR 0 18
13890: PUSH
13891: LD_VAR 0 13
13895: ARRAY
13896: PUSH
13897: LD_INT 2
13899: ARRAY
13900: NOT
13901: IFFALSE 13961
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13903: LD_ADDR_VAR 0 18
13907: PUSH
13908: LD_VAR 0 18
13912: PPUSH
13913: LD_VAR 0 13
13917: PUSH
13918: LD_VAR 0 18
13922: PUSH
13923: LD_VAR 0 13
13927: ARRAY
13928: PUSH
13929: LD_INT 1
13931: MINUS
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PPUSH
13937: LD_VAR 0 33
13941: PUSH
13942: LD_INT 1
13944: PPUSH
13945: LD_VAR 0 33
13949: PPUSH
13950: CALL_OW 12
13954: ARRAY
13955: PPUSH
13956: CALL 36467 0 3
13960: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13961: LD_VAR 0 18
13965: PUSH
13966: LD_VAR 0 13
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PPUSH
13976: LD_VAR 0 18
13980: PUSH
13981: LD_VAR 0 13
13985: ARRAY
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 120
// end ;
13995: GO 13811
13997: POP
13998: POP
// for i := 1 to personel do
13999: LD_ADDR_VAR 0 13
14003: PUSH
14004: DOUBLE
14005: LD_INT 1
14007: DEC
14008: ST_TO_ADDR
14009: LD_VAR 0 18
14013: PUSH
14014: FOR_TO
14015: IFFALSE 14056
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14017: LD_ADDR_VAR 0 20
14021: PUSH
14022: LD_VAR 0 20
14026: PUSH
14027: LD_VAR 0 18
14031: PUSH
14032: LD_VAR 0 13
14036: ARRAY
14037: PPUSH
14038: LD_INT 25
14040: PUSH
14041: LD_INT 2
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 72
14052: ADD
14053: ST_TO_ADDR
14054: GO 14014
14056: POP
14057: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14058: LD_VAR 0 20
14062: PUSH
14063: LD_VAR 0 4
14067: PPUSH
14068: LD_INT 22
14070: PUSH
14071: LD_VAR 0 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 24
14095: PUSH
14096: LD_INT 1000
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 70
14116: AND
14117: IFFALSE 14393
// begin for i := 1 to personel do
14119: LD_ADDR_VAR 0 13
14123: PUSH
14124: DOUBLE
14125: LD_INT 1
14127: DEC
14128: ST_TO_ADDR
14129: LD_VAR 0 18
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14389
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14137: LD_VAR 0 18
14141: PUSH
14142: LD_VAR 0 13
14146: ARRAY
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: CALL_OW 257
14156: PUSH
14157: LD_INT 2
14159: EQUAL
14160: PUSH
14161: LD_VAR 0 18
14165: PUSH
14166: LD_VAR 0 13
14170: ARRAY
14171: PUSH
14172: LD_INT 3
14174: ARRAY
14175: PUSH
14176: LD_INT 1
14178: EQUAL
14179: AND
14180: IFFALSE 14387
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14182: LD_VAR 0 18
14186: PUSH
14187: LD_VAR 0 13
14191: ARRAY
14192: PUSH
14193: LD_INT 1
14195: ARRAY
14196: PPUSH
14197: CALL_OW 437
14201: IFFALSE 14257
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14203: LD_VAR 0 18
14207: PUSH
14208: LD_VAR 0 13
14212: ARRAY
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PPUSH
14218: CALL_OW 437
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PUSH
14227: LD_INT 1
14229: ARRAY
14230: PUSH
14231: LD_STRING e
14233: EQUAL
14234: IFFALSE 14257
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14236: LD_VAR 0 18
14240: PUSH
14241: LD_VAR 0 13
14245: ARRAY
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: EMPTY
14252: PPUSH
14253: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14257: LD_VAR 0 18
14261: PUSH
14262: LD_VAR 0 13
14266: ARRAY
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PPUSH
14272: CALL_OW 310
14276: IFFALSE 14297
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14278: LD_VAR 0 18
14282: PUSH
14283: LD_VAR 0 13
14287: ARRAY
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PPUSH
14293: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14297: LD_ADDR_VAR 0 34
14301: PUSH
14302: LD_VAR 0 4
14306: PPUSH
14307: LD_INT 22
14309: PUSH
14310: LD_VAR 0 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 21
14321: PUSH
14322: LD_INT 3
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 3
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 1000
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 70
14355: PUSH
14356: FOR_IN
14357: IFFALSE 14385
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14359: LD_VAR 0 18
14363: PUSH
14364: LD_VAR 0 13
14368: ARRAY
14369: PUSH
14370: LD_INT 1
14372: ARRAY
14373: PPUSH
14374: LD_VAR 0 34
14378: PPUSH
14379: CALL_OW 190
14383: GO 14356
14385: POP
14386: POP
// end ;
14387: GO 14134
14389: POP
14390: POP
// end else
14391: GO 14655
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14393: LD_VAR 0 20
14397: PUSH
14398: LD_VAR 0 20
14402: PPUSH
14403: LD_INT 56
14405: PUSH
14406: EMPTY
14407: LIST
14408: PPUSH
14409: CALL_OW 72
14413: AND
14414: PUSH
14415: LD_VAR 0 29
14419: AND
14420: IFFALSE 14655
// for i := 1 to personel do
14422: LD_ADDR_VAR 0 13
14426: PUSH
14427: DOUBLE
14428: LD_INT 1
14430: DEC
14431: ST_TO_ADDR
14432: LD_VAR 0 18
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14653
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14440: LD_VAR 0 18
14444: PUSH
14445: LD_VAR 0 13
14449: ARRAY
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: CALL_OW 257
14459: PUSH
14460: LD_INT 2
14462: EQUAL
14463: PUSH
14464: LD_VAR 0 18
14468: PUSH
14469: LD_VAR 0 13
14473: ARRAY
14474: PUSH
14475: LD_INT 3
14477: ARRAY
14478: PUSH
14479: LD_INT 1
14481: EQUAL
14482: AND
14483: IFFALSE 14651
// begin if not personel [ i ] [ 2 ] then
14485: LD_VAR 0 18
14489: PUSH
14490: LD_VAR 0 13
14494: ARRAY
14495: PUSH
14496: LD_INT 2
14498: ARRAY
14499: NOT
14500: IFFALSE 14617
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14502: LD_ADDR_VAR 0 18
14506: PUSH
14507: LD_VAR 0 18
14511: PPUSH
14512: LD_VAR 0 13
14516: PUSH
14517: LD_VAR 0 18
14521: PUSH
14522: LD_VAR 0 13
14526: ARRAY
14527: PUSH
14528: LD_INT 1
14530: MINUS
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: LD_VAR 0 4
14540: PPUSH
14541: LD_INT 22
14543: PUSH
14544: LD_VAR 0 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 21
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 50
14565: PUSH
14566: EMPTY
14567: LIST
14568: PUSH
14569: LD_INT 2
14571: PUSH
14572: LD_INT 30
14574: PUSH
14575: LD_INT 0
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 30
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: CALL 36467 0 3
14616: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14617: LD_VAR 0 18
14621: PUSH
14622: LD_VAR 0 13
14626: ARRAY
14627: PUSH
14628: LD_INT 1
14630: ARRAY
14631: PPUSH
14632: LD_VAR 0 18
14636: PUSH
14637: LD_VAR 0 13
14641: ARRAY
14642: PUSH
14643: LD_INT 2
14645: ARRAY
14646: PPUSH
14647: CALL_OW 120
// end ; end ;
14651: GO 14437
14653: POP
14654: POP
// for i := 1 to personel do
14655: LD_ADDR_VAR 0 13
14659: PUSH
14660: DOUBLE
14661: LD_INT 1
14663: DEC
14664: ST_TO_ADDR
14665: LD_VAR 0 18
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14712
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14673: LD_ADDR_VAR 0 21
14677: PUSH
14678: LD_VAR 0 21
14682: PUSH
14683: LD_VAR 0 18
14687: PUSH
14688: LD_VAR 0 13
14692: ARRAY
14693: PPUSH
14694: LD_INT 25
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PPUSH
14704: CALL_OW 72
14708: ADD
14709: ST_TO_ADDR
14710: GO 14670
14712: POP
14713: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14714: LD_VAR 0 21
14718: PUSH
14719: LD_VAR 0 4
14723: PPUSH
14724: LD_INT 22
14726: PUSH
14727: LD_VAR 0 1
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 3
14748: PUSH
14749: LD_INT 24
14751: PUSH
14752: LD_INT 1000
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 70
14772: AND
14773: IFFALSE 15377
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14775: LD_ADDR_VAR 0 35
14779: PUSH
14780: LD_VAR 0 4
14784: PPUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: LD_INT 24
14812: PUSH
14813: LD_INT 1000
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 70
14833: PUSH
14834: FOR_IN
14835: IFFALSE 15373
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14837: LD_VAR 0 35
14841: PPUSH
14842: LD_VAR 0 6
14846: PPUSH
14847: CALL_OW 299
14851: PUSH
14852: LD_INT 5
14854: LESS
14855: IFFALSE 15150
// begin for i := 1 to vehicles do
14857: LD_ADDR_VAR 0 13
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 24
14871: PUSH
14872: FOR_TO
14873: IFFALSE 14942
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14875: LD_VAR 0 24
14879: PUSH
14880: LD_VAR 0 13
14884: ARRAY
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PUSH
14890: LD_VAR 0 35
14894: EQUAL
14895: IFFALSE 14916
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14897: LD_VAR 0 24
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 2
14910: ARRAY
14911: PPUSH
14912: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14916: LD_VAR 0 24
14920: PUSH
14921: LD_VAR 0 13
14925: ARRAY
14926: PUSH
14927: LD_INT 2
14929: ARRAY
14930: PPUSH
14931: LD_VAR 0 35
14935: PPUSH
14936: CALL_OW 189
// end ;
14940: GO 14872
14942: POP
14943: POP
// for i := 1 to personel do
14944: LD_ADDR_VAR 0 13
14948: PUSH
14949: DOUBLE
14950: LD_INT 1
14952: DEC
14953: ST_TO_ADDR
14954: LD_VAR 0 18
14958: PUSH
14959: FOR_TO
14960: IFFALSE 15148
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14962: LD_VAR 0 18
14966: PUSH
14967: LD_VAR 0 13
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: CALL_OW 257
14981: PUSH
14982: LD_INT 3
14984: EQUAL
14985: PUSH
14986: LD_VAR 0 18
14990: PUSH
14991: LD_VAR 0 13
14995: ARRAY
14996: PUSH
14997: LD_INT 3
14999: ARRAY
15000: PUSH
15001: LD_INT 1
15003: EQUAL
15004: AND
15005: IFFALSE 15146
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15007: LD_VAR 0 18
15011: PUSH
15012: LD_VAR 0 13
15016: ARRAY
15017: PUSH
15018: LD_INT 1
15020: ARRAY
15021: PPUSH
15022: CALL_OW 437
15026: IFFALSE 15082
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15028: LD_VAR 0 18
15032: PUSH
15033: LD_VAR 0 13
15037: ARRAY
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: CALL_OW 437
15047: PUSH
15048: LD_INT 1
15050: ARRAY
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PUSH
15056: LD_STRING e
15058: EQUAL
15059: IFFALSE 15082
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15061: LD_VAR 0 18
15065: PUSH
15066: LD_VAR 0 13
15070: ARRAY
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PPUSH
15076: EMPTY
15077: PPUSH
15078: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15082: LD_VAR 0 18
15086: PUSH
15087: LD_VAR 0 13
15091: ARRAY
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: PPUSH
15097: CALL_OW 310
15101: IFFALSE 15122
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15103: LD_VAR 0 18
15107: PUSH
15108: LD_VAR 0 13
15112: ARRAY
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15122: LD_VAR 0 18
15126: PUSH
15127: LD_VAR 0 13
15131: ARRAY
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 35
15141: PPUSH
15142: CALL_OW 189
// end ;
15146: GO 14959
15148: POP
15149: POP
// end ; if GetLives ( damageUnit ) < 250 then
15150: LD_VAR 0 35
15154: PPUSH
15155: CALL_OW 256
15159: PUSH
15160: LD_INT 250
15162: LESS
15163: IFFALSE 15371
// for i := 1 to personel do
15165: LD_ADDR_VAR 0 13
15169: PUSH
15170: DOUBLE
15171: LD_INT 1
15173: DEC
15174: ST_TO_ADDR
15175: LD_VAR 0 18
15179: PUSH
15180: FOR_TO
15181: IFFALSE 15369
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15183: LD_VAR 0 18
15187: PUSH
15188: LD_VAR 0 13
15192: ARRAY
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: CALL_OW 257
15202: PUSH
15203: LD_INT 3
15205: EQUAL
15206: PUSH
15207: LD_VAR 0 18
15211: PUSH
15212: LD_VAR 0 13
15216: ARRAY
15217: PUSH
15218: LD_INT 3
15220: ARRAY
15221: PUSH
15222: LD_INT 1
15224: EQUAL
15225: AND
15226: IFFALSE 15367
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15228: LD_VAR 0 18
15232: PUSH
15233: LD_VAR 0 13
15237: ARRAY
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: PPUSH
15243: CALL_OW 437
15247: IFFALSE 15303
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15249: LD_VAR 0 18
15253: PUSH
15254: LD_VAR 0 13
15258: ARRAY
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: CALL_OW 437
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PUSH
15277: LD_STRING e
15279: EQUAL
15280: IFFALSE 15303
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15282: LD_VAR 0 18
15286: PUSH
15287: LD_VAR 0 13
15291: ARRAY
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PPUSH
15297: EMPTY
15298: PPUSH
15299: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15303: LD_VAR 0 18
15307: PUSH
15308: LD_VAR 0 13
15312: ARRAY
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 310
15322: IFFALSE 15343
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15324: LD_VAR 0 18
15328: PUSH
15329: LD_VAR 0 13
15333: ARRAY
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15343: LD_VAR 0 18
15347: PUSH
15348: LD_VAR 0 13
15352: ARRAY
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 35
15362: PPUSH
15363: CALL_OW 189
// end ;
15367: GO 15180
15369: POP
15370: POP
// end ;
15371: GO 14834
15373: POP
15374: POP
// end else
15375: GO 15582
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15377: LD_VAR 0 21
15381: PUSH
15382: LD_VAR 0 21
15386: PPUSH
15387: LD_INT 56
15389: PUSH
15390: EMPTY
15391: LIST
15392: PPUSH
15393: CALL_OW 72
15397: AND
15398: PUSH
15399: LD_VAR 0 30
15403: AND
15404: IFFALSE 15582
// for i := 1 to personel do
15406: LD_ADDR_VAR 0 13
15410: PUSH
15411: DOUBLE
15412: LD_INT 1
15414: DEC
15415: ST_TO_ADDR
15416: LD_VAR 0 18
15420: PUSH
15421: FOR_TO
15422: IFFALSE 15580
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15424: LD_VAR 0 18
15428: PUSH
15429: LD_VAR 0 13
15433: ARRAY
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: CALL_OW 257
15443: PUSH
15444: LD_INT 3
15446: EQUAL
15447: PUSH
15448: LD_VAR 0 18
15452: PUSH
15453: LD_VAR 0 13
15457: ARRAY
15458: PUSH
15459: LD_INT 3
15461: ARRAY
15462: PUSH
15463: LD_INT 1
15465: EQUAL
15466: AND
15467: IFFALSE 15578
// begin if not personel [ i ] [ 2 ] then
15469: LD_VAR 0 18
15473: PUSH
15474: LD_VAR 0 13
15478: ARRAY
15479: PUSH
15480: LD_INT 2
15482: ARRAY
15483: NOT
15484: IFFALSE 15544
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15486: LD_ADDR_VAR 0 18
15490: PUSH
15491: LD_VAR 0 18
15495: PPUSH
15496: LD_VAR 0 13
15500: PUSH
15501: LD_VAR 0 18
15505: PUSH
15506: LD_VAR 0 13
15510: ARRAY
15511: PUSH
15512: LD_INT 1
15514: MINUS
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: LD_VAR 0 30
15524: PUSH
15525: LD_INT 1
15527: PPUSH
15528: LD_VAR 0 30
15532: PPUSH
15533: CALL_OW 12
15537: ARRAY
15538: PPUSH
15539: CALL 36467 0 3
15543: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15544: LD_VAR 0 18
15548: PUSH
15549: LD_VAR 0 13
15553: ARRAY
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: PPUSH
15559: LD_VAR 0 18
15563: PUSH
15564: LD_VAR 0 13
15568: ARRAY
15569: PUSH
15570: LD_INT 2
15572: ARRAY
15573: PPUSH
15574: CALL_OW 120
// end ;
15578: GO 15421
15580: POP
15581: POP
// for i := 1 to personel do
15582: LD_ADDR_VAR 0 13
15586: PUSH
15587: DOUBLE
15588: LD_INT 1
15590: DEC
15591: ST_TO_ADDR
15592: LD_VAR 0 18
15596: PUSH
15597: FOR_TO
15598: IFFALSE 15639
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15600: LD_ADDR_VAR 0 22
15604: PUSH
15605: LD_VAR 0 22
15609: PUSH
15610: LD_VAR 0 18
15614: PUSH
15615: LD_VAR 0 13
15619: ARRAY
15620: PPUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 4
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: ADD
15636: ST_TO_ADDR
15637: GO 15597
15639: POP
15640: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15641: LD_VAR 0 22
15645: PUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: LD_INT 22
15653: PUSH
15654: LD_VAR 0 1
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 1000
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 70
15699: AND
15700: IFFALSE 16217
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15702: LD_ADDR_VAR 0 35
15706: PUSH
15707: LD_VAR 0 4
15711: PPUSH
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: LD_INT 24
15739: PUSH
15740: LD_INT 1000
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 70
15760: PUSH
15761: FOR_IN
15762: IFFALSE 16213
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15764: LD_VAR 0 35
15768: PPUSH
15769: LD_VAR 0 5
15773: PPUSH
15774: CALL_OW 299
15778: PUSH
15779: LD_INT 5
15781: LESS
15782: IFFALSE 15990
// for i := 1 to personel do
15784: LD_ADDR_VAR 0 13
15788: PUSH
15789: DOUBLE
15790: LD_INT 1
15792: DEC
15793: ST_TO_ADDR
15794: LD_VAR 0 18
15798: PUSH
15799: FOR_TO
15800: IFFALSE 15988
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15802: LD_VAR 0 18
15806: PUSH
15807: LD_VAR 0 13
15811: ARRAY
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: CALL_OW 257
15821: PUSH
15822: LD_INT 4
15824: EQUAL
15825: PUSH
15826: LD_VAR 0 18
15830: PUSH
15831: LD_VAR 0 13
15835: ARRAY
15836: PUSH
15837: LD_INT 3
15839: ARRAY
15840: PUSH
15841: LD_INT 1
15843: EQUAL
15844: AND
15845: IFFALSE 15986
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15847: LD_VAR 0 18
15851: PUSH
15852: LD_VAR 0 13
15856: ARRAY
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: CALL_OW 437
15866: IFFALSE 15922
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15868: LD_VAR 0 18
15872: PUSH
15873: LD_VAR 0 13
15877: ARRAY
15878: PUSH
15879: LD_INT 1
15881: ARRAY
15882: PPUSH
15883: CALL_OW 437
15887: PUSH
15888: LD_INT 1
15890: ARRAY
15891: PUSH
15892: LD_INT 1
15894: ARRAY
15895: PUSH
15896: LD_STRING e
15898: EQUAL
15899: IFFALSE 15922
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15901: LD_VAR 0 18
15905: PUSH
15906: LD_VAR 0 13
15910: ARRAY
15911: PUSH
15912: LD_INT 1
15914: ARRAY
15915: PPUSH
15916: EMPTY
15917: PPUSH
15918: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15922: LD_VAR 0 18
15926: PUSH
15927: LD_VAR 0 13
15931: ARRAY
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: CALL_OW 310
15941: IFFALSE 15962
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15943: LD_VAR 0 18
15947: PUSH
15948: LD_VAR 0 13
15952: ARRAY
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: PPUSH
15958: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15962: LD_VAR 0 18
15966: PUSH
15967: LD_VAR 0 13
15971: ARRAY
15972: PUSH
15973: LD_INT 1
15975: ARRAY
15976: PPUSH
15977: LD_VAR 0 35
15981: PPUSH
15982: CALL_OW 188
// end ;
15986: GO 15799
15988: POP
15989: POP
// if GetLives ( damageUnit ) < 250 then
15990: LD_VAR 0 35
15994: PPUSH
15995: CALL_OW 256
15999: PUSH
16000: LD_INT 250
16002: LESS
16003: IFFALSE 16211
// for i := 1 to personel do
16005: LD_ADDR_VAR 0 13
16009: PUSH
16010: DOUBLE
16011: LD_INT 1
16013: DEC
16014: ST_TO_ADDR
16015: LD_VAR 0 18
16019: PUSH
16020: FOR_TO
16021: IFFALSE 16209
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16023: LD_VAR 0 18
16027: PUSH
16028: LD_VAR 0 13
16032: ARRAY
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PPUSH
16038: CALL_OW 257
16042: PUSH
16043: LD_INT 4
16045: EQUAL
16046: PUSH
16047: LD_VAR 0 18
16051: PUSH
16052: LD_VAR 0 13
16056: ARRAY
16057: PUSH
16058: LD_INT 3
16060: ARRAY
16061: PUSH
16062: LD_INT 1
16064: EQUAL
16065: AND
16066: IFFALSE 16207
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16068: LD_VAR 0 18
16072: PUSH
16073: LD_VAR 0 13
16077: ARRAY
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PPUSH
16083: CALL_OW 437
16087: IFFALSE 16143
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16089: LD_VAR 0 18
16093: PUSH
16094: LD_VAR 0 13
16098: ARRAY
16099: PUSH
16100: LD_INT 1
16102: ARRAY
16103: PPUSH
16104: CALL_OW 437
16108: PUSH
16109: LD_INT 1
16111: ARRAY
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PUSH
16117: LD_STRING e
16119: EQUAL
16120: IFFALSE 16143
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16122: LD_VAR 0 18
16126: PUSH
16127: LD_VAR 0 13
16131: ARRAY
16132: PUSH
16133: LD_INT 1
16135: ARRAY
16136: PPUSH
16137: EMPTY
16138: PPUSH
16139: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16143: LD_VAR 0 18
16147: PUSH
16148: LD_VAR 0 13
16152: ARRAY
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PPUSH
16158: CALL_OW 310
16162: IFFALSE 16183
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16164: LD_VAR 0 18
16168: PUSH
16169: LD_VAR 0 13
16173: ARRAY
16174: PUSH
16175: LD_INT 1
16177: ARRAY
16178: PPUSH
16179: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16183: LD_VAR 0 18
16187: PUSH
16188: LD_VAR 0 13
16192: ARRAY
16193: PUSH
16194: LD_INT 1
16196: ARRAY
16197: PPUSH
16198: LD_VAR 0 35
16202: PPUSH
16203: CALL_OW 188
// end ;
16207: GO 16020
16209: POP
16210: POP
// end ;
16211: GO 15761
16213: POP
16214: POP
// end else
16215: GO 16422
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16217: LD_VAR 0 22
16221: PUSH
16222: LD_VAR 0 22
16226: PPUSH
16227: LD_INT 56
16229: PUSH
16230: EMPTY
16231: LIST
16232: PPUSH
16233: CALL_OW 72
16237: AND
16238: PUSH
16239: LD_VAR 0 31
16243: AND
16244: IFFALSE 16422
// for i := 1 to personel do
16246: LD_ADDR_VAR 0 13
16250: PUSH
16251: DOUBLE
16252: LD_INT 1
16254: DEC
16255: ST_TO_ADDR
16256: LD_VAR 0 18
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16420
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16264: LD_VAR 0 18
16268: PUSH
16269: LD_VAR 0 13
16273: ARRAY
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 257
16283: PUSH
16284: LD_INT 4
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 18
16292: PUSH
16293: LD_VAR 0 13
16297: ARRAY
16298: PUSH
16299: LD_INT 3
16301: ARRAY
16302: PUSH
16303: LD_INT 1
16305: EQUAL
16306: AND
16307: IFFALSE 16418
// begin if not personel [ i ] [ 2 ] then
16309: LD_VAR 0 18
16313: PUSH
16314: LD_VAR 0 13
16318: ARRAY
16319: PUSH
16320: LD_INT 2
16322: ARRAY
16323: NOT
16324: IFFALSE 16384
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16326: LD_ADDR_VAR 0 18
16330: PUSH
16331: LD_VAR 0 18
16335: PPUSH
16336: LD_VAR 0 13
16340: PUSH
16341: LD_VAR 0 18
16345: PUSH
16346: LD_VAR 0 13
16350: ARRAY
16351: PUSH
16352: LD_INT 1
16354: MINUS
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PPUSH
16360: LD_VAR 0 31
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 31
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: PPUSH
16379: CALL 36467 0 3
16383: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16384: LD_VAR 0 18
16388: PUSH
16389: LD_VAR 0 13
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: LD_VAR 0 18
16403: PUSH
16404: LD_VAR 0 13
16408: ARRAY
16409: PUSH
16410: LD_INT 2
16412: ARRAY
16413: PPUSH
16414: CALL_OW 120
// end ;
16418: GO 16261
16420: POP
16421: POP
// wait ( 0 0$01 ) ;
16422: LD_INT 35
16424: PPUSH
16425: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16429: LD_VAR 0 24
16433: PUSH
16434: LD_VAR 0 8
16438: LESS
16439: PUSH
16440: LD_VAR 0 30
16444: AND
16445: IFFALSE 16695
// begin tmp = vehiclesAmount - vehicles ;
16447: LD_ADDR_VAR 0 15
16451: PUSH
16452: LD_VAR 0 8
16456: PUSH
16457: LD_VAR 0 24
16461: MINUS
16462: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16463: LD_ADDR_VAR 0 27
16467: PUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_VAR 0 2
16477: PPUSH
16478: CALL 7742 0 2
16482: ST_TO_ADDR
// for i := 1 to tmp do
16483: LD_ADDR_VAR 0 13
16487: PUSH
16488: DOUBLE
16489: LD_INT 1
16491: DEC
16492: ST_TO_ADDR
16493: LD_VAR 0 15
16497: PUSH
16498: FOR_TO
16499: IFFALSE 16691
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16501: LD_ADDR_VAR 0 15
16505: PUSH
16506: LD_VAR 0 27
16510: PUSH
16511: LD_INT 1
16513: PPUSH
16514: LD_VAR 0 27
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: ST_TO_ADDR
// if tmp then
16525: LD_VAR 0 15
16529: IFFALSE 16689
// begin if tmp in [ 34 , 14 , 71 ] then
16531: LD_VAR 0 15
16535: PUSH
16536: LD_INT 34
16538: PUSH
16539: LD_INT 14
16541: PUSH
16542: LD_INT 71
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: IN
16550: IFFALSE 16588
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16552: LD_ADDR_VAR 0 28
16556: PUSH
16557: LD_INT 4
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: LD_INT 14
16565: PUSH
16566: EMPTY
16567: LIST
16568: PUSH
16569: LD_INT 24
16571: PUSH
16572: EMPTY
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PUSH
16580: LD_VAR 0 2
16584: ARRAY
16585: ST_TO_ADDR
16586: GO 16646
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16588: LD_ADDR_VAR 0 28
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: LD_INT 4
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 13
16609: PUSH
16610: LD_INT 14
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 21
16619: PUSH
16620: LD_INT 23
16622: PUSH
16623: LD_INT 24
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16646: LD_VAR 0 30
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PPUSH
16655: LD_VAR 0 28
16659: PUSH
16660: LD_INT 1
16662: PPUSH
16663: LD_VAR 0 28
16667: PPUSH
16668: CALL_OW 12
16672: ARRAY
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: LD_VAR 0 15
16684: PPUSH
16685: CALL_OW 185
// end ; end ;
16689: GO 16498
16691: POP
16692: POP
// end else
16693: GO 16708
// ComCancel ( factory [ 1 ] ) ;
16695: LD_VAR 0 30
16699: PUSH
16700: LD_INT 1
16702: ARRAY
16703: PPUSH
16704: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16708: LD_ADDR_VAR 0 23
16712: PUSH
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_INT 22
16720: PUSH
16721: LD_VAR 0 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 2
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL_OW 70
16748: PUSH
16749: FOR_IN
16750: IFFALSE 16920
// begin vehicleInList = false ;
16752: LD_ADDR_VAR 0 25
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// for i := 1 to vehicles do
16760: LD_ADDR_VAR 0 13
16764: PUSH
16765: DOUBLE
16766: LD_INT 1
16768: DEC
16769: ST_TO_ADDR
16770: LD_VAR 0 24
16774: PUSH
16775: FOR_TO
16776: IFFALSE 16806
// begin if vehicle in vehicles [ i ] then
16778: LD_VAR 0 23
16782: PUSH
16783: LD_VAR 0 24
16787: PUSH
16788: LD_VAR 0 13
16792: ARRAY
16793: IN
16794: IFFALSE 16804
// vehicleInList = true ;
16796: LD_ADDR_VAR 0 25
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// end ;
16804: GO 16775
16806: POP
16807: POP
// if not vehicleInList then
16808: LD_VAR 0 25
16812: NOT
16813: IFFALSE 16918
// if vehicles < vehiclesToAttackAmount then
16815: LD_VAR 0 24
16819: PUSH
16820: LD_VAR 0 10
16824: LESS
16825: IFFALSE 16877
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16827: LD_ADDR_VAR 0 24
16831: PUSH
16832: LD_VAR 0 24
16836: PUSH
16837: LD_VAR 0 23
16841: PUSH
16842: LD_VAR 0 23
16846: PPUSH
16847: CALL_OW 313
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 23
16860: PPUSH
16861: CALL_OW 302
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: ADD
16874: ST_TO_ADDR
16875: GO 16918
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16877: LD_ADDR_VAR 0 24
16881: PUSH
16882: LD_VAR 0 24
16886: PUSH
16887: LD_VAR 0 23
16891: PUSH
16892: LD_VAR 0 23
16896: PPUSH
16897: CALL_OW 313
16901: PUSH
16902: LD_INT 1
16904: ARRAY
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: ADD
16917: ST_TO_ADDR
// end ;
16918: GO 16749
16920: POP
16921: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16922: LD_ADDR_VAR 0 37
16926: PUSH
16927: LD_VAR 0 7
16931: PPUSH
16932: LD_INT 81
16934: PUSH
16935: LD_VAR 0 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 70
16948: PUSH
16949: FOR_IN
16950: IFFALSE 17129
// begin defenceUnits = [ ] ;
16952: LD_ADDR_VAR 0 26
16956: PUSH
16957: EMPTY
16958: ST_TO_ADDR
// for i := 1 to personel do
16959: LD_ADDR_VAR 0 13
16963: PUSH
16964: DOUBLE
16965: LD_INT 1
16967: DEC
16968: ST_TO_ADDR
16969: LD_VAR 0 18
16973: PUSH
16974: FOR_TO
16975: IFFALSE 17025
// if personel [ i ] [ 3 ] = 2 then
16977: LD_VAR 0 18
16981: PUSH
16982: LD_VAR 0 13
16986: ARRAY
16987: PUSH
16988: LD_INT 3
16990: ARRAY
16991: PUSH
16992: LD_INT 2
16994: EQUAL
16995: IFFALSE 17023
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16997: LD_ADDR_VAR 0 26
17001: PUSH
17002: LD_VAR 0 26
17006: PUSH
17007: LD_VAR 0 18
17011: PUSH
17012: LD_VAR 0 13
17016: ARRAY
17017: PUSH
17018: LD_INT 1
17020: ARRAY
17021: ADD
17022: ST_TO_ADDR
17023: GO 16974
17025: POP
17026: POP
// for i := 1 to vehicles do
17027: LD_ADDR_VAR 0 13
17031: PUSH
17032: DOUBLE
17033: LD_INT 1
17035: DEC
17036: ST_TO_ADDR
17037: LD_VAR 0 24
17041: PUSH
17042: FOR_TO
17043: IFFALSE 17093
// if vehicles [ i ] [ 3 ] = 2 then
17045: LD_VAR 0 24
17049: PUSH
17050: LD_VAR 0 13
17054: ARRAY
17055: PUSH
17056: LD_INT 3
17058: ARRAY
17059: PUSH
17060: LD_INT 2
17062: EQUAL
17063: IFFALSE 17091
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17065: LD_ADDR_VAR 0 26
17069: PUSH
17070: LD_VAR 0 26
17074: PUSH
17075: LD_VAR 0 24
17079: PUSH
17080: LD_VAR 0 13
17084: ARRAY
17085: PUSH
17086: LD_INT 1
17088: ARRAY
17089: ADD
17090: ST_TO_ADDR
17091: GO 17042
17093: POP
17094: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17095: LD_VAR 0 26
17099: PPUSH
17100: LD_INT 3
17102: PUSH
17103: LD_INT 60
17105: PUSH
17106: EMPTY
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 72
17117: PPUSH
17118: LD_VAR 0 37
17122: PPUSH
17123: CALL_OW 175
// end ;
17127: GO 16949
17129: POP
17130: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17131: LD_ADDR_VAR 0 38
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_VAR 0 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 31
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 32
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 33
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 30
17183: PUSH
17184: LD_INT 4
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 30
17193: PUSH
17194: LD_INT 5
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17218: LD_ADDR_VAR 0 39
17222: PUSH
17223: LD_INT 81
17225: PUSH
17226: LD_VAR 0 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 21
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 58
17247: PUSH
17248: EMPTY
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17261: LD_VAR 0 38
17265: PUSH
17266: LD_VAR 0 39
17270: AND
17271: IFFALSE 17341
// for i in attackBuildings do
17273: LD_ADDR_VAR 0 13
17277: PUSH
17278: LD_VAR 0 38
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17339
// for j in enemyBuildings do
17286: LD_ADDR_VAR 0 14
17290: PUSH
17291: LD_VAR 0 39
17295: PUSH
17296: FOR_IN
17297: IFFALSE 17335
// if GetDistUnits ( i , j ) < 12 then
17299: LD_VAR 0 13
17303: PPUSH
17304: LD_VAR 0 14
17308: PPUSH
17309: CALL_OW 296
17313: PUSH
17314: LD_INT 12
17316: LESS
17317: IFFALSE 17333
// ComAttackUnit ( i , j ) ;
17319: LD_VAR 0 13
17323: PPUSH
17324: LD_VAR 0 14
17328: PPUSH
17329: CALL_OW 115
17333: GO 17296
17335: POP
17336: POP
17337: GO 17283
17339: POP
17340: POP
// until not personel or not enableOmicronAI ;
17341: LD_VAR 0 18
17345: NOT
17346: PUSH
17347: LD_EXP 29
17351: NOT
17352: OR
17353: IFFALSE 12357
// end ;
17355: LD_VAR 0 12
17359: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
17364: PPUSH
// weapons = [ ru_gun ] ;
17365: LD_ADDR_VAR 0 3
17369: PUSH
17370: LD_INT 44
17372: PUSH
17373: EMPTY
17374: LIST
17375: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_EXP 72
17385: PUSH
17386: FOR_IN
17387: IFFALSE 17419
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17389: LD_VAR 0 2
17393: PPUSH
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: PPUSH
17413: CALL_OW 208
17417: GO 17386
17419: POP
17420: POP
// end ;
17421: LD_VAR 0 1
17425: RET
// export function KirovProduceVehicles ( factory ) ; begin
17426: LD_INT 0
17428: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17429: LD_VAR 0 1
17433: PPUSH
17434: LD_INT 21
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_INT 51
17445: PPUSH
17446: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_INT 21
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 51
17466: PPUSH
17467: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17471: LD_VAR 0 1
17475: PPUSH
17476: LD_INT 21
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 51
17487: PPUSH
17488: CALL_OW 185
// case Difficulty of 1 :
17492: LD_OWVAR 67
17496: PUSH
17497: LD_INT 1
17499: DOUBLE
17500: EQUAL
17501: IFTRUE 17505
17503: GO 17628
17505: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17506: LD_VAR 0 1
17510: PPUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 23
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PPUSH
17524: LD_INT 2
17526: PPUSH
17527: CALL_OW 12
17531: ARRAY
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 43
17541: PPUSH
17542: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17546: LD_VAR 0 1
17550: PPUSH
17551: LD_INT 21
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_INT 2
17566: PPUSH
17567: CALL_OW 12
17571: ARRAY
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 43
17581: PPUSH
17582: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: LD_INT 21
17593: PUSH
17594: LD_INT 23
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: LD_INT 44
17621: PPUSH
17622: CALL_OW 185
// end ; 2 :
17626: GO 17891
17628: LD_INT 2
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17759
17636: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17637: LD_VAR 0 1
17641: PPUSH
17642: LD_INT 21
17644: PUSH
17645: LD_INT 23
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: PPUSH
17655: LD_INT 2
17657: PPUSH
17658: CALL_OW 12
17662: ARRAY
17663: PPUSH
17664: LD_INT 1
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: LD_INT 42
17672: PPUSH
17673: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: PPUSH
17695: LD_INT 2
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: PPUSH
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: LD_INT 43
17712: PPUSH
17713: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17717: LD_VAR 0 1
17721: PPUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 23
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: PPUSH
17735: LD_INT 2
17737: PPUSH
17738: CALL_OW 12
17742: ARRAY
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 44
17752: PPUSH
17753: CALL_OW 185
// end ; 3 :
17757: GO 17891
17759: LD_INT 3
17761: DOUBLE
17762: EQUAL
17763: IFTRUE 17767
17765: GO 17890
17767: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_INT 21
17775: PUSH
17776: LD_INT 23
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PPUSH
17786: LD_INT 2
17788: PPUSH
17789: CALL_OW 12
17793: ARRAY
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: LD_INT 42
17803: PPUSH
17804: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17808: LD_VAR 0 1
17812: PPUSH
17813: LD_INT 21
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: PPUSH
17826: LD_INT 2
17828: PPUSH
17829: CALL_OW 12
17833: ARRAY
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_INT 42
17843: PPUSH
17844: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_INT 21
17855: PUSH
17856: LD_INT 23
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_INT 2
17868: PPUSH
17869: CALL_OW 12
17873: ARRAY
17874: PPUSH
17875: LD_INT 1
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: LD_INT 44
17883: PPUSH
17884: CALL_OW 185
// end ; end ;
17888: GO 17891
17890: POP
// end ;
17891: LD_VAR 0 2
17895: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// vehicles = [ ] ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: EMPTY
17911: ST_TO_ADDR
// cargoRefuel = [ ] ;
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: EMPTY
17918: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17919: LD_ADDR_VAR 0 4
17923: PUSH
17924: LD_EXP 76
17928: PUSH
17929: FOR_IN
17930: IFFALSE 17979
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17932: LD_ADDR_VAR 0 3
17936: PUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 4
17949: PUSH
17950: LD_VAR 0 4
17954: PPUSH
17955: CALL_OW 313
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 2
17976: ST_TO_ADDR
17977: GO 17929
17979: POP
17980: POP
// repeat for i := 1 to vehicles do
17981: LD_ADDR_VAR 0 2
17985: PUSH
17986: DOUBLE
17987: LD_INT 1
17989: DEC
17990: ST_TO_ADDR
17991: LD_VAR 0 3
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18035
// if vehicles [ i ] [ 3 ] = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_VAR 0 2
18008: ARRAY
18009: PUSH
18010: LD_INT 3
18012: ARRAY
18013: PUSH
18014: LD_INT 1
18016: EQUAL
18017: IFFALSE 18033
// goodVehs = goodVehs + 1 ;
18019: LD_ADDR_VAR 0 5
18023: PUSH
18024: LD_VAR 0 5
18028: PUSH
18029: LD_INT 1
18031: PLUS
18032: ST_TO_ADDR
18033: GO 17996
18035: POP
18036: POP
// if goodVehs = vehicles then
18037: LD_VAR 0 5
18041: PUSH
18042: LD_VAR 0 3
18046: EQUAL
18047: IFFALSE 18270
// for i := 1 to vehicles do
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: DOUBLE
18055: LD_INT 1
18057: DEC
18058: ST_TO_ADDR
18059: LD_VAR 0 3
18063: PUSH
18064: FOR_TO
18065: IFFALSE 18268
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 2
18076: ARRAY
18077: PUSH
18078: LD_INT 1
18080: ARRAY
18081: PPUSH
18082: CALL_OW 314
18086: NOT
18087: IFFALSE 18266
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18089: LD_VAR 0 3
18093: PUSH
18094: LD_VAR 0 2
18098: ARRAY
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 261
18108: PUSH
18109: LD_INT 50
18111: LESS
18112: IFFALSE 18241
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18114: LD_ADDR_VAR 0 6
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 6
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 21
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 34
18141: PUSH
18142: LD_INT 51
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 50
18151: PUSH
18152: EMPTY
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18205
// if GetCargo ( cargo , mat_oil ) > 0 then
18169: LD_VAR 0 6
18173: PPUSH
18174: LD_INT 2
18176: PPUSH
18177: CALL_OW 289
18181: PUSH
18182: LD_INT 0
18184: GREATER
18185: IFFALSE 18203
// cargoRefuel = cargoRefuel ^ cargo ;
18187: LD_ADDR_VAR 0 7
18191: PUSH
18192: LD_VAR 0 7
18196: PUSH
18197: LD_VAR 0 6
18201: ADD
18202: ST_TO_ADDR
18203: GO 18166
18205: POP
18206: POP
// if cargo then
18207: LD_VAR 0 6
18211: IFFALSE 18241
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18213: LD_VAR 0 3
18217: PUSH
18218: LD_VAR 0 2
18222: ARRAY
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: LD_VAR 0 6
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: CALL 8356 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18241: LD_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: ARRAY
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PPUSH
18256: LD_INT 26
18258: PPUSH
18259: LD_INT 35
18261: PPUSH
18262: CALL_OW 174
// end ; end ;
18266: GO 18064
18268: POP
18269: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18270: LD_VAR 0 3
18274: PUSH
18275: LD_VAR 0 2
18279: ARRAY
18280: PUSH
18281: LD_INT 1
18283: ARRAY
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL 10108 0 2
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_VAR 0 2
18302: ARRAY
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: CALL_OW 310
18312: NOT
18313: AND
18314: IFFALSE 18350
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18316: LD_VAR 0 3
18320: PUSH
18321: LD_VAR 0 2
18325: ARRAY
18326: PUSH
18327: LD_INT 2
18329: ARRAY
18330: PPUSH
18331: LD_VAR 0 3
18335: PUSH
18336: LD_VAR 0 2
18340: ARRAY
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PPUSH
18346: CALL_OW 120
// goodVehs = 0 ;
18350: LD_ADDR_VAR 0 5
18354: PUSH
18355: LD_INT 0
18357: ST_TO_ADDR
// for i := 1 to vehicles do
18358: LD_ADDR_VAR 0 2
18362: PUSH
18363: DOUBLE
18364: LD_INT 1
18366: DEC
18367: ST_TO_ADDR
18368: LD_VAR 0 3
18372: PUSH
18373: FOR_TO
18374: IFFALSE 18900
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18376: LD_VAR 0 3
18380: PUSH
18381: LD_VAR 0 2
18385: ARRAY
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PPUSH
18391: CALL_OW 256
18395: PUSH
18396: LD_INT 500
18398: LESS
18399: PUSH
18400: LD_VAR 0 3
18404: PUSH
18405: LD_VAR 0 2
18409: ARRAY
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PPUSH
18415: LD_INT 78
18417: PPUSH
18418: LD_INT 39
18420: PPUSH
18421: CALL_OW 297
18425: PUSH
18426: LD_INT 9
18428: LESS
18429: NOT
18430: AND
18431: IFFALSE 18496
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_VAR 0 3
18452: PUSH
18453: LD_VAR 0 2
18457: ARRAY
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: LD_INT 2
18465: PPUSH
18466: CALL 36467 0 3
18470: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18471: LD_VAR 0 3
18475: PUSH
18476: LD_VAR 0 2
18480: ARRAY
18481: PUSH
18482: LD_INT 1
18484: ARRAY
18485: PPUSH
18486: LD_INT 78
18488: PPUSH
18489: LD_INT 39
18491: PPUSH
18492: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18496: LD_VAR 0 3
18500: PUSH
18501: LD_VAR 0 2
18505: ARRAY
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: PPUSH
18511: CALL_OW 256
18515: PUSH
18516: LD_INT 500
18518: LESS
18519: PUSH
18520: LD_VAR 0 3
18524: PUSH
18525: LD_VAR 0 2
18529: ARRAY
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: LD_INT 78
18537: PPUSH
18538: LD_INT 39
18540: PPUSH
18541: CALL_OW 297
18545: PUSH
18546: LD_INT 9
18548: LESS
18549: AND
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_VAR 0 2
18560: ARRAY
18561: PUSH
18562: LD_INT 1
18564: ARRAY
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL 10108 0 2
18573: NOT
18574: AND
18575: IFFALSE 18630
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18577: LD_VAR 0 3
18581: PUSH
18582: LD_VAR 0 2
18586: ARRAY
18587: PUSH
18588: LD_INT 2
18590: ARRAY
18591: PPUSH
18592: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18596: LD_VAR 0 3
18600: PUSH
18601: LD_VAR 0 2
18605: ARRAY
18606: PUSH
18607: LD_INT 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 2
18620: ARRAY
18621: PUSH
18622: LD_INT 1
18624: ARRAY
18625: PPUSH
18626: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_VAR 0 2
18639: ARRAY
18640: PUSH
18641: LD_INT 1
18643: ARRAY
18644: PPUSH
18645: CALL_OW 256
18649: PUSH
18650: LD_INT 1000
18652: EQUAL
18653: PUSH
18654: LD_VAR 0 3
18658: PUSH
18659: LD_VAR 0 2
18663: ARRAY
18664: PUSH
18665: LD_INT 3
18667: ARRAY
18668: PUSH
18669: LD_INT 2
18671: EQUAL
18672: AND
18673: IFFALSE 18747
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18675: LD_ADDR_VAR 0 3
18679: PUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: LD_VAR 0 2
18689: PUSH
18690: LD_VAR 0 3
18694: PUSH
18695: LD_VAR 0 2
18699: ARRAY
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL 36467 0 3
18712: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18713: LD_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: ARRAY
18723: PUSH
18724: LD_INT 2
18726: ARRAY
18727: PPUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_VAR 0 2
18737: ARRAY
18738: PUSH
18739: LD_INT 1
18741: ARRAY
18742: PPUSH
18743: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_VAR 0 2
18756: ARRAY
18757: PUSH
18758: LD_INT 1
18760: ARRAY
18761: PPUSH
18762: CALL_OW 256
18766: PUSH
18767: LD_INT 250
18769: LESS
18770: IFFALSE 18797
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18772: LD_ADDR_VAR 0 3
18776: PUSH
18777: LD_VAR 0 3
18781: PUSH
18782: LD_VAR 0 3
18786: PUSH
18787: LD_VAR 0 2
18791: ARRAY
18792: PUSH
18793: EMPTY
18794: LIST
18795: DIFF
18796: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18797: LD_VAR 0 3
18801: PUSH
18802: LD_VAR 0 2
18806: ARRAY
18807: PUSH
18808: LD_INT 2
18810: ARRAY
18811: PPUSH
18812: CALL_OW 256
18816: PUSH
18817: LD_INT 250
18819: LESS
18820: PUSH
18821: LD_VAR 0 3
18825: PUSH
18826: LD_VAR 0 2
18830: ARRAY
18831: PUSH
18832: LD_INT 1
18834: ARRAY
18835: PPUSH
18836: CALL_OW 256
18840: PUSH
18841: LD_INT 250
18843: GREATER
18844: AND
18845: IFFALSE 18898
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18847: LD_ADDR_EXP 30
18851: PUSH
18852: LD_EXP 30
18856: PUSH
18857: LD_VAR 0 3
18861: PUSH
18862: LD_VAR 0 2
18866: ARRAY
18867: PUSH
18868: LD_INT 1
18870: ARRAY
18871: ADD
18872: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18873: LD_ADDR_VAR 0 3
18877: PUSH
18878: LD_VAR 0 3
18882: PUSH
18883: LD_VAR 0 3
18887: PUSH
18888: LD_VAR 0 2
18892: ARRAY
18893: PUSH
18894: EMPTY
18895: LIST
18896: DIFF
18897: ST_TO_ADDR
// end ; end ;
18898: GO 18373
18900: POP
18901: POP
// wait ( 0 0$1 ) ;
18902: LD_INT 35
18904: PPUSH
18905: CALL_OW 67
// until omicronSurrender ;
18909: LD_EXP 23
18913: IFFALSE 17981
// end ;
18915: LD_VAR 0 1
18919: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18920: LD_INT 0
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
// inBase = false ;
18936: LD_ADDR_VAR 0 15
18940: PUSH
18941: LD_INT 0
18943: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18944: LD_ADDR_VAR 0 8
18948: PUSH
18949: LD_VAR 0 2
18953: PPUSH
18954: LD_INT 22
18956: PUSH
18957: LD_INT 3
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: PPUSH
18967: CALL_OW 70
18971: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18972: LD_ADDR_VAR 0 9
18976: PUSH
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL_OW 435
18986: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18987: LD_ADDR_VAR 0 12
18991: PUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 50
18999: PUSH
19000: EMPTY
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 25
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 25
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 21
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 72
19050: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19051: LD_ADDR_VAR 0 13
19055: PUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: LD_INT 50
19063: PUSH
19064: EMPTY
19065: LIST
19066: PUSH
19067: LD_INT 25
19069: PUSH
19070: LD_INT 4
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 72
19085: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19086: LD_ADDR_VAR 0 14
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 24
19101: PUSH
19102: LD_INT 1000
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 72
19117: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19118: LD_ADDR_VAR 0 6
19122: PUSH
19123: LD_INT 22
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19141: LD_ADDR_VAR 0 5
19145: PUSH
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_INT 50
19153: PUSH
19154: EMPTY
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: PPUSH
19160: CALL_OW 72
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19913
// begin if attackUnits and medics then
19168: LD_VAR 0 12
19172: PUSH
19173: LD_VAR 0 13
19177: AND
19178: IFFALSE 19245
// begin if damageUnits then
19180: LD_VAR 0 14
19184: IFFALSE 19206
// ComHeal ( medics , damageUnits [ 1 ] ) else
19186: LD_VAR 0 13
19190: PPUSH
19191: LD_VAR 0 14
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 128
19204: GO 19243
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19206: LD_VAR 0 13
19210: PPUSH
19211: LD_VAR 0 12
19215: PUSH
19216: LD_INT 1
19218: ARRAY
19219: PPUSH
19220: CALL_OW 250
19224: PPUSH
19225: LD_VAR 0 12
19229: PUSH
19230: LD_INT 1
19232: ARRAY
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 111
// end else
19243: GO 19274
// begin if not attackUnits and medics then
19245: LD_VAR 0 12
19249: NOT
19250: PUSH
19251: LD_VAR 0 13
19255: AND
19256: IFFALSE 19274
// attackUnits = attackUnits ^ medics ;
19258: LD_ADDR_VAR 0 12
19262: PUSH
19263: LD_VAR 0 12
19267: PUSH
19268: LD_VAR 0 13
19272: ADD
19273: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19274: LD_ADDR_VAR 0 4
19278: PUSH
19279: DOUBLE
19280: LD_INT 1
19282: DEC
19283: ST_TO_ADDR
19284: LD_VAR 0 9
19288: PUSH
19289: LD_INT 2
19291: DIVREAL
19292: PUSH
19293: FOR_TO
19294: IFFALSE 19333
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19296: LD_VAR 0 12
19300: PPUSH
19301: LD_VAR 0 9
19305: PUSH
19306: LD_VAR 0 4
19310: ARRAY
19311: PPUSH
19312: LD_VAR 0 9
19316: PUSH
19317: LD_VAR 0 4
19321: PUSH
19322: LD_INT 1
19324: PLUS
19325: ARRAY
19326: PPUSH
19327: CALL_OW 176
19331: GO 19293
19333: POP
19334: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19335: LD_VAR 0 12
19339: PPUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 60
19355: PUSH
19356: EMPTY
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PPUSH
19367: CALL_OW 72
19371: PPUSH
19372: LD_INT 27
19374: PPUSH
19375: LD_INT 34
19377: PPUSH
19378: CALL_OW 111
// wait ( 0 0$01 ) ;
19382: LD_INT 35
19384: PPUSH
19385: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19389: LD_VAR 0 8
19393: PUSH
19394: LD_VAR 0 12
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 60
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: AND
19431: IFFALSE 19614
// begin for playerUnit in playerUnits do
19433: LD_ADDR_VAR 0 7
19437: PUSH
19438: LD_VAR 0 6
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19610
// begin if Attacks ( playerUnit ) then
19446: LD_VAR 0 7
19450: PPUSH
19451: CALL_OW 320
19455: IFFALSE 19542
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19457: LD_VAR 0 7
19461: PPUSH
19462: CALL_OW 320
19466: PUSH
19467: LD_VAR 0 1
19471: IN
19472: PUSH
19473: LD_VAR 0 7
19477: PPUSH
19478: LD_VAR 0 5
19482: PPUSH
19483: CALL_OW 296
19487: PUSH
19488: LD_INT 13
19490: LESS
19491: AND
19492: IFFALSE 19540
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19494: LD_VAR 0 12
19498: PPUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 60
19514: PUSH
19515: EMPTY
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 72
19530: PPUSH
19531: LD_VAR 0 7
19535: PPUSH
19536: CALL_OW 115
19540: GO 19608
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19542: LD_ADDR_VAR 0 10
19546: PUSH
19547: LD_VAR 0 8
19551: PPUSH
19552: LD_VAR 0 5
19556: PPUSH
19557: CALL_OW 74
19561: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19562: LD_VAR 0 12
19566: PPUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 60
19582: PUSH
19583: EMPTY
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 72
19598: PPUSH
19599: LD_VAR 0 10
19603: PPUSH
19604: CALL_OW 115
// end ; end ;
19608: GO 19443
19610: POP
19611: POP
// end else
19612: GO 19661
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19614: LD_VAR 0 12
19618: PPUSH
19619: LD_INT 21
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: LD_INT 60
19634: PUSH
19635: EMPTY
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 72
19650: PPUSH
19651: LD_INT 27
19653: PPUSH
19654: LD_INT 34
19656: PPUSH
19657: CALL_OW 111
// if enemyUnitsOnRoad then
19661: LD_VAR 0 8
19665: IFFALSE 19849
// begin for playerUnit in playerUnits do
19667: LD_ADDR_VAR 0 7
19671: PUSH
19672: LD_VAR 0 6
19676: PUSH
19677: FOR_IN
19678: IFFALSE 19845
// begin if Attacks ( playerUnit ) then
19680: LD_VAR 0 7
19684: PPUSH
19685: CALL_OW 320
19689: IFFALSE 19762
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19691: LD_VAR 0 7
19695: PPUSH
19696: CALL_OW 320
19700: PUSH
19701: LD_VAR 0 1
19705: IN
19706: PUSH
19707: LD_VAR 0 7
19711: PPUSH
19712: LD_VAR 0 5
19716: PPUSH
19717: CALL_OW 296
19721: PUSH
19722: LD_INT 13
19724: LESS
19725: AND
19726: IFFALSE 19760
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19728: LD_VAR 0 12
19732: PPUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: PPUSH
19746: CALL_OW 72
19750: PPUSH
19751: LD_VAR 0 7
19755: PPUSH
19756: CALL_OW 115
19760: GO 19843
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19762: LD_ADDR_VAR 0 10
19766: PUSH
19767: LD_VAR 0 8
19771: PPUSH
19772: LD_VAR 0 12
19776: PPUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 50
19789: PUSH
19790: EMPTY
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PPUSH
19797: CALL_OW 72
19801: PUSH
19802: LD_INT 1
19804: ARRAY
19805: PPUSH
19806: CALL_OW 74
19810: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19811: LD_VAR 0 12
19815: PPUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: PPUSH
19829: CALL_OW 72
19833: PPUSH
19834: LD_VAR 0 10
19838: PPUSH
19839: CALL_OW 115
// end ; end ;
19843: GO 19677
19845: POP
19846: POP
// end else
19847: GO 19882
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19849: LD_VAR 0 12
19853: PPUSH
19854: LD_INT 21
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: PPUSH
19867: CALL_OW 72
19871: PPUSH
19872: LD_INT 27
19874: PPUSH
19875: LD_INT 34
19877: PPUSH
19878: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19882: LD_VAR 0 5
19886: PPUSH
19887: LD_INT 27
19889: PPUSH
19890: LD_INT 34
19892: PPUSH
19893: CALL_OW 297
19897: PUSH
19898: LD_INT 5
19900: LESS
19901: IFFALSE 19911
// inBase = true ;
19903: LD_ADDR_VAR 0 15
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// end ;
19911: GO 19165
19913: POP
19914: POP
// wait ( 0 0$1 ) ;
19915: LD_INT 35
19917: PPUSH
19918: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19922: LD_VAR 0 1
19926: PPUSH
19927: LD_INT 50
19929: PUSH
19930: EMPTY
19931: LIST
19932: PPUSH
19933: CALL_OW 72
19937: PUSH
19938: LD_INT 0
19940: EQUAL
19941: PUSH
19942: LD_VAR 0 15
19946: OR
19947: IFFALSE 18944
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19949: LD_VAR 0 1
19953: PPUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 50
19966: PUSH
19967: EMPTY
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 72
19978: PPUSH
19979: LD_INT 27
19981: PPUSH
19982: LD_INT 34
19984: PPUSH
19985: CALL_OW 111
// for i := 1 to units do
19989: LD_ADDR_VAR 0 4
19993: PUSH
19994: DOUBLE
19995: LD_INT 1
19997: DEC
19998: ST_TO_ADDR
19999: LD_VAR 0 1
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20040
// if IsOk ( units [ i ] ) then
20007: LD_VAR 0 1
20011: PUSH
20012: LD_VAR 0 4
20016: ARRAY
20017: PPUSH
20018: CALL_OW 302
20022: IFFALSE 20038
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20024: LD_ADDR_EXP 12
20028: PUSH
20029: LD_EXP 12
20033: PUSH
20034: LD_INT 1
20036: PLUS
20037: ST_TO_ADDR
20038: GO 20004
20040: POP
20041: POP
// amSupportTroops = amSupportTroops diff units ;
20042: LD_ADDR_EXP 84
20046: PUSH
20047: LD_EXP 84
20051: PUSH
20052: LD_VAR 0 1
20056: DIFF
20057: ST_TO_ADDR
// newBase = amBase ;
20058: LD_ADDR_VAR 0 16
20062: PUSH
20063: LD_EXP 86
20067: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20068: LD_ADDR_VAR 0 16
20072: PUSH
20073: LD_VAR 0 16
20077: PUSH
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 50
20085: PUSH
20086: EMPTY
20087: LIST
20088: PPUSH
20089: CALL_OW 72
20093: ADD
20094: ST_TO_ADDR
// amBase = newBase ;
20095: LD_ADDR_EXP 86
20099: PUSH
20100: LD_VAR 0 16
20104: ST_TO_ADDR
// end ; end_of_file
20105: LD_VAR 0 3
20109: RET
// export function Lose_Burlak ; begin
20110: LD_INT 0
20112: PPUSH
// YouLost ( Burlak ) ;
20113: LD_STRING Burlak
20115: PPUSH
20116: CALL_OW 104
// end ;
20120: LD_VAR 0 1
20124: RET
// export function Lose_Omicron ; begin
20125: LD_INT 0
20127: PPUSH
// YouLost ( Omicron ) ;
20128: LD_STRING Omicron
20130: PPUSH
20131: CALL_OW 104
// end ;
20135: LD_VAR 0 1
20139: RET
// export function Lose_Vehicles ; begin
20140: LD_INT 0
20142: PPUSH
// YouLost ( Vehicles ) ;
20143: LD_STRING Vehicles
20145: PPUSH
20146: CALL_OW 104
// end ;
20150: LD_VAR 0 1
20154: RET
// export function Lose_SelfAttack ; begin
20155: LD_INT 0
20157: PPUSH
// YouLost ( SelfAttack ) ;
20158: LD_STRING SelfAttack
20160: PPUSH
20161: CALL_OW 104
// end ;
20165: LD_VAR 0 1
20169: RET
// export function Lose_Delay ; begin
20170: LD_INT 0
20172: PPUSH
// YouLost ( Delay ) ;
20173: LD_STRING Delay
20175: PPUSH
20176: CALL_OW 104
// end ; end_of_file
20180: LD_VAR 0 1
20184: RET
// export function FinishMission ; begin
20185: LD_INT 0
20187: PPUSH
// SetRewards ;
20188: CALL 20209 0 0
// SavePlayerCharacters ;
20192: CALL 20423 0 0
// SaveGlobalVariables ;
20196: CALL 20752 0 0
// YouWin ;
20200: CALL_OW 103
// end ;
20204: LD_VAR 0 1
20208: RET
// function SetRewards ; var unitsToReward ; begin
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
// if produceMoreVehicles then
20213: LD_EXP 16
20217: IFFALSE 20231
// AddMedal ( Surplus , 1 ) else
20219: LD_STRING Surplus
20221: PPUSH
20222: LD_INT 1
20224: PPUSH
20225: CALL_OW 101
20229: GO 20261
// if produceOnlyForYou then
20231: LD_EXP 17
20235: IFFALSE 20250
// AddMedal ( Surplus , - 1 ) else
20237: LD_STRING Surplus
20239: PPUSH
20240: LD_INT 1
20242: NEG
20243: PPUSH
20244: CALL_OW 101
20248: GO 20261
// AddMedal ( Surplus , - 2 ) ;
20250: LD_STRING Surplus
20252: PPUSH
20253: LD_INT 2
20255: NEG
20256: PPUSH
20257: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20261: LD_EXP 12
20265: PUSH
20266: LD_EXP 46
20270: LESS
20271: IFFALSE 20285
// AddMedal ( PreventReinforcements , 1 ) else
20273: LD_STRING PreventReinforcements
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 101
20283: GO 20296
// AddMedal ( PreventReinforcements , - 1 ) ;
20285: LD_STRING PreventReinforcements
20287: PPUSH
20288: LD_INT 1
20290: NEG
20291: PPUSH
20292: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20296: LD_EXP 7
20300: PUSH
20301: LD_EXP 55
20305: PPUSH
20306: CALL_OW 302
20310: AND
20311: IFFALSE 20325
// AddMedal ( Scholtze , 1 ) else
20313: LD_STRING Scholtze
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 101
20323: GO 20336
// AddMedal ( Scholtze , - 1 ) ;
20325: LD_STRING Scholtze
20327: PPUSH
20328: LD_INT 1
20330: NEG
20331: PPUSH
20332: CALL_OW 101
// GiveMedals ( Main ) ;
20336: LD_STRING Main
20338: PPUSH
20339: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: LD_INT 22
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20377: LD_ADDR_VAR 0 2
20381: PUSH
20382: LD_VAR 0 2
20386: PUSH
20387: LD_EXP 79
20391: ADD
20392: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_EXP 62
20407: DIFF
20408: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20409: LD_VAR 0 2
20413: PPUSH
20414: CALL_OW 43
// end ;
20418: LD_VAR 0 1
20422: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
20427: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20428: LD_EXP 49
20432: PPUSH
20433: LD_STRING Burlak
20435: PPUSH
20436: LD_INT 3
20438: PPUSH
20439: CALL 7240 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20443: LD_EXP 50
20447: PPUSH
20448: LD_STRING Gnyevko
20450: PPUSH
20451: LD_INT 3
20453: PPUSH
20454: CALL 7240 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20458: LD_EXP 52
20462: PPUSH
20463: LD_STRING Kovalyuk
20465: PPUSH
20466: LD_INT 3
20468: PPUSH
20469: CALL 7240 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20473: LD_EXP 51
20477: PPUSH
20478: LD_STRING Kirilenkova
20480: PPUSH
20481: LD_INT 3
20483: PPUSH
20484: CALL 7240 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20488: LD_EXP 55
20492: PPUSH
20493: LD_STRING Scholtze
20495: PPUSH
20496: LD_INT 3
20498: PPUSH
20499: CALL 7240 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20503: LD_EXP 53
20507: PPUSH
20508: LD_STRING Belkov
20510: PPUSH
20511: LD_INT 3
20513: PPUSH
20514: CALL 7240 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20518: LD_EXP 54
20522: PPUSH
20523: LD_STRING Belkov2
20525: PPUSH
20526: LD_INT 3
20528: PPUSH
20529: CALL 7240 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20533: LD_EXP 53
20537: PPUSH
20538: LD_STRING Belkov
20540: PPUSH
20541: LD_INT 6
20543: PPUSH
20544: CALL 7240 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20548: LD_EXP 54
20552: PPUSH
20553: LD_STRING Belkov2
20555: PPUSH
20556: LD_INT 6
20558: PPUSH
20559: CALL 7240 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20563: LD_ADDR_VAR 0 2
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 21
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 50
20590: PUSH
20591: EMPTY
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: PPUSH
20599: CALL_OW 69
20603: PUSH
20604: LD_EXP 49
20608: PUSH
20609: LD_EXP 50
20613: PUSH
20614: LD_EXP 53
20618: PUSH
20619: LD_EXP 54
20623: PUSH
20624: LD_EXP 52
20628: PUSH
20629: LD_EXP 51
20633: PUSH
20634: LD_EXP 55
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: DIFF
20648: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20649: LD_VAR 0 2
20653: PPUSH
20654: LD_STRING other_survivors
20656: PPUSH
20657: LD_INT 3
20659: PPUSH
20660: CALL 7296 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 6
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 21
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 50
20691: PUSH
20692: EMPTY
20693: LIST
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: PUSH
20705: LD_EXP 61
20709: PUSH
20710: LD_EXP 62
20714: PUSH
20715: LD_EXP 53
20719: PUSH
20720: LD_EXP 54
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: DIFF
20731: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20732: LD_VAR 0 3
20736: PPUSH
20737: LD_STRING other_kirov
20739: PPUSH
20740: LD_INT 6
20742: PPUSH
20743: CALL 7296 0 3
// end ;
20747: LD_VAR 0 1
20751: RET
// function SaveGlobalVariables ; begin
20752: LD_INT 0
20754: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20755: LD_EXP 26
20759: PPUSH
20760: LD_STRING 03_KurinOpinion_1
20762: PPUSH
20763: CALL_OW 39
// end ; end_of_file
20767: LD_VAR 0 1
20771: RET
// export function CustomEvent ( event ) ; begin
20772: LD_INT 0
20774: PPUSH
// end ;
20775: LD_VAR 0 2
20779: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20780: LD_INT 0
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_INT 22
20796: PUSH
20797: LD_INT 3
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 69
20822: PUSH
20823: FOR_IN
20824: IFFALSE 21021
// if GetTaskList ( i ) > 0 then
20826: LD_VAR 0 2
20830: PPUSH
20831: CALL_OW 437
20835: PUSH
20836: LD_INT 0
20838: GREATER
20839: IFFALSE 21019
// for j = 1 to GetTaskList ( i ) do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: DOUBLE
20847: LD_INT 1
20849: DEC
20850: ST_TO_ADDR
20851: LD_VAR 0 2
20855: PPUSH
20856: CALL_OW 437
20860: PUSH
20861: FOR_TO
20862: IFFALSE 21017
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20864: LD_ADDR_VAR 0 4
20868: PUSH
20869: LD_VAR 0 2
20873: PPUSH
20874: CALL_OW 437
20878: PUSH
20879: LD_VAR 0 3
20883: ARRAY
20884: PUSH
20885: LD_INT 4
20887: ARRAY
20888: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20889: LD_ADDR_VAR 0 8
20893: PUSH
20894: LD_VAR 0 2
20898: PPUSH
20899: CALL_OW 437
20903: PUSH
20904: LD_VAR 0 3
20908: ARRAY
20909: PUSH
20910: LD_INT 5
20912: ARRAY
20913: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20914: LD_ADDR_VAR 0 6
20918: PUSH
20919: LD_VAR 0 2
20923: PPUSH
20924: CALL_OW 437
20928: PUSH
20929: LD_VAR 0 3
20933: ARRAY
20934: PUSH
20935: LD_INT 2
20937: ARRAY
20938: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20939: LD_ADDR_VAR 0 7
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 437
20953: PUSH
20954: LD_VAR 0 3
20958: ARRAY
20959: PUSH
20960: LD_INT 3
20962: ARRAY
20963: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20964: LD_VAR 0 4
20968: PPUSH
20969: CALL_OW 255
20973: PUSH
20974: LD_INT 6
20976: EQUAL
20977: PUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 437
20987: PUSH
20988: LD_VAR 0 3
20992: ARRAY
20993: PUSH
20994: LD_INT 1
20996: ARRAY
20997: PUSH
20998: LD_STRING <
21000: EQUAL
21001: AND
21002: IFFALSE 21015
// SetTaskList ( i , [ ] ) ;
21004: LD_VAR 0 2
21008: PPUSH
21009: EMPTY
21010: PPUSH
21011: CALL_OW 446
// end ;
21015: GO 20861
21017: POP
21018: POP
21019: GO 20823
21021: POP
21022: POP
// end ;
21023: PPOPN 8
21025: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21026: LD_VAR 0 2
21030: PUSH
21031: LD_INT 6
21033: EQUAL
21034: IFFALSE 21048
// SetSide ( building , 6 ) ;
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_INT 6
21043: PPUSH
21044: CALL_OW 235
// end ;
21048: PPOPN 3
21050: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21051: LD_INT 0
21053: PPUSH
21054: PPUSH
// begin diffUnits = [ ] ;
21055: LD_ADDR_VAR 0 2
21059: PUSH
21060: EMPTY
21061: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: PUSH
21072: LD_INT 3
21074: EQUAL
21075: PUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 266
21085: PUSH
21086: LD_INT 0
21088: EQUAL
21089: AND
21090: PUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_INT 21
21098: PPUSH
21099: CALL_OW 308
21103: AND
21104: IFFALSE 21118
// SetBName ( building , kagan ) ;
21106: LD_VAR 0 1
21110: PPUSH
21111: LD_STRING kagan
21113: PPUSH
21114: CALL_OW 500
// if GetSide ( building ) = 6 then
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 255
21127: PUSH
21128: LD_INT 6
21130: EQUAL
21131: IFFALSE 21312
// begin if GetBType ( building ) = b_ext_noncombat then
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 266
21142: PUSH
21143: LD_INT 19
21145: EQUAL
21146: IFFALSE 21152
// begin SpawnKirovSupport ;
21148: CALL 4587 0 0
// end ; if GetBType ( building ) = b_depot then
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 266
21161: PUSH
21162: LD_INT 0
21164: EQUAL
21165: IFFALSE 21211
// begin kirovOilDepot = building ;
21167: LD_ADDR_EXP 68
21171: PUSH
21172: LD_VAR 0 1
21176: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21177: LD_EXP 68
21181: PPUSH
21182: CALL_OW 274
21186: PPUSH
21187: LD_INT 2
21189: PPUSH
21190: LD_INT 3000
21192: PPUSH
21193: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21197: LD_EXP 82
21201: PPUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 266
21220: PUSH
21221: LD_INT 31
21223: EQUAL
21224: PUSH
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 266
21234: PUSH
21235: LD_INT 4
21237: EQUAL
21238: OR
21239: PUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: LD_INT 20
21247: PPUSH
21248: CALL_OW 308
21252: AND
21253: IFFALSE 21312
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21255: LD_EXP 78
21259: PPUSH
21260: LD_INT 25
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 56
21272: PUSH
21273: EMPTY
21274: LIST
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: LD_INT 60
21281: PUSH
21282: EMPTY
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 72
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 120
// end ; end ;
21312: PPOPN 3
21314: END
// on UpgradeComplete ( building ) do var i , tmp ;
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 255
21328: PUSH
21329: LD_INT 3
21331: EQUAL
21332: PUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 266
21342: PUSH
21343: LD_INT 3
21345: EQUAL
21346: AND
21347: PUSH
21348: LD_EXP 8
21352: NOT
21353: AND
21354: IFFALSE 21365
// Dial_UpgradeWorkshop ( building ) ;
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL 24463 0 1
// end ;
21365: PPOPN 3
21367: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21368: LD_VAR 0 1
21372: PUSH
21373: LD_EXP 49
21377: EQUAL
21378: IFFALSE 21384
// Lose_Burlak ;
21380: CALL 20110 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21384: LD_VAR 0 1
21388: PUSH
21389: LD_EXP 60
21393: EQUAL
21394: PUSH
21395: LD_EXP 28
21399: NOT
21400: AND
21401: IFFALSE 21407
// Lose_Omicron ;
21403: CALL 20125 0 0
// end ;
21407: PPOPN 1
21409: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21410: LD_VAR 0 1
21414: PUSH
21415: LD_INT 3
21417: EQUAL
21418: PUSH
21419: LD_VAR 0 2
21423: PUSH
21424: LD_INT 6
21426: EQUAL
21427: AND
21428: IFFALSE 21434
// Lose_SelfAttack ;
21430: CALL 20155 0 0
// end ;
21434: PPOPN 2
21436: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 255
21446: PUSH
21447: LD_INT 6
21449: EQUAL
21450: IFFALSE 21615
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 264
21461: PUSH
21462: LD_INT 51
21464: EQUAL
21465: PUSH
21466: LD_EXP 74
21470: NOT
21471: AND
21472: IFFALSE 21486
// kirovTransportCargo = vehicle else
21474: LD_ADDR_EXP 74
21478: PUSH
21479: LD_VAR 0 1
21483: ST_TO_ADDR
21484: GO 21558
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 264
21495: PUSH
21496: LD_INT 51
21498: EQUAL
21499: IFFALSE 21558
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: LD_EXP 68
21510: PPUSH
21511: LD_INT 2
21513: PPUSH
21514: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21518: LD_VAR 0 1
21522: PPUSH
21523: LD_INT 137
21525: PPUSH
21526: LD_INT 99
21528: PPUSH
21529: CALL_OW 171
// AddComHold ( vehicle ) ;
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21542: LD_ADDR_EXP 75
21546: PUSH
21547: LD_EXP 75
21551: PUSH
21552: LD_VAR 0 1
21556: ADD
21557: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 264
21567: PUSH
21568: LD_INT 42
21570: PUSH
21571: LD_INT 43
21573: PUSH
21574: LD_INT 44
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: IN
21582: IFFALSE 21615
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21584: LD_ADDR_EXP 76
21588: PUSH
21589: LD_EXP 76
21593: PUSH
21594: LD_VAR 0 1
21598: ADD
21599: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21600: LD_VAR 0 1
21604: PPUSH
21605: LD_INT 137
21607: PPUSH
21608: LD_INT 99
21610: PPUSH
21611: CALL_OW 111
// end ; end ; end ;
21615: PPOPN 2
21617: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21618: LD_VAR 0 3
21622: PUSH
21623: LD_INT 6
21625: EQUAL
21626: PUSH
21627: LD_VAR 0 2
21631: PUSH
21632: LD_EXP 30
21636: IN
21637: NOT
21638: AND
21639: IFFALSE 21662
// begin ComExitVehicle ( capturing_unit ) ;
21641: LD_VAR 0 4
21645: PPUSH
21646: CALL_OW 121
// SetSide ( new , 6 ) ;
21650: LD_VAR 0 1
21654: PPUSH
21655: LD_INT 6
21657: PPUSH
21658: CALL_OW 235
// end ; end ;
21662: PPOPN 4
21664: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 255
21674: PUSH
21675: LD_INT 6
21677: EQUAL
21678: PUSH
21679: LD_EXP 19
21683: AND
21684: IFFALSE 21712
// begin wait ( 0 0$2 ) ;
21686: LD_INT 70
21688: PPUSH
21689: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_INT 78
21700: PPUSH
21701: LD_INT 39
21703: PPUSH
21704: CALL_OW 174
// KirovAttackOmicron ;
21708: CALL 17896 0 0
// end ; end ;
21712: PPOPN 2
21714: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 255
21724: PUSH
21725: LD_INT 6
21727: EQUAL
21728: PUSH
21729: LD_VAR 0 1
21733: PUSH
21734: LD_INT 39
21736: EQUAL
21737: AND
21738: IFFALSE 21799
// begin MountWeaponTurrent ;
21740: CALL 17360 0 0
// wait ( 3 3$30 ) ;
21744: LD_INT 7350
21746: PPUSH
21747: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21751: LD_INT 22
21753: PUSH
21754: LD_INT 6
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 21
21763: PUSH
21764: LD_INT 3
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 30
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL_OW 69
21790: PUSH
21791: LD_INT 1
21793: ARRAY
21794: PPUSH
21795: CALL 17426 0 1
// end ; end ; end_of_file
21799: PPOPN 2
21801: END
// export function MissionIntro ; var i , unit , freeSlots , tmp ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21809: LD_EXP 49
21813: PUSH
21814: LD_EXP 61
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21827: LD_EXP 49
21831: PUSH
21832: LD_EXP 63
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PPUSH
21841: LD_EXP 61
21845: PPUSH
21846: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21850: LD_EXP 61
21854: PPUSH
21855: LD_EXP 49
21859: PPUSH
21860: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21864: LD_INT 3
21866: PPUSH
21867: LD_INT 24
21869: PPUSH
21870: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21874: LD_EXP 53
21878: PPUSH
21879: CALL_OW 305
21883: NOT
21884: PUSH
21885: LD_EXP 54
21889: PPUSH
21890: CALL_OW 305
21894: NOT
21895: AND
21896: IFFALSE 21984
// begin Say ( Kurin , D1a-Kur-1 ) ;
21898: LD_EXP 61
21902: PPUSH
21903: LD_STRING D1a-Kur-1
21905: PPUSH
21906: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21910: LD_EXP 49
21914: PPUSH
21915: LD_STRING D1a-Bur-1
21917: PPUSH
21918: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21922: LD_EXP 61
21926: PPUSH
21927: LD_STRING D1a-Kur-2
21929: PPUSH
21930: CALL_OW 88
// if platonovOpinion <= 1 then
21934: LD_EXP 27
21938: PUSH
21939: LD_INT 1
21941: LESSEQUAL
21942: IFFALSE 21958
// Say ( Kurin , D1a-Kur-2a ) else
21944: LD_EXP 61
21948: PPUSH
21949: LD_STRING D1a-Kur-2a
21951: PPUSH
21952: CALL_OW 88
21956: GO 21970
// Say ( Kurin , D1a-Kur-2b ) ;
21958: LD_EXP 61
21962: PPUSH
21963: LD_STRING D1a-Kur-2b
21965: PPUSH
21966: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21970: LD_EXP 49
21974: PPUSH
21975: LD_STRING D1a-Bur-2
21977: PPUSH
21978: CALL_OW 88
// end else
21982: GO 22020
// begin Say ( Kurin , D1b-Kur-1 ) ;
21984: LD_EXP 61
21988: PPUSH
21989: LD_STRING D1b-Kur-1
21991: PPUSH
21992: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21996: LD_EXP 63
22000: PPUSH
22001: LD_STRING D1b-Bel-1
22003: PPUSH
22004: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22008: LD_EXP 61
22012: PPUSH
22013: LD_STRING D1b-Kur-2
22015: PPUSH
22016: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22020: LD_EXP 61
22024: PPUSH
22025: LD_STRING D2-Kur-1
22027: PPUSH
22028: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22032: LD_EXP 49
22036: PPUSH
22037: LD_STRING D2-Bur-1
22039: PPUSH
22040: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22044: LD_EXP 61
22048: PPUSH
22049: LD_STRING D2-Kur-2
22051: PPUSH
22052: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22056: LD_EXP 49
22060: PPUSH
22061: LD_STRING D2-Bur-2
22063: PPUSH
22064: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22068: LD_EXP 61
22072: PPUSH
22073: LD_STRING D2-Kur-3
22075: PPUSH
22076: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 6
22085: PPUSH
22086: LD_INT 1
22088: PPUSH
22089: LD_INT 1
22091: PPUSH
22092: CALL_OW 80
// PrepareAmericansMissionIntro ;
22096: CALL 5648 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22100: LD_EXP 83
22104: PPUSH
22105: LD_INT 28
22107: PPUSH
22108: LD_INT 35
22110: PPUSH
22111: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22115: LD_INT 93
22117: PPUSH
22118: LD_INT 36
22120: PPUSH
22121: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22125: LD_INT 93
22127: PPUSH
22128: LD_INT 36
22130: PPUSH
22131: LD_INT 3
22133: PPUSH
22134: LD_INT 9
22136: NEG
22137: PPUSH
22138: CALL_OW 330
// wait ( 0 0$6 ) ;
22142: LD_INT 210
22144: PPUSH
22145: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22149: LD_EXP 62
22153: PPUSH
22154: CALL_OW 85
// wait ( 0 0$1 ) ;
22158: LD_INT 35
22160: PPUSH
22161: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22165: LD_EXP 62
22169: PPUSH
22170: LD_STRING D2-Pop-3
22172: PPUSH
22173: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22177: LD_EXP 49
22181: PUSH
22182: LD_EXP 61
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 87
// wait ( 0 0$1 ) ;
22195: LD_INT 35
22197: PPUSH
22198: CALL_OW 67
// for unit in amIntroUnits do
22202: LD_ADDR_VAR 0 3
22206: PUSH
22207: LD_EXP 83
22211: PUSH
22212: FOR_IN
22213: IFFALSE 22226
// RemoveUnit ( unit ) ;
22215: LD_VAR 0 3
22219: PPUSH
22220: CALL_OW 64
22224: GO 22212
22226: POP
22227: POP
// Say ( Kurin , D2-Kur-4 ) ;
22228: LD_EXP 61
22232: PPUSH
22233: LD_STRING D2-Kur-4
22235: PPUSH
22236: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22240: LD_EXP 49
22244: PPUSH
22245: LD_STRING D2-Bur-4
22247: PPUSH
22248: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22252: LD_EXP 61
22256: PPUSH
22257: LD_STRING D2-Kur-5
22259: PPUSH
22260: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22264: LD_EXP 49
22268: PPUSH
22269: LD_STRING D2-Bur-5
22271: PPUSH
22272: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22276: LD_EXP 61
22280: PPUSH
22281: LD_STRING D2-Kur-6
22283: PPUSH
22284: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22288: LD_EXP 50
22292: PPUSH
22293: CALL_OW 305
22297: IFFALSE 22313
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22299: LD_ADDR_EXP 38
22303: PUSH
22304: LD_EXP 38
22308: PUSH
22309: LD_INT 1
22311: MINUS
22312: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22313: LD_EXP 52
22317: PPUSH
22318: CALL_OW 305
22322: IFFALSE 22338
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22324: LD_ADDR_EXP 38
22328: PUSH
22329: LD_EXP 38
22333: PUSH
22334: LD_INT 1
22336: MINUS
22337: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22338: LD_EXP 51
22342: PPUSH
22343: CALL_OW 305
22347: IFFALSE 22363
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22349: LD_ADDR_EXP 38
22353: PUSH
22354: LD_EXP 38
22358: PUSH
22359: LD_INT 1
22361: MINUS
22362: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22363: LD_EXP 38
22367: PPUSH
22368: CALL 7394 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22372: LD_INT 93
22374: PPUSH
22375: LD_INT 36
22377: PPUSH
22378: LD_INT 3
22380: PPUSH
22381: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 24
22390: PPUSH
22391: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22395: LD_INT 22
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PPUSH
22419: CALL_OW 69
22423: PPUSH
22424: CALL_OW 122
// wait ( 0 0$1 ) ;
22428: LD_INT 35
22430: PPUSH
22431: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22435: LD_INT 22
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 21
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PPUSH
22464: LD_EXP 60
22468: PPUSH
22469: CALL_OW 250
22473: PPUSH
22474: LD_EXP 60
22478: PPUSH
22479: CALL_OW 251
22483: PPUSH
22484: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
22488: LD_INT 35
22490: PPUSH
22491: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
22495: LD_EXP 49
22499: PPUSH
22500: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
22504: LD_EXP 49
22508: PPUSH
22509: LD_EXP 60
22513: PPUSH
22514: CALL_OW 296
22518: PUSH
22519: LD_INT 6
22521: LESS
22522: IFFALSE 22488
// InGameOff ;
22524: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22528: LD_STRING M1
22530: PPUSH
22531: CALL_OW 337
// SaveForQuickRestart ;
22535: CALL_OW 22
// counterEnable = true ;
22539: LD_ADDR_EXP 89
22543: PUSH
22544: LD_INT 1
22546: ST_TO_ADDR
// counterIndex = 1 ;
22547: LD_ADDR_EXP 90
22551: PUSH
22552: LD_INT 1
22554: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22555: LD_INT 3
22557: PPUSH
22558: LD_INT 24
22560: PPUSH
22561: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22565: LD_INT 6
22567: PPUSH
22568: LD_INT 22
22570: PUSH
22571: LD_INT 6
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 30
22590: PUSH
22591: LD_INT 6
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: PUSH
22608: LD_INT 1
22610: ARRAY
22611: PPUSH
22612: LD_INT 3
22614: PPUSH
22615: CALL 8809 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22619: LD_INT 1
22621: PPUSH
22622: LD_INT 22
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 21
22634: PUSH
22635: LD_INT 3
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 30
22644: PUSH
22645: LD_INT 7
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 69
22661: PUSH
22662: LD_INT 1
22664: ARRAY
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL 8809 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22673: LD_INT 18
22675: PPUSH
22676: LD_INT 22
22678: PUSH
22679: LD_INT 6
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 21
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 25
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 70
22715: PPUSH
22716: LD_INT 17
22718: PPUSH
22719: LD_INT 159
22721: PPUSH
22722: LD_INT 116
22724: PPUSH
22725: LD_INT 0
22727: PPUSH
22728: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22732: LD_INT 18
22734: PPUSH
22735: LD_INT 22
22737: PUSH
22738: LD_INT 6
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 25
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 70
22774: PPUSH
22775: LD_INT 19
22777: PPUSH
22778: LD_INT 161
22780: PPUSH
22781: LD_INT 115
22783: PPUSH
22784: LD_INT 5
22786: PPUSH
22787: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22791: LD_INT 18
22793: PPUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 6
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 21
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: PPUSH
22829: CALL_OW 70
22833: PPUSH
22834: LD_EXP 67
22838: PPUSH
22839: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22843: LD_EXP 79
22847: PPUSH
22848: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22852: LD_ADDR_VAR 0 5
22856: PUSH
22857: LD_EXP 79
22861: PUSH
22862: LD_EXP 62
22866: DIFF
22867: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22868: LD_ADDR_VAR 0 4
22872: PUSH
22873: LD_INT 6
22875: PUSH
22876: LD_EXP 69
22880: PPUSH
22881: CALL_OW 313
22885: MINUS
22886: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22887: LD_EXP 79
22891: PUSH
22892: LD_EXP 62
22896: DIFF
22897: PPUSH
22898: LD_EXP 69
22902: PPUSH
22903: CALL_OW 180
// for i = 1 to tmp do
22907: LD_ADDR_VAR 0 2
22911: PUSH
22912: DOUBLE
22913: LD_INT 1
22915: DEC
22916: ST_TO_ADDR
22917: LD_VAR 0 5
22921: PUSH
22922: FOR_TO
22923: IFFALSE 22975
// begin if freeSlots > 0 then
22925: LD_VAR 0 4
22929: PUSH
22930: LD_INT 0
22932: GREATER
22933: IFFALSE 22971
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
22935: LD_VAR 0 5
22939: PUSH
22940: LD_VAR 0 2
22944: ARRAY
22945: PPUSH
22946: LD_EXP 69
22950: PPUSH
22951: CALL_OW 120
// freeSlots = freeSlots - 1 ;
22955: LD_ADDR_VAR 0 4
22959: PUSH
22960: LD_VAR 0 4
22964: PUSH
22965: LD_INT 1
22967: MINUS
22968: ST_TO_ADDR
// end else
22969: GO 22973
// break ;
22971: GO 22975
// end ;
22973: GO 22922
22975: POP
22976: POP
// wait ( 0 0$1 ) ;
22977: LD_INT 35
22979: PPUSH
22980: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
22984: LD_VAR 0 5
22988: PPUSH
22989: LD_INT 56
22991: PUSH
22992: EMPTY
22993: LIST
22994: PUSH
22995: LD_INT 3
22997: PUSH
22998: LD_INT 60
23000: PUSH
23001: EMPTY
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 72
23016: PPUSH
23017: LD_EXP 67
23021: PPUSH
23022: CALL_OW 120
// ComWalk ( ruScout ) ;
23026: LD_EXP 64
23030: PPUSH
23031: CALL_OW 138
// wait ( 0 0$1 ) ;
23035: LD_INT 35
23037: PPUSH
23038: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23042: LD_EXP 64
23046: PUSH
23047: LD_EXP 62
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PPUSH
23056: LD_INT 99
23058: PPUSH
23059: LD_INT 37
23061: PPUSH
23062: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23066: LD_EXP 64
23070: PUSH
23071: LD_EXP 62
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PPUSH
23080: LD_INT 88
23082: PPUSH
23083: LD_INT 60
23085: PPUSH
23086: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23090: LD_EXP 64
23094: PUSH
23095: LD_EXP 62
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PPUSH
23104: LD_INT 129
23106: PPUSH
23107: LD_INT 99
23109: PPUSH
23110: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23114: LD_EXP 62
23118: PUSH
23119: LD_EXP 64
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PPUSH
23128: LD_EXP 67
23132: PPUSH
23133: CALL_OW 180
// end ;
23137: LD_VAR 0 1
23141: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23142: LD_EXP 22
23146: IFFALSE 23418
23148: GO 23150
23150: DISABLE
23151: LD_INT 0
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_VAR 0 4
23167: PUSH
23168: LD_EXP 61
23172: ADD
23173: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23174: LD_ADDR_VAR 0 4
23178: PUSH
23179: LD_VAR 0 4
23183: PUSH
23184: LD_EXP 79
23188: ADD
23189: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23190: LD_ADDR_VAR 0 4
23194: PUSH
23195: LD_VAR 0 4
23199: PUSH
23200: LD_EXP 71
23204: ADD
23205: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23206: LD_ADDR_VAR 0 5
23210: PUSH
23211: LD_INT 18
23213: PPUSH
23214: LD_INT 22
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 21
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PPUSH
23238: CALL_OW 70
23242: PUSH
23243: LD_VAR 0 4
23247: DIFF
23248: ST_TO_ADDR
// pom = 6 ;
23249: LD_ADDR_VAR 0 3
23253: PUSH
23254: LD_INT 6
23256: ST_TO_ADDR
// if canTakeUnits then
23257: LD_VAR 0 5
23261: IFFALSE 23385
// for i = 1 to canTakeUnits do
23263: LD_ADDR_VAR 0 1
23267: PUSH
23268: DOUBLE
23269: LD_INT 1
23271: DEC
23272: ST_TO_ADDR
23273: LD_VAR 0 5
23277: PUSH
23278: FOR_TO
23279: IFFALSE 23383
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23281: LD_VAR 0 5
23285: PUSH
23286: LD_VAR 0 1
23290: ARRAY
23291: PPUSH
23292: CALL_OW 257
23296: PUSH
23297: LD_INT 3
23299: NONEQUAL
23300: IFFALSE 23347
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23302: LD_VAR 0 5
23306: PUSH
23307: LD_VAR 0 1
23311: ARRAY
23312: PPUSH
23313: LD_EXP 21
23317: PPUSH
23318: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23322: LD_VAR 0 5
23326: PUSH
23327: LD_VAR 0 1
23331: ARRAY
23332: PPUSH
23333: LD_INT 1
23335: PPUSH
23336: CALL_OW 183
// wait ( 0 0$1 ) ;
23340: LD_INT 35
23342: PPUSH
23343: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23347: LD_VAR 0 5
23351: PUSH
23352: LD_VAR 0 1
23356: ARRAY
23357: PPUSH
23358: LD_EXP 21
23362: PPUSH
23363: CALL_OW 120
// pom = pom - 1 ;
23367: LD_ADDR_VAR 0 3
23371: PUSH
23372: LD_VAR 0 3
23376: PUSH
23377: LD_INT 1
23379: MINUS
23380: ST_TO_ADDR
// end ;
23381: GO 23278
23383: POP
23384: POP
// if pom > 0 then
23385: LD_VAR 0 3
23389: PUSH
23390: LD_INT 0
23392: GREATER
23393: IFFALSE 23418
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23395: LD_ADDR_EXP 81
23399: PUSH
23400: LD_EXP 81
23404: PPUSH
23405: LD_INT 3
23407: PPUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: CALL_OW 1
23417: ST_TO_ADDR
// end ;
23418: PPOPN 5
23420: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23421: LD_EXP 74
23425: PUSH
23426: LD_EXP 31
23430: NOT
23431: AND
23432: IFFALSE 23481
23434: GO 23436
23436: DISABLE
// begin enable ;
23437: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23438: LD_EXP 74
23442: PPUSH
23443: LD_EXP 68
23447: PPUSH
23448: LD_INT 2
23450: PPUSH
23451: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23455: LD_EXP 74
23459: PPUSH
23460: LD_EXP 67
23464: PPUSH
23465: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23469: LD_EXP 74
23473: PPUSH
23474: LD_INT 100
23476: PPUSH
23477: CALL_OW 240
// end ;
23481: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23482: LD_INT 78
23484: PPUSH
23485: LD_INT 112
23487: PPUSH
23488: LD_INT 3
23490: PPUSH
23491: CALL_OW 440
23495: IFFALSE 23549
23497: GO 23499
23499: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23500: LD_INT 78
23502: PPUSH
23503: LD_INT 112
23505: PPUSH
23506: CALL_OW 84
// DialogueOn ;
23510: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23514: LD_EXP 49
23518: PPUSH
23519: LD_STRING D2a-Bur-1
23521: PPUSH
23522: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23526: LD_EXP 61
23530: PPUSH
23531: LD_STRING D2a-Kur-1
23533: PPUSH
23534: CALL_OW 94
// DialogueOff ;
23538: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23542: LD_STRING M2
23544: PPUSH
23545: CALL_OW 337
// end ;
23549: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23550: LD_EXP 10
23554: NOT
23555: IFFALSE 23763
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
// begin enable ;
23563: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23564: LD_ADDR_VAR 0 1
23568: PUSH
23569: LD_INT 22
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 23
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 31
23604: PUSH
23605: LD_INT 21
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 31
23614: PUSH
23615: LD_INT 23
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: PPUSH
23633: CALL_OW 69
23637: PUSH
23638: FOR_IN
23639: IFFALSE 23761
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23641: LD_VAR 0 1
23645: PPUSH
23646: LD_INT 48
23648: PPUSH
23649: LD_INT 81
23651: PPUSH
23652: CALL_OW 297
23656: PUSH
23657: LD_INT 7
23659: LESS
23660: IFFALSE 23759
// begin dialog_track = true ;
23662: LD_ADDR_EXP 10
23666: PUSH
23667: LD_INT 1
23669: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23670: LD_INT 48
23672: PPUSH
23673: LD_INT 81
23675: PPUSH
23676: CALL_OW 86
// DialogueOn ;
23680: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23684: LD_EXP 49
23688: PPUSH
23689: LD_STRING D5a-Bur-1
23691: PPUSH
23692: CALL_OW 88
// DialogueOff ;
23696: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23700: LD_INT 82
23702: PPUSH
23703: LD_INT 3
23705: PPUSH
23706: CALL_OW 321
23710: PUSH
23711: LD_INT 0
23713: EQUAL
23714: IFFALSE 23729
// SetTech ( 82 , 3 , state_enabled ) ;
23716: LD_INT 82
23718: PPUSH
23719: LD_INT 3
23721: PPUSH
23722: LD_INT 1
23724: PPUSH
23725: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23729: LD_INT 84
23731: PPUSH
23732: LD_INT 3
23734: PPUSH
23735: LD_INT 1
23737: PPUSH
23738: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23742: LD_INT 16
23744: PPUSH
23745: LD_INT 3
23747: PPUSH
23748: LD_INT 1
23750: PPUSH
23751: CALL_OW 324
// exit ;
23755: POP
23756: POP
23757: GO 23763
// end ;
23759: GO 23638
23761: POP
23762: POP
// end ;
23763: PPOPN 1
23765: END
// every 5 5$30 do
23766: GO 23768
23768: DISABLE
// begin PrepareScholtze ;
23769: CALL 5435 0 0
// wait ( 0 0$2 ) ;
23773: LD_INT 70
23775: PPUSH
23776: CALL_OW 67
// DialogueOn ;
23780: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23784: LD_EXP 55
23788: PPUSH
23789: LD_STRING D4-Sch-1
23791: PPUSH
23792: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23796: LD_EXP 49
23800: PPUSH
23801: LD_STRING D4-Bur-1
23803: PPUSH
23804: CALL_OW 88
// DialogueOff ;
23808: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23812: LD_STRING M4
23814: PPUSH
23815: CALL_OW 337
// ComHold ( Scholtze ) ;
23819: LD_EXP 55
23823: PPUSH
23824: CALL_OW 140
// scholtzeSpawned = true ;
23828: LD_ADDR_EXP 6
23832: PUSH
23833: LD_INT 1
23835: ST_TO_ADDR
// end ;
23836: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23837: LD_INT 3
23839: PPUSH
23840: LD_EXP 55
23844: PPUSH
23845: CALL_OW 292
23849: PUSH
23850: LD_EXP 6
23854: AND
23855: PUSH
23856: LD_EXP 7
23860: NOT
23861: AND
23862: IFFALSE 24043
23864: GO 23866
23866: DISABLE
// begin scholtzeSaved = true ;
23867: LD_ADDR_EXP 7
23871: PUSH
23872: LD_INT 1
23874: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23875: LD_EXP 55
23879: PPUSH
23880: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23884: LD_EXP 55
23888: PPUSH
23889: LD_INT 3
23891: PPUSH
23892: CALL_OW 235
// DialogueOn ;
23896: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23900: LD_EXP 55
23904: PPUSH
23905: LD_STRING D4a-Sch-1
23907: PPUSH
23908: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23912: LD_EXP 49
23916: PPUSH
23917: LD_STRING D4a-Bur-1
23919: PPUSH
23920: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23924: LD_EXP 55
23928: PPUSH
23929: LD_STRING D4a-Sch-2
23931: PPUSH
23932: CALL_OW 88
// DialogueOff ;
23936: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23940: LD_EXP 85
23944: PPUSH
23945: LD_INT 28
23947: PPUSH
23948: LD_INT 36
23950: PPUSH
23951: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23955: LD_STRING MScholtzeOut
23957: PPUSH
23958: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23962: LD_INT 49
23964: PPUSH
23965: LD_INT 3
23967: PPUSH
23968: LD_INT 1
23970: PPUSH
23971: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23975: LD_INT 51
23977: PPUSH
23978: LD_INT 3
23980: PPUSH
23981: LD_INT 1
23983: PPUSH
23984: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23988: LD_INT 82
23990: PPUSH
23991: LD_INT 3
23993: PPUSH
23994: CALL_OW 321
23998: PUSH
23999: LD_INT 0
24001: EQUAL
24002: IFFALSE 24017
// SetTech ( 82 , 3 , state_enabled ) ;
24004: LD_INT 82
24006: PPUSH
24007: LD_INT 3
24009: PPUSH
24010: LD_INT 1
24012: PPUSH
24013: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24017: LD_INT 83
24019: PPUSH
24020: LD_INT 3
24022: PPUSH
24023: LD_INT 1
24025: PPUSH
24026: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24030: LD_INT 19
24032: PPUSH
24033: LD_INT 3
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 324
// end ;
24043: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24044: LD_EXP 55
24048: PPUSH
24049: CALL_OW 305
24053: PUSH
24054: LD_EXP 7
24058: NOT
24059: AND
24060: IFFALSE 24069
24062: GO 24064
24064: DISABLE
// PrepareAmericanPatrol ;
24065: CALL 6339 0 0
24069: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24070: LD_EXP 55
24074: PPUSH
24075: CALL_OW 305
24079: PUSH
24080: LD_EXP 55
24084: PPUSH
24085: CALL_OW 255
24089: PUSH
24090: LD_INT 8
24092: EQUAL
24093: AND
24094: PUSH
24095: LD_EXP 47
24099: PUSH
24100: LD_INT 35
24102: GREATER
24103: AND
24104: IFFALSE 24280
24106: GO 24108
24108: DISABLE
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// begin enable ;
24113: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24114: LD_ADDR_EXP 47
24118: PUSH
24119: LD_EXP 47
24123: PUSH
24124: LD_INT 35
24126: MINUS
24127: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24128: LD_ADDR_VAR 0 1
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 25
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PPUSH
24157: CALL_OW 69
24161: PUSH
24162: FOR_IN
24163: IFFALSE 24202
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24165: LD_VAR 0 1
24169: PPUSH
24170: LD_EXP 55
24174: PPUSH
24175: CALL_OW 250
24179: PPUSH
24180: LD_EXP 55
24184: PPUSH
24185: CALL_OW 251
24189: PPUSH
24190: LD_INT 12
24192: PPUSH
24193: LD_INT 0
24195: PPUSH
24196: CALL 10226 0 5
24200: GO 24162
24202: POP
24203: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24204: LD_ADDR_VAR 0 2
24208: PUSH
24209: LD_INT 22
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 25
24221: PUSH
24222: LD_INT 14
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PPUSH
24233: CALL_OW 69
24237: PUSH
24238: FOR_IN
24239: IFFALSE 24278
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24241: LD_VAR 0 2
24245: PPUSH
24246: LD_EXP 55
24250: PPUSH
24251: CALL_OW 250
24255: PPUSH
24256: LD_EXP 55
24260: PPUSH
24261: CALL_OW 251
24265: PPUSH
24266: LD_INT 12
24268: PPUSH
24269: LD_INT 0
24271: PPUSH
24272: CALL 10226 0 5
24276: GO 24238
24278: POP
24279: POP
// end ;
24280: PPOPN 2
24282: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24283: LD_INT 1
24285: PPUSH
24286: LD_EXP 55
24290: PPUSH
24291: CALL_OW 292
24295: PUSH
24296: LD_EXP 85
24300: AND
24301: PUSH
24302: LD_EXP 7
24306: NOT
24307: AND
24308: IFFALSE 24462
24310: GO 24312
24312: DISABLE
// begin enable ;
24313: ENABLE
// if not IsPlaced ( Scholtze ) then
24314: LD_EXP 55
24318: PPUSH
24319: CALL_OW 305
24323: NOT
24324: IFFALSE 24328
// exit ;
24326: GO 24462
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24328: LD_EXP 85
24332: PUSH
24333: LD_INT 1
24335: ARRAY
24336: PPUSH
24337: CALL_OW 320
24341: PUSH
24342: LD_EXP 55
24346: EQUAL
24347: PUSH
24348: LD_EXP 85
24352: PUSH
24353: LD_INT 2
24355: ARRAY
24356: PPUSH
24357: CALL_OW 320
24361: PUSH
24362: LD_EXP 55
24366: EQUAL
24367: OR
24368: IFFALSE 24462
// begin DialogueOn ;
24370: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24374: LD_EXP 55
24378: PPUSH
24379: LD_STRING D4b-Sch-1
24381: PPUSH
24382: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24386: LD_EXP 85
24390: PUSH
24391: LD_INT 2
24393: ARRAY
24394: PPUSH
24395: LD_STRING D4b-Sol1-1
24397: PPUSH
24398: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24402: LD_EXP 85
24406: PUSH
24407: LD_INT 1
24409: ARRAY
24410: PPUSH
24411: LD_STRING D4b-Sol2-1
24413: PPUSH
24414: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24418: LD_EXP 55
24422: PPUSH
24423: LD_STRING D4b-Sch-2
24425: PPUSH
24426: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24430: LD_EXP 49
24434: PPUSH
24435: LD_STRING D4b-Bur-2
24437: PPUSH
24438: CALL_OW 88
// DialogueOff ;
24442: CALL_OW 7
// Killunit ( Scholtze ) ;
24446: LD_EXP 55
24450: PPUSH
24451: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24455: LD_STRING MScholtzeDel
24457: PPUSH
24458: CALL_OW 337
// end ; end ;
24462: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24463: LD_INT 0
24465: PPUSH
24466: PPUSH
24467: PPUSH
// dialog_workshop = true ;
24468: LD_ADDR_EXP 8
24472: PUSH
24473: LD_INT 1
24475: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24476: LD_INT 22
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 30
24488: PUSH
24489: LD_INT 26
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: NOT
24505: IFFALSE 24894
// begin CenterNowOnUnits ( building ) ;
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 87
// DialogueOn ;
24516: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24520: LD_EXP 49
24524: PPUSH
24525: LD_STRING D3aa-Bur-1
24527: PPUSH
24528: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24532: LD_EXP 55
24536: PPUSH
24537: CALL_OW 302
24541: PUSH
24542: LD_EXP 55
24546: PPUSH
24547: CALL_OW 255
24551: PUSH
24552: LD_INT 3
24554: EQUAL
24555: AND
24556: IFFALSE 24572
// Say ( Scholtze , D3aa-Sch-1 ) else
24558: LD_EXP 55
24562: PPUSH
24563: LD_STRING D3aa-Sch-1
24565: PPUSH
24566: CALL_OW 88
24570: GO 24878
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24572: LD_ADDR_VAR 0 3
24576: PUSH
24577: LD_INT 22
24579: PUSH
24580: LD_INT 3
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 21
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 25
24599: PUSH
24600: LD_INT 4
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 26
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 50
24619: PUSH
24620: EMPTY
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: PUSH
24635: LD_EXP 49
24639: PUSH
24640: LD_EXP 50
24644: PUSH
24645: LD_EXP 52
24649: PUSH
24650: LD_EXP 53
24654: PUSH
24655: LD_EXP 54
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: DIFF
24667: ST_TO_ADDR
// if maleSci then
24668: LD_VAR 0 3
24672: IFFALSE 24692
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24674: LD_VAR 0 3
24678: PUSH
24679: LD_INT 1
24681: ARRAY
24682: PPUSH
24683: LD_STRING D3aa-Sci1-1
24685: PPUSH
24686: CALL_OW 88
24690: GO 24878
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24692: LD_ADDR_VAR 0 4
24696: PUSH
24697: LD_INT 22
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 26
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 50
24729: PUSH
24730: EMPTY
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 69
24743: PUSH
24744: LD_EXP 49
24748: PUSH
24749: LD_EXP 50
24753: PUSH
24754: LD_EXP 52
24758: PUSH
24759: LD_EXP 53
24763: PUSH
24764: LD_EXP 54
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: DIFF
24776: ST_TO_ADDR
// if maleOthers then
24777: LD_VAR 0 4
24781: IFFALSE 24801
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24783: LD_VAR 0 4
24787: PUSH
24788: LD_INT 1
24790: ARRAY
24791: PPUSH
24792: LD_STRING D3aa-Sci1-1
24794: PPUSH
24795: CALL_OW 88
24799: GO 24878
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24801: LD_ADDR_VAR 0 4
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 21
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 26
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 50
24838: PUSH
24839: EMPTY
24840: LIST
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: PPUSH
24848: CALL_OW 69
24852: PUSH
24853: LD_EXP 49
24857: PUSH
24858: EMPTY
24859: LIST
24860: DIFF
24861: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24862: LD_VAR 0 4
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: LD_STRING D3aa-Sci1-1
24873: PPUSH
24874: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24878: LD_EXP 49
24882: PPUSH
24883: LD_STRING D3aa-Bur-2
24885: PPUSH
24886: CALL_OW 88
// DialogueOff ;
24890: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24894: LD_STRING M3
24896: PPUSH
24897: CALL_OW 337
// end ;
24901: LD_VAR 0 2
24905: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24906: LD_EXP 9
24910: NOT
24911: IFFALSE 25249
24913: GO 24915
24915: DISABLE
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
// begin enable ;
24920: ENABLE
// for amUnit in amSupportTroops do
24921: LD_ADDR_VAR 0 1
24925: PUSH
24926: LD_EXP 84
24930: PUSH
24931: FOR_IN
24932: IFFALSE 25247
// begin if See ( 3 , amUnit ) then
24934: LD_INT 3
24936: PPUSH
24937: LD_VAR 0 1
24941: PPUSH
24942: CALL_OW 292
24946: IFFALSE 25245
// begin dialog_amSupportTroops = true ;
24948: LD_ADDR_EXP 9
24952: PUSH
24953: LD_INT 1
24955: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24956: LD_VAR 0 1
24960: PPUSH
24961: CALL_OW 87
// DialogueOn ;
24965: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24969: LD_ADDR_VAR 0 2
24973: PUSH
24974: LD_INT 22
24976: PUSH
24977: LD_INT 3
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 21
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 26
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 50
25006: PUSH
25007: EMPTY
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: PUSH
25021: LD_EXP 49
25025: PUSH
25026: LD_EXP 50
25030: PUSH
25031: LD_EXP 52
25035: PUSH
25036: LD_EXP 53
25040: PUSH
25041: LD_EXP 54
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: DIFF
25053: ST_TO_ADDR
// if randomMale then
25054: LD_VAR 0 2
25058: IFFALSE 25125
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25060: LD_INT 22
25062: PUSH
25063: LD_INT 3
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 21
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 26
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 50
25092: PUSH
25093: EMPTY
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: PPUSH
25102: CALL_OW 69
25106: PPUSH
25107: LD_STRING D3b-RSol1-1
25109: PPUSH
25110: LD_STRING 
25112: PPUSH
25113: LD_INT 0
25115: PPUSH
25116: LD_INT 1
25118: PPUSH
25119: CALL 6975 0 5
25123: GO 25202
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_INT 22
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 26
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 50
25162: PUSH
25163: EMPTY
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: PPUSH
25172: CALL_OW 69
25176: PUSH
25177: LD_EXP 49
25181: PUSH
25182: EMPTY
25183: LIST
25184: DIFF
25185: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25186: LD_VAR 0 2
25190: PUSH
25191: LD_INT 1
25193: ARRAY
25194: PPUSH
25195: LD_STRING D3b-RSol1-1
25197: PPUSH
25198: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25202: LD_EXP 50
25206: PPUSH
25207: CALL_OW 302
25211: IFFALSE 25225
// Say ( Gnyevko , D3b-Gny-1 ) ;
25213: LD_EXP 50
25217: PPUSH
25218: LD_STRING D3b-Gny-1
25220: PPUSH
25221: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25225: LD_EXP 49
25229: PPUSH
25230: LD_STRING D3b-Bur-1
25232: PPUSH
25233: CALL_OW 88
// DialogueOff ;
25237: CALL_OW 7
// exit ;
25241: POP
25242: POP
25243: GO 25249
// end ; end ;
25245: GO 24931
25247: POP
25248: POP
// end ;
25249: PPOPN 2
25251: END
// every 2 2$0 trigger dialog_amSupportTroops do
25252: LD_EXP 9
25256: IFFALSE 25340
25258: GO 25260
25260: DISABLE
// begin if IsOK ( Kovalyuk ) then
25261: LD_EXP 52
25265: PPUSH
25266: CALL_OW 302
25270: IFFALSE 25284
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25272: LD_EXP 52
25276: PPUSH
25277: LD_STRING D3b-Kov-1
25279: PPUSH
25280: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25284: LD_INT 22
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 21
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 26
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: PPUSH
25319: CALL_OW 69
25323: PPUSH
25324: LD_STRING D3b-RSol1-2
25326: PPUSH
25327: LD_STRING 
25329: PPUSH
25330: LD_INT 0
25332: PPUSH
25333: LD_INT 0
25335: PPUSH
25336: CALL 6975 0 5
// end ;
25340: END
// every 1 trigger not endCutscene do
25341: LD_EXP 31
25345: NOT
25346: IFFALSE 25364
25348: GO 25350
25350: DISABLE
// begin enable ;
25351: ENABLE
// SetLives ( Kurin , 1000 ) ;
25352: LD_EXP 61
25356: PPUSH
25357: LD_INT 1000
25359: PPUSH
25360: CALL_OW 234
// end ;
25364: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25365: LD_EXP 40
25369: PUSH
25370: LD_INT 35
25372: LESS
25373: IFFALSE 25601
25375: GO 25377
25377: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25378: LD_EXP 61
25382: PPUSH
25383: CALL_OW 87
// InGameOn ;
25387: CALL_OW 8
// DialogueOn ;
25391: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25395: LD_EXP 61
25399: PPUSH
25400: LD_STRING D5-Kur-1
25402: PPUSH
25403: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25407: LD_STRING QVehicles
25409: PPUSH
25410: CALL_OW 97
25414: PUSH
25415: LD_INT 1
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25466
25423: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25424: LD_EXP 49
25428: PPUSH
25429: LD_STRING D6a-Bur-1
25431: PPUSH
25432: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25436: LD_EXP 61
25440: PPUSH
25441: LD_STRING D6a-Kur-1
25443: PPUSH
25444: CALL_OW 94
// meetNearOmicronBase = true ;
25448: LD_ADDR_EXP 19
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// kurinCheckVehicles = true ;
25456: LD_ADDR_EXP 18
25460: PUSH
25461: LD_INT 1
25463: ST_TO_ADDR
// end ; 2 :
25464: GO 25593
25466: LD_INT 2
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 25521
25474: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25475: LD_EXP 49
25479: PPUSH
25480: LD_STRING D6b-Bur-1
25482: PPUSH
25483: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25487: LD_EXP 61
25491: PPUSH
25492: LD_STRING D6b-Kur-1
25494: PPUSH
25495: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25499: LD_EXP 49
25503: PPUSH
25504: LD_STRING D6b-Bur-2
25506: PPUSH
25507: CALL_OW 88
// meetNearOmicronBase = true ;
25511: LD_ADDR_EXP 19
25515: PUSH
25516: LD_INT 1
25518: ST_TO_ADDR
// end ; 3 :
25519: GO 25593
25521: LD_INT 3
25523: DOUBLE
25524: EQUAL
25525: IFTRUE 25529
25527: GO 25592
25529: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25530: LD_EXP 49
25534: PPUSH
25535: LD_STRING D6c-Bur-1
25537: PPUSH
25538: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25542: LD_EXP 61
25546: PPUSH
25547: LD_STRING D6c-Kur-1
25549: PPUSH
25550: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25554: LD_EXP 49
25558: PPUSH
25559: LD_STRING D6c-Bur-2
25561: PPUSH
25562: CALL_OW 88
// kurinGiveMoreTime = true ;
25566: LD_ADDR_EXP 13
25570: PUSH
25571: LD_INT 1
25573: ST_TO_ADDR
// kurinOpinion = 0 ;
25574: LD_ADDR_EXP 26
25578: PUSH
25579: LD_INT 0
25581: ST_TO_ADDR
// counterIndex = 4 ;
25582: LD_ADDR_EXP 90
25586: PUSH
25587: LD_INT 4
25589: ST_TO_ADDR
// end ; end ;
25590: GO 25593
25592: POP
// InGameOff ;
25593: CALL_OW 9
// DialogueOff ;
25597: CALL_OW 7
// end ;
25601: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25602: LD_EXP 14
25606: PUSH
25607: LD_INT 35
25609: LESS
25610: PUSH
25611: LD_EXP 13
25615: AND
25616: IFFALSE 25649
25618: GO 25620
25620: DISABLE
// begin DialogueOn ;
25621: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25625: LD_EXP 61
25629: PPUSH
25630: LD_STRING D6c-Kur-2
25632: PPUSH
25633: CALL_OW 94
// DialogueOff ;
25637: CALL_OW 7
// meetNearOmicronBase = true ;
25641: LD_ADDR_EXP 19
25645: PUSH
25646: LD_INT 1
25648: ST_TO_ADDR
// end ;
25649: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25650: LD_EXP 19
25654: IFFALSE 26309
25656: GO 25658
25658: DISABLE
25659: LD_INT 0
25661: PPUSH
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
// begin mechs = [ ] ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: EMPTY
25672: ST_TO_ADDR
// vehs = [ ] ;
25673: LD_ADDR_VAR 0 4
25677: PUSH
25678: EMPTY
25679: ST_TO_ADDR
// haveVehs = 0 ;
25680: LD_ADDR_VAR 0 5
25684: PUSH
25685: LD_INT 0
25687: ST_TO_ADDR
// uc_side = 6 ;
25688: LD_ADDR_OWVAR 20
25692: PUSH
25693: LD_INT 6
25695: ST_TO_ADDR
// uc_nation = 3 ;
25696: LD_ADDR_OWVAR 21
25700: PUSH
25701: LD_INT 3
25703: ST_TO_ADDR
// for i := 1 to 2 do
25704: LD_ADDR_VAR 0 1
25708: PUSH
25709: DOUBLE
25710: LD_INT 1
25712: DEC
25713: ST_TO_ADDR
25714: LD_INT 2
25716: PUSH
25717: FOR_TO
25718: IFFALSE 25817
// begin PrepareMechanic ( false , 2 ) ;
25720: LD_INT 0
25722: PPUSH
25723: LD_INT 2
25725: PPUSH
25726: CALL_OW 383
// mech = CreateHuman ;
25730: LD_ADDR_VAR 0 2
25734: PUSH
25735: CALL_OW 44
25739: ST_TO_ADDR
// mechs = mechs ^ mech ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_VAR 0 3
25749: PUSH
25750: LD_VAR 0 2
25754: ADD
25755: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25756: LD_VAR 0 2
25760: PPUSH
25761: LD_EXP 67
25765: PPUSH
25766: CALL_OW 52
// ComExitBuilding ( mech ) ;
25770: LD_VAR 0 2
25774: PPUSH
25775: CALL_OW 122
// wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25786: LD_VAR 0 2
25790: PPUSH
25791: LD_EXP 60
25795: PPUSH
25796: CALL_OW 250
25800: PPUSH
25801: LD_EXP 60
25805: PPUSH
25806: CALL_OW 251
25810: PPUSH
25811: CALL_OW 171
// end ;
25815: GO 25717
25817: POP
25818: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25819: LD_INT 22
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 21
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 23
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: PPUSH
25854: CALL_OW 69
25858: PUSH
25859: LD_INT 22
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 21
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PPUSH
25883: CALL_OW 69
25887: EQUAL
25888: IFFALSE 25898
// produceOnlyForYou = true ;
25890: LD_ADDR_EXP 17
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25898: LD_INT 700
25900: PPUSH
25901: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25905: LD_INT 22
25907: PUSH
25908: LD_INT 3
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 21
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 23
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: LD_INT 34
25940: PUSH
25941: LD_INT 51
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 3
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 21
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: PUSH
25992: LD_INT 2
25994: PLUS
25995: GREATEREQUAL
25996: IFFALSE 26279
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25998: LD_ADDR_VAR 0 4
26002: PUSH
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_INT 3
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 21
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: LD_INT 34
26043: PUSH
26044: LD_INT 51
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 59
26060: PUSH
26061: EMPTY
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: PUSH
26080: LD_INT 1
26082: ARRAY
26083: ADD
26084: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26085: LD_ADDR_VAR 0 4
26089: PUSH
26090: LD_VAR 0 4
26094: PUSH
26095: LD_INT 22
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 21
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 23
26117: PUSH
26118: LD_INT 3
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 3
26127: PUSH
26128: LD_INT 34
26130: PUSH
26131: LD_INT 51
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: PUSH
26145: LD_INT 59
26147: PUSH
26148: EMPTY
26149: LIST
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: PPUSH
26162: CALL_OW 69
26166: PUSH
26167: LD_INT 2
26169: ARRAY
26170: ADD
26171: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26172: LD_ADDR_EXP 76
26176: PUSH
26177: LD_EXP 76
26181: PUSH
26182: LD_VAR 0 4
26186: ADD
26187: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26188: LD_VAR 0 4
26192: PPUSH
26193: LD_INT 6
26195: PPUSH
26196: CALL_OW 235
// produceMoreVehicles = true ;
26200: LD_ADDR_EXP 16
26204: PUSH
26205: LD_INT 1
26207: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26208: LD_VAR 0 3
26212: PUSH
26213: LD_INT 1
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 4
26221: PUSH
26222: LD_INT 1
26224: ARRAY
26225: PPUSH
26226: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26230: LD_VAR 0 3
26234: PUSH
26235: LD_INT 2
26237: ARRAY
26238: PPUSH
26239: LD_VAR 0 4
26243: PUSH
26244: LD_INT 2
26246: ARRAY
26247: PPUSH
26248: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26252: LD_EXP 18
26256: PUSH
26257: LD_EXP 26
26261: PUSH
26262: LD_INT 0
26264: EQUAL
26265: NOT
26266: AND
26267: IFFALSE 26277
// kurinOpinion = 1 ;
26269: LD_ADDR_EXP 26
26273: PUSH
26274: LD_INT 1
26276: ST_TO_ADDR
// end else
26277: GO 26309
// begin if kurinCheckVehicles then
26279: LD_EXP 18
26283: IFFALSE 26309
// begin DialogueOn ;
26285: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26289: LD_EXP 61
26293: PPUSH
26294: LD_STRING D6d-Kur-1
26296: PPUSH
26297: CALL_OW 94
// DialogueOff ;
26301: CALL_OW 7
// Lose_Vehicles ;
26305: CALL 20140 0 0
// end ; end ; end ;
26309: PPOPN 5
26311: END
// every 0 0$1 trigger meetNearOmicronBase do
26312: LD_EXP 19
26316: IFFALSE 26536
26318: GO 26320
26320: DISABLE
// begin spawnCrates = false ;
26321: LD_ADDR_EXP 5
26325: PUSH
26326: LD_INT 0
26328: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26329: LD_INT 6
26331: PPUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_INT 2
26337: PPUSH
26338: LD_INT 1
26340: PPUSH
26341: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26345: LD_INT 0
26347: PPUSH
26348: LD_INT 3
26350: PPUSH
26351: LD_INT 0
26353: PPUSH
26354: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26358: LD_STRING M3a
26360: PPUSH
26361: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26365: LD_STRING M5
26367: PPUSH
26368: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26372: LD_INT 15
26374: PPUSH
26375: LD_INT 1
26377: PPUSH
26378: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26382: LD_EXP 76
26386: PPUSH
26387: LD_INT 75
26389: PPUSH
26390: LD_INT 38
26392: PPUSH
26393: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26397: LD_EXP 75
26401: PPUSH
26402: LD_INT 75
26404: PPUSH
26405: LD_INT 38
26407: PPUSH
26408: CALL_OW 111
// counterIndex = 2 ;
26412: LD_ADDR_EXP 90
26416: PUSH
26417: LD_INT 2
26419: ST_TO_ADDR
// if not kurinOpinion = 0 then
26420: LD_EXP 26
26424: PUSH
26425: LD_INT 0
26427: EQUAL
26428: NOT
26429: IFFALSE 26439
// kurinOpinion = 1 ;
26431: LD_ADDR_EXP 26
26435: PUSH
26436: LD_INT 1
26438: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26439: LD_INT 1
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: LD_INT 22
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PPUSH
26469: CALL_OW 69
26473: PPUSH
26474: LD_INT 13
26476: PPUSH
26477: LD_INT 28
26479: PPUSH
26480: LD_INT 17
26482: PPUSH
26483: LD_INT 29
26485: PPUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 3
26491: PUSH
26492: LD_INT 4
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: LD_OWVAR 67
26504: ARRAY
26505: PPUSH
26506: LD_INT 2
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: LD_INT 4
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: LD_OWVAR 67
26524: ARRAY
26525: PPUSH
26526: LD_INT 0
26528: PPUSH
26529: LD_INT 0
26531: PPUSH
26532: CALL 12106 0 11
// end ;
26536: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26537: LD_EXP 15
26541: PUSH
26542: LD_INT 35
26544: LESS
26545: PUSH
26546: LD_EXP 90
26550: PUSH
26551: LD_INT 2
26553: EQUAL
26554: AND
26555: IFFALSE 26604
26557: GO 26559
26559: DISABLE
// begin DialogueOn ;
26560: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26564: LD_EXP 61
26568: PPUSH
26569: LD_STRING D7a-Kur-1
26571: PPUSH
26572: CALL_OW 94
// DialogueOff ;
26576: CALL_OW 7
// counterIndex = 3 ;
26580: LD_ADDR_EXP 90
26584: PUSH
26585: LD_INT 3
26587: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26588: LD_ADDR_EXP 15
26592: PUSH
26593: LD_INT 4200
26595: ST_TO_ADDR
// kurinOpinion = 0 ;
26596: LD_ADDR_EXP 26
26600: PUSH
26601: LD_INT 0
26603: ST_TO_ADDR
// end ;
26604: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26605: LD_EXP 15
26609: PUSH
26610: LD_INT 35
26612: LESS
26613: PUSH
26614: LD_EXP 90
26618: PUSH
26619: LD_INT 3
26621: EQUAL
26622: AND
26623: IFFALSE 26632
26625: GO 26627
26627: DISABLE
// Lose_Delay ;
26628: CALL 20170 0 0
26632: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26633: LD_EXP 19
26637: PUSH
26638: LD_INT 15
26640: PPUSH
26641: LD_INT 22
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 21
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PPUSH
26665: CALL_OW 71
26669: PUSH
26670: LD_INT 0
26672: EQUAL
26673: AND
26674: IFFALSE 26762
26676: GO 26678
26678: DISABLE
// begin counterEnable = false ;
26679: LD_ADDR_EXP 89
26683: PUSH
26684: LD_INT 0
26686: ST_TO_ADDR
// Display_strings = [ ] ;
26687: LD_ADDR_OWVAR 47
26691: PUSH
26692: EMPTY
26693: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26694: LD_INT 15
26696: PPUSH
26697: LD_INT 0
26699: PPUSH
26700: CALL_OW 424
// canExitBattlefield = false ;
26704: LD_ADDR_EXP 24
26708: PUSH
26709: LD_INT 0
26711: ST_TO_ADDR
// DialogueOn ;
26712: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26716: LD_EXP 49
26720: PPUSH
26721: LD_STRING D7-Bur-1
26723: PPUSH
26724: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26728: LD_EXP 61
26732: PPUSH
26733: LD_STRING D7-Kur-1
26735: PPUSH
26736: CALL_OW 94
// DialogueOff ;
26740: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26744: LD_STRING M5a
26746: PPUSH
26747: CALL_OW 337
// Query ( QRefuel ) ;
26751: LD_STRING QRefuel
26753: PPUSH
26754: CALL_OW 97
// KirovAttackOmicron ;
26758: CALL 17896 0 0
// end ;
26762: END
// every 1 trigger not canExitBattlefield do var unit ;
26763: LD_EXP 24
26767: NOT
26768: IFFALSE 26937
26770: GO 26772
26772: DISABLE
26773: LD_INT 0
26775: PPUSH
// begin enable ;
26776: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26777: LD_ADDR_VAR 0 1
26781: PUSH
26782: LD_INT 22
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 21
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 21
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: PUSH
26829: FOR_IN
26830: IFFALSE 26935
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26832: LD_VAR 0 1
26836: PPUSH
26837: LD_INT 26
26839: PPUSH
26840: CALL_OW 308
26844: NOT
26845: PUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: LD_INT 21
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 72
26865: PUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 313
26875: OR
26876: AND
26877: IFFALSE 26933
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26879: LD_VAR 0 1
26883: PPUSH
26884: LD_INT 26
26886: PPUSH
26887: CALL_OW 113
// if not dialog_stop then
26891: LD_EXP 11
26895: NOT
26896: IFFALSE 26933
// begin dialog_stop = true ;
26898: LD_ADDR_EXP 11
26902: PUSH
26903: LD_INT 1
26905: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26906: LD_EXP 61
26910: PPUSH
26911: LD_STRING D12-Kur-1
26913: PPUSH
26914: CALL_OW 88
// wait ( 0 0$5 ) ;
26918: LD_INT 175
26920: PPUSH
26921: CALL_OW 67
// dialog_stop = false ;
26925: LD_ADDR_EXP 11
26929: PUSH
26930: LD_INT 0
26932: ST_TO_ADDR
// end ; end ;
26933: GO 26829
26935: POP
26936: POP
// end ;
26937: PPOPN 1
26939: END
// every 1 do var unit ;
26940: GO 26942
26942: DISABLE
26943: LD_INT 0
26945: PPUSH
// begin enable ;
26946: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26947: LD_ADDR_VAR 0 1
26951: PUSH
26952: LD_INT 22
26954: PUSH
26955: LD_INT 3
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 21
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PPUSH
26994: CALL_OW 69
26998: PUSH
26999: FOR_IN
27000: IFFALSE 27075
// if IsInArea ( unit , SecondKurinBase ) then
27002: LD_VAR 0 1
27006: PPUSH
27007: LD_INT 20
27009: PPUSH
27010: CALL_OW 308
27014: IFFALSE 27073
// begin ComMoveXY ( unit , 200 , 114 ) ;
27016: LD_VAR 0 1
27020: PPUSH
27021: LD_INT 200
27023: PPUSH
27024: LD_INT 114
27026: PPUSH
27027: CALL_OW 111
// if not dialog_stop then
27031: LD_EXP 11
27035: NOT
27036: IFFALSE 27073
// begin dialog_stop = true ;
27038: LD_ADDR_EXP 11
27042: PUSH
27043: LD_INT 1
27045: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27046: LD_EXP 61
27050: PPUSH
27051: LD_STRING D12-Kur-1
27053: PPUSH
27054: CALL_OW 88
// wait ( 0 0$5 ) ;
27058: LD_INT 175
27060: PPUSH
27061: CALL_OW 67
// dialog_stop = false ;
27065: LD_ADDR_EXP 11
27069: PUSH
27070: LD_INT 0
27072: ST_TO_ADDR
// end ; end ;
27073: GO 26999
27075: POP
27076: POP
// end ;
27077: PPOPN 1
27079: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27080: LD_EXP 19
27084: NOT
27085: PUSH
27086: LD_INT 290
27088: PPUSH
27089: CALL_OW 302
27093: AND
27094: IFFALSE 27604
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
27102: PPUSH
27103: PPUSH
27104: PPUSH
27105: PPUSH
27106: PPUSH
27107: PPUSH
// begin enable ;
27108: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27109: LD_ADDR_VAR 0 2
27113: PUSH
27114: LD_INT 13
27116: PPUSH
27117: LD_INT 22
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 21
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 21
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 21
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 70
27174: PUSH
27175: FOR_IN
27176: IFFALSE 27602
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27178: LD_VAR 0 2
27182: PPUSH
27183: LD_INT 22
27185: PUSH
27186: LD_INT 3
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 21
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 21
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: PPUSH
27230: LD_VAR 0 2
27234: PPUSH
27235: CALL_OW 74
27239: PPUSH
27240: CALL_OW 296
27244: PUSH
27245: LD_INT 17
27247: LESS
27248: IFFALSE 27600
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27250: LD_ADDR_VAR 0 6
27254: PUSH
27255: LD_INT 22
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 50
27267: PUSH
27268: EMPTY
27269: LIST
27270: PUSH
27271: LD_INT 2
27273: PUSH
27274: LD_INT 21
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 21
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: PPUSH
27309: LD_VAR 0 2
27313: PPUSH
27314: CALL_OW 74
27318: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27319: LD_ADDR_VAR 0 4
27323: PUSH
27324: LD_VAR 0 6
27328: PPUSH
27329: LD_EXP 48
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: LD_INT 1
27340: ARRAY
27341: PPUSH
27342: LD_EXP 48
27346: PUSH
27347: LD_INT 1
27349: ARRAY
27350: PUSH
27351: LD_INT 2
27353: ARRAY
27354: PPUSH
27355: CALL_OW 297
27359: ST_TO_ADDR
// index = 1 ;
27360: LD_ADDR_VAR 0 7
27364: PUSH
27365: LD_INT 1
27367: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27368: LD_ADDR_VAR 0 1
27372: PUSH
27373: DOUBLE
27374: LD_INT 2
27376: DEC
27377: ST_TO_ADDR
27378: LD_EXP 48
27382: PUSH
27383: FOR_TO
27384: IFFALSE 27465
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27386: LD_ADDR_VAR 0 5
27390: PUSH
27391: LD_VAR 0 6
27395: PPUSH
27396: LD_EXP 48
27400: PUSH
27401: LD_VAR 0 1
27405: ARRAY
27406: PUSH
27407: LD_INT 1
27409: ARRAY
27410: PPUSH
27411: LD_EXP 48
27415: PUSH
27416: LD_VAR 0 1
27420: ARRAY
27421: PUSH
27422: LD_INT 2
27424: ARRAY
27425: PPUSH
27426: CALL_OW 297
27430: ST_TO_ADDR
// if tmpDist < currentDist then
27431: LD_VAR 0 5
27435: PUSH
27436: LD_VAR 0 4
27440: LESS
27441: IFFALSE 27463
// begin index = i ;
27443: LD_ADDR_VAR 0 7
27447: PUSH
27448: LD_VAR 0 1
27452: ST_TO_ADDR
// currentDist = tmpDist ;
27453: LD_ADDR_VAR 0 4
27457: PUSH
27458: LD_VAR 0 5
27462: ST_TO_ADDR
// end ; end ;
27463: GO 27383
27465: POP
27466: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27467: LD_VAR 0 6
27471: PPUSH
27472: LD_EXP 48
27476: PUSH
27477: LD_VAR 0 7
27481: ARRAY
27482: PUSH
27483: LD_INT 1
27485: ARRAY
27486: PPUSH
27487: LD_EXP 48
27491: PUSH
27492: LD_VAR 0 7
27496: ARRAY
27497: PUSH
27498: LD_INT 2
27500: ARRAY
27501: PPUSH
27502: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27506: LD_ADDR_VAR 0 3
27510: PUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_INT 2
27516: PPUSH
27517: CALL_OW 12
27521: ST_TO_ADDR
// if not dialog_stop then
27522: LD_EXP 11
27526: NOT
27527: IFFALSE 27600
// begin dialog_stop = true ;
27529: LD_ADDR_EXP 11
27533: PUSH
27534: LD_INT 1
27536: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27537: LD_VAR 0 3
27541: PUSH
27542: LD_INT 1
27544: EQUAL
27545: PUSH
27546: LD_EXP 50
27550: PPUSH
27551: CALL_OW 302
27555: NOT
27556: OR
27557: IFFALSE 27573
// SayRadio ( Kurin , D11-Kur-1 ) else
27559: LD_EXP 61
27563: PPUSH
27564: LD_STRING D11-Kur-1
27566: PPUSH
27567: CALL_OW 94
27571: GO 27585
// Say ( Gnyevko , D11-Gny-1 ) ;
27573: LD_EXP 50
27577: PPUSH
27578: LD_STRING D11-Gny-1
27580: PPUSH
27581: CALL_OW 88
// wait ( 0 0$5 ) ;
27585: LD_INT 175
27587: PPUSH
27588: CALL_OW 67
// dialog_stop = false ;
27592: LD_ADDR_EXP 11
27596: PUSH
27597: LD_INT 0
27599: ST_TO_ADDR
// end ; end ;
27600: GO 27175
27602: POP
27603: POP
// end ;
27604: PPOPN 7
27606: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27607: LD_INT 290
27609: PPUSH
27610: CALL_OW 301
27614: PUSH
27615: LD_INT 22
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 21
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 69
27643: PUSH
27644: LD_INT 5
27646: LESS
27647: AND
27648: IFFALSE 30258
27650: GO 27652
27652: DISABLE
27653: LD_INT 0
27655: PPUSH
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
27662: PPUSH
// begin omicronSurrender = true ;
27663: LD_ADDR_EXP 23
27667: PUSH
27668: LD_INT 1
27670: ST_TO_ADDR
// canExitBattlefield = true ;
27671: LD_ADDR_EXP 24
27675: PUSH
27676: LD_INT 1
27678: ST_TO_ADDR
// enableOmicronAI = false ;
27679: LD_ADDR_EXP 29
27683: PUSH
27684: LD_INT 0
27686: ST_TO_ADDR
// endCutscene = true ;
27687: LD_ADDR_EXP 31
27691: PUSH
27692: LD_INT 1
27694: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27695: LD_INT 1
27697: PPUSH
27698: LD_INT 3
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: LD_INT 0
27706: PPUSH
27707: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27711: LD_INT 2
27713: PPUSH
27714: LD_INT 3
27716: PPUSH
27717: LD_INT 1
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27727: LD_EXP 49
27731: PPUSH
27732: CALL_OW 87
// uc_side = 1 ;
27736: LD_ADDR_OWVAR 20
27740: PUSH
27741: LD_INT 1
27743: ST_TO_ADDR
// uc_nation = 1 ;
27744: LD_ADDR_OWVAR 21
27748: PUSH
27749: LD_INT 1
27751: ST_TO_ADDR
// hc_name :=  ;
27752: LD_ADDR_OWVAR 26
27756: PUSH
27757: LD_STRING 
27759: ST_TO_ADDR
// hc_gallery =  ;
27760: LD_ADDR_OWVAR 33
27764: PUSH
27765: LD_STRING 
27767: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27768: LD_INT 1
27770: PPUSH
27771: LD_INT 1
27773: PPUSH
27774: CALL_OW 381
// tmpUs = CreateHuman ;
27778: LD_ADDR_VAR 0 2
27782: PUSH
27783: CALL_OW 44
27787: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27788: LD_INT 22
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PPUSH
27798: CALL_OW 69
27802: PPUSH
27803: CALL_OW 141
// InGameOn ;
27807: CALL_OW 8
// DialogueOn ;
27811: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27815: LD_INT 26
27817: PPUSH
27818: LD_INT 33
27820: PPUSH
27821: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27825: LD_VAR 0 2
27829: PPUSH
27830: LD_STRING D8-Sol1-1
27832: PPUSH
27833: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27837: LD_EXP 52
27841: PPUSH
27842: CALL_OW 302
27846: IFFALSE 27860
// Say ( Kovalyuk , D8-Kov-1 ) ;
27848: LD_EXP 52
27852: PPUSH
27853: LD_STRING D8-Kov-1
27855: PPUSH
27856: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_INT 22
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 21
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 26
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PPUSH
27900: CALL_OW 69
27904: PPUSH
27905: LD_STRING D8-RSol1-1
27907: PPUSH
27908: LD_STRING 
27910: PPUSH
27911: LD_INT 0
27913: PPUSH
27914: LD_INT 0
27916: PPUSH
27917: CALL 6975 0 5
27921: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
27922: LD_EXP 50
27926: PPUSH
27927: CALL_OW 302
27931: IFFALSE 27945
// Say ( Gnyevko , D8-Gny-1 ) ;
27933: LD_EXP 50
27937: PPUSH
27938: LD_STRING D8-Gny-1
27940: PPUSH
27941: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
27945: LD_INT 22
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 21
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 26
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: PPUSH
27980: CALL_OW 69
27984: PUSH
27985: LD_VAR 0 3
27989: DIFF
27990: PPUSH
27991: LD_STRING D8-RSol2-1
27993: PPUSH
27994: LD_STRING 
27996: PPUSH
27997: LD_INT 0
27999: PPUSH
28000: LD_INT 0
28002: PPUSH
28003: CALL 6975 0 5
// DialogueOff ;
28007: CALL_OW 7
// PrepareArabian ;
28011: CALL 6497 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28015: LD_INT 234
28017: PPUSH
28018: LD_INT 122
28020: PPUSH
28021: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28025: LD_EXP 87
28029: PPUSH
28030: LD_INT 221
28032: PPUSH
28033: LD_INT 110
28035: PPUSH
28036: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28040: LD_EXP 88
28044: PPUSH
28045: LD_INT 21
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PPUSH
28055: CALL_OW 72
28059: PPUSH
28060: LD_INT 221
28062: PPUSH
28063: LD_INT 110
28065: PPUSH
28066: CALL_OW 114
// wait ( 0 0$7 ) ;
28070: LD_INT 245
28072: PPUSH
28073: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28077: LD_EXP 88
28081: PPUSH
28082: LD_INT 221
28084: PPUSH
28085: LD_INT 110
28087: PPUSH
28088: CALL_OW 174
// wait ( 0 0$8 ) ;
28092: LD_INT 280
28094: PPUSH
28095: CALL_OW 67
// music_nat = nation_arabian ;
28099: LD_ADDR_OWVAR 71
28103: PUSH
28104: LD_INT 2
28106: ST_TO_ADDR
// music_class = music_combat ;
28107: LD_ADDR_OWVAR 72
28111: PUSH
28112: LD_INT 1
28114: ST_TO_ADDR
// game_speed = 4 ;
28115: LD_ADDR_OWVAR 65
28119: PUSH
28120: LD_INT 4
28122: ST_TO_ADDR
// DialogueOn ;
28123: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28127: LD_EXP 82
28131: PPUSH
28132: LD_STRING D9-Gri-1
28134: PPUSH
28135: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28139: LD_EXP 61
28143: PPUSH
28144: LD_STRING D9-Kur-1
28146: PPUSH
28147: CALL_OW 94
// DialogueOff ;
28151: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28155: LD_EXP 78
28159: PPUSH
28160: LD_INT 25
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PPUSH
28170: CALL_OW 72
28174: PPUSH
28175: LD_INT 158
28177: PPUSH
28178: LD_INT 105
28180: PPUSH
28181: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28185: LD_EXP 78
28189: PPUSH
28190: LD_INT 25
28192: PUSH
28193: LD_INT 4
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PPUSH
28200: CALL_OW 72
28204: PPUSH
28205: LD_INT 158
28207: PPUSH
28208: LD_INT 105
28210: PPUSH
28211: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28215: LD_EXP 78
28219: PPUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PPUSH
28230: CALL_OW 72
28234: PPUSH
28235: LD_EXP 60
28239: PPUSH
28240: CALL_OW 250
28244: PPUSH
28245: LD_EXP 60
28249: PPUSH
28250: CALL_OW 251
28254: PPUSH
28255: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28259: LD_EXP 78
28263: PPUSH
28264: LD_INT 25
28266: PUSH
28267: LD_INT 4
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 72
28278: PPUSH
28279: LD_EXP 60
28283: PPUSH
28284: CALL_OW 250
28288: PPUSH
28289: LD_EXP 60
28293: PPUSH
28294: CALL_OW 251
28298: PPUSH
28299: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28303: LD_EXP 74
28307: PPUSH
28308: LD_INT 158
28310: PPUSH
28311: LD_INT 105
28313: PPUSH
28314: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28318: LD_EXP 74
28322: PPUSH
28323: LD_EXP 60
28327: PPUSH
28328: CALL_OW 250
28332: PPUSH
28333: LD_EXP 60
28337: PPUSH
28338: CALL_OW 251
28342: PPUSH
28343: CALL_OW 171
// wait ( 0 0$2.5 ) ;
28347: LD_INT 88
28349: PPUSH
28350: CALL_OW 67
// DialogueOn ;
28354: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28358: LD_EXP 82
28362: PPUSH
28363: LD_STRING D9-Gri-2
28365: PPUSH
28366: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28370: LD_EXP 61
28374: PPUSH
28375: LD_STRING D9-Kur-2
28377: PPUSH
28378: CALL_OW 94
// DialogueOff ;
28382: CALL_OW 7
// repeat wait ( 1 ) ;
28386: LD_INT 1
28388: PPUSH
28389: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28393: LD_EXP 82
28397: PPUSH
28398: CALL_OW 256
28402: PUSH
28403: LD_INT 1000
28405: LESS
28406: IFFALSE 28386
// DialogueOn ;
28408: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28412: LD_EXP 82
28416: PPUSH
28417: LD_STRING D9-Gri-3
28419: PPUSH
28420: CALL_OW 94
// DialogueOff ;
28424: CALL_OW 7
// KillUnit ( Grishko ) ;
28428: LD_EXP 82
28432: PPUSH
28433: CALL_OW 66
// wait ( 0 0$12 ) ;
28437: LD_INT 420
28439: PPUSH
28440: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28444: LD_EXP 61
28448: PPUSH
28449: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28453: LD_EXP 61
28457: PPUSH
28458: LD_STRING D9-Kur-3
28460: PPUSH
28461: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28465: LD_INT 176
28467: PPUSH
28468: LD_INT 110
28470: PPUSH
28471: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28475: LD_EXP 88
28479: PPUSH
28480: LD_INT 21
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 72
28494: PPUSH
28495: LD_INT 221
28497: PPUSH
28498: LD_INT 110
28500: PPUSH
28501: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28505: LD_EXP 87
28509: PPUSH
28510: LD_INT 161
28512: PPUSH
28513: LD_INT 109
28515: PPUSH
28516: CALL_OW 114
// wait ( 0 0$7 ) ;
28520: LD_INT 245
28522: PPUSH
28523: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28527: LD_EXP 88
28531: PPUSH
28532: LD_INT 161
28534: PPUSH
28535: LD_INT 109
28537: PPUSH
28538: CALL_OW 114
// wait ( 0 0$11 ) ;
28542: LD_INT 385
28544: PPUSH
28545: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28549: LD_EXP 61
28553: PPUSH
28554: LD_EXP 67
28558: PPUSH
28559: CALL_OW 120
// DialogueOn ;
28563: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28567: LD_EXP 61
28571: PPUSH
28572: LD_STRING D9a-Kur-1
28574: PPUSH
28575: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28579: LD_EXP 49
28583: PPUSH
28584: LD_STRING D9a-Bur-1
28586: PPUSH
28587: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28591: LD_EXP 61
28595: PPUSH
28596: LD_STRING D9a-Kur-2
28598: PPUSH
28599: CALL_OW 94
// DialogueOff ;
28603: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28607: LD_EXP 79
28611: PPUSH
28612: CALL_OW 122
// wait ( 0 0$1 ) ;
28616: LD_INT 35
28618: PPUSH
28619: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28623: LD_EXP 79
28627: PPUSH
28628: LD_EXP 60
28632: PPUSH
28633: CALL_OW 250
28637: PPUSH
28638: LD_EXP 60
28642: PPUSH
28643: CALL_OW 251
28647: PPUSH
28648: CALL_OW 111
// immortalSurvivors = true ;
28652: LD_ADDR_EXP 25
28656: PUSH
28657: LD_INT 1
28659: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28660: LD_ADDR_VAR 0 2
28664: PUSH
28665: LD_INT 22
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 21
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 50
28687: PUSH
28688: EMPTY
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: PUSH
28701: FOR_IN
28702: IFFALSE 28715
// RemoveUnit ( tmpUS ) ;
28704: LD_VAR 0 2
28708: PPUSH
28709: CALL_OW 64
28713: GO 28701
28715: POP
28716: POP
// repeat wait ( 0 0$1 ) ;
28717: LD_INT 35
28719: PPUSH
28720: CALL_OW 67
// until IsDead ( Kurin ) ;
28724: LD_EXP 61
28728: PPUSH
28729: CALL_OW 301
28733: IFFALSE 28717
// wait ( 0 0$1 ) ;
28735: LD_INT 35
28737: PPUSH
28738: CALL_OW 67
// nearTurrets = [ ] ;
28742: LD_ADDR_VAR 0 8
28746: PUSH
28747: EMPTY
28748: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28749: LD_ADDR_VAR 0 7
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_INT 6
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 30
28766: PUSH
28767: LD_INT 32
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 50
28776: PUSH
28777: EMPTY
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: PPUSH
28785: CALL_OW 69
28789: ST_TO_ADDR
// for i = 1 to 2 do
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: DOUBLE
28796: LD_INT 1
28798: DEC
28799: ST_TO_ADDR
28800: LD_INT 2
28802: PUSH
28803: FOR_TO
28804: IFFALSE 28913
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28806: LD_ADDR_VAR 0 8
28810: PUSH
28811: LD_VAR 0 8
28815: PUSH
28816: LD_VAR 0 7
28820: PPUSH
28821: LD_EXP 60
28825: PPUSH
28826: CALL_OW 74
28830: ADD
28831: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28832: LD_ADDR_VAR 0 7
28836: PUSH
28837: LD_VAR 0 7
28841: PUSH
28842: LD_VAR 0 8
28846: DIFF
28847: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_VAR 0 8
28857: PUSH
28858: LD_VAR 0 1
28862: ARRAY
28863: PPUSH
28864: CALL_OW 313
28868: PUSH
28869: LD_INT 1
28871: ARRAY
28872: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28873: LD_VAR 0 3
28877: PPUSH
28878: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28882: LD_VAR 0 3
28886: PPUSH
28887: LD_EXP 60
28891: PPUSH
28892: CALL_OW 250
28896: PPUSH
28897: LD_EXP 60
28901: PPUSH
28902: CALL_OW 251
28906: PPUSH
28907: CALL_OW 171
// end ;
28911: GO 28803
28913: POP
28914: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_INT 6
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 21
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 30
28945: PUSH
28946: LD_INT 6
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 30
28955: PUSH
28956: LD_INT 7
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: PPUSH
28973: CALL_OW 69
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: CALL_OW 313
28986: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28987: LD_VAR 0 3
28991: PPUSH
28992: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28996: LD_VAR 0 3
29000: PPUSH
29001: LD_EXP 60
29005: PPUSH
29006: CALL_OW 250
29010: PPUSH
29011: LD_EXP 60
29015: PPUSH
29016: CALL_OW 251
29020: PPUSH
29021: CALL_OW 171
// wait ( 0 0$14 ) ;
29025: LD_INT 490
29027: PPUSH
29028: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29032: LD_INT 26
29034: PPUSH
29035: LD_INT 22
29037: PUSH
29038: LD_INT 6
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 21
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PPUSH
29059: CALL_OW 70
29063: PPUSH
29064: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29068: LD_ADDR_VAR 0 1
29072: PUSH
29073: LD_INT 26
29075: PPUSH
29076: LD_INT 22
29078: PUSH
29079: LD_INT 6
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 21
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 70
29104: PUSH
29105: FOR_IN
29106: IFFALSE 29217
// begin if GetLives ( i ) < 15 then
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 256
29117: PUSH
29118: LD_INT 15
29120: LESS
29121: IFFALSE 29186
// begin tmpRu = UnitsInside ( i ) ;
29123: LD_ADDR_VAR 0 3
29127: PUSH
29128: LD_VAR 0 1
29132: PPUSH
29133: CALL_OW 313
29137: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29138: LD_VAR 0 3
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29151: LD_VAR 0 3
29155: PUSH
29156: LD_INT 1
29158: ARRAY
29159: PPUSH
29160: LD_EXP 60
29164: PPUSH
29165: CALL_OW 250
29169: PPUSH
29170: LD_EXP 60
29174: PPUSH
29175: CALL_OW 251
29179: PPUSH
29180: CALL_OW 171
// end else
29184: GO 29215
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_EXP 60
29195: PPUSH
29196: CALL_OW 250
29200: PPUSH
29201: LD_EXP 60
29205: PPUSH
29206: CALL_OW 251
29210: PPUSH
29211: CALL_OW 171
// end ;
29215: GO 29105
29217: POP
29218: POP
// wait ( 0 0$1 ) ;
29219: LD_INT 35
29221: PPUSH
29222: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29226: LD_INT 26
29228: PPUSH
29229: LD_INT 22
29231: PUSH
29232: LD_INT 6
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 21
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PPUSH
29253: CALL_OW 70
29257: PPUSH
29258: LD_EXP 60
29262: PPUSH
29263: CALL_OW 250
29267: PPUSH
29268: LD_EXP 60
29272: PPUSH
29273: CALL_OW 251
29277: PPUSH
29278: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29282: LD_EXP 74
29286: PPUSH
29287: CALL_OW 313
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PPUSH
29296: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29300: LD_ADDR_VAR 0 1
29304: PUSH
29305: LD_INT 26
29307: PPUSH
29308: LD_INT 22
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 21
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 70
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29449
// begin if GetLives ( i ) < 15 then
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 256
29349: PUSH
29350: LD_INT 15
29352: LESS
29353: IFFALSE 29418
// begin tmpRu = UnitsInside ( i ) ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 313
29369: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29370: LD_VAR 0 3
29374: PUSH
29375: LD_INT 1
29377: ARRAY
29378: PPUSH
29379: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29383: LD_VAR 0 3
29387: PUSH
29388: LD_INT 1
29390: ARRAY
29391: PPUSH
29392: LD_EXP 60
29396: PPUSH
29397: CALL_OW 250
29401: PPUSH
29402: LD_EXP 60
29406: PPUSH
29407: CALL_OW 251
29411: PPUSH
29412: CALL_OW 171
// end else
29416: GO 29447
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_EXP 60
29427: PPUSH
29428: CALL_OW 250
29432: PPUSH
29433: LD_EXP 60
29437: PPUSH
29438: CALL_OW 251
29442: PPUSH
29443: CALL_OW 171
// end ;
29447: GO 29337
29449: POP
29450: POP
// wait ( 0 0$1 ) ;
29451: LD_INT 35
29453: PPUSH
29454: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29458: LD_INT 22
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 21
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PPUSH
29482: CALL_OW 69
29486: PPUSH
29487: LD_EXP 62
29491: PPUSH
29492: CALL_OW 250
29496: PPUSH
29497: LD_EXP 62
29501: PPUSH
29502: CALL_OW 251
29506: PPUSH
29507: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29511: LD_INT 22
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 21
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 69
29539: PPUSH
29540: LD_EXP 62
29544: PPUSH
29545: CALL_OW 250
29549: PPUSH
29550: LD_EXP 62
29554: PPUSH
29555: CALL_OW 251
29559: PPUSH
29560: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29564: LD_EXP 49
29568: PPUSH
29569: CALL_OW 310
29573: PPUSH
29574: LD_EXP 62
29578: PPUSH
29579: CALL_OW 250
29583: PPUSH
29584: LD_EXP 62
29588: PPUSH
29589: CALL_OW 251
29593: PPUSH
29594: CALL_OW 111
// if IsInUnit ( Burlak ) then
29598: LD_EXP 49
29602: PPUSH
29603: CALL_OW 310
29607: IFFALSE 29625
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
29609: LD_EXP 49
29613: PPUSH
29614: CALL_OW 310
29618: PPUSH
29619: CALL_OW 87
29623: GO 29634
// CenterNowOnUnits ( Burlak ) ;
29625: LD_EXP 49
29629: PPUSH
29630: CALL_OW 87
// wait ( 0 0$1 ) ;
29634: LD_INT 35
29636: PPUSH
29637: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
29641: LD_EXP 49
29645: PPUSH
29646: LD_EXP 62
29650: PPUSH
29651: CALL_OW 296
29655: PUSH
29656: LD_INT 8
29658: LESS
29659: PUSH
29660: LD_EXP 49
29664: PPUSH
29665: CALL_OW 310
29669: PUSH
29670: LD_INT 8
29672: LESS
29673: PUSH
29674: LD_EXP 49
29678: PPUSH
29679: CALL_OW 310
29683: AND
29684: OR
29685: IFFALSE 29511
// if IsInUnit ( Burlak ) then
29687: LD_EXP 49
29691: PPUSH
29692: CALL_OW 310
29696: IFFALSE 29714
// begin ComExitVehicle ( Burlak ) ;
29698: LD_EXP 49
29702: PPUSH
29703: CALL_OW 121
// wait ( 0 0$1 ) ;
29707: LD_INT 35
29709: PPUSH
29710: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
29714: LD_EXP 49
29718: PUSH
29719: LD_EXP 62
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PPUSH
29728: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
29732: LD_EXP 49
29736: PPUSH
29737: LD_EXP 62
29741: PPUSH
29742: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29746: LD_EXP 62
29750: PPUSH
29751: LD_EXP 49
29755: PPUSH
29756: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29760: LD_EXP 49
29764: PPUSH
29765: LD_STRING D10a-Bur-1
29767: PPUSH
29768: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29772: LD_EXP 62
29776: PPUSH
29777: LD_STRING D10a-Pop-1
29779: PPUSH
29780: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29784: LD_EXP 49
29788: PPUSH
29789: LD_STRING D10a-Bur-2
29791: PPUSH
29792: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29796: LD_EXP 62
29800: PPUSH
29801: LD_STRING D10a-Pop-2
29803: PPUSH
29804: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29808: LD_EXP 49
29812: PPUSH
29813: LD_STRING D10a-Bur-3
29815: PPUSH
29816: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29820: LD_EXP 62
29824: PPUSH
29825: LD_STRING D10a-Pop-3
29827: PPUSH
29828: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29832: LD_EXP 49
29836: PPUSH
29837: LD_STRING D10a-Bur-4
29839: PPUSH
29840: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29844: LD_EXP 62
29848: PPUSH
29849: LD_STRING D10a-Pop-4
29851: PPUSH
29852: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29856: LD_EXP 49
29860: PPUSH
29861: LD_STRING D10a-Bur-5
29863: PPUSH
29864: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29868: LD_EXP 62
29872: PPUSH
29873: LD_STRING D10a-Pop-5
29875: PPUSH
29876: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29880: LD_ADDR_EXP 79
29884: PUSH
29885: EMPTY
29886: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29887: LD_ADDR_EXP 79
29891: PUSH
29892: LD_INT 22
29894: PUSH
29895: LD_INT 6
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 50
29904: PUSH
29905: EMPTY
29906: LIST
29907: PUSH
29908: LD_INT 21
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 69
29927: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
29928: LD_INT 22
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: LD_INT 21
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 21
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: PPUSH
29975: LD_INT 83
29977: PPUSH
29978: LD_INT 157
29980: PPUSH
29981: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
29985: LD_EXP 79
29989: PPUSH
29990: LD_INT 83
29992: PPUSH
29993: LD_INT 157
29995: PPUSH
29996: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30000: LD_INT 22
30002: PUSH
30003: LD_INT 6
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 21
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 69
30028: PPUSH
30029: LD_INT 83
30031: PPUSH
30032: LD_INT 157
30034: PPUSH
30035: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30039: LD_EXP 49
30043: PPUSH
30044: CALL_OW 87
// wait ( 0 0$1 ) ;
30048: LD_INT 35
30050: PPUSH
30051: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30055: LD_EXP 49
30059: PPUSH
30060: LD_EXP 60
30064: PPUSH
30065: CALL_OW 296
30069: PUSH
30070: LD_INT 23
30072: GREATER
30073: IFFALSE 30000
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30075: LD_INT 113
30077: PPUSH
30078: LD_INT 96
30080: PPUSH
30081: LD_INT 3
30083: PPUSH
30084: LD_INT 12
30086: NEG
30087: PPUSH
30088: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30092: LD_INT 113
30094: PPUSH
30095: LD_INT 96
30097: PPUSH
30098: CALL_OW 86
// canDestroyBeriaBase = true ;
30102: LD_ADDR_EXP 28
30106: PUSH
30107: LD_INT 1
30109: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30110: LD_ADDR_VAR 0 5
30114: PUSH
30115: LD_INT 25
30117: PPUSH
30118: LD_INT 22
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 21
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PPUSH
30142: CALL_OW 70
30146: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30147: LD_ADDR_VAR 0 1
30151: PUSH
30152: DOUBLE
30153: LD_INT 1
30155: DEC
30156: ST_TO_ADDR
30157: LD_VAR 0 5
30161: PUSH
30162: FOR_TO
30163: IFFALSE 30245
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30165: LD_ADDR_VAR 0 6
30169: PUSH
30170: LD_VAR 0 5
30174: PPUSH
30175: LD_INT 22
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PPUSH
30185: CALL_OW 69
30189: PUSH
30190: LD_INT 1
30192: ARRAY
30193: PPUSH
30194: CALL_OW 74
30198: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 5
30208: PUSH
30209: LD_VAR 0 6
30213: DIFF
30214: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
30215: LD_EXP 87
30219: PPUSH
30220: LD_VAR 0 6
30224: PPUSH
30225: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
30229: LD_EXP 88
30233: PPUSH
30234: LD_VAR 0 6
30238: PPUSH
30239: CALL_OW 175
// end ;
30243: GO 30162
30245: POP
30246: POP
// wait ( 0 0$35 ) ;
30247: LD_INT 1225
30249: PPUSH
30250: CALL_OW 67
// FinishMission ;
30254: CALL 20185 0 0
// end ;
30258: PPOPN 8
30260: END
// every 1 trigger immortalSurvivors do var unit ;
30261: LD_EXP 25
30265: IFFALSE 30303
30267: GO 30269
30269: DISABLE
30270: LD_INT 0
30272: PPUSH
// begin enable ;
30273: ENABLE
// for unit in survivorsArabianAttack do
30274: LD_ADDR_VAR 0 1
30278: PUSH
30279: LD_EXP 79
30283: PUSH
30284: FOR_IN
30285: IFFALSE 30301
// SetLives ( unit , 1000 ) ;
30287: LD_VAR 0 1
30291: PPUSH
30292: LD_INT 1000
30294: PPUSH
30295: CALL_OW 234
30299: GO 30284
30301: POP
30302: POP
// end ; end_of_file
30303: PPOPN 1
30305: END
// every 0 0$30 do
30306: GO 30308
30308: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
30309: LD_INT 3
30311: PPUSH
30312: LD_INT 5
30314: PPUSH
30315: CALL_OW 12
30319: PPUSH
30320: LD_INT 76
30322: PPUSH
30323: LD_INT 111
30325: PPUSH
30326: LD_INT 5
30328: PPUSH
30329: LD_INT 1
30331: PPUSH
30332: CALL_OW 56
30336: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
30337: LD_EXP 5
30341: IFFALSE 30413
30343: GO 30345
30345: DISABLE
30346: LD_INT 0
30348: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
30349: LD_INT 50
30351: PPUSH
30352: LD_INT 4200
30354: PPUSH
30355: CALL_OW 12
30359: PPUSH
30360: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
30364: LD_VAR 0 1
30368: PUSH
30369: LD_INT 175
30371: MUL
30372: PPUSH
30373: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
30377: LD_ADDR_VAR 0 1
30381: PUSH
30382: LD_VAR 0 1
30386: PUSH
30387: LD_INT 1
30389: PLUS
30390: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
30391: LD_INT 3
30393: PPUSH
30394: LD_INT 5
30396: PPUSH
30397: CALL_OW 12
30401: PPUSH
30402: LD_INT 6
30404: PPUSH
30405: LD_INT 1
30407: PPUSH
30408: CALL_OW 55
// enable ;
30412: ENABLE
// end ; end_of_file
30413: PPOPN 1
30415: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
30416: LD_EXP 89
30420: IFFALSE 30583
30422: GO 30424
30424: DISABLE
// begin enable ;
30425: ENABLE
// case counterIndex of 1 :
30426: LD_EXP 90
30430: PUSH
30431: LD_INT 1
30433: DOUBLE
30434: EQUAL
30435: IFTRUE 30439
30437: GO 30456
30439: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
30440: LD_ADDR_EXP 40
30444: PUSH
30445: LD_EXP 40
30449: PUSH
30450: LD_INT 35
30452: MINUS
30453: ST_TO_ADDR
30454: GO 30583
30456: LD_INT 2
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30498
30464: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
30465: LD_ADDR_OWVAR 47
30469: PUSH
30470: LD_STRING #Ru03-1
30472: PUSH
30473: LD_EXP 15
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30482: LD_ADDR_EXP 15
30486: PUSH
30487: LD_EXP 15
30491: PUSH
30492: LD_INT 35
30494: MINUS
30495: ST_TO_ADDR
// end ; 3 :
30496: GO 30583
30498: LD_INT 3
30500: DOUBLE
30501: EQUAL
30502: IFTRUE 30506
30504: GO 30540
30506: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
30507: LD_ADDR_OWVAR 47
30511: PUSH
30512: LD_STRING #Ru03-2
30514: PUSH
30515: LD_EXP 15
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30524: LD_ADDR_EXP 15
30528: PUSH
30529: LD_EXP 15
30533: PUSH
30534: LD_INT 35
30536: MINUS
30537: ST_TO_ADDR
// end ; 4 :
30538: GO 30583
30540: LD_INT 4
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30582
30548: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
30549: LD_ADDR_OWVAR 47
30553: PUSH
30554: LD_STRING #Ru03-3
30556: PUSH
30557: LD_EXP 14
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
30566: LD_ADDR_EXP 14
30570: PUSH
30571: LD_EXP 14
30575: PUSH
30576: LD_INT 35
30578: MINUS
30579: ST_TO_ADDR
// end ; end ;
30580: GO 30583
30582: POP
// end ; end_of_file
30583: END
// every 7 7$0 do
30584: GO 30586
30586: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
30587: LD_INT 3
30589: PPUSH
30590: LD_INT 1
30592: PPUSH
30593: LD_INT 0
30595: PPUSH
30596: LD_INT 7
30598: PPUSH
30599: CALL 5880 0 4
30603: END
// every 12 12$0 do
30604: GO 30606
30606: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
30607: LD_INT 2
30609: PPUSH
30610: LD_INT 2
30612: PPUSH
30613: LD_INT 1
30615: PPUSH
30616: LD_INT 9
30618: PUSH
30619: LD_INT 8
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PPUSH
30629: LD_INT 2
30631: PPUSH
30632: CALL_OW 12
30636: ARRAY
30637: PPUSH
30638: CALL 5880 0 4
30642: END
// every 20 20$0 do
30643: GO 30645
30645: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
30646: LD_INT 4
30648: PPUSH
30649: LD_INT 2
30651: PPUSH
30652: LD_INT 0
30654: PPUSH
30655: LD_INT 7
30657: PPUSH
30658: CALL 5880 0 4
30662: END
// every 23 23$0 do
30663: GO 30665
30665: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
30666: LD_INT 3
30668: PPUSH
30669: LD_INT 1
30671: PPUSH
30672: LD_INT 2
30674: PPUSH
30675: LD_INT 9
30677: PUSH
30678: LD_INT 8
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PPUSH
30688: LD_INT 2
30690: PPUSH
30691: CALL_OW 12
30695: ARRAY
30696: PPUSH
30697: CALL 5880 0 4
30701: END
// export function Nef_PrepareNature ; var i , un ; begin
30702: LD_INT 0
30704: PPUSH
30705: PPUSH
30706: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: DOUBLE
30713: LD_INT 1
30715: DEC
30716: ST_TO_ADDR
30717: LD_EXP 32
30721: PUSH
30722: LD_INT 1
30724: ARRAY
30725: PUSH
30726: FOR_TO
30727: IFFALSE 30837
// begin uc_side = 0 ;
30729: LD_ADDR_OWVAR 20
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// uc_nation = nation_nature ;
30737: LD_ADDR_OWVAR 21
30741: PUSH
30742: LD_INT 0
30744: ST_TO_ADDR
// hc_class = class_apeman ;
30745: LD_ADDR_OWVAR 28
30749: PUSH
30750: LD_INT 12
30752: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30753: LD_ADDR_OWVAR 31
30757: PUSH
30758: LD_EXP 33
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: PUSH
30767: LD_EXP 33
30771: PUSH
30772: LD_INT 2
30774: ARRAY
30775: PUSH
30776: LD_EXP 33
30780: PUSH
30781: LD_INT 3
30783: ARRAY
30784: PUSH
30785: LD_EXP 33
30789: PUSH
30790: LD_INT 4
30792: ARRAY
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30800: LD_ADDR_OWVAR 35
30804: PUSH
30805: LD_EXP 34
30809: ST_TO_ADDR
// un = CreateHuman ;
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: CALL_OW 44
30819: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30820: LD_VAR 0 3
30824: PPUSH
30825: LD_INT 27
30827: PPUSH
30828: LD_INT 0
30830: PPUSH
30831: CALL_OW 49
// end ;
30835: GO 30726
30837: POP
30838: POP
// for i := 1 to animalsAmount [ 2 ] do
30839: LD_ADDR_VAR 0 2
30843: PUSH
30844: DOUBLE
30845: LD_INT 1
30847: DEC
30848: ST_TO_ADDR
30849: LD_EXP 32
30853: PUSH
30854: LD_INT 2
30856: ARRAY
30857: PUSH
30858: FOR_TO
30859: IFFALSE 30969
// begin uc_side = 0 ;
30861: LD_ADDR_OWVAR 20
30865: PUSH
30866: LD_INT 0
30868: ST_TO_ADDR
// uc_nation = nation_nature ;
30869: LD_ADDR_OWVAR 21
30873: PUSH
30874: LD_INT 0
30876: ST_TO_ADDR
// hc_class = class_phororhacos ;
30877: LD_ADDR_OWVAR 28
30881: PUSH
30882: LD_INT 18
30884: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30885: LD_ADDR_OWVAR 31
30889: PUSH
30890: LD_EXP 33
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PUSH
30899: LD_EXP 33
30903: PUSH
30904: LD_INT 2
30906: ARRAY
30907: PUSH
30908: LD_EXP 33
30912: PUSH
30913: LD_INT 3
30915: ARRAY
30916: PUSH
30917: LD_EXP 33
30921: PUSH
30922: LD_INT 4
30924: ARRAY
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30932: LD_ADDR_OWVAR 35
30936: PUSH
30937: LD_EXP 34
30941: ST_TO_ADDR
// un = CreateHuman ;
30942: LD_ADDR_VAR 0 3
30946: PUSH
30947: CALL_OW 44
30951: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30952: LD_VAR 0 3
30956: PPUSH
30957: LD_INT 27
30959: PPUSH
30960: LD_INT 0
30962: PPUSH
30963: CALL_OW 49
// end ;
30967: GO 30858
30969: POP
30970: POP
// for i := 1 to animalsAmount [ 3 ] do
30971: LD_ADDR_VAR 0 2
30975: PUSH
30976: DOUBLE
30977: LD_INT 1
30979: DEC
30980: ST_TO_ADDR
30981: LD_EXP 32
30985: PUSH
30986: LD_INT 3
30988: ARRAY
30989: PUSH
30990: FOR_TO
30991: IFFALSE 31101
// begin uc_side = 0 ;
30993: LD_ADDR_OWVAR 20
30997: PUSH
30998: LD_INT 0
31000: ST_TO_ADDR
// uc_nation = nation_nature ;
31001: LD_ADDR_OWVAR 21
31005: PUSH
31006: LD_INT 0
31008: ST_TO_ADDR
// hc_class = class_tiger ;
31009: LD_ADDR_OWVAR 28
31013: PUSH
31014: LD_INT 14
31016: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31017: LD_ADDR_OWVAR 31
31021: PUSH
31022: LD_EXP 33
31026: PUSH
31027: LD_INT 1
31029: ARRAY
31030: PUSH
31031: LD_EXP 33
31035: PUSH
31036: LD_INT 2
31038: ARRAY
31039: PUSH
31040: LD_EXP 33
31044: PUSH
31045: LD_INT 3
31047: ARRAY
31048: PUSH
31049: LD_EXP 33
31053: PUSH
31054: LD_INT 4
31056: ARRAY
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31064: LD_ADDR_OWVAR 35
31068: PUSH
31069: LD_EXP 34
31073: ST_TO_ADDR
// un = CreateHuman ;
31074: LD_ADDR_VAR 0 3
31078: PUSH
31079: CALL_OW 44
31083: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31084: LD_VAR 0 3
31088: PPUSH
31089: LD_INT 27
31091: PPUSH
31092: LD_INT 0
31094: PPUSH
31095: CALL_OW 49
// end ;
31099: GO 30990
31101: POP
31102: POP
// for i := 1 to animalsAmount [ 4 ] do
31103: LD_ADDR_VAR 0 2
31107: PUSH
31108: DOUBLE
31109: LD_INT 1
31111: DEC
31112: ST_TO_ADDR
31113: LD_EXP 32
31117: PUSH
31118: LD_INT 4
31120: ARRAY
31121: PUSH
31122: FOR_TO
31123: IFFALSE 31233
// begin uc_side = 0 ;
31125: LD_ADDR_OWVAR 20
31129: PUSH
31130: LD_INT 0
31132: ST_TO_ADDR
// uc_nation = nation_nature ;
31133: LD_ADDR_OWVAR 21
31137: PUSH
31138: LD_INT 0
31140: ST_TO_ADDR
// hc_class = 21 ;
31141: LD_ADDR_OWVAR 28
31145: PUSH
31146: LD_INT 21
31148: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31149: LD_ADDR_OWVAR 31
31153: PUSH
31154: LD_EXP 33
31158: PUSH
31159: LD_INT 1
31161: ARRAY
31162: PUSH
31163: LD_EXP 33
31167: PUSH
31168: LD_INT 2
31170: ARRAY
31171: PUSH
31172: LD_EXP 33
31176: PUSH
31177: LD_INT 3
31179: ARRAY
31180: PUSH
31181: LD_EXP 33
31185: PUSH
31186: LD_INT 4
31188: ARRAY
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31196: LD_ADDR_OWVAR 35
31200: PUSH
31201: LD_EXP 34
31205: ST_TO_ADDR
// un = CreateHuman ;
31206: LD_ADDR_VAR 0 3
31210: PUSH
31211: CALL_OW 44
31215: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31216: LD_VAR 0 3
31220: PPUSH
31221: LD_INT 27
31223: PPUSH
31224: LD_INT 0
31226: PPUSH
31227: CALL_OW 49
// end ;
31231: GO 31122
31233: POP
31234: POP
// for i := 1 to animalsAmount [ 5 ] do
31235: LD_ADDR_VAR 0 2
31239: PUSH
31240: DOUBLE
31241: LD_INT 1
31243: DEC
31244: ST_TO_ADDR
31245: LD_EXP 32
31249: PUSH
31250: LD_INT 5
31252: ARRAY
31253: PUSH
31254: FOR_TO
31255: IFFALSE 31316
// begin uc_side = 0 ;
31257: LD_ADDR_OWVAR 20
31261: PUSH
31262: LD_INT 0
31264: ST_TO_ADDR
// uc_nation = nation_nature ;
31265: LD_ADDR_OWVAR 21
31269: PUSH
31270: LD_INT 0
31272: ST_TO_ADDR
// vc_chassis := 31 ;
31273: LD_ADDR_OWVAR 37
31277: PUSH
31278: LD_INT 31
31280: ST_TO_ADDR
// vc_control := control_rider ;
31281: LD_ADDR_OWVAR 38
31285: PUSH
31286: LD_INT 4
31288: ST_TO_ADDR
// un := CreateVehicle ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: CALL_OW 45
31298: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31299: LD_VAR 0 3
31303: PPUSH
31304: LD_INT 27
31306: PPUSH
31307: LD_INT 0
31309: PPUSH
31310: CALL_OW 49
// end ;
31314: GO 31254
31316: POP
31317: POP
// end ; end_of_file
31318: LD_VAR 0 1
31322: RET
// every 1 trigger scholtzeSaved do
31323: LD_EXP 7
31327: IFFALSE 31339
31329: GO 31331
31331: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
31332: LD_STRING ACH_PROFESSOR
31334: PPUSH
31335: CALL_OW 543
31339: END
// every 1 trigger IsDead ( Sikorski ) do
31340: LD_INT 290
31342: PPUSH
31343: CALL_OW 301
31347: IFFALSE 31359
31349: GO 31351
31351: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
31352: LD_STRING ACH_SIKORSKI
31354: PPUSH
31355: CALL_OW 543
31359: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
31360: LD_EXP 12
31364: NOT
31365: PUSH
31366: LD_EXP 24
31370: NOT
31371: AND
31372: IFFALSE 31384
31374: GO 31376
31376: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
31377: LD_STRING ACH_REINFORCE
31379: PPUSH
31380: CALL_OW 543
31384: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31385: LD_INT 0
31387: PPUSH
// ar_crane := 88 ;
31388: LD_ADDR_EXP 97
31392: PUSH
31393: LD_INT 88
31395: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31396: LD_ADDR_EXP 92
31400: PUSH
31401: LD_INT 89
31403: ST_TO_ADDR
// us_hack := 99 ;
31404: LD_ADDR_EXP 93
31408: PUSH
31409: LD_INT 99
31411: ST_TO_ADDR
// us_artillery := 97 ;
31412: LD_ADDR_EXP 94
31416: PUSH
31417: LD_INT 97
31419: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31420: LD_ADDR_EXP 95
31424: PUSH
31425: LD_INT 91
31427: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31428: LD_ADDR_EXP 96
31432: PUSH
31433: LD_INT 92
31435: ST_TO_ADDR
// ru_radar := 98 ;
31436: LD_ADDR_EXP 91
31440: PUSH
31441: LD_INT 98
31443: ST_TO_ADDR
// tech_Artillery := 80 ;
31444: LD_ADDR_EXP 98
31448: PUSH
31449: LD_INT 80
31451: ST_TO_ADDR
// tech_RadMat := 81 ;
31452: LD_ADDR_EXP 99
31456: PUSH
31457: LD_INT 81
31459: ST_TO_ADDR
// tech_BasicTools := 82 ;
31460: LD_ADDR_EXP 100
31464: PUSH
31465: LD_INT 82
31467: ST_TO_ADDR
// tech_Cargo := 83 ;
31468: LD_ADDR_EXP 101
31472: PUSH
31473: LD_INT 83
31475: ST_TO_ADDR
// tech_Track := 84 ;
31476: LD_ADDR_EXP 102
31480: PUSH
31481: LD_INT 84
31483: ST_TO_ADDR
// tech_Crane := 85 ;
31484: LD_ADDR_EXP 103
31488: PUSH
31489: LD_INT 85
31491: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31492: LD_ADDR_EXP 104
31496: PUSH
31497: LD_INT 86
31499: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31500: LD_ADDR_EXP 105
31504: PUSH
31505: LD_INT 87
31507: ST_TO_ADDR
// end ;
31508: LD_VAR 0 1
31512: RET
// every 1 do
31513: GO 31515
31515: DISABLE
// InitGlobalVariables ; end_of_file
31516: CALL 31385 0 0
31520: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
// if exist_mode then
31525: LD_VAR 0 2
31529: IFFALSE 31554
// unit := CreateCharacter ( prefix & ident ) else
31531: LD_ADDR_VAR 0 5
31535: PUSH
31536: LD_VAR 0 3
31540: PUSH
31541: LD_VAR 0 1
31545: STR
31546: PPUSH
31547: CALL_OW 34
31551: ST_TO_ADDR
31552: GO 31569
// unit := NewCharacter ( ident ) ;
31554: LD_ADDR_VAR 0 5
31558: PUSH
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 25
31568: ST_TO_ADDR
// result := unit ;
31569: LD_ADDR_VAR 0 4
31573: PUSH
31574: LD_VAR 0 5
31578: ST_TO_ADDR
// end ;
31579: LD_VAR 0 4
31583: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31584: LD_INT 0
31586: PPUSH
31587: PPUSH
// if not side or not nation then
31588: LD_VAR 0 1
31592: NOT
31593: PUSH
31594: LD_VAR 0 2
31598: NOT
31599: OR
31600: IFFALSE 31604
// exit ;
31602: GO 32368
// case nation of nation_american :
31604: LD_VAR 0 2
31608: PUSH
31609: LD_INT 1
31611: DOUBLE
31612: EQUAL
31613: IFTRUE 31617
31615: GO 31831
31617: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31618: LD_ADDR_VAR 0 4
31622: PUSH
31623: LD_INT 35
31625: PUSH
31626: LD_INT 45
31628: PUSH
31629: LD_INT 46
31631: PUSH
31632: LD_INT 47
31634: PUSH
31635: LD_INT 82
31637: PUSH
31638: LD_INT 83
31640: PUSH
31641: LD_INT 84
31643: PUSH
31644: LD_INT 85
31646: PUSH
31647: LD_INT 86
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 6
31658: PUSH
31659: LD_INT 15
31661: PUSH
31662: LD_INT 16
31664: PUSH
31665: LD_INT 7
31667: PUSH
31668: LD_INT 12
31670: PUSH
31671: LD_INT 13
31673: PUSH
31674: LD_INT 10
31676: PUSH
31677: LD_INT 14
31679: PUSH
31680: LD_INT 20
31682: PUSH
31683: LD_INT 21
31685: PUSH
31686: LD_INT 22
31688: PUSH
31689: LD_INT 25
31691: PUSH
31692: LD_INT 32
31694: PUSH
31695: LD_INT 27
31697: PUSH
31698: LD_INT 36
31700: PUSH
31701: LD_INT 69
31703: PUSH
31704: LD_INT 39
31706: PUSH
31707: LD_INT 34
31709: PUSH
31710: LD_INT 40
31712: PUSH
31713: LD_INT 48
31715: PUSH
31716: LD_INT 49
31718: PUSH
31719: LD_INT 50
31721: PUSH
31722: LD_INT 51
31724: PUSH
31725: LD_INT 52
31727: PUSH
31728: LD_INT 53
31730: PUSH
31731: LD_INT 54
31733: PUSH
31734: LD_INT 55
31736: PUSH
31737: LD_INT 56
31739: PUSH
31740: LD_INT 57
31742: PUSH
31743: LD_INT 58
31745: PUSH
31746: LD_INT 59
31748: PUSH
31749: LD_INT 60
31751: PUSH
31752: LD_INT 61
31754: PUSH
31755: LD_INT 62
31757: PUSH
31758: LD_INT 80
31760: PUSH
31761: LD_INT 82
31763: PUSH
31764: LD_INT 83
31766: PUSH
31767: LD_INT 84
31769: PUSH
31770: LD_INT 85
31772: PUSH
31773: LD_INT 86
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
31829: GO 32292
31831: LD_INT 2
31833: DOUBLE
31834: EQUAL
31835: IFTRUE 31839
31837: GO 32061
31839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: LD_INT 35
31847: PUSH
31848: LD_INT 45
31850: PUSH
31851: LD_INT 46
31853: PUSH
31854: LD_INT 47
31856: PUSH
31857: LD_INT 82
31859: PUSH
31860: LD_INT 83
31862: PUSH
31863: LD_INT 84
31865: PUSH
31866: LD_INT 85
31868: PUSH
31869: LD_INT 87
31871: PUSH
31872: LD_INT 70
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 4
31886: PUSH
31887: LD_INT 5
31889: PUSH
31890: LD_INT 6
31892: PUSH
31893: LD_INT 15
31895: PUSH
31896: LD_INT 18
31898: PUSH
31899: LD_INT 7
31901: PUSH
31902: LD_INT 17
31904: PUSH
31905: LD_INT 8
31907: PUSH
31908: LD_INT 20
31910: PUSH
31911: LD_INT 21
31913: PUSH
31914: LD_INT 22
31916: PUSH
31917: LD_INT 72
31919: PUSH
31920: LD_INT 26
31922: PUSH
31923: LD_INT 69
31925: PUSH
31926: LD_INT 39
31928: PUSH
31929: LD_INT 40
31931: PUSH
31932: LD_INT 41
31934: PUSH
31935: LD_INT 42
31937: PUSH
31938: LD_INT 43
31940: PUSH
31941: LD_INT 48
31943: PUSH
31944: LD_INT 49
31946: PUSH
31947: LD_INT 50
31949: PUSH
31950: LD_INT 51
31952: PUSH
31953: LD_INT 52
31955: PUSH
31956: LD_INT 53
31958: PUSH
31959: LD_INT 54
31961: PUSH
31962: LD_INT 55
31964: PUSH
31965: LD_INT 56
31967: PUSH
31968: LD_INT 60
31970: PUSH
31971: LD_INT 61
31973: PUSH
31974: LD_INT 62
31976: PUSH
31977: LD_INT 66
31979: PUSH
31980: LD_INT 67
31982: PUSH
31983: LD_INT 68
31985: PUSH
31986: LD_INT 81
31988: PUSH
31989: LD_INT 82
31991: PUSH
31992: LD_INT 83
31994: PUSH
31995: LD_INT 84
31997: PUSH
31998: LD_INT 85
32000: PUSH
32001: LD_INT 87
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
32059: GO 32292
32061: LD_INT 3
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32291
32069: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32070: LD_ADDR_VAR 0 4
32074: PUSH
32075: LD_INT 46
32077: PUSH
32078: LD_INT 47
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: LD_INT 82
32089: PUSH
32090: LD_INT 83
32092: PUSH
32093: LD_INT 84
32095: PUSH
32096: LD_INT 85
32098: PUSH
32099: LD_INT 86
32101: PUSH
32102: LD_INT 11
32104: PUSH
32105: LD_INT 9
32107: PUSH
32108: LD_INT 20
32110: PUSH
32111: LD_INT 19
32113: PUSH
32114: LD_INT 21
32116: PUSH
32117: LD_INT 24
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_INT 25
32125: PUSH
32126: LD_INT 28
32128: PUSH
32129: LD_INT 29
32131: PUSH
32132: LD_INT 30
32134: PUSH
32135: LD_INT 31
32137: PUSH
32138: LD_INT 37
32140: PUSH
32141: LD_INT 38
32143: PUSH
32144: LD_INT 32
32146: PUSH
32147: LD_INT 27
32149: PUSH
32150: LD_INT 33
32152: PUSH
32153: LD_INT 69
32155: PUSH
32156: LD_INT 39
32158: PUSH
32159: LD_INT 34
32161: PUSH
32162: LD_INT 40
32164: PUSH
32165: LD_INT 71
32167: PUSH
32168: LD_INT 23
32170: PUSH
32171: LD_INT 44
32173: PUSH
32174: LD_INT 48
32176: PUSH
32177: LD_INT 49
32179: PUSH
32180: LD_INT 50
32182: PUSH
32183: LD_INT 51
32185: PUSH
32186: LD_INT 52
32188: PUSH
32189: LD_INT 53
32191: PUSH
32192: LD_INT 54
32194: PUSH
32195: LD_INT 55
32197: PUSH
32198: LD_INT 56
32200: PUSH
32201: LD_INT 57
32203: PUSH
32204: LD_INT 58
32206: PUSH
32207: LD_INT 59
32209: PUSH
32210: LD_INT 63
32212: PUSH
32213: LD_INT 64
32215: PUSH
32216: LD_INT 65
32218: PUSH
32219: LD_INT 82
32221: PUSH
32222: LD_INT 83
32224: PUSH
32225: LD_INT 84
32227: PUSH
32228: LD_INT 85
32230: PUSH
32231: LD_INT 86
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: ST_TO_ADDR
32289: GO 32292
32291: POP
// if state > - 1 and state < 3 then
32292: LD_VAR 0 3
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: GREATER
32301: PUSH
32302: LD_VAR 0 3
32306: PUSH
32307: LD_INT 3
32309: LESS
32310: AND
32311: IFFALSE 32368
// for i in result do
32313: LD_ADDR_VAR 0 5
32317: PUSH
32318: LD_VAR 0 4
32322: PUSH
32323: FOR_IN
32324: IFFALSE 32366
// if GetTech ( i , side ) <> state then
32326: LD_VAR 0 5
32330: PPUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 321
32340: PUSH
32341: LD_VAR 0 3
32345: NONEQUAL
32346: IFFALSE 32364
// result := result diff i ;
32348: LD_ADDR_VAR 0 4
32352: PUSH
32353: LD_VAR 0 4
32357: PUSH
32358: LD_VAR 0 5
32362: DIFF
32363: ST_TO_ADDR
32364: GO 32323
32366: POP
32367: POP
// end ;
32368: LD_VAR 0 4
32372: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32373: LD_INT 0
32375: PPUSH
32376: PPUSH
32377: PPUSH
// result := true ;
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: LD_INT 1
32385: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: LD_VAR 0 2
32395: PPUSH
32396: CALL_OW 480
32400: ST_TO_ADDR
// if not tmp then
32401: LD_VAR 0 5
32405: NOT
32406: IFFALSE 32410
// exit ;
32408: GO 32459
// for i in tmp do
32410: LD_ADDR_VAR 0 4
32414: PUSH
32415: LD_VAR 0 5
32419: PUSH
32420: FOR_IN
32421: IFFALSE 32457
// if GetTech ( i , side ) <> state_researched then
32423: LD_VAR 0 4
32427: PPUSH
32428: LD_VAR 0 1
32432: PPUSH
32433: CALL_OW 321
32437: PUSH
32438: LD_INT 2
32440: NONEQUAL
32441: IFFALSE 32455
// begin result := false ;
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_INT 0
32450: ST_TO_ADDR
// exit ;
32451: POP
32452: POP
32453: GO 32459
// end ;
32455: GO 32420
32457: POP
32458: POP
// end ;
32459: LD_VAR 0 3
32463: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32464: LD_INT 0
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32479: LD_VAR 0 1
32483: NOT
32484: PUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: CALL_OW 257
32494: PUSH
32495: LD_INT 9
32497: NONEQUAL
32498: OR
32499: IFFALSE 32503
// exit ;
32501: GO 33076
// side := GetSide ( unit ) ;
32503: LD_ADDR_VAR 0 9
32507: PUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 255
32517: ST_TO_ADDR
// tech_space := tech_spacanom ;
32518: LD_ADDR_VAR 0 12
32522: PUSH
32523: LD_INT 29
32525: ST_TO_ADDR
// tech_time := tech_taurad ;
32526: LD_ADDR_VAR 0 13
32530: PUSH
32531: LD_INT 28
32533: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32534: LD_ADDR_VAR 0 11
32538: PUSH
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 310
32548: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32549: LD_VAR 0 11
32553: PPUSH
32554: CALL_OW 247
32558: PUSH
32559: LD_INT 2
32561: EQUAL
32562: IFFALSE 32566
// exit ;
32564: GO 33076
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32566: LD_ADDR_VAR 0 8
32570: PUSH
32571: LD_INT 81
32573: PUSH
32574: LD_VAR 0 9
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: LD_INT 21
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PPUSH
32604: CALL_OW 69
32608: ST_TO_ADDR
// if not tmp then
32609: LD_VAR 0 8
32613: NOT
32614: IFFALSE 32618
// exit ;
32616: GO 33076
// if in_unit then
32618: LD_VAR 0 11
32622: IFFALSE 32646
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32624: LD_ADDR_VAR 0 10
32628: PUSH
32629: LD_VAR 0 8
32633: PPUSH
32634: LD_VAR 0 11
32638: PPUSH
32639: CALL_OW 74
32643: ST_TO_ADDR
32644: GO 32666
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32646: LD_ADDR_VAR 0 10
32650: PUSH
32651: LD_VAR 0 8
32655: PPUSH
32656: LD_VAR 0 1
32660: PPUSH
32661: CALL_OW 74
32665: ST_TO_ADDR
// if not enemy then
32666: LD_VAR 0 10
32670: NOT
32671: IFFALSE 32675
// exit ;
32673: GO 33076
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32675: LD_VAR 0 11
32679: PUSH
32680: LD_VAR 0 11
32684: PPUSH
32685: LD_VAR 0 10
32689: PPUSH
32690: CALL_OW 296
32694: PUSH
32695: LD_INT 13
32697: GREATER
32698: AND
32699: PUSH
32700: LD_VAR 0 1
32704: PPUSH
32705: LD_VAR 0 10
32709: PPUSH
32710: CALL_OW 296
32714: PUSH
32715: LD_INT 12
32717: GREATER
32718: OR
32719: IFFALSE 32723
// exit ;
32721: GO 33076
// missile := [ 1 ] ;
32723: LD_ADDR_VAR 0 14
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32734: LD_VAR 0 9
32738: PPUSH
32739: LD_VAR 0 12
32743: PPUSH
32744: CALL_OW 325
32748: IFFALSE 32777
// missile := Insert ( missile , missile + 1 , 2 ) ;
32750: LD_ADDR_VAR 0 14
32754: PUSH
32755: LD_VAR 0 14
32759: PPUSH
32760: LD_VAR 0 14
32764: PUSH
32765: LD_INT 1
32767: PLUS
32768: PPUSH
32769: LD_INT 2
32771: PPUSH
32772: CALL_OW 2
32776: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32777: LD_VAR 0 9
32781: PPUSH
32782: LD_VAR 0 13
32786: PPUSH
32787: CALL_OW 325
32791: PUSH
32792: LD_VAR 0 10
32796: PPUSH
32797: CALL_OW 255
32801: PPUSH
32802: LD_VAR 0 13
32806: PPUSH
32807: CALL_OW 325
32811: NOT
32812: AND
32813: IFFALSE 32842
// missile := Insert ( missile , missile + 1 , 3 ) ;
32815: LD_ADDR_VAR 0 14
32819: PUSH
32820: LD_VAR 0 14
32824: PPUSH
32825: LD_VAR 0 14
32829: PUSH
32830: LD_INT 1
32832: PLUS
32833: PPUSH
32834: LD_INT 3
32836: PPUSH
32837: CALL_OW 2
32841: ST_TO_ADDR
// if missile < 2 then
32842: LD_VAR 0 14
32846: PUSH
32847: LD_INT 2
32849: LESS
32850: IFFALSE 32854
// exit ;
32852: GO 33076
// x := GetX ( enemy ) ;
32854: LD_ADDR_VAR 0 4
32858: PUSH
32859: LD_VAR 0 10
32863: PPUSH
32864: CALL_OW 250
32868: ST_TO_ADDR
// y := GetY ( enemy ) ;
32869: LD_ADDR_VAR 0 5
32873: PUSH
32874: LD_VAR 0 10
32878: PPUSH
32879: CALL_OW 251
32883: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32884: LD_ADDR_VAR 0 6
32888: PUSH
32889: LD_VAR 0 4
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PPUSH
32898: LD_INT 1
32900: PPUSH
32901: CALL_OW 12
32905: PLUS
32906: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32907: LD_ADDR_VAR 0 7
32911: PUSH
32912: LD_VAR 0 5
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PPUSH
32921: LD_INT 1
32923: PPUSH
32924: CALL_OW 12
32928: PLUS
32929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32930: LD_VAR 0 6
32934: PPUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: CALL_OW 488
32944: NOT
32945: IFFALSE 32967
// begin _x := x ;
32947: LD_ADDR_VAR 0 6
32951: PUSH
32952: LD_VAR 0 4
32956: ST_TO_ADDR
// _y := y ;
32957: LD_ADDR_VAR 0 7
32961: PUSH
32962: LD_VAR 0 5
32966: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 1
32974: PPUSH
32975: LD_VAR 0 14
32979: PPUSH
32980: CALL_OW 12
32984: ST_TO_ADDR
// case i of 1 :
32985: LD_VAR 0 3
32989: PUSH
32990: LD_INT 1
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33015
32998: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32999: LD_VAR 0 1
33003: PPUSH
33004: LD_VAR 0 10
33008: PPUSH
33009: CALL_OW 115
33013: GO 33076
33015: LD_INT 2
33017: DOUBLE
33018: EQUAL
33019: IFTRUE 33023
33021: GO 33045
33023: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33024: LD_VAR 0 1
33028: PPUSH
33029: LD_VAR 0 6
33033: PPUSH
33034: LD_VAR 0 7
33038: PPUSH
33039: CALL_OW 153
33043: GO 33076
33045: LD_INT 3
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33053
33051: GO 33075
33053: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33054: LD_VAR 0 1
33058: PPUSH
33059: LD_VAR 0 6
33063: PPUSH
33064: LD_VAR 0 7
33068: PPUSH
33069: CALL_OW 154
33073: GO 33076
33075: POP
// end ;
33076: LD_VAR 0 2
33080: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
// if not unit or not building then
33089: LD_VAR 0 1
33093: NOT
33094: PUSH
33095: LD_VAR 0 2
33099: NOT
33100: OR
33101: IFFALSE 33105
// exit ;
33103: GO 33263
// x := GetX ( building ) ;
33105: LD_ADDR_VAR 0 5
33109: PUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: CALL_OW 250
33119: ST_TO_ADDR
// y := GetY ( building ) ;
33120: LD_ADDR_VAR 0 6
33124: PUSH
33125: LD_VAR 0 2
33129: PPUSH
33130: CALL_OW 251
33134: ST_TO_ADDR
// for i = 0 to 5 do
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: DOUBLE
33141: LD_INT 0
33143: DEC
33144: ST_TO_ADDR
33145: LD_INT 5
33147: PUSH
33148: FOR_TO
33149: IFFALSE 33261
// begin _x := ShiftX ( x , i , 3 ) ;
33151: LD_ADDR_VAR 0 7
33155: PUSH
33156: LD_VAR 0 5
33160: PPUSH
33161: LD_VAR 0 4
33165: PPUSH
33166: LD_INT 3
33168: PPUSH
33169: CALL_OW 272
33173: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33174: LD_ADDR_VAR 0 8
33178: PUSH
33179: LD_VAR 0 6
33183: PPUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: LD_INT 3
33191: PPUSH
33192: CALL_OW 273
33196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33197: LD_VAR 0 7
33201: PPUSH
33202: LD_VAR 0 8
33206: PPUSH
33207: CALL_OW 488
33211: NOT
33212: IFFALSE 33216
// continue ;
33214: GO 33148
// if HexInfo ( _x , _y ) = 0 then
33216: LD_VAR 0 7
33220: PPUSH
33221: LD_VAR 0 8
33225: PPUSH
33226: CALL_OW 428
33230: PUSH
33231: LD_INT 0
33233: EQUAL
33234: IFFALSE 33259
// begin ComMoveXY ( unit , _x , _y ) ;
33236: LD_VAR 0 1
33240: PPUSH
33241: LD_VAR 0 7
33245: PPUSH
33246: LD_VAR 0 8
33250: PPUSH
33251: CALL_OW 111
// exit ;
33255: POP
33256: POP
33257: GO 33263
// end ; end ;
33259: GO 33148
33261: POP
33262: POP
// end ;
33263: LD_VAR 0 3
33267: RET
// export function ScanBase ( side , base_area ) ; begin
33268: LD_INT 0
33270: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_VAR 0 2
33280: PPUSH
33281: LD_INT 81
33283: PUSH
33284: LD_VAR 0 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PPUSH
33293: CALL_OW 70
33297: ST_TO_ADDR
// end ;
33298: LD_VAR 0 3
33302: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33303: LD_INT 0
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
// result := false ;
33309: LD_ADDR_VAR 0 2
33313: PUSH
33314: LD_INT 0
33316: ST_TO_ADDR
// side := GetSide ( unit ) ;
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 255
33331: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33332: LD_ADDR_VAR 0 4
33336: PUSH
33337: LD_VAR 0 1
33341: PPUSH
33342: CALL_OW 248
33346: ST_TO_ADDR
// case nat of 1 :
33347: LD_VAR 0 4
33351: PUSH
33352: LD_INT 1
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// tech := tech_lassight ; 2 :
33361: LD_ADDR_VAR 0 5
33365: PUSH
33366: LD_INT 12
33368: ST_TO_ADDR
33369: GO 33410
33371: LD_INT 2
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 33390
33379: POP
// tech := tech_mortar ; 3 :
33380: LD_ADDR_VAR 0 5
33384: PUSH
33385: LD_INT 41
33387: ST_TO_ADDR
33388: GO 33410
33390: LD_INT 3
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// tech := tech_bazooka ; end ;
33399: LD_ADDR_VAR 0 5
33403: PUSH
33404: LD_INT 44
33406: ST_TO_ADDR
33407: GO 33410
33409: POP
// if Researched ( side , tech ) then
33410: LD_VAR 0 3
33414: PPUSH
33415: LD_VAR 0 5
33419: PPUSH
33420: CALL_OW 325
33424: IFFALSE 33451
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: LD_INT 8
33436: PUSH
33437: LD_INT 9
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: PUSH
33445: LD_VAR 0 4
33449: ARRAY
33450: ST_TO_ADDR
// end ;
33451: LD_VAR 0 2
33455: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33456: LD_INT 0
33458: PPUSH
33459: PPUSH
33460: PPUSH
// if not mines then
33461: LD_VAR 0 2
33465: NOT
33466: IFFALSE 33470
// exit ;
33468: GO 33614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33470: LD_ADDR_VAR 0 5
33474: PUSH
33475: LD_INT 81
33477: PUSH
33478: LD_VAR 0 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 21
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PPUSH
33508: CALL_OW 69
33512: ST_TO_ADDR
// for i in mines do
33513: LD_ADDR_VAR 0 4
33517: PUSH
33518: LD_VAR 0 2
33522: PUSH
33523: FOR_IN
33524: IFFALSE 33612
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33526: LD_VAR 0 4
33530: PUSH
33531: LD_INT 1
33533: ARRAY
33534: PPUSH
33535: LD_VAR 0 4
33539: PUSH
33540: LD_INT 2
33542: ARRAY
33543: PPUSH
33544: CALL_OW 458
33548: NOT
33549: IFFALSE 33553
// continue ;
33551: GO 33523
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33553: LD_VAR 0 4
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: LD_VAR 0 4
33566: PUSH
33567: LD_INT 2
33569: ARRAY
33570: PPUSH
33571: CALL_OW 428
33575: PUSH
33576: LD_VAR 0 5
33580: IN
33581: IFFALSE 33610
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33583: LD_VAR 0 4
33587: PUSH
33588: LD_INT 1
33590: ARRAY
33591: PPUSH
33592: LD_VAR 0 4
33596: PUSH
33597: LD_INT 2
33599: ARRAY
33600: PPUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 456
// end ;
33610: GO 33523
33612: POP
33613: POP
// end ;
33614: LD_VAR 0 3
33618: RET
// export function Count ( array ) ; var i ; begin
33619: LD_INT 0
33621: PPUSH
33622: PPUSH
// result := 0 ;
33623: LD_ADDR_VAR 0 2
33627: PUSH
33628: LD_INT 0
33630: ST_TO_ADDR
// for i in array do
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_VAR 0 1
33640: PUSH
33641: FOR_IN
33642: IFFALSE 33666
// if i then
33644: LD_VAR 0 3
33648: IFFALSE 33664
// result := result + 1 ;
33650: LD_ADDR_VAR 0 2
33654: PUSH
33655: LD_VAR 0 2
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: ST_TO_ADDR
33664: GO 33641
33666: POP
33667: POP
// end ;
33668: LD_VAR 0 2
33672: RET
// export function IsEmpty ( building ) ; begin
33673: LD_INT 0
33675: PPUSH
// if not building then
33676: LD_VAR 0 1
33680: NOT
33681: IFFALSE 33685
// exit ;
33683: GO 33728
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_VAR 0 1
33694: PUSH
33695: LD_INT 22
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 255
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 58
33714: PUSH
33715: EMPTY
33716: LIST
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PPUSH
33722: CALL_OW 69
33726: IN
33727: ST_TO_ADDR
// end ;
33728: LD_VAR 0 2
33732: RET
// export function IsNotFull ( building ) ; begin
33733: LD_INT 0
33735: PPUSH
// if not building then
33736: LD_VAR 0 1
33740: NOT
33741: IFFALSE 33745
// exit ;
33743: GO 33764
// result := UnitsInside ( building ) < 6 ;
33745: LD_ADDR_VAR 0 2
33749: PUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 313
33759: PUSH
33760: LD_INT 6
33762: LESS
33763: ST_TO_ADDR
// end ;
33764: LD_VAR 0 2
33768: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33769: LD_INT 0
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
// tmp := [ ] ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: EMPTY
33781: ST_TO_ADDR
// list := [ ] ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: EMPTY
33788: ST_TO_ADDR
// for i = 16 to 25 do
33789: LD_ADDR_VAR 0 4
33793: PUSH
33794: DOUBLE
33795: LD_INT 16
33797: DEC
33798: ST_TO_ADDR
33799: LD_INT 25
33801: PUSH
33802: FOR_TO
33803: IFFALSE 33876
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_VAR 0 3
33814: PUSH
33815: LD_INT 22
33817: PUSH
33818: LD_VAR 0 1
33822: PPUSH
33823: CALL_OW 255
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 91
33834: PUSH
33835: LD_VAR 0 1
33839: PUSH
33840: LD_INT 6
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 30
33850: PUSH
33851: LD_VAR 0 4
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: PPUSH
33868: CALL_OW 69
33872: ADD
33873: ST_TO_ADDR
33874: GO 33802
33876: POP
33877: POP
// for i = 1 to tmp do
33878: LD_ADDR_VAR 0 4
33882: PUSH
33883: DOUBLE
33884: LD_INT 1
33886: DEC
33887: ST_TO_ADDR
33888: LD_VAR 0 3
33892: PUSH
33893: FOR_TO
33894: IFFALSE 33982
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33896: LD_ADDR_VAR 0 5
33900: PUSH
33901: LD_VAR 0 5
33905: PUSH
33906: LD_VAR 0 3
33910: PUSH
33911: LD_VAR 0 4
33915: ARRAY
33916: PPUSH
33917: CALL_OW 266
33921: PUSH
33922: LD_VAR 0 3
33926: PUSH
33927: LD_VAR 0 4
33931: ARRAY
33932: PPUSH
33933: CALL_OW 250
33937: PUSH
33938: LD_VAR 0 3
33942: PUSH
33943: LD_VAR 0 4
33947: ARRAY
33948: PPUSH
33949: CALL_OW 251
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: LD_VAR 0 4
33963: ARRAY
33964: PPUSH
33965: CALL_OW 254
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: ADD
33979: ST_TO_ADDR
33980: GO 33893
33982: POP
33983: POP
// result := list ;
33984: LD_ADDR_VAR 0 2
33988: PUSH
33989: LD_VAR 0 5
33993: ST_TO_ADDR
// end ;
33994: LD_VAR 0 2
33998: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33999: LD_INT 0
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
34007: PPUSH
// if not factory then
34008: LD_VAR 0 1
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34610
// if control = control_apeman then
34017: LD_VAR 0 4
34021: PUSH
34022: LD_INT 5
34024: EQUAL
34025: IFFALSE 34134
// begin tmp := UnitsInside ( factory ) ;
34027: LD_ADDR_VAR 0 8
34031: PUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: CALL_OW 313
34041: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34042: LD_VAR 0 8
34046: PPUSH
34047: LD_INT 25
34049: PUSH
34050: LD_INT 12
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PPUSH
34057: CALL_OW 72
34061: NOT
34062: IFFALSE 34072
// control := control_manual ;
34064: LD_ADDR_VAR 0 4
34068: PUSH
34069: LD_INT 1
34071: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34072: LD_ADDR_VAR 0 8
34076: PUSH
34077: LD_VAR 0 1
34081: PPUSH
34082: CALL 33769 0 1
34086: ST_TO_ADDR
// if tmp then
34087: LD_VAR 0 8
34091: IFFALSE 34134
// begin for i in tmp do
34093: LD_ADDR_VAR 0 7
34097: PUSH
34098: LD_VAR 0 8
34102: PUSH
34103: FOR_IN
34104: IFFALSE 34132
// if i [ 1 ] = b_ext_radio then
34106: LD_VAR 0 7
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PUSH
34115: LD_INT 22
34117: EQUAL
34118: IFFALSE 34130
// begin control := control_remote ;
34120: LD_ADDR_VAR 0 4
34124: PUSH
34125: LD_INT 2
34127: ST_TO_ADDR
// break ;
34128: GO 34132
// end ;
34130: GO 34103
34132: POP
34133: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34134: LD_VAR 0 1
34138: PPUSH
34139: LD_VAR 0 2
34143: PPUSH
34144: LD_VAR 0 3
34148: PPUSH
34149: LD_VAR 0 4
34153: PPUSH
34154: LD_VAR 0 5
34158: PPUSH
34159: CALL_OW 448
34163: IFFALSE 34198
// begin result := [ chassis , engine , control , weapon ] ;
34165: LD_ADDR_VAR 0 6
34169: PUSH
34170: LD_VAR 0 2
34174: PUSH
34175: LD_VAR 0 3
34179: PUSH
34180: LD_VAR 0 4
34184: PUSH
34185: LD_VAR 0 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
// exit ;
34196: GO 34610
// end ; _chassis := AvailableChassisList ( factory ) ;
34198: LD_ADDR_VAR 0 9
34202: PUSH
34203: LD_VAR 0 1
34207: PPUSH
34208: CALL_OW 475
34212: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34213: LD_ADDR_VAR 0 11
34217: PUSH
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 476
34227: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34228: LD_ADDR_VAR 0 12
34232: PUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL_OW 477
34242: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 1
34252: PPUSH
34253: CALL_OW 478
34257: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34258: LD_VAR 0 9
34262: NOT
34263: PUSH
34264: LD_VAR 0 11
34268: NOT
34269: OR
34270: PUSH
34271: LD_VAR 0 12
34275: NOT
34276: OR
34277: PUSH
34278: LD_VAR 0 10
34282: NOT
34283: OR
34284: IFFALSE 34319
// begin result := [ chassis , engine , control , weapon ] ;
34286: LD_ADDR_VAR 0 6
34290: PUSH
34291: LD_VAR 0 2
34295: PUSH
34296: LD_VAR 0 3
34300: PUSH
34301: LD_VAR 0 4
34305: PUSH
34306: LD_VAR 0 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// exit ;
34317: GO 34610
// end ; if not chassis in _chassis then
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 9
34328: IN
34329: NOT
34330: IFFALSE 34356
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34332: LD_ADDR_VAR 0 2
34336: PUSH
34337: LD_VAR 0 9
34341: PUSH
34342: LD_INT 1
34344: PPUSH
34345: LD_VAR 0 9
34349: PPUSH
34350: CALL_OW 12
34354: ARRAY
34355: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34356: LD_VAR 0 2
34360: PPUSH
34361: LD_VAR 0 3
34365: PPUSH
34366: CALL 34615 0 2
34370: NOT
34371: IFFALSE 34430
// repeat engine := _engine [ 1 ] ;
34373: LD_ADDR_VAR 0 3
34377: PUSH
34378: LD_VAR 0 11
34382: PUSH
34383: LD_INT 1
34385: ARRAY
34386: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34387: LD_ADDR_VAR 0 11
34391: PUSH
34392: LD_VAR 0 11
34396: PPUSH
34397: LD_INT 1
34399: PPUSH
34400: CALL_OW 3
34404: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34405: LD_VAR 0 2
34409: PPUSH
34410: LD_VAR 0 3
34414: PPUSH
34415: CALL 34615 0 2
34419: PUSH
34420: LD_VAR 0 11
34424: PUSH
34425: EMPTY
34426: EQUAL
34427: OR
34428: IFFALSE 34373
// if not control in _control then
34430: LD_VAR 0 4
34434: PUSH
34435: LD_VAR 0 12
34439: IN
34440: NOT
34441: IFFALSE 34467
// control := _control [ rand ( 1 , _control ) ] ;
34443: LD_ADDR_VAR 0 4
34447: PUSH
34448: LD_VAR 0 12
34452: PUSH
34453: LD_INT 1
34455: PPUSH
34456: LD_VAR 0 12
34460: PPUSH
34461: CALL_OW 12
34465: ARRAY
34466: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34467: LD_VAR 0 2
34471: PPUSH
34472: LD_VAR 0 5
34476: PPUSH
34477: CALL 34835 0 2
34481: NOT
34482: IFFALSE 34541
// repeat weapon := _weapon [ 1 ] ;
34484: LD_ADDR_VAR 0 5
34488: PUSH
34489: LD_VAR 0 10
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34498: LD_ADDR_VAR 0 10
34502: PUSH
34503: LD_VAR 0 10
34507: PPUSH
34508: LD_INT 1
34510: PPUSH
34511: CALL_OW 3
34515: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34516: LD_VAR 0 2
34520: PPUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: CALL 34835 0 2
34530: PUSH
34531: LD_VAR 0 10
34535: PUSH
34536: EMPTY
34537: EQUAL
34538: OR
34539: IFFALSE 34484
// result := [ ] ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: EMPTY
34547: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34548: LD_VAR 0 1
34552: PPUSH
34553: LD_VAR 0 2
34557: PPUSH
34558: LD_VAR 0 3
34562: PPUSH
34563: LD_VAR 0 4
34567: PPUSH
34568: LD_VAR 0 5
34572: PPUSH
34573: CALL_OW 448
34577: IFFALSE 34610
// result := [ chassis , engine , control , weapon ] ;
34579: LD_ADDR_VAR 0 6
34583: PUSH
34584: LD_VAR 0 2
34588: PUSH
34589: LD_VAR 0 3
34593: PUSH
34594: LD_VAR 0 4
34598: PUSH
34599: LD_VAR 0 5
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
// end ;
34610: LD_VAR 0 6
34614: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34615: LD_INT 0
34617: PPUSH
// if not chassis or not engine then
34618: LD_VAR 0 1
34622: NOT
34623: PUSH
34624: LD_VAR 0 2
34628: NOT
34629: OR
34630: IFFALSE 34634
// exit ;
34632: GO 34830
// case engine of engine_solar :
34634: LD_VAR 0 2
34638: PUSH
34639: LD_INT 2
34641: DOUBLE
34642: EQUAL
34643: IFTRUE 34647
34645: GO 34685
34647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_INT 11
34655: PUSH
34656: LD_INT 12
34658: PUSH
34659: LD_INT 13
34661: PUSH
34662: LD_INT 14
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
34683: GO 34814
34685: LD_INT 1
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34755
34693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 11
34701: PUSH
34702: LD_INT 12
34704: PUSH
34705: LD_INT 13
34707: PUSH
34708: LD_INT 14
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: LD_INT 21
34728: PUSH
34729: LD_INT 23
34731: PUSH
34732: LD_INT 22
34734: PUSH
34735: LD_INT 24
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
34753: GO 34814
34755: LD_INT 3
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34763
34761: GO 34813
34763: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34764: LD_ADDR_VAR 0 3
34768: PUSH
34769: LD_INT 13
34771: PUSH
34772: LD_INT 14
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 5
34786: PUSH
34787: LD_INT 21
34789: PUSH
34790: LD_INT 22
34792: PUSH
34793: LD_INT 23
34795: PUSH
34796: LD_INT 24
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
34811: GO 34814
34813: POP
// result := ( chassis in result ) ;
34814: LD_ADDR_VAR 0 3
34818: PUSH
34819: LD_VAR 0 1
34823: PUSH
34824: LD_VAR 0 3
34828: IN
34829: ST_TO_ADDR
// end ;
34830: LD_VAR 0 3
34834: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34835: LD_INT 0
34837: PPUSH
// if not chassis or not weapon then
34838: LD_VAR 0 1
34842: NOT
34843: PUSH
34844: LD_VAR 0 2
34848: NOT
34849: OR
34850: IFFALSE 34854
// exit ;
34852: GO 35880
// case weapon of us_machine_gun :
34854: LD_VAR 0 2
34858: PUSH
34859: LD_INT 2
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34897
34867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35864
34897: LD_INT 3
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34935
34905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: LD_INT 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
34933: GO 35864
34935: LD_INT 11
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34943
34941: GO 34973
34943: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: LD_INT 5
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: ST_TO_ADDR
34971: GO 35864
34973: LD_INT 4
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 34981
34979: GO 35007
34981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 5
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: ST_TO_ADDR
35005: GO 35864
35007: LD_INT 5
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35041
35015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 4
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 35864
35041: LD_INT 9
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35075
35049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: LD_INT 4
35063: PUSH
35064: LD_INT 5
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
35073: GO 35864
35075: LD_INT 7
35077: DOUBLE
35078: EQUAL
35079: IFTRUE 35083
35081: GO 35109
35083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: LD_INT 4
35097: PUSH
35098: LD_INT 5
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
35107: GO 35864
35109: LD_INT 12
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35143
35117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35118: LD_ADDR_VAR 0 3
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 3
35128: PUSH
35129: LD_INT 4
35131: PUSH
35132: LD_INT 5
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: ST_TO_ADDR
35141: GO 35864
35143: LD_INT 13
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35177
35151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 3
35162: PUSH
35163: LD_INT 4
35165: PUSH
35166: LD_INT 5
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: ST_TO_ADDR
35175: GO 35864
35177: LD_INT 14
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35185
35183: GO 35203
35185: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: LD_INT 4
35193: PUSH
35194: LD_INT 5
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: ST_TO_ADDR
35201: GO 35864
35203: LD_INT 6
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35229
35211: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35212: LD_ADDR_VAR 0 3
35216: PUSH
35217: LD_INT 4
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: ST_TO_ADDR
35227: GO 35864
35229: LD_INT 10
35231: DOUBLE
35232: EQUAL
35233: IFTRUE 35237
35235: GO 35255
35237: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_INT 4
35245: PUSH
35246: LD_INT 5
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: ST_TO_ADDR
35253: GO 35864
35255: LD_INT 22
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35289
35263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35264: LD_ADDR_VAR 0 3
35268: PUSH
35269: LD_INT 11
35271: PUSH
35272: LD_INT 12
35274: PUSH
35275: LD_INT 13
35277: PUSH
35278: LD_INT 14
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 35864
35289: LD_INT 23
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35323
35297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_INT 11
35305: PUSH
35306: LD_INT 12
35308: PUSH
35309: LD_INT 13
35311: PUSH
35312: LD_INT 14
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
35321: GO 35864
35323: LD_INT 24
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35357
35331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 11
35339: PUSH
35340: LD_INT 12
35342: PUSH
35343: LD_INT 13
35345: PUSH
35346: LD_INT 14
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
35355: GO 35864
35357: LD_INT 30
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35391
35365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_INT 11
35373: PUSH
35374: LD_INT 12
35376: PUSH
35377: LD_INT 13
35379: PUSH
35380: LD_INT 14
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
35389: GO 35864
35391: LD_INT 25
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35417
35399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 13
35407: PUSH
35408: LD_INT 14
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: ST_TO_ADDR
35415: GO 35864
35417: LD_INT 27
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35443
35425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_INT 13
35433: PUSH
35434: LD_INT 14
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: ST_TO_ADDR
35441: GO 35864
35443: LD_INT 28
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 35469
35451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35452: LD_ADDR_VAR 0 3
35456: PUSH
35457: LD_INT 13
35459: PUSH
35460: LD_INT 14
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: ST_TO_ADDR
35467: GO 35864
35469: LD_INT 29
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35495
35477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 13
35485: PUSH
35486: LD_INT 14
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: ST_TO_ADDR
35493: GO 35864
35495: LD_INT 31
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35521
35503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35504: LD_ADDR_VAR 0 3
35508: PUSH
35509: LD_INT 13
35511: PUSH
35512: LD_INT 14
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 35864
35521: LD_INT 26
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35547
35529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 13
35537: PUSH
35538: LD_INT 14
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: ST_TO_ADDR
35545: GO 35864
35547: LD_INT 42
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35581
35555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_INT 21
35563: PUSH
35564: LD_INT 22
35566: PUSH
35567: LD_INT 23
35569: PUSH
35570: LD_INT 24
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: ST_TO_ADDR
35579: GO 35864
35581: LD_INT 43
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35589
35587: GO 35615
35589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35590: LD_ADDR_VAR 0 3
35594: PUSH
35595: LD_INT 21
35597: PUSH
35598: LD_INT 22
35600: PUSH
35601: LD_INT 23
35603: PUSH
35604: LD_INT 24
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
35613: GO 35864
35615: LD_INT 44
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35623
35621: GO 35649
35623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35624: LD_ADDR_VAR 0 3
35628: PUSH
35629: LD_INT 21
35631: PUSH
35632: LD_INT 22
35634: PUSH
35635: LD_INT 23
35637: PUSH
35638: LD_INT 24
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
35647: GO 35864
35649: LD_INT 45
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35657
35655: GO 35683
35657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35658: LD_ADDR_VAR 0 3
35662: PUSH
35663: LD_INT 21
35665: PUSH
35666: LD_INT 22
35668: PUSH
35669: LD_INT 23
35671: PUSH
35672: LD_INT 24
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
35681: GO 35864
35683: LD_INT 49
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35717
35691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_INT 21
35699: PUSH
35700: LD_INT 22
35702: PUSH
35703: LD_INT 23
35705: PUSH
35706: LD_INT 24
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
35715: GO 35864
35717: LD_INT 51
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35725
35723: GO 35751
35725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_INT 21
35733: PUSH
35734: LD_INT 22
35736: PUSH
35737: LD_INT 23
35739: PUSH
35740: LD_INT 24
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: ST_TO_ADDR
35749: GO 35864
35751: LD_INT 52
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35785
35759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_INT 21
35767: PUSH
35768: LD_INT 22
35770: PUSH
35771: LD_INT 23
35773: PUSH
35774: LD_INT 24
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: ST_TO_ADDR
35783: GO 35864
35785: LD_INT 53
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35793
35791: GO 35811
35793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_INT 23
35801: PUSH
35802: LD_INT 24
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: ST_TO_ADDR
35809: GO 35864
35811: LD_INT 46
35813: DOUBLE
35814: EQUAL
35815: IFTRUE 35819
35817: GO 35837
35819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_INT 23
35827: PUSH
35828: LD_INT 24
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: ST_TO_ADDR
35835: GO 35864
35837: LD_INT 47
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35845
35843: GO 35863
35845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35846: LD_ADDR_VAR 0 3
35850: PUSH
35851: LD_INT 23
35853: PUSH
35854: LD_INT 24
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: ST_TO_ADDR
35861: GO 35864
35863: POP
// result := ( chassis in result ) ;
35864: LD_ADDR_VAR 0 3
35868: PUSH
35869: LD_VAR 0 1
35873: PUSH
35874: LD_VAR 0 3
35878: IN
35879: ST_TO_ADDR
// end ;
35880: LD_VAR 0 3
35884: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35885: LD_INT 0
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
// result := array ;
35894: LD_ADDR_VAR 0 5
35898: PUSH
35899: LD_VAR 0 1
35903: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35904: LD_VAR 0 1
35908: NOT
35909: PUSH
35910: LD_VAR 0 2
35914: NOT
35915: OR
35916: PUSH
35917: LD_VAR 0 3
35921: NOT
35922: OR
35923: PUSH
35924: LD_VAR 0 2
35928: PUSH
35929: LD_VAR 0 1
35933: GREATER
35934: OR
35935: PUSH
35936: LD_VAR 0 3
35940: PUSH
35941: LD_VAR 0 1
35945: GREATER
35946: OR
35947: IFFALSE 35951
// exit ;
35949: GO 36247
// if direction then
35951: LD_VAR 0 4
35955: IFFALSE 36019
// begin d := 1 ;
35957: LD_ADDR_VAR 0 9
35961: PUSH
35962: LD_INT 1
35964: ST_TO_ADDR
// if i_from > i_to then
35965: LD_VAR 0 2
35969: PUSH
35970: LD_VAR 0 3
35974: GREATER
35975: IFFALSE 36001
// length := ( array - i_from ) + i_to else
35977: LD_ADDR_VAR 0 11
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_VAR 0 2
35991: MINUS
35992: PUSH
35993: LD_VAR 0 3
35997: PLUS
35998: ST_TO_ADDR
35999: GO 36017
// length := i_to - i_from ;
36001: LD_ADDR_VAR 0 11
36005: PUSH
36006: LD_VAR 0 3
36010: PUSH
36011: LD_VAR 0 2
36015: MINUS
36016: ST_TO_ADDR
// end else
36017: GO 36080
// begin d := - 1 ;
36019: LD_ADDR_VAR 0 9
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: ST_TO_ADDR
// if i_from > i_to then
36028: LD_VAR 0 2
36032: PUSH
36033: LD_VAR 0 3
36037: GREATER
36038: IFFALSE 36058
// length := i_from - i_to else
36040: LD_ADDR_VAR 0 11
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_VAR 0 3
36054: MINUS
36055: ST_TO_ADDR
36056: GO 36080
// length := ( array - i_to ) + i_from ;
36058: LD_ADDR_VAR 0 11
36062: PUSH
36063: LD_VAR 0 1
36067: PUSH
36068: LD_VAR 0 3
36072: MINUS
36073: PUSH
36074: LD_VAR 0 2
36078: PLUS
36079: ST_TO_ADDR
// end ; if not length then
36080: LD_VAR 0 11
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 36247
// tmp := array ;
36089: LD_ADDR_VAR 0 10
36093: PUSH
36094: LD_VAR 0 1
36098: ST_TO_ADDR
// for i = 1 to length do
36099: LD_ADDR_VAR 0 6
36103: PUSH
36104: DOUBLE
36105: LD_INT 1
36107: DEC
36108: ST_TO_ADDR
36109: LD_VAR 0 11
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36235
// begin for j = 1 to array do
36117: LD_ADDR_VAR 0 7
36121: PUSH
36122: DOUBLE
36123: LD_INT 1
36125: DEC
36126: ST_TO_ADDR
36127: LD_VAR 0 1
36131: PUSH
36132: FOR_TO
36133: IFFALSE 36221
// begin k := j + d ;
36135: LD_ADDR_VAR 0 8
36139: PUSH
36140: LD_VAR 0 7
36144: PUSH
36145: LD_VAR 0 9
36149: PLUS
36150: ST_TO_ADDR
// if k > array then
36151: LD_VAR 0 8
36155: PUSH
36156: LD_VAR 0 1
36160: GREATER
36161: IFFALSE 36171
// k := 1 ;
36163: LD_ADDR_VAR 0 8
36167: PUSH
36168: LD_INT 1
36170: ST_TO_ADDR
// if not k then
36171: LD_VAR 0 8
36175: NOT
36176: IFFALSE 36188
// k := array ;
36178: LD_ADDR_VAR 0 8
36182: PUSH
36183: LD_VAR 0 1
36187: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36188: LD_ADDR_VAR 0 10
36192: PUSH
36193: LD_VAR 0 10
36197: PPUSH
36198: LD_VAR 0 8
36202: PPUSH
36203: LD_VAR 0 1
36207: PUSH
36208: LD_VAR 0 7
36212: ARRAY
36213: PPUSH
36214: CALL_OW 1
36218: ST_TO_ADDR
// end ;
36219: GO 36132
36221: POP
36222: POP
// array := tmp ;
36223: LD_ADDR_VAR 0 1
36227: PUSH
36228: LD_VAR 0 10
36232: ST_TO_ADDR
// end ;
36233: GO 36114
36235: POP
36236: POP
// result := array ;
36237: LD_ADDR_VAR 0 5
36241: PUSH
36242: LD_VAR 0 1
36246: ST_TO_ADDR
// end ;
36247: LD_VAR 0 5
36251: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36252: LD_INT 0
36254: PPUSH
36255: PPUSH
// result := 0 ;
36256: LD_ADDR_VAR 0 3
36260: PUSH
36261: LD_INT 0
36263: ST_TO_ADDR
// if not array or not value in array then
36264: LD_VAR 0 1
36268: NOT
36269: PUSH
36270: LD_VAR 0 2
36274: PUSH
36275: LD_VAR 0 1
36279: IN
36280: NOT
36281: OR
36282: IFFALSE 36286
// exit ;
36284: GO 36340
// for i = 1 to array do
36286: LD_ADDR_VAR 0 4
36290: PUSH
36291: DOUBLE
36292: LD_INT 1
36294: DEC
36295: ST_TO_ADDR
36296: LD_VAR 0 1
36300: PUSH
36301: FOR_TO
36302: IFFALSE 36338
// if value = array [ i ] then
36304: LD_VAR 0 2
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: LD_VAR 0 4
36318: ARRAY
36319: EQUAL
36320: IFFALSE 36336
// begin result := i ;
36322: LD_ADDR_VAR 0 3
36326: PUSH
36327: LD_VAR 0 4
36331: ST_TO_ADDR
// exit ;
36332: POP
36333: POP
36334: GO 36340
// end ;
36336: GO 36301
36338: POP
36339: POP
// end ;
36340: LD_VAR 0 3
36344: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36345: LD_INT 0
36347: PPUSH
// vc_chassis := chassis ;
36348: LD_ADDR_OWVAR 37
36352: PUSH
36353: LD_VAR 0 1
36357: ST_TO_ADDR
// vc_engine := engine ;
36358: LD_ADDR_OWVAR 39
36362: PUSH
36363: LD_VAR 0 2
36367: ST_TO_ADDR
// vc_control := control ;
36368: LD_ADDR_OWVAR 38
36372: PUSH
36373: LD_VAR 0 3
36377: ST_TO_ADDR
// vc_weapon := weapon ;
36378: LD_ADDR_OWVAR 40
36382: PUSH
36383: LD_VAR 0 4
36387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36388: LD_ADDR_OWVAR 41
36392: PUSH
36393: LD_VAR 0 5
36397: ST_TO_ADDR
// end ;
36398: LD_VAR 0 6
36402: RET
// export function WantPlant ( unit ) ; var task ; begin
36403: LD_INT 0
36405: PPUSH
36406: PPUSH
// result := false ;
36407: LD_ADDR_VAR 0 2
36411: PUSH
36412: LD_INT 0
36414: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36415: LD_ADDR_VAR 0 3
36419: PUSH
36420: LD_VAR 0 1
36424: PPUSH
36425: CALL_OW 437
36429: ST_TO_ADDR
// if task then
36430: LD_VAR 0 3
36434: IFFALSE 36462
// if task [ 1 ] [ 1 ] = p then
36436: LD_VAR 0 3
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: PUSH
36445: LD_INT 1
36447: ARRAY
36448: PUSH
36449: LD_STRING p
36451: EQUAL
36452: IFFALSE 36462
// result := true ;
36454: LD_ADDR_VAR 0 2
36458: PUSH
36459: LD_INT 1
36461: ST_TO_ADDR
// end ;
36462: LD_VAR 0 2
36466: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36467: LD_INT 0
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
// if pos < 1 then
36473: LD_VAR 0 2
36477: PUSH
36478: LD_INT 1
36480: LESS
36481: IFFALSE 36485
// exit ;
36483: GO 36788
// if pos = 1 then
36485: LD_VAR 0 2
36489: PUSH
36490: LD_INT 1
36492: EQUAL
36493: IFFALSE 36526
// result := Replace ( arr , pos [ 1 ] , value ) else
36495: LD_ADDR_VAR 0 4
36499: PUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_VAR 0 2
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PPUSH
36514: LD_VAR 0 3
36518: PPUSH
36519: CALL_OW 1
36523: ST_TO_ADDR
36524: GO 36788
// begin tmp := arr ;
36526: LD_ADDR_VAR 0 6
36530: PUSH
36531: LD_VAR 0 1
36535: ST_TO_ADDR
// s_arr := [ tmp ] ;
36536: LD_ADDR_VAR 0 7
36540: PUSH
36541: LD_VAR 0 6
36545: PUSH
36546: EMPTY
36547: LIST
36548: ST_TO_ADDR
// for i = 1 to pos - 1 do
36549: LD_ADDR_VAR 0 5
36553: PUSH
36554: DOUBLE
36555: LD_INT 1
36557: DEC
36558: ST_TO_ADDR
36559: LD_VAR 0 2
36563: PUSH
36564: LD_INT 1
36566: MINUS
36567: PUSH
36568: FOR_TO
36569: IFFALSE 36614
// begin tmp := tmp [ pos [ i ] ] ;
36571: LD_ADDR_VAR 0 6
36575: PUSH
36576: LD_VAR 0 6
36580: PUSH
36581: LD_VAR 0 2
36585: PUSH
36586: LD_VAR 0 5
36590: ARRAY
36591: ARRAY
36592: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36593: LD_ADDR_VAR 0 7
36597: PUSH
36598: LD_VAR 0 7
36602: PUSH
36603: LD_VAR 0 6
36607: PUSH
36608: EMPTY
36609: LIST
36610: ADD
36611: ST_TO_ADDR
// end ;
36612: GO 36568
36614: POP
36615: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36616: LD_ADDR_VAR 0 6
36620: PUSH
36621: LD_VAR 0 6
36625: PPUSH
36626: LD_VAR 0 2
36630: PUSH
36631: LD_VAR 0 2
36635: ARRAY
36636: PPUSH
36637: LD_VAR 0 3
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36647: LD_ADDR_VAR 0 7
36651: PUSH
36652: LD_VAR 0 7
36656: PPUSH
36657: LD_VAR 0 7
36661: PPUSH
36662: LD_VAR 0 6
36666: PPUSH
36667: CALL_OW 1
36671: ST_TO_ADDR
// for i = s_arr downto 2 do
36672: LD_ADDR_VAR 0 5
36676: PUSH
36677: DOUBLE
36678: LD_VAR 0 7
36682: INC
36683: ST_TO_ADDR
36684: LD_INT 2
36686: PUSH
36687: FOR_DOWNTO
36688: IFFALSE 36772
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36690: LD_ADDR_VAR 0 6
36694: PUSH
36695: LD_VAR 0 7
36699: PUSH
36700: LD_VAR 0 5
36704: PUSH
36705: LD_INT 1
36707: MINUS
36708: ARRAY
36709: PPUSH
36710: LD_VAR 0 2
36714: PUSH
36715: LD_VAR 0 5
36719: PUSH
36720: LD_INT 1
36722: MINUS
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 7
36729: PUSH
36730: LD_VAR 0 5
36734: ARRAY
36735: PPUSH
36736: CALL_OW 1
36740: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36741: LD_ADDR_VAR 0 7
36745: PUSH
36746: LD_VAR 0 7
36750: PPUSH
36751: LD_VAR 0 5
36755: PUSH
36756: LD_INT 1
36758: MINUS
36759: PPUSH
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 1
36769: ST_TO_ADDR
// end ;
36770: GO 36687
36772: POP
36773: POP
// result := s_arr [ 1 ] ;
36774: LD_ADDR_VAR 0 4
36778: PUSH
36779: LD_VAR 0 7
36783: PUSH
36784: LD_INT 1
36786: ARRAY
36787: ST_TO_ADDR
// end ; end ;
36788: LD_VAR 0 4
36792: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36793: LD_INT 0
36795: PPUSH
36796: PPUSH
// if not list then
36797: LD_VAR 0 1
36801: NOT
36802: IFFALSE 36806
// exit ;
36804: GO 36897
// i := list [ pos1 ] ;
36806: LD_ADDR_VAR 0 5
36810: PUSH
36811: LD_VAR 0 1
36815: PUSH
36816: LD_VAR 0 2
36820: ARRAY
36821: ST_TO_ADDR
// if not i then
36822: LD_VAR 0 5
36826: NOT
36827: IFFALSE 36831
// exit ;
36829: GO 36897
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36831: LD_ADDR_VAR 0 1
36835: PUSH
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_VAR 0 2
36845: PPUSH
36846: LD_VAR 0 1
36850: PUSH
36851: LD_VAR 0 3
36855: ARRAY
36856: PPUSH
36857: CALL_OW 1
36861: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36862: LD_ADDR_VAR 0 1
36866: PUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: LD_VAR 0 3
36876: PPUSH
36877: LD_VAR 0 5
36881: PPUSH
36882: CALL_OW 1
36886: ST_TO_ADDR
// result := list ;
36887: LD_ADDR_VAR 0 4
36891: PUSH
36892: LD_VAR 0 1
36896: ST_TO_ADDR
// end ;
36897: LD_VAR 0 4
36901: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36902: LD_INT 0
36904: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36905: LD_ADDR_VAR 0 5
36909: PUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 250
36919: PPUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 251
36929: PPUSH
36930: LD_VAR 0 2
36934: PPUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: LD_VAR 0 4
36944: PPUSH
36945: CALL 36955 0 5
36949: ST_TO_ADDR
// end ;
36950: LD_VAR 0 5
36954: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
// if not list then
36961: LD_VAR 0 3
36965: NOT
36966: IFFALSE 36970
// exit ;
36968: GO 37358
// result := [ ] ;
36970: LD_ADDR_VAR 0 6
36974: PUSH
36975: EMPTY
36976: ST_TO_ADDR
// for i in list do
36977: LD_ADDR_VAR 0 7
36981: PUSH
36982: LD_VAR 0 3
36986: PUSH
36987: FOR_IN
36988: IFFALSE 37190
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36990: LD_ADDR_VAR 0 9
36994: PUSH
36995: LD_VAR 0 7
36999: PPUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: LD_VAR 0 2
37009: PPUSH
37010: CALL_OW 297
37014: ST_TO_ADDR
// if not result then
37015: LD_VAR 0 6
37019: NOT
37020: IFFALSE 37046
// result := [ [ i , tmp ] ] else
37022: LD_ADDR_VAR 0 6
37026: PUSH
37027: LD_VAR 0 7
37031: PUSH
37032: LD_VAR 0 9
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: ST_TO_ADDR
37044: GO 37188
// begin if result [ result ] [ 2 ] < tmp then
37046: LD_VAR 0 6
37050: PUSH
37051: LD_VAR 0 6
37055: ARRAY
37056: PUSH
37057: LD_INT 2
37059: ARRAY
37060: PUSH
37061: LD_VAR 0 9
37065: LESS
37066: IFFALSE 37108
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37068: LD_ADDR_VAR 0 6
37072: PUSH
37073: LD_VAR 0 6
37077: PPUSH
37078: LD_VAR 0 6
37082: PUSH
37083: LD_INT 1
37085: PLUS
37086: PPUSH
37087: LD_VAR 0 7
37091: PUSH
37092: LD_VAR 0 9
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PPUSH
37101: CALL_OW 2
37105: ST_TO_ADDR
37106: GO 37188
// for j = 1 to result do
37108: LD_ADDR_VAR 0 8
37112: PUSH
37113: DOUBLE
37114: LD_INT 1
37116: DEC
37117: ST_TO_ADDR
37118: LD_VAR 0 6
37122: PUSH
37123: FOR_TO
37124: IFFALSE 37186
// begin if tmp < result [ j ] [ 2 ] then
37126: LD_VAR 0 9
37130: PUSH
37131: LD_VAR 0 6
37135: PUSH
37136: LD_VAR 0 8
37140: ARRAY
37141: PUSH
37142: LD_INT 2
37144: ARRAY
37145: LESS
37146: IFFALSE 37184
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37148: LD_ADDR_VAR 0 6
37152: PUSH
37153: LD_VAR 0 6
37157: PPUSH
37158: LD_VAR 0 8
37162: PPUSH
37163: LD_VAR 0 7
37167: PUSH
37168: LD_VAR 0 9
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PPUSH
37177: CALL_OW 2
37181: ST_TO_ADDR
// break ;
37182: GO 37186
// end ; end ;
37184: GO 37123
37186: POP
37187: POP
// end ; end ;
37188: GO 36987
37190: POP
37191: POP
// if result and not asc then
37192: LD_VAR 0 6
37196: PUSH
37197: LD_VAR 0 4
37201: NOT
37202: AND
37203: IFFALSE 37278
// begin tmp := result ;
37205: LD_ADDR_VAR 0 9
37209: PUSH
37210: LD_VAR 0 6
37214: ST_TO_ADDR
// for i = tmp downto 1 do
37215: LD_ADDR_VAR 0 7
37219: PUSH
37220: DOUBLE
37221: LD_VAR 0 9
37225: INC
37226: ST_TO_ADDR
37227: LD_INT 1
37229: PUSH
37230: FOR_DOWNTO
37231: IFFALSE 37276
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37233: LD_ADDR_VAR 0 6
37237: PUSH
37238: LD_VAR 0 6
37242: PPUSH
37243: LD_VAR 0 9
37247: PUSH
37248: LD_VAR 0 7
37252: MINUS
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: PPUSH
37258: LD_VAR 0 9
37262: PUSH
37263: LD_VAR 0 7
37267: ARRAY
37268: PPUSH
37269: CALL_OW 1
37273: ST_TO_ADDR
37274: GO 37230
37276: POP
37277: POP
// end ; tmp := [ ] ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: EMPTY
37284: ST_TO_ADDR
// if mode then
37285: LD_VAR 0 5
37289: IFFALSE 37358
// begin for i = 1 to result do
37291: LD_ADDR_VAR 0 7
37295: PUSH
37296: DOUBLE
37297: LD_INT 1
37299: DEC
37300: ST_TO_ADDR
37301: LD_VAR 0 6
37305: PUSH
37306: FOR_TO
37307: IFFALSE 37346
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37309: LD_ADDR_VAR 0 9
37313: PUSH
37314: LD_VAR 0 9
37318: PPUSH
37319: LD_VAR 0 7
37323: PPUSH
37324: LD_VAR 0 6
37328: PUSH
37329: LD_VAR 0 7
37333: ARRAY
37334: PUSH
37335: LD_INT 1
37337: ARRAY
37338: PPUSH
37339: CALL_OW 1
37343: ST_TO_ADDR
37344: GO 37306
37346: POP
37347: POP
// result := tmp ;
37348: LD_ADDR_VAR 0 6
37352: PUSH
37353: LD_VAR 0 9
37357: ST_TO_ADDR
// end ; end ;
37358: LD_VAR 0 6
37362: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37363: LD_INT 0
37365: PPUSH
37366: PPUSH
37367: PPUSH
37368: PPUSH
37369: PPUSH
37370: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37371: LD_ADDR_VAR 0 5
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
// if not x or not y then
37393: LD_VAR 0 2
37397: NOT
37398: PUSH
37399: LD_VAR 0 3
37403: NOT
37404: OR
37405: IFFALSE 37409
// exit ;
37407: GO 39055
// if not range then
37409: LD_VAR 0 4
37413: NOT
37414: IFFALSE 37424
// range := 10 ;
37416: LD_ADDR_VAR 0 4
37420: PUSH
37421: LD_INT 10
37423: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37424: LD_ADDR_VAR 0 8
37428: PUSH
37429: LD_INT 81
37431: PUSH
37432: LD_VAR 0 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 92
37443: PUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_VAR 0 3
37453: PUSH
37454: LD_VAR 0 4
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 21
37470: PUSH
37471: LD_INT 3
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 69
37491: ST_TO_ADDR
// if not tmp then
37492: LD_VAR 0 8
37496: NOT
37497: IFFALSE 37501
// exit ;
37499: GO 39055
// for i in tmp do
37501: LD_ADDR_VAR 0 6
37505: PUSH
37506: LD_VAR 0 8
37510: PUSH
37511: FOR_IN
37512: IFFALSE 39030
// begin points := [ 0 , 0 , 0 ] ;
37514: LD_ADDR_VAR 0 9
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// bpoints := 1 ;
37533: LD_ADDR_VAR 0 10
37537: PUSH
37538: LD_INT 1
37540: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37541: LD_VAR 0 6
37545: PPUSH
37546: CALL_OW 247
37550: PUSH
37551: LD_INT 1
37553: DOUBLE
37554: EQUAL
37555: IFTRUE 37559
37557: GO 38137
37559: POP
// begin if GetClass ( i ) = 1 then
37560: LD_VAR 0 6
37564: PPUSH
37565: CALL_OW 257
37569: PUSH
37570: LD_INT 1
37572: EQUAL
37573: IFFALSE 37594
// points := [ 10 , 5 , 3 ] ;
37575: LD_ADDR_VAR 0 9
37579: PUSH
37580: LD_INT 10
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37594: LD_VAR 0 6
37598: PPUSH
37599: CALL_OW 257
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 4
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: IN
37618: IFFALSE 37639
// points := [ 3 , 2 , 1 ] ;
37620: LD_ADDR_VAR 0 9
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37639: LD_VAR 0 6
37643: PPUSH
37644: CALL_OW 257
37648: PUSH
37649: LD_INT 5
37651: EQUAL
37652: IFFALSE 37673
// points := [ 130 , 5 , 2 ] ;
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_INT 130
37661: PUSH
37662: LD_INT 5
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37673: LD_VAR 0 6
37677: PPUSH
37678: CALL_OW 257
37682: PUSH
37683: LD_INT 8
37685: EQUAL
37686: IFFALSE 37707
// points := [ 35 , 35 , 30 ] ;
37688: LD_ADDR_VAR 0 9
37692: PUSH
37693: LD_INT 35
37695: PUSH
37696: LD_INT 35
37698: PUSH
37699: LD_INT 30
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37707: LD_VAR 0 6
37711: PPUSH
37712: CALL_OW 257
37716: PUSH
37717: LD_INT 9
37719: EQUAL
37720: IFFALSE 37741
// points := [ 20 , 55 , 40 ] ;
37722: LD_ADDR_VAR 0 9
37726: PUSH
37727: LD_INT 20
37729: PUSH
37730: LD_INT 55
37732: PUSH
37733: LD_INT 40
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37741: LD_VAR 0 6
37745: PPUSH
37746: CALL_OW 257
37750: PUSH
37751: LD_INT 12
37753: PUSH
37754: LD_INT 16
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: IN
37761: IFFALSE 37782
// points := [ 5 , 3 , 2 ] ;
37763: LD_ADDR_VAR 0 9
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37782: LD_VAR 0 6
37786: PPUSH
37787: CALL_OW 257
37791: PUSH
37792: LD_INT 17
37794: EQUAL
37795: IFFALSE 37816
// points := [ 100 , 50 , 75 ] ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_INT 100
37804: PUSH
37805: LD_INT 50
37807: PUSH
37808: LD_INT 75
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 257
37825: PUSH
37826: LD_INT 15
37828: EQUAL
37829: IFFALSE 37850
// points := [ 10 , 5 , 3 ] ;
37831: LD_ADDR_VAR 0 9
37835: PUSH
37836: LD_INT 10
37838: PUSH
37839: LD_INT 5
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37850: LD_VAR 0 6
37854: PPUSH
37855: CALL_OW 257
37859: PUSH
37860: LD_INT 14
37862: EQUAL
37863: IFFALSE 37884
// points := [ 10 , 0 , 0 ] ;
37865: LD_ADDR_VAR 0 9
37869: PUSH
37870: LD_INT 10
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37884: LD_VAR 0 6
37888: PPUSH
37889: CALL_OW 257
37893: PUSH
37894: LD_INT 11
37896: EQUAL
37897: IFFALSE 37918
// points := [ 30 , 10 , 5 ] ;
37899: LD_ADDR_VAR 0 9
37903: PUSH
37904: LD_INT 30
37906: PUSH
37907: LD_INT 10
37909: PUSH
37910: LD_INT 5
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37918: LD_VAR 0 1
37922: PPUSH
37923: LD_INT 5
37925: PPUSH
37926: CALL_OW 321
37930: PUSH
37931: LD_INT 2
37933: EQUAL
37934: IFFALSE 37951
// bpoints := bpoints * 1.8 ;
37936: LD_ADDR_VAR 0 10
37940: PUSH
37941: LD_VAR 0 10
37945: PUSH
37946: LD_REAL  1.80000000000000E+0000
37949: MUL
37950: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37951: LD_VAR 0 6
37955: PPUSH
37956: CALL_OW 257
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 3
37969: PUSH
37970: LD_INT 4
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: IN
37979: PUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: LD_INT 51
37987: PPUSH
37988: CALL_OW 321
37992: PUSH
37993: LD_INT 2
37995: EQUAL
37996: AND
37997: IFFALSE 38014
// bpoints := bpoints * 1.2 ;
37999: LD_ADDR_VAR 0 10
38003: PUSH
38004: LD_VAR 0 10
38008: PUSH
38009: LD_REAL  1.20000000000000E+0000
38012: MUL
38013: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38014: LD_VAR 0 6
38018: PPUSH
38019: CALL_OW 257
38023: PUSH
38024: LD_INT 5
38026: PUSH
38027: LD_INT 7
38029: PUSH
38030: LD_INT 9
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: IN
38038: PUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: LD_INT 52
38046: PPUSH
38047: CALL_OW 321
38051: PUSH
38052: LD_INT 2
38054: EQUAL
38055: AND
38056: IFFALSE 38073
// bpoints := bpoints * 1.5 ;
38058: LD_ADDR_VAR 0 10
38062: PUSH
38063: LD_VAR 0 10
38067: PUSH
38068: LD_REAL  1.50000000000000E+0000
38071: MUL
38072: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38073: LD_VAR 0 1
38077: PPUSH
38078: LD_INT 66
38080: PPUSH
38081: CALL_OW 321
38085: PUSH
38086: LD_INT 2
38088: EQUAL
38089: IFFALSE 38106
// bpoints := bpoints * 1.1 ;
38091: LD_ADDR_VAR 0 10
38095: PUSH
38096: LD_VAR 0 10
38100: PUSH
38101: LD_REAL  1.10000000000000E+0000
38104: MUL
38105: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38106: LD_ADDR_VAR 0 10
38110: PUSH
38111: LD_VAR 0 10
38115: PUSH
38116: LD_VAR 0 6
38120: PPUSH
38121: LD_INT 1
38123: PPUSH
38124: CALL_OW 259
38128: PUSH
38129: LD_REAL  1.15000000000000E+0000
38132: MUL
38133: MUL
38134: ST_TO_ADDR
// end ; unit_vehicle :
38135: GO 38959
38137: LD_INT 2
38139: DOUBLE
38140: EQUAL
38141: IFTRUE 38145
38143: GO 38947
38145: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38146: LD_VAR 0 6
38150: PPUSH
38151: CALL_OW 264
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 42
38161: PUSH
38162: LD_INT 24
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: IN
38170: IFFALSE 38191
// points := [ 25 , 5 , 3 ] ;
38172: LD_ADDR_VAR 0 9
38176: PUSH
38177: LD_INT 25
38179: PUSH
38180: LD_INT 5
38182: PUSH
38183: LD_INT 3
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38191: LD_VAR 0 6
38195: PPUSH
38196: CALL_OW 264
38200: PUSH
38201: LD_INT 4
38203: PUSH
38204: LD_INT 43
38206: PUSH
38207: LD_INT 25
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: IN
38215: IFFALSE 38236
// points := [ 40 , 15 , 5 ] ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 40
38224: PUSH
38225: LD_INT 15
38227: PUSH
38228: LD_INT 5
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 264
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: LD_INT 23
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: IN
38256: IFFALSE 38277
// points := [ 7 , 25 , 8 ] ;
38258: LD_ADDR_VAR 0 9
38262: PUSH
38263: LD_INT 7
38265: PUSH
38266: LD_INT 25
38268: PUSH
38269: LD_INT 8
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38277: LD_VAR 0 6
38281: PPUSH
38282: CALL_OW 264
38286: PUSH
38287: LD_INT 5
38289: PUSH
38290: LD_INT 27
38292: PUSH
38293: LD_INT 44
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: IN
38301: IFFALSE 38322
// points := [ 14 , 50 , 16 ] ;
38303: LD_ADDR_VAR 0 9
38307: PUSH
38308: LD_INT 14
38310: PUSH
38311: LD_INT 50
38313: PUSH
38314: LD_INT 16
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38322: LD_VAR 0 6
38326: PPUSH
38327: CALL_OW 264
38331: PUSH
38332: LD_INT 6
38334: PUSH
38335: LD_INT 46
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: IN
38342: IFFALSE 38363
// points := [ 32 , 120 , 70 ] ;
38344: LD_ADDR_VAR 0 9
38348: PUSH
38349: LD_INT 32
38351: PUSH
38352: LD_INT 120
38354: PUSH
38355: LD_INT 70
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38363: LD_VAR 0 6
38367: PPUSH
38368: CALL_OW 264
38372: PUSH
38373: LD_INT 7
38375: PUSH
38376: LD_INT 28
38378: PUSH
38379: LD_INT 45
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: IN
38387: IFFALSE 38408
// points := [ 35 , 20 , 45 ] ;
38389: LD_ADDR_VAR 0 9
38393: PUSH
38394: LD_INT 35
38396: PUSH
38397: LD_INT 20
38399: PUSH
38400: LD_INT 45
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38408: LD_VAR 0 6
38412: PPUSH
38413: CALL_OW 264
38417: PUSH
38418: LD_INT 47
38420: PUSH
38421: EMPTY
38422: LIST
38423: IN
38424: IFFALSE 38445
// points := [ 67 , 45 , 75 ] ;
38426: LD_ADDR_VAR 0 9
38430: PUSH
38431: LD_INT 67
38433: PUSH
38434: LD_INT 45
38436: PUSH
38437: LD_INT 75
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38445: LD_VAR 0 6
38449: PPUSH
38450: CALL_OW 264
38454: PUSH
38455: LD_INT 26
38457: PUSH
38458: EMPTY
38459: LIST
38460: IN
38461: IFFALSE 38482
// points := [ 120 , 30 , 80 ] ;
38463: LD_ADDR_VAR 0 9
38467: PUSH
38468: LD_INT 120
38470: PUSH
38471: LD_INT 30
38473: PUSH
38474: LD_INT 80
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38482: LD_VAR 0 6
38486: PPUSH
38487: CALL_OW 264
38491: PUSH
38492: LD_INT 22
38494: PUSH
38495: EMPTY
38496: LIST
38497: IN
38498: IFFALSE 38519
// points := [ 40 , 1 , 1 ] ;
38500: LD_ADDR_VAR 0 9
38504: PUSH
38505: LD_INT 40
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38519: LD_VAR 0 6
38523: PPUSH
38524: CALL_OW 264
38528: PUSH
38529: LD_INT 29
38531: PUSH
38532: EMPTY
38533: LIST
38534: IN
38535: IFFALSE 38556
// points := [ 70 , 200 , 400 ] ;
38537: LD_ADDR_VAR 0 9
38541: PUSH
38542: LD_INT 70
38544: PUSH
38545: LD_INT 200
38547: PUSH
38548: LD_INT 400
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38556: LD_VAR 0 6
38560: PPUSH
38561: CALL_OW 264
38565: PUSH
38566: LD_INT 14
38568: PUSH
38569: LD_INT 53
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: IN
38576: IFFALSE 38597
// points := [ 40 , 10 , 20 ] ;
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: LD_INT 40
38585: PUSH
38586: LD_INT 10
38588: PUSH
38589: LD_INT 20
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38597: LD_VAR 0 6
38601: PPUSH
38602: CALL_OW 264
38606: PUSH
38607: LD_INT 9
38609: PUSH
38610: EMPTY
38611: LIST
38612: IN
38613: IFFALSE 38634
// points := [ 5 , 70 , 20 ] ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 5
38622: PUSH
38623: LD_INT 70
38625: PUSH
38626: LD_INT 20
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 264
38643: PUSH
38644: LD_INT 10
38646: PUSH
38647: EMPTY
38648: LIST
38649: IN
38650: IFFALSE 38671
// points := [ 35 , 110 , 70 ] ;
38652: LD_ADDR_VAR 0 9
38656: PUSH
38657: LD_INT 35
38659: PUSH
38660: LD_INT 110
38662: PUSH
38663: LD_INT 70
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 265
38680: PUSH
38681: LD_INT 25
38683: EQUAL
38684: IFFALSE 38705
// points := [ 80 , 65 , 100 ] ;
38686: LD_ADDR_VAR 0 9
38690: PUSH
38691: LD_INT 80
38693: PUSH
38694: LD_INT 65
38696: PUSH
38697: LD_INT 100
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38705: LD_VAR 0 6
38709: PPUSH
38710: CALL_OW 263
38714: PUSH
38715: LD_INT 1
38717: EQUAL
38718: IFFALSE 38753
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38720: LD_ADDR_VAR 0 10
38724: PUSH
38725: LD_VAR 0 10
38729: PUSH
38730: LD_VAR 0 6
38734: PPUSH
38735: CALL_OW 311
38739: PPUSH
38740: LD_INT 3
38742: PPUSH
38743: CALL_OW 259
38747: PUSH
38748: LD_INT 4
38750: MUL
38751: MUL
38752: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38753: LD_VAR 0 6
38757: PPUSH
38758: CALL_OW 263
38762: PUSH
38763: LD_INT 2
38765: EQUAL
38766: IFFALSE 38817
// begin j := IsControledBy ( i ) ;
38768: LD_ADDR_VAR 0 7
38772: PUSH
38773: LD_VAR 0 6
38777: PPUSH
38778: CALL_OW 312
38782: ST_TO_ADDR
// if j then
38783: LD_VAR 0 7
38787: IFFALSE 38817
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38789: LD_ADDR_VAR 0 10
38793: PUSH
38794: LD_VAR 0 10
38798: PUSH
38799: LD_VAR 0 7
38803: PPUSH
38804: LD_INT 3
38806: PPUSH
38807: CALL_OW 259
38811: PUSH
38812: LD_INT 3
38814: MUL
38815: MUL
38816: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38817: LD_VAR 0 6
38821: PPUSH
38822: CALL_OW 264
38826: PUSH
38827: LD_INT 5
38829: PUSH
38830: LD_INT 6
38832: PUSH
38833: LD_INT 46
38835: PUSH
38836: LD_INT 44
38838: PUSH
38839: LD_INT 47
38841: PUSH
38842: LD_INT 45
38844: PUSH
38845: LD_INT 28
38847: PUSH
38848: LD_INT 7
38850: PUSH
38851: LD_INT 27
38853: PUSH
38854: LD_INT 29
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: IN
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: LD_INT 52
38877: PPUSH
38878: CALL_OW 321
38882: PUSH
38883: LD_INT 2
38885: EQUAL
38886: AND
38887: IFFALSE 38904
// bpoints := bpoints * 1.2 ;
38889: LD_ADDR_VAR 0 10
38893: PUSH
38894: LD_VAR 0 10
38898: PUSH
38899: LD_REAL  1.20000000000000E+0000
38902: MUL
38903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38904: LD_VAR 0 6
38908: PPUSH
38909: CALL_OW 264
38913: PUSH
38914: LD_INT 6
38916: PUSH
38917: LD_INT 46
38919: PUSH
38920: LD_INT 47
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: IN
38928: IFFALSE 38945
// bpoints := bpoints * 1.2 ;
38930: LD_ADDR_VAR 0 10
38934: PUSH
38935: LD_VAR 0 10
38939: PUSH
38940: LD_REAL  1.20000000000000E+0000
38943: MUL
38944: ST_TO_ADDR
// end ; unit_building :
38945: GO 38959
38947: LD_INT 3
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38958
38955: POP
// ; end ;
38956: GO 38959
38958: POP
// for j = 1 to 3 do
38959: LD_ADDR_VAR 0 7
38963: PUSH
38964: DOUBLE
38965: LD_INT 1
38967: DEC
38968: ST_TO_ADDR
38969: LD_INT 3
38971: PUSH
38972: FOR_TO
38973: IFFALSE 39026
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38975: LD_ADDR_VAR 0 5
38979: PUSH
38980: LD_VAR 0 5
38984: PPUSH
38985: LD_VAR 0 7
38989: PPUSH
38990: LD_VAR 0 5
38994: PUSH
38995: LD_VAR 0 7
38999: ARRAY
39000: PUSH
39001: LD_VAR 0 9
39005: PUSH
39006: LD_VAR 0 7
39010: ARRAY
39011: PUSH
39012: LD_VAR 0 10
39016: MUL
39017: PLUS
39018: PPUSH
39019: CALL_OW 1
39023: ST_TO_ADDR
39024: GO 38972
39026: POP
39027: POP
// end ;
39028: GO 37511
39030: POP
39031: POP
// result := Replace ( result , 4 , tmp ) ;
39032: LD_ADDR_VAR 0 5
39036: PUSH
39037: LD_VAR 0 5
39041: PPUSH
39042: LD_INT 4
39044: PPUSH
39045: LD_VAR 0 8
39049: PPUSH
39050: CALL_OW 1
39054: ST_TO_ADDR
// end ;
39055: LD_VAR 0 5
39059: RET
// export function DangerAtRange ( unit , range ) ; begin
39060: LD_INT 0
39062: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39063: LD_ADDR_VAR 0 3
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 255
39077: PPUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 250
39087: PPUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL_OW 251
39097: PPUSH
39098: LD_VAR 0 2
39102: PPUSH
39103: CALL 37363 0 4
39107: ST_TO_ADDR
// end ;
39108: LD_VAR 0 3
39112: RET
// export function DangerInArea ( side , area ) ; begin
39113: LD_INT 0
39115: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39116: LD_ADDR_VAR 0 3
39120: PUSH
39121: LD_VAR 0 2
39125: PPUSH
39126: LD_INT 81
39128: PUSH
39129: LD_VAR 0 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PPUSH
39138: CALL_OW 70
39142: ST_TO_ADDR
// end ;
39143: LD_VAR 0 3
39147: RET
// export function IsExtension ( b ) ; begin
39148: LD_INT 0
39150: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39151: LD_ADDR_VAR 0 2
39155: PUSH
39156: LD_VAR 0 1
39160: PUSH
39161: LD_INT 23
39163: PUSH
39164: LD_INT 20
39166: PUSH
39167: LD_INT 22
39169: PUSH
39170: LD_INT 17
39172: PUSH
39173: LD_INT 24
39175: PUSH
39176: LD_INT 21
39178: PUSH
39179: LD_INT 19
39181: PUSH
39182: LD_INT 16
39184: PUSH
39185: LD_INT 25
39187: PUSH
39188: LD_INT 18
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: IN
39203: ST_TO_ADDR
// end ;
39204: LD_VAR 0 2
39208: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39209: LD_INT 0
39211: PPUSH
39212: PPUSH
39213: PPUSH
// result := [ ] ;
39214: LD_ADDR_VAR 0 3
39218: PUSH
39219: EMPTY
39220: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39221: LD_ADDR_VAR 0 4
39225: PUSH
39226: LD_VAR 0 2
39230: PPUSH
39231: LD_INT 21
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PPUSH
39241: CALL_OW 70
39245: ST_TO_ADDR
// if not tmp then
39246: LD_VAR 0 4
39250: NOT
39251: IFFALSE 39255
// exit ;
39253: GO 39313
// for i in tmp do
39255: LD_ADDR_VAR 0 5
39259: PUSH
39260: LD_VAR 0 4
39264: PUSH
39265: FOR_IN
39266: IFFALSE 39301
// if GetBase ( i ) <> base then
39268: LD_VAR 0 5
39272: PPUSH
39273: CALL_OW 274
39277: PUSH
39278: LD_VAR 0 1
39282: NONEQUAL
39283: IFFALSE 39299
// ComLinkToBase ( base , i ) ;
39285: LD_VAR 0 1
39289: PPUSH
39290: LD_VAR 0 5
39294: PPUSH
39295: CALL_OW 169
39299: GO 39265
39301: POP
39302: POP
// result := tmp ;
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_VAR 0 4
39312: ST_TO_ADDR
// end ;
39313: LD_VAR 0 3
39317: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39318: LD_INT 0
39320: PPUSH
39321: PPUSH
// if BuildingStatus ( b ) = bs_build then
39322: LD_VAR 0 2
39326: PPUSH
39327: CALL_OW 461
39331: PUSH
39332: LD_INT 1
39334: EQUAL
39335: IFFALSE 39395
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39337: LD_VAR 0 1
39341: PPUSH
39342: LD_STRING h
39344: PUSH
39345: LD_VAR 0 2
39349: PPUSH
39350: CALL_OW 250
39354: PUSH
39355: LD_VAR 0 2
39359: PPUSH
39360: CALL_OW 251
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: PUSH
39388: EMPTY
39389: LIST
39390: PPUSH
39391: CALL_OW 446
// end ;
39395: LD_VAR 0 3
39399: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39400: LD_INT 0
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39408: LD_VAR 0 1
39412: NOT
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 263
39423: PUSH
39424: LD_INT 2
39426: EQUAL
39427: NOT
39428: OR
39429: IFFALSE 39433
// exit ;
39431: GO 39749
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: LD_INT 22
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 255
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 30
39460: PUSH
39461: LD_INT 36
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 34
39470: PUSH
39471: LD_INT 31
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PPUSH
39487: CALL_OW 69
39491: ST_TO_ADDR
// if not tmp then
39492: LD_VAR 0 6
39496: NOT
39497: IFFALSE 39501
// exit ;
39499: GO 39749
// result := [ ] ;
39501: LD_ADDR_VAR 0 2
39505: PUSH
39506: EMPTY
39507: ST_TO_ADDR
// for i in tmp do
39508: LD_ADDR_VAR 0 3
39512: PUSH
39513: LD_VAR 0 6
39517: PUSH
39518: FOR_IN
39519: IFFALSE 39590
// begin t := UnitsInside ( i ) ;
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: CALL_OW 313
39535: ST_TO_ADDR
// if t then
39536: LD_VAR 0 4
39540: IFFALSE 39588
// for j in t do
39542: LD_ADDR_VAR 0 7
39546: PUSH
39547: LD_VAR 0 4
39551: PUSH
39552: FOR_IN
39553: IFFALSE 39586
// result := Insert ( result , result + 1 , j ) ;
39555: LD_ADDR_VAR 0 2
39559: PUSH
39560: LD_VAR 0 2
39564: PPUSH
39565: LD_VAR 0 2
39569: PUSH
39570: LD_INT 1
39572: PLUS
39573: PPUSH
39574: LD_VAR 0 7
39578: PPUSH
39579: CALL_OW 2
39583: ST_TO_ADDR
39584: GO 39552
39586: POP
39587: POP
// end ;
39588: GO 39518
39590: POP
39591: POP
// if not result then
39592: LD_VAR 0 2
39596: NOT
39597: IFFALSE 39601
// exit ;
39599: GO 39749
// mech := result [ 1 ] ;
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_VAR 0 2
39610: PUSH
39611: LD_INT 1
39613: ARRAY
39614: ST_TO_ADDR
// if result > 1 then
39615: LD_VAR 0 2
39619: PUSH
39620: LD_INT 1
39622: GREATER
39623: IFFALSE 39735
// for i = 2 to result do
39625: LD_ADDR_VAR 0 3
39629: PUSH
39630: DOUBLE
39631: LD_INT 2
39633: DEC
39634: ST_TO_ADDR
39635: LD_VAR 0 2
39639: PUSH
39640: FOR_TO
39641: IFFALSE 39733
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39643: LD_ADDR_VAR 0 4
39647: PUSH
39648: LD_VAR 0 2
39652: PUSH
39653: LD_VAR 0 3
39657: ARRAY
39658: PPUSH
39659: LD_INT 3
39661: PPUSH
39662: CALL_OW 259
39666: PUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_VAR 0 3
39676: ARRAY
39677: PPUSH
39678: CALL_OW 432
39682: MINUS
39683: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39684: LD_VAR 0 4
39688: PUSH
39689: LD_VAR 0 5
39693: PPUSH
39694: LD_INT 3
39696: PPUSH
39697: CALL_OW 259
39701: PUSH
39702: LD_VAR 0 5
39706: PPUSH
39707: CALL_OW 432
39711: MINUS
39712: GREATEREQUAL
39713: IFFALSE 39731
// mech := result [ i ] ;
39715: LD_ADDR_VAR 0 5
39719: PUSH
39720: LD_VAR 0 2
39724: PUSH
39725: LD_VAR 0 3
39729: ARRAY
39730: ST_TO_ADDR
// end ;
39731: GO 39640
39733: POP
39734: POP
// ComLinkTo ( vehicle , mech ) ;
39735: LD_VAR 0 1
39739: PPUSH
39740: LD_VAR 0 5
39744: PPUSH
39745: CALL_OW 135
// end ;
39749: LD_VAR 0 2
39753: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
// result := [ ] ;
39769: LD_ADDR_VAR 0 7
39773: PUSH
39774: EMPTY
39775: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 266
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: IN
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 41432
// if name then
39801: LD_VAR 0 3
39805: IFFALSE 39821
// SetBName ( base_dep , name ) ;
39807: LD_VAR 0 1
39811: PPUSH
39812: LD_VAR 0 3
39816: PPUSH
39817: CALL_OW 500
// base := GetBase ( base_dep ) ;
39821: LD_ADDR_VAR 0 15
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 274
39835: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39836: LD_ADDR_VAR 0 16
39840: PUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 255
39850: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39851: LD_ADDR_VAR 0 17
39855: PUSH
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 248
39865: ST_TO_ADDR
// if sources then
39866: LD_VAR 0 5
39870: IFFALSE 39917
// for i = 1 to 3 do
39872: LD_ADDR_VAR 0 8
39876: PUSH
39877: DOUBLE
39878: LD_INT 1
39880: DEC
39881: ST_TO_ADDR
39882: LD_INT 3
39884: PUSH
39885: FOR_TO
39886: IFFALSE 39915
// AddResourceType ( base , i , sources [ i ] ) ;
39888: LD_VAR 0 15
39892: PPUSH
39893: LD_VAR 0 8
39897: PPUSH
39898: LD_VAR 0 5
39902: PUSH
39903: LD_VAR 0 8
39907: ARRAY
39908: PPUSH
39909: CALL_OW 276
39913: GO 39885
39915: POP
39916: POP
// buildings := GetBaseBuildings ( base , area ) ;
39917: LD_ADDR_VAR 0 18
39921: PUSH
39922: LD_VAR 0 15
39926: PPUSH
39927: LD_VAR 0 2
39931: PPUSH
39932: CALL 39209 0 2
39936: ST_TO_ADDR
// InitHc ;
39937: CALL_OW 19
// InitUc ;
39941: CALL_OW 18
// uc_side := side ;
39945: LD_ADDR_OWVAR 20
39949: PUSH
39950: LD_VAR 0 16
39954: ST_TO_ADDR
// uc_nation := nation ;
39955: LD_ADDR_OWVAR 21
39959: PUSH
39960: LD_VAR 0 17
39964: ST_TO_ADDR
// if buildings then
39965: LD_VAR 0 18
39969: IFFALSE 41291
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39971: LD_ADDR_VAR 0 19
39975: PUSH
39976: LD_VAR 0 18
39980: PPUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 30
39986: PUSH
39987: LD_INT 29
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 30
39996: PUSH
39997: LD_INT 30
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: PPUSH
40009: CALL_OW 72
40013: ST_TO_ADDR
// if tmp then
40014: LD_VAR 0 19
40018: IFFALSE 40066
// for i in tmp do
40020: LD_ADDR_VAR 0 8
40024: PUSH
40025: LD_VAR 0 19
40029: PUSH
40030: FOR_IN
40031: IFFALSE 40064
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40033: LD_VAR 0 8
40037: PPUSH
40038: CALL_OW 250
40042: PPUSH
40043: LD_VAR 0 8
40047: PPUSH
40048: CALL_OW 251
40052: PPUSH
40053: LD_VAR 0 16
40057: PPUSH
40058: CALL_OW 441
40062: GO 40030
40064: POP
40065: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40066: LD_VAR 0 18
40070: PPUSH
40071: LD_INT 2
40073: PUSH
40074: LD_INT 30
40076: PUSH
40077: LD_INT 32
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 30
40086: PUSH
40087: LD_INT 33
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: PPUSH
40099: CALL_OW 72
40103: IFFALSE 40191
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40105: LD_ADDR_VAR 0 8
40109: PUSH
40110: LD_VAR 0 18
40114: PPUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 30
40120: PUSH
40121: LD_INT 32
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 33
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 72
40147: PUSH
40148: FOR_IN
40149: IFFALSE 40189
// begin if not GetBWeapon ( i ) then
40151: LD_VAR 0 8
40155: PPUSH
40156: CALL_OW 269
40160: NOT
40161: IFFALSE 40187
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40163: LD_VAR 0 8
40167: PPUSH
40168: LD_VAR 0 8
40172: PPUSH
40173: LD_VAR 0 2
40177: PPUSH
40178: CALL 41437 0 2
40182: PPUSH
40183: CALL_OW 431
// end ;
40187: GO 40148
40189: POP
40190: POP
// end ; for i = 1 to personel do
40191: LD_ADDR_VAR 0 8
40195: PUSH
40196: DOUBLE
40197: LD_INT 1
40199: DEC
40200: ST_TO_ADDR
40201: LD_VAR 0 6
40205: PUSH
40206: FOR_TO
40207: IFFALSE 41271
// begin if i > 4 then
40209: LD_VAR 0 8
40213: PUSH
40214: LD_INT 4
40216: GREATER
40217: IFFALSE 40221
// break ;
40219: GO 41271
// case i of 1 :
40221: LD_VAR 0 8
40225: PUSH
40226: LD_INT 1
40228: DOUBLE
40229: EQUAL
40230: IFTRUE 40234
40232: GO 40314
40234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40235: LD_ADDR_VAR 0 12
40239: PUSH
40240: LD_VAR 0 18
40244: PPUSH
40245: LD_INT 22
40247: PUSH
40248: LD_VAR 0 16
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 58
40259: PUSH
40260: EMPTY
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 30
40268: PUSH
40269: LD_INT 32
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 30
40278: PUSH
40279: LD_INT 4
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 30
40288: PUSH
40289: LD_INT 5
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: PPUSH
40307: CALL_OW 72
40311: ST_TO_ADDR
40312: GO 40536
40314: LD_INT 2
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40384
40322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40323: LD_ADDR_VAR 0 12
40327: PUSH
40328: LD_VAR 0 18
40332: PPUSH
40333: LD_INT 22
40335: PUSH
40336: LD_VAR 0 16
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 30
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 30
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PPUSH
40377: CALL_OW 72
40381: ST_TO_ADDR
40382: GO 40536
40384: LD_INT 3
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40454
40392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40393: LD_ADDR_VAR 0 12
40397: PUSH
40398: LD_VAR 0 18
40402: PPUSH
40403: LD_INT 22
40405: PUSH
40406: LD_VAR 0 16
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 30
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 30
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PPUSH
40447: CALL_OW 72
40451: ST_TO_ADDR
40452: GO 40536
40454: LD_INT 4
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40535
40462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40463: LD_ADDR_VAR 0 12
40467: PUSH
40468: LD_VAR 0 18
40472: PPUSH
40473: LD_INT 22
40475: PUSH
40476: LD_VAR 0 16
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 30
40490: PUSH
40491: LD_INT 6
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 30
40500: PUSH
40501: LD_INT 7
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 30
40510: PUSH
40511: LD_INT 8
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PPUSH
40528: CALL_OW 72
40532: ST_TO_ADDR
40533: GO 40536
40535: POP
// if i = 1 then
40536: LD_VAR 0 8
40540: PUSH
40541: LD_INT 1
40543: EQUAL
40544: IFFALSE 40655
// begin tmp := [ ] ;
40546: LD_ADDR_VAR 0 19
40550: PUSH
40551: EMPTY
40552: ST_TO_ADDR
// for j in f do
40553: LD_ADDR_VAR 0 9
40557: PUSH
40558: LD_VAR 0 12
40562: PUSH
40563: FOR_IN
40564: IFFALSE 40637
// if GetBType ( j ) = b_bunker then
40566: LD_VAR 0 9
40570: PPUSH
40571: CALL_OW 266
40575: PUSH
40576: LD_INT 32
40578: EQUAL
40579: IFFALSE 40606
// tmp := Insert ( tmp , 1 , j ) else
40581: LD_ADDR_VAR 0 19
40585: PUSH
40586: LD_VAR 0 19
40590: PPUSH
40591: LD_INT 1
40593: PPUSH
40594: LD_VAR 0 9
40598: PPUSH
40599: CALL_OW 2
40603: ST_TO_ADDR
40604: GO 40635
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40606: LD_ADDR_VAR 0 19
40610: PUSH
40611: LD_VAR 0 19
40615: PPUSH
40616: LD_VAR 0 19
40620: PUSH
40621: LD_INT 1
40623: PLUS
40624: PPUSH
40625: LD_VAR 0 9
40629: PPUSH
40630: CALL_OW 2
40634: ST_TO_ADDR
40635: GO 40563
40637: POP
40638: POP
// if tmp then
40639: LD_VAR 0 19
40643: IFFALSE 40655
// f := tmp ;
40645: LD_ADDR_VAR 0 12
40649: PUSH
40650: LD_VAR 0 19
40654: ST_TO_ADDR
// end ; x := personel [ i ] ;
40655: LD_ADDR_VAR 0 13
40659: PUSH
40660: LD_VAR 0 6
40664: PUSH
40665: LD_VAR 0 8
40669: ARRAY
40670: ST_TO_ADDR
// if x = - 1 then
40671: LD_VAR 0 13
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: EQUAL
40680: IFFALSE 40889
// begin for j in f do
40682: LD_ADDR_VAR 0 9
40686: PUSH
40687: LD_VAR 0 12
40691: PUSH
40692: FOR_IN
40693: IFFALSE 40885
// repeat InitHc ;
40695: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40699: LD_VAR 0 9
40703: PPUSH
40704: CALL_OW 266
40708: PUSH
40709: LD_INT 5
40711: EQUAL
40712: IFFALSE 40782
// begin if UnitsInside ( j ) < 3 then
40714: LD_VAR 0 9
40718: PPUSH
40719: CALL_OW 313
40723: PUSH
40724: LD_INT 3
40726: LESS
40727: IFFALSE 40763
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40729: LD_INT 0
40731: PPUSH
40732: LD_INT 5
40734: PUSH
40735: LD_INT 8
40737: PUSH
40738: LD_INT 9
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: PUSH
40746: LD_VAR 0 17
40750: ARRAY
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: CALL_OW 380
40761: GO 40780
// PrepareHuman ( false , i , skill ) ;
40763: LD_INT 0
40765: PPUSH
40766: LD_VAR 0 8
40770: PPUSH
40771: LD_VAR 0 4
40775: PPUSH
40776: CALL_OW 380
// end else
40780: GO 40799
// PrepareHuman ( false , i , skill ) ;
40782: LD_INT 0
40784: PPUSH
40785: LD_VAR 0 8
40789: PPUSH
40790: LD_VAR 0 4
40794: PPUSH
40795: CALL_OW 380
// un := CreateHuman ;
40799: LD_ADDR_VAR 0 14
40803: PUSH
40804: CALL_OW 44
40808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40809: LD_ADDR_VAR 0 7
40813: PUSH
40814: LD_VAR 0 7
40818: PPUSH
40819: LD_INT 1
40821: PPUSH
40822: LD_VAR 0 14
40826: PPUSH
40827: CALL_OW 2
40831: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40832: LD_VAR 0 14
40836: PPUSH
40837: LD_VAR 0 9
40841: PPUSH
40842: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40846: LD_VAR 0 9
40850: PPUSH
40851: CALL_OW 313
40855: PUSH
40856: LD_INT 6
40858: EQUAL
40859: PUSH
40860: LD_VAR 0 9
40864: PPUSH
40865: CALL_OW 266
40869: PUSH
40870: LD_INT 32
40872: PUSH
40873: LD_INT 31
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: IN
40880: OR
40881: IFFALSE 40695
40883: GO 40692
40885: POP
40886: POP
// end else
40887: GO 41269
// for j = 1 to x do
40889: LD_ADDR_VAR 0 9
40893: PUSH
40894: DOUBLE
40895: LD_INT 1
40897: DEC
40898: ST_TO_ADDR
40899: LD_VAR 0 13
40903: PUSH
40904: FOR_TO
40905: IFFALSE 41267
// begin InitHc ;
40907: CALL_OW 19
// if not f then
40911: LD_VAR 0 12
40915: NOT
40916: IFFALSE 41005
// begin PrepareHuman ( false , i , skill ) ;
40918: LD_INT 0
40920: PPUSH
40921: LD_VAR 0 8
40925: PPUSH
40926: LD_VAR 0 4
40930: PPUSH
40931: CALL_OW 380
// un := CreateHuman ;
40935: LD_ADDR_VAR 0 14
40939: PUSH
40940: CALL_OW 44
40944: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40945: LD_ADDR_VAR 0 7
40949: PUSH
40950: LD_VAR 0 7
40954: PPUSH
40955: LD_INT 1
40957: PPUSH
40958: LD_VAR 0 14
40962: PPUSH
40963: CALL_OW 2
40967: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40968: LD_VAR 0 14
40972: PPUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 250
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 251
40992: PPUSH
40993: LD_INT 10
40995: PPUSH
40996: LD_INT 0
40998: PPUSH
40999: CALL_OW 50
// continue ;
41003: GO 40904
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41005: LD_VAR 0 12
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: CALL_OW 313
41018: PUSH
41019: LD_VAR 0 12
41023: PUSH
41024: LD_INT 1
41026: ARRAY
41027: PPUSH
41028: CALL_OW 266
41032: PUSH
41033: LD_INT 32
41035: PUSH
41036: LD_INT 31
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: IN
41043: AND
41044: PUSH
41045: LD_VAR 0 12
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: CALL_OW 313
41058: PUSH
41059: LD_INT 6
41061: EQUAL
41062: OR
41063: IFFALSE 41083
// f := Delete ( f , 1 ) ;
41065: LD_ADDR_VAR 0 12
41069: PUSH
41070: LD_VAR 0 12
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: CALL_OW 3
41082: ST_TO_ADDR
// if not f then
41083: LD_VAR 0 12
41087: NOT
41088: IFFALSE 41106
// begin x := x + 2 ;
41090: LD_ADDR_VAR 0 13
41094: PUSH
41095: LD_VAR 0 13
41099: PUSH
41100: LD_INT 2
41102: PLUS
41103: ST_TO_ADDR
// continue ;
41104: GO 40904
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41106: LD_VAR 0 12
41110: PUSH
41111: LD_INT 1
41113: ARRAY
41114: PPUSH
41115: CALL_OW 266
41119: PUSH
41120: LD_INT 5
41122: EQUAL
41123: IFFALSE 41197
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41125: LD_VAR 0 12
41129: PUSH
41130: LD_INT 1
41132: ARRAY
41133: PPUSH
41134: CALL_OW 313
41138: PUSH
41139: LD_INT 3
41141: LESS
41142: IFFALSE 41178
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41144: LD_INT 0
41146: PPUSH
41147: LD_INT 5
41149: PUSH
41150: LD_INT 8
41152: PUSH
41153: LD_INT 9
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: PUSH
41161: LD_VAR 0 17
41165: ARRAY
41166: PPUSH
41167: LD_VAR 0 4
41171: PPUSH
41172: CALL_OW 380
41176: GO 41195
// PrepareHuman ( false , i , skill ) ;
41178: LD_INT 0
41180: PPUSH
41181: LD_VAR 0 8
41185: PPUSH
41186: LD_VAR 0 4
41190: PPUSH
41191: CALL_OW 380
// end else
41195: GO 41214
// PrepareHuman ( false , i , skill ) ;
41197: LD_INT 0
41199: PPUSH
41200: LD_VAR 0 8
41204: PPUSH
41205: LD_VAR 0 4
41209: PPUSH
41210: CALL_OW 380
// un := CreateHuman ;
41214: LD_ADDR_VAR 0 14
41218: PUSH
41219: CALL_OW 44
41223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41224: LD_ADDR_VAR 0 7
41228: PUSH
41229: LD_VAR 0 7
41233: PPUSH
41234: LD_INT 1
41236: PPUSH
41237: LD_VAR 0 14
41241: PPUSH
41242: CALL_OW 2
41246: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41247: LD_VAR 0 14
41251: PPUSH
41252: LD_VAR 0 12
41256: PUSH
41257: LD_INT 1
41259: ARRAY
41260: PPUSH
41261: CALL_OW 52
// end ;
41265: GO 40904
41267: POP
41268: POP
// end ;
41269: GO 40206
41271: POP
41272: POP
// result := result ^ buildings ;
41273: LD_ADDR_VAR 0 7
41277: PUSH
41278: LD_VAR 0 7
41282: PUSH
41283: LD_VAR 0 18
41287: ADD
41288: ST_TO_ADDR
// end else
41289: GO 41432
// begin for i = 1 to personel do
41291: LD_ADDR_VAR 0 8
41295: PUSH
41296: DOUBLE
41297: LD_INT 1
41299: DEC
41300: ST_TO_ADDR
41301: LD_VAR 0 6
41305: PUSH
41306: FOR_TO
41307: IFFALSE 41430
// begin if i > 4 then
41309: LD_VAR 0 8
41313: PUSH
41314: LD_INT 4
41316: GREATER
41317: IFFALSE 41321
// break ;
41319: GO 41430
// x := personel [ i ] ;
41321: LD_ADDR_VAR 0 13
41325: PUSH
41326: LD_VAR 0 6
41330: PUSH
41331: LD_VAR 0 8
41335: ARRAY
41336: ST_TO_ADDR
// if x = - 1 then
41337: LD_VAR 0 13
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: EQUAL
41346: IFFALSE 41350
// continue ;
41348: GO 41306
// PrepareHuman ( false , i , skill ) ;
41350: LD_INT 0
41352: PPUSH
41353: LD_VAR 0 8
41357: PPUSH
41358: LD_VAR 0 4
41362: PPUSH
41363: CALL_OW 380
// un := CreateHuman ;
41367: LD_ADDR_VAR 0 14
41371: PUSH
41372: CALL_OW 44
41376: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41377: LD_VAR 0 14
41381: PPUSH
41382: LD_VAR 0 1
41386: PPUSH
41387: CALL_OW 250
41391: PPUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 251
41401: PPUSH
41402: LD_INT 10
41404: PPUSH
41405: LD_INT 0
41407: PPUSH
41408: CALL_OW 50
// result := result ^ un ;
41412: LD_ADDR_VAR 0 7
41416: PUSH
41417: LD_VAR 0 7
41421: PUSH
41422: LD_VAR 0 14
41426: ADD
41427: ST_TO_ADDR
// end ;
41428: GO 41306
41430: POP
41431: POP
// end ; end ;
41432: LD_VAR 0 7
41436: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41437: LD_INT 0
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
// result := false ;
41455: LD_ADDR_VAR 0 3
41459: PUSH
41460: LD_INT 0
41462: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41463: LD_VAR 0 1
41467: NOT
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 266
41478: PUSH
41479: LD_INT 32
41481: PUSH
41482: LD_INT 33
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: IN
41489: NOT
41490: OR
41491: IFFALSE 41495
// exit ;
41493: GO 42631
// nat := GetNation ( tower ) ;
41495: LD_ADDR_VAR 0 12
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 248
41509: ST_TO_ADDR
// side := GetSide ( tower ) ;
41510: LD_ADDR_VAR 0 16
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 255
41524: ST_TO_ADDR
// x := GetX ( tower ) ;
41525: LD_ADDR_VAR 0 10
41529: PUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 250
41539: ST_TO_ADDR
// y := GetY ( tower ) ;
41540: LD_ADDR_VAR 0 11
41544: PUSH
41545: LD_VAR 0 1
41549: PPUSH
41550: CALL_OW 251
41554: ST_TO_ADDR
// if not x or not y then
41555: LD_VAR 0 10
41559: NOT
41560: PUSH
41561: LD_VAR 0 11
41565: NOT
41566: OR
41567: IFFALSE 41571
// exit ;
41569: GO 42631
// weapon := 0 ;
41571: LD_ADDR_VAR 0 18
41575: PUSH
41576: LD_INT 0
41578: ST_TO_ADDR
// fac_list := [ ] ;
41579: LD_ADDR_VAR 0 17
41583: PUSH
41584: EMPTY
41585: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_VAR 0 1
41595: PPUSH
41596: CALL_OW 274
41600: PPUSH
41601: LD_VAR 0 2
41605: PPUSH
41606: CALL 39209 0 2
41610: PPUSH
41611: LD_INT 30
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PPUSH
41621: CALL_OW 72
41625: ST_TO_ADDR
// if not factories then
41626: LD_VAR 0 6
41630: NOT
41631: IFFALSE 41635
// exit ;
41633: GO 42631
// for i in factories do
41635: LD_ADDR_VAR 0 8
41639: PUSH
41640: LD_VAR 0 6
41644: PUSH
41645: FOR_IN
41646: IFFALSE 41671
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41648: LD_ADDR_VAR 0 17
41652: PUSH
41653: LD_VAR 0 17
41657: PUSH
41658: LD_VAR 0 8
41662: PPUSH
41663: CALL_OW 478
41667: UNION
41668: ST_TO_ADDR
41669: GO 41645
41671: POP
41672: POP
// if not fac_list then
41673: LD_VAR 0 17
41677: NOT
41678: IFFALSE 41682
// exit ;
41680: GO 42631
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41682: LD_ADDR_VAR 0 5
41686: PUSH
41687: LD_INT 4
41689: PUSH
41690: LD_INT 5
41692: PUSH
41693: LD_INT 9
41695: PUSH
41696: LD_INT 10
41698: PUSH
41699: LD_INT 6
41701: PUSH
41702: LD_INT 7
41704: PUSH
41705: LD_INT 11
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 27
41719: PUSH
41720: LD_INT 28
41722: PUSH
41723: LD_INT 26
41725: PUSH
41726: LD_INT 30
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 43
41737: PUSH
41738: LD_INT 44
41740: PUSH
41741: LD_INT 46
41743: PUSH
41744: LD_INT 45
41746: PUSH
41747: LD_INT 47
41749: PUSH
41750: LD_INT 49
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: PUSH
41766: LD_VAR 0 12
41770: ARRAY
41771: ST_TO_ADDR
// for i in list do
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: LD_VAR 0 5
41781: PUSH
41782: FOR_IN
41783: IFFALSE 41816
// if not i in fac_list then
41785: LD_VAR 0 8
41789: PUSH
41790: LD_VAR 0 17
41794: IN
41795: NOT
41796: IFFALSE 41814
// list := list diff i ;
41798: LD_ADDR_VAR 0 5
41802: PUSH
41803: LD_VAR 0 5
41807: PUSH
41808: LD_VAR 0 8
41812: DIFF
41813: ST_TO_ADDR
41814: GO 41782
41816: POP
41817: POP
// if not list then
41818: LD_VAR 0 5
41822: NOT
41823: IFFALSE 41827
// exit ;
41825: GO 42631
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41827: LD_VAR 0 12
41831: PUSH
41832: LD_INT 3
41834: EQUAL
41835: PUSH
41836: LD_INT 49
41838: PUSH
41839: LD_VAR 0 5
41843: IN
41844: AND
41845: PUSH
41846: LD_INT 31
41848: PPUSH
41849: LD_VAR 0 16
41853: PPUSH
41854: CALL_OW 321
41858: PUSH
41859: LD_INT 2
41861: EQUAL
41862: AND
41863: IFFALSE 41923
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41865: LD_INT 22
41867: PUSH
41868: LD_VAR 0 16
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 35
41879: PUSH
41880: LD_INT 49
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 91
41889: PUSH
41890: LD_VAR 0 1
41894: PUSH
41895: LD_INT 10
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: PPUSH
41908: CALL_OW 69
41912: NOT
41913: IFFALSE 41923
// weapon := ru_time_lapser ;
41915: LD_ADDR_VAR 0 18
41919: PUSH
41920: LD_INT 49
41922: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41923: LD_VAR 0 12
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: IN
41938: PUSH
41939: LD_INT 11
41941: PUSH
41942: LD_VAR 0 5
41946: IN
41947: PUSH
41948: LD_INT 30
41950: PUSH
41951: LD_VAR 0 5
41955: IN
41956: OR
41957: AND
41958: PUSH
41959: LD_INT 6
41961: PPUSH
41962: LD_VAR 0 16
41966: PPUSH
41967: CALL_OW 321
41971: PUSH
41972: LD_INT 2
41974: EQUAL
41975: AND
41976: IFFALSE 42141
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41978: LD_INT 22
41980: PUSH
41981: LD_VAR 0 16
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 35
41995: PUSH
41996: LD_INT 11
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 35
42005: PUSH
42006: LD_INT 30
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 91
42020: PUSH
42021: LD_VAR 0 1
42025: PUSH
42026: LD_INT 18
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: PPUSH
42039: CALL_OW 69
42043: NOT
42044: PUSH
42045: LD_INT 22
42047: PUSH
42048: LD_VAR 0 16
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 30
42062: PUSH
42063: LD_INT 32
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 30
42072: PUSH
42073: LD_INT 33
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 91
42087: PUSH
42088: LD_VAR 0 1
42092: PUSH
42093: LD_INT 12
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: PPUSH
42109: CALL_OW 69
42113: PUSH
42114: LD_INT 2
42116: GREATER
42117: AND
42118: IFFALSE 42141
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42120: LD_ADDR_VAR 0 18
42124: PUSH
42125: LD_INT 11
42127: PUSH
42128: LD_INT 30
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_VAR 0 12
42139: ARRAY
42140: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42141: LD_VAR 0 18
42145: NOT
42146: PUSH
42147: LD_INT 40
42149: PPUSH
42150: LD_VAR 0 16
42154: PPUSH
42155: CALL_OW 321
42159: PUSH
42160: LD_INT 2
42162: EQUAL
42163: AND
42164: PUSH
42165: LD_INT 7
42167: PUSH
42168: LD_VAR 0 5
42172: IN
42173: PUSH
42174: LD_INT 28
42176: PUSH
42177: LD_VAR 0 5
42181: IN
42182: OR
42183: PUSH
42184: LD_INT 45
42186: PUSH
42187: LD_VAR 0 5
42191: IN
42192: OR
42193: AND
42194: IFFALSE 42448
// begin hex := GetHexInfo ( x , y ) ;
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 10
42205: PPUSH
42206: LD_VAR 0 11
42210: PPUSH
42211: CALL_OW 546
42215: ST_TO_ADDR
// if hex [ 1 ] then
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 1
42223: ARRAY
42224: IFFALSE 42228
// exit ;
42226: GO 42631
// height := hex [ 2 ] ;
42228: LD_ADDR_VAR 0 15
42232: PUSH
42233: LD_VAR 0 4
42237: PUSH
42238: LD_INT 2
42240: ARRAY
42241: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42242: LD_ADDR_VAR 0 14
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 5
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
// for i in tmp do
42265: LD_ADDR_VAR 0 8
42269: PUSH
42270: LD_VAR 0 14
42274: PUSH
42275: FOR_IN
42276: IFFALSE 42446
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42278: LD_ADDR_VAR 0 9
42282: PUSH
42283: LD_VAR 0 10
42287: PPUSH
42288: LD_VAR 0 8
42292: PPUSH
42293: LD_INT 5
42295: PPUSH
42296: CALL_OW 272
42300: PUSH
42301: LD_VAR 0 11
42305: PPUSH
42306: LD_VAR 0 8
42310: PPUSH
42311: LD_INT 5
42313: PPUSH
42314: CALL_OW 273
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42323: LD_VAR 0 9
42327: PUSH
42328: LD_INT 1
42330: ARRAY
42331: PPUSH
42332: LD_VAR 0 9
42336: PUSH
42337: LD_INT 2
42339: ARRAY
42340: PPUSH
42341: CALL_OW 488
42345: IFFALSE 42444
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42347: LD_ADDR_VAR 0 4
42351: PUSH
42352: LD_VAR 0 9
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_VAR 0 9
42365: PUSH
42366: LD_INT 2
42368: ARRAY
42369: PPUSH
42370: CALL_OW 546
42374: ST_TO_ADDR
// if hex [ 1 ] then
42375: LD_VAR 0 4
42379: PUSH
42380: LD_INT 1
42382: ARRAY
42383: IFFALSE 42387
// continue ;
42385: GO 42275
// h := hex [ 2 ] ;
42387: LD_ADDR_VAR 0 13
42391: PUSH
42392: LD_VAR 0 4
42396: PUSH
42397: LD_INT 2
42399: ARRAY
42400: ST_TO_ADDR
// if h + 7 < height then
42401: LD_VAR 0 13
42405: PUSH
42406: LD_INT 7
42408: PLUS
42409: PUSH
42410: LD_VAR 0 15
42414: LESS
42415: IFFALSE 42444
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42417: LD_ADDR_VAR 0 18
42421: PUSH
42422: LD_INT 7
42424: PUSH
42425: LD_INT 28
42427: PUSH
42428: LD_INT 45
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: PUSH
42436: LD_VAR 0 12
42440: ARRAY
42441: ST_TO_ADDR
// break ;
42442: GO 42446
// end ; end ; end ;
42444: GO 42275
42446: POP
42447: POP
// end ; if not weapon then
42448: LD_VAR 0 18
42452: NOT
42453: IFFALSE 42513
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42455: LD_ADDR_VAR 0 5
42459: PUSH
42460: LD_VAR 0 5
42464: PUSH
42465: LD_INT 11
42467: PUSH
42468: LD_INT 30
42470: PUSH
42471: LD_INT 49
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: DIFF
42479: ST_TO_ADDR
// if not list then
42480: LD_VAR 0 5
42484: NOT
42485: IFFALSE 42489
// exit ;
42487: GO 42631
// weapon := list [ rand ( 1 , list ) ] ;
42489: LD_ADDR_VAR 0 18
42493: PUSH
42494: LD_VAR 0 5
42498: PUSH
42499: LD_INT 1
42501: PPUSH
42502: LD_VAR 0 5
42506: PPUSH
42507: CALL_OW 12
42511: ARRAY
42512: ST_TO_ADDR
// end ; if weapon then
42513: LD_VAR 0 18
42517: IFFALSE 42631
// begin tmp := CostOfWeapon ( weapon ) ;
42519: LD_ADDR_VAR 0 14
42523: PUSH
42524: LD_VAR 0 18
42528: PPUSH
42529: CALL_OW 451
42533: ST_TO_ADDR
// j := GetBase ( tower ) ;
42534: LD_ADDR_VAR 0 9
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 274
42548: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42549: LD_VAR 0 9
42553: PPUSH
42554: LD_INT 1
42556: PPUSH
42557: CALL_OW 275
42561: PUSH
42562: LD_VAR 0 14
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: GREATEREQUAL
42571: PUSH
42572: LD_VAR 0 9
42576: PPUSH
42577: LD_INT 2
42579: PPUSH
42580: CALL_OW 275
42584: PUSH
42585: LD_VAR 0 14
42589: PUSH
42590: LD_INT 2
42592: ARRAY
42593: GREATEREQUAL
42594: AND
42595: PUSH
42596: LD_VAR 0 9
42600: PPUSH
42601: LD_INT 3
42603: PPUSH
42604: CALL_OW 275
42608: PUSH
42609: LD_VAR 0 14
42613: PUSH
42614: LD_INT 3
42616: ARRAY
42617: GREATEREQUAL
42618: AND
42619: IFFALSE 42631
// result := weapon ;
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_VAR 0 18
42630: ST_TO_ADDR
// end ; end ;
42631: LD_VAR 0 3
42635: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42636: LD_INT 0
42638: PPUSH
42639: PPUSH
// result := true ;
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_INT 1
42647: ST_TO_ADDR
// if array1 = array2 then
42648: LD_VAR 0 1
42652: PUSH
42653: LD_VAR 0 2
42657: EQUAL
42658: IFFALSE 42718
// begin for i = 1 to array1 do
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: DOUBLE
42666: LD_INT 1
42668: DEC
42669: ST_TO_ADDR
42670: LD_VAR 0 1
42674: PUSH
42675: FOR_TO
42676: IFFALSE 42714
// if array1 [ i ] <> array2 [ i ] then
42678: LD_VAR 0 1
42682: PUSH
42683: LD_VAR 0 4
42687: ARRAY
42688: PUSH
42689: LD_VAR 0 2
42693: PUSH
42694: LD_VAR 0 4
42698: ARRAY
42699: NONEQUAL
42700: IFFALSE 42712
// begin result := false ;
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 0
42709: ST_TO_ADDR
// break ;
42710: GO 42714
// end ;
42712: GO 42675
42714: POP
42715: POP
// end else
42716: GO 42726
// result := false ;
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: LD_INT 0
42725: ST_TO_ADDR
// end ;
42726: LD_VAR 0 3
42730: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42731: LD_INT 0
42733: PPUSH
42734: PPUSH
42735: PPUSH
// pom := GetBase ( fac ) ;
42736: LD_ADDR_VAR 0 5
42740: PUSH
42741: LD_VAR 0 1
42745: PPUSH
42746: CALL_OW 274
42750: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42751: LD_ADDR_VAR 0 4
42755: PUSH
42756: LD_VAR 0 2
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: LD_VAR 0 2
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 2
42778: PUSH
42779: LD_INT 3
42781: ARRAY
42782: PPUSH
42783: LD_VAR 0 2
42787: PUSH
42788: LD_INT 4
42790: ARRAY
42791: PPUSH
42792: CALL_OW 449
42796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42797: LD_ADDR_VAR 0 3
42801: PUSH
42802: LD_VAR 0 5
42806: PPUSH
42807: LD_INT 1
42809: PPUSH
42810: CALL_OW 275
42814: PUSH
42815: LD_VAR 0 4
42819: PUSH
42820: LD_INT 1
42822: ARRAY
42823: GREATEREQUAL
42824: PUSH
42825: LD_VAR 0 5
42829: PPUSH
42830: LD_INT 2
42832: PPUSH
42833: CALL_OW 275
42837: PUSH
42838: LD_VAR 0 4
42842: PUSH
42843: LD_INT 2
42845: ARRAY
42846: GREATEREQUAL
42847: AND
42848: PUSH
42849: LD_VAR 0 5
42853: PPUSH
42854: LD_INT 3
42856: PPUSH
42857: CALL_OW 275
42861: PUSH
42862: LD_VAR 0 4
42866: PUSH
42867: LD_INT 3
42869: ARRAY
42870: GREATEREQUAL
42871: AND
42872: ST_TO_ADDR
// end ;
42873: LD_VAR 0 3
42877: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42878: LD_INT 0
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
// pom := GetBase ( building ) ;
42884: LD_ADDR_VAR 0 3
42888: PUSH
42889: LD_VAR 0 1
42893: PPUSH
42894: CALL_OW 274
42898: ST_TO_ADDR
// if not pom then
42899: LD_VAR 0 3
42903: NOT
42904: IFFALSE 42908
// exit ;
42906: GO 43078
// btype := GetBType ( building ) ;
42908: LD_ADDR_VAR 0 5
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: CALL_OW 266
42922: ST_TO_ADDR
// if btype = b_armoury then
42923: LD_VAR 0 5
42927: PUSH
42928: LD_INT 4
42930: EQUAL
42931: IFFALSE 42941
// btype := b_barracks ;
42933: LD_ADDR_VAR 0 5
42937: PUSH
42938: LD_INT 5
42940: ST_TO_ADDR
// if btype = b_depot then
42941: LD_VAR 0 5
42945: PUSH
42946: LD_INT 0
42948: EQUAL
42949: IFFALSE 42959
// btype := b_warehouse ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_INT 1
42958: ST_TO_ADDR
// if btype = b_workshop then
42959: LD_VAR 0 5
42963: PUSH
42964: LD_INT 2
42966: EQUAL
42967: IFFALSE 42977
// btype := b_factory ;
42969: LD_ADDR_VAR 0 5
42973: PUSH
42974: LD_INT 3
42976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42977: LD_ADDR_VAR 0 4
42981: PUSH
42982: LD_VAR 0 5
42986: PPUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 248
42996: PPUSH
42997: CALL_OW 450
43001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43002: LD_ADDR_VAR 0 2
43006: PUSH
43007: LD_VAR 0 3
43011: PPUSH
43012: LD_INT 1
43014: PPUSH
43015: CALL_OW 275
43019: PUSH
43020: LD_VAR 0 4
43024: PUSH
43025: LD_INT 1
43027: ARRAY
43028: GREATEREQUAL
43029: PUSH
43030: LD_VAR 0 3
43034: PPUSH
43035: LD_INT 2
43037: PPUSH
43038: CALL_OW 275
43042: PUSH
43043: LD_VAR 0 4
43047: PUSH
43048: LD_INT 2
43050: ARRAY
43051: GREATEREQUAL
43052: AND
43053: PUSH
43054: LD_VAR 0 3
43058: PPUSH
43059: LD_INT 3
43061: PPUSH
43062: CALL_OW 275
43066: PUSH
43067: LD_VAR 0 4
43071: PUSH
43072: LD_INT 3
43074: ARRAY
43075: GREATEREQUAL
43076: AND
43077: ST_TO_ADDR
// end ;
43078: LD_VAR 0 2
43082: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43083: LD_INT 0
43085: PPUSH
43086: PPUSH
43087: PPUSH
// pom := GetBase ( building ) ;
43088: LD_ADDR_VAR 0 4
43092: PUSH
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 274
43102: ST_TO_ADDR
// if not pom then
43103: LD_VAR 0 4
43107: NOT
43108: IFFALSE 43112
// exit ;
43110: GO 43213
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43112: LD_ADDR_VAR 0 5
43116: PUSH
43117: LD_VAR 0 2
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 248
43131: PPUSH
43132: CALL_OW 450
43136: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_VAR 0 4
43146: PPUSH
43147: LD_INT 1
43149: PPUSH
43150: CALL_OW 275
43154: PUSH
43155: LD_VAR 0 5
43159: PUSH
43160: LD_INT 1
43162: ARRAY
43163: GREATEREQUAL
43164: PUSH
43165: LD_VAR 0 4
43169: PPUSH
43170: LD_INT 2
43172: PPUSH
43173: CALL_OW 275
43177: PUSH
43178: LD_VAR 0 5
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: GREATEREQUAL
43187: AND
43188: PUSH
43189: LD_VAR 0 4
43193: PPUSH
43194: LD_INT 3
43196: PPUSH
43197: CALL_OW 275
43201: PUSH
43202: LD_VAR 0 5
43206: PUSH
43207: LD_INT 3
43209: ARRAY
43210: GREATEREQUAL
43211: AND
43212: ST_TO_ADDR
// end ;
43213: LD_VAR 0 3
43217: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43218: LD_INT 0
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
// result := false ;
43230: LD_ADDR_VAR 0 6
43234: PUSH
43235: LD_INT 0
43237: ST_TO_ADDR
// if not base or not btype or not x or not y then
43238: LD_VAR 0 1
43242: NOT
43243: PUSH
43244: LD_VAR 0 2
43248: NOT
43249: OR
43250: PUSH
43251: LD_VAR 0 3
43255: NOT
43256: OR
43257: PUSH
43258: LD_VAR 0 4
43262: NOT
43263: OR
43264: IFFALSE 43268
// exit ;
43266: GO 43877
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43268: LD_ADDR_VAR 0 12
43272: PUSH
43273: LD_VAR 0 2
43277: PPUSH
43278: LD_VAR 0 3
43282: PPUSH
43283: LD_VAR 0 4
43287: PPUSH
43288: LD_VAR 0 5
43292: PPUSH
43293: LD_VAR 0 1
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PPUSH
43302: CALL_OW 248
43306: PPUSH
43307: LD_INT 0
43309: PPUSH
43310: CALL 44714 0 6
43314: ST_TO_ADDR
// if not hexes then
43315: LD_VAR 0 12
43319: NOT
43320: IFFALSE 43324
// exit ;
43322: GO 43877
// for i = 1 to hexes do
43324: LD_ADDR_VAR 0 7
43328: PUSH
43329: DOUBLE
43330: LD_INT 1
43332: DEC
43333: ST_TO_ADDR
43334: LD_VAR 0 12
43338: PUSH
43339: FOR_TO
43340: IFFALSE 43875
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43342: LD_ADDR_VAR 0 11
43346: PUSH
43347: LD_VAR 0 12
43351: PUSH
43352: LD_VAR 0 7
43356: ARRAY
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: PPUSH
43362: LD_VAR 0 12
43366: PUSH
43367: LD_VAR 0 7
43371: ARRAY
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: PPUSH
43377: CALL_OW 428
43381: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43382: LD_VAR 0 12
43386: PUSH
43387: LD_VAR 0 7
43391: ARRAY
43392: PUSH
43393: LD_INT 1
43395: ARRAY
43396: PPUSH
43397: LD_VAR 0 12
43401: PUSH
43402: LD_VAR 0 7
43406: ARRAY
43407: PUSH
43408: LD_INT 2
43410: ARRAY
43411: PPUSH
43412: CALL_OW 351
43416: PUSH
43417: LD_VAR 0 12
43421: PUSH
43422: LD_VAR 0 7
43426: ARRAY
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: PPUSH
43432: LD_VAR 0 12
43436: PUSH
43437: LD_VAR 0 7
43441: ARRAY
43442: PUSH
43443: LD_INT 2
43445: ARRAY
43446: PPUSH
43447: CALL_OW 488
43451: NOT
43452: OR
43453: PUSH
43454: LD_VAR 0 11
43458: PPUSH
43459: CALL_OW 247
43463: PUSH
43464: LD_INT 3
43466: EQUAL
43467: OR
43468: IFFALSE 43474
// exit ;
43470: POP
43471: POP
43472: GO 43877
// if not tmp or not tmp in base then
43474: LD_VAR 0 11
43478: NOT
43479: PUSH
43480: LD_VAR 0 11
43484: PUSH
43485: LD_VAR 0 1
43489: IN
43490: NOT
43491: OR
43492: IFFALSE 43496
// continue ;
43494: GO 43339
// result := true ;
43496: LD_ADDR_VAR 0 6
43500: PUSH
43501: LD_INT 1
43503: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43504: LD_ADDR_VAR 0 15
43508: PUSH
43509: LD_VAR 0 1
43513: PPUSH
43514: LD_INT 22
43516: PUSH
43517: LD_VAR 0 11
43521: PPUSH
43522: CALL_OW 255
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 30
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 30
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PPUSH
43563: CALL_OW 72
43567: ST_TO_ADDR
// if dep then
43568: LD_VAR 0 15
43572: IFFALSE 43708
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43574: LD_ADDR_VAR 0 14
43578: PUSH
43579: LD_VAR 0 15
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: PPUSH
43588: CALL_OW 250
43592: PPUSH
43593: LD_VAR 0 15
43597: PUSH
43598: LD_INT 1
43600: ARRAY
43601: PPUSH
43602: CALL_OW 254
43606: PPUSH
43607: LD_INT 5
43609: PPUSH
43610: CALL_OW 272
43614: PUSH
43615: LD_VAR 0 15
43619: PUSH
43620: LD_INT 1
43622: ARRAY
43623: PPUSH
43624: CALL_OW 251
43628: PPUSH
43629: LD_VAR 0 15
43633: PUSH
43634: LD_INT 1
43636: ARRAY
43637: PPUSH
43638: CALL_OW 254
43642: PPUSH
43643: LD_INT 5
43645: PPUSH
43646: CALL_OW 273
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43655: LD_VAR 0 14
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PPUSH
43664: LD_VAR 0 14
43668: PUSH
43669: LD_INT 2
43671: ARRAY
43672: PPUSH
43673: CALL_OW 488
43677: IFFALSE 43708
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43679: LD_VAR 0 11
43683: PPUSH
43684: LD_VAR 0 14
43688: PUSH
43689: LD_INT 1
43691: ARRAY
43692: PPUSH
43693: LD_VAR 0 14
43697: PUSH
43698: LD_INT 2
43700: ARRAY
43701: PPUSH
43702: CALL_OW 111
// continue ;
43706: GO 43339
// end ; end ; r := GetDir ( tmp ) ;
43708: LD_ADDR_VAR 0 13
43712: PUSH
43713: LD_VAR 0 11
43717: PPUSH
43718: CALL_OW 254
43722: ST_TO_ADDR
// if r = 5 then
43723: LD_VAR 0 13
43727: PUSH
43728: LD_INT 5
43730: EQUAL
43731: IFFALSE 43741
// r := 0 ;
43733: LD_ADDR_VAR 0 13
43737: PUSH
43738: LD_INT 0
43740: ST_TO_ADDR
// for j = r to 5 do
43741: LD_ADDR_VAR 0 8
43745: PUSH
43746: DOUBLE
43747: LD_VAR 0 13
43751: DEC
43752: ST_TO_ADDR
43753: LD_INT 5
43755: PUSH
43756: FOR_TO
43757: IFFALSE 43871
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43759: LD_ADDR_VAR 0 9
43763: PUSH
43764: LD_VAR 0 11
43768: PPUSH
43769: CALL_OW 250
43773: PPUSH
43774: LD_VAR 0 8
43778: PPUSH
43779: LD_INT 2
43781: PPUSH
43782: CALL_OW 272
43786: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43787: LD_ADDR_VAR 0 10
43791: PUSH
43792: LD_VAR 0 11
43796: PPUSH
43797: CALL_OW 251
43801: PPUSH
43802: LD_VAR 0 8
43806: PPUSH
43807: LD_INT 2
43809: PPUSH
43810: CALL_OW 273
43814: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43815: LD_VAR 0 9
43819: PPUSH
43820: LD_VAR 0 10
43824: PPUSH
43825: CALL_OW 488
43829: PUSH
43830: LD_VAR 0 9
43834: PPUSH
43835: LD_VAR 0 10
43839: PPUSH
43840: CALL_OW 428
43844: NOT
43845: AND
43846: IFFALSE 43869
// begin ComMoveXY ( tmp , _x , _y ) ;
43848: LD_VAR 0 11
43852: PPUSH
43853: LD_VAR 0 9
43857: PPUSH
43858: LD_VAR 0 10
43862: PPUSH
43863: CALL_OW 111
// break ;
43867: GO 43871
// end ; end ;
43869: GO 43756
43871: POP
43872: POP
// end ;
43873: GO 43339
43875: POP
43876: POP
// end ;
43877: LD_VAR 0 6
43881: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43882: LD_INT 0
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
// result := false ;
43894: LD_ADDR_VAR 0 6
43898: PUSH
43899: LD_INT 0
43901: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43902: LD_VAR 0 1
43906: NOT
43907: PUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 266
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: IN
43928: NOT
43929: OR
43930: PUSH
43931: LD_VAR 0 2
43935: NOT
43936: OR
43937: PUSH
43938: LD_VAR 0 5
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 5
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: IN
43969: NOT
43970: OR
43971: PUSH
43972: LD_VAR 0 3
43976: PPUSH
43977: LD_VAR 0 4
43981: PPUSH
43982: CALL_OW 488
43986: NOT
43987: OR
43988: IFFALSE 43992
// exit ;
43990: GO 44709
// pom := GetBase ( depot ) ;
43992: LD_ADDR_VAR 0 10
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 274
44006: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44007: LD_ADDR_VAR 0 11
44011: PUSH
44012: LD_VAR 0 2
44016: PPUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 248
44026: PPUSH
44027: CALL_OW 450
44031: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44032: LD_VAR 0 10
44036: PPUSH
44037: LD_INT 1
44039: PPUSH
44040: CALL_OW 275
44044: PUSH
44045: LD_VAR 0 11
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: GREATEREQUAL
44054: PUSH
44055: LD_VAR 0 10
44059: PPUSH
44060: LD_INT 2
44062: PPUSH
44063: CALL_OW 275
44067: PUSH
44068: LD_VAR 0 11
44072: PUSH
44073: LD_INT 2
44075: ARRAY
44076: GREATEREQUAL
44077: AND
44078: PUSH
44079: LD_VAR 0 10
44083: PPUSH
44084: LD_INT 3
44086: PPUSH
44087: CALL_OW 275
44091: PUSH
44092: LD_VAR 0 11
44096: PUSH
44097: LD_INT 3
44099: ARRAY
44100: GREATEREQUAL
44101: AND
44102: NOT
44103: IFFALSE 44107
// exit ;
44105: GO 44709
// if GetBType ( depot ) = b_depot then
44107: LD_VAR 0 1
44111: PPUSH
44112: CALL_OW 266
44116: PUSH
44117: LD_INT 0
44119: EQUAL
44120: IFFALSE 44132
// dist := 28 else
44122: LD_ADDR_VAR 0 14
44126: PUSH
44127: LD_INT 28
44129: ST_TO_ADDR
44130: GO 44140
// dist := 36 ;
44132: LD_ADDR_VAR 0 14
44136: PUSH
44137: LD_INT 36
44139: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44140: LD_VAR 0 1
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 297
44159: PUSH
44160: LD_VAR 0 14
44164: GREATER
44165: IFFALSE 44169
// exit ;
44167: GO 44709
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44169: LD_ADDR_VAR 0 12
44173: PUSH
44174: LD_VAR 0 2
44178: PPUSH
44179: LD_VAR 0 3
44183: PPUSH
44184: LD_VAR 0 4
44188: PPUSH
44189: LD_VAR 0 5
44193: PPUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 248
44203: PPUSH
44204: LD_INT 0
44206: PPUSH
44207: CALL 44714 0 6
44211: ST_TO_ADDR
// if not hexes then
44212: LD_VAR 0 12
44216: NOT
44217: IFFALSE 44221
// exit ;
44219: GO 44709
// hex := GetHexInfo ( x , y ) ;
44221: LD_ADDR_VAR 0 15
44225: PUSH
44226: LD_VAR 0 3
44230: PPUSH
44231: LD_VAR 0 4
44235: PPUSH
44236: CALL_OW 546
44240: ST_TO_ADDR
// if hex [ 1 ] then
44241: LD_VAR 0 15
44245: PUSH
44246: LD_INT 1
44248: ARRAY
44249: IFFALSE 44253
// exit ;
44251: GO 44709
// height := hex [ 2 ] ;
44253: LD_ADDR_VAR 0 13
44257: PUSH
44258: LD_VAR 0 15
44262: PUSH
44263: LD_INT 2
44265: ARRAY
44266: ST_TO_ADDR
// for i = 1 to hexes do
44267: LD_ADDR_VAR 0 7
44271: PUSH
44272: DOUBLE
44273: LD_INT 1
44275: DEC
44276: ST_TO_ADDR
44277: LD_VAR 0 12
44281: PUSH
44282: FOR_TO
44283: IFFALSE 44613
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44285: LD_VAR 0 12
44289: PUSH
44290: LD_VAR 0 7
44294: ARRAY
44295: PUSH
44296: LD_INT 1
44298: ARRAY
44299: PPUSH
44300: LD_VAR 0 12
44304: PUSH
44305: LD_VAR 0 7
44309: ARRAY
44310: PUSH
44311: LD_INT 2
44313: ARRAY
44314: PPUSH
44315: CALL_OW 488
44319: NOT
44320: PUSH
44321: LD_VAR 0 12
44325: PUSH
44326: LD_VAR 0 7
44330: ARRAY
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: LD_VAR 0 12
44340: PUSH
44341: LD_VAR 0 7
44345: ARRAY
44346: PUSH
44347: LD_INT 2
44349: ARRAY
44350: PPUSH
44351: CALL_OW 428
44355: PUSH
44356: LD_INT 0
44358: GREATER
44359: OR
44360: PUSH
44361: LD_VAR 0 12
44365: PUSH
44366: LD_VAR 0 7
44370: ARRAY
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 12
44380: PUSH
44381: LD_VAR 0 7
44385: ARRAY
44386: PUSH
44387: LD_INT 2
44389: ARRAY
44390: PPUSH
44391: CALL_OW 351
44395: OR
44396: IFFALSE 44402
// exit ;
44398: POP
44399: POP
44400: GO 44709
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44402: LD_ADDR_VAR 0 8
44406: PUSH
44407: LD_VAR 0 12
44411: PUSH
44412: LD_VAR 0 7
44416: ARRAY
44417: PUSH
44418: LD_INT 1
44420: ARRAY
44421: PPUSH
44422: LD_VAR 0 12
44426: PUSH
44427: LD_VAR 0 7
44431: ARRAY
44432: PUSH
44433: LD_INT 2
44435: ARRAY
44436: PPUSH
44437: CALL_OW 546
44441: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44442: LD_VAR 0 8
44446: PUSH
44447: LD_INT 1
44449: ARRAY
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: LD_INT 2
44458: ARRAY
44459: PUSH
44460: LD_VAR 0 13
44464: PUSH
44465: LD_INT 2
44467: PLUS
44468: GREATER
44469: OR
44470: PUSH
44471: LD_VAR 0 8
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: PUSH
44480: LD_VAR 0 13
44484: PUSH
44485: LD_INT 2
44487: MINUS
44488: LESS
44489: OR
44490: PUSH
44491: LD_VAR 0 8
44495: PUSH
44496: LD_INT 3
44498: ARRAY
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 8
44505: PUSH
44506: LD_INT 9
44508: PUSH
44509: LD_INT 10
44511: PUSH
44512: LD_INT 11
44514: PUSH
44515: LD_INT 12
44517: PUSH
44518: LD_INT 13
44520: PUSH
44521: LD_INT 16
44523: PUSH
44524: LD_INT 17
44526: PUSH
44527: LD_INT 18
44529: PUSH
44530: LD_INT 19
44532: PUSH
44533: LD_INT 20
44535: PUSH
44536: LD_INT 21
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: IN
44554: NOT
44555: OR
44556: PUSH
44557: LD_VAR 0 8
44561: PUSH
44562: LD_INT 5
44564: ARRAY
44565: NOT
44566: OR
44567: PUSH
44568: LD_VAR 0 8
44572: PUSH
44573: LD_INT 6
44575: ARRAY
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 7
44585: PUSH
44586: LD_INT 9
44588: PUSH
44589: LD_INT 10
44591: PUSH
44592: LD_INT 11
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: IN
44603: NOT
44604: OR
44605: IFFALSE 44611
// exit ;
44607: POP
44608: POP
44609: GO 44709
// end ;
44611: GO 44282
44613: POP
44614: POP
// side := GetSide ( depot ) ;
44615: LD_ADDR_VAR 0 9
44619: PUSH
44620: LD_VAR 0 1
44624: PPUSH
44625: CALL_OW 255
44629: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44630: LD_VAR 0 9
44634: PPUSH
44635: LD_VAR 0 3
44639: PPUSH
44640: LD_VAR 0 4
44644: PPUSH
44645: LD_INT 20
44647: PPUSH
44648: CALL 37363 0 4
44652: PUSH
44653: LD_INT 4
44655: ARRAY
44656: IFFALSE 44660
// exit ;
44658: GO 44709
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44660: LD_VAR 0 2
44664: PUSH
44665: LD_INT 29
44667: PUSH
44668: LD_INT 30
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: IN
44675: PUSH
44676: LD_VAR 0 3
44680: PPUSH
44681: LD_VAR 0 4
44685: PPUSH
44686: LD_VAR 0 9
44690: PPUSH
44691: CALL_OW 440
44695: NOT
44696: AND
44697: IFFALSE 44701
// exit ;
44699: GO 44709
// result := true ;
44701: LD_ADDR_VAR 0 6
44705: PUSH
44706: LD_INT 1
44708: ST_TO_ADDR
// end ;
44709: LD_VAR 0 6
44713: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44714: LD_INT 0
44716: PPUSH
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
44730: PPUSH
44731: PPUSH
44732: PPUSH
44733: PPUSH
44734: PPUSH
44735: PPUSH
44736: PPUSH
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
// result = [ ] ;
44774: LD_ADDR_VAR 0 7
44778: PUSH
44779: EMPTY
44780: ST_TO_ADDR
// temp_list = [ ] ;
44781: LD_ADDR_VAR 0 9
44785: PUSH
44786: EMPTY
44787: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44788: LD_VAR 0 4
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: LD_INT 4
44807: PUSH
44808: LD_INT 5
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: IN
44819: NOT
44820: PUSH
44821: LD_VAR 0 1
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: IN
44836: PUSH
44837: LD_VAR 0 5
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: IN
44856: NOT
44857: AND
44858: OR
44859: IFFALSE 44863
// exit ;
44861: GO 63254
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 6
44870: PUSH
44871: LD_INT 7
44873: PUSH
44874: LD_INT 8
44876: PUSH
44877: LD_INT 13
44879: PUSH
44880: LD_INT 12
44882: PUSH
44883: LD_INT 15
44885: PUSH
44886: LD_INT 11
44888: PUSH
44889: LD_INT 14
44891: PUSH
44892: LD_INT 10
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: IN
44906: IFFALSE 44916
// btype = b_lab ;
44908: LD_ADDR_VAR 0 1
44912: PUSH
44913: LD_INT 6
44915: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44916: LD_VAR 0 6
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: IN
44935: NOT
44936: PUSH
44937: LD_VAR 0 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 6
44956: PUSH
44957: LD_INT 36
44959: PUSH
44960: LD_INT 4
44962: PUSH
44963: LD_INT 5
44965: PUSH
44966: LD_INT 31
44968: PUSH
44969: LD_INT 32
44971: PUSH
44972: LD_INT 33
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: IN
44988: NOT
44989: PUSH
44990: LD_VAR 0 6
44994: PUSH
44995: LD_INT 1
44997: EQUAL
44998: AND
44999: OR
45000: PUSH
45001: LD_VAR 0 1
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: IN
45016: NOT
45017: PUSH
45018: LD_VAR 0 6
45022: PUSH
45023: LD_INT 2
45025: EQUAL
45026: AND
45027: OR
45028: IFFALSE 45038
// mode = 0 ;
45030: LD_ADDR_VAR 0 6
45034: PUSH
45035: LD_INT 0
45037: ST_TO_ADDR
// case mode of 0 :
45038: LD_VAR 0 6
45042: PUSH
45043: LD_INT 0
45045: DOUBLE
45046: EQUAL
45047: IFTRUE 45051
45049: GO 56504
45051: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45052: LD_ADDR_VAR 0 11
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45245: LD_ADDR_VAR 0 12
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45441: LD_ADDR_VAR 0 13
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 3
45612: NEG
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45640: LD_ADDR_VAR 0 14
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45836: LD_ADDR_VAR 0 15
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46029: LD_ADDR_VAR 0 16
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46222: LD_ADDR_VAR 0 17
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46452: LD_ADDR_VAR 0 18
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46682: LD_ADDR_VAR 0 19
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46912: LD_ADDR_VAR 0 20
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47142: LD_ADDR_VAR 0 21
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47372: LD_ADDR_VAR 0 22
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47602: LD_ADDR_VAR 0 23
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 3
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47882: LD_ADDR_VAR 0 24
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 3
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48158: LD_ADDR_VAR 0 25
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48432: LD_ADDR_VAR 0 26
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48708: LD_ADDR_VAR 0 27
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48988: LD_ADDR_VAR 0 28
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49270: LD_ADDR_VAR 0 29
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49549: LD_ADDR_VAR 0 30
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49827: LD_ADDR_VAR 0 31
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50105: LD_ADDR_VAR 0 32
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50383: LD_ADDR_VAR 0 33
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50662: LD_ADDR_VAR 0 34
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50942: LD_ADDR_VAR 0 35
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51054: LD_ADDR_VAR 0 36
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51166: LD_ADDR_VAR 0 37
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51278: LD_ADDR_VAR 0 38
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51390: LD_ADDR_VAR 0 39
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51502: LD_ADDR_VAR 0 40
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51614: LD_ADDR_VAR 0 41
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51964: LD_ADDR_VAR 0 42
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52314: LD_ADDR_VAR 0 43
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52662: LD_ADDR_VAR 0 44
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: LD_INT 3
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53012: LD_ADDR_VAR 0 45
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 3
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53362: LD_ADDR_VAR 0 46
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53710: LD_ADDR_VAR 0 47
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53861: LD_ADDR_VAR 0 48
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54008: LD_ADDR_VAR 0 49
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54152: LD_ADDR_VAR 0 50
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54296: LD_ADDR_VAR 0 51
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54443: LD_ADDR_VAR 0 52
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54594: LD_ADDR_VAR 0 53
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54824: LD_ADDR_VAR 0 54
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55054: LD_ADDR_VAR 0 55
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55284: LD_ADDR_VAR 0 56
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55514: LD_ADDR_VAR 0 57
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55744: LD_ADDR_VAR 0 58
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55974: LD_ADDR_VAR 0 59
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56062: LD_ADDR_VAR 0 60
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56150: LD_ADDR_VAR 0 61
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56238: LD_ADDR_VAR 0 62
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56326: LD_ADDR_VAR 0 63
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56414: LD_ADDR_VAR 0 64
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// end ; 1 :
56502: GO 62399
56504: LD_INT 1
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56512
56510: GO 59135
56512: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56513: LD_ADDR_VAR 0 11
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56557: LD_ADDR_VAR 0 12
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56598: LD_ADDR_VAR 0 13
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56638: LD_ADDR_VAR 0 14
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56679: LD_ADDR_VAR 0 15
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56723: LD_ADDR_VAR 0 16
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56769: LD_ADDR_VAR 0 17
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56813: LD_ADDR_VAR 0 18
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56854: LD_ADDR_VAR 0 19
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56894: LD_ADDR_VAR 0 20
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56935: LD_ADDR_VAR 0 21
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56979: LD_ADDR_VAR 0 22
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 3
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57025: LD_ADDR_VAR 0 23
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57069: LD_ADDR_VAR 0 24
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57110: LD_ADDR_VAR 0 25
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 4
57127: PUSH
57128: LD_INT 3
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: LD_INT 4
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57150: LD_ADDR_VAR 0 26
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 3
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 4
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57191: LD_ADDR_VAR 0 27
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57235: LD_ADDR_VAR 0 28
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 4
57266: NEG
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57281: LD_ADDR_VAR 0 29
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 4
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 5
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 5
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 4
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 6
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 6
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 5
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57436: LD_ADDR_VAR 0 30
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 4
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 5
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 6
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 6
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57579: LD_ADDR_VAR 0 31
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 4
57626: PUSH
57627: LD_INT 4
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 5
57656: PUSH
57657: LD_INT 5
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: LD_INT 5
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 6
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 6
57686: PUSH
57687: LD_INT 6
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 5
57696: PUSH
57697: LD_INT 6
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57718: LD_ADDR_VAR 0 32
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 4
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 5
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 5
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: LD_INT 6
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 6
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 5
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57861: LD_ADDR_VAR 0 33
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 4
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 5
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 5
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 6
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 6
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58016: LD_ADDR_VAR 0 34
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 4
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: LD_INT 4
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: LD_INT 5
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 5
58107: NEG
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 5
58119: NEG
58120: PUSH
58121: LD_INT 5
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 5
58131: NEG
58132: PUSH
58133: LD_INT 6
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 6
58143: NEG
58144: PUSH
58145: LD_INT 5
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 6
58155: NEG
58156: PUSH
58157: LD_INT 6
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58179: LD_ADDR_VAR 0 41
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58223: LD_ADDR_VAR 0 42
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58264: LD_ADDR_VAR 0 43
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58304: LD_ADDR_VAR 0 44
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58345: LD_ADDR_VAR 0 45
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58389: LD_ADDR_VAR 0 46
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58435: LD_ADDR_VAR 0 47
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58468: LD_ADDR_VAR 0 48
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58499: LD_ADDR_VAR 0 49
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58528: LD_ADDR_VAR 0 50
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58557: LD_ADDR_VAR 0 51
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58588: LD_ADDR_VAR 0 52
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58621: LD_ADDR_VAR 0 53
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58665: LD_ADDR_VAR 0 54
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: LIST
58705: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58706: LD_ADDR_VAR 0 55
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58746: LD_ADDR_VAR 0 56
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58787: LD_ADDR_VAR 0 57
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58831: LD_ADDR_VAR 0 58
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58877: LD_ADDR_VAR 0 59
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: LIST
58920: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58921: LD_ADDR_VAR 0 60
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58962: LD_ADDR_VAR 0 61
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59002: LD_ADDR_VAR 0 62
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59043: LD_ADDR_VAR 0 63
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59087: LD_ADDR_VAR 0 64
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// end ; 2 :
59133: GO 62399
59135: LD_INT 2
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59143
59141: GO 62398
59143: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59144: LD_ADDR_VAR 0 29
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 5
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 5
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: LD_INT 4
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 4
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 5
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 5
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: LD_INT 4
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 4
59541: NEG
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 4
59577: NEG
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: NEG
59590: PUSH
59591: LD_INT 4
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 5
59601: NEG
59602: PUSH
59603: LD_INT 5
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59682: LD_ADDR_VAR 0 30
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 4
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 5
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 5
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: LD_INT 5
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 4
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 5
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 5
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 5
59951: NEG
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 3
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: NEG
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: LD_INT 3
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: LD_INT 4
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 5
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: LD_INT 5
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: LD_INT 5
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60229: LD_ADDR_VAR 0 31
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 4
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: NEG
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 4
60431: NEG
60432: PUSH
60433: LD_INT 4
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 4
60443: NEG
60444: PUSH
60445: LD_INT 5
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 4
60479: NEG
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: NEG
60492: PUSH
60493: LD_INT 4
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 5
60503: NEG
60504: PUSH
60505: LD_INT 5
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: LD_INT 5
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 5
60527: NEG
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 3
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 4
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: LD_INT 4
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 5
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 5
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60779: LD_ADDR_VAR 0 32
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 5
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 5
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: LD_INT 4
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: LD_INT 4
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 4
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 4
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 5
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: LD_INT 5
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 4
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 4
61191: PUSH
61192: LD_INT 4
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 5
61211: PUSH
61212: LD_INT 4
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: LD_INT 5
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: LD_INT 5
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: LD_INT 4
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 3
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 5
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: PUSH
61272: LD_INT 5
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61326: LD_ADDR_VAR 0 33
61330: PUSH
61331: LD_INT 4
61333: NEG
61334: PUSH
61335: LD_INT 4
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 4
61345: NEG
61346: PUSH
61347: LD_INT 5
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: LD_INT 3
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 4
61381: NEG
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 5
61393: NEG
61394: PUSH
61395: LD_INT 4
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 5
61405: NEG
61406: PUSH
61407: LD_INT 5
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: LD_INT 5
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 5
61429: NEG
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 4
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 4
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 4
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 5
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 5
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 5
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 4
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: PUSH
61667: LD_INT 4
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 4
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 4
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 5
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 5
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 4
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: LD_INT 5
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61864: LD_ADDR_VAR 0 34
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 4
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 5
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 4
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 3
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 5
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 5
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 4
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 4
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 5
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 5
62096: PUSH
62097: LD_INT 5
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 4
62106: PUSH
62107: LD_INT 5
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 5
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: LD_INT 5
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 4
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: LD_INT 4
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 4
62249: NEG
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 4
62260: NEG
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 4
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 5
62305: NEG
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 5
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 5
62328: NEG
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// end ; end ;
62396: GO 62399
62398: POP
// case btype of b_depot , b_warehouse :
62399: LD_VAR 0 1
62403: PUSH
62404: LD_INT 0
62406: DOUBLE
62407: EQUAL
62408: IFTRUE 62418
62410: LD_INT 1
62412: DOUBLE
62413: EQUAL
62414: IFTRUE 62418
62416: GO 62619
62418: POP
// case nation of nation_american :
62419: LD_VAR 0 5
62423: PUSH
62424: LD_INT 1
62426: DOUBLE
62427: EQUAL
62428: IFTRUE 62432
62430: GO 62488
62432: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
62433: LD_ADDR_VAR 0 9
62437: PUSH
62438: LD_VAR 0 11
62442: PUSH
62443: LD_VAR 0 12
62447: PUSH
62448: LD_VAR 0 13
62452: PUSH
62453: LD_VAR 0 14
62457: PUSH
62458: LD_VAR 0 15
62462: PUSH
62463: LD_VAR 0 16
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 4
62480: PUSH
62481: LD_INT 1
62483: PLUS
62484: ARRAY
62485: ST_TO_ADDR
62486: GO 62617
62488: LD_INT 2
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62496
62494: GO 62552
62496: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
62497: LD_ADDR_VAR 0 9
62501: PUSH
62502: LD_VAR 0 17
62506: PUSH
62507: LD_VAR 0 18
62511: PUSH
62512: LD_VAR 0 19
62516: PUSH
62517: LD_VAR 0 20
62521: PUSH
62522: LD_VAR 0 21
62526: PUSH
62527: LD_VAR 0 22
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: PUSH
62540: LD_VAR 0 4
62544: PUSH
62545: LD_INT 1
62547: PLUS
62548: ARRAY
62549: ST_TO_ADDR
62550: GO 62617
62552: LD_INT 3
62554: DOUBLE
62555: EQUAL
62556: IFTRUE 62560
62558: GO 62616
62560: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62561: LD_ADDR_VAR 0 9
62565: PUSH
62566: LD_VAR 0 23
62570: PUSH
62571: LD_VAR 0 24
62575: PUSH
62576: LD_VAR 0 25
62580: PUSH
62581: LD_VAR 0 26
62585: PUSH
62586: LD_VAR 0 27
62590: PUSH
62591: LD_VAR 0 28
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: PUSH
62604: LD_VAR 0 4
62608: PUSH
62609: LD_INT 1
62611: PLUS
62612: ARRAY
62613: ST_TO_ADDR
62614: GO 62617
62616: POP
62617: GO 63172
62619: LD_INT 2
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62633
62625: LD_INT 3
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62633
62631: GO 62689
62633: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62634: LD_ADDR_VAR 0 9
62638: PUSH
62639: LD_VAR 0 29
62643: PUSH
62644: LD_VAR 0 30
62648: PUSH
62649: LD_VAR 0 31
62653: PUSH
62654: LD_VAR 0 32
62658: PUSH
62659: LD_VAR 0 33
62663: PUSH
62664: LD_VAR 0 34
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 4
62681: PUSH
62682: LD_INT 1
62684: PLUS
62685: ARRAY
62686: ST_TO_ADDR
62687: GO 63172
62689: LD_INT 16
62691: DOUBLE
62692: EQUAL
62693: IFTRUE 62751
62695: LD_INT 17
62697: DOUBLE
62698: EQUAL
62699: IFTRUE 62751
62701: LD_INT 18
62703: DOUBLE
62704: EQUAL
62705: IFTRUE 62751
62707: LD_INT 19
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62751
62713: LD_INT 22
62715: DOUBLE
62716: EQUAL
62717: IFTRUE 62751
62719: LD_INT 20
62721: DOUBLE
62722: EQUAL
62723: IFTRUE 62751
62725: LD_INT 21
62727: DOUBLE
62728: EQUAL
62729: IFTRUE 62751
62731: LD_INT 23
62733: DOUBLE
62734: EQUAL
62735: IFTRUE 62751
62737: LD_INT 24
62739: DOUBLE
62740: EQUAL
62741: IFTRUE 62751
62743: LD_INT 25
62745: DOUBLE
62746: EQUAL
62747: IFTRUE 62751
62749: GO 62807
62751: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62752: LD_ADDR_VAR 0 9
62756: PUSH
62757: LD_VAR 0 35
62761: PUSH
62762: LD_VAR 0 36
62766: PUSH
62767: LD_VAR 0 37
62771: PUSH
62772: LD_VAR 0 38
62776: PUSH
62777: LD_VAR 0 39
62781: PUSH
62782: LD_VAR 0 40
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: PUSH
62795: LD_VAR 0 4
62799: PUSH
62800: LD_INT 1
62802: PLUS
62803: ARRAY
62804: ST_TO_ADDR
62805: GO 63172
62807: LD_INT 6
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62863
62813: LD_INT 7
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62863
62819: LD_INT 8
62821: DOUBLE
62822: EQUAL
62823: IFTRUE 62863
62825: LD_INT 13
62827: DOUBLE
62828: EQUAL
62829: IFTRUE 62863
62831: LD_INT 12
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62863
62837: LD_INT 15
62839: DOUBLE
62840: EQUAL
62841: IFTRUE 62863
62843: LD_INT 11
62845: DOUBLE
62846: EQUAL
62847: IFTRUE 62863
62849: LD_INT 14
62851: DOUBLE
62852: EQUAL
62853: IFTRUE 62863
62855: LD_INT 10
62857: DOUBLE
62858: EQUAL
62859: IFTRUE 62863
62861: GO 62919
62863: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62864: LD_ADDR_VAR 0 9
62868: PUSH
62869: LD_VAR 0 41
62873: PUSH
62874: LD_VAR 0 42
62878: PUSH
62879: LD_VAR 0 43
62883: PUSH
62884: LD_VAR 0 44
62888: PUSH
62889: LD_VAR 0 45
62893: PUSH
62894: LD_VAR 0 46
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: PUSH
62907: LD_VAR 0 4
62911: PUSH
62912: LD_INT 1
62914: PLUS
62915: ARRAY
62916: ST_TO_ADDR
62917: GO 63172
62919: LD_INT 36
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 62983
62927: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62928: LD_ADDR_VAR 0 9
62932: PUSH
62933: LD_VAR 0 47
62937: PUSH
62938: LD_VAR 0 48
62942: PUSH
62943: LD_VAR 0 49
62947: PUSH
62948: LD_VAR 0 50
62952: PUSH
62953: LD_VAR 0 51
62957: PUSH
62958: LD_VAR 0 52
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: PUSH
62971: LD_VAR 0 4
62975: PUSH
62976: LD_INT 1
62978: PLUS
62979: ARRAY
62980: ST_TO_ADDR
62981: GO 63172
62983: LD_INT 4
62985: DOUBLE
62986: EQUAL
62987: IFTRUE 63009
62989: LD_INT 5
62991: DOUBLE
62992: EQUAL
62993: IFTRUE 63009
62995: LD_INT 34
62997: DOUBLE
62998: EQUAL
62999: IFTRUE 63009
63001: LD_INT 37
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63009
63007: GO 63065
63009: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63010: LD_ADDR_VAR 0 9
63014: PUSH
63015: LD_VAR 0 53
63019: PUSH
63020: LD_VAR 0 54
63024: PUSH
63025: LD_VAR 0 55
63029: PUSH
63030: LD_VAR 0 56
63034: PUSH
63035: LD_VAR 0 57
63039: PUSH
63040: LD_VAR 0 58
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: PUSH
63053: LD_VAR 0 4
63057: PUSH
63058: LD_INT 1
63060: PLUS
63061: ARRAY
63062: ST_TO_ADDR
63063: GO 63172
63065: LD_INT 31
63067: DOUBLE
63068: EQUAL
63069: IFTRUE 63115
63071: LD_INT 32
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63115
63077: LD_INT 33
63079: DOUBLE
63080: EQUAL
63081: IFTRUE 63115
63083: LD_INT 27
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63115
63089: LD_INT 26
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63115
63095: LD_INT 28
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63115
63101: LD_INT 29
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63115
63107: LD_INT 30
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63115
63113: GO 63171
63115: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
63116: LD_ADDR_VAR 0 9
63120: PUSH
63121: LD_VAR 0 59
63125: PUSH
63126: LD_VAR 0 60
63130: PUSH
63131: LD_VAR 0 61
63135: PUSH
63136: LD_VAR 0 62
63140: PUSH
63141: LD_VAR 0 63
63145: PUSH
63146: LD_VAR 0 64
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: PUSH
63159: LD_VAR 0 4
63163: PUSH
63164: LD_INT 1
63166: PLUS
63167: ARRAY
63168: ST_TO_ADDR
63169: GO 63172
63171: POP
// temp_list2 = [ ] ;
63172: LD_ADDR_VAR 0 10
63176: PUSH
63177: EMPTY
63178: ST_TO_ADDR
// for i in temp_list do
63179: LD_ADDR_VAR 0 8
63183: PUSH
63184: LD_VAR 0 9
63188: PUSH
63189: FOR_IN
63190: IFFALSE 63242
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63192: LD_ADDR_VAR 0 10
63196: PUSH
63197: LD_VAR 0 10
63201: PUSH
63202: LD_VAR 0 8
63206: PUSH
63207: LD_INT 1
63209: ARRAY
63210: PUSH
63211: LD_VAR 0 2
63215: PLUS
63216: PUSH
63217: LD_VAR 0 8
63221: PUSH
63222: LD_INT 2
63224: ARRAY
63225: PUSH
63226: LD_VAR 0 3
63230: PLUS
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: ADD
63239: ST_TO_ADDR
63240: GO 63189
63242: POP
63243: POP
// result = temp_list2 ;
63244: LD_ADDR_VAR 0 7
63248: PUSH
63249: LD_VAR 0 10
63253: ST_TO_ADDR
// end ;
63254: LD_VAR 0 7
63258: RET
// export function EnemyInRange ( unit , dist ) ; begin
63259: LD_INT 0
63261: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63262: LD_ADDR_VAR 0 3
63266: PUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: CALL_OW 255
63276: PPUSH
63277: LD_VAR 0 1
63281: PPUSH
63282: CALL_OW 250
63286: PPUSH
63287: LD_VAR 0 1
63291: PPUSH
63292: CALL_OW 251
63296: PPUSH
63297: LD_VAR 0 2
63301: PPUSH
63302: CALL 37363 0 4
63306: PUSH
63307: LD_INT 4
63309: ARRAY
63310: ST_TO_ADDR
// end ;
63311: LD_VAR 0 3
63315: RET
// export function PlayerSeeMe ( unit ) ; begin
63316: LD_INT 0
63318: PPUSH
// result := See ( your_side , unit ) ;
63319: LD_ADDR_VAR 0 2
63323: PUSH
63324: LD_OWVAR 2
63328: PPUSH
63329: LD_VAR 0 1
63333: PPUSH
63334: CALL_OW 292
63338: ST_TO_ADDR
// end ;
63339: LD_VAR 0 2
63343: RET
// export function ReverseDir ( unit ) ; begin
63344: LD_INT 0
63346: PPUSH
// if not unit then
63347: LD_VAR 0 1
63351: NOT
63352: IFFALSE 63356
// exit ;
63354: GO 63379
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63356: LD_ADDR_VAR 0 2
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 254
63370: PUSH
63371: LD_INT 3
63373: PLUS
63374: PUSH
63375: LD_INT 6
63377: MOD
63378: ST_TO_ADDR
// end ;
63379: LD_VAR 0 2
63383: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63384: LD_INT 0
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
// if not hexes then
63391: LD_VAR 0 2
63395: NOT
63396: IFFALSE 63400
// exit ;
63398: GO 63548
// dist := 9999 ;
63400: LD_ADDR_VAR 0 5
63404: PUSH
63405: LD_INT 9999
63407: ST_TO_ADDR
// for i = 1 to hexes do
63408: LD_ADDR_VAR 0 4
63412: PUSH
63413: DOUBLE
63414: LD_INT 1
63416: DEC
63417: ST_TO_ADDR
63418: LD_VAR 0 2
63422: PUSH
63423: FOR_TO
63424: IFFALSE 63536
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63426: LD_VAR 0 1
63430: PPUSH
63431: LD_VAR 0 2
63435: PUSH
63436: LD_VAR 0 4
63440: ARRAY
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: PPUSH
63446: LD_VAR 0 2
63450: PUSH
63451: LD_VAR 0 4
63455: ARRAY
63456: PUSH
63457: LD_INT 2
63459: ARRAY
63460: PPUSH
63461: CALL_OW 297
63465: PUSH
63466: LD_VAR 0 5
63470: LESS
63471: IFFALSE 63534
// begin hex := hexes [ i ] ;
63473: LD_ADDR_VAR 0 7
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: LD_VAR 0 4
63487: ARRAY
63488: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63489: LD_ADDR_VAR 0 5
63493: PUSH
63494: LD_VAR 0 1
63498: PPUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_VAR 0 4
63508: ARRAY
63509: PUSH
63510: LD_INT 1
63512: ARRAY
63513: PPUSH
63514: LD_VAR 0 2
63518: PUSH
63519: LD_VAR 0 4
63523: ARRAY
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: PPUSH
63529: CALL_OW 297
63533: ST_TO_ADDR
// end ; end ;
63534: GO 63423
63536: POP
63537: POP
// result := hex ;
63538: LD_ADDR_VAR 0 3
63542: PUSH
63543: LD_VAR 0 7
63547: ST_TO_ADDR
// end ;
63548: LD_VAR 0 3
63552: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63553: LD_INT 0
63555: PPUSH
63556: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63557: LD_VAR 0 1
63561: NOT
63562: PUSH
63563: LD_VAR 0 1
63567: PUSH
63568: LD_INT 21
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 23
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PPUSH
63592: CALL_OW 69
63596: IN
63597: NOT
63598: OR
63599: IFFALSE 63603
// exit ;
63601: GO 63650
// for i = 1 to 3 do
63603: LD_ADDR_VAR 0 3
63607: PUSH
63608: DOUBLE
63609: LD_INT 1
63611: DEC
63612: ST_TO_ADDR
63613: LD_INT 3
63615: PUSH
63616: FOR_TO
63617: IFFALSE 63648
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63619: LD_VAR 0 1
63623: PPUSH
63624: CALL_OW 250
63628: PPUSH
63629: LD_VAR 0 1
63633: PPUSH
63634: CALL_OW 251
63638: PPUSH
63639: LD_INT 1
63641: PPUSH
63642: CALL_OW 453
63646: GO 63616
63648: POP
63649: POP
// end ;
63650: LD_VAR 0 2
63654: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63655: LD_INT 0
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
63661: PPUSH
63662: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63663: LD_VAR 0 1
63667: NOT
63668: PUSH
63669: LD_VAR 0 2
63673: NOT
63674: OR
63675: PUSH
63676: LD_VAR 0 1
63680: PPUSH
63681: CALL_OW 314
63685: OR
63686: IFFALSE 63690
// exit ;
63688: GO 64131
// x := GetX ( enemy_unit ) ;
63690: LD_ADDR_VAR 0 7
63694: PUSH
63695: LD_VAR 0 2
63699: PPUSH
63700: CALL_OW 250
63704: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63705: LD_ADDR_VAR 0 8
63709: PUSH
63710: LD_VAR 0 2
63714: PPUSH
63715: CALL_OW 251
63719: ST_TO_ADDR
// if not x or not y then
63720: LD_VAR 0 7
63724: NOT
63725: PUSH
63726: LD_VAR 0 8
63730: NOT
63731: OR
63732: IFFALSE 63736
// exit ;
63734: GO 64131
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63736: LD_ADDR_VAR 0 6
63740: PUSH
63741: LD_VAR 0 7
63745: PPUSH
63746: LD_INT 0
63748: PPUSH
63749: LD_INT 4
63751: PPUSH
63752: CALL_OW 272
63756: PUSH
63757: LD_VAR 0 8
63761: PPUSH
63762: LD_INT 0
63764: PPUSH
63765: LD_INT 4
63767: PPUSH
63768: CALL_OW 273
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_VAR 0 7
63781: PPUSH
63782: LD_INT 1
63784: PPUSH
63785: LD_INT 4
63787: PPUSH
63788: CALL_OW 272
63792: PUSH
63793: LD_VAR 0 8
63797: PPUSH
63798: LD_INT 1
63800: PPUSH
63801: LD_INT 4
63803: PPUSH
63804: CALL_OW 273
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_VAR 0 7
63817: PPUSH
63818: LD_INT 2
63820: PPUSH
63821: LD_INT 4
63823: PPUSH
63824: CALL_OW 272
63828: PUSH
63829: LD_VAR 0 8
63833: PPUSH
63834: LD_INT 2
63836: PPUSH
63837: LD_INT 4
63839: PPUSH
63840: CALL_OW 273
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_VAR 0 7
63853: PPUSH
63854: LD_INT 3
63856: PPUSH
63857: LD_INT 4
63859: PPUSH
63860: CALL_OW 272
63864: PUSH
63865: LD_VAR 0 8
63869: PPUSH
63870: LD_INT 3
63872: PPUSH
63873: LD_INT 4
63875: PPUSH
63876: CALL_OW 273
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_VAR 0 7
63889: PPUSH
63890: LD_INT 4
63892: PPUSH
63893: LD_INT 4
63895: PPUSH
63896: CALL_OW 272
63900: PUSH
63901: LD_VAR 0 8
63905: PPUSH
63906: LD_INT 4
63908: PPUSH
63909: LD_INT 4
63911: PPUSH
63912: CALL_OW 273
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_VAR 0 7
63925: PPUSH
63926: LD_INT 5
63928: PPUSH
63929: LD_INT 4
63931: PPUSH
63932: CALL_OW 272
63936: PUSH
63937: LD_VAR 0 8
63941: PPUSH
63942: LD_INT 5
63944: PPUSH
63945: LD_INT 4
63947: PPUSH
63948: CALL_OW 273
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// for i = tmp downto 1 do
63965: LD_ADDR_VAR 0 4
63969: PUSH
63970: DOUBLE
63971: LD_VAR 0 6
63975: INC
63976: ST_TO_ADDR
63977: LD_INT 1
63979: PUSH
63980: FOR_DOWNTO
63981: IFFALSE 64082
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63983: LD_VAR 0 6
63987: PUSH
63988: LD_VAR 0 4
63992: ARRAY
63993: PUSH
63994: LD_INT 1
63996: ARRAY
63997: PPUSH
63998: LD_VAR 0 6
64002: PUSH
64003: LD_VAR 0 4
64007: ARRAY
64008: PUSH
64009: LD_INT 2
64011: ARRAY
64012: PPUSH
64013: CALL_OW 488
64017: NOT
64018: PUSH
64019: LD_VAR 0 6
64023: PUSH
64024: LD_VAR 0 4
64028: ARRAY
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: PPUSH
64034: LD_VAR 0 6
64038: PUSH
64039: LD_VAR 0 4
64043: ARRAY
64044: PUSH
64045: LD_INT 2
64047: ARRAY
64048: PPUSH
64049: CALL_OW 428
64053: PUSH
64054: LD_INT 0
64056: NONEQUAL
64057: OR
64058: IFFALSE 64080
// tmp := Delete ( tmp , i ) ;
64060: LD_ADDR_VAR 0 6
64064: PUSH
64065: LD_VAR 0 6
64069: PPUSH
64070: LD_VAR 0 4
64074: PPUSH
64075: CALL_OW 3
64079: ST_TO_ADDR
64080: GO 63980
64082: POP
64083: POP
// j := GetClosestHex ( unit , tmp ) ;
64084: LD_ADDR_VAR 0 5
64088: PUSH
64089: LD_VAR 0 1
64093: PPUSH
64094: LD_VAR 0 6
64098: PPUSH
64099: CALL 63384 0 2
64103: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 5
64113: PUSH
64114: LD_INT 1
64116: ARRAY
64117: PPUSH
64118: LD_VAR 0 5
64122: PUSH
64123: LD_INT 2
64125: ARRAY
64126: PPUSH
64127: CALL_OW 111
// end ;
64131: LD_VAR 0 3
64135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64136: LD_INT 0
64138: PPUSH
64139: PPUSH
64140: PPUSH
// uc_side = 0 ;
64141: LD_ADDR_OWVAR 20
64145: PUSH
64146: LD_INT 0
64148: ST_TO_ADDR
// uc_nation = 0 ;
64149: LD_ADDR_OWVAR 21
64153: PUSH
64154: LD_INT 0
64156: ST_TO_ADDR
// InitHc ;
64157: CALL_OW 19
// InitVc ;
64161: CALL_OW 20
// if mastodonts then
64165: LD_VAR 0 6
64169: IFFALSE 64236
// for i = 1 to mastodonts do
64171: LD_ADDR_VAR 0 11
64175: PUSH
64176: DOUBLE
64177: LD_INT 1
64179: DEC
64180: ST_TO_ADDR
64181: LD_VAR 0 6
64185: PUSH
64186: FOR_TO
64187: IFFALSE 64234
// begin vc_chassis := 31 ;
64189: LD_ADDR_OWVAR 37
64193: PUSH
64194: LD_INT 31
64196: ST_TO_ADDR
// vc_control := control_rider ;
64197: LD_ADDR_OWVAR 38
64201: PUSH
64202: LD_INT 4
64204: ST_TO_ADDR
// animal := CreateVehicle ;
64205: LD_ADDR_VAR 0 12
64209: PUSH
64210: CALL_OW 45
64214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64215: LD_VAR 0 12
64219: PPUSH
64220: LD_VAR 0 8
64224: PPUSH
64225: LD_INT 0
64227: PPUSH
64228: CALL 66305 0 3
// end ;
64232: GO 64186
64234: POP
64235: POP
// if horses then
64236: LD_VAR 0 5
64240: IFFALSE 64307
// for i = 1 to horses do
64242: LD_ADDR_VAR 0 11
64246: PUSH
64247: DOUBLE
64248: LD_INT 1
64250: DEC
64251: ST_TO_ADDR
64252: LD_VAR 0 5
64256: PUSH
64257: FOR_TO
64258: IFFALSE 64305
// begin hc_class := 21 ;
64260: LD_ADDR_OWVAR 28
64264: PUSH
64265: LD_INT 21
64267: ST_TO_ADDR
// hc_gallery :=  ;
64268: LD_ADDR_OWVAR 33
64272: PUSH
64273: LD_STRING 
64275: ST_TO_ADDR
// animal := CreateHuman ;
64276: LD_ADDR_VAR 0 12
64280: PUSH
64281: CALL_OW 44
64285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64286: LD_VAR 0 12
64290: PPUSH
64291: LD_VAR 0 8
64295: PPUSH
64296: LD_INT 0
64298: PPUSH
64299: CALL 66305 0 3
// end ;
64303: GO 64257
64305: POP
64306: POP
// if birds then
64307: LD_VAR 0 1
64311: IFFALSE 64378
// for i = 1 to birds do
64313: LD_ADDR_VAR 0 11
64317: PUSH
64318: DOUBLE
64319: LD_INT 1
64321: DEC
64322: ST_TO_ADDR
64323: LD_VAR 0 1
64327: PUSH
64328: FOR_TO
64329: IFFALSE 64376
// begin hc_class = 18 ;
64331: LD_ADDR_OWVAR 28
64335: PUSH
64336: LD_INT 18
64338: ST_TO_ADDR
// hc_gallery =  ;
64339: LD_ADDR_OWVAR 33
64343: PUSH
64344: LD_STRING 
64346: ST_TO_ADDR
// animal := CreateHuman ;
64347: LD_ADDR_VAR 0 12
64351: PUSH
64352: CALL_OW 44
64356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64357: LD_VAR 0 12
64361: PPUSH
64362: LD_VAR 0 8
64366: PPUSH
64367: LD_INT 0
64369: PPUSH
64370: CALL 66305 0 3
// end ;
64374: GO 64328
64376: POP
64377: POP
// if tigers then
64378: LD_VAR 0 2
64382: IFFALSE 64466
// for i = 1 to tigers do
64384: LD_ADDR_VAR 0 11
64388: PUSH
64389: DOUBLE
64390: LD_INT 1
64392: DEC
64393: ST_TO_ADDR
64394: LD_VAR 0 2
64398: PUSH
64399: FOR_TO
64400: IFFALSE 64464
// begin hc_class = class_tiger ;
64402: LD_ADDR_OWVAR 28
64406: PUSH
64407: LD_INT 14
64409: ST_TO_ADDR
// hc_gallery =  ;
64410: LD_ADDR_OWVAR 33
64414: PUSH
64415: LD_STRING 
64417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64418: LD_ADDR_OWVAR 35
64422: PUSH
64423: LD_INT 7
64425: NEG
64426: PPUSH
64427: LD_INT 7
64429: PPUSH
64430: CALL_OW 12
64434: ST_TO_ADDR
// animal := CreateHuman ;
64435: LD_ADDR_VAR 0 12
64439: PUSH
64440: CALL_OW 44
64444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64445: LD_VAR 0 12
64449: PPUSH
64450: LD_VAR 0 8
64454: PPUSH
64455: LD_INT 0
64457: PPUSH
64458: CALL 66305 0 3
// end ;
64462: GO 64399
64464: POP
64465: POP
// if apemans then
64466: LD_VAR 0 3
64470: IFFALSE 64593
// for i = 1 to apemans do
64472: LD_ADDR_VAR 0 11
64476: PUSH
64477: DOUBLE
64478: LD_INT 1
64480: DEC
64481: ST_TO_ADDR
64482: LD_VAR 0 3
64486: PUSH
64487: FOR_TO
64488: IFFALSE 64591
// begin hc_class = class_apeman ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 12
64497: ST_TO_ADDR
// hc_gallery =  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64506: LD_ADDR_OWVAR 35
64510: PUSH
64511: LD_INT 5
64513: NEG
64514: PPUSH
64515: LD_INT 5
64517: PPUSH
64518: CALL_OW 12
64522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64523: LD_ADDR_OWVAR 31
64527: PUSH
64528: LD_INT 1
64530: PPUSH
64531: LD_INT 3
64533: PPUSH
64534: CALL_OW 12
64538: PUSH
64539: LD_INT 1
64541: PPUSH
64542: LD_INT 3
64544: PPUSH
64545: CALL_OW 12
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// animal := CreateHuman ;
64562: LD_ADDR_VAR 0 12
64566: PUSH
64567: CALL_OW 44
64571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64572: LD_VAR 0 12
64576: PPUSH
64577: LD_VAR 0 8
64581: PPUSH
64582: LD_INT 0
64584: PPUSH
64585: CALL 66305 0 3
// end ;
64589: GO 64487
64591: POP
64592: POP
// if enchidnas then
64593: LD_VAR 0 4
64597: IFFALSE 64664
// for i = 1 to enchidnas do
64599: LD_ADDR_VAR 0 11
64603: PUSH
64604: DOUBLE
64605: LD_INT 1
64607: DEC
64608: ST_TO_ADDR
64609: LD_VAR 0 4
64613: PUSH
64614: FOR_TO
64615: IFFALSE 64662
// begin hc_class = 13 ;
64617: LD_ADDR_OWVAR 28
64621: PUSH
64622: LD_INT 13
64624: ST_TO_ADDR
// hc_gallery =  ;
64625: LD_ADDR_OWVAR 33
64629: PUSH
64630: LD_STRING 
64632: ST_TO_ADDR
// animal := CreateHuman ;
64633: LD_ADDR_VAR 0 12
64637: PUSH
64638: CALL_OW 44
64642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64643: LD_VAR 0 12
64647: PPUSH
64648: LD_VAR 0 8
64652: PPUSH
64653: LD_INT 0
64655: PPUSH
64656: CALL 66305 0 3
// end ;
64660: GO 64614
64662: POP
64663: POP
// if fishes then
64664: LD_VAR 0 7
64668: IFFALSE 64735
// for i = 1 to fishes do
64670: LD_ADDR_VAR 0 11
64674: PUSH
64675: DOUBLE
64676: LD_INT 1
64678: DEC
64679: ST_TO_ADDR
64680: LD_VAR 0 7
64684: PUSH
64685: FOR_TO
64686: IFFALSE 64733
// begin hc_class = 20 ;
64688: LD_ADDR_OWVAR 28
64692: PUSH
64693: LD_INT 20
64695: ST_TO_ADDR
// hc_gallery =  ;
64696: LD_ADDR_OWVAR 33
64700: PUSH
64701: LD_STRING 
64703: ST_TO_ADDR
// animal := CreateHuman ;
64704: LD_ADDR_VAR 0 12
64708: PUSH
64709: CALL_OW 44
64713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64714: LD_VAR 0 12
64718: PPUSH
64719: LD_VAR 0 9
64723: PPUSH
64724: LD_INT 0
64726: PPUSH
64727: CALL 66305 0 3
// end ;
64731: GO 64685
64733: POP
64734: POP
// end ;
64735: LD_VAR 0 10
64739: RET
// export function WantHeal ( sci , unit ) ; begin
64740: LD_INT 0
64742: PPUSH
// if GetTaskList ( sci ) > 0 then
64743: LD_VAR 0 1
64747: PPUSH
64748: CALL_OW 437
64752: PUSH
64753: LD_INT 0
64755: GREATER
64756: IFFALSE 64826
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64758: LD_VAR 0 1
64762: PPUSH
64763: CALL_OW 437
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PUSH
64772: LD_INT 1
64774: ARRAY
64775: PUSH
64776: LD_STRING l
64778: EQUAL
64779: PUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: CALL_OW 437
64789: PUSH
64790: LD_INT 1
64792: ARRAY
64793: PUSH
64794: LD_INT 4
64796: ARRAY
64797: PUSH
64798: LD_VAR 0 2
64802: EQUAL
64803: AND
64804: IFFALSE 64816
// result := true else
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_INT 1
64813: ST_TO_ADDR
64814: GO 64824
// result := false ;
64816: LD_ADDR_VAR 0 3
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// end else
64824: GO 64834
// result := false ;
64826: LD_ADDR_VAR 0 3
64830: PUSH
64831: LD_INT 0
64833: ST_TO_ADDR
// end ;
64834: LD_VAR 0 3
64838: RET
// export function HealTarget ( sci ) ; begin
64839: LD_INT 0
64841: PPUSH
// if not sci then
64842: LD_VAR 0 1
64846: NOT
64847: IFFALSE 64851
// exit ;
64849: GO 64916
// result := 0 ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_INT 0
64858: ST_TO_ADDR
// if GetTaskList ( sci ) then
64859: LD_VAR 0 1
64863: PPUSH
64864: CALL_OW 437
64868: IFFALSE 64916
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64870: LD_VAR 0 1
64874: PPUSH
64875: CALL_OW 437
64879: PUSH
64880: LD_INT 1
64882: ARRAY
64883: PUSH
64884: LD_INT 1
64886: ARRAY
64887: PUSH
64888: LD_STRING l
64890: EQUAL
64891: IFFALSE 64916
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64893: LD_ADDR_VAR 0 2
64897: PUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 437
64907: PUSH
64908: LD_INT 1
64910: ARRAY
64911: PUSH
64912: LD_INT 4
64914: ARRAY
64915: ST_TO_ADDR
// end ;
64916: LD_VAR 0 2
64920: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64921: LD_INT 0
64923: PPUSH
64924: PPUSH
64925: PPUSH
64926: PPUSH
// if not base_units then
64927: LD_VAR 0 1
64931: NOT
64932: IFFALSE 64936
// exit ;
64934: GO 65023
// result := false ;
64936: LD_ADDR_VAR 0 2
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: LD_INT 21
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PPUSH
64964: CALL_OW 72
64968: ST_TO_ADDR
// if not tmp then
64969: LD_VAR 0 5
64973: NOT
64974: IFFALSE 64978
// exit ;
64976: GO 65023
// for i in tmp do
64978: LD_ADDR_VAR 0 3
64982: PUSH
64983: LD_VAR 0 5
64987: PUSH
64988: FOR_IN
64989: IFFALSE 65021
// begin result := EnemyInRange ( i , 22 ) ;
64991: LD_ADDR_VAR 0 2
64995: PUSH
64996: LD_VAR 0 3
65000: PPUSH
65001: LD_INT 22
65003: PPUSH
65004: CALL 63259 0 2
65008: ST_TO_ADDR
// if result then
65009: LD_VAR 0 2
65013: IFFALSE 65019
// exit ;
65015: POP
65016: POP
65017: GO 65023
// end ;
65019: GO 64988
65021: POP
65022: POP
// end ;
65023: LD_VAR 0 2
65027: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65028: LD_INT 0
65030: PPUSH
65031: PPUSH
// if not units then
65032: LD_VAR 0 1
65036: NOT
65037: IFFALSE 65041
// exit ;
65039: GO 65111
// result := [ ] ;
65041: LD_ADDR_VAR 0 3
65045: PUSH
65046: EMPTY
65047: ST_TO_ADDR
// for i in units do
65048: LD_ADDR_VAR 0 4
65052: PUSH
65053: LD_VAR 0 1
65057: PUSH
65058: FOR_IN
65059: IFFALSE 65109
// if GetTag ( i ) = tag then
65061: LD_VAR 0 4
65065: PPUSH
65066: CALL_OW 110
65070: PUSH
65071: LD_VAR 0 2
65075: EQUAL
65076: IFFALSE 65107
// result := Insert ( result , result + 1 , i ) ;
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 3
65087: PPUSH
65088: LD_VAR 0 3
65092: PUSH
65093: LD_INT 1
65095: PLUS
65096: PPUSH
65097: LD_VAR 0 4
65101: PPUSH
65102: CALL_OW 2
65106: ST_TO_ADDR
65107: GO 65058
65109: POP
65110: POP
// end ;
65111: LD_VAR 0 3
65115: RET
// export function IsDriver ( un ) ; begin
65116: LD_INT 0
65118: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65119: LD_ADDR_VAR 0 2
65123: PUSH
65124: LD_VAR 0 1
65128: PUSH
65129: LD_INT 55
65131: PUSH
65132: EMPTY
65133: LIST
65134: PPUSH
65135: CALL_OW 69
65139: IN
65140: ST_TO_ADDR
// end ;
65141: LD_VAR 0 2
65145: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
// list := [ ] ;
65150: LD_ADDR_VAR 0 5
65154: PUSH
65155: EMPTY
65156: ST_TO_ADDR
// case d of 0 :
65157: LD_VAR 0 3
65161: PUSH
65162: LD_INT 0
65164: DOUBLE
65165: EQUAL
65166: IFTRUE 65170
65168: GO 65303
65170: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65171: LD_ADDR_VAR 0 5
65175: PUSH
65176: LD_VAR 0 1
65180: PUSH
65181: LD_INT 4
65183: MINUS
65184: PUSH
65185: LD_VAR 0 2
65189: PUSH
65190: LD_INT 4
65192: MINUS
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: LD_INT 3
65209: MINUS
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 1
65228: PUSH
65229: LD_INT 4
65231: PLUS
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_INT 3
65253: PLUS
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 3
65262: PLUS
65263: PUSH
65264: LD_INT 5
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_VAR 0 2
65281: PUSH
65282: LD_INT 4
65284: PLUS
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// end ; 1 :
65301: GO 66001
65303: LD_INT 1
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65311
65309: GO 65444
65311: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65312: LD_ADDR_VAR 0 5
65316: PUSH
65317: LD_VAR 0 1
65321: PUSH
65322: LD_VAR 0 2
65326: PUSH
65327: LD_INT 4
65329: MINUS
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: PUSH
65339: LD_VAR 0 1
65343: PUSH
65344: LD_INT 3
65346: MINUS
65347: PUSH
65348: LD_VAR 0 2
65352: PUSH
65353: LD_INT 3
65355: MINUS
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: PUSH
65365: LD_VAR 0 1
65369: PUSH
65370: LD_INT 4
65372: MINUS
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: LIST
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: LD_VAR 0 2
65396: PUSH
65397: LD_INT 3
65399: PLUS
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: PUSH
65409: LD_VAR 0 1
65413: PUSH
65414: LD_INT 4
65416: PLUS
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: LD_INT 4
65425: PLUS
65426: PUSH
65427: LD_INT 5
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// end ; 2 :
65442: GO 66001
65444: LD_INT 2
65446: DOUBLE
65447: EQUAL
65448: IFTRUE 65452
65450: GO 65581
65452: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65453: LD_ADDR_VAR 0 5
65457: PUSH
65458: LD_VAR 0 1
65462: PUSH
65463: LD_VAR 0 2
65467: PUSH
65468: LD_INT 3
65470: MINUS
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: LIST
65479: PUSH
65480: LD_VAR 0 1
65484: PUSH
65485: LD_INT 4
65487: PLUS
65488: PUSH
65489: LD_VAR 0 2
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: PUSH
65502: LD_VAR 0 1
65506: PUSH
65507: LD_VAR 0 2
65511: PUSH
65512: LD_INT 4
65514: PLUS
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: LD_INT 3
65531: MINUS
65532: PUSH
65533: LD_VAR 0 2
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: LD_INT 4
65553: MINUS
65554: PUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_INT 4
65562: MINUS
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: LIST
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// end ; 3 :
65579: GO 66001
65581: LD_INT 3
65583: DOUBLE
65584: EQUAL
65585: IFTRUE 65589
65587: GO 65722
65589: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65590: LD_ADDR_VAR 0 5
65594: PUSH
65595: LD_VAR 0 1
65599: PUSH
65600: LD_INT 3
65602: PLUS
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_INT 4
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: PUSH
65617: LD_VAR 0 1
65621: PUSH
65622: LD_INT 4
65624: PLUS
65625: PUSH
65626: LD_VAR 0 2
65630: PUSH
65631: LD_INT 4
65633: PLUS
65634: PUSH
65635: LD_INT 5
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: PUSH
65643: LD_VAR 0 1
65647: PUSH
65648: LD_INT 4
65650: MINUS
65651: PUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: PUSH
65665: LD_VAR 0 1
65669: PUSH
65670: LD_VAR 0 2
65674: PUSH
65675: LD_INT 4
65677: MINUS
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: LD_INT 3
65694: MINUS
65695: PUSH
65696: LD_VAR 0 2
65700: PUSH
65701: LD_INT 3
65703: MINUS
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: ST_TO_ADDR
// end ; 4 :
65720: GO 66001
65722: LD_INT 4
65724: DOUBLE
65725: EQUAL
65726: IFTRUE 65730
65728: GO 65863
65730: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65731: LD_ADDR_VAR 0 5
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: LD_VAR 0 2
65745: PUSH
65746: LD_INT 4
65748: PLUS
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: PUSH
65758: LD_VAR 0 1
65762: PUSH
65763: LD_INT 3
65765: PLUS
65766: PUSH
65767: LD_VAR 0 2
65771: PUSH
65772: LD_INT 3
65774: PLUS
65775: PUSH
65776: LD_INT 5
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: PUSH
65784: LD_VAR 0 1
65788: PUSH
65789: LD_INT 4
65791: PLUS
65792: PUSH
65793: LD_VAR 0 2
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_VAR 0 2
65815: PUSH
65816: LD_INT 3
65818: MINUS
65819: PUSH
65820: LD_INT 3
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 4
65835: MINUS
65836: PUSH
65837: LD_VAR 0 2
65841: PUSH
65842: LD_INT 4
65844: MINUS
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// end ; 5 :
65861: GO 66001
65863: LD_INT 5
65865: DOUBLE
65866: EQUAL
65867: IFTRUE 65871
65869: GO 66000
65871: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65872: LD_ADDR_VAR 0 5
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 4
65884: MINUS
65885: PUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: LD_VAR 0 1
65903: PUSH
65904: LD_VAR 0 2
65908: PUSH
65909: LD_INT 4
65911: MINUS
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: PUSH
65921: LD_VAR 0 1
65925: PUSH
65926: LD_INT 4
65928: PLUS
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_INT 4
65937: PLUS
65938: PUSH
65939: LD_INT 5
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: LD_VAR 0 1
65951: PUSH
65952: LD_INT 3
65954: PLUS
65955: PUSH
65956: LD_VAR 0 2
65960: PUSH
65961: LD_INT 4
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: LD_VAR 0 1
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: LD_INT 3
65981: PLUS
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: ST_TO_ADDR
// end ; end ;
65998: GO 66001
66000: POP
// result := list ;
66001: LD_ADDR_VAR 0 4
66005: PUSH
66006: LD_VAR 0 5
66010: ST_TO_ADDR
// end ;
66011: LD_VAR 0 4
66015: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66016: LD_INT 0
66018: PPUSH
66019: PPUSH
66020: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66021: LD_VAR 0 1
66025: NOT
66026: PUSH
66027: LD_VAR 0 2
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: LD_INT 3
66040: PUSH
66041: LD_INT 4
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: IN
66050: NOT
66051: OR
66052: IFFALSE 66056
// exit ;
66054: GO 66148
// tmp := [ ] ;
66056: LD_ADDR_VAR 0 5
66060: PUSH
66061: EMPTY
66062: ST_TO_ADDR
// for i in units do
66063: LD_ADDR_VAR 0 4
66067: PUSH
66068: LD_VAR 0 1
66072: PUSH
66073: FOR_IN
66074: IFFALSE 66117
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66076: LD_ADDR_VAR 0 5
66080: PUSH
66081: LD_VAR 0 5
66085: PPUSH
66086: LD_VAR 0 5
66090: PUSH
66091: LD_INT 1
66093: PLUS
66094: PPUSH
66095: LD_VAR 0 4
66099: PPUSH
66100: LD_VAR 0 2
66104: PPUSH
66105: CALL_OW 259
66109: PPUSH
66110: CALL_OW 2
66114: ST_TO_ADDR
66115: GO 66073
66117: POP
66118: POP
// if not tmp then
66119: LD_VAR 0 5
66123: NOT
66124: IFFALSE 66128
// exit ;
66126: GO 66148
// result := SortListByListDesc ( units , tmp ) ;
66128: LD_ADDR_VAR 0 3
66132: PUSH
66133: LD_VAR 0 1
66137: PPUSH
66138: LD_VAR 0 5
66142: PPUSH
66143: CALL_OW 77
66147: ST_TO_ADDR
// end ;
66148: LD_VAR 0 3
66152: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66153: LD_INT 0
66155: PPUSH
66156: PPUSH
66157: PPUSH
// x := GetX ( building ) ;
66158: LD_ADDR_VAR 0 4
66162: PUSH
66163: LD_VAR 0 2
66167: PPUSH
66168: CALL_OW 250
66172: ST_TO_ADDR
// y := GetY ( building ) ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_VAR 0 2
66182: PPUSH
66183: CALL_OW 251
66187: ST_TO_ADDR
// if GetTaskList ( unit ) then
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL_OW 437
66197: IFFALSE 66292
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66199: LD_STRING e
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_INT 1
66218: ARRAY
66219: EQUAL
66220: PUSH
66221: LD_VAR 0 4
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 437
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: LD_INT 2
66242: ARRAY
66243: EQUAL
66244: AND
66245: PUSH
66246: LD_VAR 0 5
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 437
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PUSH
66265: LD_INT 3
66267: ARRAY
66268: EQUAL
66269: AND
66270: IFFALSE 66282
// result := true else
66272: LD_ADDR_VAR 0 3
66276: PUSH
66277: LD_INT 1
66279: ST_TO_ADDR
66280: GO 66290
// result := false ;
66282: LD_ADDR_VAR 0 3
66286: PUSH
66287: LD_INT 0
66289: ST_TO_ADDR
// end else
66290: GO 66300
// result := false ;
66292: LD_ADDR_VAR 0 3
66296: PUSH
66297: LD_INT 0
66299: ST_TO_ADDR
// end ;
66300: LD_VAR 0 3
66304: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66305: LD_INT 0
66307: PPUSH
66308: PPUSH
66309: PPUSH
66310: PPUSH
// if not unit or not area then
66311: LD_VAR 0 1
66315: NOT
66316: PUSH
66317: LD_VAR 0 2
66321: NOT
66322: OR
66323: IFFALSE 66327
// exit ;
66325: GO 66491
// tmp := AreaToList ( area , i ) ;
66327: LD_ADDR_VAR 0 6
66331: PUSH
66332: LD_VAR 0 2
66336: PPUSH
66337: LD_VAR 0 5
66341: PPUSH
66342: CALL_OW 517
66346: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66347: LD_ADDR_VAR 0 5
66351: PUSH
66352: DOUBLE
66353: LD_INT 1
66355: DEC
66356: ST_TO_ADDR
66357: LD_VAR 0 6
66361: PUSH
66362: LD_INT 1
66364: ARRAY
66365: PUSH
66366: FOR_TO
66367: IFFALSE 66489
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66369: LD_ADDR_VAR 0 7
66373: PUSH
66374: LD_VAR 0 6
66378: PUSH
66379: LD_INT 1
66381: ARRAY
66382: PUSH
66383: LD_VAR 0 5
66387: ARRAY
66388: PUSH
66389: LD_VAR 0 6
66393: PUSH
66394: LD_INT 2
66396: ARRAY
66397: PUSH
66398: LD_VAR 0 5
66402: ARRAY
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66408: LD_VAR 0 7
66412: PUSH
66413: LD_INT 1
66415: ARRAY
66416: PPUSH
66417: LD_VAR 0 7
66421: PUSH
66422: LD_INT 2
66424: ARRAY
66425: PPUSH
66426: CALL_OW 428
66430: PUSH
66431: LD_INT 0
66433: EQUAL
66434: IFFALSE 66487
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66436: LD_VAR 0 1
66440: PPUSH
66441: LD_VAR 0 7
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PPUSH
66450: LD_VAR 0 7
66454: PUSH
66455: LD_INT 2
66457: ARRAY
66458: PPUSH
66459: LD_VAR 0 3
66463: PPUSH
66464: CALL_OW 48
// result := IsPlaced ( unit ) ;
66468: LD_ADDR_VAR 0 4
66472: PUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL_OW 305
66482: ST_TO_ADDR
// exit ;
66483: POP
66484: POP
66485: GO 66491
// end ; end ;
66487: GO 66366
66489: POP
66490: POP
// end ;
66491: LD_VAR 0 4
66495: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66496: LD_INT 0
66498: PPUSH
66499: PPUSH
66500: PPUSH
// if not side or side > 8 then
66501: LD_VAR 0 1
66505: NOT
66506: PUSH
66507: LD_VAR 0 1
66511: PUSH
66512: LD_INT 8
66514: GREATER
66515: OR
66516: IFFALSE 66520
// exit ;
66518: GO 66707
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66520: LD_ADDR_VAR 0 4
66524: PUSH
66525: LD_INT 22
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 21
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PPUSH
66551: CALL_OW 69
66555: ST_TO_ADDR
// if not tmp then
66556: LD_VAR 0 4
66560: NOT
66561: IFFALSE 66565
// exit ;
66563: GO 66707
// enable_addtolog := true ;
66565: LD_ADDR_OWVAR 81
66569: PUSH
66570: LD_INT 1
66572: ST_TO_ADDR
// AddToLog ( [ ) ;
66573: LD_STRING [
66575: PPUSH
66576: CALL_OW 561
// for i in tmp do
66580: LD_ADDR_VAR 0 3
66584: PUSH
66585: LD_VAR 0 4
66589: PUSH
66590: FOR_IN
66591: IFFALSE 66698
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66593: LD_STRING [
66595: PUSH
66596: LD_VAR 0 3
66600: PPUSH
66601: CALL_OW 266
66605: STR
66606: PUSH
66607: LD_STRING , 
66609: STR
66610: PUSH
66611: LD_VAR 0 3
66615: PPUSH
66616: CALL_OW 250
66620: STR
66621: PUSH
66622: LD_STRING , 
66624: STR
66625: PUSH
66626: LD_VAR 0 3
66630: PPUSH
66631: CALL_OW 251
66635: STR
66636: PUSH
66637: LD_STRING , 
66639: STR
66640: PUSH
66641: LD_VAR 0 3
66645: PPUSH
66646: CALL_OW 254
66650: STR
66651: PUSH
66652: LD_STRING , 
66654: STR
66655: PUSH
66656: LD_VAR 0 3
66660: PPUSH
66661: LD_INT 1
66663: PPUSH
66664: CALL_OW 268
66668: STR
66669: PUSH
66670: LD_STRING , 
66672: STR
66673: PUSH
66674: LD_VAR 0 3
66678: PPUSH
66679: LD_INT 2
66681: PPUSH
66682: CALL_OW 268
66686: STR
66687: PUSH
66688: LD_STRING ],
66690: STR
66691: PPUSH
66692: CALL_OW 561
// end ;
66696: GO 66590
66698: POP
66699: POP
// AddToLog ( ]; ) ;
66700: LD_STRING ];
66702: PPUSH
66703: CALL_OW 561
// end ;
66707: LD_VAR 0 2
66711: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66712: LD_INT 0
66714: PPUSH
66715: PPUSH
66716: PPUSH
66717: PPUSH
66718: PPUSH
// if not area or not rate or not max then
66719: LD_VAR 0 1
66723: NOT
66724: PUSH
66725: LD_VAR 0 2
66729: NOT
66730: OR
66731: PUSH
66732: LD_VAR 0 4
66736: NOT
66737: OR
66738: IFFALSE 66742
// exit ;
66740: GO 66934
// while 1 do
66742: LD_INT 1
66744: IFFALSE 66934
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66746: LD_ADDR_VAR 0 9
66750: PUSH
66751: LD_VAR 0 1
66755: PPUSH
66756: LD_INT 1
66758: PPUSH
66759: CALL_OW 287
66763: PUSH
66764: LD_INT 10
66766: MUL
66767: ST_TO_ADDR
// r := rate / 10 ;
66768: LD_ADDR_VAR 0 7
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: LD_INT 10
66780: DIVREAL
66781: ST_TO_ADDR
// time := 1 1$00 ;
66782: LD_ADDR_VAR 0 8
66786: PUSH
66787: LD_INT 2100
66789: ST_TO_ADDR
// if amount < min then
66790: LD_VAR 0 9
66794: PUSH
66795: LD_VAR 0 3
66799: LESS
66800: IFFALSE 66818
// r := r * 2 else
66802: LD_ADDR_VAR 0 7
66806: PUSH
66807: LD_VAR 0 7
66811: PUSH
66812: LD_INT 2
66814: MUL
66815: ST_TO_ADDR
66816: GO 66844
// if amount > max then
66818: LD_VAR 0 9
66822: PUSH
66823: LD_VAR 0 4
66827: GREATER
66828: IFFALSE 66844
// r := r / 2 ;
66830: LD_ADDR_VAR 0 7
66834: PUSH
66835: LD_VAR 0 7
66839: PUSH
66840: LD_INT 2
66842: DIVREAL
66843: ST_TO_ADDR
// time := time / r ;
66844: LD_ADDR_VAR 0 8
66848: PUSH
66849: LD_VAR 0 8
66853: PUSH
66854: LD_VAR 0 7
66858: DIVREAL
66859: ST_TO_ADDR
// if time < 0 then
66860: LD_VAR 0 8
66864: PUSH
66865: LD_INT 0
66867: LESS
66868: IFFALSE 66885
// time := time * - 1 ;
66870: LD_ADDR_VAR 0 8
66874: PUSH
66875: LD_VAR 0 8
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: MUL
66884: ST_TO_ADDR
// wait ( time ) ;
66885: LD_VAR 0 8
66889: PPUSH
66890: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66894: LD_INT 35
66896: PPUSH
66897: LD_INT 875
66899: PPUSH
66900: CALL_OW 12
66904: PPUSH
66905: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66909: LD_INT 1
66911: PPUSH
66912: LD_INT 5
66914: PPUSH
66915: CALL_OW 12
66919: PPUSH
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_INT 1
66927: PPUSH
66928: CALL_OW 55
// end ;
66932: GO 66742
// end ;
66934: LD_VAR 0 5
66938: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66939: LD_INT 0
66941: PPUSH
66942: PPUSH
66943: PPUSH
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
66948: PPUSH
// if not turrets or not factories then
66949: LD_VAR 0 1
66953: NOT
66954: PUSH
66955: LD_VAR 0 2
66959: NOT
66960: OR
66961: IFFALSE 66965
// exit ;
66963: GO 67272
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66965: LD_ADDR_VAR 0 10
66969: PUSH
66970: LD_INT 5
66972: PUSH
66973: LD_INT 6
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: LD_INT 5
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 24
67007: PUSH
67008: LD_INT 25
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 23
67017: PUSH
67018: LD_INT 27
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 42
67031: PUSH
67032: LD_INT 43
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 44
67041: PUSH
67042: LD_INT 46
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 45
67051: PUSH
67052: LD_INT 47
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// result := [ ] ;
67069: LD_ADDR_VAR 0 3
67073: PUSH
67074: EMPTY
67075: ST_TO_ADDR
// for i in turrets do
67076: LD_ADDR_VAR 0 4
67080: PUSH
67081: LD_VAR 0 1
67085: PUSH
67086: FOR_IN
67087: IFFALSE 67270
// begin nat := GetNation ( i ) ;
67089: LD_ADDR_VAR 0 7
67093: PUSH
67094: LD_VAR 0 4
67098: PPUSH
67099: CALL_OW 248
67103: ST_TO_ADDR
// weapon := 0 ;
67104: LD_ADDR_VAR 0 8
67108: PUSH
67109: LD_INT 0
67111: ST_TO_ADDR
// if not nat then
67112: LD_VAR 0 7
67116: NOT
67117: IFFALSE 67121
// continue ;
67119: GO 67086
// for j in list [ nat ] do
67121: LD_ADDR_VAR 0 5
67125: PUSH
67126: LD_VAR 0 10
67130: PUSH
67131: LD_VAR 0 7
67135: ARRAY
67136: PUSH
67137: FOR_IN
67138: IFFALSE 67179
// if GetBWeapon ( i ) = j [ 1 ] then
67140: LD_VAR 0 4
67144: PPUSH
67145: CALL_OW 269
67149: PUSH
67150: LD_VAR 0 5
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: EQUAL
67159: IFFALSE 67177
// begin weapon := j [ 2 ] ;
67161: LD_ADDR_VAR 0 8
67165: PUSH
67166: LD_VAR 0 5
67170: PUSH
67171: LD_INT 2
67173: ARRAY
67174: ST_TO_ADDR
// break ;
67175: GO 67179
// end ;
67177: GO 67137
67179: POP
67180: POP
// if not weapon then
67181: LD_VAR 0 8
67185: NOT
67186: IFFALSE 67190
// continue ;
67188: GO 67086
// for k in factories do
67190: LD_ADDR_VAR 0 6
67194: PUSH
67195: LD_VAR 0 2
67199: PUSH
67200: FOR_IN
67201: IFFALSE 67266
// begin weapons := AvailableWeaponList ( k ) ;
67203: LD_ADDR_VAR 0 9
67207: PUSH
67208: LD_VAR 0 6
67212: PPUSH
67213: CALL_OW 478
67217: ST_TO_ADDR
// if not weapons then
67218: LD_VAR 0 9
67222: NOT
67223: IFFALSE 67227
// continue ;
67225: GO 67200
// if weapon in weapons then
67227: LD_VAR 0 8
67231: PUSH
67232: LD_VAR 0 9
67236: IN
67237: IFFALSE 67264
// begin result := [ i , weapon ] ;
67239: LD_ADDR_VAR 0 3
67243: PUSH
67244: LD_VAR 0 4
67248: PUSH
67249: LD_VAR 0 8
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// exit ;
67258: POP
67259: POP
67260: POP
67261: POP
67262: GO 67272
// end ; end ;
67264: GO 67200
67266: POP
67267: POP
// end ;
67268: GO 67086
67270: POP
67271: POP
// end ;
67272: LD_VAR 0 3
67276: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67277: LD_INT 0
67279: PPUSH
// if not side or side > 8 then
67280: LD_VAR 0 3
67284: NOT
67285: PUSH
67286: LD_VAR 0 3
67290: PUSH
67291: LD_INT 8
67293: GREATER
67294: OR
67295: IFFALSE 67299
// exit ;
67297: GO 67358
// if not range then
67299: LD_VAR 0 4
67303: NOT
67304: IFFALSE 67315
// range := - 12 ;
67306: LD_ADDR_VAR 0 4
67310: PUSH
67311: LD_INT 12
67313: NEG
67314: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67315: LD_VAR 0 1
67319: PPUSH
67320: LD_VAR 0 2
67324: PPUSH
67325: LD_VAR 0 3
67329: PPUSH
67330: LD_VAR 0 4
67334: PPUSH
67335: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67339: LD_VAR 0 1
67343: PPUSH
67344: LD_VAR 0 2
67348: PPUSH
67349: LD_VAR 0 3
67353: PPUSH
67354: CALL_OW 331
// end ;
67358: LD_VAR 0 5
67362: RET
// export function Video ( mode ) ; begin
67363: LD_INT 0
67365: PPUSH
// ingame_video = mode ;
67366: LD_ADDR_OWVAR 52
67370: PUSH
67371: LD_VAR 0 1
67375: ST_TO_ADDR
// interface_hidden = mode ;
67376: LD_ADDR_OWVAR 54
67380: PUSH
67381: LD_VAR 0 1
67385: ST_TO_ADDR
// end ;
67386: LD_VAR 0 2
67390: RET
// export function Join ( array , element ) ; begin
67391: LD_INT 0
67393: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67394: LD_ADDR_VAR 0 3
67398: PUSH
67399: LD_VAR 0 1
67403: PPUSH
67404: LD_VAR 0 1
67408: PUSH
67409: LD_INT 1
67411: PLUS
67412: PPUSH
67413: LD_VAR 0 2
67417: PPUSH
67418: CALL_OW 1
67422: ST_TO_ADDR
// end ;
67423: LD_VAR 0 3
67427: RET
// export function JoinUnion ( array , element ) ; begin
67428: LD_INT 0
67430: PPUSH
// result := array union element ;
67431: LD_ADDR_VAR 0 3
67435: PUSH
67436: LD_VAR 0 1
67440: PUSH
67441: LD_VAR 0 2
67445: UNION
67446: ST_TO_ADDR
// end ;
67447: LD_VAR 0 3
67451: RET
// export function GetBehemoths ( side ) ; begin
67452: LD_INT 0
67454: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67455: LD_ADDR_VAR 0 2
67459: PUSH
67460: LD_INT 22
67462: PUSH
67463: LD_VAR 0 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 31
67474: PUSH
67475: LD_INT 25
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PPUSH
67486: CALL_OW 69
67490: ST_TO_ADDR
// end ;
67491: LD_VAR 0 2
67495: RET
// export function Shuffle ( array ) ; var i , index ; begin
67496: LD_INT 0
67498: PPUSH
67499: PPUSH
67500: PPUSH
// result := [ ] ;
67501: LD_ADDR_VAR 0 2
67505: PUSH
67506: EMPTY
67507: ST_TO_ADDR
// if not array then
67508: LD_VAR 0 1
67512: NOT
67513: IFFALSE 67517
// exit ;
67515: GO 67616
// Randomize ;
67517: CALL_OW 10
// for i = array downto 1 do
67521: LD_ADDR_VAR 0 3
67525: PUSH
67526: DOUBLE
67527: LD_VAR 0 1
67531: INC
67532: ST_TO_ADDR
67533: LD_INT 1
67535: PUSH
67536: FOR_DOWNTO
67537: IFFALSE 67614
// begin index := rand ( 1 , array ) ;
67539: LD_ADDR_VAR 0 4
67543: PUSH
67544: LD_INT 1
67546: PPUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL_OW 12
67556: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67557: LD_ADDR_VAR 0 2
67561: PUSH
67562: LD_VAR 0 2
67566: PPUSH
67567: LD_VAR 0 2
67571: PUSH
67572: LD_INT 1
67574: PLUS
67575: PPUSH
67576: LD_VAR 0 1
67580: PUSH
67581: LD_VAR 0 4
67585: ARRAY
67586: PPUSH
67587: CALL_OW 2
67591: ST_TO_ADDR
// array := Delete ( array , index ) ;
67592: LD_ADDR_VAR 0 1
67596: PUSH
67597: LD_VAR 0 1
67601: PPUSH
67602: LD_VAR 0 4
67606: PPUSH
67607: CALL_OW 3
67611: ST_TO_ADDR
// end ;
67612: GO 67536
67614: POP
67615: POP
// end ;
67616: LD_VAR 0 2
67620: RET
// export function GetBaseMaterials ( base ) ; begin
67621: LD_INT 0
67623: PPUSH
// result := [ 0 , 0 , 0 ] ;
67624: LD_ADDR_VAR 0 2
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: LIST
67642: ST_TO_ADDR
// if not base then
67643: LD_VAR 0 1
67647: NOT
67648: IFFALSE 67652
// exit ;
67650: GO 67701
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67652: LD_ADDR_VAR 0 2
67656: PUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: LD_INT 1
67664: PPUSH
67665: CALL_OW 275
67669: PUSH
67670: LD_VAR 0 1
67674: PPUSH
67675: LD_INT 2
67677: PPUSH
67678: CALL_OW 275
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_INT 3
67690: PPUSH
67691: CALL_OW 275
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: ST_TO_ADDR
// end ;
67701: LD_VAR 0 2
67705: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67706: LD_INT 0
67708: PPUSH
67709: PPUSH
// result := array ;
67710: LD_ADDR_VAR 0 3
67714: PUSH
67715: LD_VAR 0 1
67719: ST_TO_ADDR
// if size > 0 then
67720: LD_VAR 0 2
67724: PUSH
67725: LD_INT 0
67727: GREATER
67728: IFFALSE 67774
// for i := array downto size do
67730: LD_ADDR_VAR 0 4
67734: PUSH
67735: DOUBLE
67736: LD_VAR 0 1
67740: INC
67741: ST_TO_ADDR
67742: LD_VAR 0 2
67746: PUSH
67747: FOR_DOWNTO
67748: IFFALSE 67772
// result := Delete ( result , result ) ;
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: LD_VAR 0 3
67759: PPUSH
67760: LD_VAR 0 3
67764: PPUSH
67765: CALL_OW 3
67769: ST_TO_ADDR
67770: GO 67747
67772: POP
67773: POP
// end ;
67774: LD_VAR 0 3
67778: RET
// export function ComExit ( unit ) ; var tmp ; begin
67779: LD_INT 0
67781: PPUSH
67782: PPUSH
// if not IsInUnit ( unit ) then
67783: LD_VAR 0 1
67787: PPUSH
67788: CALL_OW 310
67792: NOT
67793: IFFALSE 67797
// exit ;
67795: GO 67857
// tmp := IsInUnit ( unit ) ;
67797: LD_ADDR_VAR 0 3
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: CALL_OW 310
67811: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67812: LD_VAR 0 3
67816: PPUSH
67817: CALL_OW 247
67821: PUSH
67822: LD_INT 2
67824: EQUAL
67825: IFFALSE 67838
// ComExitVehicle ( unit ) else
67827: LD_VAR 0 1
67831: PPUSH
67832: CALL_OW 121
67836: GO 67847
// ComExitBuilding ( unit ) ;
67838: LD_VAR 0 1
67842: PPUSH
67843: CALL_OW 122
// result := tmp ;
67847: LD_ADDR_VAR 0 2
67851: PUSH
67852: LD_VAR 0 3
67856: ST_TO_ADDR
// end ;
67857: LD_VAR 0 2
67861: RET
// export function ResetHc ; begin
67862: LD_INT 0
67864: PPUSH
// InitHc ;
67865: CALL_OW 19
// hc_importance := 0 ;
67869: LD_ADDR_OWVAR 32
67873: PUSH
67874: LD_INT 0
67876: ST_TO_ADDR
// end ; end_of_file
67877: LD_VAR 0 1
67881: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
67882: LD_VAR 0 2
67886: PUSH
67887: LD_INT 100
67889: EQUAL
67890: IFFALSE 68839
// begin if not StreamModeActive then
67892: LD_EXP 106
67896: NOT
67897: IFFALSE 67907
// StreamModeActive := true ;
67899: LD_ADDR_EXP 106
67903: PUSH
67904: LD_INT 1
67906: ST_TO_ADDR
// if p3 = 0 then
67907: LD_VAR 0 3
67911: PUSH
67912: LD_INT 0
67914: EQUAL
67915: IFFALSE 67921
// InitStreamMode ;
67917: CALL 69072 0 0
// if p3 = 1 then
67921: LD_VAR 0 3
67925: PUSH
67926: LD_INT 1
67928: EQUAL
67929: IFFALSE 67939
// sRocket := true ;
67931: LD_ADDR_EXP 111
67935: PUSH
67936: LD_INT 1
67938: ST_TO_ADDR
// if p3 = 2 then
67939: LD_VAR 0 3
67943: PUSH
67944: LD_INT 2
67946: EQUAL
67947: IFFALSE 67957
// sSpeed := true ;
67949: LD_ADDR_EXP 110
67953: PUSH
67954: LD_INT 1
67956: ST_TO_ADDR
// if p3 = 3 then
67957: LD_VAR 0 3
67961: PUSH
67962: LD_INT 3
67964: EQUAL
67965: IFFALSE 67975
// sEngine := true ;
67967: LD_ADDR_EXP 112
67971: PUSH
67972: LD_INT 1
67974: ST_TO_ADDR
// if p3 = 4 then
67975: LD_VAR 0 3
67979: PUSH
67980: LD_INT 4
67982: EQUAL
67983: IFFALSE 67993
// sSpec := true ;
67985: LD_ADDR_EXP 109
67989: PUSH
67990: LD_INT 1
67992: ST_TO_ADDR
// if p3 = 5 then
67993: LD_VAR 0 3
67997: PUSH
67998: LD_INT 5
68000: EQUAL
68001: IFFALSE 68011
// sLevel := true ;
68003: LD_ADDR_EXP 113
68007: PUSH
68008: LD_INT 1
68010: ST_TO_ADDR
// if p3 = 6 then
68011: LD_VAR 0 3
68015: PUSH
68016: LD_INT 6
68018: EQUAL
68019: IFFALSE 68029
// sArmoury := true ;
68021: LD_ADDR_EXP 114
68025: PUSH
68026: LD_INT 1
68028: ST_TO_ADDR
// if p3 = 7 then
68029: LD_VAR 0 3
68033: PUSH
68034: LD_INT 7
68036: EQUAL
68037: IFFALSE 68047
// sRadar := true ;
68039: LD_ADDR_EXP 115
68043: PUSH
68044: LD_INT 1
68046: ST_TO_ADDR
// if p3 = 8 then
68047: LD_VAR 0 3
68051: PUSH
68052: LD_INT 8
68054: EQUAL
68055: IFFALSE 68065
// sBunker := true ;
68057: LD_ADDR_EXP 116
68061: PUSH
68062: LD_INT 1
68064: ST_TO_ADDR
// if p3 = 9 then
68065: LD_VAR 0 3
68069: PUSH
68070: LD_INT 9
68072: EQUAL
68073: IFFALSE 68083
// sHack := true ;
68075: LD_ADDR_EXP 117
68079: PUSH
68080: LD_INT 1
68082: ST_TO_ADDR
// if p3 = 10 then
68083: LD_VAR 0 3
68087: PUSH
68088: LD_INT 10
68090: EQUAL
68091: IFFALSE 68101
// sFire := true ;
68093: LD_ADDR_EXP 118
68097: PUSH
68098: LD_INT 1
68100: ST_TO_ADDR
// if p3 = 11 then
68101: LD_VAR 0 3
68105: PUSH
68106: LD_INT 11
68108: EQUAL
68109: IFFALSE 68119
// sRefresh := true ;
68111: LD_ADDR_EXP 119
68115: PUSH
68116: LD_INT 1
68118: ST_TO_ADDR
// if p3 = 12 then
68119: LD_VAR 0 3
68123: PUSH
68124: LD_INT 12
68126: EQUAL
68127: IFFALSE 68137
// sExp := true ;
68129: LD_ADDR_EXP 120
68133: PUSH
68134: LD_INT 1
68136: ST_TO_ADDR
// if p3 = 13 then
68137: LD_VAR 0 3
68141: PUSH
68142: LD_INT 13
68144: EQUAL
68145: IFFALSE 68155
// sDepot := true ;
68147: LD_ADDR_EXP 121
68151: PUSH
68152: LD_INT 1
68154: ST_TO_ADDR
// if p3 = 14 then
68155: LD_VAR 0 3
68159: PUSH
68160: LD_INT 14
68162: EQUAL
68163: IFFALSE 68173
// sFlag := true ;
68165: LD_ADDR_EXP 122
68169: PUSH
68170: LD_INT 1
68172: ST_TO_ADDR
// if p3 = 15 then
68173: LD_VAR 0 3
68177: PUSH
68178: LD_INT 15
68180: EQUAL
68181: IFFALSE 68191
// sKamikadze := true ;
68183: LD_ADDR_EXP 130
68187: PUSH
68188: LD_INT 1
68190: ST_TO_ADDR
// if p3 = 16 then
68191: LD_VAR 0 3
68195: PUSH
68196: LD_INT 16
68198: EQUAL
68199: IFFALSE 68209
// sTroll := true ;
68201: LD_ADDR_EXP 131
68205: PUSH
68206: LD_INT 1
68208: ST_TO_ADDR
// if p3 = 17 then
68209: LD_VAR 0 3
68213: PUSH
68214: LD_INT 17
68216: EQUAL
68217: IFFALSE 68227
// sSlow := true ;
68219: LD_ADDR_EXP 132
68223: PUSH
68224: LD_INT 1
68226: ST_TO_ADDR
// if p3 = 18 then
68227: LD_VAR 0 3
68231: PUSH
68232: LD_INT 18
68234: EQUAL
68235: IFFALSE 68245
// sLack := true ;
68237: LD_ADDR_EXP 133
68241: PUSH
68242: LD_INT 1
68244: ST_TO_ADDR
// if p3 = 19 then
68245: LD_VAR 0 3
68249: PUSH
68250: LD_INT 19
68252: EQUAL
68253: IFFALSE 68263
// sTank := true ;
68255: LD_ADDR_EXP 135
68259: PUSH
68260: LD_INT 1
68262: ST_TO_ADDR
// if p3 = 20 then
68263: LD_VAR 0 3
68267: PUSH
68268: LD_INT 20
68270: EQUAL
68271: IFFALSE 68281
// sRemote := true ;
68273: LD_ADDR_EXP 136
68277: PUSH
68278: LD_INT 1
68280: ST_TO_ADDR
// if p3 = 21 then
68281: LD_VAR 0 3
68285: PUSH
68286: LD_INT 21
68288: EQUAL
68289: IFFALSE 68299
// sPowell := true ;
68291: LD_ADDR_EXP 137
68295: PUSH
68296: LD_INT 1
68298: ST_TO_ADDR
// if p3 = 22 then
68299: LD_VAR 0 3
68303: PUSH
68304: LD_INT 22
68306: EQUAL
68307: IFFALSE 68317
// sTeleport := true ;
68309: LD_ADDR_EXP 140
68313: PUSH
68314: LD_INT 1
68316: ST_TO_ADDR
// if p3 = 23 then
68317: LD_VAR 0 3
68321: PUSH
68322: LD_INT 23
68324: EQUAL
68325: IFFALSE 68335
// sOilTower := true ;
68327: LD_ADDR_EXP 142
68331: PUSH
68332: LD_INT 1
68334: ST_TO_ADDR
// if p3 = 24 then
68335: LD_VAR 0 3
68339: PUSH
68340: LD_INT 24
68342: EQUAL
68343: IFFALSE 68353
// sShovel := true ;
68345: LD_ADDR_EXP 143
68349: PUSH
68350: LD_INT 1
68352: ST_TO_ADDR
// if p3 = 25 then
68353: LD_VAR 0 3
68357: PUSH
68358: LD_INT 25
68360: EQUAL
68361: IFFALSE 68371
// sSheik := true ;
68363: LD_ADDR_EXP 144
68367: PUSH
68368: LD_INT 1
68370: ST_TO_ADDR
// if p3 = 26 then
68371: LD_VAR 0 3
68375: PUSH
68376: LD_INT 26
68378: EQUAL
68379: IFFALSE 68389
// sEarthquake := true ;
68381: LD_ADDR_EXP 146
68385: PUSH
68386: LD_INT 1
68388: ST_TO_ADDR
// if p3 = 27 then
68389: LD_VAR 0 3
68393: PUSH
68394: LD_INT 27
68396: EQUAL
68397: IFFALSE 68407
// sAI := true ;
68399: LD_ADDR_EXP 147
68403: PUSH
68404: LD_INT 1
68406: ST_TO_ADDR
// if p3 = 28 then
68407: LD_VAR 0 3
68411: PUSH
68412: LD_INT 28
68414: EQUAL
68415: IFFALSE 68425
// sCargo := true ;
68417: LD_ADDR_EXP 150
68421: PUSH
68422: LD_INT 1
68424: ST_TO_ADDR
// if p3 = 29 then
68425: LD_VAR 0 3
68429: PUSH
68430: LD_INT 29
68432: EQUAL
68433: IFFALSE 68443
// sDLaser := true ;
68435: LD_ADDR_EXP 151
68439: PUSH
68440: LD_INT 1
68442: ST_TO_ADDR
// if p3 = 30 then
68443: LD_VAR 0 3
68447: PUSH
68448: LD_INT 30
68450: EQUAL
68451: IFFALSE 68461
// sExchange := true ;
68453: LD_ADDR_EXP 152
68457: PUSH
68458: LD_INT 1
68460: ST_TO_ADDR
// if p3 = 31 then
68461: LD_VAR 0 3
68465: PUSH
68466: LD_INT 31
68468: EQUAL
68469: IFFALSE 68479
// sFac := true ;
68471: LD_ADDR_EXP 153
68475: PUSH
68476: LD_INT 1
68478: ST_TO_ADDR
// if p3 = 32 then
68479: LD_VAR 0 3
68483: PUSH
68484: LD_INT 32
68486: EQUAL
68487: IFFALSE 68497
// sPower := true ;
68489: LD_ADDR_EXP 154
68493: PUSH
68494: LD_INT 1
68496: ST_TO_ADDR
// if p3 = 33 then
68497: LD_VAR 0 3
68501: PUSH
68502: LD_INT 33
68504: EQUAL
68505: IFFALSE 68515
// sRandom := true ;
68507: LD_ADDR_EXP 155
68511: PUSH
68512: LD_INT 1
68514: ST_TO_ADDR
// if p3 = 34 then
68515: LD_VAR 0 3
68519: PUSH
68520: LD_INT 34
68522: EQUAL
68523: IFFALSE 68533
// sShield := true ;
68525: LD_ADDR_EXP 156
68529: PUSH
68530: LD_INT 1
68532: ST_TO_ADDR
// if p3 = 35 then
68533: LD_VAR 0 3
68537: PUSH
68538: LD_INT 35
68540: EQUAL
68541: IFFALSE 68551
// sTime := true ;
68543: LD_ADDR_EXP 157
68547: PUSH
68548: LD_INT 1
68550: ST_TO_ADDR
// if p3 = 36 then
68551: LD_VAR 0 3
68555: PUSH
68556: LD_INT 36
68558: EQUAL
68559: IFFALSE 68569
// sTools := true ;
68561: LD_ADDR_EXP 158
68565: PUSH
68566: LD_INT 1
68568: ST_TO_ADDR
// if p3 = 101 then
68569: LD_VAR 0 3
68573: PUSH
68574: LD_INT 101
68576: EQUAL
68577: IFFALSE 68587
// sSold := true ;
68579: LD_ADDR_EXP 123
68583: PUSH
68584: LD_INT 1
68586: ST_TO_ADDR
// if p3 = 102 then
68587: LD_VAR 0 3
68591: PUSH
68592: LD_INT 102
68594: EQUAL
68595: IFFALSE 68605
// sDiff := true ;
68597: LD_ADDR_EXP 124
68601: PUSH
68602: LD_INT 1
68604: ST_TO_ADDR
// if p3 = 103 then
68605: LD_VAR 0 3
68609: PUSH
68610: LD_INT 103
68612: EQUAL
68613: IFFALSE 68623
// sFog := true ;
68615: LD_ADDR_EXP 127
68619: PUSH
68620: LD_INT 1
68622: ST_TO_ADDR
// if p3 = 104 then
68623: LD_VAR 0 3
68627: PUSH
68628: LD_INT 104
68630: EQUAL
68631: IFFALSE 68641
// sReset := true ;
68633: LD_ADDR_EXP 128
68637: PUSH
68638: LD_INT 1
68640: ST_TO_ADDR
// if p3 = 105 then
68641: LD_VAR 0 3
68645: PUSH
68646: LD_INT 105
68648: EQUAL
68649: IFFALSE 68659
// sSun := true ;
68651: LD_ADDR_EXP 129
68655: PUSH
68656: LD_INT 1
68658: ST_TO_ADDR
// if p3 = 106 then
68659: LD_VAR 0 3
68663: PUSH
68664: LD_INT 106
68666: EQUAL
68667: IFFALSE 68677
// sTiger := true ;
68669: LD_ADDR_EXP 125
68673: PUSH
68674: LD_INT 1
68676: ST_TO_ADDR
// if p3 = 107 then
68677: LD_VAR 0 3
68681: PUSH
68682: LD_INT 107
68684: EQUAL
68685: IFFALSE 68695
// sBomb := true ;
68687: LD_ADDR_EXP 126
68691: PUSH
68692: LD_INT 1
68694: ST_TO_ADDR
// if p3 = 108 then
68695: LD_VAR 0 3
68699: PUSH
68700: LD_INT 108
68702: EQUAL
68703: IFFALSE 68713
// sWound := true ;
68705: LD_ADDR_EXP 134
68709: PUSH
68710: LD_INT 1
68712: ST_TO_ADDR
// if p3 = 109 then
68713: LD_VAR 0 3
68717: PUSH
68718: LD_INT 109
68720: EQUAL
68721: IFFALSE 68731
// sBetray := true ;
68723: LD_ADDR_EXP 138
68727: PUSH
68728: LD_INT 1
68730: ST_TO_ADDR
// if p3 = 110 then
68731: LD_VAR 0 3
68735: PUSH
68736: LD_INT 110
68738: EQUAL
68739: IFFALSE 68749
// sContamin := true ;
68741: LD_ADDR_EXP 139
68745: PUSH
68746: LD_INT 1
68748: ST_TO_ADDR
// if p3 = 111 then
68749: LD_VAR 0 3
68753: PUSH
68754: LD_INT 111
68756: EQUAL
68757: IFFALSE 68767
// sOil := true ;
68759: LD_ADDR_EXP 141
68763: PUSH
68764: LD_INT 1
68766: ST_TO_ADDR
// if p3 = 112 then
68767: LD_VAR 0 3
68771: PUSH
68772: LD_INT 112
68774: EQUAL
68775: IFFALSE 68785
// sStu := true ;
68777: LD_ADDR_EXP 145
68781: PUSH
68782: LD_INT 1
68784: ST_TO_ADDR
// if p3 = 113 then
68785: LD_VAR 0 3
68789: PUSH
68790: LD_INT 113
68792: EQUAL
68793: IFFALSE 68803
// sBazooka := true ;
68795: LD_ADDR_EXP 148
68799: PUSH
68800: LD_INT 1
68802: ST_TO_ADDR
// if p3 = 114 then
68803: LD_VAR 0 3
68807: PUSH
68808: LD_INT 114
68810: EQUAL
68811: IFFALSE 68821
// sMortar := true ;
68813: LD_ADDR_EXP 149
68817: PUSH
68818: LD_INT 1
68820: ST_TO_ADDR
// if p3 = 115 then
68821: LD_VAR 0 3
68825: PUSH
68826: LD_INT 115
68828: EQUAL
68829: IFFALSE 68839
// sRanger := true ;
68831: LD_ADDR_EXP 159
68835: PUSH
68836: LD_INT 1
68838: ST_TO_ADDR
// end ; if p2 = 101 then
68839: LD_VAR 0 2
68843: PUSH
68844: LD_INT 101
68846: EQUAL
68847: IFFALSE 69050
// begin case p3 of 1 :
68849: LD_VAR 0 3
68853: PUSH
68854: LD_INT 1
68856: DOUBLE
68857: EQUAL
68858: IFTRUE 68862
68860: GO 68869
68862: POP
// hHackUnlimitedResources ; 2 :
68863: CALL 79144 0 0
68867: GO 69050
68869: LD_INT 2
68871: DOUBLE
68872: EQUAL
68873: IFTRUE 68877
68875: GO 68884
68877: POP
// hHackSetLevel10 ; 3 :
68878: CALL 79277 0 0
68882: GO 69050
68884: LD_INT 3
68886: DOUBLE
68887: EQUAL
68888: IFTRUE 68892
68890: GO 68899
68892: POP
// hHackSetLevel10YourUnits ; 4 :
68893: CALL 79362 0 0
68897: GO 69050
68899: LD_INT 4
68901: DOUBLE
68902: EQUAL
68903: IFTRUE 68907
68905: GO 68929
68907: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
68908: LD_VAR 0 4
68912: PPUSH
68913: LD_VAR 0 5
68917: PPUSH
68918: LD_VAR 0 6
68922: PPUSH
68923: CALL 79452 0 3
68927: GO 69050
68929: LD_INT 5
68931: DOUBLE
68932: EQUAL
68933: IFTRUE 68937
68935: GO 68944
68937: POP
// hHackSpawnVehicle ; 6 :
68938: CALL 79513 0 0
68942: GO 69050
68944: LD_INT 6
68946: DOUBLE
68947: EQUAL
68948: IFTRUE 68952
68950: GO 68959
68952: POP
// hHackInvincible ; 7 :
68953: CALL 80059 0 0
68957: GO 69050
68959: LD_INT 7
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68967
68965: GO 68974
68967: POP
// hHackInvisible ; 8 :
68968: CALL 80170 0 0
68972: GO 69050
68974: LD_INT 8
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 68982
68980: GO 68989
68982: POP
// hHackChangeYourSide ; 9 :
68983: CALL 80227 0 0
68987: GO 69050
68989: LD_INT 9
68991: DOUBLE
68992: EQUAL
68993: IFTRUE 68997
68995: GO 69004
68997: POP
// hHackChangeUnitSide ; 10 :
68998: CALL 80269 0 0
69002: GO 69050
69004: LD_INT 10
69006: DOUBLE
69007: EQUAL
69008: IFTRUE 69012
69010: GO 69019
69012: POP
// hHackFog ; 11 :
69013: CALL 80370 0 0
69017: GO 69050
69019: LD_INT 11
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69027
69025: GO 69034
69027: POP
// hHackApeman ; 12 :
69028: CALL 80385 0 0
69032: GO 69050
69034: LD_INT 12
69036: DOUBLE
69037: EQUAL
69038: IFTRUE 69042
69040: GO 69049
69042: POP
// hHackBoom ; end ;
69043: CALL 80470 0 0
69047: GO 69050
69049: POP
// end ; end ;
69050: PPOPN 6
69052: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
69053: GO 69055
69055: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69056: LD_STRING initStreamRollete();
69058: PPUSH
69059: CALL_OW 559
// InitStreamMode ;
69063: CALL 69072 0 0
// DefineStreamItems ( ) ;
69067: CALL 69512 0 0
// end ;
69071: END
// function InitStreamMode ; begin
69072: LD_INT 0
69074: PPUSH
// streamModeActive := false ;
69075: LD_ADDR_EXP 106
69079: PUSH
69080: LD_INT 0
69082: ST_TO_ADDR
// normalCounter := 36 ;
69083: LD_ADDR_EXP 107
69087: PUSH
69088: LD_INT 36
69090: ST_TO_ADDR
// hardcoreCounter := 16 ;
69091: LD_ADDR_EXP 108
69095: PUSH
69096: LD_INT 16
69098: ST_TO_ADDR
// sRocket := false ;
69099: LD_ADDR_EXP 111
69103: PUSH
69104: LD_INT 0
69106: ST_TO_ADDR
// sSpeed := false ;
69107: LD_ADDR_EXP 110
69111: PUSH
69112: LD_INT 0
69114: ST_TO_ADDR
// sEngine := false ;
69115: LD_ADDR_EXP 112
69119: PUSH
69120: LD_INT 0
69122: ST_TO_ADDR
// sSpec := false ;
69123: LD_ADDR_EXP 109
69127: PUSH
69128: LD_INT 0
69130: ST_TO_ADDR
// sLevel := false ;
69131: LD_ADDR_EXP 113
69135: PUSH
69136: LD_INT 0
69138: ST_TO_ADDR
// sArmoury := false ;
69139: LD_ADDR_EXP 114
69143: PUSH
69144: LD_INT 0
69146: ST_TO_ADDR
// sRadar := false ;
69147: LD_ADDR_EXP 115
69151: PUSH
69152: LD_INT 0
69154: ST_TO_ADDR
// sBunker := false ;
69155: LD_ADDR_EXP 116
69159: PUSH
69160: LD_INT 0
69162: ST_TO_ADDR
// sHack := false ;
69163: LD_ADDR_EXP 117
69167: PUSH
69168: LD_INT 0
69170: ST_TO_ADDR
// sFire := false ;
69171: LD_ADDR_EXP 118
69175: PUSH
69176: LD_INT 0
69178: ST_TO_ADDR
// sRefresh := false ;
69179: LD_ADDR_EXP 119
69183: PUSH
69184: LD_INT 0
69186: ST_TO_ADDR
// sExp := false ;
69187: LD_ADDR_EXP 120
69191: PUSH
69192: LD_INT 0
69194: ST_TO_ADDR
// sDepot := false ;
69195: LD_ADDR_EXP 121
69199: PUSH
69200: LD_INT 0
69202: ST_TO_ADDR
// sFlag := false ;
69203: LD_ADDR_EXP 122
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
// sKamikadze := false ;
69211: LD_ADDR_EXP 130
69215: PUSH
69216: LD_INT 0
69218: ST_TO_ADDR
// sTroll := false ;
69219: LD_ADDR_EXP 131
69223: PUSH
69224: LD_INT 0
69226: ST_TO_ADDR
// sSlow := false ;
69227: LD_ADDR_EXP 132
69231: PUSH
69232: LD_INT 0
69234: ST_TO_ADDR
// sLack := false ;
69235: LD_ADDR_EXP 133
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
// sTank := false ;
69243: LD_ADDR_EXP 135
69247: PUSH
69248: LD_INT 0
69250: ST_TO_ADDR
// sRemote := false ;
69251: LD_ADDR_EXP 136
69255: PUSH
69256: LD_INT 0
69258: ST_TO_ADDR
// sPowell := false ;
69259: LD_ADDR_EXP 137
69263: PUSH
69264: LD_INT 0
69266: ST_TO_ADDR
// sTeleport := false ;
69267: LD_ADDR_EXP 140
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
// sOilTower := false ;
69275: LD_ADDR_EXP 142
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// sShovel := false ;
69283: LD_ADDR_EXP 143
69287: PUSH
69288: LD_INT 0
69290: ST_TO_ADDR
// sSheik := false ;
69291: LD_ADDR_EXP 144
69295: PUSH
69296: LD_INT 0
69298: ST_TO_ADDR
// sEarthquake := false ;
69299: LD_ADDR_EXP 146
69303: PUSH
69304: LD_INT 0
69306: ST_TO_ADDR
// sAI := false ;
69307: LD_ADDR_EXP 147
69311: PUSH
69312: LD_INT 0
69314: ST_TO_ADDR
// sCargo := false ;
69315: LD_ADDR_EXP 150
69319: PUSH
69320: LD_INT 0
69322: ST_TO_ADDR
// sDLaser := false ;
69323: LD_ADDR_EXP 151
69327: PUSH
69328: LD_INT 0
69330: ST_TO_ADDR
// sExchange := false ;
69331: LD_ADDR_EXP 152
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
// sFac := false ;
69339: LD_ADDR_EXP 153
69343: PUSH
69344: LD_INT 0
69346: ST_TO_ADDR
// sPower := false ;
69347: LD_ADDR_EXP 154
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
// sRandom := false ;
69355: LD_ADDR_EXP 155
69359: PUSH
69360: LD_INT 0
69362: ST_TO_ADDR
// sShield := false ;
69363: LD_ADDR_EXP 156
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// sTime := false ;
69371: LD_ADDR_EXP 157
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// sTools := false ;
69379: LD_ADDR_EXP 158
69383: PUSH
69384: LD_INT 0
69386: ST_TO_ADDR
// sSold := false ;
69387: LD_ADDR_EXP 123
69391: PUSH
69392: LD_INT 0
69394: ST_TO_ADDR
// sDiff := false ;
69395: LD_ADDR_EXP 124
69399: PUSH
69400: LD_INT 0
69402: ST_TO_ADDR
// sFog := false ;
69403: LD_ADDR_EXP 127
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
// sReset := false ;
69411: LD_ADDR_EXP 128
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
// sSun := false ;
69419: LD_ADDR_EXP 129
69423: PUSH
69424: LD_INT 0
69426: ST_TO_ADDR
// sTiger := false ;
69427: LD_ADDR_EXP 125
69431: PUSH
69432: LD_INT 0
69434: ST_TO_ADDR
// sBomb := false ;
69435: LD_ADDR_EXP 126
69439: PUSH
69440: LD_INT 0
69442: ST_TO_ADDR
// sWound := false ;
69443: LD_ADDR_EXP 134
69447: PUSH
69448: LD_INT 0
69450: ST_TO_ADDR
// sBetray := false ;
69451: LD_ADDR_EXP 138
69455: PUSH
69456: LD_INT 0
69458: ST_TO_ADDR
// sContamin := false ;
69459: LD_ADDR_EXP 139
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// sOil := false ;
69467: LD_ADDR_EXP 141
69471: PUSH
69472: LD_INT 0
69474: ST_TO_ADDR
// sStu := false ;
69475: LD_ADDR_EXP 145
69479: PUSH
69480: LD_INT 0
69482: ST_TO_ADDR
// sBazooka := false ;
69483: LD_ADDR_EXP 148
69487: PUSH
69488: LD_INT 0
69490: ST_TO_ADDR
// sMortar := false ;
69491: LD_ADDR_EXP 149
69495: PUSH
69496: LD_INT 0
69498: ST_TO_ADDR
// sRanger := false ;
69499: LD_ADDR_EXP 159
69503: PUSH
69504: LD_INT 0
69506: ST_TO_ADDR
// end ;
69507: LD_VAR 0 1
69511: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
69512: LD_INT 0
69514: PPUSH
69515: PPUSH
69516: PPUSH
69517: PPUSH
69518: PPUSH
// result := [ ] ;
69519: LD_ADDR_VAR 0 1
69523: PUSH
69524: EMPTY
69525: ST_TO_ADDR
// if campaign_id = 1 then
69526: LD_OWVAR 69
69530: PUSH
69531: LD_INT 1
69533: EQUAL
69534: IFFALSE 72472
// begin case mission_number of 1 :
69536: LD_OWVAR 70
69540: PUSH
69541: LD_INT 1
69543: DOUBLE
69544: EQUAL
69545: IFTRUE 69549
69547: GO 69613
69549: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
69550: LD_ADDR_VAR 0 1
69554: PUSH
69555: LD_INT 2
69557: PUSH
69558: LD_INT 4
69560: PUSH
69561: LD_INT 11
69563: PUSH
69564: LD_INT 12
69566: PUSH
69567: LD_INT 15
69569: PUSH
69570: LD_INT 16
69572: PUSH
69573: LD_INT 22
69575: PUSH
69576: LD_INT 23
69578: PUSH
69579: LD_INT 26
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 101
69595: PUSH
69596: LD_INT 102
69598: PUSH
69599: LD_INT 106
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: ST_TO_ADDR
69611: GO 72470
69613: LD_INT 2
69615: DOUBLE
69616: EQUAL
69617: IFTRUE 69621
69619: GO 69693
69621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
69622: LD_ADDR_VAR 0 1
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 4
69632: PUSH
69633: LD_INT 11
69635: PUSH
69636: LD_INT 12
69638: PUSH
69639: LD_INT 15
69641: PUSH
69642: LD_INT 16
69644: PUSH
69645: LD_INT 22
69647: PUSH
69648: LD_INT 23
69650: PUSH
69651: LD_INT 26
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 101
69667: PUSH
69668: LD_INT 102
69670: PUSH
69671: LD_INT 105
69673: PUSH
69674: LD_INT 106
69676: PUSH
69677: LD_INT 108
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: ST_TO_ADDR
69691: GO 72470
69693: LD_INT 3
69695: DOUBLE
69696: EQUAL
69697: IFTRUE 69701
69699: GO 69777
69701: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
69702: LD_ADDR_VAR 0 1
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: LD_INT 4
69712: PUSH
69713: LD_INT 5
69715: PUSH
69716: LD_INT 11
69718: PUSH
69719: LD_INT 12
69721: PUSH
69722: LD_INT 15
69724: PUSH
69725: LD_INT 16
69727: PUSH
69728: LD_INT 22
69730: PUSH
69731: LD_INT 26
69733: PUSH
69734: LD_INT 36
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 101
69751: PUSH
69752: LD_INT 102
69754: PUSH
69755: LD_INT 105
69757: PUSH
69758: LD_INT 106
69760: PUSH
69761: LD_INT 108
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: ST_TO_ADDR
69775: GO 72470
69777: LD_INT 4
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69785
69783: GO 69869
69785: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
69786: LD_ADDR_VAR 0 1
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 4
69796: PUSH
69797: LD_INT 5
69799: PUSH
69800: LD_INT 8
69802: PUSH
69803: LD_INT 11
69805: PUSH
69806: LD_INT 12
69808: PUSH
69809: LD_INT 15
69811: PUSH
69812: LD_INT 16
69814: PUSH
69815: LD_INT 22
69817: PUSH
69818: LD_INT 23
69820: PUSH
69821: LD_INT 26
69823: PUSH
69824: LD_INT 36
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 101
69843: PUSH
69844: LD_INT 102
69846: PUSH
69847: LD_INT 105
69849: PUSH
69850: LD_INT 106
69852: PUSH
69853: LD_INT 108
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: ST_TO_ADDR
69867: GO 72470
69869: LD_INT 5
69871: DOUBLE
69872: EQUAL
69873: IFTRUE 69877
69875: GO 69977
69877: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
69878: LD_ADDR_VAR 0 1
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: LD_INT 4
69888: PUSH
69889: LD_INT 5
69891: PUSH
69892: LD_INT 6
69894: PUSH
69895: LD_INT 8
69897: PUSH
69898: LD_INT 11
69900: PUSH
69901: LD_INT 12
69903: PUSH
69904: LD_INT 15
69906: PUSH
69907: LD_INT 16
69909: PUSH
69910: LD_INT 22
69912: PUSH
69913: LD_INT 23
69915: PUSH
69916: LD_INT 25
69918: PUSH
69919: LD_INT 26
69921: PUSH
69922: LD_INT 36
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 101
69943: PUSH
69944: LD_INT 102
69946: PUSH
69947: LD_INT 105
69949: PUSH
69950: LD_INT 106
69952: PUSH
69953: LD_INT 108
69955: PUSH
69956: LD_INT 109
69958: PUSH
69959: LD_INT 112
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: ST_TO_ADDR
69975: GO 72470
69977: LD_INT 6
69979: DOUBLE
69980: EQUAL
69981: IFTRUE 69985
69983: GO 70105
69985: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
69986: LD_ADDR_VAR 0 1
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: LD_INT 5
69999: PUSH
70000: LD_INT 6
70002: PUSH
70003: LD_INT 8
70005: PUSH
70006: LD_INT 11
70008: PUSH
70009: LD_INT 12
70011: PUSH
70012: LD_INT 15
70014: PUSH
70015: LD_INT 16
70017: PUSH
70018: LD_INT 20
70020: PUSH
70021: LD_INT 21
70023: PUSH
70024: LD_INT 22
70026: PUSH
70027: LD_INT 23
70029: PUSH
70030: LD_INT 25
70032: PUSH
70033: LD_INT 26
70035: PUSH
70036: LD_INT 30
70038: PUSH
70039: LD_INT 31
70041: PUSH
70042: LD_INT 32
70044: PUSH
70045: LD_INT 36
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 101
70071: PUSH
70072: LD_INT 102
70074: PUSH
70075: LD_INT 105
70077: PUSH
70078: LD_INT 106
70080: PUSH
70081: LD_INT 108
70083: PUSH
70084: LD_INT 109
70086: PUSH
70087: LD_INT 112
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: ST_TO_ADDR
70103: GO 72470
70105: LD_INT 7
70107: DOUBLE
70108: EQUAL
70109: IFTRUE 70113
70111: GO 70213
70113: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
70114: LD_ADDR_VAR 0 1
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: LD_INT 7
70130: PUSH
70131: LD_INT 11
70133: PUSH
70134: LD_INT 12
70136: PUSH
70137: LD_INT 15
70139: PUSH
70140: LD_INT 16
70142: PUSH
70143: LD_INT 20
70145: PUSH
70146: LD_INT 21
70148: PUSH
70149: LD_INT 22
70151: PUSH
70152: LD_INT 23
70154: PUSH
70155: LD_INT 25
70157: PUSH
70158: LD_INT 26
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 101
70179: PUSH
70180: LD_INT 102
70182: PUSH
70183: LD_INT 103
70185: PUSH
70186: LD_INT 105
70188: PUSH
70189: LD_INT 106
70191: PUSH
70192: LD_INT 108
70194: PUSH
70195: LD_INT 112
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: ST_TO_ADDR
70211: GO 72470
70213: LD_INT 8
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70221
70219: GO 70349
70221: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
70222: LD_ADDR_VAR 0 1
70226: PUSH
70227: LD_INT 2
70229: PUSH
70230: LD_INT 4
70232: PUSH
70233: LD_INT 5
70235: PUSH
70236: LD_INT 6
70238: PUSH
70239: LD_INT 7
70241: PUSH
70242: LD_INT 8
70244: PUSH
70245: LD_INT 11
70247: PUSH
70248: LD_INT 12
70250: PUSH
70251: LD_INT 15
70253: PUSH
70254: LD_INT 16
70256: PUSH
70257: LD_INT 20
70259: PUSH
70260: LD_INT 21
70262: PUSH
70263: LD_INT 22
70265: PUSH
70266: LD_INT 23
70268: PUSH
70269: LD_INT 25
70271: PUSH
70272: LD_INT 26
70274: PUSH
70275: LD_INT 30
70277: PUSH
70278: LD_INT 31
70280: PUSH
70281: LD_INT 32
70283: PUSH
70284: LD_INT 36
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 101
70311: PUSH
70312: LD_INT 102
70314: PUSH
70315: LD_INT 103
70317: PUSH
70318: LD_INT 105
70320: PUSH
70321: LD_INT 106
70323: PUSH
70324: LD_INT 108
70326: PUSH
70327: LD_INT 109
70329: PUSH
70330: LD_INT 112
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: ST_TO_ADDR
70347: GO 72470
70349: LD_INT 9
70351: DOUBLE
70352: EQUAL
70353: IFTRUE 70357
70355: GO 70493
70357: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
70358: LD_ADDR_VAR 0 1
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: LD_INT 4
70368: PUSH
70369: LD_INT 5
70371: PUSH
70372: LD_INT 6
70374: PUSH
70375: LD_INT 7
70377: PUSH
70378: LD_INT 8
70380: PUSH
70381: LD_INT 11
70383: PUSH
70384: LD_INT 12
70386: PUSH
70387: LD_INT 15
70389: PUSH
70390: LD_INT 16
70392: PUSH
70393: LD_INT 20
70395: PUSH
70396: LD_INT 21
70398: PUSH
70399: LD_INT 22
70401: PUSH
70402: LD_INT 23
70404: PUSH
70405: LD_INT 25
70407: PUSH
70408: LD_INT 26
70410: PUSH
70411: LD_INT 28
70413: PUSH
70414: LD_INT 30
70416: PUSH
70417: LD_INT 31
70419: PUSH
70420: LD_INT 32
70422: PUSH
70423: LD_INT 36
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 101
70451: PUSH
70452: LD_INT 102
70454: PUSH
70455: LD_INT 103
70457: PUSH
70458: LD_INT 105
70460: PUSH
70461: LD_INT 106
70463: PUSH
70464: LD_INT 108
70466: PUSH
70467: LD_INT 109
70469: PUSH
70470: LD_INT 112
70472: PUSH
70473: LD_INT 114
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: ST_TO_ADDR
70491: GO 72470
70493: LD_INT 10
70495: DOUBLE
70496: EQUAL
70497: IFTRUE 70501
70499: GO 70685
70501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
70502: LD_ADDR_VAR 0 1
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 4
70512: PUSH
70513: LD_INT 5
70515: PUSH
70516: LD_INT 6
70518: PUSH
70519: LD_INT 7
70521: PUSH
70522: LD_INT 8
70524: PUSH
70525: LD_INT 9
70527: PUSH
70528: LD_INT 10
70530: PUSH
70531: LD_INT 11
70533: PUSH
70534: LD_INT 12
70536: PUSH
70537: LD_INT 13
70539: PUSH
70540: LD_INT 14
70542: PUSH
70543: LD_INT 15
70545: PUSH
70546: LD_INT 16
70548: PUSH
70549: LD_INT 17
70551: PUSH
70552: LD_INT 18
70554: PUSH
70555: LD_INT 19
70557: PUSH
70558: LD_INT 20
70560: PUSH
70561: LD_INT 21
70563: PUSH
70564: LD_INT 22
70566: PUSH
70567: LD_INT 23
70569: PUSH
70570: LD_INT 24
70572: PUSH
70573: LD_INT 25
70575: PUSH
70576: LD_INT 26
70578: PUSH
70579: LD_INT 28
70581: PUSH
70582: LD_INT 30
70584: PUSH
70585: LD_INT 31
70587: PUSH
70588: LD_INT 32
70590: PUSH
70591: LD_INT 36
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 101
70627: PUSH
70628: LD_INT 102
70630: PUSH
70631: LD_INT 103
70633: PUSH
70634: LD_INT 104
70636: PUSH
70637: LD_INT 105
70639: PUSH
70640: LD_INT 106
70642: PUSH
70643: LD_INT 107
70645: PUSH
70646: LD_INT 108
70648: PUSH
70649: LD_INT 109
70651: PUSH
70652: LD_INT 110
70654: PUSH
70655: LD_INT 111
70657: PUSH
70658: LD_INT 112
70660: PUSH
70661: LD_INT 114
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: ST_TO_ADDR
70683: GO 72470
70685: LD_INT 11
70687: DOUBLE
70688: EQUAL
70689: IFTRUE 70693
70691: GO 70885
70693: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
70694: LD_ADDR_VAR 0 1
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: LD_INT 5
70710: PUSH
70711: LD_INT 6
70713: PUSH
70714: LD_INT 7
70716: PUSH
70717: LD_INT 8
70719: PUSH
70720: LD_INT 9
70722: PUSH
70723: LD_INT 10
70725: PUSH
70726: LD_INT 11
70728: PUSH
70729: LD_INT 12
70731: PUSH
70732: LD_INT 13
70734: PUSH
70735: LD_INT 14
70737: PUSH
70738: LD_INT 15
70740: PUSH
70741: LD_INT 16
70743: PUSH
70744: LD_INT 17
70746: PUSH
70747: LD_INT 18
70749: PUSH
70750: LD_INT 19
70752: PUSH
70753: LD_INT 20
70755: PUSH
70756: LD_INT 21
70758: PUSH
70759: LD_INT 22
70761: PUSH
70762: LD_INT 23
70764: PUSH
70765: LD_INT 24
70767: PUSH
70768: LD_INT 25
70770: PUSH
70771: LD_INT 26
70773: PUSH
70774: LD_INT 28
70776: PUSH
70777: LD_INT 30
70779: PUSH
70780: LD_INT 31
70782: PUSH
70783: LD_INT 32
70785: PUSH
70786: LD_INT 34
70788: PUSH
70789: LD_INT 36
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 101
70827: PUSH
70828: LD_INT 102
70830: PUSH
70831: LD_INT 103
70833: PUSH
70834: LD_INT 104
70836: PUSH
70837: LD_INT 105
70839: PUSH
70840: LD_INT 106
70842: PUSH
70843: LD_INT 107
70845: PUSH
70846: LD_INT 108
70848: PUSH
70849: LD_INT 109
70851: PUSH
70852: LD_INT 110
70854: PUSH
70855: LD_INT 111
70857: PUSH
70858: LD_INT 112
70860: PUSH
70861: LD_INT 114
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: ST_TO_ADDR
70883: GO 72470
70885: LD_INT 12
70887: DOUBLE
70888: EQUAL
70889: IFTRUE 70893
70891: GO 71101
70893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
70894: LD_ADDR_VAR 0 1
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: LD_INT 3
70907: PUSH
70908: LD_INT 4
70910: PUSH
70911: LD_INT 5
70913: PUSH
70914: LD_INT 6
70916: PUSH
70917: LD_INT 7
70919: PUSH
70920: LD_INT 8
70922: PUSH
70923: LD_INT 9
70925: PUSH
70926: LD_INT 10
70928: PUSH
70929: LD_INT 11
70931: PUSH
70932: LD_INT 12
70934: PUSH
70935: LD_INT 13
70937: PUSH
70938: LD_INT 14
70940: PUSH
70941: LD_INT 15
70943: PUSH
70944: LD_INT 16
70946: PUSH
70947: LD_INT 17
70949: PUSH
70950: LD_INT 18
70952: PUSH
70953: LD_INT 19
70955: PUSH
70956: LD_INT 20
70958: PUSH
70959: LD_INT 21
70961: PUSH
70962: LD_INT 22
70964: PUSH
70965: LD_INT 23
70967: PUSH
70968: LD_INT 24
70970: PUSH
70971: LD_INT 25
70973: PUSH
70974: LD_INT 26
70976: PUSH
70977: LD_INT 27
70979: PUSH
70980: LD_INT 28
70982: PUSH
70983: LD_INT 30
70985: PUSH
70986: LD_INT 31
70988: PUSH
70989: LD_INT 32
70991: PUSH
70992: LD_INT 33
70994: PUSH
70995: LD_INT 34
70997: PUSH
70998: LD_INT 36
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 101
71039: PUSH
71040: LD_INT 102
71042: PUSH
71043: LD_INT 103
71045: PUSH
71046: LD_INT 104
71048: PUSH
71049: LD_INT 105
71051: PUSH
71052: LD_INT 106
71054: PUSH
71055: LD_INT 107
71057: PUSH
71058: LD_INT 108
71060: PUSH
71061: LD_INT 109
71063: PUSH
71064: LD_INT 110
71066: PUSH
71067: LD_INT 111
71069: PUSH
71070: LD_INT 112
71072: PUSH
71073: LD_INT 113
71075: PUSH
71076: LD_INT 114
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: ST_TO_ADDR
71099: GO 72470
71101: LD_INT 13
71103: DOUBLE
71104: EQUAL
71105: IFTRUE 71109
71107: GO 71305
71109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
71110: LD_ADDR_VAR 0 1
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: LD_INT 2
71120: PUSH
71121: LD_INT 3
71123: PUSH
71124: LD_INT 4
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: LD_INT 8
71132: PUSH
71133: LD_INT 9
71135: PUSH
71136: LD_INT 10
71138: PUSH
71139: LD_INT 11
71141: PUSH
71142: LD_INT 12
71144: PUSH
71145: LD_INT 14
71147: PUSH
71148: LD_INT 15
71150: PUSH
71151: LD_INT 16
71153: PUSH
71154: LD_INT 17
71156: PUSH
71157: LD_INT 18
71159: PUSH
71160: LD_INT 19
71162: PUSH
71163: LD_INT 20
71165: PUSH
71166: LD_INT 21
71168: PUSH
71169: LD_INT 22
71171: PUSH
71172: LD_INT 23
71174: PUSH
71175: LD_INT 24
71177: PUSH
71178: LD_INT 25
71180: PUSH
71181: LD_INT 26
71183: PUSH
71184: LD_INT 27
71186: PUSH
71187: LD_INT 28
71189: PUSH
71190: LD_INT 30
71192: PUSH
71193: LD_INT 31
71195: PUSH
71196: LD_INT 32
71198: PUSH
71199: LD_INT 33
71201: PUSH
71202: LD_INT 34
71204: PUSH
71205: LD_INT 36
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 101
71243: PUSH
71244: LD_INT 102
71246: PUSH
71247: LD_INT 103
71249: PUSH
71250: LD_INT 104
71252: PUSH
71253: LD_INT 105
71255: PUSH
71256: LD_INT 106
71258: PUSH
71259: LD_INT 107
71261: PUSH
71262: LD_INT 108
71264: PUSH
71265: LD_INT 109
71267: PUSH
71268: LD_INT 110
71270: PUSH
71271: LD_INT 111
71273: PUSH
71274: LD_INT 112
71276: PUSH
71277: LD_INT 113
71279: PUSH
71280: LD_INT 114
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: ST_TO_ADDR
71303: GO 72470
71305: LD_INT 14
71307: DOUBLE
71308: EQUAL
71309: IFTRUE 71313
71311: GO 71525
71313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
71314: LD_ADDR_VAR 0 1
71318: PUSH
71319: LD_INT 1
71321: PUSH
71322: LD_INT 2
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: LD_INT 4
71330: PUSH
71331: LD_INT 5
71333: PUSH
71334: LD_INT 6
71336: PUSH
71337: LD_INT 7
71339: PUSH
71340: LD_INT 8
71342: PUSH
71343: LD_INT 9
71345: PUSH
71346: LD_INT 10
71348: PUSH
71349: LD_INT 11
71351: PUSH
71352: LD_INT 12
71354: PUSH
71355: LD_INT 13
71357: PUSH
71358: LD_INT 14
71360: PUSH
71361: LD_INT 15
71363: PUSH
71364: LD_INT 16
71366: PUSH
71367: LD_INT 17
71369: PUSH
71370: LD_INT 18
71372: PUSH
71373: LD_INT 19
71375: PUSH
71376: LD_INT 20
71378: PUSH
71379: LD_INT 21
71381: PUSH
71382: LD_INT 22
71384: PUSH
71385: LD_INT 23
71387: PUSH
71388: LD_INT 24
71390: PUSH
71391: LD_INT 25
71393: PUSH
71394: LD_INT 26
71396: PUSH
71397: LD_INT 27
71399: PUSH
71400: LD_INT 28
71402: PUSH
71403: LD_INT 29
71405: PUSH
71406: LD_INT 30
71408: PUSH
71409: LD_INT 31
71411: PUSH
71412: LD_INT 32
71414: PUSH
71415: LD_INT 33
71417: PUSH
71418: LD_INT 34
71420: PUSH
71421: LD_INT 36
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 101
71463: PUSH
71464: LD_INT 102
71466: PUSH
71467: LD_INT 103
71469: PUSH
71470: LD_INT 104
71472: PUSH
71473: LD_INT 105
71475: PUSH
71476: LD_INT 106
71478: PUSH
71479: LD_INT 107
71481: PUSH
71482: LD_INT 108
71484: PUSH
71485: LD_INT 109
71487: PUSH
71488: LD_INT 110
71490: PUSH
71491: LD_INT 111
71493: PUSH
71494: LD_INT 112
71496: PUSH
71497: LD_INT 113
71499: PUSH
71500: LD_INT 114
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: ST_TO_ADDR
71523: GO 72470
71525: LD_INT 15
71527: DOUBLE
71528: EQUAL
71529: IFTRUE 71533
71531: GO 71745
71533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
71534: LD_ADDR_VAR 0 1
71538: PUSH
71539: LD_INT 1
71541: PUSH
71542: LD_INT 2
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: LD_INT 4
71550: PUSH
71551: LD_INT 5
71553: PUSH
71554: LD_INT 6
71556: PUSH
71557: LD_INT 7
71559: PUSH
71560: LD_INT 8
71562: PUSH
71563: LD_INT 9
71565: PUSH
71566: LD_INT 10
71568: PUSH
71569: LD_INT 11
71571: PUSH
71572: LD_INT 12
71574: PUSH
71575: LD_INT 13
71577: PUSH
71578: LD_INT 14
71580: PUSH
71581: LD_INT 15
71583: PUSH
71584: LD_INT 16
71586: PUSH
71587: LD_INT 17
71589: PUSH
71590: LD_INT 18
71592: PUSH
71593: LD_INT 19
71595: PUSH
71596: LD_INT 20
71598: PUSH
71599: LD_INT 21
71601: PUSH
71602: LD_INT 22
71604: PUSH
71605: LD_INT 23
71607: PUSH
71608: LD_INT 24
71610: PUSH
71611: LD_INT 25
71613: PUSH
71614: LD_INT 26
71616: PUSH
71617: LD_INT 27
71619: PUSH
71620: LD_INT 28
71622: PUSH
71623: LD_INT 29
71625: PUSH
71626: LD_INT 30
71628: PUSH
71629: LD_INT 31
71631: PUSH
71632: LD_INT 32
71634: PUSH
71635: LD_INT 33
71637: PUSH
71638: LD_INT 34
71640: PUSH
71641: LD_INT 36
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 101
71683: PUSH
71684: LD_INT 102
71686: PUSH
71687: LD_INT 103
71689: PUSH
71690: LD_INT 104
71692: PUSH
71693: LD_INT 105
71695: PUSH
71696: LD_INT 106
71698: PUSH
71699: LD_INT 107
71701: PUSH
71702: LD_INT 108
71704: PUSH
71705: LD_INT 109
71707: PUSH
71708: LD_INT 110
71710: PUSH
71711: LD_INT 111
71713: PUSH
71714: LD_INT 112
71716: PUSH
71717: LD_INT 113
71719: PUSH
71720: LD_INT 114
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: ST_TO_ADDR
71743: GO 72470
71745: LD_INT 16
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71753
71751: GO 71877
71753: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
71754: LD_ADDR_VAR 0 1
71758: PUSH
71759: LD_INT 2
71761: PUSH
71762: LD_INT 4
71764: PUSH
71765: LD_INT 5
71767: PUSH
71768: LD_INT 7
71770: PUSH
71771: LD_INT 11
71773: PUSH
71774: LD_INT 12
71776: PUSH
71777: LD_INT 15
71779: PUSH
71780: LD_INT 16
71782: PUSH
71783: LD_INT 20
71785: PUSH
71786: LD_INT 21
71788: PUSH
71789: LD_INT 22
71791: PUSH
71792: LD_INT 23
71794: PUSH
71795: LD_INT 25
71797: PUSH
71798: LD_INT 26
71800: PUSH
71801: LD_INT 30
71803: PUSH
71804: LD_INT 31
71806: PUSH
71807: LD_INT 32
71809: PUSH
71810: LD_INT 33
71812: PUSH
71813: LD_INT 34
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 101
71839: PUSH
71840: LD_INT 102
71842: PUSH
71843: LD_INT 103
71845: PUSH
71846: LD_INT 106
71848: PUSH
71849: LD_INT 108
71851: PUSH
71852: LD_INT 112
71854: PUSH
71855: LD_INT 113
71857: PUSH
71858: LD_INT 114
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: ST_TO_ADDR
71875: GO 72470
71877: LD_INT 17
71879: DOUBLE
71880: EQUAL
71881: IFTRUE 71885
71883: GO 72097
71885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
71886: LD_ADDR_VAR 0 1
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: LD_INT 3
71899: PUSH
71900: LD_INT 4
71902: PUSH
71903: LD_INT 5
71905: PUSH
71906: LD_INT 6
71908: PUSH
71909: LD_INT 7
71911: PUSH
71912: LD_INT 8
71914: PUSH
71915: LD_INT 9
71917: PUSH
71918: LD_INT 10
71920: PUSH
71921: LD_INT 11
71923: PUSH
71924: LD_INT 12
71926: PUSH
71927: LD_INT 13
71929: PUSH
71930: LD_INT 14
71932: PUSH
71933: LD_INT 15
71935: PUSH
71936: LD_INT 16
71938: PUSH
71939: LD_INT 17
71941: PUSH
71942: LD_INT 18
71944: PUSH
71945: LD_INT 19
71947: PUSH
71948: LD_INT 20
71950: PUSH
71951: LD_INT 21
71953: PUSH
71954: LD_INT 22
71956: PUSH
71957: LD_INT 23
71959: PUSH
71960: LD_INT 24
71962: PUSH
71963: LD_INT 25
71965: PUSH
71966: LD_INT 26
71968: PUSH
71969: LD_INT 27
71971: PUSH
71972: LD_INT 28
71974: PUSH
71975: LD_INT 29
71977: PUSH
71978: LD_INT 30
71980: PUSH
71981: LD_INT 31
71983: PUSH
71984: LD_INT 32
71986: PUSH
71987: LD_INT 33
71989: PUSH
71990: LD_INT 34
71992: PUSH
71993: LD_INT 36
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 101
72035: PUSH
72036: LD_INT 102
72038: PUSH
72039: LD_INT 103
72041: PUSH
72042: LD_INT 104
72044: PUSH
72045: LD_INT 105
72047: PUSH
72048: LD_INT 106
72050: PUSH
72051: LD_INT 107
72053: PUSH
72054: LD_INT 108
72056: PUSH
72057: LD_INT 109
72059: PUSH
72060: LD_INT 110
72062: PUSH
72063: LD_INT 111
72065: PUSH
72066: LD_INT 112
72068: PUSH
72069: LD_INT 113
72071: PUSH
72072: LD_INT 114
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: ST_TO_ADDR
72095: GO 72470
72097: LD_INT 18
72099: DOUBLE
72100: EQUAL
72101: IFTRUE 72105
72103: GO 72241
72105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
72106: LD_ADDR_VAR 0 1
72110: PUSH
72111: LD_INT 2
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: LD_INT 5
72119: PUSH
72120: LD_INT 7
72122: PUSH
72123: LD_INT 11
72125: PUSH
72126: LD_INT 12
72128: PUSH
72129: LD_INT 15
72131: PUSH
72132: LD_INT 16
72134: PUSH
72135: LD_INT 20
72137: PUSH
72138: LD_INT 21
72140: PUSH
72141: LD_INT 22
72143: PUSH
72144: LD_INT 23
72146: PUSH
72147: LD_INT 25
72149: PUSH
72150: LD_INT 26
72152: PUSH
72153: LD_INT 30
72155: PUSH
72156: LD_INT 31
72158: PUSH
72159: LD_INT 32
72161: PUSH
72162: LD_INT 33
72164: PUSH
72165: LD_INT 34
72167: PUSH
72168: LD_INT 35
72170: PUSH
72171: LD_INT 36
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 101
72199: PUSH
72200: LD_INT 102
72202: PUSH
72203: LD_INT 103
72205: PUSH
72206: LD_INT 106
72208: PUSH
72209: LD_INT 108
72211: PUSH
72212: LD_INT 112
72214: PUSH
72215: LD_INT 113
72217: PUSH
72218: LD_INT 114
72220: PUSH
72221: LD_INT 115
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: ST_TO_ADDR
72239: GO 72470
72241: LD_INT 19
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72249
72247: GO 72469
72249: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
72250: LD_ADDR_VAR 0 1
72254: PUSH
72255: LD_INT 1
72257: PUSH
72258: LD_INT 2
72260: PUSH
72261: LD_INT 3
72263: PUSH
72264: LD_INT 4
72266: PUSH
72267: LD_INT 5
72269: PUSH
72270: LD_INT 6
72272: PUSH
72273: LD_INT 7
72275: PUSH
72276: LD_INT 8
72278: PUSH
72279: LD_INT 9
72281: PUSH
72282: LD_INT 10
72284: PUSH
72285: LD_INT 11
72287: PUSH
72288: LD_INT 12
72290: PUSH
72291: LD_INT 13
72293: PUSH
72294: LD_INT 14
72296: PUSH
72297: LD_INT 15
72299: PUSH
72300: LD_INT 16
72302: PUSH
72303: LD_INT 17
72305: PUSH
72306: LD_INT 18
72308: PUSH
72309: LD_INT 19
72311: PUSH
72312: LD_INT 20
72314: PUSH
72315: LD_INT 21
72317: PUSH
72318: LD_INT 22
72320: PUSH
72321: LD_INT 23
72323: PUSH
72324: LD_INT 24
72326: PUSH
72327: LD_INT 25
72329: PUSH
72330: LD_INT 26
72332: PUSH
72333: LD_INT 27
72335: PUSH
72336: LD_INT 28
72338: PUSH
72339: LD_INT 29
72341: PUSH
72342: LD_INT 30
72344: PUSH
72345: LD_INT 31
72347: PUSH
72348: LD_INT 32
72350: PUSH
72351: LD_INT 33
72353: PUSH
72354: LD_INT 34
72356: PUSH
72357: LD_INT 35
72359: PUSH
72360: LD_INT 36
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 101
72403: PUSH
72404: LD_INT 102
72406: PUSH
72407: LD_INT 103
72409: PUSH
72410: LD_INT 104
72412: PUSH
72413: LD_INT 105
72415: PUSH
72416: LD_INT 106
72418: PUSH
72419: LD_INT 107
72421: PUSH
72422: LD_INT 108
72424: PUSH
72425: LD_INT 109
72427: PUSH
72428: LD_INT 110
72430: PUSH
72431: LD_INT 111
72433: PUSH
72434: LD_INT 112
72436: PUSH
72437: LD_INT 113
72439: PUSH
72440: LD_INT 114
72442: PUSH
72443: LD_INT 115
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: ST_TO_ADDR
72467: GO 72470
72469: POP
// end else
72470: GO 72689
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
72472: LD_ADDR_VAR 0 1
72476: PUSH
72477: LD_INT 1
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: LD_INT 3
72485: PUSH
72486: LD_INT 4
72488: PUSH
72489: LD_INT 5
72491: PUSH
72492: LD_INT 6
72494: PUSH
72495: LD_INT 7
72497: PUSH
72498: LD_INT 8
72500: PUSH
72501: LD_INT 9
72503: PUSH
72504: LD_INT 10
72506: PUSH
72507: LD_INT 11
72509: PUSH
72510: LD_INT 12
72512: PUSH
72513: LD_INT 13
72515: PUSH
72516: LD_INT 14
72518: PUSH
72519: LD_INT 15
72521: PUSH
72522: LD_INT 16
72524: PUSH
72525: LD_INT 17
72527: PUSH
72528: LD_INT 18
72530: PUSH
72531: LD_INT 19
72533: PUSH
72534: LD_INT 20
72536: PUSH
72537: LD_INT 21
72539: PUSH
72540: LD_INT 22
72542: PUSH
72543: LD_INT 23
72545: PUSH
72546: LD_INT 24
72548: PUSH
72549: LD_INT 25
72551: PUSH
72552: LD_INT 26
72554: PUSH
72555: LD_INT 27
72557: PUSH
72558: LD_INT 28
72560: PUSH
72561: LD_INT 29
72563: PUSH
72564: LD_INT 30
72566: PUSH
72567: LD_INT 31
72569: PUSH
72570: LD_INT 32
72572: PUSH
72573: LD_INT 33
72575: PUSH
72576: LD_INT 34
72578: PUSH
72579: LD_INT 35
72581: PUSH
72582: LD_INT 36
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 101
72625: PUSH
72626: LD_INT 102
72628: PUSH
72629: LD_INT 103
72631: PUSH
72632: LD_INT 104
72634: PUSH
72635: LD_INT 105
72637: PUSH
72638: LD_INT 106
72640: PUSH
72641: LD_INT 107
72643: PUSH
72644: LD_INT 108
72646: PUSH
72647: LD_INT 109
72649: PUSH
72650: LD_INT 110
72652: PUSH
72653: LD_INT 111
72655: PUSH
72656: LD_INT 112
72658: PUSH
72659: LD_INT 113
72661: PUSH
72662: LD_INT 114
72664: PUSH
72665: LD_INT 115
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: ST_TO_ADDR
// if result then
72689: LD_VAR 0 1
72693: IFFALSE 72982
// begin normal :=  ;
72695: LD_ADDR_VAR 0 3
72699: PUSH
72700: LD_STRING 
72702: ST_TO_ADDR
// hardcore :=  ;
72703: LD_ADDR_VAR 0 4
72707: PUSH
72708: LD_STRING 
72710: ST_TO_ADDR
// for i = 1 to normalCounter do
72711: LD_ADDR_VAR 0 5
72715: PUSH
72716: DOUBLE
72717: LD_INT 1
72719: DEC
72720: ST_TO_ADDR
72721: LD_EXP 107
72725: PUSH
72726: FOR_TO
72727: IFFALSE 72828
// begin tmp := 0 ;
72729: LD_ADDR_VAR 0 2
72733: PUSH
72734: LD_STRING 0
72736: ST_TO_ADDR
// if result [ 1 ] then
72737: LD_VAR 0 1
72741: PUSH
72742: LD_INT 1
72744: ARRAY
72745: IFFALSE 72810
// if result [ 1 ] [ 1 ] = i then
72747: LD_VAR 0 1
72751: PUSH
72752: LD_INT 1
72754: ARRAY
72755: PUSH
72756: LD_INT 1
72758: ARRAY
72759: PUSH
72760: LD_VAR 0 5
72764: EQUAL
72765: IFFALSE 72810
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72767: LD_ADDR_VAR 0 1
72771: PUSH
72772: LD_VAR 0 1
72776: PPUSH
72777: LD_INT 1
72779: PPUSH
72780: LD_VAR 0 1
72784: PUSH
72785: LD_INT 1
72787: ARRAY
72788: PPUSH
72789: LD_INT 1
72791: PPUSH
72792: CALL_OW 3
72796: PPUSH
72797: CALL_OW 1
72801: ST_TO_ADDR
// tmp := 1 ;
72802: LD_ADDR_VAR 0 2
72806: PUSH
72807: LD_STRING 1
72809: ST_TO_ADDR
// end ; normal := normal & tmp ;
72810: LD_ADDR_VAR 0 3
72814: PUSH
72815: LD_VAR 0 3
72819: PUSH
72820: LD_VAR 0 2
72824: STR
72825: ST_TO_ADDR
// end ;
72826: GO 72726
72828: POP
72829: POP
// for i = 1 to hardcoreCounter do
72830: LD_ADDR_VAR 0 5
72834: PUSH
72835: DOUBLE
72836: LD_INT 1
72838: DEC
72839: ST_TO_ADDR
72840: LD_EXP 108
72844: PUSH
72845: FOR_TO
72846: IFFALSE 72951
// begin tmp := 0 ;
72848: LD_ADDR_VAR 0 2
72852: PUSH
72853: LD_STRING 0
72855: ST_TO_ADDR
// if result [ 2 ] then
72856: LD_VAR 0 1
72860: PUSH
72861: LD_INT 2
72863: ARRAY
72864: IFFALSE 72933
// if result [ 2 ] [ 1 ] = 100 + i then
72866: LD_VAR 0 1
72870: PUSH
72871: LD_INT 2
72873: ARRAY
72874: PUSH
72875: LD_INT 1
72877: ARRAY
72878: PUSH
72879: LD_INT 100
72881: PUSH
72882: LD_VAR 0 5
72886: PLUS
72887: EQUAL
72888: IFFALSE 72933
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72890: LD_ADDR_VAR 0 1
72894: PUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: LD_INT 2
72902: PPUSH
72903: LD_VAR 0 1
72907: PUSH
72908: LD_INT 2
72910: ARRAY
72911: PPUSH
72912: LD_INT 1
72914: PPUSH
72915: CALL_OW 3
72919: PPUSH
72920: CALL_OW 1
72924: ST_TO_ADDR
// tmp := 1 ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_STRING 1
72932: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72933: LD_ADDR_VAR 0 4
72937: PUSH
72938: LD_VAR 0 4
72942: PUSH
72943: LD_VAR 0 2
72947: STR
72948: ST_TO_ADDR
// end ;
72949: GO 72845
72951: POP
72952: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
72953: LD_STRING getStreamItemsFromMission("
72955: PUSH
72956: LD_VAR 0 3
72960: STR
72961: PUSH
72962: LD_STRING ","
72964: STR
72965: PUSH
72966: LD_VAR 0 4
72970: STR
72971: PUSH
72972: LD_STRING ")
72974: STR
72975: PPUSH
72976: CALL_OW 559
// end else
72980: GO 72989
// ToLua ( getStreamItemsFromMission("","") ) ;
72982: LD_STRING getStreamItemsFromMission("","")
72984: PPUSH
72985: CALL_OW 559
// end ;
72989: LD_VAR 0 1
72993: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72994: LD_EXP 106
72998: PUSH
72999: LD_EXP 111
73003: AND
73004: IFFALSE 73128
73006: GO 73008
73008: DISABLE
73009: LD_INT 0
73011: PPUSH
73012: PPUSH
// begin enable ;
73013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73014: LD_ADDR_VAR 0 2
73018: PUSH
73019: LD_INT 22
73021: PUSH
73022: LD_OWVAR 2
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 2
73033: PUSH
73034: LD_INT 34
73036: PUSH
73037: LD_INT 7
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 34
73046: PUSH
73047: LD_INT 45
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 34
73056: PUSH
73057: LD_INT 28
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 34
73066: PUSH
73067: LD_INT 47
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PPUSH
73085: CALL_OW 69
73089: ST_TO_ADDR
// if not tmp then
73090: LD_VAR 0 2
73094: NOT
73095: IFFALSE 73099
// exit ;
73097: GO 73128
// for i in tmp do
73099: LD_ADDR_VAR 0 1
73103: PUSH
73104: LD_VAR 0 2
73108: PUSH
73109: FOR_IN
73110: IFFALSE 73126
// begin SetLives ( i , 0 ) ;
73112: LD_VAR 0 1
73116: PPUSH
73117: LD_INT 0
73119: PPUSH
73120: CALL_OW 234
// end ;
73124: GO 73109
73126: POP
73127: POP
// end ;
73128: PPOPN 2
73130: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73131: LD_EXP 106
73135: PUSH
73136: LD_EXP 112
73140: AND
73141: IFFALSE 73225
73143: GO 73145
73145: DISABLE
73146: LD_INT 0
73148: PPUSH
73149: PPUSH
// begin enable ;
73150: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73151: LD_ADDR_VAR 0 2
73155: PUSH
73156: LD_INT 22
73158: PUSH
73159: LD_OWVAR 2
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 32
73170: PUSH
73171: LD_INT 3
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PPUSH
73182: CALL_OW 69
73186: ST_TO_ADDR
// if not tmp then
73187: LD_VAR 0 2
73191: NOT
73192: IFFALSE 73196
// exit ;
73194: GO 73225
// for i in tmp do
73196: LD_ADDR_VAR 0 1
73200: PUSH
73201: LD_VAR 0 2
73205: PUSH
73206: FOR_IN
73207: IFFALSE 73223
// begin SetLives ( i , 0 ) ;
73209: LD_VAR 0 1
73213: PPUSH
73214: LD_INT 0
73216: PPUSH
73217: CALL_OW 234
// end ;
73221: GO 73206
73223: POP
73224: POP
// end ;
73225: PPOPN 2
73227: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73228: LD_EXP 106
73232: PUSH
73233: LD_EXP 109
73237: AND
73238: IFFALSE 73331
73240: GO 73242
73242: DISABLE
73243: LD_INT 0
73245: PPUSH
// begin enable ;
73246: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73247: LD_ADDR_VAR 0 1
73251: PUSH
73252: LD_INT 22
73254: PUSH
73255: LD_OWVAR 2
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 2
73266: PUSH
73267: LD_INT 25
73269: PUSH
73270: LD_INT 5
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 25
73279: PUSH
73280: LD_INT 9
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 25
73289: PUSH
73290: LD_INT 8
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PPUSH
73307: CALL_OW 69
73311: PUSH
73312: FOR_IN
73313: IFFALSE 73329
// begin SetClass ( i , 1 ) ;
73315: LD_VAR 0 1
73319: PPUSH
73320: LD_INT 1
73322: PPUSH
73323: CALL_OW 336
// end ;
73327: GO 73312
73329: POP
73330: POP
// end ;
73331: PPOPN 1
73333: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73334: LD_EXP 106
73338: PUSH
73339: LD_EXP 110
73343: AND
73344: PUSH
73345: LD_OWVAR 65
73349: PUSH
73350: LD_INT 7
73352: LESS
73353: AND
73354: IFFALSE 73368
73356: GO 73358
73358: DISABLE
// begin enable ;
73359: ENABLE
// game_speed := 7 ;
73360: LD_ADDR_OWVAR 65
73364: PUSH
73365: LD_INT 7
73367: ST_TO_ADDR
// end ;
73368: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73369: LD_EXP 106
73373: PUSH
73374: LD_EXP 113
73378: AND
73379: IFFALSE 73581
73381: GO 73383
73383: DISABLE
73384: LD_INT 0
73386: PPUSH
73387: PPUSH
73388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73389: LD_ADDR_VAR 0 3
73393: PUSH
73394: LD_INT 81
73396: PUSH
73397: LD_OWVAR 2
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 21
73408: PUSH
73409: LD_INT 1
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PPUSH
73420: CALL_OW 69
73424: ST_TO_ADDR
// if not tmp then
73425: LD_VAR 0 3
73429: NOT
73430: IFFALSE 73434
// exit ;
73432: GO 73581
// if tmp > 5 then
73434: LD_VAR 0 3
73438: PUSH
73439: LD_INT 5
73441: GREATER
73442: IFFALSE 73454
// k := 5 else
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_INT 5
73451: ST_TO_ADDR
73452: GO 73464
// k := tmp ;
73454: LD_ADDR_VAR 0 2
73458: PUSH
73459: LD_VAR 0 3
73463: ST_TO_ADDR
// for i := 1 to k do
73464: LD_ADDR_VAR 0 1
73468: PUSH
73469: DOUBLE
73470: LD_INT 1
73472: DEC
73473: ST_TO_ADDR
73474: LD_VAR 0 2
73478: PUSH
73479: FOR_TO
73480: IFFALSE 73579
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73482: LD_VAR 0 3
73486: PUSH
73487: LD_VAR 0 1
73491: ARRAY
73492: PPUSH
73493: LD_VAR 0 1
73497: PUSH
73498: LD_INT 4
73500: MOD
73501: PUSH
73502: LD_INT 1
73504: PLUS
73505: PPUSH
73506: CALL_OW 259
73510: PUSH
73511: LD_INT 10
73513: LESS
73514: IFFALSE 73577
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73516: LD_VAR 0 3
73520: PUSH
73521: LD_VAR 0 1
73525: ARRAY
73526: PPUSH
73527: LD_VAR 0 1
73531: PUSH
73532: LD_INT 4
73534: MOD
73535: PUSH
73536: LD_INT 1
73538: PLUS
73539: PPUSH
73540: LD_VAR 0 3
73544: PUSH
73545: LD_VAR 0 1
73549: ARRAY
73550: PPUSH
73551: LD_VAR 0 1
73555: PUSH
73556: LD_INT 4
73558: MOD
73559: PUSH
73560: LD_INT 1
73562: PLUS
73563: PPUSH
73564: CALL_OW 259
73568: PUSH
73569: LD_INT 1
73571: PLUS
73572: PPUSH
73573: CALL_OW 237
73577: GO 73479
73579: POP
73580: POP
// end ;
73581: PPOPN 3
73583: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73584: LD_EXP 106
73588: PUSH
73589: LD_EXP 114
73593: AND
73594: IFFALSE 73614
73596: GO 73598
73598: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73599: LD_INT 4
73601: PPUSH
73602: LD_OWVAR 2
73606: PPUSH
73607: LD_INT 0
73609: PPUSH
73610: CALL_OW 324
73614: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73615: LD_EXP 106
73619: PUSH
73620: LD_EXP 143
73624: AND
73625: IFFALSE 73645
73627: GO 73629
73629: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73630: LD_INT 19
73632: PPUSH
73633: LD_OWVAR 2
73637: PPUSH
73638: LD_INT 0
73640: PPUSH
73641: CALL_OW 324
73645: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73646: LD_EXP 106
73650: PUSH
73651: LD_EXP 115
73655: AND
73656: IFFALSE 73758
73658: GO 73660
73660: DISABLE
73661: LD_INT 0
73663: PPUSH
73664: PPUSH
// begin enable ;
73665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: LD_INT 22
73673: PUSH
73674: LD_OWVAR 2
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: LD_INT 34
73688: PUSH
73689: LD_INT 11
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 34
73698: PUSH
73699: LD_INT 30
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PPUSH
73715: CALL_OW 69
73719: ST_TO_ADDR
// if not tmp then
73720: LD_VAR 0 2
73724: NOT
73725: IFFALSE 73729
// exit ;
73727: GO 73758
// for i in tmp do
73729: LD_ADDR_VAR 0 1
73733: PUSH
73734: LD_VAR 0 2
73738: PUSH
73739: FOR_IN
73740: IFFALSE 73756
// begin SetLives ( i , 0 ) ;
73742: LD_VAR 0 1
73746: PPUSH
73747: LD_INT 0
73749: PPUSH
73750: CALL_OW 234
// end ;
73754: GO 73739
73756: POP
73757: POP
// end ;
73758: PPOPN 2
73760: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73761: LD_EXP 106
73765: PUSH
73766: LD_EXP 116
73770: AND
73771: IFFALSE 73791
73773: GO 73775
73775: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73776: LD_INT 32
73778: PPUSH
73779: LD_OWVAR 2
73783: PPUSH
73784: LD_INT 0
73786: PPUSH
73787: CALL_OW 324
73791: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73792: LD_EXP 106
73796: PUSH
73797: LD_EXP 117
73801: AND
73802: IFFALSE 73983
73804: GO 73806
73806: DISABLE
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
73811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73812: LD_ADDR_VAR 0 2
73816: PUSH
73817: LD_INT 22
73819: PUSH
73820: LD_OWVAR 2
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 33
73831: PUSH
73832: LD_INT 3
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PPUSH
73843: CALL_OW 69
73847: ST_TO_ADDR
// if not tmp then
73848: LD_VAR 0 2
73852: NOT
73853: IFFALSE 73857
// exit ;
73855: GO 73983
// side := 0 ;
73857: LD_ADDR_VAR 0 3
73861: PUSH
73862: LD_INT 0
73864: ST_TO_ADDR
// for i := 1 to 8 do
73865: LD_ADDR_VAR 0 1
73869: PUSH
73870: DOUBLE
73871: LD_INT 1
73873: DEC
73874: ST_TO_ADDR
73875: LD_INT 8
73877: PUSH
73878: FOR_TO
73879: IFFALSE 73927
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73881: LD_OWVAR 2
73885: PUSH
73886: LD_VAR 0 1
73890: NONEQUAL
73891: PUSH
73892: LD_OWVAR 2
73896: PPUSH
73897: LD_VAR 0 1
73901: PPUSH
73902: CALL_OW 81
73906: PUSH
73907: LD_INT 2
73909: EQUAL
73910: AND
73911: IFFALSE 73925
// begin side := i ;
73913: LD_ADDR_VAR 0 3
73917: PUSH
73918: LD_VAR 0 1
73922: ST_TO_ADDR
// break ;
73923: GO 73927
// end ;
73925: GO 73878
73927: POP
73928: POP
// if not side then
73929: LD_VAR 0 3
73933: NOT
73934: IFFALSE 73938
// exit ;
73936: GO 73983
// for i := 1 to tmp do
73938: LD_ADDR_VAR 0 1
73942: PUSH
73943: DOUBLE
73944: LD_INT 1
73946: DEC
73947: ST_TO_ADDR
73948: LD_VAR 0 2
73952: PUSH
73953: FOR_TO
73954: IFFALSE 73981
// if Prob ( 60 ) then
73956: LD_INT 60
73958: PPUSH
73959: CALL_OW 13
73963: IFFALSE 73979
// SetSide ( i , side ) ;
73965: LD_VAR 0 1
73969: PPUSH
73970: LD_VAR 0 3
73974: PPUSH
73975: CALL_OW 235
73979: GO 73953
73981: POP
73982: POP
// end ;
73983: PPOPN 3
73985: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73986: LD_EXP 106
73990: PUSH
73991: LD_EXP 119
73995: AND
73996: IFFALSE 74115
73998: GO 74000
74000: DISABLE
74001: LD_INT 0
74003: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74004: LD_ADDR_VAR 0 1
74008: PUSH
74009: LD_INT 22
74011: PUSH
74012: LD_OWVAR 2
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 21
74023: PUSH
74024: LD_INT 1
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: PUSH
74034: LD_INT 23
74036: PUSH
74037: LD_INT 0
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: LIST
74052: PPUSH
74053: CALL_OW 69
74057: PUSH
74058: FOR_IN
74059: IFFALSE 74113
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74061: LD_VAR 0 1
74065: PPUSH
74066: CALL_OW 257
74070: PUSH
74071: LD_INT 1
74073: PUSH
74074: LD_INT 2
74076: PUSH
74077: LD_INT 3
74079: PUSH
74080: LD_INT 4
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: IN
74089: IFFALSE 74111
// SetClass ( un , rand ( 1 , 4 ) ) ;
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_INT 1
74098: PPUSH
74099: LD_INT 4
74101: PPUSH
74102: CALL_OW 12
74106: PPUSH
74107: CALL_OW 336
74111: GO 74058
74113: POP
74114: POP
// end ;
74115: PPOPN 1
74117: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74118: LD_EXP 106
74122: PUSH
74123: LD_EXP 118
74127: AND
74128: IFFALSE 74207
74130: GO 74132
74132: DISABLE
74133: LD_INT 0
74135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74136: LD_ADDR_VAR 0 1
74140: PUSH
74141: LD_INT 22
74143: PUSH
74144: LD_OWVAR 2
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 21
74155: PUSH
74156: LD_INT 3
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PPUSH
74167: CALL_OW 69
74171: ST_TO_ADDR
// if not tmp then
74172: LD_VAR 0 1
74176: NOT
74177: IFFALSE 74181
// exit ;
74179: GO 74207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74181: LD_VAR 0 1
74185: PUSH
74186: LD_INT 1
74188: PPUSH
74189: LD_VAR 0 1
74193: PPUSH
74194: CALL_OW 12
74198: ARRAY
74199: PPUSH
74200: LD_INT 100
74202: PPUSH
74203: CALL_OW 234
// end ;
74207: PPOPN 1
74209: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74210: LD_EXP 106
74214: PUSH
74215: LD_EXP 120
74219: AND
74220: IFFALSE 74318
74222: GO 74224
74224: DISABLE
74225: LD_INT 0
74227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74228: LD_ADDR_VAR 0 1
74232: PUSH
74233: LD_INT 22
74235: PUSH
74236: LD_OWVAR 2
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 21
74247: PUSH
74248: LD_INT 1
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PPUSH
74259: CALL_OW 69
74263: ST_TO_ADDR
// if not tmp then
74264: LD_VAR 0 1
74268: NOT
74269: IFFALSE 74273
// exit ;
74271: GO 74318
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74273: LD_VAR 0 1
74277: PUSH
74278: LD_INT 1
74280: PPUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: CALL_OW 12
74290: ARRAY
74291: PPUSH
74292: LD_INT 1
74294: PPUSH
74295: LD_INT 4
74297: PPUSH
74298: CALL_OW 12
74302: PPUSH
74303: LD_INT 3000
74305: PPUSH
74306: LD_INT 9000
74308: PPUSH
74309: CALL_OW 12
74313: PPUSH
74314: CALL_OW 492
// end ;
74318: PPOPN 1
74320: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74321: LD_EXP 106
74325: PUSH
74326: LD_EXP 121
74330: AND
74331: IFFALSE 74351
74333: GO 74335
74335: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74336: LD_INT 1
74338: PPUSH
74339: LD_OWVAR 2
74343: PPUSH
74344: LD_INT 0
74346: PPUSH
74347: CALL_OW 324
74351: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74352: LD_EXP 106
74356: PUSH
74357: LD_EXP 122
74361: AND
74362: IFFALSE 74445
74364: GO 74366
74366: DISABLE
74367: LD_INT 0
74369: PPUSH
74370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74371: LD_ADDR_VAR 0 2
74375: PUSH
74376: LD_INT 22
74378: PUSH
74379: LD_OWVAR 2
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 21
74390: PUSH
74391: LD_INT 3
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PPUSH
74402: CALL_OW 69
74406: ST_TO_ADDR
// if not tmp then
74407: LD_VAR 0 2
74411: NOT
74412: IFFALSE 74416
// exit ;
74414: GO 74445
// for i in tmp do
74416: LD_ADDR_VAR 0 1
74420: PUSH
74421: LD_VAR 0 2
74425: PUSH
74426: FOR_IN
74427: IFFALSE 74443
// SetBLevel ( i , 10 ) ;
74429: LD_VAR 0 1
74433: PPUSH
74434: LD_INT 10
74436: PPUSH
74437: CALL_OW 241
74441: GO 74426
74443: POP
74444: POP
// end ;
74445: PPOPN 2
74447: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74448: LD_EXP 106
74452: PUSH
74453: LD_EXP 123
74457: AND
74458: IFFALSE 74569
74460: GO 74462
74462: DISABLE
74463: LD_INT 0
74465: PPUSH
74466: PPUSH
74467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74468: LD_ADDR_VAR 0 3
74472: PUSH
74473: LD_INT 22
74475: PUSH
74476: LD_OWVAR 2
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 25
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PPUSH
74499: CALL_OW 69
74503: ST_TO_ADDR
// if not tmp then
74504: LD_VAR 0 3
74508: NOT
74509: IFFALSE 74513
// exit ;
74511: GO 74569
// un := tmp [ rand ( 1 , tmp ) ] ;
74513: LD_ADDR_VAR 0 2
74517: PUSH
74518: LD_VAR 0 3
74522: PUSH
74523: LD_INT 1
74525: PPUSH
74526: LD_VAR 0 3
74530: PPUSH
74531: CALL_OW 12
74535: ARRAY
74536: ST_TO_ADDR
// if Crawls ( un ) then
74537: LD_VAR 0 2
74541: PPUSH
74542: CALL_OW 318
74546: IFFALSE 74557
// ComWalk ( un ) ;
74548: LD_VAR 0 2
74552: PPUSH
74553: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74557: LD_VAR 0 2
74561: PPUSH
74562: LD_INT 5
74564: PPUSH
74565: CALL_OW 336
// end ;
74569: PPOPN 3
74571: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
74572: LD_EXP 106
74576: PUSH
74577: LD_EXP 124
74581: AND
74582: PUSH
74583: LD_OWVAR 67
74587: PUSH
74588: LD_INT 3
74590: LESS
74591: AND
74592: IFFALSE 74611
74594: GO 74596
74596: DISABLE
// Difficulty := Difficulty + 1 ;
74597: LD_ADDR_OWVAR 67
74601: PUSH
74602: LD_OWVAR 67
74606: PUSH
74607: LD_INT 1
74609: PLUS
74610: ST_TO_ADDR
74611: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74612: LD_EXP 106
74616: PUSH
74617: LD_EXP 125
74621: AND
74622: IFFALSE 74725
74624: GO 74626
74626: DISABLE
74627: LD_INT 0
74629: PPUSH
// begin for i := 1 to 5 do
74630: LD_ADDR_VAR 0 1
74634: PUSH
74635: DOUBLE
74636: LD_INT 1
74638: DEC
74639: ST_TO_ADDR
74640: LD_INT 5
74642: PUSH
74643: FOR_TO
74644: IFFALSE 74723
// begin uc_nation := nation_nature ;
74646: LD_ADDR_OWVAR 21
74650: PUSH
74651: LD_INT 0
74653: ST_TO_ADDR
// uc_side := 0 ;
74654: LD_ADDR_OWVAR 20
74658: PUSH
74659: LD_INT 0
74661: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74662: LD_ADDR_OWVAR 29
74666: PUSH
74667: LD_INT 12
74669: PUSH
74670: LD_INT 12
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: ST_TO_ADDR
// hc_agressivity := 20 ;
74677: LD_ADDR_OWVAR 35
74681: PUSH
74682: LD_INT 20
74684: ST_TO_ADDR
// hc_class := class_tiger ;
74685: LD_ADDR_OWVAR 28
74689: PUSH
74690: LD_INT 14
74692: ST_TO_ADDR
// hc_gallery :=  ;
74693: LD_ADDR_OWVAR 33
74697: PUSH
74698: LD_STRING 
74700: ST_TO_ADDR
// hc_name :=  ;
74701: LD_ADDR_OWVAR 26
74705: PUSH
74706: LD_STRING 
74708: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74709: CALL_OW 44
74713: PPUSH
74714: LD_INT 0
74716: PPUSH
74717: CALL_OW 51
// end ;
74721: GO 74643
74723: POP
74724: POP
// end ;
74725: PPOPN 1
74727: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74728: LD_EXP 106
74732: PUSH
74733: LD_EXP 126
74737: AND
74738: IFFALSE 74747
74740: GO 74742
74742: DISABLE
// StreamSibBomb ;
74743: CALL 74748 0 0
74747: END
// export function StreamSibBomb ; var i , x , y ; begin
74748: LD_INT 0
74750: PPUSH
74751: PPUSH
74752: PPUSH
74753: PPUSH
// result := false ;
74754: LD_ADDR_VAR 0 1
74758: PUSH
74759: LD_INT 0
74761: ST_TO_ADDR
// for i := 1 to 16 do
74762: LD_ADDR_VAR 0 2
74766: PUSH
74767: DOUBLE
74768: LD_INT 1
74770: DEC
74771: ST_TO_ADDR
74772: LD_INT 16
74774: PUSH
74775: FOR_TO
74776: IFFALSE 74975
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74778: LD_ADDR_VAR 0 3
74782: PUSH
74783: LD_INT 10
74785: PUSH
74786: LD_INT 20
74788: PUSH
74789: LD_INT 30
74791: PUSH
74792: LD_INT 40
74794: PUSH
74795: LD_INT 50
74797: PUSH
74798: LD_INT 60
74800: PUSH
74801: LD_INT 70
74803: PUSH
74804: LD_INT 80
74806: PUSH
74807: LD_INT 90
74809: PUSH
74810: LD_INT 100
74812: PUSH
74813: LD_INT 110
74815: PUSH
74816: LD_INT 120
74818: PUSH
74819: LD_INT 130
74821: PUSH
74822: LD_INT 140
74824: PUSH
74825: LD_INT 150
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 1
74847: PPUSH
74848: LD_INT 15
74850: PPUSH
74851: CALL_OW 12
74855: ARRAY
74856: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74857: LD_ADDR_VAR 0 4
74861: PUSH
74862: LD_INT 10
74864: PUSH
74865: LD_INT 20
74867: PUSH
74868: LD_INT 30
74870: PUSH
74871: LD_INT 40
74873: PUSH
74874: LD_INT 50
74876: PUSH
74877: LD_INT 60
74879: PUSH
74880: LD_INT 70
74882: PUSH
74883: LD_INT 80
74885: PUSH
74886: LD_INT 90
74888: PUSH
74889: LD_INT 100
74891: PUSH
74892: LD_INT 110
74894: PUSH
74895: LD_INT 120
74897: PUSH
74898: LD_INT 130
74900: PUSH
74901: LD_INT 140
74903: PUSH
74904: LD_INT 150
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 1
74926: PPUSH
74927: LD_INT 15
74929: PPUSH
74930: CALL_OW 12
74934: ARRAY
74935: ST_TO_ADDR
// if ValidHex ( x , y ) then
74936: LD_VAR 0 3
74940: PPUSH
74941: LD_VAR 0 4
74945: PPUSH
74946: CALL_OW 488
74950: IFFALSE 74973
// begin result := [ x , y ] ;
74952: LD_ADDR_VAR 0 1
74956: PUSH
74957: LD_VAR 0 3
74961: PUSH
74962: LD_VAR 0 4
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: ST_TO_ADDR
// break ;
74971: GO 74975
// end ; end ;
74973: GO 74775
74975: POP
74976: POP
// if result then
74977: LD_VAR 0 1
74981: IFFALSE 75041
// begin ToLua ( playSibBomb() ) ;
74983: LD_STRING playSibBomb()
74985: PPUSH
74986: CALL_OW 559
// wait ( 0 0$14 ) ;
74990: LD_INT 490
74992: PPUSH
74993: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74997: LD_VAR 0 1
75001: PUSH
75002: LD_INT 1
75004: ARRAY
75005: PPUSH
75006: LD_VAR 0 1
75010: PUSH
75011: LD_INT 2
75013: ARRAY
75014: PPUSH
75015: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75019: LD_VAR 0 1
75023: PUSH
75024: LD_INT 1
75026: ARRAY
75027: PPUSH
75028: LD_VAR 0 1
75032: PUSH
75033: LD_INT 2
75035: ARRAY
75036: PPUSH
75037: CALL_OW 429
// end ; end ;
75041: LD_VAR 0 1
75045: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75046: LD_EXP 106
75050: PUSH
75051: LD_EXP 128
75055: AND
75056: IFFALSE 75068
75058: GO 75060
75060: DISABLE
// YouLost (  ) ;
75061: LD_STRING 
75063: PPUSH
75064: CALL_OW 104
75068: END
// every 0 0$1 trigger StreamModeActive and sFog do
75069: LD_EXP 106
75073: PUSH
75074: LD_EXP 127
75078: AND
75079: IFFALSE 75093
75081: GO 75083
75083: DISABLE
// FogOff ( your_side ) ;
75084: LD_OWVAR 2
75088: PPUSH
75089: CALL_OW 344
75093: END
// every 0 0$1 trigger StreamModeActive and sSun do
75094: LD_EXP 106
75098: PUSH
75099: LD_EXP 129
75103: AND
75104: IFFALSE 75132
75106: GO 75108
75108: DISABLE
// begin solar_recharge_percent := 0 ;
75109: LD_ADDR_OWVAR 79
75113: PUSH
75114: LD_INT 0
75116: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75117: LD_INT 10500
75119: PPUSH
75120: CALL_OW 67
// solar_recharge_percent := 100 ;
75124: LD_ADDR_OWVAR 79
75128: PUSH
75129: LD_INT 100
75131: ST_TO_ADDR
// end ;
75132: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75133: LD_EXP 106
75137: PUSH
75138: LD_EXP 130
75142: AND
75143: IFFALSE 75382
75145: GO 75147
75147: DISABLE
75148: LD_INT 0
75150: PPUSH
75151: PPUSH
75152: PPUSH
// begin tmp := [ ] ;
75153: LD_ADDR_VAR 0 3
75157: PUSH
75158: EMPTY
75159: ST_TO_ADDR
// for i := 1 to 6 do
75160: LD_ADDR_VAR 0 1
75164: PUSH
75165: DOUBLE
75166: LD_INT 1
75168: DEC
75169: ST_TO_ADDR
75170: LD_INT 6
75172: PUSH
75173: FOR_TO
75174: IFFALSE 75279
// begin uc_nation := nation_nature ;
75176: LD_ADDR_OWVAR 21
75180: PUSH
75181: LD_INT 0
75183: ST_TO_ADDR
// uc_side := 0 ;
75184: LD_ADDR_OWVAR 20
75188: PUSH
75189: LD_INT 0
75191: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75192: LD_ADDR_OWVAR 29
75196: PUSH
75197: LD_INT 12
75199: PUSH
75200: LD_INT 12
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: ST_TO_ADDR
// hc_agressivity := 20 ;
75207: LD_ADDR_OWVAR 35
75211: PUSH
75212: LD_INT 20
75214: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75215: LD_ADDR_OWVAR 28
75219: PUSH
75220: LD_INT 17
75222: ST_TO_ADDR
// hc_gallery :=  ;
75223: LD_ADDR_OWVAR 33
75227: PUSH
75228: LD_STRING 
75230: ST_TO_ADDR
// hc_name :=  ;
75231: LD_ADDR_OWVAR 26
75235: PUSH
75236: LD_STRING 
75238: ST_TO_ADDR
// un := CreateHuman ;
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: CALL_OW 44
75248: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75249: LD_VAR 0 2
75253: PPUSH
75254: LD_INT 1
75256: PPUSH
75257: CALL_OW 51
// tmp := tmp ^ un ;
75261: LD_ADDR_VAR 0 3
75265: PUSH
75266: LD_VAR 0 3
75270: PUSH
75271: LD_VAR 0 2
75275: ADD
75276: ST_TO_ADDR
// end ;
75277: GO 75173
75279: POP
75280: POP
// repeat wait ( 0 0$1 ) ;
75281: LD_INT 35
75283: PPUSH
75284: CALL_OW 67
// for un in tmp do
75288: LD_ADDR_VAR 0 2
75292: PUSH
75293: LD_VAR 0 3
75297: PUSH
75298: FOR_IN
75299: IFFALSE 75373
// begin if IsDead ( un ) then
75301: LD_VAR 0 2
75305: PPUSH
75306: CALL_OW 301
75310: IFFALSE 75330
// begin tmp := tmp diff un ;
75312: LD_ADDR_VAR 0 3
75316: PUSH
75317: LD_VAR 0 3
75321: PUSH
75322: LD_VAR 0 2
75326: DIFF
75327: ST_TO_ADDR
// continue ;
75328: GO 75298
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75330: LD_VAR 0 2
75334: PPUSH
75335: LD_INT 3
75337: PUSH
75338: LD_INT 22
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PPUSH
75352: CALL_OW 69
75356: PPUSH
75357: LD_VAR 0 2
75361: PPUSH
75362: CALL_OW 74
75366: PPUSH
75367: CALL_OW 115
// end ;
75371: GO 75298
75373: POP
75374: POP
// until not tmp ;
75375: LD_VAR 0 3
75379: NOT
75380: IFFALSE 75281
// end ;
75382: PPOPN 3
75384: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75385: LD_EXP 106
75389: PUSH
75390: LD_EXP 131
75394: AND
75395: IFFALSE 75449
75397: GO 75399
75399: DISABLE
// begin ToLua ( displayTroll(); ) ;
75400: LD_STRING displayTroll();
75402: PPUSH
75403: CALL_OW 559
// wait ( 3 3$00 ) ;
75407: LD_INT 6300
75409: PPUSH
75410: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75414: LD_STRING hideTroll();
75416: PPUSH
75417: CALL_OW 559
// wait ( 1 1$00 ) ;
75421: LD_INT 2100
75423: PPUSH
75424: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75428: LD_STRING displayTroll();
75430: PPUSH
75431: CALL_OW 559
// wait ( 1 1$00 ) ;
75435: LD_INT 2100
75437: PPUSH
75438: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75442: LD_STRING hideTroll();
75444: PPUSH
75445: CALL_OW 559
// end ;
75449: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75450: LD_EXP 106
75454: PUSH
75455: LD_EXP 132
75459: AND
75460: IFFALSE 75523
75462: GO 75464
75464: DISABLE
75465: LD_INT 0
75467: PPUSH
// begin p := 0 ;
75468: LD_ADDR_VAR 0 1
75472: PUSH
75473: LD_INT 0
75475: ST_TO_ADDR
// repeat game_speed := 1 ;
75476: LD_ADDR_OWVAR 65
75480: PUSH
75481: LD_INT 1
75483: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75484: LD_INT 35
75486: PPUSH
75487: CALL_OW 67
// p := p + 1 ;
75491: LD_ADDR_VAR 0 1
75495: PUSH
75496: LD_VAR 0 1
75500: PUSH
75501: LD_INT 1
75503: PLUS
75504: ST_TO_ADDR
// until p >= 60 ;
75505: LD_VAR 0 1
75509: PUSH
75510: LD_INT 60
75512: GREATEREQUAL
75513: IFFALSE 75476
// game_speed := 4 ;
75515: LD_ADDR_OWVAR 65
75519: PUSH
75520: LD_INT 4
75522: ST_TO_ADDR
// end ;
75523: PPOPN 1
75525: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75526: LD_EXP 106
75530: PUSH
75531: LD_EXP 133
75535: AND
75536: IFFALSE 75682
75538: GO 75540
75540: DISABLE
75541: LD_INT 0
75543: PPUSH
75544: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75545: LD_ADDR_VAR 0 1
75549: PUSH
75550: LD_INT 22
75552: PUSH
75553: LD_OWVAR 2
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 2
75564: PUSH
75565: LD_INT 30
75567: PUSH
75568: LD_INT 0
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 30
75577: PUSH
75578: LD_INT 1
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PPUSH
75594: CALL_OW 69
75598: ST_TO_ADDR
// if not depot then
75599: LD_VAR 0 1
75603: NOT
75604: IFFALSE 75608
// exit ;
75606: GO 75682
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75608: LD_ADDR_VAR 0 2
75612: PUSH
75613: LD_VAR 0 1
75617: PUSH
75618: LD_INT 1
75620: PPUSH
75621: LD_VAR 0 1
75625: PPUSH
75626: CALL_OW 12
75630: ARRAY
75631: PPUSH
75632: CALL_OW 274
75636: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75637: LD_VAR 0 2
75641: PPUSH
75642: LD_INT 1
75644: PPUSH
75645: LD_INT 0
75647: PPUSH
75648: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75652: LD_VAR 0 2
75656: PPUSH
75657: LD_INT 2
75659: PPUSH
75660: LD_INT 0
75662: PPUSH
75663: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75667: LD_VAR 0 2
75671: PPUSH
75672: LD_INT 3
75674: PPUSH
75675: LD_INT 0
75677: PPUSH
75678: CALL_OW 277
// end ;
75682: PPOPN 2
75684: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75685: LD_EXP 106
75689: PUSH
75690: LD_EXP 134
75694: AND
75695: IFFALSE 75792
75697: GO 75699
75699: DISABLE
75700: LD_INT 0
75702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75703: LD_ADDR_VAR 0 1
75707: PUSH
75708: LD_INT 22
75710: PUSH
75711: LD_OWVAR 2
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PUSH
75720: LD_INT 21
75722: PUSH
75723: LD_INT 1
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 3
75732: PUSH
75733: LD_INT 23
75735: PUSH
75736: LD_INT 0
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: LIST
75751: PPUSH
75752: CALL_OW 69
75756: ST_TO_ADDR
// if not tmp then
75757: LD_VAR 0 1
75761: NOT
75762: IFFALSE 75766
// exit ;
75764: GO 75792
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75766: LD_VAR 0 1
75770: PUSH
75771: LD_INT 1
75773: PPUSH
75774: LD_VAR 0 1
75778: PPUSH
75779: CALL_OW 12
75783: ARRAY
75784: PPUSH
75785: LD_INT 200
75787: PPUSH
75788: CALL_OW 234
// end ;
75792: PPOPN 1
75794: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75795: LD_EXP 106
75799: PUSH
75800: LD_EXP 135
75804: AND
75805: IFFALSE 75884
75807: GO 75809
75809: DISABLE
75810: LD_INT 0
75812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75813: LD_ADDR_VAR 0 1
75817: PUSH
75818: LD_INT 22
75820: PUSH
75821: LD_OWVAR 2
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 21
75832: PUSH
75833: LD_INT 2
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PPUSH
75844: CALL_OW 69
75848: ST_TO_ADDR
// if not tmp then
75849: LD_VAR 0 1
75853: NOT
75854: IFFALSE 75858
// exit ;
75856: GO 75884
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75858: LD_VAR 0 1
75862: PUSH
75863: LD_INT 1
75865: PPUSH
75866: LD_VAR 0 1
75870: PPUSH
75871: CALL_OW 12
75875: ARRAY
75876: PPUSH
75877: LD_INT 60
75879: PPUSH
75880: CALL_OW 234
// end ;
75884: PPOPN 1
75886: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75887: LD_EXP 106
75891: PUSH
75892: LD_EXP 136
75896: AND
75897: IFFALSE 75996
75899: GO 75901
75901: DISABLE
75902: LD_INT 0
75904: PPUSH
75905: PPUSH
// begin enable ;
75906: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75907: LD_ADDR_VAR 0 1
75911: PUSH
75912: LD_INT 22
75914: PUSH
75915: LD_OWVAR 2
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 61
75926: PUSH
75927: EMPTY
75928: LIST
75929: PUSH
75930: LD_INT 33
75932: PUSH
75933: LD_INT 2
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: LIST
75944: PPUSH
75945: CALL_OW 69
75949: ST_TO_ADDR
// if not tmp then
75950: LD_VAR 0 1
75954: NOT
75955: IFFALSE 75959
// exit ;
75957: GO 75996
// for i in tmp do
75959: LD_ADDR_VAR 0 2
75963: PUSH
75964: LD_VAR 0 1
75968: PUSH
75969: FOR_IN
75970: IFFALSE 75994
// if IsControledBy ( i ) then
75972: LD_VAR 0 2
75976: PPUSH
75977: CALL_OW 312
75981: IFFALSE 75992
// ComUnlink ( i ) ;
75983: LD_VAR 0 2
75987: PPUSH
75988: CALL_OW 136
75992: GO 75969
75994: POP
75995: POP
// end ;
75996: PPOPN 2
75998: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75999: LD_EXP 106
76003: PUSH
76004: LD_EXP 137
76008: AND
76009: IFFALSE 76149
76011: GO 76013
76013: DISABLE
76014: LD_INT 0
76016: PPUSH
76017: PPUSH
// begin ToLua ( displayPowell(); ) ;
76018: LD_STRING displayPowell();
76020: PPUSH
76021: CALL_OW 559
// uc_side := 0 ;
76025: LD_ADDR_OWVAR 20
76029: PUSH
76030: LD_INT 0
76032: ST_TO_ADDR
// uc_nation := 2 ;
76033: LD_ADDR_OWVAR 21
76037: PUSH
76038: LD_INT 2
76040: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76041: LD_ADDR_OWVAR 37
76045: PUSH
76046: LD_INT 14
76048: ST_TO_ADDR
// vc_engine := engine_siberite ;
76049: LD_ADDR_OWVAR 39
76053: PUSH
76054: LD_INT 3
76056: ST_TO_ADDR
// vc_control := control_apeman ;
76057: LD_ADDR_OWVAR 38
76061: PUSH
76062: LD_INT 5
76064: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76065: LD_ADDR_OWVAR 40
76069: PUSH
76070: LD_INT 29
76072: ST_TO_ADDR
// un := CreateVehicle ;
76073: LD_ADDR_VAR 0 2
76077: PUSH
76078: CALL_OW 45
76082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76083: LD_VAR 0 2
76087: PPUSH
76088: LD_INT 1
76090: PPUSH
76091: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76095: LD_INT 35
76097: PPUSH
76098: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76102: LD_VAR 0 2
76106: PPUSH
76107: LD_INT 22
76109: PUSH
76110: LD_OWVAR 2
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PPUSH
76119: CALL_OW 69
76123: PPUSH
76124: LD_VAR 0 2
76128: PPUSH
76129: CALL_OW 74
76133: PPUSH
76134: CALL_OW 115
// until IsDead ( un ) ;
76138: LD_VAR 0 2
76142: PPUSH
76143: CALL_OW 301
76147: IFFALSE 76095
// end ;
76149: PPOPN 2
76151: END
// every 0 0$1 trigger StreamModeActive and sStu do
76152: LD_EXP 106
76156: PUSH
76157: LD_EXP 145
76161: AND
76162: IFFALSE 76178
76164: GO 76166
76166: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76167: LD_STRING displayStucuk();
76169: PPUSH
76170: CALL_OW 559
// ResetFog ;
76174: CALL_OW 335
// end ;
76178: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76179: LD_EXP 106
76183: PUSH
76184: LD_EXP 138
76188: AND
76189: IFFALSE 76330
76191: GO 76193
76193: DISABLE
76194: LD_INT 0
76196: PPUSH
76197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76198: LD_ADDR_VAR 0 2
76202: PUSH
76203: LD_INT 22
76205: PUSH
76206: LD_OWVAR 2
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 21
76217: PUSH
76218: LD_INT 1
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PPUSH
76229: CALL_OW 69
76233: ST_TO_ADDR
// if not tmp then
76234: LD_VAR 0 2
76238: NOT
76239: IFFALSE 76243
// exit ;
76241: GO 76330
// un := tmp [ rand ( 1 , tmp ) ] ;
76243: LD_ADDR_VAR 0 1
76247: PUSH
76248: LD_VAR 0 2
76252: PUSH
76253: LD_INT 1
76255: PPUSH
76256: LD_VAR 0 2
76260: PPUSH
76261: CALL_OW 12
76265: ARRAY
76266: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76267: LD_VAR 0 1
76271: PPUSH
76272: LD_INT 0
76274: PPUSH
76275: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76279: LD_VAR 0 1
76283: PPUSH
76284: LD_OWVAR 3
76288: PUSH
76289: LD_VAR 0 1
76293: DIFF
76294: PPUSH
76295: LD_VAR 0 1
76299: PPUSH
76300: CALL_OW 74
76304: PPUSH
76305: CALL_OW 115
// wait ( 0 0$20 ) ;
76309: LD_INT 700
76311: PPUSH
76312: CALL_OW 67
// SetSide ( un , your_side ) ;
76316: LD_VAR 0 1
76320: PPUSH
76321: LD_OWVAR 2
76325: PPUSH
76326: CALL_OW 235
// end ;
76330: PPOPN 2
76332: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76333: LD_EXP 106
76337: PUSH
76338: LD_EXP 139
76342: AND
76343: IFFALSE 76449
76345: GO 76347
76347: DISABLE
76348: LD_INT 0
76350: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76351: LD_ADDR_VAR 0 1
76355: PUSH
76356: LD_INT 22
76358: PUSH
76359: LD_OWVAR 2
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 2
76370: PUSH
76371: LD_INT 30
76373: PUSH
76374: LD_INT 0
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 30
76383: PUSH
76384: LD_INT 1
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: LIST
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PPUSH
76400: CALL_OW 69
76404: ST_TO_ADDR
// if not depot then
76405: LD_VAR 0 1
76409: NOT
76410: IFFALSE 76414
// exit ;
76412: GO 76449
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76414: LD_VAR 0 1
76418: PUSH
76419: LD_INT 1
76421: ARRAY
76422: PPUSH
76423: CALL_OW 250
76427: PPUSH
76428: LD_VAR 0 1
76432: PUSH
76433: LD_INT 1
76435: ARRAY
76436: PPUSH
76437: CALL_OW 251
76441: PPUSH
76442: LD_INT 70
76444: PPUSH
76445: CALL_OW 495
// end ;
76449: PPOPN 1
76451: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76452: LD_EXP 106
76456: PUSH
76457: LD_EXP 140
76461: AND
76462: IFFALSE 76673
76464: GO 76466
76466: DISABLE
76467: LD_INT 0
76469: PPUSH
76470: PPUSH
76471: PPUSH
76472: PPUSH
76473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76474: LD_ADDR_VAR 0 5
76478: PUSH
76479: LD_INT 22
76481: PUSH
76482: LD_OWVAR 2
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: LD_INT 21
76493: PUSH
76494: LD_INT 1
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PPUSH
76505: CALL_OW 69
76509: ST_TO_ADDR
// if not tmp then
76510: LD_VAR 0 5
76514: NOT
76515: IFFALSE 76519
// exit ;
76517: GO 76673
// for i in tmp do
76519: LD_ADDR_VAR 0 1
76523: PUSH
76524: LD_VAR 0 5
76528: PUSH
76529: FOR_IN
76530: IFFALSE 76671
// begin d := rand ( 0 , 5 ) ;
76532: LD_ADDR_VAR 0 4
76536: PUSH
76537: LD_INT 0
76539: PPUSH
76540: LD_INT 5
76542: PPUSH
76543: CALL_OW 12
76547: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76548: LD_ADDR_VAR 0 2
76552: PUSH
76553: LD_VAR 0 1
76557: PPUSH
76558: CALL_OW 250
76562: PPUSH
76563: LD_VAR 0 4
76567: PPUSH
76568: LD_INT 3
76570: PPUSH
76571: LD_INT 12
76573: PPUSH
76574: CALL_OW 12
76578: PPUSH
76579: CALL_OW 272
76583: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76584: LD_ADDR_VAR 0 3
76588: PUSH
76589: LD_VAR 0 1
76593: PPUSH
76594: CALL_OW 251
76598: PPUSH
76599: LD_VAR 0 4
76603: PPUSH
76604: LD_INT 3
76606: PPUSH
76607: LD_INT 12
76609: PPUSH
76610: CALL_OW 12
76614: PPUSH
76615: CALL_OW 273
76619: ST_TO_ADDR
// if ValidHex ( x , y ) then
76620: LD_VAR 0 2
76624: PPUSH
76625: LD_VAR 0 3
76629: PPUSH
76630: CALL_OW 488
76634: IFFALSE 76669
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_VAR 0 2
76645: PPUSH
76646: LD_VAR 0 3
76650: PPUSH
76651: LD_INT 3
76653: PPUSH
76654: LD_INT 6
76656: PPUSH
76657: CALL_OW 12
76661: PPUSH
76662: LD_INT 1
76664: PPUSH
76665: CALL_OW 483
// end ;
76669: GO 76529
76671: POP
76672: POP
// end ;
76673: PPOPN 5
76675: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76676: LD_EXP 106
76680: PUSH
76681: LD_EXP 141
76685: AND
76686: IFFALSE 76780
76688: GO 76690
76690: DISABLE
76691: LD_INT 0
76693: PPUSH
76694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76695: LD_ADDR_VAR 0 2
76699: PUSH
76700: LD_INT 22
76702: PUSH
76703: LD_OWVAR 2
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: LD_INT 32
76714: PUSH
76715: LD_INT 1
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 21
76724: PUSH
76725: LD_INT 2
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: LIST
76736: PPUSH
76737: CALL_OW 69
76741: ST_TO_ADDR
// if not tmp then
76742: LD_VAR 0 2
76746: NOT
76747: IFFALSE 76751
// exit ;
76749: GO 76780
// for i in tmp do
76751: LD_ADDR_VAR 0 1
76755: PUSH
76756: LD_VAR 0 2
76760: PUSH
76761: FOR_IN
76762: IFFALSE 76778
// SetFuel ( i , 0 ) ;
76764: LD_VAR 0 1
76768: PPUSH
76769: LD_INT 0
76771: PPUSH
76772: CALL_OW 240
76776: GO 76761
76778: POP
76779: POP
// end ;
76780: PPOPN 2
76782: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76783: LD_EXP 106
76787: PUSH
76788: LD_EXP 142
76792: AND
76793: IFFALSE 76859
76795: GO 76797
76797: DISABLE
76798: LD_INT 0
76800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76801: LD_ADDR_VAR 0 1
76805: PUSH
76806: LD_INT 22
76808: PUSH
76809: LD_OWVAR 2
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 30
76820: PUSH
76821: LD_INT 29
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PPUSH
76832: CALL_OW 69
76836: ST_TO_ADDR
// if not tmp then
76837: LD_VAR 0 1
76841: NOT
76842: IFFALSE 76846
// exit ;
76844: GO 76859
// DestroyUnit ( tmp [ 1 ] ) ;
76846: LD_VAR 0 1
76850: PUSH
76851: LD_INT 1
76853: ARRAY
76854: PPUSH
76855: CALL_OW 65
// end ;
76859: PPOPN 1
76861: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76862: LD_EXP 106
76866: PUSH
76867: LD_EXP 144
76871: AND
76872: IFFALSE 77001
76874: GO 76876
76876: DISABLE
76877: LD_INT 0
76879: PPUSH
// begin uc_side := 0 ;
76880: LD_ADDR_OWVAR 20
76884: PUSH
76885: LD_INT 0
76887: ST_TO_ADDR
// uc_nation := nation_arabian ;
76888: LD_ADDR_OWVAR 21
76892: PUSH
76893: LD_INT 2
76895: ST_TO_ADDR
// hc_gallery :=  ;
76896: LD_ADDR_OWVAR 33
76900: PUSH
76901: LD_STRING 
76903: ST_TO_ADDR
// hc_name :=  ;
76904: LD_ADDR_OWVAR 26
76908: PUSH
76909: LD_STRING 
76911: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76912: LD_INT 1
76914: PPUSH
76915: LD_INT 11
76917: PPUSH
76918: LD_INT 10
76920: PPUSH
76921: CALL_OW 380
// un := CreateHuman ;
76925: LD_ADDR_VAR 0 1
76929: PUSH
76930: CALL_OW 44
76934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76935: LD_VAR 0 1
76939: PPUSH
76940: LD_INT 1
76942: PPUSH
76943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76947: LD_INT 35
76949: PPUSH
76950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76954: LD_VAR 0 1
76958: PPUSH
76959: LD_INT 22
76961: PUSH
76962: LD_OWVAR 2
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 69
76975: PPUSH
76976: LD_VAR 0 1
76980: PPUSH
76981: CALL_OW 74
76985: PPUSH
76986: CALL_OW 115
// until IsDead ( un ) ;
76990: LD_VAR 0 1
76994: PPUSH
76995: CALL_OW 301
76999: IFFALSE 76947
// end ;
77001: PPOPN 1
77003: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77004: LD_EXP 106
77008: PUSH
77009: LD_EXP 146
77013: AND
77014: IFFALSE 77026
77016: GO 77018
77018: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77019: LD_STRING earthquake(getX(game), 0, 32)
77021: PPUSH
77022: CALL_OW 559
77026: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77027: LD_EXP 106
77031: PUSH
77032: LD_EXP 147
77036: AND
77037: IFFALSE 77128
77039: GO 77041
77041: DISABLE
77042: LD_INT 0
77044: PPUSH
// begin enable ;
77045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77046: LD_ADDR_VAR 0 1
77050: PUSH
77051: LD_INT 22
77053: PUSH
77054: LD_OWVAR 2
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 21
77065: PUSH
77066: LD_INT 2
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 33
77075: PUSH
77076: LD_INT 3
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: LIST
77087: PPUSH
77088: CALL_OW 69
77092: ST_TO_ADDR
// if not tmp then
77093: LD_VAR 0 1
77097: NOT
77098: IFFALSE 77102
// exit ;
77100: GO 77128
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77102: LD_VAR 0 1
77106: PUSH
77107: LD_INT 1
77109: PPUSH
77110: LD_VAR 0 1
77114: PPUSH
77115: CALL_OW 12
77119: ARRAY
77120: PPUSH
77121: LD_INT 1
77123: PPUSH
77124: CALL_OW 234
// end ;
77128: PPOPN 1
77130: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77131: LD_EXP 106
77135: PUSH
77136: LD_EXP 148
77140: AND
77141: IFFALSE 77282
77143: GO 77145
77145: DISABLE
77146: LD_INT 0
77148: PPUSH
77149: PPUSH
77150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77151: LD_ADDR_VAR 0 3
77155: PUSH
77156: LD_INT 22
77158: PUSH
77159: LD_OWVAR 2
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 25
77170: PUSH
77171: LD_INT 1
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PPUSH
77182: CALL_OW 69
77186: ST_TO_ADDR
// if not tmp then
77187: LD_VAR 0 3
77191: NOT
77192: IFFALSE 77196
// exit ;
77194: GO 77282
// un := tmp [ rand ( 1 , tmp ) ] ;
77196: LD_ADDR_VAR 0 2
77200: PUSH
77201: LD_VAR 0 3
77205: PUSH
77206: LD_INT 1
77208: PPUSH
77209: LD_VAR 0 3
77213: PPUSH
77214: CALL_OW 12
77218: ARRAY
77219: ST_TO_ADDR
// if Crawls ( un ) then
77220: LD_VAR 0 2
77224: PPUSH
77225: CALL_OW 318
77229: IFFALSE 77240
// ComWalk ( un ) ;
77231: LD_VAR 0 2
77235: PPUSH
77236: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77240: LD_VAR 0 2
77244: PPUSH
77245: LD_INT 9
77247: PPUSH
77248: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77252: LD_INT 28
77254: PPUSH
77255: LD_OWVAR 2
77259: PPUSH
77260: LD_INT 2
77262: PPUSH
77263: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77267: LD_INT 29
77269: PPUSH
77270: LD_OWVAR 2
77274: PPUSH
77275: LD_INT 2
77277: PPUSH
77278: CALL_OW 322
// end ;
77282: PPOPN 3
77284: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77285: LD_EXP 106
77289: PUSH
77290: LD_EXP 149
77294: AND
77295: IFFALSE 77406
77297: GO 77299
77299: DISABLE
77300: LD_INT 0
77302: PPUSH
77303: PPUSH
77304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77305: LD_ADDR_VAR 0 3
77309: PUSH
77310: LD_INT 22
77312: PUSH
77313: LD_OWVAR 2
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 25
77324: PUSH
77325: LD_INT 1
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PPUSH
77336: CALL_OW 69
77340: ST_TO_ADDR
// if not tmp then
77341: LD_VAR 0 3
77345: NOT
77346: IFFALSE 77350
// exit ;
77348: GO 77406
// un := tmp [ rand ( 1 , tmp ) ] ;
77350: LD_ADDR_VAR 0 2
77354: PUSH
77355: LD_VAR 0 3
77359: PUSH
77360: LD_INT 1
77362: PPUSH
77363: LD_VAR 0 3
77367: PPUSH
77368: CALL_OW 12
77372: ARRAY
77373: ST_TO_ADDR
// if Crawls ( un ) then
77374: LD_VAR 0 2
77378: PPUSH
77379: CALL_OW 318
77383: IFFALSE 77394
// ComWalk ( un ) ;
77385: LD_VAR 0 2
77389: PPUSH
77390: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77394: LD_VAR 0 2
77398: PPUSH
77399: LD_INT 8
77401: PPUSH
77402: CALL_OW 336
// end ;
77406: PPOPN 3
77408: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77409: LD_EXP 106
77413: PUSH
77414: LD_EXP 150
77418: AND
77419: IFFALSE 77563
77421: GO 77423
77423: DISABLE
77424: LD_INT 0
77426: PPUSH
77427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77428: LD_ADDR_VAR 0 2
77432: PUSH
77433: LD_INT 22
77435: PUSH
77436: LD_OWVAR 2
77440: PUSH
77441: EMPTY
77442: LIST
77443: LIST
77444: PUSH
77445: LD_INT 21
77447: PUSH
77448: LD_INT 2
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 2
77457: PUSH
77458: LD_INT 34
77460: PUSH
77461: LD_INT 12
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_INT 34
77470: PUSH
77471: LD_INT 51
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 34
77480: PUSH
77481: LD_INT 32
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: LIST
77498: PPUSH
77499: CALL_OW 69
77503: ST_TO_ADDR
// if not tmp then
77504: LD_VAR 0 2
77508: NOT
77509: IFFALSE 77513
// exit ;
77511: GO 77563
// for i in tmp do
77513: LD_ADDR_VAR 0 1
77517: PUSH
77518: LD_VAR 0 2
77522: PUSH
77523: FOR_IN
77524: IFFALSE 77561
// if GetCargo ( i , mat_artifact ) = 0 then
77526: LD_VAR 0 1
77530: PPUSH
77531: LD_INT 4
77533: PPUSH
77534: CALL_OW 289
77538: PUSH
77539: LD_INT 0
77541: EQUAL
77542: IFFALSE 77559
// SetCargo ( i , mat_siberit , 100 ) ;
77544: LD_VAR 0 1
77548: PPUSH
77549: LD_INT 3
77551: PPUSH
77552: LD_INT 100
77554: PPUSH
77555: CALL_OW 290
77559: GO 77523
77561: POP
77562: POP
// end ;
77563: PPOPN 2
77565: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77566: LD_EXP 106
77570: PUSH
77571: LD_EXP 151
77575: AND
77576: IFFALSE 77759
77578: GO 77580
77580: DISABLE
77581: LD_INT 0
77583: PPUSH
77584: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77585: LD_ADDR_VAR 0 2
77589: PUSH
77590: LD_INT 22
77592: PUSH
77593: LD_OWVAR 2
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PPUSH
77602: CALL_OW 69
77606: ST_TO_ADDR
// if not tmp then
77607: LD_VAR 0 2
77611: NOT
77612: IFFALSE 77616
// exit ;
77614: GO 77759
// for i := 1 to 2 do
77616: LD_ADDR_VAR 0 1
77620: PUSH
77621: DOUBLE
77622: LD_INT 1
77624: DEC
77625: ST_TO_ADDR
77626: LD_INT 2
77628: PUSH
77629: FOR_TO
77630: IFFALSE 77757
// begin uc_side := your_side ;
77632: LD_ADDR_OWVAR 20
77636: PUSH
77637: LD_OWVAR 2
77641: ST_TO_ADDR
// uc_nation := nation_american ;
77642: LD_ADDR_OWVAR 21
77646: PUSH
77647: LD_INT 1
77649: ST_TO_ADDR
// vc_chassis := us_morphling ;
77650: LD_ADDR_OWVAR 37
77654: PUSH
77655: LD_INT 5
77657: ST_TO_ADDR
// vc_engine := engine_siberite ;
77658: LD_ADDR_OWVAR 39
77662: PUSH
77663: LD_INT 3
77665: ST_TO_ADDR
// vc_control := control_computer ;
77666: LD_ADDR_OWVAR 38
77670: PUSH
77671: LD_INT 3
77673: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77674: LD_ADDR_OWVAR 40
77678: PUSH
77679: LD_INT 10
77681: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77682: LD_VAR 0 2
77686: PUSH
77687: LD_INT 1
77689: ARRAY
77690: PPUSH
77691: CALL_OW 310
77695: NOT
77696: IFFALSE 77743
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77698: CALL_OW 45
77702: PPUSH
77703: LD_VAR 0 2
77707: PUSH
77708: LD_INT 1
77710: ARRAY
77711: PPUSH
77712: CALL_OW 250
77716: PPUSH
77717: LD_VAR 0 2
77721: PUSH
77722: LD_INT 1
77724: ARRAY
77725: PPUSH
77726: CALL_OW 251
77730: PPUSH
77731: LD_INT 12
77733: PPUSH
77734: LD_INT 1
77736: PPUSH
77737: CALL_OW 50
77741: GO 77755
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77743: CALL_OW 45
77747: PPUSH
77748: LD_INT 1
77750: PPUSH
77751: CALL_OW 51
// end ;
77755: GO 77629
77757: POP
77758: POP
// end ;
77759: PPOPN 2
77761: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77762: LD_EXP 106
77766: PUSH
77767: LD_EXP 152
77771: AND
77772: IFFALSE 77994
77774: GO 77776
77776: DISABLE
77777: LD_INT 0
77779: PPUSH
77780: PPUSH
77781: PPUSH
77782: PPUSH
77783: PPUSH
77784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77785: LD_ADDR_VAR 0 6
77789: PUSH
77790: LD_INT 22
77792: PUSH
77793: LD_OWVAR 2
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 21
77804: PUSH
77805: LD_INT 1
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: PUSH
77812: LD_INT 3
77814: PUSH
77815: LD_INT 23
77817: PUSH
77818: LD_INT 0
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: LIST
77833: PPUSH
77834: CALL_OW 69
77838: ST_TO_ADDR
// if not tmp then
77839: LD_VAR 0 6
77843: NOT
77844: IFFALSE 77848
// exit ;
77846: GO 77994
// s1 := rand ( 1 , 4 ) ;
77848: LD_ADDR_VAR 0 2
77852: PUSH
77853: LD_INT 1
77855: PPUSH
77856: LD_INT 4
77858: PPUSH
77859: CALL_OW 12
77863: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77864: LD_ADDR_VAR 0 4
77868: PUSH
77869: LD_VAR 0 6
77873: PUSH
77874: LD_INT 1
77876: ARRAY
77877: PPUSH
77878: LD_VAR 0 2
77882: PPUSH
77883: CALL_OW 259
77887: ST_TO_ADDR
// if s1 = 1 then
77888: LD_VAR 0 2
77892: PUSH
77893: LD_INT 1
77895: EQUAL
77896: IFFALSE 77916
// s2 := rand ( 2 , 4 ) else
77898: LD_ADDR_VAR 0 3
77902: PUSH
77903: LD_INT 2
77905: PPUSH
77906: LD_INT 4
77908: PPUSH
77909: CALL_OW 12
77913: ST_TO_ADDR
77914: GO 77924
// s2 := 1 ;
77916: LD_ADDR_VAR 0 3
77920: PUSH
77921: LD_INT 1
77923: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77924: LD_ADDR_VAR 0 5
77928: PUSH
77929: LD_VAR 0 6
77933: PUSH
77934: LD_INT 1
77936: ARRAY
77937: PPUSH
77938: LD_VAR 0 3
77942: PPUSH
77943: CALL_OW 259
77947: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77948: LD_VAR 0 6
77952: PUSH
77953: LD_INT 1
77955: ARRAY
77956: PPUSH
77957: LD_VAR 0 2
77961: PPUSH
77962: LD_VAR 0 5
77966: PPUSH
77967: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77971: LD_VAR 0 6
77975: PUSH
77976: LD_INT 1
77978: ARRAY
77979: PPUSH
77980: LD_VAR 0 3
77984: PPUSH
77985: LD_VAR 0 4
77989: PPUSH
77990: CALL_OW 237
// end ;
77994: PPOPN 6
77996: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77997: LD_EXP 106
78001: PUSH
78002: LD_EXP 153
78006: AND
78007: IFFALSE 78086
78009: GO 78011
78011: DISABLE
78012: LD_INT 0
78014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78015: LD_ADDR_VAR 0 1
78019: PUSH
78020: LD_INT 22
78022: PUSH
78023: LD_OWVAR 2
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 30
78034: PUSH
78035: LD_INT 3
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PPUSH
78046: CALL_OW 69
78050: ST_TO_ADDR
// if not tmp then
78051: LD_VAR 0 1
78055: NOT
78056: IFFALSE 78060
// exit ;
78058: GO 78086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78060: LD_VAR 0 1
78064: PUSH
78065: LD_INT 1
78067: PPUSH
78068: LD_VAR 0 1
78072: PPUSH
78073: CALL_OW 12
78077: ARRAY
78078: PPUSH
78079: LD_INT 1
78081: PPUSH
78082: CALL_OW 234
// end ;
78086: PPOPN 1
78088: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78089: LD_EXP 106
78093: PUSH
78094: LD_EXP 154
78098: AND
78099: IFFALSE 78211
78101: GO 78103
78103: DISABLE
78104: LD_INT 0
78106: PPUSH
78107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78108: LD_ADDR_VAR 0 2
78112: PUSH
78113: LD_INT 22
78115: PUSH
78116: LD_OWVAR 2
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: LD_INT 2
78127: PUSH
78128: LD_INT 30
78130: PUSH
78131: LD_INT 27
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: PUSH
78138: LD_INT 30
78140: PUSH
78141: LD_INT 26
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 30
78150: PUSH
78151: LD_INT 28
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: PPUSH
78168: CALL_OW 69
78172: ST_TO_ADDR
// if not tmp then
78173: LD_VAR 0 2
78177: NOT
78178: IFFALSE 78182
// exit ;
78180: GO 78211
// for i in tmp do
78182: LD_ADDR_VAR 0 1
78186: PUSH
78187: LD_VAR 0 2
78191: PUSH
78192: FOR_IN
78193: IFFALSE 78209
// SetLives ( i , 1 ) ;
78195: LD_VAR 0 1
78199: PPUSH
78200: LD_INT 1
78202: PPUSH
78203: CALL_OW 234
78207: GO 78192
78209: POP
78210: POP
// end ;
78211: PPOPN 2
78213: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78214: LD_EXP 106
78218: PUSH
78219: LD_EXP 155
78223: AND
78224: IFFALSE 78498
78226: GO 78228
78228: DISABLE
78229: LD_INT 0
78231: PPUSH
78232: PPUSH
78233: PPUSH
// begin i := rand ( 1 , 7 ) ;
78234: LD_ADDR_VAR 0 1
78238: PUSH
78239: LD_INT 1
78241: PPUSH
78242: LD_INT 7
78244: PPUSH
78245: CALL_OW 12
78249: ST_TO_ADDR
// case i of 1 :
78250: LD_VAR 0 1
78254: PUSH
78255: LD_INT 1
78257: DOUBLE
78258: EQUAL
78259: IFTRUE 78263
78261: GO 78273
78263: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78264: LD_STRING earthquake(getX(game), 0, 32)
78266: PPUSH
78267: CALL_OW 559
78271: GO 78498
78273: LD_INT 2
78275: DOUBLE
78276: EQUAL
78277: IFTRUE 78281
78279: GO 78295
78281: POP
// begin ToLua ( displayStucuk(); ) ;
78282: LD_STRING displayStucuk();
78284: PPUSH
78285: CALL_OW 559
// ResetFog ;
78289: CALL_OW 335
// end ; 3 :
78293: GO 78498
78295: LD_INT 3
78297: DOUBLE
78298: EQUAL
78299: IFTRUE 78303
78301: GO 78407
78303: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78304: LD_ADDR_VAR 0 2
78308: PUSH
78309: LD_INT 22
78311: PUSH
78312: LD_OWVAR 2
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: LD_INT 25
78323: PUSH
78324: LD_INT 1
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PPUSH
78335: CALL_OW 69
78339: ST_TO_ADDR
// if not tmp then
78340: LD_VAR 0 2
78344: NOT
78345: IFFALSE 78349
// exit ;
78347: GO 78498
// un := tmp [ rand ( 1 , tmp ) ] ;
78349: LD_ADDR_VAR 0 3
78353: PUSH
78354: LD_VAR 0 2
78358: PUSH
78359: LD_INT 1
78361: PPUSH
78362: LD_VAR 0 2
78366: PPUSH
78367: CALL_OW 12
78371: ARRAY
78372: ST_TO_ADDR
// if Crawls ( un ) then
78373: LD_VAR 0 3
78377: PPUSH
78378: CALL_OW 318
78382: IFFALSE 78393
// ComWalk ( un ) ;
78384: LD_VAR 0 3
78388: PPUSH
78389: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78393: LD_VAR 0 3
78397: PPUSH
78398: LD_INT 8
78400: PPUSH
78401: CALL_OW 336
// end ; 4 :
78405: GO 78498
78407: LD_INT 4
78409: DOUBLE
78410: EQUAL
78411: IFTRUE 78415
78413: GO 78476
78415: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78416: LD_ADDR_VAR 0 2
78420: PUSH
78421: LD_INT 22
78423: PUSH
78424: LD_OWVAR 2
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: LD_INT 30
78435: PUSH
78436: LD_INT 29
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: PUSH
78443: EMPTY
78444: LIST
78445: LIST
78446: PPUSH
78447: CALL_OW 69
78451: ST_TO_ADDR
// if not tmp then
78452: LD_VAR 0 2
78456: NOT
78457: IFFALSE 78461
// exit ;
78459: GO 78498
// DestroyUnit ( tmp [ 1 ] ) ;
78461: LD_VAR 0 2
78465: PUSH
78466: LD_INT 1
78468: ARRAY
78469: PPUSH
78470: CALL_OW 65
// end ; 5 .. 7 :
78474: GO 78498
78476: LD_INT 5
78478: DOUBLE
78479: GREATEREQUAL
78480: IFFALSE 78488
78482: LD_INT 7
78484: DOUBLE
78485: LESSEQUAL
78486: IFTRUE 78490
78488: GO 78497
78490: POP
// StreamSibBomb ; end ;
78491: CALL 74748 0 0
78495: GO 78498
78497: POP
// end ;
78498: PPOPN 3
78500: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78501: LD_EXP 106
78505: PUSH
78506: LD_EXP 156
78510: AND
78511: IFFALSE 78667
78513: GO 78515
78515: DISABLE
78516: LD_INT 0
78518: PPUSH
78519: PPUSH
78520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78521: LD_ADDR_VAR 0 2
78525: PUSH
78526: LD_INT 81
78528: PUSH
78529: LD_OWVAR 2
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 2
78540: PUSH
78541: LD_INT 21
78543: PUSH
78544: LD_INT 1
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: PUSH
78551: LD_INT 21
78553: PUSH
78554: LD_INT 2
78556: PUSH
78557: EMPTY
78558: LIST
78559: LIST
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: LIST
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PPUSH
78570: CALL_OW 69
78574: ST_TO_ADDR
// if not tmp then
78575: LD_VAR 0 2
78579: NOT
78580: IFFALSE 78584
// exit ;
78582: GO 78667
// p := 0 ;
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_INT 0
78591: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78592: LD_INT 35
78594: PPUSH
78595: CALL_OW 67
// p := p + 1 ;
78599: LD_ADDR_VAR 0 3
78603: PUSH
78604: LD_VAR 0 3
78608: PUSH
78609: LD_INT 1
78611: PLUS
78612: ST_TO_ADDR
// for i in tmp do
78613: LD_ADDR_VAR 0 1
78617: PUSH
78618: LD_VAR 0 2
78622: PUSH
78623: FOR_IN
78624: IFFALSE 78655
// if GetLives ( i ) < 1000 then
78626: LD_VAR 0 1
78630: PPUSH
78631: CALL_OW 256
78635: PUSH
78636: LD_INT 1000
78638: LESS
78639: IFFALSE 78653
// SetLives ( i , 1000 ) ;
78641: LD_VAR 0 1
78645: PPUSH
78646: LD_INT 1000
78648: PPUSH
78649: CALL_OW 234
78653: GO 78623
78655: POP
78656: POP
// until p > 20 ;
78657: LD_VAR 0 3
78661: PUSH
78662: LD_INT 20
78664: GREATER
78665: IFFALSE 78592
// end ;
78667: PPOPN 3
78669: END
// every 0 0$1 trigger StreamModeActive and sTime do
78670: LD_EXP 106
78674: PUSH
78675: LD_EXP 157
78679: AND
78680: IFFALSE 78715
78682: GO 78684
78684: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78685: LD_INT 28
78687: PPUSH
78688: LD_OWVAR 2
78692: PPUSH
78693: LD_INT 2
78695: PPUSH
78696: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78700: LD_INT 30
78702: PPUSH
78703: LD_OWVAR 2
78707: PPUSH
78708: LD_INT 2
78710: PPUSH
78711: CALL_OW 322
// end ;
78715: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78716: LD_EXP 106
78720: PUSH
78721: LD_EXP 158
78725: AND
78726: IFFALSE 78847
78728: GO 78730
78730: DISABLE
78731: LD_INT 0
78733: PPUSH
78734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78735: LD_ADDR_VAR 0 2
78739: PUSH
78740: LD_INT 22
78742: PUSH
78743: LD_OWVAR 2
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 21
78754: PUSH
78755: LD_INT 1
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 3
78764: PUSH
78765: LD_INT 23
78767: PUSH
78768: LD_INT 0
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: LIST
78783: PPUSH
78784: CALL_OW 69
78788: ST_TO_ADDR
// if not tmp then
78789: LD_VAR 0 2
78793: NOT
78794: IFFALSE 78798
// exit ;
78796: GO 78847
// for i in tmp do
78798: LD_ADDR_VAR 0 1
78802: PUSH
78803: LD_VAR 0 2
78807: PUSH
78808: FOR_IN
78809: IFFALSE 78845
// begin if Crawls ( i ) then
78811: LD_VAR 0 1
78815: PPUSH
78816: CALL_OW 318
78820: IFFALSE 78831
// ComWalk ( i ) ;
78822: LD_VAR 0 1
78826: PPUSH
78827: CALL_OW 138
// SetClass ( i , 2 ) ;
78831: LD_VAR 0 1
78835: PPUSH
78836: LD_INT 2
78838: PPUSH
78839: CALL_OW 336
// end ;
78843: GO 78808
78845: POP
78846: POP
// end ;
78847: PPOPN 2
78849: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78850: LD_EXP 106
78854: PUSH
78855: LD_EXP 159
78859: AND
78860: IFFALSE 79141
78862: GO 78864
78864: DISABLE
78865: LD_INT 0
78867: PPUSH
78868: PPUSH
78869: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78870: LD_OWVAR 2
78874: PPUSH
78875: LD_INT 9
78877: PPUSH
78878: LD_INT 1
78880: PPUSH
78881: LD_INT 1
78883: PPUSH
78884: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78888: LD_INT 9
78890: PPUSH
78891: LD_OWVAR 2
78895: PPUSH
78896: CALL_OW 343
// uc_side := 9 ;
78900: LD_ADDR_OWVAR 20
78904: PUSH
78905: LD_INT 9
78907: ST_TO_ADDR
// uc_nation := 2 ;
78908: LD_ADDR_OWVAR 21
78912: PUSH
78913: LD_INT 2
78915: ST_TO_ADDR
// hc_name := Dark Warrior ;
78916: LD_ADDR_OWVAR 26
78920: PUSH
78921: LD_STRING Dark Warrior
78923: ST_TO_ADDR
// hc_gallery :=  ;
78924: LD_ADDR_OWVAR 33
78928: PUSH
78929: LD_STRING 
78931: ST_TO_ADDR
// hc_noskilllimit := true ;
78932: LD_ADDR_OWVAR 76
78936: PUSH
78937: LD_INT 1
78939: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78940: LD_ADDR_OWVAR 31
78944: PUSH
78945: LD_INT 30
78947: PUSH
78948: LD_INT 30
78950: PUSH
78951: LD_INT 30
78953: PUSH
78954: LD_INT 30
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: ST_TO_ADDR
// un := CreateHuman ;
78963: LD_ADDR_VAR 0 3
78967: PUSH
78968: CALL_OW 44
78972: ST_TO_ADDR
// hc_noskilllimit := false ;
78973: LD_ADDR_OWVAR 76
78977: PUSH
78978: LD_INT 0
78980: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78981: LD_VAR 0 3
78985: PPUSH
78986: LD_INT 1
78988: PPUSH
78989: CALL_OW 51
// p := 0 ;
78993: LD_ADDR_VAR 0 2
78997: PUSH
78998: LD_INT 0
79000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79001: LD_INT 35
79003: PPUSH
79004: CALL_OW 67
// p := p + 1 ;
79008: LD_ADDR_VAR 0 2
79012: PUSH
79013: LD_VAR 0 2
79017: PUSH
79018: LD_INT 1
79020: PLUS
79021: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79022: LD_VAR 0 3
79026: PPUSH
79027: CALL_OW 256
79031: PUSH
79032: LD_INT 1000
79034: LESS
79035: IFFALSE 79049
// SetLives ( un , 1000 ) ;
79037: LD_VAR 0 3
79041: PPUSH
79042: LD_INT 1000
79044: PPUSH
79045: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79049: LD_VAR 0 3
79053: PPUSH
79054: LD_INT 81
79056: PUSH
79057: LD_OWVAR 2
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PUSH
79066: LD_INT 91
79068: PUSH
79069: LD_VAR 0 3
79073: PUSH
79074: LD_INT 30
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: LIST
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: PPUSH
79086: CALL_OW 69
79090: PPUSH
79091: LD_VAR 0 3
79095: PPUSH
79096: CALL_OW 74
79100: PPUSH
79101: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
79105: LD_VAR 0 2
79109: PUSH
79110: LD_INT 60
79112: GREATER
79113: PUSH
79114: LD_VAR 0 3
79118: PPUSH
79119: CALL_OW 301
79123: OR
79124: IFFALSE 79001
// if un then
79126: LD_VAR 0 3
79130: IFFALSE 79141
// RemoveUnit ( un ) ;
79132: LD_VAR 0 3
79136: PPUSH
79137: CALL_OW 64
// end ;
79141: PPOPN 3
79143: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79144: LD_INT 0
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79150: LD_ADDR_VAR 0 4
79154: PUSH
79155: LD_INT 22
79157: PUSH
79158: LD_OWVAR 2
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 2
79169: PUSH
79170: LD_INT 30
79172: PUSH
79173: LD_INT 0
79175: PUSH
79176: EMPTY
79177: LIST
79178: LIST
79179: PUSH
79180: LD_INT 30
79182: PUSH
79183: LD_INT 1
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: LIST
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PPUSH
79199: CALL_OW 69
79203: ST_TO_ADDR
// if not tmp then
79204: LD_VAR 0 4
79208: NOT
79209: IFFALSE 79213
// exit ;
79211: GO 79272
// for i in tmp do
79213: LD_ADDR_VAR 0 2
79217: PUSH
79218: LD_VAR 0 4
79222: PUSH
79223: FOR_IN
79224: IFFALSE 79270
// for j = 1 to 3 do
79226: LD_ADDR_VAR 0 3
79230: PUSH
79231: DOUBLE
79232: LD_INT 1
79234: DEC
79235: ST_TO_ADDR
79236: LD_INT 3
79238: PUSH
79239: FOR_TO
79240: IFFALSE 79266
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79242: LD_VAR 0 2
79246: PPUSH
79247: CALL_OW 274
79251: PPUSH
79252: LD_VAR 0 3
79256: PPUSH
79257: LD_INT 99999
79259: PPUSH
79260: CALL_OW 277
79264: GO 79239
79266: POP
79267: POP
79268: GO 79223
79270: POP
79271: POP
// end ;
79272: LD_VAR 0 1
79276: RET
// export function hHackSetLevel10 ; var i , j ; begin
79277: LD_INT 0
79279: PPUSH
79280: PPUSH
79281: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79282: LD_ADDR_VAR 0 2
79286: PUSH
79287: LD_INT 21
79289: PUSH
79290: LD_INT 1
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: PPUSH
79297: CALL_OW 69
79301: PUSH
79302: FOR_IN
79303: IFFALSE 79355
// if IsSelected ( i ) then
79305: LD_VAR 0 2
79309: PPUSH
79310: CALL_OW 306
79314: IFFALSE 79353
// begin for j := 1 to 4 do
79316: LD_ADDR_VAR 0 3
79320: PUSH
79321: DOUBLE
79322: LD_INT 1
79324: DEC
79325: ST_TO_ADDR
79326: LD_INT 4
79328: PUSH
79329: FOR_TO
79330: IFFALSE 79351
// SetSkill ( i , j , 10 ) ;
79332: LD_VAR 0 2
79336: PPUSH
79337: LD_VAR 0 3
79341: PPUSH
79342: LD_INT 10
79344: PPUSH
79345: CALL_OW 237
79349: GO 79329
79351: POP
79352: POP
// end ;
79353: GO 79302
79355: POP
79356: POP
// end ;
79357: LD_VAR 0 1
79361: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79362: LD_INT 0
79364: PPUSH
79365: PPUSH
79366: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79367: LD_ADDR_VAR 0 2
79371: PUSH
79372: LD_INT 22
79374: PUSH
79375: LD_OWVAR 2
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 21
79386: PUSH
79387: LD_INT 1
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PPUSH
79398: CALL_OW 69
79402: PUSH
79403: FOR_IN
79404: IFFALSE 79445
// begin for j := 1 to 4 do
79406: LD_ADDR_VAR 0 3
79410: PUSH
79411: DOUBLE
79412: LD_INT 1
79414: DEC
79415: ST_TO_ADDR
79416: LD_INT 4
79418: PUSH
79419: FOR_TO
79420: IFFALSE 79441
// SetSkill ( i , j , 10 ) ;
79422: LD_VAR 0 2
79426: PPUSH
79427: LD_VAR 0 3
79431: PPUSH
79432: LD_INT 10
79434: PPUSH
79435: CALL_OW 237
79439: GO 79419
79441: POP
79442: POP
// end ;
79443: GO 79403
79445: POP
79446: POP
// end ;
79447: LD_VAR 0 1
79451: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
79452: LD_INT 0
79454: PPUSH
// uc_side := your_side ;
79455: LD_ADDR_OWVAR 20
79459: PUSH
79460: LD_OWVAR 2
79464: ST_TO_ADDR
// uc_nation := nation ;
79465: LD_ADDR_OWVAR 21
79469: PUSH
79470: LD_VAR 0 1
79474: ST_TO_ADDR
// InitHc ;
79475: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79479: LD_INT 0
79481: PPUSH
79482: LD_VAR 0 2
79486: PPUSH
79487: LD_VAR 0 3
79491: PPUSH
79492: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
79496: CALL_OW 44
79500: PPUSH
79501: LD_INT 1
79503: PPUSH
79504: CALL_OW 51
// end ;
79508: LD_VAR 0 4
79512: RET
// export function hHackSpawnVehicle ; begin
79513: LD_INT 0
79515: PPUSH
// uc_side := your_side ;
79516: LD_ADDR_OWVAR 20
79520: PUSH
79521: LD_OWVAR 2
79525: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
79526: LD_ADDR_OWVAR 21
79530: PUSH
79531: LD_INT 1
79533: PPUSH
79534: LD_INT 3
79536: PPUSH
79537: CALL_OW 12
79541: ST_TO_ADDR
// InitVc ;
79542: CALL_OW 20
// case uc_nation of 1 :
79546: LD_OWVAR 21
79550: PUSH
79551: LD_INT 1
79553: DOUBLE
79554: EQUAL
79555: IFTRUE 79559
79557: GO 79703
79559: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
79560: LD_ADDR_OWVAR 37
79564: PUSH
79565: LD_INT 1
79567: PUSH
79568: LD_INT 2
79570: PUSH
79571: LD_INT 3
79573: PUSH
79574: LD_INT 4
79576: PUSH
79577: LD_INT 5
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: LIST
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: PPUSH
79590: LD_INT 5
79592: PPUSH
79593: CALL_OW 12
79597: ARRAY
79598: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79599: LD_ADDR_OWVAR 39
79603: PUSH
79604: LD_INT 1
79606: PPUSH
79607: LD_INT 3
79609: PPUSH
79610: CALL_OW 12
79614: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
79615: LD_ADDR_OWVAR 38
79619: PUSH
79620: LD_INT 1
79622: PUSH
79623: LD_INT 2
79625: PUSH
79626: LD_INT 3
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: PUSH
79634: LD_INT 1
79636: PPUSH
79637: LD_INT 3
79639: PPUSH
79640: CALL_OW 12
79644: ARRAY
79645: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
79646: LD_ADDR_OWVAR 40
79650: PUSH
79651: LD_INT 2
79653: PUSH
79654: LD_INT 4
79656: PUSH
79657: LD_INT 5
79659: PUSH
79660: LD_INT 3
79662: PUSH
79663: LD_INT 7
79665: PUSH
79666: LD_INT 8
79668: PUSH
79669: LD_INT 9
79671: PUSH
79672: LD_INT 10
79674: PUSH
79675: LD_INT 6
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: PUSH
79689: LD_INT 1
79691: PPUSH
79692: LD_INT 9
79694: PPUSH
79695: CALL_OW 12
79699: ARRAY
79700: ST_TO_ADDR
// end ; 2 :
79701: GO 79968
79703: LD_INT 2
79705: DOUBLE
79706: EQUAL
79707: IFTRUE 79711
79709: GO 79835
79711: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
79712: LD_ADDR_OWVAR 37
79716: PUSH
79717: LD_INT 11
79719: PUSH
79720: LD_INT 12
79722: PUSH
79723: LD_INT 13
79725: PUSH
79726: LD_INT 14
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: LIST
79733: LIST
79734: PUSH
79735: LD_INT 1
79737: PPUSH
79738: LD_INT 4
79740: PPUSH
79741: CALL_OW 12
79745: ARRAY
79746: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79747: LD_ADDR_OWVAR 39
79751: PUSH
79752: LD_INT 1
79754: PPUSH
79755: LD_INT 3
79757: PPUSH
79758: CALL_OW 12
79762: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
79763: LD_ADDR_OWVAR 38
79767: PUSH
79768: LD_INT 1
79770: PUSH
79771: LD_INT 2
79773: PUSH
79774: LD_INT 5
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 1
79784: PPUSH
79785: LD_INT 3
79787: PPUSH
79788: CALL_OW 12
79792: ARRAY
79793: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
79794: LD_ADDR_OWVAR 40
79798: PUSH
79799: LD_INT 24
79801: PUSH
79802: LD_INT 26
79804: PUSH
79805: LD_INT 27
79807: PUSH
79808: LD_INT 28
79810: PUSH
79811: LD_INT 29
79813: PUSH
79814: EMPTY
79815: LIST
79816: LIST
79817: LIST
79818: LIST
79819: LIST
79820: PUSH
79821: LD_INT 1
79823: PPUSH
79824: LD_INT 5
79826: PPUSH
79827: CALL_OW 12
79831: ARRAY
79832: ST_TO_ADDR
// end ; 3 :
79833: GO 79968
79835: LD_INT 3
79837: DOUBLE
79838: EQUAL
79839: IFTRUE 79843
79841: GO 79967
79843: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
79844: LD_ADDR_OWVAR 37
79848: PUSH
79849: LD_INT 21
79851: PUSH
79852: LD_INT 23
79854: PUSH
79855: LD_INT 22
79857: PUSH
79858: LD_INT 24
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: PUSH
79867: LD_INT 1
79869: PPUSH
79870: LD_INT 4
79872: PPUSH
79873: CALL_OW 12
79877: ARRAY
79878: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79879: LD_ADDR_OWVAR 39
79883: PUSH
79884: LD_INT 1
79886: PPUSH
79887: LD_INT 3
79889: PPUSH
79890: CALL_OW 12
79894: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
79895: LD_ADDR_OWVAR 38
79899: PUSH
79900: LD_INT 1
79902: PUSH
79903: LD_INT 3
79905: PUSH
79906: EMPTY
79907: LIST
79908: LIST
79909: PUSH
79910: LD_INT 1
79912: PPUSH
79913: LD_INT 2
79915: PPUSH
79916: CALL_OW 12
79920: ARRAY
79921: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
79922: LD_ADDR_OWVAR 40
79926: PUSH
79927: LD_INT 42
79929: PUSH
79930: LD_INT 43
79932: PUSH
79933: LD_INT 44
79935: PUSH
79936: LD_INT 46
79938: PUSH
79939: LD_INT 48
79941: PUSH
79942: LD_INT 47
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: PUSH
79953: LD_INT 1
79955: PPUSH
79956: LD_INT 6
79958: PPUSH
79959: CALL_OW 12
79963: ARRAY
79964: ST_TO_ADDR
// end ; end ;
79965: GO 79968
79967: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79968: CALL_OW 45
79972: PPUSH
79973: LD_INT 1
79975: PPUSH
79976: CALL_OW 51
// end ;
79980: LD_VAR 0 1
79984: RET
// export hInvincible ; every 1 do
79985: GO 79987
79987: DISABLE
// hInvincible := [ ] ;
79988: LD_ADDR_EXP 160
79992: PUSH
79993: EMPTY
79994: ST_TO_ADDR
79995: END
// every 10 do var i ;
79996: GO 79998
79998: DISABLE
79999: LD_INT 0
80001: PPUSH
// begin enable ;
80002: ENABLE
// if not hInvincible then
80003: LD_EXP 160
80007: NOT
80008: IFFALSE 80012
// exit ;
80010: GO 80056
// for i in hInvincible do
80012: LD_ADDR_VAR 0 1
80016: PUSH
80017: LD_EXP 160
80021: PUSH
80022: FOR_IN
80023: IFFALSE 80054
// if GetLives ( i ) < 1000 then
80025: LD_VAR 0 1
80029: PPUSH
80030: CALL_OW 256
80034: PUSH
80035: LD_INT 1000
80037: LESS
80038: IFFALSE 80052
// SetLives ( i , 1000 ) ;
80040: LD_VAR 0 1
80044: PPUSH
80045: LD_INT 1000
80047: PPUSH
80048: CALL_OW 234
80052: GO 80022
80054: POP
80055: POP
// end ;
80056: PPOPN 1
80058: END
// export function hHackInvincible ; var i ; begin
80059: LD_INT 0
80061: PPUSH
80062: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80063: LD_ADDR_VAR 0 2
80067: PUSH
80068: LD_INT 2
80070: PUSH
80071: LD_INT 21
80073: PUSH
80074: LD_INT 1
80076: PUSH
80077: EMPTY
80078: LIST
80079: LIST
80080: PUSH
80081: LD_INT 21
80083: PUSH
80084: LD_INT 2
80086: PUSH
80087: EMPTY
80088: LIST
80089: LIST
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: LIST
80095: PPUSH
80096: CALL_OW 69
80100: PUSH
80101: FOR_IN
80102: IFFALSE 80163
// if IsSelected ( i ) then
80104: LD_VAR 0 2
80108: PPUSH
80109: CALL_OW 306
80113: IFFALSE 80161
// begin if i in hInvincible then
80115: LD_VAR 0 2
80119: PUSH
80120: LD_EXP 160
80124: IN
80125: IFFALSE 80145
// hInvincible := hInvincible diff i else
80127: LD_ADDR_EXP 160
80131: PUSH
80132: LD_EXP 160
80136: PUSH
80137: LD_VAR 0 2
80141: DIFF
80142: ST_TO_ADDR
80143: GO 80161
// hInvincible := hInvincible union i ;
80145: LD_ADDR_EXP 160
80149: PUSH
80150: LD_EXP 160
80154: PUSH
80155: LD_VAR 0 2
80159: UNION
80160: ST_TO_ADDR
// end ;
80161: GO 80101
80163: POP
80164: POP
// end ;
80165: LD_VAR 0 1
80169: RET
// export function hHackInvisible ; var i , j ; begin
80170: LD_INT 0
80172: PPUSH
80173: PPUSH
80174: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80175: LD_ADDR_VAR 0 2
80179: PUSH
80180: LD_INT 21
80182: PUSH
80183: LD_INT 1
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PPUSH
80190: CALL_OW 69
80194: PUSH
80195: FOR_IN
80196: IFFALSE 80220
// if IsSelected ( i ) then
80198: LD_VAR 0 2
80202: PPUSH
80203: CALL_OW 306
80207: IFFALSE 80218
// ComForceInvisible ( i ) ;
80209: LD_VAR 0 2
80213: PPUSH
80214: CALL_OW 496
80218: GO 80195
80220: POP
80221: POP
// end ;
80222: LD_VAR 0 1
80226: RET
// export function hHackChangeYourSide ; begin
80227: LD_INT 0
80229: PPUSH
// if your_side = 8 then
80230: LD_OWVAR 2
80234: PUSH
80235: LD_INT 8
80237: EQUAL
80238: IFFALSE 80250
// your_side := 0 else
80240: LD_ADDR_OWVAR 2
80244: PUSH
80245: LD_INT 0
80247: ST_TO_ADDR
80248: GO 80264
// your_side := your_side + 1 ;
80250: LD_ADDR_OWVAR 2
80254: PUSH
80255: LD_OWVAR 2
80259: PUSH
80260: LD_INT 1
80262: PLUS
80263: ST_TO_ADDR
// end ;
80264: LD_VAR 0 1
80268: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80269: LD_INT 0
80271: PPUSH
80272: PPUSH
80273: PPUSH
// for i in all_units do
80274: LD_ADDR_VAR 0 2
80278: PUSH
80279: LD_OWVAR 3
80283: PUSH
80284: FOR_IN
80285: IFFALSE 80363
// if IsSelected ( i ) then
80287: LD_VAR 0 2
80291: PPUSH
80292: CALL_OW 306
80296: IFFALSE 80361
// begin j := GetSide ( i ) ;
80298: LD_ADDR_VAR 0 3
80302: PUSH
80303: LD_VAR 0 2
80307: PPUSH
80308: CALL_OW 255
80312: ST_TO_ADDR
// if j = 8 then
80313: LD_VAR 0 3
80317: PUSH
80318: LD_INT 8
80320: EQUAL
80321: IFFALSE 80333
// j := 0 else
80323: LD_ADDR_VAR 0 3
80327: PUSH
80328: LD_INT 0
80330: ST_TO_ADDR
80331: GO 80347
// j := j + 1 ;
80333: LD_ADDR_VAR 0 3
80337: PUSH
80338: LD_VAR 0 3
80342: PUSH
80343: LD_INT 1
80345: PLUS
80346: ST_TO_ADDR
// SetSide ( i , j ) ;
80347: LD_VAR 0 2
80351: PPUSH
80352: LD_VAR 0 3
80356: PPUSH
80357: CALL_OW 235
// end ;
80361: GO 80284
80363: POP
80364: POP
// end ;
80365: LD_VAR 0 1
80369: RET
// export function hHackFog ; begin
80370: LD_INT 0
80372: PPUSH
// FogOff ( true ) ;
80373: LD_INT 1
80375: PPUSH
80376: CALL_OW 344
// end ;
80380: LD_VAR 0 1
80384: RET
// export function hHackApeman ; begin
80385: LD_INT 0
80387: PPUSH
// uc_side := your_side ;
80388: LD_ADDR_OWVAR 20
80392: PUSH
80393: LD_OWVAR 2
80397: ST_TO_ADDR
// uc_nation := 0 ;
80398: LD_ADDR_OWVAR 21
80402: PUSH
80403: LD_INT 0
80405: ST_TO_ADDR
// hc_name :=  ;
80406: LD_ADDR_OWVAR 26
80410: PUSH
80411: LD_STRING 
80413: ST_TO_ADDR
// hc_gallery :=  ;
80414: LD_ADDR_OWVAR 33
80418: PUSH
80419: LD_STRING 
80421: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
80422: LD_ADDR_OWVAR 31
80426: PUSH
80427: LD_INT 0
80429: PUSH
80430: LD_INT 0
80432: PUSH
80433: LD_INT 0
80435: PUSH
80436: LD_INT 0
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: ST_TO_ADDR
// hc_class := class_apeman ;
80445: LD_ADDR_OWVAR 28
80449: PUSH
80450: LD_INT 12
80452: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
80453: CALL_OW 44
80457: PPUSH
80458: LD_INT 1
80460: PPUSH
80461: CALL_OW 51
// end ;
80465: LD_VAR 0 1
80469: RET
// export function hHackBoom ; begin
80470: LD_INT 0
80472: PPUSH
// uc_side := your_side ;
80473: LD_ADDR_OWVAR 20
80477: PUSH
80478: LD_OWVAR 2
80482: ST_TO_ADDR
// uc_nation := 1 ;
80483: LD_ADDR_OWVAR 21
80487: PUSH
80488: LD_INT 1
80490: ST_TO_ADDR
// vc_chassis := us_morphling ;
80491: LD_ADDR_OWVAR 37
80495: PUSH
80496: LD_INT 5
80498: ST_TO_ADDR
// vc_engine := engine_siberite ;
80499: LD_ADDR_OWVAR 39
80503: PUSH
80504: LD_INT 3
80506: ST_TO_ADDR
// vc_control := control_computer ;
80507: LD_ADDR_OWVAR 38
80511: PUSH
80512: LD_INT 3
80514: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
80515: LD_ADDR_OWVAR 40
80519: PUSH
80520: LD_INT 8
80522: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80523: CALL_OW 45
80527: PPUSH
80528: LD_INT 1
80530: PPUSH
80531: CALL_OW 51
// end ;
80535: LD_VAR 0 1
80539: RET
