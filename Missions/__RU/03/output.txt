// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 88
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 940 0 0
// PrepareAmericans ;
 300: CALL 5409 0 0
// Nef_PrepareNature ;
 304: CALL 30174 0 0
// MissionIntro ;
 308: CALL 21803 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// end ;
 613: LD_VAR 0 1
 617: RET
// every 0 0$1 trigger debugMode do var i ;
 618: LD_EXP 37
 622: IFFALSE 937
 624: GO 626
 626: DISABLE
 627: LD_INT 0
 629: PPUSH
// begin enable ;
 630: ENABLE
// FogOff ( your_side ) ;
 631: LD_OWVAR 2
 635: PPUSH
 636: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 640: LD_ADDR_VAR 0 1
 644: PUSH
 645: LD_INT 22
 647: PUSH
 648: LD_OWVAR 2
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 21
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 711
// SetLives ( i , 1000 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: LD_INT 1000
 704: PPUSH
 705: CALL_OW 234
 709: GO 694
 711: POP
 712: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 21
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PPUSH
 744: CALL_OW 69
 748: PUSH
 749: FOR_IN
 750: IFFALSE 814
// begin SetSkill ( i , skill_combat , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 3
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: LD_INT 10
 807: PPUSH
 808: CALL_OW 237
// end ;
 812: GO 749
 814: POP
 815: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 816: LD_ADDR_VAR 0 1
 820: PUSH
 821: LD_INT 22
 823: PUSH
 824: LD_OWVAR 2
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 2
 835: PUSH
 836: LD_INT 30
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: PUSH
 870: FOR_IN
 871: IFFALSE 935
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 274
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 9999
 888: PPUSH
 889: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 893: LD_VAR 0 1
 897: PPUSH
 898: CALL_OW 274
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: LD_INT 9999
 908: PPUSH
 909: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: CALL_OW 274
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 9999
 928: PPUSH
 929: CALL_OW 277
// end ;
 933: GO 870
 935: POP
 936: POP
// end ; end_of_file
 937: PPOPN 1
 939: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 940: LD_INT 0
 942: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 943: LD_ADDR_EXP 80
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 0
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 966: LD_ADDR_EXP 74
 970: PUSH
 971: EMPTY
 972: ST_TO_ADDR
// PrepareKirovBase ;
 973: CALL 2029 0 0
// PrepareHeroes ;
 977: CALL 1010 0 0
// PrepareKirovPersonel ;
 981: CALL 2794 0 0
// PrepareBeriaBase ;
 985: CALL 1431 0 0
// PrepareSecondBaseTeam ;
 989: CALL 3937 0 0
// PrepareGrishko ;
 993: CALL 3122 0 0
// PrepareOtherBuildings ;
 997: CALL 3371 0 0
// PrepareVehicles ;
1001: CALL 3195 0 0
// end ;
1005: LD_VAR 0 1
1009: RET
// function PrepareHeroes ; begin
1010: LD_INT 0
1012: PPUSH
// uc_side = 3 ;
1013: LD_ADDR_OWVAR 20
1017: PUSH
1018: LD_INT 3
1020: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1021: LD_ADDR_EXP 48
1025: PUSH
1026: LD_STRING Burlak
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 6913 0 2
1036: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1037: LD_ADDR_EXP 49
1041: PUSH
1042: LD_STRING Gnyevko
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL 6913 0 2
1052: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1053: LD_ADDR_EXP 51
1057: PUSH
1058: LD_STRING Kovalyuk
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL 6913 0 2
1068: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1069: LD_ADDR_EXP 50
1073: PUSH
1074: LD_STRING Kirilenkova
1076: PPUSH
1077: LD_INT 1
1079: PPUSH
1080: CALL 6913 0 2
1084: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1085: LD_EXP 48
1089: PUSH
1090: LD_EXP 49
1094: PUSH
1095: LD_EXP 51
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PPUSH
1105: LD_INT 3
1107: PPUSH
1108: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1112: LD_EXP 50
1116: PPUSH
1117: LD_INT 4
1119: PPUSH
1120: CALL_OW 336
// uc_side = 6 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 6
1131: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1132: LD_EXP 1
1136: NOT
1137: PUSH
1138: LD_STRING 02_Belkov
1140: PPUSH
1141: CALL_OW 28
1145: AND
1146: IFFALSE 1247
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1148: LD_ADDR_EXP 52
1152: PUSH
1153: LD_STRING Belkov
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL 6913 0 2
1163: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1164: LD_STRING 02_Belkov2
1166: PPUSH
1167: CALL_OW 28
1171: IFFALSE 1210
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1173: LD_ADDR_EXP 53
1177: PUSH
1178: LD_STRING Belkov2
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL 6913 0 2
1188: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1189: LD_EXP 53
1193: PPUSH
1194: LD_INT 159
1196: PPUSH
1197: LD_INT 107
1199: PPUSH
1200: LD_INT 5
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1210: LD_ADDR_EXP 62
1214: PUSH
1215: LD_EXP 52
1219: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1220: LD_EXP 52
1224: PPUSH
1225: LD_INT 165
1227: PPUSH
1228: LD_INT 110
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL_OW 48
// ComHold ( Belkov ) ;
1238: LD_EXP 52
1242: PPUSH
1243: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1247: LD_EXP 1
1251: PUSH
1252: LD_STRING 02_Belkov2
1254: PPUSH
1255: CALL_OW 28
1259: AND
1260: IFFALSE 1315
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1262: LD_ADDR_EXP 53
1266: PUSH
1267: LD_STRING Belkov2
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: CALL 6913 0 2
1277: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1278: LD_ADDR_EXP 62
1282: PUSH
1283: LD_EXP 53
1287: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1288: LD_EXP 53
1292: PPUSH
1293: LD_INT 165
1295: PPUSH
1296: LD_INT 110
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 48
// ComHold ( Belkov2 ) ;
1306: LD_EXP 53
1310: PPUSH
1311: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1315: LD_EXP 52
1319: PUSH
1320: LD_EXP 53
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1336: LD_EXP 48
1340: PPUSH
1341: LD_INT 164
1343: PPUSH
1344: LD_INT 108
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 48
// ComHold ( Burlak ) ;
1354: LD_EXP 48
1358: PPUSH
1359: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1363: LD_EXP 49
1367: PPUSH
1368: LD_INT 159
1370: PPUSH
1371: LD_INT 107
1373: PPUSH
1374: LD_INT 5
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1384: LD_EXP 51
1388: PPUSH
1389: LD_INT 159
1391: PPUSH
1392: LD_INT 107
1394: PPUSH
1395: LD_INT 5
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1405: LD_EXP 50
1409: PPUSH
1410: LD_INT 159
1412: PPUSH
1413: LD_INT 107
1415: PPUSH
1416: LD_INT 5
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 50
// end ;
1426: LD_VAR 0 1
1430: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1431: LD_INT 0
1433: PPUSH
1434: PPUSH
1435: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1436: LD_ADDR_EXP 58
1440: PUSH
1441: LD_STRING 02_BeriaBase_2
1443: PPUSH
1444: EMPTY
1445: PPUSH
1446: CALL_OW 30
1450: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1451: LD_ADDR_EXP 57
1455: PUSH
1456: LD_STRING 02_other_beria
1458: PPUSH
1459: CALL_OW 31
1463: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1464: LD_ADDR_EXP 55
1468: PUSH
1469: LD_STRING 02_other_survivors
1471: PPUSH
1472: CALL_OW 31
1476: ST_TO_ADDR
// uc_side = 3 ;
1477: LD_ADDR_OWVAR 20
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// uc_nation = 3 ;
1485: LD_ADDR_OWVAR 21
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// for i := 1 to beriaBase do
1493: LD_ADDR_VAR 0 2
1497: PUSH
1498: DOUBLE
1499: LD_INT 1
1501: DEC
1502: ST_TO_ADDR
1503: LD_EXP 58
1507: PUSH
1508: FOR_TO
1509: IFFALSE 1762
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1511: LD_ADDR_OWVAR 42
1515: PUSH
1516: LD_EXP 58
1520: PUSH
1521: LD_VAR 0 2
1525: ARRAY
1526: PUSH
1527: LD_INT 1
1529: ARRAY
1530: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1531: LD_ADDR_OWVAR 43
1535: PUSH
1536: LD_EXP 58
1540: PUSH
1541: LD_VAR 0 2
1545: ARRAY
1546: PUSH
1547: LD_INT 5
1549: ARRAY
1550: ST_TO_ADDR
// if bc_type = b_lab then
1551: LD_OWVAR 42
1555: PUSH
1556: LD_INT 6
1558: EQUAL
1559: IFFALSE 1577
// begin bc_kind1 = b_lab_basic ;
1561: LD_ADDR_OWVAR 44
1565: PUSH
1566: LD_INT 9
1568: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1569: LD_ADDR_OWVAR 45
1573: PUSH
1574: LD_INT 9
1576: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1577: LD_OWVAR 42
1581: PUSH
1582: LD_INT 7
1584: EQUAL
1585: PUSH
1586: LD_OWVAR 42
1590: PUSH
1591: LD_INT 8
1593: EQUAL
1594: OR
1595: IFFALSE 1711
// begin if beriaBase [ i ] [ 7 ] then
1597: LD_EXP 58
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 7
1610: ARRAY
1611: IFFALSE 1633
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1613: LD_ADDR_OWVAR 44
1617: PUSH
1618: LD_EXP 58
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 7
1631: ARRAY
1632: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1633: LD_EXP 58
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 8
1646: ARRAY
1647: IFFALSE 1669
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_EXP 58
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 8
1667: ARRAY
1668: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1669: LD_EXP 58
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: ARRAY
1683: NOT
1684: PUSH
1685: LD_EXP 58
1689: PUSH
1690: LD_VAR 0 2
1694: ARRAY
1695: PUSH
1696: LD_INT 8
1698: ARRAY
1699: NOT
1700: AND
1701: IFFALSE 1711
// bc_type := b_lab ;
1703: LD_ADDR_OWVAR 42
1707: PUSH
1708: LD_INT 6
1710: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1711: LD_EXP 58
1715: PUSH
1716: LD_VAR 0 2
1720: ARRAY
1721: PUSH
1722: LD_INT 2
1724: ARRAY
1725: PPUSH
1726: LD_EXP 58
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 3
1739: ARRAY
1740: PPUSH
1741: LD_EXP 58
1745: PUSH
1746: LD_VAR 0 2
1750: ARRAY
1751: PUSH
1752: LD_INT 4
1754: ARRAY
1755: PPUSH
1756: CALL_OW 47
// end ;
1760: GO 1508
1762: POP
1763: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1764: LD_ADDR_EXP 59
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 30
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1802: LD_EXP 59
1806: PPUSH
1807: LD_STRING beria
1809: PPUSH
1810: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1814: LD_EXP 59
1818: PPUSH
1819: CALL_OW 274
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_EXP 2
1831: PPUSH
1832: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1836: LD_EXP 59
1840: PPUSH
1841: CALL_OW 274
1845: PPUSH
1846: LD_INT 2
1848: PPUSH
1849: LD_EXP 3
1853: PPUSH
1854: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1858: LD_EXP 59
1862: PPUSH
1863: CALL_OW 274
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_EXP 59
1875: PPUSH
1876: CALL_OW 274
1880: PPUSH
1881: LD_INT 2
1883: PPUSH
1884: CALL_OW 275
1888: PUSH
1889: LD_EXP 41
1893: PLUS
1894: PPUSH
1895: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1899: LD_EXP 59
1903: PPUSH
1904: CALL_OW 274
1908: PPUSH
1909: LD_INT 2
1911: PPUSH
1912: LD_EXP 59
1916: PPUSH
1917: CALL_OW 274
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: CALL_OW 275
1929: PUSH
1930: LD_EXP 42
1934: PLUS
1935: PPUSH
1936: CALL_OW 277
// uc_side = 6 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 6
1947: ST_TO_ADDR
// for i in otherBeriaUnits do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_EXP 57
1957: PUSH
1958: FOR_IN
1959: IFFALSE 1984
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1961: LD_VAR 0 2
1965: PPUSH
1966: LD_INT 159
1968: PPUSH
1969: LD_INT 107
1971: PPUSH
1972: LD_INT 10
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 50
1982: GO 1958
1984: POP
1985: POP
// for i in other_survivors do
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_EXP 55
1995: PUSH
1996: FOR_IN
1997: IFFALSE 2022
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_INT 159
2006: PPUSH
2007: LD_INT 107
2009: PPUSH
2010: LD_INT 10
2012: PPUSH
2013: LD_INT 0
2015: PPUSH
2016: CALL_OW 50
2020: GO 1996
2022: POP
2023: POP
// end ;
2024: LD_VAR 0 1
2028: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2029: LD_INT 0
2031: PPUSH
2032: PPUSH
2033: PPUSH
2034: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2035: LD_ADDR_EXP 65
2039: PUSH
2040: LD_STRING 02_KirovBase_3
2042: PPUSH
2043: EMPTY
2044: PPUSH
2045: CALL_OW 30
2049: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2050: LD_ADDR_EXP 64
2054: PUSH
2055: LD_STRING 02_other_kirov
2057: PPUSH
2058: CALL_OW 31
2062: ST_TO_ADDR
// uc_side = 6 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// uc_nation = 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2079: LD_ADDR_EXP 60
2083: PUSH
2084: LD_STRING Kurin
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL 6913 0 2
2094: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2095: LD_EXP 60
2099: PPUSH
2100: LD_INT 166
2102: PPUSH
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 48
// ComHold ( Kurin ) ;
2113: LD_EXP 60
2117: PPUSH
2118: CALL_OW 140
// for i := 1 to kirovBase do
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: DOUBLE
2128: LD_INT 1
2130: DEC
2131: ST_TO_ADDR
2132: LD_EXP 65
2136: PUSH
2137: FOR_TO
2138: IFFALSE 2576
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2140: LD_ADDR_OWVAR 42
2144: PUSH
2145: LD_EXP 65
2149: PUSH
2150: LD_VAR 0 2
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2160: LD_ADDR_OWVAR 43
2164: PUSH
2165: LD_EXP 65
2169: PUSH
2170: LD_VAR 0 2
2174: ARRAY
2175: PUSH
2176: LD_INT 5
2178: ARRAY
2179: ST_TO_ADDR
// if bc_type = b_depot then
2180: LD_OWVAR 42
2184: PUSH
2185: LD_INT 0
2187: EQUAL
2188: IFFALSE 2198
// bc_type = b_warehouse ;
2190: LD_ADDR_OWVAR 42
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// if bc_type = b_armoury then
2198: LD_OWVAR 42
2202: PUSH
2203: LD_INT 4
2205: EQUAL
2206: IFFALSE 2216
// bc_type = b_barracks ;
2208: LD_ADDR_OWVAR 42
2212: PUSH
2213: LD_INT 5
2215: ST_TO_ADDR
// if bc_type = b_lab then
2216: LD_OWVAR 42
2220: PUSH
2221: LD_INT 6
2223: EQUAL
2224: IFFALSE 2242
// begin bc_kind1 = b_lab_weapon ;
2226: LD_ADDR_OWVAR 44
2230: PUSH
2231: LD_INT 10
2233: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2234: LD_ADDR_OWVAR 45
2238: PUSH
2239: LD_INT 9
2241: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2242: LD_OWVAR 42
2246: PUSH
2247: LD_INT 2
2249: EQUAL
2250: IFFALSE 2260
// bc_type = b_factory ;
2252: LD_ADDR_OWVAR 42
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: PUSH
2269: LD_OWVAR 42
2273: PUSH
2274: LD_INT 8
2276: EQUAL
2277: OR
2278: IFFALSE 2394
// begin if kirovBase [ i ] [ 7 ] then
2280: LD_EXP 65
2284: PUSH
2285: LD_VAR 0 2
2289: ARRAY
2290: PUSH
2291: LD_INT 7
2293: ARRAY
2294: IFFALSE 2316
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2296: LD_ADDR_OWVAR 44
2300: PUSH
2301: LD_EXP 65
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PUSH
2312: LD_INT 7
2314: ARRAY
2315: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2316: LD_EXP 65
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_INT 8
2329: ARRAY
2330: IFFALSE 2352
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2332: LD_ADDR_OWVAR 45
2336: PUSH
2337: LD_EXP 65
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: PUSH
2348: LD_INT 8
2350: ARRAY
2351: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2352: LD_EXP 65
2356: PUSH
2357: LD_VAR 0 2
2361: ARRAY
2362: PUSH
2363: LD_INT 7
2365: ARRAY
2366: NOT
2367: PUSH
2368: LD_EXP 65
2372: PUSH
2373: LD_VAR 0 2
2377: ARRAY
2378: PUSH
2379: LD_INT 8
2381: ARRAY
2382: NOT
2383: AND
2384: IFFALSE 2394
// bc_type := b_lab ;
2386: LD_ADDR_OWVAR 42
2390: PUSH
2391: LD_INT 6
2393: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2394: LD_OWVAR 42
2398: PUSH
2399: LD_INT 31
2401: EQUAL
2402: IFFALSE 2426
// begin bc_type = b_bunker ;
2404: LD_ADDR_OWVAR 42
2408: PUSH
2409: LD_INT 32
2411: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2412: LD_ADDR_EXP 76
2416: PUSH
2417: LD_EXP 76
2421: PUSH
2422: LD_INT 1
2424: PLUS
2425: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_EXP 65
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 2
2444: ARRAY
2445: PPUSH
2446: LD_EXP 65
2450: PUSH
2451: LD_VAR 0 2
2455: ARRAY
2456: PUSH
2457: LD_INT 3
2459: ARRAY
2460: PPUSH
2461: LD_EXP 65
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_INT 4
2474: ARRAY
2475: PPUSH
2476: CALL_OW 47
2480: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 4
2488: LESS
2489: PUSH
2490: LD_OWVAR 42
2494: PUSH
2495: LD_INT 32
2497: EQUAL
2498: AND
2499: IFFALSE 2548
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2501: LD_VAR 0 4
2505: PPUSH
2506: LD_INT 42
2508: PUSH
2509: LD_INT 43
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 1
2518: PPUSH
2519: LD_INT 2
2521: PPUSH
2522: CALL_OW 12
2526: ARRAY
2527: PPUSH
2528: CALL_OW 431
// tmp = tmp + 1 ;
2532: LD_ADDR_VAR 0 3
2536: PUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: PLUS
2545: ST_TO_ADDR
// end else
2546: GO 2574
// if bc_type = b_bunker then
2548: LD_OWVAR 42
2552: PUSH
2553: LD_INT 32
2555: EQUAL
2556: IFFALSE 2574
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2558: LD_ADDR_EXP 71
2562: PUSH
2563: LD_EXP 71
2567: PUSH
2568: LD_VAR 0 4
2572: ADD
2573: ST_TO_ADDR
// end ;
2574: GO 2137
2576: POP
2577: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2578: LD_ADDR_EXP 66
2582: PUSH
2583: LD_INT 22
2585: PUSH
2586: LD_INT 6
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 30
2595: PUSH
2596: LD_INT 1
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL_OW 69
2611: PUSH
2612: LD_INT 1
2614: ARRAY
2615: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2616: LD_EXP 66
2620: PPUSH
2621: LD_STRING kirov
2623: PPUSH
2624: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2628: LD_EXP 66
2632: PPUSH
2633: CALL_OW 274
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 5000
2643: PPUSH
2644: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2648: LD_EXP 66
2652: PPUSH
2653: CALL_OW 274
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: LD_INT 2000
2663: PPUSH
2664: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2668: LD_ADDR_EXP 68
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 6
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 21
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 30
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PPUSH
2713: LD_INT 145
2715: PPUSH
2716: LD_INT 102
2718: PPUSH
2719: CALL_OW 73
2723: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2724: LD_ADDR_EXP 69
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 21
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 30
2751: PUSH
2752: LD_INT 5
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: PPUSH
2764: CALL_OW 69
2768: PUSH
2769: LD_EXP 68
2773: DIFF
2774: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2775: LD_ADDR_EXP 69
2779: PUSH
2780: LD_EXP 69
2784: PUSH
2785: LD_INT 1
2787: ARRAY
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 1
2793: RET
// export function PrepareKirovPersonel ; var i ; begin
2794: LD_INT 0
2796: PPUSH
2797: PPUSH
// PrepareEngineer ( false , 7 ) ;
2798: LD_INT 0
2800: PPUSH
2801: LD_INT 7
2803: PPUSH
2804: CALL_OW 382
// kirovEng = CreateHuman ;
2808: LD_ADDR_EXP 70
2812: PUSH
2813: CALL_OW 44
2817: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2818: LD_EXP 70
2822: PPUSH
2823: LD_INT 159
2825: PPUSH
2826: LD_INT 107
2828: PPUSH
2829: LD_INT 10
2831: PPUSH
2832: LD_INT 0
2834: PPUSH
2835: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2839: LD_ADDR_EXP 61
2843: PUSH
2844: LD_STRING Popov
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL 6913 0 2
2854: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2855: LD_EXP 61
2859: PPUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2870: LD_EXP 61
2874: PPUSH
2875: LD_INT 98
2877: PPUSH
2878: LD_INT 36
2880: PPUSH
2881: CALL_OW 118
// hc_name :=  ;
2885: LD_ADDR_OWVAR 26
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// hc_gallery :=  ;
2893: LD_ADDR_OWVAR 33
2897: PUSH
2898: LD_STRING 
2900: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 381
// ruScout = CreateHuman ;
2911: LD_ADDR_EXP 63
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2921: LD_EXP 63
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 49
// ComCrawl ( ruScout ) ;
2936: LD_EXP 63
2940: PPUSH
2941: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2945: LD_EXP 63
2949: PPUSH
2950: LD_INT 98
2952: PPUSH
2953: LD_INT 36
2955: PPUSH
2956: CALL_OW 178
// uc_side = 6 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// for i in otherKirovUnits do
2968: LD_ADDR_VAR 0 2
2972: PUSH
2973: LD_EXP 64
2977: PUSH
2978: FOR_IN
2979: IFFALSE 3115
// begin SetSide ( i , 6 ) ;
2981: LD_VAR 0 2
2985: PPUSH
2986: LD_INT 6
2988: PPUSH
2989: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL_OW 257
3002: PUSH
3003: LD_INT 1
3005: EQUAL
3006: PUSH
3007: LD_EXP 76
3011: PUSH
3012: LD_INT 0
3014: GREATER
3015: AND
3016: IFFALSE 3092
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3018: LD_VAR 0 2
3022: PPUSH
3023: LD_INT 18
3025: PPUSH
3026: LD_INT 22
3028: PUSH
3029: LD_INT 6
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 21
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 30
3048: PUSH
3049: LD_INT 32
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 70
3065: PUSH
3066: LD_EXP 76
3070: ARRAY
3071: PPUSH
3072: CALL 8457 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3076: LD_ADDR_EXP 76
3080: PUSH
3081: LD_EXP 76
3085: PUSH
3086: LD_INT 1
3088: MINUS
3089: ST_TO_ADDR
// end else
3090: GO 3113
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 159
3099: PPUSH
3100: LD_INT 107
3102: PPUSH
3103: LD_INT 10
3105: PPUSH
3106: LD_INT 0
3108: PPUSH
3109: CALL_OW 50
// end ; end ;
3113: GO 2978
3115: POP
3116: POP
// end ;
3117: LD_VAR 0 1
3121: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// uc_side = 6 ;
3128: LD_ADDR_OWVAR 20
3132: PUSH
3133: LD_INT 6
3135: ST_TO_ADDR
// uc_nation = 3 ;
3136: LD_ADDR_OWVAR 21
3140: PUSH
3141: LD_INT 3
3143: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3144: LD_ADDR_EXP 81
3148: PUSH
3149: LD_STRING Grishko
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL 6913 0 2
3159: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3160: LD_EXP 81
3164: PPUSH
3165: LD_INT 218
3167: PPUSH
3168: LD_INT 108
3170: PPUSH
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: CALL_OW 50
// ComHold ( Grishko ) ;
3181: LD_EXP 81
3185: PPUSH
3186: CALL_OW 140
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
// uc_side = 3 ;
3200: LD_ADDR_OWVAR 20
3204: PUSH
3205: LD_INT 3
3207: ST_TO_ADDR
// uc_nation = 3 ;
3208: LD_ADDR_OWVAR 21
3212: PUSH
3213: LD_INT 3
3215: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_EXP 4
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3364
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3234: LD_EXP 4
3238: PUSH
3239: LD_VAR 0 2
3243: ARRAY
3244: PUSH
3245: LD_INT 1
3247: ARRAY
3248: PPUSH
3249: LD_EXP 4
3253: PUSH
3254: LD_VAR 0 2
3258: ARRAY
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_EXP 4
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PUSH
3275: LD_INT 3
3277: ARRAY
3278: PPUSH
3279: LD_EXP 4
3283: PUSH
3284: LD_VAR 0 2
3288: ARRAY
3289: PUSH
3290: LD_INT 4
3292: ARRAY
3293: PPUSH
3294: LD_EXP 4
3298: PUSH
3299: LD_VAR 0 2
3303: ARRAY
3304: PUSH
3305: LD_INT 5
3307: ARRAY
3308: PPUSH
3309: CALL 35809 0 5
// vehicle = CreateVehicle ;
3313: LD_ADDR_VAR 0 3
3317: PUSH
3318: CALL_OW 45
3322: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3323: LD_VAR 0 3
3327: PPUSH
3328: LD_INT 25
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_EXP 4
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PUSH
3354: LD_INT 6
3356: ARRAY
3357: PPUSH
3358: CALL_OW 234
// end ;
3362: GO 3231
3364: POP
3365: POP
// end ;
3366: LD_VAR 0 1
3370: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3371: LD_INT 0
3373: PPUSH
3374: PPUSH
3375: PPUSH
3376: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_STRING 02_OtherBuildings_4
3384: PPUSH
3385: EMPTY
3386: PPUSH
3387: CALL_OW 30
3391: ST_TO_ADDR
// uc_side = 3 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 3
3399: ST_TO_ADDR
// for i := 1 to otherBuildings do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_VAR 0 3
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3677
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_VAR 0 3
3427: PUSH
3428: LD_VAR 0 2
3432: ARRAY
3433: PUSH
3434: LD_INT 6
3436: ARRAY
3437: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_VAR 0 3
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 1
3456: ARRAY
3457: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3458: LD_ADDR_OWVAR 43
3462: PUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 5
3476: ARRAY
3477: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3478: LD_ADDR_VAR 0 4
3482: PUSH
3483: LD_VAR 0 3
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PUSH
3494: LD_INT 2
3496: ARRAY
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_VAR 0 2
3507: ARRAY
3508: PUSH
3509: LD_INT 3
3511: ARRAY
3512: PPUSH
3513: LD_VAR 0 3
3517: PUSH
3518: LD_VAR 0 2
3522: ARRAY
3523: PUSH
3524: LD_INT 4
3526: ARRAY
3527: PPUSH
3528: CALL_OW 47
3532: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3533: LD_VAR 0 4
3537: PPUSH
3538: LD_VAR 0 3
3542: PUSH
3543: LD_VAR 0 2
3547: ARRAY
3548: PUSH
3549: LD_INT 7
3551: ARRAY
3552: PPUSH
3553: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 266
3566: PUSH
3567: LD_INT 0
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: IN
3577: IFFALSE 3675
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3579: LD_VAR 0 4
3583: PPUSH
3584: CALL_OW 274
3588: PPUSH
3589: LD_INT 1
3591: PPUSH
3592: LD_VAR 0 3
3596: PUSH
3597: LD_VAR 0 2
3601: ARRAY
3602: PUSH
3603: LD_INT 8
3605: ARRAY
3606: PPUSH
3607: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3611: LD_VAR 0 4
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_VAR 0 3
3628: PUSH
3629: LD_VAR 0 2
3633: ARRAY
3634: PUSH
3635: LD_INT 9
3637: ARRAY
3638: PPUSH
3639: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 3
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 10
3669: ARRAY
3670: PPUSH
3671: CALL_OW 277
// end ; end ;
3675: GO 3415
3677: POP
3678: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: LD_STRING 02_AmericanBuildings_5
3686: PPUSH
3687: EMPTY
3688: PPUSH
3689: CALL_OW 30
3693: ST_TO_ADDR
// uc_side = 1 ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// uc_nation = 1 ;
3702: LD_ADDR_OWVAR 21
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// for i := 1 to otherBuildings do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: DOUBLE
3716: LD_INT 1
3718: DEC
3719: ST_TO_ADDR
3720: LD_VAR 0 3
3724: PUSH
3725: FOR_TO
3726: IFFALSE 3930
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3728: LD_ADDR_OWVAR 42
3732: PUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3748: LD_ADDR_OWVAR 43
3752: PUSH
3753: LD_VAR 0 3
3757: PUSH
3758: LD_VAR 0 2
3762: ARRAY
3763: PUSH
3764: LD_INT 5
3766: ARRAY
3767: ST_TO_ADDR
// if bc_type = b_breastwork then
3768: LD_OWVAR 42
3772: PUSH
3773: LD_INT 31
3775: EQUAL
3776: IFFALSE 3849
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 3
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: PUSH
3794: LD_INT 2
3796: ARRAY
3797: PPUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_VAR 0 2
3807: ARRAY
3808: PUSH
3809: LD_INT 3
3811: ARRAY
3812: PPUSH
3813: LD_VAR 0 3
3817: PUSH
3818: LD_VAR 0 2
3822: ARRAY
3823: PUSH
3824: LD_INT 4
3826: ARRAY
3827: PPUSH
3828: CALL_OW 47
3832: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_VAR 0 4
3842: PPUSH
3843: CALL 8547 0 2
// end else
3847: GO 3904
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PUSH
3865: LD_INT 2
3867: ARRAY
3868: PPUSH
3869: LD_VAR 0 3
3873: PUSH
3874: LD_VAR 0 2
3878: ARRAY
3879: PUSH
3880: LD_INT 3
3882: ARRAY
3883: PPUSH
3884: LD_VAR 0 3
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: PUSH
3895: LD_INT 4
3897: ARRAY
3898: PPUSH
3899: CALL_OW 47
3903: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 2
3918: ARRAY
3919: PUSH
3920: LD_INT 7
3922: ARRAY
3923: PPUSH
3924: CALL_OW 234
// end ;
3928: GO 3725
3930: POP
3931: POP
// end ;
3932: LD_VAR 0 1
3936: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3937: LD_INT 0
3939: PPUSH
3940: PPUSH
// secondBaseTeam = [ ] ;
3941: LD_ADDR_EXP 77
3945: PUSH
3946: EMPTY
3947: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3948: LD_INT 226
3950: PPUSH
3951: LD_INT 109
3953: PPUSH
3954: LD_INT 6
3956: PPUSH
3957: CALL_OW 441
// uc_side = 6 ;
3961: LD_ADDR_OWVAR 20
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// uc_nation = 3 ;
3969: LD_ADDR_OWVAR 21
3973: PUSH
3974: LD_INT 3
3976: ST_TO_ADDR
// hc_name =  ;
3977: LD_ADDR_OWVAR 26
3981: PUSH
3982: LD_STRING 
3984: ST_TO_ADDR
// hc_gallery =  ;
3985: LD_ADDR_OWVAR 33
3989: PUSH
3990: LD_STRING 
3992: ST_TO_ADDR
// for i := 1 to 3 do
3993: LD_ADDR_VAR 0 2
3997: PUSH
3998: DOUBLE
3999: LD_INT 1
4001: DEC
4002: ST_TO_ADDR
4003: LD_INT 3
4005: PUSH
4006: FOR_TO
4007: IFFALSE 4060
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4009: LD_INT 0
4011: PPUSH
4012: LD_EXP 43
4016: PPUSH
4017: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4021: LD_ADDR_EXP 77
4025: PUSH
4026: LD_EXP 77
4030: PUSH
4031: CALL_OW 44
4035: ADD
4036: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4037: LD_EXP 77
4041: PUSH
4042: LD_VAR 0 2
4046: ARRAY
4047: PPUSH
4048: LD_INT 19
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 49
// end ;
4058: GO 4006
4060: POP
4061: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4062: LD_INT 0
4064: PPUSH
4065: LD_EXP 43
4069: PPUSH
4070: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4074: LD_ADDR_EXP 77
4078: PUSH
4079: LD_EXP 77
4083: PUSH
4084: CALL_OW 44
4088: ADD
4089: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4090: LD_EXP 77
4094: PUSH
4095: LD_INT 4
4097: ARRAY
4098: PPUSH
4099: LD_INT 19
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 43
4116: PPUSH
4117: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 77
4125: PUSH
4126: LD_EXP 77
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 77
4141: PUSH
4142: LD_INT 5
4144: ARRAY
4145: PPUSH
4146: LD_INT 19
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4156: LD_EXP 77
4160: PPUSH
4161: LD_INT 214
4163: PPUSH
4164: LD_INT 105
4166: PPUSH
4167: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4171: LD_EXP 77
4175: PPUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: PPUSH
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 222
4196: PPUSH
4197: LD_INT 115
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4207: LD_EXP 77
4211: PPUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PPUSH
4227: LD_INT 224
4229: PPUSH
4230: LD_INT 107
4232: PPUSH
4233: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4237: LD_EXP 77
4241: PPUSH
4242: LD_INT 25
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PPUSH
4257: LD_INT 228
4259: PPUSH
4260: LD_INT 110
4262: PPUSH
4263: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4267: LD_EXP 77
4271: PPUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 72
4286: PPUSH
4287: LD_INT 29
4289: PPUSH
4290: LD_INT 226
4292: PPUSH
4293: LD_INT 109
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4303: LD_EXP 77
4307: PPUSH
4308: LD_INT 25
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 72
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 216
4328: PPUSH
4329: LD_INT 114
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4339: LD_EXP 77
4343: PPUSH
4344: LD_INT 25
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: PPUSH
4359: LD_INT 31
4361: PPUSH
4362: LD_INT 215
4364: PPUSH
4365: LD_INT 103
4367: PPUSH
4368: LD_INT 3
4370: PPUSH
4371: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4375: LD_EXP 77
4379: PPUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 72
4394: PPUSH
4395: LD_INT 31
4397: PPUSH
4398: LD_INT 227
4400: PPUSH
4401: LD_INT 116
4403: PPUSH
4404: LD_INT 5
4406: PPUSH
4407: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4411: LD_EXP 77
4415: PPUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 2
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 72
4430: PPUSH
4431: LD_INT 208
4433: PPUSH
4434: LD_INT 106
4436: PPUSH
4437: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4441: LD_EXP 77
4445: PPUSH
4446: LD_INT 25
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PPUSH
4456: CALL_OW 72
4460: PPUSH
4461: LD_INT 209
4463: PPUSH
4464: LD_INT 105
4466: PPUSH
4467: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4471: LD_EXP 77
4475: PUSH
4476: LD_INT 5
4478: ARRAY
4479: PPUSH
4480: LD_INT 209
4482: PPUSH
4483: LD_INT 105
4485: PPUSH
4486: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4490: LD_EXP 77
4494: PUSH
4495: LD_INT 5
4497: ARRAY
4498: PPUSH
4499: LD_INT 208
4501: PPUSH
4502: LD_INT 106
4504: PPUSH
4505: CALL_OW 178
// end ;
4509: LD_VAR 0 1
4513: RET
// export function SpawnKirovSupport ; var i , un ; begin
4514: LD_INT 0
4516: PPUSH
4517: PPUSH
4518: PPUSH
// uc_side = 6 ;
4519: LD_ADDR_OWVAR 20
4523: PUSH
4524: LD_INT 6
4526: ST_TO_ADDR
// uc_nation = 3 ;
4527: LD_ADDR_OWVAR 21
4531: PUSH
4532: LD_INT 3
4534: ST_TO_ADDR
// hc_name =  ;
4535: LD_ADDR_OWVAR 26
4539: PUSH
4540: LD_STRING 
4542: ST_TO_ADDR
// hc_gallery :=  ;
4543: LD_ADDR_OWVAR 33
4547: PUSH
4548: LD_STRING 
4550: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_EXP 79
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4655
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: LD_INT 2
4588: PPUSH
4589: CALL_OW 12
4593: PPUSH
4594: CALL_OW 380
// un = CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4608: LD_ADDR_EXP 78
4612: PUSH
4613: LD_EXP 78
4617: PUSH
4618: LD_VAR 0 3
4622: ADD
4623: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_INT 19
4631: PPUSH
4632: LD_INT 0
4634: PPUSH
4635: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4639: LD_VAR 0 3
4643: PPUSH
4644: LD_EXP 66
4648: PPUSH
4649: CALL_OW 120
// end ;
4653: GO 4566
4655: POP
4656: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_EXP 80
4671: PUSH
4672: LD_INT 1
4674: ARRAY
4675: PUSH
4676: LD_INT 4
4678: PLUS
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4779
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: LD_INT 3
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: CALL_OW 380
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 19
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 49
// if i > kirovBunkersToOccupy then
4729: LD_VAR 0 2
4733: PUSH
4734: LD_EXP 72
4738: GREATER
4739: IFFALSE 4757
// ComEnterUnit ( un , ru2_bar2 ) else
4741: LD_VAR 0 3
4745: PPUSH
4746: LD_EXP 69
4750: PPUSH
4751: CALL_OW 120
4755: GO 4777
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_EXP 72
4766: PUSH
4767: LD_VAR 0 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 120
// end ;
4777: GO 4680
4779: POP
4780: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_EXP 80
4795: PUSH
4796: LD_INT 3
4798: ARRAY
4799: PUSH
4800: FOR_TO
4801: IFFALSE 4904
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4803: LD_INT 0
4805: PPUSH
4806: LD_INT 3
4808: PPUSH
4809: LD_INT 1
4811: PPUSH
4812: LD_INT 3
4814: PPUSH
4815: CALL_OW 12
4819: PPUSH
4820: CALL_OW 380
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 19
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 6
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 3
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: PUSH
4894: LD_INT 1
4896: ARRAY
4897: PPUSH
4898: CALL_OW 120
// end ;
4902: GO 4800
4904: POP
4905: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_EXP 80
4920: PUSH
4921: LD_INT 4
4923: ARRAY
4924: PUSH
4925: LD_INT 2
4927: PLUS
4928: PUSH
4929: FOR_TO
4930: IFFALSE 5036
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: LD_INT 3
4943: PPUSH
4944: CALL_OW 12
4948: PPUSH
4949: CALL_OW 380
// un = CreateHuman ;
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: CALL_OW 44
4962: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 19
4970: PPUSH
4971: LD_INT 0
4973: PPUSH
4974: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 18
4985: PPUSH
4986: LD_INT 22
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 21
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 30
5008: PUSH
5009: LD_INT 6
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 70
5025: PUSH
5026: LD_INT 1
5028: ARRAY
5029: PPUSH
5030: CALL_OW 120
// end ;
5034: GO 4929
5036: POP
5037: POP
// end ;
5038: LD_VAR 0 1
5042: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5043: LD_INT 0
5045: PPUSH
5046: PPUSH
5047: PPUSH
// survivorsArabianAttack = [ ] ;
5048: LD_ADDR_EXP 78
5052: PUSH
5053: EMPTY
5054: ST_TO_ADDR
// limit = 9 ;
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: LD_INT 9
5062: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5063: LD_ADDR_EXP 78
5067: PUSH
5068: LD_EXP 78
5072: PUSH
5073: LD_EXP 61
5077: ADD
5078: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5079: LD_EXP 52
5083: PPUSH
5084: CALL_OW 302
5088: PUSH
5089: LD_EXP 52
5093: PPUSH
5094: CALL_OW 255
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: AND
5103: IFFALSE 5135
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5105: LD_ADDR_EXP 78
5109: PUSH
5110: LD_EXP 78
5114: PUSH
5115: LD_EXP 52
5119: ADD
5120: ST_TO_ADDR
// limit = limit - 1 ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: MINUS
5134: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5135: LD_EXP 53
5139: PPUSH
5140: CALL_OW 302
5144: PUSH
5145: LD_EXP 53
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_INT 6
5157: EQUAL
5158: AND
5159: IFFALSE 5191
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5161: LD_ADDR_EXP 78
5165: PUSH
5166: LD_EXP 78
5170: PUSH
5171: LD_EXP 53
5175: ADD
5176: ST_TO_ADDR
// limit = limit - 1 ;
5177: LD_ADDR_VAR 0 2
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: MINUS
5190: ST_TO_ADDR
// end ; for unit in other_survivors do
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_EXP 55
5200: PUSH
5201: FOR_IN
5202: IFFALSE 5262
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5204: LD_VAR 0 3
5208: PPUSH
5209: CALL_OW 302
5213: PUSH
5214: LD_VAR 0 3
5218: PPUSH
5219: CALL_OW 255
5223: PUSH
5224: LD_INT 6
5226: EQUAL
5227: AND
5228: IFFALSE 5260
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5230: LD_ADDR_EXP 78
5234: PUSH
5235: LD_EXP 78
5239: PUSH
5240: LD_VAR 0 3
5244: ADD
5245: ST_TO_ADDR
// limit = limit - 1 ;
5246: LD_ADDR_VAR 0 2
5250: PUSH
5251: LD_VAR 0 2
5255: PUSH
5256: LD_INT 1
5258: MINUS
5259: ST_TO_ADDR
// end ; end ;
5260: GO 5201
5262: POP
5263: POP
// for unit in otherBeriaUnits do
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_EXP 57
5273: PUSH
5274: FOR_IN
5275: IFFALSE 5335
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5277: LD_VAR 0 3
5281: PPUSH
5282: CALL_OW 302
5286: PUSH
5287: LD_VAR 0 3
5291: PPUSH
5292: CALL_OW 255
5296: PUSH
5297: LD_INT 6
5299: EQUAL
5300: AND
5301: IFFALSE 5333
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5303: LD_ADDR_EXP 78
5307: PUSH
5308: LD_EXP 78
5312: PUSH
5313: LD_VAR 0 3
5317: ADD
5318: ST_TO_ADDR
// limit = limit - 1 ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: MINUS
5332: ST_TO_ADDR
// end ; end ;
5333: GO 5274
5335: POP
5336: POP
// if limit > 0 then
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 0
5344: GREATER
5345: IFFALSE 5357
// survivorsToSpawn = limit ;
5347: LD_ADDR_EXP 79
5351: PUSH
5352: LD_VAR 0 2
5356: ST_TO_ADDR
// end ;
5357: LD_VAR 0 1
5361: RET
// export function PrepareScholtze ; begin
5362: LD_INT 0
5364: PPUSH
// uc_side = 8 ;
5365: LD_ADDR_OWVAR 20
5369: PUSH
5370: LD_INT 8
5372: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5373: LD_ADDR_EXP 54
5377: PUSH
5378: LD_STRING Scholtze
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL 6913 0 2
5388: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5389: LD_EXP 54
5393: PPUSH
5394: LD_INT 30
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 49
// end ; end_of_file
5404: LD_VAR 0 1
5408: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5409: LD_INT 0
5411: PPUSH
// amSupportTroops = [ ] ;
5412: LD_ADDR_EXP 83
5416: PUSH
5417: EMPTY
5418: ST_TO_ADDR
// PrepareOmicronBase ;
5419: CALL 5428 0 0
// end ;
5423: LD_VAR 0 1
5427: RET
// function PrepareOmicronBase ; var base ; begin
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5432: LD_ADDR_EXP 85
5436: PUSH
5437: LD_INT 64
5439: PPUSH
5440: LD_INT 13
5442: PPUSH
5443: LD_STRING omikron
5445: PPUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: PPUSH
5466: LD_INT 3000
5468: PUSH
5469: LD_INT 3000
5471: PUSH
5472: LD_INT 0
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: LD_INT 7
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 39218 0 6
5502: ST_TO_ADDR
// case Difficulty of 2 :
5503: LD_OWVAR 67
5507: PUSH
5508: LD_INT 2
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5532
5516: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5517: LD_INT 51
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// end ; 3 :
5530: GO 5570
5532: LD_INT 3
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5569
5540: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5541: LD_INT 49
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5554: LD_INT 51
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 322
// end ; end ;
5567: GO 5570
5569: POP
// end ;
5570: LD_VAR 0 1
5574: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// amIntroUnits = [ ] ;
5581: LD_ADDR_EXP 82
5585: PUSH
5586: EMPTY
5587: ST_TO_ADDR
// uc_side = 1 ;
5588: LD_ADDR_OWVAR 20
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// uc_nation = nation_american ;
5596: LD_ADDR_OWVAR 21
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5604: LD_ADDR_OWVAR 37
5608: PUSH
5609: LD_INT 3
5611: ST_TO_ADDR
// vc_control = control_manual ;
5612: LD_ADDR_OWVAR 38
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// vc_engine = engine_combustion ;
5620: LD_ADDR_OWVAR 39
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5628: LD_ADDR_OWVAR 40
5632: PUSH
5633: LD_INT 5
5635: ST_TO_ADDR
// veh = CreateVehicle ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: CALL_OW 45
5645: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5646: LD_VAR 0 3
5650: PPUSH
5651: LD_INT 4
5653: PPUSH
5654: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5658: LD_ADDR_EXP 82
5662: PUSH
5663: LD_EXP 82
5667: PUSH
5668: LD_VAR 0 3
5672: ADD
5673: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5674: LD_VAR 0 3
5678: PPUSH
5679: LD_INT 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL_OW 49
// for i := 1 to 5 do
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: DOUBLE
5695: LD_INT 1
5697: DEC
5698: ST_TO_ADDR
5699: LD_INT 5
5701: PUSH
5702: FOR_TO
5703: IFFALSE 5800
// begin hc_name :=  ;
5705: LD_ADDR_OWVAR 26
5709: PUSH
5710: LD_STRING 
5712: ST_TO_ADDR
// hc_gallery :=  ;
5713: LD_ADDR_OWVAR 33
5717: PUSH
5718: LD_STRING 
5720: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5721: LD_INT 0
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 381
// human = CreateHuman ;
5731: LD_ADDR_VAR 0 4
5735: PUSH
5736: CALL_OW 44
5740: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5741: LD_ADDR_EXP 82
5745: PUSH
5746: LD_EXP 82
5750: PUSH
5751: LD_VAR 0 4
5755: ADD
5756: ST_TO_ADDR
// if i < 5 then
5757: LD_VAR 0 2
5761: PUSH
5762: LD_INT 5
5764: LESS
5765: IFFALSE 5784
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_INT 5
5774: PPUSH
5775: LD_INT 0
5777: PPUSH
5778: CALL_OW 49
5782: GO 5798
// begin PlaceHumanInUnit ( human , veh ) ;
5784: LD_VAR 0 4
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: CALL_OW 52
// end ; end ;
5798: GO 5702
5800: POP
5801: POP
// end ;
5802: LD_VAR 0 1
5806: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
// uc_side := 1 ;
5814: LD_ADDR_OWVAR 20
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// uc_nation := 1 ;
5822: LD_ADDR_OWVAR 21
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// hc_name :=  ;
5830: LD_ADDR_OWVAR 26
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// hc_gallery :=  ;
5838: LD_ADDR_OWVAR 33
5842: PUSH
5843: LD_STRING 
5845: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5846: LD_ADDR_VAR 0 6
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_VAR 0 1
5860: PUSH
5861: FOR_TO
5862: IFFALSE 5921
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_EXP 43
5871: PPUSH
5872: CALL_OW 381
// un = CreateHuman ;
5876: LD_ADDR_VAR 0 7
5880: PUSH
5881: CALL_OW 44
5885: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5886: LD_ADDR_EXP 83
5890: PUSH
5891: LD_EXP 83
5895: PUSH
5896: LD_VAR 0 7
5900: ADD
5901: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5902: LD_VAR 0 7
5906: PPUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 0
5914: PPUSH
5915: CALL_OW 49
// end ;
5919: GO 5861
5921: POP
5922: POP
// for i := 1 to scientistsAmount do
5923: LD_ADDR_VAR 0 6
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_VAR 0 2
5937: PUSH
5938: FOR_TO
5939: IFFALSE 5998
// begin PrepareScientist ( false , enemySkillLevel ) ;
5941: LD_INT 0
5943: PPUSH
5944: LD_EXP 43
5948: PPUSH
5949: CALL_OW 384
// un = CreateHuman ;
5953: LD_ADDR_VAR 0 7
5957: PUSH
5958: CALL_OW 44
5962: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5963: LD_ADDR_EXP 83
5967: PUSH
5968: LD_EXP 83
5972: PUSH
5973: LD_VAR 0 7
5977: ADD
5978: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5979: LD_VAR 0 7
5983: PPUSH
5984: LD_VAR 0 4
5988: PPUSH
5989: LD_INT 0
5991: PPUSH
5992: CALL_OW 49
// end ;
5996: GO 5938
5998: POP
5999: POP
// for i := 1 to vehiclesAmount do
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: DOUBLE
6006: LD_INT 1
6008: DEC
6009: ST_TO_ADDR
6010: LD_VAR 0 3
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6182
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6018: LD_ADDR_OWVAR 40
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 4
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 12
6047: ARRAY
6048: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6049: LD_ADDR_OWVAR 37
6053: PUSH
6054: LD_INT 3
6056: ST_TO_ADDR
// vc_control = control_manual ;
6057: LD_ADDR_OWVAR 38
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// vc_engine = engine_combustion ;
6065: LD_ADDR_OWVAR 39
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// veh = CreateVehicle ;
6073: LD_ADDR_VAR 0 8
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6083: LD_ADDR_EXP 83
6087: PUSH
6088: LD_EXP 83
6092: PUSH
6093: LD_VAR 0 8
6097: ADD
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6099: LD_VAR 0 8
6103: PPUSH
6104: LD_VAR 0 4
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6116: LD_INT 0
6118: PPUSH
6119: LD_EXP 43
6123: PPUSH
6124: CALL_OW 383
// un = CreateHuman ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: CALL_OW 44
6137: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6138: LD_ADDR_EXP 83
6142: PUSH
6143: LD_EXP 83
6147: PUSH
6148: LD_VAR 0 7
6152: ADD
6153: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6154: LD_VAR 0 7
6158: PPUSH
6159: LD_VAR 0 8
6163: PPUSH
6164: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6168: LD_VAR 0 8
6172: PPUSH
6173: LD_INT 100
6175: PPUSH
6176: CALL_OW 240
// end ;
6180: GO 6015
6182: POP
6183: POP
// case area of NorthAmericanSpawnArea :
6184: LD_VAR 0 4
6188: PUSH
6189: LD_INT 7
6191: DOUBLE
6192: EQUAL
6193: IFTRUE 6197
6195: GO 6208
6197: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6198: LD_ADDR_VAR 0 9
6202: PUSH
6203: LD_INT 10
6205: ST_TO_ADDR
6206: GO 6247
6208: LD_INT 9
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6217: LD_ADDR_VAR 0 9
6221: PUSH
6222: LD_INT 11
6224: ST_TO_ADDR
6225: GO 6247
6227: LD_INT 8
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6246
6235: POP
// road = SouthRoadArea2 ; end ;
6236: LD_ADDR_VAR 0 9
6240: PUSH
6241: LD_INT 12
6243: ST_TO_ADDR
6244: GO 6247
6246: POP
// MoveToBase ( amSupportTroops , road ) ;
6247: LD_EXP 83
6251: PPUSH
6252: LD_VAR 0 9
6256: PPUSH
6257: CALL 18921 0 2
// end ;
6261: LD_VAR 0 5
6265: RET
// export function PrepareAmericanPatrol ; var un ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// amPatrol = [ ] ;
6270: LD_ADDR_EXP 84
6274: PUSH
6275: EMPTY
6276: ST_TO_ADDR
// uc_side = 1 ;
6277: LD_ADDR_OWVAR 20
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// uc_nation = 1 ;
6285: LD_ADDR_OWVAR 21
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6293: LD_ADDR_VAR 0 2
6297: PUSH
6298: LD_STRING Campell
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL 6913 0 2
6308: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6309: LD_ADDR_EXP 84
6313: PUSH
6314: LD_EXP 84
6318: PUSH
6319: LD_VAR 0 2
6323: ADD
6324: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 14
6332: PPUSH
6333: LD_INT 0
6335: PPUSH
6336: CALL_OW 49
// SetClass ( un , 1 ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6352: LD_INT 1
6354: PPUSH
6355: LD_EXP 43
6359: PPUSH
6360: CALL_OW 381
// un = CreateHuman ;
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6374: LD_ADDR_EXP 84
6378: PUSH
6379: LD_EXP 84
6383: PUSH
6384: LD_VAR 0 2
6388: ADD
6389: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6390: LD_VAR 0 2
6394: PPUSH
6395: LD_INT 14
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6405: LD_EXP 84
6409: PPUSH
6410: LD_EXP 54
6414: PPUSH
6415: CALL_OW 115
// end ; end_of_file
6419: LD_VAR 0 1
6423: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
6428: PPUSH
6429: PPUSH
// northGroup = [ ] ;
6430: LD_ADDR_EXP 86
6434: PUSH
6435: EMPTY
6436: ST_TO_ADDR
// southGroup = [ ] ;
6437: LD_ADDR_EXP 87
6441: PUSH
6442: EMPTY
6443: ST_TO_ADDR
// uc_side = 2 ;
6444: LD_ADDR_OWVAR 20
6448: PUSH
6449: LD_INT 2
6451: ST_TO_ADDR
// uc_nation = 2 ;
6452: LD_ADDR_OWVAR 21
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// hc_name :=  ;
6460: LD_ADDR_OWVAR 26
6464: PUSH
6465: LD_STRING 
6467: ST_TO_ADDR
// hc_gallery :=  ;
6468: LD_ADDR_OWVAR 33
6472: PUSH
6473: LD_STRING 
6475: ST_TO_ADDR
// for i := 1 to 10 do
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 10
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6604
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6492: LD_INT 13
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 1
6500: PPUSH
6501: LD_INT 26
6503: PPUSH
6504: LD_INT 100
6506: PPUSH
6507: CALL 35809 0 5
// veh = CreateVehicle ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: CALL_OW 45
6520: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6521: LD_ADDR_EXP 87
6525: PUSH
6526: LD_EXP 87
6530: PUSH
6531: LD_VAR 0 4
6535: ADD
6536: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_INT 23
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6552: LD_INT 0
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 383
// un = CreateHuman ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: CALL_OW 44
6571: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6572: LD_ADDR_EXP 87
6576: PUSH
6577: LD_EXP 87
6581: PUSH
6582: LD_VAR 0 3
6586: ADD
6587: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6588: LD_VAR 0 3
6592: PPUSH
6593: LD_VAR 0 4
6597: PPUSH
6598: CALL_OW 52
// end ;
6602: GO 6489
6604: POP
6605: POP
// for i := 1 to 20 do
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 20
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6675
// begin PrepareSoldier ( false , 8 ) ;
6622: LD_INT 0
6624: PPUSH
6625: LD_INT 8
6627: PPUSH
6628: CALL_OW 381
// un = CreateHuman ;
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: CALL_OW 44
6641: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6642: LD_ADDR_EXP 87
6646: PUSH
6647: LD_EXP 87
6651: PUSH
6652: LD_VAR 0 3
6656: ADD
6657: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6658: LD_VAR 0 3
6662: PPUSH
6663: LD_INT 23
6665: PPUSH
6666: LD_INT 0
6668: PPUSH
6669: CALL_OW 49
// end ;
6673: GO 6619
6675: POP
6676: POP
// for i := 1 to 20 do
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: DOUBLE
6683: LD_INT 1
6685: DEC
6686: ST_TO_ADDR
6687: LD_INT 20
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6749
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 8
6698: PPUSH
6699: LD_INT 8
6701: PPUSH
6702: CALL_OW 380
// un = CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6716: LD_ADDR_EXP 87
6720: PUSH
6721: LD_EXP 87
6725: PUSH
6726: LD_VAR 0 3
6730: ADD
6731: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_INT 23
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 49
// end ;
6747: GO 6690
6749: POP
6750: POP
// for i := 1 to 10 do
6751: LD_ADDR_VAR 0 2
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_INT 10
6763: PUSH
6764: FOR_TO
6765: IFFALSE 6906
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6767: LD_INT 13
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 25
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 26
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_INT 4
6799: PPUSH
6800: CALL_OW 12
6804: ARRAY
6805: PPUSH
6806: LD_INT 100
6808: PPUSH
6809: CALL 35809 0 5
// veh = CreateVehicle ;
6813: LD_ADDR_VAR 0 4
6817: PUSH
6818: CALL_OW 45
6822: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6823: LD_ADDR_EXP 86
6827: PUSH
6828: LD_EXP 86
6832: PUSH
6833: LD_VAR 0 4
6837: ADD
6838: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6839: LD_VAR 0 4
6843: PPUSH
6844: LD_INT 22
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6854: LD_INT 0
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 383
// un = CreateHuman ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6874: LD_ADDR_EXP 86
6878: PUSH
6879: LD_EXP 86
6883: PUSH
6884: LD_VAR 0 3
6888: ADD
6889: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_VAR 0 4
6899: PPUSH
6900: CALL_OW 52
// end ;
6904: GO 6764
6906: POP
6907: POP
// end ; end_of_file
6908: LD_VAR 0 1
6912: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// if exist_mode then
6917: LD_VAR 0 2
6921: IFFALSE 6946
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6923: LD_ADDR_VAR 0 4
6927: PUSH
6928: LD_EXP 36
6932: PUSH
6933: LD_VAR 0 1
6937: STR
6938: PPUSH
6939: CALL_OW 34
6943: ST_TO_ADDR
6944: GO 6961
// unit := NewCharacter ( ident ) ;
6946: LD_ADDR_VAR 0 4
6950: PUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 25
6960: ST_TO_ADDR
// result := unit ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_VAR 0 4
6970: ST_TO_ADDR
// end ;
6971: LD_VAR 0 3
6975: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
// units = characters ;
6982: LD_ADDR_VAR 0 9
6986: PUSH
6987: LD_VAR 0 1
6991: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6992: LD_ADDR_VAR 0 9
6996: PUSH
6997: LD_VAR 0 9
7001: PUSH
7002: LD_EXP 48
7006: PUSH
7007: LD_EXP 49
7011: PUSH
7012: LD_EXP 50
7016: PUSH
7017: LD_EXP 51
7021: PUSH
7022: LD_EXP 52
7026: PUSH
7027: LD_EXP 53
7031: PUSH
7032: LD_EXP 54
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: DIFF
7046: ST_TO_ADDR
// if not units and not canTalkHero then
7047: LD_VAR 0 9
7051: NOT
7052: PUSH
7053: LD_VAR 0 5
7057: NOT
7058: AND
7059: IFFALSE 7063
// exit ;
7061: GO 7236
// if not units then
7063: LD_VAR 0 9
7067: NOT
7068: IFFALSE 7089
// units = characters diff [ Burlak ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_VAR 0 1
7079: PUSH
7080: LD_EXP 48
7084: PUSH
7085: EMPTY
7086: LIST
7087: DIFF
7088: ST_TO_ADDR
// if not units and canTalkHero then
7089: LD_VAR 0 9
7093: NOT
7094: PUSH
7095: LD_VAR 0 5
7099: AND
7100: IFFALSE 7104
// exit ;
7102: GO 7236
// speaker := units [ rand ( 1 , units ) ] ;
7104: LD_ADDR_VAR 0 8
7108: PUSH
7109: LD_VAR 0 9
7113: PUSH
7114: LD_INT 1
7116: PPUSH
7117: LD_VAR 0 9
7121: PPUSH
7122: CALL_OW 12
7126: ARRAY
7127: ST_TO_ADDR
// if radio then
7128: LD_VAR 0 4
7132: IFFALSE 7181
// begin if GetSex ( speaker ) = sex_male then
7134: LD_VAR 0 8
7138: PPUSH
7139: CALL_OW 258
7143: PUSH
7144: LD_INT 1
7146: EQUAL
7147: IFFALSE 7165
// SayRadio ( speaker , dialogMID ) else
7149: LD_VAR 0 8
7153: PPUSH
7154: LD_VAR 0 2
7158: PPUSH
7159: CALL_OW 94
7163: GO 7179
// SayRadio ( speaker , dialogFID ) ;
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 94
// end else
7179: GO 7226
// begin if GetSex ( speaker ) = sex_male then
7181: LD_VAR 0 8
7185: PPUSH
7186: CALL_OW 258
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7212
// Say ( speaker , dialogMID ) else
7196: LD_VAR 0 8
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 88
7210: GO 7226
// Say ( speaker , dialogFID ) ;
7212: LD_VAR 0 8
7216: PPUSH
7217: LD_VAR 0 3
7221: PPUSH
7222: CALL_OW 88
// end ; result := speaker ;
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 8
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 6
7240: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7241: LD_INT 0
7243: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 255
7253: PUSH
7254: LD_VAR 0 3
7258: EQUAL
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7292
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_EXP 35
7281: PUSH
7282: LD_VAR 0 2
7286: STR
7287: PPUSH
7288: CALL_OW 38
// end ;
7292: LD_VAR 0 4
7296: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
7301: PPUSH
// resultCharactersToSave = [ ] ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: EMPTY
7308: ST_TO_ADDR
// for unit in characters do
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 1
7318: PUSH
7319: FOR_IN
7320: IFFALSE 7368
// if GetSide ( unit ) = side and IsOK ( unit ) then
7322: LD_VAR 0 5
7326: PPUSH
7327: CALL_OW 255
7331: PUSH
7332: LD_VAR 0 3
7336: EQUAL
7337: PUSH
7338: LD_VAR 0 5
7342: PPUSH
7343: CALL_OW 302
7347: AND
7348: IFFALSE 7366
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_VAR 0 6
7359: PUSH
7360: LD_VAR 0 5
7364: ADD
7365: ST_TO_ADDR
7366: GO 7319
7368: POP
7369: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7370: LD_VAR 0 6
7374: PPUSH
7375: LD_EXP 35
7379: PUSH
7380: LD_VAR 0 2
7384: STR
7385: PPUSH
7386: CALL_OW 38
// end ;
7390: LD_VAR 0 4
7394: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
// charsToChoose = otherKirovUnits ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_EXP 64
7410: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7411: LD_ADDR_VAR 0 4
7415: PUSH
7416: LD_VAR 0 4
7420: PUSH
7421: LD_EXP 57
7425: ADD
7426: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7427: LD_ADDR_VAR 0 4
7431: PUSH
7432: LD_VAR 0 4
7436: PUSH
7437: LD_EXP 55
7441: ADD
7442: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7443: LD_ADDR_VAR 0 4
7447: PUSH
7448: LD_VAR 0 4
7452: PUSH
7453: LD_EXP 52
7457: ADD
7458: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 4
7468: PUSH
7469: LD_EXP 53
7473: ADD
7474: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7475: LD_ADDR_VAR 0 5
7479: PUSH
7480: LD_STRING text
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT -5
7495: PUSH
7496: LD_EXP 48
7500: PUSH
7501: LD_EXP 49
7505: PUSH
7506: LD_EXP 51
7510: PUSH
7511: LD_EXP 50
7515: PUSH
7516: LD_INT -6
7518: PUSH
7519: LD_INT -2
7521: PUSH
7522: LD_INT -3
7524: PUSH
7525: LD_INT -5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_VAR 0 4
7543: ADD
7544: PUSH
7545: LD_INT -6
7547: PUSH
7548: LD_INT -4
7550: PUSH
7551: LD_EXP 60
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: ADD
7561: PPUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 42
7598: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7599: LD_VAR 0 4
7603: PPUSH
7604: LD_INT 6
7606: PPUSH
7607: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_INT 3
7618: PPUSH
7619: CALL_OW 235
// SetSurvivorsArabianAttack ;
7623: CALL 5043 0 0
// MoveKurinUnitsToBuildings ;
7627: CALL 9165 0 0
// end ;
7631: LD_VAR 0 2
7635: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 22
7652: PUSH
7653: LD_VAR 0 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 21
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 30
7674: PUSH
7675: LD_VAR 0 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 70
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7728
// begin if UnitsInside ( building ) < 6 then
7697: LD_VAR 0 5
7701: PPUSH
7702: CALL_OW 313
7706: PUSH
7707: LD_INT 6
7709: LESS
7710: IFFALSE 7726
// begin result = building ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 5
7721: ST_TO_ADDR
// exit ;
7722: POP
7723: POP
7724: GO 7738
// end ; end ;
7726: GO 7694
7728: POP
7729: POP
// result = 0 ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// end ;
7738: LD_VAR 0 4
7742: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 34
7756: PUSH
7757: LD_INT 71
7759: PUSH
7760: LD_INT 70
7762: PUSH
7763: LD_INT 69
7765: PUSH
7766: LD_INT 39
7768: PUSH
7769: LD_INT 31
7771: PUSH
7772: LD_INT 14
7774: PUSH
7775: LD_INT 10
7777: PUSH
7778: LD_INT 40
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// resultWeapons = [ ] ;
7792: LD_ADDR_VAR 0 5
7796: PUSH
7797: EMPTY
7798: ST_TO_ADDR
// for i := 1 to weaponTechs do
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 6
7813: PUSH
7814: FOR_TO
7815: IFFALSE 8002
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7817: LD_VAR 0 6
7821: PUSH
7822: LD_VAR 0 4
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 482
7837: PUSH
7838: LD_VAR 0 6
7842: PUSH
7843: LD_VAR 0 4
7847: ARRAY
7848: PPUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 321
7858: PUSH
7859: LD_INT 2
7861: EQUAL
7862: AND
7863: IFFALSE 8000
// case nation of nation_american :
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 1
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7913
7878: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_VAR 0 6
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PPUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL 8019 0 2
7909: ADD
7910: ST_TO_ADDR
7911: GO 8000
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7956
7921: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7922: LD_ADDR_VAR 0 5
7926: PUSH
7927: LD_VAR 0 5
7931: PUSH
7932: LD_VAR 0 6
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PPUSH
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL 8019 0 2
7952: ADD
7953: ST_TO_ADDR
7954: GO 8000
7956: LD_INT 3
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7999
7964: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_VAR 0 5
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: LD_VAR 0 4
7984: ARRAY
7985: PPUSH
7986: LD_VAR 0 2
7990: PPUSH
7991: CALL 8019 0 2
7995: ADD
7996: ST_TO_ADDR
7997: GO 8000
7999: POP
// end ;
8000: GO 7814
8002: POP
8003: POP
// result = resultWeapons ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 5
8013: ST_TO_ADDR
// end ;
8014: LD_VAR 0 3
8018: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8019: LD_INT 0
8021: PPUSH
// case tech of tech_AdvMet :
8022: LD_VAR 0 1
8026: PUSH
8027: LD_INT 34
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8063
8035: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8036: LD_ADDR_VAR 0 3
8040: PUSH
8041: LD_INT 6
8043: PUSH
8044: LD_STRING 
8046: PUSH
8047: LD_INT 46
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_VAR 0 2
8059: ARRAY
8060: ST_TO_ADDR
8061: GO 8352
8063: LD_INT 71
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8099
8071: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_STRING 
8079: PUSH
8080: LD_STRING 
8082: PUSH
8083: LD_INT 47
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_VAR 0 2
8095: ARRAY
8096: ST_TO_ADDR
8097: GO 8352
8099: LD_INT 70
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8135
8107: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_STRING 
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: LD_STRING 
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_VAR 0 2
8131: ARRAY
8132: ST_TO_ADDR
8133: GO 8352
8135: LD_INT 69
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8171
8143: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 43
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_VAR 0 2
8167: ARRAY
8168: ST_TO_ADDR
8169: GO 8352
8171: LD_INT 39
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8207
8179: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_INT 5
8187: PUSH
8188: LD_INT 27
8190: PUSH
8191: LD_INT 44
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: ST_TO_ADDR
8205: GO 8352
8207: LD_INT 31
8209: DOUBLE
8210: EQUAL
8211: IFTRUE 8215
8213: GO 8243
8215: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_STRING 
8223: PUSH
8224: LD_STRING 
8226: PUSH
8227: LD_INT 49
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_VAR 0 2
8239: ARRAY
8240: ST_TO_ADDR
8241: GO 8352
8243: LD_INT 14
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8279
8251: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: LD_STRING 
8262: PUSH
8263: LD_STRING 
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: ST_TO_ADDR
8277: GO 8352
8279: LD_INT 10
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8315
8287: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 9
8295: PUSH
8296: LD_STRING 
8298: PUSH
8299: LD_STRING 
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: ST_TO_ADDR
8313: GO 8352
8315: LD_INT 40
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8351
8323: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: LD_INT 7
8331: PUSH
8332: LD_INT 28
8334: PUSH
8335: LD_INT 45
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_VAR 0 2
8347: ARRAY
8348: ST_TO_ADDR
8349: GO 8352
8351: POP
// end ;
8352: LD_VAR 0 3
8356: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8357: LD_INT 0
8359: PPUSH
8360: PPUSH
// for veh in units do
8361: LD_ADDR_VAR 0 4
8365: PUSH
8366: LD_VAR 0 1
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8450
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8374: LD_VAR 0 4
8378: PPUSH
8379: CALL_OW 247
8383: PUSH
8384: LD_INT 2
8386: EQUAL
8387: PUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 261
8397: PUSH
8398: LD_INT 100
8400: LESS
8401: AND
8402: IFFALSE 8448
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8404: LD_VAR 0 4
8408: PPUSH
8409: LD_STRING X
8411: PUSH
8412: LD_INT 0
8414: PUSH
8415: LD_INT 0
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: LD_INT 0
8425: PUSH
8426: LD_INT 0
8428: PUSH
8429: LD_INT 0
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: PPUSH
8444: CALL_OW 446
// end ;
8448: GO 8371
8450: POP
8451: POP
// end ;
8452: LD_VAR 0 3
8456: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 2
8470: PPUSH
8471: CALL_OW 254
8475: PUSH
8476: LD_INT 3
8478: MINUS
8479: ST_TO_ADDR
// if dir < 0 then
8480: LD_VAR 0 4
8484: PUSH
8485: LD_INT 0
8487: LESS
8488: IFFALSE 8504
// dir := 6 + dir ;
8490: LD_ADDR_VAR 0 4
8494: PUSH
8495: LD_INT 6
8497: PUSH
8498: LD_VAR 0 4
8502: PLUS
8503: ST_TO_ADDR
// SetDir ( un , dir ) ;
8504: LD_VAR 0 1
8508: PPUSH
8509: LD_VAR 0 4
8513: PPUSH
8514: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PPUSH
8528: CALL_OW 52
// result = un ;
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_VAR 0 1
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 3
8546: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
// uc_side := GetSide ( b ) ;
8552: LD_ADDR_OWVAR 20
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 255
8566: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8567: LD_ADDR_OWVAR 21
8571: PUSH
8572: LD_VAR 0 2
8576: PPUSH
8577: CALL_OW 248
8581: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8582: LD_INT 0
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 1
8592: PPUSH
8593: CALL_OW 380
// un = CreateHuman ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: CALL_OW 44
8606: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8607: LD_ADDR_VAR 0 5
8611: PUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 254
8621: PUSH
8622: LD_INT 3
8624: MINUS
8625: ST_TO_ADDR
// if dir < 0 then
8626: LD_VAR 0 5
8630: PUSH
8631: LD_INT 0
8633: LESS
8634: IFFALSE 8650
// dir := 6 + dir ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: LD_VAR 0 5
8648: PLUS
8649: ST_TO_ADDR
// SetDir ( un , dir ) ;
8650: LD_VAR 0 4
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8664: LD_VAR 0 4
8668: PPUSH
8669: LD_VAR 0 2
8673: PPUSH
8674: CALL_OW 52
// result = un ;
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_VAR 0 4
8687: ST_TO_ADDR
// end ;
8688: LD_VAR 0 3
8692: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8693: LD_INT 0
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
8699: PPUSH
// for building in buildings do
8700: LD_ADDR_VAR 0 5
8704: PUSH
8705: LD_VAR 0 2
8709: PUSH
8710: FOR_IN
8711: IFFALSE 8803
// begin x = GetX ( building ) ;
8713: LD_ADDR_VAR 0 6
8717: PUSH
8718: LD_VAR 0 5
8722: PPUSH
8723: CALL_OW 250
8727: ST_TO_ADDR
// y = GetY ( building ) ;
8728: LD_ADDR_VAR 0 7
8732: PUSH
8733: LD_VAR 0 5
8737: PPUSH
8738: CALL_OW 251
8742: ST_TO_ADDR
// dir = GetDir ( building ) ;
8743: LD_ADDR_VAR 0 8
8747: PUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 254
8757: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_VAR 0 5
8767: PPUSH
8768: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_VAR 0 6
8786: PPUSH
8787: LD_VAR 0 7
8791: PPUSH
8792: LD_VAR 0 8
8796: PPUSH
8797: CALL_OW 205
// end ;
8801: GO 8710
8803: POP
8804: POP
// end ;
8805: LD_VAR 0 4
8809: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
8817: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8818: LD_ADDR_VAR 0 8
8822: PUSH
8823: LD_INT 48
8825: PUSH
8826: LD_INT 49
8828: PUSH
8829: LD_INT 50
8831: PUSH
8832: LD_INT 20
8834: PUSH
8835: LD_INT 1
8837: PUSH
8838: LD_INT 51
8840: PUSH
8841: LD_INT 52
8843: PUSH
8844: LD_INT 69
8846: PUSH
8847: LD_INT 39
8849: PUSH
8850: LD_INT 34
8852: PUSH
8853: LD_INT 40
8855: PUSH
8856: LD_INT 53
8858: PUSH
8859: LD_INT 71
8861: PUSH
8862: LD_INT 57
8864: PUSH
8865: LD_INT 58
8867: PUSH
8868: LD_INT 44
8870: PUSH
8871: LD_INT 32
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 33
8882: PUSH
8883: LD_INT 59
8885: PUSH
8886: LD_INT 54
8888: PUSH
8889: LD_INT 55
8891: PUSH
8892: LD_INT 56
8894: PUSH
8895: LD_INT 63
8897: PUSH
8898: LD_INT 64
8900: PUSH
8901: LD_INT 65
8903: PUSH
8904: LD_INT 30
8906: PUSH
8907: LD_INT 31
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_INT 1
8966: PPUSH
8967: CALL 31048 0 3
8971: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_VAR 0 8
8986: PUSH
8987: FOR_TO
8988: IFFALSE 9064
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 5
8999: ARRAY
9000: PPUSH
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 321
9010: PUSH
9011: LD_INT 1
9013: EQUAL
9014: PUSH
9015: LD_VAR 0 8
9019: PUSH
9020: LD_VAR 0 5
9024: ARRAY
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: CALL_OW 482
9035: PUSH
9036: LD_INT 1
9038: EQUAL
9039: AND
9040: IFFALSE 9062
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9042: LD_VAR 0 2
9046: PPUSH
9047: LD_VAR 0 8
9051: PUSH
9052: LD_VAR 0 5
9056: ARRAY
9057: PPUSH
9058: CALL_OW 184
9062: GO 8987
9064: POP
9065: POP
// for i = 1 to am_tech_list do
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_VAR 0 9
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9158
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9084: LD_VAR 0 9
9088: PUSH
9089: LD_VAR 0 5
9093: ARRAY
9094: PPUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: CALL_OW 321
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: PUSH
9109: LD_VAR 0 9
9113: PUSH
9114: LD_VAR 0 5
9118: ARRAY
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: CALL_OW 482
9129: PUSH
9130: LD_INT 1
9132: EQUAL
9133: AND
9134: IFFALSE 9156
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9136: LD_VAR 0 2
9140: PPUSH
9141: LD_VAR 0 9
9145: PUSH
9146: LD_VAR 0 5
9150: ARRAY
9151: PPUSH
9152: CALL_OW 184
9156: GO 9081
9158: POP
9159: POP
// end ;
9160: LD_VAR 0 4
9164: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 30
9203: PUSH
9204: LD_INT 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 69
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 22
9232: PUSH
9233: LD_INT 6
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 21
9242: PUSH
9243: LD_INT 3
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 30
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 69
9269: PUSH
9270: LD_INT 1
9272: ARRAY
9273: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_VAR 0 9
9283: PUSH
9284: LD_EXP 60
9288: ADD
9289: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9290: LD_ADDR_VAR 0 9
9294: PUSH
9295: LD_VAR 0 9
9299: PUSH
9300: LD_EXP 78
9304: ADD
9305: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9306: LD_ADDR_VAR 0 9
9310: PUSH
9311: LD_VAR 0 9
9315: PUSH
9316: LD_EXP 70
9320: ADD
9321: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9322: LD_ADDR_VAR 0 8
9326: PUSH
9327: LD_INT 18
9329: PPUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 6
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 21
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 70
9372: PUSH
9373: LD_VAR 0 9
9377: DIFF
9378: ST_TO_ADDR
// if not canTakeUnits then
9379: LD_VAR 0 8
9383: NOT
9384: IFFALSE 9417
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9386: LD_ADDR_EXP 80
9390: PUSH
9391: LD_EXP 80
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: LD_EXP 80
9403: PUSH
9404: LD_INT 3
9406: ARRAY
9407: PUSH
9408: LD_INT 2
9410: PLUS
9411: PPUSH
9412: CALL_OW 1
9416: ST_TO_ADDR
// if canTakeUnits > 2 then
9417: LD_VAR 0 8
9421: PUSH
9422: LD_INT 2
9424: GREATER
9425: IFFALSE 9495
// begin for i := 1 to rand ( 1 , 2 ) do
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: DOUBLE
9433: LD_INT 1
9435: DEC
9436: ST_TO_ADDR
9437: LD_INT 1
9439: PPUSH
9440: LD_INT 2
9442: PPUSH
9443: CALL_OW 12
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9491
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9451: LD_VAR 0 8
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9471: LD_VAR 0 8
9475: PUSH
9476: LD_VAR 0 2
9480: ARRAY
9481: PPUSH
9482: LD_INT 4
9484: PPUSH
9485: CALL_OW 183
// end ;
9489: GO 9448
9491: POP
9492: POP
// end else
9493: GO 9563
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 8
9512: PPUSH
9513: CALL_OW 12
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9561
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9521: LD_VAR 0 8
9525: PUSH
9526: LD_VAR 0 2
9530: ARRAY
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9541: LD_VAR 0 8
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 183
// end ;
9559: GO 9518
9561: POP
9562: POP
// end ; wait ( 0 0$01 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9570: LD_ADDR_VAR 0 8
9574: PUSH
9575: LD_INT 18
9577: PPUSH
9578: LD_INT 22
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 21
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 60
9603: PUSH
9604: EMPTY
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL_OW 70
9620: PUSH
9621: LD_VAR 0 9
9625: DIFF
9626: ST_TO_ADDR
// pom = 6 ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_INT 6
9634: ST_TO_ADDR
// if canTakeUnits then
9635: LD_VAR 0 8
9639: IFFALSE 9756
// for i = 1 to canTakeUnits do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9754
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9659: LD_VAR 0 8
9663: PUSH
9664: LD_VAR 0 2
9668: ARRAY
9669: PPUSH
9670: CALL_OW 257
9674: PUSH
9675: LD_INT 3
9677: NONEQUAL
9678: IFFALSE 9718
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9680: LD_VAR 0 8
9684: PUSH
9685: LD_VAR 0 2
9689: ARRAY
9690: PPUSH
9691: LD_VAR 0 4
9695: PPUSH
9696: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9700: LD_VAR 0 8
9704: PUSH
9705: LD_VAR 0 2
9709: ARRAY
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9718: LD_VAR 0 8
9722: PUSH
9723: LD_VAR 0 2
9727: ARRAY
9728: PPUSH
9729: LD_VAR 0 4
9733: PPUSH
9734: CALL_OW 120
// pom = pom - 1 ;
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: LD_INT 1
9750: MINUS
9751: ST_TO_ADDR
// end ;
9752: GO 9656
9754: POP
9755: POP
// if pom > 0 then
9756: LD_VAR 0 7
9760: PUSH
9761: LD_INT 0
9763: GREATER
9764: IFFALSE 9789
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9766: LD_ADDR_EXP 80
9770: PUSH
9771: LD_EXP 80
9775: PPUSH
9776: LD_INT 3
9778: PPUSH
9779: LD_VAR 0 7
9783: PPUSH
9784: CALL_OW 1
9788: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 30
9823: PUSH
9824: LD_INT 32
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: LD_INT 59
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: PUSH
9855: FOR_IN
9856: IFFALSE 10102
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: LD_INT 18
9865: PPUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: LD_INT 60
9891: PUSH
9892: EMPTY
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 70
9908: PUSH
9909: LD_VAR 0 9
9913: DIFF
9914: ST_TO_ADDR
// if canTakeUnits then
9915: LD_VAR 0 8
9919: IFFALSE 10053
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9921: LD_VAR 0 8
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: CALL_OW 257
9934: PUSH
9935: LD_INT 1
9937: NONEQUAL
9938: IFFALSE 10033
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9940: LD_VAR 0 8
9944: PUSH
9945: LD_INT 1
9947: ARRAY
9948: PPUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 6
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 30
9971: PUSH
9972: LD_INT 5
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: PUSH
9989: LD_INT 1
9991: ARRAY
9992: PPUSH
9993: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9997: LD_VAR 0 8
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10013: LD_VAR 0 8
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: CALL_OW 182
// wait ( 0 0$1 ) ;
10026: LD_INT 35
10028: PPUSH
10029: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10033: LD_VAR 0 8
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 5
10046: PPUSH
10047: CALL_OW 120
// end else
10051: GO 10100
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10053: LD_ADDR_EXP 72
10057: PUSH
10058: LD_EXP 72
10062: PUSH
10063: LD_VAR 0 5
10067: ADD
10068: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10069: LD_ADDR_EXP 80
10073: PUSH
10074: LD_EXP 80
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: LD_EXP 80
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: PUSH
10091: LD_INT 1
10093: PLUS
10094: PPUSH
10095: CALL_OW 1
10099: ST_TO_ADDR
// end ; end ;
10100: GO 9855
10102: POP
10103: POP
// end ;
10104: LD_VAR 0 1
10108: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 22
10120: PUSH
10121: LD_VAR 0 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 50
10132: PUSH
10133: EMPTY
10134: LIST
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: PPUSH
10169: CALL_OW 69
10173: PPUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 74
10183: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10184: LD_VAR 0 4
10188: PPUSH
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 296
10198: PUSH
10199: LD_INT 13
10201: LESS
10202: IFFALSE 10214
// begin result = true ;
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// exit ;
10212: GO 10222
// end ; result = false ;
10214: LD_ADDR_VAR 0 3
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// end ;
10222: LD_VAR 0 3
10226: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
10240: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 302
10250: NOT
10251: PUSH
10252: LD_VAR 0 4
10256: PUSH
10257: LD_INT 1
10259: EQUAL
10260: OR
10261: PUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: CALL_OW 488
10276: NOT
10277: OR
10278: PUSH
10279: LD_VAR 0 1
10283: PPUSH
10284: LD_VAR 0 2
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: CALL_OW 297
10298: PUSH
10299: LD_VAR 0 4
10303: GREATEREQUAL
10304: OR
10305: PUSH
10306: LD_VAR 0 5
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: IN
10321: NOT
10322: OR
10323: IFFALSE 10327
// exit ;
10325: GO 11884
// attempts = 0 ;
10327: LD_ADDR_VAR 0 17
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10335: LD_ADDR_VAR 0 7
10339: PUSH
10340: EMPTY
10341: ST_TO_ADDR
// list_coords = [ ] ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: EMPTY
10348: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10349: LD_ADDR_VAR 0 9
10353: PUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 250
10373: PPUSH
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL_OW 251
10383: PPUSH
10384: CALL 11889 0 4
10388: ST_TO_ADDR
// if attempts = 0 then
10389: LD_VAR 0 17
10393: PUSH
10394: LD_INT 0
10396: EQUAL
10397: IFFALSE 10505
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10399: LD_ADDR_VAR 0 10
10403: PUSH
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 9
10413: PUSH
10414: LD_INT 1
10416: PLUS
10417: PUSH
10418: LD_VAR 0 9
10422: PUSH
10423: LD_INT 1
10425: MINUS
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10432: LD_VAR 0 10
10436: PUSH
10437: LD_INT 2
10439: ARRAY
10440: PUSH
10441: LD_INT 6
10443: EQUAL
10444: IFFALSE 10467
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10446: LD_ADDR_VAR 0 10
10450: PUSH
10451: LD_VAR 0 10
10455: PPUSH
10456: LD_INT 2
10458: PPUSH
10459: LD_INT 0
10461: PPUSH
10462: CALL_OW 1
10466: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10467: LD_VAR 0 10
10471: PUSH
10472: LD_INT 3
10474: ARRAY
10475: PUSH
10476: LD_INT 1
10478: NEG
10479: EQUAL
10480: IFFALSE 10503
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10482: LD_ADDR_VAR 0 10
10486: PUSH
10487: LD_VAR 0 10
10491: PPUSH
10492: LD_INT 3
10494: PPUSH
10495: LD_INT 5
10497: PPUSH
10498: CALL_OW 1
10502: ST_TO_ADDR
// end else
10503: GO 10542
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10505: LD_ADDR_VAR 0 10
10509: PUSH
10510: LD_INT 0
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: LD_INT 3
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: LD_INT 5
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_VAR 0 9
10540: DIFF
10541: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10542: LD_ADDR_VAR 0 14
10546: PUSH
10547: DOUBLE
10548: LD_INT 1
10550: DEC
10551: ST_TO_ADDR
10552: LD_VAR 0 10
10556: PUSH
10557: LD_INT 0
10559: PLUS
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10884
// case dir_list [ c ] of 0 :
10564: LD_VAR 0 10
10568: PUSH
10569: LD_VAR 0 14
10573: ARRAY
10574: PUSH
10575: LD_INT 0
10577: DOUBLE
10578: EQUAL
10579: IFTRUE 10583
10581: GO 10624
10583: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10584: LD_ADDR_VAR 0 8
10588: PUSH
10589: LD_VAR 0 8
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: LD_VAR 0 2
10601: PUSH
10602: LD_VAR 0 3
10606: PUSH
10607: LD_VAR 0 4
10611: MINUS
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 2
10621: ST_TO_ADDR
10622: GO 10882
10624: LD_INT 1
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10673
10632: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10633: LD_ADDR_VAR 0 8
10637: PUSH
10638: LD_VAR 0 8
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: LD_VAR 0 2
10650: PUSH
10651: LD_VAR 0 4
10655: PLUS
10656: PUSH
10657: LD_VAR 0 3
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 2
10670: ST_TO_ADDR
10671: GO 10882
10673: LD_INT 2
10675: DOUBLE
10676: EQUAL
10677: IFTRUE 10681
10679: GO 10728
10681: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10682: LD_ADDR_VAR 0 8
10686: PUSH
10687: LD_VAR 0 8
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: LD_VAR 0 2
10699: PUSH
10700: LD_VAR 0 4
10704: PLUS
10705: PUSH
10706: LD_VAR 0 3
10710: PUSH
10711: LD_VAR 0 4
10715: PLUS
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 2
10725: ST_TO_ADDR
10726: GO 10882
10728: LD_INT 3
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10777
10736: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10737: LD_ADDR_VAR 0 8
10741: PUSH
10742: LD_VAR 0 8
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: LD_VAR 0 2
10754: PUSH
10755: LD_VAR 0 3
10759: PUSH
10760: LD_VAR 0 4
10764: PLUS
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PPUSH
10770: CALL_OW 2
10774: ST_TO_ADDR
10775: GO 10882
10777: LD_INT 4
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10826
10785: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10786: LD_ADDR_VAR 0 8
10790: PUSH
10791: LD_VAR 0 8
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_VAR 0 4
10808: MINUS
10809: PUSH
10810: LD_VAR 0 3
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PPUSH
10819: CALL_OW 2
10823: ST_TO_ADDR
10824: GO 10882
10826: LD_INT 5
10828: DOUBLE
10829: EQUAL
10830: IFTRUE 10834
10832: GO 10881
10834: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10835: LD_ADDR_VAR 0 8
10839: PUSH
10840: LD_VAR 0 8
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_VAR 0 2
10852: PUSH
10853: LD_VAR 0 4
10857: MINUS
10858: PUSH
10859: LD_VAR 0 3
10863: PUSH
10864: LD_VAR 0 4
10868: MINUS
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 2
10878: ST_TO_ADDR
10879: GO 10882
10881: POP
10882: GO 10561
10884: POP
10885: POP
// if dist < 30 then
10886: LD_VAR 0 4
10890: PUSH
10891: LD_INT 30
10893: LESS
10894: IFFALSE 10906
// c = 1 else
10896: LD_ADDR_VAR 0 14
10900: PUSH
10901: LD_INT 1
10903: ST_TO_ADDR
10904: GO 10914
// c = 2 ;
10906: LD_ADDR_VAR 0 14
10910: PUSH
10911: LD_INT 2
10913: ST_TO_ADDR
// b = 1 ;
10914: LD_ADDR_VAR 0 11
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10922: LD_VAR 0 11
10926: PUSH
10927: LD_VAR 0 4
10931: PUSH
10932: LD_INT 1
10934: MINUS
10935: LESSEQUAL
10936: IFFALSE 11364
// begin if 0 in dir_list and 1 in dir_list then
10938: LD_INT 0
10940: PUSH
10941: LD_VAR 0 10
10945: IN
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: LD_VAR 0 10
10954: IN
10955: AND
10956: IFFALSE 11008
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10958: LD_ADDR_VAR 0 8
10962: PUSH
10963: LD_VAR 0 8
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: LD_VAR 0 2
10975: PUSH
10976: LD_VAR 0 11
10980: PLUS
10981: PUSH
10982: LD_VAR 0 3
10986: PUSH
10987: LD_VAR 0 4
10991: MINUS
10992: PUSH
10993: LD_VAR 0 11
10997: PLUS
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PPUSH
11003: CALL_OW 2
11007: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11008: LD_INT 1
11010: PUSH
11011: LD_VAR 0 10
11015: IN
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: LD_VAR 0 10
11024: IN
11025: AND
11026: IFFALSE 11072
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11028: LD_ADDR_VAR 0 8
11032: PUSH
11033: LD_VAR 0 8
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PUSH
11046: LD_VAR 0 4
11050: PLUS
11051: PUSH
11052: LD_VAR 0 3
11056: PUSH
11057: LD_VAR 0 11
11061: PLUS
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 2
11071: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11072: LD_INT 2
11074: PUSH
11075: LD_VAR 0 10
11079: IN
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: LD_VAR 0 10
11088: IN
11089: AND
11090: IFFALSE 11142
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11092: LD_ADDR_VAR 0 8
11096: PUSH
11097: LD_VAR 0 8
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_VAR 0 2
11109: PUSH
11110: LD_VAR 0 4
11114: PLUS
11115: PUSH
11116: LD_VAR 0 11
11120: MINUS
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: LD_VAR 0 4
11131: PLUS
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PPUSH
11137: CALL_OW 2
11141: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11142: LD_INT 3
11144: PUSH
11145: LD_VAR 0 10
11149: IN
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: LD_VAR 0 10
11158: IN
11159: AND
11160: IFFALSE 11212
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 8
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 2
11179: PUSH
11180: LD_VAR 0 11
11184: MINUS
11185: PUSH
11186: LD_VAR 0 3
11190: PUSH
11191: LD_VAR 0 4
11195: PLUS
11196: PUSH
11197: LD_VAR 0 11
11201: MINUS
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 2
11211: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11212: LD_INT 4
11214: PUSH
11215: LD_VAR 0 10
11219: IN
11220: PUSH
11221: LD_INT 5
11223: PUSH
11224: LD_VAR 0 10
11228: IN
11229: AND
11230: IFFALSE 11276
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11232: LD_ADDR_VAR 0 8
11236: PUSH
11237: LD_VAR 0 8
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 2
11249: PUSH
11250: LD_VAR 0 4
11254: MINUS
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_VAR 0 11
11265: MINUS
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 2
11275: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11276: LD_INT 5
11278: PUSH
11279: LD_VAR 0 10
11283: IN
11284: PUSH
11285: LD_INT 0
11287: PUSH
11288: LD_VAR 0 10
11292: IN
11293: AND
11294: IFFALSE 11346
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11296: LD_ADDR_VAR 0 8
11300: PUSH
11301: LD_VAR 0 8
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: LD_VAR 0 2
11313: PUSH
11314: LD_VAR 0 4
11318: MINUS
11319: PUSH
11320: LD_VAR 0 11
11324: PLUS
11325: PUSH
11326: LD_VAR 0 3
11330: PUSH
11331: LD_VAR 0 4
11335: MINUS
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 2
11345: ST_TO_ADDR
// b = b + c end ;
11346: LD_ADDR_VAR 0 11
11350: PUSH
11351: LD_VAR 0 11
11355: PUSH
11356: LD_VAR 0 14
11360: PLUS
11361: ST_TO_ADDR
11362: GO 10922
// if list_coords = 0 then
11364: LD_VAR 0 8
11368: PUSH
11369: LD_INT 0
11371: EQUAL
11372: IFFALSE 11376
// exit ;
11374: GO 11884
// repeat min_dist = 5000 ;
11376: LD_ADDR_VAR 0 12
11380: PUSH
11381: LD_INT 5000
11383: ST_TO_ADDR
// for b in list_coords do
11384: LD_ADDR_VAR 0 11
11388: PUSH
11389: LD_VAR 0 8
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11454
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11397: LD_ADDR_VAR 0 13
11401: PUSH
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_VAR 0 11
11411: PUSH
11412: LD_INT 1
11414: ARRAY
11415: PPUSH
11416: LD_VAR 0 11
11420: PUSH
11421: LD_INT 2
11423: ARRAY
11424: PPUSH
11425: CALL_OW 297
11429: ST_TO_ADDR
// if temp_dist < min_dist then
11430: LD_VAR 0 13
11434: PUSH
11435: LD_VAR 0 12
11439: LESS
11440: IFFALSE 11452
// min_dist = temp_dist ;
11442: LD_ADDR_VAR 0 12
11446: PUSH
11447: LD_VAR 0 13
11451: ST_TO_ADDR
// end ;
11452: GO 11394
11454: POP
11455: POP
// c = 0 ;
11456: LD_ADDR_VAR 0 14
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// repeat c = c + 1 ;
11464: LD_ADDR_VAR 0 14
11468: PUSH
11469: LD_VAR 0 14
11473: PUSH
11474: LD_INT 1
11476: PLUS
11477: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11478: LD_VAR 0 1
11482: PPUSH
11483: LD_VAR 0 8
11487: PUSH
11488: LD_VAR 0 14
11492: ARRAY
11493: PUSH
11494: LD_INT 1
11496: ARRAY
11497: PPUSH
11498: LD_VAR 0 8
11502: PUSH
11503: LD_VAR 0 14
11507: ARRAY
11508: PUSH
11509: LD_INT 2
11511: ARRAY
11512: PPUSH
11513: CALL_OW 297
11517: PUSH
11518: LD_VAR 0 12
11522: EQUAL
11523: IFFALSE 11588
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11525: LD_ADDR_VAR 0 7
11529: PUSH
11530: LD_VAR 0 7
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: LD_VAR 0 8
11542: PUSH
11543: LD_VAR 0 14
11547: ARRAY
11548: PPUSH
11549: CALL_OW 2
11553: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11554: LD_ADDR_VAR 0 8
11558: PUSH
11559: LD_VAR 0 8
11563: PPUSH
11564: LD_VAR 0 14
11568: PPUSH
11569: CALL_OW 3
11573: ST_TO_ADDR
// c = c - 1 ;
11574: LD_ADDR_VAR 0 14
11578: PUSH
11579: LD_VAR 0 14
11583: PUSH
11584: LD_INT 1
11586: MINUS
11587: ST_TO_ADDR
// end ; until c = list_coords ;
11588: LD_VAR 0 14
11592: PUSH
11593: LD_VAR 0 8
11597: EQUAL
11598: IFFALSE 11464
// c = 0 ;
11600: LD_ADDR_VAR 0 14
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// if list_nearest > 0 then
11608: LD_VAR 0 7
11612: PUSH
11613: LD_INT 0
11615: GREATER
11616: IFFALSE 11758
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11618: LD_ADDR_VAR 0 15
11622: PUSH
11623: LD_INT 1
11625: PPUSH
11626: LD_VAR 0 7
11630: PPUSH
11631: CALL_OW 12
11635: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11636: LD_ADDR_VAR 0 16
11640: PUSH
11641: LD_VAR 0 7
11645: PUSH
11646: LD_VAR 0 15
11650: ARRAY
11651: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11652: LD_VAR 0 16
11656: PUSH
11657: LD_INT 1
11659: ARRAY
11660: PPUSH
11661: LD_VAR 0 16
11665: PUSH
11666: LD_INT 2
11668: ARRAY
11669: PPUSH
11670: CALL_OW 488
11674: PUSH
11675: LD_INT 0
11677: GREATER
11678: PUSH
11679: LD_VAR 0 16
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: LD_VAR 0 16
11692: PUSH
11693: LD_INT 2
11695: ARRAY
11696: PPUSH
11697: CALL_OW 428
11701: PUSH
11702: LD_INT 0
11704: EQUAL
11705: AND
11706: IFFALSE 11718
// c = 1 else
11708: LD_ADDR_VAR 0 14
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
11716: GO 11738
// list_nearest = Delete ( list_nearest , rand_num ) ;
11718: LD_ADDR_VAR 0 7
11722: PUSH
11723: LD_VAR 0 7
11727: PPUSH
11728: LD_VAR 0 15
11732: PPUSH
11733: CALL_OW 3
11737: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11738: LD_VAR 0 14
11742: PUSH
11743: LD_INT 1
11745: EQUAL
11746: PUSH
11747: LD_VAR 0 7
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: OR
11756: IFFALSE 11618
// end ; until c = 1 or list_coords = 0 ;
11758: LD_VAR 0 14
11762: PUSH
11763: LD_INT 1
11765: EQUAL
11766: PUSH
11767: LD_VAR 0 8
11771: PUSH
11772: LD_INT 0
11774: EQUAL
11775: OR
11776: IFFALSE 11376
// attempts = attempts + 1 ;
11778: LD_ADDR_VAR 0 17
11782: PUSH
11783: LD_VAR 0 17
11787: PUSH
11788: LD_INT 1
11790: PLUS
11791: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11792: LD_VAR 0 14
11796: PUSH
11797: LD_INT 1
11799: EQUAL
11800: PUSH
11801: LD_VAR 0 17
11805: PUSH
11806: LD_INT 1
11808: GREATER
11809: OR
11810: IFFALSE 10335
// if c = 1 then
11812: LD_VAR 0 14
11816: PUSH
11817: LD_INT 1
11819: EQUAL
11820: IFFALSE 11884
// if add then
11822: LD_VAR 0 5
11826: IFFALSE 11857
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_VAR 0 16
11837: PUSH
11838: LD_INT 1
11840: ARRAY
11841: PPUSH
11842: LD_VAR 0 16
11846: PUSH
11847: LD_INT 2
11849: ARRAY
11850: PPUSH
11851: CALL_OW 171
11855: GO 11884
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_VAR 0 16
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 16
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: CALL_OW 111
// end ;
11884: LD_VAR 0 6
11888: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11889: LD_INT 0
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11897: LD_VAR 0 1
11901: PPUSH
11902: LD_VAR 0 2
11906: PPUSH
11907: CALL_OW 488
11911: NOT
11912: PUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: CALL_OW 488
11927: NOT
11928: OR
11929: IFFALSE 11942
// begin result = - 1 ;
11931: LD_ADDR_VAR 0 5
11935: PUSH
11936: LD_INT 1
11938: NEG
11939: ST_TO_ADDR
// exit ;
11940: GO 12102
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11942: LD_ADDR_VAR 0 6
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_VAR 0 4
11966: PPUSH
11967: CALL_OW 298
11971: ST_TO_ADDR
// dist_2 = 99999 ;
11972: LD_ADDR_VAR 0 7
11976: PUSH
11977: LD_INT 99999
11979: ST_TO_ADDR
// for b = 0 to 5 do
11980: LD_ADDR_VAR 0 8
11984: PUSH
11985: DOUBLE
11986: LD_INT 0
11988: DEC
11989: ST_TO_ADDR
11990: LD_INT 5
11992: PUSH
11993: FOR_TO
11994: IFFALSE 12090
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11996: LD_ADDR_VAR 0 9
12000: PUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_VAR 0 8
12010: PPUSH
12011: LD_VAR 0 6
12015: PPUSH
12016: CALL_OW 272
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: LD_VAR 0 6
12035: PPUSH
12036: CALL_OW 273
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_VAR 0 4
12050: PPUSH
12051: CALL_OW 298
12055: ST_TO_ADDR
// if temp_dist < dist_2 then
12056: LD_VAR 0 9
12060: PUSH
12061: LD_VAR 0 7
12065: LESS
12066: IFFALSE 12088
// begin dist_2 = temp_dist ;
12068: LD_ADDR_VAR 0 7
12072: PUSH
12073: LD_VAR 0 9
12077: ST_TO_ADDR
// dir = b ;
12078: LD_ADDR_VAR 0 10
12082: PUSH
12083: LD_VAR 0 8
12087: ST_TO_ADDR
// end ; end ;
12088: GO 11993
12090: POP
12091: POP
// result = dir ;
12092: LD_ADDR_VAR 0 5
12096: PUSH
12097: LD_VAR 0 10
12101: ST_TO_ADDR
// end ; end_of_file
12102: LD_VAR 0 5
12106: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
// personel = [ ] ;
12137: LD_ADDR_VAR 0 18
12141: PUSH
12142: EMPTY
12143: ST_TO_ADDR
// vehicles = [ ] ;
12144: LD_ADDR_VAR 0 24
12148: PUSH
12149: EMPTY
12150: ST_TO_ADDR
// for unit in basePersonel do
12151: LD_ADDR_VAR 0 17
12155: PUSH
12156: LD_VAR 0 3
12160: PUSH
12161: FOR_IN
12162: IFFALSE 12210
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12164: LD_ADDR_VAR 0 18
12168: PUSH
12169: LD_VAR 0 18
12173: PUSH
12174: LD_VAR 0 17
12178: PUSH
12179: LD_VAR 0 17
12183: PPUSH
12184: CALL_OW 310
12188: PUSH
12189: LD_VAR 0 17
12193: PPUSH
12194: CALL_OW 302
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: ADD
12207: ST_TO_ADDR
12208: GO 12161
12210: POP
12211: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12212: LD_ADDR_VAR 0 23
12216: PUSH
12217: LD_VAR 0 4
12221: PPUSH
12222: LD_INT 22
12224: PUSH
12225: LD_VAR 0 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 21
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 50
12246: PUSH
12247: EMPTY
12248: LIST
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 34
12258: PUSH
12259: LD_INT 12
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 34
12268: PUSH
12269: LD_INT 51
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 34
12278: PUSH
12279: LD_INT 32
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 70
12306: PUSH
12307: FOR_IN
12308: IFFALSE 12356
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12310: LD_ADDR_VAR 0 24
12314: PUSH
12315: LD_VAR 0 24
12319: PUSH
12320: LD_VAR 0 23
12324: PUSH
12325: LD_VAR 0 23
12329: PPUSH
12330: CALL_OW 310
12334: PUSH
12335: LD_VAR 0 23
12339: PPUSH
12340: CALL_OW 302
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: ADD
12353: ST_TO_ADDR
12354: GO 12307
12356: POP
12357: POP
// repeat soldiers = [ ] ;
12358: LD_ADDR_VAR 0 19
12362: PUSH
12363: EMPTY
12364: ST_TO_ADDR
// engineers = [ ] ;
12365: LD_ADDR_VAR 0 20
12369: PUSH
12370: EMPTY
12371: ST_TO_ADDR
// mechanics = [ ] ;
12372: LD_ADDR_VAR 0 21
12376: PUSH
12377: EMPTY
12378: ST_TO_ADDR
// scientists = [ ] ;
12379: LD_ADDR_VAR 0 22
12383: PUSH
12384: EMPTY
12385: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12386: LD_ADDR_VAR 0 29
12390: PUSH
12391: LD_VAR 0 4
12395: PPUSH
12396: LD_INT 22
12398: PUSH
12399: LD_VAR 0 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 21
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 50
12420: PUSH
12421: EMPTY
12422: LIST
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 0
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12463: LD_ADDR_VAR 0 30
12467: PUSH
12468: LD_VAR 0 4
12472: PPUSH
12473: LD_INT 22
12475: PUSH
12476: LD_VAR 0 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 21
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 50
12497: PUSH
12498: EMPTY
12499: LIST
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 30
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 70
12539: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12540: LD_ADDR_VAR 0 31
12544: PUSH
12545: LD_VAR 0 4
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 3
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 50
12574: PUSH
12575: EMPTY
12576: LIST
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 30
12603: PUSH
12604: LD_INT 8
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 70
12627: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12628: LD_ADDR_VAR 0 32
12632: PUSH
12633: LD_VAR 0 4
12637: PPUSH
12638: LD_INT 22
12640: PUSH
12641: LD_VAR 0 1
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 50
12662: PUSH
12663: EMPTY
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 30
12671: PUSH
12672: LD_INT 31
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 30
12681: PUSH
12682: LD_INT 32
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 70
12704: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12705: LD_ADDR_VAR 0 33
12709: PUSH
12710: LD_VAR 0 4
12714: PPUSH
12715: LD_INT 22
12717: PUSH
12718: LD_VAR 0 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 50
12739: PUSH
12740: EMPTY
12741: LIST
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 30
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 5
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 70
12781: ST_TO_ADDR
// for i := 1 to personel do
12782: LD_ADDR_VAR 0 13
12786: PUSH
12787: DOUBLE
12788: LD_INT 1
12790: DEC
12791: ST_TO_ADDR
12792: LD_VAR 0 18
12796: PUSH
12797: FOR_TO
12798: IFFALSE 13004
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12800: LD_VAR 0 18
12804: PUSH
12805: LD_VAR 0 13
12809: ARRAY
12810: PUSH
12811: LD_INT 1
12813: ARRAY
12814: PPUSH
12815: CALL_OW 256
12819: PUSH
12820: LD_INT 1000
12822: EQUAL
12823: IFFALSE 12865
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12825: LD_ADDR_VAR 0 18
12829: PUSH
12830: LD_VAR 0 18
12834: PPUSH
12835: LD_VAR 0 13
12839: PUSH
12840: LD_VAR 0 18
12844: PUSH
12845: LD_VAR 0 13
12849: ARRAY
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL 35931 0 3
12862: ST_TO_ADDR
// end else
12863: GO 12952
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12865: LD_VAR 0 18
12869: PUSH
12870: LD_VAR 0 13
12874: ARRAY
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: PPUSH
12880: CALL_OW 256
12884: PUSH
12885: LD_INT 950
12887: LESSEQUAL
12888: IFFALSE 12952
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12890: LD_ADDR_VAR 0 18
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_VAR 0 13
12904: PUSH
12905: LD_VAR 0 18
12909: PUSH
12910: LD_VAR 0 13
12914: ARRAY
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: LD_INT 0
12922: PPUSH
12923: CALL 35931 0 3
12927: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12928: LD_VAR 0 18
12932: PUSH
12933: LD_VAR 0 13
12937: ARRAY
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PPUSH
12943: LD_VAR 0 5
12947: PPUSH
12948: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12952: LD_VAR 0 18
12956: PUSH
12957: LD_VAR 0 13
12961: ARRAY
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 256
12971: PUSH
12972: LD_INT 250
12974: LESS
12975: IFFALSE 13002
// personel = personel diff [ personel [ i ] ] ;
12977: LD_ADDR_VAR 0 18
12981: PUSH
12982: LD_VAR 0 18
12986: PUSH
12987: LD_VAR 0 18
12991: PUSH
12992: LD_VAR 0 13
12996: ARRAY
12997: PUSH
12998: EMPTY
12999: LIST
13000: DIFF
13001: ST_TO_ADDR
// end ;
13002: GO 12797
13004: POP
13005: POP
// for i := 1 to vehicles do
13006: LD_ADDR_VAR 0 13
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_VAR 0 24
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13408
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13024: LD_VAR 0 24
13028: PUSH
13029: LD_VAR 0 13
13033: ARRAY
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: CALL_OW 261
13043: PUSH
13044: LD_INT 50
13046: LESS
13047: IFFALSE 13071
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13049: LD_VAR 0 24
13053: PUSH
13054: LD_VAR 0 13
13058: ARRAY
13059: PUSH
13060: LD_INT 1
13062: ARRAY
13063: PPUSH
13064: LD_INT 100
13066: PPUSH
13067: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13071: LD_VAR 0 24
13075: PUSH
13076: LD_VAR 0 13
13080: ARRAY
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 256
13090: PUSH
13091: LD_INT 1000
13093: EQUAL
13094: IFFALSE 13269
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13096: LD_VAR 0 24
13100: PUSH
13101: LD_VAR 0 13
13105: ARRAY
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: CALL_OW 263
13115: PUSH
13116: LD_INT 1
13118: EQUAL
13119: IFFALSE 13177
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13121: LD_VAR 0 24
13125: PUSH
13126: LD_VAR 0 13
13130: ARRAY
13131: PUSH
13132: LD_INT 2
13134: ARRAY
13135: PPUSH
13136: CALL_OW 310
13140: NOT
13141: IFFALSE 13177
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13143: LD_VAR 0 24
13147: PUSH
13148: LD_VAR 0 13
13152: ARRAY
13153: PUSH
13154: LD_INT 2
13156: ARRAY
13157: PPUSH
13158: LD_VAR 0 24
13162: PUSH
13163: LD_VAR 0 13
13167: ARRAY
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: PPUSH
13173: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13177: LD_VAR 0 24
13181: PUSH
13182: LD_VAR 0 10
13186: LESS
13187: IFFALSE 13229
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13189: LD_ADDR_VAR 0 24
13193: PUSH
13194: LD_VAR 0 24
13198: PPUSH
13199: LD_VAR 0 13
13203: PUSH
13204: LD_VAR 0 24
13208: PUSH
13209: LD_VAR 0 13
13213: ARRAY
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL 35931 0 3
13226: ST_TO_ADDR
13227: GO 13267
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13229: LD_ADDR_VAR 0 24
13233: PUSH
13234: LD_VAR 0 24
13238: PPUSH
13239: LD_VAR 0 13
13243: PUSH
13244: LD_VAR 0 24
13248: PUSH
13249: LD_VAR 0 13
13253: ARRAY
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: LD_INT 2
13261: PPUSH
13262: CALL 35931 0 3
13266: ST_TO_ADDR
// end else
13267: GO 13356
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13269: LD_VAR 0 24
13273: PUSH
13274: LD_VAR 0 13
13278: ARRAY
13279: PUSH
13280: LD_INT 1
13282: ARRAY
13283: PPUSH
13284: CALL_OW 256
13288: PUSH
13289: LD_INT 650
13291: LESSEQUAL
13292: IFFALSE 13356
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13294: LD_ADDR_VAR 0 24
13298: PUSH
13299: LD_VAR 0 24
13303: PPUSH
13304: LD_VAR 0 13
13308: PUSH
13309: LD_VAR 0 24
13313: PUSH
13314: LD_VAR 0 13
13318: ARRAY
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL 35931 0 3
13331: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13332: LD_VAR 0 24
13336: PUSH
13337: LD_VAR 0 13
13341: ARRAY
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_VAR 0 6
13351: PPUSH
13352: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13356: LD_VAR 0 24
13360: PUSH
13361: LD_VAR 0 13
13365: ARRAY
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: CALL_OW 256
13375: PUSH
13376: LD_INT 250
13378: LESS
13379: IFFALSE 13406
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13381: LD_ADDR_VAR 0 24
13385: PUSH
13386: LD_VAR 0 24
13390: PUSH
13391: LD_VAR 0 24
13395: PUSH
13396: LD_VAR 0 13
13400: ARRAY
13401: PUSH
13402: EMPTY
13403: LIST
13404: DIFF
13405: ST_TO_ADDR
// end ;
13406: GO 13021
13408: POP
13409: POP
// for i := 1 to personel do
13410: LD_ADDR_VAR 0 13
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 18
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13467
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13428: LD_ADDR_VAR 0 19
13432: PUSH
13433: LD_VAR 0 19
13437: PUSH
13438: LD_VAR 0 18
13442: PUSH
13443: LD_VAR 0 13
13447: ARRAY
13448: PPUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 72
13463: ADD
13464: ST_TO_ADDR
13465: GO 13425
13467: POP
13468: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13469: LD_VAR 0 19
13473: PUSH
13474: LD_VAR 0 32
13478: PPUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 59
13484: PUSH
13485: EMPTY
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: AND
13497: IFFALSE 13785
// begin for i := 1 to personel do
13499: LD_ADDR_VAR 0 13
13503: PUSH
13504: DOUBLE
13505: LD_INT 1
13507: DEC
13508: ST_TO_ADDR
13509: LD_VAR 0 18
13513: PUSH
13514: FOR_TO
13515: IFFALSE 13781
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13517: LD_VAR 0 18
13521: PUSH
13522: LD_VAR 0 13
13526: ARRAY
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PPUSH
13532: CALL_OW 257
13536: PUSH
13537: LD_INT 1
13539: EQUAL
13540: PUSH
13541: LD_VAR 0 18
13545: PUSH
13546: LD_VAR 0 13
13550: ARRAY
13551: PUSH
13552: LD_INT 3
13554: ARRAY
13555: PUSH
13556: LD_INT 1
13558: EQUAL
13559: AND
13560: IFFALSE 13779
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13562: LD_VAR 0 18
13566: PUSH
13567: LD_VAR 0 13
13571: ARRAY
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: PPUSH
13577: CALL_OW 437
13581: IFFALSE 13682
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13583: LD_VAR 0 18
13587: PUSH
13588: LD_VAR 0 13
13592: ARRAY
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: CALL_OW 437
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PUSH
13607: LD_INT 1
13609: ARRAY
13610: PUSH
13611: LD_STRING e
13613: EQUAL
13614: PUSH
13615: LD_VAR 0 18
13619: PUSH
13620: LD_VAR 0 13
13624: ARRAY
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PPUSH
13630: CALL_OW 437
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: PUSH
13639: LD_INT 4
13641: ARRAY
13642: PPUSH
13643: CALL_OW 266
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: IN
13658: AND
13659: IFFALSE 13682
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13661: LD_VAR 0 18
13665: PUSH
13666: LD_VAR 0 13
13670: ARRAY
13671: PUSH
13672: LD_INT 1
13674: ARRAY
13675: PPUSH
13676: EMPTY
13677: PPUSH
13678: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13682: LD_ADDR_VAR 0 36
13686: PUSH
13687: LD_VAR 0 32
13691: PPUSH
13692: LD_INT 3
13694: PUSH
13695: LD_INT 59
13697: PUSH
13698: EMPTY
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 72
13709: PUSH
13710: FOR_IN
13711: IFFALSE 13777
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13713: LD_VAR 0 18
13717: PUSH
13718: LD_VAR 0 13
13722: ARRAY
13723: PUSH
13724: LD_INT 1
13726: ARRAY
13727: PPUSH
13728: CALL_OW 310
13732: PPUSH
13733: CALL_OW 266
13737: PUSH
13738: LD_INT 31
13740: PUSH
13741: LD_INT 32
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: IN
13748: NOT
13749: IFFALSE 13775
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13751: LD_VAR 0 18
13755: PUSH
13756: LD_VAR 0 13
13760: ARRAY
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: LD_VAR 0 36
13770: PPUSH
13771: CALL_OW 120
13775: GO 13710
13777: POP
13778: POP
// end ; end ;
13779: GO 13514
13781: POP
13782: POP
// end else
13783: GO 14000
// if soldiers and barracks then
13785: LD_VAR 0 19
13789: PUSH
13790: LD_VAR 0 33
13794: AND
13795: IFFALSE 14000
// for i := 1 to personel do
13797: LD_ADDR_VAR 0 13
13801: PUSH
13802: DOUBLE
13803: LD_INT 1
13805: DEC
13806: ST_TO_ADDR
13807: LD_VAR 0 18
13811: PUSH
13812: FOR_TO
13813: IFFALSE 13998
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13815: LD_VAR 0 18
13819: PUSH
13820: LD_VAR 0 13
13824: ARRAY
13825: PUSH
13826: LD_INT 1
13828: ARRAY
13829: PPUSH
13830: CALL_OW 257
13834: PUSH
13835: LD_INT 1
13837: EQUAL
13838: PUSH
13839: LD_VAR 0 18
13843: PUSH
13844: LD_VAR 0 13
13848: ARRAY
13849: PUSH
13850: LD_INT 3
13852: ARRAY
13853: PUSH
13854: LD_INT 1
13856: EQUAL
13857: AND
13858: PUSH
13859: LD_VAR 0 18
13863: PUSH
13864: LD_VAR 0 13
13868: ARRAY
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: PPUSH
13874: LD_INT 56
13876: PUSH
13877: EMPTY
13878: LIST
13879: PPUSH
13880: CALL_OW 72
13884: AND
13885: IFFALSE 13996
// begin if not personel [ i ] [ 2 ] then
13887: LD_VAR 0 18
13891: PUSH
13892: LD_VAR 0 13
13896: ARRAY
13897: PUSH
13898: LD_INT 2
13900: ARRAY
13901: NOT
13902: IFFALSE 13962
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13904: LD_ADDR_VAR 0 18
13908: PUSH
13909: LD_VAR 0 18
13913: PPUSH
13914: LD_VAR 0 13
13918: PUSH
13919: LD_VAR 0 18
13923: PUSH
13924: LD_VAR 0 13
13928: ARRAY
13929: PUSH
13930: LD_INT 1
13932: MINUS
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: LD_VAR 0 33
13942: PUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_VAR 0 33
13950: PPUSH
13951: CALL_OW 12
13955: ARRAY
13956: PPUSH
13957: CALL 35931 0 3
13961: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13962: LD_VAR 0 18
13966: PUSH
13967: LD_VAR 0 13
13971: ARRAY
13972: PUSH
13973: LD_INT 1
13975: ARRAY
13976: PPUSH
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 2
13990: ARRAY
13991: PPUSH
13992: CALL_OW 120
// end ;
13996: GO 13812
13998: POP
13999: POP
// for i := 1 to personel do
14000: LD_ADDR_VAR 0 13
14004: PUSH
14005: DOUBLE
14006: LD_INT 1
14008: DEC
14009: ST_TO_ADDR
14010: LD_VAR 0 18
14014: PUSH
14015: FOR_TO
14016: IFFALSE 14057
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14018: LD_ADDR_VAR 0 20
14022: PUSH
14023: LD_VAR 0 20
14027: PUSH
14028: LD_VAR 0 18
14032: PUSH
14033: LD_VAR 0 13
14037: ARRAY
14038: PPUSH
14039: LD_INT 25
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 72
14053: ADD
14054: ST_TO_ADDR
14055: GO 14015
14057: POP
14058: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14059: LD_VAR 0 20
14063: PUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: LD_INT 22
14071: PUSH
14072: LD_VAR 0 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 21
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: LD_INT 24
14096: PUSH
14097: LD_INT 1000
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 70
14117: AND
14118: IFFALSE 14394
// begin for i := 1 to personel do
14120: LD_ADDR_VAR 0 13
14124: PUSH
14125: DOUBLE
14126: LD_INT 1
14128: DEC
14129: ST_TO_ADDR
14130: LD_VAR 0 18
14134: PUSH
14135: FOR_TO
14136: IFFALSE 14390
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14138: LD_VAR 0 18
14142: PUSH
14143: LD_VAR 0 13
14147: ARRAY
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 2
14160: EQUAL
14161: PUSH
14162: LD_VAR 0 18
14166: PUSH
14167: LD_VAR 0 13
14171: ARRAY
14172: PUSH
14173: LD_INT 3
14175: ARRAY
14176: PUSH
14177: LD_INT 1
14179: EQUAL
14180: AND
14181: IFFALSE 14388
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14183: LD_VAR 0 18
14187: PUSH
14188: LD_VAR 0 13
14192: ARRAY
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: PPUSH
14198: CALL_OW 437
14202: IFFALSE 14258
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14204: LD_VAR 0 18
14208: PUSH
14209: LD_VAR 0 13
14213: ARRAY
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PPUSH
14219: CALL_OW 437
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: PUSH
14228: LD_INT 1
14230: ARRAY
14231: PUSH
14232: LD_STRING e
14234: EQUAL
14235: IFFALSE 14258
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14237: LD_VAR 0 18
14241: PUSH
14242: LD_VAR 0 13
14246: ARRAY
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: EMPTY
14253: PPUSH
14254: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14258: LD_VAR 0 18
14262: PUSH
14263: LD_VAR 0 13
14267: ARRAY
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: CALL_OW 310
14277: IFFALSE 14298
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14279: LD_VAR 0 18
14283: PUSH
14284: LD_VAR 0 13
14288: ARRAY
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14298: LD_ADDR_VAR 0 34
14302: PUSH
14303: LD_VAR 0 4
14307: PPUSH
14308: LD_INT 22
14310: PUSH
14311: LD_VAR 0 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 21
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 1000
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 70
14356: PUSH
14357: FOR_IN
14358: IFFALSE 14386
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14360: LD_VAR 0 18
14364: PUSH
14365: LD_VAR 0 13
14369: ARRAY
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 34
14379: PPUSH
14380: CALL_OW 190
14384: GO 14357
14386: POP
14387: POP
// end ;
14388: GO 14135
14390: POP
14391: POP
// end else
14392: GO 14656
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14394: LD_VAR 0 20
14398: PUSH
14399: LD_VAR 0 20
14403: PPUSH
14404: LD_INT 56
14406: PUSH
14407: EMPTY
14408: LIST
14409: PPUSH
14410: CALL_OW 72
14414: AND
14415: PUSH
14416: LD_VAR 0 29
14420: AND
14421: IFFALSE 14656
// for i := 1 to personel do
14423: LD_ADDR_VAR 0 13
14427: PUSH
14428: DOUBLE
14429: LD_INT 1
14431: DEC
14432: ST_TO_ADDR
14433: LD_VAR 0 18
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14654
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14441: LD_VAR 0 18
14445: PUSH
14446: LD_VAR 0 13
14450: ARRAY
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: PPUSH
14456: CALL_OW 257
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: PUSH
14465: LD_VAR 0 18
14469: PUSH
14470: LD_VAR 0 13
14474: ARRAY
14475: PUSH
14476: LD_INT 3
14478: ARRAY
14479: PUSH
14480: LD_INT 1
14482: EQUAL
14483: AND
14484: IFFALSE 14652
// begin if not personel [ i ] [ 2 ] then
14486: LD_VAR 0 18
14490: PUSH
14491: LD_VAR 0 13
14495: ARRAY
14496: PUSH
14497: LD_INT 2
14499: ARRAY
14500: NOT
14501: IFFALSE 14618
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14503: LD_ADDR_VAR 0 18
14507: PUSH
14508: LD_VAR 0 18
14512: PPUSH
14513: LD_VAR 0 13
14517: PUSH
14518: LD_VAR 0 18
14522: PUSH
14523: LD_VAR 0 13
14527: ARRAY
14528: PUSH
14529: LD_INT 1
14531: MINUS
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: LD_VAR 0 4
14541: PPUSH
14542: LD_INT 22
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 50
14566: PUSH
14567: EMPTY
14568: LIST
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 30
14585: PUSH
14586: LD_INT 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 70
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PPUSH
14613: CALL 35931 0 3
14617: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14618: LD_VAR 0 18
14622: PUSH
14623: LD_VAR 0 13
14627: ARRAY
14628: PUSH
14629: LD_INT 1
14631: ARRAY
14632: PPUSH
14633: LD_VAR 0 18
14637: PUSH
14638: LD_VAR 0 13
14642: ARRAY
14643: PUSH
14644: LD_INT 2
14646: ARRAY
14647: PPUSH
14648: CALL_OW 120
// end ; end ;
14652: GO 14438
14654: POP
14655: POP
// for i := 1 to personel do
14656: LD_ADDR_VAR 0 13
14660: PUSH
14661: DOUBLE
14662: LD_INT 1
14664: DEC
14665: ST_TO_ADDR
14666: LD_VAR 0 18
14670: PUSH
14671: FOR_TO
14672: IFFALSE 14713
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14674: LD_ADDR_VAR 0 21
14678: PUSH
14679: LD_VAR 0 21
14683: PUSH
14684: LD_VAR 0 18
14688: PUSH
14689: LD_VAR 0 13
14693: ARRAY
14694: PPUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 3
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 72
14709: ADD
14710: ST_TO_ADDR
14711: GO 14671
14713: POP
14714: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14715: LD_VAR 0 21
14719: PUSH
14720: LD_VAR 0 4
14724: PPUSH
14725: LD_INT 22
14727: PUSH
14728: LD_VAR 0 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 21
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 3
14749: PUSH
14750: LD_INT 24
14752: PUSH
14753: LD_INT 1000
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: AND
14774: IFFALSE 15378
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14776: LD_ADDR_VAR 0 35
14780: PUSH
14781: LD_VAR 0 4
14785: PPUSH
14786: LD_INT 22
14788: PUSH
14789: LD_VAR 0 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: LD_INT 24
14813: PUSH
14814: LD_INT 1000
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: PPUSH
14830: CALL_OW 70
14834: PUSH
14835: FOR_IN
14836: IFFALSE 15374
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14838: LD_VAR 0 35
14842: PPUSH
14843: LD_VAR 0 6
14847: PPUSH
14848: CALL_OW 299
14852: PUSH
14853: LD_INT 5
14855: LESS
14856: IFFALSE 15151
// begin for i := 1 to vehicles do
14858: LD_ADDR_VAR 0 13
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_VAR 0 24
14872: PUSH
14873: FOR_TO
14874: IFFALSE 14943
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14876: LD_VAR 0 24
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PUSH
14891: LD_VAR 0 35
14895: EQUAL
14896: IFFALSE 14917
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14898: LD_VAR 0 24
14902: PUSH
14903: LD_VAR 0 13
14907: ARRAY
14908: PUSH
14909: LD_INT 2
14911: ARRAY
14912: PPUSH
14913: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14917: LD_VAR 0 24
14921: PUSH
14922: LD_VAR 0 13
14926: ARRAY
14927: PUSH
14928: LD_INT 2
14930: ARRAY
14931: PPUSH
14932: LD_VAR 0 35
14936: PPUSH
14937: CALL_OW 189
// end ;
14941: GO 14873
14943: POP
14944: POP
// for i := 1 to personel do
14945: LD_ADDR_VAR 0 13
14949: PUSH
14950: DOUBLE
14951: LD_INT 1
14953: DEC
14954: ST_TO_ADDR
14955: LD_VAR 0 18
14959: PUSH
14960: FOR_TO
14961: IFFALSE 15149
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14963: LD_VAR 0 18
14967: PUSH
14968: LD_VAR 0 13
14972: ARRAY
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: CALL_OW 257
14982: PUSH
14983: LD_INT 3
14985: EQUAL
14986: PUSH
14987: LD_VAR 0 18
14991: PUSH
14992: LD_VAR 0 13
14996: ARRAY
14997: PUSH
14998: LD_INT 3
15000: ARRAY
15001: PUSH
15002: LD_INT 1
15004: EQUAL
15005: AND
15006: IFFALSE 15147
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15008: LD_VAR 0 18
15012: PUSH
15013: LD_VAR 0 13
15017: ARRAY
15018: PUSH
15019: LD_INT 1
15021: ARRAY
15022: PPUSH
15023: CALL_OW 437
15027: IFFALSE 15083
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15029: LD_VAR 0 18
15033: PUSH
15034: LD_VAR 0 13
15038: ARRAY
15039: PUSH
15040: LD_INT 1
15042: ARRAY
15043: PPUSH
15044: CALL_OW 437
15048: PUSH
15049: LD_INT 1
15051: ARRAY
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PUSH
15057: LD_STRING e
15059: EQUAL
15060: IFFALSE 15083
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15062: LD_VAR 0 18
15066: PUSH
15067: LD_VAR 0 13
15071: ARRAY
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: PPUSH
15077: EMPTY
15078: PPUSH
15079: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15083: LD_VAR 0 18
15087: PUSH
15088: LD_VAR 0 13
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PPUSH
15098: CALL_OW 310
15102: IFFALSE 15123
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15104: LD_VAR 0 18
15108: PUSH
15109: LD_VAR 0 13
15113: ARRAY
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15123: LD_VAR 0 18
15127: PUSH
15128: LD_VAR 0 13
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: LD_VAR 0 35
15142: PPUSH
15143: CALL_OW 189
// end ;
15147: GO 14960
15149: POP
15150: POP
// end ; if GetLives ( damageUnit ) < 250 then
15151: LD_VAR 0 35
15155: PPUSH
15156: CALL_OW 256
15160: PUSH
15161: LD_INT 250
15163: LESS
15164: IFFALSE 15372
// for i := 1 to personel do
15166: LD_ADDR_VAR 0 13
15170: PUSH
15171: DOUBLE
15172: LD_INT 1
15174: DEC
15175: ST_TO_ADDR
15176: LD_VAR 0 18
15180: PUSH
15181: FOR_TO
15182: IFFALSE 15370
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15184: LD_VAR 0 18
15188: PUSH
15189: LD_VAR 0 13
15193: ARRAY
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 257
15203: PUSH
15204: LD_INT 3
15206: EQUAL
15207: PUSH
15208: LD_VAR 0 18
15212: PUSH
15213: LD_VAR 0 13
15217: ARRAY
15218: PUSH
15219: LD_INT 3
15221: ARRAY
15222: PUSH
15223: LD_INT 1
15225: EQUAL
15226: AND
15227: IFFALSE 15368
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15229: LD_VAR 0 18
15233: PUSH
15234: LD_VAR 0 13
15238: ARRAY
15239: PUSH
15240: LD_INT 1
15242: ARRAY
15243: PPUSH
15244: CALL_OW 437
15248: IFFALSE 15304
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15250: LD_VAR 0 18
15254: PUSH
15255: LD_VAR 0 13
15259: ARRAY
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: CALL_OW 437
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PUSH
15274: LD_INT 1
15276: ARRAY
15277: PUSH
15278: LD_STRING e
15280: EQUAL
15281: IFFALSE 15304
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15283: LD_VAR 0 18
15287: PUSH
15288: LD_VAR 0 13
15292: ARRAY
15293: PUSH
15294: LD_INT 1
15296: ARRAY
15297: PPUSH
15298: EMPTY
15299: PPUSH
15300: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15304: LD_VAR 0 18
15308: PUSH
15309: LD_VAR 0 13
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: CALL_OW 310
15323: IFFALSE 15344
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15325: LD_VAR 0 18
15329: PUSH
15330: LD_VAR 0 13
15334: ARRAY
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15344: LD_VAR 0 18
15348: PUSH
15349: LD_VAR 0 13
15353: ARRAY
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: PPUSH
15359: LD_VAR 0 35
15363: PPUSH
15364: CALL_OW 189
// end ;
15368: GO 15181
15370: POP
15371: POP
// end ;
15372: GO 14835
15374: POP
15375: POP
// end else
15376: GO 15583
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15378: LD_VAR 0 21
15382: PUSH
15383: LD_VAR 0 21
15387: PPUSH
15388: LD_INT 56
15390: PUSH
15391: EMPTY
15392: LIST
15393: PPUSH
15394: CALL_OW 72
15398: AND
15399: PUSH
15400: LD_VAR 0 30
15404: AND
15405: IFFALSE 15583
// for i := 1 to personel do
15407: LD_ADDR_VAR 0 13
15411: PUSH
15412: DOUBLE
15413: LD_INT 1
15415: DEC
15416: ST_TO_ADDR
15417: LD_VAR 0 18
15421: PUSH
15422: FOR_TO
15423: IFFALSE 15581
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15425: LD_VAR 0 18
15429: PUSH
15430: LD_VAR 0 13
15434: ARRAY
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: PPUSH
15440: CALL_OW 257
15444: PUSH
15445: LD_INT 3
15447: EQUAL
15448: PUSH
15449: LD_VAR 0 18
15453: PUSH
15454: LD_VAR 0 13
15458: ARRAY
15459: PUSH
15460: LD_INT 3
15462: ARRAY
15463: PUSH
15464: LD_INT 1
15466: EQUAL
15467: AND
15468: IFFALSE 15579
// begin if not personel [ i ] [ 2 ] then
15470: LD_VAR 0 18
15474: PUSH
15475: LD_VAR 0 13
15479: ARRAY
15480: PUSH
15481: LD_INT 2
15483: ARRAY
15484: NOT
15485: IFFALSE 15545
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15487: LD_ADDR_VAR 0 18
15491: PUSH
15492: LD_VAR 0 18
15496: PPUSH
15497: LD_VAR 0 13
15501: PUSH
15502: LD_VAR 0 18
15506: PUSH
15507: LD_VAR 0 13
15511: ARRAY
15512: PUSH
15513: LD_INT 1
15515: MINUS
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: LD_VAR 0 30
15525: PUSH
15526: LD_INT 1
15528: PPUSH
15529: LD_VAR 0 30
15533: PPUSH
15534: CALL_OW 12
15538: ARRAY
15539: PPUSH
15540: CALL 35931 0 3
15544: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15545: LD_VAR 0 18
15549: PUSH
15550: LD_VAR 0 13
15554: ARRAY
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 2
15573: ARRAY
15574: PPUSH
15575: CALL_OW 120
// end ;
15579: GO 15422
15581: POP
15582: POP
// for i := 1 to personel do
15583: LD_ADDR_VAR 0 13
15587: PUSH
15588: DOUBLE
15589: LD_INT 1
15591: DEC
15592: ST_TO_ADDR
15593: LD_VAR 0 18
15597: PUSH
15598: FOR_TO
15599: IFFALSE 15640
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15601: LD_ADDR_VAR 0 22
15605: PUSH
15606: LD_VAR 0 22
15610: PUSH
15611: LD_VAR 0 18
15615: PUSH
15616: LD_VAR 0 13
15620: ARRAY
15621: PPUSH
15622: LD_INT 25
15624: PUSH
15625: LD_INT 4
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 72
15636: ADD
15637: ST_TO_ADDR
15638: GO 15598
15640: POP
15641: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15642: LD_VAR 0 22
15646: PUSH
15647: LD_VAR 0 4
15651: PPUSH
15652: LD_INT 22
15654: PUSH
15655: LD_VAR 0 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 3
15676: PUSH
15677: LD_INT 24
15679: PUSH
15680: LD_INT 1000
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: AND
15701: IFFALSE 16218
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15703: LD_ADDR_VAR 0 35
15707: PUSH
15708: LD_VAR 0 4
15712: PPUSH
15713: LD_INT 22
15715: PUSH
15716: LD_VAR 0 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 21
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 3
15737: PUSH
15738: LD_INT 24
15740: PUSH
15741: LD_INT 1000
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: PPUSH
15757: CALL_OW 70
15761: PUSH
15762: FOR_IN
15763: IFFALSE 16214
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15765: LD_VAR 0 35
15769: PPUSH
15770: LD_VAR 0 5
15774: PPUSH
15775: CALL_OW 299
15779: PUSH
15780: LD_INT 5
15782: LESS
15783: IFFALSE 15991
// for i := 1 to personel do
15785: LD_ADDR_VAR 0 13
15789: PUSH
15790: DOUBLE
15791: LD_INT 1
15793: DEC
15794: ST_TO_ADDR
15795: LD_VAR 0 18
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15989
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15803: LD_VAR 0 18
15807: PUSH
15808: LD_VAR 0 13
15812: ARRAY
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: CALL_OW 257
15822: PUSH
15823: LD_INT 4
15825: EQUAL
15826: PUSH
15827: LD_VAR 0 18
15831: PUSH
15832: LD_VAR 0 13
15836: ARRAY
15837: PUSH
15838: LD_INT 3
15840: ARRAY
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: AND
15846: IFFALSE 15987
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15848: LD_VAR 0 18
15852: PUSH
15853: LD_VAR 0 13
15857: ARRAY
15858: PUSH
15859: LD_INT 1
15861: ARRAY
15862: PPUSH
15863: CALL_OW 437
15867: IFFALSE 15923
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15869: LD_VAR 0 18
15873: PUSH
15874: LD_VAR 0 13
15878: ARRAY
15879: PUSH
15880: LD_INT 1
15882: ARRAY
15883: PPUSH
15884: CALL_OW 437
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PUSH
15897: LD_STRING e
15899: EQUAL
15900: IFFALSE 15923
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15902: LD_VAR 0 18
15906: PUSH
15907: LD_VAR 0 13
15911: ARRAY
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PPUSH
15917: EMPTY
15918: PPUSH
15919: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 13
15932: ARRAY
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: CALL_OW 310
15942: IFFALSE 15963
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15944: LD_VAR 0 18
15948: PUSH
15949: LD_VAR 0 13
15953: ARRAY
15954: PUSH
15955: LD_INT 1
15957: ARRAY
15958: PPUSH
15959: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15963: LD_VAR 0 18
15967: PUSH
15968: LD_VAR 0 13
15972: ARRAY
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: LD_VAR 0 35
15982: PPUSH
15983: CALL_OW 188
// end ;
15987: GO 15800
15989: POP
15990: POP
// if GetLives ( damageUnit ) < 250 then
15991: LD_VAR 0 35
15995: PPUSH
15996: CALL_OW 256
16000: PUSH
16001: LD_INT 250
16003: LESS
16004: IFFALSE 16212
// for i := 1 to personel do
16006: LD_ADDR_VAR 0 13
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_VAR 0 18
16020: PUSH
16021: FOR_TO
16022: IFFALSE 16210
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16024: LD_VAR 0 18
16028: PUSH
16029: LD_VAR 0 13
16033: ARRAY
16034: PUSH
16035: LD_INT 1
16037: ARRAY
16038: PPUSH
16039: CALL_OW 257
16043: PUSH
16044: LD_INT 4
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 18
16052: PUSH
16053: LD_VAR 0 13
16057: ARRAY
16058: PUSH
16059: LD_INT 3
16061: ARRAY
16062: PUSH
16063: LD_INT 1
16065: EQUAL
16066: AND
16067: IFFALSE 16208
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16069: LD_VAR 0 18
16073: PUSH
16074: LD_VAR 0 13
16078: ARRAY
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 437
16088: IFFALSE 16144
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16090: LD_VAR 0 18
16094: PUSH
16095: LD_VAR 0 13
16099: ARRAY
16100: PUSH
16101: LD_INT 1
16103: ARRAY
16104: PPUSH
16105: CALL_OW 437
16109: PUSH
16110: LD_INT 1
16112: ARRAY
16113: PUSH
16114: LD_INT 1
16116: ARRAY
16117: PUSH
16118: LD_STRING e
16120: EQUAL
16121: IFFALSE 16144
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16123: LD_VAR 0 18
16127: PUSH
16128: LD_VAR 0 13
16132: ARRAY
16133: PUSH
16134: LD_INT 1
16136: ARRAY
16137: PPUSH
16138: EMPTY
16139: PPUSH
16140: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16144: LD_VAR 0 18
16148: PUSH
16149: LD_VAR 0 13
16153: ARRAY
16154: PUSH
16155: LD_INT 1
16157: ARRAY
16158: PPUSH
16159: CALL_OW 310
16163: IFFALSE 16184
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16165: LD_VAR 0 18
16169: PUSH
16170: LD_VAR 0 13
16174: ARRAY
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16184: LD_VAR 0 18
16188: PUSH
16189: LD_VAR 0 13
16193: ARRAY
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: LD_VAR 0 35
16203: PPUSH
16204: CALL_OW 188
// end ;
16208: GO 16021
16210: POP
16211: POP
// end ;
16212: GO 15762
16214: POP
16215: POP
// end else
16216: GO 16423
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16218: LD_VAR 0 22
16222: PUSH
16223: LD_VAR 0 22
16227: PPUSH
16228: LD_INT 56
16230: PUSH
16231: EMPTY
16232: LIST
16233: PPUSH
16234: CALL_OW 72
16238: AND
16239: PUSH
16240: LD_VAR 0 31
16244: AND
16245: IFFALSE 16423
// for i := 1 to personel do
16247: LD_ADDR_VAR 0 13
16251: PUSH
16252: DOUBLE
16253: LD_INT 1
16255: DEC
16256: ST_TO_ADDR
16257: LD_VAR 0 18
16261: PUSH
16262: FOR_TO
16263: IFFALSE 16421
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16265: LD_VAR 0 18
16269: PUSH
16270: LD_VAR 0 13
16274: ARRAY
16275: PUSH
16276: LD_INT 1
16278: ARRAY
16279: PPUSH
16280: CALL_OW 257
16284: PUSH
16285: LD_INT 4
16287: EQUAL
16288: PUSH
16289: LD_VAR 0 18
16293: PUSH
16294: LD_VAR 0 13
16298: ARRAY
16299: PUSH
16300: LD_INT 3
16302: ARRAY
16303: PUSH
16304: LD_INT 1
16306: EQUAL
16307: AND
16308: IFFALSE 16419
// begin if not personel [ i ] [ 2 ] then
16310: LD_VAR 0 18
16314: PUSH
16315: LD_VAR 0 13
16319: ARRAY
16320: PUSH
16321: LD_INT 2
16323: ARRAY
16324: NOT
16325: IFFALSE 16385
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16327: LD_ADDR_VAR 0 18
16331: PUSH
16332: LD_VAR 0 18
16336: PPUSH
16337: LD_VAR 0 13
16341: PUSH
16342: LD_VAR 0 18
16346: PUSH
16347: LD_VAR 0 13
16351: ARRAY
16352: PUSH
16353: LD_INT 1
16355: MINUS
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: LD_VAR 0 31
16365: PUSH
16366: LD_INT 1
16368: PPUSH
16369: LD_VAR 0 31
16373: PPUSH
16374: CALL_OW 12
16378: ARRAY
16379: PPUSH
16380: CALL 35931 0 3
16384: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16385: LD_VAR 0 18
16389: PUSH
16390: LD_VAR 0 13
16394: ARRAY
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: LD_VAR 0 18
16404: PUSH
16405: LD_VAR 0 13
16409: ARRAY
16410: PUSH
16411: LD_INT 2
16413: ARRAY
16414: PPUSH
16415: CALL_OW 120
// end ;
16419: GO 16262
16421: POP
16422: POP
// wait ( 0 0$01 ) ;
16423: LD_INT 35
16425: PPUSH
16426: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16430: LD_VAR 0 24
16434: PUSH
16435: LD_VAR 0 8
16439: LESS
16440: PUSH
16441: LD_VAR 0 30
16445: AND
16446: IFFALSE 16696
// begin tmp = vehiclesAmount - vehicles ;
16448: LD_ADDR_VAR 0 15
16452: PUSH
16453: LD_VAR 0 8
16457: PUSH
16458: LD_VAR 0 24
16462: MINUS
16463: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16464: LD_ADDR_VAR 0 27
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: LD_VAR 0 2
16478: PPUSH
16479: CALL 7743 0 2
16483: ST_TO_ADDR
// for i := 1 to tmp do
16484: LD_ADDR_VAR 0 13
16488: PUSH
16489: DOUBLE
16490: LD_INT 1
16492: DEC
16493: ST_TO_ADDR
16494: LD_VAR 0 15
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16692
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16502: LD_ADDR_VAR 0 15
16506: PUSH
16507: LD_VAR 0 27
16511: PUSH
16512: LD_INT 1
16514: PPUSH
16515: LD_VAR 0 27
16519: PPUSH
16520: CALL_OW 12
16524: ARRAY
16525: ST_TO_ADDR
// if tmp then
16526: LD_VAR 0 15
16530: IFFALSE 16690
// begin if tmp in [ 34 , 14 , 71 ] then
16532: LD_VAR 0 15
16536: PUSH
16537: LD_INT 34
16539: PUSH
16540: LD_INT 14
16542: PUSH
16543: LD_INT 71
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: IN
16551: IFFALSE 16589
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16553: LD_ADDR_VAR 0 28
16557: PUSH
16558: LD_INT 4
16560: PUSH
16561: EMPTY
16562: LIST
16563: PUSH
16564: LD_INT 14
16566: PUSH
16567: EMPTY
16568: LIST
16569: PUSH
16570: LD_INT 24
16572: PUSH
16573: EMPTY
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_VAR 0 2
16585: ARRAY
16586: ST_TO_ADDR
16587: GO 16647
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16589: LD_ADDR_VAR 0 28
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: LD_INT 3
16599: PUSH
16600: LD_INT 4
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 13
16610: PUSH
16611: LD_INT 14
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 23
16623: PUSH
16624: LD_INT 24
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_VAR 0 2
16645: ARRAY
16646: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16647: LD_VAR 0 30
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PPUSH
16656: LD_VAR 0 28
16660: PUSH
16661: LD_INT 1
16663: PPUSH
16664: LD_VAR 0 28
16668: PPUSH
16669: CALL_OW 12
16673: ARRAY
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: LD_VAR 0 15
16685: PPUSH
16686: CALL_OW 185
// end ; end ;
16690: GO 16499
16692: POP
16693: POP
// end else
16694: GO 16709
// ComCancel ( factory [ 1 ] ) ;
16696: LD_VAR 0 30
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PPUSH
16705: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16709: LD_ADDR_VAR 0 23
16713: PUSH
16714: LD_VAR 0 4
16718: PPUSH
16719: LD_INT 22
16721: PUSH
16722: LD_VAR 0 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 70
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16921
// begin vehicleInList = false ;
16753: LD_ADDR_VAR 0 25
16757: PUSH
16758: LD_INT 0
16760: ST_TO_ADDR
// for i := 1 to vehicles do
16761: LD_ADDR_VAR 0 13
16765: PUSH
16766: DOUBLE
16767: LD_INT 1
16769: DEC
16770: ST_TO_ADDR
16771: LD_VAR 0 24
16775: PUSH
16776: FOR_TO
16777: IFFALSE 16807
// begin if vehicle in vehicles [ i ] then
16779: LD_VAR 0 23
16783: PUSH
16784: LD_VAR 0 24
16788: PUSH
16789: LD_VAR 0 13
16793: ARRAY
16794: IN
16795: IFFALSE 16805
// vehicleInList = true ;
16797: LD_ADDR_VAR 0 25
16801: PUSH
16802: LD_INT 1
16804: ST_TO_ADDR
// end ;
16805: GO 16776
16807: POP
16808: POP
// if not vehicleInList then
16809: LD_VAR 0 25
16813: NOT
16814: IFFALSE 16919
// if vehicles < vehiclesToAttackAmount then
16816: LD_VAR 0 24
16820: PUSH
16821: LD_VAR 0 10
16825: LESS
16826: IFFALSE 16878
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16828: LD_ADDR_VAR 0 24
16832: PUSH
16833: LD_VAR 0 24
16837: PUSH
16838: LD_VAR 0 23
16842: PUSH
16843: LD_VAR 0 23
16847: PPUSH
16848: CALL_OW 313
16852: PUSH
16853: LD_INT 1
16855: ARRAY
16856: PUSH
16857: LD_VAR 0 23
16861: PPUSH
16862: CALL_OW 302
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: ADD
16875: ST_TO_ADDR
16876: GO 16919
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16878: LD_ADDR_VAR 0 24
16882: PUSH
16883: LD_VAR 0 24
16887: PUSH
16888: LD_VAR 0 23
16892: PUSH
16893: LD_VAR 0 23
16897: PPUSH
16898: CALL_OW 313
16902: PUSH
16903: LD_INT 1
16905: ARRAY
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: ADD
16918: ST_TO_ADDR
// end ;
16919: GO 16750
16921: POP
16922: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16923: LD_ADDR_VAR 0 37
16927: PUSH
16928: LD_VAR 0 7
16932: PPUSH
16933: LD_INT 81
16935: PUSH
16936: LD_VAR 0 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 70
16949: PUSH
16950: FOR_IN
16951: IFFALSE 17130
// begin defenceUnits = [ ] ;
16953: LD_ADDR_VAR 0 26
16957: PUSH
16958: EMPTY
16959: ST_TO_ADDR
// for i := 1 to personel do
16960: LD_ADDR_VAR 0 13
16964: PUSH
16965: DOUBLE
16966: LD_INT 1
16968: DEC
16969: ST_TO_ADDR
16970: LD_VAR 0 18
16974: PUSH
16975: FOR_TO
16976: IFFALSE 17026
// if personel [ i ] [ 3 ] = 2 then
16978: LD_VAR 0 18
16982: PUSH
16983: LD_VAR 0 13
16987: ARRAY
16988: PUSH
16989: LD_INT 3
16991: ARRAY
16992: PUSH
16993: LD_INT 2
16995: EQUAL
16996: IFFALSE 17024
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16998: LD_ADDR_VAR 0 26
17002: PUSH
17003: LD_VAR 0 26
17007: PUSH
17008: LD_VAR 0 18
17012: PUSH
17013: LD_VAR 0 13
17017: ARRAY
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: ADD
17023: ST_TO_ADDR
17024: GO 16975
17026: POP
17027: POP
// for i := 1 to vehicles do
17028: LD_ADDR_VAR 0 13
17032: PUSH
17033: DOUBLE
17034: LD_INT 1
17036: DEC
17037: ST_TO_ADDR
17038: LD_VAR 0 24
17042: PUSH
17043: FOR_TO
17044: IFFALSE 17094
// if vehicles [ i ] [ 3 ] = 2 then
17046: LD_VAR 0 24
17050: PUSH
17051: LD_VAR 0 13
17055: ARRAY
17056: PUSH
17057: LD_INT 3
17059: ARRAY
17060: PUSH
17061: LD_INT 2
17063: EQUAL
17064: IFFALSE 17092
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17066: LD_ADDR_VAR 0 26
17070: PUSH
17071: LD_VAR 0 26
17075: PUSH
17076: LD_VAR 0 24
17080: PUSH
17081: LD_VAR 0 13
17085: ARRAY
17086: PUSH
17087: LD_INT 1
17089: ARRAY
17090: ADD
17091: ST_TO_ADDR
17092: GO 17043
17094: POP
17095: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17096: LD_VAR 0 26
17100: PPUSH
17101: LD_INT 3
17103: PUSH
17104: LD_INT 60
17106: PUSH
17107: EMPTY
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 72
17118: PPUSH
17119: LD_VAR 0 37
17123: PPUSH
17124: CALL_OW 175
// end ;
17128: GO 16950
17130: POP
17131: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17132: LD_ADDR_VAR 0 38
17136: PUSH
17137: LD_INT 22
17139: PUSH
17140: LD_VAR 0 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 30
17154: PUSH
17155: LD_INT 31
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 30
17164: PUSH
17165: LD_INT 32
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 30
17174: PUSH
17175: LD_INT 33
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 4
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 30
17194: PUSH
17195: LD_INT 5
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17219: LD_ADDR_VAR 0 39
17223: PUSH
17224: LD_INT 81
17226: PUSH
17227: LD_VAR 0 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 21
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 58
17248: PUSH
17249: EMPTY
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17262: LD_VAR 0 38
17266: PUSH
17267: LD_VAR 0 39
17271: AND
17272: IFFALSE 17342
// for i in attackBuildings do
17274: LD_ADDR_VAR 0 13
17278: PUSH
17279: LD_VAR 0 38
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17340
// for j in enemyBuildings do
17287: LD_ADDR_VAR 0 14
17291: PUSH
17292: LD_VAR 0 39
17296: PUSH
17297: FOR_IN
17298: IFFALSE 17336
// if GetDistUnits ( i , j ) < 12 then
17300: LD_VAR 0 13
17304: PPUSH
17305: LD_VAR 0 14
17309: PPUSH
17310: CALL_OW 296
17314: PUSH
17315: LD_INT 12
17317: LESS
17318: IFFALSE 17334
// ComAttackUnit ( i , j ) ;
17320: LD_VAR 0 13
17324: PPUSH
17325: LD_VAR 0 14
17329: PPUSH
17330: CALL_OW 115
17334: GO 17297
17336: POP
17337: POP
17338: GO 17284
17340: POP
17341: POP
// until not personel or not enableOmicronAI ;
17342: LD_VAR 0 18
17346: NOT
17347: PUSH
17348: LD_EXP 29
17352: NOT
17353: OR
17354: IFFALSE 12358
// end ;
17356: LD_VAR 0 12
17360: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
17365: PPUSH
// weapons = [ ru_gun ] ;
17366: LD_ADDR_VAR 0 3
17370: PUSH
17371: LD_INT 44
17373: PUSH
17374: EMPTY
17375: LIST
17376: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17377: LD_ADDR_VAR 0 2
17381: PUSH
17382: LD_EXP 71
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17420
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17390: LD_VAR 0 2
17394: PPUSH
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 1
17402: PPUSH
17403: LD_VAR 0 3
17407: PPUSH
17408: CALL_OW 12
17412: ARRAY
17413: PPUSH
17414: CALL_OW 208
17418: GO 17387
17420: POP
17421: POP
// end ;
17422: LD_VAR 0 1
17426: RET
// export function KirovProduceVehicles ( factory ) ; begin
17427: LD_INT 0
17429: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 21
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: LD_INT 1
17443: PPUSH
17444: LD_INT 51
17446: PPUSH
17447: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_INT 21
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_INT 1
17464: PPUSH
17465: LD_INT 51
17467: PPUSH
17468: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_INT 21
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: LD_INT 51
17488: PPUSH
17489: CALL_OW 185
// case Difficulty of 1 :
17493: LD_OWVAR 67
17497: PUSH
17498: LD_INT 1
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17629
17506: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_INT 21
17514: PUSH
17515: LD_INT 23
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: PPUSH
17525: LD_INT 2
17527: PPUSH
17528: CALL_OW 12
17532: ARRAY
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_INT 43
17542: PPUSH
17543: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 23
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_INT 2
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_INT 43
17582: PPUSH
17583: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_INT 21
17594: PUSH
17595: LD_INT 23
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_INT 2
17607: PPUSH
17608: CALL_OW 12
17612: ARRAY
17613: PPUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_INT 1
17619: PPUSH
17620: LD_INT 44
17622: PPUSH
17623: CALL_OW 185
// end ; 2 :
17627: GO 17892
17629: LD_INT 2
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17760
17637: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17638: LD_VAR 0 1
17642: PPUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 23
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: PPUSH
17656: LD_INT 2
17658: PPUSH
17659: CALL_OW 12
17663: ARRAY
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 42
17673: PPUSH
17674: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17678: LD_VAR 0 1
17682: PPUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 23
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PPUSH
17696: LD_INT 2
17698: PPUSH
17699: CALL_OW 12
17703: ARRAY
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: LD_INT 43
17713: PPUSH
17714: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17718: LD_VAR 0 1
17722: PPUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 23
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_INT 2
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 1
17750: PPUSH
17751: LD_INT 44
17753: PPUSH
17754: CALL_OW 185
// end ; 3 :
17758: GO 17892
17760: LD_INT 3
17762: DOUBLE
17763: EQUAL
17764: IFTRUE 17768
17766: GO 17891
17768: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 23
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: PPUSH
17787: LD_INT 2
17789: PPUSH
17790: CALL_OW 12
17794: ARRAY
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: LD_INT 42
17804: PPUSH
17805: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_INT 21
17816: PUSH
17817: LD_INT 23
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PPUSH
17827: LD_INT 2
17829: PPUSH
17830: CALL_OW 12
17834: ARRAY
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 42
17844: PPUSH
17845: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: LD_INT 21
17856: PUSH
17857: LD_INT 23
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: PPUSH
17867: LD_INT 2
17869: PPUSH
17870: CALL_OW 12
17874: ARRAY
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: LD_INT 44
17884: PPUSH
17885: CALL_OW 185
// end ; end ;
17889: GO 17892
17891: POP
// end ;
17892: LD_VAR 0 2
17896: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
// vehicles = [ ] ;
17906: LD_ADDR_VAR 0 3
17910: PUSH
17911: EMPTY
17912: ST_TO_ADDR
// cargoRefuel = [ ] ;
17913: LD_ADDR_VAR 0 7
17917: PUSH
17918: EMPTY
17919: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17920: LD_ADDR_VAR 0 4
17924: PUSH
17925: LD_EXP 75
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17980
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_VAR 0 3
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: LD_VAR 0 4
17950: PUSH
17951: LD_VAR 0 4
17955: PPUSH
17956: CALL_OW 313
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: PPUSH
17973: CALL_OW 2
17977: ST_TO_ADDR
17978: GO 17930
17980: POP
17981: POP
// repeat for i := 1 to vehicles do
17982: LD_ADDR_VAR 0 2
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_VAR 0 3
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18036
// if vehicles [ i ] [ 3 ] = 1 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 2
18009: ARRAY
18010: PUSH
18011: LD_INT 3
18013: ARRAY
18014: PUSH
18015: LD_INT 1
18017: EQUAL
18018: IFFALSE 18034
// goodVehs = goodVehs + 1 ;
18020: LD_ADDR_VAR 0 5
18024: PUSH
18025: LD_VAR 0 5
18029: PUSH
18030: LD_INT 1
18032: PLUS
18033: ST_TO_ADDR
18034: GO 17997
18036: POP
18037: POP
// if goodVehs = vehicles then
18038: LD_VAR 0 5
18042: PUSH
18043: LD_VAR 0 3
18047: EQUAL
18048: IFFALSE 18271
// for i := 1 to vehicles do
18050: LD_ADDR_VAR 0 2
18054: PUSH
18055: DOUBLE
18056: LD_INT 1
18058: DEC
18059: ST_TO_ADDR
18060: LD_VAR 0 3
18064: PUSH
18065: FOR_TO
18066: IFFALSE 18269
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: CALL_OW 314
18087: NOT
18088: IFFALSE 18267
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18090: LD_VAR 0 3
18094: PUSH
18095: LD_VAR 0 2
18099: ARRAY
18100: PUSH
18101: LD_INT 1
18103: ARRAY
18104: PPUSH
18105: CALL_OW 261
18109: PUSH
18110: LD_INT 50
18112: LESS
18113: IFFALSE 18242
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18115: LD_ADDR_VAR 0 6
18119: PUSH
18120: LD_INT 22
18122: PUSH
18123: LD_INT 6
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 34
18142: PUSH
18143: LD_INT 51
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 50
18152: PUSH
18153: EMPTY
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: PUSH
18167: FOR_IN
18168: IFFALSE 18206
// if GetCargo ( cargo , mat_oil ) > 0 then
18170: LD_VAR 0 6
18174: PPUSH
18175: LD_INT 2
18177: PPUSH
18178: CALL_OW 289
18182: PUSH
18183: LD_INT 0
18185: GREATER
18186: IFFALSE 18204
// cargoRefuel = cargoRefuel ^ cargo ;
18188: LD_ADDR_VAR 0 7
18192: PUSH
18193: LD_VAR 0 7
18197: PUSH
18198: LD_VAR 0 6
18202: ADD
18203: ST_TO_ADDR
18204: GO 18167
18206: POP
18207: POP
// if cargo then
18208: LD_VAR 0 6
18212: IFFALSE 18242
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18214: LD_VAR 0 3
18218: PUSH
18219: LD_VAR 0 2
18223: ARRAY
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: LD_VAR 0 6
18233: PUSH
18234: LD_INT 1
18236: ARRAY
18237: PPUSH
18238: CALL 8357 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18242: LD_VAR 0 3
18246: PUSH
18247: LD_VAR 0 2
18251: ARRAY
18252: PUSH
18253: LD_INT 1
18255: ARRAY
18256: PPUSH
18257: LD_INT 26
18259: PPUSH
18260: LD_INT 35
18262: PPUSH
18263: CALL_OW 174
// end ; end ;
18267: GO 18065
18269: POP
18270: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18271: LD_VAR 0 3
18275: PUSH
18276: LD_VAR 0 2
18280: ARRAY
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL 10109 0 2
18293: PUSH
18294: LD_VAR 0 3
18298: PUSH
18299: LD_VAR 0 2
18303: ARRAY
18304: PUSH
18305: LD_INT 2
18307: ARRAY
18308: PPUSH
18309: CALL_OW 310
18313: NOT
18314: AND
18315: IFFALSE 18351
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18317: LD_VAR 0 3
18321: PUSH
18322: LD_VAR 0 2
18326: ARRAY
18327: PUSH
18328: LD_INT 2
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 3
18336: PUSH
18337: LD_VAR 0 2
18341: ARRAY
18342: PUSH
18343: LD_INT 1
18345: ARRAY
18346: PPUSH
18347: CALL_OW 120
// goodVehs = 0 ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// for i := 1 to vehicles do
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: DOUBLE
18365: LD_INT 1
18367: DEC
18368: ST_TO_ADDR
18369: LD_VAR 0 3
18373: PUSH
18374: FOR_TO
18375: IFFALSE 18901
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18377: LD_VAR 0 3
18381: PUSH
18382: LD_VAR 0 2
18386: ARRAY
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: PPUSH
18392: CALL_OW 256
18396: PUSH
18397: LD_INT 500
18399: LESS
18400: PUSH
18401: LD_VAR 0 3
18405: PUSH
18406: LD_VAR 0 2
18410: ARRAY
18411: PUSH
18412: LD_INT 1
18414: ARRAY
18415: PPUSH
18416: LD_INT 78
18418: PPUSH
18419: LD_INT 39
18421: PPUSH
18422: CALL_OW 297
18426: PUSH
18427: LD_INT 9
18429: LESS
18430: NOT
18431: AND
18432: IFFALSE 18497
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_VAR 0 3
18453: PUSH
18454: LD_VAR 0 2
18458: ARRAY
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: LD_INT 2
18466: PPUSH
18467: CALL 35931 0 3
18471: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18472: LD_VAR 0 3
18476: PUSH
18477: LD_VAR 0 2
18481: ARRAY
18482: PUSH
18483: LD_INT 1
18485: ARRAY
18486: PPUSH
18487: LD_INT 78
18489: PPUSH
18490: LD_INT 39
18492: PPUSH
18493: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18497: LD_VAR 0 3
18501: PUSH
18502: LD_VAR 0 2
18506: ARRAY
18507: PUSH
18508: LD_INT 1
18510: ARRAY
18511: PPUSH
18512: CALL_OW 256
18516: PUSH
18517: LD_INT 500
18519: LESS
18520: PUSH
18521: LD_VAR 0 3
18525: PUSH
18526: LD_VAR 0 2
18530: ARRAY
18531: PUSH
18532: LD_INT 1
18534: ARRAY
18535: PPUSH
18536: LD_INT 78
18538: PPUSH
18539: LD_INT 39
18541: PPUSH
18542: CALL_OW 297
18546: PUSH
18547: LD_INT 9
18549: LESS
18550: AND
18551: PUSH
18552: LD_VAR 0 3
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PUSH
18563: LD_INT 1
18565: ARRAY
18566: PPUSH
18567: LD_INT 1
18569: PPUSH
18570: CALL 10109 0 2
18574: NOT
18575: AND
18576: IFFALSE 18631
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18578: LD_VAR 0 3
18582: PUSH
18583: LD_VAR 0 2
18587: ARRAY
18588: PUSH
18589: LD_INT 2
18591: ARRAY
18592: PPUSH
18593: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18597: LD_VAR 0 3
18601: PUSH
18602: LD_VAR 0 2
18606: ARRAY
18607: PUSH
18608: LD_INT 2
18610: ARRAY
18611: PPUSH
18612: LD_VAR 0 3
18616: PUSH
18617: LD_VAR 0 2
18621: ARRAY
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: PPUSH
18627: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_VAR 0 2
18640: ARRAY
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: CALL_OW 256
18650: PUSH
18651: LD_INT 1000
18653: EQUAL
18654: PUSH
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 2
18664: ARRAY
18665: PUSH
18666: LD_INT 3
18668: ARRAY
18669: PUSH
18670: LD_INT 2
18672: EQUAL
18673: AND
18674: IFFALSE 18748
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18676: LD_ADDR_VAR 0 3
18680: PUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_VAR 0 2
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_VAR 0 2
18700: ARRAY
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL 35931 0 3
18713: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18714: LD_VAR 0 3
18718: PUSH
18719: LD_VAR 0 2
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 2
18738: ARRAY
18739: PUSH
18740: LD_INT 1
18742: ARRAY
18743: PPUSH
18744: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_VAR 0 2
18757: ARRAY
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: CALL_OW 256
18767: PUSH
18768: LD_INT 250
18770: LESS
18771: IFFALSE 18798
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18773: LD_ADDR_VAR 0 3
18777: PUSH
18778: LD_VAR 0 3
18782: PUSH
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 2
18792: ARRAY
18793: PUSH
18794: EMPTY
18795: LIST
18796: DIFF
18797: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_VAR 0 2
18807: ARRAY
18808: PUSH
18809: LD_INT 2
18811: ARRAY
18812: PPUSH
18813: CALL_OW 256
18817: PUSH
18818: LD_INT 250
18820: LESS
18821: PUSH
18822: LD_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: ARRAY
18832: PUSH
18833: LD_INT 1
18835: ARRAY
18836: PPUSH
18837: CALL_OW 256
18841: PUSH
18842: LD_INT 250
18844: GREATER
18845: AND
18846: IFFALSE 18899
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18848: LD_ADDR_EXP 30
18852: PUSH
18853: LD_EXP 30
18857: PUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 2
18867: ARRAY
18868: PUSH
18869: LD_INT 1
18871: ARRAY
18872: ADD
18873: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18874: LD_ADDR_VAR 0 3
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: LD_VAR 0 3
18888: PUSH
18889: LD_VAR 0 2
18893: ARRAY
18894: PUSH
18895: EMPTY
18896: LIST
18897: DIFF
18898: ST_TO_ADDR
// end ; end ;
18899: GO 18374
18901: POP
18902: POP
// wait ( 0 0$1 ) ;
18903: LD_INT 35
18905: PPUSH
18906: CALL_OW 67
// until omicronSurrender ;
18910: LD_EXP 23
18914: IFFALSE 17982
// end ;
18916: LD_VAR 0 1
18920: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18921: LD_INT 0
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
// inBase = false ;
18937: LD_ADDR_VAR 0 15
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18945: LD_ADDR_VAR 0 8
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: LD_INT 22
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: PPUSH
18968: CALL_OW 70
18972: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18973: LD_ADDR_VAR 0 9
18977: PUSH
18978: LD_VAR 0 2
18982: PPUSH
18983: CALL_OW 435
18987: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18988: LD_ADDR_VAR 0 12
18992: PUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: LD_INT 50
19000: PUSH
19001: EMPTY
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 21
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 72
19051: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19052: LD_ADDR_VAR 0 13
19056: PUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 50
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: LD_INT 25
19070: PUSH
19071: LD_INT 4
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 72
19086: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19087: LD_ADDR_VAR 0 14
19091: PUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: LD_INT 3
19099: PUSH
19100: LD_INT 24
19102: PUSH
19103: LD_INT 1000
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PPUSH
19114: CALL_OW 72
19118: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19119: LD_ADDR_VAR 0 6
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19142: LD_ADDR_VAR 0 5
19146: PUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: LD_INT 50
19154: PUSH
19155: EMPTY
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: PPUSH
19161: CALL_OW 72
19165: PUSH
19166: FOR_IN
19167: IFFALSE 19914
// begin if attackUnits and medics then
19169: LD_VAR 0 12
19173: PUSH
19174: LD_VAR 0 13
19178: AND
19179: IFFALSE 19246
// begin if damageUnits then
19181: LD_VAR 0 14
19185: IFFALSE 19207
// ComHeal ( medics , damageUnits [ 1 ] ) else
19187: LD_VAR 0 13
19191: PPUSH
19192: LD_VAR 0 14
19196: PUSH
19197: LD_INT 1
19199: ARRAY
19200: PPUSH
19201: CALL_OW 128
19205: GO 19244
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19207: LD_VAR 0 13
19211: PPUSH
19212: LD_VAR 0 12
19216: PUSH
19217: LD_INT 1
19219: ARRAY
19220: PPUSH
19221: CALL_OW 250
19225: PPUSH
19226: LD_VAR 0 12
19230: PUSH
19231: LD_INT 1
19233: ARRAY
19234: PPUSH
19235: CALL_OW 251
19239: PPUSH
19240: CALL_OW 111
// end else
19244: GO 19275
// begin if not attackUnits and medics then
19246: LD_VAR 0 12
19250: NOT
19251: PUSH
19252: LD_VAR 0 13
19256: AND
19257: IFFALSE 19275
// attackUnits = attackUnits ^ medics ;
19259: LD_ADDR_VAR 0 12
19263: PUSH
19264: LD_VAR 0 12
19268: PUSH
19269: LD_VAR 0 13
19273: ADD
19274: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19275: LD_ADDR_VAR 0 4
19279: PUSH
19280: DOUBLE
19281: LD_INT 1
19283: DEC
19284: ST_TO_ADDR
19285: LD_VAR 0 9
19289: PUSH
19290: LD_INT 2
19292: DIVREAL
19293: PUSH
19294: FOR_TO
19295: IFFALSE 19334
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19297: LD_VAR 0 12
19301: PPUSH
19302: LD_VAR 0 9
19306: PUSH
19307: LD_VAR 0 4
19311: ARRAY
19312: PPUSH
19313: LD_VAR 0 9
19317: PUSH
19318: LD_VAR 0 4
19322: PUSH
19323: LD_INT 1
19325: PLUS
19326: ARRAY
19327: PPUSH
19328: CALL_OW 176
19332: GO 19294
19334: POP
19335: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19336: LD_VAR 0 12
19340: PPUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: LD_INT 60
19356: PUSH
19357: EMPTY
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 72
19372: PPUSH
19373: LD_INT 27
19375: PPUSH
19376: LD_INT 34
19378: PPUSH
19379: CALL_OW 111
// wait ( 0 0$01 ) ;
19383: LD_INT 35
19385: PPUSH
19386: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19390: LD_VAR 0 8
19394: PUSH
19395: LD_VAR 0 12
19399: PPUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 60
19415: PUSH
19416: EMPTY
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 72
19431: AND
19432: IFFALSE 19615
// begin for playerUnit in playerUnits do
19434: LD_ADDR_VAR 0 7
19438: PUSH
19439: LD_VAR 0 6
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19611
// begin if Attacks ( playerUnit ) then
19447: LD_VAR 0 7
19451: PPUSH
19452: CALL_OW 320
19456: IFFALSE 19543
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19458: LD_VAR 0 7
19462: PPUSH
19463: CALL_OW 320
19467: PUSH
19468: LD_VAR 0 1
19472: IN
19473: PUSH
19474: LD_VAR 0 7
19478: PPUSH
19479: LD_VAR 0 5
19483: PPUSH
19484: CALL_OW 296
19488: PUSH
19489: LD_INT 13
19491: LESS
19492: AND
19493: IFFALSE 19541
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19495: LD_VAR 0 12
19499: PPUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: LD_INT 60
19515: PUSH
19516: EMPTY
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 72
19531: PPUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: CALL_OW 115
19541: GO 19609
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19543: LD_ADDR_VAR 0 10
19547: PUSH
19548: LD_VAR 0 8
19552: PPUSH
19553: LD_VAR 0 5
19557: PPUSH
19558: CALL_OW 74
19562: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19563: LD_VAR 0 12
19567: PPUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 3
19580: PUSH
19581: LD_INT 60
19583: PUSH
19584: EMPTY
19585: LIST
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 72
19599: PPUSH
19600: LD_VAR 0 10
19604: PPUSH
19605: CALL_OW 115
// end ; end ;
19609: GO 19444
19611: POP
19612: POP
// end else
19613: GO 19662
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19615: LD_VAR 0 12
19619: PPUSH
19620: LD_INT 21
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 3
19632: PUSH
19633: LD_INT 60
19635: PUSH
19636: EMPTY
19637: LIST
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 72
19651: PPUSH
19652: LD_INT 27
19654: PPUSH
19655: LD_INT 34
19657: PPUSH
19658: CALL_OW 111
// if enemyUnitsOnRoad then
19662: LD_VAR 0 8
19666: IFFALSE 19850
// begin for playerUnit in playerUnits do
19668: LD_ADDR_VAR 0 7
19672: PUSH
19673: LD_VAR 0 6
19677: PUSH
19678: FOR_IN
19679: IFFALSE 19846
// begin if Attacks ( playerUnit ) then
19681: LD_VAR 0 7
19685: PPUSH
19686: CALL_OW 320
19690: IFFALSE 19763
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19692: LD_VAR 0 7
19696: PPUSH
19697: CALL_OW 320
19701: PUSH
19702: LD_VAR 0 1
19706: IN
19707: PUSH
19708: LD_VAR 0 7
19712: PPUSH
19713: LD_VAR 0 5
19717: PPUSH
19718: CALL_OW 296
19722: PUSH
19723: LD_INT 13
19725: LESS
19726: AND
19727: IFFALSE 19761
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19729: LD_VAR 0 12
19733: PPUSH
19734: LD_INT 21
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: PPUSH
19747: CALL_OW 72
19751: PPUSH
19752: LD_VAR 0 7
19756: PPUSH
19757: CALL_OW 115
19761: GO 19844
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19763: LD_ADDR_VAR 0 10
19767: PUSH
19768: LD_VAR 0 8
19772: PPUSH
19773: LD_VAR 0 12
19777: PPUSH
19778: LD_INT 21
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 50
19790: PUSH
19791: EMPTY
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 72
19802: PUSH
19803: LD_INT 1
19805: ARRAY
19806: PPUSH
19807: CALL_OW 74
19811: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19812: LD_VAR 0 12
19816: PPUSH
19817: LD_INT 21
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: PPUSH
19830: CALL_OW 72
19834: PPUSH
19835: LD_VAR 0 10
19839: PPUSH
19840: CALL_OW 115
// end ; end ;
19844: GO 19678
19846: POP
19847: POP
// end else
19848: GO 19883
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19850: LD_VAR 0 12
19854: PPUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: PPUSH
19868: CALL_OW 72
19872: PPUSH
19873: LD_INT 27
19875: PPUSH
19876: LD_INT 34
19878: PPUSH
19879: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19883: LD_VAR 0 5
19887: PPUSH
19888: LD_INT 27
19890: PPUSH
19891: LD_INT 34
19893: PPUSH
19894: CALL_OW 297
19898: PUSH
19899: LD_INT 5
19901: LESS
19902: IFFALSE 19912
// inBase = true ;
19904: LD_ADDR_VAR 0 15
19908: PUSH
19909: LD_INT 1
19911: ST_TO_ADDR
// end ;
19912: GO 19166
19914: POP
19915: POP
// wait ( 0 0$1 ) ;
19916: LD_INT 35
19918: PPUSH
19919: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 50
19930: PUSH
19931: EMPTY
19932: LIST
19933: PPUSH
19934: CALL_OW 72
19938: PUSH
19939: LD_INT 0
19941: EQUAL
19942: PUSH
19943: LD_VAR 0 15
19947: OR
19948: IFFALSE 18945
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_INT 21
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 50
19967: PUSH
19968: EMPTY
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PPUSH
19975: CALL_OW 72
19979: PPUSH
19980: LD_INT 27
19982: PPUSH
19983: LD_INT 34
19985: PPUSH
19986: CALL_OW 111
// for i := 1 to units do
19990: LD_ADDR_VAR 0 4
19994: PUSH
19995: DOUBLE
19996: LD_INT 1
19998: DEC
19999: ST_TO_ADDR
20000: LD_VAR 0 1
20004: PUSH
20005: FOR_TO
20006: IFFALSE 20041
// if IsOk ( units [ i ] ) then
20008: LD_VAR 0 1
20012: PUSH
20013: LD_VAR 0 4
20017: ARRAY
20018: PPUSH
20019: CALL_OW 302
20023: IFFALSE 20039
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20025: LD_ADDR_EXP 12
20029: PUSH
20030: LD_EXP 12
20034: PUSH
20035: LD_INT 1
20037: PLUS
20038: ST_TO_ADDR
20039: GO 20005
20041: POP
20042: POP
// amSupportTroops = amSupportTroops diff units ;
20043: LD_ADDR_EXP 83
20047: PUSH
20048: LD_EXP 83
20052: PUSH
20053: LD_VAR 0 1
20057: DIFF
20058: ST_TO_ADDR
// newBase = amBase ;
20059: LD_ADDR_VAR 0 16
20063: PUSH
20064: LD_EXP 85
20068: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20069: LD_ADDR_VAR 0 16
20073: PUSH
20074: LD_VAR 0 16
20078: PUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: LD_INT 50
20086: PUSH
20087: EMPTY
20088: LIST
20089: PPUSH
20090: CALL_OW 72
20094: ADD
20095: ST_TO_ADDR
// amBase = newBase ;
20096: LD_ADDR_EXP 85
20100: PUSH
20101: LD_VAR 0 16
20105: ST_TO_ADDR
// end ; end_of_file
20106: LD_VAR 0 3
20110: RET
// export function Lose_Burlak ; begin
20111: LD_INT 0
20113: PPUSH
// YouLost ( Burlak ) ;
20114: LD_STRING Burlak
20116: PPUSH
20117: CALL_OW 104
// end ;
20121: LD_VAR 0 1
20125: RET
// export function Lose_Omicron ; begin
20126: LD_INT 0
20128: PPUSH
// YouLost ( Omicron ) ;
20129: LD_STRING Omicron
20131: PPUSH
20132: CALL_OW 104
// end ;
20136: LD_VAR 0 1
20140: RET
// export function Lose_Vehicles ; begin
20141: LD_INT 0
20143: PPUSH
// YouLost ( Vehicles ) ;
20144: LD_STRING Vehicles
20146: PPUSH
20147: CALL_OW 104
// end ;
20151: LD_VAR 0 1
20155: RET
// export function Lose_SelfAttack ; begin
20156: LD_INT 0
20158: PPUSH
// YouLost ( SelfAttack ) ;
20159: LD_STRING SelfAttack
20161: PPUSH
20162: CALL_OW 104
// end ;
20166: LD_VAR 0 1
20170: RET
// export function Lose_Delay ; begin
20171: LD_INT 0
20173: PPUSH
// YouLost ( Delay ) ;
20174: LD_STRING Delay
20176: PPUSH
20177: CALL_OW 104
// end ; end_of_file
20181: LD_VAR 0 1
20185: RET
// export function FinishMission ; begin
20186: LD_INT 0
20188: PPUSH
// SetRewards ;
20189: CALL 20210 0 0
// SavePlayerCharacters ;
20193: CALL 20424 0 0
// SaveGlobalVariables ;
20197: CALL 20753 0 0
// YouWin ;
20201: CALL_OW 103
// end ;
20205: LD_VAR 0 1
20209: RET
// function SetRewards ; var unitsToReward ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
// if produceMoreVehicles then
20214: LD_EXP 16
20218: IFFALSE 20232
// AddMedal ( Surplus , 1 ) else
20220: LD_STRING Surplus
20222: PPUSH
20223: LD_INT 1
20225: PPUSH
20226: CALL_OW 101
20230: GO 20262
// if produceOnlyForYou then
20232: LD_EXP 17
20236: IFFALSE 20251
// AddMedal ( Surplus , - 1 ) else
20238: LD_STRING Surplus
20240: PPUSH
20241: LD_INT 1
20243: NEG
20244: PPUSH
20245: CALL_OW 101
20249: GO 20262
// AddMedal ( Surplus , - 2 ) ;
20251: LD_STRING Surplus
20253: PPUSH
20254: LD_INT 2
20256: NEG
20257: PPUSH
20258: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20262: LD_EXP 12
20266: PUSH
20267: LD_EXP 46
20271: LESS
20272: IFFALSE 20286
// AddMedal ( PreventReinforcements , 1 ) else
20274: LD_STRING PreventReinforcements
20276: PPUSH
20277: LD_INT 1
20279: PPUSH
20280: CALL_OW 101
20284: GO 20297
// AddMedal ( PreventReinforcements , - 1 ) ;
20286: LD_STRING PreventReinforcements
20288: PPUSH
20289: LD_INT 1
20291: NEG
20292: PPUSH
20293: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20297: LD_EXP 7
20301: PUSH
20302: LD_EXP 54
20306: PPUSH
20307: CALL_OW 302
20311: AND
20312: IFFALSE 20326
// AddMedal ( Scholtze , 1 ) else
20314: LD_STRING Scholtze
20316: PPUSH
20317: LD_INT 1
20319: PPUSH
20320: CALL_OW 101
20324: GO 20337
// AddMedal ( Scholtze , - 1 ) ;
20326: LD_STRING Scholtze
20328: PPUSH
20329: LD_INT 1
20331: NEG
20332: PPUSH
20333: CALL_OW 101
// GiveMedals ( Main ) ;
20337: LD_STRING Main
20339: PPUSH
20340: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 22
20351: PUSH
20352: LD_INT 3
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 21
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PPUSH
20373: CALL_OW 69
20377: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_VAR 0 2
20387: PUSH
20388: LD_EXP 78
20392: ADD
20393: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20394: LD_ADDR_VAR 0 2
20398: PUSH
20399: LD_VAR 0 2
20403: PUSH
20404: LD_EXP 61
20408: DIFF
20409: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20410: LD_VAR 0 2
20414: PPUSH
20415: CALL_OW 43
// end ;
20419: LD_VAR 0 1
20423: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20429: LD_EXP 48
20433: PPUSH
20434: LD_STRING Burlak
20436: PPUSH
20437: LD_INT 3
20439: PPUSH
20440: CALL 7241 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20444: LD_EXP 49
20448: PPUSH
20449: LD_STRING Gnyevko
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: CALL 7241 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20459: LD_EXP 51
20463: PPUSH
20464: LD_STRING Kovalyuk
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL 7241 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20474: LD_EXP 50
20478: PPUSH
20479: LD_STRING Kirilenkova
20481: PPUSH
20482: LD_INT 3
20484: PPUSH
20485: CALL 7241 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20489: LD_EXP 54
20493: PPUSH
20494: LD_STRING Scholtze
20496: PPUSH
20497: LD_INT 3
20499: PPUSH
20500: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20504: LD_EXP 52
20508: PPUSH
20509: LD_STRING Belkov
20511: PPUSH
20512: LD_INT 3
20514: PPUSH
20515: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20519: LD_EXP 53
20523: PPUSH
20524: LD_STRING Belkov2
20526: PPUSH
20527: LD_INT 3
20529: PPUSH
20530: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20534: LD_EXP 52
20538: PPUSH
20539: LD_STRING Belkov
20541: PPUSH
20542: LD_INT 6
20544: PPUSH
20545: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20549: LD_EXP 53
20553: PPUSH
20554: LD_STRING Belkov2
20556: PPUSH
20557: LD_INT 6
20559: PPUSH
20560: CALL 7241 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20564: LD_ADDR_VAR 0 2
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 21
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 50
20591: PUSH
20592: EMPTY
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: PPUSH
20600: CALL_OW 69
20604: PUSH
20605: LD_EXP 48
20609: PUSH
20610: LD_EXP 49
20614: PUSH
20615: LD_EXP 52
20619: PUSH
20620: LD_EXP 53
20624: PUSH
20625: LD_EXP 51
20629: PUSH
20630: LD_EXP 50
20634: PUSH
20635: LD_EXP 54
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: DIFF
20649: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20650: LD_VAR 0 2
20654: PPUSH
20655: LD_STRING other_survivors
20657: PPUSH
20658: LD_INT 3
20660: PPUSH
20661: CALL 7297 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20665: LD_ADDR_VAR 0 3
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_INT 6
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 50
20692: PUSH
20693: EMPTY
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: PUSH
20706: LD_EXP 60
20710: PUSH
20711: LD_EXP 61
20715: PUSH
20716: LD_EXP 52
20720: PUSH
20721: LD_EXP 53
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: DIFF
20732: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20733: LD_VAR 0 3
20737: PPUSH
20738: LD_STRING other_kirov
20740: PPUSH
20741: LD_INT 6
20743: PPUSH
20744: CALL 7297 0 3
// end ;
20748: LD_VAR 0 1
20752: RET
// function SaveGlobalVariables ; begin
20753: LD_INT 0
20755: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20756: LD_EXP 26
20760: PPUSH
20761: LD_STRING 03_KurinOpinion_1
20763: PPUSH
20764: CALL_OW 39
// end ; end_of_file
20768: LD_VAR 0 1
20772: RET
// export function CustomEvent ( event ) ; begin
20773: LD_INT 0
20775: PPUSH
// end ;
20776: LD_VAR 0 2
20780: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: LD_INT 22
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: PUSH
20824: FOR_IN
20825: IFFALSE 21022
// if GetTaskList ( i ) > 0 then
20827: LD_VAR 0 2
20831: PPUSH
20832: CALL_OW 437
20836: PUSH
20837: LD_INT 0
20839: GREATER
20840: IFFALSE 21020
// for j = 1 to GetTaskList ( i ) do
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: DOUBLE
20848: LD_INT 1
20850: DEC
20851: ST_TO_ADDR
20852: LD_VAR 0 2
20856: PPUSH
20857: CALL_OW 437
20861: PUSH
20862: FOR_TO
20863: IFFALSE 21018
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20865: LD_ADDR_VAR 0 4
20869: PUSH
20870: LD_VAR 0 2
20874: PPUSH
20875: CALL_OW 437
20879: PUSH
20880: LD_VAR 0 3
20884: ARRAY
20885: PUSH
20886: LD_INT 4
20888: ARRAY
20889: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20890: LD_ADDR_VAR 0 8
20894: PUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 437
20904: PUSH
20905: LD_VAR 0 3
20909: ARRAY
20910: PUSH
20911: LD_INT 5
20913: ARRAY
20914: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20915: LD_ADDR_VAR 0 6
20919: PUSH
20920: LD_VAR 0 2
20924: PPUSH
20925: CALL_OW 437
20929: PUSH
20930: LD_VAR 0 3
20934: ARRAY
20935: PUSH
20936: LD_INT 2
20938: ARRAY
20939: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20940: LD_ADDR_VAR 0 7
20944: PUSH
20945: LD_VAR 0 2
20949: PPUSH
20950: CALL_OW 437
20954: PUSH
20955: LD_VAR 0 3
20959: ARRAY
20960: PUSH
20961: LD_INT 3
20963: ARRAY
20964: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20965: LD_VAR 0 4
20969: PPUSH
20970: CALL_OW 255
20974: PUSH
20975: LD_INT 6
20977: EQUAL
20978: PUSH
20979: LD_VAR 0 2
20983: PPUSH
20984: CALL_OW 437
20988: PUSH
20989: LD_VAR 0 3
20993: ARRAY
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PUSH
20999: LD_STRING <
21001: EQUAL
21002: AND
21003: IFFALSE 21016
// SetTaskList ( i , [ ] ) ;
21005: LD_VAR 0 2
21009: PPUSH
21010: EMPTY
21011: PPUSH
21012: CALL_OW 446
// end ;
21016: GO 20862
21018: POP
21019: POP
21020: GO 20824
21022: POP
21023: POP
// end ;
21024: PPOPN 8
21026: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21027: LD_VAR 0 2
21031: PUSH
21032: LD_INT 6
21034: EQUAL
21035: IFFALSE 21049
// SetSide ( building , 6 ) ;
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_INT 6
21044: PPUSH
21045: CALL_OW 235
// end ;
21049: PPOPN 3
21051: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin diffUnits = [ ] ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: EMPTY
21062: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 255
21072: PUSH
21073: LD_INT 3
21075: EQUAL
21076: PUSH
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 266
21086: PUSH
21087: LD_INT 0
21089: EQUAL
21090: AND
21091: PUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: LD_INT 21
21099: PPUSH
21100: CALL_OW 308
21104: AND
21105: IFFALSE 21119
// SetBName ( building , kagan ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_STRING kagan
21114: PPUSH
21115: CALL_OW 500
// if GetSide ( building ) = 6 then
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 255
21128: PUSH
21129: LD_INT 6
21131: EQUAL
21132: IFFALSE 21313
// begin if GetBType ( building ) = b_ext_noncombat then
21134: LD_VAR 0 1
21138: PPUSH
21139: CALL_OW 266
21143: PUSH
21144: LD_INT 19
21146: EQUAL
21147: IFFALSE 21153
// begin SpawnKirovSupport ;
21149: CALL 4514 0 0
// end ; if GetBType ( building ) = b_depot then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 266
21162: PUSH
21163: LD_INT 0
21165: EQUAL
21166: IFFALSE 21212
// begin kirovOilDepot = building ;
21168: LD_ADDR_EXP 67
21172: PUSH
21173: LD_VAR 0 1
21177: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21178: LD_EXP 67
21182: PPUSH
21183: CALL_OW 274
21187: PPUSH
21188: LD_INT 2
21190: PPUSH
21191: LD_INT 3000
21193: PPUSH
21194: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21198: LD_EXP 81
21202: PPUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 266
21221: PUSH
21222: LD_INT 31
21224: EQUAL
21225: PUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 266
21235: PUSH
21236: LD_INT 4
21238: EQUAL
21239: OR
21240: PUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: LD_INT 20
21248: PPUSH
21249: CALL_OW 308
21253: AND
21254: IFFALSE 21313
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21256: LD_EXP 77
21260: PPUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 56
21273: PUSH
21274: EMPTY
21275: LIST
21276: PUSH
21277: LD_INT 3
21279: PUSH
21280: LD_INT 60
21282: PUSH
21283: EMPTY
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 72
21299: PUSH
21300: LD_INT 1
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 120
// end ; end ;
21313: PPOPN 3
21315: END
// on UpgradeComplete ( building ) do var i , tmp ;
21316: LD_INT 0
21318: PPUSH
21319: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 255
21329: PUSH
21330: LD_INT 3
21332: EQUAL
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 266
21343: PUSH
21344: LD_INT 3
21346: EQUAL
21347: AND
21348: PUSH
21349: LD_EXP 8
21353: NOT
21354: AND
21355: IFFALSE 21366
// Dial_UpgradeWorkshop ( building ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL 24464 0 1
// end ;
21366: PPOPN 3
21368: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21369: LD_VAR 0 1
21373: PUSH
21374: LD_EXP 48
21378: EQUAL
21379: IFFALSE 21385
// Lose_Burlak ;
21381: CALL 20111 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21385: LD_VAR 0 1
21389: PUSH
21390: LD_EXP 59
21394: EQUAL
21395: PUSH
21396: LD_EXP 28
21400: NOT
21401: AND
21402: IFFALSE 21408
// Lose_Omicron ;
21404: CALL 20126 0 0
// end ;
21408: PPOPN 1
21410: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21411: LD_VAR 0 1
21415: PUSH
21416: LD_INT 3
21418: EQUAL
21419: PUSH
21420: LD_VAR 0 2
21424: PUSH
21425: LD_INT 6
21427: EQUAL
21428: AND
21429: IFFALSE 21435
// Lose_SelfAttack ;
21431: CALL 20156 0 0
// end ;
21435: PPOPN 2
21437: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL_OW 255
21447: PUSH
21448: LD_INT 6
21450: EQUAL
21451: IFFALSE 21616
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 264
21462: PUSH
21463: LD_INT 51
21465: EQUAL
21466: PUSH
21467: LD_EXP 73
21471: NOT
21472: AND
21473: IFFALSE 21487
// kirovTransportCargo = vehicle else
21475: LD_ADDR_EXP 73
21479: PUSH
21480: LD_VAR 0 1
21484: ST_TO_ADDR
21485: GO 21559
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 264
21496: PUSH
21497: LD_INT 51
21499: EQUAL
21500: IFFALSE 21559
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_EXP 67
21511: PPUSH
21512: LD_INT 2
21514: PPUSH
21515: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21519: LD_VAR 0 1
21523: PPUSH
21524: LD_INT 137
21526: PPUSH
21527: LD_INT 99
21529: PPUSH
21530: CALL_OW 171
// AddComHold ( vehicle ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21543: LD_ADDR_EXP 74
21547: PUSH
21548: LD_EXP 74
21552: PUSH
21553: LD_VAR 0 1
21557: ADD
21558: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 264
21568: PUSH
21569: LD_INT 42
21571: PUSH
21572: LD_INT 43
21574: PUSH
21575: LD_INT 44
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: IN
21583: IFFALSE 21616
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21585: LD_ADDR_EXP 75
21589: PUSH
21590: LD_EXP 75
21594: PUSH
21595: LD_VAR 0 1
21599: ADD
21600: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21601: LD_VAR 0 1
21605: PPUSH
21606: LD_INT 137
21608: PPUSH
21609: LD_INT 99
21611: PPUSH
21612: CALL_OW 111
// end ; end ; end ;
21616: PPOPN 2
21618: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 6
21626: EQUAL
21627: PUSH
21628: LD_VAR 0 2
21632: PUSH
21633: LD_EXP 30
21637: IN
21638: NOT
21639: AND
21640: IFFALSE 21663
// begin ComExitVehicle ( capturing_unit ) ;
21642: LD_VAR 0 4
21646: PPUSH
21647: CALL_OW 121
// SetSide ( new , 6 ) ;
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 6
21658: PPUSH
21659: CALL_OW 235
// end ; end ;
21663: PPOPN 4
21665: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PUSH
21676: LD_INT 6
21678: EQUAL
21679: PUSH
21680: LD_EXP 19
21684: AND
21685: IFFALSE 21713
// begin wait ( 0 0$2 ) ;
21687: LD_INT 70
21689: PPUSH
21690: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21694: LD_VAR 0 1
21698: PPUSH
21699: LD_INT 78
21701: PPUSH
21702: LD_INT 39
21704: PPUSH
21705: CALL_OW 174
// KirovAttackOmicron ;
21709: CALL 17897 0 0
// end ; end ;
21713: PPOPN 2
21715: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21716: LD_VAR 0 2
21720: PPUSH
21721: CALL_OW 255
21725: PUSH
21726: LD_INT 6
21728: EQUAL
21729: PUSH
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 39
21737: EQUAL
21738: AND
21739: IFFALSE 21800
// begin MountWeaponTurrent ;
21741: CALL 17361 0 0
// wait ( 3 3$30 ) ;
21745: LD_INT 7350
21747: PPUSH
21748: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21752: LD_INT 22
21754: PUSH
21755: LD_INT 6
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL 17427 0 1
// end ; end ; end_of_file
21800: PPOPN 2
21802: END
// export function MissionIntro ; var i , unit , freeSlots , tmp ; begin
21803: LD_INT 0
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21810: LD_EXP 48
21814: PUSH
21815: LD_EXP 60
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21828: LD_EXP 48
21832: PUSH
21833: LD_EXP 62
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: LD_EXP 60
21846: PPUSH
21847: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21851: LD_EXP 60
21855: PPUSH
21856: LD_EXP 48
21860: PPUSH
21861: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21865: LD_INT 3
21867: PPUSH
21868: LD_INT 24
21870: PPUSH
21871: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21875: LD_EXP 52
21879: PPUSH
21880: CALL_OW 305
21884: NOT
21885: PUSH
21886: LD_EXP 53
21890: PPUSH
21891: CALL_OW 305
21895: NOT
21896: AND
21897: IFFALSE 21985
// begin Say ( Kurin , D1a-Kur-1 ) ;
21899: LD_EXP 60
21903: PPUSH
21904: LD_STRING D1a-Kur-1
21906: PPUSH
21907: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21911: LD_EXP 48
21915: PPUSH
21916: LD_STRING D1a-Bur-1
21918: PPUSH
21919: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21923: LD_EXP 60
21927: PPUSH
21928: LD_STRING D1a-Kur-2
21930: PPUSH
21931: CALL_OW 88
// if platonovOpinion <= 1 then
21935: LD_EXP 27
21939: PUSH
21940: LD_INT 1
21942: LESSEQUAL
21943: IFFALSE 21959
// Say ( Kurin , D1a-Kur-2a ) else
21945: LD_EXP 60
21949: PPUSH
21950: LD_STRING D1a-Kur-2a
21952: PPUSH
21953: CALL_OW 88
21957: GO 21971
// Say ( Kurin , D1a-Kur-2b ) ;
21959: LD_EXP 60
21963: PPUSH
21964: LD_STRING D1a-Kur-2b
21966: PPUSH
21967: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21971: LD_EXP 48
21975: PPUSH
21976: LD_STRING D1a-Bur-2
21978: PPUSH
21979: CALL_OW 88
// end else
21983: GO 22021
// begin Say ( Kurin , D1b-Kur-1 ) ;
21985: LD_EXP 60
21989: PPUSH
21990: LD_STRING D1b-Kur-1
21992: PPUSH
21993: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21997: LD_EXP 62
22001: PPUSH
22002: LD_STRING D1b-Bel-1
22004: PPUSH
22005: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22009: LD_EXP 60
22013: PPUSH
22014: LD_STRING D1b-Kur-2
22016: PPUSH
22017: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22021: LD_EXP 60
22025: PPUSH
22026: LD_STRING D2-Kur-1
22028: PPUSH
22029: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22033: LD_EXP 48
22037: PPUSH
22038: LD_STRING D2-Bur-1
22040: PPUSH
22041: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22045: LD_EXP 60
22049: PPUSH
22050: LD_STRING D2-Kur-2
22052: PPUSH
22053: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22057: LD_EXP 48
22061: PPUSH
22062: LD_STRING D2-Bur-2
22064: PPUSH
22065: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22069: LD_EXP 60
22073: PPUSH
22074: LD_STRING D2-Kur-3
22076: PPUSH
22077: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22081: LD_INT 1
22083: PPUSH
22084: LD_INT 6
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: CALL_OW 80
// PrepareAmericansMissionIntro ;
22097: CALL 5575 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22101: LD_EXP 82
22105: PPUSH
22106: LD_INT 28
22108: PPUSH
22109: LD_INT 35
22111: PPUSH
22112: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22116: LD_INT 93
22118: PPUSH
22119: LD_INT 36
22121: PPUSH
22122: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22126: LD_INT 93
22128: PPUSH
22129: LD_INT 36
22131: PPUSH
22132: LD_INT 3
22134: PPUSH
22135: LD_INT 9
22137: NEG
22138: PPUSH
22139: CALL_OW 330
// wait ( 0 0$6 ) ;
22143: LD_INT 210
22145: PPUSH
22146: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22150: LD_EXP 61
22154: PPUSH
22155: CALL_OW 85
// wait ( 0 0$1 ) ;
22159: LD_INT 35
22161: PPUSH
22162: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22166: LD_EXP 61
22170: PPUSH
22171: LD_STRING D2-Pop-3
22173: PPUSH
22174: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22178: LD_EXP 48
22182: PUSH
22183: LD_EXP 60
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PPUSH
22192: CALL_OW 87
// wait ( 0 0$1 ) ;
22196: LD_INT 35
22198: PPUSH
22199: CALL_OW 67
// for unit in amIntroUnits do
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_EXP 82
22212: PUSH
22213: FOR_IN
22214: IFFALSE 22227
// RemoveUnit ( unit ) ;
22216: LD_VAR 0 3
22220: PPUSH
22221: CALL_OW 64
22225: GO 22213
22227: POP
22228: POP
// Say ( Kurin , D2-Kur-4 ) ;
22229: LD_EXP 60
22233: PPUSH
22234: LD_STRING D2-Kur-4
22236: PPUSH
22237: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22241: LD_EXP 48
22245: PPUSH
22246: LD_STRING D2-Bur-4
22248: PPUSH
22249: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22253: LD_EXP 60
22257: PPUSH
22258: LD_STRING D2-Kur-5
22260: PPUSH
22261: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22265: LD_EXP 48
22269: PPUSH
22270: LD_STRING D2-Bur-5
22272: PPUSH
22273: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22277: LD_EXP 60
22281: PPUSH
22282: LD_STRING D2-Kur-6
22284: PPUSH
22285: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22289: LD_EXP 49
22293: PPUSH
22294: CALL_OW 305
22298: IFFALSE 22314
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22300: LD_ADDR_EXP 38
22304: PUSH
22305: LD_EXP 38
22309: PUSH
22310: LD_INT 1
22312: MINUS
22313: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22314: LD_EXP 51
22318: PPUSH
22319: CALL_OW 305
22323: IFFALSE 22339
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22325: LD_ADDR_EXP 38
22329: PUSH
22330: LD_EXP 38
22334: PUSH
22335: LD_INT 1
22337: MINUS
22338: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22339: LD_EXP 50
22343: PPUSH
22344: CALL_OW 305
22348: IFFALSE 22364
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22350: LD_ADDR_EXP 38
22354: PUSH
22355: LD_EXP 38
22359: PUSH
22360: LD_INT 1
22362: MINUS
22363: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22364: LD_EXP 38
22368: PPUSH
22369: CALL 7395 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22373: LD_INT 93
22375: PPUSH
22376: LD_INT 36
22378: PPUSH
22379: LD_INT 3
22381: PPUSH
22382: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22386: LD_INT 3
22388: PPUSH
22389: LD_INT 24
22391: PPUSH
22392: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22396: LD_INT 22
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 21
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PPUSH
22420: CALL_OW 69
22424: PPUSH
22425: CALL_OW 122
// wait ( 0 0$1 ) ;
22429: LD_INT 35
22431: PPUSH
22432: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22436: LD_INT 22
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PPUSH
22460: CALL_OW 69
22464: PPUSH
22465: LD_EXP 59
22469: PPUSH
22470: CALL_OW 250
22474: PPUSH
22475: LD_EXP 59
22479: PPUSH
22480: CALL_OW 251
22484: PPUSH
22485: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
22489: LD_INT 35
22491: PPUSH
22492: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
22496: LD_EXP 48
22500: PPUSH
22501: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
22505: LD_EXP 48
22509: PPUSH
22510: LD_EXP 59
22514: PPUSH
22515: CALL_OW 296
22519: PUSH
22520: LD_INT 6
22522: LESS
22523: IFFALSE 22489
// InGameOff ;
22525: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22529: LD_STRING M1
22531: PPUSH
22532: CALL_OW 337
// SaveForQuickRestart ;
22536: CALL_OW 22
// counterEnable = true ;
22540: LD_ADDR_EXP 88
22544: PUSH
22545: LD_INT 1
22547: ST_TO_ADDR
// counterIndex = 1 ;
22548: LD_ADDR_EXP 89
22552: PUSH
22553: LD_INT 1
22555: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22556: LD_INT 3
22558: PPUSH
22559: LD_INT 24
22561: PPUSH
22562: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22566: LD_INT 6
22568: PPUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 6
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 6
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: PUSH
22609: LD_INT 1
22611: ARRAY
22612: PPUSH
22613: LD_INT 3
22615: PPUSH
22616: CALL 8810 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22620: LD_INT 1
22622: PPUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 7
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: PUSH
22663: LD_INT 1
22665: ARRAY
22666: PPUSH
22667: LD_INT 1
22669: PPUSH
22670: CALL 8810 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22674: LD_INT 18
22676: PPUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 6
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 25
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 70
22716: PPUSH
22717: LD_INT 17
22719: PPUSH
22720: LD_INT 159
22722: PPUSH
22723: LD_INT 116
22725: PPUSH
22726: LD_INT 0
22728: PPUSH
22729: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22733: LD_INT 18
22735: PPUSH
22736: LD_INT 22
22738: PUSH
22739: LD_INT 6
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 21
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 25
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 70
22775: PPUSH
22776: LD_INT 19
22778: PPUSH
22779: LD_INT 161
22781: PPUSH
22782: LD_INT 115
22784: PPUSH
22785: LD_INT 5
22787: PPUSH
22788: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22792: LD_INT 18
22794: PPUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 25
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 70
22834: PPUSH
22835: LD_EXP 66
22839: PPUSH
22840: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22844: LD_EXP 78
22848: PPUSH
22849: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_EXP 78
22862: PUSH
22863: LD_EXP 61
22867: DIFF
22868: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22869: LD_ADDR_VAR 0 4
22873: PUSH
22874: LD_INT 6
22876: PUSH
22877: LD_EXP 68
22881: PPUSH
22882: CALL_OW 313
22886: MINUS
22887: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22888: LD_EXP 78
22892: PUSH
22893: LD_EXP 61
22897: DIFF
22898: PPUSH
22899: LD_EXP 68
22903: PPUSH
22904: CALL_OW 180
// for i = 1 to tmp do
22908: LD_ADDR_VAR 0 2
22912: PUSH
22913: DOUBLE
22914: LD_INT 1
22916: DEC
22917: ST_TO_ADDR
22918: LD_VAR 0 5
22922: PUSH
22923: FOR_TO
22924: IFFALSE 22976
// begin if freeSlots > 0 then
22926: LD_VAR 0 4
22930: PUSH
22931: LD_INT 0
22933: GREATER
22934: IFFALSE 22972
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
22936: LD_VAR 0 5
22940: PUSH
22941: LD_VAR 0 2
22945: ARRAY
22946: PPUSH
22947: LD_EXP 68
22951: PPUSH
22952: CALL_OW 120
// freeSlots = freeSlots - 1 ;
22956: LD_ADDR_VAR 0 4
22960: PUSH
22961: LD_VAR 0 4
22965: PUSH
22966: LD_INT 1
22968: MINUS
22969: ST_TO_ADDR
// end else
22970: GO 22974
// break ;
22972: GO 22976
// end ;
22974: GO 22923
22976: POP
22977: POP
// wait ( 0 0$1 ) ;
22978: LD_INT 35
22980: PPUSH
22981: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
22985: LD_VAR 0 5
22989: PPUSH
22990: LD_INT 56
22992: PUSH
22993: EMPTY
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: PUSH
22999: LD_INT 60
23001: PUSH
23002: EMPTY
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PPUSH
23013: CALL_OW 72
23017: PPUSH
23018: LD_EXP 66
23022: PPUSH
23023: CALL_OW 120
// ComWalk ( ruScout ) ;
23027: LD_EXP 63
23031: PPUSH
23032: CALL_OW 138
// wait ( 0 0$1 ) ;
23036: LD_INT 35
23038: PPUSH
23039: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23043: LD_EXP 63
23047: PUSH
23048: LD_EXP 61
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PPUSH
23057: LD_INT 99
23059: PPUSH
23060: LD_INT 37
23062: PPUSH
23063: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23067: LD_EXP 63
23071: PUSH
23072: LD_EXP 61
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: LD_INT 88
23083: PPUSH
23084: LD_INT 60
23086: PPUSH
23087: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23091: LD_EXP 63
23095: PUSH
23096: LD_EXP 61
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PPUSH
23105: LD_INT 129
23107: PPUSH
23108: LD_INT 99
23110: PPUSH
23111: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23115: LD_EXP 61
23119: PUSH
23120: LD_EXP 63
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PPUSH
23129: LD_EXP 66
23133: PPUSH
23134: CALL_OW 180
// end ;
23138: LD_VAR 0 1
23142: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23143: LD_EXP 22
23147: IFFALSE 23419
23149: GO 23151
23151: DISABLE
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_VAR 0 4
23168: PUSH
23169: LD_EXP 60
23173: ADD
23174: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23175: LD_ADDR_VAR 0 4
23179: PUSH
23180: LD_VAR 0 4
23184: PUSH
23185: LD_EXP 78
23189: ADD
23190: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23191: LD_ADDR_VAR 0 4
23195: PUSH
23196: LD_VAR 0 4
23200: PUSH
23201: LD_EXP 70
23205: ADD
23206: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23207: LD_ADDR_VAR 0 5
23211: PUSH
23212: LD_INT 18
23214: PPUSH
23215: LD_INT 22
23217: PUSH
23218: LD_INT 6
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 70
23243: PUSH
23244: LD_VAR 0 4
23248: DIFF
23249: ST_TO_ADDR
// pom = 6 ;
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: LD_INT 6
23257: ST_TO_ADDR
// if canTakeUnits then
23258: LD_VAR 0 5
23262: IFFALSE 23386
// for i = 1 to canTakeUnits do
23264: LD_ADDR_VAR 0 1
23268: PUSH
23269: DOUBLE
23270: LD_INT 1
23272: DEC
23273: ST_TO_ADDR
23274: LD_VAR 0 5
23278: PUSH
23279: FOR_TO
23280: IFFALSE 23384
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23282: LD_VAR 0 5
23286: PUSH
23287: LD_VAR 0 1
23291: ARRAY
23292: PPUSH
23293: CALL_OW 257
23297: PUSH
23298: LD_INT 3
23300: NONEQUAL
23301: IFFALSE 23348
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23303: LD_VAR 0 5
23307: PUSH
23308: LD_VAR 0 1
23312: ARRAY
23313: PPUSH
23314: LD_EXP 21
23318: PPUSH
23319: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23323: LD_VAR 0 5
23327: PUSH
23328: LD_VAR 0 1
23332: ARRAY
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 183
// wait ( 0 0$1 ) ;
23341: LD_INT 35
23343: PPUSH
23344: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23348: LD_VAR 0 5
23352: PUSH
23353: LD_VAR 0 1
23357: ARRAY
23358: PPUSH
23359: LD_EXP 21
23363: PPUSH
23364: CALL_OW 120
// pom = pom - 1 ;
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_VAR 0 3
23377: PUSH
23378: LD_INT 1
23380: MINUS
23381: ST_TO_ADDR
// end ;
23382: GO 23279
23384: POP
23385: POP
// if pom > 0 then
23386: LD_VAR 0 3
23390: PUSH
23391: LD_INT 0
23393: GREATER
23394: IFFALSE 23419
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23396: LD_ADDR_EXP 80
23400: PUSH
23401: LD_EXP 80
23405: PPUSH
23406: LD_INT 3
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: CALL_OW 1
23418: ST_TO_ADDR
// end ;
23419: PPOPN 5
23421: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23422: LD_EXP 73
23426: PUSH
23427: LD_EXP 31
23431: NOT
23432: AND
23433: IFFALSE 23482
23435: GO 23437
23437: DISABLE
// begin enable ;
23438: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23439: LD_EXP 73
23443: PPUSH
23444: LD_EXP 67
23448: PPUSH
23449: LD_INT 2
23451: PPUSH
23452: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23456: LD_EXP 73
23460: PPUSH
23461: LD_EXP 66
23465: PPUSH
23466: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23470: LD_EXP 73
23474: PPUSH
23475: LD_INT 100
23477: PPUSH
23478: CALL_OW 240
// end ;
23482: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23483: LD_INT 78
23485: PPUSH
23486: LD_INT 112
23488: PPUSH
23489: LD_INT 3
23491: PPUSH
23492: CALL_OW 440
23496: IFFALSE 23550
23498: GO 23500
23500: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23501: LD_INT 78
23503: PPUSH
23504: LD_INT 112
23506: PPUSH
23507: CALL_OW 84
// DialogueOn ;
23511: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23515: LD_EXP 48
23519: PPUSH
23520: LD_STRING D2a-Bur-1
23522: PPUSH
23523: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23527: LD_EXP 60
23531: PPUSH
23532: LD_STRING D2a-Kur-1
23534: PPUSH
23535: CALL_OW 94
// DialogueOff ;
23539: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23543: LD_STRING M2
23545: PPUSH
23546: CALL_OW 337
// end ;
23550: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23551: LD_EXP 10
23555: NOT
23556: IFFALSE 23764
23558: GO 23560
23560: DISABLE
23561: LD_INT 0
23563: PPUSH
// begin enable ;
23564: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23565: LD_ADDR_VAR 0 1
23569: PUSH
23570: LD_INT 22
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 21
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 23
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 31
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 31
23615: PUSH
23616: LD_INT 23
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: PPUSH
23634: CALL_OW 69
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23762
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23642: LD_VAR 0 1
23646: PPUSH
23647: LD_INT 48
23649: PPUSH
23650: LD_INT 81
23652: PPUSH
23653: CALL_OW 297
23657: PUSH
23658: LD_INT 7
23660: LESS
23661: IFFALSE 23760
// begin dialog_track = true ;
23663: LD_ADDR_EXP 10
23667: PUSH
23668: LD_INT 1
23670: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23671: LD_INT 48
23673: PPUSH
23674: LD_INT 81
23676: PPUSH
23677: CALL_OW 86
// DialogueOn ;
23681: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23685: LD_EXP 48
23689: PPUSH
23690: LD_STRING D5a-Bur-1
23692: PPUSH
23693: CALL_OW 88
// DialogueOff ;
23697: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23701: LD_INT 82
23703: PPUSH
23704: LD_INT 3
23706: PPUSH
23707: CALL_OW 321
23711: PUSH
23712: LD_INT 0
23714: EQUAL
23715: IFFALSE 23730
// SetTech ( 82 , 3 , state_enabled ) ;
23717: LD_INT 82
23719: PPUSH
23720: LD_INT 3
23722: PPUSH
23723: LD_INT 1
23725: PPUSH
23726: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23730: LD_INT 84
23732: PPUSH
23733: LD_INT 3
23735: PPUSH
23736: LD_INT 1
23738: PPUSH
23739: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23743: LD_INT 16
23745: PPUSH
23746: LD_INT 3
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 324
// exit ;
23756: POP
23757: POP
23758: GO 23764
// end ;
23760: GO 23639
23762: POP
23763: POP
// end ;
23764: PPOPN 1
23766: END
// every 5 5$30 do
23767: GO 23769
23769: DISABLE
// begin PrepareScholtze ;
23770: CALL 5362 0 0
// wait ( 0 0$2 ) ;
23774: LD_INT 70
23776: PPUSH
23777: CALL_OW 67
// DialogueOn ;
23781: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23785: LD_EXP 54
23789: PPUSH
23790: LD_STRING D4-Sch-1
23792: PPUSH
23793: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23797: LD_EXP 48
23801: PPUSH
23802: LD_STRING D4-Bur-1
23804: PPUSH
23805: CALL_OW 88
// DialogueOff ;
23809: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23813: LD_STRING M4
23815: PPUSH
23816: CALL_OW 337
// ComHold ( Scholtze ) ;
23820: LD_EXP 54
23824: PPUSH
23825: CALL_OW 140
// scholtzeSpawned = true ;
23829: LD_ADDR_EXP 6
23833: PUSH
23834: LD_INT 1
23836: ST_TO_ADDR
// end ;
23837: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23838: LD_INT 3
23840: PPUSH
23841: LD_EXP 54
23845: PPUSH
23846: CALL_OW 292
23850: PUSH
23851: LD_EXP 6
23855: AND
23856: PUSH
23857: LD_EXP 7
23861: NOT
23862: AND
23863: IFFALSE 24044
23865: GO 23867
23867: DISABLE
// begin scholtzeSaved = true ;
23868: LD_ADDR_EXP 7
23872: PUSH
23873: LD_INT 1
23875: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23876: LD_EXP 54
23880: PPUSH
23881: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23885: LD_EXP 54
23889: PPUSH
23890: LD_INT 3
23892: PPUSH
23893: CALL_OW 235
// DialogueOn ;
23897: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23901: LD_EXP 54
23905: PPUSH
23906: LD_STRING D4a-Sch-1
23908: PPUSH
23909: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23913: LD_EXP 48
23917: PPUSH
23918: LD_STRING D4a-Bur-1
23920: PPUSH
23921: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23925: LD_EXP 54
23929: PPUSH
23930: LD_STRING D4a-Sch-2
23932: PPUSH
23933: CALL_OW 88
// DialogueOff ;
23937: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23941: LD_EXP 84
23945: PPUSH
23946: LD_INT 28
23948: PPUSH
23949: LD_INT 36
23951: PPUSH
23952: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23956: LD_STRING MScholtzeOut
23958: PPUSH
23959: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23963: LD_INT 49
23965: PPUSH
23966: LD_INT 3
23968: PPUSH
23969: LD_INT 1
23971: PPUSH
23972: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23976: LD_INT 51
23978: PPUSH
23979: LD_INT 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23989: LD_INT 82
23991: PPUSH
23992: LD_INT 3
23994: PPUSH
23995: CALL_OW 321
23999: PUSH
24000: LD_INT 0
24002: EQUAL
24003: IFFALSE 24018
// SetTech ( 82 , 3 , state_enabled ) ;
24005: LD_INT 82
24007: PPUSH
24008: LD_INT 3
24010: PPUSH
24011: LD_INT 1
24013: PPUSH
24014: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24018: LD_INT 83
24020: PPUSH
24021: LD_INT 3
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24031: LD_INT 19
24033: PPUSH
24034: LD_INT 3
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL_OW 324
// end ;
24044: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24045: LD_EXP 54
24049: PPUSH
24050: CALL_OW 305
24054: PUSH
24055: LD_EXP 7
24059: NOT
24060: AND
24061: IFFALSE 24070
24063: GO 24065
24065: DISABLE
// PrepareAmericanPatrol ;
24066: CALL 6266 0 0
24070: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24071: LD_EXP 54
24075: PPUSH
24076: CALL_OW 305
24080: PUSH
24081: LD_EXP 54
24085: PPUSH
24086: CALL_OW 255
24090: PUSH
24091: LD_INT 8
24093: EQUAL
24094: AND
24095: PUSH
24096: LD_EXP 47
24100: PUSH
24101: LD_INT 35
24103: GREATER
24104: AND
24105: IFFALSE 24281
24107: GO 24109
24109: DISABLE
24110: LD_INT 0
24112: PPUSH
24113: PPUSH
// begin enable ;
24114: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24115: LD_ADDR_EXP 47
24119: PUSH
24120: LD_EXP 47
24124: PUSH
24125: LD_INT 35
24127: MINUS
24128: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 12
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 69
24162: PUSH
24163: FOR_IN
24164: IFFALSE 24203
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_EXP 54
24175: PPUSH
24176: CALL_OW 250
24180: PPUSH
24181: LD_EXP 54
24185: PPUSH
24186: CALL_OW 251
24190: PPUSH
24191: LD_INT 12
24193: PPUSH
24194: LD_INT 0
24196: PPUSH
24197: CALL 10227 0 5
24201: GO 24163
24203: POP
24204: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: LD_INT 22
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 25
24222: PUSH
24223: LD_INT 14
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PPUSH
24234: CALL_OW 69
24238: PUSH
24239: FOR_IN
24240: IFFALSE 24279
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24242: LD_VAR 0 2
24246: PPUSH
24247: LD_EXP 54
24251: PPUSH
24252: CALL_OW 250
24256: PPUSH
24257: LD_EXP 54
24261: PPUSH
24262: CALL_OW 251
24266: PPUSH
24267: LD_INT 12
24269: PPUSH
24270: LD_INT 0
24272: PPUSH
24273: CALL 10227 0 5
24277: GO 24239
24279: POP
24280: POP
// end ;
24281: PPOPN 2
24283: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24284: LD_INT 1
24286: PPUSH
24287: LD_EXP 54
24291: PPUSH
24292: CALL_OW 292
24296: PUSH
24297: LD_EXP 84
24301: AND
24302: PUSH
24303: LD_EXP 7
24307: NOT
24308: AND
24309: IFFALSE 24463
24311: GO 24313
24313: DISABLE
// begin enable ;
24314: ENABLE
// if not IsPlaced ( Scholtze ) then
24315: LD_EXP 54
24319: PPUSH
24320: CALL_OW 305
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 24463
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24329: LD_EXP 84
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PPUSH
24338: CALL_OW 320
24342: PUSH
24343: LD_EXP 54
24347: EQUAL
24348: PUSH
24349: LD_EXP 84
24353: PUSH
24354: LD_INT 2
24356: ARRAY
24357: PPUSH
24358: CALL_OW 320
24362: PUSH
24363: LD_EXP 54
24367: EQUAL
24368: OR
24369: IFFALSE 24463
// begin DialogueOn ;
24371: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24375: LD_EXP 54
24379: PPUSH
24380: LD_STRING D4b-Sch-1
24382: PPUSH
24383: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24387: LD_EXP 84
24391: PUSH
24392: LD_INT 2
24394: ARRAY
24395: PPUSH
24396: LD_STRING D4b-Sol1-1
24398: PPUSH
24399: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24403: LD_EXP 84
24407: PUSH
24408: LD_INT 1
24410: ARRAY
24411: PPUSH
24412: LD_STRING D4b-Sol2-1
24414: PPUSH
24415: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24419: LD_EXP 54
24423: PPUSH
24424: LD_STRING D4b-Sch-2
24426: PPUSH
24427: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24431: LD_EXP 48
24435: PPUSH
24436: LD_STRING D4b-Bur-2
24438: PPUSH
24439: CALL_OW 88
// DialogueOff ;
24443: CALL_OW 7
// Killunit ( Scholtze ) ;
24447: LD_EXP 54
24451: PPUSH
24452: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24456: LD_STRING MScholtzeDel
24458: PPUSH
24459: CALL_OW 337
// end ; end ;
24463: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
24468: PPUSH
// dialog_workshop = true ;
24469: LD_ADDR_EXP 8
24473: PUSH
24474: LD_INT 1
24476: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24477: LD_INT 22
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 30
24489: PUSH
24490: LD_INT 26
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: NOT
24506: IFFALSE 24895
// begin CenterNowOnUnits ( building ) ;
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 87
// DialogueOn ;
24517: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24521: LD_EXP 48
24525: PPUSH
24526: LD_STRING D3aa-Bur-1
24528: PPUSH
24529: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24533: LD_EXP 54
24537: PPUSH
24538: CALL_OW 302
24542: PUSH
24543: LD_EXP 54
24547: PPUSH
24548: CALL_OW 255
24552: PUSH
24553: LD_INT 3
24555: EQUAL
24556: AND
24557: IFFALSE 24573
// Say ( Scholtze , D3aa-Sch-1 ) else
24559: LD_EXP 54
24563: PPUSH
24564: LD_STRING D3aa-Sch-1
24566: PPUSH
24567: CALL_OW 88
24571: GO 24879
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 25
24600: PUSH
24601: LD_INT 4
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 26
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 50
24620: PUSH
24621: EMPTY
24622: LIST
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: PUSH
24636: LD_EXP 48
24640: PUSH
24641: LD_EXP 49
24645: PUSH
24646: LD_EXP 51
24650: PUSH
24651: LD_EXP 52
24655: PUSH
24656: LD_EXP 53
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: DIFF
24668: ST_TO_ADDR
// if maleSci then
24669: LD_VAR 0 3
24673: IFFALSE 24693
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24675: LD_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: ARRAY
24683: PPUSH
24684: LD_STRING D3aa-Sci1-1
24686: PPUSH
24687: CALL_OW 88
24691: GO 24879
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24693: LD_ADDR_VAR 0 4
24697: PUSH
24698: LD_INT 22
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 26
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 50
24730: PUSH
24731: EMPTY
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: PPUSH
24740: CALL_OW 69
24744: PUSH
24745: LD_EXP 48
24749: PUSH
24750: LD_EXP 49
24754: PUSH
24755: LD_EXP 51
24759: PUSH
24760: LD_EXP 52
24764: PUSH
24765: LD_EXP 53
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: DIFF
24777: ST_TO_ADDR
// if maleOthers then
24778: LD_VAR 0 4
24782: IFFALSE 24802
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24784: LD_VAR 0 4
24788: PUSH
24789: LD_INT 1
24791: ARRAY
24792: PPUSH
24793: LD_STRING D3aa-Sci1-1
24795: PPUSH
24796: CALL_OW 88
24800: GO 24879
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24802: LD_ADDR_VAR 0 4
24806: PUSH
24807: LD_INT 22
24809: PUSH
24810: LD_INT 3
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 21
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 26
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 50
24839: PUSH
24840: EMPTY
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 69
24853: PUSH
24854: LD_EXP 48
24858: PUSH
24859: EMPTY
24860: LIST
24861: DIFF
24862: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24863: LD_VAR 0 4
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: LD_STRING D3aa-Sci1-1
24874: PPUSH
24875: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24879: LD_EXP 48
24883: PPUSH
24884: LD_STRING D3aa-Bur-2
24886: PPUSH
24887: CALL_OW 88
// DialogueOff ;
24891: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24895: LD_STRING M3
24897: PPUSH
24898: CALL_OW 337
// end ;
24902: LD_VAR 0 2
24906: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24907: LD_EXP 9
24911: NOT
24912: IFFALSE 25250
24914: GO 24916
24916: DISABLE
24917: LD_INT 0
24919: PPUSH
24920: PPUSH
// begin enable ;
24921: ENABLE
// for amUnit in amSupportTroops do
24922: LD_ADDR_VAR 0 1
24926: PUSH
24927: LD_EXP 83
24931: PUSH
24932: FOR_IN
24933: IFFALSE 25248
// begin if See ( 3 , amUnit ) then
24935: LD_INT 3
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 292
24947: IFFALSE 25246
// begin dialog_amSupportTroops = true ;
24949: LD_ADDR_EXP 9
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: CALL_OW 87
// DialogueOn ;
24966: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 21
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 26
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 50
25007: PUSH
25008: EMPTY
25009: LIST
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: PUSH
25022: LD_EXP 48
25026: PUSH
25027: LD_EXP 49
25031: PUSH
25032: LD_EXP 51
25036: PUSH
25037: LD_EXP 52
25041: PUSH
25042: LD_EXP 53
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: DIFF
25054: ST_TO_ADDR
// if randomMale then
25055: LD_VAR 0 2
25059: IFFALSE 25126
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25061: LD_INT 22
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 21
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 26
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 50
25093: PUSH
25094: EMPTY
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PPUSH
25103: CALL_OW 69
25107: PPUSH
25108: LD_STRING D3b-RSol1-1
25110: PPUSH
25111: LD_STRING 
25113: PPUSH
25114: LD_INT 0
25116: PPUSH
25117: LD_INT 1
25119: PPUSH
25120: CALL 6976 0 5
25124: GO 25203
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25126: LD_ADDR_VAR 0 2
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 3
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 26
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 50
25163: PUSH
25164: EMPTY
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: LD_EXP 48
25182: PUSH
25183: EMPTY
25184: LIST
25185: DIFF
25186: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25187: LD_VAR 0 2
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_STRING D3b-RSol1-1
25198: PPUSH
25199: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25203: LD_EXP 49
25207: PPUSH
25208: CALL_OW 302
25212: IFFALSE 25226
// Say ( Gnyevko , D3b-Gny-1 ) ;
25214: LD_EXP 49
25218: PPUSH
25219: LD_STRING D3b-Gny-1
25221: PPUSH
25222: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25226: LD_EXP 48
25230: PPUSH
25231: LD_STRING D3b-Bur-1
25233: PPUSH
25234: CALL_OW 88
// DialogueOff ;
25238: CALL_OW 7
// exit ;
25242: POP
25243: POP
25244: GO 25250
// end ; end ;
25246: GO 24932
25248: POP
25249: POP
// end ;
25250: PPOPN 2
25252: END
// every 2 2$0 trigger dialog_amSupportTroops do
25253: LD_EXP 9
25257: IFFALSE 25341
25259: GO 25261
25261: DISABLE
// begin if IsOK ( Kovalyuk ) then
25262: LD_EXP 51
25266: PPUSH
25267: CALL_OW 302
25271: IFFALSE 25285
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25273: LD_EXP 51
25277: PPUSH
25278: LD_STRING D3b-Kov-1
25280: PPUSH
25281: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25285: LD_INT 22
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 26
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: PPUSH
25320: CALL_OW 69
25324: PPUSH
25325: LD_STRING D3b-RSol1-2
25327: PPUSH
25328: LD_STRING 
25330: PPUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_INT 0
25336: PPUSH
25337: CALL 6976 0 5
// end ;
25341: END
// every 1 trigger not endCutscene do
25342: LD_EXP 31
25346: NOT
25347: IFFALSE 25365
25349: GO 25351
25351: DISABLE
// begin enable ;
25352: ENABLE
// SetLives ( Kurin , 1000 ) ;
25353: LD_EXP 60
25357: PPUSH
25358: LD_INT 1000
25360: PPUSH
25361: CALL_OW 234
// end ;
25365: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25366: LD_EXP 40
25370: PUSH
25371: LD_INT 35
25373: LESS
25374: IFFALSE 25602
25376: GO 25378
25378: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25379: LD_EXP 60
25383: PPUSH
25384: CALL_OW 87
// InGameOn ;
25388: CALL_OW 8
// DialogueOn ;
25392: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25396: LD_EXP 60
25400: PPUSH
25401: LD_STRING D5-Kur-1
25403: PPUSH
25404: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25408: LD_STRING QVehicles
25410: PPUSH
25411: CALL_OW 97
25415: PUSH
25416: LD_INT 1
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25467
25424: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25425: LD_EXP 48
25429: PPUSH
25430: LD_STRING D6a-Bur-1
25432: PPUSH
25433: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25437: LD_EXP 60
25441: PPUSH
25442: LD_STRING D6a-Kur-1
25444: PPUSH
25445: CALL_OW 94
// meetNearOmicronBase = true ;
25449: LD_ADDR_EXP 19
25453: PUSH
25454: LD_INT 1
25456: ST_TO_ADDR
// kurinCheckVehicles = true ;
25457: LD_ADDR_EXP 18
25461: PUSH
25462: LD_INT 1
25464: ST_TO_ADDR
// end ; 2 :
25465: GO 25594
25467: LD_INT 2
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25522
25475: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25476: LD_EXP 48
25480: PPUSH
25481: LD_STRING D6b-Bur-1
25483: PPUSH
25484: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25488: LD_EXP 60
25492: PPUSH
25493: LD_STRING D6b-Kur-1
25495: PPUSH
25496: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25500: LD_EXP 48
25504: PPUSH
25505: LD_STRING D6b-Bur-2
25507: PPUSH
25508: CALL_OW 88
// meetNearOmicronBase = true ;
25512: LD_ADDR_EXP 19
25516: PUSH
25517: LD_INT 1
25519: ST_TO_ADDR
// end ; 3 :
25520: GO 25594
25522: LD_INT 3
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25593
25530: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25531: LD_EXP 48
25535: PPUSH
25536: LD_STRING D6c-Bur-1
25538: PPUSH
25539: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25543: LD_EXP 60
25547: PPUSH
25548: LD_STRING D6c-Kur-1
25550: PPUSH
25551: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25555: LD_EXP 48
25559: PPUSH
25560: LD_STRING D6c-Bur-2
25562: PPUSH
25563: CALL_OW 88
// kurinGiveMoreTime = true ;
25567: LD_ADDR_EXP 13
25571: PUSH
25572: LD_INT 1
25574: ST_TO_ADDR
// kurinOpinion = 0 ;
25575: LD_ADDR_EXP 26
25579: PUSH
25580: LD_INT 0
25582: ST_TO_ADDR
// counterIndex = 4 ;
25583: LD_ADDR_EXP 89
25587: PUSH
25588: LD_INT 4
25590: ST_TO_ADDR
// end ; end ;
25591: GO 25594
25593: POP
// InGameOff ;
25594: CALL_OW 9
// DialogueOff ;
25598: CALL_OW 7
// end ;
25602: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25603: LD_EXP 14
25607: PUSH
25608: LD_INT 35
25610: LESS
25611: PUSH
25612: LD_EXP 13
25616: AND
25617: IFFALSE 25650
25619: GO 25621
25621: DISABLE
// begin DialogueOn ;
25622: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25626: LD_EXP 60
25630: PPUSH
25631: LD_STRING D6c-Kur-2
25633: PPUSH
25634: CALL_OW 94
// DialogueOff ;
25638: CALL_OW 7
// meetNearOmicronBase = true ;
25642: LD_ADDR_EXP 19
25646: PUSH
25647: LD_INT 1
25649: ST_TO_ADDR
// end ;
25650: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25651: LD_EXP 19
25655: IFFALSE 26310
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
// begin mechs = [ ] ;
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: EMPTY
25673: ST_TO_ADDR
// vehs = [ ] ;
25674: LD_ADDR_VAR 0 4
25678: PUSH
25679: EMPTY
25680: ST_TO_ADDR
// haveVehs = 0 ;
25681: LD_ADDR_VAR 0 5
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// uc_side = 6 ;
25689: LD_ADDR_OWVAR 20
25693: PUSH
25694: LD_INT 6
25696: ST_TO_ADDR
// uc_nation = 3 ;
25697: LD_ADDR_OWVAR 21
25701: PUSH
25702: LD_INT 3
25704: ST_TO_ADDR
// for i := 1 to 2 do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: DOUBLE
25711: LD_INT 1
25713: DEC
25714: ST_TO_ADDR
25715: LD_INT 2
25717: PUSH
25718: FOR_TO
25719: IFFALSE 25818
// begin PrepareMechanic ( false , 2 ) ;
25721: LD_INT 0
25723: PPUSH
25724: LD_INT 2
25726: PPUSH
25727: CALL_OW 383
// mech = CreateHuman ;
25731: LD_ADDR_VAR 0 2
25735: PUSH
25736: CALL_OW 44
25740: ST_TO_ADDR
// mechs = mechs ^ mech ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_VAR 0 3
25750: PUSH
25751: LD_VAR 0 2
25755: ADD
25756: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25757: LD_VAR 0 2
25761: PPUSH
25762: LD_EXP 66
25766: PPUSH
25767: CALL_OW 52
// ComExitBuilding ( mech ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: CALL_OW 122
// wait ( 0 0$1 ) ;
25780: LD_INT 35
25782: PPUSH
25783: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25787: LD_VAR 0 2
25791: PPUSH
25792: LD_EXP 59
25796: PPUSH
25797: CALL_OW 250
25801: PPUSH
25802: LD_EXP 59
25806: PPUSH
25807: CALL_OW 251
25811: PPUSH
25812: CALL_OW 171
// end ;
25816: GO 25718
25818: POP
25819: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25820: LD_INT 22
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 23
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: PPUSH
25855: CALL_OW 69
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 21
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 69
25888: EQUAL
25889: IFFALSE 25899
// produceOnlyForYou = true ;
25891: LD_ADDR_EXP 17
25895: PUSH
25896: LD_INT 1
25898: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25899: LD_INT 700
25901: PPUSH
25902: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25906: LD_INT 22
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 21
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 23
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: LD_INT 34
25941: PUSH
25942: LD_INT 51
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: PUSH
25964: LD_INT 22
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 21
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 69
25992: PUSH
25993: LD_INT 2
25995: PLUS
25996: GREATEREQUAL
25997: IFFALSE 26280
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25999: LD_ADDR_VAR 0 4
26003: PUSH
26004: LD_VAR 0 4
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 21
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 23
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: LD_INT 34
26044: PUSH
26045: LD_INT 51
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 59
26061: PUSH
26062: EMPTY
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 69
26080: PUSH
26081: LD_INT 1
26083: ARRAY
26084: ADD
26085: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26086: LD_ADDR_VAR 0 4
26090: PUSH
26091: LD_VAR 0 4
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 23
26118: PUSH
26119: LD_INT 3
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: LD_INT 34
26131: PUSH
26132: LD_INT 51
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 59
26148: PUSH
26149: EMPTY
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: PUSH
26168: LD_INT 2
26170: ARRAY
26171: ADD
26172: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26173: LD_ADDR_EXP 75
26177: PUSH
26178: LD_EXP 75
26182: PUSH
26183: LD_VAR 0 4
26187: ADD
26188: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26189: LD_VAR 0 4
26193: PPUSH
26194: LD_INT 6
26196: PPUSH
26197: CALL_OW 235
// produceMoreVehicles = true ;
26201: LD_ADDR_EXP 16
26205: PUSH
26206: LD_INT 1
26208: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26209: LD_VAR 0 3
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: PPUSH
26218: LD_VAR 0 4
26222: PUSH
26223: LD_INT 1
26225: ARRAY
26226: PPUSH
26227: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26231: LD_VAR 0 3
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: PPUSH
26240: LD_VAR 0 4
26244: PUSH
26245: LD_INT 2
26247: ARRAY
26248: PPUSH
26249: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26253: LD_EXP 18
26257: PUSH
26258: LD_EXP 26
26262: PUSH
26263: LD_INT 0
26265: EQUAL
26266: NOT
26267: AND
26268: IFFALSE 26278
// kurinOpinion = 1 ;
26270: LD_ADDR_EXP 26
26274: PUSH
26275: LD_INT 1
26277: ST_TO_ADDR
// end else
26278: GO 26310
// begin if kurinCheckVehicles then
26280: LD_EXP 18
26284: IFFALSE 26310
// begin DialogueOn ;
26286: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26290: LD_EXP 60
26294: PPUSH
26295: LD_STRING D6d-Kur-1
26297: PPUSH
26298: CALL_OW 94
// DialogueOff ;
26302: CALL_OW 7
// Lose_Vehicles ;
26306: CALL 20141 0 0
// end ; end ; end ;
26310: PPOPN 5
26312: END
// every 0 0$1 trigger meetNearOmicronBase do
26313: LD_EXP 19
26317: IFFALSE 26537
26319: GO 26321
26321: DISABLE
// begin spawnCrates = false ;
26322: LD_ADDR_EXP 5
26326: PUSH
26327: LD_INT 0
26329: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26330: LD_INT 6
26332: PPUSH
26333: LD_INT 1
26335: PPUSH
26336: LD_INT 2
26338: PPUSH
26339: LD_INT 1
26341: PPUSH
26342: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26346: LD_INT 0
26348: PPUSH
26349: LD_INT 3
26351: PPUSH
26352: LD_INT 0
26354: PPUSH
26355: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26359: LD_STRING M3a
26361: PPUSH
26362: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26366: LD_STRING M5
26368: PPUSH
26369: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26373: LD_INT 15
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26383: LD_EXP 75
26387: PPUSH
26388: LD_INT 75
26390: PPUSH
26391: LD_INT 38
26393: PPUSH
26394: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26398: LD_EXP 74
26402: PPUSH
26403: LD_INT 75
26405: PPUSH
26406: LD_INT 38
26408: PPUSH
26409: CALL_OW 111
// counterIndex = 2 ;
26413: LD_ADDR_EXP 89
26417: PUSH
26418: LD_INT 2
26420: ST_TO_ADDR
// if not kurinOpinion = 0 then
26421: LD_EXP 26
26425: PUSH
26426: LD_INT 0
26428: EQUAL
26429: NOT
26430: IFFALSE 26440
// kurinOpinion = 1 ;
26432: LD_ADDR_EXP 26
26436: PUSH
26437: LD_INT 1
26439: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26440: LD_INT 1
26442: PPUSH
26443: LD_INT 1
26445: PPUSH
26446: LD_INT 22
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 21
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: CALL_OW 69
26474: PPUSH
26475: LD_INT 13
26477: PPUSH
26478: LD_INT 28
26480: PPUSH
26481: LD_INT 17
26483: PPUSH
26484: LD_INT 29
26486: PPUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: LD_INT 4
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: LIST
26500: PUSH
26501: LD_OWVAR 67
26505: ARRAY
26506: PPUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 4
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: PUSH
26521: LD_OWVAR 67
26525: ARRAY
26526: PPUSH
26527: LD_INT 0
26529: PPUSH
26530: LD_INT 0
26532: PPUSH
26533: CALL 12107 0 11
// end ;
26537: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26538: LD_EXP 15
26542: PUSH
26543: LD_INT 35
26545: LESS
26546: PUSH
26547: LD_EXP 89
26551: PUSH
26552: LD_INT 2
26554: EQUAL
26555: AND
26556: IFFALSE 26605
26558: GO 26560
26560: DISABLE
// begin DialogueOn ;
26561: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26565: LD_EXP 60
26569: PPUSH
26570: LD_STRING D7a-Kur-1
26572: PPUSH
26573: CALL_OW 94
// DialogueOff ;
26577: CALL_OW 7
// counterIndex = 3 ;
26581: LD_ADDR_EXP 89
26585: PUSH
26586: LD_INT 3
26588: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26589: LD_ADDR_EXP 15
26593: PUSH
26594: LD_INT 4200
26596: ST_TO_ADDR
// kurinOpinion = 0 ;
26597: LD_ADDR_EXP 26
26601: PUSH
26602: LD_INT 0
26604: ST_TO_ADDR
// end ;
26605: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26606: LD_EXP 15
26610: PUSH
26611: LD_INT 35
26613: LESS
26614: PUSH
26615: LD_EXP 89
26619: PUSH
26620: LD_INT 3
26622: EQUAL
26623: AND
26624: IFFALSE 26633
26626: GO 26628
26628: DISABLE
// Lose_Delay ;
26629: CALL 20171 0 0
26633: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26634: LD_EXP 19
26638: PUSH
26639: LD_INT 15
26641: PPUSH
26642: LD_INT 22
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 21
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PPUSH
26666: CALL_OW 71
26670: PUSH
26671: LD_INT 0
26673: EQUAL
26674: AND
26675: IFFALSE 26763
26677: GO 26679
26679: DISABLE
// begin counterEnable = false ;
26680: LD_ADDR_EXP 88
26684: PUSH
26685: LD_INT 0
26687: ST_TO_ADDR
// Display_strings = [ ] ;
26688: LD_ADDR_OWVAR 47
26692: PUSH
26693: EMPTY
26694: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26695: LD_INT 15
26697: PPUSH
26698: LD_INT 0
26700: PPUSH
26701: CALL_OW 424
// canExitBattlefield = false ;
26705: LD_ADDR_EXP 24
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// DialogueOn ;
26713: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26717: LD_EXP 48
26721: PPUSH
26722: LD_STRING D7-Bur-1
26724: PPUSH
26725: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26729: LD_EXP 60
26733: PPUSH
26734: LD_STRING D7-Kur-1
26736: PPUSH
26737: CALL_OW 94
// DialogueOff ;
26741: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26745: LD_STRING M5a
26747: PPUSH
26748: CALL_OW 337
// Query ( QRefuel ) ;
26752: LD_STRING QRefuel
26754: PPUSH
26755: CALL_OW 97
// KirovAttackOmicron ;
26759: CALL 17897 0 0
// end ;
26763: END
// every 1 trigger not canExitBattlefield do var unit ;
26764: LD_EXP 24
26768: NOT
26769: IFFALSE 26938
26771: GO 26773
26773: DISABLE
26774: LD_INT 0
26776: PPUSH
// begin enable ;
26777: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26778: LD_ADDR_VAR 0 1
26782: PUSH
26783: LD_INT 22
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: PUSH
26830: FOR_IN
26831: IFFALSE 26936
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_INT 26
26840: PPUSH
26841: CALL_OW 308
26845: NOT
26846: PUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_INT 21
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 72
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 313
26876: OR
26877: AND
26878: IFFALSE 26934
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26880: LD_VAR 0 1
26884: PPUSH
26885: LD_INT 26
26887: PPUSH
26888: CALL_OW 113
// if not dialog_stop then
26892: LD_EXP 11
26896: NOT
26897: IFFALSE 26934
// begin dialog_stop = true ;
26899: LD_ADDR_EXP 11
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26907: LD_EXP 60
26911: PPUSH
26912: LD_STRING D12-Kur-1
26914: PPUSH
26915: CALL_OW 88
// wait ( 0 0$5 ) ;
26919: LD_INT 175
26921: PPUSH
26922: CALL_OW 67
// dialog_stop = false ;
26926: LD_ADDR_EXP 11
26930: PUSH
26931: LD_INT 0
26933: ST_TO_ADDR
// end ; end ;
26934: GO 26830
26936: POP
26937: POP
// end ;
26938: PPOPN 1
26940: END
// every 1 do var unit ;
26941: GO 26943
26943: DISABLE
26944: LD_INT 0
26946: PPUSH
// begin enable ;
26947: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26948: LD_ADDR_VAR 0 1
26952: PUSH
26953: LD_INT 22
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 21
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PPUSH
26995: CALL_OW 69
26999: PUSH
27000: FOR_IN
27001: IFFALSE 27076
// if IsInArea ( unit , SecondKurinBase ) then
27003: LD_VAR 0 1
27007: PPUSH
27008: LD_INT 20
27010: PPUSH
27011: CALL_OW 308
27015: IFFALSE 27074
// begin ComMoveXY ( unit , 200 , 114 ) ;
27017: LD_VAR 0 1
27021: PPUSH
27022: LD_INT 200
27024: PPUSH
27025: LD_INT 114
27027: PPUSH
27028: CALL_OW 111
// if not dialog_stop then
27032: LD_EXP 11
27036: NOT
27037: IFFALSE 27074
// begin dialog_stop = true ;
27039: LD_ADDR_EXP 11
27043: PUSH
27044: LD_INT 1
27046: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27047: LD_EXP 60
27051: PPUSH
27052: LD_STRING D12-Kur-1
27054: PPUSH
27055: CALL_OW 88
// wait ( 0 0$5 ) ;
27059: LD_INT 175
27061: PPUSH
27062: CALL_OW 67
// dialog_stop = false ;
27066: LD_ADDR_EXP 11
27070: PUSH
27071: LD_INT 0
27073: ST_TO_ADDR
// end ; end ;
27074: GO 27000
27076: POP
27077: POP
// end ;
27078: PPOPN 1
27080: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
27081: LD_EXP 19
27085: NOT
27086: PUSH
27087: LD_INT 290
27089: PPUSH
27090: CALL_OW 302
27094: AND
27095: IFFALSE 27411
27097: GO 27099
27099: DISABLE
27100: LD_INT 0
27102: PPUSH
27103: PPUSH
// begin enable ;
27104: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27105: LD_ADDR_VAR 0 1
27109: PUSH
27110: LD_INT 13
27112: PPUSH
27113: LD_INT 22
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 21
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 3
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PPUSH
27166: CALL_OW 70
27170: PUSH
27171: FOR_IN
27172: IFFALSE 27409
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27174: LD_VAR 0 1
27178: PPUSH
27179: LD_INT 22
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: LD_INT 21
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 21
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PPUSH
27221: CALL_OW 69
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 74
27235: PPUSH
27236: CALL_OW 296
27240: PUSH
27241: LD_INT 17
27243: LESS
27244: IFFALSE 27407
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
27246: LD_INT 22
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 21
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 21
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 74
27302: PPUSH
27303: LD_INT 69
27305: PPUSH
27306: LD_INT 85
27308: PPUSH
27309: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27313: LD_ADDR_VAR 0 2
27317: PUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_INT 2
27323: PPUSH
27324: CALL_OW 12
27328: ST_TO_ADDR
// if not dialog_stop then
27329: LD_EXP 11
27333: NOT
27334: IFFALSE 27407
// begin dialog_stop = true ;
27336: LD_ADDR_EXP 11
27340: PUSH
27341: LD_INT 1
27343: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27344: LD_VAR 0 2
27348: PUSH
27349: LD_INT 1
27351: EQUAL
27352: PUSH
27353: LD_EXP 49
27357: PPUSH
27358: CALL_OW 302
27362: NOT
27363: OR
27364: IFFALSE 27380
// SayRadio ( Kurin , D11-Kur-1 ) else
27366: LD_EXP 60
27370: PPUSH
27371: LD_STRING D11-Kur-1
27373: PPUSH
27374: CALL_OW 94
27378: GO 27392
// Say ( Gnyevko , D11-Gny-1 ) ;
27380: LD_EXP 49
27384: PPUSH
27385: LD_STRING D11-Gny-1
27387: PPUSH
27388: CALL_OW 88
// wait ( 0 0$5 ) ;
27392: LD_INT 175
27394: PPUSH
27395: CALL_OW 67
// dialog_stop = false ;
27399: LD_ADDR_EXP 11
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// end ; end ;
27407: GO 27171
27409: POP
27410: POP
// end ;
27411: PPOPN 2
27413: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27414: LD_INT 290
27416: PPUSH
27417: CALL_OW 301
27421: PUSH
27422: LD_INT 22
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 69
27450: PUSH
27451: LD_INT 5
27453: LESS
27454: AND
27455: IFFALSE 29730
27457: GO 27459
27459: DISABLE
27460: LD_INT 0
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
// begin omicronSurrender = true ;
27470: LD_ADDR_EXP 23
27474: PUSH
27475: LD_INT 1
27477: ST_TO_ADDR
// canExitBattlefield = true ;
27478: LD_ADDR_EXP 24
27482: PUSH
27483: LD_INT 1
27485: ST_TO_ADDR
// enableOmicronAI = false ;
27486: LD_ADDR_EXP 29
27490: PUSH
27491: LD_INT 0
27493: ST_TO_ADDR
// endCutscene = true ;
27494: LD_ADDR_EXP 31
27498: PUSH
27499: LD_INT 1
27501: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27502: LD_INT 1
27504: PPUSH
27505: LD_INT 3
27507: PPUSH
27508: LD_INT 1
27510: PPUSH
27511: LD_INT 0
27513: PPUSH
27514: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27518: LD_INT 2
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: LD_INT 1
27526: PPUSH
27527: LD_INT 1
27529: PPUSH
27530: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27534: LD_EXP 48
27538: PPUSH
27539: CALL_OW 87
// uc_side = 1 ;
27543: LD_ADDR_OWVAR 20
27547: PUSH
27548: LD_INT 1
27550: ST_TO_ADDR
// uc_nation = 1 ;
27551: LD_ADDR_OWVAR 21
27555: PUSH
27556: LD_INT 1
27558: ST_TO_ADDR
// hc_name :=  ;
27559: LD_ADDR_OWVAR 26
27563: PUSH
27564: LD_STRING 
27566: ST_TO_ADDR
// hc_gallery =  ;
27567: LD_ADDR_OWVAR 33
27571: PUSH
27572: LD_STRING 
27574: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27575: LD_INT 1
27577: PPUSH
27578: LD_INT 1
27580: PPUSH
27581: CALL_OW 381
// tmpUs = CreateHuman ;
27585: LD_ADDR_VAR 0 2
27589: PUSH
27590: CALL_OW 44
27594: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27595: LD_INT 22
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PPUSH
27610: CALL_OW 141
// InGameOn ;
27614: CALL_OW 8
// DialogueOn ;
27618: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27622: LD_INT 26
27624: PPUSH
27625: LD_INT 33
27627: PPUSH
27628: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27632: LD_VAR 0 2
27636: PPUSH
27637: LD_STRING D8-Sol1-1
27639: PPUSH
27640: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27644: LD_EXP 51
27648: PPUSH
27649: CALL_OW 302
27653: IFFALSE 27667
// Say ( Kovalyuk , D8-Kov-1 ) ;
27655: LD_EXP 51
27659: PPUSH
27660: LD_STRING D8-Kov-1
27662: PPUSH
27663: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 21
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 26
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: PPUSH
27712: LD_STRING D8-RSol1-1
27714: PPUSH
27715: LD_STRING 
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: CALL 6976 0 5
27728: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
27729: LD_EXP 49
27733: PPUSH
27734: CALL_OW 302
27738: IFFALSE 27752
// Say ( Gnyevko , D8-Gny-1 ) ;
27740: LD_EXP 49
27744: PPUSH
27745: LD_STRING D8-Gny-1
27747: PPUSH
27748: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
27752: LD_INT 22
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 21
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 26
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: PUSH
27792: LD_VAR 0 3
27796: DIFF
27797: PPUSH
27798: LD_STRING D8-RSol2-1
27800: PPUSH
27801: LD_STRING 
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: LD_INT 0
27809: PPUSH
27810: CALL 6976 0 5
// DialogueOff ;
27814: CALL_OW 7
// PrepareArabian ;
27818: CALL 6424 0 0
// CenterNowOnXY ( 234 , 122 ) ;
27822: LD_INT 234
27824: PPUSH
27825: LD_INT 122
27827: PPUSH
27828: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
27832: LD_EXP 86
27836: PPUSH
27837: LD_INT 221
27839: PPUSH
27840: LD_INT 110
27842: PPUSH
27843: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27847: LD_EXP 87
27851: PPUSH
27852: LD_INT 21
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PPUSH
27862: CALL_OW 72
27866: PPUSH
27867: LD_INT 221
27869: PPUSH
27870: LD_INT 110
27872: PPUSH
27873: CALL_OW 114
// wait ( 0 0$7 ) ;
27877: LD_INT 245
27879: PPUSH
27880: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
27884: LD_EXP 87
27888: PPUSH
27889: LD_INT 221
27891: PPUSH
27892: LD_INT 110
27894: PPUSH
27895: CALL_OW 174
// wait ( 0 0$8 ) ;
27899: LD_INT 280
27901: PPUSH
27902: CALL_OW 67
// music_nat = nation_arabian ;
27906: LD_ADDR_OWVAR 71
27910: PUSH
27911: LD_INT 2
27913: ST_TO_ADDR
// music_class = music_combat ;
27914: LD_ADDR_OWVAR 72
27918: PUSH
27919: LD_INT 1
27921: ST_TO_ADDR
// game_speed = 4 ;
27922: LD_ADDR_OWVAR 65
27926: PUSH
27927: LD_INT 4
27929: ST_TO_ADDR
// DialogueOn ;
27930: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
27934: LD_EXP 81
27938: PPUSH
27939: LD_STRING D9-Gri-1
27941: PPUSH
27942: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
27946: LD_EXP 60
27950: PPUSH
27951: LD_STRING D9-Kur-1
27953: PPUSH
27954: CALL_OW 94
// DialogueOff ;
27958: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
27962: LD_EXP 77
27966: PPUSH
27967: LD_INT 25
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: PPUSH
27982: LD_INT 158
27984: PPUSH
27985: LD_INT 105
27987: PPUSH
27988: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
27992: LD_EXP 77
27996: PPUSH
27997: LD_INT 25
27999: PUSH
28000: LD_INT 4
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PPUSH
28007: CALL_OW 72
28011: PPUSH
28012: LD_INT 158
28014: PPUSH
28015: LD_INT 105
28017: PPUSH
28018: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28022: LD_EXP 77
28026: PPUSH
28027: LD_INT 25
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 72
28041: PPUSH
28042: LD_EXP 59
28046: PPUSH
28047: CALL_OW 250
28051: PPUSH
28052: LD_EXP 59
28056: PPUSH
28057: CALL_OW 251
28061: PPUSH
28062: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28066: LD_EXP 77
28070: PPUSH
28071: LD_INT 25
28073: PUSH
28074: LD_INT 4
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 72
28085: PPUSH
28086: LD_EXP 59
28090: PPUSH
28091: CALL_OW 250
28095: PPUSH
28096: LD_EXP 59
28100: PPUSH
28101: CALL_OW 251
28105: PPUSH
28106: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28110: LD_EXP 73
28114: PPUSH
28115: LD_INT 158
28117: PPUSH
28118: LD_INT 105
28120: PPUSH
28121: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28125: LD_EXP 73
28129: PPUSH
28130: LD_EXP 59
28134: PPUSH
28135: CALL_OW 250
28139: PPUSH
28140: LD_EXP 59
28144: PPUSH
28145: CALL_OW 251
28149: PPUSH
28150: CALL_OW 171
// wait ( 0 0$2.5 ) ;
28154: LD_INT 88
28156: PPUSH
28157: CALL_OW 67
// DialogueOn ;
28161: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28165: LD_EXP 81
28169: PPUSH
28170: LD_STRING D9-Gri-2
28172: PPUSH
28173: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28177: LD_EXP 60
28181: PPUSH
28182: LD_STRING D9-Kur-2
28184: PPUSH
28185: CALL_OW 94
// DialogueOff ;
28189: CALL_OW 7
// repeat wait ( 1 ) ;
28193: LD_INT 1
28195: PPUSH
28196: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28200: LD_EXP 81
28204: PPUSH
28205: CALL_OW 256
28209: PUSH
28210: LD_INT 1000
28212: LESS
28213: IFFALSE 28193
// DialogueOn ;
28215: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28219: LD_EXP 81
28223: PPUSH
28224: LD_STRING D9-Gri-3
28226: PPUSH
28227: CALL_OW 94
// DialogueOff ;
28231: CALL_OW 7
// KillUnit ( Grishko ) ;
28235: LD_EXP 81
28239: PPUSH
28240: CALL_OW 66
// wait ( 0 0$12 ) ;
28244: LD_INT 420
28246: PPUSH
28247: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28251: LD_EXP 60
28255: PPUSH
28256: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28260: LD_EXP 60
28264: PPUSH
28265: LD_STRING D9-Kur-3
28267: PPUSH
28268: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28272: LD_INT 176
28274: PPUSH
28275: LD_INT 110
28277: PPUSH
28278: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28282: LD_EXP 87
28286: PPUSH
28287: LD_INT 21
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PPUSH
28297: CALL_OW 72
28301: PPUSH
28302: LD_INT 221
28304: PPUSH
28305: LD_INT 110
28307: PPUSH
28308: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28312: LD_EXP 86
28316: PPUSH
28317: LD_INT 161
28319: PPUSH
28320: LD_INT 109
28322: PPUSH
28323: CALL_OW 114
// wait ( 0 0$7 ) ;
28327: LD_INT 245
28329: PPUSH
28330: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28334: LD_EXP 87
28338: PPUSH
28339: LD_INT 161
28341: PPUSH
28342: LD_INT 109
28344: PPUSH
28345: CALL_OW 114
// wait ( 0 0$11 ) ;
28349: LD_INT 385
28351: PPUSH
28352: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28356: LD_EXP 60
28360: PPUSH
28361: LD_EXP 66
28365: PPUSH
28366: CALL_OW 120
// DialogueOn ;
28370: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28374: LD_EXP 60
28378: PPUSH
28379: LD_STRING D9a-Kur-1
28381: PPUSH
28382: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28386: LD_EXP 48
28390: PPUSH
28391: LD_STRING D9a-Bur-1
28393: PPUSH
28394: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28398: LD_EXP 60
28402: PPUSH
28403: LD_STRING D9a-Kur-2
28405: PPUSH
28406: CALL_OW 94
// DialogueOff ;
28410: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28414: LD_EXP 78
28418: PPUSH
28419: CALL_OW 122
// wait ( 0 0$1 ) ;
28423: LD_INT 35
28425: PPUSH
28426: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28430: LD_EXP 78
28434: PPUSH
28435: LD_EXP 59
28439: PPUSH
28440: CALL_OW 250
28444: PPUSH
28445: LD_EXP 59
28449: PPUSH
28450: CALL_OW 251
28454: PPUSH
28455: CALL_OW 111
// immortalSurvivors = true ;
28459: LD_ADDR_EXP 25
28463: PUSH
28464: LD_INT 1
28466: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28467: LD_ADDR_VAR 0 2
28471: PUSH
28472: LD_INT 22
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 21
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 50
28494: PUSH
28495: EMPTY
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 69
28507: PUSH
28508: FOR_IN
28509: IFFALSE 28522
// RemoveUnit ( tmpUS ) ;
28511: LD_VAR 0 2
28515: PPUSH
28516: CALL_OW 64
28520: GO 28508
28522: POP
28523: POP
// repeat wait ( 0 0$1 ) ;
28524: LD_INT 35
28526: PPUSH
28527: CALL_OW 67
// until IsDead ( Kurin ) ;
28531: LD_EXP 60
28535: PPUSH
28536: CALL_OW 301
28540: IFFALSE 28524
// wait ( 0 0$1 ) ;
28542: LD_INT 35
28544: PPUSH
28545: CALL_OW 67
// nearTurrets = [ ] ;
28549: LD_ADDR_VAR 0 8
28553: PUSH
28554: EMPTY
28555: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28556: LD_ADDR_VAR 0 7
28560: PUSH
28561: LD_INT 22
28563: PUSH
28564: LD_INT 6
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 30
28573: PUSH
28574: LD_INT 32
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 50
28583: PUSH
28584: EMPTY
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: ST_TO_ADDR
// for i = 1 to 2 do
28597: LD_ADDR_VAR 0 1
28601: PUSH
28602: DOUBLE
28603: LD_INT 1
28605: DEC
28606: ST_TO_ADDR
28607: LD_INT 2
28609: PUSH
28610: FOR_TO
28611: IFFALSE 28720
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28613: LD_ADDR_VAR 0 8
28617: PUSH
28618: LD_VAR 0 8
28622: PUSH
28623: LD_VAR 0 7
28627: PPUSH
28628: LD_EXP 59
28632: PPUSH
28633: CALL_OW 74
28637: ADD
28638: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28639: LD_ADDR_VAR 0 7
28643: PUSH
28644: LD_VAR 0 7
28648: PUSH
28649: LD_VAR 0 8
28653: DIFF
28654: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28655: LD_ADDR_VAR 0 3
28659: PUSH
28660: LD_VAR 0 8
28664: PUSH
28665: LD_VAR 0 1
28669: ARRAY
28670: PPUSH
28671: CALL_OW 313
28675: PUSH
28676: LD_INT 1
28678: ARRAY
28679: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28680: LD_VAR 0 3
28684: PPUSH
28685: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28689: LD_VAR 0 3
28693: PPUSH
28694: LD_EXP 59
28698: PPUSH
28699: CALL_OW 250
28703: PPUSH
28704: LD_EXP 59
28708: PPUSH
28709: CALL_OW 251
28713: PPUSH
28714: CALL_OW 171
// end ;
28718: GO 28610
28720: POP
28721: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 22
28729: PUSH
28730: LD_INT 6
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 21
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 30
28752: PUSH
28753: LD_INT 6
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: LD_INT 7
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PUSH
28785: LD_INT 1
28787: ARRAY
28788: PPUSH
28789: CALL_OW 313
28793: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28794: LD_VAR 0 3
28798: PPUSH
28799: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28803: LD_VAR 0 3
28807: PPUSH
28808: LD_EXP 59
28812: PPUSH
28813: CALL_OW 250
28817: PPUSH
28818: LD_EXP 59
28822: PPUSH
28823: CALL_OW 251
28827: PPUSH
28828: CALL_OW 171
// wait ( 0 0$14 ) ;
28832: LD_INT 490
28834: PPUSH
28835: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
28839: LD_INT 26
28841: PPUSH
28842: LD_INT 22
28844: PUSH
28845: LD_INT 6
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 21
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PPUSH
28866: CALL_OW 70
28870: PPUSH
28871: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
28875: LD_ADDR_VAR 0 1
28879: PUSH
28880: LD_INT 26
28882: PPUSH
28883: LD_INT 22
28885: PUSH
28886: LD_INT 6
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 21
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 70
28911: PUSH
28912: FOR_IN
28913: IFFALSE 28978
// begin tmpRu = UnitsInside ( i ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_VAR 0 1
28924: PPUSH
28925: CALL_OW 313
28929: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
28930: LD_VAR 0 3
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28943: LD_VAR 0 3
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: LD_EXP 59
28956: PPUSH
28957: CALL_OW 250
28961: PPUSH
28962: LD_EXP 59
28966: PPUSH
28967: CALL_OW 251
28971: PPUSH
28972: CALL_OW 171
// end ;
28976: GO 28912
28978: POP
28979: POP
// wait ( 0 0$1 ) ;
28980: LD_INT 35
28982: PPUSH
28983: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28987: LD_INT 26
28989: PPUSH
28990: LD_INT 22
28992: PUSH
28993: LD_INT 6
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 21
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: CALL_OW 70
29018: PPUSH
29019: LD_EXP 59
29023: PPUSH
29024: CALL_OW 250
29028: PPUSH
29029: LD_EXP 59
29033: PPUSH
29034: CALL_OW 251
29038: PPUSH
29039: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29043: LD_EXP 73
29047: PPUSH
29048: CALL_OW 313
29052: PUSH
29053: LD_INT 1
29055: ARRAY
29056: PPUSH
29057: CALL_OW 121
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
29061: LD_INT 22
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: PPUSH
29090: CALL_OW 121
// wait ( 0 0$1 ) ;
29094: LD_INT 35
29096: PPUSH
29097: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29101: LD_INT 22
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 21
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PPUSH
29125: CALL_OW 69
29129: PPUSH
29130: LD_EXP 61
29134: PPUSH
29135: CALL_OW 250
29139: PPUSH
29140: LD_EXP 61
29144: PPUSH
29145: CALL_OW 251
29149: PPUSH
29150: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29154: LD_INT 22
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 21
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: PPUSH
29183: LD_EXP 61
29187: PPUSH
29188: CALL_OW 250
29192: PPUSH
29193: LD_EXP 61
29197: PPUSH
29198: CALL_OW 251
29202: PPUSH
29203: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
29207: LD_EXP 48
29211: PPUSH
29212: CALL_OW 87
// wait ( 0 0$1 ) ;
29216: LD_INT 35
29218: PPUSH
29219: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 ;
29223: LD_EXP 48
29227: PPUSH
29228: LD_EXP 61
29232: PPUSH
29233: CALL_OW 296
29237: PUSH
29238: LD_INT 8
29240: LESS
29241: IFFALSE 29154
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
29243: LD_EXP 48
29247: PUSH
29248: LD_EXP 61
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
29261: LD_EXP 48
29265: PPUSH
29266: LD_EXP 61
29270: PPUSH
29271: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29275: LD_EXP 61
29279: PPUSH
29280: LD_EXP 48
29284: PPUSH
29285: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29289: LD_EXP 48
29293: PPUSH
29294: LD_STRING D10a-Bur-1
29296: PPUSH
29297: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29301: LD_EXP 61
29305: PPUSH
29306: LD_STRING D10a-Pop-1
29308: PPUSH
29309: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29313: LD_EXP 48
29317: PPUSH
29318: LD_STRING D10a-Bur-2
29320: PPUSH
29321: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29325: LD_EXP 61
29329: PPUSH
29330: LD_STRING D10a-Pop-2
29332: PPUSH
29333: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29337: LD_EXP 48
29341: PPUSH
29342: LD_STRING D10a-Bur-3
29344: PPUSH
29345: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29349: LD_EXP 61
29353: PPUSH
29354: LD_STRING D10a-Pop-3
29356: PPUSH
29357: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29361: LD_EXP 48
29365: PPUSH
29366: LD_STRING D10a-Bur-4
29368: PPUSH
29369: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29373: LD_EXP 61
29377: PPUSH
29378: LD_STRING D10a-Pop-4
29380: PPUSH
29381: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29385: LD_EXP 48
29389: PPUSH
29390: LD_STRING D10a-Bur-5
29392: PPUSH
29393: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29397: LD_EXP 61
29401: PPUSH
29402: LD_STRING D10a-Pop-5
29404: PPUSH
29405: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29409: LD_ADDR_EXP 78
29413: PUSH
29414: EMPTY
29415: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29416: LD_ADDR_EXP 78
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: LD_INT 6
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 50
29433: PUSH
29434: EMPTY
29435: LIST
29436: PUSH
29437: LD_INT 21
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: PPUSH
29452: CALL_OW 69
29456: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
29457: LD_INT 22
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 21
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: PPUSH
29486: LD_INT 83
29488: PPUSH
29489: LD_INT 157
29491: PPUSH
29492: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
29496: LD_EXP 78
29500: PPUSH
29501: LD_INT 83
29503: PPUSH
29504: LD_INT 157
29506: PPUSH
29507: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
29511: LD_EXP 48
29515: PPUSH
29516: CALL_OW 87
// wait ( 0 0$1 ) ;
29520: LD_INT 35
29522: PPUSH
29523: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
29527: LD_EXP 48
29531: PPUSH
29532: LD_EXP 59
29536: PPUSH
29537: CALL_OW 296
29541: PUSH
29542: LD_INT 23
29544: GREATER
29545: IFFALSE 29511
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
29547: LD_INT 113
29549: PPUSH
29550: LD_INT 96
29552: PPUSH
29553: LD_INT 3
29555: PPUSH
29556: LD_INT 12
29558: NEG
29559: PPUSH
29560: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
29564: LD_INT 113
29566: PPUSH
29567: LD_INT 96
29569: PPUSH
29570: CALL_OW 86
// canDestroyBeriaBase = true ;
29574: LD_ADDR_EXP 28
29578: PUSH
29579: LD_INT 1
29581: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_INT 25
29589: PPUSH
29590: LD_INT 22
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 21
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PPUSH
29614: CALL_OW 70
29618: ST_TO_ADDR
// for i = 1 to beriaBuildings do
29619: LD_ADDR_VAR 0 1
29623: PUSH
29624: DOUBLE
29625: LD_INT 1
29627: DEC
29628: ST_TO_ADDR
29629: LD_VAR 0 5
29633: PUSH
29634: FOR_TO
29635: IFFALSE 29717
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
29637: LD_ADDR_VAR 0 6
29641: PUSH
29642: LD_VAR 0 5
29646: PPUSH
29647: LD_INT 22
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PPUSH
29657: CALL_OW 69
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: CALL_OW 74
29670: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_VAR 0 5
29680: PUSH
29681: LD_VAR 0 6
29685: DIFF
29686: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
29687: LD_EXP 86
29691: PPUSH
29692: LD_VAR 0 6
29696: PPUSH
29697: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
29701: LD_EXP 87
29705: PPUSH
29706: LD_VAR 0 6
29710: PPUSH
29711: CALL_OW 175
// end ;
29715: GO 29634
29717: POP
29718: POP
// wait ( 0 0$35 ) ;
29719: LD_INT 1225
29721: PPUSH
29722: CALL_OW 67
// FinishMission ;
29726: CALL 20186 0 0
// end ;
29730: PPOPN 8
29732: END
// every 1 trigger immortalSurvivors do var unit ;
29733: LD_EXP 25
29737: IFFALSE 29775
29739: GO 29741
29741: DISABLE
29742: LD_INT 0
29744: PPUSH
// begin enable ;
29745: ENABLE
// for unit in survivorsArabianAttack do
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_EXP 78
29755: PUSH
29756: FOR_IN
29757: IFFALSE 29773
// SetLives ( unit , 1000 ) ;
29759: LD_VAR 0 1
29763: PPUSH
29764: LD_INT 1000
29766: PPUSH
29767: CALL_OW 234
29771: GO 29756
29773: POP
29774: POP
// end ; end_of_file
29775: PPOPN 1
29777: END
// every 0 0$30 do
29778: GO 29780
29780: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
29781: LD_INT 3
29783: PPUSH
29784: LD_INT 5
29786: PPUSH
29787: CALL_OW 12
29791: PPUSH
29792: LD_INT 76
29794: PPUSH
29795: LD_INT 111
29797: PPUSH
29798: LD_INT 5
29800: PPUSH
29801: LD_INT 1
29803: PPUSH
29804: CALL_OW 56
29808: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
29809: LD_EXP 5
29813: IFFALSE 29885
29815: GO 29817
29817: DISABLE
29818: LD_INT 0
29820: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
29821: LD_INT 50
29823: PPUSH
29824: LD_INT 4200
29826: PPUSH
29827: CALL_OW 12
29831: PPUSH
29832: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
29836: LD_VAR 0 1
29840: PUSH
29841: LD_INT 175
29843: MUL
29844: PPUSH
29845: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
29849: LD_ADDR_VAR 0 1
29853: PUSH
29854: LD_VAR 0 1
29858: PUSH
29859: LD_INT 1
29861: PLUS
29862: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
29863: LD_INT 3
29865: PPUSH
29866: LD_INT 5
29868: PPUSH
29869: CALL_OW 12
29873: PPUSH
29874: LD_INT 6
29876: PPUSH
29877: LD_INT 1
29879: PPUSH
29880: CALL_OW 55
// enable ;
29884: ENABLE
// end ; end_of_file
29885: PPOPN 1
29887: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
29888: LD_EXP 88
29892: IFFALSE 30055
29894: GO 29896
29896: DISABLE
// begin enable ;
29897: ENABLE
// case counterIndex of 1 :
29898: LD_EXP 89
29902: PUSH
29903: LD_INT 1
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29928
29911: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
29912: LD_ADDR_EXP 40
29916: PUSH
29917: LD_EXP 40
29921: PUSH
29922: LD_INT 35
29924: MINUS
29925: ST_TO_ADDR
29926: GO 30055
29928: LD_INT 2
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29970
29936: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
29937: LD_ADDR_OWVAR 47
29941: PUSH
29942: LD_STRING #Ru03-1
29944: PUSH
29945: LD_EXP 15
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29954: LD_ADDR_EXP 15
29958: PUSH
29959: LD_EXP 15
29963: PUSH
29964: LD_INT 35
29966: MINUS
29967: ST_TO_ADDR
// end ; 3 :
29968: GO 30055
29970: LD_INT 3
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30012
29978: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
29979: LD_ADDR_OWVAR 47
29983: PUSH
29984: LD_STRING #Ru03-2
29986: PUSH
29987: LD_EXP 15
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29996: LD_ADDR_EXP 15
30000: PUSH
30001: LD_EXP 15
30005: PUSH
30006: LD_INT 35
30008: MINUS
30009: ST_TO_ADDR
// end ; 4 :
30010: GO 30055
30012: LD_INT 4
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30054
30020: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
30021: LD_ADDR_OWVAR 47
30025: PUSH
30026: LD_STRING #Ru03-3
30028: PUSH
30029: LD_EXP 14
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
30038: LD_ADDR_EXP 14
30042: PUSH
30043: LD_EXP 14
30047: PUSH
30048: LD_INT 35
30050: MINUS
30051: ST_TO_ADDR
// end ; end ;
30052: GO 30055
30054: POP
// end ; end_of_file
30055: END
// every 7 7$0 do
30056: GO 30058
30058: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
30059: LD_INT 3
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: LD_INT 0
30067: PPUSH
30068: LD_INT 7
30070: PPUSH
30071: CALL 5807 0 4
30075: END
// every 12 12$0 do
30076: GO 30078
30078: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
30079: LD_INT 2
30081: PPUSH
30082: LD_INT 2
30084: PPUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 9
30090: PUSH
30091: LD_INT 8
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: PPUSH
30101: LD_INT 2
30103: PPUSH
30104: CALL_OW 12
30108: ARRAY
30109: PPUSH
30110: CALL 5807 0 4
30114: END
// every 20 20$0 do
30115: GO 30117
30117: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
30118: LD_INT 4
30120: PPUSH
30121: LD_INT 2
30123: PPUSH
30124: LD_INT 0
30126: PPUSH
30127: LD_INT 7
30129: PPUSH
30130: CALL 5807 0 4
30134: END
// every 23 23$0 do
30135: GO 30137
30137: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
30138: LD_INT 3
30140: PPUSH
30141: LD_INT 1
30143: PPUSH
30144: LD_INT 2
30146: PPUSH
30147: LD_INT 9
30149: PUSH
30150: LD_INT 8
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_INT 2
30162: PPUSH
30163: CALL_OW 12
30167: ARRAY
30168: PPUSH
30169: CALL 5807 0 4
30173: END
// export function Nef_PrepareNature ; var i , un ; begin
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
30179: LD_ADDR_VAR 0 2
30183: PUSH
30184: DOUBLE
30185: LD_INT 1
30187: DEC
30188: ST_TO_ADDR
30189: LD_EXP 32
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30309
// begin uc_side = 0 ;
30201: LD_ADDR_OWVAR 20
30205: PUSH
30206: LD_INT 0
30208: ST_TO_ADDR
// uc_nation = nation_nature ;
30209: LD_ADDR_OWVAR 21
30213: PUSH
30214: LD_INT 0
30216: ST_TO_ADDR
// hc_class = class_apeman ;
30217: LD_ADDR_OWVAR 28
30221: PUSH
30222: LD_INT 12
30224: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30225: LD_ADDR_OWVAR 31
30229: PUSH
30230: LD_EXP 33
30234: PUSH
30235: LD_INT 1
30237: ARRAY
30238: PUSH
30239: LD_EXP 33
30243: PUSH
30244: LD_INT 2
30246: ARRAY
30247: PUSH
30248: LD_EXP 33
30252: PUSH
30253: LD_INT 3
30255: ARRAY
30256: PUSH
30257: LD_EXP 33
30261: PUSH
30262: LD_INT 4
30264: ARRAY
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30272: LD_ADDR_OWVAR 35
30276: PUSH
30277: LD_EXP 34
30281: ST_TO_ADDR
// un = CreateHuman ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: CALL_OW 44
30291: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_INT 27
30299: PPUSH
30300: LD_INT 0
30302: PPUSH
30303: CALL_OW 49
// end ;
30307: GO 30198
30309: POP
30310: POP
// for i := 1 to animalsAmount [ 2 ] do
30311: LD_ADDR_VAR 0 2
30315: PUSH
30316: DOUBLE
30317: LD_INT 1
30319: DEC
30320: ST_TO_ADDR
30321: LD_EXP 32
30325: PUSH
30326: LD_INT 2
30328: ARRAY
30329: PUSH
30330: FOR_TO
30331: IFFALSE 30441
// begin uc_side = 0 ;
30333: LD_ADDR_OWVAR 20
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// uc_nation = nation_nature ;
30341: LD_ADDR_OWVAR 21
30345: PUSH
30346: LD_INT 0
30348: ST_TO_ADDR
// hc_class = class_phororhacos ;
30349: LD_ADDR_OWVAR 28
30353: PUSH
30354: LD_INT 18
30356: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30357: LD_ADDR_OWVAR 31
30361: PUSH
30362: LD_EXP 33
30366: PUSH
30367: LD_INT 1
30369: ARRAY
30370: PUSH
30371: LD_EXP 33
30375: PUSH
30376: LD_INT 2
30378: ARRAY
30379: PUSH
30380: LD_EXP 33
30384: PUSH
30385: LD_INT 3
30387: ARRAY
30388: PUSH
30389: LD_EXP 33
30393: PUSH
30394: LD_INT 4
30396: ARRAY
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30404: LD_ADDR_OWVAR 35
30408: PUSH
30409: LD_EXP 34
30413: ST_TO_ADDR
// un = CreateHuman ;
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: CALL_OW 44
30423: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30424: LD_VAR 0 3
30428: PPUSH
30429: LD_INT 27
30431: PPUSH
30432: LD_INT 0
30434: PPUSH
30435: CALL_OW 49
// end ;
30439: GO 30330
30441: POP
30442: POP
// for i := 1 to animalsAmount [ 3 ] do
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: DOUBLE
30449: LD_INT 1
30451: DEC
30452: ST_TO_ADDR
30453: LD_EXP 32
30457: PUSH
30458: LD_INT 3
30460: ARRAY
30461: PUSH
30462: FOR_TO
30463: IFFALSE 30573
// begin uc_side = 0 ;
30465: LD_ADDR_OWVAR 20
30469: PUSH
30470: LD_INT 0
30472: ST_TO_ADDR
// uc_nation = nation_nature ;
30473: LD_ADDR_OWVAR 21
30477: PUSH
30478: LD_INT 0
30480: ST_TO_ADDR
// hc_class = class_tiger ;
30481: LD_ADDR_OWVAR 28
30485: PUSH
30486: LD_INT 14
30488: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30489: LD_ADDR_OWVAR 31
30493: PUSH
30494: LD_EXP 33
30498: PUSH
30499: LD_INT 1
30501: ARRAY
30502: PUSH
30503: LD_EXP 33
30507: PUSH
30508: LD_INT 2
30510: ARRAY
30511: PUSH
30512: LD_EXP 33
30516: PUSH
30517: LD_INT 3
30519: ARRAY
30520: PUSH
30521: LD_EXP 33
30525: PUSH
30526: LD_INT 4
30528: ARRAY
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30536: LD_ADDR_OWVAR 35
30540: PUSH
30541: LD_EXP 34
30545: ST_TO_ADDR
// un = CreateHuman ;
30546: LD_ADDR_VAR 0 3
30550: PUSH
30551: CALL_OW 44
30555: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30556: LD_VAR 0 3
30560: PPUSH
30561: LD_INT 27
30563: PPUSH
30564: LD_INT 0
30566: PPUSH
30567: CALL_OW 49
// end ;
30571: GO 30462
30573: POP
30574: POP
// for i := 1 to animalsAmount [ 4 ] do
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: DOUBLE
30581: LD_INT 1
30583: DEC
30584: ST_TO_ADDR
30585: LD_EXP 32
30589: PUSH
30590: LD_INT 4
30592: ARRAY
30593: PUSH
30594: FOR_TO
30595: IFFALSE 30705
// begin uc_side = 0 ;
30597: LD_ADDR_OWVAR 20
30601: PUSH
30602: LD_INT 0
30604: ST_TO_ADDR
// uc_nation = nation_nature ;
30605: LD_ADDR_OWVAR 21
30609: PUSH
30610: LD_INT 0
30612: ST_TO_ADDR
// hc_class = 21 ;
30613: LD_ADDR_OWVAR 28
30617: PUSH
30618: LD_INT 21
30620: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30621: LD_ADDR_OWVAR 31
30625: PUSH
30626: LD_EXP 33
30630: PUSH
30631: LD_INT 1
30633: ARRAY
30634: PUSH
30635: LD_EXP 33
30639: PUSH
30640: LD_INT 2
30642: ARRAY
30643: PUSH
30644: LD_EXP 33
30648: PUSH
30649: LD_INT 3
30651: ARRAY
30652: PUSH
30653: LD_EXP 33
30657: PUSH
30658: LD_INT 4
30660: ARRAY
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30668: LD_ADDR_OWVAR 35
30672: PUSH
30673: LD_EXP 34
30677: ST_TO_ADDR
// un = CreateHuman ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: CALL_OW 44
30687: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_INT 27
30695: PPUSH
30696: LD_INT 0
30698: PPUSH
30699: CALL_OW 49
// end ;
30703: GO 30594
30705: POP
30706: POP
// for i := 1 to animalsAmount [ 5 ] do
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: DOUBLE
30713: LD_INT 1
30715: DEC
30716: ST_TO_ADDR
30717: LD_EXP 32
30721: PUSH
30722: LD_INT 5
30724: ARRAY
30725: PUSH
30726: FOR_TO
30727: IFFALSE 30788
// begin uc_side = 0 ;
30729: LD_ADDR_OWVAR 20
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// uc_nation = nation_nature ;
30737: LD_ADDR_OWVAR 21
30741: PUSH
30742: LD_INT 0
30744: ST_TO_ADDR
// vc_chassis := 31 ;
30745: LD_ADDR_OWVAR 37
30749: PUSH
30750: LD_INT 31
30752: ST_TO_ADDR
// vc_control := control_rider ;
30753: LD_ADDR_OWVAR 38
30757: PUSH
30758: LD_INT 4
30760: ST_TO_ADDR
// un := CreateVehicle ;
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: CALL_OW 45
30770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30771: LD_VAR 0 3
30775: PPUSH
30776: LD_INT 27
30778: PPUSH
30779: LD_INT 0
30781: PPUSH
30782: CALL_OW 49
// end ;
30786: GO 30726
30788: POP
30789: POP
// end ; end_of_file
30790: LD_VAR 0 1
30794: RET
// every 1 trigger scholtzeSaved do
30795: LD_EXP 7
30799: IFFALSE 30811
30801: GO 30803
30803: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
30804: LD_STRING ACH_PROFESSOR
30806: PPUSH
30807: CALL_OW 543
30811: END
// every 1 trigger IsDead ( Sikorski ) do
30812: LD_INT 290
30814: PPUSH
30815: CALL_OW 301
30819: IFFALSE 30831
30821: GO 30823
30823: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
30824: LD_STRING ACH_SIKORSKI
30826: PPUSH
30827: CALL_OW 543
30831: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
30832: LD_EXP 12
30836: NOT
30837: PUSH
30838: LD_EXP 24
30842: NOT
30843: AND
30844: IFFALSE 30856
30846: GO 30848
30848: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
30849: LD_STRING ACH_REINFORCE
30851: PPUSH
30852: CALL_OW 543
30856: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
30857: LD_INT 0
30859: PPUSH
// ru_radar := 98 ;
30860: LD_ADDR_EXP 90
30864: PUSH
30865: LD_INT 98
30867: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30868: LD_ADDR_EXP 91
30872: PUSH
30873: LD_INT 89
30875: ST_TO_ADDR
// us_hack := 99 ;
30876: LD_ADDR_EXP 92
30880: PUSH
30881: LD_INT 99
30883: ST_TO_ADDR
// us_artillery := 97 ;
30884: LD_ADDR_EXP 93
30888: PUSH
30889: LD_INT 97
30891: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30892: LD_ADDR_EXP 94
30896: PUSH
30897: LD_INT 91
30899: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
30900: LD_ADDR_EXP 95
30904: PUSH
30905: LD_INT 92
30907: ST_TO_ADDR
// tech_Artillery := 80 ;
30908: LD_ADDR_EXP 96
30912: PUSH
30913: LD_INT 80
30915: ST_TO_ADDR
// tech_RadMat := 81 ;
30916: LD_ADDR_EXP 97
30920: PUSH
30921: LD_INT 81
30923: ST_TO_ADDR
// tech_BasicTools := 82 ;
30924: LD_ADDR_EXP 98
30928: PUSH
30929: LD_INT 82
30931: ST_TO_ADDR
// tech_Cargo := 83 ;
30932: LD_ADDR_EXP 99
30936: PUSH
30937: LD_INT 83
30939: ST_TO_ADDR
// tech_Track := 84 ;
30940: LD_ADDR_EXP 100
30944: PUSH
30945: LD_INT 84
30947: ST_TO_ADDR
// tech_Crane := 85 ;
30948: LD_ADDR_EXP 101
30952: PUSH
30953: LD_INT 85
30955: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30956: LD_ADDR_EXP 102
30960: PUSH
30961: LD_INT 86
30963: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30964: LD_ADDR_EXP 103
30968: PUSH
30969: LD_INT 87
30971: ST_TO_ADDR
// end ;
30972: LD_VAR 0 1
30976: RET
// every 1 do
30977: GO 30979
30979: DISABLE
// InitGlobalVariables ; end_of_file
30980: CALL 30857 0 0
30984: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30985: LD_INT 0
30987: PPUSH
30988: PPUSH
// if exist_mode then
30989: LD_VAR 0 2
30993: IFFALSE 31018
// unit := CreateCharacter ( prefix & ident ) else
30995: LD_ADDR_VAR 0 5
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: LD_VAR 0 1
31009: STR
31010: PPUSH
31011: CALL_OW 34
31015: ST_TO_ADDR
31016: GO 31033
// unit := NewCharacter ( ident ) ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 25
31032: ST_TO_ADDR
// result := unit ;
31033: LD_ADDR_VAR 0 4
31037: PUSH
31038: LD_VAR 0 5
31042: ST_TO_ADDR
// end ;
31043: LD_VAR 0 4
31047: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31048: LD_INT 0
31050: PPUSH
31051: PPUSH
// if not side or not nation then
31052: LD_VAR 0 1
31056: NOT
31057: PUSH
31058: LD_VAR 0 2
31062: NOT
31063: OR
31064: IFFALSE 31068
// exit ;
31066: GO 31832
// case nation of nation_american :
31068: LD_VAR 0 2
31072: PUSH
31073: LD_INT 1
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31295
31081: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31082: LD_ADDR_VAR 0 4
31086: PUSH
31087: LD_INT 35
31089: PUSH
31090: LD_INT 45
31092: PUSH
31093: LD_INT 46
31095: PUSH
31096: LD_INT 47
31098: PUSH
31099: LD_INT 82
31101: PUSH
31102: LD_INT 83
31104: PUSH
31105: LD_INT 84
31107: PUSH
31108: LD_INT 85
31110: PUSH
31111: LD_INT 86
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 6
31122: PUSH
31123: LD_INT 15
31125: PUSH
31126: LD_INT 16
31128: PUSH
31129: LD_INT 7
31131: PUSH
31132: LD_INT 12
31134: PUSH
31135: LD_INT 13
31137: PUSH
31138: LD_INT 10
31140: PUSH
31141: LD_INT 14
31143: PUSH
31144: LD_INT 20
31146: PUSH
31147: LD_INT 21
31149: PUSH
31150: LD_INT 22
31152: PUSH
31153: LD_INT 25
31155: PUSH
31156: LD_INT 32
31158: PUSH
31159: LD_INT 27
31161: PUSH
31162: LD_INT 36
31164: PUSH
31165: LD_INT 69
31167: PUSH
31168: LD_INT 39
31170: PUSH
31171: LD_INT 34
31173: PUSH
31174: LD_INT 40
31176: PUSH
31177: LD_INT 48
31179: PUSH
31180: LD_INT 49
31182: PUSH
31183: LD_INT 50
31185: PUSH
31186: LD_INT 51
31188: PUSH
31189: LD_INT 52
31191: PUSH
31192: LD_INT 53
31194: PUSH
31195: LD_INT 54
31197: PUSH
31198: LD_INT 55
31200: PUSH
31201: LD_INT 56
31203: PUSH
31204: LD_INT 57
31206: PUSH
31207: LD_INT 58
31209: PUSH
31210: LD_INT 59
31212: PUSH
31213: LD_INT 60
31215: PUSH
31216: LD_INT 61
31218: PUSH
31219: LD_INT 62
31221: PUSH
31222: LD_INT 80
31224: PUSH
31225: LD_INT 82
31227: PUSH
31228: LD_INT 83
31230: PUSH
31231: LD_INT 84
31233: PUSH
31234: LD_INT 85
31236: PUSH
31237: LD_INT 86
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
31293: GO 31756
31295: LD_INT 2
31297: DOUBLE
31298: EQUAL
31299: IFTRUE 31303
31301: GO 31525
31303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31304: LD_ADDR_VAR 0 4
31308: PUSH
31309: LD_INT 35
31311: PUSH
31312: LD_INT 45
31314: PUSH
31315: LD_INT 46
31317: PUSH
31318: LD_INT 47
31320: PUSH
31321: LD_INT 82
31323: PUSH
31324: LD_INT 83
31326: PUSH
31327: LD_INT 84
31329: PUSH
31330: LD_INT 85
31332: PUSH
31333: LD_INT 87
31335: PUSH
31336: LD_INT 70
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 11
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: LD_INT 4
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: LD_INT 6
31356: PUSH
31357: LD_INT 15
31359: PUSH
31360: LD_INT 18
31362: PUSH
31363: LD_INT 7
31365: PUSH
31366: LD_INT 17
31368: PUSH
31369: LD_INT 8
31371: PUSH
31372: LD_INT 20
31374: PUSH
31375: LD_INT 21
31377: PUSH
31378: LD_INT 22
31380: PUSH
31381: LD_INT 72
31383: PUSH
31384: LD_INT 26
31386: PUSH
31387: LD_INT 69
31389: PUSH
31390: LD_INT 39
31392: PUSH
31393: LD_INT 40
31395: PUSH
31396: LD_INT 41
31398: PUSH
31399: LD_INT 42
31401: PUSH
31402: LD_INT 43
31404: PUSH
31405: LD_INT 48
31407: PUSH
31408: LD_INT 49
31410: PUSH
31411: LD_INT 50
31413: PUSH
31414: LD_INT 51
31416: PUSH
31417: LD_INT 52
31419: PUSH
31420: LD_INT 53
31422: PUSH
31423: LD_INT 54
31425: PUSH
31426: LD_INT 55
31428: PUSH
31429: LD_INT 56
31431: PUSH
31432: LD_INT 60
31434: PUSH
31435: LD_INT 61
31437: PUSH
31438: LD_INT 62
31440: PUSH
31441: LD_INT 66
31443: PUSH
31444: LD_INT 67
31446: PUSH
31447: LD_INT 68
31449: PUSH
31450: LD_INT 81
31452: PUSH
31453: LD_INT 82
31455: PUSH
31456: LD_INT 83
31458: PUSH
31459: LD_INT 84
31461: PUSH
31462: LD_INT 85
31464: PUSH
31465: LD_INT 87
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
31523: GO 31756
31525: LD_INT 3
31527: DOUBLE
31528: EQUAL
31529: IFTRUE 31533
31531: GO 31755
31533: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31534: LD_ADDR_VAR 0 4
31538: PUSH
31539: LD_INT 46
31541: PUSH
31542: LD_INT 47
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 82
31553: PUSH
31554: LD_INT 83
31556: PUSH
31557: LD_INT 84
31559: PUSH
31560: LD_INT 85
31562: PUSH
31563: LD_INT 86
31565: PUSH
31566: LD_INT 11
31568: PUSH
31569: LD_INT 9
31571: PUSH
31572: LD_INT 20
31574: PUSH
31575: LD_INT 19
31577: PUSH
31578: LD_INT 21
31580: PUSH
31581: LD_INT 24
31583: PUSH
31584: LD_INT 22
31586: PUSH
31587: LD_INT 25
31589: PUSH
31590: LD_INT 28
31592: PUSH
31593: LD_INT 29
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 31
31601: PUSH
31602: LD_INT 37
31604: PUSH
31605: LD_INT 38
31607: PUSH
31608: LD_INT 32
31610: PUSH
31611: LD_INT 27
31613: PUSH
31614: LD_INT 33
31616: PUSH
31617: LD_INT 69
31619: PUSH
31620: LD_INT 39
31622: PUSH
31623: LD_INT 34
31625: PUSH
31626: LD_INT 40
31628: PUSH
31629: LD_INT 71
31631: PUSH
31632: LD_INT 23
31634: PUSH
31635: LD_INT 44
31637: PUSH
31638: LD_INT 48
31640: PUSH
31641: LD_INT 49
31643: PUSH
31644: LD_INT 50
31646: PUSH
31647: LD_INT 51
31649: PUSH
31650: LD_INT 52
31652: PUSH
31653: LD_INT 53
31655: PUSH
31656: LD_INT 54
31658: PUSH
31659: LD_INT 55
31661: PUSH
31662: LD_INT 56
31664: PUSH
31665: LD_INT 57
31667: PUSH
31668: LD_INT 58
31670: PUSH
31671: LD_INT 59
31673: PUSH
31674: LD_INT 63
31676: PUSH
31677: LD_INT 64
31679: PUSH
31680: LD_INT 65
31682: PUSH
31683: LD_INT 82
31685: PUSH
31686: LD_INT 83
31688: PUSH
31689: LD_INT 84
31691: PUSH
31692: LD_INT 85
31694: PUSH
31695: LD_INT 86
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
31753: GO 31756
31755: POP
// if state > - 1 and state < 3 then
31756: LD_VAR 0 3
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: GREATER
31765: PUSH
31766: LD_VAR 0 3
31770: PUSH
31771: LD_INT 3
31773: LESS
31774: AND
31775: IFFALSE 31832
// for i in result do
31777: LD_ADDR_VAR 0 5
31781: PUSH
31782: LD_VAR 0 4
31786: PUSH
31787: FOR_IN
31788: IFFALSE 31830
// if GetTech ( i , side ) <> state then
31790: LD_VAR 0 5
31794: PPUSH
31795: LD_VAR 0 1
31799: PPUSH
31800: CALL_OW 321
31804: PUSH
31805: LD_VAR 0 3
31809: NONEQUAL
31810: IFFALSE 31828
// result := result diff i ;
31812: LD_ADDR_VAR 0 4
31816: PUSH
31817: LD_VAR 0 4
31821: PUSH
31822: LD_VAR 0 5
31826: DIFF
31827: ST_TO_ADDR
31828: GO 31787
31830: POP
31831: POP
// end ;
31832: LD_VAR 0 4
31836: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31837: LD_INT 0
31839: PPUSH
31840: PPUSH
31841: PPUSH
// result := true ;
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_INT 1
31849: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: LD_VAR 0 2
31859: PPUSH
31860: CALL_OW 480
31864: ST_TO_ADDR
// if not tmp then
31865: LD_VAR 0 5
31869: NOT
31870: IFFALSE 31874
// exit ;
31872: GO 31923
// for i in tmp do
31874: LD_ADDR_VAR 0 4
31878: PUSH
31879: LD_VAR 0 5
31883: PUSH
31884: FOR_IN
31885: IFFALSE 31921
// if GetTech ( i , side ) <> state_researched then
31887: LD_VAR 0 4
31891: PPUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 321
31901: PUSH
31902: LD_INT 2
31904: NONEQUAL
31905: IFFALSE 31919
// begin result := false ;
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 0
31914: ST_TO_ADDR
// exit ;
31915: POP
31916: POP
31917: GO 31923
// end ;
31919: GO 31884
31921: POP
31922: POP
// end ;
31923: LD_VAR 0 3
31927: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31928: LD_INT 0
31930: PPUSH
31931: PPUSH
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31943: LD_VAR 0 1
31947: NOT
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 257
31958: PUSH
31959: LD_INT 9
31961: NONEQUAL
31962: OR
31963: IFFALSE 31967
// exit ;
31965: GO 32540
// side := GetSide ( unit ) ;
31967: LD_ADDR_VAR 0 9
31971: PUSH
31972: LD_VAR 0 1
31976: PPUSH
31977: CALL_OW 255
31981: ST_TO_ADDR
// tech_space := tech_spacanom ;
31982: LD_ADDR_VAR 0 12
31986: PUSH
31987: LD_INT 29
31989: ST_TO_ADDR
// tech_time := tech_taurad ;
31990: LD_ADDR_VAR 0 13
31994: PUSH
31995: LD_INT 28
31997: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31998: LD_ADDR_VAR 0 11
32002: PUSH
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 310
32012: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32013: LD_VAR 0 11
32017: PPUSH
32018: CALL_OW 247
32022: PUSH
32023: LD_INT 2
32025: EQUAL
32026: IFFALSE 32030
// exit ;
32028: GO 32540
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32030: LD_ADDR_VAR 0 8
32034: PUSH
32035: LD_INT 81
32037: PUSH
32038: LD_VAR 0 9
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: LD_INT 21
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PPUSH
32068: CALL_OW 69
32072: ST_TO_ADDR
// if not tmp then
32073: LD_VAR 0 8
32077: NOT
32078: IFFALSE 32082
// exit ;
32080: GO 32540
// if in_unit then
32082: LD_VAR 0 11
32086: IFFALSE 32110
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32088: LD_ADDR_VAR 0 10
32092: PUSH
32093: LD_VAR 0 8
32097: PPUSH
32098: LD_VAR 0 11
32102: PPUSH
32103: CALL_OW 74
32107: ST_TO_ADDR
32108: GO 32130
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32110: LD_ADDR_VAR 0 10
32114: PUSH
32115: LD_VAR 0 8
32119: PPUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL_OW 74
32129: ST_TO_ADDR
// if not enemy then
32130: LD_VAR 0 10
32134: NOT
32135: IFFALSE 32139
// exit ;
32137: GO 32540
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32139: LD_VAR 0 11
32143: PUSH
32144: LD_VAR 0 11
32148: PPUSH
32149: LD_VAR 0 10
32153: PPUSH
32154: CALL_OW 296
32158: PUSH
32159: LD_INT 13
32161: GREATER
32162: AND
32163: PUSH
32164: LD_VAR 0 1
32168: PPUSH
32169: LD_VAR 0 10
32173: PPUSH
32174: CALL_OW 296
32178: PUSH
32179: LD_INT 12
32181: GREATER
32182: OR
32183: IFFALSE 32187
// exit ;
32185: GO 32540
// missile := [ 1 ] ;
32187: LD_ADDR_VAR 0 14
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32198: LD_VAR 0 9
32202: PPUSH
32203: LD_VAR 0 12
32207: PPUSH
32208: CALL_OW 325
32212: IFFALSE 32241
// missile := Insert ( missile , missile + 1 , 2 ) ;
32214: LD_ADDR_VAR 0 14
32218: PUSH
32219: LD_VAR 0 14
32223: PPUSH
32224: LD_VAR 0 14
32228: PUSH
32229: LD_INT 1
32231: PLUS
32232: PPUSH
32233: LD_INT 2
32235: PPUSH
32236: CALL_OW 2
32240: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32241: LD_VAR 0 9
32245: PPUSH
32246: LD_VAR 0 13
32250: PPUSH
32251: CALL_OW 325
32255: PUSH
32256: LD_VAR 0 10
32260: PPUSH
32261: CALL_OW 255
32265: PPUSH
32266: LD_VAR 0 13
32270: PPUSH
32271: CALL_OW 325
32275: NOT
32276: AND
32277: IFFALSE 32306
// missile := Insert ( missile , missile + 1 , 3 ) ;
32279: LD_ADDR_VAR 0 14
32283: PUSH
32284: LD_VAR 0 14
32288: PPUSH
32289: LD_VAR 0 14
32293: PUSH
32294: LD_INT 1
32296: PLUS
32297: PPUSH
32298: LD_INT 3
32300: PPUSH
32301: CALL_OW 2
32305: ST_TO_ADDR
// if missile < 2 then
32306: LD_VAR 0 14
32310: PUSH
32311: LD_INT 2
32313: LESS
32314: IFFALSE 32318
// exit ;
32316: GO 32540
// x := GetX ( enemy ) ;
32318: LD_ADDR_VAR 0 4
32322: PUSH
32323: LD_VAR 0 10
32327: PPUSH
32328: CALL_OW 250
32332: ST_TO_ADDR
// y := GetY ( enemy ) ;
32333: LD_ADDR_VAR 0 5
32337: PUSH
32338: LD_VAR 0 10
32342: PPUSH
32343: CALL_OW 251
32347: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32348: LD_ADDR_VAR 0 6
32352: PUSH
32353: LD_VAR 0 4
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PPUSH
32362: LD_INT 1
32364: PPUSH
32365: CALL_OW 12
32369: PLUS
32370: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32371: LD_ADDR_VAR 0 7
32375: PUSH
32376: LD_VAR 0 5
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PPUSH
32385: LD_INT 1
32387: PPUSH
32388: CALL_OW 12
32392: PLUS
32393: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32394: LD_VAR 0 6
32398: PPUSH
32399: LD_VAR 0 7
32403: PPUSH
32404: CALL_OW 488
32408: NOT
32409: IFFALSE 32431
// begin _x := x ;
32411: LD_ADDR_VAR 0 6
32415: PUSH
32416: LD_VAR 0 4
32420: ST_TO_ADDR
// _y := y ;
32421: LD_ADDR_VAR 0 7
32425: PUSH
32426: LD_VAR 0 5
32430: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32431: LD_ADDR_VAR 0 3
32435: PUSH
32436: LD_INT 1
32438: PPUSH
32439: LD_VAR 0 14
32443: PPUSH
32444: CALL_OW 12
32448: ST_TO_ADDR
// case i of 1 :
32449: LD_VAR 0 3
32453: PUSH
32454: LD_INT 1
32456: DOUBLE
32457: EQUAL
32458: IFTRUE 32462
32460: GO 32479
32462: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32463: LD_VAR 0 1
32467: PPUSH
32468: LD_VAR 0 10
32472: PPUSH
32473: CALL_OW 115
32477: GO 32540
32479: LD_INT 2
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32509
32487: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_VAR 0 6
32497: PPUSH
32498: LD_VAR 0 7
32502: PPUSH
32503: CALL_OW 153
32507: GO 32540
32509: LD_INT 3
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32539
32517: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32518: LD_VAR 0 1
32522: PPUSH
32523: LD_VAR 0 6
32527: PPUSH
32528: LD_VAR 0 7
32532: PPUSH
32533: CALL_OW 154
32537: GO 32540
32539: POP
// end ;
32540: LD_VAR 0 2
32544: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
// if not unit or not building then
32553: LD_VAR 0 1
32557: NOT
32558: PUSH
32559: LD_VAR 0 2
32563: NOT
32564: OR
32565: IFFALSE 32569
// exit ;
32567: GO 32727
// x := GetX ( building ) ;
32569: LD_ADDR_VAR 0 5
32573: PUSH
32574: LD_VAR 0 2
32578: PPUSH
32579: CALL_OW 250
32583: ST_TO_ADDR
// y := GetY ( building ) ;
32584: LD_ADDR_VAR 0 6
32588: PUSH
32589: LD_VAR 0 2
32593: PPUSH
32594: CALL_OW 251
32598: ST_TO_ADDR
// for i = 0 to 5 do
32599: LD_ADDR_VAR 0 4
32603: PUSH
32604: DOUBLE
32605: LD_INT 0
32607: DEC
32608: ST_TO_ADDR
32609: LD_INT 5
32611: PUSH
32612: FOR_TO
32613: IFFALSE 32725
// begin _x := ShiftX ( x , i , 3 ) ;
32615: LD_ADDR_VAR 0 7
32619: PUSH
32620: LD_VAR 0 5
32624: PPUSH
32625: LD_VAR 0 4
32629: PPUSH
32630: LD_INT 3
32632: PPUSH
32633: CALL_OW 272
32637: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32638: LD_ADDR_VAR 0 8
32642: PUSH
32643: LD_VAR 0 6
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: LD_INT 3
32655: PPUSH
32656: CALL_OW 273
32660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32661: LD_VAR 0 7
32665: PPUSH
32666: LD_VAR 0 8
32670: PPUSH
32671: CALL_OW 488
32675: NOT
32676: IFFALSE 32680
// continue ;
32678: GO 32612
// if HexInfo ( _x , _y ) = 0 then
32680: LD_VAR 0 7
32684: PPUSH
32685: LD_VAR 0 8
32689: PPUSH
32690: CALL_OW 428
32694: PUSH
32695: LD_INT 0
32697: EQUAL
32698: IFFALSE 32723
// begin ComMoveXY ( unit , _x , _y ) ;
32700: LD_VAR 0 1
32704: PPUSH
32705: LD_VAR 0 7
32709: PPUSH
32710: LD_VAR 0 8
32714: PPUSH
32715: CALL_OW 111
// exit ;
32719: POP
32720: POP
32721: GO 32727
// end ; end ;
32723: GO 32612
32725: POP
32726: POP
// end ;
32727: LD_VAR 0 3
32731: RET
// export function ScanBase ( side , base_area ) ; begin
32732: LD_INT 0
32734: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_VAR 0 2
32744: PPUSH
32745: LD_INT 81
32747: PUSH
32748: LD_VAR 0 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PPUSH
32757: CALL_OW 70
32761: ST_TO_ADDR
// end ;
32762: LD_VAR 0 3
32766: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32767: LD_INT 0
32769: PPUSH
32770: PPUSH
32771: PPUSH
32772: PPUSH
// result := false ;
32773: LD_ADDR_VAR 0 2
32777: PUSH
32778: LD_INT 0
32780: ST_TO_ADDR
// side := GetSide ( unit ) ;
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 255
32795: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 248
32810: ST_TO_ADDR
// case nat of 1 :
32811: LD_VAR 0 4
32815: PUSH
32816: LD_INT 1
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// tech := tech_lassight ; 2 :
32825: LD_ADDR_VAR 0 5
32829: PUSH
32830: LD_INT 12
32832: ST_TO_ADDR
32833: GO 32874
32835: LD_INT 2
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32854
32843: POP
// tech := tech_mortar ; 3 :
32844: LD_ADDR_VAR 0 5
32848: PUSH
32849: LD_INT 41
32851: ST_TO_ADDR
32852: GO 32874
32854: LD_INT 3
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32873
32862: POP
// tech := tech_bazooka ; end ;
32863: LD_ADDR_VAR 0 5
32867: PUSH
32868: LD_INT 44
32870: ST_TO_ADDR
32871: GO 32874
32873: POP
// if Researched ( side , tech ) then
32874: LD_VAR 0 3
32878: PPUSH
32879: LD_VAR 0 5
32883: PPUSH
32884: CALL_OW 325
32888: IFFALSE 32915
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32890: LD_ADDR_VAR 0 2
32894: PUSH
32895: LD_INT 5
32897: PUSH
32898: LD_INT 8
32900: PUSH
32901: LD_INT 9
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: LD_VAR 0 4
32913: ARRAY
32914: ST_TO_ADDR
// end ;
32915: LD_VAR 0 2
32919: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32920: LD_INT 0
32922: PPUSH
32923: PPUSH
32924: PPUSH
// if not mines then
32925: LD_VAR 0 2
32929: NOT
32930: IFFALSE 32934
// exit ;
32932: GO 33078
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32934: LD_ADDR_VAR 0 5
32938: PUSH
32939: LD_INT 81
32941: PUSH
32942: LD_VAR 0 1
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 3
32953: PUSH
32954: LD_INT 21
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PPUSH
32972: CALL_OW 69
32976: ST_TO_ADDR
// for i in mines do
32977: LD_ADDR_VAR 0 4
32981: PUSH
32982: LD_VAR 0 2
32986: PUSH
32987: FOR_IN
32988: IFFALSE 33076
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32990: LD_VAR 0 4
32994: PUSH
32995: LD_INT 1
32997: ARRAY
32998: PPUSH
32999: LD_VAR 0 4
33003: PUSH
33004: LD_INT 2
33006: ARRAY
33007: PPUSH
33008: CALL_OW 458
33012: NOT
33013: IFFALSE 33017
// continue ;
33015: GO 32987
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33017: LD_VAR 0 4
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: PPUSH
33026: LD_VAR 0 4
33030: PUSH
33031: LD_INT 2
33033: ARRAY
33034: PPUSH
33035: CALL_OW 428
33039: PUSH
33040: LD_VAR 0 5
33044: IN
33045: IFFALSE 33074
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33047: LD_VAR 0 4
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PPUSH
33056: LD_VAR 0 4
33060: PUSH
33061: LD_INT 2
33063: ARRAY
33064: PPUSH
33065: LD_VAR 0 1
33069: PPUSH
33070: CALL_OW 456
// end ;
33074: GO 32987
33076: POP
33077: POP
// end ;
33078: LD_VAR 0 3
33082: RET
// export function Count ( array ) ; var i ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// result := 0 ;
33087: LD_ADDR_VAR 0 2
33091: PUSH
33092: LD_INT 0
33094: ST_TO_ADDR
// for i in array do
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_VAR 0 1
33104: PUSH
33105: FOR_IN
33106: IFFALSE 33130
// if i then
33108: LD_VAR 0 3
33112: IFFALSE 33128
// result := result + 1 ;
33114: LD_ADDR_VAR 0 2
33118: PUSH
33119: LD_VAR 0 2
33123: PUSH
33124: LD_INT 1
33126: PLUS
33127: ST_TO_ADDR
33128: GO 33105
33130: POP
33131: POP
// end ;
33132: LD_VAR 0 2
33136: RET
// export function IsEmpty ( building ) ; begin
33137: LD_INT 0
33139: PPUSH
// if not building then
33140: LD_VAR 0 1
33144: NOT
33145: IFFALSE 33149
// exit ;
33147: GO 33192
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33149: LD_ADDR_VAR 0 2
33153: PUSH
33154: LD_VAR 0 1
33158: PUSH
33159: LD_INT 22
33161: PUSH
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 255
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 58
33178: PUSH
33179: EMPTY
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PPUSH
33186: CALL_OW 69
33190: IN
33191: ST_TO_ADDR
// end ;
33192: LD_VAR 0 2
33196: RET
// export function IsNotFull ( building ) ; begin
33197: LD_INT 0
33199: PPUSH
// if not building then
33200: LD_VAR 0 1
33204: NOT
33205: IFFALSE 33209
// exit ;
33207: GO 33228
// result := UnitsInside ( building ) < 6 ;
33209: LD_ADDR_VAR 0 2
33213: PUSH
33214: LD_VAR 0 1
33218: PPUSH
33219: CALL_OW 313
33223: PUSH
33224: LD_INT 6
33226: LESS
33227: ST_TO_ADDR
// end ;
33228: LD_VAR 0 2
33232: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// tmp := [ ] ;
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: EMPTY
33245: ST_TO_ADDR
// list := [ ] ;
33246: LD_ADDR_VAR 0 5
33250: PUSH
33251: EMPTY
33252: ST_TO_ADDR
// for i = 16 to 25 do
33253: LD_ADDR_VAR 0 4
33257: PUSH
33258: DOUBLE
33259: LD_INT 16
33261: DEC
33262: ST_TO_ADDR
33263: LD_INT 25
33265: PUSH
33266: FOR_TO
33267: IFFALSE 33340
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_VAR 0 3
33278: PUSH
33279: LD_INT 22
33281: PUSH
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL_OW 255
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 91
33298: PUSH
33299: LD_VAR 0 1
33303: PUSH
33304: LD_INT 6
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 30
33314: PUSH
33315: LD_VAR 0 4
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: PPUSH
33332: CALL_OW 69
33336: ADD
33337: ST_TO_ADDR
33338: GO 33266
33340: POP
33341: POP
// for i = 1 to tmp do
33342: LD_ADDR_VAR 0 4
33346: PUSH
33347: DOUBLE
33348: LD_INT 1
33350: DEC
33351: ST_TO_ADDR
33352: LD_VAR 0 3
33356: PUSH
33357: FOR_TO
33358: IFFALSE 33446
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33360: LD_ADDR_VAR 0 5
33364: PUSH
33365: LD_VAR 0 5
33369: PUSH
33370: LD_VAR 0 3
33374: PUSH
33375: LD_VAR 0 4
33379: ARRAY
33380: PPUSH
33381: CALL_OW 266
33385: PUSH
33386: LD_VAR 0 3
33390: PUSH
33391: LD_VAR 0 4
33395: ARRAY
33396: PPUSH
33397: CALL_OW 250
33401: PUSH
33402: LD_VAR 0 3
33406: PUSH
33407: LD_VAR 0 4
33411: ARRAY
33412: PPUSH
33413: CALL_OW 251
33417: PUSH
33418: LD_VAR 0 3
33422: PUSH
33423: LD_VAR 0 4
33427: ARRAY
33428: PPUSH
33429: CALL_OW 254
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: ADD
33443: ST_TO_ADDR
33444: GO 33357
33446: POP
33447: POP
// result := list ;
33448: LD_ADDR_VAR 0 2
33452: PUSH
33453: LD_VAR 0 5
33457: ST_TO_ADDR
// end ;
33458: LD_VAR 0 2
33462: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33463: LD_INT 0
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
// if not factory then
33472: LD_VAR 0 1
33476: NOT
33477: IFFALSE 33481
// exit ;
33479: GO 34074
// if control = control_apeman then
33481: LD_VAR 0 4
33485: PUSH
33486: LD_INT 5
33488: EQUAL
33489: IFFALSE 33598
// begin tmp := UnitsInside ( factory ) ;
33491: LD_ADDR_VAR 0 8
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 313
33505: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33506: LD_VAR 0 8
33510: PPUSH
33511: LD_INT 25
33513: PUSH
33514: LD_INT 12
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PPUSH
33521: CALL_OW 72
33525: NOT
33526: IFFALSE 33536
// control := control_manual ;
33528: LD_ADDR_VAR 0 4
33532: PUSH
33533: LD_INT 1
33535: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33536: LD_ADDR_VAR 0 8
33540: PUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL 33233 0 1
33550: ST_TO_ADDR
// if tmp then
33551: LD_VAR 0 8
33555: IFFALSE 33598
// begin for i in tmp do
33557: LD_ADDR_VAR 0 7
33561: PUSH
33562: LD_VAR 0 8
33566: PUSH
33567: FOR_IN
33568: IFFALSE 33596
// if i [ 1 ] = b_ext_radio then
33570: LD_VAR 0 7
33574: PUSH
33575: LD_INT 1
33577: ARRAY
33578: PUSH
33579: LD_INT 22
33581: EQUAL
33582: IFFALSE 33594
// begin control := control_remote ;
33584: LD_ADDR_VAR 0 4
33588: PUSH
33589: LD_INT 2
33591: ST_TO_ADDR
// break ;
33592: GO 33596
// end ;
33594: GO 33567
33596: POP
33597: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33598: LD_VAR 0 1
33602: PPUSH
33603: LD_VAR 0 2
33607: PPUSH
33608: LD_VAR 0 3
33612: PPUSH
33613: LD_VAR 0 4
33617: PPUSH
33618: LD_VAR 0 5
33622: PPUSH
33623: CALL_OW 448
33627: IFFALSE 33662
// begin result := [ chassis , engine , control , weapon ] ;
33629: LD_ADDR_VAR 0 6
33633: PUSH
33634: LD_VAR 0 2
33638: PUSH
33639: LD_VAR 0 3
33643: PUSH
33644: LD_VAR 0 4
33648: PUSH
33649: LD_VAR 0 5
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// exit ;
33660: GO 34074
// end ; _chassis := AvailableChassisList ( factory ) ;
33662: LD_ADDR_VAR 0 9
33666: PUSH
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 475
33676: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33677: LD_ADDR_VAR 0 11
33681: PUSH
33682: LD_VAR 0 1
33686: PPUSH
33687: CALL_OW 476
33691: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33692: LD_ADDR_VAR 0 12
33696: PUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL_OW 477
33706: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33707: LD_ADDR_VAR 0 10
33711: PUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 478
33721: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33722: LD_VAR 0 9
33726: NOT
33727: PUSH
33728: LD_VAR 0 11
33732: NOT
33733: OR
33734: PUSH
33735: LD_VAR 0 12
33739: NOT
33740: OR
33741: PUSH
33742: LD_VAR 0 10
33746: NOT
33747: OR
33748: IFFALSE 33783
// begin result := [ chassis , engine , control , weapon ] ;
33750: LD_ADDR_VAR 0 6
33754: PUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_VAR 0 3
33764: PUSH
33765: LD_VAR 0 4
33769: PUSH
33770: LD_VAR 0 5
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// exit ;
33781: GO 34074
// end ; if not chassis in _chassis then
33783: LD_VAR 0 2
33787: PUSH
33788: LD_VAR 0 9
33792: IN
33793: NOT
33794: IFFALSE 33820
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33796: LD_ADDR_VAR 0 2
33800: PUSH
33801: LD_VAR 0 9
33805: PUSH
33806: LD_INT 1
33808: PPUSH
33809: LD_VAR 0 9
33813: PPUSH
33814: CALL_OW 12
33818: ARRAY
33819: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33820: LD_VAR 0 2
33824: PPUSH
33825: LD_VAR 0 3
33829: PPUSH
33830: CALL 34079 0 2
33834: NOT
33835: IFFALSE 33894
// repeat engine := _engine [ 1 ] ;
33837: LD_ADDR_VAR 0 3
33841: PUSH
33842: LD_VAR 0 11
33846: PUSH
33847: LD_INT 1
33849: ARRAY
33850: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33851: LD_ADDR_VAR 0 11
33855: PUSH
33856: LD_VAR 0 11
33860: PPUSH
33861: LD_INT 1
33863: PPUSH
33864: CALL_OW 3
33868: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33869: LD_VAR 0 2
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL 34079 0 2
33883: PUSH
33884: LD_VAR 0 11
33888: PUSH
33889: EMPTY
33890: EQUAL
33891: OR
33892: IFFALSE 33837
// if not control in _control then
33894: LD_VAR 0 4
33898: PUSH
33899: LD_VAR 0 12
33903: IN
33904: NOT
33905: IFFALSE 33931
// control := _control [ rand ( 1 , _control ) ] ;
33907: LD_ADDR_VAR 0 4
33911: PUSH
33912: LD_VAR 0 12
33916: PUSH
33917: LD_INT 1
33919: PPUSH
33920: LD_VAR 0 12
33924: PPUSH
33925: CALL_OW 12
33929: ARRAY
33930: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33931: LD_VAR 0 2
33935: PPUSH
33936: LD_VAR 0 5
33940: PPUSH
33941: CALL 34299 0 2
33945: NOT
33946: IFFALSE 34005
// repeat weapon := _weapon [ 1 ] ;
33948: LD_ADDR_VAR 0 5
33952: PUSH
33953: LD_VAR 0 10
33957: PUSH
33958: LD_INT 1
33960: ARRAY
33961: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33962: LD_ADDR_VAR 0 10
33966: PUSH
33967: LD_VAR 0 10
33971: PPUSH
33972: LD_INT 1
33974: PPUSH
33975: CALL_OW 3
33979: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33980: LD_VAR 0 2
33984: PPUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: CALL 34299 0 2
33994: PUSH
33995: LD_VAR 0 10
33999: PUSH
34000: EMPTY
34001: EQUAL
34002: OR
34003: IFFALSE 33948
// result := [ ] ;
34005: LD_ADDR_VAR 0 6
34009: PUSH
34010: EMPTY
34011: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34012: LD_VAR 0 1
34016: PPUSH
34017: LD_VAR 0 2
34021: PPUSH
34022: LD_VAR 0 3
34026: PPUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: LD_VAR 0 5
34036: PPUSH
34037: CALL_OW 448
34041: IFFALSE 34074
// result := [ chassis , engine , control , weapon ] ;
34043: LD_ADDR_VAR 0 6
34047: PUSH
34048: LD_VAR 0 2
34052: PUSH
34053: LD_VAR 0 3
34057: PUSH
34058: LD_VAR 0 4
34062: PUSH
34063: LD_VAR 0 5
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: ST_TO_ADDR
// end ;
34074: LD_VAR 0 6
34078: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34079: LD_INT 0
34081: PPUSH
// if not chassis or not engine then
34082: LD_VAR 0 1
34086: NOT
34087: PUSH
34088: LD_VAR 0 2
34092: NOT
34093: OR
34094: IFFALSE 34098
// exit ;
34096: GO 34294
// case engine of engine_solar :
34098: LD_VAR 0 2
34102: PUSH
34103: LD_INT 2
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34111
34109: GO 34149
34111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_INT 11
34119: PUSH
34120: LD_INT 12
34122: PUSH
34123: LD_INT 13
34125: PUSH
34126: LD_INT 14
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
34147: GO 34278
34149: LD_INT 1
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34219
34157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_INT 11
34165: PUSH
34166: LD_INT 12
34168: PUSH
34169: LD_INT 13
34171: PUSH
34172: LD_INT 14
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: LD_INT 21
34192: PUSH
34193: LD_INT 23
34195: PUSH
34196: LD_INT 22
34198: PUSH
34199: LD_INT 24
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 34278
34219: LD_INT 3
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34277
34227: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_INT 13
34235: PUSH
34236: LD_INT 14
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 4
34247: PUSH
34248: LD_INT 5
34250: PUSH
34251: LD_INT 21
34253: PUSH
34254: LD_INT 22
34256: PUSH
34257: LD_INT 23
34259: PUSH
34260: LD_INT 24
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: ST_TO_ADDR
34275: GO 34278
34277: POP
// result := ( chassis in result ) ;
34278: LD_ADDR_VAR 0 3
34282: PUSH
34283: LD_VAR 0 1
34287: PUSH
34288: LD_VAR 0 3
34292: IN
34293: ST_TO_ADDR
// end ;
34294: LD_VAR 0 3
34298: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34299: LD_INT 0
34301: PPUSH
// if not chassis or not weapon then
34302: LD_VAR 0 1
34306: NOT
34307: PUSH
34308: LD_VAR 0 2
34312: NOT
34313: OR
34314: IFFALSE 34318
// exit ;
34316: GO 35344
// case weapon of us_machine_gun :
34318: LD_VAR 0 2
34322: PUSH
34323: LD_INT 2
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34361
34331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 4
34348: PUSH
34349: LD_INT 5
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
34359: GO 35328
34361: LD_INT 3
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34399
34369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: LD_INT 4
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 35328
34399: LD_INT 11
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34437
34407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 3
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 5
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 35328
34437: LD_INT 4
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34471
34445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34446: LD_ADDR_VAR 0 3
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 35328
34471: LD_INT 5
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34505
34479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
34503: GO 35328
34505: LD_INT 9
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34539
34513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: LD_INT 4
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
34537: GO 35328
34539: LD_INT 7
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34573
34547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34548: LD_ADDR_VAR 0 3
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: ST_TO_ADDR
34571: GO 35328
34573: LD_INT 12
34575: DOUBLE
34576: EQUAL
34577: IFTRUE 34581
34579: GO 34607
34581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 5
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
34605: GO 35328
34607: LD_INT 13
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34641
34615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: LD_INT 4
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
34639: GO 35328
34641: LD_INT 14
34643: DOUBLE
34644: EQUAL
34645: IFTRUE 34649
34647: GO 34667
34649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34650: LD_ADDR_VAR 0 3
34654: PUSH
34655: LD_INT 4
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: ST_TO_ADDR
34665: GO 35328
34667: LD_INT 6
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34693
34675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_INT 4
34683: PUSH
34684: LD_INT 5
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: ST_TO_ADDR
34691: GO 35328
34693: LD_INT 10
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34719
34701: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: LD_INT 5
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: ST_TO_ADDR
34717: GO 35328
34719: LD_INT 22
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34727
34725: GO 34753
34727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_INT 11
34735: PUSH
34736: LD_INT 12
34738: PUSH
34739: LD_INT 13
34741: PUSH
34742: LD_INT 14
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
34751: GO 35328
34753: LD_INT 23
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34787
34761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 11
34769: PUSH
34770: LD_INT 12
34772: PUSH
34773: LD_INT 13
34775: PUSH
34776: LD_INT 14
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
34785: GO 35328
34787: LD_INT 24
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34821
34795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 11
34803: PUSH
34804: LD_INT 12
34806: PUSH
34807: LD_INT 13
34809: PUSH
34810: LD_INT 14
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35328
34821: LD_INT 30
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34855
34829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 11
34837: PUSH
34838: LD_INT 12
34840: PUSH
34841: LD_INT 13
34843: PUSH
34844: LD_INT 14
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
34853: GO 35328
34855: LD_INT 25
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 34881
34863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34864: LD_ADDR_VAR 0 3
34868: PUSH
34869: LD_INT 13
34871: PUSH
34872: LD_INT 14
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: ST_TO_ADDR
34879: GO 35328
34881: LD_INT 27
34883: DOUBLE
34884: EQUAL
34885: IFTRUE 34889
34887: GO 34907
34889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34890: LD_ADDR_VAR 0 3
34894: PUSH
34895: LD_INT 13
34897: PUSH
34898: LD_INT 14
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: ST_TO_ADDR
34905: GO 35328
34907: LD_INT 28
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34933
34915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_INT 13
34923: PUSH
34924: LD_INT 14
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: ST_TO_ADDR
34931: GO 35328
34933: LD_INT 29
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 34959
34941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34942: LD_ADDR_VAR 0 3
34946: PUSH
34947: LD_INT 13
34949: PUSH
34950: LD_INT 14
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: ST_TO_ADDR
34957: GO 35328
34959: LD_INT 31
34961: DOUBLE
34962: EQUAL
34963: IFTRUE 34967
34965: GO 34985
34967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34968: LD_ADDR_VAR 0 3
34972: PUSH
34973: LD_INT 13
34975: PUSH
34976: LD_INT 14
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35328
34985: LD_INT 26
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35011
34993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 13
35001: PUSH
35002: LD_INT 14
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: ST_TO_ADDR
35009: GO 35328
35011: LD_INT 42
35013: DOUBLE
35014: EQUAL
35015: IFTRUE 35019
35017: GO 35045
35019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_INT 21
35027: PUSH
35028: LD_INT 22
35030: PUSH
35031: LD_INT 23
35033: PUSH
35034: LD_INT 24
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
35043: GO 35328
35045: LD_INT 43
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35079
35053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_INT 21
35061: PUSH
35062: LD_INT 22
35064: PUSH
35065: LD_INT 23
35067: PUSH
35068: LD_INT 24
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
35077: GO 35328
35079: LD_INT 44
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35113
35087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 21
35095: PUSH
35096: LD_INT 22
35098: PUSH
35099: LD_INT 23
35101: PUSH
35102: LD_INT 24
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: ST_TO_ADDR
35111: GO 35328
35113: LD_INT 45
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35147
35121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 21
35129: PUSH
35130: LD_INT 22
35132: PUSH
35133: LD_INT 23
35135: PUSH
35136: LD_INT 24
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
35145: GO 35328
35147: LD_INT 49
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35181
35155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_INT 21
35163: PUSH
35164: LD_INT 22
35166: PUSH
35167: LD_INT 23
35169: PUSH
35170: LD_INT 24
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: ST_TO_ADDR
35179: GO 35328
35181: LD_INT 51
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35215
35189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35190: LD_ADDR_VAR 0 3
35194: PUSH
35195: LD_INT 21
35197: PUSH
35198: LD_INT 22
35200: PUSH
35201: LD_INT 23
35203: PUSH
35204: LD_INT 24
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
35213: GO 35328
35215: LD_INT 52
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35223
35221: GO 35249
35223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35224: LD_ADDR_VAR 0 3
35228: PUSH
35229: LD_INT 21
35231: PUSH
35232: LD_INT 22
35234: PUSH
35235: LD_INT 23
35237: PUSH
35238: LD_INT 24
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
35247: GO 35328
35249: LD_INT 53
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35275
35257: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35258: LD_ADDR_VAR 0 3
35262: PUSH
35263: LD_INT 23
35265: PUSH
35266: LD_INT 24
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 35328
35275: LD_INT 46
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35301
35283: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 23
35291: PUSH
35292: LD_INT 24
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: ST_TO_ADDR
35299: GO 35328
35301: LD_INT 47
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35327
35309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 23
35317: PUSH
35318: LD_INT 24
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: ST_TO_ADDR
35325: GO 35328
35327: POP
// result := ( chassis in result ) ;
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_VAR 0 1
35337: PUSH
35338: LD_VAR 0 3
35342: IN
35343: ST_TO_ADDR
// end ;
35344: LD_VAR 0 3
35348: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35349: LD_INT 0
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
// result := array ;
35358: LD_ADDR_VAR 0 5
35362: PUSH
35363: LD_VAR 0 1
35367: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35368: LD_VAR 0 1
35372: NOT
35373: PUSH
35374: LD_VAR 0 2
35378: NOT
35379: OR
35380: PUSH
35381: LD_VAR 0 3
35385: NOT
35386: OR
35387: PUSH
35388: LD_VAR 0 2
35392: PUSH
35393: LD_VAR 0 1
35397: GREATER
35398: OR
35399: PUSH
35400: LD_VAR 0 3
35404: PUSH
35405: LD_VAR 0 1
35409: GREATER
35410: OR
35411: IFFALSE 35415
// exit ;
35413: GO 35711
// if direction then
35415: LD_VAR 0 4
35419: IFFALSE 35483
// begin d := 1 ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_INT 1
35428: ST_TO_ADDR
// if i_from > i_to then
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 3
35438: GREATER
35439: IFFALSE 35465
// length := ( array - i_from ) + i_to else
35441: LD_ADDR_VAR 0 11
35445: PUSH
35446: LD_VAR 0 1
35450: PUSH
35451: LD_VAR 0 2
35455: MINUS
35456: PUSH
35457: LD_VAR 0 3
35461: PLUS
35462: ST_TO_ADDR
35463: GO 35481
// length := i_to - i_from ;
35465: LD_ADDR_VAR 0 11
35469: PUSH
35470: LD_VAR 0 3
35474: PUSH
35475: LD_VAR 0 2
35479: MINUS
35480: ST_TO_ADDR
// end else
35481: GO 35544
// begin d := - 1 ;
35483: LD_ADDR_VAR 0 9
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: ST_TO_ADDR
// if i_from > i_to then
35492: LD_VAR 0 2
35496: PUSH
35497: LD_VAR 0 3
35501: GREATER
35502: IFFALSE 35522
// length := i_from - i_to else
35504: LD_ADDR_VAR 0 11
35508: PUSH
35509: LD_VAR 0 2
35513: PUSH
35514: LD_VAR 0 3
35518: MINUS
35519: ST_TO_ADDR
35520: GO 35544
// length := ( array - i_to ) + i_from ;
35522: LD_ADDR_VAR 0 11
35526: PUSH
35527: LD_VAR 0 1
35531: PUSH
35532: LD_VAR 0 3
35536: MINUS
35537: PUSH
35538: LD_VAR 0 2
35542: PLUS
35543: ST_TO_ADDR
// end ; if not length then
35544: LD_VAR 0 11
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 35711
// tmp := array ;
35553: LD_ADDR_VAR 0 10
35557: PUSH
35558: LD_VAR 0 1
35562: ST_TO_ADDR
// for i = 1 to length do
35563: LD_ADDR_VAR 0 6
35567: PUSH
35568: DOUBLE
35569: LD_INT 1
35571: DEC
35572: ST_TO_ADDR
35573: LD_VAR 0 11
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35699
// begin for j = 1 to array do
35581: LD_ADDR_VAR 0 7
35585: PUSH
35586: DOUBLE
35587: LD_INT 1
35589: DEC
35590: ST_TO_ADDR
35591: LD_VAR 0 1
35595: PUSH
35596: FOR_TO
35597: IFFALSE 35685
// begin k := j + d ;
35599: LD_ADDR_VAR 0 8
35603: PUSH
35604: LD_VAR 0 7
35608: PUSH
35609: LD_VAR 0 9
35613: PLUS
35614: ST_TO_ADDR
// if k > array then
35615: LD_VAR 0 8
35619: PUSH
35620: LD_VAR 0 1
35624: GREATER
35625: IFFALSE 35635
// k := 1 ;
35627: LD_ADDR_VAR 0 8
35631: PUSH
35632: LD_INT 1
35634: ST_TO_ADDR
// if not k then
35635: LD_VAR 0 8
35639: NOT
35640: IFFALSE 35652
// k := array ;
35642: LD_ADDR_VAR 0 8
35646: PUSH
35647: LD_VAR 0 1
35651: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35652: LD_ADDR_VAR 0 10
35656: PUSH
35657: LD_VAR 0 10
35661: PPUSH
35662: LD_VAR 0 8
35666: PPUSH
35667: LD_VAR 0 1
35671: PUSH
35672: LD_VAR 0 7
35676: ARRAY
35677: PPUSH
35678: CALL_OW 1
35682: ST_TO_ADDR
// end ;
35683: GO 35596
35685: POP
35686: POP
// array := tmp ;
35687: LD_ADDR_VAR 0 1
35691: PUSH
35692: LD_VAR 0 10
35696: ST_TO_ADDR
// end ;
35697: GO 35578
35699: POP
35700: POP
// result := array ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_VAR 0 1
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 5
35715: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
// result := 0 ;
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_INT 0
35727: ST_TO_ADDR
// if not array or not value in array then
35728: LD_VAR 0 1
35732: NOT
35733: PUSH
35734: LD_VAR 0 2
35738: PUSH
35739: LD_VAR 0 1
35743: IN
35744: NOT
35745: OR
35746: IFFALSE 35750
// exit ;
35748: GO 35804
// for i = 1 to array do
35750: LD_ADDR_VAR 0 4
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 1
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35802
// if value = array [ i ] then
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 1
35777: PUSH
35778: LD_VAR 0 4
35782: ARRAY
35783: EQUAL
35784: IFFALSE 35800
// begin result := i ;
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_VAR 0 4
35795: ST_TO_ADDR
// exit ;
35796: POP
35797: POP
35798: GO 35804
// end ;
35800: GO 35765
35802: POP
35803: POP
// end ;
35804: LD_VAR 0 3
35808: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35809: LD_INT 0
35811: PPUSH
// vc_chassis := chassis ;
35812: LD_ADDR_OWVAR 37
35816: PUSH
35817: LD_VAR 0 1
35821: ST_TO_ADDR
// vc_engine := engine ;
35822: LD_ADDR_OWVAR 39
35826: PUSH
35827: LD_VAR 0 2
35831: ST_TO_ADDR
// vc_control := control ;
35832: LD_ADDR_OWVAR 38
35836: PUSH
35837: LD_VAR 0 3
35841: ST_TO_ADDR
// vc_weapon := weapon ;
35842: LD_ADDR_OWVAR 40
35846: PUSH
35847: LD_VAR 0 4
35851: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35852: LD_ADDR_OWVAR 41
35856: PUSH
35857: LD_VAR 0 5
35861: ST_TO_ADDR
// end ;
35862: LD_VAR 0 6
35866: RET
// export function WantPlant ( unit ) ; var task ; begin
35867: LD_INT 0
35869: PPUSH
35870: PPUSH
// result := false ;
35871: LD_ADDR_VAR 0 2
35875: PUSH
35876: LD_INT 0
35878: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 437
35893: ST_TO_ADDR
// if task then
35894: LD_VAR 0 3
35898: IFFALSE 35926
// if task [ 1 ] [ 1 ] = p then
35900: LD_VAR 0 3
35904: PUSH
35905: LD_INT 1
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PUSH
35913: LD_STRING p
35915: EQUAL
35916: IFFALSE 35926
// result := true ;
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: LD_INT 1
35925: ST_TO_ADDR
// end ;
35926: LD_VAR 0 2
35930: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35931: LD_INT 0
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
// if pos < 1 then
35937: LD_VAR 0 2
35941: PUSH
35942: LD_INT 1
35944: LESS
35945: IFFALSE 35949
// exit ;
35947: GO 36252
// if pos = 1 then
35949: LD_VAR 0 2
35953: PUSH
35954: LD_INT 1
35956: EQUAL
35957: IFFALSE 35990
// result := Replace ( arr , pos [ 1 ] , value ) else
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: PPUSH
35978: LD_VAR 0 3
35982: PPUSH
35983: CALL_OW 1
35987: ST_TO_ADDR
35988: GO 36252
// begin tmp := arr ;
35990: LD_ADDR_VAR 0 6
35994: PUSH
35995: LD_VAR 0 1
35999: ST_TO_ADDR
// s_arr := [ tmp ] ;
36000: LD_ADDR_VAR 0 7
36004: PUSH
36005: LD_VAR 0 6
36009: PUSH
36010: EMPTY
36011: LIST
36012: ST_TO_ADDR
// for i = 1 to pos - 1 do
36013: LD_ADDR_VAR 0 5
36017: PUSH
36018: DOUBLE
36019: LD_INT 1
36021: DEC
36022: ST_TO_ADDR
36023: LD_VAR 0 2
36027: PUSH
36028: LD_INT 1
36030: MINUS
36031: PUSH
36032: FOR_TO
36033: IFFALSE 36078
// begin tmp := tmp [ pos [ i ] ] ;
36035: LD_ADDR_VAR 0 6
36039: PUSH
36040: LD_VAR 0 6
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_VAR 0 5
36054: ARRAY
36055: ARRAY
36056: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36057: LD_ADDR_VAR 0 7
36061: PUSH
36062: LD_VAR 0 7
36066: PUSH
36067: LD_VAR 0 6
36071: PUSH
36072: EMPTY
36073: LIST
36074: ADD
36075: ST_TO_ADDR
// end ;
36076: GO 36032
36078: POP
36079: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36080: LD_ADDR_VAR 0 6
36084: PUSH
36085: LD_VAR 0 6
36089: PPUSH
36090: LD_VAR 0 2
36094: PUSH
36095: LD_VAR 0 2
36099: ARRAY
36100: PPUSH
36101: LD_VAR 0 3
36105: PPUSH
36106: CALL_OW 1
36110: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36111: LD_ADDR_VAR 0 7
36115: PUSH
36116: LD_VAR 0 7
36120: PPUSH
36121: LD_VAR 0 7
36125: PPUSH
36126: LD_VAR 0 6
36130: PPUSH
36131: CALL_OW 1
36135: ST_TO_ADDR
// for i = s_arr downto 2 do
36136: LD_ADDR_VAR 0 5
36140: PUSH
36141: DOUBLE
36142: LD_VAR 0 7
36146: INC
36147: ST_TO_ADDR
36148: LD_INT 2
36150: PUSH
36151: FOR_DOWNTO
36152: IFFALSE 36236
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36154: LD_ADDR_VAR 0 6
36158: PUSH
36159: LD_VAR 0 7
36163: PUSH
36164: LD_VAR 0 5
36168: PUSH
36169: LD_INT 1
36171: MINUS
36172: ARRAY
36173: PPUSH
36174: LD_VAR 0 2
36178: PUSH
36179: LD_VAR 0 5
36183: PUSH
36184: LD_INT 1
36186: MINUS
36187: ARRAY
36188: PPUSH
36189: LD_VAR 0 7
36193: PUSH
36194: LD_VAR 0 5
36198: ARRAY
36199: PPUSH
36200: CALL_OW 1
36204: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36205: LD_ADDR_VAR 0 7
36209: PUSH
36210: LD_VAR 0 7
36214: PPUSH
36215: LD_VAR 0 5
36219: PUSH
36220: LD_INT 1
36222: MINUS
36223: PPUSH
36224: LD_VAR 0 6
36228: PPUSH
36229: CALL_OW 1
36233: ST_TO_ADDR
// end ;
36234: GO 36151
36236: POP
36237: POP
// result := s_arr [ 1 ] ;
36238: LD_ADDR_VAR 0 4
36242: PUSH
36243: LD_VAR 0 7
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: ST_TO_ADDR
// end ; end ;
36252: LD_VAR 0 4
36256: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
// if not list then
36261: LD_VAR 0 1
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36361
// i := list [ pos1 ] ;
36270: LD_ADDR_VAR 0 5
36274: PUSH
36275: LD_VAR 0 1
36279: PUSH
36280: LD_VAR 0 2
36284: ARRAY
36285: ST_TO_ADDR
// if not i then
36286: LD_VAR 0 5
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36361
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36295: LD_ADDR_VAR 0 1
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: LD_VAR 0 2
36309: PPUSH
36310: LD_VAR 0 1
36314: PUSH
36315: LD_VAR 0 3
36319: ARRAY
36320: PPUSH
36321: CALL_OW 1
36325: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36326: LD_ADDR_VAR 0 1
36330: PUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: LD_VAR 0 5
36345: PPUSH
36346: CALL_OW 1
36350: ST_TO_ADDR
// result := list ;
36351: LD_ADDR_VAR 0 4
36355: PUSH
36356: LD_VAR 0 1
36360: ST_TO_ADDR
// end ;
36361: LD_VAR 0 4
36365: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36366: LD_INT 0
36368: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36369: LD_ADDR_VAR 0 5
36373: PUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 250
36383: PPUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 251
36393: PPUSH
36394: LD_VAR 0 2
36398: PPUSH
36399: LD_VAR 0 3
36403: PPUSH
36404: LD_VAR 0 4
36408: PPUSH
36409: CALL 36419 0 5
36413: ST_TO_ADDR
// end ;
36414: LD_VAR 0 5
36418: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36419: LD_INT 0
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
// if not list then
36425: LD_VAR 0 3
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 36822
// result := [ ] ;
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: EMPTY
36440: ST_TO_ADDR
// for i in list do
36441: LD_ADDR_VAR 0 7
36445: PUSH
36446: LD_VAR 0 3
36450: PUSH
36451: FOR_IN
36452: IFFALSE 36654
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_VAR 0 7
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: CALL_OW 297
36478: ST_TO_ADDR
// if not result then
36479: LD_VAR 0 6
36483: NOT
36484: IFFALSE 36510
// result := [ [ i , tmp ] ] else
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_VAR 0 7
36495: PUSH
36496: LD_VAR 0 9
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: ST_TO_ADDR
36508: GO 36652
// begin if result [ result ] [ 2 ] < tmp then
36510: LD_VAR 0 6
36514: PUSH
36515: LD_VAR 0 6
36519: ARRAY
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: PUSH
36525: LD_VAR 0 9
36529: LESS
36530: IFFALSE 36572
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36532: LD_ADDR_VAR 0 6
36536: PUSH
36537: LD_VAR 0 6
36541: PPUSH
36542: LD_VAR 0 6
36546: PUSH
36547: LD_INT 1
36549: PLUS
36550: PPUSH
36551: LD_VAR 0 7
36555: PUSH
36556: LD_VAR 0 9
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PPUSH
36565: CALL_OW 2
36569: ST_TO_ADDR
36570: GO 36652
// for j = 1 to result do
36572: LD_ADDR_VAR 0 8
36576: PUSH
36577: DOUBLE
36578: LD_INT 1
36580: DEC
36581: ST_TO_ADDR
36582: LD_VAR 0 6
36586: PUSH
36587: FOR_TO
36588: IFFALSE 36650
// begin if tmp < result [ j ] [ 2 ] then
36590: LD_VAR 0 9
36594: PUSH
36595: LD_VAR 0 6
36599: PUSH
36600: LD_VAR 0 8
36604: ARRAY
36605: PUSH
36606: LD_INT 2
36608: ARRAY
36609: LESS
36610: IFFALSE 36648
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36612: LD_ADDR_VAR 0 6
36616: PUSH
36617: LD_VAR 0 6
36621: PPUSH
36622: LD_VAR 0 8
36626: PPUSH
36627: LD_VAR 0 7
36631: PUSH
36632: LD_VAR 0 9
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PPUSH
36641: CALL_OW 2
36645: ST_TO_ADDR
// break ;
36646: GO 36650
// end ; end ;
36648: GO 36587
36650: POP
36651: POP
// end ; end ;
36652: GO 36451
36654: POP
36655: POP
// if result and not asc then
36656: LD_VAR 0 6
36660: PUSH
36661: LD_VAR 0 4
36665: NOT
36666: AND
36667: IFFALSE 36742
// begin tmp := result ;
36669: LD_ADDR_VAR 0 9
36673: PUSH
36674: LD_VAR 0 6
36678: ST_TO_ADDR
// for i = tmp downto 1 do
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: DOUBLE
36685: LD_VAR 0 9
36689: INC
36690: ST_TO_ADDR
36691: LD_INT 1
36693: PUSH
36694: FOR_DOWNTO
36695: IFFALSE 36740
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_VAR 0 6
36706: PPUSH
36707: LD_VAR 0 9
36711: PUSH
36712: LD_VAR 0 7
36716: MINUS
36717: PUSH
36718: LD_INT 1
36720: PLUS
36721: PPUSH
36722: LD_VAR 0 9
36726: PUSH
36727: LD_VAR 0 7
36731: ARRAY
36732: PPUSH
36733: CALL_OW 1
36737: ST_TO_ADDR
36738: GO 36694
36740: POP
36741: POP
// end ; tmp := [ ] ;
36742: LD_ADDR_VAR 0 9
36746: PUSH
36747: EMPTY
36748: ST_TO_ADDR
// if mode then
36749: LD_VAR 0 5
36753: IFFALSE 36822
// begin for i = 1 to result do
36755: LD_ADDR_VAR 0 7
36759: PUSH
36760: DOUBLE
36761: LD_INT 1
36763: DEC
36764: ST_TO_ADDR
36765: LD_VAR 0 6
36769: PUSH
36770: FOR_TO
36771: IFFALSE 36810
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: LD_VAR 0 9
36782: PPUSH
36783: LD_VAR 0 7
36787: PPUSH
36788: LD_VAR 0 6
36792: PUSH
36793: LD_VAR 0 7
36797: ARRAY
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: PPUSH
36803: CALL_OW 1
36807: ST_TO_ADDR
36808: GO 36770
36810: POP
36811: POP
// result := tmp ;
36812: LD_ADDR_VAR 0 6
36816: PUSH
36817: LD_VAR 0 9
36821: ST_TO_ADDR
// end ; end ;
36822: LD_VAR 0 6
36826: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36827: LD_INT 0
36829: PPUSH
36830: PPUSH
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36835: LD_ADDR_VAR 0 5
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if not x or not y then
36857: LD_VAR 0 2
36861: NOT
36862: PUSH
36863: LD_VAR 0 3
36867: NOT
36868: OR
36869: IFFALSE 36873
// exit ;
36871: GO 38519
// if not range then
36873: LD_VAR 0 4
36877: NOT
36878: IFFALSE 36888
// range := 10 ;
36880: LD_ADDR_VAR 0 4
36884: PUSH
36885: LD_INT 10
36887: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36888: LD_ADDR_VAR 0 8
36892: PUSH
36893: LD_INT 81
36895: PUSH
36896: LD_VAR 0 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 92
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: LD_VAR 0 3
36917: PUSH
36918: LD_VAR 0 4
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: PUSH
36932: LD_INT 21
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 69
36955: ST_TO_ADDR
// if not tmp then
36956: LD_VAR 0 8
36960: NOT
36961: IFFALSE 36965
// exit ;
36963: GO 38519
// for i in tmp do
36965: LD_ADDR_VAR 0 6
36969: PUSH
36970: LD_VAR 0 8
36974: PUSH
36975: FOR_IN
36976: IFFALSE 38494
// begin points := [ 0 , 0 , 0 ] ;
36978: LD_ADDR_VAR 0 9
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// bpoints := 1 ;
36997: LD_ADDR_VAR 0 10
37001: PUSH
37002: LD_INT 1
37004: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37005: LD_VAR 0 6
37009: PPUSH
37010: CALL_OW 247
37014: PUSH
37015: LD_INT 1
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37601
37023: POP
// begin if GetClass ( i ) = 1 then
37024: LD_VAR 0 6
37028: PPUSH
37029: CALL_OW 257
37033: PUSH
37034: LD_INT 1
37036: EQUAL
37037: IFFALSE 37058
// points := [ 10 , 5 , 3 ] ;
37039: LD_ADDR_VAR 0 9
37043: PUSH
37044: LD_INT 10
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 257
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: IN
37082: IFFALSE 37103
// points := [ 3 , 2 , 1 ] ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37103: LD_VAR 0 6
37107: PPUSH
37108: CALL_OW 257
37112: PUSH
37113: LD_INT 5
37115: EQUAL
37116: IFFALSE 37137
// points := [ 130 , 5 , 2 ] ;
37118: LD_ADDR_VAR 0 9
37122: PUSH
37123: LD_INT 130
37125: PUSH
37126: LD_INT 5
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37137: LD_VAR 0 6
37141: PPUSH
37142: CALL_OW 257
37146: PUSH
37147: LD_INT 8
37149: EQUAL
37150: IFFALSE 37171
// points := [ 35 , 35 , 30 ] ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_INT 35
37159: PUSH
37160: LD_INT 35
37162: PUSH
37163: LD_INT 30
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37171: LD_VAR 0 6
37175: PPUSH
37176: CALL_OW 257
37180: PUSH
37181: LD_INT 9
37183: EQUAL
37184: IFFALSE 37205
// points := [ 20 , 55 , 40 ] ;
37186: LD_ADDR_VAR 0 9
37190: PUSH
37191: LD_INT 20
37193: PUSH
37194: LD_INT 55
37196: PUSH
37197: LD_INT 40
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 257
37214: PUSH
37215: LD_INT 12
37217: PUSH
37218: LD_INT 16
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: IN
37225: IFFALSE 37246
// points := [ 5 , 3 , 2 ] ;
37227: LD_ADDR_VAR 0 9
37231: PUSH
37232: LD_INT 5
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37246: LD_VAR 0 6
37250: PPUSH
37251: CALL_OW 257
37255: PUSH
37256: LD_INT 17
37258: EQUAL
37259: IFFALSE 37280
// points := [ 100 , 50 , 75 ] ;
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_INT 100
37268: PUSH
37269: LD_INT 50
37271: PUSH
37272: LD_INT 75
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37280: LD_VAR 0 6
37284: PPUSH
37285: CALL_OW 257
37289: PUSH
37290: LD_INT 15
37292: EQUAL
37293: IFFALSE 37314
// points := [ 10 , 5 , 3 ] ;
37295: LD_ADDR_VAR 0 9
37299: PUSH
37300: LD_INT 10
37302: PUSH
37303: LD_INT 5
37305: PUSH
37306: LD_INT 3
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37314: LD_VAR 0 6
37318: PPUSH
37319: CALL_OW 257
37323: PUSH
37324: LD_INT 14
37326: EQUAL
37327: IFFALSE 37348
// points := [ 10 , 0 , 0 ] ;
37329: LD_ADDR_VAR 0 9
37333: PUSH
37334: LD_INT 10
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 257
37357: PUSH
37358: LD_INT 11
37360: EQUAL
37361: IFFALSE 37382
// points := [ 30 , 10 , 5 ] ;
37363: LD_ADDR_VAR 0 9
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 10
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37382: LD_VAR 0 1
37386: PPUSH
37387: LD_INT 5
37389: PPUSH
37390: CALL_OW 321
37394: PUSH
37395: LD_INT 2
37397: EQUAL
37398: IFFALSE 37415
// bpoints := bpoints * 1.8 ;
37400: LD_ADDR_VAR 0 10
37404: PUSH
37405: LD_VAR 0 10
37409: PUSH
37410: LD_REAL  1.80000000000000E+0000
37413: MUL
37414: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 257
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: IN
37443: PUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_INT 51
37451: PPUSH
37452: CALL_OW 321
37456: PUSH
37457: LD_INT 2
37459: EQUAL
37460: AND
37461: IFFALSE 37478
// bpoints := bpoints * 1.2 ;
37463: LD_ADDR_VAR 0 10
37467: PUSH
37468: LD_VAR 0 10
37472: PUSH
37473: LD_REAL  1.20000000000000E+0000
37476: MUL
37477: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 257
37487: PUSH
37488: LD_INT 5
37490: PUSH
37491: LD_INT 7
37493: PUSH
37494: LD_INT 9
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: IN
37502: PUSH
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_INT 52
37510: PPUSH
37511: CALL_OW 321
37515: PUSH
37516: LD_INT 2
37518: EQUAL
37519: AND
37520: IFFALSE 37537
// bpoints := bpoints * 1.5 ;
37522: LD_ADDR_VAR 0 10
37526: PUSH
37527: LD_VAR 0 10
37531: PUSH
37532: LD_REAL  1.50000000000000E+0000
37535: MUL
37536: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37537: LD_VAR 0 1
37541: PPUSH
37542: LD_INT 66
37544: PPUSH
37545: CALL_OW 321
37549: PUSH
37550: LD_INT 2
37552: EQUAL
37553: IFFALSE 37570
// bpoints := bpoints * 1.1 ;
37555: LD_ADDR_VAR 0 10
37559: PUSH
37560: LD_VAR 0 10
37564: PUSH
37565: LD_REAL  1.10000000000000E+0000
37568: MUL
37569: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37570: LD_ADDR_VAR 0 10
37574: PUSH
37575: LD_VAR 0 10
37579: PUSH
37580: LD_VAR 0 6
37584: PPUSH
37585: LD_INT 1
37587: PPUSH
37588: CALL_OW 259
37592: PUSH
37593: LD_REAL  1.15000000000000E+0000
37596: MUL
37597: MUL
37598: ST_TO_ADDR
// end ; unit_vehicle :
37599: GO 38423
37601: LD_INT 2
37603: DOUBLE
37604: EQUAL
37605: IFTRUE 37609
37607: GO 38411
37609: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37610: LD_VAR 0 6
37614: PPUSH
37615: CALL_OW 264
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 42
37625: PUSH
37626: LD_INT 24
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: IN
37634: IFFALSE 37655
// points := [ 25 , 5 , 3 ] ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_INT 25
37643: PUSH
37644: LD_INT 5
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 264
37664: PUSH
37665: LD_INT 4
37667: PUSH
37668: LD_INT 43
37670: PUSH
37671: LD_INT 25
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: IN
37679: IFFALSE 37700
// points := [ 40 , 15 , 5 ] ;
37681: LD_ADDR_VAR 0 9
37685: PUSH
37686: LD_INT 40
37688: PUSH
37689: LD_INT 15
37691: PUSH
37692: LD_INT 5
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37700: LD_VAR 0 6
37704: PPUSH
37705: CALL_OW 264
37709: PUSH
37710: LD_INT 3
37712: PUSH
37713: LD_INT 23
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: IN
37720: IFFALSE 37741
// points := [ 7 , 25 , 8 ] ;
37722: LD_ADDR_VAR 0 9
37726: PUSH
37727: LD_INT 7
37729: PUSH
37730: LD_INT 25
37732: PUSH
37733: LD_INT 8
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37741: LD_VAR 0 6
37745: PPUSH
37746: CALL_OW 264
37750: PUSH
37751: LD_INT 5
37753: PUSH
37754: LD_INT 27
37756: PUSH
37757: LD_INT 44
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: IN
37765: IFFALSE 37786
// points := [ 14 , 50 , 16 ] ;
37767: LD_ADDR_VAR 0 9
37771: PUSH
37772: LD_INT 14
37774: PUSH
37775: LD_INT 50
37777: PUSH
37778: LD_INT 16
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37786: LD_VAR 0 6
37790: PPUSH
37791: CALL_OW 264
37795: PUSH
37796: LD_INT 6
37798: PUSH
37799: LD_INT 46
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: IN
37806: IFFALSE 37827
// points := [ 32 , 120 , 70 ] ;
37808: LD_ADDR_VAR 0 9
37812: PUSH
37813: LD_INT 32
37815: PUSH
37816: LD_INT 120
37818: PUSH
37819: LD_INT 70
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37827: LD_VAR 0 6
37831: PPUSH
37832: CALL_OW 264
37836: PUSH
37837: LD_INT 7
37839: PUSH
37840: LD_INT 28
37842: PUSH
37843: LD_INT 45
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: IN
37851: IFFALSE 37872
// points := [ 35 , 20 , 45 ] ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_INT 35
37860: PUSH
37861: LD_INT 20
37863: PUSH
37864: LD_INT 45
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37872: LD_VAR 0 6
37876: PPUSH
37877: CALL_OW 264
37881: PUSH
37882: LD_INT 47
37884: PUSH
37885: EMPTY
37886: LIST
37887: IN
37888: IFFALSE 37909
// points := [ 67 , 45 , 75 ] ;
37890: LD_ADDR_VAR 0 9
37894: PUSH
37895: LD_INT 67
37897: PUSH
37898: LD_INT 45
37900: PUSH
37901: LD_INT 75
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 264
37918: PUSH
37919: LD_INT 26
37921: PUSH
37922: EMPTY
37923: LIST
37924: IN
37925: IFFALSE 37946
// points := [ 120 , 30 , 80 ] ;
37927: LD_ADDR_VAR 0 9
37931: PUSH
37932: LD_INT 120
37934: PUSH
37935: LD_INT 30
37937: PUSH
37938: LD_INT 80
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37946: LD_VAR 0 6
37950: PPUSH
37951: CALL_OW 264
37955: PUSH
37956: LD_INT 22
37958: PUSH
37959: EMPTY
37960: LIST
37961: IN
37962: IFFALSE 37983
// points := [ 40 , 1 , 1 ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_INT 40
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 264
37992: PUSH
37993: LD_INT 29
37995: PUSH
37996: EMPTY
37997: LIST
37998: IN
37999: IFFALSE 38020
// points := [ 70 , 200 , 400 ] ;
38001: LD_ADDR_VAR 0 9
38005: PUSH
38006: LD_INT 70
38008: PUSH
38009: LD_INT 200
38011: PUSH
38012: LD_INT 400
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38020: LD_VAR 0 6
38024: PPUSH
38025: CALL_OW 264
38029: PUSH
38030: LD_INT 14
38032: PUSH
38033: LD_INT 53
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: IN
38040: IFFALSE 38061
// points := [ 40 , 10 , 20 ] ;
38042: LD_ADDR_VAR 0 9
38046: PUSH
38047: LD_INT 40
38049: PUSH
38050: LD_INT 10
38052: PUSH
38053: LD_INT 20
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38061: LD_VAR 0 6
38065: PPUSH
38066: CALL_OW 264
38070: PUSH
38071: LD_INT 9
38073: PUSH
38074: EMPTY
38075: LIST
38076: IN
38077: IFFALSE 38098
// points := [ 5 , 70 , 20 ] ;
38079: LD_ADDR_VAR 0 9
38083: PUSH
38084: LD_INT 5
38086: PUSH
38087: LD_INT 70
38089: PUSH
38090: LD_INT 20
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38098: LD_VAR 0 6
38102: PPUSH
38103: CALL_OW 264
38107: PUSH
38108: LD_INT 10
38110: PUSH
38111: EMPTY
38112: LIST
38113: IN
38114: IFFALSE 38135
// points := [ 35 , 110 , 70 ] ;
38116: LD_ADDR_VAR 0 9
38120: PUSH
38121: LD_INT 35
38123: PUSH
38124: LD_INT 110
38126: PUSH
38127: LD_INT 70
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38135: LD_VAR 0 6
38139: PPUSH
38140: CALL_OW 265
38144: PUSH
38145: LD_INT 25
38147: EQUAL
38148: IFFALSE 38169
// points := [ 80 , 65 , 100 ] ;
38150: LD_ADDR_VAR 0 9
38154: PUSH
38155: LD_INT 80
38157: PUSH
38158: LD_INT 65
38160: PUSH
38161: LD_INT 100
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38169: LD_VAR 0 6
38173: PPUSH
38174: CALL_OW 263
38178: PUSH
38179: LD_INT 1
38181: EQUAL
38182: IFFALSE 38217
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38184: LD_ADDR_VAR 0 10
38188: PUSH
38189: LD_VAR 0 10
38193: PUSH
38194: LD_VAR 0 6
38198: PPUSH
38199: CALL_OW 311
38203: PPUSH
38204: LD_INT 3
38206: PPUSH
38207: CALL_OW 259
38211: PUSH
38212: LD_INT 4
38214: MUL
38215: MUL
38216: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38217: LD_VAR 0 6
38221: PPUSH
38222: CALL_OW 263
38226: PUSH
38227: LD_INT 2
38229: EQUAL
38230: IFFALSE 38281
// begin j := IsControledBy ( i ) ;
38232: LD_ADDR_VAR 0 7
38236: PUSH
38237: LD_VAR 0 6
38241: PPUSH
38242: CALL_OW 312
38246: ST_TO_ADDR
// if j then
38247: LD_VAR 0 7
38251: IFFALSE 38281
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38253: LD_ADDR_VAR 0 10
38257: PUSH
38258: LD_VAR 0 10
38262: PUSH
38263: LD_VAR 0 7
38267: PPUSH
38268: LD_INT 3
38270: PPUSH
38271: CALL_OW 259
38275: PUSH
38276: LD_INT 3
38278: MUL
38279: MUL
38280: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38281: LD_VAR 0 6
38285: PPUSH
38286: CALL_OW 264
38290: PUSH
38291: LD_INT 5
38293: PUSH
38294: LD_INT 6
38296: PUSH
38297: LD_INT 46
38299: PUSH
38300: LD_INT 44
38302: PUSH
38303: LD_INT 47
38305: PUSH
38306: LD_INT 45
38308: PUSH
38309: LD_INT 28
38311: PUSH
38312: LD_INT 7
38314: PUSH
38315: LD_INT 27
38317: PUSH
38318: LD_INT 29
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: IN
38333: PUSH
38334: LD_VAR 0 1
38338: PPUSH
38339: LD_INT 52
38341: PPUSH
38342: CALL_OW 321
38346: PUSH
38347: LD_INT 2
38349: EQUAL
38350: AND
38351: IFFALSE 38368
// bpoints := bpoints * 1.2 ;
38353: LD_ADDR_VAR 0 10
38357: PUSH
38358: LD_VAR 0 10
38362: PUSH
38363: LD_REAL  1.20000000000000E+0000
38366: MUL
38367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 264
38377: PUSH
38378: LD_INT 6
38380: PUSH
38381: LD_INT 46
38383: PUSH
38384: LD_INT 47
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: IN
38392: IFFALSE 38409
// bpoints := bpoints * 1.2 ;
38394: LD_ADDR_VAR 0 10
38398: PUSH
38399: LD_VAR 0 10
38403: PUSH
38404: LD_REAL  1.20000000000000E+0000
38407: MUL
38408: ST_TO_ADDR
// end ; unit_building :
38409: GO 38423
38411: LD_INT 3
38413: DOUBLE
38414: EQUAL
38415: IFTRUE 38419
38417: GO 38422
38419: POP
// ; end ;
38420: GO 38423
38422: POP
// for j = 1 to 3 do
38423: LD_ADDR_VAR 0 7
38427: PUSH
38428: DOUBLE
38429: LD_INT 1
38431: DEC
38432: ST_TO_ADDR
38433: LD_INT 3
38435: PUSH
38436: FOR_TO
38437: IFFALSE 38490
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38439: LD_ADDR_VAR 0 5
38443: PUSH
38444: LD_VAR 0 5
38448: PPUSH
38449: LD_VAR 0 7
38453: PPUSH
38454: LD_VAR 0 5
38458: PUSH
38459: LD_VAR 0 7
38463: ARRAY
38464: PUSH
38465: LD_VAR 0 9
38469: PUSH
38470: LD_VAR 0 7
38474: ARRAY
38475: PUSH
38476: LD_VAR 0 10
38480: MUL
38481: PLUS
38482: PPUSH
38483: CALL_OW 1
38487: ST_TO_ADDR
38488: GO 38436
38490: POP
38491: POP
// end ;
38492: GO 36975
38494: POP
38495: POP
// result := Replace ( result , 4 , tmp ) ;
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_VAR 0 5
38505: PPUSH
38506: LD_INT 4
38508: PPUSH
38509: LD_VAR 0 8
38513: PPUSH
38514: CALL_OW 1
38518: ST_TO_ADDR
// end ;
38519: LD_VAR 0 5
38523: RET
// export function DangerAtRange ( unit , range ) ; begin
38524: LD_INT 0
38526: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 255
38541: PPUSH
38542: LD_VAR 0 1
38546: PPUSH
38547: CALL_OW 250
38551: PPUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 251
38561: PPUSH
38562: LD_VAR 0 2
38566: PPUSH
38567: CALL 36827 0 4
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 3
38576: RET
// export function DangerInArea ( side , area ) ; begin
38577: LD_INT 0
38579: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_VAR 0 2
38589: PPUSH
38590: LD_INT 81
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PPUSH
38602: CALL_OW 70
38606: ST_TO_ADDR
// end ;
38607: LD_VAR 0 3
38611: RET
// export function IsExtension ( b ) ; begin
38612: LD_INT 0
38614: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38615: LD_ADDR_VAR 0 2
38619: PUSH
38620: LD_VAR 0 1
38624: PUSH
38625: LD_INT 23
38627: PUSH
38628: LD_INT 20
38630: PUSH
38631: LD_INT 22
38633: PUSH
38634: LD_INT 17
38636: PUSH
38637: LD_INT 24
38639: PUSH
38640: LD_INT 21
38642: PUSH
38643: LD_INT 19
38645: PUSH
38646: LD_INT 16
38648: PUSH
38649: LD_INT 25
38651: PUSH
38652: LD_INT 18
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: IN
38667: ST_TO_ADDR
// end ;
38668: LD_VAR 0 2
38672: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38673: LD_INT 0
38675: PPUSH
38676: PPUSH
38677: PPUSH
// result := [ ] ;
38678: LD_ADDR_VAR 0 3
38682: PUSH
38683: EMPTY
38684: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38685: LD_ADDR_VAR 0 4
38689: PUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_INT 21
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PPUSH
38705: CALL_OW 70
38709: ST_TO_ADDR
// if not tmp then
38710: LD_VAR 0 4
38714: NOT
38715: IFFALSE 38719
// exit ;
38717: GO 38777
// for i in tmp do
38719: LD_ADDR_VAR 0 5
38723: PUSH
38724: LD_VAR 0 4
38728: PUSH
38729: FOR_IN
38730: IFFALSE 38765
// if GetBase ( i ) <> base then
38732: LD_VAR 0 5
38736: PPUSH
38737: CALL_OW 274
38741: PUSH
38742: LD_VAR 0 1
38746: NONEQUAL
38747: IFFALSE 38763
// ComLinkToBase ( base , i ) ;
38749: LD_VAR 0 1
38753: PPUSH
38754: LD_VAR 0 5
38758: PPUSH
38759: CALL_OW 169
38763: GO 38729
38765: POP
38766: POP
// result := tmp ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_VAR 0 4
38776: ST_TO_ADDR
// end ;
38777: LD_VAR 0 3
38781: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38782: LD_INT 0
38784: PPUSH
38785: PPUSH
// if BuildingStatus ( b ) = bs_build then
38786: LD_VAR 0 2
38790: PPUSH
38791: CALL_OW 461
38795: PUSH
38796: LD_INT 1
38798: EQUAL
38799: IFFALSE 38859
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38801: LD_VAR 0 1
38805: PPUSH
38806: LD_STRING h
38808: PUSH
38809: LD_VAR 0 2
38813: PPUSH
38814: CALL_OW 250
38818: PUSH
38819: LD_VAR 0 2
38823: PPUSH
38824: CALL_OW 251
38828: PUSH
38829: LD_VAR 0 2
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: EMPTY
38853: LIST
38854: PPUSH
38855: CALL_OW 446
// end ;
38859: LD_VAR 0 3
38863: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38872: LD_VAR 0 1
38876: NOT
38877: PUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: CALL_OW 263
38887: PUSH
38888: LD_INT 2
38890: EQUAL
38891: NOT
38892: OR
38893: IFFALSE 38897
// exit ;
38895: GO 39213
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38897: LD_ADDR_VAR 0 6
38901: PUSH
38902: LD_INT 22
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 255
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: LD_INT 30
38924: PUSH
38925: LD_INT 36
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 34
38934: PUSH
38935: LD_INT 31
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PPUSH
38951: CALL_OW 69
38955: ST_TO_ADDR
// if not tmp then
38956: LD_VAR 0 6
38960: NOT
38961: IFFALSE 38965
// exit ;
38963: GO 39213
// result := [ ] ;
38965: LD_ADDR_VAR 0 2
38969: PUSH
38970: EMPTY
38971: ST_TO_ADDR
// for i in tmp do
38972: LD_ADDR_VAR 0 3
38976: PUSH
38977: LD_VAR 0 6
38981: PUSH
38982: FOR_IN
38983: IFFALSE 39054
// begin t := UnitsInside ( i ) ;
38985: LD_ADDR_VAR 0 4
38989: PUSH
38990: LD_VAR 0 3
38994: PPUSH
38995: CALL_OW 313
38999: ST_TO_ADDR
// if t then
39000: LD_VAR 0 4
39004: IFFALSE 39052
// for j in t do
39006: LD_ADDR_VAR 0 7
39010: PUSH
39011: LD_VAR 0 4
39015: PUSH
39016: FOR_IN
39017: IFFALSE 39050
// result := Insert ( result , result + 1 , j ) ;
39019: LD_ADDR_VAR 0 2
39023: PUSH
39024: LD_VAR 0 2
39028: PPUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 1
39036: PLUS
39037: PPUSH
39038: LD_VAR 0 7
39042: PPUSH
39043: CALL_OW 2
39047: ST_TO_ADDR
39048: GO 39016
39050: POP
39051: POP
// end ;
39052: GO 38982
39054: POP
39055: POP
// if not result then
39056: LD_VAR 0 2
39060: NOT
39061: IFFALSE 39065
// exit ;
39063: GO 39213
// mech := result [ 1 ] ;
39065: LD_ADDR_VAR 0 5
39069: PUSH
39070: LD_VAR 0 2
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: ST_TO_ADDR
// if result > 1 then
39079: LD_VAR 0 2
39083: PUSH
39084: LD_INT 1
39086: GREATER
39087: IFFALSE 39199
// for i = 2 to result do
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: DOUBLE
39095: LD_INT 2
39097: DEC
39098: ST_TO_ADDR
39099: LD_VAR 0 2
39103: PUSH
39104: FOR_TO
39105: IFFALSE 39197
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39107: LD_ADDR_VAR 0 4
39111: PUSH
39112: LD_VAR 0 2
39116: PUSH
39117: LD_VAR 0 3
39121: ARRAY
39122: PPUSH
39123: LD_INT 3
39125: PPUSH
39126: CALL_OW 259
39130: PUSH
39131: LD_VAR 0 2
39135: PUSH
39136: LD_VAR 0 3
39140: ARRAY
39141: PPUSH
39142: CALL_OW 432
39146: MINUS
39147: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39148: LD_VAR 0 4
39152: PUSH
39153: LD_VAR 0 5
39157: PPUSH
39158: LD_INT 3
39160: PPUSH
39161: CALL_OW 259
39165: PUSH
39166: LD_VAR 0 5
39170: PPUSH
39171: CALL_OW 432
39175: MINUS
39176: GREATEREQUAL
39177: IFFALSE 39195
// mech := result [ i ] ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_VAR 0 2
39188: PUSH
39189: LD_VAR 0 3
39193: ARRAY
39194: ST_TO_ADDR
// end ;
39195: GO 39104
39197: POP
39198: POP
// ComLinkTo ( vehicle , mech ) ;
39199: LD_VAR 0 1
39203: PPUSH
39204: LD_VAR 0 5
39208: PPUSH
39209: CALL_OW 135
// end ;
39213: LD_VAR 0 2
39217: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
// result := [ ] ;
39233: LD_ADDR_VAR 0 7
39237: PUSH
39238: EMPTY
39239: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39240: LD_VAR 0 1
39244: PPUSH
39245: CALL_OW 266
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: IN
39260: NOT
39261: IFFALSE 39265
// exit ;
39263: GO 40896
// if name then
39265: LD_VAR 0 3
39269: IFFALSE 39285
// SetBName ( base_dep , name ) ;
39271: LD_VAR 0 1
39275: PPUSH
39276: LD_VAR 0 3
39280: PPUSH
39281: CALL_OW 500
// base := GetBase ( base_dep ) ;
39285: LD_ADDR_VAR 0 15
39289: PUSH
39290: LD_VAR 0 1
39294: PPUSH
39295: CALL_OW 274
39299: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39300: LD_ADDR_VAR 0 16
39304: PUSH
39305: LD_VAR 0 1
39309: PPUSH
39310: CALL_OW 255
39314: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39315: LD_ADDR_VAR 0 17
39319: PUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 248
39329: ST_TO_ADDR
// if sources then
39330: LD_VAR 0 5
39334: IFFALSE 39381
// for i = 1 to 3 do
39336: LD_ADDR_VAR 0 8
39340: PUSH
39341: DOUBLE
39342: LD_INT 1
39344: DEC
39345: ST_TO_ADDR
39346: LD_INT 3
39348: PUSH
39349: FOR_TO
39350: IFFALSE 39379
// AddResourceType ( base , i , sources [ i ] ) ;
39352: LD_VAR 0 15
39356: PPUSH
39357: LD_VAR 0 8
39361: PPUSH
39362: LD_VAR 0 5
39366: PUSH
39367: LD_VAR 0 8
39371: ARRAY
39372: PPUSH
39373: CALL_OW 276
39377: GO 39349
39379: POP
39380: POP
// buildings := GetBaseBuildings ( base , area ) ;
39381: LD_ADDR_VAR 0 18
39385: PUSH
39386: LD_VAR 0 15
39390: PPUSH
39391: LD_VAR 0 2
39395: PPUSH
39396: CALL 38673 0 2
39400: ST_TO_ADDR
// InitHc ;
39401: CALL_OW 19
// InitUc ;
39405: CALL_OW 18
// uc_side := side ;
39409: LD_ADDR_OWVAR 20
39413: PUSH
39414: LD_VAR 0 16
39418: ST_TO_ADDR
// uc_nation := nation ;
39419: LD_ADDR_OWVAR 21
39423: PUSH
39424: LD_VAR 0 17
39428: ST_TO_ADDR
// if buildings then
39429: LD_VAR 0 18
39433: IFFALSE 40755
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39435: LD_ADDR_VAR 0 19
39439: PUSH
39440: LD_VAR 0 18
39444: PPUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 30
39450: PUSH
39451: LD_INT 29
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 30
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: PPUSH
39473: CALL_OW 72
39477: ST_TO_ADDR
// if tmp then
39478: LD_VAR 0 19
39482: IFFALSE 39530
// for i in tmp do
39484: LD_ADDR_VAR 0 8
39488: PUSH
39489: LD_VAR 0 19
39493: PUSH
39494: FOR_IN
39495: IFFALSE 39528
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39497: LD_VAR 0 8
39501: PPUSH
39502: CALL_OW 250
39506: PPUSH
39507: LD_VAR 0 8
39511: PPUSH
39512: CALL_OW 251
39516: PPUSH
39517: LD_VAR 0 16
39521: PPUSH
39522: CALL_OW 441
39526: GO 39494
39528: POP
39529: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39530: LD_VAR 0 18
39534: PPUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 30
39540: PUSH
39541: LD_INT 32
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 30
39550: PUSH
39551: LD_INT 33
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: PPUSH
39563: CALL_OW 72
39567: IFFALSE 39655
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39569: LD_ADDR_VAR 0 8
39573: PUSH
39574: LD_VAR 0 18
39578: PPUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 30
39584: PUSH
39585: LD_INT 32
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_INT 33
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: PPUSH
39607: CALL_OW 72
39611: PUSH
39612: FOR_IN
39613: IFFALSE 39653
// begin if not GetBWeapon ( i ) then
39615: LD_VAR 0 8
39619: PPUSH
39620: CALL_OW 269
39624: NOT
39625: IFFALSE 39651
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39627: LD_VAR 0 8
39631: PPUSH
39632: LD_VAR 0 8
39636: PPUSH
39637: LD_VAR 0 2
39641: PPUSH
39642: CALL 40901 0 2
39646: PPUSH
39647: CALL_OW 431
// end ;
39651: GO 39612
39653: POP
39654: POP
// end ; for i = 1 to personel do
39655: LD_ADDR_VAR 0 8
39659: PUSH
39660: DOUBLE
39661: LD_INT 1
39663: DEC
39664: ST_TO_ADDR
39665: LD_VAR 0 6
39669: PUSH
39670: FOR_TO
39671: IFFALSE 40735
// begin if i > 4 then
39673: LD_VAR 0 8
39677: PUSH
39678: LD_INT 4
39680: GREATER
39681: IFFALSE 39685
// break ;
39683: GO 40735
// case i of 1 :
39685: LD_VAR 0 8
39689: PUSH
39690: LD_INT 1
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39698
39696: GO 39778
39698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39699: LD_ADDR_VAR 0 12
39703: PUSH
39704: LD_VAR 0 18
39708: PPUSH
39709: LD_INT 22
39711: PUSH
39712: LD_VAR 0 16
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 58
39723: PUSH
39724: EMPTY
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 30
39732: PUSH
39733: LD_INT 32
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 30
39742: PUSH
39743: LD_INT 4
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 30
39752: PUSH
39753: LD_INT 5
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: PPUSH
39771: CALL_OW 72
39775: ST_TO_ADDR
39776: GO 40000
39778: LD_INT 2
39780: DOUBLE
39781: EQUAL
39782: IFTRUE 39786
39784: GO 39848
39786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39787: LD_ADDR_VAR 0 12
39791: PUSH
39792: LD_VAR 0 18
39796: PPUSH
39797: LD_INT 22
39799: PUSH
39800: LD_VAR 0 16
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: LD_INT 30
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 30
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PPUSH
39841: CALL_OW 72
39845: ST_TO_ADDR
39846: GO 40000
39848: LD_INT 3
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39918
39856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39857: LD_ADDR_VAR 0 12
39861: PUSH
39862: LD_VAR 0 18
39866: PPUSH
39867: LD_INT 22
39869: PUSH
39870: LD_VAR 0 16
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: LD_INT 30
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 30
39894: PUSH
39895: LD_INT 3
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PPUSH
39911: CALL_OW 72
39915: ST_TO_ADDR
39916: GO 40000
39918: LD_INT 4
39920: DOUBLE
39921: EQUAL
39922: IFTRUE 39926
39924: GO 39999
39926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39927: LD_ADDR_VAR 0 12
39931: PUSH
39932: LD_VAR 0 18
39936: PPUSH
39937: LD_INT 22
39939: PUSH
39940: LD_VAR 0 16
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 30
39954: PUSH
39955: LD_INT 6
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 30
39964: PUSH
39965: LD_INT 7
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 30
39974: PUSH
39975: LD_INT 8
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PPUSH
39992: CALL_OW 72
39996: ST_TO_ADDR
39997: GO 40000
39999: POP
// if i = 1 then
40000: LD_VAR 0 8
40004: PUSH
40005: LD_INT 1
40007: EQUAL
40008: IFFALSE 40119
// begin tmp := [ ] ;
40010: LD_ADDR_VAR 0 19
40014: PUSH
40015: EMPTY
40016: ST_TO_ADDR
// for j in f do
40017: LD_ADDR_VAR 0 9
40021: PUSH
40022: LD_VAR 0 12
40026: PUSH
40027: FOR_IN
40028: IFFALSE 40101
// if GetBType ( j ) = b_bunker then
40030: LD_VAR 0 9
40034: PPUSH
40035: CALL_OW 266
40039: PUSH
40040: LD_INT 32
40042: EQUAL
40043: IFFALSE 40070
// tmp := Insert ( tmp , 1 , j ) else
40045: LD_ADDR_VAR 0 19
40049: PUSH
40050: LD_VAR 0 19
40054: PPUSH
40055: LD_INT 1
40057: PPUSH
40058: LD_VAR 0 9
40062: PPUSH
40063: CALL_OW 2
40067: ST_TO_ADDR
40068: GO 40099
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40070: LD_ADDR_VAR 0 19
40074: PUSH
40075: LD_VAR 0 19
40079: PPUSH
40080: LD_VAR 0 19
40084: PUSH
40085: LD_INT 1
40087: PLUS
40088: PPUSH
40089: LD_VAR 0 9
40093: PPUSH
40094: CALL_OW 2
40098: ST_TO_ADDR
40099: GO 40027
40101: POP
40102: POP
// if tmp then
40103: LD_VAR 0 19
40107: IFFALSE 40119
// f := tmp ;
40109: LD_ADDR_VAR 0 12
40113: PUSH
40114: LD_VAR 0 19
40118: ST_TO_ADDR
// end ; x := personel [ i ] ;
40119: LD_ADDR_VAR 0 13
40123: PUSH
40124: LD_VAR 0 6
40128: PUSH
40129: LD_VAR 0 8
40133: ARRAY
40134: ST_TO_ADDR
// if x = - 1 then
40135: LD_VAR 0 13
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: EQUAL
40144: IFFALSE 40353
// begin for j in f do
40146: LD_ADDR_VAR 0 9
40150: PUSH
40151: LD_VAR 0 12
40155: PUSH
40156: FOR_IN
40157: IFFALSE 40349
// repeat InitHc ;
40159: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40163: LD_VAR 0 9
40167: PPUSH
40168: CALL_OW 266
40172: PUSH
40173: LD_INT 5
40175: EQUAL
40176: IFFALSE 40246
// begin if UnitsInside ( j ) < 3 then
40178: LD_VAR 0 9
40182: PPUSH
40183: CALL_OW 313
40187: PUSH
40188: LD_INT 3
40190: LESS
40191: IFFALSE 40227
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40193: LD_INT 0
40195: PPUSH
40196: LD_INT 5
40198: PUSH
40199: LD_INT 8
40201: PUSH
40202: LD_INT 9
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: LD_VAR 0 17
40214: ARRAY
40215: PPUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: CALL_OW 380
40225: GO 40244
// PrepareHuman ( false , i , skill ) ;
40227: LD_INT 0
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: LD_VAR 0 4
40239: PPUSH
40240: CALL_OW 380
// end else
40244: GO 40263
// PrepareHuman ( false , i , skill ) ;
40246: LD_INT 0
40248: PPUSH
40249: LD_VAR 0 8
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: CALL_OW 380
// un := CreateHuman ;
40263: LD_ADDR_VAR 0 14
40267: PUSH
40268: CALL_OW 44
40272: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40273: LD_ADDR_VAR 0 7
40277: PUSH
40278: LD_VAR 0 7
40282: PPUSH
40283: LD_INT 1
40285: PPUSH
40286: LD_VAR 0 14
40290: PPUSH
40291: CALL_OW 2
40295: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40296: LD_VAR 0 14
40300: PPUSH
40301: LD_VAR 0 9
40305: PPUSH
40306: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40310: LD_VAR 0 9
40314: PPUSH
40315: CALL_OW 313
40319: PUSH
40320: LD_INT 6
40322: EQUAL
40323: PUSH
40324: LD_VAR 0 9
40328: PPUSH
40329: CALL_OW 266
40333: PUSH
40334: LD_INT 32
40336: PUSH
40337: LD_INT 31
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: IN
40344: OR
40345: IFFALSE 40159
40347: GO 40156
40349: POP
40350: POP
// end else
40351: GO 40733
// for j = 1 to x do
40353: LD_ADDR_VAR 0 9
40357: PUSH
40358: DOUBLE
40359: LD_INT 1
40361: DEC
40362: ST_TO_ADDR
40363: LD_VAR 0 13
40367: PUSH
40368: FOR_TO
40369: IFFALSE 40731
// begin InitHc ;
40371: CALL_OW 19
// if not f then
40375: LD_VAR 0 12
40379: NOT
40380: IFFALSE 40469
// begin PrepareHuman ( false , i , skill ) ;
40382: LD_INT 0
40384: PPUSH
40385: LD_VAR 0 8
40389: PPUSH
40390: LD_VAR 0 4
40394: PPUSH
40395: CALL_OW 380
// un := CreateHuman ;
40399: LD_ADDR_VAR 0 14
40403: PUSH
40404: CALL_OW 44
40408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40409: LD_ADDR_VAR 0 7
40413: PUSH
40414: LD_VAR 0 7
40418: PPUSH
40419: LD_INT 1
40421: PPUSH
40422: LD_VAR 0 14
40426: PPUSH
40427: CALL_OW 2
40431: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40432: LD_VAR 0 14
40436: PPUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 250
40446: PPUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL_OW 251
40456: PPUSH
40457: LD_INT 10
40459: PPUSH
40460: LD_INT 0
40462: PPUSH
40463: CALL_OW 50
// continue ;
40467: GO 40368
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40469: LD_VAR 0 12
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PPUSH
40478: CALL_OW 313
40482: PUSH
40483: LD_VAR 0 12
40487: PUSH
40488: LD_INT 1
40490: ARRAY
40491: PPUSH
40492: CALL_OW 266
40496: PUSH
40497: LD_INT 32
40499: PUSH
40500: LD_INT 31
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: IN
40507: AND
40508: PUSH
40509: LD_VAR 0 12
40513: PUSH
40514: LD_INT 1
40516: ARRAY
40517: PPUSH
40518: CALL_OW 313
40522: PUSH
40523: LD_INT 6
40525: EQUAL
40526: OR
40527: IFFALSE 40547
// f := Delete ( f , 1 ) ;
40529: LD_ADDR_VAR 0 12
40533: PUSH
40534: LD_VAR 0 12
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: CALL_OW 3
40546: ST_TO_ADDR
// if not f then
40547: LD_VAR 0 12
40551: NOT
40552: IFFALSE 40570
// begin x := x + 2 ;
40554: LD_ADDR_VAR 0 13
40558: PUSH
40559: LD_VAR 0 13
40563: PUSH
40564: LD_INT 2
40566: PLUS
40567: ST_TO_ADDR
// continue ;
40568: GO 40368
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40570: LD_VAR 0 12
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: PPUSH
40579: CALL_OW 266
40583: PUSH
40584: LD_INT 5
40586: EQUAL
40587: IFFALSE 40661
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40589: LD_VAR 0 12
40593: PUSH
40594: LD_INT 1
40596: ARRAY
40597: PPUSH
40598: CALL_OW 313
40602: PUSH
40603: LD_INT 3
40605: LESS
40606: IFFALSE 40642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40608: LD_INT 0
40610: PPUSH
40611: LD_INT 5
40613: PUSH
40614: LD_INT 8
40616: PUSH
40617: LD_INT 9
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: PUSH
40625: LD_VAR 0 17
40629: ARRAY
40630: PPUSH
40631: LD_VAR 0 4
40635: PPUSH
40636: CALL_OW 380
40640: GO 40659
// PrepareHuman ( false , i , skill ) ;
40642: LD_INT 0
40644: PPUSH
40645: LD_VAR 0 8
40649: PPUSH
40650: LD_VAR 0 4
40654: PPUSH
40655: CALL_OW 380
// end else
40659: GO 40678
// PrepareHuman ( false , i , skill ) ;
40661: LD_INT 0
40663: PPUSH
40664: LD_VAR 0 8
40668: PPUSH
40669: LD_VAR 0 4
40673: PPUSH
40674: CALL_OW 380
// un := CreateHuman ;
40678: LD_ADDR_VAR 0 14
40682: PUSH
40683: CALL_OW 44
40687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40688: LD_ADDR_VAR 0 7
40692: PUSH
40693: LD_VAR 0 7
40697: PPUSH
40698: LD_INT 1
40700: PPUSH
40701: LD_VAR 0 14
40705: PPUSH
40706: CALL_OW 2
40710: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40711: LD_VAR 0 14
40715: PPUSH
40716: LD_VAR 0 12
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: PPUSH
40725: CALL_OW 52
// end ;
40729: GO 40368
40731: POP
40732: POP
// end ;
40733: GO 39670
40735: POP
40736: POP
// result := result ^ buildings ;
40737: LD_ADDR_VAR 0 7
40741: PUSH
40742: LD_VAR 0 7
40746: PUSH
40747: LD_VAR 0 18
40751: ADD
40752: ST_TO_ADDR
// end else
40753: GO 40896
// begin for i = 1 to personel do
40755: LD_ADDR_VAR 0 8
40759: PUSH
40760: DOUBLE
40761: LD_INT 1
40763: DEC
40764: ST_TO_ADDR
40765: LD_VAR 0 6
40769: PUSH
40770: FOR_TO
40771: IFFALSE 40894
// begin if i > 4 then
40773: LD_VAR 0 8
40777: PUSH
40778: LD_INT 4
40780: GREATER
40781: IFFALSE 40785
// break ;
40783: GO 40894
// x := personel [ i ] ;
40785: LD_ADDR_VAR 0 13
40789: PUSH
40790: LD_VAR 0 6
40794: PUSH
40795: LD_VAR 0 8
40799: ARRAY
40800: ST_TO_ADDR
// if x = - 1 then
40801: LD_VAR 0 13
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: EQUAL
40810: IFFALSE 40814
// continue ;
40812: GO 40770
// PrepareHuman ( false , i , skill ) ;
40814: LD_INT 0
40816: PPUSH
40817: LD_VAR 0 8
40821: PPUSH
40822: LD_VAR 0 4
40826: PPUSH
40827: CALL_OW 380
// un := CreateHuman ;
40831: LD_ADDR_VAR 0 14
40835: PUSH
40836: CALL_OW 44
40840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40841: LD_VAR 0 14
40845: PPUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: CALL_OW 250
40855: PPUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL_OW 251
40865: PPUSH
40866: LD_INT 10
40868: PPUSH
40869: LD_INT 0
40871: PPUSH
40872: CALL_OW 50
// result := result ^ un ;
40876: LD_ADDR_VAR 0 7
40880: PUSH
40881: LD_VAR 0 7
40885: PUSH
40886: LD_VAR 0 14
40890: ADD
40891: ST_TO_ADDR
// end ;
40892: GO 40770
40894: POP
40895: POP
// end ; end ;
40896: LD_VAR 0 7
40900: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40901: LD_INT 0
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
// result := false ;
40919: LD_ADDR_VAR 0 3
40923: PUSH
40924: LD_INT 0
40926: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40927: LD_VAR 0 1
40931: NOT
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 266
40942: PUSH
40943: LD_INT 32
40945: PUSH
40946: LD_INT 33
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: IN
40953: NOT
40954: OR
40955: IFFALSE 40959
// exit ;
40957: GO 42095
// nat := GetNation ( tower ) ;
40959: LD_ADDR_VAR 0 12
40963: PUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 248
40973: ST_TO_ADDR
// side := GetSide ( tower ) ;
40974: LD_ADDR_VAR 0 16
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 255
40988: ST_TO_ADDR
// x := GetX ( tower ) ;
40989: LD_ADDR_VAR 0 10
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 250
41003: ST_TO_ADDR
// y := GetY ( tower ) ;
41004: LD_ADDR_VAR 0 11
41008: PUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 251
41018: ST_TO_ADDR
// if not x or not y then
41019: LD_VAR 0 10
41023: NOT
41024: PUSH
41025: LD_VAR 0 11
41029: NOT
41030: OR
41031: IFFALSE 41035
// exit ;
41033: GO 42095
// weapon := 0 ;
41035: LD_ADDR_VAR 0 18
41039: PUSH
41040: LD_INT 0
41042: ST_TO_ADDR
// fac_list := [ ] ;
41043: LD_ADDR_VAR 0 17
41047: PUSH
41048: EMPTY
41049: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41050: LD_ADDR_VAR 0 6
41054: PUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 274
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: CALL 38673 0 2
41074: PPUSH
41075: LD_INT 30
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PPUSH
41085: CALL_OW 72
41089: ST_TO_ADDR
// if not factories then
41090: LD_VAR 0 6
41094: NOT
41095: IFFALSE 41099
// exit ;
41097: GO 42095
// for i in factories do
41099: LD_ADDR_VAR 0 8
41103: PUSH
41104: LD_VAR 0 6
41108: PUSH
41109: FOR_IN
41110: IFFALSE 41135
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41112: LD_ADDR_VAR 0 17
41116: PUSH
41117: LD_VAR 0 17
41121: PUSH
41122: LD_VAR 0 8
41126: PPUSH
41127: CALL_OW 478
41131: UNION
41132: ST_TO_ADDR
41133: GO 41109
41135: POP
41136: POP
// if not fac_list then
41137: LD_VAR 0 17
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 42095
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41146: LD_ADDR_VAR 0 5
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: LD_INT 9
41159: PUSH
41160: LD_INT 10
41162: PUSH
41163: LD_INT 6
41165: PUSH
41166: LD_INT 7
41168: PUSH
41169: LD_INT 11
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 27
41183: PUSH
41184: LD_INT 28
41186: PUSH
41187: LD_INT 26
41189: PUSH
41190: LD_INT 30
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 43
41201: PUSH
41202: LD_INT 44
41204: PUSH
41205: LD_INT 46
41207: PUSH
41208: LD_INT 45
41210: PUSH
41211: LD_INT 47
41213: PUSH
41214: LD_INT 49
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: LIST
41229: PUSH
41230: LD_VAR 0 12
41234: ARRAY
41235: ST_TO_ADDR
// for i in list do
41236: LD_ADDR_VAR 0 8
41240: PUSH
41241: LD_VAR 0 5
41245: PUSH
41246: FOR_IN
41247: IFFALSE 41280
// if not i in fac_list then
41249: LD_VAR 0 8
41253: PUSH
41254: LD_VAR 0 17
41258: IN
41259: NOT
41260: IFFALSE 41278
// list := list diff i ;
41262: LD_ADDR_VAR 0 5
41266: PUSH
41267: LD_VAR 0 5
41271: PUSH
41272: LD_VAR 0 8
41276: DIFF
41277: ST_TO_ADDR
41278: GO 41246
41280: POP
41281: POP
// if not list then
41282: LD_VAR 0 5
41286: NOT
41287: IFFALSE 41291
// exit ;
41289: GO 42095
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41291: LD_VAR 0 12
41295: PUSH
41296: LD_INT 3
41298: EQUAL
41299: PUSH
41300: LD_INT 49
41302: PUSH
41303: LD_VAR 0 5
41307: IN
41308: AND
41309: PUSH
41310: LD_INT 31
41312: PPUSH
41313: LD_VAR 0 16
41317: PPUSH
41318: CALL_OW 321
41322: PUSH
41323: LD_INT 2
41325: EQUAL
41326: AND
41327: IFFALSE 41387
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41329: LD_INT 22
41331: PUSH
41332: LD_VAR 0 16
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 35
41343: PUSH
41344: LD_INT 49
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 91
41353: PUSH
41354: LD_VAR 0 1
41358: PUSH
41359: LD_INT 10
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 69
41376: NOT
41377: IFFALSE 41387
// weapon := ru_time_lapser ;
41379: LD_ADDR_VAR 0 18
41383: PUSH
41384: LD_INT 49
41386: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41387: LD_VAR 0 12
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: IN
41402: PUSH
41403: LD_INT 11
41405: PUSH
41406: LD_VAR 0 5
41410: IN
41411: PUSH
41412: LD_INT 30
41414: PUSH
41415: LD_VAR 0 5
41419: IN
41420: OR
41421: AND
41422: PUSH
41423: LD_INT 6
41425: PPUSH
41426: LD_VAR 0 16
41430: PPUSH
41431: CALL_OW 321
41435: PUSH
41436: LD_INT 2
41438: EQUAL
41439: AND
41440: IFFALSE 41605
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41442: LD_INT 22
41444: PUSH
41445: LD_VAR 0 16
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 35
41459: PUSH
41460: LD_INT 11
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 35
41469: PUSH
41470: LD_INT 30
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 91
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: LD_INT 18
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: PPUSH
41503: CALL_OW 69
41507: NOT
41508: PUSH
41509: LD_INT 22
41511: PUSH
41512: LD_VAR 0 16
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 30
41526: PUSH
41527: LD_INT 32
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 30
41536: PUSH
41537: LD_INT 33
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 91
41551: PUSH
41552: LD_VAR 0 1
41556: PUSH
41557: LD_INT 12
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: PPUSH
41573: CALL_OW 69
41577: PUSH
41578: LD_INT 2
41580: GREATER
41581: AND
41582: IFFALSE 41605
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41584: LD_ADDR_VAR 0 18
41588: PUSH
41589: LD_INT 11
41591: PUSH
41592: LD_INT 30
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_VAR 0 12
41603: ARRAY
41604: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41605: LD_VAR 0 18
41609: NOT
41610: PUSH
41611: LD_INT 40
41613: PPUSH
41614: LD_VAR 0 16
41618: PPUSH
41619: CALL_OW 321
41623: PUSH
41624: LD_INT 2
41626: EQUAL
41627: AND
41628: PUSH
41629: LD_INT 7
41631: PUSH
41632: LD_VAR 0 5
41636: IN
41637: PUSH
41638: LD_INT 28
41640: PUSH
41641: LD_VAR 0 5
41645: IN
41646: OR
41647: PUSH
41648: LD_INT 45
41650: PUSH
41651: LD_VAR 0 5
41655: IN
41656: OR
41657: AND
41658: IFFALSE 41912
// begin hex := GetHexInfo ( x , y ) ;
41660: LD_ADDR_VAR 0 4
41664: PUSH
41665: LD_VAR 0 10
41669: PPUSH
41670: LD_VAR 0 11
41674: PPUSH
41675: CALL_OW 546
41679: ST_TO_ADDR
// if hex [ 1 ] then
41680: LD_VAR 0 4
41684: PUSH
41685: LD_INT 1
41687: ARRAY
41688: IFFALSE 41692
// exit ;
41690: GO 42095
// height := hex [ 2 ] ;
41692: LD_ADDR_VAR 0 15
41696: PUSH
41697: LD_VAR 0 4
41701: PUSH
41702: LD_INT 2
41704: ARRAY
41705: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41706: LD_ADDR_VAR 0 14
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 5
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// for i in tmp do
41729: LD_ADDR_VAR 0 8
41733: PUSH
41734: LD_VAR 0 14
41738: PUSH
41739: FOR_IN
41740: IFFALSE 41910
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41742: LD_ADDR_VAR 0 9
41746: PUSH
41747: LD_VAR 0 10
41751: PPUSH
41752: LD_VAR 0 8
41756: PPUSH
41757: LD_INT 5
41759: PPUSH
41760: CALL_OW 272
41764: PUSH
41765: LD_VAR 0 11
41769: PPUSH
41770: LD_VAR 0 8
41774: PPUSH
41775: LD_INT 5
41777: PPUSH
41778: CALL_OW 273
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41787: LD_VAR 0 9
41791: PUSH
41792: LD_INT 1
41794: ARRAY
41795: PPUSH
41796: LD_VAR 0 9
41800: PUSH
41801: LD_INT 2
41803: ARRAY
41804: PPUSH
41805: CALL_OW 488
41809: IFFALSE 41908
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41811: LD_ADDR_VAR 0 4
41815: PUSH
41816: LD_VAR 0 9
41820: PUSH
41821: LD_INT 1
41823: ARRAY
41824: PPUSH
41825: LD_VAR 0 9
41829: PUSH
41830: LD_INT 2
41832: ARRAY
41833: PPUSH
41834: CALL_OW 546
41838: ST_TO_ADDR
// if hex [ 1 ] then
41839: LD_VAR 0 4
41843: PUSH
41844: LD_INT 1
41846: ARRAY
41847: IFFALSE 41851
// continue ;
41849: GO 41739
// h := hex [ 2 ] ;
41851: LD_ADDR_VAR 0 13
41855: PUSH
41856: LD_VAR 0 4
41860: PUSH
41861: LD_INT 2
41863: ARRAY
41864: ST_TO_ADDR
// if h + 7 < height then
41865: LD_VAR 0 13
41869: PUSH
41870: LD_INT 7
41872: PLUS
41873: PUSH
41874: LD_VAR 0 15
41878: LESS
41879: IFFALSE 41908
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41881: LD_ADDR_VAR 0 18
41885: PUSH
41886: LD_INT 7
41888: PUSH
41889: LD_INT 28
41891: PUSH
41892: LD_INT 45
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: PUSH
41900: LD_VAR 0 12
41904: ARRAY
41905: ST_TO_ADDR
// break ;
41906: GO 41910
// end ; end ; end ;
41908: GO 41739
41910: POP
41911: POP
// end ; if not weapon then
41912: LD_VAR 0 18
41916: NOT
41917: IFFALSE 41977
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_VAR 0 5
41928: PUSH
41929: LD_INT 11
41931: PUSH
41932: LD_INT 30
41934: PUSH
41935: LD_INT 49
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: DIFF
41943: ST_TO_ADDR
// if not list then
41944: LD_VAR 0 5
41948: NOT
41949: IFFALSE 41953
// exit ;
41951: GO 42095
// weapon := list [ rand ( 1 , list ) ] ;
41953: LD_ADDR_VAR 0 18
41957: PUSH
41958: LD_VAR 0 5
41962: PUSH
41963: LD_INT 1
41965: PPUSH
41966: LD_VAR 0 5
41970: PPUSH
41971: CALL_OW 12
41975: ARRAY
41976: ST_TO_ADDR
// end ; if weapon then
41977: LD_VAR 0 18
41981: IFFALSE 42095
// begin tmp := CostOfWeapon ( weapon ) ;
41983: LD_ADDR_VAR 0 14
41987: PUSH
41988: LD_VAR 0 18
41992: PPUSH
41993: CALL_OW 451
41997: ST_TO_ADDR
// j := GetBase ( tower ) ;
41998: LD_ADDR_VAR 0 9
42002: PUSH
42003: LD_VAR 0 1
42007: PPUSH
42008: CALL_OW 274
42012: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42013: LD_VAR 0 9
42017: PPUSH
42018: LD_INT 1
42020: PPUSH
42021: CALL_OW 275
42025: PUSH
42026: LD_VAR 0 14
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: GREATEREQUAL
42035: PUSH
42036: LD_VAR 0 9
42040: PPUSH
42041: LD_INT 2
42043: PPUSH
42044: CALL_OW 275
42048: PUSH
42049: LD_VAR 0 14
42053: PUSH
42054: LD_INT 2
42056: ARRAY
42057: GREATEREQUAL
42058: AND
42059: PUSH
42060: LD_VAR 0 9
42064: PPUSH
42065: LD_INT 3
42067: PPUSH
42068: CALL_OW 275
42072: PUSH
42073: LD_VAR 0 14
42077: PUSH
42078: LD_INT 3
42080: ARRAY
42081: GREATEREQUAL
42082: AND
42083: IFFALSE 42095
// result := weapon ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_VAR 0 18
42094: ST_TO_ADDR
// end ; end ;
42095: LD_VAR 0 3
42099: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42100: LD_INT 0
42102: PPUSH
42103: PPUSH
// result := true ;
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: LD_INT 1
42111: ST_TO_ADDR
// if array1 = array2 then
42112: LD_VAR 0 1
42116: PUSH
42117: LD_VAR 0 2
42121: EQUAL
42122: IFFALSE 42182
// begin for i = 1 to array1 do
42124: LD_ADDR_VAR 0 4
42128: PUSH
42129: DOUBLE
42130: LD_INT 1
42132: DEC
42133: ST_TO_ADDR
42134: LD_VAR 0 1
42138: PUSH
42139: FOR_TO
42140: IFFALSE 42178
// if array1 [ i ] <> array2 [ i ] then
42142: LD_VAR 0 1
42146: PUSH
42147: LD_VAR 0 4
42151: ARRAY
42152: PUSH
42153: LD_VAR 0 2
42157: PUSH
42158: LD_VAR 0 4
42162: ARRAY
42163: NONEQUAL
42164: IFFALSE 42176
// begin result := false ;
42166: LD_ADDR_VAR 0 3
42170: PUSH
42171: LD_INT 0
42173: ST_TO_ADDR
// break ;
42174: GO 42178
// end ;
42176: GO 42139
42178: POP
42179: POP
// end else
42180: GO 42190
// result := false ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_INT 0
42189: ST_TO_ADDR
// end ;
42190: LD_VAR 0 3
42194: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
42199: PPUSH
// pom := GetBase ( fac ) ;
42200: LD_ADDR_VAR 0 5
42204: PUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 274
42214: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42215: LD_ADDR_VAR 0 4
42219: PUSH
42220: LD_VAR 0 2
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: PPUSH
42229: LD_VAR 0 2
42233: PUSH
42234: LD_INT 2
42236: ARRAY
42237: PPUSH
42238: LD_VAR 0 2
42242: PUSH
42243: LD_INT 3
42245: ARRAY
42246: PPUSH
42247: LD_VAR 0 2
42251: PUSH
42252: LD_INT 4
42254: ARRAY
42255: PPUSH
42256: CALL_OW 449
42260: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_VAR 0 5
42270: PPUSH
42271: LD_INT 1
42273: PPUSH
42274: CALL_OW 275
42278: PUSH
42279: LD_VAR 0 4
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: GREATEREQUAL
42288: PUSH
42289: LD_VAR 0 5
42293: PPUSH
42294: LD_INT 2
42296: PPUSH
42297: CALL_OW 275
42301: PUSH
42302: LD_VAR 0 4
42306: PUSH
42307: LD_INT 2
42309: ARRAY
42310: GREATEREQUAL
42311: AND
42312: PUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: LD_INT 3
42320: PPUSH
42321: CALL_OW 275
42325: PUSH
42326: LD_VAR 0 4
42330: PUSH
42331: LD_INT 3
42333: ARRAY
42334: GREATEREQUAL
42335: AND
42336: ST_TO_ADDR
// end ;
42337: LD_VAR 0 3
42341: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
// pom := GetBase ( building ) ;
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 274
42362: ST_TO_ADDR
// if not pom then
42363: LD_VAR 0 3
42367: NOT
42368: IFFALSE 42372
// exit ;
42370: GO 42542
// btype := GetBType ( building ) ;
42372: LD_ADDR_VAR 0 5
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 266
42386: ST_TO_ADDR
// if btype = b_armoury then
42387: LD_VAR 0 5
42391: PUSH
42392: LD_INT 4
42394: EQUAL
42395: IFFALSE 42405
// btype := b_barracks ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_INT 5
42404: ST_TO_ADDR
// if btype = b_depot then
42405: LD_VAR 0 5
42409: PUSH
42410: LD_INT 0
42412: EQUAL
42413: IFFALSE 42423
// btype := b_warehouse ;
42415: LD_ADDR_VAR 0 5
42419: PUSH
42420: LD_INT 1
42422: ST_TO_ADDR
// if btype = b_workshop then
42423: LD_VAR 0 5
42427: PUSH
42428: LD_INT 2
42430: EQUAL
42431: IFFALSE 42441
// btype := b_factory ;
42433: LD_ADDR_VAR 0 5
42437: PUSH
42438: LD_INT 3
42440: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42441: LD_ADDR_VAR 0 4
42445: PUSH
42446: LD_VAR 0 5
42450: PPUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 248
42460: PPUSH
42461: CALL_OW 450
42465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42466: LD_ADDR_VAR 0 2
42470: PUSH
42471: LD_VAR 0 3
42475: PPUSH
42476: LD_INT 1
42478: PPUSH
42479: CALL_OW 275
42483: PUSH
42484: LD_VAR 0 4
42488: PUSH
42489: LD_INT 1
42491: ARRAY
42492: GREATEREQUAL
42493: PUSH
42494: LD_VAR 0 3
42498: PPUSH
42499: LD_INT 2
42501: PPUSH
42502: CALL_OW 275
42506: PUSH
42507: LD_VAR 0 4
42511: PUSH
42512: LD_INT 2
42514: ARRAY
42515: GREATEREQUAL
42516: AND
42517: PUSH
42518: LD_VAR 0 3
42522: PPUSH
42523: LD_INT 3
42525: PPUSH
42526: CALL_OW 275
42530: PUSH
42531: LD_VAR 0 4
42535: PUSH
42536: LD_INT 3
42538: ARRAY
42539: GREATEREQUAL
42540: AND
42541: ST_TO_ADDR
// end ;
42542: LD_VAR 0 2
42546: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42547: LD_INT 0
42549: PPUSH
42550: PPUSH
42551: PPUSH
// pom := GetBase ( building ) ;
42552: LD_ADDR_VAR 0 4
42556: PUSH
42557: LD_VAR 0 1
42561: PPUSH
42562: CALL_OW 274
42566: ST_TO_ADDR
// if not pom then
42567: LD_VAR 0 4
42571: NOT
42572: IFFALSE 42576
// exit ;
42574: GO 42677
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42576: LD_ADDR_VAR 0 5
42580: PUSH
42581: LD_VAR 0 2
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 248
42595: PPUSH
42596: CALL_OW 450
42600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42601: LD_ADDR_VAR 0 3
42605: PUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: CALL_OW 275
42618: PUSH
42619: LD_VAR 0 5
42623: PUSH
42624: LD_INT 1
42626: ARRAY
42627: GREATEREQUAL
42628: PUSH
42629: LD_VAR 0 4
42633: PPUSH
42634: LD_INT 2
42636: PPUSH
42637: CALL_OW 275
42641: PUSH
42642: LD_VAR 0 5
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: GREATEREQUAL
42651: AND
42652: PUSH
42653: LD_VAR 0 4
42657: PPUSH
42658: LD_INT 3
42660: PPUSH
42661: CALL_OW 275
42665: PUSH
42666: LD_VAR 0 5
42670: PUSH
42671: LD_INT 3
42673: ARRAY
42674: GREATEREQUAL
42675: AND
42676: ST_TO_ADDR
// end ;
42677: LD_VAR 0 3
42681: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42682: LD_INT 0
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
42693: PPUSH
// result := false ;
42694: LD_ADDR_VAR 0 6
42698: PUSH
42699: LD_INT 0
42701: ST_TO_ADDR
// if not base or not btype or not x or not y then
42702: LD_VAR 0 1
42706: NOT
42707: PUSH
42708: LD_VAR 0 2
42712: NOT
42713: OR
42714: PUSH
42715: LD_VAR 0 3
42719: NOT
42720: OR
42721: PUSH
42722: LD_VAR 0 4
42726: NOT
42727: OR
42728: IFFALSE 42732
// exit ;
42730: GO 43341
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42732: LD_ADDR_VAR 0 12
42736: PUSH
42737: LD_VAR 0 2
42741: PPUSH
42742: LD_VAR 0 3
42746: PPUSH
42747: LD_VAR 0 4
42751: PPUSH
42752: LD_VAR 0 5
42756: PPUSH
42757: LD_VAR 0 1
42761: PUSH
42762: LD_INT 1
42764: ARRAY
42765: PPUSH
42766: CALL_OW 248
42770: PPUSH
42771: LD_INT 0
42773: PPUSH
42774: CALL 44178 0 6
42778: ST_TO_ADDR
// if not hexes then
42779: LD_VAR 0 12
42783: NOT
42784: IFFALSE 42788
// exit ;
42786: GO 43341
// for i = 1 to hexes do
42788: LD_ADDR_VAR 0 7
42792: PUSH
42793: DOUBLE
42794: LD_INT 1
42796: DEC
42797: ST_TO_ADDR
42798: LD_VAR 0 12
42802: PUSH
42803: FOR_TO
42804: IFFALSE 43339
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42806: LD_ADDR_VAR 0 11
42810: PUSH
42811: LD_VAR 0 12
42815: PUSH
42816: LD_VAR 0 7
42820: ARRAY
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: PPUSH
42826: LD_VAR 0 12
42830: PUSH
42831: LD_VAR 0 7
42835: ARRAY
42836: PUSH
42837: LD_INT 2
42839: ARRAY
42840: PPUSH
42841: CALL_OW 428
42845: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42846: LD_VAR 0 12
42850: PUSH
42851: LD_VAR 0 7
42855: ARRAY
42856: PUSH
42857: LD_INT 1
42859: ARRAY
42860: PPUSH
42861: LD_VAR 0 12
42865: PUSH
42866: LD_VAR 0 7
42870: ARRAY
42871: PUSH
42872: LD_INT 2
42874: ARRAY
42875: PPUSH
42876: CALL_OW 351
42880: PUSH
42881: LD_VAR 0 12
42885: PUSH
42886: LD_VAR 0 7
42890: ARRAY
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 12
42900: PUSH
42901: LD_VAR 0 7
42905: ARRAY
42906: PUSH
42907: LD_INT 2
42909: ARRAY
42910: PPUSH
42911: CALL_OW 488
42915: NOT
42916: OR
42917: PUSH
42918: LD_VAR 0 11
42922: PPUSH
42923: CALL_OW 247
42927: PUSH
42928: LD_INT 3
42930: EQUAL
42931: OR
42932: IFFALSE 42938
// exit ;
42934: POP
42935: POP
42936: GO 43341
// if not tmp or not tmp in base then
42938: LD_VAR 0 11
42942: NOT
42943: PUSH
42944: LD_VAR 0 11
42948: PUSH
42949: LD_VAR 0 1
42953: IN
42954: NOT
42955: OR
42956: IFFALSE 42960
// continue ;
42958: GO 42803
// result := true ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: LD_INT 1
42967: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42968: LD_ADDR_VAR 0 15
42972: PUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: LD_INT 22
42980: PUSH
42981: LD_VAR 0 11
42985: PPUSH
42986: CALL_OW 255
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 30
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 30
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PPUSH
43027: CALL_OW 72
43031: ST_TO_ADDR
// if dep then
43032: LD_VAR 0 15
43036: IFFALSE 43172
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43038: LD_ADDR_VAR 0 14
43042: PUSH
43043: LD_VAR 0 15
43047: PUSH
43048: LD_INT 1
43050: ARRAY
43051: PPUSH
43052: CALL_OW 250
43056: PPUSH
43057: LD_VAR 0 15
43061: PUSH
43062: LD_INT 1
43064: ARRAY
43065: PPUSH
43066: CALL_OW 254
43070: PPUSH
43071: LD_INT 5
43073: PPUSH
43074: CALL_OW 272
43078: PUSH
43079: LD_VAR 0 15
43083: PUSH
43084: LD_INT 1
43086: ARRAY
43087: PPUSH
43088: CALL_OW 251
43092: PPUSH
43093: LD_VAR 0 15
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: PPUSH
43102: CALL_OW 254
43106: PPUSH
43107: LD_INT 5
43109: PPUSH
43110: CALL_OW 273
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43119: LD_VAR 0 14
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 14
43132: PUSH
43133: LD_INT 2
43135: ARRAY
43136: PPUSH
43137: CALL_OW 488
43141: IFFALSE 43172
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43143: LD_VAR 0 11
43147: PPUSH
43148: LD_VAR 0 14
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: LD_VAR 0 14
43161: PUSH
43162: LD_INT 2
43164: ARRAY
43165: PPUSH
43166: CALL_OW 111
// continue ;
43170: GO 42803
// end ; end ; r := GetDir ( tmp ) ;
43172: LD_ADDR_VAR 0 13
43176: PUSH
43177: LD_VAR 0 11
43181: PPUSH
43182: CALL_OW 254
43186: ST_TO_ADDR
// if r = 5 then
43187: LD_VAR 0 13
43191: PUSH
43192: LD_INT 5
43194: EQUAL
43195: IFFALSE 43205
// r := 0 ;
43197: LD_ADDR_VAR 0 13
43201: PUSH
43202: LD_INT 0
43204: ST_TO_ADDR
// for j = r to 5 do
43205: LD_ADDR_VAR 0 8
43209: PUSH
43210: DOUBLE
43211: LD_VAR 0 13
43215: DEC
43216: ST_TO_ADDR
43217: LD_INT 5
43219: PUSH
43220: FOR_TO
43221: IFFALSE 43335
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43223: LD_ADDR_VAR 0 9
43227: PUSH
43228: LD_VAR 0 11
43232: PPUSH
43233: CALL_OW 250
43237: PPUSH
43238: LD_VAR 0 8
43242: PPUSH
43243: LD_INT 2
43245: PPUSH
43246: CALL_OW 272
43250: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43251: LD_ADDR_VAR 0 10
43255: PUSH
43256: LD_VAR 0 11
43260: PPUSH
43261: CALL_OW 251
43265: PPUSH
43266: LD_VAR 0 8
43270: PPUSH
43271: LD_INT 2
43273: PPUSH
43274: CALL_OW 273
43278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43279: LD_VAR 0 9
43283: PPUSH
43284: LD_VAR 0 10
43288: PPUSH
43289: CALL_OW 488
43293: PUSH
43294: LD_VAR 0 9
43298: PPUSH
43299: LD_VAR 0 10
43303: PPUSH
43304: CALL_OW 428
43308: NOT
43309: AND
43310: IFFALSE 43333
// begin ComMoveXY ( tmp , _x , _y ) ;
43312: LD_VAR 0 11
43316: PPUSH
43317: LD_VAR 0 9
43321: PPUSH
43322: LD_VAR 0 10
43326: PPUSH
43327: CALL_OW 111
// break ;
43331: GO 43335
// end ; end ;
43333: GO 43220
43335: POP
43336: POP
// end ;
43337: GO 42803
43339: POP
43340: POP
// end ;
43341: LD_VAR 0 6
43345: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43346: LD_INT 0
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
// result := false ;
43358: LD_ADDR_VAR 0 6
43362: PUSH
43363: LD_INT 0
43365: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43366: LD_VAR 0 1
43370: NOT
43371: PUSH
43372: LD_VAR 0 1
43376: PPUSH
43377: CALL_OW 266
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: IN
43392: NOT
43393: OR
43394: PUSH
43395: LD_VAR 0 2
43399: NOT
43400: OR
43401: PUSH
43402: LD_VAR 0 5
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 4
43421: PUSH
43422: LD_INT 5
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: IN
43433: NOT
43434: OR
43435: PUSH
43436: LD_VAR 0 3
43440: PPUSH
43441: LD_VAR 0 4
43445: PPUSH
43446: CALL_OW 488
43450: NOT
43451: OR
43452: IFFALSE 43456
// exit ;
43454: GO 44173
// pom := GetBase ( depot ) ;
43456: LD_ADDR_VAR 0 10
43460: PUSH
43461: LD_VAR 0 1
43465: PPUSH
43466: CALL_OW 274
43470: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43471: LD_ADDR_VAR 0 11
43475: PUSH
43476: LD_VAR 0 2
43480: PPUSH
43481: LD_VAR 0 1
43485: PPUSH
43486: CALL_OW 248
43490: PPUSH
43491: CALL_OW 450
43495: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43496: LD_VAR 0 10
43500: PPUSH
43501: LD_INT 1
43503: PPUSH
43504: CALL_OW 275
43508: PUSH
43509: LD_VAR 0 11
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: GREATEREQUAL
43518: PUSH
43519: LD_VAR 0 10
43523: PPUSH
43524: LD_INT 2
43526: PPUSH
43527: CALL_OW 275
43531: PUSH
43532: LD_VAR 0 11
43536: PUSH
43537: LD_INT 2
43539: ARRAY
43540: GREATEREQUAL
43541: AND
43542: PUSH
43543: LD_VAR 0 10
43547: PPUSH
43548: LD_INT 3
43550: PPUSH
43551: CALL_OW 275
43555: PUSH
43556: LD_VAR 0 11
43560: PUSH
43561: LD_INT 3
43563: ARRAY
43564: GREATEREQUAL
43565: AND
43566: NOT
43567: IFFALSE 43571
// exit ;
43569: GO 44173
// if GetBType ( depot ) = b_depot then
43571: LD_VAR 0 1
43575: PPUSH
43576: CALL_OW 266
43580: PUSH
43581: LD_INT 0
43583: EQUAL
43584: IFFALSE 43596
// dist := 28 else
43586: LD_ADDR_VAR 0 14
43590: PUSH
43591: LD_INT 28
43593: ST_TO_ADDR
43594: GO 43604
// dist := 36 ;
43596: LD_ADDR_VAR 0 14
43600: PUSH
43601: LD_INT 36
43603: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43604: LD_VAR 0 1
43608: PPUSH
43609: LD_VAR 0 3
43613: PPUSH
43614: LD_VAR 0 4
43618: PPUSH
43619: CALL_OW 297
43623: PUSH
43624: LD_VAR 0 14
43628: GREATER
43629: IFFALSE 43633
// exit ;
43631: GO 44173
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43633: LD_ADDR_VAR 0 12
43637: PUSH
43638: LD_VAR 0 2
43642: PPUSH
43643: LD_VAR 0 3
43647: PPUSH
43648: LD_VAR 0 4
43652: PPUSH
43653: LD_VAR 0 5
43657: PPUSH
43658: LD_VAR 0 1
43662: PPUSH
43663: CALL_OW 248
43667: PPUSH
43668: LD_INT 0
43670: PPUSH
43671: CALL 44178 0 6
43675: ST_TO_ADDR
// if not hexes then
43676: LD_VAR 0 12
43680: NOT
43681: IFFALSE 43685
// exit ;
43683: GO 44173
// hex := GetHexInfo ( x , y ) ;
43685: LD_ADDR_VAR 0 15
43689: PUSH
43690: LD_VAR 0 3
43694: PPUSH
43695: LD_VAR 0 4
43699: PPUSH
43700: CALL_OW 546
43704: ST_TO_ADDR
// if hex [ 1 ] then
43705: LD_VAR 0 15
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: IFFALSE 43717
// exit ;
43715: GO 44173
// height := hex [ 2 ] ;
43717: LD_ADDR_VAR 0 13
43721: PUSH
43722: LD_VAR 0 15
43726: PUSH
43727: LD_INT 2
43729: ARRAY
43730: ST_TO_ADDR
// for i = 1 to hexes do
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: DOUBLE
43737: LD_INT 1
43739: DEC
43740: ST_TO_ADDR
43741: LD_VAR 0 12
43745: PUSH
43746: FOR_TO
43747: IFFALSE 44077
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43749: LD_VAR 0 12
43753: PUSH
43754: LD_VAR 0 7
43758: ARRAY
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PPUSH
43764: LD_VAR 0 12
43768: PUSH
43769: LD_VAR 0 7
43773: ARRAY
43774: PUSH
43775: LD_INT 2
43777: ARRAY
43778: PPUSH
43779: CALL_OW 488
43783: NOT
43784: PUSH
43785: LD_VAR 0 12
43789: PUSH
43790: LD_VAR 0 7
43794: ARRAY
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: PPUSH
43800: LD_VAR 0 12
43804: PUSH
43805: LD_VAR 0 7
43809: ARRAY
43810: PUSH
43811: LD_INT 2
43813: ARRAY
43814: PPUSH
43815: CALL_OW 428
43819: PUSH
43820: LD_INT 0
43822: GREATER
43823: OR
43824: PUSH
43825: LD_VAR 0 12
43829: PUSH
43830: LD_VAR 0 7
43834: ARRAY
43835: PUSH
43836: LD_INT 1
43838: ARRAY
43839: PPUSH
43840: LD_VAR 0 12
43844: PUSH
43845: LD_VAR 0 7
43849: ARRAY
43850: PUSH
43851: LD_INT 2
43853: ARRAY
43854: PPUSH
43855: CALL_OW 351
43859: OR
43860: IFFALSE 43866
// exit ;
43862: POP
43863: POP
43864: GO 44173
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43866: LD_ADDR_VAR 0 8
43870: PUSH
43871: LD_VAR 0 12
43875: PUSH
43876: LD_VAR 0 7
43880: ARRAY
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: PPUSH
43886: LD_VAR 0 12
43890: PUSH
43891: LD_VAR 0 7
43895: ARRAY
43896: PUSH
43897: LD_INT 2
43899: ARRAY
43900: PPUSH
43901: CALL_OW 546
43905: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43906: LD_VAR 0 8
43910: PUSH
43911: LD_INT 1
43913: ARRAY
43914: PUSH
43915: LD_VAR 0 8
43919: PUSH
43920: LD_INT 2
43922: ARRAY
43923: PUSH
43924: LD_VAR 0 13
43928: PUSH
43929: LD_INT 2
43931: PLUS
43932: GREATER
43933: OR
43934: PUSH
43935: LD_VAR 0 8
43939: PUSH
43940: LD_INT 2
43942: ARRAY
43943: PUSH
43944: LD_VAR 0 13
43948: PUSH
43949: LD_INT 2
43951: MINUS
43952: LESS
43953: OR
43954: PUSH
43955: LD_VAR 0 8
43959: PUSH
43960: LD_INT 3
43962: ARRAY
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 8
43969: PUSH
43970: LD_INT 9
43972: PUSH
43973: LD_INT 10
43975: PUSH
43976: LD_INT 11
43978: PUSH
43979: LD_INT 12
43981: PUSH
43982: LD_INT 13
43984: PUSH
43985: LD_INT 16
43987: PUSH
43988: LD_INT 17
43990: PUSH
43991: LD_INT 18
43993: PUSH
43994: LD_INT 19
43996: PUSH
43997: LD_INT 20
43999: PUSH
44000: LD_INT 21
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: IN
44018: NOT
44019: OR
44020: PUSH
44021: LD_VAR 0 8
44025: PUSH
44026: LD_INT 5
44028: ARRAY
44029: NOT
44030: OR
44031: PUSH
44032: LD_VAR 0 8
44036: PUSH
44037: LD_INT 6
44039: ARRAY
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 7
44049: PUSH
44050: LD_INT 9
44052: PUSH
44053: LD_INT 10
44055: PUSH
44056: LD_INT 11
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: IN
44067: NOT
44068: OR
44069: IFFALSE 44075
// exit ;
44071: POP
44072: POP
44073: GO 44173
// end ;
44075: GO 43746
44077: POP
44078: POP
// side := GetSide ( depot ) ;
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: LD_VAR 0 1
44088: PPUSH
44089: CALL_OW 255
44093: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44094: LD_VAR 0 9
44098: PPUSH
44099: LD_VAR 0 3
44103: PPUSH
44104: LD_VAR 0 4
44108: PPUSH
44109: LD_INT 20
44111: PPUSH
44112: CALL 36827 0 4
44116: PUSH
44117: LD_INT 4
44119: ARRAY
44120: IFFALSE 44124
// exit ;
44122: GO 44173
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44124: LD_VAR 0 2
44128: PUSH
44129: LD_INT 29
44131: PUSH
44132: LD_INT 30
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: IN
44139: PUSH
44140: LD_VAR 0 3
44144: PPUSH
44145: LD_VAR 0 4
44149: PPUSH
44150: LD_VAR 0 9
44154: PPUSH
44155: CALL_OW 440
44159: NOT
44160: AND
44161: IFFALSE 44165
// exit ;
44163: GO 44173
// result := true ;
44165: LD_ADDR_VAR 0 6
44169: PUSH
44170: LD_INT 1
44172: ST_TO_ADDR
// end ;
44173: LD_VAR 0 6
44177: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44178: LD_INT 0
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// result = [ ] ;
44238: LD_ADDR_VAR 0 7
44242: PUSH
44243: EMPTY
44244: ST_TO_ADDR
// temp_list = [ ] ;
44245: LD_ADDR_VAR 0 9
44249: PUSH
44250: EMPTY
44251: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44252: LD_VAR 0 4
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 4
44271: PUSH
44272: LD_INT 5
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: IN
44283: NOT
44284: PUSH
44285: LD_VAR 0 1
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: IN
44300: PUSH
44301: LD_VAR 0 5
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: IN
44320: NOT
44321: AND
44322: OR
44323: IFFALSE 44327
// exit ;
44325: GO 62718
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44327: LD_VAR 0 1
44331: PUSH
44332: LD_INT 6
44334: PUSH
44335: LD_INT 7
44337: PUSH
44338: LD_INT 8
44340: PUSH
44341: LD_INT 13
44343: PUSH
44344: LD_INT 12
44346: PUSH
44347: LD_INT 15
44349: PUSH
44350: LD_INT 11
44352: PUSH
44353: LD_INT 14
44355: PUSH
44356: LD_INT 10
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: IN
44370: IFFALSE 44380
// btype = b_lab ;
44372: LD_ADDR_VAR 0 1
44376: PUSH
44377: LD_INT 6
44379: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44380: LD_VAR 0 6
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: IN
44399: NOT
44400: PUSH
44401: LD_VAR 0 1
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: LD_INT 6
44420: PUSH
44421: LD_INT 36
44423: PUSH
44424: LD_INT 4
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 31
44432: PUSH
44433: LD_INT 32
44435: PUSH
44436: LD_INT 33
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: IN
44452: NOT
44453: PUSH
44454: LD_VAR 0 6
44458: PUSH
44459: LD_INT 1
44461: EQUAL
44462: AND
44463: OR
44464: PUSH
44465: LD_VAR 0 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: IN
44480: NOT
44481: PUSH
44482: LD_VAR 0 6
44486: PUSH
44487: LD_INT 2
44489: EQUAL
44490: AND
44491: OR
44492: IFFALSE 44502
// mode = 0 ;
44494: LD_ADDR_VAR 0 6
44498: PUSH
44499: LD_INT 0
44501: ST_TO_ADDR
// case mode of 0 :
44502: LD_VAR 0 6
44506: PUSH
44507: LD_INT 0
44509: DOUBLE
44510: EQUAL
44511: IFTRUE 44515
44513: GO 55968
44515: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44516: LD_ADDR_VAR 0 11
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44709: LD_ADDR_VAR 0 12
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44905: LD_ADDR_VAR 0 13
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 3
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45104: LD_ADDR_VAR 0 14
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 3
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45300: LD_ADDR_VAR 0 15
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45493: LD_ADDR_VAR 0 16
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45686: LD_ADDR_VAR 0 17
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45916: LD_ADDR_VAR 0 18
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46146: LD_ADDR_VAR 0 19
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46376: LD_ADDR_VAR 0 20
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46606: LD_ADDR_VAR 0 21
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46836: LD_ADDR_VAR 0 22
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47066: LD_ADDR_VAR 0 23
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 3
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47346: LD_ADDR_VAR 0 24
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47622: LD_ADDR_VAR 0 25
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47896: LD_ADDR_VAR 0 26
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 27
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48452: LD_ADDR_VAR 0 28
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 3
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48734: LD_ADDR_VAR 0 29
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49013: LD_ADDR_VAR 0 30
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49291: LD_ADDR_VAR 0 31
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49569: LD_ADDR_VAR 0 32
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49847: LD_ADDR_VAR 0 33
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50126: LD_ADDR_VAR 0 34
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50406: LD_ADDR_VAR 0 35
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50518: LD_ADDR_VAR 0 36
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50630: LD_ADDR_VAR 0 37
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50742: LD_ADDR_VAR 0 38
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50854: LD_ADDR_VAR 0 39
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50966: LD_ADDR_VAR 0 40
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51078: LD_ADDR_VAR 0 41
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51428: LD_ADDR_VAR 0 42
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51778: LD_ADDR_VAR 0 43
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52126: LD_ADDR_VAR 0 44
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52476: LD_ADDR_VAR 0 45
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52826: LD_ADDR_VAR 0 46
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53174: LD_ADDR_VAR 0 47
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53325: LD_ADDR_VAR 0 48
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53472: LD_ADDR_VAR 0 49
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53616: LD_ADDR_VAR 0 50
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53760: LD_ADDR_VAR 0 51
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53907: LD_ADDR_VAR 0 52
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54058: LD_ADDR_VAR 0 53
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54288: LD_ADDR_VAR 0 54
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54518: LD_ADDR_VAR 0 55
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54748: LD_ADDR_VAR 0 56
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54978: LD_ADDR_VAR 0 57
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55208: LD_ADDR_VAR 0 58
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55438: LD_ADDR_VAR 0 59
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55526: LD_ADDR_VAR 0 60
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55614: LD_ADDR_VAR 0 61
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55702: LD_ADDR_VAR 0 62
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55790: LD_ADDR_VAR 0 63
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55878: LD_ADDR_VAR 0 64
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// end ; 1 :
55966: GO 61863
55968: LD_INT 1
55970: DOUBLE
55971: EQUAL
55972: IFTRUE 55976
55974: GO 58599
55976: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55977: LD_ADDR_VAR 0 11
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56021: LD_ADDR_VAR 0 12
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56062: LD_ADDR_VAR 0 13
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56102: LD_ADDR_VAR 0 14
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56143: LD_ADDR_VAR 0 15
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56187: LD_ADDR_VAR 0 16
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56233: LD_ADDR_VAR 0 17
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56277: LD_ADDR_VAR 0 18
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56318: LD_ADDR_VAR 0 19
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56358: LD_ADDR_VAR 0 20
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56399: LD_ADDR_VAR 0 21
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56443: LD_ADDR_VAR 0 22
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56489: LD_ADDR_VAR 0 23
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56533: LD_ADDR_VAR 0 24
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56574: LD_ADDR_VAR 0 25
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 4
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 4
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56614: LD_ADDR_VAR 0 26
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56655: LD_ADDR_VAR 0 27
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56699: LD_ADDR_VAR 0 28
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 4
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56745: LD_ADDR_VAR 0 29
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 4
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 5
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 4
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 6
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 6
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56900: LD_ADDR_VAR 0 30
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 5
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 5
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 6
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 6
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57043: LD_ADDR_VAR 0 31
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 4
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 4
57090: PUSH
57091: LD_INT 4
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: LD_INT 4
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 5
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: PUSH
57121: LD_INT 5
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: LD_INT 5
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 6
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 6
57150: PUSH
57151: LD_INT 6
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 6
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57182: LD_ADDR_VAR 0 32
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 3
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 5
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 5
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 4
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 6
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 6
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 5
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57325: LD_ADDR_VAR 0 33
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 5
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 5
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 6
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 6
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57480: LD_ADDR_VAR 0 34
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 4
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: LD_INT 5
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 5
57571: NEG
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 5
57583: NEG
57584: PUSH
57585: LD_INT 5
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 5
57595: NEG
57596: PUSH
57597: LD_INT 6
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 6
57607: NEG
57608: PUSH
57609: LD_INT 5
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 6
57619: NEG
57620: PUSH
57621: LD_INT 6
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57643: LD_ADDR_VAR 0 41
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57687: LD_ADDR_VAR 0 42
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57728: LD_ADDR_VAR 0 43
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57768: LD_ADDR_VAR 0 44
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57809: LD_ADDR_VAR 0 45
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57853: LD_ADDR_VAR 0 46
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57899: LD_ADDR_VAR 0 47
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57932: LD_ADDR_VAR 0 48
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57963: LD_ADDR_VAR 0 49
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57992: LD_ADDR_VAR 0 50
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58021: LD_ADDR_VAR 0 51
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58052: LD_ADDR_VAR 0 52
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58085: LD_ADDR_VAR 0 53
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58129: LD_ADDR_VAR 0 54
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58170: LD_ADDR_VAR 0 55
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58210: LD_ADDR_VAR 0 56
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58251: LD_ADDR_VAR 0 57
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58295: LD_ADDR_VAR 0 58
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58341: LD_ADDR_VAR 0 59
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58385: LD_ADDR_VAR 0 60
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58426: LD_ADDR_VAR 0 61
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58466: LD_ADDR_VAR 0 62
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58507: LD_ADDR_VAR 0 63
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58551: LD_ADDR_VAR 0 64
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// end ; 2 :
58597: GO 61863
58599: LD_INT 2
58601: DOUBLE
58602: EQUAL
58603: IFTRUE 58607
58605: GO 61862
58607: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58608: LD_ADDR_VAR 0 29
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 5
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 5
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 5
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 4
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: LD_INT 5
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 5
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 4
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 5
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 4
58993: NEG
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: LD_INT 5
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: NEG
59066: PUSH
59067: LD_INT 5
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59146: LD_ADDR_VAR 0 30
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: LD_INT 4
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 5
59183: PUSH
59184: LD_INT 5
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 5
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 5
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 4
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 5
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 4
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 4
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 4
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 4
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 5
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: LD_INT 5
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59693: LD_ADDR_VAR 0 31
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 4
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 5
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 5
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 4
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 5
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 4
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: NEG
59896: PUSH
59897: LD_INT 4
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: LD_INT 5
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 5
59967: NEG
59968: PUSH
59969: LD_INT 5
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: LD_INT 5
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: LD_INT 4
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 4
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 5
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60243: LD_ADDR_VAR 0 32
60247: PUSH
60248: LD_INT 4
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 4
60295: NEG
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 5
60306: NEG
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 5
60329: NEG
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 4
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 4
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 4
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 5
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 4
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 3
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 4
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 5
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: LD_INT 5
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 4
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 4
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: LD_INT 4
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 5
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 5
60685: PUSH
60686: LD_INT 5
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 5
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 5
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60790: LD_ADDR_VAR 0 33
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 5
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: LD_INT 4
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: LD_INT 3
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 5
60857: NEG
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: LD_INT 5
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 5
60893: NEG
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 5
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 4
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 4
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 4
61130: PUSH
61131: LD_INT 4
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: LD_INT 4
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 4
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 5
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 5
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 4
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 5
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61328: LD_ADDR_VAR 0 34
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 4
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 5
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 4
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 5
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 5
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 4
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: LD_INT 4
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 4
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 5
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 5
61560: PUSH
61561: LD_INT 5
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: LD_INT 5
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 5
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 4
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 4
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 4
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 5
61769: NEG
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 5
61792: NEG
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// end ; end ;
61860: GO 61863
61862: POP
// case btype of b_depot , b_warehouse :
61863: LD_VAR 0 1
61867: PUSH
61868: LD_INT 0
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61882
61874: LD_INT 1
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61882
61880: GO 62083
61882: POP
// case nation of nation_american :
61883: LD_VAR 0 5
61887: PUSH
61888: LD_INT 1
61890: DOUBLE
61891: EQUAL
61892: IFTRUE 61896
61894: GO 61952
61896: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
61897: LD_ADDR_VAR 0 9
61901: PUSH
61902: LD_VAR 0 11
61906: PUSH
61907: LD_VAR 0 12
61911: PUSH
61912: LD_VAR 0 13
61916: PUSH
61917: LD_VAR 0 14
61921: PUSH
61922: LD_VAR 0 15
61926: PUSH
61927: LD_VAR 0 16
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: PUSH
61940: LD_VAR 0 4
61944: PUSH
61945: LD_INT 1
61947: PLUS
61948: ARRAY
61949: ST_TO_ADDR
61950: GO 62081
61952: LD_INT 2
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61960
61958: GO 62016
61960: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
61961: LD_ADDR_VAR 0 9
61965: PUSH
61966: LD_VAR 0 17
61970: PUSH
61971: LD_VAR 0 18
61975: PUSH
61976: LD_VAR 0 19
61980: PUSH
61981: LD_VAR 0 20
61985: PUSH
61986: LD_VAR 0 21
61990: PUSH
61991: LD_VAR 0 22
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: PUSH
62004: LD_VAR 0 4
62008: PUSH
62009: LD_INT 1
62011: PLUS
62012: ARRAY
62013: ST_TO_ADDR
62014: GO 62081
62016: LD_INT 3
62018: DOUBLE
62019: EQUAL
62020: IFTRUE 62024
62022: GO 62080
62024: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62025: LD_ADDR_VAR 0 9
62029: PUSH
62030: LD_VAR 0 23
62034: PUSH
62035: LD_VAR 0 24
62039: PUSH
62040: LD_VAR 0 25
62044: PUSH
62045: LD_VAR 0 26
62049: PUSH
62050: LD_VAR 0 27
62054: PUSH
62055: LD_VAR 0 28
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: PUSH
62068: LD_VAR 0 4
62072: PUSH
62073: LD_INT 1
62075: PLUS
62076: ARRAY
62077: ST_TO_ADDR
62078: GO 62081
62080: POP
62081: GO 62636
62083: LD_INT 2
62085: DOUBLE
62086: EQUAL
62087: IFTRUE 62097
62089: LD_INT 3
62091: DOUBLE
62092: EQUAL
62093: IFTRUE 62097
62095: GO 62153
62097: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62098: LD_ADDR_VAR 0 9
62102: PUSH
62103: LD_VAR 0 29
62107: PUSH
62108: LD_VAR 0 30
62112: PUSH
62113: LD_VAR 0 31
62117: PUSH
62118: LD_VAR 0 32
62122: PUSH
62123: LD_VAR 0 33
62127: PUSH
62128: LD_VAR 0 34
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: PUSH
62141: LD_VAR 0 4
62145: PUSH
62146: LD_INT 1
62148: PLUS
62149: ARRAY
62150: ST_TO_ADDR
62151: GO 62636
62153: LD_INT 16
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62215
62159: LD_INT 17
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62215
62165: LD_INT 18
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62215
62171: LD_INT 19
62173: DOUBLE
62174: EQUAL
62175: IFTRUE 62215
62177: LD_INT 22
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62215
62183: LD_INT 20
62185: DOUBLE
62186: EQUAL
62187: IFTRUE 62215
62189: LD_INT 21
62191: DOUBLE
62192: EQUAL
62193: IFTRUE 62215
62195: LD_INT 23
62197: DOUBLE
62198: EQUAL
62199: IFTRUE 62215
62201: LD_INT 24
62203: DOUBLE
62204: EQUAL
62205: IFTRUE 62215
62207: LD_INT 25
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62215
62213: GO 62271
62215: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62216: LD_ADDR_VAR 0 9
62220: PUSH
62221: LD_VAR 0 35
62225: PUSH
62226: LD_VAR 0 36
62230: PUSH
62231: LD_VAR 0 37
62235: PUSH
62236: LD_VAR 0 38
62240: PUSH
62241: LD_VAR 0 39
62245: PUSH
62246: LD_VAR 0 40
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 4
62263: PUSH
62264: LD_INT 1
62266: PLUS
62267: ARRAY
62268: ST_TO_ADDR
62269: GO 62636
62271: LD_INT 6
62273: DOUBLE
62274: EQUAL
62275: IFTRUE 62327
62277: LD_INT 7
62279: DOUBLE
62280: EQUAL
62281: IFTRUE 62327
62283: LD_INT 8
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62327
62289: LD_INT 13
62291: DOUBLE
62292: EQUAL
62293: IFTRUE 62327
62295: LD_INT 12
62297: DOUBLE
62298: EQUAL
62299: IFTRUE 62327
62301: LD_INT 15
62303: DOUBLE
62304: EQUAL
62305: IFTRUE 62327
62307: LD_INT 11
62309: DOUBLE
62310: EQUAL
62311: IFTRUE 62327
62313: LD_INT 14
62315: DOUBLE
62316: EQUAL
62317: IFTRUE 62327
62319: LD_INT 10
62321: DOUBLE
62322: EQUAL
62323: IFTRUE 62327
62325: GO 62383
62327: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62328: LD_ADDR_VAR 0 9
62332: PUSH
62333: LD_VAR 0 41
62337: PUSH
62338: LD_VAR 0 42
62342: PUSH
62343: LD_VAR 0 43
62347: PUSH
62348: LD_VAR 0 44
62352: PUSH
62353: LD_VAR 0 45
62357: PUSH
62358: LD_VAR 0 46
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: PUSH
62371: LD_VAR 0 4
62375: PUSH
62376: LD_INT 1
62378: PLUS
62379: ARRAY
62380: ST_TO_ADDR
62381: GO 62636
62383: LD_INT 36
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 62447
62391: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62392: LD_ADDR_VAR 0 9
62396: PUSH
62397: LD_VAR 0 47
62401: PUSH
62402: LD_VAR 0 48
62406: PUSH
62407: LD_VAR 0 49
62411: PUSH
62412: LD_VAR 0 50
62416: PUSH
62417: LD_VAR 0 51
62421: PUSH
62422: LD_VAR 0 52
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: PUSH
62435: LD_VAR 0 4
62439: PUSH
62440: LD_INT 1
62442: PLUS
62443: ARRAY
62444: ST_TO_ADDR
62445: GO 62636
62447: LD_INT 4
62449: DOUBLE
62450: EQUAL
62451: IFTRUE 62473
62453: LD_INT 5
62455: DOUBLE
62456: EQUAL
62457: IFTRUE 62473
62459: LD_INT 34
62461: DOUBLE
62462: EQUAL
62463: IFTRUE 62473
62465: LD_INT 37
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62473
62471: GO 62529
62473: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62474: LD_ADDR_VAR 0 9
62478: PUSH
62479: LD_VAR 0 53
62483: PUSH
62484: LD_VAR 0 54
62488: PUSH
62489: LD_VAR 0 55
62493: PUSH
62494: LD_VAR 0 56
62498: PUSH
62499: LD_VAR 0 57
62503: PUSH
62504: LD_VAR 0 58
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: PUSH
62517: LD_VAR 0 4
62521: PUSH
62522: LD_INT 1
62524: PLUS
62525: ARRAY
62526: ST_TO_ADDR
62527: GO 62636
62529: LD_INT 31
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62579
62535: LD_INT 32
62537: DOUBLE
62538: EQUAL
62539: IFTRUE 62579
62541: LD_INT 33
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62579
62547: LD_INT 27
62549: DOUBLE
62550: EQUAL
62551: IFTRUE 62579
62553: LD_INT 26
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62579
62559: LD_INT 28
62561: DOUBLE
62562: EQUAL
62563: IFTRUE 62579
62565: LD_INT 29
62567: DOUBLE
62568: EQUAL
62569: IFTRUE 62579
62571: LD_INT 30
62573: DOUBLE
62574: EQUAL
62575: IFTRUE 62579
62577: GO 62635
62579: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
62580: LD_ADDR_VAR 0 9
62584: PUSH
62585: LD_VAR 0 59
62589: PUSH
62590: LD_VAR 0 60
62594: PUSH
62595: LD_VAR 0 61
62599: PUSH
62600: LD_VAR 0 62
62604: PUSH
62605: LD_VAR 0 63
62609: PUSH
62610: LD_VAR 0 64
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 4
62627: PUSH
62628: LD_INT 1
62630: PLUS
62631: ARRAY
62632: ST_TO_ADDR
62633: GO 62636
62635: POP
// temp_list2 = [ ] ;
62636: LD_ADDR_VAR 0 10
62640: PUSH
62641: EMPTY
62642: ST_TO_ADDR
// for i in temp_list do
62643: LD_ADDR_VAR 0 8
62647: PUSH
62648: LD_VAR 0 9
62652: PUSH
62653: FOR_IN
62654: IFFALSE 62706
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62656: LD_ADDR_VAR 0 10
62660: PUSH
62661: LD_VAR 0 10
62665: PUSH
62666: LD_VAR 0 8
62670: PUSH
62671: LD_INT 1
62673: ARRAY
62674: PUSH
62675: LD_VAR 0 2
62679: PLUS
62680: PUSH
62681: LD_VAR 0 8
62685: PUSH
62686: LD_INT 2
62688: ARRAY
62689: PUSH
62690: LD_VAR 0 3
62694: PLUS
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: ADD
62703: ST_TO_ADDR
62704: GO 62653
62706: POP
62707: POP
// result = temp_list2 ;
62708: LD_ADDR_VAR 0 7
62712: PUSH
62713: LD_VAR 0 10
62717: ST_TO_ADDR
// end ;
62718: LD_VAR 0 7
62722: RET
// export function EnemyInRange ( unit , dist ) ; begin
62723: LD_INT 0
62725: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62726: LD_ADDR_VAR 0 3
62730: PUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 255
62740: PPUSH
62741: LD_VAR 0 1
62745: PPUSH
62746: CALL_OW 250
62750: PPUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 251
62760: PPUSH
62761: LD_VAR 0 2
62765: PPUSH
62766: CALL 36827 0 4
62770: PUSH
62771: LD_INT 4
62773: ARRAY
62774: ST_TO_ADDR
// end ;
62775: LD_VAR 0 3
62779: RET
// export function PlayerSeeMe ( unit ) ; begin
62780: LD_INT 0
62782: PPUSH
// result := See ( your_side , unit ) ;
62783: LD_ADDR_VAR 0 2
62787: PUSH
62788: LD_OWVAR 2
62792: PPUSH
62793: LD_VAR 0 1
62797: PPUSH
62798: CALL_OW 292
62802: ST_TO_ADDR
// end ;
62803: LD_VAR 0 2
62807: RET
// export function ReverseDir ( unit ) ; begin
62808: LD_INT 0
62810: PPUSH
// if not unit then
62811: LD_VAR 0 1
62815: NOT
62816: IFFALSE 62820
// exit ;
62818: GO 62843
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62820: LD_ADDR_VAR 0 2
62824: PUSH
62825: LD_VAR 0 1
62829: PPUSH
62830: CALL_OW 254
62834: PUSH
62835: LD_INT 3
62837: PLUS
62838: PUSH
62839: LD_INT 6
62841: MOD
62842: ST_TO_ADDR
// end ;
62843: LD_VAR 0 2
62847: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
62854: PPUSH
// if not hexes then
62855: LD_VAR 0 2
62859: NOT
62860: IFFALSE 62864
// exit ;
62862: GO 63012
// dist := 9999 ;
62864: LD_ADDR_VAR 0 5
62868: PUSH
62869: LD_INT 9999
62871: ST_TO_ADDR
// for i = 1 to hexes do
62872: LD_ADDR_VAR 0 4
62876: PUSH
62877: DOUBLE
62878: LD_INT 1
62880: DEC
62881: ST_TO_ADDR
62882: LD_VAR 0 2
62886: PUSH
62887: FOR_TO
62888: IFFALSE 63000
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62890: LD_VAR 0 1
62894: PPUSH
62895: LD_VAR 0 2
62899: PUSH
62900: LD_VAR 0 4
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: PPUSH
62910: LD_VAR 0 2
62914: PUSH
62915: LD_VAR 0 4
62919: ARRAY
62920: PUSH
62921: LD_INT 2
62923: ARRAY
62924: PPUSH
62925: CALL_OW 297
62929: PUSH
62930: LD_VAR 0 5
62934: LESS
62935: IFFALSE 62998
// begin hex := hexes [ i ] ;
62937: LD_ADDR_VAR 0 7
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_VAR 0 4
62951: ARRAY
62952: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62953: LD_ADDR_VAR 0 5
62957: PUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_VAR 0 4
62972: ARRAY
62973: PUSH
62974: LD_INT 1
62976: ARRAY
62977: PPUSH
62978: LD_VAR 0 2
62982: PUSH
62983: LD_VAR 0 4
62987: ARRAY
62988: PUSH
62989: LD_INT 2
62991: ARRAY
62992: PPUSH
62993: CALL_OW 297
62997: ST_TO_ADDR
// end ; end ;
62998: GO 62887
63000: POP
63001: POP
// result := hex ;
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_VAR 0 7
63011: ST_TO_ADDR
// end ;
63012: LD_VAR 0 3
63016: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63017: LD_INT 0
63019: PPUSH
63020: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63021: LD_VAR 0 1
63025: NOT
63026: PUSH
63027: LD_VAR 0 1
63031: PUSH
63032: LD_INT 21
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 23
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PPUSH
63056: CALL_OW 69
63060: IN
63061: NOT
63062: OR
63063: IFFALSE 63067
// exit ;
63065: GO 63114
// for i = 1 to 3 do
63067: LD_ADDR_VAR 0 3
63071: PUSH
63072: DOUBLE
63073: LD_INT 1
63075: DEC
63076: ST_TO_ADDR
63077: LD_INT 3
63079: PUSH
63080: FOR_TO
63081: IFFALSE 63112
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 250
63092: PPUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: CALL_OW 251
63102: PPUSH
63103: LD_INT 1
63105: PPUSH
63106: CALL_OW 453
63110: GO 63080
63112: POP
63113: POP
// end ;
63114: LD_VAR 0 2
63118: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63119: LD_INT 0
63121: PPUSH
63122: PPUSH
63123: PPUSH
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 2
63137: NOT
63138: OR
63139: PUSH
63140: LD_VAR 0 1
63144: PPUSH
63145: CALL_OW 314
63149: OR
63150: IFFALSE 63154
// exit ;
63152: GO 63595
// x := GetX ( enemy_unit ) ;
63154: LD_ADDR_VAR 0 7
63158: PUSH
63159: LD_VAR 0 2
63163: PPUSH
63164: CALL_OW 250
63168: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63169: LD_ADDR_VAR 0 8
63173: PUSH
63174: LD_VAR 0 2
63178: PPUSH
63179: CALL_OW 251
63183: ST_TO_ADDR
// if not x or not y then
63184: LD_VAR 0 7
63188: NOT
63189: PUSH
63190: LD_VAR 0 8
63194: NOT
63195: OR
63196: IFFALSE 63200
// exit ;
63198: GO 63595
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63200: LD_ADDR_VAR 0 6
63204: PUSH
63205: LD_VAR 0 7
63209: PPUSH
63210: LD_INT 0
63212: PPUSH
63213: LD_INT 4
63215: PPUSH
63216: CALL_OW 272
63220: PUSH
63221: LD_VAR 0 8
63225: PPUSH
63226: LD_INT 0
63228: PPUSH
63229: LD_INT 4
63231: PPUSH
63232: CALL_OW 273
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_VAR 0 7
63245: PPUSH
63246: LD_INT 1
63248: PPUSH
63249: LD_INT 4
63251: PPUSH
63252: CALL_OW 272
63256: PUSH
63257: LD_VAR 0 8
63261: PPUSH
63262: LD_INT 1
63264: PPUSH
63265: LD_INT 4
63267: PPUSH
63268: CALL_OW 273
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_VAR 0 7
63281: PPUSH
63282: LD_INT 2
63284: PPUSH
63285: LD_INT 4
63287: PPUSH
63288: CALL_OW 272
63292: PUSH
63293: LD_VAR 0 8
63297: PPUSH
63298: LD_INT 2
63300: PPUSH
63301: LD_INT 4
63303: PPUSH
63304: CALL_OW 273
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_VAR 0 7
63317: PPUSH
63318: LD_INT 3
63320: PPUSH
63321: LD_INT 4
63323: PPUSH
63324: CALL_OW 272
63328: PUSH
63329: LD_VAR 0 8
63333: PPUSH
63334: LD_INT 3
63336: PPUSH
63337: LD_INT 4
63339: PPUSH
63340: CALL_OW 273
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_VAR 0 7
63353: PPUSH
63354: LD_INT 4
63356: PPUSH
63357: LD_INT 4
63359: PPUSH
63360: CALL_OW 272
63364: PUSH
63365: LD_VAR 0 8
63369: PPUSH
63370: LD_INT 4
63372: PPUSH
63373: LD_INT 4
63375: PPUSH
63376: CALL_OW 273
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_VAR 0 7
63389: PPUSH
63390: LD_INT 5
63392: PPUSH
63393: LD_INT 4
63395: PPUSH
63396: CALL_OW 272
63400: PUSH
63401: LD_VAR 0 8
63405: PPUSH
63406: LD_INT 5
63408: PPUSH
63409: LD_INT 4
63411: PPUSH
63412: CALL_OW 273
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// for i = tmp downto 1 do
63429: LD_ADDR_VAR 0 4
63433: PUSH
63434: DOUBLE
63435: LD_VAR 0 6
63439: INC
63440: ST_TO_ADDR
63441: LD_INT 1
63443: PUSH
63444: FOR_DOWNTO
63445: IFFALSE 63546
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63447: LD_VAR 0 6
63451: PUSH
63452: LD_VAR 0 4
63456: ARRAY
63457: PUSH
63458: LD_INT 1
63460: ARRAY
63461: PPUSH
63462: LD_VAR 0 6
63466: PUSH
63467: LD_VAR 0 4
63471: ARRAY
63472: PUSH
63473: LD_INT 2
63475: ARRAY
63476: PPUSH
63477: CALL_OW 488
63481: NOT
63482: PUSH
63483: LD_VAR 0 6
63487: PUSH
63488: LD_VAR 0 4
63492: ARRAY
63493: PUSH
63494: LD_INT 1
63496: ARRAY
63497: PPUSH
63498: LD_VAR 0 6
63502: PUSH
63503: LD_VAR 0 4
63507: ARRAY
63508: PUSH
63509: LD_INT 2
63511: ARRAY
63512: PPUSH
63513: CALL_OW 428
63517: PUSH
63518: LD_INT 0
63520: NONEQUAL
63521: OR
63522: IFFALSE 63544
// tmp := Delete ( tmp , i ) ;
63524: LD_ADDR_VAR 0 6
63528: PUSH
63529: LD_VAR 0 6
63533: PPUSH
63534: LD_VAR 0 4
63538: PPUSH
63539: CALL_OW 3
63543: ST_TO_ADDR
63544: GO 63444
63546: POP
63547: POP
// j := GetClosestHex ( unit , tmp ) ;
63548: LD_ADDR_VAR 0 5
63552: PUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: LD_VAR 0 6
63562: PPUSH
63563: CALL 62848 0 2
63567: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63568: LD_VAR 0 1
63572: PPUSH
63573: LD_VAR 0 5
63577: PUSH
63578: LD_INT 1
63580: ARRAY
63581: PPUSH
63582: LD_VAR 0 5
63586: PUSH
63587: LD_INT 2
63589: ARRAY
63590: PPUSH
63591: CALL_OW 111
// end ;
63595: LD_VAR 0 3
63599: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63600: LD_INT 0
63602: PPUSH
63603: PPUSH
63604: PPUSH
// uc_side = 0 ;
63605: LD_ADDR_OWVAR 20
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
// uc_nation = 0 ;
63613: LD_ADDR_OWVAR 21
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// InitHc ;
63621: CALL_OW 19
// InitVc ;
63625: CALL_OW 20
// if mastodonts then
63629: LD_VAR 0 6
63633: IFFALSE 63700
// for i = 1 to mastodonts do
63635: LD_ADDR_VAR 0 11
63639: PUSH
63640: DOUBLE
63641: LD_INT 1
63643: DEC
63644: ST_TO_ADDR
63645: LD_VAR 0 6
63649: PUSH
63650: FOR_TO
63651: IFFALSE 63698
// begin vc_chassis := 31 ;
63653: LD_ADDR_OWVAR 37
63657: PUSH
63658: LD_INT 31
63660: ST_TO_ADDR
// vc_control := control_rider ;
63661: LD_ADDR_OWVAR 38
63665: PUSH
63666: LD_INT 4
63668: ST_TO_ADDR
// animal := CreateVehicle ;
63669: LD_ADDR_VAR 0 12
63673: PUSH
63674: CALL_OW 45
63678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63679: LD_VAR 0 12
63683: PPUSH
63684: LD_VAR 0 8
63688: PPUSH
63689: LD_INT 0
63691: PPUSH
63692: CALL 65769 0 3
// end ;
63696: GO 63650
63698: POP
63699: POP
// if horses then
63700: LD_VAR 0 5
63704: IFFALSE 63771
// for i = 1 to horses do
63706: LD_ADDR_VAR 0 11
63710: PUSH
63711: DOUBLE
63712: LD_INT 1
63714: DEC
63715: ST_TO_ADDR
63716: LD_VAR 0 5
63720: PUSH
63721: FOR_TO
63722: IFFALSE 63769
// begin hc_class := 21 ;
63724: LD_ADDR_OWVAR 28
63728: PUSH
63729: LD_INT 21
63731: ST_TO_ADDR
// hc_gallery :=  ;
63732: LD_ADDR_OWVAR 33
63736: PUSH
63737: LD_STRING 
63739: ST_TO_ADDR
// animal := CreateHuman ;
63740: LD_ADDR_VAR 0 12
63744: PUSH
63745: CALL_OW 44
63749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63750: LD_VAR 0 12
63754: PPUSH
63755: LD_VAR 0 8
63759: PPUSH
63760: LD_INT 0
63762: PPUSH
63763: CALL 65769 0 3
// end ;
63767: GO 63721
63769: POP
63770: POP
// if birds then
63771: LD_VAR 0 1
63775: IFFALSE 63842
// for i = 1 to birds do
63777: LD_ADDR_VAR 0 11
63781: PUSH
63782: DOUBLE
63783: LD_INT 1
63785: DEC
63786: ST_TO_ADDR
63787: LD_VAR 0 1
63791: PUSH
63792: FOR_TO
63793: IFFALSE 63840
// begin hc_class = 18 ;
63795: LD_ADDR_OWVAR 28
63799: PUSH
63800: LD_INT 18
63802: ST_TO_ADDR
// hc_gallery =  ;
63803: LD_ADDR_OWVAR 33
63807: PUSH
63808: LD_STRING 
63810: ST_TO_ADDR
// animal := CreateHuman ;
63811: LD_ADDR_VAR 0 12
63815: PUSH
63816: CALL_OW 44
63820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63821: LD_VAR 0 12
63825: PPUSH
63826: LD_VAR 0 8
63830: PPUSH
63831: LD_INT 0
63833: PPUSH
63834: CALL 65769 0 3
// end ;
63838: GO 63792
63840: POP
63841: POP
// if tigers then
63842: LD_VAR 0 2
63846: IFFALSE 63930
// for i = 1 to tigers do
63848: LD_ADDR_VAR 0 11
63852: PUSH
63853: DOUBLE
63854: LD_INT 1
63856: DEC
63857: ST_TO_ADDR
63858: LD_VAR 0 2
63862: PUSH
63863: FOR_TO
63864: IFFALSE 63928
// begin hc_class = class_tiger ;
63866: LD_ADDR_OWVAR 28
63870: PUSH
63871: LD_INT 14
63873: ST_TO_ADDR
// hc_gallery =  ;
63874: LD_ADDR_OWVAR 33
63878: PUSH
63879: LD_STRING 
63881: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63882: LD_ADDR_OWVAR 35
63886: PUSH
63887: LD_INT 7
63889: NEG
63890: PPUSH
63891: LD_INT 7
63893: PPUSH
63894: CALL_OW 12
63898: ST_TO_ADDR
// animal := CreateHuman ;
63899: LD_ADDR_VAR 0 12
63903: PUSH
63904: CALL_OW 44
63908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63909: LD_VAR 0 12
63913: PPUSH
63914: LD_VAR 0 8
63918: PPUSH
63919: LD_INT 0
63921: PPUSH
63922: CALL 65769 0 3
// end ;
63926: GO 63863
63928: POP
63929: POP
// if apemans then
63930: LD_VAR 0 3
63934: IFFALSE 64057
// for i = 1 to apemans do
63936: LD_ADDR_VAR 0 11
63940: PUSH
63941: DOUBLE
63942: LD_INT 1
63944: DEC
63945: ST_TO_ADDR
63946: LD_VAR 0 3
63950: PUSH
63951: FOR_TO
63952: IFFALSE 64055
// begin hc_class = class_apeman ;
63954: LD_ADDR_OWVAR 28
63958: PUSH
63959: LD_INT 12
63961: ST_TO_ADDR
// hc_gallery =  ;
63962: LD_ADDR_OWVAR 33
63966: PUSH
63967: LD_STRING 
63969: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63970: LD_ADDR_OWVAR 35
63974: PUSH
63975: LD_INT 5
63977: NEG
63978: PPUSH
63979: LD_INT 5
63981: PPUSH
63982: CALL_OW 12
63986: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63987: LD_ADDR_OWVAR 31
63991: PUSH
63992: LD_INT 1
63994: PPUSH
63995: LD_INT 3
63997: PPUSH
63998: CALL_OW 12
64002: PUSH
64003: LD_INT 1
64005: PPUSH
64006: LD_INT 3
64008: PPUSH
64009: CALL_OW 12
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// animal := CreateHuman ;
64026: LD_ADDR_VAR 0 12
64030: PUSH
64031: CALL_OW 44
64035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64036: LD_VAR 0 12
64040: PPUSH
64041: LD_VAR 0 8
64045: PPUSH
64046: LD_INT 0
64048: PPUSH
64049: CALL 65769 0 3
// end ;
64053: GO 63951
64055: POP
64056: POP
// if enchidnas then
64057: LD_VAR 0 4
64061: IFFALSE 64128
// for i = 1 to enchidnas do
64063: LD_ADDR_VAR 0 11
64067: PUSH
64068: DOUBLE
64069: LD_INT 1
64071: DEC
64072: ST_TO_ADDR
64073: LD_VAR 0 4
64077: PUSH
64078: FOR_TO
64079: IFFALSE 64126
// begin hc_class = 13 ;
64081: LD_ADDR_OWVAR 28
64085: PUSH
64086: LD_INT 13
64088: ST_TO_ADDR
// hc_gallery =  ;
64089: LD_ADDR_OWVAR 33
64093: PUSH
64094: LD_STRING 
64096: ST_TO_ADDR
// animal := CreateHuman ;
64097: LD_ADDR_VAR 0 12
64101: PUSH
64102: CALL_OW 44
64106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64107: LD_VAR 0 12
64111: PPUSH
64112: LD_VAR 0 8
64116: PPUSH
64117: LD_INT 0
64119: PPUSH
64120: CALL 65769 0 3
// end ;
64124: GO 64078
64126: POP
64127: POP
// if fishes then
64128: LD_VAR 0 7
64132: IFFALSE 64199
// for i = 1 to fishes do
64134: LD_ADDR_VAR 0 11
64138: PUSH
64139: DOUBLE
64140: LD_INT 1
64142: DEC
64143: ST_TO_ADDR
64144: LD_VAR 0 7
64148: PUSH
64149: FOR_TO
64150: IFFALSE 64197
// begin hc_class = 20 ;
64152: LD_ADDR_OWVAR 28
64156: PUSH
64157: LD_INT 20
64159: ST_TO_ADDR
// hc_gallery =  ;
64160: LD_ADDR_OWVAR 33
64164: PUSH
64165: LD_STRING 
64167: ST_TO_ADDR
// animal := CreateHuman ;
64168: LD_ADDR_VAR 0 12
64172: PUSH
64173: CALL_OW 44
64177: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64178: LD_VAR 0 12
64182: PPUSH
64183: LD_VAR 0 9
64187: PPUSH
64188: LD_INT 0
64190: PPUSH
64191: CALL 65769 0 3
// end ;
64195: GO 64149
64197: POP
64198: POP
// end ;
64199: LD_VAR 0 10
64203: RET
// export function WantHeal ( sci , unit ) ; begin
64204: LD_INT 0
64206: PPUSH
// if GetTaskList ( sci ) > 0 then
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 437
64216: PUSH
64217: LD_INT 0
64219: GREATER
64220: IFFALSE 64290
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64222: LD_VAR 0 1
64226: PPUSH
64227: CALL_OW 437
64231: PUSH
64232: LD_INT 1
64234: ARRAY
64235: PUSH
64236: LD_INT 1
64238: ARRAY
64239: PUSH
64240: LD_STRING l
64242: EQUAL
64243: PUSH
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 437
64253: PUSH
64254: LD_INT 1
64256: ARRAY
64257: PUSH
64258: LD_INT 4
64260: ARRAY
64261: PUSH
64262: LD_VAR 0 2
64266: EQUAL
64267: AND
64268: IFFALSE 64280
// result := true else
64270: LD_ADDR_VAR 0 3
64274: PUSH
64275: LD_INT 1
64277: ST_TO_ADDR
64278: GO 64288
// result := false ;
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: LD_INT 0
64287: ST_TO_ADDR
// end else
64288: GO 64298
// result := false ;
64290: LD_ADDR_VAR 0 3
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// end ;
64298: LD_VAR 0 3
64302: RET
// export function HealTarget ( sci ) ; begin
64303: LD_INT 0
64305: PPUSH
// if not sci then
64306: LD_VAR 0 1
64310: NOT
64311: IFFALSE 64315
// exit ;
64313: GO 64380
// result := 0 ;
64315: LD_ADDR_VAR 0 2
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// if GetTaskList ( sci ) then
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 437
64332: IFFALSE 64380
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64334: LD_VAR 0 1
64338: PPUSH
64339: CALL_OW 437
64343: PUSH
64344: LD_INT 1
64346: ARRAY
64347: PUSH
64348: LD_INT 1
64350: ARRAY
64351: PUSH
64352: LD_STRING l
64354: EQUAL
64355: IFFALSE 64380
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64357: LD_ADDR_VAR 0 2
64361: PUSH
64362: LD_VAR 0 1
64366: PPUSH
64367: CALL_OW 437
64371: PUSH
64372: LD_INT 1
64374: ARRAY
64375: PUSH
64376: LD_INT 4
64378: ARRAY
64379: ST_TO_ADDR
// end ;
64380: LD_VAR 0 2
64384: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64385: LD_INT 0
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
// if not base_units then
64391: LD_VAR 0 1
64395: NOT
64396: IFFALSE 64400
// exit ;
64398: GO 64487
// result := false ;
64400: LD_ADDR_VAR 0 2
64404: PUSH
64405: LD_INT 0
64407: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64408: LD_ADDR_VAR 0 5
64412: PUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: LD_INT 21
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PPUSH
64428: CALL_OW 72
64432: ST_TO_ADDR
// if not tmp then
64433: LD_VAR 0 5
64437: NOT
64438: IFFALSE 64442
// exit ;
64440: GO 64487
// for i in tmp do
64442: LD_ADDR_VAR 0 3
64446: PUSH
64447: LD_VAR 0 5
64451: PUSH
64452: FOR_IN
64453: IFFALSE 64485
// begin result := EnemyInRange ( i , 22 ) ;
64455: LD_ADDR_VAR 0 2
64459: PUSH
64460: LD_VAR 0 3
64464: PPUSH
64465: LD_INT 22
64467: PPUSH
64468: CALL 62723 0 2
64472: ST_TO_ADDR
// if result then
64473: LD_VAR 0 2
64477: IFFALSE 64483
// exit ;
64479: POP
64480: POP
64481: GO 64487
// end ;
64483: GO 64452
64485: POP
64486: POP
// end ;
64487: LD_VAR 0 2
64491: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64492: LD_INT 0
64494: PPUSH
64495: PPUSH
// if not units then
64496: LD_VAR 0 1
64500: NOT
64501: IFFALSE 64505
// exit ;
64503: GO 64575
// result := [ ] ;
64505: LD_ADDR_VAR 0 3
64509: PUSH
64510: EMPTY
64511: ST_TO_ADDR
// for i in units do
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: FOR_IN
64523: IFFALSE 64573
// if GetTag ( i ) = tag then
64525: LD_VAR 0 4
64529: PPUSH
64530: CALL_OW 110
64534: PUSH
64535: LD_VAR 0 2
64539: EQUAL
64540: IFFALSE 64571
// result := Insert ( result , result + 1 , i ) ;
64542: LD_ADDR_VAR 0 3
64546: PUSH
64547: LD_VAR 0 3
64551: PPUSH
64552: LD_VAR 0 3
64556: PUSH
64557: LD_INT 1
64559: PLUS
64560: PPUSH
64561: LD_VAR 0 4
64565: PPUSH
64566: CALL_OW 2
64570: ST_TO_ADDR
64571: GO 64522
64573: POP
64574: POP
// end ;
64575: LD_VAR 0 3
64579: RET
// export function IsDriver ( un ) ; begin
64580: LD_INT 0
64582: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64583: LD_ADDR_VAR 0 2
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 55
64595: PUSH
64596: EMPTY
64597: LIST
64598: PPUSH
64599: CALL_OW 69
64603: IN
64604: ST_TO_ADDR
// end ;
64605: LD_VAR 0 2
64609: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64610: LD_INT 0
64612: PPUSH
64613: PPUSH
// list := [ ] ;
64614: LD_ADDR_VAR 0 5
64618: PUSH
64619: EMPTY
64620: ST_TO_ADDR
// case d of 0 :
64621: LD_VAR 0 3
64625: PUSH
64626: LD_INT 0
64628: DOUBLE
64629: EQUAL
64630: IFTRUE 64634
64632: GO 64767
64634: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_VAR 0 1
64644: PUSH
64645: LD_INT 4
64647: MINUS
64648: PUSH
64649: LD_VAR 0 2
64653: PUSH
64654: LD_INT 4
64656: MINUS
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: PUSH
64666: LD_VAR 0 1
64670: PUSH
64671: LD_INT 3
64673: MINUS
64674: PUSH
64675: LD_VAR 0 2
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: PUSH
64688: LD_VAR 0 1
64692: PUSH
64693: LD_INT 4
64695: PLUS
64696: PUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_INT 4
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_INT 3
64717: PLUS
64718: PUSH
64719: LD_VAR 0 2
64723: PUSH
64724: LD_INT 3
64726: PLUS
64727: PUSH
64728: LD_INT 5
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: PUSH
64736: LD_VAR 0 1
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_INT 4
64748: PLUS
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// end ; 1 :
64765: GO 65465
64767: LD_INT 1
64769: DOUBLE
64770: EQUAL
64771: IFTRUE 64775
64773: GO 64908
64775: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64776: LD_ADDR_VAR 0 5
64780: PUSH
64781: LD_VAR 0 1
64785: PUSH
64786: LD_VAR 0 2
64790: PUSH
64791: LD_INT 4
64793: MINUS
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 3
64810: MINUS
64811: PUSH
64812: LD_VAR 0 2
64816: PUSH
64817: LD_INT 3
64819: MINUS
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: PUSH
64829: LD_VAR 0 1
64833: PUSH
64834: LD_INT 4
64836: MINUS
64837: PUSH
64838: LD_VAR 0 2
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: PUSH
64851: LD_VAR 0 1
64855: PUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_INT 3
64863: PLUS
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 1
64877: PUSH
64878: LD_INT 4
64880: PLUS
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 4
64889: PLUS
64890: PUSH
64891: LD_INT 5
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// end ; 2 :
64906: GO 65465
64908: LD_INT 2
64910: DOUBLE
64911: EQUAL
64912: IFTRUE 64916
64914: GO 65045
64916: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64917: LD_ADDR_VAR 0 5
64921: PUSH
64922: LD_VAR 0 1
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: LD_INT 3
64934: MINUS
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: PUSH
64944: LD_VAR 0 1
64948: PUSH
64949: LD_INT 4
64951: PLUS
64952: PUSH
64953: LD_VAR 0 2
64957: PUSH
64958: LD_INT 4
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: LD_INT 4
64978: PLUS
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: PUSH
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 3
64995: MINUS
64996: PUSH
64997: LD_VAR 0 2
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: LD_INT 4
65017: MINUS
65018: PUSH
65019: LD_VAR 0 2
65023: PUSH
65024: LD_INT 4
65026: MINUS
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// end ; 3 :
65043: GO 65465
65045: LD_INT 3
65047: DOUBLE
65048: EQUAL
65049: IFTRUE 65053
65051: GO 65186
65053: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65054: LD_ADDR_VAR 0 5
65058: PUSH
65059: LD_VAR 0 1
65063: PUSH
65064: LD_INT 3
65066: PLUS
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 4
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: PUSH
65081: LD_VAR 0 1
65085: PUSH
65086: LD_INT 4
65088: PLUS
65089: PUSH
65090: LD_VAR 0 2
65094: PUSH
65095: LD_INT 4
65097: PLUS
65098: PUSH
65099: LD_INT 5
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_INT 4
65114: MINUS
65115: PUSH
65116: LD_VAR 0 2
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: PUSH
65129: LD_VAR 0 1
65133: PUSH
65134: LD_VAR 0 2
65138: PUSH
65139: LD_INT 4
65141: MINUS
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_VAR 0 1
65155: PUSH
65156: LD_INT 3
65158: MINUS
65159: PUSH
65160: LD_VAR 0 2
65164: PUSH
65165: LD_INT 3
65167: MINUS
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: ST_TO_ADDR
// end ; 4 :
65184: GO 65465
65186: LD_INT 4
65188: DOUBLE
65189: EQUAL
65190: IFTRUE 65194
65192: GO 65327
65194: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65195: LD_ADDR_VAR 0 5
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 4
65212: PLUS
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: PUSH
65222: LD_VAR 0 1
65226: PUSH
65227: LD_INT 3
65229: PLUS
65230: PUSH
65231: LD_VAR 0 2
65235: PUSH
65236: LD_INT 3
65238: PLUS
65239: PUSH
65240: LD_INT 5
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: PUSH
65248: LD_VAR 0 1
65252: PUSH
65253: LD_INT 4
65255: PLUS
65256: PUSH
65257: LD_VAR 0 2
65261: PUSH
65262: LD_INT 4
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: LD_VAR 0 1
65274: PUSH
65275: LD_VAR 0 2
65279: PUSH
65280: LD_INT 3
65282: MINUS
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 1
65296: PUSH
65297: LD_INT 4
65299: MINUS
65300: PUSH
65301: LD_VAR 0 2
65305: PUSH
65306: LD_INT 4
65308: MINUS
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: ST_TO_ADDR
// end ; 5 :
65325: GO 65465
65327: LD_INT 5
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65335
65333: GO 65464
65335: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65336: LD_ADDR_VAR 0 5
65340: PUSH
65341: LD_VAR 0 1
65345: PUSH
65346: LD_INT 4
65348: MINUS
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 4
65375: MINUS
65376: PUSH
65377: LD_INT 3
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_INT 4
65392: PLUS
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_INT 4
65401: PLUS
65402: PUSH
65403: LD_INT 5
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_INT 3
65418: PLUS
65419: PUSH
65420: LD_VAR 0 2
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_VAR 0 2
65442: PUSH
65443: LD_INT 3
65445: PLUS
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: ST_TO_ADDR
// end ; end ;
65462: GO 65465
65464: POP
// result := list ;
65465: LD_ADDR_VAR 0 4
65469: PUSH
65470: LD_VAR 0 5
65474: ST_TO_ADDR
// end ;
65475: LD_VAR 0 4
65479: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65480: LD_INT 0
65482: PPUSH
65483: PPUSH
65484: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65485: LD_VAR 0 1
65489: NOT
65490: PUSH
65491: LD_VAR 0 2
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: LD_INT 4
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: IN
65514: NOT
65515: OR
65516: IFFALSE 65520
// exit ;
65518: GO 65612
// tmp := [ ] ;
65520: LD_ADDR_VAR 0 5
65524: PUSH
65525: EMPTY
65526: ST_TO_ADDR
// for i in units do
65527: LD_ADDR_VAR 0 4
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: FOR_IN
65538: IFFALSE 65581
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65540: LD_ADDR_VAR 0 5
65544: PUSH
65545: LD_VAR 0 5
65549: PPUSH
65550: LD_VAR 0 5
65554: PUSH
65555: LD_INT 1
65557: PLUS
65558: PPUSH
65559: LD_VAR 0 4
65563: PPUSH
65564: LD_VAR 0 2
65568: PPUSH
65569: CALL_OW 259
65573: PPUSH
65574: CALL_OW 2
65578: ST_TO_ADDR
65579: GO 65537
65581: POP
65582: POP
// if not tmp then
65583: LD_VAR 0 5
65587: NOT
65588: IFFALSE 65592
// exit ;
65590: GO 65612
// result := SortListByListDesc ( units , tmp ) ;
65592: LD_ADDR_VAR 0 3
65596: PUSH
65597: LD_VAR 0 1
65601: PPUSH
65602: LD_VAR 0 5
65606: PPUSH
65607: CALL_OW 77
65611: ST_TO_ADDR
// end ;
65612: LD_VAR 0 3
65616: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
65621: PPUSH
// x := GetX ( building ) ;
65622: LD_ADDR_VAR 0 4
65626: PUSH
65627: LD_VAR 0 2
65631: PPUSH
65632: CALL_OW 250
65636: ST_TO_ADDR
// y := GetY ( building ) ;
65637: LD_ADDR_VAR 0 5
65641: PUSH
65642: LD_VAR 0 2
65646: PPUSH
65647: CALL_OW 251
65651: ST_TO_ADDR
// if GetTaskList ( unit ) then
65652: LD_VAR 0 1
65656: PPUSH
65657: CALL_OW 437
65661: IFFALSE 65756
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65663: LD_STRING e
65665: PUSH
65666: LD_VAR 0 1
65670: PPUSH
65671: CALL_OW 437
65675: PUSH
65676: LD_INT 1
65678: ARRAY
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: EQUAL
65684: PUSH
65685: LD_VAR 0 4
65689: PUSH
65690: LD_VAR 0 1
65694: PPUSH
65695: CALL_OW 437
65699: PUSH
65700: LD_INT 1
65702: ARRAY
65703: PUSH
65704: LD_INT 2
65706: ARRAY
65707: EQUAL
65708: AND
65709: PUSH
65710: LD_VAR 0 5
65714: PUSH
65715: LD_VAR 0 1
65719: PPUSH
65720: CALL_OW 437
65724: PUSH
65725: LD_INT 1
65727: ARRAY
65728: PUSH
65729: LD_INT 3
65731: ARRAY
65732: EQUAL
65733: AND
65734: IFFALSE 65746
// result := true else
65736: LD_ADDR_VAR 0 3
65740: PUSH
65741: LD_INT 1
65743: ST_TO_ADDR
65744: GO 65754
// result := false ;
65746: LD_ADDR_VAR 0 3
65750: PUSH
65751: LD_INT 0
65753: ST_TO_ADDR
// end else
65754: GO 65764
// result := false ;
65756: LD_ADDR_VAR 0 3
65760: PUSH
65761: LD_INT 0
65763: ST_TO_ADDR
// end ;
65764: LD_VAR 0 3
65768: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65769: LD_INT 0
65771: PPUSH
65772: PPUSH
65773: PPUSH
65774: PPUSH
// if not unit or not area then
65775: LD_VAR 0 1
65779: NOT
65780: PUSH
65781: LD_VAR 0 2
65785: NOT
65786: OR
65787: IFFALSE 65791
// exit ;
65789: GO 65955
// tmp := AreaToList ( area , i ) ;
65791: LD_ADDR_VAR 0 6
65795: PUSH
65796: LD_VAR 0 2
65800: PPUSH
65801: LD_VAR 0 5
65805: PPUSH
65806: CALL_OW 517
65810: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65811: LD_ADDR_VAR 0 5
65815: PUSH
65816: DOUBLE
65817: LD_INT 1
65819: DEC
65820: ST_TO_ADDR
65821: LD_VAR 0 6
65825: PUSH
65826: LD_INT 1
65828: ARRAY
65829: PUSH
65830: FOR_TO
65831: IFFALSE 65953
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65833: LD_ADDR_VAR 0 7
65837: PUSH
65838: LD_VAR 0 6
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: PUSH
65847: LD_VAR 0 5
65851: ARRAY
65852: PUSH
65853: LD_VAR 0 6
65857: PUSH
65858: LD_INT 2
65860: ARRAY
65861: PUSH
65862: LD_VAR 0 5
65866: ARRAY
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65872: LD_VAR 0 7
65876: PUSH
65877: LD_INT 1
65879: ARRAY
65880: PPUSH
65881: LD_VAR 0 7
65885: PUSH
65886: LD_INT 2
65888: ARRAY
65889: PPUSH
65890: CALL_OW 428
65894: PUSH
65895: LD_INT 0
65897: EQUAL
65898: IFFALSE 65951
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65900: LD_VAR 0 1
65904: PPUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PPUSH
65914: LD_VAR 0 7
65918: PUSH
65919: LD_INT 2
65921: ARRAY
65922: PPUSH
65923: LD_VAR 0 3
65927: PPUSH
65928: CALL_OW 48
// result := IsPlaced ( unit ) ;
65932: LD_ADDR_VAR 0 4
65936: PUSH
65937: LD_VAR 0 1
65941: PPUSH
65942: CALL_OW 305
65946: ST_TO_ADDR
// exit ;
65947: POP
65948: POP
65949: GO 65955
// end ; end ;
65951: GO 65830
65953: POP
65954: POP
// end ;
65955: LD_VAR 0 4
65959: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65960: LD_INT 0
65962: PPUSH
65963: PPUSH
65964: PPUSH
// if not side or side > 8 then
65965: LD_VAR 0 1
65969: NOT
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: LD_INT 8
65978: GREATER
65979: OR
65980: IFFALSE 65984
// exit ;
65982: GO 66171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65984: LD_ADDR_VAR 0 4
65988: PUSH
65989: LD_INT 22
65991: PUSH
65992: LD_VAR 0 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 21
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PPUSH
66015: CALL_OW 69
66019: ST_TO_ADDR
// if not tmp then
66020: LD_VAR 0 4
66024: NOT
66025: IFFALSE 66029
// exit ;
66027: GO 66171
// enable_addtolog := true ;
66029: LD_ADDR_OWVAR 81
66033: PUSH
66034: LD_INT 1
66036: ST_TO_ADDR
// AddToLog ( [ ) ;
66037: LD_STRING [
66039: PPUSH
66040: CALL_OW 561
// for i in tmp do
66044: LD_ADDR_VAR 0 3
66048: PUSH
66049: LD_VAR 0 4
66053: PUSH
66054: FOR_IN
66055: IFFALSE 66162
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66057: LD_STRING [
66059: PUSH
66060: LD_VAR 0 3
66064: PPUSH
66065: CALL_OW 266
66069: STR
66070: PUSH
66071: LD_STRING , 
66073: STR
66074: PUSH
66075: LD_VAR 0 3
66079: PPUSH
66080: CALL_OW 250
66084: STR
66085: PUSH
66086: LD_STRING , 
66088: STR
66089: PUSH
66090: LD_VAR 0 3
66094: PPUSH
66095: CALL_OW 251
66099: STR
66100: PUSH
66101: LD_STRING , 
66103: STR
66104: PUSH
66105: LD_VAR 0 3
66109: PPUSH
66110: CALL_OW 254
66114: STR
66115: PUSH
66116: LD_STRING , 
66118: STR
66119: PUSH
66120: LD_VAR 0 3
66124: PPUSH
66125: LD_INT 1
66127: PPUSH
66128: CALL_OW 268
66132: STR
66133: PUSH
66134: LD_STRING , 
66136: STR
66137: PUSH
66138: LD_VAR 0 3
66142: PPUSH
66143: LD_INT 2
66145: PPUSH
66146: CALL_OW 268
66150: STR
66151: PUSH
66152: LD_STRING ],
66154: STR
66155: PPUSH
66156: CALL_OW 561
// end ;
66160: GO 66054
66162: POP
66163: POP
// AddToLog ( ]; ) ;
66164: LD_STRING ];
66166: PPUSH
66167: CALL_OW 561
// end ;
66171: LD_VAR 0 2
66175: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66176: LD_INT 0
66178: PPUSH
66179: PPUSH
66180: PPUSH
66181: PPUSH
66182: PPUSH
// if not area or not rate or not max then
66183: LD_VAR 0 1
66187: NOT
66188: PUSH
66189: LD_VAR 0 2
66193: NOT
66194: OR
66195: PUSH
66196: LD_VAR 0 4
66200: NOT
66201: OR
66202: IFFALSE 66206
// exit ;
66204: GO 66398
// while 1 do
66206: LD_INT 1
66208: IFFALSE 66398
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66210: LD_ADDR_VAR 0 9
66214: PUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: LD_INT 1
66222: PPUSH
66223: CALL_OW 287
66227: PUSH
66228: LD_INT 10
66230: MUL
66231: ST_TO_ADDR
// r := rate / 10 ;
66232: LD_ADDR_VAR 0 7
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 10
66244: DIVREAL
66245: ST_TO_ADDR
// time := 1 1$00 ;
66246: LD_ADDR_VAR 0 8
66250: PUSH
66251: LD_INT 2100
66253: ST_TO_ADDR
// if amount < min then
66254: LD_VAR 0 9
66258: PUSH
66259: LD_VAR 0 3
66263: LESS
66264: IFFALSE 66282
// r := r * 2 else
66266: LD_ADDR_VAR 0 7
66270: PUSH
66271: LD_VAR 0 7
66275: PUSH
66276: LD_INT 2
66278: MUL
66279: ST_TO_ADDR
66280: GO 66308
// if amount > max then
66282: LD_VAR 0 9
66286: PUSH
66287: LD_VAR 0 4
66291: GREATER
66292: IFFALSE 66308
// r := r / 2 ;
66294: LD_ADDR_VAR 0 7
66298: PUSH
66299: LD_VAR 0 7
66303: PUSH
66304: LD_INT 2
66306: DIVREAL
66307: ST_TO_ADDR
// time := time / r ;
66308: LD_ADDR_VAR 0 8
66312: PUSH
66313: LD_VAR 0 8
66317: PUSH
66318: LD_VAR 0 7
66322: DIVREAL
66323: ST_TO_ADDR
// if time < 0 then
66324: LD_VAR 0 8
66328: PUSH
66329: LD_INT 0
66331: LESS
66332: IFFALSE 66349
// time := time * - 1 ;
66334: LD_ADDR_VAR 0 8
66338: PUSH
66339: LD_VAR 0 8
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: MUL
66348: ST_TO_ADDR
// wait ( time ) ;
66349: LD_VAR 0 8
66353: PPUSH
66354: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66358: LD_INT 35
66360: PPUSH
66361: LD_INT 875
66363: PPUSH
66364: CALL_OW 12
66368: PPUSH
66369: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66373: LD_INT 1
66375: PPUSH
66376: LD_INT 5
66378: PPUSH
66379: CALL_OW 12
66383: PPUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: LD_INT 1
66391: PPUSH
66392: CALL_OW 55
// end ;
66396: GO 66206
// end ;
66398: LD_VAR 0 5
66402: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66403: LD_INT 0
66405: PPUSH
66406: PPUSH
66407: PPUSH
66408: PPUSH
66409: PPUSH
66410: PPUSH
66411: PPUSH
66412: PPUSH
// if not turrets or not factories then
66413: LD_VAR 0 1
66417: NOT
66418: PUSH
66419: LD_VAR 0 2
66423: NOT
66424: OR
66425: IFFALSE 66429
// exit ;
66427: GO 66736
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66429: LD_ADDR_VAR 0 10
66433: PUSH
66434: LD_INT 5
66436: PUSH
66437: LD_INT 6
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: LD_INT 4
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: LD_INT 5
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 24
66471: PUSH
66472: LD_INT 25
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 23
66481: PUSH
66482: LD_INT 27
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 42
66495: PUSH
66496: LD_INT 43
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 44
66505: PUSH
66506: LD_INT 46
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 45
66515: PUSH
66516: LD_INT 47
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: ST_TO_ADDR
// result := [ ] ;
66533: LD_ADDR_VAR 0 3
66537: PUSH
66538: EMPTY
66539: ST_TO_ADDR
// for i in turrets do
66540: LD_ADDR_VAR 0 4
66544: PUSH
66545: LD_VAR 0 1
66549: PUSH
66550: FOR_IN
66551: IFFALSE 66734
// begin nat := GetNation ( i ) ;
66553: LD_ADDR_VAR 0 7
66557: PUSH
66558: LD_VAR 0 4
66562: PPUSH
66563: CALL_OW 248
66567: ST_TO_ADDR
// weapon := 0 ;
66568: LD_ADDR_VAR 0 8
66572: PUSH
66573: LD_INT 0
66575: ST_TO_ADDR
// if not nat then
66576: LD_VAR 0 7
66580: NOT
66581: IFFALSE 66585
// continue ;
66583: GO 66550
// for j in list [ nat ] do
66585: LD_ADDR_VAR 0 5
66589: PUSH
66590: LD_VAR 0 10
66594: PUSH
66595: LD_VAR 0 7
66599: ARRAY
66600: PUSH
66601: FOR_IN
66602: IFFALSE 66643
// if GetBWeapon ( i ) = j [ 1 ] then
66604: LD_VAR 0 4
66608: PPUSH
66609: CALL_OW 269
66613: PUSH
66614: LD_VAR 0 5
66618: PUSH
66619: LD_INT 1
66621: ARRAY
66622: EQUAL
66623: IFFALSE 66641
// begin weapon := j [ 2 ] ;
66625: LD_ADDR_VAR 0 8
66629: PUSH
66630: LD_VAR 0 5
66634: PUSH
66635: LD_INT 2
66637: ARRAY
66638: ST_TO_ADDR
// break ;
66639: GO 66643
// end ;
66641: GO 66601
66643: POP
66644: POP
// if not weapon then
66645: LD_VAR 0 8
66649: NOT
66650: IFFALSE 66654
// continue ;
66652: GO 66550
// for k in factories do
66654: LD_ADDR_VAR 0 6
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: FOR_IN
66665: IFFALSE 66730
// begin weapons := AvailableWeaponList ( k ) ;
66667: LD_ADDR_VAR 0 9
66671: PUSH
66672: LD_VAR 0 6
66676: PPUSH
66677: CALL_OW 478
66681: ST_TO_ADDR
// if not weapons then
66682: LD_VAR 0 9
66686: NOT
66687: IFFALSE 66691
// continue ;
66689: GO 66664
// if weapon in weapons then
66691: LD_VAR 0 8
66695: PUSH
66696: LD_VAR 0 9
66700: IN
66701: IFFALSE 66728
// begin result := [ i , weapon ] ;
66703: LD_ADDR_VAR 0 3
66707: PUSH
66708: LD_VAR 0 4
66712: PUSH
66713: LD_VAR 0 8
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// exit ;
66722: POP
66723: POP
66724: POP
66725: POP
66726: GO 66736
// end ; end ;
66728: GO 66664
66730: POP
66731: POP
// end ;
66732: GO 66550
66734: POP
66735: POP
// end ;
66736: LD_VAR 0 3
66740: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66741: LD_INT 0
66743: PPUSH
// if not side or side > 8 then
66744: LD_VAR 0 3
66748: NOT
66749: PUSH
66750: LD_VAR 0 3
66754: PUSH
66755: LD_INT 8
66757: GREATER
66758: OR
66759: IFFALSE 66763
// exit ;
66761: GO 66822
// if not range then
66763: LD_VAR 0 4
66767: NOT
66768: IFFALSE 66779
// range := - 12 ;
66770: LD_ADDR_VAR 0 4
66774: PUSH
66775: LD_INT 12
66777: NEG
66778: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 2
66788: PPUSH
66789: LD_VAR 0 3
66793: PPUSH
66794: LD_VAR 0 4
66798: PPUSH
66799: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66803: LD_VAR 0 1
66807: PPUSH
66808: LD_VAR 0 2
66812: PPUSH
66813: LD_VAR 0 3
66817: PPUSH
66818: CALL_OW 331
// end ;
66822: LD_VAR 0 5
66826: RET
// export function Video ( mode ) ; begin
66827: LD_INT 0
66829: PPUSH
// ingame_video = mode ;
66830: LD_ADDR_OWVAR 52
66834: PUSH
66835: LD_VAR 0 1
66839: ST_TO_ADDR
// interface_hidden = mode ;
66840: LD_ADDR_OWVAR 54
66844: PUSH
66845: LD_VAR 0 1
66849: ST_TO_ADDR
// end ;
66850: LD_VAR 0 2
66854: RET
// export function Join ( array , element ) ; begin
66855: LD_INT 0
66857: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66858: LD_ADDR_VAR 0 3
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: LD_VAR 0 1
66872: PUSH
66873: LD_INT 1
66875: PLUS
66876: PPUSH
66877: LD_VAR 0 2
66881: PPUSH
66882: CALL_OW 1
66886: ST_TO_ADDR
// end ;
66887: LD_VAR 0 3
66891: RET
// export function JoinUnion ( array , element ) ; begin
66892: LD_INT 0
66894: PPUSH
// result := array union element ;
66895: LD_ADDR_VAR 0 3
66899: PUSH
66900: LD_VAR 0 1
66904: PUSH
66905: LD_VAR 0 2
66909: UNION
66910: ST_TO_ADDR
// end ;
66911: LD_VAR 0 3
66915: RET
// export function GetBehemoths ( side ) ; begin
66916: LD_INT 0
66918: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66919: LD_ADDR_VAR 0 2
66923: PUSH
66924: LD_INT 22
66926: PUSH
66927: LD_VAR 0 1
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 31
66938: PUSH
66939: LD_INT 25
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PPUSH
66950: CALL_OW 69
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 2
66959: RET
// export function Shuffle ( array ) ; var i , index ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
// result := [ ] ;
66965: LD_ADDR_VAR 0 2
66969: PUSH
66970: EMPTY
66971: ST_TO_ADDR
// if not array then
66972: LD_VAR 0 1
66976: NOT
66977: IFFALSE 66981
// exit ;
66979: GO 67080
// Randomize ;
66981: CALL_OW 10
// for i = array downto 1 do
66985: LD_ADDR_VAR 0 3
66989: PUSH
66990: DOUBLE
66991: LD_VAR 0 1
66995: INC
66996: ST_TO_ADDR
66997: LD_INT 1
66999: PUSH
67000: FOR_DOWNTO
67001: IFFALSE 67078
// begin index := rand ( 1 , array ) ;
67003: LD_ADDR_VAR 0 4
67007: PUSH
67008: LD_INT 1
67010: PPUSH
67011: LD_VAR 0 1
67015: PPUSH
67016: CALL_OW 12
67020: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67021: LD_ADDR_VAR 0 2
67025: PUSH
67026: LD_VAR 0 2
67030: PPUSH
67031: LD_VAR 0 2
67035: PUSH
67036: LD_INT 1
67038: PLUS
67039: PPUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_VAR 0 4
67049: ARRAY
67050: PPUSH
67051: CALL_OW 2
67055: ST_TO_ADDR
// array := Delete ( array , index ) ;
67056: LD_ADDR_VAR 0 1
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: LD_VAR 0 4
67070: PPUSH
67071: CALL_OW 3
67075: ST_TO_ADDR
// end ;
67076: GO 67000
67078: POP
67079: POP
// end ;
67080: LD_VAR 0 2
67084: RET
// export function GetBaseMaterials ( base ) ; begin
67085: LD_INT 0
67087: PPUSH
// result := [ 0 , 0 , 0 ] ;
67088: LD_ADDR_VAR 0 2
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// if not base then
67107: LD_VAR 0 1
67111: NOT
67112: IFFALSE 67116
// exit ;
67114: GO 67165
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67116: LD_ADDR_VAR 0 2
67120: PUSH
67121: LD_VAR 0 1
67125: PPUSH
67126: LD_INT 1
67128: PPUSH
67129: CALL_OW 275
67133: PUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: LD_INT 2
67141: PPUSH
67142: CALL_OW 275
67146: PUSH
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_INT 3
67154: PPUSH
67155: CALL_OW 275
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// end ;
67165: LD_VAR 0 2
67169: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67170: LD_INT 0
67172: PPUSH
67173: PPUSH
// result := array ;
67174: LD_ADDR_VAR 0 3
67178: PUSH
67179: LD_VAR 0 1
67183: ST_TO_ADDR
// if size > 0 then
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 0
67191: GREATER
67192: IFFALSE 67238
// for i := array downto size do
67194: LD_ADDR_VAR 0 4
67198: PUSH
67199: DOUBLE
67200: LD_VAR 0 1
67204: INC
67205: ST_TO_ADDR
67206: LD_VAR 0 2
67210: PUSH
67211: FOR_DOWNTO
67212: IFFALSE 67236
// result := Delete ( result , result ) ;
67214: LD_ADDR_VAR 0 3
67218: PUSH
67219: LD_VAR 0 3
67223: PPUSH
67224: LD_VAR 0 3
67228: PPUSH
67229: CALL_OW 3
67233: ST_TO_ADDR
67234: GO 67211
67236: POP
67237: POP
// end ;
67238: LD_VAR 0 3
67242: RET
// export function ComExit ( unit ) ; var tmp ; begin
67243: LD_INT 0
67245: PPUSH
67246: PPUSH
// if not IsInUnit ( unit ) then
67247: LD_VAR 0 1
67251: PPUSH
67252: CALL_OW 310
67256: NOT
67257: IFFALSE 67261
// exit ;
67259: GO 67321
// tmp := IsInUnit ( unit ) ;
67261: LD_ADDR_VAR 0 3
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 310
67275: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67276: LD_VAR 0 3
67280: PPUSH
67281: CALL_OW 247
67285: PUSH
67286: LD_INT 2
67288: EQUAL
67289: IFFALSE 67302
// ComExitVehicle ( unit ) else
67291: LD_VAR 0 1
67295: PPUSH
67296: CALL_OW 121
67300: GO 67311
// ComExitBuilding ( unit ) ;
67302: LD_VAR 0 1
67306: PPUSH
67307: CALL_OW 122
// result := tmp ;
67311: LD_ADDR_VAR 0 2
67315: PUSH
67316: LD_VAR 0 3
67320: ST_TO_ADDR
// end ;
67321: LD_VAR 0 2
67325: RET
// export function ResetHc ; begin
67326: LD_INT 0
67328: PPUSH
// InitHc ;
67329: CALL_OW 19
// hc_importance := 0 ;
67333: LD_ADDR_OWVAR 32
67337: PUSH
67338: LD_INT 0
67340: ST_TO_ADDR
// end ;
67341: LD_VAR 0 1
67345: RET
