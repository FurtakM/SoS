// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 3961 0 0
// PrepareRussian ;
  12: CALL 330 0 0
// PrepareAmerican ;
  16: CALL 2513 0 0
// gameStart := true ;
  20: LD_ADDR_EXP 7
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := true ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// if debug then
  40: LD_EXP 1
  44: IFFALSE 54
// Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_STRING 02_
  61: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_STRING 03_
  69: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 02_belkovSaved
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_STRING 02_Selfish
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
 102: LD_ADDR_EXP 15
 106: PUSH
 107: LD_STRING 02_DickensKilled
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// hasProblem := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// gameStart := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// arabAttackActive := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// allianceAttacked := false ;
 142: LD_ADDR_EXP 9
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 150: LD_ADDR_EXP 17
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// foundOil := false ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// hasScholtze := false ;
 166: LD_ADDR_EXP 11
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// hasKagan := false ;
 174: LD_ADDR_EXP 12
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 190: LD_ADDR_EXP 22
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasOilTower := false ;
 198: LD_ADDR_EXP 14
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// hasFactory := false ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// canSearchForScholtze := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// retreat := false ;
 222: LD_ADDR_EXP 18
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// kurinWaitForVehiclesTime := 0 0$20 ;
 230: LD_ADDR_EXP 20
 234: PUSH
 235: LD_INT 700
 237: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 238: LD_ADDR_EXP 21
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 3
 248: PUSH
 249: LD_INT 4
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: PUSH
 261: LD_OWVAR 67
 265: ARRAY
 266: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 267: LD_ADDR_EXP 23
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 275: LD_ADDR_EXP 24
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 283: LD_ADDR_EXP 25
 287: PUSH
 288: LD_INT 4
 290: PUSH
 291: LD_INT 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 6
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: PUSH
 306: LD_OWVAR 67
 310: ARRAY
 311: ST_TO_ADDR
// if debug then
 312: LD_EXP 1
 316: IFFALSE 325
// FogOff ( 3 ) ;
 318: LD_INT 3
 320: PPUSH
 321: CALL_OW 344
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 330: LD_INT 0
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
 336: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 337: LD_EXP 42
 341: PPUSH
 342: CALL_OW 274
 346: PPUSH
 347: LD_INT 1
 349: PPUSH
 350: LD_INT 3000
 352: PPUSH
 353: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 357: LD_EXP 42
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 600
 372: PPUSH
 373: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 377: LD_EXP 43
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 350
 392: PUSH
 393: LD_INT 280
 395: PUSH
 396: LD_INT 210
 398: PUSH
 399: LD_INT 150
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: PUSH
 408: LD_OWVAR 67
 412: ARRAY
 413: PPUSH
 414: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 418: LD_EXP 43
 422: PPUSH
 423: CALL_OW 274
 427: PPUSH
 428: LD_INT 2
 430: PPUSH
 431: LD_INT 60
 433: PUSH
 434: LD_INT 40
 436: PUSH
 437: LD_INT 20
 439: PUSH
 440: LD_INT 0
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: CALL_OW 277
// uc_side := 3 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// uc_nation := 3 ;
 467: LD_ADDR_OWVAR 21
 471: PUSH
 472: LD_INT 3
 474: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 475: LD_ADDR_EXP 26
 479: PUSH
 480: LD_STRING Burlak
 482: PPUSH
 483: LD_EXP 1
 487: NOT
 488: PPUSH
 489: LD_EXP 2
 493: PPUSH
 494: CALL 15586 0 3
 498: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 499: LD_ADDR_EXP 36
 503: PUSH
 504: EMPTY
 505: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 506: LD_ADDR_EXP 35
 510: PUSH
 511: EMPTY
 512: ST_TO_ADDR
// popovTeam := [ ] ;
 513: LD_ADDR_EXP 41
 517: PUSH
 518: EMPTY
 519: ST_TO_ADDR
// grishkoTeam := [ ] ;
 520: LD_ADDR_EXP 37
 524: PUSH
 525: EMPTY
 526: ST_TO_ADDR
// uc_side := 5 ;
 527: LD_ADDR_OWVAR 20
 531: PUSH
 532: LD_INT 5
 534: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 535: LD_ADDR_EXP 33
 539: PUSH
 540: LD_STRING Scholtze
 542: PPUSH
 543: CALL_OW 25
 547: ST_TO_ADDR
// uc_side := 6 ;
 548: LD_ADDR_OWVAR 20
 552: PUSH
 553: LD_INT 6
 555: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 556: LD_ADDR_EXP 27
 560: PUSH
 561: LD_STRING Gnyevko
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 15586 0 3
 579: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 580: LD_ADDR_EXP 29
 584: PUSH
 585: LD_STRING Kirilenkova
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 15586 0 3
 603: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 604: LD_ADDR_EXP 31
 608: PUSH
 609: LD_STRING Kovalyuk
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 15586 0 3
 627: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 628: LD_ADDR_EXP 28
 632: PUSH
 633: LD_STRING Belkov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 15586 0 3
 651: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 652: LD_ADDR_EXP 30
 656: PUSH
 657: LD_STRING Kurin
 659: PPUSH
 660: CALL_OW 25
 664: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 665: LD_ADDR_EXP 32
 669: PUSH
 670: LD_STRING Popov
 672: PPUSH
 673: CALL_OW 25
 677: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 678: LD_ADDR_EXP 34
 682: PUSH
 683: LD_STRING Grishko
 685: PPUSH
 686: CALL_OW 25
 690: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 691: LD_ADDR_EXP 38
 695: PUSH
 696: LD_EXP 2
 700: PUSH
 701: LD_STRING burlakTeam
 703: STR
 704: PPUSH
 705: CALL_OW 31
 709: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 710: LD_ADDR_EXP 39
 714: PUSH
 715: LD_EXP 2
 719: PUSH
 720: LD_STRING kirovTeam
 722: STR
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// if kirovTeam < 15 then
 729: LD_EXP 39
 733: PUSH
 734: LD_INT 15
 736: LESS
 737: IFFALSE 809
// for i := Count ( kirovTeam ) to 15 do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_EXP 39
 749: PPUSH
 750: CALL 17772 0 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_INT 15
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 762: LD_INT 0
 764: PPUSH
 765: LD_VAR 0 2
 769: PUSH
 770: LD_INT 4
 772: MOD
 773: PUSH
 774: LD_INT 1
 776: PLUS
 777: PPUSH
 778: LD_INT 2
 780: PPUSH
 781: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 785: LD_ADDR_EXP 39
 789: PUSH
 790: LD_EXP 39
 794: PPUSH
 795: CALL_OW 44
 799: PPUSH
 800: CALL 53522 0 2
 804: ST_TO_ADDR
// end ;
 805: GO 759
 807: POP
 808: POP
// for i in kirovTeam union burlakTeam do
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: LD_EXP 39
 818: PUSH
 819: LD_EXP 38
 823: UNION
 824: PUSH
 825: FOR_IN
 826: IFFALSE 1071
// begin case GetClass ( i ) of class_soldier , class_engineer :
 828: LD_VAR 0 2
 832: PPUSH
 833: CALL_OW 257
 837: PUSH
 838: LD_INT 1
 840: DOUBLE
 841: EQUAL
 842: IFTRUE 852
 844: LD_INT 2
 846: DOUBLE
 847: EQUAL
 848: IFTRUE 852
 850: GO 903
 852: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 853: LD_ADDR_VAR 0 5
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 62
 873: PUSH
 874: EMPTY
 875: LIST
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 4
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: ST_TO_ADDR
 901: GO 1022
 903: LD_INT 4
 905: DOUBLE
 906: EQUAL
 907: IFTRUE 911
 909: GO 962
 911: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_INT 22
 919: PUSH
 920: LD_INT 6
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: LD_INT 62
 932: PUSH
 933: EMPTY
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: LD_INT 30
 942: PUSH
 943: LD_INT 6
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: ST_TO_ADDR
 960: GO 1022
 962: LD_INT 3
 964: DOUBLE
 965: EQUAL
 966: IFTRUE 970
 968: GO 1021
 970: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
 971: LD_ADDR_VAR 0 5
 975: PUSH
 976: LD_INT 22
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 3
 988: PUSH
 989: LD_INT 62
 991: PUSH
 992: EMPTY
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 30
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PPUSH
1014: CALL_OW 69
1018: ST_TO_ADDR
1019: GO 1022
1021: POP
// if tmp then
1022: LD_VAR 0 5
1026: IFFALSE 1048
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1028: LD_VAR 0 2
1032: PPUSH
1033: LD_VAR 0 5
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: CALL_OW 52
1046: GO 1069
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1048: LD_VAR 0 2
1052: PPUSH
1053: LD_INT 158
1055: PPUSH
1056: LD_INT 106
1058: PPUSH
1059: LD_INT 3
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 50
// end ;
1069: GO 825
1071: POP
1072: POP
// for i := 1 to 2 do
1073: LD_ADDR_VAR 0 2
1077: PUSH
1078: DOUBLE
1079: LD_INT 1
1081: DEC
1082: ST_TO_ADDR
1083: LD_INT 2
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1121
// begin PrepareSoldier ( sex_male , 2 ) ;
1089: LD_INT 1
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 37
1108: PPUSH
1109: CALL_OW 44
1113: PPUSH
1114: CALL 53522 0 2
1118: ST_TO_ADDR
// end ;
1119: GO 1086
1121: POP
1122: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_EXP 37
1132: PPUSH
1133: LD_EXP 34
1137: PPUSH
1138: CALL 53522 0 2
1142: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: LD_STRING 02_VehiclesCount
1150: PPUSH
1151: LD_INT 2
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// if vehiclesAmount > 4 then
1159: LD_VAR 0 3
1163: PUSH
1164: LD_INT 4
1166: GREATER
1167: IFFALSE 1177
// vehiclesAmount := 4 ;
1169: LD_ADDR_VAR 0 3
1173: PUSH
1174: LD_INT 4
1176: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1177: LD_OWVAR 67
1181: PUSH
1182: LD_INT 2
1184: GREATER
1185: PUSH
1186: LD_VAR 0 3
1190: PUSH
1191: LD_INT 2
1193: GREATER
1194: AND
1195: IFFALSE 1205
// vehiclesAmount := 2 ;
1197: LD_ADDR_VAR 0 3
1201: PUSH
1202: LD_INT 2
1204: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: DOUBLE
1211: LD_INT 1
1213: DEC
1214: ST_TO_ADDR
1215: LD_VAR 0 3
1219: PUSH
1220: FOR_TO
1221: IFFALSE 1303
// begin uc_side := 3 ;
1223: LD_ADDR_OWVAR 20
1227: PUSH
1228: LD_INT 3
1230: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1231: LD_INT 21
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 42
1242: PPUSH
1243: LD_INT 80
1245: PPUSH
1246: CALL 20510 0 5
// veh := CreateVehicle ;
1250: LD_ADDR_VAR 0 4
1254: PUSH
1255: CALL_OW 45
1259: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 5
1270: PPUSH
1271: CALL_OW 12
1275: PPUSH
1276: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1280: LD_VAR 0 4
1284: PPUSH
1285: LD_INT 112
1287: PPUSH
1288: LD_INT 98
1290: PPUSH
1291: LD_INT 12
1293: PPUSH
1294: LD_INT 0
1296: PPUSH
1297: CALL_OW 50
// end ;
1301: GO 1220
1303: POP
1304: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1305: LD_ADDR_VAR 0 3
1309: PUSH
1310: LD_STRING 02_KirovVehiclesCount
1312: PPUSH
1313: LD_INT 1
1315: PPUSH
1316: CALL_OW 30
1320: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1321: LD_ADDR_VAR 0 2
1325: PUSH
1326: DOUBLE
1327: LD_INT 1
1329: DEC
1330: ST_TO_ADDR
1331: LD_VAR 0 3
1335: PUSH
1336: FOR_TO
1337: IFFALSE 1419
// begin uc_side := 6 ;
1339: LD_ADDR_OWVAR 20
1343: PUSH
1344: LD_INT 6
1346: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1347: LD_INT 21
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 42
1358: PPUSH
1359: LD_INT 80
1361: PPUSH
1362: CALL 20510 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 4
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1376: LD_VAR 0 4
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: LD_INT 5
1386: PPUSH
1387: CALL_OW 12
1391: PPUSH
1392: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1396: LD_VAR 0 4
1400: PPUSH
1401: LD_INT 157
1403: PPUSH
1404: LD_INT 106
1406: PPUSH
1407: LD_INT 12
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 50
// end ;
1417: GO 1336
1419: POP
1420: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1421: LD_ADDR_EXP 45
1425: PUSH
1426: LD_EXP 26
1430: PUSH
1431: LD_EXP 31
1435: PUSH
1436: LD_EXP 27
1440: PUSH
1441: LD_EXP 28
1445: PUSH
1446: LD_EXP 33
1450: PUSH
1451: LD_EXP 29
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1464: LD_ADDR_EXP 46
1468: PUSH
1469: LD_INT 22
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 21
1481: PUSH
1482: LD_INT 2
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PPUSH
1493: CALL_OW 69
1497: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1498: LD_ADDR_EXP 47
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1505: LD_ADDR_EXP 48
1509: PUSH
1510: LD_INT 6
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 1
1518: PPUSH
1519: CALL 15733 0 3
1523: ST_TO_ADDR
// kirovConstructList := [ ] ;
1524: LD_ADDR_EXP 50
1528: PUSH
1529: EMPTY
1530: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] ] ;
1531: LD_ADDR_EXP 49
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 159
1541: PUSH
1542: LD_INT 113
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 7
1556: PUSH
1557: LD_INT 153
1559: PUSH
1560: LD_INT 99
1562: PUSH
1563: LD_INT 3
1565: PUSH
1566: LD_INT 10
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 32
1578: PUSH
1579: LD_INT 144
1581: PUSH
1582: LD_INT 98
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 26
1596: PUSH
1597: LD_INT 155
1599: PUSH
1600: LD_INT 94
1602: PUSH
1603: LD_INT 0
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 26
1614: PUSH
1615: LD_INT 158
1617: PUSH
1618: LD_INT 96
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 17
1632: PUSH
1633: LD_INT 162
1635: PUSH
1636: LD_INT 116
1638: PUSH
1639: LD_INT 5
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: PUSH
1648: LD_INT 32
1650: PUSH
1651: LD_INT 169
1653: PUSH
1654: LD_INT 101
1656: PUSH
1657: LD_INT 3
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 32
1668: PUSH
1669: LD_INT 171
1671: PUSH
1672: LD_INT 119
1674: PUSH
1675: LD_INT 5
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 32
1686: PUSH
1687: LD_INT 144
1689: PUSH
1690: LD_INT 106
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// end ;
1713: LD_VAR 0 1
1717: RET
// every 0 0$1 trigger gameStart do
1718: LD_EXP 7
1722: IFFALSE 1802
1724: GO 1726
1726: DISABLE
// begin enable ;
1727: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1728: LD_INT 6
1730: PPUSH
1731: LD_INT 10
1733: PPUSH
1734: LD_INT 13
1736: PPUSH
1737: LD_INT 12
1739: PPUSH
1740: LD_INT 11
1742: PPUSH
1743: LD_EXP 35
1747: PPUSH
1748: LD_EXP 46
1752: PPUSH
1753: LD_EXP 48
1757: PPUSH
1758: LD_EXP 50
1762: PPUSH
1763: LD_EXP 49
1767: PPUSH
1768: LD_INT 153
1770: PUSH
1771: LD_INT 103
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: LD_INT 144
1780: PUSH
1781: LD_INT 102
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PPUSH
1788: LD_INT 122
1790: PUSH
1791: LD_INT 49
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PPUSH
1798: CALL 4697 0 13
// end ;
1802: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
1803: LD_EXP 7
1807: IFFALSE 2038
1809: GO 1811
1811: DISABLE
1812: LD_INT 0
1814: PPUSH
// begin for i in grishkoTeam do
1815: LD_ADDR_VAR 0 1
1819: PUSH
1820: LD_EXP 37
1824: PUSH
1825: FOR_IN
1826: IFFALSE 1939
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
1828: LD_VAR 0 1
1832: PPUSH
1833: LD_INT 15
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
1843: LD_VAR 0 1
1847: PPUSH
1848: LD_INT 142
1850: PPUSH
1851: LD_INT 135
1853: PPUSH
1854: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
1858: LD_VAR 0 1
1862: PPUSH
1863: LD_INT 420
1865: PUSH
1866: LD_VAR 0 1
1870: PUSH
1871: LD_INT 70
1873: MUL
1874: MINUS
1875: PPUSH
1876: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
1880: LD_VAR 0 1
1884: PPUSH
1885: LD_INT 176
1887: PPUSH
1888: LD_INT 131
1890: PPUSH
1891: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
1895: LD_VAR 0 1
1899: PPUSH
1900: LD_INT 210
1902: PPUSH
1903: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: LD_INT 199
1914: PPUSH
1915: LD_INT 105
1917: PPUSH
1918: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
1922: LD_INT 35
1924: PPUSH
1925: LD_INT 105
1927: PPUSH
1928: CALL_OW 12
1932: PPUSH
1933: CALL_OW 67
// end ;
1937: GO 1825
1939: POP
1940: POP
// repeat wait ( 0 0$1 ) ;
1941: LD_INT 35
1943: PPUSH
1944: CALL_OW 67
// for i in grishkoTeam do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_EXP 37
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2018
// if IsAt ( i , 199 , 105 ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: LD_INT 199
1968: PPUSH
1969: LD_INT 105
1971: PPUSH
1972: CALL_OW 307
1976: IFFALSE 1989
// RemoveUnit ( i ) else
1978: LD_VAR 0 1
1982: PPUSH
1983: CALL_OW 64
1987: GO 2016
// if not HasTask ( i ) then
1989: LD_VAR 0 1
1993: PPUSH
1994: CALL_OW 314
1998: NOT
1999: IFFALSE 2016
// ComMoveXY ( i , 199 , 105 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 199
2008: PPUSH
2009: LD_INT 105
2011: PPUSH
2012: CALL_OW 111
2016: GO 1958
2018: POP
2019: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2020: LD_EXP 37
2024: PPUSH
2025: LD_INT 50
2027: PUSH
2028: EMPTY
2029: LIST
2030: PPUSH
2031: CALL_OW 72
2035: NOT
2036: IFFALSE 1941
// end ;
2038: PPOPN 1
2040: END
// export function SendCargoWithOil ; var i , tmp , un , veh ; begin
2041: LD_INT 0
2043: PPUSH
2044: PPUSH
2045: PPUSH
2046: PPUSH
2047: PPUSH
// ruCargos := [ ] ;
2048: LD_ADDR_EXP 51
2052: PUSH
2053: EMPTY
2054: ST_TO_ADDR
// ruGuards := [ ] ;
2055: LD_ADDR_EXP 52
2059: PUSH
2060: EMPTY
2061: ST_TO_ADDR
// for i := 1 to 3 do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: DOUBLE
2068: LD_INT 1
2070: DEC
2071: ST_TO_ADDR
2072: LD_INT 3
2074: PUSH
2075: FOR_TO
2076: IFFALSE 2092
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2078: LD_VAR 0 2
2082: PPUSH
2083: LD_INT 17
2085: PPUSH
2086: CALL_OW 286
2090: GO 2075
2092: POP
2093: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: LD_INT 92
2101: PUSH
2102: LD_INT 207
2104: PUSH
2105: LD_INT 162
2107: PUSH
2108: LD_INT 6
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL_OW 69
2121: ST_TO_ADDR
// if tmp then
2122: LD_VAR 0 3
2126: IFFALSE 2205
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2128: LD_VAR 0 3
2132: PPUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 72
2147: IFFALSE 2190
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2149: LD_ADDR_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: PPUSH
2159: LD_INT 21
2161: PUSH
2162: LD_INT 3
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 72
2173: PUSH
2174: FOR_IN
2175: IFFALSE 2188
// RemoveUnit ( i ) ;
2177: LD_VAR 0 2
2181: PPUSH
2182: CALL_OW 64
2186: GO 2174
2188: POP
2189: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2190: LD_VAR 0 3
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: LD_INT 147
2200: PPUSH
2201: CALL_OW 111
// end ; tmp := [ ] ;
2205: LD_ADDR_VAR 0 3
2209: PUSH
2210: EMPTY
2211: ST_TO_ADDR
// for i := 1 to 3 do
2212: LD_ADDR_VAR 0 2
2216: PUSH
2217: DOUBLE
2218: LD_INT 1
2220: DEC
2221: ST_TO_ADDR
2222: LD_INT 3
2224: PUSH
2225: FOR_TO
2226: IFFALSE 2418
// begin uc_side := 6 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 6
2235: ST_TO_ADDR
// uc_nation := nation_russian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2244: LD_INT 21
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: LD_INT 51
2255: PPUSH
2256: LD_INT 90
2258: PPUSH
2259: CALL 20510 0 5
// veh := CreateVehicle ;
2263: LD_ADDR_VAR 0 5
2267: PUSH
2268: CALL_OW 45
2272: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2273: LD_ADDR_EXP 51
2277: PUSH
2278: LD_EXP 51
2282: PPUSH
2283: LD_VAR 0 5
2287: PPUSH
2288: CALL 53522 0 2
2292: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2293: LD_VAR 0 5
2297: PPUSH
2298: LD_INT 2
2300: PPUSH
2301: LD_INT 100
2303: PPUSH
2304: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2315: LD_VAR 0 5
2319: PPUSH
2320: LD_INT 14
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 49
2330: IFFALSE 2308
// PrepareSoldier ( false , 2 ) ;
2332: LD_INT 0
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 381
// un := CreateHuman ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: CALL_OW 44
2351: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2352: LD_ADDR_EXP 52
2356: PUSH
2357: LD_EXP 52
2361: PPUSH
2362: LD_VAR 0 4
2366: PPUSH
2367: CALL 53522 0 2
2371: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2372: LD_VAR 0 4
2376: PPUSH
2377: LD_VAR 0 5
2381: PPUSH
2382: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2386: LD_VAR 0 5
2390: PPUSH
2391: LD_INT 105
2393: PPUSH
2394: LD_INT 47
2396: PPUSH
2397: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_INT 71
2408: PPUSH
2409: LD_INT 29
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2225
2418: POP
2419: POP
// repeat wait ( 0 0$3 ) ;
2420: LD_INT 105
2422: PPUSH
2423: CALL_OW 67
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 6 ] ) >= 2 ;
2427: LD_EXP 51
2431: PPUSH
2432: LD_INT 92
2434: PUSH
2435: LD_INT 71
2437: PUSH
2438: LD_INT 29
2440: PUSH
2441: LD_INT 6
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL_OW 72
2454: PUSH
2455: LD_INT 2
2457: GREATEREQUAL
2458: IFFALSE 2420
// for i in ruGuards do
2460: LD_ADDR_VAR 0 2
2464: PUSH
2465: LD_EXP 52
2469: PUSH
2470: FOR_IN
2471: IFFALSE 2506
// begin ComExitVehicle ( i ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 121
// wait ( 0 0$1 ) ;
2482: LD_INT 35
2484: PPUSH
2485: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_INT 63
2496: PPUSH
2497: LD_INT 47
2499: PPUSH
2500: CALL_OW 114
// end ;
2504: GO 2470
2506: POP
2507: POP
// end ; end_of_file
2508: LD_VAR 0 1
2512: RET
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
2518: PPUSH
// uc_side := omicronSide ;
2519: LD_ADDR_OWVAR 20
2523: PUSH
2524: LD_INT 1
2526: ST_TO_ADDR
// uc_nation := nation_american ;
2527: LD_ADDR_OWVAR 21
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
2535: LD_ADDR_EXP 55
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// omicronTroops := [ ] ;
2542: LD_ADDR_EXP 54
2546: PUSH
2547: EMPTY
2548: ST_TO_ADDR
// omicronVehicles := [ ] ;
2549: LD_ADDR_EXP 56
2553: PUSH
2554: EMPTY
2555: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
2556: LD_ADDR_EXP 57
2560: PUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 1
2569: PPUSH
2570: CALL 15733 0 3
2574: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
2575: LD_ADDR_EXP 59
2579: PUSH
2580: EMPTY
2581: ST_TO_ADDR
// omicronConstructList := [ ] ;
2582: LD_ADDR_EXP 58
2586: PUSH
2587: EMPTY
2588: ST_TO_ADDR
// SetBName ( usDep , omikron ) ;
2589: LD_INT 290
2591: PPUSH
2592: LD_STRING omikron
2594: PPUSH
2595: CALL_OW 500
// limit := [ 8 , 9 , 9 , 10 ] [ Difficulty ] ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_INT 8
2606: PUSH
2607: LD_INT 9
2609: PUSH
2610: LD_INT 9
2612: PUSH
2613: LD_INT 10
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
2628: LD_ADDR_EXP 53
2632: PUSH
2633: LD_STRING Sikorski
2635: PPUSH
2636: CALL_OW 25
2640: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
2641: LD_EXP 53
2645: PPUSH
2646: LD_INT 290
2648: PPUSH
2649: CALL_OW 52
// for i := 1 to limit - 5 do
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: DOUBLE
2659: LD_INT 1
2661: DEC
2662: ST_TO_ADDR
2663: LD_VAR 0 4
2667: PUSH
2668: LD_INT 5
2670: MINUS
2671: PUSH
2672: FOR_TO
2673: IFFALSE 2759
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
2675: LD_INT 0
2677: PPUSH
2678: LD_INT 2
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: LD_INT 4
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: LD_OWVAR 67
2700: ARRAY
2701: PPUSH
2702: CALL_OW 381
// un := CreateHuman ;
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: CALL_OW 44
2715: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2716: LD_ADDR_EXP 54
2720: PUSH
2721: LD_EXP 54
2725: PPUSH
2726: LD_VAR 0 3
2730: PPUSH
2731: CALL 53522 0 2
2735: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_INT 27
2743: PPUSH
2744: LD_INT 36
2746: PPUSH
2747: LD_INT 5
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 50
// end ;
2757: GO 2672
2759: POP
2760: POP
// limit := limit - 5 ;
2761: LD_ADDR_VAR 0 4
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: LD_INT 5
2773: MINUS
2774: ST_TO_ADDR
// for i := 1 to limit do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: DOUBLE
2781: LD_INT 1
2783: DEC
2784: ST_TO_ADDR
2785: LD_VAR 0 4
2789: PUSH
2790: FOR_TO
2791: IFFALSE 2869
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
2793: LD_INT 0
2795: PPUSH
2796: LD_VAR 0 2
2800: PUSH
2801: LD_INT 3
2803: MOD
2804: PUSH
2805: LD_INT 2
2807: PLUS
2808: PPUSH
2809: LD_INT 3
2811: PPUSH
2812: CALL_OW 380
// un := CreateHuman ;
2816: LD_ADDR_VAR 0 3
2820: PUSH
2821: CALL_OW 44
2825: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2826: LD_ADDR_EXP 54
2830: PUSH
2831: LD_EXP 54
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL 53522 0 2
2845: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2846: LD_VAR 0 3
2850: PPUSH
2851: LD_INT 27
2853: PPUSH
2854: LD_INT 36
2856: PPUSH
2857: LD_INT 5
2859: PPUSH
2860: LD_INT 0
2862: PPUSH
2863: CALL_OW 50
// end ;
2867: GO 2790
2869: POP
2870: POP
// if debug then
2871: LD_EXP 1
2875: IFFALSE 2946
// begin uc_side := reinforcementsSide ;
2877: LD_ADDR_OWVAR 20
2881: PUSH
2882: LD_INT 4
2884: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
2885: LD_INT 0
2887: PPUSH
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 381
// un := CreateHuman ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
2905: LD_ADDR_EXP 55
2909: PUSH
2910: LD_EXP 55
2914: PPUSH
2915: LD_VAR 0 3
2919: PPUSH
2920: CALL 53522 0 2
2924: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
2925: LD_VAR 0 3
2929: PPUSH
2930: LD_INT 71
2932: PPUSH
2933: LD_INT 102
2935: PPUSH
2936: LD_INT 3
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 50
// end ; end ;
2946: LD_VAR 0 1
2950: RET
// every 0 0$1 trigger gameStart do
2951: LD_EXP 7
2955: IFFALSE 3027
2957: GO 2959
2959: DISABLE
// begin enable ;
2960: ENABLE
// BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
2961: LD_INT 1
2963: PPUSH
2964: LD_INT 18
2966: PPUSH
2967: LD_INT 18
2969: PPUSH
2970: LD_INT 19
2972: PPUSH
2973: LD_INT 20
2975: PPUSH
2976: LD_EXP 54
2980: PPUSH
2981: LD_EXP 56
2985: PPUSH
2986: LD_EXP 57
2990: PPUSH
2991: LD_EXP 58
2995: PPUSH
2996: LD_EXP 59
3000: PPUSH
3001: LD_INT 27
3003: PUSH
3004: LD_INT 32
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PPUSH
3011: LD_INT 19
3013: PUSH
3014: LD_INT 14
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: EMPTY
3022: PPUSH
3023: CALL 4697 0 13
// end ;
3027: END
// every 0 0$1 trigger gameStart do var i , time ;
3028: LD_EXP 7
3032: IFFALSE 3109
3034: GO 3036
3036: DISABLE
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
// begin time := [ 4 4$00 , 3 3$30 , 3 3$20 , 3 3$00 ] [ Difficulty ] ;
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: LD_INT 8400
3048: PUSH
3049: LD_INT 7350
3051: PUSH
3052: LD_INT 7000
3054: PUSH
3055: LD_INT 6300
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_OWVAR 67
3068: ARRAY
3069: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$20 ) ) ;
3070: LD_VAR 0 2
3074: PUSH
3075: LD_INT 700
3077: NEG
3078: PPUSH
3079: LD_INT 700
3081: PPUSH
3082: CALL_OW 12
3086: PLUS
3087: PPUSH
3088: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
3092: LD_INT 2
3094: PPUSH
3095: CALL_OW 427
// until convoysCounter = 0 ;
3099: LD_EXP 25
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3070
// end ;
3109: PPOPN 2
3111: END
// export function SendConvoy ; var i , tmp , path ; begin
3112: LD_INT 0
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// path := rand ( 1 , 2 ) ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 12
3133: ST_TO_ADDR
// end ; end_of_file end_of_file
3134: LD_VAR 0 1
3138: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL 74693 0 1
// if un in kirovVehicles then
3148: LD_VAR 0 1
3152: PUSH
3153: LD_EXP 46
3157: IN
3158: IFFALSE 3176
// kirovVehicles := kirovVehicles diff un ;
3160: LD_ADDR_EXP 46
3164: PUSH
3165: LD_EXP 46
3169: PUSH
3170: LD_VAR 0 1
3174: DIFF
3175: ST_TO_ADDR
// if un = Burlak then
3176: LD_VAR 0 1
3180: PUSH
3181: LD_EXP 26
3185: EQUAL
3186: IFFALSE 3195
// YouLost ( Burlak ) ;
3188: LD_STRING Burlak
3190: PPUSH
3191: CALL_OW 104
// if un = Popov then
3195: LD_VAR 0 1
3199: PUSH
3200: LD_EXP 32
3204: EQUAL
3205: IFFALSE 3214
// YouLost ( Popov ) ;
3207: LD_STRING Popov
3209: PPUSH
3210: CALL_OW 104
// if un = Kurin and not arabAttackActive then
3214: LD_VAR 0 1
3218: PUSH
3219: LD_EXP 30
3223: EQUAL
3224: PUSH
3225: LD_EXP 8
3229: NOT
3230: AND
3231: IFFALSE 3240
// YouLost ( Kurin ) ;
3233: LD_STRING Kurin
3235: PPUSH
3236: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
3240: LD_VAR 0 1
3244: PUSH
3245: LD_EXP 43
3249: EQUAL
3250: PUSH
3251: LD_EXP 8
3255: NOT
3256: AND
3257: IFFALSE 3266
// YouLost ( Beria ) ;
3259: LD_STRING Beria
3261: PPUSH
3262: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
3266: LD_VAR 0 1
3270: PUSH
3271: LD_EXP 44
3275: EQUAL
3276: PUSH
3277: LD_EXP 8
3281: NOT
3282: AND
3283: IFFALSE 3292
// YouLost ( Kagan ) ;
3285: LD_STRING Kagan
3287: PPUSH
3288: CALL_OW 104
// end ;
3292: PPOPN 1
3294: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
3295: LD_INT 0
3297: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
3298: LD_VAR 0 1
3302: PPUSH
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL 74751 0 2
// side := GetSide ( vehicle ) ;
3312: LD_ADDR_VAR 0 3
3316: PUSH
3317: LD_VAR 0 1
3321: PPUSH
3322: CALL_OW 255
3326: ST_TO_ADDR
// if side = 6 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 6
3334: EQUAL
3335: IFFALSE 3374
// begin kirovVehicles := Join ( kirovVehicles , vehicle ) ;
3337: LD_ADDR_EXP 46
3341: PUSH
3342: LD_EXP 46
3346: PPUSH
3347: LD_VAR 0 1
3351: PPUSH
3352: CALL 53522 0 2
3356: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
3357: LD_VAR 0 1
3361: PPUSH
3362: CALL_OW 311
3366: PPUSH
3367: LD_INT 7
3369: PPUSH
3370: CALL_OW 109
// end ; end ;
3374: PPOPN 3
3376: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
3377: LD_VAR 0 1
3381: PPUSH
3382: CALL_OW 110
3386: PUSH
3387: LD_INT 7
3389: EQUAL
3390: IFFALSE 3404
// SetTag ( driver , 0 ) ;
3392: LD_VAR 0 1
3396: PPUSH
3397: LD_INT 0
3399: PPUSH
3400: CALL_OW 109
// end ;
3404: PPOPN 4
3406: END
// on UpgradeComplete ( b ) do var side , btype ;
3407: LD_INT 0
3409: PPUSH
3410: PPUSH
// begin side := GetSide ( b ) ;
3411: LD_ADDR_VAR 0 2
3415: PUSH
3416: LD_VAR 0 1
3420: PPUSH
3421: CALL_OW 255
3425: ST_TO_ADDR
// btype := GetBType ( b ) ;
3426: LD_ADDR_VAR 0 3
3430: PUSH
3431: LD_VAR 0 1
3435: PPUSH
3436: CALL_OW 266
3440: ST_TO_ADDR
// if side = 6 then
3441: LD_VAR 0 2
3445: PUSH
3446: LD_INT 6
3448: EQUAL
3449: IFFALSE 3469
// begin kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3451: LD_ADDR_EXP 49
3455: PUSH
3456: LD_EXP 49
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 3
3468: ST_TO_ADDR
// end ; end ;
3469: PPOPN 3
3471: END
// on ResearchComplete ( tech , lab ) do var side ;
3472: LD_INT 0
3474: PPUSH
// begin side := GetSide ( lab ) ;
3475: LD_ADDR_VAR 0 3
3479: PUSH
3480: LD_VAR 0 2
3484: PPUSH
3485: CALL_OW 255
3489: ST_TO_ADDR
// if side = 6 then
3490: LD_VAR 0 3
3494: PUSH
3495: LD_INT 6
3497: EQUAL
3498: IFFALSE 3516
// kirovTechs := kirovTechs diff tech ;
3500: LD_ADDR_EXP 48
3504: PUSH
3505: LD_EXP 48
3509: PUSH
3510: LD_VAR 0 1
3514: DIFF
3515: ST_TO_ADDR
// end ;
3516: PPOPN 3
3518: END
// on BuildingComplete ( b ) do var side , btype ;
3519: LD_INT 0
3521: PPUSH
3522: PPUSH
// begin side := GetSide ( b ) ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: PPUSH
3533: CALL_OW 255
3537: ST_TO_ADDR
// btype := GetBType ( b ) ;
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 266
3552: ST_TO_ADDR
// if side = 3 then
3553: LD_VAR 0 2
3557: PUSH
3558: LD_INT 3
3560: EQUAL
3561: IFFALSE 3649
// begin if btype = b_oil_mine then
3563: LD_VAR 0 3
3567: PUSH
3568: LD_INT 29
3570: EQUAL
3571: IFFALSE 3581
// hasOilTower := true ;
3573: LD_ADDR_EXP 14
3577: PUSH
3578: LD_INT 1
3580: ST_TO_ADDR
// if btype = b_depot then
3581: LD_VAR 0 3
3585: PUSH
3586: LD_INT 0
3588: EQUAL
3589: IFFALSE 3649
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
3591: LD_VAR 0 1
3595: PPUSH
3596: LD_INT 78
3598: PPUSH
3599: LD_INT 112
3601: PPUSH
3602: CALL_OW 297
3606: PUSH
3607: LD_INT 28
3609: LESS
3610: PUSH
3611: LD_EXP 12
3615: NOT
3616: AND
3617: IFFALSE 3649
// begin hasKagan := true ;
3619: LD_ADDR_EXP 12
3623: PUSH
3624: LD_INT 1
3626: ST_TO_ADDR
// kaganDepot := b ;
3627: LD_ADDR_EXP 44
3631: PUSH
3632: LD_VAR 0 1
3636: ST_TO_ADDR
// SetBName ( b , kagan ) ;
3637: LD_VAR 0 1
3641: PPUSH
3642: LD_STRING kagan
3644: PPUSH
3645: CALL_OW 500
// end ; end ; if side = 6 then
3649: LD_VAR 0 2
3653: PUSH
3654: LD_INT 6
3656: EQUAL
3657: IFFALSE 3677
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3659: LD_ADDR_EXP 49
3663: PUSH
3664: LD_EXP 49
3668: PPUSH
3669: LD_INT 1
3671: PPUSH
3672: CALL_OW 3
3676: ST_TO_ADDR
// end ;
3677: PPOPN 3
3679: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
3680: LD_VAR 0 1
3684: PUSH
3685: LD_INT 3
3687: EQUAL
3688: PUSH
3689: LD_VAR 0 2
3693: PUSH
3694: LD_INT 6
3696: EQUAL
3697: AND
3698: IFFALSE 3708
// allianceAttacked := true ;
3700: LD_ADDR_EXP 9
3704: PUSH
3705: LD_INT 1
3707: ST_TO_ADDR
// end ;
3708: PPOPN 2
3710: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
3711: LD_VAR 0 2
3715: PPUSH
3716: CALL_OW 255
3720: PUSH
3721: LD_INT 6
3723: EQUAL
3724: PUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 255
3734: PUSH
3735: LD_INT 3
3737: EQUAL
3738: AND
3739: IFFALSE 3756
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
3741: LD_ADDR_EXP 17
3745: PUSH
3746: LD_EXP 17
3750: PPUSH
3751: CALL 54883 0 1
3755: ST_TO_ADDR
// end ;
3756: PPOPN 2
3758: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
3759: LD_EXP 22
3763: IFFALSE 3767
// exit ;
3765: GO 3884
// if oldSide = 6 then
3767: LD_VAR 0 3
3771: PUSH
3772: LD_INT 6
3774: EQUAL
3775: IFFALSE 3884
// begin ComExit ( driver ) ;
3777: LD_VAR 0 4
3781: PPUSH
3782: CALL 53920 0 1
// SetSide ( newId , 6 ) ;
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_INT 6
3793: PPUSH
3794: CALL_OW 235
// if oldId in kirovVehicles then
3798: LD_VAR 0 2
3802: PUSH
3803: LD_EXP 46
3807: IN
3808: IFFALSE 3848
// begin kirovVehicles := kirovVehicles diff oldId ;
3810: LD_ADDR_EXP 46
3814: PUSH
3815: LD_EXP 46
3819: PUSH
3820: LD_VAR 0 2
3824: DIFF
3825: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
3826: LD_ADDR_EXP 46
3830: PUSH
3831: LD_EXP 46
3835: PPUSH
3836: LD_VAR 0 1
3840: PPUSH
3841: CALL 53522 0 2
3845: ST_TO_ADDR
// end else
3846: GO 3884
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
3848: LD_ADDR_EXP 47
3852: PUSH
3853: LD_EXP 47
3857: PUSH
3858: LD_VAR 0 2
3862: DIFF
3863: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
3864: LD_ADDR_EXP 47
3868: PUSH
3869: LD_EXP 47
3873: PPUSH
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL 53522 0 2
3883: ST_TO_ADDR
// end ; end ; end ;
3884: PPOPN 4
3886: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
3887: LD_INT 0
3889: PPUSH
// begin tag := GetTag ( un ) ;
3890: LD_ADDR_VAR 0 4
3894: PUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: CALL_OW 110
3904: ST_TO_ADDR
// if tag = tWannaBeMech then
3905: LD_VAR 0 4
3909: PUSH
3910: LD_INT 14
3912: EQUAL
3913: IFFALSE 3927
// SetTag ( un , 0 ) ;
3915: LD_VAR 0 1
3919: PPUSH
3920: LD_INT 0
3922: PPUSH
3923: CALL_OW 109
// end ;
3927: PPOPN 4
3929: END
// on SailEvent ( event ) do begin if event = eventCargo then
3930: LD_VAR 0 1
3934: PUSH
3935: LD_INT 1
3937: EQUAL
3938: IFFALSE 3944
// SendCargoWithOil ;
3940: CALL 2041 0 0
// if event = eventConvoy then
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 2
3951: EQUAL
3952: IFFALSE 3958
// SendConvoy ;
3954: CALL 3112 0 0
// end ; end_of_file
3958: PPOPN 1
3960: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] ] ) ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: LD_STRING 02_Beria
3973: PPUSH
3974: LD_INT 31
3976: PUSH
3977: LD_INT 3
3979: PUSH
3980: LD_INT 3
3982: PUSH
3983: LD_INT 63
3985: PUSH
3986: LD_INT 86
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: LD_INT 31
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: LD_INT 74
4011: PUSH
4012: LD_INT 94
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 31
4028: PUSH
4029: LD_INT 3
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: LD_INT 77
4037: PUSH
4038: LD_INT 103
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 0
4054: PUSH
4055: LD_INT 3
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: LD_INT 66
4063: PUSH
4064: LD_INT 104
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 0
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 103
4089: PUSH
4090: LD_INT 67
4092: PUSH
4093: LD_INT 4
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 30
4115: ST_TO_ADDR
// uc_side := 3 ;
4116: LD_ADDR_OWVAR 20
4120: PUSH
4121: LD_INT 3
4123: ST_TO_ADDR
// for i in tmp do
4124: LD_ADDR_VAR 0 2
4128: PUSH
4129: LD_VAR 0 3
4133: PUSH
4134: FOR_IN
4135: IFFALSE 4232
// begin uc_nation := i [ 2 ] ;
4137: LD_ADDR_OWVAR 21
4141: PUSH
4142: LD_VAR 0 2
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4151: LD_ADDR_OWVAR 42
4155: PUSH
4156: LD_VAR 0 2
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4165: LD_ADDR_OWVAR 43
4169: PUSH
4170: LD_VAR 0 2
4174: PUSH
4175: LD_INT 3
4177: ARRAY
4178: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4179: LD_ADDR_OWVAR 44
4183: PUSH
4184: LD_INT 9
4186: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4187: LD_ADDR_OWVAR 45
4191: PUSH
4192: LD_INT 9
4194: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4195: LD_VAR 0 2
4199: PUSH
4200: LD_INT 4
4202: ARRAY
4203: PUSH
4204: LD_INT 46
4206: PLUS
4207: PPUSH
4208: LD_VAR 0 2
4212: PUSH
4213: LD_INT 5
4215: ARRAY
4216: PPUSH
4217: LD_VAR 0 2
4221: PUSH
4222: LD_INT 6
4224: ARRAY
4225: PPUSH
4226: CALL_OW 47
// end ;
4230: GO 4134
4232: POP
4233: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
4234: LD_ADDR_VAR 0 3
4238: PUSH
4239: LD_STRING 02_Kirov
4241: PPUSH
4242: LD_INT 31
4244: PUSH
4245: LD_INT 3
4247: PUSH
4248: LD_INT 3
4250: PUSH
4251: LD_INT 98
4253: PUSH
4254: LD_INT 98
4256: PUSH
4257: LD_INT 1
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: PUSH
4268: LD_INT 6
4270: PUSH
4271: LD_INT 3
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 107
4279: PUSH
4280: LD_INT 99
4282: PUSH
4283: LD_INT 3
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 0
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 3
4302: PUSH
4303: LD_INT 117
4305: PUSH
4306: LD_INT 104
4308: PUSH
4309: LD_INT 3
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: LD_INT 3
4325: PUSH
4326: LD_INT 3
4328: PUSH
4329: LD_INT 105
4331: PUSH
4332: LD_INT 108
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: LD_INT 4
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: LD_INT 120
4357: PUSH
4358: LD_INT 116
4360: PUSH
4361: LD_INT 0
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: PUSH
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 3
4380: PUSH
4381: LD_INT 113
4383: PUSH
4384: LD_INT 113
4386: PUSH
4387: LD_INT 0
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 26
4400: PUSH
4401: LD_INT 3
4403: PUSH
4404: LD_INT 3
4406: PUSH
4407: LD_INT 116
4409: PUSH
4410: LD_INT 98
4412: PUSH
4413: LD_INT 0
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 30
4437: ST_TO_ADDR
// uc_side := 6 ;
4438: LD_ADDR_OWVAR 20
4442: PUSH
4443: LD_INT 6
4445: ST_TO_ADDR
// for i in tmp do
4446: LD_ADDR_VAR 0 2
4450: PUSH
4451: LD_VAR 0 3
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4554
// begin uc_nation := i [ 2 ] ;
4459: LD_ADDR_OWVAR 21
4463: PUSH
4464: LD_VAR 0 2
4468: PUSH
4469: LD_INT 2
4471: ARRAY
4472: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4473: LD_ADDR_OWVAR 42
4477: PUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4487: LD_ADDR_OWVAR 43
4491: PUSH
4492: LD_VAR 0 2
4496: PUSH
4497: LD_INT 3
4499: ARRAY
4500: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4501: LD_ADDR_OWVAR 44
4505: PUSH
4506: LD_INT 9
4508: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4509: LD_ADDR_OWVAR 45
4513: PUSH
4514: LD_INT 9
4516: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4517: LD_VAR 0 2
4521: PUSH
4522: LD_INT 4
4524: ARRAY
4525: PUSH
4526: LD_INT 46
4528: PLUS
4529: PPUSH
4530: LD_VAR 0 2
4534: PUSH
4535: LD_INT 5
4537: ARRAY
4538: PPUSH
4539: LD_VAR 0 2
4543: PUSH
4544: LD_INT 6
4546: ARRAY
4547: PPUSH
4548: CALL_OW 47
// end ;
4552: GO 4456
4554: POP
4555: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 95
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: ST_TO_ADDR
// if tmp then
4601: LD_VAR 0 3
4605: IFFALSE 4636
// for i in tmp do
4607: LD_ADDR_VAR 0 2
4611: PUSH
4612: LD_VAR 0 3
4616: PUSH
4617: FOR_IN
4618: IFFALSE 4634
// SetSide ( i , 6 ) ;
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_INT 6
4627: PPUSH
4628: CALL_OW 235
4632: GO 4617
4634: POP
4635: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
4636: LD_ADDR_EXP 42
4640: PUSH
4641: LD_INT 163
4643: PPUSH
4644: LD_INT 104
4646: PPUSH
4647: CALL_OW 428
4651: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
4652: LD_ADDR_EXP 43
4656: PUSH
4657: LD_INT 112
4659: PPUSH
4660: LD_INT 104
4662: PPUSH
4663: CALL_OW 428
4667: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
4668: LD_EXP 43
4672: PPUSH
4673: LD_STRING beria
4675: PPUSH
4676: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
4680: LD_EXP 42
4684: PPUSH
4685: LD_STRING kirov
4687: PPUSH
4688: CALL_OW 500
// end ;
4692: LD_VAR 0 1
4696: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
4697: LD_INT 0
4699: PPUSH
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
4704: PPUSH
4705: PPUSH
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
// enable ;
4722: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
4723: LD_ADDR_VAR 0 16
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 69
4744: ST_TO_ADDR
// if tmp then
4745: LD_VAR 0 16
4749: IFFALSE 4770
// enemySide := GetSide ( tmp [ 1 ] ) ;
4751: LD_ADDR_VAR 0 36
4755: PUSH
4756: LD_VAR 0 16
4760: PUSH
4761: LD_INT 1
4763: ARRAY
4764: PPUSH
4765: CALL_OW 255
4769: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
4770: LD_ADDR_VAR 0 29
4774: PUSH
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_INT 81
4782: PUSH
4783: LD_VAR 0 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PPUSH
4792: CALL_OW 70
4796: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
4797: LD_ADDR_VAR 0 30
4801: PUSH
4802: LD_VAR 0 5
4806: PPUSH
4807: LD_INT 81
4809: PUSH
4810: LD_VAR 0 1
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PPUSH
4819: CALL_OW 70
4823: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4824: LD_ADDR_VAR 0 35
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: LD_INT 22
4836: PUSH
4837: LD_VAR 0 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 30
4851: PUSH
4852: LD_INT 0
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 30
4861: PUSH
4862: LD_INT 1
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 70
4882: ST_TO_ADDR
// if depot then
4883: LD_VAR 0 35
4887: IFFALSE 4903
// depot := depot [ 1 ] ;
4889: LD_ADDR_VAR 0 35
4893: PUSH
4894: LD_VAR 0 35
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
4903: LD_ADDR_VAR 0 32
4907: PUSH
4908: LD_VAR 0 2
4912: PPUSH
4913: LD_INT 22
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: LD_INT 30
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: LD_INT 50
4937: PUSH
4938: EMPTY
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 70
4950: ST_TO_ADDR
// if Count ( techs ) then
4951: LD_VAR 0 8
4955: PPUSH
4956: CALL 17772 0 1
4960: IFFALSE 5121
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4962: LD_ADDR_VAR 0 18
4966: PUSH
4967: LD_VAR 0 2
4971: PPUSH
4972: LD_INT 22
4974: PUSH
4975: LD_VAR 0 1
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 50
4986: PUSH
4987: EMPTY
4988: LIST
4989: PUSH
4990: LD_INT 2
4992: PUSH
4993: LD_INT 30
4995: PUSH
4996: LD_INT 6
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 30
5005: PUSH
5006: LD_INT 7
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 30
5015: PUSH
5016: LD_INT 8
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// if lab then
5039: LD_VAR 0 18
5043: IFFALSE 5119
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5045: LD_VAR 0 18
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PPUSH
5054: CALL_OW 461
5058: PUSH
5059: LD_INT 2
5061: EQUAL
5062: IFFALSE 5119
// begin for i in techs do
5064: LD_ADDR_VAR 0 15
5068: PUSH
5069: LD_VAR 0 8
5073: PUSH
5074: FOR_IN
5075: IFFALSE 5117
// if CanBeResearched ( lab [ 1 ] , i ) then
5077: LD_VAR 0 18
5081: PUSH
5082: LD_INT 1
5084: ARRAY
5085: PPUSH
5086: LD_VAR 0 15
5090: PPUSH
5091: CALL_OW 430
5095: IFFALSE 5115
// begin AddComResearch ( lab [ 1 ] , i ) ;
5097: LD_VAR 0 18
5101: PUSH
5102: LD_INT 1
5104: ARRAY
5105: PPUSH
5106: LD_VAR 0 15
5110: PPUSH
5111: CALL_OW 184
// end ;
5115: GO 5074
5117: POP
5118: POP
// end ; end ; end else
5119: GO 5422
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
5121: LD_VAR 0 32
5125: PPUSH
5126: LD_INT 3
5128: PUSH
5129: LD_INT 62
5131: PUSH
5132: EMPTY
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 72
5143: PUSH
5144: LD_VAR 0 6
5148: PPUSH
5149: LD_INT 3
5151: PUSH
5152: LD_INT 60
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 120
5167: PUSH
5168: LD_INT 14
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 4
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 72
5198: PPUSH
5199: CALL 17772 0 1
5203: PUSH
5204: LD_INT 2
5206: GREATER
5207: AND
5208: IFFALSE 5422
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
5210: LD_ADDR_VAR 0 16
5214: PUSH
5215: LD_VAR 0 6
5219: PPUSH
5220: LD_INT 3
5222: PUSH
5223: LD_INT 60
5225: PUSH
5226: EMPTY
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 3
5235: PUSH
5236: LD_INT 120
5238: PUSH
5239: LD_INT 14
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 25
5252: PUSH
5253: LD_INT 4
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 72
5269: ST_TO_ADDR
// for i := tmp downto 2 do
5270: LD_ADDR_VAR 0 15
5274: PUSH
5275: DOUBLE
5276: LD_VAR 0 16
5280: INC
5281: ST_TO_ADDR
5282: LD_INT 2
5284: PUSH
5285: FOR_DOWNTO
5286: IFFALSE 5420
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
5288: LD_VAR 0 32
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: CALL_OW 313
5301: PPUSH
5302: CALL 17772 0 1
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_INT 120
5314: PUSH
5315: LD_INT 14
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PPUSH
5322: CALL_OW 72
5326: PPUSH
5327: CALL 17772 0 1
5331: PLUS
5332: PUSH
5333: LD_INT 6
5335: EQUAL
5336: IFFALSE 5340
// break ;
5338: GO 5420
// sci := tmp [ i ] ;
5340: LD_ADDR_VAR 0 24
5344: PUSH
5345: LD_VAR 0 16
5349: PUSH
5350: LD_VAR 0 15
5354: ARRAY
5355: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
5356: LD_VAR 0 24
5360: PPUSH
5361: LD_INT 14
5363: PPUSH
5364: CALL_OW 109
// if IsInUnit ( sci ) then
5368: LD_VAR 0 24
5372: PPUSH
5373: CALL_OW 310
5377: IFFALSE 5388
// ComExitBuilding ( sci ) ;
5379: LD_VAR 0 24
5383: PPUSH
5384: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
5388: LD_VAR 0 24
5392: PPUSH
5393: LD_VAR 0 32
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
5406: LD_VAR 0 24
5410: PPUSH
5411: LD_INT 3
5413: PPUSH
5414: CALL_OW 183
// end ;
5418: GO 5285
5420: POP
5421: POP
// end ; if fac then
5422: LD_VAR 0 32
5426: IFFALSE 5741
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
5428: LD_VAR 0 32
5432: PUSH
5433: LD_INT 1
5435: ARRAY
5436: PPUSH
5437: CALL_OW 461
5441: PUSH
5442: LD_INT 2
5444: EQUAL
5445: IFFALSE 5741
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
5447: LD_ADDR_VAR 0 33
5451: PUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: LD_INT 2
5459: PUSH
5460: LD_INT 30
5462: PUSH
5463: LD_INT 32
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 30
5472: PUSH
5473: LD_INT 33
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 35
5487: PUSH
5488: LD_INT 0
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 70
5503: ST_TO_ADDR
// if emptyTowers then
5504: LD_VAR 0 33
5508: IFFALSE 5558
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
5510: LD_ADDR_VAR 0 34
5514: PUSH
5515: LD_VAR 0 33
5519: PUSH
5520: LD_INT 1
5522: ARRAY
5523: PPUSH
5524: LD_VAR 0 2
5528: PPUSH
5529: CALL 26017 0 2
5533: ST_TO_ADDR
// if weapon then
5534: LD_VAR 0 34
5538: IFFALSE 5558
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
5540: LD_VAR 0 33
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_VAR 0 34
5553: PPUSH
5554: CALL_OW 148
// end ; if constructList then
5558: LD_VAR 0 9
5562: IFFALSE 5741
// for i := 1 to Count ( constructList ) do
5564: LD_ADDR_VAR 0 15
5568: PUSH
5569: DOUBLE
5570: LD_INT 1
5572: DEC
5573: ST_TO_ADDR
5574: LD_VAR 0 9
5578: PPUSH
5579: CALL 17772 0 1
5583: PUSH
5584: FOR_TO
5585: IFFALSE 5739
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
5587: LD_VAR 0 32
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 9
5600: PUSH
5601: LD_VAR 0 15
5605: ARRAY
5606: PUSH
5607: LD_INT 1
5609: ARRAY
5610: PPUSH
5611: LD_VAR 0 9
5615: PUSH
5616: LD_VAR 0 15
5620: ARRAY
5621: PUSH
5622: LD_INT 2
5624: ARRAY
5625: PPUSH
5626: LD_VAR 0 9
5630: PUSH
5631: LD_VAR 0 15
5635: ARRAY
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PPUSH
5641: LD_VAR 0 9
5645: PUSH
5646: LD_VAR 0 15
5650: ARRAY
5651: PUSH
5652: LD_INT 4
5654: ARRAY
5655: PPUSH
5656: CALL_OW 448
5660: IFFALSE 5737
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
5662: LD_VAR 0 32
5666: PUSH
5667: LD_INT 1
5669: ARRAY
5670: PPUSH
5671: LD_VAR 0 9
5675: PUSH
5676: LD_VAR 0 15
5680: ARRAY
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: LD_VAR 0 9
5690: PUSH
5691: LD_VAR 0 15
5695: ARRAY
5696: PUSH
5697: LD_INT 2
5699: ARRAY
5700: PPUSH
5701: LD_VAR 0 9
5705: PUSH
5706: LD_VAR 0 15
5710: ARRAY
5711: PUSH
5712: LD_INT 3
5714: ARRAY
5715: PPUSH
5716: LD_VAR 0 9
5720: PUSH
5721: LD_VAR 0 15
5725: ARRAY
5726: PUSH
5727: LD_INT 4
5729: ARRAY
5730: PPUSH
5731: CALL_OW 125
// break ;
5735: GO 5739
// end ; end ;
5737: GO 5584
5739: POP
5740: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5741: LD_ADDR_VAR 0 16
5745: PUSH
5746: LD_VAR 0 2
5750: PPUSH
5751: LD_INT 22
5753: PUSH
5754: LD_VAR 0 1
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 21
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: LD_INT 57
5778: PUSH
5779: EMPTY
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: LD_INT 24
5791: PUSH
5792: LD_INT 1000
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 70
5813: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
5814: LD_ADDR_VAR 0 23
5818: PUSH
5819: LD_VAR 0 2
5823: PPUSH
5824: CALL_OW 435
5828: ST_TO_ADDR
// if cratesArea then
5829: LD_VAR 0 3
5833: IFFALSE 5856
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
5835: LD_ADDR_VAR 0 23
5839: PUSH
5840: LD_VAR 0 23
5844: PUSH
5845: LD_VAR 0 3
5849: PPUSH
5850: CALL_OW 435
5854: UNION
5855: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
5856: LD_ADDR_VAR 0 20
5860: PUSH
5861: LD_VAR 0 6
5865: PPUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 50
5878: PUSH
5879: EMPTY
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 72
5890: ST_TO_ADDR
// if fac then
5891: LD_VAR 0 32
5895: IFFALSE 6014
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
5897: LD_VAR 0 20
5901: PPUSH
5902: LD_INT 3
5904: PUSH
5905: LD_INT 120
5907: PUSH
5908: LD_INT 7
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: LD_INT 54
5924: PUSH
5925: EMPTY
5926: LIST
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PPUSH
5936: CALL_OW 72
5940: PUSH
5941: LD_VAR 0 32
5945: PUSH
5946: LD_INT 1
5948: ARRAY
5949: PPUSH
5950: CALL_OW 302
5954: AND
5955: IFFALSE 6014
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
5957: LD_VAR 0 20
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 120
5967: PUSH
5968: LD_INT 7
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 3
5981: PUSH
5982: LD_INT 54
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 72
6000: PPUSH
6001: LD_VAR 0 32
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
6014: LD_ADDR_VAR 0 24
6018: PUSH
6019: LD_VAR 0 6
6023: PPUSH
6024: LD_INT 25
6026: PUSH
6027: LD_INT 4
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 3
6036: PUSH
6037: LD_INT 120
6039: PUSH
6040: LD_INT 14
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 50
6053: PUSH
6054: EMPTY
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 72
6066: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
6067: LD_ADDR_VAR 0 18
6071: PUSH
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_INT 2
6079: PUSH
6080: LD_INT 30
6082: PUSH
6083: LD_INT 6
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 30
6092: PUSH
6093: LD_INT 7
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 30
6102: PUSH
6103: LD_INT 8
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 70
6120: ST_TO_ADDR
// if sci then
6121: LD_VAR 0 24
6125: IFFALSE 6286
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
6127: LD_ADDR_VAR 0 27
6131: PUSH
6132: LD_VAR 0 6
6136: PPUSH
6137: LD_INT 95
6139: PUSH
6140: LD_VAR 0 2
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 120
6151: PUSH
6152: LD_INT 1
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL_OW 72
6167: ST_TO_ADDR
// if hurtUnits then
6168: LD_VAR 0 27
6172: IFFALSE 6233
// begin for i in sci do
6174: LD_ADDR_VAR 0 15
6178: PUSH
6179: LD_VAR 0 24
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6229
// if IsInUnit ( i ) then
6187: LD_VAR 0 15
6191: PPUSH
6192: CALL_OW 310
6196: IFFALSE 6209
// ComExitBuilding ( i ) else
6198: LD_VAR 0 15
6202: PPUSH
6203: CALL_OW 122
6207: GO 6227
// ComHeal ( i , hurtUnits [ 1 ] ) ;
6209: LD_VAR 0 15
6213: PPUSH
6214: LD_VAR 0 27
6218: PUSH
6219: LD_INT 1
6221: ARRAY
6222: PPUSH
6223: CALL_OW 128
6227: GO 6184
6229: POP
6230: POP
// end else
6231: GO 6286
// if lab then
6233: LD_VAR 0 18
6237: IFFALSE 6286
// begin for i in sci do
6239: LD_ADDR_VAR 0 15
6243: PUSH
6244: LD_VAR 0 24
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6284
// if not IsInUnit ( i ) then
6252: LD_VAR 0 15
6256: PPUSH
6257: CALL_OW 310
6261: NOT
6262: IFFALSE 6282
// ComEnterUnit ( i , lab [ 1 ] ) ;
6264: LD_VAR 0 15
6268: PPUSH
6269: LD_VAR 0 18
6273: PUSH
6274: LD_INT 1
6276: ARRAY
6277: PPUSH
6278: CALL_OW 120
6282: GO 6249
6284: POP
6285: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
6286: LD_ADDR_VAR 0 19
6290: PUSH
6291: LD_VAR 0 6
6295: PPUSH
6296: LD_INT 25
6298: PUSH
6299: LD_INT 2
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PPUSH
6306: CALL_OW 72
6310: ST_TO_ADDR
// if eng then
6311: LD_VAR 0 19
6315: IFFALSE 7514
// begin for i in eng do
6317: LD_ADDR_VAR 0 15
6321: PUSH
6322: LD_VAR 0 19
6326: PUSH
6327: FOR_IN
6328: IFFALSE 7512
// begin tag := GetTag ( i ) ;
6330: LD_ADDR_VAR 0 21
6334: PUSH
6335: LD_VAR 0 15
6339: PPUSH
6340: CALL_OW 110
6344: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
6345: LD_VAR 0 15
6349: PPUSH
6350: LD_VAR 0 5
6354: PPUSH
6355: CALL_OW 308
6359: PUSH
6360: LD_INT 2
6362: NOT
6363: AND
6364: IFFALSE 6395
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
6366: LD_VAR 0 15
6370: PPUSH
6371: LD_VAR 0 12
6375: PUSH
6376: LD_INT 1
6378: ARRAY
6379: PPUSH
6380: LD_VAR 0 12
6384: PUSH
6385: LD_INT 2
6387: ARRAY
6388: PPUSH
6389: CALL_OW 111
// continue ;
6393: GO 6327
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
6395: LD_VAR 0 15
6399: PPUSH
6400: CALL_OW 256
6404: PUSH
6405: LD_INT 800
6407: LESS
6408: PUSH
6409: LD_VAR 0 21
6413: PUSH
6414: LD_INT 1
6416: NONEQUAL
6417: AND
6418: IFFALSE 6468
// begin SetTag ( i , tHeal ) ;
6420: LD_VAR 0 15
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
6432: LD_VAR 0 15
6436: PPUSH
6437: LD_VAR 0 11
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: PPUSH
6446: LD_VAR 0 11
6450: PUSH
6451: LD_INT 2
6453: ARRAY
6454: PPUSH
6455: CALL_OW 111
// AddComHold ( i ) ;
6459: LD_VAR 0 15
6463: PPUSH
6464: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
6468: LD_VAR 0 21
6472: PUSH
6473: LD_INT 1
6475: EQUAL
6476: PUSH
6477: LD_VAR 0 15
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 1000
6489: EQUAL
6490: AND
6491: IFFALSE 6505
// SetTag ( i , 0 ) ;
6493: LD_VAR 0 15
6497: PPUSH
6498: LD_INT 0
6500: PPUSH
6501: CALL_OW 109
// if not tag then
6505: LD_VAR 0 21
6509: NOT
6510: IFFALSE 6677
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
6512: LD_ADDR_VAR 0 17
6516: PUSH
6517: LD_VAR 0 2
6521: PPUSH
6522: LD_INT 57
6524: PUSH
6525: EMPTY
6526: LIST
6527: PPUSH
6528: CALL_OW 70
6532: ST_TO_ADDR
// if undone then
6533: LD_VAR 0 17
6537: IFFALSE 6559
// begin ComComplete ( i , undone [ 1 ] ) ;
6539: LD_VAR 0 15
6543: PPUSH
6544: LD_VAR 0 17
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: PPUSH
6553: CALL 23870 0 2
// continue ;
6557: GO 6327
// end ; if cr or tmp or buildingsToBuild then
6559: LD_VAR 0 23
6563: PUSH
6564: LD_VAR 0 16
6568: OR
6569: PUSH
6570: LD_VAR 0 10
6574: OR
6575: IFFALSE 6651
// begin if IsInUnit ( i ) then
6577: LD_VAR 0 15
6581: PPUSH
6582: CALL_OW 310
6586: IFFALSE 6597
// ComExitBuilding ( i ) ;
6588: LD_VAR 0 15
6592: PPUSH
6593: CALL_OW 122
// if tmp then
6597: LD_VAR 0 16
6601: IFFALSE 6617
// SetTag ( i , tRepair ) else
6603: LD_VAR 0 15
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 109
6615: GO 6649
// if cr then
6617: LD_VAR 0 23
6621: IFFALSE 6637
// SetTag ( i , tCrates ) else
6623: LD_VAR 0 15
6627: PPUSH
6628: LD_INT 2
6630: PPUSH
6631: CALL_OW 109
6635: GO 6649
// SetTag ( i , tBuild ) ;
6637: LD_VAR 0 15
6641: PPUSH
6642: LD_INT 5
6644: PPUSH
6645: CALL_OW 109
// end else
6649: GO 6677
// if not IsInUnit ( i ) then
6651: LD_VAR 0 15
6655: PPUSH
6656: CALL_OW 310
6660: NOT
6661: IFFALSE 6677
// ComEnterUnit ( i , depot ) ;
6663: LD_VAR 0 15
6667: PPUSH
6668: LD_VAR 0 35
6672: PPUSH
6673: CALL_OW 120
// end ; if tag = tRepair then
6677: LD_VAR 0 21
6681: PUSH
6682: LD_INT 3
6684: EQUAL
6685: IFFALSE 6791
// begin if IsInUnit ( i ) then
6687: LD_VAR 0 15
6691: PPUSH
6692: CALL_OW 310
6696: IFFALSE 6709
// begin ComExitBuilding ( i ) ;
6698: LD_VAR 0 15
6702: PPUSH
6703: CALL_OW 122
// continue ;
6707: GO 6327
// end ; if not tmp then
6709: LD_VAR 0 16
6713: NOT
6714: IFFALSE 6730
// begin SetTag ( i , 0 ) ;
6716: LD_VAR 0 15
6720: PPUSH
6721: LD_INT 0
6723: PPUSH
6724: CALL_OW 109
// continue ;
6728: GO 6327
// end ; if not HasTask ( i ) then
6730: LD_VAR 0 15
6734: PPUSH
6735: CALL_OW 314
6739: NOT
6740: IFFALSE 6760
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
6742: LD_VAR 0 15
6746: PPUSH
6747: LD_VAR 0 16
6751: PUSH
6752: LD_INT 1
6754: ARRAY
6755: PPUSH
6756: CALL_OW 130
// if not IsInarea ( i , area ) then
6760: LD_VAR 0 15
6764: PPUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 308
6774: NOT
6775: IFFALSE 6791
// ComMoveToArea ( i , area ) ;
6777: LD_VAR 0 15
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 113
// end ; if tag = tBuild then
6791: LD_VAR 0 21
6795: PUSH
6796: LD_INT 5
6798: EQUAL
6799: IFFALSE 7365
// begin if IsInUnit ( i ) then
6801: LD_VAR 0 15
6805: PPUSH
6806: CALL_OW 310
6810: IFFALSE 6823
// begin ComExitBuilding ( i ) ;
6812: LD_VAR 0 15
6816: PPUSH
6817: CALL_OW 122
// continue ;
6821: GO 6327
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
6823: LD_VAR 0 10
6827: NOT
6828: PUSH
6829: LD_VAR 0 29
6833: OR
6834: PUSH
6835: LD_VAR 0 30
6839: OR
6840: IFFALSE 6858
// begin SetTag ( i , 0 ) ;
6842: LD_VAR 0 15
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 109
// continue ;
6854: GO 6327
// end else
6856: GO 6897
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
6858: LD_VAR 0 35
6862: PPUSH
6863: LD_VAR 0 10
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PUSH
6872: LD_INT 1
6874: ARRAY
6875: PPUSH
6876: CALL 57585 0 2
6880: NOT
6881: IFFALSE 6897
// begin SetTag ( i , 0 ) ;
6883: LD_VAR 0 15
6887: PPUSH
6888: LD_INT 0
6890: PPUSH
6891: CALL_OW 109
// continue ;
6895: GO 6327
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_VAR 0 2
6906: PPUSH
6907: LD_INT 57
6909: PUSH
6910: EMPTY
6911: LIST
6912: PPUSH
6913: CALL_OW 70
6917: ST_TO_ADDR
// if undone then
6918: LD_VAR 0 17
6922: IFFALSE 6944
// begin ComComplete ( i , undone [ 1 ] ) ;
6924: LD_VAR 0 15
6928: PPUSH
6929: LD_VAR 0 17
6933: PUSH
6934: LD_INT 1
6936: ARRAY
6937: PPUSH
6938: CALL 23870 0 2
// continue ;
6942: GO 6327
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
6944: LD_VAR 0 10
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PUSH
6953: LD_INT 1
6955: ARRAY
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: LD_INT 5
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: IN
6967: IFFALSE 7062
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
6969: LD_VAR 0 10
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PUSH
6978: LD_INT 2
6980: ARRAY
6981: PPUSH
6982: LD_VAR 0 10
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: PUSH
6991: LD_INT 3
6993: ARRAY
6994: PPUSH
6995: CALL_OW 428
6999: PUSH
7000: LD_VAR 0 35
7004: PPUSH
7005: LD_VAR 0 10
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PUSH
7014: LD_INT 1
7016: ARRAY
7017: PPUSH
7018: CALL 57585 0 2
7022: AND
7023: IFFALSE 7060
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7025: LD_VAR 0 10
7029: PUSH
7030: LD_INT 1
7032: ARRAY
7033: PUSH
7034: LD_INT 2
7036: ARRAY
7037: PPUSH
7038: LD_VAR 0 10
7042: PUSH
7043: LD_INT 1
7045: ARRAY
7046: PUSH
7047: LD_INT 3
7049: ARRAY
7050: PPUSH
7051: CALL_OW 428
7055: PPUSH
7056: CALL_OW 146
// end ; continue ;
7060: GO 6327
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
7062: LD_VAR 0 10
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PUSH
7075: LD_INT 7
7077: PUSH
7078: LD_INT 8
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: IN
7085: IFFALSE 7193
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7087: LD_VAR 0 10
7091: PUSH
7092: LD_INT 1
7094: ARRAY
7095: PUSH
7096: LD_INT 2
7098: ARRAY
7099: PPUSH
7100: LD_VAR 0 10
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PUSH
7109: LD_INT 3
7111: ARRAY
7112: PPUSH
7113: CALL_OW 428
7117: PUSH
7118: LD_VAR 0 35
7122: PPUSH
7123: LD_VAR 0 10
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: CALL 57585 0 2
7140: AND
7141: IFFALSE 7191
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
7143: LD_VAR 0 10
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PUSH
7152: LD_INT 2
7154: ARRAY
7155: PPUSH
7156: LD_VAR 0 10
7160: PUSH
7161: LD_INT 1
7163: ARRAY
7164: PUSH
7165: LD_INT 3
7167: ARRAY
7168: PPUSH
7169: CALL_OW 428
7173: PPUSH
7174: LD_VAR 0 10
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PUSH
7183: LD_INT 5
7185: ARRAY
7186: PPUSH
7187: CALL_OW 147
// end ; continue ;
7191: GO 6327
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
7193: LD_VAR 0 10
7197: PUSH
7198: LD_INT 1
7200: ARRAY
7201: PUSH
7202: LD_INT 1
7204: ARRAY
7205: PUSH
7206: LD_INT 32
7208: PUSH
7209: LD_INT 33
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: IN
7216: IFFALSE 7292
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
7218: LD_VAR 0 10
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: PUSH
7227: LD_INT 2
7229: ARRAY
7230: PPUSH
7231: LD_VAR 0 10
7235: PUSH
7236: LD_INT 1
7238: ARRAY
7239: PUSH
7240: LD_INT 3
7242: ARRAY
7243: PPUSH
7244: CALL_OW 428
7248: IFFALSE 7292
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7250: LD_VAR 0 15
7254: PPUSH
7255: LD_VAR 0 10
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PUSH
7264: LD_INT 2
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 10
7272: PUSH
7273: LD_INT 1
7275: ARRAY
7276: PUSH
7277: LD_INT 3
7279: ARRAY
7280: PPUSH
7281: CALL_OW 428
7285: PPUSH
7286: CALL_OW 167
// continue ;
7290: GO 6327
// end ; end ; if not HasTask ( i ) then
7292: LD_VAR 0 15
7296: PPUSH
7297: CALL_OW 314
7301: NOT
7302: IFFALSE 7365
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7304: LD_VAR 0 15
7308: PPUSH
7309: LD_VAR 0 10
7313: PUSH
7314: LD_INT 1
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: LD_VAR 0 10
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: LD_INT 2
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 10
7339: PUSH
7340: LD_INT 1
7342: ARRAY
7343: PUSH
7344: LD_INT 3
7346: ARRAY
7347: PPUSH
7348: LD_VAR 0 10
7352: PUSH
7353: LD_INT 1
7355: ARRAY
7356: PUSH
7357: LD_INT 4
7359: ARRAY
7360: PPUSH
7361: CALL_OW 145
// end ; if tag = tCrates then
7365: LD_VAR 0 21
7369: PUSH
7370: LD_INT 2
7372: EQUAL
7373: IFFALSE 7510
// begin if IsInUnit ( i ) then
7375: LD_VAR 0 15
7379: PPUSH
7380: CALL_OW 310
7384: IFFALSE 7397
// begin ComExitBuilding ( i ) ;
7386: LD_VAR 0 15
7390: PPUSH
7391: CALL_OW 122
// continue ;
7395: GO 6327
// end ; if not cr then
7397: LD_VAR 0 23
7401: NOT
7402: IFFALSE 7418
// begin SetTag ( i , 0 ) ;
7404: LD_VAR 0 15
7408: PPUSH
7409: LD_INT 0
7411: PPUSH
7412: CALL_OW 109
// continue ;
7416: GO 6327
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
7418: LD_VAR 0 15
7422: PPUSH
7423: CALL_OW 314
7427: NOT
7428: PUSH
7429: LD_INT 81
7431: PUSH
7432: LD_VAR 0 1
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 92
7443: PUSH
7444: LD_VAR 0 23
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_VAR 0 23
7457: PUSH
7458: LD_INT 2
7460: ARRAY
7461: PUSH
7462: LD_INT 12
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PPUSH
7475: CALL_OW 69
7479: NOT
7480: AND
7481: IFFALSE 7510
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
7483: LD_VAR 0 15
7487: PPUSH
7488: LD_VAR 0 23
7492: PUSH
7493: LD_INT 1
7495: ARRAY
7496: PPUSH
7497: LD_VAR 0 23
7501: PUSH
7502: LD_INT 2
7504: ARRAY
7505: PPUSH
7506: CALL_OW 117
// end ; end ;
7510: GO 6327
7512: POP
7513: POP
// end ; if vehicles then
7514: LD_VAR 0 7
7518: IFFALSE 8566
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
7520: LD_ADDR_VAR 0 7
7524: PUSH
7525: LD_VAR 0 7
7529: PPUSH
7530: LD_INT 3
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: LD_INT 34
7538: PUSH
7539: LD_INT 52
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 51
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 13
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_INT 12
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 50
7589: PUSH
7590: EMPTY
7591: LIST
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: ST_TO_ADDR
// if vehicles then
7602: LD_VAR 0 7
7606: IFFALSE 8566
// begin for i in vehicles do
7608: LD_ADDR_VAR 0 15
7612: PUSH
7613: LD_VAR 0 7
7617: PUSH
7618: FOR_IN
7619: IFFALSE 8564
// begin tag := GetTag ( i ) ;
7621: LD_ADDR_VAR 0 21
7625: PUSH
7626: LD_VAR 0 15
7630: PPUSH
7631: CALL_OW 110
7635: ST_TO_ADDR
// if not tag then
7636: LD_VAR 0 21
7640: NOT
7641: IFFALSE 7778
// begin if GetControl ( i ) = control_manual then
7643: LD_VAR 0 15
7647: PPUSH
7648: CALL_OW 263
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: IFFALSE 7764
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7658: LD_ADDR_VAR 0 26
7662: PUSH
7663: LD_VAR 0 20
7667: PPUSH
7668: LD_INT 120
7670: PUSH
7671: LD_INT 7
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 72
7682: ST_TO_ADDR
// if not drivers then
7683: LD_VAR 0 26
7687: NOT
7688: IFFALSE 7744
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
7690: LD_ADDR_VAR 0 26
7694: PUSH
7695: LD_VAR 0 20
7699: PPUSH
7700: LD_INT 3
7702: PUSH
7703: LD_INT 120
7705: PUSH
7706: LD_INT 7
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PPUSH
7717: CALL_OW 72
7721: ST_TO_ADDR
// if drivers then
7722: LD_VAR 0 26
7726: IFFALSE 7744
// begin SetTag ( drivers [ 1 ] , tMech ) ;
7728: LD_VAR 0 26
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PPUSH
7737: LD_INT 7
7739: PPUSH
7740: CALL_OW 109
// end ; end ; if drivers then
7744: LD_VAR 0 26
7748: IFFALSE 7762
// SetTag ( i , tBusy ) ;
7750: LD_VAR 0 15
7754: PPUSH
7755: LD_INT 8
7757: PPUSH
7758: CALL_OW 109
// continue ;
7762: GO 7618
// end ; SetTag ( i , tBusy ) ;
7764: LD_VAR 0 15
7768: PPUSH
7769: LD_INT 8
7771: PPUSH
7772: CALL_OW 109
// end else
7776: GO 8562
// if tag = tBusy then
7778: LD_VAR 0 21
7782: PUSH
7783: LD_INT 8
7785: EQUAL
7786: IFFALSE 8033
// begin if GetLives ( i ) = 1000 then
7788: LD_VAR 0 15
7792: PPUSH
7793: CALL_OW 256
7797: PUSH
7798: LD_INT 1000
7800: EQUAL
7801: IFFALSE 8031
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
7803: LD_VAR 0 15
7807: PPUSH
7808: CALL_OW 263
7812: PUSH
7813: LD_INT 1
7815: EQUAL
7816: PUSH
7817: LD_VAR 0 15
7821: PPUSH
7822: CALL_OW 311
7826: NOT
7827: AND
7828: IFFALSE 7999
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7830: LD_ADDR_VAR 0 26
7834: PUSH
7835: LD_VAR 0 20
7839: PPUSH
7840: LD_INT 120
7842: PUSH
7843: LD_INT 7
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 72
7854: ST_TO_ADDR
// if not drivers then
7855: LD_VAR 0 26
7859: NOT
7860: IFFALSE 7876
// begin SetTag ( i , 0 ) ;
7862: LD_VAR 0 15
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: CALL_OW 109
// continue ;
7874: GO 7618
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
7876: LD_VAR 0 26
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: CALL_OW 310
7889: PUSH
7890: LD_VAR 0 26
7894: PUSH
7895: LD_INT 1
7897: ARRAY
7898: PPUSH
7899: CALL 51126 0 1
7903: NOT
7904: AND
7905: IFFALSE 7920
// ComExitBuilding ( drivers [ 1 ] ) ;
7907: LD_VAR 0 26
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: PPUSH
7916: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
7920: LD_VAR 0 7
7924: PPUSH
7925: LD_INT 120
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 72
7939: PUSH
7940: LD_VAR 0 26
7944: PUSH
7945: LD_INT 1
7947: ARRAY
7948: PPUSH
7949: CALL_OW 314
7953: NOT
7954: AND
7955: PUSH
7956: LD_VAR 0 7
7960: PPUSH
7961: LD_INT 120
7963: PUSH
7964: LD_INT 3
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 72
7975: NOT
7976: OR
7977: IFFALSE 7997
// ComEnterUnit ( drivers [ 1 ] , i ) ;
7979: LD_VAR 0 26
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: LD_VAR 0 15
7992: PPUSH
7993: CALL_OW 120
// continue ;
7997: GO 7618
// end ; if allowToPatrol then
7999: LD_VAR 0 13
8003: IFFALSE 8019
// SetTag ( i , tPatrol ) else
8005: LD_VAR 0 15
8009: PPUSH
8010: LD_INT 15
8012: PPUSH
8013: CALL_OW 109
8017: GO 8031
// SetTag ( i , tAttack ) ;
8019: LD_VAR 0 15
8023: PPUSH
8024: LD_INT 13
8026: PPUSH
8027: CALL_OW 109
// end ; end else
8031: GO 8562
// if tag = tPatrol then
8033: LD_VAR 0 21
8037: PUSH
8038: LD_INT 15
8040: EQUAL
8041: IFFALSE 8233
// begin if GetLives ( i ) < 650 then
8043: LD_VAR 0 15
8047: PPUSH
8048: CALL_OW 256
8052: PUSH
8053: LD_INT 650
8055: LESS
8056: IFFALSE 8099
// begin SetTag ( i , tVehRepair ) ;
8058: LD_VAR 0 15
8062: PPUSH
8063: LD_INT 9
8065: PPUSH
8066: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8070: LD_VAR 0 15
8074: PPUSH
8075: LD_VAR 0 12
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: LD_VAR 0 12
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PPUSH
8093: CALL_OW 111
// continue ;
8097: GO 7618
// end ; if GetEngine ( i ) = engine_combustion then
8099: LD_VAR 0 15
8103: PPUSH
8104: CALL_OW 262
8108: PUSH
8109: LD_INT 1
8111: EQUAL
8112: IFFALSE 8159
// if GetFuel ( i ) < 30 then
8114: LD_VAR 0 15
8118: PPUSH
8119: CALL_OW 261
8123: PUSH
8124: LD_INT 30
8126: LESS
8127: IFFALSE 8159
// begin ComMoveUnit ( i , depot ) ;
8129: LD_VAR 0 15
8133: PPUSH
8134: LD_VAR 0 35
8138: PPUSH
8139: CALL_OW 112
// AddComRefuel ( i , depot ) ;
8143: LD_VAR 0 15
8147: PPUSH
8148: LD_VAR 0 35
8152: PPUSH
8153: CALL_OW 210
// continue ;
8157: GO 7618
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
8159: LD_VAR 0 15
8163: PPUSH
8164: LD_VAR 0 13
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: PPUSH
8173: LD_VAR 0 13
8177: PUSH
8178: LD_INT 2
8180: ARRAY
8181: PPUSH
8182: CALL_OW 297
8186: PUSH
8187: LD_INT 12
8189: GREATER
8190: PUSH
8191: LD_VAR 0 15
8195: PPUSH
8196: CALL_OW 314
8200: NOT
8201: AND
8202: IFFALSE 8231
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
8204: LD_VAR 0 15
8208: PPUSH
8209: LD_VAR 0 13
8213: PUSH
8214: LD_INT 1
8216: ARRAY
8217: PPUSH
8218: LD_VAR 0 13
8222: PUSH
8223: LD_INT 2
8225: ARRAY
8226: PPUSH
8227: CALL_OW 114
// end else
8231: GO 8562
// if tag = tAttack then
8233: LD_VAR 0 21
8237: PUSH
8238: LD_INT 13
8240: EQUAL
8241: IFFALSE 8421
// begin enemy := enemyInBase ;
8243: LD_ADDR_VAR 0 28
8247: PUSH
8248: LD_VAR 0 29
8252: ST_TO_ADDR
// if not enemy then
8253: LD_VAR 0 28
8257: NOT
8258: IFFALSE 8270
// enemy := enemyOuterBase ;
8260: LD_ADDR_VAR 0 28
8264: PUSH
8265: LD_VAR 0 30
8269: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8270: LD_VAR 0 28
8274: NOT
8275: PUSH
8276: LD_VAR 0 15
8280: PPUSH
8281: LD_VAR 0 12
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 12
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PPUSH
8299: CALL_OW 297
8303: PUSH
8304: LD_INT 10
8306: GREATER
8307: AND
8308: IFFALSE 8339
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8310: LD_VAR 0 15
8314: PPUSH
8315: LD_VAR 0 12
8319: PUSH
8320: LD_INT 1
8322: ARRAY
8323: PPUSH
8324: LD_VAR 0 12
8328: PUSH
8329: LD_INT 2
8331: ARRAY
8332: PPUSH
8333: CALL_OW 111
// continue ;
8337: GO 7618
// end ; if GetLives ( i ) < 650 then
8339: LD_VAR 0 15
8343: PPUSH
8344: CALL_OW 256
8348: PUSH
8349: LD_INT 650
8351: LESS
8352: IFFALSE 8395
// begin SetTag ( i , tVehRepair ) ;
8354: LD_VAR 0 15
8358: PPUSH
8359: LD_INT 9
8361: PPUSH
8362: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8366: LD_VAR 0 15
8370: PPUSH
8371: LD_VAR 0 12
8375: PUSH
8376: LD_INT 1
8378: ARRAY
8379: PPUSH
8380: LD_VAR 0 12
8384: PUSH
8385: LD_INT 2
8387: ARRAY
8388: PPUSH
8389: CALL_OW 111
// continue ;
8393: GO 7618
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8395: LD_VAR 0 15
8399: PPUSH
8400: LD_VAR 0 28
8404: PPUSH
8405: LD_VAR 0 15
8409: PPUSH
8410: CALL_OW 74
8414: PPUSH
8415: CALL_OW 115
// end else
8419: GO 8562
// if tag = tVehRepair then
8421: LD_VAR 0 21
8425: PUSH
8426: LD_INT 9
8428: EQUAL
8429: IFFALSE 8562
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8431: LD_VAR 0 15
8435: PPUSH
8436: LD_VAR 0 12
8440: PUSH
8441: LD_INT 1
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 12
8449: PUSH
8450: LD_INT 2
8452: ARRAY
8453: PPUSH
8454: CALL_OW 297
8458: PUSH
8459: LD_INT 10
8461: GREATER
8462: IFFALSE 8493
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8464: LD_VAR 0 15
8468: PPUSH
8469: LD_VAR 0 12
8473: PUSH
8474: LD_INT 1
8476: ARRAY
8477: PPUSH
8478: LD_VAR 0 12
8482: PUSH
8483: LD_INT 2
8485: ARRAY
8486: PPUSH
8487: CALL_OW 111
// continue ;
8491: GO 7618
// end ; if GetLives ( i ) = 1000 then
8493: LD_VAR 0 15
8497: PPUSH
8498: CALL_OW 256
8502: PUSH
8503: LD_INT 1000
8505: EQUAL
8506: IFFALSE 8522
// begin SetTag ( i , tBusy ) ;
8508: LD_VAR 0 15
8512: PPUSH
8513: LD_INT 8
8515: PPUSH
8516: CALL_OW 109
// continue ;
8520: GO 7618
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8522: LD_VAR 0 15
8526: PPUSH
8527: CALL_OW 263
8531: PUSH
8532: LD_INT 1
8534: EQUAL
8535: PUSH
8536: LD_VAR 0 15
8540: PPUSH
8541: CALL_OW 311
8545: AND
8546: IFFALSE 8562
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8548: LD_VAR 0 15
8552: PPUSH
8553: CALL_OW 311
8557: PPUSH
8558: CALL 55222 0 1
// end ; end ;
8562: GO 7618
8564: POP
8565: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8566: LD_ADDR_VAR 0 25
8570: PUSH
8571: LD_VAR 0 6
8575: PPUSH
8576: LD_INT 2
8578: PUSH
8579: LD_INT 25
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 25
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 25
8611: PUSH
8612: LD_INT 9
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 50
8628: PUSH
8629: EMPTY
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 72
8640: ST_TO_ADDR
// if sol then
8641: LD_VAR 0 25
8645: IFFALSE 9443
// begin if enemyInBase then
8647: LD_VAR 0 29
8651: IFFALSE 8830
// begin for i in sol do
8653: LD_ADDR_VAR 0 15
8657: PUSH
8658: LD_VAR 0 25
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8826
// begin tw := IsInUnit ( i ) ;
8666: LD_ADDR_VAR 0 22
8670: PUSH
8671: LD_VAR 0 15
8675: PPUSH
8676: CALL_OW 310
8680: ST_TO_ADDR
// if tw then
8681: LD_VAR 0 22
8685: IFFALSE 8768
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8687: LD_VAR 0 22
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_VAR 0 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 101
8706: PUSH
8707: LD_VAR 0 36
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 30
8721: PUSH
8722: LD_INT 32
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 30
8731: PUSH
8732: LD_INT 31
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: PPUSH
8749: CALL_OW 69
8753: IN
8754: NOT
8755: IFFALSE 8766
// ComExitBuilding ( i ) ;
8757: LD_VAR 0 15
8761: PPUSH
8762: CALL_OW 122
// end else
8766: GO 8824
// if IsInarea ( i , area ) then
8768: LD_VAR 0 15
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 308
8782: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
8784: LD_VAR 0 15
8788: PPUSH
8789: LD_VAR 0 29
8793: PPUSH
8794: LD_VAR 0 15
8798: PPUSH
8799: CALL_OW 74
8803: PPUSH
8804: CALL_OW 115
8808: GO 8824
// ComMoveToArea ( i , area ) ;
8810: LD_VAR 0 15
8814: PPUSH
8815: LD_VAR 0 2
8819: PPUSH
8820: CALL_OW 113
// end ;
8824: GO 8663
8826: POP
8827: POP
// end else
8828: GO 9443
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8830: LD_ADDR_VAR 0 31
8834: PUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_INT 3
8842: PUSH
8843: LD_INT 62
8845: PUSH
8846: EMPTY
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: LD_INT 57
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 30
8871: PUSH
8872: LD_INT 32
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 4
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 30
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 30
8901: PUSH
8902: LD_INT 31
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: PPUSH
8921: CALL_OW 70
8925: ST_TO_ADDR
// emptyTowers := [ ] ;
8926: LD_ADDR_VAR 0 33
8930: PUSH
8931: EMPTY
8932: ST_TO_ADDR
// if empty then
8933: LD_VAR 0 31
8937: IFFALSE 9003
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8939: LD_ADDR_VAR 0 33
8943: PUSH
8944: LD_VAR 0 31
8948: PPUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 120
8954: PUSH
8955: LD_INT 10
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: LD_INT 30
8971: PUSH
8972: LD_INT 32
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 30
8981: PUSH
8982: LD_INT 33
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 72
9002: ST_TO_ADDR
// for i in sol do
9003: LD_ADDR_VAR 0 15
9007: PUSH
9008: LD_VAR 0 25
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9441
// begin tag := GetTag ( i ) ;
9016: LD_ADDR_VAR 0 21
9020: PUSH
9021: LD_VAR 0 15
9025: PPUSH
9026: CALL_OW 110
9030: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9031: LD_VAR 0 15
9035: PPUSH
9036: CALL_OW 256
9040: PUSH
9041: LD_INT 1000
9043: LESS
9044: PUSH
9045: LD_VAR 0 21
9049: PUSH
9050: LD_INT 1
9052: NONEQUAL
9053: AND
9054: IFFALSE 9106
// begin SetTag ( i , tHeal ) ;
9056: LD_VAR 0 15
9060: PPUSH
9061: LD_INT 1
9063: PPUSH
9064: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9068: LD_VAR 0 15
9072: PPUSH
9073: LD_VAR 0 11
9077: PUSH
9078: LD_INT 1
9080: ARRAY
9081: PPUSH
9082: LD_VAR 0 11
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PPUSH
9091: CALL_OW 111
// AddComHold ( i ) ;
9095: LD_VAR 0 15
9099: PPUSH
9100: CALL_OW 200
// continue ;
9104: GO 9013
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9106: LD_VAR 0 15
9110: PPUSH
9111: CALL_OW 256
9115: PUSH
9116: LD_INT 1000
9118: EQUAL
9119: PUSH
9120: LD_VAR 0 21
9124: PUSH
9125: LD_INT 1
9127: EQUAL
9128: AND
9129: IFFALSE 9145
// begin SetTag ( i , 0 ) ;
9131: LD_VAR 0 15
9135: PPUSH
9136: LD_INT 0
9138: PPUSH
9139: CALL_OW 109
// continue ;
9143: GO 9013
// end ; if HasTask ( i ) then
9145: LD_VAR 0 15
9149: PPUSH
9150: CALL_OW 314
9154: IFFALSE 9158
// continue ;
9156: GO 9013
// if not IsInUnit ( i ) and not tag and empty then
9158: LD_VAR 0 15
9162: PPUSH
9163: CALL_OW 310
9167: NOT
9168: PUSH
9169: LD_VAR 0 21
9173: NOT
9174: AND
9175: PUSH
9176: LD_VAR 0 31
9180: AND
9181: IFFALSE 9221
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9183: LD_VAR 0 15
9187: PPUSH
9188: LD_VAR 0 31
9192: PUSH
9193: LD_INT 1
9195: ARRAY
9196: PPUSH
9197: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9201: LD_ADDR_VAR 0 31
9205: PUSH
9206: LD_VAR 0 31
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: CALL_OW 3
9218: ST_TO_ADDR
// continue ;
9219: GO 9013
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
9221: LD_VAR 0 15
9225: PPUSH
9226: CALL_OW 310
9230: PUSH
9231: LD_VAR 0 21
9235: NOT
9236: AND
9237: PUSH
9238: LD_VAR 0 33
9242: AND
9243: IFFALSE 9439
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
9245: LD_VAR 0 15
9249: PPUSH
9250: CALL_OW 310
9254: PPUSH
9255: CALL_OW 266
9259: PUSH
9260: LD_INT 32
9262: PUSH
9263: LD_INT 31
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: IN
9270: IFFALSE 9274
// continue ;
9272: GO 9013
// SetTag ( i , tTower ) ;
9274: LD_VAR 0 15
9278: PPUSH
9279: LD_INT 10
9281: PPUSH
9282: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
9286: LD_VAR 0 33
9290: PUSH
9291: LD_INT 1
9293: ARRAY
9294: PPUSH
9295: LD_INT 10
9297: PPUSH
9298: CALL_OW 109
// ComExit ( i ) ;
9302: LD_VAR 0 15
9306: PPUSH
9307: CALL 53920 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9311: LD_VAR 0 15
9315: PPUSH
9316: LD_VAR 0 33
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
9329: LD_INT 35
9331: PPUSH
9332: CALL_OW 67
// if not HasTask ( i ) then
9336: LD_VAR 0 15
9340: PPUSH
9341: CALL_OW 314
9345: NOT
9346: IFFALSE 9366
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9348: LD_VAR 0 15
9352: PPUSH
9353: LD_VAR 0 33
9357: PUSH
9358: LD_INT 1
9360: ARRAY
9361: PPUSH
9362: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
9366: LD_VAR 0 33
9370: PUSH
9371: LD_INT 1
9373: ARRAY
9374: PPUSH
9375: CALL 17794 0 1
9379: NOT
9380: IFFALSE 9384
// break ;
9382: GO 9407
// until IsInUnit ( i ) or not IsOk ( i ) ;
9384: LD_VAR 0 15
9388: PPUSH
9389: CALL_OW 310
9393: PUSH
9394: LD_VAR 0 15
9398: PPUSH
9399: CALL_OW 302
9403: NOT
9404: OR
9405: IFFALSE 9329
// SetTag ( i , 0 ) ;
9407: LD_VAR 0 15
9411: PPUSH
9412: LD_INT 0
9414: PPUSH
9415: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
9419: LD_VAR 0 33
9423: PUSH
9424: LD_INT 1
9426: ARRAY
9427: PPUSH
9428: LD_INT 0
9430: PPUSH
9431: CALL_OW 109
// exit ;
9435: POP
9436: POP
9437: GO 9443
// end ; end ;
9439: GO 9013
9441: POP
9442: POP
// end ; end ; end ; end_of_file
9443: LD_VAR 0 14
9447: RET
// export function Action ; var i , c , tmp ; begin
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
9452: PPUSH
9453: PPUSH
// InGameOn ;
9454: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
9458: LD_INT 3
9460: PPUSH
9461: LD_INT 5
9463: PPUSH
9464: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
9468: LD_EXP 30
9472: PPUSH
9473: LD_EXP 42
9477: PPUSH
9478: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
9482: LD_EXP 26
9486: PPUSH
9487: LD_EXP 42
9491: PPUSH
9492: CALL_OW 52
// if Belkov then
9496: LD_EXP 28
9500: IFFALSE 9516
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
9502: LD_EXP 28
9506: PPUSH
9507: LD_EXP 42
9511: PPUSH
9512: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
9516: LD_EXP 32
9520: PPUSH
9521: LD_EXP 42
9525: PPUSH
9526: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
9530: LD_INT 159
9532: PPUSH
9533: LD_INT 103
9535: PPUSH
9536: CALL_OW 86
// wait ( 0 0$0.3 ) ;
9540: LD_INT 10
9542: PPUSH
9543: CALL_OW 67
// if not Belkov then
9547: LD_EXP 28
9551: NOT
9552: IFFALSE 9649
// begin Say ( Kurin , D1a-Kur-1 ) ;
9554: LD_EXP 30
9558: PPUSH
9559: LD_STRING D1a-Kur-1
9561: PPUSH
9562: CALL_OW 88
// if not belkovSaved then
9566: LD_EXP 6
9570: NOT
9571: IFFALSE 9597
// begin Say ( Burlak , D1a-Bur-1 ) ;
9573: LD_EXP 26
9577: PPUSH
9578: LD_STRING D1a-Bur-1
9580: PPUSH
9581: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
9585: LD_EXP 30
9589: PPUSH
9590: LD_STRING D1a-Kur-2
9592: PPUSH
9593: CALL_OW 88
// end ; if wasSelfish then
9597: LD_EXP 4
9601: IFFALSE 9615
// Say ( Kurin , D1a-Kur-2a ) ;
9603: LD_EXP 30
9607: PPUSH
9608: LD_STRING D1a-Kur-2a
9610: PPUSH
9611: CALL_OW 88
// hasProblem := true ;
9615: LD_ADDR_EXP 5
9619: PUSH
9620: LD_INT 1
9622: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
9623: LD_EXP 30
9627: PPUSH
9628: LD_STRING D1a-Kur-2b
9630: PPUSH
9631: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
9635: LD_EXP 26
9639: PPUSH
9640: LD_STRING D1a-Bur-2
9642: PPUSH
9643: CALL_OW 88
// end else
9647: GO 9685
// begin Say ( Kurin , D1b-Kur-1 ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_STRING D1b-Kur-1
9656: PPUSH
9657: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
9661: LD_EXP 28
9665: PPUSH
9666: LD_STRING D1b-Bel-1
9668: PPUSH
9669: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
9673: LD_EXP 30
9677: PPUSH
9678: LD_STRING D1b-Kur-2
9680: PPUSH
9681: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
9685: LD_EXP 30
9689: PPUSH
9690: LD_STRING D2-Kur-1
9692: PPUSH
9693: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
9697: LD_EXP 26
9701: PPUSH
9702: LD_STRING D2-Bur-1
9704: PPUSH
9705: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
9709: LD_EXP 30
9713: PPUSH
9714: LD_STRING D2-Kur-2
9716: PPUSH
9717: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
9721: LD_EXP 26
9725: PPUSH
9726: LD_STRING D2-Bur-2
9728: PPUSH
9729: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
9733: LD_EXP 30
9737: PPUSH
9738: LD_STRING D2-Kur-3
9740: PPUSH
9741: CALL_OW 88
// wait ( 0 0$0.5 ) ;
9745: LD_INT 18
9747: PPUSH
9748: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
9752: LD_EXP 32
9756: PPUSH
9757: LD_STRING D2-Pop-3
9759: PPUSH
9760: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
9764: LD_EXP 30
9768: PPUSH
9769: LD_STRING D2-Kur-4
9771: PPUSH
9772: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
9776: LD_EXP 26
9780: PPUSH
9781: LD_STRING D2-Bur-4
9783: PPUSH
9784: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
9788: LD_EXP 30
9792: PPUSH
9793: LD_STRING D2-Kur-5
9795: PPUSH
9796: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
9800: LD_EXP 26
9804: PPUSH
9805: LD_STRING D2-Bur-5
9807: PPUSH
9808: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
9812: LD_EXP 30
9816: PPUSH
9817: LD_STRING D2-Kur-6
9819: PPUSH
9820: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
9824: LD_ADDR_EXP 36
9828: PUSH
9829: LD_STRING 1
9831: PPUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 6
9837: PUSH
9838: LD_INT 6
9840: PUSH
9841: LD_INT 5
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: LD_OWVAR 67
9854: ARRAY
9855: PPUSH
9856: LD_INT 7
9858: PUSH
9859: LD_INT 6
9861: PUSH
9862: LD_INT 6
9864: PUSH
9865: LD_INT 5
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: PUSH
9874: LD_OWVAR 67
9878: ARRAY
9879: PPUSH
9880: LD_INT -5
9882: PUSH
9883: LD_EXP 26
9887: PUSH
9888: LD_INT -3
9890: PUSH
9891: LD_INT -5
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: LD_EXP 28
9904: ADD
9905: PUSH
9906: LD_EXP 27
9910: ADD
9911: PUSH
9912: LD_EXP 29
9916: ADD
9917: PUSH
9918: LD_EXP 31
9922: ADD
9923: PUSH
9924: LD_EXP 40
9928: ADD
9929: PUSH
9930: LD_INT -2
9932: PUSH
9933: LD_INT -4
9935: PUSH
9936: LD_INT -6
9938: PUSH
9939: LD_EXP 30
9943: PUSH
9944: LD_EXP 32
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: ADD
9956: PUSH
9957: LD_INT -3
9959: PUSH
9960: LD_INT -5
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: ADD
9967: PUSH
9968: LD_EXP 39
9972: ADD
9973: PPUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 1
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 4
9986: PUSH
9987: LD_INT 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 0
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 42
10024: ST_TO_ADDR
// stop_talking := true ;
10025: LD_ADDR_OWVAR 56
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
10033: LD_EXP 26
10037: PPUSH
10038: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
10042: LD_EXP 26
10046: PPUSH
10047: LD_INT 123
10049: PPUSH
10050: LD_INT 98
10052: PPUSH
10053: CALL_OW 171
// for i in beriaBaseSquad do
10057: LD_ADDR_VAR 0 2
10061: PUSH
10062: LD_EXP 36
10066: PUSH
10067: FOR_IN
10068: IFFALSE 10143
// begin SetSide ( i , 3 ) ;
10070: LD_VAR 0 2
10074: PPUSH
10075: LD_INT 3
10077: PPUSH
10078: CALL_OW 235
// if not IsPlaced ( i ) then
10082: LD_VAR 0 2
10086: PPUSH
10087: CALL_OW 305
10091: NOT
10092: IFFALSE 10117
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 112
10101: PPUSH
10102: LD_INT 98
10104: PPUSH
10105: LD_INT 3
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 50
10115: GO 10141
// begin ComExit ( i ) ;
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL 53920 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
10126: LD_VAR 0 2
10130: PPUSH
10131: LD_INT 123
10133: PPUSH
10134: LD_INT 98
10136: PPUSH
10137: CALL_OW 171
// end ; end ;
10141: GO 10067
10143: POP
10144: POP
// stop_talking := false ;
10145: LD_ADDR_OWVAR 56
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10153: LD_INT 70
10155: PPUSH
10156: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
10160: LD_INT 110
10162: PPUSH
10163: LD_INT 97
10165: PPUSH
10166: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
10170: LD_EXP 28
10174: PUSH
10175: LD_EXP 28
10179: PUSH
10180: LD_EXP 36
10184: IN
10185: NOT
10186: AND
10187: IFFALSE 10209
// popovTeam := Join ( popovTeam , Belkov ) ;
10189: LD_ADDR_EXP 41
10193: PUSH
10194: LD_EXP 41
10198: PPUSH
10199: LD_EXP 28
10203: PPUSH
10204: CALL 53522 0 2
10208: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
10209: LD_EXP 27
10213: PUSH
10214: LD_EXP 27
10218: PUSH
10219: LD_EXP 36
10223: IN
10224: NOT
10225: AND
10226: IFFALSE 10248
// popovTeam := Join ( popovTeam , Gnyevko ) ;
10228: LD_ADDR_EXP 41
10232: PUSH
10233: LD_EXP 41
10237: PPUSH
10238: LD_EXP 27
10242: PPUSH
10243: CALL 53522 0 2
10247: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
10248: LD_EXP 29
10252: PUSH
10253: LD_EXP 29
10257: PUSH
10258: LD_EXP 36
10262: IN
10263: NOT
10264: AND
10265: IFFALSE 10287
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
10267: LD_ADDR_EXP 41
10271: PUSH
10272: LD_EXP 41
10276: PPUSH
10277: LD_EXP 29
10281: PPUSH
10282: CALL 53522 0 2
10286: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
10287: LD_EXP 31
10291: PUSH
10292: LD_EXP 31
10296: PUSH
10297: LD_EXP 36
10301: IN
10302: NOT
10303: AND
10304: IFFALSE 10326
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
10306: LD_ADDR_EXP 41
10310: PUSH
10311: LD_EXP 41
10315: PPUSH
10316: LD_EXP 31
10320: PPUSH
10321: CALL 53522 0 2
10325: ST_TO_ADDR
// for i in beriaTeam do
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_EXP 40
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10374
// if not i in beriaBaseSquad then
10339: LD_VAR 0 2
10343: PUSH
10344: LD_EXP 36
10348: IN
10349: NOT
10350: IFFALSE 10372
// popovTeam := Join ( popovTeam , i ) ;
10352: LD_ADDR_EXP 41
10356: PUSH
10357: LD_EXP 41
10361: PPUSH
10362: LD_VAR 0 2
10366: PPUSH
10367: CALL 53522 0 2
10371: ST_TO_ADDR
10372: GO 10336
10374: POP
10375: POP
// if popovTeam < 3 then
10376: LD_EXP 41
10380: PUSH
10381: LD_INT 3
10383: LESS
10384: IFFALSE 10462
// for i := Count ( popovTeam ) to 3 do
10386: LD_ADDR_VAR 0 2
10390: PUSH
10391: DOUBLE
10392: LD_EXP 41
10396: PPUSH
10397: CALL 17772 0 1
10401: DEC
10402: ST_TO_ADDR
10403: LD_INT 3
10405: PUSH
10406: FOR_TO
10407: IFFALSE 10460
// begin uc_side := 6 ;
10409: LD_ADDR_OWVAR 20
10413: PUSH
10414: LD_INT 6
10416: ST_TO_ADDR
// uc_nation := nation_russian ;
10417: LD_ADDR_OWVAR 21
10421: PUSH
10422: LD_INT 3
10424: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
10425: LD_INT 0
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
10438: LD_ADDR_EXP 41
10442: PUSH
10443: LD_EXP 41
10447: PPUSH
10448: CALL_OW 44
10452: PPUSH
10453: CALL 53522 0 2
10457: ST_TO_ADDR
// end ;
10458: GO 10406
10460: POP
10461: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
10462: LD_EXP 41
10466: PPUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 4
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 72
10481: NOT
10482: IFFALSE 10500
// SetClass ( popovTeam [ 1 ] , 4 ) ;
10484: LD_EXP 41
10488: PUSH
10489: LD_INT 1
10491: ARRAY
10492: PPUSH
10493: LD_INT 4
10495: PPUSH
10496: CALL_OW 336
// for i in popovTeam do
10500: LD_ADDR_VAR 0 2
10504: PUSH
10505: LD_EXP 41
10509: PUSH
10510: FOR_IN
10511: IFFALSE 10614
// begin if not GetClass ( i ) in [ 1 , 4 ] then
10513: LD_VAR 0 2
10517: PPUSH
10518: CALL_OW 257
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 4
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: IN
10533: NOT
10534: IFFALSE 10548
// SetClass ( i , class_soldier ) ;
10536: LD_VAR 0 2
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 336
// if not IsPlaced ( i ) then
10548: LD_VAR 0 2
10552: PPUSH
10553: CALL_OW 305
10557: NOT
10558: IFFALSE 10583
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
10560: LD_VAR 0 2
10564: PPUSH
10565: LD_INT 161
10567: PPUSH
10568: LD_INT 107
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: LD_INT 0
10576: PPUSH
10577: CALL_OW 50
10581: GO 10603
// if IsInUnit ( i ) then
10583: LD_VAR 0 2
10587: PPUSH
10588: CALL_OW 310
10592: IFFALSE 10603
// ComExitBuilding ( i ) ;
10594: LD_VAR 0 2
10598: PPUSH
10599: CALL_OW 122
// AddComHold ( i ) ;
10603: LD_VAR 0 2
10607: PPUSH
10608: CALL_OW 200
// end ;
10612: GO 10510
10614: POP
10615: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
10616: LD_ADDR_EXP 35
10620: PUSH
10621: LD_INT 22
10623: PUSH
10624: LD_INT 6
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PPUSH
10645: CALL_OW 69
10649: PUSH
10650: LD_EXP 30
10654: PUSH
10655: LD_EXP 32
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_EXP 41
10668: ADD
10669: DIFF
10670: ST_TO_ADDR
// for i in kirovBaseSquad do
10671: LD_ADDR_VAR 0 2
10675: PUSH
10676: LD_EXP 35
10680: PUSH
10681: FOR_IN
10682: IFFALSE 10813
// begin tmp := IsInUnit ( i ) ;
10684: LD_ADDR_VAR 0 4
10688: PUSH
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 310
10698: ST_TO_ADDR
// if not tmp then
10699: LD_VAR 0 4
10703: NOT
10704: IFFALSE 10708
// continue ;
10706: GO 10681
// case GetBType ( tmp ) of b_workshop :
10708: LD_VAR 0 4
10712: PPUSH
10713: CALL_OW 266
10717: PUSH
10718: LD_INT 2
10720: DOUBLE
10721: EQUAL
10722: IFTRUE 10726
10724: GO 10741
10726: POP
// SetClass ( i , class_mechanic ) ; b_lab :
10727: LD_VAR 0 2
10731: PPUSH
10732: LD_INT 3
10734: PPUSH
10735: CALL_OW 336
10739: GO 10811
10741: LD_INT 6
10743: DOUBLE
10744: EQUAL
10745: IFTRUE 10749
10747: GO 10764
10749: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
10750: LD_VAR 0 2
10754: PPUSH
10755: LD_INT 4
10757: PPUSH
10758: CALL_OW 336
10762: GO 10811
10764: LD_INT 4
10766: DOUBLE
10767: EQUAL
10768: IFTRUE 10772
10770: GO 10787
10772: POP
// SetClass ( i , class_soldier ) ; b_depot :
10773: LD_VAR 0 2
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 336
10785: GO 10811
10787: LD_INT 0
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 10810
10795: POP
// SetClass ( i , class_engineer ) ; end ;
10796: LD_VAR 0 2
10800: PPUSH
10801: LD_INT 2
10803: PPUSH
10804: CALL_OW 336
10808: GO 10811
10810: POP
// end ;
10811: GO 10681
10813: POP
10814: POP
// for c := 1 to 4 do
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: DOUBLE
10821: LD_INT 1
10823: DEC
10824: ST_TO_ADDR
10825: LD_INT 4
10827: PUSH
10828: FOR_TO
10829: IFFALSE 10920
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
10831: LD_EXP 35
10835: PPUSH
10836: LD_INT 25
10838: PUSH
10839: LD_VAR 0 3
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 72
10852: PUSH
10853: LD_INT 2
10855: LESS
10856: IFFALSE 10918
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_EXP 35
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: CALL 52026 0 2
10877: ST_TO_ADDR
// for i := 1 to 2 do
10878: LD_ADDR_VAR 0 2
10882: PUSH
10883: DOUBLE
10884: LD_INT 1
10886: DEC
10887: ST_TO_ADDR
10888: LD_INT 2
10890: PUSH
10891: FOR_TO
10892: IFFALSE 10916
// SetClass ( tmp [ i ] , c ) ;
10894: LD_VAR 0 4
10898: PUSH
10899: LD_VAR 0 2
10903: ARRAY
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: CALL_OW 336
10914: GO 10891
10916: POP
10917: POP
// end ;
10918: GO 10828
10920: POP
10921: POP
// wait ( 0 0$3 ) ;
10922: LD_INT 105
10924: PPUSH
10925: CALL_OW 67
// InGameOff ;
10929: CALL_OW 9
// gameStart := true ;
10933: LD_ADDR_EXP 7
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// Query ( QBriefing ) ;
10941: LD_STRING QBriefing
10943: PPUSH
10944: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
10948: LD_STRING M1
10950: PPUSH
10951: CALL_OW 337
// SaveForQuickRestart ;
10955: CALL_OW 22
// wait ( 0 0$5 ) ;
10959: LD_INT 175
10961: PPUSH
10962: CALL_OW 67
// ComExitBuilding ( Popov ) ;
10966: LD_EXP 32
10970: PPUSH
10971: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
10975: LD_EXP 32
10979: PPUSH
10980: LD_INT 142
10982: PPUSH
10983: LD_INT 64
10985: PPUSH
10986: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
10990: LD_EXP 41
10994: PPUSH
10995: LD_INT 142
10997: PPUSH
10998: LD_INT 64
11000: PPUSH
11001: CALL_OW 171
// end ;
11005: LD_VAR 0 1
11009: RET
// every 0 0$2 trigger allianceAttacked do
11010: LD_EXP 9
11014: IFFALSE 11053
11016: GO 11018
11018: DISABLE
// begin DialogueOn ;
11019: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11023: LD_EXP 30
11027: PPUSH
11028: LD_STRING DArestKur
11030: PPUSH
11031: CALL_OW 88
// dwait ( 0 0$1 ) ;
11035: LD_INT 35
11037: PPUSH
11038: CALL_OW 68
// YouLost ( SelfAttack ) ;
11042: LD_STRING SelfAttack
11044: PPUSH
11045: CALL_OW 104
// DialogueOff ;
11049: CALL_OW 7
// end ;
11053: END
// every 0 0$2 trigger youTookCratesFromKirov do
11054: LD_EXP 17
11058: IFFALSE 11121
11060: GO 11062
11062: DISABLE
// begin Query ( QTookCrates ) ;
11063: LD_STRING QTookCrates
11065: PPUSH
11066: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
11070: LD_INT 35
11072: PPUSH
11073: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
11077: LD_EXP 17
11081: PUSH
11082: LD_INT 3
11084: GREATEREQUAL
11085: IFFALSE 11070
// DialogueOn ;
11087: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11091: LD_EXP 30
11095: PPUSH
11096: LD_STRING DArestKur
11098: PPUSH
11099: CALL_OW 88
// dwait ( 0 0$1 ) ;
11103: LD_INT 35
11105: PPUSH
11106: CALL_OW 68
// YouLost ( TookCrates ) ;
11110: LD_STRING TookCrates
11112: PPUSH
11113: CALL_OW 104
// DialogueOff ;
11117: CALL_OW 7
// end ;
11121: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
11122: LD_INT 78
11124: PPUSH
11125: LD_INT 112
11127: PPUSH
11128: LD_INT 3
11130: PPUSH
11131: CALL_OW 440
11135: IFFALSE 11194
11137: GO 11139
11139: DISABLE
// begin foundOil := true ;
11140: LD_ADDR_EXP 10
11144: PUSH
11145: LD_INT 1
11147: ST_TO_ADDR
// if not IsOk ( Burlak ) then
11148: LD_EXP 26
11152: PPUSH
11153: CALL_OW 302
11157: NOT
11158: IFFALSE 11162
// exit ;
11160: GO 11194
// DialogueOn ;
11162: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
11166: LD_EXP 26
11170: PPUSH
11171: LD_STRING D2a-Bur-1
11173: PPUSH
11174: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
11178: LD_EXP 30
11182: PPUSH
11183: LD_STRING D2a-Kur-1
11185: PPUSH
11186: CALL_OW 94
// DialogueOff ;
11190: CALL_OW 7
// end ;
11194: END
// every 0 0$1 trigger hasKagan and hasOilTower do
11195: LD_EXP 12
11199: PUSH
11200: LD_EXP 14
11204: AND
11205: IFFALSE 11217
11207: GO 11209
11209: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
11210: LD_STRING M2
11212: PPUSH
11213: CALL_OW 337
// end ;
11217: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
11218: LD_INT 22
11220: PUSH
11221: LD_INT 3
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: LD_INT 57
11243: PUSH
11244: EMPTY
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PPUSH
11256: CALL_OW 69
11260: PUSH
11261: LD_INT 22
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 7
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 3
11283: PUSH
11284: LD_INT 57
11286: PUSH
11287: EMPTY
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: PPUSH
11299: CALL_OW 69
11303: OR
11304: PUSH
11305: LD_INT 22
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 30
11317: PUSH
11318: LD_INT 26
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: NOT
11334: AND
11335: PUSH
11336: LD_EXP 26
11340: PPUSH
11341: CALL_OW 302
11345: AND
11346: IFFALSE 11538
11348: GO 11350
11350: DISABLE
11351: LD_INT 0
11353: PPUSH
// begin DialogueOn ;
11354: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
11358: LD_EXP 26
11362: PPUSH
11363: LD_STRING D3aa-Bur-1
11365: PPUSH
11366: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
11370: LD_EXP 11
11374: PUSH
11375: LD_EXP 33
11379: PPUSH
11380: CALL_OW 302
11384: AND
11385: IFFALSE 11411
// begin sci := Scholtze ;
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_EXP 33
11396: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
11397: LD_EXP 33
11401: PPUSH
11402: LD_STRING D3aa-Sch-1
11404: PPUSH
11405: CALL_OW 88
// end else
11409: GO 11516
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11411: LD_ADDR_VAR 0 1
11415: PUSH
11416: LD_INT 22
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 50
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: LD_INT 25
11434: PUSH
11435: LD_INT 4
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 26
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: PUSH
11463: LD_EXP 45
11467: DIFF
11468: ST_TO_ADDR
// if sci then
11469: LD_VAR 0 1
11473: IFFALSE 11516
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 1
11484: PUSH
11485: LD_INT 1
11487: PPUSH
11488: LD_VAR 0 1
11492: PPUSH
11493: CALL 17772 0 1
11497: PPUSH
11498: CALL_OW 12
11502: ARRAY
11503: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: LD_STRING D3aa-Sci1-1
11511: PPUSH
11512: CALL_OW 88
// end ; end ; if sci then
11516: LD_VAR 0 1
11520: IFFALSE 11534
// Say ( Burlak , D3aa-Bur-2 ) ;
11522: LD_EXP 26
11526: PPUSH
11527: LD_STRING D3aa-Bur-2
11529: PPUSH
11530: CALL_OW 88
// DialogueOff ;
11534: CALL_OW 7
// end ;
11538: PPOPN 1
11540: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
11541: LD_EXP 55
11545: PPUSH
11546: LD_INT 101
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PPUSH
11556: CALL_OW 72
11560: PUSH
11561: LD_EXP 26
11565: PPUSH
11566: CALL_OW 302
11570: AND
11571: PUSH
11572: LD_EXP 13
11576: NOT
11577: AND
11578: IFFALSE 11888
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_EXP 55
11596: PPUSH
11597: LD_INT 101
11599: PUSH
11600: LD_INT 3
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 72
11611: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 50
11629: PUSH
11630: EMPTY
11631: LIST
11632: PUSH
11633: LD_INT 26
11635: PUSH
11636: LD_INT 1
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 45
11657: DIFF
11658: ST_TO_ADDR
// if not sol then
11659: LD_VAR 0 1
11663: NOT
11664: IFFALSE 11668
// exit ;
11666: GO 11888
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
11668: LD_ADDR_VAR 0 1
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_VAR 0 1
11685: PPUSH
11686: CALL 17772 0 1
11690: PPUSH
11691: CALL_OW 12
11695: ARRAY
11696: ST_TO_ADDR
// DialogueOn ;
11697: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
11701: LD_VAR 0 2
11705: PPUSH
11706: LD_EXP 26
11710: PPUSH
11711: CALL_OW 74
11715: PPUSH
11716: CALL_OW 87
// if not hasKagan then
11720: LD_EXP 12
11724: NOT
11725: IFFALSE 11753
// begin Say ( sol , D3a-RSol1-1 ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_STRING D3a-RSol1-1
11734: PPUSH
11735: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
11739: LD_EXP 26
11743: PPUSH
11744: LD_STRING D3a-Bur-1
11746: PPUSH
11747: CALL_OW 88
// end else
11751: GO 11884
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
11753: LD_VAR 0 1
11757: PPUSH
11758: LD_STRING D3a-RSol1-1
11760: PUSH
11761: LD_STRING D3b-RSol1-1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_VAR 0 1
11772: PUSH
11773: LD_INT 2
11775: MOD
11776: PUSH
11777: LD_INT 1
11779: PLUS
11780: ARRAY
11781: PPUSH
11782: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
11786: LD_EXP 27
11790: PPUSH
11791: CALL_OW 302
11795: PUSH
11796: LD_EXP 27
11800: PUSH
11801: LD_EXP 36
11805: IN
11806: AND
11807: IFFALSE 11823
// Say ( Gnyevko , D3b-Gny-1 ) else
11809: LD_EXP 27
11813: PPUSH
11814: LD_STRING D3b-Gny-1
11816: PPUSH
11817: CALL_OW 88
11821: GO 11872
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
11823: LD_EXP 31
11827: PPUSH
11828: CALL_OW 302
11832: PUSH
11833: LD_EXP 31
11837: PUSH
11838: LD_EXP 36
11842: IN
11843: AND
11844: IFFALSE 11860
// Say ( Kovalyuk , D3b-Kov-1 ) else
11846: LD_EXP 31
11850: PPUSH
11851: LD_STRING D3b-Kov-1
11853: PPUSH
11854: CALL_OW 88
11858: GO 11872
// Say ( sol , D3b-RSol1-2 ) ;
11860: LD_VAR 0 1
11864: PPUSH
11865: LD_STRING D3b-RSol1-2
11867: PPUSH
11868: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
11872: LD_EXP 26
11876: PPUSH
11877: LD_STRING D3b-Bur-1
11879: PPUSH
11880: CALL_OW 88
// end ; DialogueOff ;
11884: CALL_OW 7
// end ;
11888: PPOPN 2
11890: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
11891: LD_EXP 10
11895: IFFALSE 12896
11897: GO 11899
11899: DISABLE
11900: LD_INT 0
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
11908: LD_INT 1050
11910: PUSH
11911: LD_INT 350
11913: PPUSH
11914: LD_INT 2100
11916: PPUSH
11917: CALL_OW 12
11921: PLUS
11922: PPUSH
11923: CALL_OW 67
// case Difficulty of 1 :
11927: LD_OWVAR 67
11931: PUSH
11932: LD_INT 1
11934: DOUBLE
11935: EQUAL
11936: IFTRUE 11940
11938: GO 11951
11940: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
11941: LD_ADDR_VAR 0 4
11945: PUSH
11946: LD_INT 8
11948: ST_TO_ADDR
11949: GO 12078
11951: LD_INT 2
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 11993
11959: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
11960: LD_ADDR_VAR 0 4
11964: PUSH
11965: LD_INT 8
11967: PUSH
11968: LD_INT 7
11970: PUSH
11971: LD_INT 7
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_INT 3
11984: PPUSH
11985: CALL_OW 12
11989: ARRAY
11990: ST_TO_ADDR
11991: GO 12078
11993: LD_INT 3
11995: DOUBLE
11996: EQUAL
11997: IFTRUE 12001
11999: GO 12035
12001: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
12002: LD_ADDR_VAR 0 4
12006: PUSH
12007: LD_INT 7
12009: PUSH
12010: LD_INT 7
12012: PUSH
12013: LD_INT 6
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 1
12023: PPUSH
12024: LD_INT 3
12026: PPUSH
12027: CALL_OW 12
12031: ARRAY
12032: ST_TO_ADDR
12033: GO 12078
12035: LD_INT 4
12037: DOUBLE
12038: EQUAL
12039: IFTRUE 12043
12041: GO 12077
12043: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: LD_INT 7
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: LD_INT 6
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_INT 3
12068: PPUSH
12069: CALL_OW 12
12073: ARRAY
12074: ST_TO_ADDR
12075: GO 12078
12077: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
12078: LD_EXP 33
12082: PPUSH
12083: LD_VAR 0 4
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: CALL_OW 49
// ComHold ( Scholtze ) ;
12095: LD_EXP 33
12099: PPUSH
12100: CALL_OW 140
// wait ( 0 0$4 ) ;
12104: LD_INT 140
12106: PPUSH
12107: CALL_OW 67
// if See ( 3 , Scholtze ) then
12111: LD_INT 3
12113: PPUSH
12114: LD_EXP 33
12118: PPUSH
12119: CALL_OW 292
12123: IFFALSE 12207
// begin hasScholtze := true ;
12125: LD_ADDR_EXP 11
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
12133: LD_EXP 33
12137: PPUSH
12138: LD_INT 3
12140: PPUSH
12141: CALL_OW 235
// ComFree ( Scholtze ) ;
12145: LD_EXP 33
12149: PPUSH
12150: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
12154: LD_EXP 33
12158: PPUSH
12159: CALL_OW 87
// DialogueOn ;
12163: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
12167: LD_EXP 33
12171: PPUSH
12172: LD_STRING D4a-Sch-1
12174: PPUSH
12175: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
12179: LD_EXP 26
12183: PPUSH
12184: LD_STRING D4a-Bur-1
12186: PPUSH
12187: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
12191: LD_EXP 33
12195: PPUSH
12196: LD_STRING D4a-Sch-2
12198: PPUSH
12199: CALL_OW 88
// DialogueOff ;
12203: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
12207: LD_ADDR_VAR 0 2
12211: PUSH
12212: LD_EXP 33
12216: PPUSH
12217: CALL_OW 250
12221: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: LD_EXP 33
12231: PPUSH
12232: CALL_OW 251
12236: ST_TO_ADDR
// uc_side := 6 ;
12237: LD_ADDR_OWVAR 20
12241: PUSH
12242: LD_INT 6
12244: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
12245: LD_INT 1
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 380
// fake := CreateHuman ;
12258: LD_ADDR_VAR 0 1
12262: PUSH
12263: CALL_OW 44
12267: ST_TO_ADDR
// InGameOn ;
12268: CALL_OW 8
// DialogueOn ;
12272: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: LD_STRING D4-Sch-1
12283: PPUSH
12284: CALL 57731 0 2
// Say ( Burlak , D4-Bur-1 ) ;
12288: LD_EXP 26
12292: PPUSH
12293: LD_STRING D4-Bur-1
12295: PPUSH
12296: CALL_OW 88
// DialogueOff ;
12300: CALL_OW 7
// InGameOff ;
12304: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
12308: LD_STRING M4
12310: PPUSH
12311: CALL_OW 337
// canSearchForScholtze := true ;
12315: LD_ADDR_EXP 16
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// if dickensKilled then
12323: LD_EXP 15
12327: IFFALSE 12331
// exit ;
12329: GO 12896
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
12331: LD_INT 4200
12333: PUSH
12334: LD_INT 700
12336: PUSH
12337: LD_OWVAR 67
12341: MUL
12342: MINUS
12343: PPUSH
12344: CALL_OW 67
// uc_side := 1 ;
12348: LD_ADDR_OWVAR 20
12352: PUSH
12353: LD_INT 1
12355: ST_TO_ADDR
// uc_nation := nation_american ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 1
12363: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
12364: LD_ADDR_VAR 0 5
12368: PUSH
12369: LD_STRING Dickens
12371: PPUSH
12372: CALL_OW 25
12376: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
12377: LD_VAR 0 5
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: LD_OWVAR 67
12389: PPUSH
12390: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
12394: LD_INT 1
12396: PPUSH
12397: LD_OWVAR 67
12401: PPUSH
12402: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
12406: LD_ADDR_OWVAR 29
12410: PUSH
12411: LD_INT 10
12413: PUSH
12414: LD_INT 10
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: ST_TO_ADDR
// DickensFriend := CreateHuman ;
12421: LD_ADDR_VAR 0 6
12425: PUSH
12426: CALL_OW 44
12430: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
12431: LD_VAR 0 5
12435: PPUSH
12436: LD_INT 22
12438: PPUSH
12439: LD_INT 17
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 0
12447: PPUSH
12448: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
12452: LD_VAR 0 6
12456: PPUSH
12457: LD_INT 22
12459: PPUSH
12460: LD_INT 17
12462: PPUSH
12463: LD_INT 3
12465: PPUSH
12466: LD_INT 0
12468: PPUSH
12469: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
12473: LD_VAR 0 5
12477: PUSH
12478: LD_VAR 0 6
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: LD_VAR 0 2
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// if not IsOk ( Dickens ) then
12508: LD_VAR 0 5
12512: PPUSH
12513: CALL_OW 302
12517: NOT
12518: IFFALSE 12565
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
12520: LD_VAR 0 6
12524: PPUSH
12525: LD_INT 31
12527: PPUSH
12528: LD_INT 39
12530: PPUSH
12531: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
12535: LD_VAR 0 6
12539: PPUSH
12540: LD_INT 297
12542: PPUSH
12543: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
12547: LD_ADDR_EXP 54
12551: PUSH
12552: LD_EXP 54
12556: PUSH
12557: LD_VAR 0 6
12561: UNION
12562: ST_TO_ADDR
// exit ;
12563: GO 12896
// end ; if not IsOk ( DickensFriend ) then
12565: LD_VAR 0 6
12569: PPUSH
12570: CALL_OW 302
12574: NOT
12575: IFFALSE 12622
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
12577: LD_VAR 0 5
12581: PPUSH
12582: LD_INT 31
12584: PPUSH
12585: LD_INT 39
12587: PPUSH
12588: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
12592: LD_VAR 0 5
12596: PPUSH
12597: LD_INT 297
12599: PPUSH
12600: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
12604: LD_ADDR_EXP 54
12608: PUSH
12609: LD_EXP 54
12613: PUSH
12614: LD_VAR 0 5
12618: UNION
12619: ST_TO_ADDR
// exit ;
12620: GO 12896
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
12622: LD_INT 1
12624: PPUSH
12625: LD_EXP 33
12629: PPUSH
12630: CALL_OW 292
12634: PUSH
12635: LD_EXP 33
12639: PPUSH
12640: CALL_OW 256
12644: PUSH
12645: LD_INT 1000
12647: LESS
12648: AND
12649: PUSH
12650: LD_EXP 11
12654: NOT
12655: AND
12656: IFFALSE 12501
// canSearchForScholtze := false ;
12658: LD_ADDR_EXP 16
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
12666: LD_VAR 0 5
12670: PUSH
12671: LD_VAR 0 6
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: LD_EXP 33
12684: PPUSH
12685: CALL_OW 115
// wait ( 0 0$0.3 ) ;
12689: LD_INT 10
12691: PPUSH
12692: CALL_OW 67
// InGameOn ;
12696: CALL_OW 8
// DialogueOn ;
12700: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
12704: LD_VAR 0 2
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 3
12716: PPUSH
12717: LD_INT 10
12719: NEG
12720: PPUSH
12721: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
12739: LD_EXP 33
12743: PPUSH
12744: LD_STRING D4b-Sch-1
12746: PPUSH
12747: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
12751: LD_VAR 0 6
12755: PPUSH
12756: LD_STRING D4b-Sol1-1
12758: PPUSH
12759: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
12763: LD_VAR 0 5
12767: PPUSH
12768: LD_STRING D4b-Sol2-1
12770: PPUSH
12771: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
12775: LD_EXP 33
12779: PPUSH
12780: LD_STRING D4b-Sch-2
12782: PPUSH
12783: CALL_OW 88
// DialogueOff ;
12787: CALL_OW 7
// wait ( 0 0$0.3 ) ;
12791: LD_INT 10
12793: PPUSH
12794: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
12798: LD_VAR 0 2
12802: PPUSH
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
12815: LD_EXP 26
12819: PPUSH
12820: LD_STRING D4b-Bur-2
12822: PPUSH
12823: CALL_OW 88
// InGameOff ;
12827: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
12831: LD_STRING MScholtzeDel
12833: PPUSH
12834: CALL_OW 337
// KillUnit ( Scholtze ) ;
12838: LD_EXP 33
12842: PPUSH
12843: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
12847: LD_VAR 0 5
12851: PUSH
12852: LD_VAR 0 6
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: LD_INT 25
12863: PPUSH
12864: LD_INT 31
12866: PPUSH
12867: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
12871: LD_ADDR_EXP 54
12875: PUSH
12876: LD_EXP 54
12880: PUSH
12881: LD_VAR 0 5
12885: PUSH
12886: LD_VAR 0 6
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: UNION
12895: ST_TO_ADDR
// end ;
12896: PPOPN 6
12898: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
12899: LD_INT 3
12901: PPUSH
12902: LD_EXP 33
12906: PPUSH
12907: CALL_OW 292
12911: PUSH
12912: LD_EXP 16
12916: AND
12917: PUSH
12918: LD_EXP 11
12922: NOT
12923: AND
12924: IFFALSE 13009
12926: GO 12928
12928: DISABLE
// begin hasScholtze := true ;
12929: LD_ADDR_EXP 11
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
12937: LD_EXP 33
12941: PPUSH
12942: LD_INT 3
12944: PPUSH
12945: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
12949: LD_EXP 33
12953: PPUSH
12954: CALL_OW 87
// DialogueOn ;
12958: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
12962: LD_EXP 33
12966: PPUSH
12967: LD_STRING D4a-Sch-1
12969: PPUSH
12970: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
12974: LD_EXP 26
12978: PPUSH
12979: LD_STRING D4a-Bur-1
12981: PPUSH
12982: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
12986: LD_EXP 33
12990: PPUSH
12991: LD_STRING D4a-Sch-2
12993: PPUSH
12994: CALL_OW 88
// DialogueOff ;
12998: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
13002: LD_STRING MScholtzeOut
13004: PPUSH
13005: CALL_OW 337
// end ;
13009: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
13010: LD_INT 3
13012: PPUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 70
13041: IFFALSE 13116
13043: GO 13045
13045: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
13046: LD_INT 131
13048: PPUSH
13049: LD_INT 50
13051: PPUSH
13052: LD_INT 3
13054: PPUSH
13055: LD_INT 12
13057: PPUSH
13058: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
13062: LD_INT 35
13064: PPUSH
13065: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
13069: LD_INT 3
13071: PPUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 6
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 70
13100: NOT
13101: IFFALSE 13062
// RemoveSeeing ( 131 , 50 , 3 ) ;
13103: LD_INT 131
13105: PPUSH
13106: LD_INT 50
13108: PPUSH
13109: LD_INT 3
13111: PPUSH
13112: CALL_OW 331
// end ;
13116: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
13117: LD_EXP 18
13121: NOT
13122: PUSH
13123: LD_INT 9
13125: PPUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 21
13138: PUSH
13139: LD_INT 2
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 31
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 70
13165: AND
13166: PUSH
13167: LD_EXP 26
13171: PPUSH
13172: CALL_OW 302
13176: AND
13177: IFFALSE 13202
13179: GO 13181
13181: DISABLE
// begin DialogueOn ;
13182: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
13186: LD_EXP 26
13190: PPUSH
13191: LD_STRING D5a-Bur-1
13193: PPUSH
13194: CALL_OW 88
// DialogueOff ;
13198: CALL_OW 7
// end ;
13202: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
13203: LD_EXP 19
13207: PUSH
13208: LD_EXP 14
13212: AND
13213: IFFALSE 14870
13215: GO 13217
13217: DISABLE
13218: LD_INT 0
13220: PPUSH
13221: PPUSH
13222: PPUSH
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
13228: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
13229: LD_STRING M3
13231: PPUSH
13232: CALL_OW 337
// sendMechanics := false ;
13236: LD_ADDR_VAR 0 9
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13244: LD_INT 35
13246: PPUSH
13247: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13251: LD_ADDR_VAR 0 5
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 50
13278: PUSH
13279: EMPTY
13280: LIST
13281: PUSH
13282: LD_INT 23
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 69
13302: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13303: LD_ADDR_VAR 0 7
13307: PUSH
13308: LD_INT 22
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 1
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 23
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: PPUSH
13348: CALL 17772 0 1
13352: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13353: LD_VAR 0 5
13357: PUSH
13358: LD_VAR 0 7
13362: PUSH
13363: LD_EXP 21
13367: PLUS
13368: LESS
13369: IFFALSE 13402
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13371: LD_ADDR_OWVAR 47
13375: PUSH
13376: LD_STRING #Ru03-5
13378: PUSH
13379: LD_VAR 0 7
13383: PUSH
13384: LD_EXP 21
13388: PLUS
13389: PUSH
13390: LD_VAR 0 5
13394: MINUS
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: ST_TO_ADDR
13400: GO 13413
// display_strings := [ #Ru03-5a ] ;
13402: LD_ADDR_OWVAR 47
13406: PUSH
13407: LD_STRING #Ru03-5a
13409: PUSH
13410: EMPTY
13411: LIST
13412: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
13413: LD_ADDR_EXP 20
13417: PUSH
13418: LD_EXP 20
13422: PUSH
13423: LD_INT 35
13425: MINUS
13426: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
13427: LD_EXP 20
13431: PUSH
13432: LD_INT 0
13434: EQUAL
13435: IFFALSE 13244
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
13437: LD_VAR 0 5
13441: PUSH
13442: LD_VAR 0 7
13446: PUSH
13447: LD_EXP 21
13451: PLUS
13452: GREATEREQUAL
13453: IFFALSE 13486
// begin AddMedal ( Surplus , 1 ) ;
13455: LD_STRING Surplus
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
13465: LD_ADDR_VAR 0 8
13469: PUSH
13470: LD_INT 1
13472: PUSH
13473: LD_INT 2
13475: PUSH
13476: LD_INT 3
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: ST_TO_ADDR
// end else
13484: GO 13548
// if vehiclesOwned >= pepCount then
13486: LD_VAR 0 5
13490: PUSH
13491: LD_VAR 0 7
13495: GREATEREQUAL
13496: IFFALSE 13526
// begin AddMedal ( Surplus , - 1 ) ;
13498: LD_STRING Surplus
13500: PPUSH
13501: LD_INT 1
13503: NEG
13504: PPUSH
13505: CALL_OW 101
// points := [ 2 , 3 ] ;
13509: LD_ADDR_VAR 0 8
13513: PUSH
13514: LD_INT 2
13516: PUSH
13517: LD_INT 3
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: ST_TO_ADDR
// end else
13524: GO 13548
// begin AddMedal ( Surplus , - 2 ) ;
13526: LD_STRING Surplus
13528: PPUSH
13529: LD_INT 2
13531: NEG
13532: PPUSH
13533: CALL_OW 101
// points := [ 3 ] ;
13537: LD_ADDR_VAR 0 8
13541: PUSH
13542: LD_INT 3
13544: PUSH
13545: EMPTY
13546: LIST
13547: ST_TO_ADDR
// end ; InGameOn ;
13548: CALL_OW 8
// DialogueOn ;
13552: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
13556: LD_EXP 30
13560: PPUSH
13561: LD_STRING D5-Kur-1
13563: PPUSH
13564: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
13568: LD_ADDR_VAR 0 6
13572: PUSH
13573: LD_STRING QVehicles
13575: PPUSH
13576: LD_VAR 0 8
13580: PPUSH
13581: CALL_OW 98
13585: ST_TO_ADDR
// case q of 1 :
13586: LD_VAR 0 6
13590: PUSH
13591: LD_INT 1
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13642
13599: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
13600: LD_EXP 26
13604: PPUSH
13605: LD_STRING D6a-Bur-1
13607: PPUSH
13608: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
13612: LD_EXP 30
13616: PPUSH
13617: LD_STRING D6a-Kur-1
13619: PPUSH
13620: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
13624: LD_ADDR_EXP 23
13628: PUSH
13629: LD_INT 4200
13631: ST_TO_ADDR
// sendMechanics := true ;
13632: LD_ADDR_VAR 0 9
13636: PUSH
13637: LD_INT 1
13639: ST_TO_ADDR
// end ; 2 :
13640: GO 13737
13642: LD_INT 2
13644: DOUBLE
13645: EQUAL
13646: IFTRUE 13650
13648: GO 13693
13650: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING D6b-Bur-1
13658: PPUSH
13659: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
13663: LD_EXP 30
13667: PPUSH
13668: LD_STRING D6b-Kur-1
13670: PPUSH
13671: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
13675: LD_ADDR_EXP 23
13679: PUSH
13680: LD_INT 6300
13682: ST_TO_ADDR
// sendMechanics := true ;
13683: LD_ADDR_VAR 0 9
13687: PUSH
13688: LD_INT 1
13690: ST_TO_ADDR
// end ; 3 :
13691: GO 13737
13693: LD_INT 3
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13736
13701: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
13702: LD_EXP 26
13706: PPUSH
13707: LD_STRING D6c-Bur-1
13709: PPUSH
13710: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
13714: LD_EXP 30
13718: PPUSH
13719: LD_STRING D6c-Kur-1
13721: PPUSH
13722: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
13726: LD_ADDR_EXP 20
13730: PUSH
13731: LD_INT 14700
13733: ST_TO_ADDR
// end ; end ;
13734: GO 13737
13736: POP
// DialogueOff ;
13737: CALL_OW 7
// InGameOff ;
13741: CALL_OW 9
// if q = 3 then
13745: LD_VAR 0 6
13749: PUSH
13750: LD_INT 3
13752: EQUAL
13753: IFFALSE 14025
// begin repeat wait ( 0 0$1 ) ;
13755: LD_INT 35
13757: PPUSH
13758: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13762: LD_ADDR_VAR 0 5
13766: PUSH
13767: LD_INT 22
13769: PUSH
13770: LD_INT 3
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 50
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: LD_INT 23
13795: PUSH
13796: LD_INT 3
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13814: LD_ADDR_VAR 0 7
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 21
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 23
13841: PUSH
13842: LD_INT 3
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: PPUSH
13854: CALL_OW 69
13858: PPUSH
13859: CALL 17772 0 1
13863: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13864: LD_VAR 0 5
13868: PUSH
13869: LD_VAR 0 7
13873: PUSH
13874: LD_EXP 21
13878: PLUS
13879: LESS
13880: IFFALSE 13913
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13882: LD_ADDR_OWVAR 47
13886: PUSH
13887: LD_STRING #Ru03-5
13889: PUSH
13890: LD_VAR 0 7
13894: PUSH
13895: LD_EXP 21
13899: PLUS
13900: PUSH
13901: LD_VAR 0 5
13905: MINUS
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: ST_TO_ADDR
13911: GO 13924
// display_strings := [ #Ru03-5a ] ;
13913: LD_ADDR_OWVAR 47
13917: PUSH
13918: LD_STRING #Ru03-5a
13920: PUSH
13921: EMPTY
13922: LIST
13923: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
13924: LD_ADDR_EXP 20
13928: PUSH
13929: LD_EXP 20
13933: PUSH
13934: LD_INT 35
13936: MINUS
13937: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
13938: LD_EXP 20
13942: PUSH
13943: LD_INT 0
13945: EQUAL
13946: IFFALSE 13755
// if vehiclesOwned < requiredVehiclesAmount then
13948: LD_VAR 0 5
13952: PUSH
13953: LD_EXP 21
13957: LESS
13958: IFFALSE 13989
// begin DialogueOn ;
13960: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
13964: LD_EXP 30
13968: PPUSH
13969: LD_STRING D6d-Kur-1
13971: PPUSH
13972: CALL_OW 94
// YouLost ( Vehicles ) ;
13976: LD_STRING Vehicles
13978: PPUSH
13979: CALL_OW 104
// DialogueOff ;
13983: CALL_OW 7
// exit ;
13987: GO 14870
// end ; DialogueOn ;
13989: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING D6c-Kur-2
14000: PPUSH
14001: CALL_OW 94
// DialogueOff ;
14005: CALL_OW 7
// sendMechanics := true ;
14009: LD_ADDR_VAR 0 9
14013: PUSH
14014: LD_INT 1
14016: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
14017: LD_ADDR_EXP 23
14021: PUSH
14022: LD_INT 4200
14024: ST_TO_ADDR
// end ; display_strings := [ ] ;
14025: LD_ADDR_OWVAR 47
14029: PUSH
14030: EMPTY
14031: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
14032: LD_STRING M5
14034: PPUSH
14035: CALL_OW 337
// if sendMechanics then
14039: LD_VAR 0 9
14043: IFFALSE 14870
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_INT 6
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 25
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: LD_INT 120
14085: PUSH
14086: LD_INT 7
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
14108: LD_VAR 0 3
14112: PPUSH
14113: CALL 17772 0 1
14117: PUSH
14118: LD_EXP 21
14122: LESS
14123: IFFALSE 14314
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: DOUBLE
14131: LD_VAR 0 3
14135: PPUSH
14136: CALL 17772 0 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_EXP 21
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14249
// begin uc_side := 6 ;
14150: LD_ADDR_OWVAR 20
14154: PUSH
14155: LD_INT 6
14157: ST_TO_ADDR
// uc_nation := nation_russian ;
14158: LD_ADDR_OWVAR 21
14162: PUSH
14163: LD_INT 3
14165: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
14166: LD_INT 0
14168: PPUSH
14169: LD_INT 3
14171: PPUSH
14172: CALL_OW 383
// un := CreateHuman ;
14176: LD_ADDR_VAR 0 2
14180: PUSH
14181: CALL_OW 44
14185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14186: LD_INT 35
14188: PPUSH
14189: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 14
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
14208: IFFALSE 14186
// ComMoveXY ( un , 193 , 135 ) ;
14210: LD_VAR 0 2
14214: PPUSH
14215: LD_INT 193
14217: PPUSH
14218: LD_INT 135
14220: PPUSH
14221: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
14225: LD_VAR 0 2
14229: PPUSH
14230: LD_INT 159
14232: PPUSH
14233: LD_INT 106
14235: PPUSH
14236: CALL_OW 171
// wait ( 0 0$1 ) ;
14240: LD_INT 35
14242: PPUSH
14243: CALL_OW 67
// end ;
14247: GO 14147
14249: POP
14250: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 6
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 25
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: LD_INT 120
14291: PUSH
14292: LD_INT 7
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
14314: LD_ADDR_EXP 35
14318: PUSH
14319: LD_EXP 35
14323: PUSH
14324: LD_VAR 0 3
14328: DIFF
14329: ST_TO_ADDR
// vehicles := [ ] ;
14330: LD_ADDR_VAR 0 4
14334: PUSH
14335: EMPTY
14336: ST_TO_ADDR
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
14337: LD_ADDR_VAR 0 5
14341: PUSH
14342: LD_INT 22
14344: PUSH
14345: LD_INT 3
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 50
14364: PUSH
14365: EMPTY
14366: LIST
14367: PUSH
14368: LD_INT 23
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: DOUBLE
14395: LD_INT 1
14397: DEC
14398: ST_TO_ADDR
14399: LD_EXP 21
14403: PUSH
14404: FOR_TO
14405: IFFALSE 14488
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
14407: LD_VAR 0 5
14411: PUSH
14412: LD_VAR 0 1
14416: ARRAY
14417: PPUSH
14418: CALL_OW 311
14422: PPUSH
14423: CALL 53920 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
14427: LD_VAR 0 5
14431: PUSH
14432: LD_VAR 0 1
14436: ARRAY
14437: PPUSH
14438: LD_INT 6
14440: PPUSH
14441: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
14445: LD_ADDR_VAR 0 4
14449: PUSH
14450: LD_VAR 0 4
14454: PPUSH
14455: LD_VAR 0 5
14459: PUSH
14460: LD_VAR 0 1
14464: ARRAY
14465: PPUSH
14466: CALL 53522 0 2
14470: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
14471: LD_VAR 0 3
14475: PUSH
14476: LD_VAR 0 1
14480: ARRAY
14481: PPUSH
14482: CALL 53920 0 1
// end ;
14486: GO 14404
14488: POP
14489: POP
// if not vehicles then
14490: LD_VAR 0 4
14494: NOT
14495: IFFALSE 14499
// exit ;
14497: GO 14870
// kirovAttackVehicles := kirovVehicles union vehicles ;
14499: LD_ADDR_EXP 47
14503: PUSH
14504: LD_EXP 46
14508: PUSH
14509: LD_VAR 0 4
14513: UNION
14514: ST_TO_ADDR
// kirovVehicles := [ ] ;
14515: LD_ADDR_EXP 46
14519: PUSH
14520: EMPTY
14521: ST_TO_ADDR
// for i in kirovAttackVehicles do
14522: LD_ADDR_VAR 0 1
14526: PUSH
14527: LD_EXP 47
14531: PUSH
14532: FOR_IN
14533: IFFALSE 14549
// SetTag ( i , 0 ) ;
14535: LD_VAR 0 1
14539: PPUSH
14540: LD_INT 0
14542: PPUSH
14543: CALL_OW 109
14547: GO 14532
14549: POP
14550: POP
// repeat wait ( 0 0$3 ) ;
14551: LD_INT 105
14553: PPUSH
14554: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_INT 22
14565: PUSH
14566: LD_INT 6
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 25
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 55
14598: PUSH
14599: EMPTY
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: LD_INT 120
14611: PUSH
14612: LD_INT 7
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14635: LD_ADDR_VAR 0 4
14639: PUSH
14640: LD_EXP 47
14644: PPUSH
14645: LD_INT 58
14647: PUSH
14648: EMPTY
14649: LIST
14650: PPUSH
14651: CALL_OW 72
14655: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
14656: LD_ADDR_VAR 0 1
14660: PUSH
14661: DOUBLE
14662: LD_INT 1
14664: DEC
14665: ST_TO_ADDR
14666: LD_VAR 0 4
14670: PPUSH
14671: CALL 17772 0 1
14675: PUSH
14676: FOR_TO
14677: IFFALSE 14719
// if i <= tmp then
14679: LD_VAR 0 1
14683: PUSH
14684: LD_VAR 0 3
14688: LESSEQUAL
14689: IFFALSE 14717
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
14691: LD_VAR 0 3
14695: PUSH
14696: LD_VAR 0 1
14700: ARRAY
14701: PPUSH
14702: LD_VAR 0 4
14706: PUSH
14707: LD_VAR 0 1
14711: ARRAY
14712: PPUSH
14713: CALL_OW 120
14717: GO 14676
14719: POP
14720: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14721: LD_EXP 47
14725: PPUSH
14726: LD_INT 58
14728: PUSH
14729: EMPTY
14730: LIST
14731: PPUSH
14732: CALL_OW 72
14736: NOT
14737: IFFALSE 14551
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 6
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: LD_INT 3
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: LD_INT 120
14769: PUSH
14770: LD_INT 7
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 3
14783: PUSH
14784: LD_INT 55
14786: PUSH
14787: EMPTY
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: ST_TO_ADDR
// for i in tmp do
14805: LD_ADDR_VAR 0 1
14809: PUSH
14810: LD_VAR 0 3
14814: PUSH
14815: FOR_IN
14816: IFFALSE 14853
// if not i in kirovBaseSquad then
14818: LD_VAR 0 1
14822: PUSH
14823: LD_EXP 35
14827: IN
14828: NOT
14829: IFFALSE 14851
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
14831: LD_ADDR_EXP 35
14835: PUSH
14836: LD_EXP 35
14840: PPUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL 53522 0 2
14850: ST_TO_ADDR
14851: GO 14815
14853: POP
14854: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
14855: LD_EXP 47
14859: PPUSH
14860: LD_INT 71
14862: PPUSH
14863: LD_INT 36
14865: PPUSH
14866: CALL_OW 111
// end ; end ;
14870: PPOPN 9
14872: END
// every 0 0$1 trigger timeToAttackOnOmicron do
14873: LD_EXP 23
14877: IFFALSE 15307
14879: GO 14881
14881: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
14882: LD_INT 16
14884: PPUSH
14885: LD_INT 1
14887: PPUSH
14888: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
14899: LD_INT 35
14901: PPUSH
14902: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
14906: LD_ADDR_OWVAR 47
14910: PUSH
14911: LD_STRING #Ru03-1
14913: PUSH
14914: LD_EXP 23
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
14923: LD_ADDR_EXP 23
14927: PUSH
14928: LD_EXP 23
14932: PUSH
14933: LD_INT 35
14935: MINUS
14936: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
14937: LD_EXP 23
14941: PUSH
14942: LD_INT 0
14944: EQUAL
14945: IFFALSE 14899
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
14947: LD_INT 16
14949: PPUSH
14950: LD_INT 22
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: LD_INT 58
14975: PUSH
14976: EMPTY
14977: LIST
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 71
14992: PUSH
14993: LD_INT 16
14995: PPUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 3
15018: PUSH
15019: LD_INT 55
15021: PUSH
15022: EMPTY
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: LIST
15033: PPUSH
15034: CALL_OW 71
15038: OR
15039: IFFALSE 15220
// begin DialogueOn ;
15041: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
15045: LD_EXP 30
15049: PPUSH
15050: LD_STRING D7a-Kur-1
15052: PPUSH
15053: CALL_OW 94
// DialogueOff ;
15057: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
15061: LD_ADDR_EXP 23
15065: PUSH
15066: LD_INT 4200
15068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15069: LD_INT 35
15071: PPUSH
15072: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
15076: LD_ADDR_OWVAR 47
15080: PUSH
15081: LD_STRING #Ru03-2
15083: PUSH
15084: LD_EXP 23
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
15093: LD_ADDR_EXP 23
15097: PUSH
15098: LD_EXP 23
15102: PUSH
15103: LD_INT 35
15105: MINUS
15106: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
15107: LD_EXP 23
15111: PUSH
15112: LD_INT 0
15114: EQUAL
15115: IFFALSE 15069
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
15117: LD_INT 16
15119: PPUSH
15120: LD_INT 22
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 21
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 3
15142: PUSH
15143: LD_INT 58
15145: PUSH
15146: EMPTY
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 71
15162: PUSH
15163: LD_INT 16
15165: PPUSH
15166: LD_INT 22
15168: PUSH
15169: LD_INT 3
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 1
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 3
15188: PUSH
15189: LD_INT 55
15191: PUSH
15192: EMPTY
15193: LIST
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PPUSH
15204: CALL_OW 71
15208: OR
15209: IFFALSE 15220
// begin YouLost ( Delay ) ;
15211: LD_STRING Delay
15213: PPUSH
15214: CALL_OW 104
// exit ;
15218: GO 15307
// end ; end ; display_strings := [ ] ;
15220: LD_ADDR_OWVAR 47
15224: PUSH
15225: EMPTY
15226: ST_TO_ADDR
// allowedToAttackOmicron := true ;
15227: LD_ADDR_EXP 13
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// canCaptureKirovVehs := true ;
15235: LD_ADDR_EXP 22
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// retreatToKirovAllowed := false ;
15243: LD_ADDR_EXP 24
15247: PUSH
15248: LD_INT 0
15250: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
15251: LD_INT 16
15253: PPUSH
15254: LD_INT 0
15256: PPUSH
15257: CALL_OW 424
// DialogueOn ;
15261: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
15265: LD_EXP 26
15269: PPUSH
15270: LD_STRING D7-Bur-1
15272: PPUSH
15273: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
15277: LD_EXP 30
15281: PPUSH
15282: LD_STRING D7-Kur-1
15284: PPUSH
15285: CALL_OW 94
// DialogueOff ;
15289: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
15293: LD_STRING M5a
15295: PPUSH
15296: CALL_OW 337
// Query ( QRefuel ) ;
15300: LD_STRING QRefuel
15302: PPUSH
15303: CALL_OW 97
// end ;
15307: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
15308: LD_EXP 24
15312: NOT
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_INT 3
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 91
15326: PUSH
15327: LD_EXP 42
15331: PUSH
15332: LD_INT 16
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 3
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 58
15358: PUSH
15359: EMPTY
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 3
15373: PUSH
15374: LD_INT 21
15376: PUSH
15377: LD_INT 3
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: AND
15399: IFFALSE 15550
15401: GO 15403
15403: DISABLE
15404: LD_INT 0
15406: PPUSH
15407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15408: LD_ADDR_VAR 0 2
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 91
15425: PUSH
15426: LD_EXP 42
15430: PUSH
15431: LD_INT 16
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 58
15457: PUSH
15458: EMPTY
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 21
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 69
15497: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
15498: LD_VAR 0 2
15502: PPUSH
15503: CALL_OW 87
// InGameOn ;
15507: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_INT 70
15518: PPUSH
15519: LD_INT 33
15521: PPUSH
15522: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
15526: LD_EXP 30
15530: PPUSH
15531: LD_STRING D12-Kur-1
15533: PPUSH
15534: CALL_OW 94
// InGameOff ;
15538: CALL_OW 9
// wait ( 0 0$2 ) ;
15542: LD_INT 70
15544: PPUSH
15545: CALL_OW 67
// enable ;
15549: ENABLE
// end ; end_of_file
15550: PPOPN 2
15552: END
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
15553: LD_EXP 8
15557: NOT
15558: IFFALSE 15585
15560: GO 15562
15562: DISABLE
// begin enable ;
15563: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
15564: LD_INT 1
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 12
15574: PPUSH
15575: LD_INT 13
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: CALL_OW 55
// end ; end_of_file
15585: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
// if exist_mode then
15590: LD_VAR 0 2
15594: IFFALSE 15640
// begin unit := CreateCharacter ( prefix & ident ) ;
15596: LD_ADDR_VAR 0 5
15600: PUSH
15601: LD_VAR 0 3
15605: PUSH
15606: LD_VAR 0 1
15610: STR
15611: PPUSH
15612: CALL_OW 34
15616: ST_TO_ADDR
// if unit then
15617: LD_VAR 0 5
15621: IFFALSE 15638
// DeleteCharacters ( prefix & ident ) ;
15623: LD_VAR 0 3
15627: PUSH
15628: LD_VAR 0 1
15632: STR
15633: PPUSH
15634: CALL_OW 40
// end else
15638: GO 15655
// unit := NewCharacter ( ident ) ;
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 25
15654: ST_TO_ADDR
// result := unit ;
15655: LD_ADDR_VAR 0 4
15659: PUSH
15660: LD_VAR 0 5
15664: ST_TO_ADDR
// end ;
15665: LD_VAR 0 4
15669: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// if exist_mode then
15674: LD_VAR 0 2
15678: IFFALSE 15703
// unit := CreateCharacter ( prefix & ident ) else
15680: LD_ADDR_VAR 0 5
15684: PUSH
15685: LD_VAR 0 3
15689: PUSH
15690: LD_VAR 0 1
15694: STR
15695: PPUSH
15696: CALL_OW 34
15700: ST_TO_ADDR
15701: GO 15718
// unit := NewCharacter ( ident ) ;
15703: LD_ADDR_VAR 0 5
15707: PUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 25
15717: ST_TO_ADDR
// result := unit ;
15718: LD_ADDR_VAR 0 4
15722: PUSH
15723: LD_VAR 0 5
15727: ST_TO_ADDR
// end ;
15728: LD_VAR 0 4
15732: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15733: LD_INT 0
15735: PPUSH
15736: PPUSH
// if not side or not nation then
15737: LD_VAR 0 1
15741: NOT
15742: PUSH
15743: LD_VAR 0 2
15747: NOT
15748: OR
15749: IFFALSE 15753
// exit ;
15751: GO 16521
// case nation of nation_american :
15753: LD_VAR 0 2
15757: PUSH
15758: LD_INT 1
15760: DOUBLE
15761: EQUAL
15762: IFTRUE 15766
15764: GO 15980
15766: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15767: LD_ADDR_VAR 0 4
15771: PUSH
15772: LD_INT 35
15774: PUSH
15775: LD_INT 45
15777: PUSH
15778: LD_INT 46
15780: PUSH
15781: LD_INT 47
15783: PUSH
15784: LD_INT 82
15786: PUSH
15787: LD_INT 83
15789: PUSH
15790: LD_INT 84
15792: PUSH
15793: LD_INT 85
15795: PUSH
15796: LD_INT 86
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 6
15807: PUSH
15808: LD_INT 15
15810: PUSH
15811: LD_INT 16
15813: PUSH
15814: LD_INT 7
15816: PUSH
15817: LD_INT 12
15819: PUSH
15820: LD_INT 13
15822: PUSH
15823: LD_INT 10
15825: PUSH
15826: LD_INT 14
15828: PUSH
15829: LD_INT 20
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_INT 25
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: LD_INT 27
15846: PUSH
15847: LD_INT 36
15849: PUSH
15850: LD_INT 69
15852: PUSH
15853: LD_INT 39
15855: PUSH
15856: LD_INT 34
15858: PUSH
15859: LD_INT 40
15861: PUSH
15862: LD_INT 48
15864: PUSH
15865: LD_INT 49
15867: PUSH
15868: LD_INT 50
15870: PUSH
15871: LD_INT 51
15873: PUSH
15874: LD_INT 52
15876: PUSH
15877: LD_INT 53
15879: PUSH
15880: LD_INT 54
15882: PUSH
15883: LD_INT 55
15885: PUSH
15886: LD_INT 56
15888: PUSH
15889: LD_INT 57
15891: PUSH
15892: LD_INT 58
15894: PUSH
15895: LD_INT 59
15897: PUSH
15898: LD_INT 60
15900: PUSH
15901: LD_INT 61
15903: PUSH
15904: LD_INT 62
15906: PUSH
15907: LD_INT 80
15909: PUSH
15910: LD_INT 82
15912: PUSH
15913: LD_INT 83
15915: PUSH
15916: LD_INT 84
15918: PUSH
15919: LD_INT 85
15921: PUSH
15922: LD_INT 86
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
15978: GO 16445
15980: LD_INT 2
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 16214
15988: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15989: LD_ADDR_VAR 0 4
15993: PUSH
15994: LD_INT 35
15996: PUSH
15997: LD_INT 45
15999: PUSH
16000: LD_INT 46
16002: PUSH
16003: LD_INT 47
16005: PUSH
16006: LD_INT 82
16008: PUSH
16009: LD_INT 83
16011: PUSH
16012: LD_INT 84
16014: PUSH
16015: LD_INT 85
16017: PUSH
16018: LD_INT 87
16020: PUSH
16021: LD_INT 70
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 11
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: LD_INT 4
16035: PUSH
16036: LD_INT 5
16038: PUSH
16039: LD_INT 6
16041: PUSH
16042: LD_INT 15
16044: PUSH
16045: LD_INT 18
16047: PUSH
16048: LD_INT 7
16050: PUSH
16051: LD_INT 17
16053: PUSH
16054: LD_INT 8
16056: PUSH
16057: LD_INT 20
16059: PUSH
16060: LD_INT 21
16062: PUSH
16063: LD_INT 22
16065: PUSH
16066: LD_INT 72
16068: PUSH
16069: LD_INT 26
16071: PUSH
16072: LD_INT 69
16074: PUSH
16075: LD_INT 39
16077: PUSH
16078: LD_INT 40
16080: PUSH
16081: LD_INT 41
16083: PUSH
16084: LD_INT 42
16086: PUSH
16087: LD_INT 43
16089: PUSH
16090: LD_INT 48
16092: PUSH
16093: LD_INT 49
16095: PUSH
16096: LD_INT 50
16098: PUSH
16099: LD_INT 51
16101: PUSH
16102: LD_INT 52
16104: PUSH
16105: LD_INT 53
16107: PUSH
16108: LD_INT 54
16110: PUSH
16111: LD_INT 55
16113: PUSH
16114: LD_INT 56
16116: PUSH
16117: LD_INT 60
16119: PUSH
16120: LD_INT 61
16122: PUSH
16123: LD_INT 62
16125: PUSH
16126: LD_INT 66
16128: PUSH
16129: LD_INT 67
16131: PUSH
16132: LD_INT 68
16134: PUSH
16135: LD_INT 81
16137: PUSH
16138: LD_INT 82
16140: PUSH
16141: LD_INT 83
16143: PUSH
16144: LD_INT 84
16146: PUSH
16147: LD_INT 85
16149: PUSH
16150: LD_INT 87
16152: PUSH
16153: LD_INT 88
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: ST_TO_ADDR
16212: GO 16445
16214: LD_INT 3
16216: DOUBLE
16217: EQUAL
16218: IFTRUE 16222
16220: GO 16444
16222: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16223: LD_ADDR_VAR 0 4
16227: PUSH
16228: LD_INT 46
16230: PUSH
16231: LD_INT 47
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 82
16242: PUSH
16243: LD_INT 83
16245: PUSH
16246: LD_INT 84
16248: PUSH
16249: LD_INT 85
16251: PUSH
16252: LD_INT 86
16254: PUSH
16255: LD_INT 11
16257: PUSH
16258: LD_INT 9
16260: PUSH
16261: LD_INT 20
16263: PUSH
16264: LD_INT 19
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 24
16272: PUSH
16273: LD_INT 22
16275: PUSH
16276: LD_INT 25
16278: PUSH
16279: LD_INT 28
16281: PUSH
16282: LD_INT 29
16284: PUSH
16285: LD_INT 30
16287: PUSH
16288: LD_INT 31
16290: PUSH
16291: LD_INT 37
16293: PUSH
16294: LD_INT 38
16296: PUSH
16297: LD_INT 32
16299: PUSH
16300: LD_INT 27
16302: PUSH
16303: LD_INT 33
16305: PUSH
16306: LD_INT 69
16308: PUSH
16309: LD_INT 39
16311: PUSH
16312: LD_INT 34
16314: PUSH
16315: LD_INT 40
16317: PUSH
16318: LD_INT 71
16320: PUSH
16321: LD_INT 23
16323: PUSH
16324: LD_INT 44
16326: PUSH
16327: LD_INT 48
16329: PUSH
16330: LD_INT 49
16332: PUSH
16333: LD_INT 50
16335: PUSH
16336: LD_INT 51
16338: PUSH
16339: LD_INT 52
16341: PUSH
16342: LD_INT 53
16344: PUSH
16345: LD_INT 54
16347: PUSH
16348: LD_INT 55
16350: PUSH
16351: LD_INT 56
16353: PUSH
16354: LD_INT 57
16356: PUSH
16357: LD_INT 58
16359: PUSH
16360: LD_INT 59
16362: PUSH
16363: LD_INT 63
16365: PUSH
16366: LD_INT 64
16368: PUSH
16369: LD_INT 65
16371: PUSH
16372: LD_INT 82
16374: PUSH
16375: LD_INT 83
16377: PUSH
16378: LD_INT 84
16380: PUSH
16381: LD_INT 85
16383: PUSH
16384: LD_INT 86
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: ST_TO_ADDR
16442: GO 16445
16444: POP
// if state > - 1 and state < 3 then
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 1
16452: NEG
16453: GREATER
16454: PUSH
16455: LD_VAR 0 3
16459: PUSH
16460: LD_INT 3
16462: LESS
16463: AND
16464: IFFALSE 16521
// for i in result do
16466: LD_ADDR_VAR 0 5
16470: PUSH
16471: LD_VAR 0 4
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16519
// if GetTech ( i , side ) <> state then
16479: LD_VAR 0 5
16483: PPUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 321
16493: PUSH
16494: LD_VAR 0 3
16498: NONEQUAL
16499: IFFALSE 16517
// result := result diff i ;
16501: LD_ADDR_VAR 0 4
16505: PUSH
16506: LD_VAR 0 4
16510: PUSH
16511: LD_VAR 0 5
16515: DIFF
16516: ST_TO_ADDR
16517: GO 16476
16519: POP
16520: POP
// end ;
16521: LD_VAR 0 4
16525: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16526: LD_INT 0
16528: PPUSH
16529: PPUSH
16530: PPUSH
// result := true ;
16531: LD_ADDR_VAR 0 3
16535: PUSH
16536: LD_INT 1
16538: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16539: LD_ADDR_VAR 0 5
16543: PUSH
16544: LD_VAR 0 2
16548: PPUSH
16549: CALL_OW 480
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 5
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16612
// for i in tmp do
16563: LD_ADDR_VAR 0 4
16567: PUSH
16568: LD_VAR 0 5
16572: PUSH
16573: FOR_IN
16574: IFFALSE 16610
// if GetTech ( i , side ) <> state_researched then
16576: LD_VAR 0 4
16580: PPUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 321
16590: PUSH
16591: LD_INT 2
16593: NONEQUAL
16594: IFFALSE 16608
// begin result := false ;
16596: LD_ADDR_VAR 0 3
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// exit ;
16604: POP
16605: POP
16606: GO 16612
// end ;
16608: GO 16573
16610: POP
16611: POP
// end ;
16612: LD_VAR 0 3
16616: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16617: LD_INT 0
16619: PPUSH
16620: PPUSH
16621: PPUSH
16622: PPUSH
16623: PPUSH
16624: PPUSH
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
16630: PPUSH
16631: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16632: LD_VAR 0 1
16636: NOT
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 257
16647: PUSH
16648: LD_INT 9
16650: NONEQUAL
16651: OR
16652: IFFALSE 16656
// exit ;
16654: GO 17229
// side := GetSide ( unit ) ;
16656: LD_ADDR_VAR 0 9
16660: PUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: ST_TO_ADDR
// tech_space := tech_spacanom ;
16671: LD_ADDR_VAR 0 12
16675: PUSH
16676: LD_INT 29
16678: ST_TO_ADDR
// tech_time := tech_taurad ;
16679: LD_ADDR_VAR 0 13
16683: PUSH
16684: LD_INT 28
16686: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16687: LD_ADDR_VAR 0 11
16691: PUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 310
16701: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16702: LD_VAR 0 11
16706: PPUSH
16707: CALL_OW 247
16711: PUSH
16712: LD_INT 2
16714: EQUAL
16715: IFFALSE 16719
// exit ;
16717: GO 17229
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16719: LD_ADDR_VAR 0 8
16723: PUSH
16724: LD_INT 81
16726: PUSH
16727: LD_VAR 0 9
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 3
16738: PUSH
16739: LD_INT 21
16741: PUSH
16742: LD_INT 3
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 69
16761: ST_TO_ADDR
// if not tmp then
16762: LD_VAR 0 8
16766: NOT
16767: IFFALSE 16771
// exit ;
16769: GO 17229
// if in_unit then
16771: LD_VAR 0 11
16775: IFFALSE 16799
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16777: LD_ADDR_VAR 0 10
16781: PUSH
16782: LD_VAR 0 8
16786: PPUSH
16787: LD_VAR 0 11
16791: PPUSH
16792: CALL_OW 74
16796: ST_TO_ADDR
16797: GO 16819
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16799: LD_ADDR_VAR 0 10
16803: PUSH
16804: LD_VAR 0 8
16808: PPUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 74
16818: ST_TO_ADDR
// if not enemy then
16819: LD_VAR 0 10
16823: NOT
16824: IFFALSE 16828
// exit ;
16826: GO 17229
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16828: LD_VAR 0 11
16832: PUSH
16833: LD_VAR 0 11
16837: PPUSH
16838: LD_VAR 0 10
16842: PPUSH
16843: CALL_OW 296
16847: PUSH
16848: LD_INT 13
16850: GREATER
16851: AND
16852: PUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: LD_VAR 0 10
16862: PPUSH
16863: CALL_OW 296
16867: PUSH
16868: LD_INT 12
16870: GREATER
16871: OR
16872: IFFALSE 16876
// exit ;
16874: GO 17229
// missile := [ 1 ] ;
16876: LD_ADDR_VAR 0 14
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16887: LD_VAR 0 9
16891: PPUSH
16892: LD_VAR 0 12
16896: PPUSH
16897: CALL_OW 325
16901: IFFALSE 16930
// missile := Replace ( missile , missile + 1 , 2 ) ;
16903: LD_ADDR_VAR 0 14
16907: PUSH
16908: LD_VAR 0 14
16912: PPUSH
16913: LD_VAR 0 14
16917: PUSH
16918: LD_INT 1
16920: PLUS
16921: PPUSH
16922: LD_INT 2
16924: PPUSH
16925: CALL_OW 1
16929: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16930: LD_VAR 0 9
16934: PPUSH
16935: LD_VAR 0 13
16939: PPUSH
16940: CALL_OW 325
16944: PUSH
16945: LD_VAR 0 10
16949: PPUSH
16950: CALL_OW 255
16954: PPUSH
16955: LD_VAR 0 13
16959: PPUSH
16960: CALL_OW 325
16964: NOT
16965: AND
16966: IFFALSE 16995
// missile := Replace ( missile , missile + 1 , 3 ) ;
16968: LD_ADDR_VAR 0 14
16972: PUSH
16973: LD_VAR 0 14
16977: PPUSH
16978: LD_VAR 0 14
16982: PUSH
16983: LD_INT 1
16985: PLUS
16986: PPUSH
16987: LD_INT 3
16989: PPUSH
16990: CALL_OW 1
16994: ST_TO_ADDR
// if missile < 2 then
16995: LD_VAR 0 14
16999: PUSH
17000: LD_INT 2
17002: LESS
17003: IFFALSE 17007
// exit ;
17005: GO 17229
// x := GetX ( enemy ) ;
17007: LD_ADDR_VAR 0 4
17011: PUSH
17012: LD_VAR 0 10
17016: PPUSH
17017: CALL_OW 250
17021: ST_TO_ADDR
// y := GetY ( enemy ) ;
17022: LD_ADDR_VAR 0 5
17026: PUSH
17027: LD_VAR 0 10
17031: PPUSH
17032: CALL_OW 251
17036: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17037: LD_ADDR_VAR 0 6
17041: PUSH
17042: LD_VAR 0 4
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PPUSH
17051: LD_INT 1
17053: PPUSH
17054: CALL_OW 12
17058: PLUS
17059: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17060: LD_ADDR_VAR 0 7
17064: PUSH
17065: LD_VAR 0 5
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 12
17081: PLUS
17082: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17083: LD_VAR 0 6
17087: PPUSH
17088: LD_VAR 0 7
17092: PPUSH
17093: CALL_OW 488
17097: NOT
17098: IFFALSE 17120
// begin _x := x ;
17100: LD_ADDR_VAR 0 6
17104: PUSH
17105: LD_VAR 0 4
17109: ST_TO_ADDR
// _y := y ;
17110: LD_ADDR_VAR 0 7
17114: PUSH
17115: LD_VAR 0 5
17119: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_INT 1
17127: PPUSH
17128: LD_VAR 0 14
17132: PPUSH
17133: CALL_OW 12
17137: ST_TO_ADDR
// case i of 1 :
17138: LD_VAR 0 3
17142: PUSH
17143: LD_INT 1
17145: DOUBLE
17146: EQUAL
17147: IFTRUE 17151
17149: GO 17168
17151: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17152: LD_VAR 0 1
17156: PPUSH
17157: LD_VAR 0 10
17161: PPUSH
17162: CALL_OW 115
17166: GO 17229
17168: LD_INT 2
17170: DOUBLE
17171: EQUAL
17172: IFTRUE 17176
17174: GO 17198
17176: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_VAR 0 6
17186: PPUSH
17187: LD_VAR 0 7
17191: PPUSH
17192: CALL_OW 153
17196: GO 17229
17198: LD_INT 3
17200: DOUBLE
17201: EQUAL
17202: IFTRUE 17206
17204: GO 17228
17206: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17207: LD_VAR 0 1
17211: PPUSH
17212: LD_VAR 0 6
17216: PPUSH
17217: LD_VAR 0 7
17221: PPUSH
17222: CALL_OW 154
17226: GO 17229
17228: POP
// end ;
17229: LD_VAR 0 2
17233: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17234: LD_INT 0
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
// if not unit or not building then
17242: LD_VAR 0 1
17246: NOT
17247: PUSH
17248: LD_VAR 0 2
17252: NOT
17253: OR
17254: IFFALSE 17258
// exit ;
17256: GO 17416
// x := GetX ( building ) ;
17258: LD_ADDR_VAR 0 5
17262: PUSH
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 250
17272: ST_TO_ADDR
// y := GetY ( building ) ;
17273: LD_ADDR_VAR 0 6
17277: PUSH
17278: LD_VAR 0 2
17282: PPUSH
17283: CALL_OW 251
17287: ST_TO_ADDR
// for i := 0 to 5 do
17288: LD_ADDR_VAR 0 4
17292: PUSH
17293: DOUBLE
17294: LD_INT 0
17296: DEC
17297: ST_TO_ADDR
17298: LD_INT 5
17300: PUSH
17301: FOR_TO
17302: IFFALSE 17414
// begin _x := ShiftX ( x , i , 3 ) ;
17304: LD_ADDR_VAR 0 7
17308: PUSH
17309: LD_VAR 0 5
17313: PPUSH
17314: LD_VAR 0 4
17318: PPUSH
17319: LD_INT 3
17321: PPUSH
17322: CALL_OW 272
17326: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17327: LD_ADDR_VAR 0 8
17331: PUSH
17332: LD_VAR 0 6
17336: PPUSH
17337: LD_VAR 0 4
17341: PPUSH
17342: LD_INT 3
17344: PPUSH
17345: CALL_OW 273
17349: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17350: LD_VAR 0 7
17354: PPUSH
17355: LD_VAR 0 8
17359: PPUSH
17360: CALL_OW 488
17364: NOT
17365: IFFALSE 17369
// continue ;
17367: GO 17301
// if HexInfo ( _x , _y ) = 0 then
17369: LD_VAR 0 7
17373: PPUSH
17374: LD_VAR 0 8
17378: PPUSH
17379: CALL_OW 428
17383: PUSH
17384: LD_INT 0
17386: EQUAL
17387: IFFALSE 17412
// begin ComMoveXY ( unit , _x , _y ) ;
17389: LD_VAR 0 1
17393: PPUSH
17394: LD_VAR 0 7
17398: PPUSH
17399: LD_VAR 0 8
17403: PPUSH
17404: CALL_OW 111
// exit ;
17408: POP
17409: POP
17410: GO 17416
// end ; end ;
17412: GO 17301
17414: POP
17415: POP
// end ;
17416: LD_VAR 0 3
17420: RET
// export function ScanBase ( side , base_area ) ; begin
17421: LD_INT 0
17423: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_INT 81
17436: PUSH
17437: LD_VAR 0 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 70
17450: ST_TO_ADDR
// end ;
17451: LD_VAR 0 3
17455: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17456: LD_INT 0
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
// result := false ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_INT 0
17469: ST_TO_ADDR
// side := GetSide ( unit ) ;
17470: LD_ADDR_VAR 0 3
17474: PUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 255
17484: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 248
17499: ST_TO_ADDR
// case nat of 1 :
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 1
17507: DOUBLE
17508: EQUAL
17509: IFTRUE 17513
17511: GO 17524
17513: POP
// tech := tech_lassight ; 2 :
17514: LD_ADDR_VAR 0 5
17518: PUSH
17519: LD_INT 12
17521: ST_TO_ADDR
17522: GO 17563
17524: LD_INT 2
17526: DOUBLE
17527: EQUAL
17528: IFTRUE 17532
17530: GO 17543
17532: POP
// tech := tech_mortar ; 3 :
17533: LD_ADDR_VAR 0 5
17537: PUSH
17538: LD_INT 41
17540: ST_TO_ADDR
17541: GO 17563
17543: LD_INT 3
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17562
17551: POP
// tech := tech_bazooka ; end ;
17552: LD_ADDR_VAR 0 5
17556: PUSH
17557: LD_INT 44
17559: ST_TO_ADDR
17560: GO 17563
17562: POP
// if Researched ( side , tech ) then
17563: LD_VAR 0 3
17567: PPUSH
17568: LD_VAR 0 5
17572: PPUSH
17573: CALL_OW 325
17577: IFFALSE 17604
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_INT 5
17586: PUSH
17587: LD_INT 8
17589: PUSH
17590: LD_INT 9
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: LD_VAR 0 4
17602: ARRAY
17603: ST_TO_ADDR
// end ;
17604: LD_VAR 0 2
17608: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
// if not mines then
17614: LD_VAR 0 2
17618: NOT
17619: IFFALSE 17623
// exit ;
17621: GO 17767
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17623: LD_ADDR_VAR 0 5
17627: PUSH
17628: LD_INT 81
17630: PUSH
17631: LD_VAR 0 1
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 3
17642: PUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 3
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PPUSH
17661: CALL_OW 69
17665: ST_TO_ADDR
// for i in mines do
17666: LD_ADDR_VAR 0 4
17670: PUSH
17671: LD_VAR 0 2
17675: PUSH
17676: FOR_IN
17677: IFFALSE 17765
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17679: LD_VAR 0 4
17683: PUSH
17684: LD_INT 1
17686: ARRAY
17687: PPUSH
17688: LD_VAR 0 4
17692: PUSH
17693: LD_INT 2
17695: ARRAY
17696: PPUSH
17697: CALL_OW 458
17701: NOT
17702: IFFALSE 17706
// continue ;
17704: GO 17676
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17706: LD_VAR 0 4
17710: PUSH
17711: LD_INT 1
17713: ARRAY
17714: PPUSH
17715: LD_VAR 0 4
17719: PUSH
17720: LD_INT 2
17722: ARRAY
17723: PPUSH
17724: CALL_OW 428
17728: PUSH
17729: LD_VAR 0 5
17733: IN
17734: IFFALSE 17763
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17736: LD_VAR 0 4
17740: PUSH
17741: LD_INT 1
17743: ARRAY
17744: PPUSH
17745: LD_VAR 0 4
17749: PUSH
17750: LD_INT 2
17752: ARRAY
17753: PPUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 456
// end ;
17763: GO 17676
17765: POP
17766: POP
// end ;
17767: LD_VAR 0 3
17771: RET
// export function Count ( array ) ; begin
17772: LD_INT 0
17774: PPUSH
// result := array + 0 ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_VAR 0 1
17784: PUSH
17785: LD_INT 0
17787: PLUS
17788: ST_TO_ADDR
// end ;
17789: LD_VAR 0 2
17793: RET
// export function IsEmpty ( building ) ; begin
17794: LD_INT 0
17796: PPUSH
// if not building then
17797: LD_VAR 0 1
17801: NOT
17802: IFFALSE 17806
// exit ;
17804: GO 17849
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_VAR 0 1
17815: PUSH
17816: LD_INT 22
17818: PUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 255
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 58
17835: PUSH
17836: EMPTY
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 69
17847: IN
17848: ST_TO_ADDR
// end ;
17849: LD_VAR 0 2
17853: RET
// export function IsNotFull ( building ) ; var places ; begin
17854: LD_INT 0
17856: PPUSH
17857: PPUSH
// if not building then
17858: LD_VAR 0 1
17862: NOT
17863: IFFALSE 17867
// exit ;
17865: GO 17895
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17867: LD_ADDR_VAR 0 2
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 62
17882: PUSH
17883: EMPTY
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 72
17894: ST_TO_ADDR
// end ;
17895: LD_VAR 0 2
17899: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17900: LD_INT 0
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
// tmp := [ ] ;
17906: LD_ADDR_VAR 0 3
17910: PUSH
17911: EMPTY
17912: ST_TO_ADDR
// list := [ ] ;
17913: LD_ADDR_VAR 0 5
17917: PUSH
17918: EMPTY
17919: ST_TO_ADDR
// for i = 16 to 25 do
17920: LD_ADDR_VAR 0 4
17924: PUSH
17925: DOUBLE
17926: LD_INT 16
17928: DEC
17929: ST_TO_ADDR
17930: LD_INT 25
17932: PUSH
17933: FOR_TO
17934: IFFALSE 18007
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17936: LD_ADDR_VAR 0 3
17940: PUSH
17941: LD_VAR 0 3
17945: PUSH
17946: LD_INT 22
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 255
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 91
17965: PUSH
17966: LD_VAR 0 1
17970: PUSH
17971: LD_INT 6
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 30
17981: PUSH
17982: LD_VAR 0 4
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: ADD
18004: ST_TO_ADDR
18005: GO 17933
18007: POP
18008: POP
// for i = 1 to tmp do
18009: LD_ADDR_VAR 0 4
18013: PUSH
18014: DOUBLE
18015: LD_INT 1
18017: DEC
18018: ST_TO_ADDR
18019: LD_VAR 0 3
18023: PUSH
18024: FOR_TO
18025: IFFALSE 18113
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18027: LD_ADDR_VAR 0 5
18031: PUSH
18032: LD_VAR 0 5
18036: PUSH
18037: LD_VAR 0 3
18041: PUSH
18042: LD_VAR 0 4
18046: ARRAY
18047: PPUSH
18048: CALL_OW 266
18052: PUSH
18053: LD_VAR 0 3
18057: PUSH
18058: LD_VAR 0 4
18062: ARRAY
18063: PPUSH
18064: CALL_OW 250
18068: PUSH
18069: LD_VAR 0 3
18073: PUSH
18074: LD_VAR 0 4
18078: ARRAY
18079: PPUSH
18080: CALL_OW 251
18084: PUSH
18085: LD_VAR 0 3
18089: PUSH
18090: LD_VAR 0 4
18094: ARRAY
18095: PPUSH
18096: CALL_OW 254
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: ADD
18110: ST_TO_ADDR
18111: GO 18024
18113: POP
18114: POP
// result := list ;
18115: LD_ADDR_VAR 0 2
18119: PUSH
18120: LD_VAR 0 5
18124: ST_TO_ADDR
// end ;
18125: LD_VAR 0 2
18129: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
18136: PPUSH
18137: PPUSH
18138: PPUSH
// if not factory then
18139: LD_VAR 0 1
18143: NOT
18144: IFFALSE 18148
// exit ;
18146: GO 18741
// if control = control_apeman then
18148: LD_VAR 0 4
18152: PUSH
18153: LD_INT 5
18155: EQUAL
18156: IFFALSE 18265
// begin tmp := UnitsInside ( factory ) ;
18158: LD_ADDR_VAR 0 8
18162: PUSH
18163: LD_VAR 0 1
18167: PPUSH
18168: CALL_OW 313
18172: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18173: LD_VAR 0 8
18177: PPUSH
18178: LD_INT 25
18180: PUSH
18181: LD_INT 12
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 72
18192: NOT
18193: IFFALSE 18203
// control := control_manual ;
18195: LD_ADDR_VAR 0 4
18199: PUSH
18200: LD_INT 1
18202: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18203: LD_ADDR_VAR 0 8
18207: PUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL 17900 0 1
18217: ST_TO_ADDR
// if tmp then
18218: LD_VAR 0 8
18222: IFFALSE 18265
// begin for i in tmp do
18224: LD_ADDR_VAR 0 7
18228: PUSH
18229: LD_VAR 0 8
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18263
// if i [ 1 ] = b_ext_radio then
18237: LD_VAR 0 7
18241: PUSH
18242: LD_INT 1
18244: ARRAY
18245: PUSH
18246: LD_INT 22
18248: EQUAL
18249: IFFALSE 18261
// begin control := control_remote ;
18251: LD_ADDR_VAR 0 4
18255: PUSH
18256: LD_INT 2
18258: ST_TO_ADDR
// break ;
18259: GO 18263
// end ;
18261: GO 18234
18263: POP
18264: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18265: LD_VAR 0 1
18269: PPUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_VAR 0 3
18279: PPUSH
18280: LD_VAR 0 4
18284: PPUSH
18285: LD_VAR 0 5
18289: PPUSH
18290: CALL_OW 448
18294: IFFALSE 18329
// begin result := [ chassis , engine , control , weapon ] ;
18296: LD_ADDR_VAR 0 6
18300: PUSH
18301: LD_VAR 0 2
18305: PUSH
18306: LD_VAR 0 3
18310: PUSH
18311: LD_VAR 0 4
18315: PUSH
18316: LD_VAR 0 5
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: ST_TO_ADDR
// exit ;
18327: GO 18741
// end ; _chassis := AvailableChassisList ( factory ) ;
18329: LD_ADDR_VAR 0 9
18333: PUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 475
18343: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18344: LD_ADDR_VAR 0 11
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 476
18358: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18359: LD_ADDR_VAR 0 12
18363: PUSH
18364: LD_VAR 0 1
18368: PPUSH
18369: CALL_OW 477
18373: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18374: LD_ADDR_VAR 0 10
18378: PUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: CALL_OW 478
18388: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18389: LD_VAR 0 9
18393: NOT
18394: PUSH
18395: LD_VAR 0 11
18399: NOT
18400: OR
18401: PUSH
18402: LD_VAR 0 12
18406: NOT
18407: OR
18408: PUSH
18409: LD_VAR 0 10
18413: NOT
18414: OR
18415: IFFALSE 18450
// begin result := [ chassis , engine , control , weapon ] ;
18417: LD_ADDR_VAR 0 6
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: LD_VAR 0 3
18431: PUSH
18432: LD_VAR 0 4
18436: PUSH
18437: LD_VAR 0 5
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: ST_TO_ADDR
// exit ;
18448: GO 18741
// end ; if not chassis in _chassis then
18450: LD_VAR 0 2
18454: PUSH
18455: LD_VAR 0 9
18459: IN
18460: NOT
18461: IFFALSE 18487
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: LD_VAR 0 9
18472: PUSH
18473: LD_INT 1
18475: PPUSH
18476: LD_VAR 0 9
18480: PPUSH
18481: CALL_OW 12
18485: ARRAY
18486: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_VAR 0 3
18496: PPUSH
18497: CALL 18746 0 2
18501: NOT
18502: IFFALSE 18561
// repeat engine := _engine [ 1 ] ;
18504: LD_ADDR_VAR 0 3
18508: PUSH
18509: LD_VAR 0 11
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18518: LD_ADDR_VAR 0 11
18522: PUSH
18523: LD_VAR 0 11
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 3
18535: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18536: LD_VAR 0 2
18540: PPUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: CALL 18746 0 2
18550: PUSH
18551: LD_VAR 0 11
18555: PUSH
18556: EMPTY
18557: EQUAL
18558: OR
18559: IFFALSE 18504
// if not control in _control then
18561: LD_VAR 0 4
18565: PUSH
18566: LD_VAR 0 12
18570: IN
18571: NOT
18572: IFFALSE 18598
// control := _control [ rand ( 1 , _control ) ] ;
18574: LD_ADDR_VAR 0 4
18578: PUSH
18579: LD_VAR 0 12
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_VAR 0 12
18591: PPUSH
18592: CALL_OW 12
18596: ARRAY
18597: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18598: LD_VAR 0 2
18602: PPUSH
18603: LD_VAR 0 5
18607: PPUSH
18608: CALL 18966 0 2
18612: NOT
18613: IFFALSE 18672
// repeat weapon := _weapon [ 1 ] ;
18615: LD_ADDR_VAR 0 5
18619: PUSH
18620: LD_VAR 0 10
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18629: LD_ADDR_VAR 0 10
18633: PUSH
18634: LD_VAR 0 10
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 3
18646: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18647: LD_VAR 0 2
18651: PPUSH
18652: LD_VAR 0 5
18656: PPUSH
18657: CALL 18966 0 2
18661: PUSH
18662: LD_VAR 0 10
18666: PUSH
18667: EMPTY
18668: EQUAL
18669: OR
18670: IFFALSE 18615
// result := [ ] ;
18672: LD_ADDR_VAR 0 6
18676: PUSH
18677: EMPTY
18678: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18679: LD_VAR 0 1
18683: PPUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: LD_VAR 0 4
18698: PPUSH
18699: LD_VAR 0 5
18703: PPUSH
18704: CALL_OW 448
18708: IFFALSE 18741
// result := [ chassis , engine , control , weapon ] ;
18710: LD_ADDR_VAR 0 6
18714: PUSH
18715: LD_VAR 0 2
18719: PUSH
18720: LD_VAR 0 3
18724: PUSH
18725: LD_VAR 0 4
18729: PUSH
18730: LD_VAR 0 5
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: ST_TO_ADDR
// end ;
18741: LD_VAR 0 6
18745: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18746: LD_INT 0
18748: PPUSH
// if not chassis or not engine then
18749: LD_VAR 0 1
18753: NOT
18754: PUSH
18755: LD_VAR 0 2
18759: NOT
18760: OR
18761: IFFALSE 18765
// exit ;
18763: GO 18961
// case engine of engine_solar :
18765: LD_VAR 0 2
18769: PUSH
18770: LD_INT 2
18772: DOUBLE
18773: EQUAL
18774: IFTRUE 18778
18776: GO 18816
18778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18779: LD_ADDR_VAR 0 3
18783: PUSH
18784: LD_INT 11
18786: PUSH
18787: LD_INT 12
18789: PUSH
18790: LD_INT 13
18792: PUSH
18793: LD_INT 14
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: ST_TO_ADDR
18814: GO 18945
18816: LD_INT 1
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18886
18824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18825: LD_ADDR_VAR 0 3
18829: PUSH
18830: LD_INT 11
18832: PUSH
18833: LD_INT 12
18835: PUSH
18836: LD_INT 13
18838: PUSH
18839: LD_INT 14
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: LD_INT 4
18853: PUSH
18854: LD_INT 5
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 23
18862: PUSH
18863: LD_INT 22
18865: PUSH
18866: LD_INT 24
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: ST_TO_ADDR
18884: GO 18945
18886: LD_INT 3
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18894
18892: GO 18944
18894: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18895: LD_ADDR_VAR 0 3
18899: PUSH
18900: LD_INT 13
18902: PUSH
18903: LD_INT 14
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 3
18911: PUSH
18912: LD_INT 4
18914: PUSH
18915: LD_INT 5
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_INT 23
18926: PUSH
18927: LD_INT 24
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: ST_TO_ADDR
18942: GO 18945
18944: POP
// result := ( chassis in result ) ;
18945: LD_ADDR_VAR 0 3
18949: PUSH
18950: LD_VAR 0 1
18954: PUSH
18955: LD_VAR 0 3
18959: IN
18960: ST_TO_ADDR
// end ;
18961: LD_VAR 0 3
18965: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18966: LD_INT 0
18968: PPUSH
// if not chassis or not weapon then
18969: LD_VAR 0 1
18973: NOT
18974: PUSH
18975: LD_VAR 0 2
18979: NOT
18980: OR
18981: IFFALSE 18985
// exit ;
18983: GO 20045
// case weapon of us_machine_gun :
18985: LD_VAR 0 2
18989: PUSH
18990: LD_INT 2
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19028
18998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 20029
19028: LD_INT 3
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19066
19036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 3
19050: PUSH
19051: LD_INT 4
19053: PUSH
19054: LD_INT 5
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: ST_TO_ADDR
19064: GO 20029
19066: LD_INT 11
19068: DOUBLE
19069: EQUAL
19070: IFTRUE 19074
19072: GO 19104
19074: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19075: LD_ADDR_VAR 0 3
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: LD_INT 4
19091: PUSH
19092: LD_INT 5
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: ST_TO_ADDR
19102: GO 20029
19104: LD_INT 4
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19138
19112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19113: LD_ADDR_VAR 0 3
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: LD_INT 3
19123: PUSH
19124: LD_INT 4
19126: PUSH
19127: LD_INT 5
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: ST_TO_ADDR
19136: GO 20029
19138: LD_INT 5
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19172
19146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19147: LD_ADDR_VAR 0 3
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 3
19157: PUSH
19158: LD_INT 4
19160: PUSH
19161: LD_INT 5
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: ST_TO_ADDR
19170: GO 20029
19172: LD_INT 9
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19206
19180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19181: LD_ADDR_VAR 0 3
19185: PUSH
19186: LD_INT 2
19188: PUSH
19189: LD_INT 3
19191: PUSH
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: ST_TO_ADDR
19204: GO 20029
19206: LD_INT 7
19208: DOUBLE
19209: EQUAL
19210: IFTRUE 19214
19212: GO 19240
19214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 3
19225: PUSH
19226: LD_INT 4
19228: PUSH
19229: LD_INT 5
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: ST_TO_ADDR
19238: GO 20029
19240: LD_INT 12
19242: DOUBLE
19243: EQUAL
19244: IFTRUE 19248
19246: GO 19274
19248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19249: LD_ADDR_VAR 0 3
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: LD_INT 4
19262: PUSH
19263: LD_INT 5
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: ST_TO_ADDR
19272: GO 20029
19274: LD_INT 13
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19308
19282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 3
19293: PUSH
19294: LD_INT 4
19296: PUSH
19297: LD_INT 5
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 20029
19308: LD_INT 14
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19334
19316: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_INT 4
19324: PUSH
19325: LD_INT 5
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: ST_TO_ADDR
19332: GO 20029
19334: LD_INT 6
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19360
19342: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19343: LD_ADDR_VAR 0 3
19347: PUSH
19348: LD_INT 4
19350: PUSH
19351: LD_INT 5
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: ST_TO_ADDR
19358: GO 20029
19360: LD_INT 10
19362: DOUBLE
19363: EQUAL
19364: IFTRUE 19368
19366: GO 19386
19368: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19369: LD_ADDR_VAR 0 3
19373: PUSH
19374: LD_INT 4
19376: PUSH
19377: LD_INT 5
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: ST_TO_ADDR
19384: GO 20029
19386: LD_INT 22
19388: DOUBLE
19389: EQUAL
19390: IFTRUE 19394
19392: GO 19420
19394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: LD_INT 11
19402: PUSH
19403: LD_INT 12
19405: PUSH
19406: LD_INT 13
19408: PUSH
19409: LD_INT 14
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: ST_TO_ADDR
19418: GO 20029
19420: LD_INT 23
19422: DOUBLE
19423: EQUAL
19424: IFTRUE 19428
19426: GO 19454
19428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19429: LD_ADDR_VAR 0 3
19433: PUSH
19434: LD_INT 11
19436: PUSH
19437: LD_INT 12
19439: PUSH
19440: LD_INT 13
19442: PUSH
19443: LD_INT 14
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: ST_TO_ADDR
19452: GO 20029
19454: LD_INT 24
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19488
19462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19463: LD_ADDR_VAR 0 3
19467: PUSH
19468: LD_INT 11
19470: PUSH
19471: LD_INT 12
19473: PUSH
19474: LD_INT 13
19476: PUSH
19477: LD_INT 14
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: ST_TO_ADDR
19486: GO 20029
19488: LD_INT 30
19490: DOUBLE
19491: EQUAL
19492: IFTRUE 19496
19494: GO 19522
19496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_INT 11
19504: PUSH
19505: LD_INT 12
19507: PUSH
19508: LD_INT 13
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: ST_TO_ADDR
19520: GO 20029
19522: LD_INT 25
19524: DOUBLE
19525: EQUAL
19526: IFTRUE 19530
19528: GO 19548
19530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_INT 13
19538: PUSH
19539: LD_INT 14
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: ST_TO_ADDR
19546: GO 20029
19548: LD_INT 27
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19574
19556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19557: LD_ADDR_VAR 0 3
19561: PUSH
19562: LD_INT 13
19564: PUSH
19565: LD_INT 14
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: ST_TO_ADDR
19572: GO 20029
19574: LD_INT 92
19576: DOUBLE
19577: EQUAL
19578: IFTRUE 19582
19580: GO 19608
19582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: LD_INT 11
19590: PUSH
19591: LD_INT 12
19593: PUSH
19594: LD_INT 13
19596: PUSH
19597: LD_INT 14
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 20029
19608: LD_INT 28
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19634
19616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19617: LD_ADDR_VAR 0 3
19621: PUSH
19622: LD_INT 13
19624: PUSH
19625: LD_INT 14
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: ST_TO_ADDR
19632: GO 20029
19634: LD_INT 29
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19660
19642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19643: LD_ADDR_VAR 0 3
19647: PUSH
19648: LD_INT 13
19650: PUSH
19651: LD_INT 14
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: ST_TO_ADDR
19658: GO 20029
19660: LD_INT 31
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19686
19668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19669: LD_ADDR_VAR 0 3
19673: PUSH
19674: LD_INT 13
19676: PUSH
19677: LD_INT 14
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 20029
19686: LD_INT 26
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19712
19694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 13
19702: PUSH
19703: LD_INT 14
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 20029
19712: LD_INT 42
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19746
19720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 21
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_INT 23
19734: PUSH
19735: LD_INT 24
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: ST_TO_ADDR
19744: GO 20029
19746: LD_INT 43
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19780
19754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: LD_INT 21
19762: PUSH
19763: LD_INT 22
19765: PUSH
19766: LD_INT 23
19768: PUSH
19769: LD_INT 24
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: ST_TO_ADDR
19778: GO 20029
19780: LD_INT 44
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19814
19788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19789: LD_ADDR_VAR 0 3
19793: PUSH
19794: LD_INT 21
19796: PUSH
19797: LD_INT 22
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 24
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: ST_TO_ADDR
19812: GO 20029
19814: LD_INT 45
19816: DOUBLE
19817: EQUAL
19818: IFTRUE 19822
19820: GO 19848
19822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19823: LD_ADDR_VAR 0 3
19827: PUSH
19828: LD_INT 21
19830: PUSH
19831: LD_INT 22
19833: PUSH
19834: LD_INT 23
19836: PUSH
19837: LD_INT 24
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: ST_TO_ADDR
19846: GO 20029
19848: LD_INT 49
19850: DOUBLE
19851: EQUAL
19852: IFTRUE 19856
19854: GO 19882
19856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 21
19864: PUSH
19865: LD_INT 22
19867: PUSH
19868: LD_INT 23
19870: PUSH
19871: LD_INT 24
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
19880: GO 20029
19882: LD_INT 51
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 19916
19890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19891: LD_ADDR_VAR 0 3
19895: PUSH
19896: LD_INT 21
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_INT 23
19904: PUSH
19905: LD_INT 24
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: ST_TO_ADDR
19914: GO 20029
19916: LD_INT 52
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 19950
19924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: LD_INT 21
19932: PUSH
19933: LD_INT 22
19935: PUSH
19936: LD_INT 23
19938: PUSH
19939: LD_INT 24
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: ST_TO_ADDR
19948: GO 20029
19950: LD_INT 53
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19976
19958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 24
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: ST_TO_ADDR
19974: GO 20029
19976: LD_INT 46
19978: DOUBLE
19979: EQUAL
19980: IFTRUE 19984
19982: GO 20002
19984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19985: LD_ADDR_VAR 0 3
19989: PUSH
19990: LD_INT 23
19992: PUSH
19993: LD_INT 24
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: ST_TO_ADDR
20000: GO 20029
20002: LD_INT 47
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20028
20010: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_INT 23
20018: PUSH
20019: LD_INT 24
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 20029
20028: POP
// result := ( chassis in result ) ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_VAR 0 1
20038: PUSH
20039: LD_VAR 0 3
20043: IN
20044: ST_TO_ADDR
// end ;
20045: LD_VAR 0 3
20049: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
// result := array ;
20059: LD_ADDR_VAR 0 5
20063: PUSH
20064: LD_VAR 0 1
20068: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20069: LD_VAR 0 1
20073: NOT
20074: PUSH
20075: LD_VAR 0 2
20079: NOT
20080: OR
20081: PUSH
20082: LD_VAR 0 3
20086: NOT
20087: OR
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: LD_VAR 0 1
20098: GREATER
20099: OR
20100: PUSH
20101: LD_VAR 0 3
20105: PUSH
20106: LD_VAR 0 1
20110: GREATER
20111: OR
20112: IFFALSE 20116
// exit ;
20114: GO 20412
// if direction then
20116: LD_VAR 0 4
20120: IFFALSE 20184
// begin d := 1 ;
20122: LD_ADDR_VAR 0 9
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if i_from > i_to then
20130: LD_VAR 0 2
20134: PUSH
20135: LD_VAR 0 3
20139: GREATER
20140: IFFALSE 20166
// length := ( array - i_from ) + i_to else
20142: LD_ADDR_VAR 0 11
20146: PUSH
20147: LD_VAR 0 1
20151: PUSH
20152: LD_VAR 0 2
20156: MINUS
20157: PUSH
20158: LD_VAR 0 3
20162: PLUS
20163: ST_TO_ADDR
20164: GO 20182
// length := i_to - i_from ;
20166: LD_ADDR_VAR 0 11
20170: PUSH
20171: LD_VAR 0 3
20175: PUSH
20176: LD_VAR 0 2
20180: MINUS
20181: ST_TO_ADDR
// end else
20182: GO 20245
// begin d := - 1 ;
20184: LD_ADDR_VAR 0 9
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: ST_TO_ADDR
// if i_from > i_to then
20193: LD_VAR 0 2
20197: PUSH
20198: LD_VAR 0 3
20202: GREATER
20203: IFFALSE 20223
// length := i_from - i_to else
20205: LD_ADDR_VAR 0 11
20209: PUSH
20210: LD_VAR 0 2
20214: PUSH
20215: LD_VAR 0 3
20219: MINUS
20220: ST_TO_ADDR
20221: GO 20245
// length := ( array - i_to ) + i_from ;
20223: LD_ADDR_VAR 0 11
20227: PUSH
20228: LD_VAR 0 1
20232: PUSH
20233: LD_VAR 0 3
20237: MINUS
20238: PUSH
20239: LD_VAR 0 2
20243: PLUS
20244: ST_TO_ADDR
// end ; if not length then
20245: LD_VAR 0 11
20249: NOT
20250: IFFALSE 20254
// exit ;
20252: GO 20412
// tmp := array ;
20254: LD_ADDR_VAR 0 10
20258: PUSH
20259: LD_VAR 0 1
20263: ST_TO_ADDR
// for i = 1 to length do
20264: LD_ADDR_VAR 0 6
20268: PUSH
20269: DOUBLE
20270: LD_INT 1
20272: DEC
20273: ST_TO_ADDR
20274: LD_VAR 0 11
20278: PUSH
20279: FOR_TO
20280: IFFALSE 20400
// begin for j = 1 to array do
20282: LD_ADDR_VAR 0 7
20286: PUSH
20287: DOUBLE
20288: LD_INT 1
20290: DEC
20291: ST_TO_ADDR
20292: LD_VAR 0 1
20296: PUSH
20297: FOR_TO
20298: IFFALSE 20386
// begin k := j + d ;
20300: LD_ADDR_VAR 0 8
20304: PUSH
20305: LD_VAR 0 7
20309: PUSH
20310: LD_VAR 0 9
20314: PLUS
20315: ST_TO_ADDR
// if k > array then
20316: LD_VAR 0 8
20320: PUSH
20321: LD_VAR 0 1
20325: GREATER
20326: IFFALSE 20336
// k := 1 ;
20328: LD_ADDR_VAR 0 8
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// if not k then
20336: LD_VAR 0 8
20340: NOT
20341: IFFALSE 20353
// k := array ;
20343: LD_ADDR_VAR 0 8
20347: PUSH
20348: LD_VAR 0 1
20352: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20353: LD_ADDR_VAR 0 10
20357: PUSH
20358: LD_VAR 0 10
20362: PPUSH
20363: LD_VAR 0 8
20367: PPUSH
20368: LD_VAR 0 1
20372: PUSH
20373: LD_VAR 0 7
20377: ARRAY
20378: PPUSH
20379: CALL_OW 1
20383: ST_TO_ADDR
// end ;
20384: GO 20297
20386: POP
20387: POP
// array := tmp ;
20388: LD_ADDR_VAR 0 1
20392: PUSH
20393: LD_VAR 0 10
20397: ST_TO_ADDR
// end ;
20398: GO 20279
20400: POP
20401: POP
// result := array ;
20402: LD_ADDR_VAR 0 5
20406: PUSH
20407: LD_VAR 0 1
20411: ST_TO_ADDR
// end ;
20412: LD_VAR 0 5
20416: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20417: LD_INT 0
20419: PPUSH
20420: PPUSH
// result := 0 ;
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_INT 0
20428: ST_TO_ADDR
// if not array or not value in array then
20429: LD_VAR 0 1
20433: NOT
20434: PUSH
20435: LD_VAR 0 2
20439: PUSH
20440: LD_VAR 0 1
20444: IN
20445: NOT
20446: OR
20447: IFFALSE 20451
// exit ;
20449: GO 20505
// for i = 1 to array do
20451: LD_ADDR_VAR 0 4
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_VAR 0 1
20465: PUSH
20466: FOR_TO
20467: IFFALSE 20503
// if value = array [ i ] then
20469: LD_VAR 0 2
20473: PUSH
20474: LD_VAR 0 1
20478: PUSH
20479: LD_VAR 0 4
20483: ARRAY
20484: EQUAL
20485: IFFALSE 20501
// begin result := i ;
20487: LD_ADDR_VAR 0 3
20491: PUSH
20492: LD_VAR 0 4
20496: ST_TO_ADDR
// exit ;
20497: POP
20498: POP
20499: GO 20505
// end ;
20501: GO 20466
20503: POP
20504: POP
// end ;
20505: LD_VAR 0 3
20509: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20510: LD_INT 0
20512: PPUSH
// vc_chassis := chassis ;
20513: LD_ADDR_OWVAR 37
20517: PUSH
20518: LD_VAR 0 1
20522: ST_TO_ADDR
// vc_engine := engine ;
20523: LD_ADDR_OWVAR 39
20527: PUSH
20528: LD_VAR 0 2
20532: ST_TO_ADDR
// vc_control := control ;
20533: LD_ADDR_OWVAR 38
20537: PUSH
20538: LD_VAR 0 3
20542: ST_TO_ADDR
// vc_weapon := weapon ;
20543: LD_ADDR_OWVAR 40
20547: PUSH
20548: LD_VAR 0 4
20552: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20553: LD_ADDR_OWVAR 41
20557: PUSH
20558: LD_VAR 0 5
20562: ST_TO_ADDR
// end ;
20563: LD_VAR 0 6
20567: RET
// export function WantPlant ( unit ) ; var task ; begin
20568: LD_INT 0
20570: PPUSH
20571: PPUSH
// result := false ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 437
20594: ST_TO_ADDR
// if task then
20595: LD_VAR 0 3
20599: IFFALSE 20627
// if task [ 1 ] [ 1 ] = p then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PUSH
20610: LD_INT 1
20612: ARRAY
20613: PUSH
20614: LD_STRING p
20616: EQUAL
20617: IFFALSE 20627
// result := true ;
20619: LD_ADDR_VAR 0 2
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// end ;
20627: LD_VAR 0 2
20631: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20632: LD_INT 0
20634: PPUSH
20635: PPUSH
20636: PPUSH
20637: PPUSH
// if pos < 1 then
20638: LD_VAR 0 2
20642: PUSH
20643: LD_INT 1
20645: LESS
20646: IFFALSE 20650
// exit ;
20648: GO 20953
// if pos = 1 then
20650: LD_VAR 0 2
20654: PUSH
20655: LD_INT 1
20657: EQUAL
20658: IFFALSE 20691
// result := Replace ( arr , pos [ 1 ] , value ) else
20660: LD_ADDR_VAR 0 4
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_VAR 0 2
20674: PUSH
20675: LD_INT 1
20677: ARRAY
20678: PPUSH
20679: LD_VAR 0 3
20683: PPUSH
20684: CALL_OW 1
20688: ST_TO_ADDR
20689: GO 20953
// begin tmp := arr ;
20691: LD_ADDR_VAR 0 6
20695: PUSH
20696: LD_VAR 0 1
20700: ST_TO_ADDR
// s_arr := [ tmp ] ;
20701: LD_ADDR_VAR 0 7
20705: PUSH
20706: LD_VAR 0 6
20710: PUSH
20711: EMPTY
20712: LIST
20713: ST_TO_ADDR
// for i = 1 to pos - 1 do
20714: LD_ADDR_VAR 0 5
20718: PUSH
20719: DOUBLE
20720: LD_INT 1
20722: DEC
20723: ST_TO_ADDR
20724: LD_VAR 0 2
20728: PUSH
20729: LD_INT 1
20731: MINUS
20732: PUSH
20733: FOR_TO
20734: IFFALSE 20779
// begin tmp := tmp [ pos [ i ] ] ;
20736: LD_ADDR_VAR 0 6
20740: PUSH
20741: LD_VAR 0 6
20745: PUSH
20746: LD_VAR 0 2
20750: PUSH
20751: LD_VAR 0 5
20755: ARRAY
20756: ARRAY
20757: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20758: LD_ADDR_VAR 0 7
20762: PUSH
20763: LD_VAR 0 7
20767: PUSH
20768: LD_VAR 0 6
20772: PUSH
20773: EMPTY
20774: LIST
20775: ADD
20776: ST_TO_ADDR
// end ;
20777: GO 20733
20779: POP
20780: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 6
20790: PPUSH
20791: LD_VAR 0 2
20795: PUSH
20796: LD_VAR 0 2
20800: ARRAY
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: CALL_OW 1
20811: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20812: LD_ADDR_VAR 0 7
20816: PUSH
20817: LD_VAR 0 7
20821: PPUSH
20822: LD_VAR 0 7
20826: PPUSH
20827: LD_VAR 0 6
20831: PPUSH
20832: CALL_OW 1
20836: ST_TO_ADDR
// for i = s_arr downto 2 do
20837: LD_ADDR_VAR 0 5
20841: PUSH
20842: DOUBLE
20843: LD_VAR 0 7
20847: INC
20848: ST_TO_ADDR
20849: LD_INT 2
20851: PUSH
20852: FOR_DOWNTO
20853: IFFALSE 20937
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20855: LD_ADDR_VAR 0 6
20859: PUSH
20860: LD_VAR 0 7
20864: PUSH
20865: LD_VAR 0 5
20869: PUSH
20870: LD_INT 1
20872: MINUS
20873: ARRAY
20874: PPUSH
20875: LD_VAR 0 2
20879: PUSH
20880: LD_VAR 0 5
20884: PUSH
20885: LD_INT 1
20887: MINUS
20888: ARRAY
20889: PPUSH
20890: LD_VAR 0 7
20894: PUSH
20895: LD_VAR 0 5
20899: ARRAY
20900: PPUSH
20901: CALL_OW 1
20905: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20906: LD_ADDR_VAR 0 7
20910: PUSH
20911: LD_VAR 0 7
20915: PPUSH
20916: LD_VAR 0 5
20920: PUSH
20921: LD_INT 1
20923: MINUS
20924: PPUSH
20925: LD_VAR 0 6
20929: PPUSH
20930: CALL_OW 1
20934: ST_TO_ADDR
// end ;
20935: GO 20852
20937: POP
20938: POP
// result := s_arr [ 1 ] ;
20939: LD_ADDR_VAR 0 4
20943: PUSH
20944: LD_VAR 0 7
20948: PUSH
20949: LD_INT 1
20951: ARRAY
20952: ST_TO_ADDR
// end ; end ;
20953: LD_VAR 0 4
20957: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20958: LD_INT 0
20960: PPUSH
20961: PPUSH
// if not list then
20962: LD_VAR 0 1
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21062
// i := list [ pos1 ] ;
20971: LD_ADDR_VAR 0 5
20975: PUSH
20976: LD_VAR 0 1
20980: PUSH
20981: LD_VAR 0 2
20985: ARRAY
20986: ST_TO_ADDR
// if not i then
20987: LD_VAR 0 5
20991: NOT
20992: IFFALSE 20996
// exit ;
20994: GO 21062
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20996: LD_ADDR_VAR 0 1
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: LD_VAR 0 2
21010: PPUSH
21011: LD_VAR 0 1
21015: PUSH
21016: LD_VAR 0 3
21020: ARRAY
21021: PPUSH
21022: CALL_OW 1
21026: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_VAR 0 1
21036: PPUSH
21037: LD_VAR 0 3
21041: PPUSH
21042: LD_VAR 0 5
21046: PPUSH
21047: CALL_OW 1
21051: ST_TO_ADDR
// result := list ;
21052: LD_ADDR_VAR 0 4
21056: PUSH
21057: LD_VAR 0 1
21061: ST_TO_ADDR
// end ;
21062: LD_VAR 0 4
21066: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21067: LD_INT 0
21069: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21070: LD_ADDR_VAR 0 5
21074: PUSH
21075: LD_VAR 0 1
21079: PPUSH
21080: CALL_OW 250
21084: PPUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 251
21094: PPUSH
21095: LD_VAR 0 2
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: LD_VAR 0 4
21109: PPUSH
21110: CALL 21488 0 5
21114: ST_TO_ADDR
// end ;
21115: LD_VAR 0 5
21119: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21120: LD_INT 0
21122: PPUSH
21123: PPUSH
21124: PPUSH
21125: PPUSH
// if not list or not unit then
21126: LD_VAR 0 2
21130: NOT
21131: PUSH
21132: LD_VAR 0 1
21136: NOT
21137: OR
21138: IFFALSE 21142
// exit ;
21140: GO 21483
// result := [ ] ;
21142: LD_ADDR_VAR 0 5
21146: PUSH
21147: EMPTY
21148: ST_TO_ADDR
// for i in list do
21149: LD_ADDR_VAR 0 6
21153: PUSH
21154: LD_VAR 0 2
21158: PUSH
21159: FOR_IN
21160: IFFALSE 21378
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_VAR 0 6
21176: PUSH
21177: LD_INT 1
21179: ARRAY
21180: PPUSH
21181: LD_VAR 0 6
21185: PUSH
21186: LD_INT 2
21188: ARRAY
21189: PPUSH
21190: CALL_OW 297
21194: ST_TO_ADDR
// if not Count ( result ) then
21195: LD_VAR 0 5
21199: PPUSH
21200: CALL 17772 0 1
21204: NOT
21205: IFFALSE 21238
// begin result := Join ( result , [ i , tmp ] ) ;
21207: LD_ADDR_VAR 0 5
21211: PUSH
21212: LD_VAR 0 5
21216: PPUSH
21217: LD_VAR 0 6
21221: PUSH
21222: LD_VAR 0 8
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PPUSH
21231: CALL 53522 0 2
21235: ST_TO_ADDR
// continue ;
21236: GO 21159
// end ; if result [ result ] [ 2 ] <= tmp then
21238: LD_VAR 0 5
21242: PUSH
21243: LD_VAR 0 5
21247: ARRAY
21248: PUSH
21249: LD_INT 2
21251: ARRAY
21252: PUSH
21253: LD_VAR 0 8
21257: LESSEQUAL
21258: IFFALSE 21291
// result := Join ( result , [ i , tmp ] ) else
21260: LD_ADDR_VAR 0 5
21264: PUSH
21265: LD_VAR 0 5
21269: PPUSH
21270: LD_VAR 0 6
21274: PUSH
21275: LD_VAR 0 8
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL 53522 0 2
21288: ST_TO_ADDR
21289: GO 21376
// begin for j := 1 to Count ( result ) do
21291: LD_ADDR_VAR 0 7
21295: PUSH
21296: DOUBLE
21297: LD_INT 1
21299: DEC
21300: ST_TO_ADDR
21301: LD_VAR 0 5
21305: PPUSH
21306: CALL 17772 0 1
21310: PUSH
21311: FOR_TO
21312: IFFALSE 21374
// begin if tmp < result [ j ] [ 2 ] then
21314: LD_VAR 0 8
21318: PUSH
21319: LD_VAR 0 5
21323: PUSH
21324: LD_VAR 0 7
21328: ARRAY
21329: PUSH
21330: LD_INT 2
21332: ARRAY
21333: LESS
21334: IFFALSE 21372
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21336: LD_ADDR_VAR 0 5
21340: PUSH
21341: LD_VAR 0 5
21345: PPUSH
21346: LD_VAR 0 7
21350: PPUSH
21351: LD_VAR 0 6
21355: PUSH
21356: LD_VAR 0 8
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 2
21369: ST_TO_ADDR
// break ;
21370: GO 21374
// end ; end ;
21372: GO 21311
21374: POP
21375: POP
// end ; end ;
21376: GO 21159
21378: POP
21379: POP
// if result and not asc then
21380: LD_VAR 0 5
21384: PUSH
21385: LD_VAR 0 3
21389: NOT
21390: AND
21391: IFFALSE 21408
// result := ReverseArray ( result ) ;
21393: LD_ADDR_VAR 0 5
21397: PUSH
21398: LD_VAR 0 5
21402: PPUSH
21403: CALL 48648 0 1
21407: ST_TO_ADDR
// tmp := [ ] ;
21408: LD_ADDR_VAR 0 8
21412: PUSH
21413: EMPTY
21414: ST_TO_ADDR
// if mode then
21415: LD_VAR 0 4
21419: IFFALSE 21483
// begin for i := 1 to result do
21421: LD_ADDR_VAR 0 6
21425: PUSH
21426: DOUBLE
21427: LD_INT 1
21429: DEC
21430: ST_TO_ADDR
21431: LD_VAR 0 5
21435: PUSH
21436: FOR_TO
21437: IFFALSE 21471
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21439: LD_ADDR_VAR 0 8
21443: PUSH
21444: LD_VAR 0 8
21448: PPUSH
21449: LD_VAR 0 5
21453: PUSH
21454: LD_VAR 0 6
21458: ARRAY
21459: PUSH
21460: LD_INT 1
21462: ARRAY
21463: PPUSH
21464: CALL 53522 0 2
21468: ST_TO_ADDR
21469: GO 21436
21471: POP
21472: POP
// result := tmp ;
21473: LD_ADDR_VAR 0 5
21477: PUSH
21478: LD_VAR 0 8
21482: ST_TO_ADDR
// end ; end ;
21483: LD_VAR 0 5
21487: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21488: LD_INT 0
21490: PPUSH
21491: PPUSH
21492: PPUSH
21493: PPUSH
// if not list then
21494: LD_VAR 0 3
21498: NOT
21499: IFFALSE 21503
// exit ;
21501: GO 21891
// result := [ ] ;
21503: LD_ADDR_VAR 0 6
21507: PUSH
21508: EMPTY
21509: ST_TO_ADDR
// for i in list do
21510: LD_ADDR_VAR 0 7
21514: PUSH
21515: LD_VAR 0 3
21519: PUSH
21520: FOR_IN
21521: IFFALSE 21723
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21523: LD_ADDR_VAR 0 9
21527: PUSH
21528: LD_VAR 0 7
21532: PPUSH
21533: LD_VAR 0 1
21537: PPUSH
21538: LD_VAR 0 2
21542: PPUSH
21543: CALL_OW 297
21547: ST_TO_ADDR
// if not result then
21548: LD_VAR 0 6
21552: NOT
21553: IFFALSE 21579
// result := [ [ i , tmp ] ] else
21555: LD_ADDR_VAR 0 6
21559: PUSH
21560: LD_VAR 0 7
21564: PUSH
21565: LD_VAR 0 9
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: ST_TO_ADDR
21577: GO 21721
// begin if result [ result ] [ 2 ] <= tmp then
21579: LD_VAR 0 6
21583: PUSH
21584: LD_VAR 0 6
21588: ARRAY
21589: PUSH
21590: LD_INT 2
21592: ARRAY
21593: PUSH
21594: LD_VAR 0 9
21598: LESSEQUAL
21599: IFFALSE 21641
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21601: LD_ADDR_VAR 0 6
21605: PUSH
21606: LD_VAR 0 6
21610: PPUSH
21611: LD_VAR 0 6
21615: PUSH
21616: LD_INT 1
21618: PLUS
21619: PPUSH
21620: LD_VAR 0 7
21624: PUSH
21625: LD_VAR 0 9
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PPUSH
21634: CALL_OW 2
21638: ST_TO_ADDR
21639: GO 21721
// for j := 1 to result do
21641: LD_ADDR_VAR 0 8
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_VAR 0 6
21655: PUSH
21656: FOR_TO
21657: IFFALSE 21719
// begin if tmp < result [ j ] [ 2 ] then
21659: LD_VAR 0 9
21663: PUSH
21664: LD_VAR 0 6
21668: PUSH
21669: LD_VAR 0 8
21673: ARRAY
21674: PUSH
21675: LD_INT 2
21677: ARRAY
21678: LESS
21679: IFFALSE 21717
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21681: LD_ADDR_VAR 0 6
21685: PUSH
21686: LD_VAR 0 6
21690: PPUSH
21691: LD_VAR 0 8
21695: PPUSH
21696: LD_VAR 0 7
21700: PUSH
21701: LD_VAR 0 9
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 2
21714: ST_TO_ADDR
// break ;
21715: GO 21719
// end ; end ;
21717: GO 21656
21719: POP
21720: POP
// end ; end ;
21721: GO 21520
21723: POP
21724: POP
// if result and not asc then
21725: LD_VAR 0 6
21729: PUSH
21730: LD_VAR 0 4
21734: NOT
21735: AND
21736: IFFALSE 21811
// begin tmp := result ;
21738: LD_ADDR_VAR 0 9
21742: PUSH
21743: LD_VAR 0 6
21747: ST_TO_ADDR
// for i = tmp downto 1 do
21748: LD_ADDR_VAR 0 7
21752: PUSH
21753: DOUBLE
21754: LD_VAR 0 9
21758: INC
21759: ST_TO_ADDR
21760: LD_INT 1
21762: PUSH
21763: FOR_DOWNTO
21764: IFFALSE 21809
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21766: LD_ADDR_VAR 0 6
21770: PUSH
21771: LD_VAR 0 6
21775: PPUSH
21776: LD_VAR 0 9
21780: PUSH
21781: LD_VAR 0 7
21785: MINUS
21786: PUSH
21787: LD_INT 1
21789: PLUS
21790: PPUSH
21791: LD_VAR 0 9
21795: PUSH
21796: LD_VAR 0 7
21800: ARRAY
21801: PPUSH
21802: CALL_OW 1
21806: ST_TO_ADDR
21807: GO 21763
21809: POP
21810: POP
// end ; tmp := [ ] ;
21811: LD_ADDR_VAR 0 9
21815: PUSH
21816: EMPTY
21817: ST_TO_ADDR
// if mode then
21818: LD_VAR 0 5
21822: IFFALSE 21891
// begin for i = 1 to result do
21824: LD_ADDR_VAR 0 7
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_VAR 0 6
21838: PUSH
21839: FOR_TO
21840: IFFALSE 21879
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21842: LD_ADDR_VAR 0 9
21846: PUSH
21847: LD_VAR 0 9
21851: PPUSH
21852: LD_VAR 0 7
21856: PPUSH
21857: LD_VAR 0 6
21861: PUSH
21862: LD_VAR 0 7
21866: ARRAY
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PPUSH
21872: CALL_OW 1
21876: ST_TO_ADDR
21877: GO 21839
21879: POP
21880: POP
// result := tmp ;
21881: LD_ADDR_VAR 0 6
21885: PUSH
21886: LD_VAR 0 9
21890: ST_TO_ADDR
// end ; end ;
21891: LD_VAR 0 6
21895: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21896: LD_INT 0
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21904: LD_ADDR_VAR 0 5
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// if not x or not y then
21926: LD_VAR 0 2
21930: NOT
21931: PUSH
21932: LD_VAR 0 3
21936: NOT
21937: OR
21938: IFFALSE 21942
// exit ;
21940: GO 23592
// if not range then
21942: LD_VAR 0 4
21946: NOT
21947: IFFALSE 21957
// range := 10 ;
21949: LD_ADDR_VAR 0 4
21953: PUSH
21954: LD_INT 10
21956: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21957: LD_ADDR_VAR 0 8
21961: PUSH
21962: LD_INT 81
21964: PUSH
21965: LD_VAR 0 1
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 92
21976: PUSH
21977: LD_VAR 0 2
21981: PUSH
21982: LD_VAR 0 3
21986: PUSH
21987: LD_VAR 0 4
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 3
22000: PUSH
22001: LD_INT 21
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: PPUSH
22020: CALL_OW 69
22024: ST_TO_ADDR
// if not tmp then
22025: LD_VAR 0 8
22029: NOT
22030: IFFALSE 22034
// exit ;
22032: GO 23592
// for i in tmp do
22034: LD_ADDR_VAR 0 6
22038: PUSH
22039: LD_VAR 0 8
22043: PUSH
22044: FOR_IN
22045: IFFALSE 23567
// begin points := [ 0 , 0 , 0 ] ;
22047: LD_ADDR_VAR 0 9
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: ST_TO_ADDR
// bpoints := 1 ;
22066: LD_ADDR_VAR 0 10
22070: PUSH
22071: LD_INT 1
22073: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22074: LD_VAR 0 6
22078: PPUSH
22079: CALL_OW 247
22083: PUSH
22084: LD_INT 1
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22670
22092: POP
// begin if GetClass ( i ) = 1 then
22093: LD_VAR 0 6
22097: PPUSH
22098: CALL_OW 257
22102: PUSH
22103: LD_INT 1
22105: EQUAL
22106: IFFALSE 22127
// points := [ 10 , 5 , 3 ] ;
22108: LD_ADDR_VAR 0 9
22112: PUSH
22113: LD_INT 10
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22127: LD_VAR 0 6
22131: PPUSH
22132: CALL_OW 257
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: LD_INT 4
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: IN
22151: IFFALSE 22172
// points := [ 3 , 2 , 1 ] ;
22153: LD_ADDR_VAR 0 9
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22172: LD_VAR 0 6
22176: PPUSH
22177: CALL_OW 257
22181: PUSH
22182: LD_INT 5
22184: EQUAL
22185: IFFALSE 22206
// points := [ 130 , 5 , 2 ] ;
22187: LD_ADDR_VAR 0 9
22191: PUSH
22192: LD_INT 130
22194: PUSH
22195: LD_INT 5
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 257
22215: PUSH
22216: LD_INT 8
22218: EQUAL
22219: IFFALSE 22240
// points := [ 35 , 35 , 30 ] ;
22221: LD_ADDR_VAR 0 9
22225: PUSH
22226: LD_INT 35
22228: PUSH
22229: LD_INT 35
22231: PUSH
22232: LD_INT 30
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22240: LD_VAR 0 6
22244: PPUSH
22245: CALL_OW 257
22249: PUSH
22250: LD_INT 9
22252: EQUAL
22253: IFFALSE 22274
// points := [ 20 , 55 , 40 ] ;
22255: LD_ADDR_VAR 0 9
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 55
22265: PUSH
22266: LD_INT 40
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22274: LD_VAR 0 6
22278: PPUSH
22279: CALL_OW 257
22283: PUSH
22284: LD_INT 12
22286: PUSH
22287: LD_INT 16
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: IN
22294: IFFALSE 22315
// points := [ 5 , 3 , 2 ] ;
22296: LD_ADDR_VAR 0 9
22300: PUSH
22301: LD_INT 5
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22315: LD_VAR 0 6
22319: PPUSH
22320: CALL_OW 257
22324: PUSH
22325: LD_INT 17
22327: EQUAL
22328: IFFALSE 22349
// points := [ 100 , 50 , 75 ] ;
22330: LD_ADDR_VAR 0 9
22334: PUSH
22335: LD_INT 100
22337: PUSH
22338: LD_INT 50
22340: PUSH
22341: LD_INT 75
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22349: LD_VAR 0 6
22353: PPUSH
22354: CALL_OW 257
22358: PUSH
22359: LD_INT 15
22361: EQUAL
22362: IFFALSE 22383
// points := [ 10 , 5 , 3 ] ;
22364: LD_ADDR_VAR 0 9
22368: PUSH
22369: LD_INT 10
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22383: LD_VAR 0 6
22387: PPUSH
22388: CALL_OW 257
22392: PUSH
22393: LD_INT 14
22395: EQUAL
22396: IFFALSE 22417
// points := [ 10 , 0 , 0 ] ;
22398: LD_ADDR_VAR 0 9
22402: PUSH
22403: LD_INT 10
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: LIST
22416: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22417: LD_VAR 0 6
22421: PPUSH
22422: CALL_OW 257
22426: PUSH
22427: LD_INT 11
22429: EQUAL
22430: IFFALSE 22451
// points := [ 30 , 10 , 5 ] ;
22432: LD_ADDR_VAR 0 9
22436: PUSH
22437: LD_INT 30
22439: PUSH
22440: LD_INT 10
22442: PUSH
22443: LD_INT 5
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22451: LD_VAR 0 1
22455: PPUSH
22456: LD_INT 5
22458: PPUSH
22459: CALL_OW 321
22463: PUSH
22464: LD_INT 2
22466: EQUAL
22467: IFFALSE 22484
// bpoints := bpoints * 1.8 ;
22469: LD_ADDR_VAR 0 10
22473: PUSH
22474: LD_VAR 0 10
22478: PUSH
22479: LD_REAL  1.80000000000000E+0000
22482: MUL
22483: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22484: LD_VAR 0 6
22488: PPUSH
22489: CALL_OW 257
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: LD_INT 3
22502: PUSH
22503: LD_INT 4
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: IN
22512: PUSH
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_INT 51
22520: PPUSH
22521: CALL_OW 321
22525: PUSH
22526: LD_INT 2
22528: EQUAL
22529: AND
22530: IFFALSE 22547
// bpoints := bpoints * 1.2 ;
22532: LD_ADDR_VAR 0 10
22536: PUSH
22537: LD_VAR 0 10
22541: PUSH
22542: LD_REAL  1.20000000000000E+0000
22545: MUL
22546: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22547: LD_VAR 0 6
22551: PPUSH
22552: CALL_OW 257
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 7
22562: PUSH
22563: LD_INT 9
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: IN
22571: PUSH
22572: LD_VAR 0 1
22576: PPUSH
22577: LD_INT 52
22579: PPUSH
22580: CALL_OW 321
22584: PUSH
22585: LD_INT 2
22587: EQUAL
22588: AND
22589: IFFALSE 22606
// bpoints := bpoints * 1.5 ;
22591: LD_ADDR_VAR 0 10
22595: PUSH
22596: LD_VAR 0 10
22600: PUSH
22601: LD_REAL  1.50000000000000E+0000
22604: MUL
22605: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22606: LD_VAR 0 1
22610: PPUSH
22611: LD_INT 66
22613: PPUSH
22614: CALL_OW 321
22618: PUSH
22619: LD_INT 2
22621: EQUAL
22622: IFFALSE 22639
// bpoints := bpoints * 1.1 ;
22624: LD_ADDR_VAR 0 10
22628: PUSH
22629: LD_VAR 0 10
22633: PUSH
22634: LD_REAL  1.10000000000000E+0000
22637: MUL
22638: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22639: LD_ADDR_VAR 0 10
22643: PUSH
22644: LD_VAR 0 10
22648: PUSH
22649: LD_VAR 0 6
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: CALL_OW 259
22661: PUSH
22662: LD_REAL  1.15000000000000E+0000
22665: MUL
22666: MUL
22667: ST_TO_ADDR
// end ; unit_vehicle :
22668: GO 23496
22670: LD_INT 2
22672: DOUBLE
22673: EQUAL
22674: IFTRUE 22678
22676: GO 23484
22678: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22679: LD_VAR 0 6
22683: PPUSH
22684: CALL_OW 264
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: LD_INT 42
22694: PUSH
22695: LD_INT 24
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: IN
22703: IFFALSE 22724
// points := [ 25 , 5 , 3 ] ;
22705: LD_ADDR_VAR 0 9
22709: PUSH
22710: LD_INT 25
22712: PUSH
22713: LD_INT 5
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22724: LD_VAR 0 6
22728: PPUSH
22729: CALL_OW 264
22733: PUSH
22734: LD_INT 4
22736: PUSH
22737: LD_INT 43
22739: PUSH
22740: LD_INT 25
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: IN
22748: IFFALSE 22769
// points := [ 40 , 15 , 5 ] ;
22750: LD_ADDR_VAR 0 9
22754: PUSH
22755: LD_INT 40
22757: PUSH
22758: LD_INT 15
22760: PUSH
22761: LD_INT 5
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22769: LD_VAR 0 6
22773: PPUSH
22774: CALL_OW 264
22778: PUSH
22779: LD_INT 3
22781: PUSH
22782: LD_INT 23
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: IN
22789: IFFALSE 22810
// points := [ 7 , 25 , 8 ] ;
22791: LD_ADDR_VAR 0 9
22795: PUSH
22796: LD_INT 7
22798: PUSH
22799: LD_INT 25
22801: PUSH
22802: LD_INT 8
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22810: LD_VAR 0 6
22814: PPUSH
22815: CALL_OW 264
22819: PUSH
22820: LD_INT 5
22822: PUSH
22823: LD_INT 27
22825: PUSH
22826: LD_INT 44
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: IN
22834: IFFALSE 22855
// points := [ 14 , 50 , 16 ] ;
22836: LD_ADDR_VAR 0 9
22840: PUSH
22841: LD_INT 14
22843: PUSH
22844: LD_INT 50
22846: PUSH
22847: LD_INT 16
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22855: LD_VAR 0 6
22859: PPUSH
22860: CALL_OW 264
22864: PUSH
22865: LD_INT 6
22867: PUSH
22868: LD_INT 46
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: IN
22875: IFFALSE 22896
// points := [ 32 , 120 , 70 ] ;
22877: LD_ADDR_VAR 0 9
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: LD_INT 120
22887: PUSH
22888: LD_INT 70
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22896: LD_VAR 0 6
22900: PPUSH
22901: CALL_OW 264
22905: PUSH
22906: LD_INT 7
22908: PUSH
22909: LD_INT 28
22911: PUSH
22912: LD_INT 45
22914: PUSH
22915: LD_INT 92
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: IN
22924: IFFALSE 22945
// points := [ 35 , 20 , 45 ] ;
22926: LD_ADDR_VAR 0 9
22930: PUSH
22931: LD_INT 35
22933: PUSH
22934: LD_INT 20
22936: PUSH
22937: LD_INT 45
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22945: LD_VAR 0 6
22949: PPUSH
22950: CALL_OW 264
22954: PUSH
22955: LD_INT 47
22957: PUSH
22958: EMPTY
22959: LIST
22960: IN
22961: IFFALSE 22982
// points := [ 67 , 45 , 75 ] ;
22963: LD_ADDR_VAR 0 9
22967: PUSH
22968: LD_INT 67
22970: PUSH
22971: LD_INT 45
22973: PUSH
22974: LD_INT 75
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22982: LD_VAR 0 6
22986: PPUSH
22987: CALL_OW 264
22991: PUSH
22992: LD_INT 26
22994: PUSH
22995: EMPTY
22996: LIST
22997: IN
22998: IFFALSE 23019
// points := [ 120 , 30 , 80 ] ;
23000: LD_ADDR_VAR 0 9
23004: PUSH
23005: LD_INT 120
23007: PUSH
23008: LD_INT 30
23010: PUSH
23011: LD_INT 80
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23019: LD_VAR 0 6
23023: PPUSH
23024: CALL_OW 264
23028: PUSH
23029: LD_INT 22
23031: PUSH
23032: EMPTY
23033: LIST
23034: IN
23035: IFFALSE 23056
// points := [ 40 , 1 , 1 ] ;
23037: LD_ADDR_VAR 0 9
23041: PUSH
23042: LD_INT 40
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23056: LD_VAR 0 6
23060: PPUSH
23061: CALL_OW 264
23065: PUSH
23066: LD_INT 29
23068: PUSH
23069: EMPTY
23070: LIST
23071: IN
23072: IFFALSE 23093
// points := [ 70 , 200 , 400 ] ;
23074: LD_ADDR_VAR 0 9
23078: PUSH
23079: LD_INT 70
23081: PUSH
23082: LD_INT 200
23084: PUSH
23085: LD_INT 400
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23093: LD_VAR 0 6
23097: PPUSH
23098: CALL_OW 264
23102: PUSH
23103: LD_INT 14
23105: PUSH
23106: LD_INT 53
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: IN
23113: IFFALSE 23134
// points := [ 40 , 10 , 20 ] ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_INT 40
23122: PUSH
23123: LD_INT 10
23125: PUSH
23126: LD_INT 20
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 264
23143: PUSH
23144: LD_INT 9
23146: PUSH
23147: EMPTY
23148: LIST
23149: IN
23150: IFFALSE 23171
// points := [ 5 , 70 , 20 ] ;
23152: LD_ADDR_VAR 0 9
23156: PUSH
23157: LD_INT 5
23159: PUSH
23160: LD_INT 70
23162: PUSH
23163: LD_INT 20
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23171: LD_VAR 0 6
23175: PPUSH
23176: CALL_OW 264
23180: PUSH
23181: LD_INT 10
23183: PUSH
23184: EMPTY
23185: LIST
23186: IN
23187: IFFALSE 23208
// points := [ 35 , 110 , 70 ] ;
23189: LD_ADDR_VAR 0 9
23193: PUSH
23194: LD_INT 35
23196: PUSH
23197: LD_INT 110
23199: PUSH
23200: LD_INT 70
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23208: LD_VAR 0 6
23212: PPUSH
23213: CALL_OW 265
23217: PUSH
23218: LD_INT 25
23220: EQUAL
23221: IFFALSE 23242
// points := [ 80 , 65 , 100 ] ;
23223: LD_ADDR_VAR 0 9
23227: PUSH
23228: LD_INT 80
23230: PUSH
23231: LD_INT 65
23233: PUSH
23234: LD_INT 100
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23242: LD_VAR 0 6
23246: PPUSH
23247: CALL_OW 263
23251: PUSH
23252: LD_INT 1
23254: EQUAL
23255: IFFALSE 23290
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23257: LD_ADDR_VAR 0 10
23261: PUSH
23262: LD_VAR 0 10
23266: PUSH
23267: LD_VAR 0 6
23271: PPUSH
23272: CALL_OW 311
23276: PPUSH
23277: LD_INT 3
23279: PPUSH
23280: CALL_OW 259
23284: PUSH
23285: LD_INT 4
23287: MUL
23288: MUL
23289: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23290: LD_VAR 0 6
23294: PPUSH
23295: CALL_OW 263
23299: PUSH
23300: LD_INT 2
23302: EQUAL
23303: IFFALSE 23354
// begin j := IsControledBy ( i ) ;
23305: LD_ADDR_VAR 0 7
23309: PUSH
23310: LD_VAR 0 6
23314: PPUSH
23315: CALL_OW 312
23319: ST_TO_ADDR
// if j then
23320: LD_VAR 0 7
23324: IFFALSE 23354
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23326: LD_ADDR_VAR 0 10
23330: PUSH
23331: LD_VAR 0 10
23335: PUSH
23336: LD_VAR 0 7
23340: PPUSH
23341: LD_INT 3
23343: PPUSH
23344: CALL_OW 259
23348: PUSH
23349: LD_INT 3
23351: MUL
23352: MUL
23353: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23354: LD_VAR 0 6
23358: PPUSH
23359: CALL_OW 264
23363: PUSH
23364: LD_INT 5
23366: PUSH
23367: LD_INT 6
23369: PUSH
23370: LD_INT 46
23372: PUSH
23373: LD_INT 44
23375: PUSH
23376: LD_INT 47
23378: PUSH
23379: LD_INT 45
23381: PUSH
23382: LD_INT 28
23384: PUSH
23385: LD_INT 7
23387: PUSH
23388: LD_INT 27
23390: PUSH
23391: LD_INT 29
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: IN
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_INT 52
23414: PPUSH
23415: CALL_OW 321
23419: PUSH
23420: LD_INT 2
23422: EQUAL
23423: AND
23424: IFFALSE 23441
// bpoints := bpoints * 1.2 ;
23426: LD_ADDR_VAR 0 10
23430: PUSH
23431: LD_VAR 0 10
23435: PUSH
23436: LD_REAL  1.20000000000000E+0000
23439: MUL
23440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23441: LD_VAR 0 6
23445: PPUSH
23446: CALL_OW 264
23450: PUSH
23451: LD_INT 6
23453: PUSH
23454: LD_INT 46
23456: PUSH
23457: LD_INT 47
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: IN
23465: IFFALSE 23482
// bpoints := bpoints * 1.2 ;
23467: LD_ADDR_VAR 0 10
23471: PUSH
23472: LD_VAR 0 10
23476: PUSH
23477: LD_REAL  1.20000000000000E+0000
23480: MUL
23481: ST_TO_ADDR
// end ; unit_building :
23482: GO 23496
23484: LD_INT 3
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23495
23492: POP
// ; end ;
23493: GO 23496
23495: POP
// for j = 1 to 3 do
23496: LD_ADDR_VAR 0 7
23500: PUSH
23501: DOUBLE
23502: LD_INT 1
23504: DEC
23505: ST_TO_ADDR
23506: LD_INT 3
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23563
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23512: LD_ADDR_VAR 0 5
23516: PUSH
23517: LD_VAR 0 5
23521: PPUSH
23522: LD_VAR 0 7
23526: PPUSH
23527: LD_VAR 0 5
23531: PUSH
23532: LD_VAR 0 7
23536: ARRAY
23537: PUSH
23538: LD_VAR 0 9
23542: PUSH
23543: LD_VAR 0 7
23547: ARRAY
23548: PUSH
23549: LD_VAR 0 10
23553: MUL
23554: PLUS
23555: PPUSH
23556: CALL_OW 1
23560: ST_TO_ADDR
23561: GO 23509
23563: POP
23564: POP
// end ;
23565: GO 22044
23567: POP
23568: POP
// result := Replace ( result , 4 , tmp ) ;
23569: LD_ADDR_VAR 0 5
23573: PUSH
23574: LD_VAR 0 5
23578: PPUSH
23579: LD_INT 4
23581: PPUSH
23582: LD_VAR 0 8
23586: PPUSH
23587: CALL_OW 1
23591: ST_TO_ADDR
// end ;
23592: LD_VAR 0 5
23596: RET
// export function DangerAtRange ( unit , range ) ; begin
23597: LD_INT 0
23599: PPUSH
// if not unit then
23600: LD_VAR 0 1
23604: NOT
23605: IFFALSE 23609
// exit ;
23607: GO 23654
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23609: LD_ADDR_VAR 0 3
23613: PUSH
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL_OW 255
23623: PPUSH
23624: LD_VAR 0 1
23628: PPUSH
23629: CALL_OW 250
23633: PPUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 251
23643: PPUSH
23644: LD_VAR 0 2
23648: PPUSH
23649: CALL 21896 0 4
23653: ST_TO_ADDR
// end ;
23654: LD_VAR 0 3
23658: RET
// export function DangerInArea ( side , area ) ; begin
23659: LD_INT 0
23661: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23662: LD_ADDR_VAR 0 3
23666: PUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_INT 81
23674: PUSH
23675: LD_VAR 0 1
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PPUSH
23684: CALL_OW 70
23688: ST_TO_ADDR
// end ;
23689: LD_VAR 0 3
23693: RET
// export function IsExtension ( b ) ; begin
23694: LD_INT 0
23696: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_VAR 0 1
23706: PUSH
23707: LD_INT 23
23709: PUSH
23710: LD_INT 20
23712: PUSH
23713: LD_INT 22
23715: PUSH
23716: LD_INT 17
23718: PUSH
23719: LD_INT 24
23721: PUSH
23722: LD_INT 21
23724: PUSH
23725: LD_INT 19
23727: PUSH
23728: LD_INT 16
23730: PUSH
23731: LD_INT 25
23733: PUSH
23734: LD_INT 18
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: IN
23749: ST_TO_ADDR
// end ;
23750: LD_VAR 0 2
23754: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23755: LD_INT 0
23757: PPUSH
23758: PPUSH
23759: PPUSH
// result := [ ] ;
23760: LD_ADDR_VAR 0 4
23764: PUSH
23765: EMPTY
23766: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_INT 21
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 70
23791: ST_TO_ADDR
// if not tmp then
23792: LD_VAR 0 5
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23865
// if checkLink then
23801: LD_VAR 0 3
23805: IFFALSE 23855
// begin for i in tmp do
23807: LD_ADDR_VAR 0 6
23811: PUSH
23812: LD_VAR 0 5
23816: PUSH
23817: FOR_IN
23818: IFFALSE 23853
// if GetBase ( i ) <> base then
23820: LD_VAR 0 6
23824: PPUSH
23825: CALL_OW 274
23829: PUSH
23830: LD_VAR 0 1
23834: NONEQUAL
23835: IFFALSE 23851
// ComLinkToBase ( base , i ) ;
23837: LD_VAR 0 1
23841: PPUSH
23842: LD_VAR 0 6
23846: PPUSH
23847: CALL_OW 169
23851: GO 23817
23853: POP
23854: POP
// end ; result := tmp ;
23855: LD_ADDR_VAR 0 4
23859: PUSH
23860: LD_VAR 0 5
23864: ST_TO_ADDR
// end ;
23865: LD_VAR 0 4
23869: RET
// export function ComComplete ( units , b ) ; var i ; begin
23870: LD_INT 0
23872: PPUSH
23873: PPUSH
// if not units then
23874: LD_VAR 0 1
23878: NOT
23879: IFFALSE 23883
// exit ;
23881: GO 23973
// for i in units do
23883: LD_ADDR_VAR 0 4
23887: PUSH
23888: LD_VAR 0 1
23892: PUSH
23893: FOR_IN
23894: IFFALSE 23971
// if BuildingStatus ( b ) = bs_build then
23896: LD_VAR 0 2
23900: PPUSH
23901: CALL_OW 461
23905: PUSH
23906: LD_INT 1
23908: EQUAL
23909: IFFALSE 23969
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23911: LD_VAR 0 4
23915: PPUSH
23916: LD_STRING h
23918: PUSH
23919: LD_VAR 0 2
23923: PPUSH
23924: CALL_OW 250
23928: PUSH
23929: LD_VAR 0 2
23933: PPUSH
23934: CALL_OW 251
23938: PUSH
23939: LD_VAR 0 2
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: PPUSH
23965: CALL_OW 446
23969: GO 23893
23971: POP
23972: POP
// end ;
23973: LD_VAR 0 3
23977: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23978: LD_INT 0
23980: PPUSH
23981: PPUSH
23982: PPUSH
23983: PPUSH
23984: PPUSH
23985: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23986: LD_VAR 0 1
23990: NOT
23991: PUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 263
24001: PUSH
24002: LD_INT 2
24004: NONEQUAL
24005: OR
24006: IFFALSE 24010
// exit ;
24008: GO 24326
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24010: LD_ADDR_VAR 0 6
24014: PUSH
24015: LD_INT 22
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 255
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 30
24037: PUSH
24038: LD_INT 36
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 34
24047: PUSH
24048: LD_INT 31
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 69
24068: ST_TO_ADDR
// if not tmp then
24069: LD_VAR 0 6
24073: NOT
24074: IFFALSE 24078
// exit ;
24076: GO 24326
// result := [ ] ;
24078: LD_ADDR_VAR 0 2
24082: PUSH
24083: EMPTY
24084: ST_TO_ADDR
// for i in tmp do
24085: LD_ADDR_VAR 0 3
24089: PUSH
24090: LD_VAR 0 6
24094: PUSH
24095: FOR_IN
24096: IFFALSE 24167
// begin t := UnitsInside ( i ) ;
24098: LD_ADDR_VAR 0 4
24102: PUSH
24103: LD_VAR 0 3
24107: PPUSH
24108: CALL_OW 313
24112: ST_TO_ADDR
// if t then
24113: LD_VAR 0 4
24117: IFFALSE 24165
// for j in t do
24119: LD_ADDR_VAR 0 7
24123: PUSH
24124: LD_VAR 0 4
24128: PUSH
24129: FOR_IN
24130: IFFALSE 24163
// result := Replace ( result , result + 1 , j ) ;
24132: LD_ADDR_VAR 0 2
24136: PUSH
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 2
24146: PUSH
24147: LD_INT 1
24149: PLUS
24150: PPUSH
24151: LD_VAR 0 7
24155: PPUSH
24156: CALL_OW 1
24160: ST_TO_ADDR
24161: GO 24129
24163: POP
24164: POP
// end ;
24165: GO 24095
24167: POP
24168: POP
// if not result then
24169: LD_VAR 0 2
24173: NOT
24174: IFFALSE 24178
// exit ;
24176: GO 24326
// mech := result [ 1 ] ;
24178: LD_ADDR_VAR 0 5
24182: PUSH
24183: LD_VAR 0 2
24187: PUSH
24188: LD_INT 1
24190: ARRAY
24191: ST_TO_ADDR
// if result > 1 then
24192: LD_VAR 0 2
24196: PUSH
24197: LD_INT 1
24199: GREATER
24200: IFFALSE 24312
// begin for i = 2 to result do
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: DOUBLE
24208: LD_INT 2
24210: DEC
24211: ST_TO_ADDR
24212: LD_VAR 0 2
24216: PUSH
24217: FOR_TO
24218: IFFALSE 24310
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24220: LD_ADDR_VAR 0 4
24224: PUSH
24225: LD_VAR 0 2
24229: PUSH
24230: LD_VAR 0 3
24234: ARRAY
24235: PPUSH
24236: LD_INT 3
24238: PPUSH
24239: CALL_OW 259
24243: PUSH
24244: LD_VAR 0 2
24248: PUSH
24249: LD_VAR 0 3
24253: ARRAY
24254: PPUSH
24255: CALL_OW 432
24259: MINUS
24260: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24261: LD_VAR 0 4
24265: PUSH
24266: LD_VAR 0 5
24270: PPUSH
24271: LD_INT 3
24273: PPUSH
24274: CALL_OW 259
24278: PUSH
24279: LD_VAR 0 5
24283: PPUSH
24284: CALL_OW 432
24288: MINUS
24289: GREATEREQUAL
24290: IFFALSE 24308
// mech := result [ i ] ;
24292: LD_ADDR_VAR 0 5
24296: PUSH
24297: LD_VAR 0 2
24301: PUSH
24302: LD_VAR 0 3
24306: ARRAY
24307: ST_TO_ADDR
// end ;
24308: GO 24217
24310: POP
24311: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_VAR 0 5
24321: PPUSH
24322: CALL_OW 135
// end ;
24326: LD_VAR 0 2
24330: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24331: LD_INT 0
24333: PPUSH
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
// result := [ ] ;
24346: LD_ADDR_VAR 0 7
24350: PUSH
24351: EMPTY
24352: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24353: LD_VAR 0 1
24357: PPUSH
24358: CALL_OW 266
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: IN
24373: NOT
24374: IFFALSE 24378
// exit ;
24376: GO 26012
// if name then
24378: LD_VAR 0 3
24382: IFFALSE 24398
// SetBName ( base_dep , name ) ;
24384: LD_VAR 0 1
24388: PPUSH
24389: LD_VAR 0 3
24393: PPUSH
24394: CALL_OW 500
// base := GetBase ( base_dep ) ;
24398: LD_ADDR_VAR 0 15
24402: PUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 274
24412: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24413: LD_ADDR_VAR 0 16
24417: PUSH
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL_OW 255
24427: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24428: LD_ADDR_VAR 0 17
24432: PUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 248
24442: ST_TO_ADDR
// if sources then
24443: LD_VAR 0 5
24447: IFFALSE 24494
// for i = 1 to 3 do
24449: LD_ADDR_VAR 0 8
24453: PUSH
24454: DOUBLE
24455: LD_INT 1
24457: DEC
24458: ST_TO_ADDR
24459: LD_INT 3
24461: PUSH
24462: FOR_TO
24463: IFFALSE 24492
// AddResourceType ( base , i , sources [ i ] ) ;
24465: LD_VAR 0 15
24469: PPUSH
24470: LD_VAR 0 8
24474: PPUSH
24475: LD_VAR 0 5
24479: PUSH
24480: LD_VAR 0 8
24484: ARRAY
24485: PPUSH
24486: CALL_OW 276
24490: GO 24462
24492: POP
24493: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24494: LD_ADDR_VAR 0 18
24498: PUSH
24499: LD_VAR 0 15
24503: PPUSH
24504: LD_VAR 0 2
24508: PPUSH
24509: LD_INT 1
24511: PPUSH
24512: CALL 23755 0 3
24516: ST_TO_ADDR
// InitHc ;
24517: CALL_OW 19
// InitUc ;
24521: CALL_OW 18
// uc_side := side ;
24525: LD_ADDR_OWVAR 20
24529: PUSH
24530: LD_VAR 0 16
24534: ST_TO_ADDR
// uc_nation := nation ;
24535: LD_ADDR_OWVAR 21
24539: PUSH
24540: LD_VAR 0 17
24544: ST_TO_ADDR
// if buildings then
24545: LD_VAR 0 18
24549: IFFALSE 25871
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24551: LD_ADDR_VAR 0 19
24555: PUSH
24556: LD_VAR 0 18
24560: PPUSH
24561: LD_INT 2
24563: PUSH
24564: LD_INT 30
24566: PUSH
24567: LD_INT 29
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 30
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: PPUSH
24589: CALL_OW 72
24593: ST_TO_ADDR
// if tmp then
24594: LD_VAR 0 19
24598: IFFALSE 24646
// for i in tmp do
24600: LD_ADDR_VAR 0 8
24604: PUSH
24605: LD_VAR 0 19
24609: PUSH
24610: FOR_IN
24611: IFFALSE 24644
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24613: LD_VAR 0 8
24617: PPUSH
24618: CALL_OW 250
24622: PPUSH
24623: LD_VAR 0 8
24627: PPUSH
24628: CALL_OW 251
24632: PPUSH
24633: LD_VAR 0 16
24637: PPUSH
24638: CALL_OW 441
24642: GO 24610
24644: POP
24645: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24646: LD_VAR 0 18
24650: PPUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 30
24656: PUSH
24657: LD_INT 32
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 30
24666: PUSH
24667: LD_INT 33
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: PPUSH
24679: CALL_OW 72
24683: IFFALSE 24771
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24685: LD_ADDR_VAR 0 8
24689: PUSH
24690: LD_VAR 0 18
24694: PPUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 30
24700: PUSH
24701: LD_INT 32
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 33
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 72
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24769
// begin if not GetBWeapon ( i ) then
24731: LD_VAR 0 8
24735: PPUSH
24736: CALL_OW 269
24740: NOT
24741: IFFALSE 24767
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24743: LD_VAR 0 8
24747: PPUSH
24748: LD_VAR 0 8
24752: PPUSH
24753: LD_VAR 0 2
24757: PPUSH
24758: CALL 26017 0 2
24762: PPUSH
24763: CALL_OW 431
// end ;
24767: GO 24728
24769: POP
24770: POP
// end ; for i = 1 to personel do
24771: LD_ADDR_VAR 0 8
24775: PUSH
24776: DOUBLE
24777: LD_INT 1
24779: DEC
24780: ST_TO_ADDR
24781: LD_VAR 0 6
24785: PUSH
24786: FOR_TO
24787: IFFALSE 25851
// begin if i > 4 then
24789: LD_VAR 0 8
24793: PUSH
24794: LD_INT 4
24796: GREATER
24797: IFFALSE 24801
// break ;
24799: GO 25851
// case i of 1 :
24801: LD_VAR 0 8
24805: PUSH
24806: LD_INT 1
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24894
24814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24815: LD_ADDR_VAR 0 12
24819: PUSH
24820: LD_VAR 0 18
24824: PPUSH
24825: LD_INT 22
24827: PUSH
24828: LD_VAR 0 16
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 58
24839: PUSH
24840: EMPTY
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: LD_INT 30
24848: PUSH
24849: LD_INT 32
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 30
24858: PUSH
24859: LD_INT 4
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 30
24868: PUSH
24869: LD_INT 5
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: PPUSH
24887: CALL_OW 72
24891: ST_TO_ADDR
24892: GO 25116
24894: LD_INT 2
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 24964
24902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24903: LD_ADDR_VAR 0 12
24907: PUSH
24908: LD_VAR 0 18
24912: PPUSH
24913: LD_INT 22
24915: PUSH
24916: LD_VAR 0 16
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 30
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 30
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PPUSH
24957: CALL_OW 72
24961: ST_TO_ADDR
24962: GO 25116
24964: LD_INT 3
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 25034
24972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24973: LD_ADDR_VAR 0 12
24977: PUSH
24978: LD_VAR 0 18
24982: PPUSH
24983: LD_INT 22
24985: PUSH
24986: LD_VAR 0 16
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 30
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 30
25010: PUSH
25011: LD_INT 3
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 72
25031: ST_TO_ADDR
25032: GO 25116
25034: LD_INT 4
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25115
25042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25043: LD_ADDR_VAR 0 12
25047: PUSH
25048: LD_VAR 0 18
25052: PPUSH
25053: LD_INT 22
25055: PUSH
25056: LD_VAR 0 16
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 30
25070: PUSH
25071: LD_INT 6
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 30
25080: PUSH
25081: LD_INT 7
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 30
25090: PUSH
25091: LD_INT 8
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PPUSH
25108: CALL_OW 72
25112: ST_TO_ADDR
25113: GO 25116
25115: POP
// if i = 1 then
25116: LD_VAR 0 8
25120: PUSH
25121: LD_INT 1
25123: EQUAL
25124: IFFALSE 25235
// begin tmp := [ ] ;
25126: LD_ADDR_VAR 0 19
25130: PUSH
25131: EMPTY
25132: ST_TO_ADDR
// for j in f do
25133: LD_ADDR_VAR 0 9
25137: PUSH
25138: LD_VAR 0 12
25142: PUSH
25143: FOR_IN
25144: IFFALSE 25217
// if GetBType ( j ) = b_bunker then
25146: LD_VAR 0 9
25150: PPUSH
25151: CALL_OW 266
25155: PUSH
25156: LD_INT 32
25158: EQUAL
25159: IFFALSE 25186
// tmp := Insert ( tmp , 1 , j ) else
25161: LD_ADDR_VAR 0 19
25165: PUSH
25166: LD_VAR 0 19
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_VAR 0 9
25178: PPUSH
25179: CALL_OW 2
25183: ST_TO_ADDR
25184: GO 25215
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25186: LD_ADDR_VAR 0 19
25190: PUSH
25191: LD_VAR 0 19
25195: PPUSH
25196: LD_VAR 0 19
25200: PUSH
25201: LD_INT 1
25203: PLUS
25204: PPUSH
25205: LD_VAR 0 9
25209: PPUSH
25210: CALL_OW 2
25214: ST_TO_ADDR
25215: GO 25143
25217: POP
25218: POP
// if tmp then
25219: LD_VAR 0 19
25223: IFFALSE 25235
// f := tmp ;
25225: LD_ADDR_VAR 0 12
25229: PUSH
25230: LD_VAR 0 19
25234: ST_TO_ADDR
// end ; x := personel [ i ] ;
25235: LD_ADDR_VAR 0 13
25239: PUSH
25240: LD_VAR 0 6
25244: PUSH
25245: LD_VAR 0 8
25249: ARRAY
25250: ST_TO_ADDR
// if x = - 1 then
25251: LD_VAR 0 13
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: EQUAL
25260: IFFALSE 25469
// begin for j in f do
25262: LD_ADDR_VAR 0 9
25266: PUSH
25267: LD_VAR 0 12
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25465
// repeat InitHc ;
25275: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25279: LD_VAR 0 9
25283: PPUSH
25284: CALL_OW 266
25288: PUSH
25289: LD_INT 5
25291: EQUAL
25292: IFFALSE 25362
// begin if UnitsInside ( j ) < 3 then
25294: LD_VAR 0 9
25298: PPUSH
25299: CALL_OW 313
25303: PUSH
25304: LD_INT 3
25306: LESS
25307: IFFALSE 25343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25309: LD_INT 0
25311: PPUSH
25312: LD_INT 5
25314: PUSH
25315: LD_INT 8
25317: PUSH
25318: LD_INT 9
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: LIST
25325: PUSH
25326: LD_VAR 0 17
25330: ARRAY
25331: PPUSH
25332: LD_VAR 0 4
25336: PPUSH
25337: CALL_OW 380
25341: GO 25360
// PrepareHuman ( false , i , skill ) ;
25343: LD_INT 0
25345: PPUSH
25346: LD_VAR 0 8
25350: PPUSH
25351: LD_VAR 0 4
25355: PPUSH
25356: CALL_OW 380
// end else
25360: GO 25379
// PrepareHuman ( false , i , skill ) ;
25362: LD_INT 0
25364: PPUSH
25365: LD_VAR 0 8
25369: PPUSH
25370: LD_VAR 0 4
25374: PPUSH
25375: CALL_OW 380
// un := CreateHuman ;
25379: LD_ADDR_VAR 0 14
25383: PUSH
25384: CALL_OW 44
25388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25389: LD_ADDR_VAR 0 7
25393: PUSH
25394: LD_VAR 0 7
25398: PPUSH
25399: LD_INT 1
25401: PPUSH
25402: LD_VAR 0 14
25406: PPUSH
25407: CALL_OW 2
25411: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25412: LD_VAR 0 14
25416: PPUSH
25417: LD_VAR 0 9
25421: PPUSH
25422: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25426: LD_VAR 0 9
25430: PPUSH
25431: CALL_OW 313
25435: PUSH
25436: LD_INT 6
25438: EQUAL
25439: PUSH
25440: LD_VAR 0 9
25444: PPUSH
25445: CALL_OW 266
25449: PUSH
25450: LD_INT 32
25452: PUSH
25453: LD_INT 31
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: IN
25460: OR
25461: IFFALSE 25275
25463: GO 25272
25465: POP
25466: POP
// end else
25467: GO 25849
// for j = 1 to x do
25469: LD_ADDR_VAR 0 9
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_VAR 0 13
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25847
// begin InitHc ;
25487: CALL_OW 19
// if not f then
25491: LD_VAR 0 12
25495: NOT
25496: IFFALSE 25585
// begin PrepareHuman ( false , i , skill ) ;
25498: LD_INT 0
25500: PPUSH
25501: LD_VAR 0 8
25505: PPUSH
25506: LD_VAR 0 4
25510: PPUSH
25511: CALL_OW 380
// un := CreateHuman ;
25515: LD_ADDR_VAR 0 14
25519: PUSH
25520: CALL_OW 44
25524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25525: LD_ADDR_VAR 0 7
25529: PUSH
25530: LD_VAR 0 7
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 14
25542: PPUSH
25543: CALL_OW 2
25547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25548: LD_VAR 0 14
25552: PPUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 250
25562: PPUSH
25563: LD_VAR 0 1
25567: PPUSH
25568: CALL_OW 251
25572: PPUSH
25573: LD_INT 10
25575: PPUSH
25576: LD_INT 0
25578: PPUSH
25579: CALL_OW 50
// continue ;
25583: GO 25484
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25585: LD_VAR 0 12
25589: PUSH
25590: LD_INT 1
25592: ARRAY
25593: PPUSH
25594: CALL_OW 313
25598: PUSH
25599: LD_VAR 0 12
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: PPUSH
25608: CALL_OW 266
25612: PUSH
25613: LD_INT 32
25615: PUSH
25616: LD_INT 31
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: IN
25623: AND
25624: PUSH
25625: LD_VAR 0 12
25629: PUSH
25630: LD_INT 1
25632: ARRAY
25633: PPUSH
25634: CALL_OW 313
25638: PUSH
25639: LD_INT 6
25641: EQUAL
25642: OR
25643: IFFALSE 25663
// f := Delete ( f , 1 ) ;
25645: LD_ADDR_VAR 0 12
25649: PUSH
25650: LD_VAR 0 12
25654: PPUSH
25655: LD_INT 1
25657: PPUSH
25658: CALL_OW 3
25662: ST_TO_ADDR
// if not f then
25663: LD_VAR 0 12
25667: NOT
25668: IFFALSE 25686
// begin x := x + 2 ;
25670: LD_ADDR_VAR 0 13
25674: PUSH
25675: LD_VAR 0 13
25679: PUSH
25680: LD_INT 2
25682: PLUS
25683: ST_TO_ADDR
// continue ;
25684: GO 25484
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25686: LD_VAR 0 12
25690: PUSH
25691: LD_INT 1
25693: ARRAY
25694: PPUSH
25695: CALL_OW 266
25699: PUSH
25700: LD_INT 5
25702: EQUAL
25703: IFFALSE 25777
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25705: LD_VAR 0 12
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: CALL_OW 313
25718: PUSH
25719: LD_INT 3
25721: LESS
25722: IFFALSE 25758
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25724: LD_INT 0
25726: PPUSH
25727: LD_INT 5
25729: PUSH
25730: LD_INT 8
25732: PUSH
25733: LD_INT 9
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: PUSH
25741: LD_VAR 0 17
25745: ARRAY
25746: PPUSH
25747: LD_VAR 0 4
25751: PPUSH
25752: CALL_OW 380
25756: GO 25775
// PrepareHuman ( false , i , skill ) ;
25758: LD_INT 0
25760: PPUSH
25761: LD_VAR 0 8
25765: PPUSH
25766: LD_VAR 0 4
25770: PPUSH
25771: CALL_OW 380
// end else
25775: GO 25794
// PrepareHuman ( false , i , skill ) ;
25777: LD_INT 0
25779: PPUSH
25780: LD_VAR 0 8
25784: PPUSH
25785: LD_VAR 0 4
25789: PPUSH
25790: CALL_OW 380
// un := CreateHuman ;
25794: LD_ADDR_VAR 0 14
25798: PUSH
25799: CALL_OW 44
25803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25804: LD_ADDR_VAR 0 7
25808: PUSH
25809: LD_VAR 0 7
25813: PPUSH
25814: LD_INT 1
25816: PPUSH
25817: LD_VAR 0 14
25821: PPUSH
25822: CALL_OW 2
25826: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25827: LD_VAR 0 14
25831: PPUSH
25832: LD_VAR 0 12
25836: PUSH
25837: LD_INT 1
25839: ARRAY
25840: PPUSH
25841: CALL_OW 52
// end ;
25845: GO 25484
25847: POP
25848: POP
// end ;
25849: GO 24786
25851: POP
25852: POP
// result := result ^ buildings ;
25853: LD_ADDR_VAR 0 7
25857: PUSH
25858: LD_VAR 0 7
25862: PUSH
25863: LD_VAR 0 18
25867: ADD
25868: ST_TO_ADDR
// end else
25869: GO 26012
// begin for i = 1 to personel do
25871: LD_ADDR_VAR 0 8
25875: PUSH
25876: DOUBLE
25877: LD_INT 1
25879: DEC
25880: ST_TO_ADDR
25881: LD_VAR 0 6
25885: PUSH
25886: FOR_TO
25887: IFFALSE 26010
// begin if i > 4 then
25889: LD_VAR 0 8
25893: PUSH
25894: LD_INT 4
25896: GREATER
25897: IFFALSE 25901
// break ;
25899: GO 26010
// x := personel [ i ] ;
25901: LD_ADDR_VAR 0 13
25905: PUSH
25906: LD_VAR 0 6
25910: PUSH
25911: LD_VAR 0 8
25915: ARRAY
25916: ST_TO_ADDR
// if x = - 1 then
25917: LD_VAR 0 13
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: EQUAL
25926: IFFALSE 25930
// continue ;
25928: GO 25886
// PrepareHuman ( false , i , skill ) ;
25930: LD_INT 0
25932: PPUSH
25933: LD_VAR 0 8
25937: PPUSH
25938: LD_VAR 0 4
25942: PPUSH
25943: CALL_OW 380
// un := CreateHuman ;
25947: LD_ADDR_VAR 0 14
25951: PUSH
25952: CALL_OW 44
25956: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25957: LD_VAR 0 14
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 250
25971: PPUSH
25972: LD_VAR 0 1
25976: PPUSH
25977: CALL_OW 251
25981: PPUSH
25982: LD_INT 10
25984: PPUSH
25985: LD_INT 0
25987: PPUSH
25988: CALL_OW 50
// result := result ^ un ;
25992: LD_ADDR_VAR 0 7
25996: PUSH
25997: LD_VAR 0 7
26001: PUSH
26002: LD_VAR 0 14
26006: ADD
26007: ST_TO_ADDR
// end ;
26008: GO 25886
26010: POP
26011: POP
// end ; end ;
26012: LD_VAR 0 7
26016: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
26027: PPUSH
26028: PPUSH
26029: PPUSH
26030: PPUSH
26031: PPUSH
26032: PPUSH
26033: PPUSH
26034: PPUSH
// result := false ;
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 0
26042: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26043: LD_VAR 0 1
26047: NOT
26048: PUSH
26049: LD_VAR 0 1
26053: PPUSH
26054: CALL_OW 266
26058: PUSH
26059: LD_INT 32
26061: PUSH
26062: LD_INT 33
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: IN
26069: NOT
26070: OR
26071: IFFALSE 26075
// exit ;
26073: GO 27184
// nat := GetNation ( tower ) ;
26075: LD_ADDR_VAR 0 12
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 248
26089: ST_TO_ADDR
// side := GetSide ( tower ) ;
26090: LD_ADDR_VAR 0 16
26094: PUSH
26095: LD_VAR 0 1
26099: PPUSH
26100: CALL_OW 255
26104: ST_TO_ADDR
// x := GetX ( tower ) ;
26105: LD_ADDR_VAR 0 10
26109: PUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: CALL_OW 250
26119: ST_TO_ADDR
// y := GetY ( tower ) ;
26120: LD_ADDR_VAR 0 11
26124: PUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 251
26134: ST_TO_ADDR
// if not x or not y then
26135: LD_VAR 0 10
26139: NOT
26140: PUSH
26141: LD_VAR 0 11
26145: NOT
26146: OR
26147: IFFALSE 26151
// exit ;
26149: GO 27184
// weapon := 0 ;
26151: LD_ADDR_VAR 0 18
26155: PUSH
26156: LD_INT 0
26158: ST_TO_ADDR
// fac_list := [ ] ;
26159: LD_ADDR_VAR 0 17
26163: PUSH
26164: EMPTY
26165: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26166: LD_ADDR_VAR 0 6
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 274
26180: PPUSH
26181: LD_VAR 0 2
26185: PPUSH
26186: LD_INT 0
26188: PPUSH
26189: CALL 23755 0 3
26193: PPUSH
26194: LD_INT 30
26196: PUSH
26197: LD_INT 3
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 72
26208: ST_TO_ADDR
// if not factories then
26209: LD_VAR 0 6
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 27184
// for i in factories do
26218: LD_ADDR_VAR 0 8
26222: PUSH
26223: LD_VAR 0 6
26227: PUSH
26228: FOR_IN
26229: IFFALSE 26254
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26231: LD_ADDR_VAR 0 17
26235: PUSH
26236: LD_VAR 0 17
26240: PUSH
26241: LD_VAR 0 8
26245: PPUSH
26246: CALL_OW 478
26250: UNION
26251: ST_TO_ADDR
26252: GO 26228
26254: POP
26255: POP
// if not fac_list then
26256: LD_VAR 0 17
26260: NOT
26261: IFFALSE 26265
// exit ;
26263: GO 27184
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26265: LD_ADDR_VAR 0 5
26269: PUSH
26270: LD_INT 4
26272: PUSH
26273: LD_INT 5
26275: PUSH
26276: LD_INT 9
26278: PUSH
26279: LD_INT 10
26281: PUSH
26282: LD_INT 6
26284: PUSH
26285: LD_INT 7
26287: PUSH
26288: LD_INT 11
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 27
26302: PUSH
26303: LD_INT 28
26305: PUSH
26306: LD_INT 26
26308: PUSH
26309: LD_INT 30
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 43
26320: PUSH
26321: LD_INT 44
26323: PUSH
26324: LD_INT 46
26326: PUSH
26327: LD_INT 45
26329: PUSH
26330: LD_INT 47
26332: PUSH
26333: LD_INT 49
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: PUSH
26349: LD_VAR 0 12
26353: ARRAY
26354: ST_TO_ADDR
// list := list isect fac_list ;
26355: LD_ADDR_VAR 0 5
26359: PUSH
26360: LD_VAR 0 5
26364: PUSH
26365: LD_VAR 0 17
26369: ISECT
26370: ST_TO_ADDR
// if not list then
26371: LD_VAR 0 5
26375: NOT
26376: IFFALSE 26380
// exit ;
26378: GO 27184
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26380: LD_VAR 0 12
26384: PUSH
26385: LD_INT 3
26387: EQUAL
26388: PUSH
26389: LD_INT 49
26391: PUSH
26392: LD_VAR 0 5
26396: IN
26397: AND
26398: PUSH
26399: LD_INT 31
26401: PPUSH
26402: LD_VAR 0 16
26406: PPUSH
26407: CALL_OW 321
26411: PUSH
26412: LD_INT 2
26414: EQUAL
26415: AND
26416: IFFALSE 26476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26418: LD_INT 22
26420: PUSH
26421: LD_VAR 0 16
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 35
26432: PUSH
26433: LD_INT 49
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 91
26442: PUSH
26443: LD_VAR 0 1
26447: PUSH
26448: LD_INT 10
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: PPUSH
26461: CALL_OW 69
26465: NOT
26466: IFFALSE 26476
// weapon := ru_time_lapser ;
26468: LD_ADDR_VAR 0 18
26472: PUSH
26473: LD_INT 49
26475: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26476: LD_VAR 0 12
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: IN
26491: PUSH
26492: LD_INT 11
26494: PUSH
26495: LD_VAR 0 5
26499: IN
26500: PUSH
26501: LD_INT 30
26503: PUSH
26504: LD_VAR 0 5
26508: IN
26509: OR
26510: AND
26511: PUSH
26512: LD_INT 6
26514: PPUSH
26515: LD_VAR 0 16
26519: PPUSH
26520: CALL_OW 321
26524: PUSH
26525: LD_INT 2
26527: EQUAL
26528: AND
26529: IFFALSE 26694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26531: LD_INT 22
26533: PUSH
26534: LD_VAR 0 16
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: LD_INT 35
26548: PUSH
26549: LD_INT 11
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 35
26558: PUSH
26559: LD_INT 30
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 91
26573: PUSH
26574: LD_VAR 0 1
26578: PUSH
26579: LD_INT 18
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: PPUSH
26592: CALL_OW 69
26596: NOT
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_VAR 0 16
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: LD_INT 32
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 30
26625: PUSH
26626: LD_INT 33
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 91
26640: PUSH
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 12
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: PUSH
26667: LD_INT 2
26669: GREATER
26670: AND
26671: IFFALSE 26694
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26673: LD_ADDR_VAR 0 18
26677: PUSH
26678: LD_INT 11
26680: PUSH
26681: LD_INT 30
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_VAR 0 12
26692: ARRAY
26693: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26694: LD_VAR 0 18
26698: NOT
26699: PUSH
26700: LD_INT 40
26702: PPUSH
26703: LD_VAR 0 16
26707: PPUSH
26708: CALL_OW 321
26712: PUSH
26713: LD_INT 2
26715: EQUAL
26716: AND
26717: PUSH
26718: LD_INT 7
26720: PUSH
26721: LD_VAR 0 5
26725: IN
26726: PUSH
26727: LD_INT 28
26729: PUSH
26730: LD_VAR 0 5
26734: IN
26735: OR
26736: PUSH
26737: LD_INT 45
26739: PUSH
26740: LD_VAR 0 5
26744: IN
26745: OR
26746: AND
26747: IFFALSE 27001
// begin hex := GetHexInfo ( x , y ) ;
26749: LD_ADDR_VAR 0 4
26753: PUSH
26754: LD_VAR 0 10
26758: PPUSH
26759: LD_VAR 0 11
26763: PPUSH
26764: CALL_OW 546
26768: ST_TO_ADDR
// if hex [ 1 ] then
26769: LD_VAR 0 4
26773: PUSH
26774: LD_INT 1
26776: ARRAY
26777: IFFALSE 26781
// exit ;
26779: GO 27184
// height := hex [ 2 ] ;
26781: LD_ADDR_VAR 0 15
26785: PUSH
26786: LD_VAR 0 4
26790: PUSH
26791: LD_INT 2
26793: ARRAY
26794: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26795: LD_ADDR_VAR 0 14
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 3
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// for i in tmp do
26818: LD_ADDR_VAR 0 8
26822: PUSH
26823: LD_VAR 0 14
26827: PUSH
26828: FOR_IN
26829: IFFALSE 26999
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26831: LD_ADDR_VAR 0 9
26835: PUSH
26836: LD_VAR 0 10
26840: PPUSH
26841: LD_VAR 0 8
26845: PPUSH
26846: LD_INT 5
26848: PPUSH
26849: CALL_OW 272
26853: PUSH
26854: LD_VAR 0 11
26858: PPUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: LD_INT 5
26866: PPUSH
26867: CALL_OW 273
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26876: LD_VAR 0 9
26880: PUSH
26881: LD_INT 1
26883: ARRAY
26884: PPUSH
26885: LD_VAR 0 9
26889: PUSH
26890: LD_INT 2
26892: ARRAY
26893: PPUSH
26894: CALL_OW 488
26898: IFFALSE 26997
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26900: LD_ADDR_VAR 0 4
26904: PUSH
26905: LD_VAR 0 9
26909: PUSH
26910: LD_INT 1
26912: ARRAY
26913: PPUSH
26914: LD_VAR 0 9
26918: PUSH
26919: LD_INT 2
26921: ARRAY
26922: PPUSH
26923: CALL_OW 546
26927: ST_TO_ADDR
// if hex [ 1 ] then
26928: LD_VAR 0 4
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: IFFALSE 26940
// continue ;
26938: GO 26828
// h := hex [ 2 ] ;
26940: LD_ADDR_VAR 0 13
26944: PUSH
26945: LD_VAR 0 4
26949: PUSH
26950: LD_INT 2
26952: ARRAY
26953: ST_TO_ADDR
// if h + 7 < height then
26954: LD_VAR 0 13
26958: PUSH
26959: LD_INT 7
26961: PLUS
26962: PUSH
26963: LD_VAR 0 15
26967: LESS
26968: IFFALSE 26997
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26970: LD_ADDR_VAR 0 18
26974: PUSH
26975: LD_INT 7
26977: PUSH
26978: LD_INT 28
26980: PUSH
26981: LD_INT 45
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: PUSH
26989: LD_VAR 0 12
26993: ARRAY
26994: ST_TO_ADDR
// break ;
26995: GO 26999
// end ; end ; end ;
26997: GO 26828
26999: POP
27000: POP
// end ; if not weapon then
27001: LD_VAR 0 18
27005: NOT
27006: IFFALSE 27066
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27008: LD_ADDR_VAR 0 5
27012: PUSH
27013: LD_VAR 0 5
27017: PUSH
27018: LD_INT 11
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 49
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: DIFF
27032: ST_TO_ADDR
// if not list then
27033: LD_VAR 0 5
27037: NOT
27038: IFFALSE 27042
// exit ;
27040: GO 27184
// weapon := list [ rand ( 1 , list ) ] ;
27042: LD_ADDR_VAR 0 18
27046: PUSH
27047: LD_VAR 0 5
27051: PUSH
27052: LD_INT 1
27054: PPUSH
27055: LD_VAR 0 5
27059: PPUSH
27060: CALL_OW 12
27064: ARRAY
27065: ST_TO_ADDR
// end ; if weapon then
27066: LD_VAR 0 18
27070: IFFALSE 27184
// begin tmp := CostOfWeapon ( weapon ) ;
27072: LD_ADDR_VAR 0 14
27076: PUSH
27077: LD_VAR 0 18
27081: PPUSH
27082: CALL_OW 451
27086: ST_TO_ADDR
// j := GetBase ( tower ) ;
27087: LD_ADDR_VAR 0 9
27091: PUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL_OW 274
27101: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27102: LD_VAR 0 9
27106: PPUSH
27107: LD_INT 1
27109: PPUSH
27110: CALL_OW 275
27114: PUSH
27115: LD_VAR 0 14
27119: PUSH
27120: LD_INT 1
27122: ARRAY
27123: GREATEREQUAL
27124: PUSH
27125: LD_VAR 0 9
27129: PPUSH
27130: LD_INT 2
27132: PPUSH
27133: CALL_OW 275
27137: PUSH
27138: LD_VAR 0 14
27142: PUSH
27143: LD_INT 2
27145: ARRAY
27146: GREATEREQUAL
27147: AND
27148: PUSH
27149: LD_VAR 0 9
27153: PPUSH
27154: LD_INT 3
27156: PPUSH
27157: CALL_OW 275
27161: PUSH
27162: LD_VAR 0 14
27166: PUSH
27167: LD_INT 3
27169: ARRAY
27170: GREATEREQUAL
27171: AND
27172: IFFALSE 27184
// result := weapon ;
27174: LD_ADDR_VAR 0 3
27178: PUSH
27179: LD_VAR 0 18
27183: ST_TO_ADDR
// end ; end ;
27184: LD_VAR 0 3
27188: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
// result := true ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_INT 1
27200: ST_TO_ADDR
// if array1 = array2 then
27201: LD_VAR 0 1
27205: PUSH
27206: LD_VAR 0 2
27210: EQUAL
27211: IFFALSE 27271
// begin for i = 1 to array1 do
27213: LD_ADDR_VAR 0 4
27217: PUSH
27218: DOUBLE
27219: LD_INT 1
27221: DEC
27222: ST_TO_ADDR
27223: LD_VAR 0 1
27227: PUSH
27228: FOR_TO
27229: IFFALSE 27267
// if array1 [ i ] <> array2 [ i ] then
27231: LD_VAR 0 1
27235: PUSH
27236: LD_VAR 0 4
27240: ARRAY
27241: PUSH
27242: LD_VAR 0 2
27246: PUSH
27247: LD_VAR 0 4
27251: ARRAY
27252: NONEQUAL
27253: IFFALSE 27265
// begin result := false ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// break ;
27263: GO 27267
// end ;
27265: GO 27228
27267: POP
27268: POP
// end else
27269: GO 27279
// result := false ;
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 0
27278: ST_TO_ADDR
// end ;
27279: LD_VAR 0 3
27283: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27284: LD_INT 0
27286: PPUSH
27287: PPUSH
// if not array1 or not array2 then
27288: LD_VAR 0 1
27292: NOT
27293: PUSH
27294: LD_VAR 0 2
27298: NOT
27299: OR
27300: IFFALSE 27304
// exit ;
27302: GO 27368
// result := true ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_INT 1
27311: ST_TO_ADDR
// for i = 1 to array1 do
27312: LD_ADDR_VAR 0 4
27316: PUSH
27317: DOUBLE
27318: LD_INT 1
27320: DEC
27321: ST_TO_ADDR
27322: LD_VAR 0 1
27326: PUSH
27327: FOR_TO
27328: IFFALSE 27366
// if array1 [ i ] <> array2 [ i ] then
27330: LD_VAR 0 1
27334: PUSH
27335: LD_VAR 0 4
27339: ARRAY
27340: PUSH
27341: LD_VAR 0 2
27345: PUSH
27346: LD_VAR 0 4
27350: ARRAY
27351: NONEQUAL
27352: IFFALSE 27364
// begin result := false ;
27354: LD_ADDR_VAR 0 3
27358: PUSH
27359: LD_INT 0
27361: ST_TO_ADDR
// break ;
27362: GO 27366
// end ;
27364: GO 27327
27366: POP
27367: POP
// end ;
27368: LD_VAR 0 3
27372: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
// pom := GetBase ( fac ) ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL_OW 274
27392: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27393: LD_ADDR_VAR 0 4
27397: PUSH
27398: LD_VAR 0 2
27402: PUSH
27403: LD_INT 1
27405: ARRAY
27406: PPUSH
27407: LD_VAR 0 2
27411: PUSH
27412: LD_INT 2
27414: ARRAY
27415: PPUSH
27416: LD_VAR 0 2
27420: PUSH
27421: LD_INT 3
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 2
27429: PUSH
27430: LD_INT 4
27432: ARRAY
27433: PPUSH
27434: CALL_OW 449
27438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27439: LD_ADDR_VAR 0 3
27443: PUSH
27444: LD_VAR 0 5
27448: PPUSH
27449: LD_INT 1
27451: PPUSH
27452: CALL_OW 275
27456: PUSH
27457: LD_VAR 0 4
27461: PUSH
27462: LD_INT 1
27464: ARRAY
27465: GREATEREQUAL
27466: PUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: LD_INT 2
27474: PPUSH
27475: CALL_OW 275
27479: PUSH
27480: LD_VAR 0 4
27484: PUSH
27485: LD_INT 2
27487: ARRAY
27488: GREATEREQUAL
27489: AND
27490: PUSH
27491: LD_VAR 0 5
27495: PPUSH
27496: LD_INT 3
27498: PPUSH
27499: CALL_OW 275
27503: PUSH
27504: LD_VAR 0 4
27508: PUSH
27509: LD_INT 3
27511: ARRAY
27512: GREATEREQUAL
27513: AND
27514: ST_TO_ADDR
// end ;
27515: LD_VAR 0 3
27519: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27520: LD_INT 0
27522: PPUSH
27523: PPUSH
27524: PPUSH
27525: PPUSH
// pom := GetBase ( building ) ;
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 274
27540: ST_TO_ADDR
// if not pom then
27541: LD_VAR 0 3
27545: NOT
27546: IFFALSE 27550
// exit ;
27548: GO 27720
// btype := GetBType ( building ) ;
27550: LD_ADDR_VAR 0 5
27554: PUSH
27555: LD_VAR 0 1
27559: PPUSH
27560: CALL_OW 266
27564: ST_TO_ADDR
// if btype = b_armoury then
27565: LD_VAR 0 5
27569: PUSH
27570: LD_INT 4
27572: EQUAL
27573: IFFALSE 27583
// btype := b_barracks ;
27575: LD_ADDR_VAR 0 5
27579: PUSH
27580: LD_INT 5
27582: ST_TO_ADDR
// if btype = b_depot then
27583: LD_VAR 0 5
27587: PUSH
27588: LD_INT 0
27590: EQUAL
27591: IFFALSE 27601
// btype := b_warehouse ;
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_INT 1
27600: ST_TO_ADDR
// if btype = b_workshop then
27601: LD_VAR 0 5
27605: PUSH
27606: LD_INT 2
27608: EQUAL
27609: IFFALSE 27619
// btype := b_factory ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: LD_INT 3
27618: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27619: LD_ADDR_VAR 0 4
27623: PUSH
27624: LD_VAR 0 5
27628: PPUSH
27629: LD_VAR 0 1
27633: PPUSH
27634: CALL_OW 248
27638: PPUSH
27639: CALL_OW 450
27643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27644: LD_ADDR_VAR 0 2
27648: PUSH
27649: LD_VAR 0 3
27653: PPUSH
27654: LD_INT 1
27656: PPUSH
27657: CALL_OW 275
27661: PUSH
27662: LD_VAR 0 4
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: GREATEREQUAL
27671: PUSH
27672: LD_VAR 0 3
27676: PPUSH
27677: LD_INT 2
27679: PPUSH
27680: CALL_OW 275
27684: PUSH
27685: LD_VAR 0 4
27689: PUSH
27690: LD_INT 2
27692: ARRAY
27693: GREATEREQUAL
27694: AND
27695: PUSH
27696: LD_VAR 0 3
27700: PPUSH
27701: LD_INT 3
27703: PPUSH
27704: CALL_OW 275
27708: PUSH
27709: LD_VAR 0 4
27713: PUSH
27714: LD_INT 3
27716: ARRAY
27717: GREATEREQUAL
27718: AND
27719: ST_TO_ADDR
// end ;
27720: LD_VAR 0 2
27724: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27725: LD_INT 0
27727: PPUSH
27728: PPUSH
27729: PPUSH
// pom := GetBase ( building ) ;
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 274
27744: ST_TO_ADDR
// if not pom then
27745: LD_VAR 0 4
27749: NOT
27750: IFFALSE 27754
// exit ;
27752: GO 27855
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27754: LD_ADDR_VAR 0 5
27758: PUSH
27759: LD_VAR 0 2
27763: PPUSH
27764: LD_VAR 0 1
27768: PPUSH
27769: CALL_OW 248
27773: PPUSH
27774: CALL_OW 450
27778: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27779: LD_ADDR_VAR 0 3
27783: PUSH
27784: LD_VAR 0 4
27788: PPUSH
27789: LD_INT 1
27791: PPUSH
27792: CALL_OW 275
27796: PUSH
27797: LD_VAR 0 5
27801: PUSH
27802: LD_INT 1
27804: ARRAY
27805: GREATEREQUAL
27806: PUSH
27807: LD_VAR 0 4
27811: PPUSH
27812: LD_INT 2
27814: PPUSH
27815: CALL_OW 275
27819: PUSH
27820: LD_VAR 0 5
27824: PUSH
27825: LD_INT 2
27827: ARRAY
27828: GREATEREQUAL
27829: AND
27830: PUSH
27831: LD_VAR 0 4
27835: PPUSH
27836: LD_INT 3
27838: PPUSH
27839: CALL_OW 275
27843: PUSH
27844: LD_VAR 0 5
27848: PUSH
27849: LD_INT 3
27851: ARRAY
27852: GREATEREQUAL
27853: AND
27854: ST_TO_ADDR
// end ;
27855: LD_VAR 0 3
27859: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27860: LD_INT 0
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
// result := false ;
27873: LD_ADDR_VAR 0 8
27877: PUSH
27878: LD_INT 0
27880: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27881: LD_VAR 0 5
27885: NOT
27886: PUSH
27887: LD_VAR 0 1
27891: NOT
27892: OR
27893: PUSH
27894: LD_VAR 0 2
27898: NOT
27899: OR
27900: PUSH
27901: LD_VAR 0 3
27905: NOT
27906: OR
27907: IFFALSE 27911
// exit ;
27909: GO 28725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27911: LD_ADDR_VAR 0 14
27915: PUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_VAR 0 2
27925: PPUSH
27926: LD_VAR 0 3
27930: PPUSH
27931: LD_VAR 0 4
27935: PPUSH
27936: LD_VAR 0 5
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: PPUSH
27945: CALL_OW 248
27949: PPUSH
27950: LD_INT 0
27952: PPUSH
27953: CALL 29978 0 6
27957: ST_TO_ADDR
// if not hexes then
27958: LD_VAR 0 14
27962: NOT
27963: IFFALSE 27967
// exit ;
27965: GO 28725
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27967: LD_ADDR_VAR 0 17
27971: PUSH
27972: LD_VAR 0 5
27976: PPUSH
27977: LD_INT 22
27979: PUSH
27980: LD_VAR 0 13
27984: PPUSH
27985: CALL_OW 255
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: LD_INT 30
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 30
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PPUSH
28026: CALL_OW 72
28030: ST_TO_ADDR
// for i = 1 to hexes do
28031: LD_ADDR_VAR 0 9
28035: PUSH
28036: DOUBLE
28037: LD_INT 1
28039: DEC
28040: ST_TO_ADDR
28041: LD_VAR 0 14
28045: PUSH
28046: FOR_TO
28047: IFFALSE 28723
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28049: LD_ADDR_VAR 0 13
28053: PUSH
28054: LD_VAR 0 14
28058: PUSH
28059: LD_VAR 0 9
28063: ARRAY
28064: PUSH
28065: LD_INT 1
28067: ARRAY
28068: PPUSH
28069: LD_VAR 0 14
28073: PUSH
28074: LD_VAR 0 9
28078: ARRAY
28079: PUSH
28080: LD_INT 2
28082: ARRAY
28083: PPUSH
28084: CALL_OW 428
28088: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28089: LD_VAR 0 14
28093: PUSH
28094: LD_VAR 0 9
28098: ARRAY
28099: PUSH
28100: LD_INT 1
28102: ARRAY
28103: PPUSH
28104: LD_VAR 0 14
28108: PUSH
28109: LD_VAR 0 9
28113: ARRAY
28114: PUSH
28115: LD_INT 2
28117: ARRAY
28118: PPUSH
28119: CALL_OW 351
28123: PUSH
28124: LD_VAR 0 14
28128: PUSH
28129: LD_VAR 0 9
28133: ARRAY
28134: PUSH
28135: LD_INT 1
28137: ARRAY
28138: PPUSH
28139: LD_VAR 0 14
28143: PUSH
28144: LD_VAR 0 9
28148: ARRAY
28149: PUSH
28150: LD_INT 2
28152: ARRAY
28153: PPUSH
28154: CALL_OW 488
28158: NOT
28159: OR
28160: PUSH
28161: LD_VAR 0 13
28165: PPUSH
28166: CALL_OW 247
28170: PUSH
28171: LD_INT 3
28173: EQUAL
28174: OR
28175: IFFALSE 28181
// exit ;
28177: POP
28178: POP
28179: GO 28725
// if not tmp then
28181: LD_VAR 0 13
28185: NOT
28186: IFFALSE 28190
// continue ;
28188: GO 28046
// result := true ;
28190: LD_ADDR_VAR 0 8
28194: PUSH
28195: LD_INT 1
28197: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28198: LD_VAR 0 6
28202: PUSH
28203: LD_VAR 0 13
28207: PPUSH
28208: CALL_OW 247
28212: PUSH
28213: LD_INT 2
28215: EQUAL
28216: AND
28217: PUSH
28218: LD_VAR 0 13
28222: PPUSH
28223: CALL_OW 263
28227: PUSH
28228: LD_INT 1
28230: EQUAL
28231: AND
28232: IFFALSE 28396
// begin if IsDrivenBy ( tmp ) then
28234: LD_VAR 0 13
28238: PPUSH
28239: CALL_OW 311
28243: IFFALSE 28247
// continue ;
28245: GO 28046
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28247: LD_VAR 0 6
28251: PPUSH
28252: LD_INT 3
28254: PUSH
28255: LD_INT 60
28257: PUSH
28258: EMPTY
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 55
28270: PUSH
28271: EMPTY
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 72
28286: IFFALSE 28394
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28288: LD_ADDR_VAR 0 18
28292: PUSH
28293: LD_VAR 0 6
28297: PPUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 60
28303: PUSH
28304: EMPTY
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 3
28313: PUSH
28314: LD_INT 55
28316: PUSH
28317: EMPTY
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PPUSH
28328: CALL_OW 72
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: ST_TO_ADDR
// if IsInUnit ( driver ) then
28337: LD_VAR 0 18
28341: PPUSH
28342: CALL_OW 310
28346: IFFALSE 28357
// ComExit ( driver ) ;
28348: LD_VAR 0 18
28352: PPUSH
28353: CALL 53920 0 1
// AddComEnterUnit ( driver , tmp ) ;
28357: LD_VAR 0 18
28361: PPUSH
28362: LD_VAR 0 13
28366: PPUSH
28367: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28371: LD_VAR 0 18
28375: PPUSH
28376: LD_VAR 0 7
28380: PPUSH
28381: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28385: LD_VAR 0 18
28389: PPUSH
28390: CALL_OW 181
// end ; continue ;
28394: GO 28046
// end ; if not cleaners or not tmp in cleaners then
28396: LD_VAR 0 6
28400: NOT
28401: PUSH
28402: LD_VAR 0 13
28406: PUSH
28407: LD_VAR 0 6
28411: IN
28412: NOT
28413: OR
28414: IFFALSE 28721
// begin if dep then
28416: LD_VAR 0 17
28420: IFFALSE 28556
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28422: LD_ADDR_VAR 0 16
28426: PUSH
28427: LD_VAR 0 17
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PPUSH
28436: CALL_OW 250
28440: PPUSH
28441: LD_VAR 0 17
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PPUSH
28450: CALL_OW 254
28454: PPUSH
28455: LD_INT 5
28457: PPUSH
28458: CALL_OW 272
28462: PUSH
28463: LD_VAR 0 17
28467: PUSH
28468: LD_INT 1
28470: ARRAY
28471: PPUSH
28472: CALL_OW 251
28476: PPUSH
28477: LD_VAR 0 17
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: CALL_OW 254
28490: PPUSH
28491: LD_INT 5
28493: PPUSH
28494: CALL_OW 273
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28503: LD_VAR 0 16
28507: PUSH
28508: LD_INT 1
28510: ARRAY
28511: PPUSH
28512: LD_VAR 0 16
28516: PUSH
28517: LD_INT 2
28519: ARRAY
28520: PPUSH
28521: CALL_OW 488
28525: IFFALSE 28556
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28527: LD_VAR 0 13
28531: PPUSH
28532: LD_VAR 0 16
28536: PUSH
28537: LD_INT 1
28539: ARRAY
28540: PPUSH
28541: LD_VAR 0 16
28545: PUSH
28546: LD_INT 2
28548: ARRAY
28549: PPUSH
28550: CALL_OW 111
// continue ;
28554: GO 28046
// end ; end ; r := GetDir ( tmp ) ;
28556: LD_ADDR_VAR 0 15
28560: PUSH
28561: LD_VAR 0 13
28565: PPUSH
28566: CALL_OW 254
28570: ST_TO_ADDR
// if r = 5 then
28571: LD_VAR 0 15
28575: PUSH
28576: LD_INT 5
28578: EQUAL
28579: IFFALSE 28589
// r := 0 ;
28581: LD_ADDR_VAR 0 15
28585: PUSH
28586: LD_INT 0
28588: ST_TO_ADDR
// for j = r to 5 do
28589: LD_ADDR_VAR 0 10
28593: PUSH
28594: DOUBLE
28595: LD_VAR 0 15
28599: DEC
28600: ST_TO_ADDR
28601: LD_INT 5
28603: PUSH
28604: FOR_TO
28605: IFFALSE 28719
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28607: LD_ADDR_VAR 0 11
28611: PUSH
28612: LD_VAR 0 13
28616: PPUSH
28617: CALL_OW 250
28621: PPUSH
28622: LD_VAR 0 10
28626: PPUSH
28627: LD_INT 2
28629: PPUSH
28630: CALL_OW 272
28634: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28635: LD_ADDR_VAR 0 12
28639: PUSH
28640: LD_VAR 0 13
28644: PPUSH
28645: CALL_OW 251
28649: PPUSH
28650: LD_VAR 0 10
28654: PPUSH
28655: LD_INT 2
28657: PPUSH
28658: CALL_OW 273
28662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28663: LD_VAR 0 11
28667: PPUSH
28668: LD_VAR 0 12
28672: PPUSH
28673: CALL_OW 488
28677: PUSH
28678: LD_VAR 0 11
28682: PPUSH
28683: LD_VAR 0 12
28687: PPUSH
28688: CALL_OW 428
28692: NOT
28693: AND
28694: IFFALSE 28717
// begin ComMoveXY ( tmp , _x , _y ) ;
28696: LD_VAR 0 13
28700: PPUSH
28701: LD_VAR 0 11
28705: PPUSH
28706: LD_VAR 0 12
28710: PPUSH
28711: CALL_OW 111
// break ;
28715: GO 28719
// end ; end ;
28717: GO 28604
28719: POP
28720: POP
// end ; end ;
28721: GO 28046
28723: POP
28724: POP
// end ;
28725: LD_VAR 0 8
28729: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28730: LD_INT 0
28732: PPUSH
// result := true ;
28733: LD_ADDR_VAR 0 3
28737: PUSH
28738: LD_INT 1
28740: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28741: LD_VAR 0 2
28745: PUSH
28746: LD_INT 24
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28760
28752: LD_INT 33
28754: DOUBLE
28755: EQUAL
28756: IFTRUE 28760
28758: GO 28785
28760: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: LD_INT 32
28768: PPUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 321
28778: PUSH
28779: LD_INT 2
28781: EQUAL
28782: ST_TO_ADDR
28783: GO 29101
28785: LD_INT 20
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28793
28791: GO 28818
28793: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28794: LD_ADDR_VAR 0 3
28798: PUSH
28799: LD_INT 6
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 321
28811: PUSH
28812: LD_INT 2
28814: EQUAL
28815: ST_TO_ADDR
28816: GO 29101
28818: LD_INT 22
28820: DOUBLE
28821: EQUAL
28822: IFTRUE 28832
28824: LD_INT 36
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28857
28832: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_INT 15
28840: PPUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 321
28850: PUSH
28851: LD_INT 2
28853: EQUAL
28854: ST_TO_ADDR
28855: GO 29101
28857: LD_INT 30
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28890
28865: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 20
28873: PPUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 321
28883: PUSH
28884: LD_INT 2
28886: EQUAL
28887: ST_TO_ADDR
28888: GO 29101
28890: LD_INT 28
28892: DOUBLE
28893: EQUAL
28894: IFTRUE 28904
28896: LD_INT 21
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28929
28904: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_INT 21
28912: PPUSH
28913: LD_VAR 0 1
28917: PPUSH
28918: CALL_OW 321
28922: PUSH
28923: LD_INT 2
28925: EQUAL
28926: ST_TO_ADDR
28927: GO 29101
28929: LD_INT 16
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 28962
28937: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28938: LD_ADDR_VAR 0 3
28942: PUSH
28943: LD_INT 84
28945: PPUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 321
28955: PUSH
28956: LD_INT 2
28958: EQUAL
28959: ST_TO_ADDR
28960: GO 29101
28962: LD_INT 19
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28976
28968: LD_INT 23
28970: DOUBLE
28971: EQUAL
28972: IFTRUE 28976
28974: GO 29001
28976: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28977: LD_ADDR_VAR 0 3
28981: PUSH
28982: LD_INT 83
28984: PPUSH
28985: LD_VAR 0 1
28989: PPUSH
28990: CALL_OW 321
28994: PUSH
28995: LD_INT 2
28997: EQUAL
28998: ST_TO_ADDR
28999: GO 29101
29001: LD_INT 17
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29034
29009: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 39
29017: PPUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL_OW 321
29027: PUSH
29028: LD_INT 2
29030: EQUAL
29031: ST_TO_ADDR
29032: GO 29101
29034: LD_INT 18
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29042
29040: GO 29067
29042: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29043: LD_ADDR_VAR 0 3
29047: PUSH
29048: LD_INT 40
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 321
29060: PUSH
29061: LD_INT 2
29063: EQUAL
29064: ST_TO_ADDR
29065: GO 29101
29067: LD_INT 27
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29100
29075: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29076: LD_ADDR_VAR 0 3
29080: PUSH
29081: LD_INT 35
29083: PPUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 321
29093: PUSH
29094: LD_INT 2
29096: EQUAL
29097: ST_TO_ADDR
29098: GO 29101
29100: POP
// end ;
29101: LD_VAR 0 3
29105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29106: LD_INT 0
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
29116: PPUSH
29117: PPUSH
29118: PPUSH
// result := false ;
29119: LD_ADDR_VAR 0 6
29123: PUSH
29124: LD_INT 0
29126: ST_TO_ADDR
// if btype = b_depot then
29127: LD_VAR 0 2
29131: PUSH
29132: LD_INT 0
29134: EQUAL
29135: IFFALSE 29147
// begin result := true ;
29137: LD_ADDR_VAR 0 6
29141: PUSH
29142: LD_INT 1
29144: ST_TO_ADDR
// exit ;
29145: GO 29973
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29147: LD_VAR 0 1
29151: NOT
29152: PUSH
29153: LD_VAR 0 1
29157: PPUSH
29158: CALL_OW 266
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: IN
29173: NOT
29174: OR
29175: PUSH
29176: LD_VAR 0 2
29180: NOT
29181: OR
29182: PUSH
29183: LD_VAR 0 5
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: LD_INT 4
29202: PUSH
29203: LD_INT 5
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: IN
29214: NOT
29215: OR
29216: PUSH
29217: LD_VAR 0 3
29221: PPUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 488
29231: NOT
29232: OR
29233: IFFALSE 29237
// exit ;
29235: GO 29973
// side := GetSide ( depot ) ;
29237: LD_ADDR_VAR 0 9
29241: PUSH
29242: LD_VAR 0 1
29246: PPUSH
29247: CALL_OW 255
29251: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29252: LD_VAR 0 9
29256: PPUSH
29257: LD_VAR 0 2
29261: PPUSH
29262: CALL 28730 0 2
29266: NOT
29267: IFFALSE 29271
// exit ;
29269: GO 29973
// pom := GetBase ( depot ) ;
29271: LD_ADDR_VAR 0 10
29275: PUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 274
29285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29286: LD_ADDR_VAR 0 11
29290: PUSH
29291: LD_VAR 0 2
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 248
29305: PPUSH
29306: CALL_OW 450
29310: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29311: LD_VAR 0 10
29315: PPUSH
29316: LD_INT 1
29318: PPUSH
29319: CALL_OW 275
29323: PUSH
29324: LD_VAR 0 11
29328: PUSH
29329: LD_INT 1
29331: ARRAY
29332: GREATEREQUAL
29333: PUSH
29334: LD_VAR 0 10
29338: PPUSH
29339: LD_INT 2
29341: PPUSH
29342: CALL_OW 275
29346: PUSH
29347: LD_VAR 0 11
29351: PUSH
29352: LD_INT 2
29354: ARRAY
29355: GREATEREQUAL
29356: AND
29357: PUSH
29358: LD_VAR 0 10
29362: PPUSH
29363: LD_INT 3
29365: PPUSH
29366: CALL_OW 275
29370: PUSH
29371: LD_VAR 0 11
29375: PUSH
29376: LD_INT 3
29378: ARRAY
29379: GREATEREQUAL
29380: AND
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29973
// if GetBType ( depot ) = b_depot then
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 266
29395: PUSH
29396: LD_INT 0
29398: EQUAL
29399: IFFALSE 29411
// dist := 28 else
29401: LD_ADDR_VAR 0 14
29405: PUSH
29406: LD_INT 28
29408: ST_TO_ADDR
29409: GO 29419
// dist := 36 ;
29411: LD_ADDR_VAR 0 14
29415: PUSH
29416: LD_INT 36
29418: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_VAR 0 3
29428: PPUSH
29429: LD_VAR 0 4
29433: PPUSH
29434: CALL_OW 297
29438: PUSH
29439: LD_VAR 0 14
29443: GREATER
29444: IFFALSE 29448
// exit ;
29446: GO 29973
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29448: LD_ADDR_VAR 0 12
29452: PUSH
29453: LD_VAR 0 2
29457: PPUSH
29458: LD_VAR 0 3
29462: PPUSH
29463: LD_VAR 0 4
29467: PPUSH
29468: LD_VAR 0 5
29472: PPUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 248
29482: PPUSH
29483: LD_INT 0
29485: PPUSH
29486: CALL 29978 0 6
29490: ST_TO_ADDR
// if not hexes then
29491: LD_VAR 0 12
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 29973
// hex := GetHexInfo ( x , y ) ;
29500: LD_ADDR_VAR 0 15
29504: PUSH
29505: LD_VAR 0 3
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: CALL_OW 546
29519: ST_TO_ADDR
// if hex [ 1 ] then
29520: LD_VAR 0 15
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: IFFALSE 29532
// exit ;
29530: GO 29973
// height := hex [ 2 ] ;
29532: LD_ADDR_VAR 0 13
29536: PUSH
29537: LD_VAR 0 15
29541: PUSH
29542: LD_INT 2
29544: ARRAY
29545: ST_TO_ADDR
// for i = 1 to hexes do
29546: LD_ADDR_VAR 0 7
29550: PUSH
29551: DOUBLE
29552: LD_INT 1
29554: DEC
29555: ST_TO_ADDR
29556: LD_VAR 0 12
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29892
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29564: LD_VAR 0 12
29568: PUSH
29569: LD_VAR 0 7
29573: ARRAY
29574: PUSH
29575: LD_INT 1
29577: ARRAY
29578: PPUSH
29579: LD_VAR 0 12
29583: PUSH
29584: LD_VAR 0 7
29588: ARRAY
29589: PUSH
29590: LD_INT 2
29592: ARRAY
29593: PPUSH
29594: CALL_OW 488
29598: NOT
29599: PUSH
29600: LD_VAR 0 12
29604: PUSH
29605: LD_VAR 0 7
29609: ARRAY
29610: PUSH
29611: LD_INT 1
29613: ARRAY
29614: PPUSH
29615: LD_VAR 0 12
29619: PUSH
29620: LD_VAR 0 7
29624: ARRAY
29625: PUSH
29626: LD_INT 2
29628: ARRAY
29629: PPUSH
29630: CALL_OW 428
29634: PUSH
29635: LD_INT 0
29637: GREATER
29638: OR
29639: PUSH
29640: LD_VAR 0 12
29644: PUSH
29645: LD_VAR 0 7
29649: ARRAY
29650: PUSH
29651: LD_INT 1
29653: ARRAY
29654: PPUSH
29655: LD_VAR 0 12
29659: PUSH
29660: LD_VAR 0 7
29664: ARRAY
29665: PUSH
29666: LD_INT 2
29668: ARRAY
29669: PPUSH
29670: CALL_OW 351
29674: OR
29675: IFFALSE 29681
// exit ;
29677: POP
29678: POP
29679: GO 29973
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29681: LD_ADDR_VAR 0 8
29685: PUSH
29686: LD_VAR 0 12
29690: PUSH
29691: LD_VAR 0 7
29695: ARRAY
29696: PUSH
29697: LD_INT 1
29699: ARRAY
29700: PPUSH
29701: LD_VAR 0 12
29705: PUSH
29706: LD_VAR 0 7
29710: ARRAY
29711: PUSH
29712: LD_INT 2
29714: ARRAY
29715: PPUSH
29716: CALL_OW 546
29720: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29721: LD_VAR 0 8
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: PUSH
29730: LD_VAR 0 8
29734: PUSH
29735: LD_INT 2
29737: ARRAY
29738: PUSH
29739: LD_VAR 0 13
29743: PUSH
29744: LD_INT 2
29746: PLUS
29747: GREATER
29748: OR
29749: PUSH
29750: LD_VAR 0 8
29754: PUSH
29755: LD_INT 2
29757: ARRAY
29758: PUSH
29759: LD_VAR 0 13
29763: PUSH
29764: LD_INT 2
29766: MINUS
29767: LESS
29768: OR
29769: PUSH
29770: LD_VAR 0 8
29774: PUSH
29775: LD_INT 3
29777: ARRAY
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 8
29784: PUSH
29785: LD_INT 9
29787: PUSH
29788: LD_INT 10
29790: PUSH
29791: LD_INT 11
29793: PUSH
29794: LD_INT 12
29796: PUSH
29797: LD_INT 13
29799: PUSH
29800: LD_INT 16
29802: PUSH
29803: LD_INT 17
29805: PUSH
29806: LD_INT 18
29808: PUSH
29809: LD_INT 19
29811: PUSH
29812: LD_INT 20
29814: PUSH
29815: LD_INT 21
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: IN
29833: NOT
29834: OR
29835: PUSH
29836: LD_VAR 0 8
29840: PUSH
29841: LD_INT 5
29843: ARRAY
29844: NOT
29845: OR
29846: PUSH
29847: LD_VAR 0 8
29851: PUSH
29852: LD_INT 6
29854: ARRAY
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 7
29864: PUSH
29865: LD_INT 9
29867: PUSH
29868: LD_INT 10
29870: PUSH
29871: LD_INT 11
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: IN
29882: NOT
29883: OR
29884: IFFALSE 29890
// exit ;
29886: POP
29887: POP
29888: GO 29973
// end ;
29890: GO 29561
29892: POP
29893: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29894: LD_VAR 0 9
29898: PPUSH
29899: LD_VAR 0 3
29903: PPUSH
29904: LD_VAR 0 4
29908: PPUSH
29909: LD_INT 20
29911: PPUSH
29912: CALL 21896 0 4
29916: PUSH
29917: LD_INT 4
29919: ARRAY
29920: IFFALSE 29924
// exit ;
29922: GO 29973
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29924: LD_VAR 0 2
29928: PUSH
29929: LD_INT 29
29931: PUSH
29932: LD_INT 30
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: IN
29939: PUSH
29940: LD_VAR 0 3
29944: PPUSH
29945: LD_VAR 0 4
29949: PPUSH
29950: LD_VAR 0 9
29954: PPUSH
29955: CALL_OW 440
29959: NOT
29960: AND
29961: IFFALSE 29965
// exit ;
29963: GO 29973
// result := true ;
29965: LD_ADDR_VAR 0 6
29969: PUSH
29970: LD_INT 1
29972: ST_TO_ADDR
// end ;
29973: LD_VAR 0 6
29977: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29978: LD_INT 0
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
// result = [ ] ;
30038: LD_ADDR_VAR 0 7
30042: PUSH
30043: EMPTY
30044: ST_TO_ADDR
// temp_list = [ ] ;
30045: LD_ADDR_VAR 0 9
30049: PUSH
30050: EMPTY
30051: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30052: LD_VAR 0 4
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 4
30071: PUSH
30072: LD_INT 5
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: IN
30083: NOT
30084: PUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: IN
30100: PUSH
30101: LD_VAR 0 5
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: LD_INT 3
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: IN
30120: NOT
30121: AND
30122: OR
30123: IFFALSE 30127
// exit ;
30125: GO 48518
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30127: LD_VAR 0 1
30131: PUSH
30132: LD_INT 6
30134: PUSH
30135: LD_INT 7
30137: PUSH
30138: LD_INT 8
30140: PUSH
30141: LD_INT 13
30143: PUSH
30144: LD_INT 12
30146: PUSH
30147: LD_INT 15
30149: PUSH
30150: LD_INT 11
30152: PUSH
30153: LD_INT 14
30155: PUSH
30156: LD_INT 10
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: IN
30170: IFFALSE 30180
// btype = b_lab ;
30172: LD_ADDR_VAR 0 1
30176: PUSH
30177: LD_INT 6
30179: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30180: LD_VAR 0 6
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: IN
30199: NOT
30200: PUSH
30201: LD_VAR 0 1
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 6
30220: PUSH
30221: LD_INT 36
30223: PUSH
30224: LD_INT 4
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: LD_INT 31
30232: PUSH
30233: LD_INT 32
30235: PUSH
30236: LD_INT 33
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: IN
30252: NOT
30253: PUSH
30254: LD_VAR 0 6
30258: PUSH
30259: LD_INT 1
30261: EQUAL
30262: AND
30263: OR
30264: PUSH
30265: LD_VAR 0 1
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: IN
30280: NOT
30281: PUSH
30282: LD_VAR 0 6
30286: PUSH
30287: LD_INT 2
30289: EQUAL
30290: AND
30291: OR
30292: IFFALSE 30302
// mode = 0 ;
30294: LD_ADDR_VAR 0 6
30298: PUSH
30299: LD_INT 0
30301: ST_TO_ADDR
// case mode of 0 :
30302: LD_VAR 0 6
30306: PUSH
30307: LD_INT 0
30309: DOUBLE
30310: EQUAL
30311: IFTRUE 30315
30313: GO 41768
30315: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30316: LD_ADDR_VAR 0 11
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30509: LD_ADDR_VAR 0 12
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30705: LD_ADDR_VAR 0 13
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 3
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 3
30876: NEG
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30904: LD_ADDR_VAR 0 14
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: LD_INT 2
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31100: LD_ADDR_VAR 0 15
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31293: LD_ADDR_VAR 0 16
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: NEG
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: NEG
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31486: LD_ADDR_VAR 0 17
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31716: LD_ADDR_VAR 0 18
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31946: LD_ADDR_VAR 0 19
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32176: LD_ADDR_VAR 0 20
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32406: LD_ADDR_VAR 0 21
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32636: LD_ADDR_VAR 0 22
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32866: LD_ADDR_VAR 0 23
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33146: LD_ADDR_VAR 0 24
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33422: LD_ADDR_VAR 0 25
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 3
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33696: LD_ADDR_VAR 0 26
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33972: LD_ADDR_VAR 0 27
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34252: LD_ADDR_VAR 0 28
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: LD_INT 2
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 3
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 3
34499: NEG
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34534: LD_ADDR_VAR 0 29
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34813: LD_ADDR_VAR 0 30
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 2
34990: NEG
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 3
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 3
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 3
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35091: LD_ADDR_VAR 0 31
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: LD_INT 3
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35369: LD_ADDR_VAR 0 32
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 2
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: LD_INT 3
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 3
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35647: LD_ADDR_VAR 0 33
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 2
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 3
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 3
35891: NEG
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35926: LD_ADDR_VAR 0 34
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 3
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 3
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36206: LD_ADDR_VAR 0 35
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36318: LD_ADDR_VAR 0 36
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36430: LD_ADDR_VAR 0 37
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36542: LD_ADDR_VAR 0 38
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: NEG
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36654: LD_ADDR_VAR 0 39
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36766: LD_ADDR_VAR 0 40
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36878: LD_ADDR_VAR 0 41
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: NEG
37069: PUSH
37070: LD_INT 3
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 3
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 3
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 3
37163: NEG
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 3
37175: NEG
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 3
37187: NEG
37188: PUSH
37189: LD_INT 3
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37228: LD_ADDR_VAR 0 42
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 3
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 3
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 3
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 3
37525: NEG
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 3
37537: NEG
37538: PUSH
37539: LD_INT 3
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37578: LD_ADDR_VAR 0 43
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 3
37874: NEG
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37926: LD_ADDR_VAR 0 44
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: LD_INT 3
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 3
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: NEG
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: LD_INT 3
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38276: LD_ADDR_VAR 0 45
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: LD_INT 3
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 3
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 3
38573: NEG
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: NEG
38586: PUSH
38587: LD_INT 3
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38626: LD_ADDR_VAR 0 46
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 3
38922: NEG
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38974: LD_ADDR_VAR 0 47
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39125: LD_ADDR_VAR 0 48
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39272: LD_ADDR_VAR 0 49
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39416: LD_ADDR_VAR 0 50
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39560: LD_ADDR_VAR 0 51
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39707: LD_ADDR_VAR 0 52
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39858: LD_ADDR_VAR 0 53
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40088: LD_ADDR_VAR 0 54
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40318: LD_ADDR_VAR 0 55
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 2
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40548: LD_ADDR_VAR 0 56
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40778: LD_ADDR_VAR 0 57
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41008: LD_ADDR_VAR 0 58
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41238: LD_ADDR_VAR 0 59
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41326: LD_ADDR_VAR 0 60
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41414: LD_ADDR_VAR 0 61
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41502: LD_ADDR_VAR 0 62
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41590: LD_ADDR_VAR 0 63
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41678: LD_ADDR_VAR 0 64
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// end ; 1 :
41766: GO 47663
41768: LD_INT 1
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 44399
41776: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41777: LD_ADDR_VAR 0 11
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41821: LD_ADDR_VAR 0 12
41825: PUSH
41826: LD_INT 2
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41862: LD_ADDR_VAR 0 13
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: LD_INT 3
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 3
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41902: LD_ADDR_VAR 0 14
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 3
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41943: LD_ADDR_VAR 0 15
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41987: LD_ADDR_VAR 0 16
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 3
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42033: LD_ADDR_VAR 0 17
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42077: LD_ADDR_VAR 0 18
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42118: LD_ADDR_VAR 0 19
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42158: LD_ADDR_VAR 0 20
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42199: LD_ADDR_VAR 0 21
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42243: LD_ADDR_VAR 0 22
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42289: LD_ADDR_VAR 0 23
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 4
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42333: LD_ADDR_VAR 0 24
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42374: LD_ADDR_VAR 0 25
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 4
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 4
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42414: LD_ADDR_VAR 0 26
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 4
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42455: LD_ADDR_VAR 0 27
42459: PUSH
42460: LD_INT 3
42462: NEG
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 4
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42499: LD_ADDR_VAR 0 28
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: LD_INT 4
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 4
42530: NEG
42531: PUSH
42532: LD_INT 3
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42545: LD_ADDR_VAR 0 29
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 3
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 2
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 4
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 4
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 3
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 5
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 5
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 4
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 6
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 6
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 5
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42700: LD_ADDR_VAR 0 30
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 4
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 4
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 4
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 5
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 5
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 5
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 6
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 6
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42843: LD_ADDR_VAR 0 31
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 4
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 4
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: LD_INT 4
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 5
42910: PUSH
42911: LD_INT 4
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 5
42920: PUSH
42921: LD_INT 5
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 4
42930: PUSH
42931: LD_INT 5
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 6
42940: PUSH
42941: LD_INT 5
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 6
42950: PUSH
42951: LD_INT 6
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 5
42960: PUSH
42961: LD_INT 6
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42982: LD_ADDR_VAR 0 32
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 3
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 4
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 4
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 5
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 5
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 4
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 6
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 6
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 5
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43125: LD_ADDR_VAR 0 33
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 3
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 4
43177: NEG
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 4
43188: NEG
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 4
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 5
43211: NEG
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 5
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 5
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 6
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 6
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43280: LD_ADDR_VAR 0 34
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 3
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 4
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 4
43335: NEG
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 4
43347: NEG
43348: PUSH
43349: LD_INT 4
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 4
43359: NEG
43360: PUSH
43361: LD_INT 5
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 5
43371: NEG
43372: PUSH
43373: LD_INT 4
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 5
43383: NEG
43384: PUSH
43385: LD_INT 5
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 5
43395: NEG
43396: PUSH
43397: LD_INT 6
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 6
43407: NEG
43408: PUSH
43409: LD_INT 5
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 6
43419: NEG
43420: PUSH
43421: LD_INT 6
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43443: LD_ADDR_VAR 0 41
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 3
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43487: LD_ADDR_VAR 0 42
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43528: LD_ADDR_VAR 0 43
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43568: LD_ADDR_VAR 0 44
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43609: LD_ADDR_VAR 0 45
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43653: LD_ADDR_VAR 0 46
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 3
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: LIST
43698: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43699: LD_ADDR_VAR 0 47
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: LD_INT 3
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43732: LD_ADDR_VAR 0 48
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43763: LD_ADDR_VAR 0 49
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43792: LD_ADDR_VAR 0 50
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43821: LD_ADDR_VAR 0 51
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43852: LD_ADDR_VAR 0 52
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 3
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43885: LD_ADDR_VAR 0 53
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43929: LD_ADDR_VAR 0 54
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43970: LD_ADDR_VAR 0 55
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44010: LD_ADDR_VAR 0 56
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 3
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44051: LD_ADDR_VAR 0 57
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44095: LD_ADDR_VAR 0 58
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: NEG
44127: PUSH
44128: LD_INT 3
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44141: LD_ADDR_VAR 0 59
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44185: LD_ADDR_VAR 0 60
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44226: LD_ADDR_VAR 0 61
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44266: LD_ADDR_VAR 0 62
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44307: LD_ADDR_VAR 0 63
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44351: LD_ADDR_VAR 0 64
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// end ; 2 :
44397: GO 47663
44399: LD_INT 2
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 47662
44407: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44408: LD_ADDR_VAR 0 29
44412: PUSH
44413: LD_INT 4
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 5
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 5
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 4
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 5
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 4
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: LD_INT 4
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 4
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 4
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 4
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 4
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 5
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 5
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 4
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 5
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: NEG
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 4
44747: NEG
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 4
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 4
44770: NEG
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 4
44793: NEG
44794: PUSH
44795: LD_INT 4
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 4
44805: NEG
44806: PUSH
44807: LD_INT 5
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: LD_INT 4
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 4
44841: NEG
44842: PUSH
44843: LD_INT 3
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 5
44853: NEG
44854: PUSH
44855: LD_INT 4
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 5
44865: NEG
44866: PUSH
44867: LD_INT 5
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: LD_INT 5
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 5
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44946: LD_ADDR_VAR 0 30
44950: PUSH
44951: LD_INT 4
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 4
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 5
44983: PUSH
44984: LD_INT 5
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: LD_INT 5
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: PUSH
45004: LD_INT 4
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 5
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: LD_INT 5
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 4
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 4
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 4
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 4
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 4
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 5
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 5
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 5
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: NEG
45239: PUSH
45240: LD_INT 3
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: LD_INT 4
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 3
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 4
45298: NEG
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 4
45310: NEG
45311: PUSH
45312: LD_INT 4
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 4
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 4
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 4
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 5
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 4
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 3
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 4
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 5
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 5
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45493: LD_ADDR_VAR 0 31
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 4
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 4
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 5
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 4
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 5
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 4
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 4
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 4
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 4
45695: NEG
45696: PUSH
45697: LD_INT 4
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 4
45707: NEG
45708: PUSH
45709: LD_INT 5
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: LD_INT 4
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: LD_INT 3
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 4
45743: NEG
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 5
45755: NEG
45756: PUSH
45757: LD_INT 4
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 5
45767: NEG
45768: PUSH
45769: LD_INT 5
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 5
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 5
45791: NEG
45792: PUSH
45793: LD_INT 3
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 4
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 4
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 4
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 5
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 5
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 4
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 5
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46043: LD_ADDR_VAR 0 32
46047: PUSH
46048: LD_INT 4
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 4
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 4
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 5
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 5
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 5
46129: NEG
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 4
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 4
46224: NEG
46225: PUSH
46226: LD_INT 4
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 4
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 4
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 4
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 5
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 4
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 4
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 5
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 5
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 4
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 4
46455: PUSH
46456: LD_INT 4
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 4
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 5
46475: PUSH
46476: LD_INT 4
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 5
46485: PUSH
46486: LD_INT 5
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 4
46495: PUSH
46496: LD_INT 5
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: LD_INT 4
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 5
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: LD_INT 5
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46590: LD_ADDR_VAR 0 33
46594: PUSH
46595: LD_INT 4
46597: NEG
46598: PUSH
46599: LD_INT 4
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 4
46609: NEG
46610: PUSH
46611: LD_INT 5
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 3
46621: NEG
46622: PUSH
46623: LD_INT 4
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 4
46645: NEG
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 5
46657: NEG
46658: PUSH
46659: LD_INT 4
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 5
46669: NEG
46670: PUSH
46671: LD_INT 5
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: LD_INT 5
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 5
46693: NEG
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 4
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 4
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 4
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 4
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 5
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 5
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 4
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 5
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 4
46930: PUSH
46931: LD_INT 4
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 4
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 4
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 4
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 4
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 4
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 4
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 5
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47128: LD_ADDR_VAR 0 34
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 5
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 4
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 4
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 5
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 5
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 4
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 4
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 4
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: LD_INT 4
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 4
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 5
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 5
47360: PUSH
47361: LD_INT 5
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: LD_INT 5
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 4
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 5
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 5
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 4
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 4
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 4
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 4
47513: NEG
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 4
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: NEG
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 4
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 5
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 5
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 5
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// end ; end ;
47660: GO 47663
47662: POP
// case btype of b_depot , b_warehouse :
47663: LD_VAR 0 1
47667: PUSH
47668: LD_INT 0
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47682
47674: LD_INT 1
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 47883
47682: POP
// case nation of nation_american :
47683: LD_VAR 0 5
47687: PUSH
47688: LD_INT 1
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47696
47694: GO 47752
47696: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47697: LD_ADDR_VAR 0 9
47701: PUSH
47702: LD_VAR 0 11
47706: PUSH
47707: LD_VAR 0 12
47711: PUSH
47712: LD_VAR 0 13
47716: PUSH
47717: LD_VAR 0 14
47721: PUSH
47722: LD_VAR 0 15
47726: PUSH
47727: LD_VAR 0 16
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: PUSH
47740: LD_VAR 0 4
47744: PUSH
47745: LD_INT 1
47747: PLUS
47748: ARRAY
47749: ST_TO_ADDR
47750: GO 47881
47752: LD_INT 2
47754: DOUBLE
47755: EQUAL
47756: IFTRUE 47760
47758: GO 47816
47760: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47761: LD_ADDR_VAR 0 9
47765: PUSH
47766: LD_VAR 0 17
47770: PUSH
47771: LD_VAR 0 18
47775: PUSH
47776: LD_VAR 0 19
47780: PUSH
47781: LD_VAR 0 20
47785: PUSH
47786: LD_VAR 0 21
47790: PUSH
47791: LD_VAR 0 22
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: PUSH
47804: LD_VAR 0 4
47808: PUSH
47809: LD_INT 1
47811: PLUS
47812: ARRAY
47813: ST_TO_ADDR
47814: GO 47881
47816: LD_INT 3
47818: DOUBLE
47819: EQUAL
47820: IFTRUE 47824
47822: GO 47880
47824: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47825: LD_ADDR_VAR 0 9
47829: PUSH
47830: LD_VAR 0 23
47834: PUSH
47835: LD_VAR 0 24
47839: PUSH
47840: LD_VAR 0 25
47844: PUSH
47845: LD_VAR 0 26
47849: PUSH
47850: LD_VAR 0 27
47854: PUSH
47855: LD_VAR 0 28
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: PUSH
47868: LD_VAR 0 4
47872: PUSH
47873: LD_INT 1
47875: PLUS
47876: ARRAY
47877: ST_TO_ADDR
47878: GO 47881
47880: POP
47881: GO 48436
47883: LD_INT 2
47885: DOUBLE
47886: EQUAL
47887: IFTRUE 47897
47889: LD_INT 3
47891: DOUBLE
47892: EQUAL
47893: IFTRUE 47897
47895: GO 47953
47897: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47898: LD_ADDR_VAR 0 9
47902: PUSH
47903: LD_VAR 0 29
47907: PUSH
47908: LD_VAR 0 30
47912: PUSH
47913: LD_VAR 0 31
47917: PUSH
47918: LD_VAR 0 32
47922: PUSH
47923: LD_VAR 0 33
47927: PUSH
47928: LD_VAR 0 34
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: PUSH
47941: LD_VAR 0 4
47945: PUSH
47946: LD_INT 1
47948: PLUS
47949: ARRAY
47950: ST_TO_ADDR
47951: GO 48436
47953: LD_INT 16
47955: DOUBLE
47956: EQUAL
47957: IFTRUE 48015
47959: LD_INT 17
47961: DOUBLE
47962: EQUAL
47963: IFTRUE 48015
47965: LD_INT 18
47967: DOUBLE
47968: EQUAL
47969: IFTRUE 48015
47971: LD_INT 19
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 48015
47977: LD_INT 22
47979: DOUBLE
47980: EQUAL
47981: IFTRUE 48015
47983: LD_INT 20
47985: DOUBLE
47986: EQUAL
47987: IFTRUE 48015
47989: LD_INT 21
47991: DOUBLE
47992: EQUAL
47993: IFTRUE 48015
47995: LD_INT 23
47997: DOUBLE
47998: EQUAL
47999: IFTRUE 48015
48001: LD_INT 24
48003: DOUBLE
48004: EQUAL
48005: IFTRUE 48015
48007: LD_INT 25
48009: DOUBLE
48010: EQUAL
48011: IFTRUE 48015
48013: GO 48071
48015: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48016: LD_ADDR_VAR 0 9
48020: PUSH
48021: LD_VAR 0 35
48025: PUSH
48026: LD_VAR 0 36
48030: PUSH
48031: LD_VAR 0 37
48035: PUSH
48036: LD_VAR 0 38
48040: PUSH
48041: LD_VAR 0 39
48045: PUSH
48046: LD_VAR 0 40
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: PUSH
48059: LD_VAR 0 4
48063: PUSH
48064: LD_INT 1
48066: PLUS
48067: ARRAY
48068: ST_TO_ADDR
48069: GO 48436
48071: LD_INT 6
48073: DOUBLE
48074: EQUAL
48075: IFTRUE 48127
48077: LD_INT 7
48079: DOUBLE
48080: EQUAL
48081: IFTRUE 48127
48083: LD_INT 8
48085: DOUBLE
48086: EQUAL
48087: IFTRUE 48127
48089: LD_INT 13
48091: DOUBLE
48092: EQUAL
48093: IFTRUE 48127
48095: LD_INT 12
48097: DOUBLE
48098: EQUAL
48099: IFTRUE 48127
48101: LD_INT 15
48103: DOUBLE
48104: EQUAL
48105: IFTRUE 48127
48107: LD_INT 11
48109: DOUBLE
48110: EQUAL
48111: IFTRUE 48127
48113: LD_INT 14
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48127
48119: LD_INT 10
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48127
48125: GO 48183
48127: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48128: LD_ADDR_VAR 0 9
48132: PUSH
48133: LD_VAR 0 41
48137: PUSH
48138: LD_VAR 0 42
48142: PUSH
48143: LD_VAR 0 43
48147: PUSH
48148: LD_VAR 0 44
48152: PUSH
48153: LD_VAR 0 45
48157: PUSH
48158: LD_VAR 0 46
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: PUSH
48171: LD_VAR 0 4
48175: PUSH
48176: LD_INT 1
48178: PLUS
48179: ARRAY
48180: ST_TO_ADDR
48181: GO 48436
48183: LD_INT 36
48185: DOUBLE
48186: EQUAL
48187: IFTRUE 48191
48189: GO 48247
48191: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48192: LD_ADDR_VAR 0 9
48196: PUSH
48197: LD_VAR 0 47
48201: PUSH
48202: LD_VAR 0 48
48206: PUSH
48207: LD_VAR 0 49
48211: PUSH
48212: LD_VAR 0 50
48216: PUSH
48217: LD_VAR 0 51
48221: PUSH
48222: LD_VAR 0 52
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: PUSH
48235: LD_VAR 0 4
48239: PUSH
48240: LD_INT 1
48242: PLUS
48243: ARRAY
48244: ST_TO_ADDR
48245: GO 48436
48247: LD_INT 4
48249: DOUBLE
48250: EQUAL
48251: IFTRUE 48273
48253: LD_INT 5
48255: DOUBLE
48256: EQUAL
48257: IFTRUE 48273
48259: LD_INT 34
48261: DOUBLE
48262: EQUAL
48263: IFTRUE 48273
48265: LD_INT 37
48267: DOUBLE
48268: EQUAL
48269: IFTRUE 48273
48271: GO 48329
48273: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48274: LD_ADDR_VAR 0 9
48278: PUSH
48279: LD_VAR 0 53
48283: PUSH
48284: LD_VAR 0 54
48288: PUSH
48289: LD_VAR 0 55
48293: PUSH
48294: LD_VAR 0 56
48298: PUSH
48299: LD_VAR 0 57
48303: PUSH
48304: LD_VAR 0 58
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: LD_VAR 0 4
48321: PUSH
48322: LD_INT 1
48324: PLUS
48325: ARRAY
48326: ST_TO_ADDR
48327: GO 48436
48329: LD_INT 31
48331: DOUBLE
48332: EQUAL
48333: IFTRUE 48379
48335: LD_INT 32
48337: DOUBLE
48338: EQUAL
48339: IFTRUE 48379
48341: LD_INT 33
48343: DOUBLE
48344: EQUAL
48345: IFTRUE 48379
48347: LD_INT 27
48349: DOUBLE
48350: EQUAL
48351: IFTRUE 48379
48353: LD_INT 26
48355: DOUBLE
48356: EQUAL
48357: IFTRUE 48379
48359: LD_INT 28
48361: DOUBLE
48362: EQUAL
48363: IFTRUE 48379
48365: LD_INT 29
48367: DOUBLE
48368: EQUAL
48369: IFTRUE 48379
48371: LD_INT 30
48373: DOUBLE
48374: EQUAL
48375: IFTRUE 48379
48377: GO 48435
48379: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48380: LD_ADDR_VAR 0 9
48384: PUSH
48385: LD_VAR 0 59
48389: PUSH
48390: LD_VAR 0 60
48394: PUSH
48395: LD_VAR 0 61
48399: PUSH
48400: LD_VAR 0 62
48404: PUSH
48405: LD_VAR 0 63
48409: PUSH
48410: LD_VAR 0 64
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: PUSH
48423: LD_VAR 0 4
48427: PUSH
48428: LD_INT 1
48430: PLUS
48431: ARRAY
48432: ST_TO_ADDR
48433: GO 48436
48435: POP
// temp_list2 = [ ] ;
48436: LD_ADDR_VAR 0 10
48440: PUSH
48441: EMPTY
48442: ST_TO_ADDR
// for i in temp_list do
48443: LD_ADDR_VAR 0 8
48447: PUSH
48448: LD_VAR 0 9
48452: PUSH
48453: FOR_IN
48454: IFFALSE 48506
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48456: LD_ADDR_VAR 0 10
48460: PUSH
48461: LD_VAR 0 10
48465: PUSH
48466: LD_VAR 0 8
48470: PUSH
48471: LD_INT 1
48473: ARRAY
48474: PUSH
48475: LD_VAR 0 2
48479: PLUS
48480: PUSH
48481: LD_VAR 0 8
48485: PUSH
48486: LD_INT 2
48488: ARRAY
48489: PUSH
48490: LD_VAR 0 3
48494: PLUS
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: ADD
48503: ST_TO_ADDR
48504: GO 48453
48506: POP
48507: POP
// result = temp_list2 ;
48508: LD_ADDR_VAR 0 7
48512: PUSH
48513: LD_VAR 0 10
48517: ST_TO_ADDR
// end ;
48518: LD_VAR 0 7
48522: RET
// export function EnemyInRange ( unit , dist ) ; begin
48523: LD_INT 0
48525: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48526: LD_ADDR_VAR 0 3
48530: PUSH
48531: LD_VAR 0 1
48535: PPUSH
48536: CALL_OW 255
48540: PPUSH
48541: LD_VAR 0 1
48545: PPUSH
48546: CALL_OW 250
48550: PPUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: CALL_OW 251
48560: PPUSH
48561: LD_VAR 0 2
48565: PPUSH
48566: CALL 21896 0 4
48570: PUSH
48571: LD_INT 4
48573: ARRAY
48574: ST_TO_ADDR
// end ;
48575: LD_VAR 0 3
48579: RET
// export function PlayerSeeMe ( unit ) ; begin
48580: LD_INT 0
48582: PPUSH
// result := See ( your_side , unit ) ;
48583: LD_ADDR_VAR 0 2
48587: PUSH
48588: LD_OWVAR 2
48592: PPUSH
48593: LD_VAR 0 1
48597: PPUSH
48598: CALL_OW 292
48602: ST_TO_ADDR
// end ;
48603: LD_VAR 0 2
48607: RET
// export function ReverseDir ( unit ) ; begin
48608: LD_INT 0
48610: PPUSH
// if not unit then
48611: LD_VAR 0 1
48615: NOT
48616: IFFALSE 48620
// exit ;
48618: GO 48643
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48620: LD_ADDR_VAR 0 2
48624: PUSH
48625: LD_VAR 0 1
48629: PPUSH
48630: CALL_OW 254
48634: PUSH
48635: LD_INT 3
48637: PLUS
48638: PUSH
48639: LD_INT 6
48641: MOD
48642: ST_TO_ADDR
// end ;
48643: LD_VAR 0 2
48647: RET
// export function ReverseArray ( array ) ; var i ; begin
48648: LD_INT 0
48650: PPUSH
48651: PPUSH
// if not array then
48652: LD_VAR 0 1
48656: NOT
48657: IFFALSE 48661
// exit ;
48659: GO 48716
// result := [ ] ;
48661: LD_ADDR_VAR 0 2
48665: PUSH
48666: EMPTY
48667: ST_TO_ADDR
// for i := array downto 1 do
48668: LD_ADDR_VAR 0 3
48672: PUSH
48673: DOUBLE
48674: LD_VAR 0 1
48678: INC
48679: ST_TO_ADDR
48680: LD_INT 1
48682: PUSH
48683: FOR_DOWNTO
48684: IFFALSE 48714
// result := Join ( result , array [ i ] ) ;
48686: LD_ADDR_VAR 0 2
48690: PUSH
48691: LD_VAR 0 2
48695: PPUSH
48696: LD_VAR 0 1
48700: PUSH
48701: LD_VAR 0 3
48705: ARRAY
48706: PPUSH
48707: CALL 53522 0 2
48711: ST_TO_ADDR
48712: GO 48683
48714: POP
48715: POP
// end ;
48716: LD_VAR 0 2
48720: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48721: LD_INT 0
48723: PPUSH
48724: PPUSH
48725: PPUSH
48726: PPUSH
48727: PPUSH
48728: PPUSH
// if not unit or not hexes then
48729: LD_VAR 0 1
48733: NOT
48734: PUSH
48735: LD_VAR 0 2
48739: NOT
48740: OR
48741: IFFALSE 48745
// exit ;
48743: GO 48868
// dist := 9999 ;
48745: LD_ADDR_VAR 0 5
48749: PUSH
48750: LD_INT 9999
48752: ST_TO_ADDR
// for i = 1 to hexes do
48753: LD_ADDR_VAR 0 4
48757: PUSH
48758: DOUBLE
48759: LD_INT 1
48761: DEC
48762: ST_TO_ADDR
48763: LD_VAR 0 2
48767: PUSH
48768: FOR_TO
48769: IFFALSE 48856
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48771: LD_ADDR_VAR 0 6
48775: PUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: LD_VAR 0 2
48785: PUSH
48786: LD_VAR 0 4
48790: ARRAY
48791: PUSH
48792: LD_INT 1
48794: ARRAY
48795: PPUSH
48796: LD_VAR 0 2
48800: PUSH
48801: LD_VAR 0 4
48805: ARRAY
48806: PUSH
48807: LD_INT 2
48809: ARRAY
48810: PPUSH
48811: CALL_OW 297
48815: ST_TO_ADDR
// if tdist < dist then
48816: LD_VAR 0 6
48820: PUSH
48821: LD_VAR 0 5
48825: LESS
48826: IFFALSE 48854
// begin hex := hexes [ i ] ;
48828: LD_ADDR_VAR 0 8
48832: PUSH
48833: LD_VAR 0 2
48837: PUSH
48838: LD_VAR 0 4
48842: ARRAY
48843: ST_TO_ADDR
// dist := tdist ;
48844: LD_ADDR_VAR 0 5
48848: PUSH
48849: LD_VAR 0 6
48853: ST_TO_ADDR
// end ; end ;
48854: GO 48768
48856: POP
48857: POP
// result := hex ;
48858: LD_ADDR_VAR 0 3
48862: PUSH
48863: LD_VAR 0 8
48867: ST_TO_ADDR
// end ;
48868: LD_VAR 0 3
48872: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48873: LD_INT 0
48875: PPUSH
48876: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48877: LD_VAR 0 1
48881: NOT
48882: PUSH
48883: LD_VAR 0 1
48887: PUSH
48888: LD_INT 21
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 23
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL_OW 69
48916: IN
48917: NOT
48918: OR
48919: IFFALSE 48923
// exit ;
48921: GO 48970
// for i = 1 to 3 do
48923: LD_ADDR_VAR 0 3
48927: PUSH
48928: DOUBLE
48929: LD_INT 1
48931: DEC
48932: ST_TO_ADDR
48933: LD_INT 3
48935: PUSH
48936: FOR_TO
48937: IFFALSE 48968
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 250
48948: PPUSH
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 251
48958: PPUSH
48959: LD_INT 1
48961: PPUSH
48962: CALL_OW 453
48966: GO 48936
48968: POP
48969: POP
// end ;
48970: LD_VAR 0 2
48974: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48975: LD_INT 0
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
// if not unit or not enemy_unit then
48983: LD_VAR 0 1
48987: NOT
48988: PUSH
48989: LD_VAR 0 2
48993: NOT
48994: OR
48995: IFFALSE 48999
// exit ;
48997: GO 49466
// if GetLives ( i ) < 250 then
48999: LD_VAR 0 4
49003: PPUSH
49004: CALL_OW 256
49008: PUSH
49009: LD_INT 250
49011: LESS
49012: IFFALSE 49025
// begin ComAutodestruct ( i ) ;
49014: LD_VAR 0 4
49018: PPUSH
49019: CALL 48873 0 1
// exit ;
49023: GO 49466
// end ; x := GetX ( enemy_unit ) ;
49025: LD_ADDR_VAR 0 7
49029: PUSH
49030: LD_VAR 0 2
49034: PPUSH
49035: CALL_OW 250
49039: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49040: LD_ADDR_VAR 0 8
49044: PUSH
49045: LD_VAR 0 2
49049: PPUSH
49050: CALL_OW 251
49054: ST_TO_ADDR
// if not x or not y then
49055: LD_VAR 0 7
49059: NOT
49060: PUSH
49061: LD_VAR 0 8
49065: NOT
49066: OR
49067: IFFALSE 49071
// exit ;
49069: GO 49466
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49071: LD_ADDR_VAR 0 6
49075: PUSH
49076: LD_VAR 0 7
49080: PPUSH
49081: LD_INT 0
49083: PPUSH
49084: LD_INT 4
49086: PPUSH
49087: CALL_OW 272
49091: PUSH
49092: LD_VAR 0 8
49096: PPUSH
49097: LD_INT 0
49099: PPUSH
49100: LD_INT 4
49102: PPUSH
49103: CALL_OW 273
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_VAR 0 7
49116: PPUSH
49117: LD_INT 1
49119: PPUSH
49120: LD_INT 4
49122: PPUSH
49123: CALL_OW 272
49127: PUSH
49128: LD_VAR 0 8
49132: PPUSH
49133: LD_INT 1
49135: PPUSH
49136: LD_INT 4
49138: PPUSH
49139: CALL_OW 273
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_VAR 0 7
49152: PPUSH
49153: LD_INT 2
49155: PPUSH
49156: LD_INT 4
49158: PPUSH
49159: CALL_OW 272
49163: PUSH
49164: LD_VAR 0 8
49168: PPUSH
49169: LD_INT 2
49171: PPUSH
49172: LD_INT 4
49174: PPUSH
49175: CALL_OW 273
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_VAR 0 7
49188: PPUSH
49189: LD_INT 3
49191: PPUSH
49192: LD_INT 4
49194: PPUSH
49195: CALL_OW 272
49199: PUSH
49200: LD_VAR 0 8
49204: PPUSH
49205: LD_INT 3
49207: PPUSH
49208: LD_INT 4
49210: PPUSH
49211: CALL_OW 273
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_VAR 0 7
49224: PPUSH
49225: LD_INT 4
49227: PPUSH
49228: LD_INT 4
49230: PPUSH
49231: CALL_OW 272
49235: PUSH
49236: LD_VAR 0 8
49240: PPUSH
49241: LD_INT 4
49243: PPUSH
49244: LD_INT 4
49246: PPUSH
49247: CALL_OW 273
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_VAR 0 7
49260: PPUSH
49261: LD_INT 5
49263: PPUSH
49264: LD_INT 4
49266: PPUSH
49267: CALL_OW 272
49271: PUSH
49272: LD_VAR 0 8
49276: PPUSH
49277: LD_INT 5
49279: PPUSH
49280: LD_INT 4
49282: PPUSH
49283: CALL_OW 273
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// for i = tmp downto 1 do
49300: LD_ADDR_VAR 0 4
49304: PUSH
49305: DOUBLE
49306: LD_VAR 0 6
49310: INC
49311: ST_TO_ADDR
49312: LD_INT 1
49314: PUSH
49315: FOR_DOWNTO
49316: IFFALSE 49417
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49318: LD_VAR 0 6
49322: PUSH
49323: LD_VAR 0 4
49327: ARRAY
49328: PUSH
49329: LD_INT 1
49331: ARRAY
49332: PPUSH
49333: LD_VAR 0 6
49337: PUSH
49338: LD_VAR 0 4
49342: ARRAY
49343: PUSH
49344: LD_INT 2
49346: ARRAY
49347: PPUSH
49348: CALL_OW 488
49352: NOT
49353: PUSH
49354: LD_VAR 0 6
49358: PUSH
49359: LD_VAR 0 4
49363: ARRAY
49364: PUSH
49365: LD_INT 1
49367: ARRAY
49368: PPUSH
49369: LD_VAR 0 6
49373: PUSH
49374: LD_VAR 0 4
49378: ARRAY
49379: PUSH
49380: LD_INT 2
49382: ARRAY
49383: PPUSH
49384: CALL_OW 428
49388: PUSH
49389: LD_INT 0
49391: NONEQUAL
49392: OR
49393: IFFALSE 49415
// tmp := Delete ( tmp , i ) ;
49395: LD_ADDR_VAR 0 6
49399: PUSH
49400: LD_VAR 0 6
49404: PPUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: CALL_OW 3
49414: ST_TO_ADDR
49415: GO 49315
49417: POP
49418: POP
// j := GetClosestHex ( unit , tmp ) ;
49419: LD_ADDR_VAR 0 5
49423: PUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: LD_VAR 0 6
49433: PPUSH
49434: CALL 48721 0 2
49438: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49439: LD_VAR 0 1
49443: PPUSH
49444: LD_VAR 0 5
49448: PUSH
49449: LD_INT 1
49451: ARRAY
49452: PPUSH
49453: LD_VAR 0 5
49457: PUSH
49458: LD_INT 2
49460: ARRAY
49461: PPUSH
49462: CALL_OW 111
// end ;
49466: LD_VAR 0 3
49470: RET
// export function PrepareApemanSoldier ( ) ; begin
49471: LD_INT 0
49473: PPUSH
// uc_nation := 0 ;
49474: LD_ADDR_OWVAR 21
49478: PUSH
49479: LD_INT 0
49481: ST_TO_ADDR
// hc_sex := sex_male ;
49482: LD_ADDR_OWVAR 27
49486: PUSH
49487: LD_INT 1
49489: ST_TO_ADDR
// hc_name :=  ;
49490: LD_ADDR_OWVAR 26
49494: PUSH
49495: LD_STRING 
49497: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49498: LD_ADDR_OWVAR 28
49502: PUSH
49503: LD_INT 15
49505: ST_TO_ADDR
// hc_gallery :=  ;
49506: LD_ADDR_OWVAR 33
49510: PUSH
49511: LD_STRING 
49513: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49514: LD_ADDR_OWVAR 31
49518: PUSH
49519: LD_INT 0
49521: PPUSH
49522: LD_INT 3
49524: PPUSH
49525: CALL_OW 12
49529: PUSH
49530: LD_INT 0
49532: PPUSH
49533: LD_INT 3
49535: PPUSH
49536: CALL_OW 12
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49553: LD_ADDR_OWVAR 29
49557: PUSH
49558: LD_INT 12
49560: PUSH
49561: LD_INT 12
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// end ;
49568: LD_VAR 0 1
49572: RET
// export function PrepareApemanEngineer ( ) ; begin
49573: LD_INT 0
49575: PPUSH
// uc_nation := 0 ;
49576: LD_ADDR_OWVAR 21
49580: PUSH
49581: LD_INT 0
49583: ST_TO_ADDR
// hc_sex := sex_male ;
49584: LD_ADDR_OWVAR 27
49588: PUSH
49589: LD_INT 1
49591: ST_TO_ADDR
// hc_name :=  ;
49592: LD_ADDR_OWVAR 26
49596: PUSH
49597: LD_STRING 
49599: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49600: LD_ADDR_OWVAR 28
49604: PUSH
49605: LD_INT 16
49607: ST_TO_ADDR
// hc_gallery :=  ;
49608: LD_ADDR_OWVAR 33
49612: PUSH
49613: LD_STRING 
49615: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49616: LD_ADDR_OWVAR 31
49620: PUSH
49621: LD_INT 0
49623: PPUSH
49624: LD_INT 3
49626: PPUSH
49627: CALL_OW 12
49631: PUSH
49632: LD_INT 0
49634: PPUSH
49635: LD_INT 3
49637: PPUSH
49638: CALL_OW 12
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49655: LD_ADDR_OWVAR 29
49659: PUSH
49660: LD_INT 12
49662: PUSH
49663: LD_INT 12
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// end ;
49670: LD_VAR 0 1
49674: RET
// export function PrepareApeman ( agressivity ) ; begin
49675: LD_INT 0
49677: PPUSH
// uc_side := 0 ;
49678: LD_ADDR_OWVAR 20
49682: PUSH
49683: LD_INT 0
49685: ST_TO_ADDR
// uc_nation := 0 ;
49686: LD_ADDR_OWVAR 21
49690: PUSH
49691: LD_INT 0
49693: ST_TO_ADDR
// hc_sex := sex_male ;
49694: LD_ADDR_OWVAR 27
49698: PUSH
49699: LD_INT 1
49701: ST_TO_ADDR
// hc_class := class_apeman ;
49702: LD_ADDR_OWVAR 28
49706: PUSH
49707: LD_INT 12
49709: ST_TO_ADDR
// hc_gallery :=  ;
49710: LD_ADDR_OWVAR 33
49714: PUSH
49715: LD_STRING 
49717: ST_TO_ADDR
// hc_name :=  ;
49718: LD_ADDR_OWVAR 26
49722: PUSH
49723: LD_STRING 
49725: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49726: LD_ADDR_OWVAR 29
49730: PUSH
49731: LD_INT 12
49733: PUSH
49734: LD_INT 12
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// if agressivity = 0 then
49741: LD_VAR 0 1
49745: PUSH
49746: LD_INT 0
49748: EQUAL
49749: IFFALSE 49761
// hc_agressivity := 0 else
49751: LD_ADDR_OWVAR 35
49755: PUSH
49756: LD_INT 0
49758: ST_TO_ADDR
49759: GO 49782
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49761: LD_ADDR_OWVAR 35
49765: PUSH
49766: LD_VAR 0 1
49770: NEG
49771: PPUSH
49772: LD_VAR 0 1
49776: PPUSH
49777: CALL_OW 12
49781: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49782: LD_ADDR_OWVAR 31
49786: PUSH
49787: LD_INT 0
49789: PPUSH
49790: LD_INT 3
49792: PPUSH
49793: CALL_OW 12
49797: PUSH
49798: LD_INT 0
49800: PPUSH
49801: LD_INT 3
49803: PPUSH
49804: CALL_OW 12
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// end ;
49821: LD_VAR 0 2
49825: RET
// export function PrepareTiger ( agressivity ) ; begin
49826: LD_INT 0
49828: PPUSH
// uc_side := 0 ;
49829: LD_ADDR_OWVAR 20
49833: PUSH
49834: LD_INT 0
49836: ST_TO_ADDR
// uc_nation := 0 ;
49837: LD_ADDR_OWVAR 21
49841: PUSH
49842: LD_INT 0
49844: ST_TO_ADDR
// InitHc ;
49845: CALL_OW 19
// hc_class := class_tiger ;
49849: LD_ADDR_OWVAR 28
49853: PUSH
49854: LD_INT 14
49856: ST_TO_ADDR
// hc_gallery :=  ;
49857: LD_ADDR_OWVAR 33
49861: PUSH
49862: LD_STRING 
49864: ST_TO_ADDR
// hc_name :=  ;
49865: LD_ADDR_OWVAR 26
49869: PUSH
49870: LD_STRING 
49872: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49873: LD_ADDR_OWVAR 35
49877: PUSH
49878: LD_VAR 0 1
49882: NEG
49883: PPUSH
49884: LD_VAR 0 1
49888: PPUSH
49889: CALL_OW 12
49893: ST_TO_ADDR
// end ;
49894: LD_VAR 0 2
49898: RET
// export function PrepareEnchidna ( ) ; begin
49899: LD_INT 0
49901: PPUSH
// uc_side := 0 ;
49902: LD_ADDR_OWVAR 20
49906: PUSH
49907: LD_INT 0
49909: ST_TO_ADDR
// uc_nation := 0 ;
49910: LD_ADDR_OWVAR 21
49914: PUSH
49915: LD_INT 0
49917: ST_TO_ADDR
// InitHc ;
49918: CALL_OW 19
// hc_class := class_baggie ;
49922: LD_ADDR_OWVAR 28
49926: PUSH
49927: LD_INT 13
49929: ST_TO_ADDR
// hc_gallery :=  ;
49930: LD_ADDR_OWVAR 33
49934: PUSH
49935: LD_STRING 
49937: ST_TO_ADDR
// hc_name :=  ;
49938: LD_ADDR_OWVAR 26
49942: PUSH
49943: LD_STRING 
49945: ST_TO_ADDR
// end ;
49946: LD_VAR 0 1
49950: RET
// export function PrepareFrog ( ) ; begin
49951: LD_INT 0
49953: PPUSH
// uc_side := 0 ;
49954: LD_ADDR_OWVAR 20
49958: PUSH
49959: LD_INT 0
49961: ST_TO_ADDR
// uc_nation := 0 ;
49962: LD_ADDR_OWVAR 21
49966: PUSH
49967: LD_INT 0
49969: ST_TO_ADDR
// InitHc ;
49970: CALL_OW 19
// hc_class := class_frog ;
49974: LD_ADDR_OWVAR 28
49978: PUSH
49979: LD_INT 19
49981: ST_TO_ADDR
// hc_gallery :=  ;
49982: LD_ADDR_OWVAR 33
49986: PUSH
49987: LD_STRING 
49989: ST_TO_ADDR
// hc_name :=  ;
49990: LD_ADDR_OWVAR 26
49994: PUSH
49995: LD_STRING 
49997: ST_TO_ADDR
// end ;
49998: LD_VAR 0 1
50002: RET
// export function PrepareFish ( ) ; begin
50003: LD_INT 0
50005: PPUSH
// uc_side := 0 ;
50006: LD_ADDR_OWVAR 20
50010: PUSH
50011: LD_INT 0
50013: ST_TO_ADDR
// uc_nation := 0 ;
50014: LD_ADDR_OWVAR 21
50018: PUSH
50019: LD_INT 0
50021: ST_TO_ADDR
// InitHc ;
50022: CALL_OW 19
// hc_class := class_fish ;
50026: LD_ADDR_OWVAR 28
50030: PUSH
50031: LD_INT 20
50033: ST_TO_ADDR
// hc_gallery :=  ;
50034: LD_ADDR_OWVAR 33
50038: PUSH
50039: LD_STRING 
50041: ST_TO_ADDR
// hc_name :=  ;
50042: LD_ADDR_OWVAR 26
50046: PUSH
50047: LD_STRING 
50049: ST_TO_ADDR
// end ;
50050: LD_VAR 0 1
50054: RET
// export function PrepareBird ( ) ; begin
50055: LD_INT 0
50057: PPUSH
// uc_side := 0 ;
50058: LD_ADDR_OWVAR 20
50062: PUSH
50063: LD_INT 0
50065: ST_TO_ADDR
// uc_nation := 0 ;
50066: LD_ADDR_OWVAR 21
50070: PUSH
50071: LD_INT 0
50073: ST_TO_ADDR
// InitHc ;
50074: CALL_OW 19
// hc_class := class_phororhacos ;
50078: LD_ADDR_OWVAR 28
50082: PUSH
50083: LD_INT 18
50085: ST_TO_ADDR
// hc_gallery :=  ;
50086: LD_ADDR_OWVAR 33
50090: PUSH
50091: LD_STRING 
50093: ST_TO_ADDR
// hc_name :=  ;
50094: LD_ADDR_OWVAR 26
50098: PUSH
50099: LD_STRING 
50101: ST_TO_ADDR
// end ;
50102: LD_VAR 0 1
50106: RET
// export function PrepareHorse ( ) ; begin
50107: LD_INT 0
50109: PPUSH
// uc_side := 0 ;
50110: LD_ADDR_OWVAR 20
50114: PUSH
50115: LD_INT 0
50117: ST_TO_ADDR
// uc_nation := 0 ;
50118: LD_ADDR_OWVAR 21
50122: PUSH
50123: LD_INT 0
50125: ST_TO_ADDR
// InitHc ;
50126: CALL_OW 19
// hc_class := class_horse ;
50130: LD_ADDR_OWVAR 28
50134: PUSH
50135: LD_INT 21
50137: ST_TO_ADDR
// hc_gallery :=  ;
50138: LD_ADDR_OWVAR 33
50142: PUSH
50143: LD_STRING 
50145: ST_TO_ADDR
// hc_name :=  ;
50146: LD_ADDR_OWVAR 26
50150: PUSH
50151: LD_STRING 
50153: ST_TO_ADDR
// end ;
50154: LD_VAR 0 1
50158: RET
// export function PrepareMastodont ( ) ; begin
50159: LD_INT 0
50161: PPUSH
// uc_side := 0 ;
50162: LD_ADDR_OWVAR 20
50166: PUSH
50167: LD_INT 0
50169: ST_TO_ADDR
// uc_nation := 0 ;
50170: LD_ADDR_OWVAR 21
50174: PUSH
50175: LD_INT 0
50177: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50178: LD_ADDR_OWVAR 37
50182: PUSH
50183: LD_INT 31
50185: ST_TO_ADDR
// vc_control := control_rider ;
50186: LD_ADDR_OWVAR 38
50190: PUSH
50191: LD_INT 4
50193: ST_TO_ADDR
// end ;
50194: LD_VAR 0 1
50198: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50199: LD_INT 0
50201: PPUSH
50202: PPUSH
50203: PPUSH
// uc_side = 0 ;
50204: LD_ADDR_OWVAR 20
50208: PUSH
50209: LD_INT 0
50211: ST_TO_ADDR
// uc_nation = 0 ;
50212: LD_ADDR_OWVAR 21
50216: PUSH
50217: LD_INT 0
50219: ST_TO_ADDR
// InitHc_All ( ) ;
50220: CALL_OW 584
// InitVc ;
50224: CALL_OW 20
// if mastodonts then
50228: LD_VAR 0 6
50232: IFFALSE 50299
// for i = 1 to mastodonts do
50234: LD_ADDR_VAR 0 11
50238: PUSH
50239: DOUBLE
50240: LD_INT 1
50242: DEC
50243: ST_TO_ADDR
50244: LD_VAR 0 6
50248: PUSH
50249: FOR_TO
50250: IFFALSE 50297
// begin vc_chassis := 31 ;
50252: LD_ADDR_OWVAR 37
50256: PUSH
50257: LD_INT 31
50259: ST_TO_ADDR
// vc_control := control_rider ;
50260: LD_ADDR_OWVAR 38
50264: PUSH
50265: LD_INT 4
50267: ST_TO_ADDR
// animal := CreateVehicle ;
50268: LD_ADDR_VAR 0 12
50272: PUSH
50273: CALL_OW 45
50277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50278: LD_VAR 0 12
50282: PPUSH
50283: LD_VAR 0 8
50287: PPUSH
50288: LD_INT 0
50290: PPUSH
50291: CALL 52427 0 3
// end ;
50295: GO 50249
50297: POP
50298: POP
// if horses then
50299: LD_VAR 0 5
50303: IFFALSE 50370
// for i = 1 to horses do
50305: LD_ADDR_VAR 0 11
50309: PUSH
50310: DOUBLE
50311: LD_INT 1
50313: DEC
50314: ST_TO_ADDR
50315: LD_VAR 0 5
50319: PUSH
50320: FOR_TO
50321: IFFALSE 50368
// begin hc_class := 21 ;
50323: LD_ADDR_OWVAR 28
50327: PUSH
50328: LD_INT 21
50330: ST_TO_ADDR
// hc_gallery :=  ;
50331: LD_ADDR_OWVAR 33
50335: PUSH
50336: LD_STRING 
50338: ST_TO_ADDR
// animal := CreateHuman ;
50339: LD_ADDR_VAR 0 12
50343: PUSH
50344: CALL_OW 44
50348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50349: LD_VAR 0 12
50353: PPUSH
50354: LD_VAR 0 8
50358: PPUSH
50359: LD_INT 0
50361: PPUSH
50362: CALL 52427 0 3
// end ;
50366: GO 50320
50368: POP
50369: POP
// if birds then
50370: LD_VAR 0 1
50374: IFFALSE 50441
// for i = 1 to birds do
50376: LD_ADDR_VAR 0 11
50380: PUSH
50381: DOUBLE
50382: LD_INT 1
50384: DEC
50385: ST_TO_ADDR
50386: LD_VAR 0 1
50390: PUSH
50391: FOR_TO
50392: IFFALSE 50439
// begin hc_class := 18 ;
50394: LD_ADDR_OWVAR 28
50398: PUSH
50399: LD_INT 18
50401: ST_TO_ADDR
// hc_gallery =  ;
50402: LD_ADDR_OWVAR 33
50406: PUSH
50407: LD_STRING 
50409: ST_TO_ADDR
// animal := CreateHuman ;
50410: LD_ADDR_VAR 0 12
50414: PUSH
50415: CALL_OW 44
50419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50420: LD_VAR 0 12
50424: PPUSH
50425: LD_VAR 0 8
50429: PPUSH
50430: LD_INT 0
50432: PPUSH
50433: CALL 52427 0 3
// end ;
50437: GO 50391
50439: POP
50440: POP
// if tigers then
50441: LD_VAR 0 2
50445: IFFALSE 50529
// for i = 1 to tigers do
50447: LD_ADDR_VAR 0 11
50451: PUSH
50452: DOUBLE
50453: LD_INT 1
50455: DEC
50456: ST_TO_ADDR
50457: LD_VAR 0 2
50461: PUSH
50462: FOR_TO
50463: IFFALSE 50527
// begin hc_class = class_tiger ;
50465: LD_ADDR_OWVAR 28
50469: PUSH
50470: LD_INT 14
50472: ST_TO_ADDR
// hc_gallery =  ;
50473: LD_ADDR_OWVAR 33
50477: PUSH
50478: LD_STRING 
50480: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50481: LD_ADDR_OWVAR 35
50485: PUSH
50486: LD_INT 7
50488: NEG
50489: PPUSH
50490: LD_INT 7
50492: PPUSH
50493: CALL_OW 12
50497: ST_TO_ADDR
// animal := CreateHuman ;
50498: LD_ADDR_VAR 0 12
50502: PUSH
50503: CALL_OW 44
50507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50508: LD_VAR 0 12
50512: PPUSH
50513: LD_VAR 0 8
50517: PPUSH
50518: LD_INT 0
50520: PPUSH
50521: CALL 52427 0 3
// end ;
50525: GO 50462
50527: POP
50528: POP
// if apemans then
50529: LD_VAR 0 3
50533: IFFALSE 50656
// for i = 1 to apemans do
50535: LD_ADDR_VAR 0 11
50539: PUSH
50540: DOUBLE
50541: LD_INT 1
50543: DEC
50544: ST_TO_ADDR
50545: LD_VAR 0 3
50549: PUSH
50550: FOR_TO
50551: IFFALSE 50654
// begin hc_class = class_apeman ;
50553: LD_ADDR_OWVAR 28
50557: PUSH
50558: LD_INT 12
50560: ST_TO_ADDR
// hc_gallery =  ;
50561: LD_ADDR_OWVAR 33
50565: PUSH
50566: LD_STRING 
50568: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50569: LD_ADDR_OWVAR 35
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PPUSH
50578: LD_INT 2
50580: PPUSH
50581: CALL_OW 12
50585: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50586: LD_ADDR_OWVAR 31
50590: PUSH
50591: LD_INT 1
50593: PPUSH
50594: LD_INT 3
50596: PPUSH
50597: CALL_OW 12
50601: PUSH
50602: LD_INT 1
50604: PPUSH
50605: LD_INT 3
50607: PPUSH
50608: CALL_OW 12
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// animal := CreateHuman ;
50625: LD_ADDR_VAR 0 12
50629: PUSH
50630: CALL_OW 44
50634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50635: LD_VAR 0 12
50639: PPUSH
50640: LD_VAR 0 8
50644: PPUSH
50645: LD_INT 0
50647: PPUSH
50648: CALL 52427 0 3
// end ;
50652: GO 50550
50654: POP
50655: POP
// if enchidnas then
50656: LD_VAR 0 4
50660: IFFALSE 50727
// for i = 1 to enchidnas do
50662: LD_ADDR_VAR 0 11
50666: PUSH
50667: DOUBLE
50668: LD_INT 1
50670: DEC
50671: ST_TO_ADDR
50672: LD_VAR 0 4
50676: PUSH
50677: FOR_TO
50678: IFFALSE 50725
// begin hc_class = 13 ;
50680: LD_ADDR_OWVAR 28
50684: PUSH
50685: LD_INT 13
50687: ST_TO_ADDR
// hc_gallery =  ;
50688: LD_ADDR_OWVAR 33
50692: PUSH
50693: LD_STRING 
50695: ST_TO_ADDR
// animal := CreateHuman ;
50696: LD_ADDR_VAR 0 12
50700: PUSH
50701: CALL_OW 44
50705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50706: LD_VAR 0 12
50710: PPUSH
50711: LD_VAR 0 8
50715: PPUSH
50716: LD_INT 0
50718: PPUSH
50719: CALL 52427 0 3
// end ;
50723: GO 50677
50725: POP
50726: POP
// if fishes then
50727: LD_VAR 0 7
50731: IFFALSE 50798
// for i = 1 to fishes do
50733: LD_ADDR_VAR 0 11
50737: PUSH
50738: DOUBLE
50739: LD_INT 1
50741: DEC
50742: ST_TO_ADDR
50743: LD_VAR 0 7
50747: PUSH
50748: FOR_TO
50749: IFFALSE 50796
// begin hc_class = 20 ;
50751: LD_ADDR_OWVAR 28
50755: PUSH
50756: LD_INT 20
50758: ST_TO_ADDR
// hc_gallery =  ;
50759: LD_ADDR_OWVAR 33
50763: PUSH
50764: LD_STRING 
50766: ST_TO_ADDR
// animal := CreateHuman ;
50767: LD_ADDR_VAR 0 12
50771: PUSH
50772: CALL_OW 44
50776: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50777: LD_VAR 0 12
50781: PPUSH
50782: LD_VAR 0 9
50786: PPUSH
50787: LD_INT 0
50789: PPUSH
50790: CALL 52427 0 3
// end ;
50794: GO 50748
50796: POP
50797: POP
// end ;
50798: LD_VAR 0 10
50802: RET
// export function WantHeal ( sci , unit ) ; begin
50803: LD_INT 0
50805: PPUSH
// if GetTaskList ( sci ) > 0 then
50806: LD_VAR 0 1
50810: PPUSH
50811: CALL_OW 437
50815: PUSH
50816: LD_INT 0
50818: GREATER
50819: IFFALSE 50889
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 437
50830: PUSH
50831: LD_INT 1
50833: ARRAY
50834: PUSH
50835: LD_INT 1
50837: ARRAY
50838: PUSH
50839: LD_STRING l
50841: EQUAL
50842: PUSH
50843: LD_VAR 0 1
50847: PPUSH
50848: CALL_OW 437
50852: PUSH
50853: LD_INT 1
50855: ARRAY
50856: PUSH
50857: LD_INT 4
50859: ARRAY
50860: PUSH
50861: LD_VAR 0 2
50865: EQUAL
50866: AND
50867: IFFALSE 50879
// result := true else
50869: LD_ADDR_VAR 0 3
50873: PUSH
50874: LD_INT 1
50876: ST_TO_ADDR
50877: GO 50887
// result := false ;
50879: LD_ADDR_VAR 0 3
50883: PUSH
50884: LD_INT 0
50886: ST_TO_ADDR
// end else
50887: GO 50897
// result := false ;
50889: LD_ADDR_VAR 0 3
50893: PUSH
50894: LD_INT 0
50896: ST_TO_ADDR
// end ;
50897: LD_VAR 0 3
50901: RET
// export function HealTarget ( sci ) ; begin
50902: LD_INT 0
50904: PPUSH
// if not sci then
50905: LD_VAR 0 1
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 50979
// result := 0 ;
50914: LD_ADDR_VAR 0 2
50918: PUSH
50919: LD_INT 0
50921: ST_TO_ADDR
// if GetTaskList ( sci ) then
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 437
50931: IFFALSE 50979
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50933: LD_VAR 0 1
50937: PPUSH
50938: CALL_OW 437
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: PUSH
50947: LD_INT 1
50949: ARRAY
50950: PUSH
50951: LD_STRING l
50953: EQUAL
50954: IFFALSE 50979
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50956: LD_ADDR_VAR 0 2
50960: PUSH
50961: LD_VAR 0 1
50965: PPUSH
50966: CALL_OW 437
50970: PUSH
50971: LD_INT 1
50973: ARRAY
50974: PUSH
50975: LD_INT 4
50977: ARRAY
50978: ST_TO_ADDR
// end ;
50979: LD_VAR 0 2
50983: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50984: LD_INT 0
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
// if not base_units then
50990: LD_VAR 0 1
50994: NOT
50995: IFFALSE 50999
// exit ;
50997: GO 51086
// result := false ;
50999: LD_ADDR_VAR 0 2
51003: PUSH
51004: LD_INT 0
51006: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51007: LD_ADDR_VAR 0 5
51011: PUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: LD_INT 21
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PPUSH
51027: CALL_OW 72
51031: ST_TO_ADDR
// if not tmp then
51032: LD_VAR 0 5
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51086
// for i in tmp do
51041: LD_ADDR_VAR 0 3
51045: PUSH
51046: LD_VAR 0 5
51050: PUSH
51051: FOR_IN
51052: IFFALSE 51084
// begin result := EnemyInRange ( i , 22 ) ;
51054: LD_ADDR_VAR 0 2
51058: PUSH
51059: LD_VAR 0 3
51063: PPUSH
51064: LD_INT 22
51066: PPUSH
51067: CALL 48523 0 2
51071: ST_TO_ADDR
// if result then
51072: LD_VAR 0 2
51076: IFFALSE 51082
// exit ;
51078: POP
51079: POP
51080: GO 51086
// end ;
51082: GO 51051
51084: POP
51085: POP
// end ;
51086: LD_VAR 0 2
51090: RET
// export function FilterByTag ( units , tag ) ; begin
51091: LD_INT 0
51093: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51094: LD_ADDR_VAR 0 3
51098: PUSH
51099: LD_VAR 0 1
51103: PPUSH
51104: LD_INT 120
51106: PUSH
51107: LD_VAR 0 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PPUSH
51116: CALL_OW 72
51120: ST_TO_ADDR
// end ;
51121: LD_VAR 0 3
51125: RET
// export function IsDriver ( un ) ; begin
51126: LD_INT 0
51128: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51129: LD_ADDR_VAR 0 2
51133: PUSH
51134: LD_VAR 0 1
51138: PUSH
51139: LD_INT 55
51141: PUSH
51142: EMPTY
51143: LIST
51144: PPUSH
51145: CALL_OW 69
51149: IN
51150: ST_TO_ADDR
// end ;
51151: LD_VAR 0 2
51155: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51156: LD_INT 0
51158: PPUSH
51159: PPUSH
// list := [ ] ;
51160: LD_ADDR_VAR 0 5
51164: PUSH
51165: EMPTY
51166: ST_TO_ADDR
// case d of 0 :
51167: LD_VAR 0 3
51171: PUSH
51172: LD_INT 0
51174: DOUBLE
51175: EQUAL
51176: IFTRUE 51180
51178: GO 51313
51180: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51181: LD_ADDR_VAR 0 5
51185: PUSH
51186: LD_VAR 0 1
51190: PUSH
51191: LD_INT 4
51193: MINUS
51194: PUSH
51195: LD_VAR 0 2
51199: PUSH
51200: LD_INT 4
51202: MINUS
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: PUSH
51212: LD_VAR 0 1
51216: PUSH
51217: LD_INT 3
51219: MINUS
51220: PUSH
51221: LD_VAR 0 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: PUSH
51234: LD_VAR 0 1
51238: PUSH
51239: LD_INT 4
51241: PLUS
51242: PUSH
51243: LD_VAR 0 2
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: PUSH
51256: LD_VAR 0 1
51260: PUSH
51261: LD_INT 3
51263: PLUS
51264: PUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_INT 3
51272: PLUS
51273: PUSH
51274: LD_INT 5
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_VAR 0 2
51291: PUSH
51292: LD_INT 4
51294: PLUS
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// end ; 1 :
51311: GO 52011
51313: LD_INT 1
51315: DOUBLE
51316: EQUAL
51317: IFTRUE 51321
51319: GO 51454
51321: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51322: LD_ADDR_VAR 0 5
51326: PUSH
51327: LD_VAR 0 1
51331: PUSH
51332: LD_VAR 0 2
51336: PUSH
51337: LD_INT 4
51339: MINUS
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: PUSH
51349: LD_VAR 0 1
51353: PUSH
51354: LD_INT 3
51356: MINUS
51357: PUSH
51358: LD_VAR 0 2
51362: PUSH
51363: LD_INT 3
51365: MINUS
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: PUSH
51375: LD_VAR 0 1
51379: PUSH
51380: LD_INT 4
51382: MINUS
51383: PUSH
51384: LD_VAR 0 2
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_VAR 0 2
51406: PUSH
51407: LD_INT 3
51409: PLUS
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: PUSH
51419: LD_VAR 0 1
51423: PUSH
51424: LD_INT 4
51426: PLUS
51427: PUSH
51428: LD_VAR 0 2
51432: PUSH
51433: LD_INT 4
51435: PLUS
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// end ; 2 :
51452: GO 52011
51454: LD_INT 2
51456: DOUBLE
51457: EQUAL
51458: IFTRUE 51462
51460: GO 51591
51462: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51463: LD_ADDR_VAR 0 5
51467: PUSH
51468: LD_VAR 0 1
51472: PUSH
51473: LD_VAR 0 2
51477: PUSH
51478: LD_INT 3
51480: MINUS
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: PUSH
51490: LD_VAR 0 1
51494: PUSH
51495: LD_INT 4
51497: PLUS
51498: PUSH
51499: LD_VAR 0 2
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: PUSH
51512: LD_VAR 0 1
51516: PUSH
51517: LD_VAR 0 2
51521: PUSH
51522: LD_INT 4
51524: PLUS
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: PUSH
51534: LD_VAR 0 1
51538: PUSH
51539: LD_INT 3
51541: MINUS
51542: PUSH
51543: LD_VAR 0 2
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: LD_VAR 0 1
51560: PUSH
51561: LD_INT 4
51563: MINUS
51564: PUSH
51565: LD_VAR 0 2
51569: PUSH
51570: LD_INT 4
51572: MINUS
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: ST_TO_ADDR
// end ; 3 :
51589: GO 52011
51591: LD_INT 3
51593: DOUBLE
51594: EQUAL
51595: IFTRUE 51599
51597: GO 51732
51599: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51600: LD_ADDR_VAR 0 5
51604: PUSH
51605: LD_VAR 0 1
51609: PUSH
51610: LD_INT 3
51612: PLUS
51613: PUSH
51614: LD_VAR 0 2
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 1
51631: PUSH
51632: LD_INT 4
51634: PLUS
51635: PUSH
51636: LD_VAR 0 2
51640: PUSH
51641: LD_INT 4
51643: PLUS
51644: PUSH
51645: LD_INT 5
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: PUSH
51653: LD_VAR 0 1
51657: PUSH
51658: LD_INT 4
51660: MINUS
51661: PUSH
51662: LD_VAR 0 2
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_VAR 0 1
51679: PUSH
51680: LD_VAR 0 2
51684: PUSH
51685: LD_INT 4
51687: MINUS
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: PUSH
51697: LD_VAR 0 1
51701: PUSH
51702: LD_INT 3
51704: MINUS
51705: PUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 3
51713: MINUS
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: ST_TO_ADDR
// end ; 4 :
51730: GO 52011
51732: LD_INT 4
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51740
51738: GO 51873
51740: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51741: LD_ADDR_VAR 0 5
51745: PUSH
51746: LD_VAR 0 1
51750: PUSH
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 4
51758: PLUS
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: LD_VAR 0 1
51772: PUSH
51773: LD_INT 3
51775: PLUS
51776: PUSH
51777: LD_VAR 0 2
51781: PUSH
51782: LD_INT 3
51784: PLUS
51785: PUSH
51786: LD_INT 5
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: PUSH
51794: LD_VAR 0 1
51798: PUSH
51799: LD_INT 4
51801: PLUS
51802: PUSH
51803: LD_VAR 0 2
51807: PUSH
51808: LD_INT 4
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: PUSH
51816: LD_VAR 0 1
51820: PUSH
51821: LD_VAR 0 2
51825: PUSH
51826: LD_INT 3
51828: MINUS
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: LD_VAR 0 1
51842: PUSH
51843: LD_INT 4
51845: MINUS
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_INT 4
51854: MINUS
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: ST_TO_ADDR
// end ; 5 :
51871: GO 52011
51873: LD_INT 5
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 52010
51881: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51882: LD_ADDR_VAR 0 5
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: LD_INT 4
51894: MINUS
51895: PUSH
51896: LD_VAR 0 2
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: PUSH
51909: LD_VAR 0 1
51913: PUSH
51914: LD_VAR 0 2
51918: PUSH
51919: LD_INT 4
51921: MINUS
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: PUSH
51931: LD_VAR 0 1
51935: PUSH
51936: LD_INT 4
51938: PLUS
51939: PUSH
51940: LD_VAR 0 2
51944: PUSH
51945: LD_INT 4
51947: PLUS
51948: PUSH
51949: LD_INT 5
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: PUSH
51957: LD_VAR 0 1
51961: PUSH
51962: LD_INT 3
51964: PLUS
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 4
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_VAR 0 2
51988: PUSH
51989: LD_INT 3
51991: PLUS
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// end ; end ;
52008: GO 52011
52010: POP
// result := list ;
52011: LD_ADDR_VAR 0 4
52015: PUSH
52016: LD_VAR 0 5
52020: ST_TO_ADDR
// end ;
52021: LD_VAR 0 4
52025: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52026: LD_INT 0
52028: PPUSH
52029: PPUSH
52030: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52031: LD_VAR 0 1
52035: NOT
52036: PUSH
52037: LD_VAR 0 2
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 4
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: IN
52060: NOT
52061: OR
52062: IFFALSE 52066
// exit ;
52064: GO 52149
// tmp := [ ] ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: EMPTY
52072: ST_TO_ADDR
// for i in units do
52073: LD_ADDR_VAR 0 4
52077: PUSH
52078: LD_VAR 0 1
52082: PUSH
52083: FOR_IN
52084: IFFALSE 52118
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52086: LD_ADDR_VAR 0 5
52090: PUSH
52091: LD_VAR 0 5
52095: PPUSH
52096: LD_VAR 0 4
52100: PPUSH
52101: LD_VAR 0 2
52105: PPUSH
52106: CALL_OW 259
52110: PPUSH
52111: CALL 53522 0 2
52115: ST_TO_ADDR
52116: GO 52083
52118: POP
52119: POP
// if not tmp then
52120: LD_VAR 0 5
52124: NOT
52125: IFFALSE 52129
// exit ;
52127: GO 52149
// result := SortListByListDesc ( units , tmp ) ;
52129: LD_ADDR_VAR 0 3
52133: PUSH
52134: LD_VAR 0 1
52138: PPUSH
52139: LD_VAR 0 5
52143: PPUSH
52144: CALL_OW 77
52148: ST_TO_ADDR
// end ;
52149: LD_VAR 0 3
52153: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52154: LD_INT 0
52156: PPUSH
52157: PPUSH
52158: PPUSH
// result := false ;
52159: LD_ADDR_VAR 0 3
52163: PUSH
52164: LD_INT 0
52166: ST_TO_ADDR
// if not building then
52167: LD_VAR 0 2
52171: NOT
52172: IFFALSE 52176
// exit ;
52174: GO 52314
// x := GetX ( building ) ;
52176: LD_ADDR_VAR 0 4
52180: PUSH
52181: LD_VAR 0 2
52185: PPUSH
52186: CALL_OW 250
52190: ST_TO_ADDR
// y := GetY ( building ) ;
52191: LD_ADDR_VAR 0 5
52195: PUSH
52196: LD_VAR 0 2
52200: PPUSH
52201: CALL_OW 251
52205: ST_TO_ADDR
// if not x or not y then
52206: LD_VAR 0 4
52210: NOT
52211: PUSH
52212: LD_VAR 0 5
52216: NOT
52217: OR
52218: IFFALSE 52222
// exit ;
52220: GO 52314
// if GetTaskList ( unit ) then
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 437
52231: IFFALSE 52314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52233: LD_STRING e
52235: PUSH
52236: LD_VAR 0 1
52240: PPUSH
52241: CALL_OW 437
52245: PUSH
52246: LD_INT 1
52248: ARRAY
52249: PUSH
52250: LD_INT 1
52252: ARRAY
52253: EQUAL
52254: PUSH
52255: LD_VAR 0 4
52259: PUSH
52260: LD_VAR 0 1
52264: PPUSH
52265: CALL_OW 437
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PUSH
52274: LD_INT 2
52276: ARRAY
52277: EQUAL
52278: AND
52279: PUSH
52280: LD_VAR 0 5
52284: PUSH
52285: LD_VAR 0 1
52289: PPUSH
52290: CALL_OW 437
52294: PUSH
52295: LD_INT 1
52297: ARRAY
52298: PUSH
52299: LD_INT 3
52301: ARRAY
52302: EQUAL
52303: AND
52304: IFFALSE 52314
// result := true end ;
52306: LD_ADDR_VAR 0 3
52310: PUSH
52311: LD_INT 1
52313: ST_TO_ADDR
// end ;
52314: LD_VAR 0 3
52318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52319: LD_INT 0
52321: PPUSH
// result := false ;
52322: LD_ADDR_VAR 0 4
52326: PUSH
52327: LD_INT 0
52329: ST_TO_ADDR
// if GetTaskList ( unit ) then
52330: LD_VAR 0 1
52334: PPUSH
52335: CALL_OW 437
52339: IFFALSE 52422
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52341: LD_STRING M
52343: PUSH
52344: LD_VAR 0 1
52348: PPUSH
52349: CALL_OW 437
52353: PUSH
52354: LD_INT 1
52356: ARRAY
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: EQUAL
52362: PUSH
52363: LD_VAR 0 2
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: CALL_OW 437
52377: PUSH
52378: LD_INT 1
52380: ARRAY
52381: PUSH
52382: LD_INT 2
52384: ARRAY
52385: EQUAL
52386: AND
52387: PUSH
52388: LD_VAR 0 3
52392: PUSH
52393: LD_VAR 0 1
52397: PPUSH
52398: CALL_OW 437
52402: PUSH
52403: LD_INT 1
52405: ARRAY
52406: PUSH
52407: LD_INT 3
52409: ARRAY
52410: EQUAL
52411: AND
52412: IFFALSE 52422
// result := true ;
52414: LD_ADDR_VAR 0 4
52418: PUSH
52419: LD_INT 1
52421: ST_TO_ADDR
// end ; end ;
52422: LD_VAR 0 4
52426: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52427: LD_INT 0
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
// if not unit or not area then
52433: LD_VAR 0 1
52437: NOT
52438: PUSH
52439: LD_VAR 0 2
52443: NOT
52444: OR
52445: IFFALSE 52449
// exit ;
52447: GO 52625
// tmp := AreaToList ( area , i ) ;
52449: LD_ADDR_VAR 0 6
52453: PUSH
52454: LD_VAR 0 2
52458: PPUSH
52459: LD_VAR 0 5
52463: PPUSH
52464: CALL_OW 517
52468: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52469: LD_ADDR_VAR 0 5
52473: PUSH
52474: DOUBLE
52475: LD_INT 1
52477: DEC
52478: ST_TO_ADDR
52479: LD_VAR 0 6
52483: PUSH
52484: LD_INT 1
52486: ARRAY
52487: PUSH
52488: FOR_TO
52489: IFFALSE 52623
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52491: LD_ADDR_VAR 0 7
52495: PUSH
52496: LD_VAR 0 6
52500: PUSH
52501: LD_INT 1
52503: ARRAY
52504: PUSH
52505: LD_VAR 0 5
52509: ARRAY
52510: PUSH
52511: LD_VAR 0 6
52515: PUSH
52516: LD_INT 2
52518: ARRAY
52519: PUSH
52520: LD_VAR 0 5
52524: ARRAY
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52530: LD_INT 92
52532: PUSH
52533: LD_VAR 0 7
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: PUSH
52542: LD_VAR 0 7
52546: PUSH
52547: LD_INT 2
52549: ARRAY
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: PPUSH
52560: CALL_OW 69
52564: PUSH
52565: LD_INT 0
52567: EQUAL
52568: IFFALSE 52621
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52570: LD_VAR 0 1
52574: PPUSH
52575: LD_VAR 0 7
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: PPUSH
52584: LD_VAR 0 7
52588: PUSH
52589: LD_INT 2
52591: ARRAY
52592: PPUSH
52593: LD_VAR 0 3
52597: PPUSH
52598: CALL_OW 48
// result := IsPlaced ( unit ) ;
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 305
52616: ST_TO_ADDR
// exit ;
52617: POP
52618: POP
52619: GO 52625
// end ; end ;
52621: GO 52488
52623: POP
52624: POP
// end ;
52625: LD_VAR 0 4
52629: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52630: LD_INT 0
52632: PPUSH
52633: PPUSH
52634: PPUSH
// if not side or side > 8 then
52635: LD_VAR 0 1
52639: NOT
52640: PUSH
52641: LD_VAR 0 1
52645: PUSH
52646: LD_INT 8
52648: GREATER
52649: OR
52650: IFFALSE 52654
// exit ;
52652: GO 52841
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52654: LD_ADDR_VAR 0 4
52658: PUSH
52659: LD_INT 22
52661: PUSH
52662: LD_VAR 0 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 21
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PPUSH
52685: CALL_OW 69
52689: ST_TO_ADDR
// if not tmp then
52690: LD_VAR 0 4
52694: NOT
52695: IFFALSE 52699
// exit ;
52697: GO 52841
// enable_addtolog := true ;
52699: LD_ADDR_OWVAR 81
52703: PUSH
52704: LD_INT 1
52706: ST_TO_ADDR
// AddToLog ( [ ) ;
52707: LD_STRING [
52709: PPUSH
52710: CALL_OW 561
// for i in tmp do
52714: LD_ADDR_VAR 0 3
52718: PUSH
52719: LD_VAR 0 4
52723: PUSH
52724: FOR_IN
52725: IFFALSE 52832
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52727: LD_STRING [
52729: PUSH
52730: LD_VAR 0 3
52734: PPUSH
52735: CALL_OW 266
52739: STR
52740: PUSH
52741: LD_STRING , 
52743: STR
52744: PUSH
52745: LD_VAR 0 3
52749: PPUSH
52750: CALL_OW 250
52754: STR
52755: PUSH
52756: LD_STRING , 
52758: STR
52759: PUSH
52760: LD_VAR 0 3
52764: PPUSH
52765: CALL_OW 251
52769: STR
52770: PUSH
52771: LD_STRING , 
52773: STR
52774: PUSH
52775: LD_VAR 0 3
52779: PPUSH
52780: CALL_OW 254
52784: STR
52785: PUSH
52786: LD_STRING , 
52788: STR
52789: PUSH
52790: LD_VAR 0 3
52794: PPUSH
52795: LD_INT 1
52797: PPUSH
52798: CALL_OW 268
52802: STR
52803: PUSH
52804: LD_STRING , 
52806: STR
52807: PUSH
52808: LD_VAR 0 3
52812: PPUSH
52813: LD_INT 2
52815: PPUSH
52816: CALL_OW 268
52820: STR
52821: PUSH
52822: LD_STRING ],
52824: STR
52825: PPUSH
52826: CALL_OW 561
// end ;
52830: GO 52724
52832: POP
52833: POP
// AddToLog ( ]; ) ;
52834: LD_STRING ];
52836: PPUSH
52837: CALL_OW 561
// end ;
52841: LD_VAR 0 2
52845: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52846: LD_INT 0
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
// if not area or not rate or not max then
52853: LD_VAR 0 1
52857: NOT
52858: PUSH
52859: LD_VAR 0 2
52863: NOT
52864: OR
52865: PUSH
52866: LD_VAR 0 4
52870: NOT
52871: OR
52872: IFFALSE 52876
// exit ;
52874: GO 53065
// while 1 do
52876: LD_INT 1
52878: IFFALSE 53065
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52880: LD_ADDR_VAR 0 9
52884: PUSH
52885: LD_VAR 0 1
52889: PPUSH
52890: LD_INT 1
52892: PPUSH
52893: CALL_OW 287
52897: PUSH
52898: LD_INT 10
52900: MUL
52901: ST_TO_ADDR
// r := rate / 10 ;
52902: LD_ADDR_VAR 0 7
52906: PUSH
52907: LD_VAR 0 2
52911: PUSH
52912: LD_INT 10
52914: DIVREAL
52915: ST_TO_ADDR
// time := 1 1$00 ;
52916: LD_ADDR_VAR 0 8
52920: PUSH
52921: LD_INT 2100
52923: ST_TO_ADDR
// if amount < min then
52924: LD_VAR 0 9
52928: PUSH
52929: LD_VAR 0 3
52933: LESS
52934: IFFALSE 52952
// r := r * 2 else
52936: LD_ADDR_VAR 0 7
52940: PUSH
52941: LD_VAR 0 7
52945: PUSH
52946: LD_INT 2
52948: MUL
52949: ST_TO_ADDR
52950: GO 52978
// if amount > max then
52952: LD_VAR 0 9
52956: PUSH
52957: LD_VAR 0 4
52961: GREATER
52962: IFFALSE 52978
// r := r / 2 ;
52964: LD_ADDR_VAR 0 7
52968: PUSH
52969: LD_VAR 0 7
52973: PUSH
52974: LD_INT 2
52976: DIVREAL
52977: ST_TO_ADDR
// time := time / r ;
52978: LD_ADDR_VAR 0 8
52982: PUSH
52983: LD_VAR 0 8
52987: PUSH
52988: LD_VAR 0 7
52992: DIVREAL
52993: ST_TO_ADDR
// if time < 0 then
52994: LD_VAR 0 8
52998: PUSH
52999: LD_INT 0
53001: LESS
53002: IFFALSE 53019
// time := time * - 1 ;
53004: LD_ADDR_VAR 0 8
53008: PUSH
53009: LD_VAR 0 8
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: MUL
53018: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53019: LD_VAR 0 8
53023: PUSH
53024: LD_INT 35
53026: PPUSH
53027: LD_INT 875
53029: PPUSH
53030: CALL_OW 12
53034: PLUS
53035: PPUSH
53036: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53040: LD_INT 1
53042: PPUSH
53043: LD_INT 5
53045: PPUSH
53046: CALL_OW 12
53050: PPUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: LD_INT 1
53058: PPUSH
53059: CALL_OW 55
// end ;
53063: GO 52876
// end ;
53065: LD_VAR 0 5
53069: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53070: LD_INT 0
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
// if not turrets or not factories then
53080: LD_VAR 0 1
53084: NOT
53085: PUSH
53086: LD_VAR 0 2
53090: NOT
53091: OR
53092: IFFALSE 53096
// exit ;
53094: GO 53403
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53096: LD_ADDR_VAR 0 10
53100: PUSH
53101: LD_INT 5
53103: PUSH
53104: LD_INT 6
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 4
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 5
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 24
53138: PUSH
53139: LD_INT 25
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 23
53148: PUSH
53149: LD_INT 27
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 42
53162: PUSH
53163: LD_INT 43
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 44
53172: PUSH
53173: LD_INT 46
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 45
53182: PUSH
53183: LD_INT 47
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// result := [ ] ;
53200: LD_ADDR_VAR 0 3
53204: PUSH
53205: EMPTY
53206: ST_TO_ADDR
// for i in turrets do
53207: LD_ADDR_VAR 0 4
53211: PUSH
53212: LD_VAR 0 1
53216: PUSH
53217: FOR_IN
53218: IFFALSE 53401
// begin nat := GetNation ( i ) ;
53220: LD_ADDR_VAR 0 7
53224: PUSH
53225: LD_VAR 0 4
53229: PPUSH
53230: CALL_OW 248
53234: ST_TO_ADDR
// weapon := 0 ;
53235: LD_ADDR_VAR 0 8
53239: PUSH
53240: LD_INT 0
53242: ST_TO_ADDR
// if not nat then
53243: LD_VAR 0 7
53247: NOT
53248: IFFALSE 53252
// continue ;
53250: GO 53217
// for j in list [ nat ] do
53252: LD_ADDR_VAR 0 5
53256: PUSH
53257: LD_VAR 0 10
53261: PUSH
53262: LD_VAR 0 7
53266: ARRAY
53267: PUSH
53268: FOR_IN
53269: IFFALSE 53310
// if GetBWeapon ( i ) = j [ 1 ] then
53271: LD_VAR 0 4
53275: PPUSH
53276: CALL_OW 269
53280: PUSH
53281: LD_VAR 0 5
53285: PUSH
53286: LD_INT 1
53288: ARRAY
53289: EQUAL
53290: IFFALSE 53308
// begin weapon := j [ 2 ] ;
53292: LD_ADDR_VAR 0 8
53296: PUSH
53297: LD_VAR 0 5
53301: PUSH
53302: LD_INT 2
53304: ARRAY
53305: ST_TO_ADDR
// break ;
53306: GO 53310
// end ;
53308: GO 53268
53310: POP
53311: POP
// if not weapon then
53312: LD_VAR 0 8
53316: NOT
53317: IFFALSE 53321
// continue ;
53319: GO 53217
// for k in factories do
53321: LD_ADDR_VAR 0 6
53325: PUSH
53326: LD_VAR 0 2
53330: PUSH
53331: FOR_IN
53332: IFFALSE 53397
// begin weapons := AvailableWeaponList ( k ) ;
53334: LD_ADDR_VAR 0 9
53338: PUSH
53339: LD_VAR 0 6
53343: PPUSH
53344: CALL_OW 478
53348: ST_TO_ADDR
// if not weapons then
53349: LD_VAR 0 9
53353: NOT
53354: IFFALSE 53358
// continue ;
53356: GO 53331
// if weapon in weapons then
53358: LD_VAR 0 8
53362: PUSH
53363: LD_VAR 0 9
53367: IN
53368: IFFALSE 53395
// begin result := [ i , weapon ] ;
53370: LD_ADDR_VAR 0 3
53374: PUSH
53375: LD_VAR 0 4
53379: PUSH
53380: LD_VAR 0 8
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: ST_TO_ADDR
// exit ;
53389: POP
53390: POP
53391: POP
53392: POP
53393: GO 53403
// end ; end ;
53395: GO 53331
53397: POP
53398: POP
// end ;
53399: GO 53217
53401: POP
53402: POP
// end ;
53403: LD_VAR 0 3
53407: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53408: LD_INT 0
53410: PPUSH
// if not side or side > 8 then
53411: LD_VAR 0 3
53415: NOT
53416: PUSH
53417: LD_VAR 0 3
53421: PUSH
53422: LD_INT 8
53424: GREATER
53425: OR
53426: IFFALSE 53430
// exit ;
53428: GO 53489
// if not range then
53430: LD_VAR 0 4
53434: NOT
53435: IFFALSE 53446
// range := - 12 ;
53437: LD_ADDR_VAR 0 4
53441: PUSH
53442: LD_INT 12
53444: NEG
53445: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53446: LD_VAR 0 1
53450: PPUSH
53451: LD_VAR 0 2
53455: PPUSH
53456: LD_VAR 0 3
53460: PPUSH
53461: LD_VAR 0 4
53465: PPUSH
53466: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53470: LD_VAR 0 1
53474: PPUSH
53475: LD_VAR 0 2
53479: PPUSH
53480: LD_VAR 0 3
53484: PPUSH
53485: CALL_OW 331
// end ;
53489: LD_VAR 0 5
53493: RET
// export function Video ( mode ) ; begin
53494: LD_INT 0
53496: PPUSH
// ingame_video = mode ;
53497: LD_ADDR_OWVAR 52
53501: PUSH
53502: LD_VAR 0 1
53506: ST_TO_ADDR
// interface_hidden = mode ;
53507: LD_ADDR_OWVAR 54
53511: PUSH
53512: LD_VAR 0 1
53516: ST_TO_ADDR
// end ;
53517: LD_VAR 0 2
53521: RET
// export function Join ( array , element ) ; begin
53522: LD_INT 0
53524: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53525: LD_ADDR_VAR 0 3
53529: PUSH
53530: LD_VAR 0 1
53534: PPUSH
53535: LD_VAR 0 1
53539: PUSH
53540: LD_INT 1
53542: PLUS
53543: PPUSH
53544: LD_VAR 0 2
53548: PPUSH
53549: CALL_OW 1
53553: ST_TO_ADDR
// end ;
53554: LD_VAR 0 3
53558: RET
// export function JoinUnion ( array , element ) ; begin
53559: LD_INT 0
53561: PPUSH
// result := array union element ;
53562: LD_ADDR_VAR 0 3
53566: PUSH
53567: LD_VAR 0 1
53571: PUSH
53572: LD_VAR 0 2
53576: UNION
53577: ST_TO_ADDR
// end ;
53578: LD_VAR 0 3
53582: RET
// export function GetBehemoths ( side ) ; begin
53583: LD_INT 0
53585: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53586: LD_ADDR_VAR 0 2
53590: PUSH
53591: LD_INT 22
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 31
53605: PUSH
53606: LD_INT 25
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PPUSH
53617: CALL_OW 69
53621: ST_TO_ADDR
// end ;
53622: LD_VAR 0 2
53626: RET
// export function Shuffle ( array ) ; var i , index ; begin
53627: LD_INT 0
53629: PPUSH
53630: PPUSH
53631: PPUSH
// result := [ ] ;
53632: LD_ADDR_VAR 0 2
53636: PUSH
53637: EMPTY
53638: ST_TO_ADDR
// if not array then
53639: LD_VAR 0 1
53643: NOT
53644: IFFALSE 53648
// exit ;
53646: GO 53747
// Randomize ;
53648: CALL_OW 10
// for i = array downto 1 do
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: DOUBLE
53658: LD_VAR 0 1
53662: INC
53663: ST_TO_ADDR
53664: LD_INT 1
53666: PUSH
53667: FOR_DOWNTO
53668: IFFALSE 53745
// begin index := rand ( 1 , array ) ;
53670: LD_ADDR_VAR 0 4
53674: PUSH
53675: LD_INT 1
53677: PPUSH
53678: LD_VAR 0 1
53682: PPUSH
53683: CALL_OW 12
53687: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53688: LD_ADDR_VAR 0 2
53692: PUSH
53693: LD_VAR 0 2
53697: PPUSH
53698: LD_VAR 0 2
53702: PUSH
53703: LD_INT 1
53705: PLUS
53706: PPUSH
53707: LD_VAR 0 1
53711: PUSH
53712: LD_VAR 0 4
53716: ARRAY
53717: PPUSH
53718: CALL_OW 2
53722: ST_TO_ADDR
// array := Delete ( array , index ) ;
53723: LD_ADDR_VAR 0 1
53727: PUSH
53728: LD_VAR 0 1
53732: PPUSH
53733: LD_VAR 0 4
53737: PPUSH
53738: CALL_OW 3
53742: ST_TO_ADDR
// end ;
53743: GO 53667
53745: POP
53746: POP
// end ;
53747: LD_VAR 0 2
53751: RET
// export function GetBaseMaterials ( base ) ; begin
53752: LD_INT 0
53754: PPUSH
// result := [ 0 , 0 , 0 ] ;
53755: LD_ADDR_VAR 0 2
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// if not base then
53774: LD_VAR 0 1
53778: NOT
53779: IFFALSE 53783
// exit ;
53781: GO 53832
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53783: LD_ADDR_VAR 0 2
53787: PUSH
53788: LD_VAR 0 1
53792: PPUSH
53793: LD_INT 1
53795: PPUSH
53796: CALL_OW 275
53800: PUSH
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_INT 2
53808: PPUSH
53809: CALL_OW 275
53813: PUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: LD_INT 3
53821: PPUSH
53822: CALL_OW 275
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// end ;
53832: LD_VAR 0 2
53836: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53837: LD_INT 0
53839: PPUSH
53840: PPUSH
// result := array ;
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_VAR 0 1
53850: ST_TO_ADDR
// if size >= result then
53851: LD_VAR 0 2
53855: PUSH
53856: LD_VAR 0 3
53860: GREATEREQUAL
53861: IFFALSE 53865
// exit ;
53863: GO 53915
// if size then
53865: LD_VAR 0 2
53869: IFFALSE 53915
// for i := array downto size do
53871: LD_ADDR_VAR 0 4
53875: PUSH
53876: DOUBLE
53877: LD_VAR 0 1
53881: INC
53882: ST_TO_ADDR
53883: LD_VAR 0 2
53887: PUSH
53888: FOR_DOWNTO
53889: IFFALSE 53913
// result := Delete ( result , result ) ;
53891: LD_ADDR_VAR 0 3
53895: PUSH
53896: LD_VAR 0 3
53900: PPUSH
53901: LD_VAR 0 3
53905: PPUSH
53906: CALL_OW 3
53910: ST_TO_ADDR
53911: GO 53888
53913: POP
53914: POP
// end ;
53915: LD_VAR 0 3
53919: RET
// export function ComExit ( unit ) ; var tmp ; begin
53920: LD_INT 0
53922: PPUSH
53923: PPUSH
// if not IsInUnit ( unit ) then
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 310
53933: NOT
53934: IFFALSE 53938
// exit ;
53936: GO 53998
// tmp := IsInUnit ( unit ) ;
53938: LD_ADDR_VAR 0 3
53942: PUSH
53943: LD_VAR 0 1
53947: PPUSH
53948: CALL_OW 310
53952: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53953: LD_VAR 0 3
53957: PPUSH
53958: CALL_OW 247
53962: PUSH
53963: LD_INT 2
53965: EQUAL
53966: IFFALSE 53979
// ComExitVehicle ( unit ) else
53968: LD_VAR 0 1
53972: PPUSH
53973: CALL_OW 121
53977: GO 53988
// ComExitBuilding ( unit ) ;
53979: LD_VAR 0 1
53983: PPUSH
53984: CALL_OW 122
// result := tmp ;
53988: LD_ADDR_VAR 0 2
53992: PUSH
53993: LD_VAR 0 3
53997: ST_TO_ADDR
// end ;
53998: LD_VAR 0 2
54002: RET
// export function ComExitAll ( units ) ; var i ; begin
54003: LD_INT 0
54005: PPUSH
54006: PPUSH
// if not units then
54007: LD_VAR 0 1
54011: NOT
54012: IFFALSE 54016
// exit ;
54014: GO 54042
// for i in units do
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_VAR 0 1
54025: PUSH
54026: FOR_IN
54027: IFFALSE 54040
// ComExit ( i ) ;
54029: LD_VAR 0 3
54033: PPUSH
54034: CALL 53920 0 1
54038: GO 54026
54040: POP
54041: POP
// end ;
54042: LD_VAR 0 2
54046: RET
// export function ResetHc ; begin
54047: LD_INT 0
54049: PPUSH
// InitHc ;
54050: CALL_OW 19
// hc_importance := 0 ;
54054: LD_ADDR_OWVAR 32
54058: PUSH
54059: LD_INT 0
54061: ST_TO_ADDR
// end ;
54062: LD_VAR 0 1
54066: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54067: LD_INT 0
54069: PPUSH
54070: PPUSH
54071: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54072: LD_ADDR_VAR 0 6
54076: PUSH
54077: LD_VAR 0 1
54081: PUSH
54082: LD_VAR 0 3
54086: PLUS
54087: PUSH
54088: LD_INT 2
54090: DIV
54091: ST_TO_ADDR
// if _x < 0 then
54092: LD_VAR 0 6
54096: PUSH
54097: LD_INT 0
54099: LESS
54100: IFFALSE 54117
// _x := _x * - 1 ;
54102: LD_ADDR_VAR 0 6
54106: PUSH
54107: LD_VAR 0 6
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: MUL
54116: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54117: LD_ADDR_VAR 0 7
54121: PUSH
54122: LD_VAR 0 2
54126: PUSH
54127: LD_VAR 0 4
54131: PLUS
54132: PUSH
54133: LD_INT 2
54135: DIV
54136: ST_TO_ADDR
// if _y < 0 then
54137: LD_VAR 0 7
54141: PUSH
54142: LD_INT 0
54144: LESS
54145: IFFALSE 54162
// _y := _y * - 1 ;
54147: LD_ADDR_VAR 0 7
54151: PUSH
54152: LD_VAR 0 7
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: MUL
54161: ST_TO_ADDR
// result := [ _x , _y ] ;
54162: LD_ADDR_VAR 0 5
54166: PUSH
54167: LD_VAR 0 6
54171: PUSH
54172: LD_VAR 0 7
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// end ;
54181: LD_VAR 0 5
54185: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54186: LD_INT 0
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
// task := GetTaskList ( unit ) ;
54192: LD_ADDR_VAR 0 7
54196: PUSH
54197: LD_VAR 0 1
54201: PPUSH
54202: CALL_OW 437
54206: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54207: LD_VAR 0 7
54211: NOT
54212: PUSH
54213: LD_VAR 0 1
54217: PPUSH
54218: LD_VAR 0 2
54222: PPUSH
54223: CALL_OW 308
54227: NOT
54228: AND
54229: IFFALSE 54233
// exit ;
54231: GO 54351
// if IsInArea ( unit , area ) then
54233: LD_VAR 0 1
54237: PPUSH
54238: LD_VAR 0 2
54242: PPUSH
54243: CALL_OW 308
54247: IFFALSE 54265
// begin ComMoveToArea ( unit , goAway ) ;
54249: LD_VAR 0 1
54253: PPUSH
54254: LD_VAR 0 3
54258: PPUSH
54259: CALL_OW 113
// exit ;
54263: GO 54351
// end ; if task [ 1 ] [ 1 ] <> M then
54265: LD_VAR 0 7
54269: PUSH
54270: LD_INT 1
54272: ARRAY
54273: PUSH
54274: LD_INT 1
54276: ARRAY
54277: PUSH
54278: LD_STRING M
54280: NONEQUAL
54281: IFFALSE 54285
// exit ;
54283: GO 54351
// x := task [ 1 ] [ 2 ] ;
54285: LD_ADDR_VAR 0 5
54289: PUSH
54290: LD_VAR 0 7
54294: PUSH
54295: LD_INT 1
54297: ARRAY
54298: PUSH
54299: LD_INT 2
54301: ARRAY
54302: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54303: LD_ADDR_VAR 0 6
54307: PUSH
54308: LD_VAR 0 7
54312: PUSH
54313: LD_INT 1
54315: ARRAY
54316: PUSH
54317: LD_INT 3
54319: ARRAY
54320: ST_TO_ADDR
// if InArea ( x , y , area ) then
54321: LD_VAR 0 5
54325: PPUSH
54326: LD_VAR 0 6
54330: PPUSH
54331: LD_VAR 0 2
54335: PPUSH
54336: CALL_OW 309
54340: IFFALSE 54351
// ComStop ( unit ) ;
54342: LD_VAR 0 1
54346: PPUSH
54347: CALL_OW 141
// end ;
54351: LD_VAR 0 4
54355: RET
// export function Abs ( value ) ; begin
54356: LD_INT 0
54358: PPUSH
// result := value ;
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: LD_VAR 0 1
54368: ST_TO_ADDR
// if value < 0 then
54369: LD_VAR 0 1
54373: PUSH
54374: LD_INT 0
54376: LESS
54377: IFFALSE 54394
// result := value * - 1 ;
54379: LD_ADDR_VAR 0 2
54383: PUSH
54384: LD_VAR 0 1
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: MUL
54393: ST_TO_ADDR
// end ;
54394: LD_VAR 0 2
54398: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54399: LD_INT 0
54401: PPUSH
54402: PPUSH
54403: PPUSH
54404: PPUSH
54405: PPUSH
54406: PPUSH
54407: PPUSH
54408: PPUSH
// if not unit or not building then
54409: LD_VAR 0 1
54413: NOT
54414: PUSH
54415: LD_VAR 0 2
54419: NOT
54420: OR
54421: IFFALSE 54425
// exit ;
54423: GO 54651
// x := GetX ( building ) ;
54425: LD_ADDR_VAR 0 4
54429: PUSH
54430: LD_VAR 0 2
54434: PPUSH
54435: CALL_OW 250
54439: ST_TO_ADDR
// y := GetY ( building ) ;
54440: LD_ADDR_VAR 0 6
54444: PUSH
54445: LD_VAR 0 2
54449: PPUSH
54450: CALL_OW 251
54454: ST_TO_ADDR
// d := GetDir ( building ) ;
54455: LD_ADDR_VAR 0 8
54459: PUSH
54460: LD_VAR 0 2
54464: PPUSH
54465: CALL_OW 254
54469: ST_TO_ADDR
// r := 4 ;
54470: LD_ADDR_VAR 0 9
54474: PUSH
54475: LD_INT 4
54477: ST_TO_ADDR
// for i := 1 to 5 do
54478: LD_ADDR_VAR 0 10
54482: PUSH
54483: DOUBLE
54484: LD_INT 1
54486: DEC
54487: ST_TO_ADDR
54488: LD_INT 5
54490: PUSH
54491: FOR_TO
54492: IFFALSE 54649
// begin _x := ShiftX ( x , d , r + i ) ;
54494: LD_ADDR_VAR 0 5
54498: PUSH
54499: LD_VAR 0 4
54503: PPUSH
54504: LD_VAR 0 8
54508: PPUSH
54509: LD_VAR 0 9
54513: PUSH
54514: LD_VAR 0 10
54518: PLUS
54519: PPUSH
54520: CALL_OW 272
54524: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54525: LD_ADDR_VAR 0 7
54529: PUSH
54530: LD_VAR 0 6
54534: PPUSH
54535: LD_VAR 0 8
54539: PPUSH
54540: LD_VAR 0 9
54544: PUSH
54545: LD_VAR 0 10
54549: PLUS
54550: PPUSH
54551: CALL_OW 273
54555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54556: LD_VAR 0 5
54560: PPUSH
54561: LD_VAR 0 7
54565: PPUSH
54566: CALL_OW 488
54570: PUSH
54571: LD_VAR 0 5
54575: PPUSH
54576: LD_VAR 0 7
54580: PPUSH
54581: CALL_OW 428
54585: PPUSH
54586: CALL_OW 247
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: IN
54601: NOT
54602: AND
54603: IFFALSE 54647
// begin ComMoveXY ( unit , _x , _y ) ;
54605: LD_VAR 0 1
54609: PPUSH
54610: LD_VAR 0 5
54614: PPUSH
54615: LD_VAR 0 7
54619: PPUSH
54620: CALL_OW 111
// result := [ _x , _y ] ;
54624: LD_ADDR_VAR 0 3
54628: PUSH
54629: LD_VAR 0 5
54633: PUSH
54634: LD_VAR 0 7
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// exit ;
54643: POP
54644: POP
54645: GO 54651
// end ; end ;
54647: GO 54491
54649: POP
54650: POP
// end ;
54651: LD_VAR 0 3
54655: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54656: LD_INT 0
54658: PPUSH
54659: PPUSH
54660: PPUSH
// result := 0 ;
54661: LD_ADDR_VAR 0 3
54665: PUSH
54666: LD_INT 0
54668: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54669: LD_VAR 0 1
54673: PUSH
54674: LD_INT 0
54676: LESS
54677: PUSH
54678: LD_VAR 0 1
54682: PUSH
54683: LD_INT 8
54685: GREATER
54686: OR
54687: PUSH
54688: LD_VAR 0 2
54692: PUSH
54693: LD_INT 0
54695: LESS
54696: OR
54697: PUSH
54698: LD_VAR 0 2
54702: PUSH
54703: LD_INT 8
54705: GREATER
54706: OR
54707: IFFALSE 54711
// exit ;
54709: GO 54786
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54711: LD_ADDR_VAR 0 4
54715: PUSH
54716: LD_INT 22
54718: PUSH
54719: LD_VAR 0 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PPUSH
54728: CALL_OW 69
54732: PUSH
54733: FOR_IN
54734: IFFALSE 54784
// begin un := UnitShoot ( i ) ;
54736: LD_ADDR_VAR 0 5
54740: PUSH
54741: LD_VAR 0 4
54745: PPUSH
54746: CALL_OW 504
54750: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54751: LD_VAR 0 5
54755: PPUSH
54756: CALL_OW 255
54760: PUSH
54761: LD_VAR 0 1
54765: EQUAL
54766: IFFALSE 54782
// begin result := un ;
54768: LD_ADDR_VAR 0 3
54772: PUSH
54773: LD_VAR 0 5
54777: ST_TO_ADDR
// exit ;
54778: POP
54779: POP
54780: GO 54786
// end ; end ;
54782: GO 54733
54784: POP
54785: POP
// end ;
54786: LD_VAR 0 3
54790: RET
// export function GetCargoBay ( units ) ; begin
54791: LD_INT 0
54793: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54794: LD_ADDR_VAR 0 2
54798: PUSH
54799: LD_VAR 0 1
54803: PPUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 34
54809: PUSH
54810: LD_INT 12
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 34
54819: PUSH
54820: LD_INT 51
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 34
54829: PUSH
54830: LD_INT 32
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 34
54839: PUSH
54840: LD_INT 89
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: PPUSH
54854: CALL_OW 72
54858: ST_TO_ADDR
// end ;
54859: LD_VAR 0 2
54863: RET
// export function Negate ( value ) ; begin
54864: LD_INT 0
54866: PPUSH
// result := not value ;
54867: LD_ADDR_VAR 0 2
54871: PUSH
54872: LD_VAR 0 1
54876: NOT
54877: ST_TO_ADDR
// end ;
54878: LD_VAR 0 2
54882: RET
// export function Inc ( value ) ; begin
54883: LD_INT 0
54885: PPUSH
// result := value + 1 ;
54886: LD_ADDR_VAR 0 2
54890: PUSH
54891: LD_VAR 0 1
54895: PUSH
54896: LD_INT 1
54898: PLUS
54899: ST_TO_ADDR
// end ;
54900: LD_VAR 0 2
54904: RET
// export function Dec ( value ) ; begin
54905: LD_INT 0
54907: PPUSH
// result := value - 1 ;
54908: LD_ADDR_VAR 0 2
54912: PUSH
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 1
54920: MINUS
54921: ST_TO_ADDR
// end ;
54922: LD_VAR 0 2
54926: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54927: LD_INT 0
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54937: LD_VAR 0 1
54941: PPUSH
54942: LD_VAR 0 2
54946: PPUSH
54947: CALL_OW 488
54951: NOT
54952: PUSH
54953: LD_VAR 0 3
54957: PPUSH
54958: LD_VAR 0 4
54962: PPUSH
54963: CALL_OW 488
54967: NOT
54968: OR
54969: IFFALSE 54982
// begin result := - 1 ;
54971: LD_ADDR_VAR 0 5
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: ST_TO_ADDR
// exit ;
54980: GO 55217
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54982: LD_ADDR_VAR 0 12
54986: PUSH
54987: LD_VAR 0 1
54991: PPUSH
54992: LD_VAR 0 2
54996: PPUSH
54997: LD_VAR 0 3
55001: PPUSH
55002: LD_VAR 0 4
55006: PPUSH
55007: CALL 54067 0 4
55011: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55012: LD_ADDR_VAR 0 11
55016: PUSH
55017: LD_VAR 0 1
55021: PPUSH
55022: LD_VAR 0 2
55026: PPUSH
55027: LD_VAR 0 12
55031: PUSH
55032: LD_INT 1
55034: ARRAY
55035: PPUSH
55036: LD_VAR 0 12
55040: PUSH
55041: LD_INT 2
55043: ARRAY
55044: PPUSH
55045: CALL_OW 298
55049: ST_TO_ADDR
// distance := 9999 ;
55050: LD_ADDR_VAR 0 10
55054: PUSH
55055: LD_INT 9999
55057: ST_TO_ADDR
// for i := 0 to 5 do
55058: LD_ADDR_VAR 0 6
55062: PUSH
55063: DOUBLE
55064: LD_INT 0
55066: DEC
55067: ST_TO_ADDR
55068: LD_INT 5
55070: PUSH
55071: FOR_TO
55072: IFFALSE 55215
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55074: LD_ADDR_VAR 0 7
55078: PUSH
55079: LD_VAR 0 1
55083: PPUSH
55084: LD_VAR 0 6
55088: PPUSH
55089: LD_VAR 0 11
55093: PPUSH
55094: CALL_OW 272
55098: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55099: LD_ADDR_VAR 0 8
55103: PUSH
55104: LD_VAR 0 2
55108: PPUSH
55109: LD_VAR 0 6
55113: PPUSH
55114: LD_VAR 0 11
55118: PPUSH
55119: CALL_OW 273
55123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55124: LD_VAR 0 7
55128: PPUSH
55129: LD_VAR 0 8
55133: PPUSH
55134: CALL_OW 488
55138: NOT
55139: IFFALSE 55143
// continue ;
55141: GO 55071
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55143: LD_ADDR_VAR 0 9
55147: PUSH
55148: LD_VAR 0 12
55152: PUSH
55153: LD_INT 1
55155: ARRAY
55156: PPUSH
55157: LD_VAR 0 12
55161: PUSH
55162: LD_INT 2
55164: ARRAY
55165: PPUSH
55166: LD_VAR 0 7
55170: PPUSH
55171: LD_VAR 0 8
55175: PPUSH
55176: CALL_OW 298
55180: ST_TO_ADDR
// if tmp < distance then
55181: LD_VAR 0 9
55185: PUSH
55186: LD_VAR 0 10
55190: LESS
55191: IFFALSE 55213
// begin result := i ;
55193: LD_ADDR_VAR 0 5
55197: PUSH
55198: LD_VAR 0 6
55202: ST_TO_ADDR
// distance := tmp ;
55203: LD_ADDR_VAR 0 10
55207: PUSH
55208: LD_VAR 0 9
55212: ST_TO_ADDR
// end ; end ;
55213: GO 55071
55215: POP
55216: POP
// end ;
55217: LD_VAR 0 5
55221: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55222: LD_INT 0
55224: PPUSH
55225: PPUSH
// if not driver or not IsInUnit ( driver ) then
55226: LD_VAR 0 1
55230: NOT
55231: PUSH
55232: LD_VAR 0 1
55236: PPUSH
55237: CALL_OW 310
55241: NOT
55242: OR
55243: IFFALSE 55247
// exit ;
55245: GO 55337
// vehicle := IsInUnit ( driver ) ;
55247: LD_ADDR_VAR 0 3
55251: PUSH
55252: LD_VAR 0 1
55256: PPUSH
55257: CALL_OW 310
55261: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55262: LD_VAR 0 1
55266: PPUSH
55267: LD_STRING \
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: PUSH
55297: LD_STRING E
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_VAR 0 3
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PPUSH
55333: CALL_OW 446
// end ;
55337: LD_VAR 0 2
55341: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55342: LD_INT 0
55344: PPUSH
55345: PPUSH
// if not driver or not IsInUnit ( driver ) then
55346: LD_VAR 0 1
55350: NOT
55351: PUSH
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 310
55361: NOT
55362: OR
55363: IFFALSE 55367
// exit ;
55365: GO 55457
// vehicle := IsInUnit ( driver ) ;
55367: LD_ADDR_VAR 0 3
55371: PUSH
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 310
55381: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55382: LD_VAR 0 1
55386: PPUSH
55387: LD_STRING \
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: PUSH
55417: LD_STRING E
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_VAR 0 3
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PPUSH
55453: CALL_OW 447
// end ;
55457: LD_VAR 0 2
55461: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55462: LD_INT 0
55464: PPUSH
55465: PPUSH
55466: PPUSH
// tmp := [ ] ;
55467: LD_ADDR_VAR 0 5
55471: PUSH
55472: EMPTY
55473: ST_TO_ADDR
// for i in units do
55474: LD_ADDR_VAR 0 4
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: FOR_IN
55485: IFFALSE 55523
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55487: LD_ADDR_VAR 0 5
55491: PUSH
55492: LD_VAR 0 5
55496: PPUSH
55497: LD_VAR 0 5
55501: PUSH
55502: LD_INT 1
55504: PLUS
55505: PPUSH
55506: LD_VAR 0 4
55510: PPUSH
55511: CALL_OW 256
55515: PPUSH
55516: CALL_OW 2
55520: ST_TO_ADDR
55521: GO 55484
55523: POP
55524: POP
// if not tmp then
55525: LD_VAR 0 5
55529: NOT
55530: IFFALSE 55534
// exit ;
55532: GO 55582
// if asc then
55534: LD_VAR 0 2
55538: IFFALSE 55562
// result := SortListByListAsc ( units , tmp ) else
55540: LD_ADDR_VAR 0 3
55544: PUSH
55545: LD_VAR 0 1
55549: PPUSH
55550: LD_VAR 0 5
55554: PPUSH
55555: CALL_OW 76
55559: ST_TO_ADDR
55560: GO 55582
// result := SortListByListDesc ( units , tmp ) ;
55562: LD_ADDR_VAR 0 3
55566: PUSH
55567: LD_VAR 0 1
55571: PPUSH
55572: LD_VAR 0 5
55576: PPUSH
55577: CALL_OW 77
55581: ST_TO_ADDR
// end ;
55582: LD_VAR 0 3
55586: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55587: LD_INT 0
55589: PPUSH
55590: PPUSH
// task := GetTaskList ( mech ) ;
55591: LD_ADDR_VAR 0 4
55595: PUSH
55596: LD_VAR 0 1
55600: PPUSH
55601: CALL_OW 437
55605: ST_TO_ADDR
// if not task then
55606: LD_VAR 0 4
55610: NOT
55611: IFFALSE 55615
// exit ;
55613: GO 55657
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55615: LD_ADDR_VAR 0 3
55619: PUSH
55620: LD_VAR 0 4
55624: PUSH
55625: LD_INT 1
55627: ARRAY
55628: PUSH
55629: LD_INT 1
55631: ARRAY
55632: PUSH
55633: LD_STRING r
55635: EQUAL
55636: PUSH
55637: LD_VAR 0 4
55641: PUSH
55642: LD_INT 1
55644: ARRAY
55645: PUSH
55646: LD_INT 4
55648: ARRAY
55649: PUSH
55650: LD_VAR 0 2
55654: EQUAL
55655: AND
55656: ST_TO_ADDR
// end ;
55657: LD_VAR 0 3
55661: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55662: LD_INT 0
55664: PPUSH
// SetDir ( unit , d ) ;
55665: LD_VAR 0 1
55669: PPUSH
55670: LD_VAR 0 4
55674: PPUSH
55675: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55679: LD_ADDR_VAR 0 6
55683: PUSH
55684: LD_VAR 0 1
55688: PPUSH
55689: LD_VAR 0 2
55693: PPUSH
55694: LD_VAR 0 3
55698: PPUSH
55699: LD_VAR 0 5
55703: PPUSH
55704: CALL_OW 48
55708: ST_TO_ADDR
// end ;
55709: LD_VAR 0 6
55713: RET
// export function ToNaturalNumber ( number ) ; begin
55714: LD_INT 0
55716: PPUSH
// result := number div 1 ;
55717: LD_ADDR_VAR 0 2
55721: PUSH
55722: LD_VAR 0 1
55726: PUSH
55727: LD_INT 1
55729: DIV
55730: ST_TO_ADDR
// if number < 0 then
55731: LD_VAR 0 1
55735: PUSH
55736: LD_INT 0
55738: LESS
55739: IFFALSE 55749
// result := 0 ;
55741: LD_ADDR_VAR 0 2
55745: PUSH
55746: LD_INT 0
55748: ST_TO_ADDR
// end ;
55749: LD_VAR 0 2
55753: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
55754: LD_INT 0
55756: PPUSH
55757: PPUSH
55758: PPUSH
// if not buildings then
55759: LD_VAR 0 1
55763: NOT
55764: IFFALSE 55768
// exit ;
55766: GO 55883
// tmp := [ ] ;
55768: LD_ADDR_VAR 0 5
55772: PUSH
55773: EMPTY
55774: ST_TO_ADDR
// for b in buildings do
55775: LD_ADDR_VAR 0 4
55779: PUSH
55780: LD_VAR 0 1
55784: PUSH
55785: FOR_IN
55786: IFFALSE 55824
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
55788: LD_ADDR_VAR 0 5
55792: PUSH
55793: LD_VAR 0 5
55797: PPUSH
55798: LD_VAR 0 5
55802: PUSH
55803: LD_INT 1
55805: PLUS
55806: PPUSH
55807: LD_VAR 0 4
55811: PPUSH
55812: CALL_OW 266
55816: PPUSH
55817: CALL_OW 1
55821: ST_TO_ADDR
55822: GO 55785
55824: POP
55825: POP
// if not tmp then
55826: LD_VAR 0 5
55830: NOT
55831: IFFALSE 55835
// exit ;
55833: GO 55883
// if asc then
55835: LD_VAR 0 2
55839: IFFALSE 55863
// result := SortListByListAsc ( buildings , tmp ) else
55841: LD_ADDR_VAR 0 3
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: LD_VAR 0 5
55855: PPUSH
55856: CALL_OW 76
55860: ST_TO_ADDR
55861: GO 55883
// result := SortListByListDesc ( buildings , tmp ) ;
55863: LD_ADDR_VAR 0 3
55867: PUSH
55868: LD_VAR 0 1
55872: PPUSH
55873: LD_VAR 0 5
55877: PPUSH
55878: CALL_OW 77
55882: ST_TO_ADDR
// end ;
55883: LD_VAR 0 3
55887: RET
// export function SortByClass ( units , class ) ; var un ; begin
55888: LD_INT 0
55890: PPUSH
55891: PPUSH
// if not units or not class then
55892: LD_VAR 0 1
55896: NOT
55897: PUSH
55898: LD_VAR 0 2
55902: NOT
55903: OR
55904: IFFALSE 55908
// exit ;
55906: GO 56003
// result := [ ] ;
55908: LD_ADDR_VAR 0 3
55912: PUSH
55913: EMPTY
55914: ST_TO_ADDR
// for un in units do
55915: LD_ADDR_VAR 0 4
55919: PUSH
55920: LD_VAR 0 1
55924: PUSH
55925: FOR_IN
55926: IFFALSE 56001
// if GetClass ( un ) = class then
55928: LD_VAR 0 4
55932: PPUSH
55933: CALL_OW 257
55937: PUSH
55938: LD_VAR 0 2
55942: EQUAL
55943: IFFALSE 55970
// result := Insert ( result , 1 , un ) else
55945: LD_ADDR_VAR 0 3
55949: PUSH
55950: LD_VAR 0 3
55954: PPUSH
55955: LD_INT 1
55957: PPUSH
55958: LD_VAR 0 4
55962: PPUSH
55963: CALL_OW 2
55967: ST_TO_ADDR
55968: GO 55999
// result := Replace ( result , result + 1 , un ) ;
55970: LD_ADDR_VAR 0 3
55974: PUSH
55975: LD_VAR 0 3
55979: PPUSH
55980: LD_VAR 0 3
55984: PUSH
55985: LD_INT 1
55987: PLUS
55988: PPUSH
55989: LD_VAR 0 4
55993: PPUSH
55994: CALL_OW 1
55998: ST_TO_ADDR
55999: GO 55925
56001: POP
56002: POP
// end ;
56003: LD_VAR 0 3
56007: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56008: LD_INT 0
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
// result := [ ] ;
56017: LD_ADDR_VAR 0 4
56021: PUSH
56022: EMPTY
56023: ST_TO_ADDR
// if x - r < 0 then
56024: LD_VAR 0 1
56028: PUSH
56029: LD_VAR 0 3
56033: MINUS
56034: PUSH
56035: LD_INT 0
56037: LESS
56038: IFFALSE 56050
// min_x := 0 else
56040: LD_ADDR_VAR 0 8
56044: PUSH
56045: LD_INT 0
56047: ST_TO_ADDR
56048: GO 56066
// min_x := x - r ;
56050: LD_ADDR_VAR 0 8
56054: PUSH
56055: LD_VAR 0 1
56059: PUSH
56060: LD_VAR 0 3
56064: MINUS
56065: ST_TO_ADDR
// if y - r < 0 then
56066: LD_VAR 0 2
56070: PUSH
56071: LD_VAR 0 3
56075: MINUS
56076: PUSH
56077: LD_INT 0
56079: LESS
56080: IFFALSE 56092
// min_y := 0 else
56082: LD_ADDR_VAR 0 7
56086: PUSH
56087: LD_INT 0
56089: ST_TO_ADDR
56090: GO 56108
// min_y := y - r ;
56092: LD_ADDR_VAR 0 7
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: LD_VAR 0 3
56106: MINUS
56107: ST_TO_ADDR
// max_x := x + r ;
56108: LD_ADDR_VAR 0 9
56112: PUSH
56113: LD_VAR 0 1
56117: PUSH
56118: LD_VAR 0 3
56122: PLUS
56123: ST_TO_ADDR
// max_y := y + r ;
56124: LD_ADDR_VAR 0 10
56128: PUSH
56129: LD_VAR 0 2
56133: PUSH
56134: LD_VAR 0 3
56138: PLUS
56139: ST_TO_ADDR
// for _x = min_x to max_x do
56140: LD_ADDR_VAR 0 5
56144: PUSH
56145: DOUBLE
56146: LD_VAR 0 8
56150: DEC
56151: ST_TO_ADDR
56152: LD_VAR 0 9
56156: PUSH
56157: FOR_TO
56158: IFFALSE 56259
// for _y = min_y to max_y do
56160: LD_ADDR_VAR 0 6
56164: PUSH
56165: DOUBLE
56166: LD_VAR 0 7
56170: DEC
56171: ST_TO_ADDR
56172: LD_VAR 0 10
56176: PUSH
56177: FOR_TO
56178: IFFALSE 56255
// begin if not ValidHex ( _x , _y ) then
56180: LD_VAR 0 5
56184: PPUSH
56185: LD_VAR 0 6
56189: PPUSH
56190: CALL_OW 488
56194: NOT
56195: IFFALSE 56199
// continue ;
56197: GO 56177
// if GetResourceTypeXY ( _x , _y ) then
56199: LD_VAR 0 5
56203: PPUSH
56204: LD_VAR 0 6
56208: PPUSH
56209: CALL_OW 283
56213: IFFALSE 56253
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56215: LD_ADDR_VAR 0 4
56219: PUSH
56220: LD_VAR 0 4
56224: PPUSH
56225: LD_VAR 0 4
56229: PUSH
56230: LD_INT 1
56232: PLUS
56233: PPUSH
56234: LD_VAR 0 5
56238: PUSH
56239: LD_VAR 0 6
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PPUSH
56248: CALL_OW 1
56252: ST_TO_ADDR
// end ;
56253: GO 56177
56255: POP
56256: POP
56257: GO 56157
56259: POP
56260: POP
// end ;
56261: LD_VAR 0 4
56265: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56266: LD_INT 0
56268: PPUSH
56269: PPUSH
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
// if not units then
56276: LD_VAR 0 1
56280: NOT
56281: IFFALSE 56285
// exit ;
56283: GO 56813
// result := UnitFilter ( units , [ f_ok ] ) ;
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_INT 50
56297: PUSH
56298: EMPTY
56299: LIST
56300: PPUSH
56301: CALL_OW 72
56305: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56306: LD_ADDR_VAR 0 8
56310: PUSH
56311: LD_VAR 0 1
56315: PUSH
56316: LD_INT 1
56318: ARRAY
56319: PPUSH
56320: CALL_OW 255
56324: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56325: LD_ADDR_VAR 0 10
56329: PUSH
56330: LD_INT 29
56332: PUSH
56333: LD_INT 91
56335: PUSH
56336: LD_INT 49
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// if not result then
56344: LD_VAR 0 3
56348: NOT
56349: IFFALSE 56353
// exit ;
56351: GO 56813
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56353: LD_ADDR_VAR 0 5
56357: PUSH
56358: LD_INT 81
56360: PUSH
56361: LD_VAR 0 8
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PPUSH
56370: CALL_OW 69
56374: ST_TO_ADDR
// for i in result do
56375: LD_ADDR_VAR 0 4
56379: PUSH
56380: LD_VAR 0 3
56384: PUSH
56385: FOR_IN
56386: IFFALSE 56811
// begin tag := GetTag ( i ) + 1 ;
56388: LD_ADDR_VAR 0 9
56392: PUSH
56393: LD_VAR 0 4
56397: PPUSH
56398: CALL_OW 110
56402: PUSH
56403: LD_INT 1
56405: PLUS
56406: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56407: LD_ADDR_VAR 0 7
56411: PUSH
56412: LD_VAR 0 4
56416: PPUSH
56417: CALL_OW 250
56421: PPUSH
56422: LD_VAR 0 4
56426: PPUSH
56427: CALL_OW 251
56431: PPUSH
56432: LD_INT 4
56434: PPUSH
56435: CALL 56008 0 3
56439: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56440: LD_VAR 0 4
56444: PPUSH
56445: CALL_OW 247
56449: PUSH
56450: LD_INT 2
56452: EQUAL
56453: PUSH
56454: LD_VAR 0 7
56458: PUSH
56459: LD_INT 2
56461: GREATER
56462: AND
56463: PUSH
56464: LD_VAR 0 4
56468: PPUSH
56469: CALL_OW 264
56473: PUSH
56474: LD_VAR 0 10
56478: IN
56479: NOT
56480: AND
56481: IFFALSE 56520
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56483: LD_VAR 0 4
56487: PPUSH
56488: LD_VAR 0 7
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: PUSH
56497: LD_INT 1
56499: ARRAY
56500: PPUSH
56501: LD_VAR 0 7
56505: PUSH
56506: LD_INT 1
56508: ARRAY
56509: PUSH
56510: LD_INT 2
56512: ARRAY
56513: PPUSH
56514: CALL_OW 116
56518: GO 56809
// if path > tag then
56520: LD_VAR 0 2
56524: PUSH
56525: LD_VAR 0 9
56529: GREATER
56530: IFFALSE 56738
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56532: LD_ADDR_VAR 0 6
56536: PUSH
56537: LD_VAR 0 5
56541: PPUSH
56542: LD_INT 91
56544: PUSH
56545: LD_VAR 0 4
56549: PUSH
56550: LD_INT 8
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: PPUSH
56558: CALL_OW 72
56562: ST_TO_ADDR
// if nearEnemy then
56563: LD_VAR 0 6
56567: IFFALSE 56636
// begin if GetWeapon ( i ) = ru_time_lapser then
56569: LD_VAR 0 4
56573: PPUSH
56574: CALL_OW 264
56578: PUSH
56579: LD_INT 49
56581: EQUAL
56582: IFFALSE 56610
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56584: LD_VAR 0 4
56588: PPUSH
56589: LD_VAR 0 6
56593: PPUSH
56594: LD_VAR 0 4
56598: PPUSH
56599: CALL_OW 74
56603: PPUSH
56604: CALL_OW 112
56608: GO 56634
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56610: LD_VAR 0 4
56614: PPUSH
56615: LD_VAR 0 6
56619: PPUSH
56620: LD_VAR 0 4
56624: PPUSH
56625: CALL_OW 74
56629: PPUSH
56630: CALL 57884 0 2
// end else
56634: GO 56736
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56636: LD_VAR 0 4
56640: PPUSH
56641: LD_VAR 0 2
56645: PUSH
56646: LD_VAR 0 9
56650: ARRAY
56651: PUSH
56652: LD_INT 1
56654: ARRAY
56655: PPUSH
56656: LD_VAR 0 2
56660: PUSH
56661: LD_VAR 0 9
56665: ARRAY
56666: PUSH
56667: LD_INT 2
56669: ARRAY
56670: PPUSH
56671: CALL_OW 297
56675: PUSH
56676: LD_INT 6
56678: GREATER
56679: IFFALSE 56722
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56681: LD_VAR 0 4
56685: PPUSH
56686: LD_VAR 0 2
56690: PUSH
56691: LD_VAR 0 9
56695: ARRAY
56696: PUSH
56697: LD_INT 1
56699: ARRAY
56700: PPUSH
56701: LD_VAR 0 2
56705: PUSH
56706: LD_VAR 0 9
56710: ARRAY
56711: PUSH
56712: LD_INT 2
56714: ARRAY
56715: PPUSH
56716: CALL_OW 114
56720: GO 56736
// SetTag ( i , tag ) ;
56722: LD_VAR 0 4
56726: PPUSH
56727: LD_VAR 0 9
56731: PPUSH
56732: CALL_OW 109
// end else
56736: GO 56809
// if enemy then
56738: LD_VAR 0 5
56742: IFFALSE 56809
// begin if GetWeapon ( i ) = ru_time_lapser then
56744: LD_VAR 0 4
56748: PPUSH
56749: CALL_OW 264
56753: PUSH
56754: LD_INT 49
56756: EQUAL
56757: IFFALSE 56785
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56759: LD_VAR 0 4
56763: PPUSH
56764: LD_VAR 0 5
56768: PPUSH
56769: LD_VAR 0 4
56773: PPUSH
56774: CALL_OW 74
56778: PPUSH
56779: CALL_OW 112
56783: GO 56809
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56785: LD_VAR 0 4
56789: PPUSH
56790: LD_VAR 0 5
56794: PPUSH
56795: LD_VAR 0 4
56799: PPUSH
56800: CALL_OW 74
56804: PPUSH
56805: CALL 57884 0 2
// end ; end ;
56809: GO 56385
56811: POP
56812: POP
// end ;
56813: LD_VAR 0 3
56817: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56818: LD_INT 0
56820: PPUSH
56821: PPUSH
56822: PPUSH
// if not unit or IsInUnit ( unit ) then
56823: LD_VAR 0 1
56827: NOT
56828: PUSH
56829: LD_VAR 0 1
56833: PPUSH
56834: CALL_OW 310
56838: OR
56839: IFFALSE 56843
// exit ;
56841: GO 56934
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56843: LD_ADDR_VAR 0 4
56847: PUSH
56848: LD_VAR 0 1
56852: PPUSH
56853: CALL_OW 250
56857: PPUSH
56858: LD_VAR 0 2
56862: PPUSH
56863: LD_INT 1
56865: PPUSH
56866: CALL_OW 272
56870: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56871: LD_ADDR_VAR 0 5
56875: PUSH
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 251
56885: PPUSH
56886: LD_VAR 0 2
56890: PPUSH
56891: LD_INT 1
56893: PPUSH
56894: CALL_OW 273
56898: ST_TO_ADDR
// if ValidHex ( x , y ) then
56899: LD_VAR 0 4
56903: PPUSH
56904: LD_VAR 0 5
56908: PPUSH
56909: CALL_OW 488
56913: IFFALSE 56934
// ComTurnXY ( unit , x , y ) ;
56915: LD_VAR 0 1
56919: PPUSH
56920: LD_VAR 0 4
56924: PPUSH
56925: LD_VAR 0 5
56929: PPUSH
56930: CALL_OW 118
// end ;
56934: LD_VAR 0 3
56938: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56939: LD_INT 0
56941: PPUSH
56942: PPUSH
// result := false ;
56943: LD_ADDR_VAR 0 3
56947: PUSH
56948: LD_INT 0
56950: ST_TO_ADDR
// if not units then
56951: LD_VAR 0 2
56955: NOT
56956: IFFALSE 56960
// exit ;
56958: GO 57005
// for i in units do
56960: LD_ADDR_VAR 0 4
56964: PUSH
56965: LD_VAR 0 2
56969: PUSH
56970: FOR_IN
56971: IFFALSE 57003
// if See ( side , i ) then
56973: LD_VAR 0 1
56977: PPUSH
56978: LD_VAR 0 4
56982: PPUSH
56983: CALL_OW 292
56987: IFFALSE 57001
// begin result := true ;
56989: LD_ADDR_VAR 0 3
56993: PUSH
56994: LD_INT 1
56996: ST_TO_ADDR
// exit ;
56997: POP
56998: POP
56999: GO 57005
// end ;
57001: GO 56970
57003: POP
57004: POP
// end ;
57005: LD_VAR 0 3
57009: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57010: LD_INT 0
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
// if not unit or not points then
57016: LD_VAR 0 1
57020: NOT
57021: PUSH
57022: LD_VAR 0 2
57026: NOT
57027: OR
57028: IFFALSE 57032
// exit ;
57030: GO 57122
// dist := 99999 ;
57032: LD_ADDR_VAR 0 5
57036: PUSH
57037: LD_INT 99999
57039: ST_TO_ADDR
// for i in points do
57040: LD_ADDR_VAR 0 4
57044: PUSH
57045: LD_VAR 0 2
57049: PUSH
57050: FOR_IN
57051: IFFALSE 57120
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57053: LD_ADDR_VAR 0 6
57057: PUSH
57058: LD_VAR 0 1
57062: PPUSH
57063: LD_VAR 0 4
57067: PUSH
57068: LD_INT 1
57070: ARRAY
57071: PPUSH
57072: LD_VAR 0 4
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PPUSH
57081: CALL_OW 297
57085: ST_TO_ADDR
// if tmpDist < dist then
57086: LD_VAR 0 6
57090: PUSH
57091: LD_VAR 0 5
57095: LESS
57096: IFFALSE 57118
// begin result := i ;
57098: LD_ADDR_VAR 0 3
57102: PUSH
57103: LD_VAR 0 4
57107: ST_TO_ADDR
// dist := tmpDist ;
57108: LD_ADDR_VAR 0 5
57112: PUSH
57113: LD_VAR 0 6
57117: ST_TO_ADDR
// end ; end ;
57118: GO 57050
57120: POP
57121: POP
// end ;
57122: LD_VAR 0 3
57126: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57127: LD_INT 0
57129: PPUSH
// uc_side := side ;
57130: LD_ADDR_OWVAR 20
57134: PUSH
57135: LD_VAR 0 1
57139: ST_TO_ADDR
// uc_nation := 3 ;
57140: LD_ADDR_OWVAR 21
57144: PUSH
57145: LD_INT 3
57147: ST_TO_ADDR
// vc_chassis := 25 ;
57148: LD_ADDR_OWVAR 37
57152: PUSH
57153: LD_INT 25
57155: ST_TO_ADDR
// vc_engine := engine_siberite ;
57156: LD_ADDR_OWVAR 39
57160: PUSH
57161: LD_INT 3
57163: ST_TO_ADDR
// vc_control := control_computer ;
57164: LD_ADDR_OWVAR 38
57168: PUSH
57169: LD_INT 3
57171: ST_TO_ADDR
// vc_weapon := 59 ;
57172: LD_ADDR_OWVAR 40
57176: PUSH
57177: LD_INT 59
57179: ST_TO_ADDR
// result := CreateVehicle ;
57180: LD_ADDR_VAR 0 5
57184: PUSH
57185: CALL_OW 45
57189: ST_TO_ADDR
// SetDir ( result , d ) ;
57190: LD_VAR 0 5
57194: PPUSH
57195: LD_VAR 0 4
57199: PPUSH
57200: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57204: LD_VAR 0 5
57208: PPUSH
57209: LD_VAR 0 2
57213: PPUSH
57214: LD_VAR 0 3
57218: PPUSH
57219: LD_INT 0
57221: PPUSH
57222: CALL_OW 48
// end ;
57226: LD_VAR 0 5
57230: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57231: LD_INT 0
57233: PPUSH
57234: PPUSH
57235: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57236: LD_ADDR_VAR 0 2
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57259: LD_VAR 0 1
57263: NOT
57264: PUSH
57265: LD_VAR 0 1
57269: PPUSH
57270: CALL_OW 264
57274: PUSH
57275: LD_INT 12
57277: PUSH
57278: LD_INT 51
57280: PUSH
57281: LD_INT 32
57283: PUSH
57284: LD_INT 89
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: IN
57293: NOT
57294: OR
57295: IFFALSE 57299
// exit ;
57297: GO 57397
// for i := 1 to 3 do
57299: LD_ADDR_VAR 0 3
57303: PUSH
57304: DOUBLE
57305: LD_INT 1
57307: DEC
57308: ST_TO_ADDR
57309: LD_INT 3
57311: PUSH
57312: FOR_TO
57313: IFFALSE 57395
// begin tmp := GetCargo ( cargo , i ) ;
57315: LD_ADDR_VAR 0 4
57319: PUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: LD_VAR 0 3
57329: PPUSH
57330: CALL_OW 289
57334: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: LD_VAR 0 2
57344: PPUSH
57345: LD_VAR 0 3
57349: PPUSH
57350: LD_VAR 0 4
57354: PPUSH
57355: CALL_OW 1
57359: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57360: LD_ADDR_VAR 0 2
57364: PUSH
57365: LD_VAR 0 2
57369: PPUSH
57370: LD_INT 4
57372: PPUSH
57373: LD_VAR 0 2
57377: PUSH
57378: LD_INT 4
57380: ARRAY
57381: PUSH
57382: LD_VAR 0 4
57386: PLUS
57387: PPUSH
57388: CALL_OW 1
57392: ST_TO_ADDR
// end ;
57393: GO 57312
57395: POP
57396: POP
// end ;
57397: LD_VAR 0 2
57401: RET
// export function Length ( array ) ; begin
57402: LD_INT 0
57404: PPUSH
// result := array + 0 ;
57405: LD_ADDR_VAR 0 2
57409: PUSH
57410: LD_VAR 0 1
57414: PUSH
57415: LD_INT 0
57417: PLUS
57418: ST_TO_ADDR
// end ;
57419: LD_VAR 0 2
57423: RET
// export function PrepareArray ( array ) ; begin
57424: LD_INT 0
57426: PPUSH
// result := array diff 0 ;
57427: LD_ADDR_VAR 0 2
57431: PUSH
57432: LD_VAR 0 1
57436: PUSH
57437: LD_INT 0
57439: DIFF
57440: ST_TO_ADDR
// if not result [ 1 ] then
57441: LD_VAR 0 2
57445: PUSH
57446: LD_INT 1
57448: ARRAY
57449: NOT
57450: IFFALSE 57470
// result := Delete ( result , 1 ) ;
57452: LD_ADDR_VAR 0 2
57456: PUSH
57457: LD_VAR 0 2
57461: PPUSH
57462: LD_INT 1
57464: PPUSH
57465: CALL_OW 3
57469: ST_TO_ADDR
// end ;
57470: LD_VAR 0 2
57474: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57475: LD_INT 0
57477: PPUSH
57478: PPUSH
57479: PPUSH
57480: PPUSH
// sibRocketRange := 25 ;
57481: LD_ADDR_VAR 0 6
57485: PUSH
57486: LD_INT 25
57488: ST_TO_ADDR
// result := false ;
57489: LD_ADDR_VAR 0 4
57493: PUSH
57494: LD_INT 0
57496: ST_TO_ADDR
// for i := 0 to 5 do
57497: LD_ADDR_VAR 0 5
57501: PUSH
57502: DOUBLE
57503: LD_INT 0
57505: DEC
57506: ST_TO_ADDR
57507: LD_INT 5
57509: PUSH
57510: FOR_TO
57511: IFFALSE 57578
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57513: LD_VAR 0 1
57517: PPUSH
57518: LD_VAR 0 5
57522: PPUSH
57523: LD_VAR 0 6
57527: PPUSH
57528: CALL_OW 272
57532: PPUSH
57533: LD_VAR 0 2
57537: PPUSH
57538: LD_VAR 0 5
57542: PPUSH
57543: LD_VAR 0 6
57547: PPUSH
57548: CALL_OW 273
57552: PPUSH
57553: LD_VAR 0 3
57557: PPUSH
57558: CALL_OW 309
57562: IFFALSE 57576
// begin result := true ;
57564: LD_ADDR_VAR 0 4
57568: PUSH
57569: LD_INT 1
57571: ST_TO_ADDR
// exit ;
57572: POP
57573: POP
57574: GO 57580
// end ;
57576: GO 57510
57578: POP
57579: POP
// end ;
57580: LD_VAR 0 4
57584: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57585: LD_INT 0
57587: PPUSH
57588: PPUSH
57589: PPUSH
// if btype = b_depot then
57590: LD_VAR 0 2
57594: PUSH
57595: LD_INT 0
57597: EQUAL
57598: IFFALSE 57610
// begin result := true ;
57600: LD_ADDR_VAR 0 3
57604: PUSH
57605: LD_INT 1
57607: ST_TO_ADDR
// exit ;
57608: GO 57726
// end ; pom := GetBase ( depot ) ;
57610: LD_ADDR_VAR 0 4
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: CALL_OW 274
57624: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57625: LD_ADDR_VAR 0 5
57629: PUSH
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: CALL_OW 248
57644: PPUSH
57645: CALL_OW 450
57649: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57650: LD_ADDR_VAR 0 3
57654: PUSH
57655: LD_VAR 0 4
57659: PPUSH
57660: LD_INT 1
57662: PPUSH
57663: CALL_OW 275
57667: PUSH
57668: LD_VAR 0 5
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: GREATEREQUAL
57677: PUSH
57678: LD_VAR 0 4
57682: PPUSH
57683: LD_INT 2
57685: PPUSH
57686: CALL_OW 275
57690: PUSH
57691: LD_VAR 0 5
57695: PUSH
57696: LD_INT 2
57698: ARRAY
57699: GREATEREQUAL
57700: AND
57701: PUSH
57702: LD_VAR 0 4
57706: PPUSH
57707: LD_INT 3
57709: PPUSH
57710: CALL_OW 275
57714: PUSH
57715: LD_VAR 0 5
57719: PUSH
57720: LD_INT 3
57722: ARRAY
57723: GREATEREQUAL
57724: AND
57725: ST_TO_ADDR
// end ;
57726: LD_VAR 0 3
57730: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57731: LD_INT 0
57733: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57734: LD_VAR 0 1
57738: PPUSH
57739: LD_VAR 0 2
57743: PPUSH
57744: LD_INT 0
57746: PPUSH
57747: LD_INT 0
57749: PPUSH
57750: LD_INT 1
57752: PPUSH
57753: LD_INT 0
57755: PPUSH
57756: CALL_OW 587
// end ;
57760: LD_VAR 0 3
57764: RET
// export function CenterOnNow ( unit ) ; begin
57765: LD_INT 0
57767: PPUSH
// result := IsInUnit ( unit ) ;
57768: LD_ADDR_VAR 0 2
57772: PUSH
57773: LD_VAR 0 1
57777: PPUSH
57778: CALL_OW 310
57782: ST_TO_ADDR
// if not result then
57783: LD_VAR 0 2
57787: NOT
57788: IFFALSE 57800
// result := unit ;
57790: LD_ADDR_VAR 0 2
57794: PUSH
57795: LD_VAR 0 1
57799: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57800: LD_VAR 0 1
57804: PPUSH
57805: CALL_OW 87
// end ;
57809: LD_VAR 0 2
57813: RET
// export function ComMoveHex ( unit , hex ) ; begin
57814: LD_INT 0
57816: PPUSH
// if not hex then
57817: LD_VAR 0 2
57821: NOT
57822: IFFALSE 57826
// exit ;
57824: GO 57879
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57826: LD_VAR 0 2
57830: PUSH
57831: LD_INT 1
57833: ARRAY
57834: PPUSH
57835: LD_VAR 0 2
57839: PUSH
57840: LD_INT 2
57842: ARRAY
57843: PPUSH
57844: CALL_OW 428
57848: IFFALSE 57852
// exit ;
57850: GO 57879
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57852: LD_VAR 0 1
57856: PPUSH
57857: LD_VAR 0 2
57861: PUSH
57862: LD_INT 1
57864: ARRAY
57865: PPUSH
57866: LD_VAR 0 2
57870: PUSH
57871: LD_INT 2
57873: ARRAY
57874: PPUSH
57875: CALL_OW 111
// end ;
57879: LD_VAR 0 3
57883: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57884: LD_INT 0
57886: PPUSH
57887: PPUSH
57888: PPUSH
// if not unit or not enemy then
57889: LD_VAR 0 1
57893: NOT
57894: PUSH
57895: LD_VAR 0 2
57899: NOT
57900: OR
57901: IFFALSE 57905
// exit ;
57903: GO 58029
// x := GetX ( enemy ) ;
57905: LD_ADDR_VAR 0 4
57909: PUSH
57910: LD_VAR 0 2
57914: PPUSH
57915: CALL_OW 250
57919: ST_TO_ADDR
// y := GetY ( enemy ) ;
57920: LD_ADDR_VAR 0 5
57924: PUSH
57925: LD_VAR 0 2
57929: PPUSH
57930: CALL_OW 251
57934: ST_TO_ADDR
// if ValidHex ( x , y ) then
57935: LD_VAR 0 4
57939: PPUSH
57940: LD_VAR 0 5
57944: PPUSH
57945: CALL_OW 488
57949: IFFALSE 58029
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57951: LD_VAR 0 2
57955: PPUSH
57956: CALL_OW 247
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: IN
57971: PUSH
57972: LD_VAR 0 1
57976: PPUSH
57977: CALL_OW 255
57981: PPUSH
57982: LD_VAR 0 2
57986: PPUSH
57987: CALL_OW 292
57991: OR
57992: IFFALSE 58010
// ComAttackUnit ( unit , enemy ) else
57994: LD_VAR 0 1
57998: PPUSH
57999: LD_VAR 0 2
58003: PPUSH
58004: CALL_OW 115
58008: GO 58029
// ComAgressiveMove ( unit , x , y ) ;
58010: LD_VAR 0 1
58014: PPUSH
58015: LD_VAR 0 4
58019: PPUSH
58020: LD_VAR 0 5
58024: PPUSH
58025: CALL_OW 114
// end ;
58029: LD_VAR 0 3
58033: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58034: LD_INT 0
58036: PPUSH
58037: PPUSH
58038: PPUSH
// list := AreaToList ( area , 0 ) ;
58039: LD_ADDR_VAR 0 5
58043: PUSH
58044: LD_VAR 0 1
58048: PPUSH
58049: LD_INT 0
58051: PPUSH
58052: CALL_OW 517
58056: ST_TO_ADDR
// if not list then
58057: LD_VAR 0 5
58061: NOT
58062: IFFALSE 58066
// exit ;
58064: GO 58196
// if all then
58066: LD_VAR 0 2
58070: IFFALSE 58158
// begin for i := 1 to list [ 1 ] do
58072: LD_ADDR_VAR 0 4
58076: PUSH
58077: DOUBLE
58078: LD_INT 1
58080: DEC
58081: ST_TO_ADDR
58082: LD_VAR 0 5
58086: PUSH
58087: LD_INT 1
58089: ARRAY
58090: PUSH
58091: FOR_TO
58092: IFFALSE 58154
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58094: LD_ADDR_VAR 0 3
58098: PUSH
58099: LD_VAR 0 3
58103: PPUSH
58104: LD_VAR 0 3
58108: PUSH
58109: LD_INT 1
58111: PLUS
58112: PPUSH
58113: LD_VAR 0 5
58117: PUSH
58118: LD_INT 1
58120: ARRAY
58121: PUSH
58122: LD_VAR 0 4
58126: ARRAY
58127: PUSH
58128: LD_VAR 0 5
58132: PUSH
58133: LD_INT 2
58135: ARRAY
58136: PUSH
58137: LD_VAR 0 4
58141: ARRAY
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PPUSH
58147: CALL_OW 1
58151: ST_TO_ADDR
58152: GO 58091
58154: POP
58155: POP
// exit ;
58156: GO 58196
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58158: LD_ADDR_VAR 0 3
58162: PUSH
58163: LD_VAR 0 5
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_VAR 0 5
58180: PUSH
58181: LD_INT 2
58183: ARRAY
58184: PUSH
58185: LD_INT 1
58187: ARRAY
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: ST_TO_ADDR
// end ;
58196: LD_VAR 0 3
58200: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58201: LD_INT 0
58203: PPUSH
58204: PPUSH
// list := AreaToList ( area , 0 ) ;
58205: LD_ADDR_VAR 0 4
58209: PUSH
58210: LD_VAR 0 1
58214: PPUSH
58215: LD_INT 0
58217: PPUSH
58218: CALL_OW 517
58222: ST_TO_ADDR
// if not list then
58223: LD_VAR 0 4
58227: NOT
58228: IFFALSE 58232
// exit ;
58230: GO 58273
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58232: LD_ADDR_VAR 0 3
58236: PUSH
58237: LD_VAR 0 4
58241: PUSH
58242: LD_INT 1
58244: ARRAY
58245: PUSH
58246: LD_INT 1
58248: ARRAY
58249: PUSH
58250: LD_VAR 0 4
58254: PUSH
58255: LD_INT 2
58257: ARRAY
58258: PUSH
58259: LD_INT 1
58261: ARRAY
58262: PUSH
58263: LD_VAR 0 2
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// end ;
58273: LD_VAR 0 3
58277: RET
// export function First ( array ) ; begin
58278: LD_INT 0
58280: PPUSH
// if not array then
58281: LD_VAR 0 1
58285: NOT
58286: IFFALSE 58290
// exit ;
58288: GO 58304
// result := array [ 1 ] ;
58290: LD_ADDR_VAR 0 2
58294: PUSH
58295: LD_VAR 0 1
58299: PUSH
58300: LD_INT 1
58302: ARRAY
58303: ST_TO_ADDR
// end ;
58304: LD_VAR 0 2
58308: RET
// export function Last ( array ) ; begin
58309: LD_INT 0
58311: PPUSH
// if not array then
58312: LD_VAR 0 1
58316: NOT
58317: IFFALSE 58321
// exit ;
58319: GO 58337
// result := array [ array ] ;
58321: LD_ADDR_VAR 0 2
58325: PUSH
58326: LD_VAR 0 1
58330: PUSH
58331: LD_VAR 0 1
58335: ARRAY
58336: ST_TO_ADDR
// end ;
58337: LD_VAR 0 2
58341: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58342: LD_INT 0
58344: PPUSH
58345: PPUSH
// result := [ ] ;
58346: LD_ADDR_VAR 0 5
58350: PUSH
58351: EMPTY
58352: ST_TO_ADDR
// if not array then
58353: LD_VAR 0 1
58357: NOT
58358: IFFALSE 58362
// exit ;
58360: GO 58474
// for i := 1 to array do
58362: LD_ADDR_VAR 0 6
58366: PUSH
58367: DOUBLE
58368: LD_INT 1
58370: DEC
58371: ST_TO_ADDR
58372: LD_VAR 0 1
58376: PUSH
58377: FOR_TO
58378: IFFALSE 58472
// if array [ i ] [ index ] = value then
58380: LD_VAR 0 1
58384: PUSH
58385: LD_VAR 0 6
58389: ARRAY
58390: PUSH
58391: LD_VAR 0 2
58395: ARRAY
58396: PUSH
58397: LD_VAR 0 3
58401: EQUAL
58402: IFFALSE 58470
// begin if indexColumn then
58404: LD_VAR 0 4
58408: IFFALSE 58444
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58410: LD_ADDR_VAR 0 5
58414: PUSH
58415: LD_VAR 0 5
58419: PPUSH
58420: LD_VAR 0 1
58424: PUSH
58425: LD_VAR 0 6
58429: ARRAY
58430: PUSH
58431: LD_VAR 0 4
58435: ARRAY
58436: PPUSH
58437: CALL 53522 0 2
58441: ST_TO_ADDR
58442: GO 58470
// result := Join ( result , array [ i ] ) ;
58444: LD_ADDR_VAR 0 5
58448: PUSH
58449: LD_VAR 0 5
58453: PPUSH
58454: LD_VAR 0 1
58458: PUSH
58459: LD_VAR 0 6
58463: ARRAY
58464: PPUSH
58465: CALL 53522 0 2
58469: ST_TO_ADDR
// end ;
58470: GO 58377
58472: POP
58473: POP
// end ;
58474: LD_VAR 0 5
58478: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58479: LD_INT 0
58481: PPUSH
// if not vehicles or not parkingPoint then
58482: LD_VAR 0 1
58486: NOT
58487: PUSH
58488: LD_VAR 0 2
58492: NOT
58493: OR
58494: IFFALSE 58498
// exit ;
58496: GO 58596
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58498: LD_ADDR_VAR 0 1
58502: PUSH
58503: LD_VAR 0 1
58507: PPUSH
58508: LD_INT 50
58510: PUSH
58511: EMPTY
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: LD_INT 92
58519: PUSH
58520: LD_VAR 0 2
58524: PUSH
58525: LD_INT 1
58527: ARRAY
58528: PUSH
58529: LD_VAR 0 2
58533: PUSH
58534: LD_INT 2
58536: ARRAY
58537: PUSH
58538: LD_INT 8
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PPUSH
58555: CALL_OW 72
58559: ST_TO_ADDR
// if not vehicles then
58560: LD_VAR 0 1
58564: NOT
58565: IFFALSE 58569
// exit ;
58567: GO 58596
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58569: LD_VAR 0 1
58573: PPUSH
58574: LD_VAR 0 2
58578: PUSH
58579: LD_INT 1
58581: ARRAY
58582: PPUSH
58583: LD_VAR 0 2
58587: PUSH
58588: LD_INT 2
58590: ARRAY
58591: PPUSH
58592: CALL_OW 111
// end ;
58596: LD_VAR 0 3
58600: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58601: LD_INT 0
58603: PPUSH
58604: PPUSH
58605: PPUSH
// if not side or not area then
58606: LD_VAR 0 1
58610: NOT
58611: PUSH
58612: LD_VAR 0 2
58616: NOT
58617: OR
58618: IFFALSE 58622
// exit ;
58620: GO 58741
// tmp := AreaToList ( area , 0 ) ;
58622: LD_ADDR_VAR 0 5
58626: PUSH
58627: LD_VAR 0 2
58631: PPUSH
58632: LD_INT 0
58634: PPUSH
58635: CALL_OW 517
58639: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58640: LD_ADDR_VAR 0 4
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 5
58654: PUSH
58655: LD_INT 1
58657: ARRAY
58658: PUSH
58659: FOR_TO
58660: IFFALSE 58739
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58662: LD_VAR 0 5
58666: PUSH
58667: LD_INT 1
58669: ARRAY
58670: PUSH
58671: LD_VAR 0 4
58675: ARRAY
58676: PPUSH
58677: LD_VAR 0 5
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: PUSH
58686: LD_VAR 0 4
58690: ARRAY
58691: PPUSH
58692: CALL_OW 351
58696: IFFALSE 58737
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58698: LD_VAR 0 5
58702: PUSH
58703: LD_INT 1
58705: ARRAY
58706: PUSH
58707: LD_VAR 0 4
58711: ARRAY
58712: PPUSH
58713: LD_VAR 0 5
58717: PUSH
58718: LD_INT 2
58720: ARRAY
58721: PUSH
58722: LD_VAR 0 4
58726: ARRAY
58727: PPUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: CALL_OW 244
// end ;
58737: GO 58659
58739: POP
58740: POP
// end ; end_of_file
58741: LD_VAR 0 3
58745: RET
// export globalGameSaveCounter ; every 0 0$1 do
58746: GO 58748
58748: DISABLE
// begin enable ;
58749: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58750: LD_STRING updateTimer(
58752: PUSH
58753: LD_OWVAR 1
58757: STR
58758: PUSH
58759: LD_STRING );
58761: STR
58762: PPUSH
58763: CALL_OW 559
// end ;
58767: END
// every 0 0$1 do
58768: GO 58770
58770: DISABLE
// begin globalGameSaveCounter := 0 ;
58771: LD_ADDR_EXP 60
58775: PUSH
58776: LD_INT 0
58778: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58779: LD_STRING setGameSaveCounter(0)
58781: PPUSH
58782: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58786: LD_STRING initStreamRollete();
58788: PPUSH
58789: CALL_OW 559
// InitStreamMode ;
58793: CALL 60136 0 0
// DefineStreamItems ( false ) ;
58797: LD_INT 0
58799: PPUSH
58800: CALL 60600 0 1
// end ;
58804: END
// export function SOS_MapStart ( ) ; begin
58805: LD_INT 0
58807: PPUSH
// if streamModeActive then
58808: LD_EXP 61
58812: IFFALSE 58821
// DefineStreamItems ( true ) ;
58814: LD_INT 1
58816: PPUSH
58817: CALL 60600 0 1
// UpdateLuaVariables ( ) ;
58821: CALL 58838 0 0
// UpdateFactoryWaypoints ( ) ;
58825: CALL 73602 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58829: CALL 73854 0 0
// end ;
58833: LD_VAR 0 1
58837: RET
// function UpdateLuaVariables ( ) ; begin
58838: LD_INT 0
58840: PPUSH
// if globalGameSaveCounter then
58841: LD_EXP 60
58845: IFFALSE 58879
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58847: LD_ADDR_EXP 60
58851: PUSH
58852: LD_EXP 60
58856: PPUSH
58857: CALL 54883 0 1
58861: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58862: LD_STRING setGameSaveCounter(
58864: PUSH
58865: LD_EXP 60
58869: STR
58870: PUSH
58871: LD_STRING )
58873: STR
58874: PPUSH
58875: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58879: LD_STRING setGameDifficulty(
58881: PUSH
58882: LD_OWVAR 67
58886: STR
58887: PUSH
58888: LD_STRING )
58890: STR
58891: PPUSH
58892: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58896: LD_STRING displayDifficulty(
58898: PUSH
58899: LD_OWVAR 67
58903: STR
58904: PUSH
58905: LD_STRING )
58907: STR
58908: PPUSH
58909: CALL_OW 559
// end ;
58913: LD_VAR 0 1
58917: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58918: LD_INT 0
58920: PPUSH
// if p2 = stream_mode then
58921: LD_VAR 0 2
58925: PUSH
58926: LD_INT 100
58928: EQUAL
58929: IFFALSE 59932
// begin if not StreamModeActive then
58931: LD_EXP 61
58935: NOT
58936: IFFALSE 58946
// StreamModeActive := true ;
58938: LD_ADDR_EXP 61
58942: PUSH
58943: LD_INT 1
58945: ST_TO_ADDR
// if p3 = 0 then
58946: LD_VAR 0 3
58950: PUSH
58951: LD_INT 0
58953: EQUAL
58954: IFFALSE 58960
// InitStreamMode ;
58956: CALL 60136 0 0
// if p3 = 1 then
58960: LD_VAR 0 3
58964: PUSH
58965: LD_INT 1
58967: EQUAL
58968: IFFALSE 58978
// sRocket := true ;
58970: LD_ADDR_EXP 66
58974: PUSH
58975: LD_INT 1
58977: ST_TO_ADDR
// if p3 = 2 then
58978: LD_VAR 0 3
58982: PUSH
58983: LD_INT 2
58985: EQUAL
58986: IFFALSE 58996
// sSpeed := true ;
58988: LD_ADDR_EXP 65
58992: PUSH
58993: LD_INT 1
58995: ST_TO_ADDR
// if p3 = 3 then
58996: LD_VAR 0 3
59000: PUSH
59001: LD_INT 3
59003: EQUAL
59004: IFFALSE 59014
// sEngine := true ;
59006: LD_ADDR_EXP 67
59010: PUSH
59011: LD_INT 1
59013: ST_TO_ADDR
// if p3 = 4 then
59014: LD_VAR 0 3
59018: PUSH
59019: LD_INT 4
59021: EQUAL
59022: IFFALSE 59032
// sSpec := true ;
59024: LD_ADDR_EXP 64
59028: PUSH
59029: LD_INT 1
59031: ST_TO_ADDR
// if p3 = 5 then
59032: LD_VAR 0 3
59036: PUSH
59037: LD_INT 5
59039: EQUAL
59040: IFFALSE 59050
// sLevel := true ;
59042: LD_ADDR_EXP 68
59046: PUSH
59047: LD_INT 1
59049: ST_TO_ADDR
// if p3 = 6 then
59050: LD_VAR 0 3
59054: PUSH
59055: LD_INT 6
59057: EQUAL
59058: IFFALSE 59068
// sArmoury := true ;
59060: LD_ADDR_EXP 69
59064: PUSH
59065: LD_INT 1
59067: ST_TO_ADDR
// if p3 = 7 then
59068: LD_VAR 0 3
59072: PUSH
59073: LD_INT 7
59075: EQUAL
59076: IFFALSE 59086
// sRadar := true ;
59078: LD_ADDR_EXP 70
59082: PUSH
59083: LD_INT 1
59085: ST_TO_ADDR
// if p3 = 8 then
59086: LD_VAR 0 3
59090: PUSH
59091: LD_INT 8
59093: EQUAL
59094: IFFALSE 59104
// sBunker := true ;
59096: LD_ADDR_EXP 71
59100: PUSH
59101: LD_INT 1
59103: ST_TO_ADDR
// if p3 = 9 then
59104: LD_VAR 0 3
59108: PUSH
59109: LD_INT 9
59111: EQUAL
59112: IFFALSE 59122
// sHack := true ;
59114: LD_ADDR_EXP 72
59118: PUSH
59119: LD_INT 1
59121: ST_TO_ADDR
// if p3 = 10 then
59122: LD_VAR 0 3
59126: PUSH
59127: LD_INT 10
59129: EQUAL
59130: IFFALSE 59140
// sFire := true ;
59132: LD_ADDR_EXP 73
59136: PUSH
59137: LD_INT 1
59139: ST_TO_ADDR
// if p3 = 11 then
59140: LD_VAR 0 3
59144: PUSH
59145: LD_INT 11
59147: EQUAL
59148: IFFALSE 59158
// sRefresh := true ;
59150: LD_ADDR_EXP 74
59154: PUSH
59155: LD_INT 1
59157: ST_TO_ADDR
// if p3 = 12 then
59158: LD_VAR 0 3
59162: PUSH
59163: LD_INT 12
59165: EQUAL
59166: IFFALSE 59176
// sExp := true ;
59168: LD_ADDR_EXP 75
59172: PUSH
59173: LD_INT 1
59175: ST_TO_ADDR
// if p3 = 13 then
59176: LD_VAR 0 3
59180: PUSH
59181: LD_INT 13
59183: EQUAL
59184: IFFALSE 59194
// sDepot := true ;
59186: LD_ADDR_EXP 76
59190: PUSH
59191: LD_INT 1
59193: ST_TO_ADDR
// if p3 = 14 then
59194: LD_VAR 0 3
59198: PUSH
59199: LD_INT 14
59201: EQUAL
59202: IFFALSE 59212
// sFlag := true ;
59204: LD_ADDR_EXP 77
59208: PUSH
59209: LD_INT 1
59211: ST_TO_ADDR
// if p3 = 15 then
59212: LD_VAR 0 3
59216: PUSH
59217: LD_INT 15
59219: EQUAL
59220: IFFALSE 59230
// sKamikadze := true ;
59222: LD_ADDR_EXP 85
59226: PUSH
59227: LD_INT 1
59229: ST_TO_ADDR
// if p3 = 16 then
59230: LD_VAR 0 3
59234: PUSH
59235: LD_INT 16
59237: EQUAL
59238: IFFALSE 59248
// sTroll := true ;
59240: LD_ADDR_EXP 86
59244: PUSH
59245: LD_INT 1
59247: ST_TO_ADDR
// if p3 = 17 then
59248: LD_VAR 0 3
59252: PUSH
59253: LD_INT 17
59255: EQUAL
59256: IFFALSE 59266
// sSlow := true ;
59258: LD_ADDR_EXP 87
59262: PUSH
59263: LD_INT 1
59265: ST_TO_ADDR
// if p3 = 18 then
59266: LD_VAR 0 3
59270: PUSH
59271: LD_INT 18
59273: EQUAL
59274: IFFALSE 59284
// sLack := true ;
59276: LD_ADDR_EXP 88
59280: PUSH
59281: LD_INT 1
59283: ST_TO_ADDR
// if p3 = 19 then
59284: LD_VAR 0 3
59288: PUSH
59289: LD_INT 19
59291: EQUAL
59292: IFFALSE 59302
// sTank := true ;
59294: LD_ADDR_EXP 90
59298: PUSH
59299: LD_INT 1
59301: ST_TO_ADDR
// if p3 = 20 then
59302: LD_VAR 0 3
59306: PUSH
59307: LD_INT 20
59309: EQUAL
59310: IFFALSE 59320
// sRemote := true ;
59312: LD_ADDR_EXP 91
59316: PUSH
59317: LD_INT 1
59319: ST_TO_ADDR
// if p3 = 21 then
59320: LD_VAR 0 3
59324: PUSH
59325: LD_INT 21
59327: EQUAL
59328: IFFALSE 59338
// sPowell := true ;
59330: LD_ADDR_EXP 92
59334: PUSH
59335: LD_INT 1
59337: ST_TO_ADDR
// if p3 = 22 then
59338: LD_VAR 0 3
59342: PUSH
59343: LD_INT 22
59345: EQUAL
59346: IFFALSE 59356
// sTeleport := true ;
59348: LD_ADDR_EXP 95
59352: PUSH
59353: LD_INT 1
59355: ST_TO_ADDR
// if p3 = 23 then
59356: LD_VAR 0 3
59360: PUSH
59361: LD_INT 23
59363: EQUAL
59364: IFFALSE 59374
// sOilTower := true ;
59366: LD_ADDR_EXP 97
59370: PUSH
59371: LD_INT 1
59373: ST_TO_ADDR
// if p3 = 24 then
59374: LD_VAR 0 3
59378: PUSH
59379: LD_INT 24
59381: EQUAL
59382: IFFALSE 59392
// sShovel := true ;
59384: LD_ADDR_EXP 98
59388: PUSH
59389: LD_INT 1
59391: ST_TO_ADDR
// if p3 = 25 then
59392: LD_VAR 0 3
59396: PUSH
59397: LD_INT 25
59399: EQUAL
59400: IFFALSE 59410
// sSheik := true ;
59402: LD_ADDR_EXP 99
59406: PUSH
59407: LD_INT 1
59409: ST_TO_ADDR
// if p3 = 26 then
59410: LD_VAR 0 3
59414: PUSH
59415: LD_INT 26
59417: EQUAL
59418: IFFALSE 59428
// sEarthquake := true ;
59420: LD_ADDR_EXP 101
59424: PUSH
59425: LD_INT 1
59427: ST_TO_ADDR
// if p3 = 27 then
59428: LD_VAR 0 3
59432: PUSH
59433: LD_INT 27
59435: EQUAL
59436: IFFALSE 59446
// sAI := true ;
59438: LD_ADDR_EXP 102
59442: PUSH
59443: LD_INT 1
59445: ST_TO_ADDR
// if p3 = 28 then
59446: LD_VAR 0 3
59450: PUSH
59451: LD_INT 28
59453: EQUAL
59454: IFFALSE 59464
// sCargo := true ;
59456: LD_ADDR_EXP 105
59460: PUSH
59461: LD_INT 1
59463: ST_TO_ADDR
// if p3 = 29 then
59464: LD_VAR 0 3
59468: PUSH
59469: LD_INT 29
59471: EQUAL
59472: IFFALSE 59482
// sDLaser := true ;
59474: LD_ADDR_EXP 106
59478: PUSH
59479: LD_INT 1
59481: ST_TO_ADDR
// if p3 = 30 then
59482: LD_VAR 0 3
59486: PUSH
59487: LD_INT 30
59489: EQUAL
59490: IFFALSE 59500
// sExchange := true ;
59492: LD_ADDR_EXP 107
59496: PUSH
59497: LD_INT 1
59499: ST_TO_ADDR
// if p3 = 31 then
59500: LD_VAR 0 3
59504: PUSH
59505: LD_INT 31
59507: EQUAL
59508: IFFALSE 59518
// sFac := true ;
59510: LD_ADDR_EXP 108
59514: PUSH
59515: LD_INT 1
59517: ST_TO_ADDR
// if p3 = 32 then
59518: LD_VAR 0 3
59522: PUSH
59523: LD_INT 32
59525: EQUAL
59526: IFFALSE 59536
// sPower := true ;
59528: LD_ADDR_EXP 109
59532: PUSH
59533: LD_INT 1
59535: ST_TO_ADDR
// if p3 = 33 then
59536: LD_VAR 0 3
59540: PUSH
59541: LD_INT 33
59543: EQUAL
59544: IFFALSE 59554
// sRandom := true ;
59546: LD_ADDR_EXP 110
59550: PUSH
59551: LD_INT 1
59553: ST_TO_ADDR
// if p3 = 34 then
59554: LD_VAR 0 3
59558: PUSH
59559: LD_INT 34
59561: EQUAL
59562: IFFALSE 59572
// sShield := true ;
59564: LD_ADDR_EXP 111
59568: PUSH
59569: LD_INT 1
59571: ST_TO_ADDR
// if p3 = 35 then
59572: LD_VAR 0 3
59576: PUSH
59577: LD_INT 35
59579: EQUAL
59580: IFFALSE 59590
// sTime := true ;
59582: LD_ADDR_EXP 112
59586: PUSH
59587: LD_INT 1
59589: ST_TO_ADDR
// if p3 = 36 then
59590: LD_VAR 0 3
59594: PUSH
59595: LD_INT 36
59597: EQUAL
59598: IFFALSE 59608
// sTools := true ;
59600: LD_ADDR_EXP 113
59604: PUSH
59605: LD_INT 1
59607: ST_TO_ADDR
// if p3 = 101 then
59608: LD_VAR 0 3
59612: PUSH
59613: LD_INT 101
59615: EQUAL
59616: IFFALSE 59626
// sSold := true ;
59618: LD_ADDR_EXP 78
59622: PUSH
59623: LD_INT 1
59625: ST_TO_ADDR
// if p3 = 102 then
59626: LD_VAR 0 3
59630: PUSH
59631: LD_INT 102
59633: EQUAL
59634: IFFALSE 59644
// sDiff := true ;
59636: LD_ADDR_EXP 79
59640: PUSH
59641: LD_INT 1
59643: ST_TO_ADDR
// if p3 = 103 then
59644: LD_VAR 0 3
59648: PUSH
59649: LD_INT 103
59651: EQUAL
59652: IFFALSE 59662
// sFog := true ;
59654: LD_ADDR_EXP 82
59658: PUSH
59659: LD_INT 1
59661: ST_TO_ADDR
// if p3 = 104 then
59662: LD_VAR 0 3
59666: PUSH
59667: LD_INT 104
59669: EQUAL
59670: IFFALSE 59680
// sReset := true ;
59672: LD_ADDR_EXP 83
59676: PUSH
59677: LD_INT 1
59679: ST_TO_ADDR
// if p3 = 105 then
59680: LD_VAR 0 3
59684: PUSH
59685: LD_INT 105
59687: EQUAL
59688: IFFALSE 59698
// sSun := true ;
59690: LD_ADDR_EXP 84
59694: PUSH
59695: LD_INT 1
59697: ST_TO_ADDR
// if p3 = 106 then
59698: LD_VAR 0 3
59702: PUSH
59703: LD_INT 106
59705: EQUAL
59706: IFFALSE 59716
// sTiger := true ;
59708: LD_ADDR_EXP 80
59712: PUSH
59713: LD_INT 1
59715: ST_TO_ADDR
// if p3 = 107 then
59716: LD_VAR 0 3
59720: PUSH
59721: LD_INT 107
59723: EQUAL
59724: IFFALSE 59734
// sBomb := true ;
59726: LD_ADDR_EXP 81
59730: PUSH
59731: LD_INT 1
59733: ST_TO_ADDR
// if p3 = 108 then
59734: LD_VAR 0 3
59738: PUSH
59739: LD_INT 108
59741: EQUAL
59742: IFFALSE 59752
// sWound := true ;
59744: LD_ADDR_EXP 89
59748: PUSH
59749: LD_INT 1
59751: ST_TO_ADDR
// if p3 = 109 then
59752: LD_VAR 0 3
59756: PUSH
59757: LD_INT 109
59759: EQUAL
59760: IFFALSE 59770
// sBetray := true ;
59762: LD_ADDR_EXP 93
59766: PUSH
59767: LD_INT 1
59769: ST_TO_ADDR
// if p3 = 110 then
59770: LD_VAR 0 3
59774: PUSH
59775: LD_INT 110
59777: EQUAL
59778: IFFALSE 59788
// sContamin := true ;
59780: LD_ADDR_EXP 94
59784: PUSH
59785: LD_INT 1
59787: ST_TO_ADDR
// if p3 = 111 then
59788: LD_VAR 0 3
59792: PUSH
59793: LD_INT 111
59795: EQUAL
59796: IFFALSE 59806
// sOil := true ;
59798: LD_ADDR_EXP 96
59802: PUSH
59803: LD_INT 1
59805: ST_TO_ADDR
// if p3 = 112 then
59806: LD_VAR 0 3
59810: PUSH
59811: LD_INT 112
59813: EQUAL
59814: IFFALSE 59824
// sStu := true ;
59816: LD_ADDR_EXP 100
59820: PUSH
59821: LD_INT 1
59823: ST_TO_ADDR
// if p3 = 113 then
59824: LD_VAR 0 3
59828: PUSH
59829: LD_INT 113
59831: EQUAL
59832: IFFALSE 59842
// sBazooka := true ;
59834: LD_ADDR_EXP 103
59838: PUSH
59839: LD_INT 1
59841: ST_TO_ADDR
// if p3 = 114 then
59842: LD_VAR 0 3
59846: PUSH
59847: LD_INT 114
59849: EQUAL
59850: IFFALSE 59860
// sMortar := true ;
59852: LD_ADDR_EXP 104
59856: PUSH
59857: LD_INT 1
59859: ST_TO_ADDR
// if p3 = 115 then
59860: LD_VAR 0 3
59864: PUSH
59865: LD_INT 115
59867: EQUAL
59868: IFFALSE 59878
// sRanger := true ;
59870: LD_ADDR_EXP 114
59874: PUSH
59875: LD_INT 1
59877: ST_TO_ADDR
// if p3 = 116 then
59878: LD_VAR 0 3
59882: PUSH
59883: LD_INT 116
59885: EQUAL
59886: IFFALSE 59896
// sComputer := true ;
59888: LD_ADDR_EXP 115
59892: PUSH
59893: LD_INT 1
59895: ST_TO_ADDR
// if p3 = 117 then
59896: LD_VAR 0 3
59900: PUSH
59901: LD_INT 117
59903: EQUAL
59904: IFFALSE 59914
// s30 := true ;
59906: LD_ADDR_EXP 116
59910: PUSH
59911: LD_INT 1
59913: ST_TO_ADDR
// if p3 = 118 then
59914: LD_VAR 0 3
59918: PUSH
59919: LD_INT 118
59921: EQUAL
59922: IFFALSE 59932
// s60 := true ;
59924: LD_ADDR_EXP 117
59928: PUSH
59929: LD_INT 1
59931: ST_TO_ADDR
// end ; if p2 = hack_mode then
59932: LD_VAR 0 2
59936: PUSH
59937: LD_INT 101
59939: EQUAL
59940: IFFALSE 60068
// begin case p3 of 1 :
59942: LD_VAR 0 3
59946: PUSH
59947: LD_INT 1
59949: DOUBLE
59950: EQUAL
59951: IFTRUE 59955
59953: GO 59962
59955: POP
// hHackUnlimitedResources ; 2 :
59956: CALL 72215 0 0
59960: GO 60068
59962: LD_INT 2
59964: DOUBLE
59965: EQUAL
59966: IFTRUE 59970
59968: GO 59977
59970: POP
// hHackSetLevel10 ; 3 :
59971: CALL 72348 0 0
59975: GO 60068
59977: LD_INT 3
59979: DOUBLE
59980: EQUAL
59981: IFTRUE 59985
59983: GO 59992
59985: POP
// hHackSetLevel10YourUnits ; 4 :
59986: CALL 72433 0 0
59990: GO 60068
59992: LD_INT 4
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60000
59998: GO 60007
60000: POP
// hHackInvincible ; 5 :
60001: CALL 72881 0 0
60005: GO 60068
60007: LD_INT 5
60009: DOUBLE
60010: EQUAL
60011: IFTRUE 60015
60013: GO 60022
60015: POP
// hHackInvisible ; 6 :
60016: CALL 72992 0 0
60020: GO 60068
60022: LD_INT 6
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60030
60028: GO 60037
60030: POP
// hHackChangeYourSide ; 7 :
60031: CALL 73049 0 0
60035: GO 60068
60037: LD_INT 7
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60045
60043: GO 60052
60045: POP
// hHackChangeUnitSide ; 8 :
60046: CALL 73091 0 0
60050: GO 60068
60052: LD_INT 8
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60060
60058: GO 60067
60060: POP
// hHackFog ; end ;
60061: CALL 73192 0 0
60065: GO 60068
60067: POP
// end ; if p2 = game_save_mode then
60068: LD_VAR 0 2
60072: PUSH
60073: LD_INT 102
60075: EQUAL
60076: IFFALSE 60131
// begin if p3 = 1 then
60078: LD_VAR 0 3
60082: PUSH
60083: LD_INT 1
60085: EQUAL
60086: IFFALSE 60098
// globalGameSaveCounter := p4 ;
60088: LD_ADDR_EXP 60
60092: PUSH
60093: LD_VAR 0 4
60097: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60098: LD_VAR 0 3
60102: PUSH
60103: LD_INT 2
60105: EQUAL
60106: PUSH
60107: LD_EXP 60
60111: AND
60112: IFFALSE 60131
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60114: LD_STRING setGameSaveCounter(
60116: PUSH
60117: LD_EXP 60
60121: STR
60122: PUSH
60123: LD_STRING )
60125: STR
60126: PPUSH
60127: CALL_OW 559
// end ; end ;
60131: LD_VAR 0 7
60135: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60136: LD_INT 0
60138: PPUSH
// streamModeActive := false ;
60139: LD_ADDR_EXP 61
60143: PUSH
60144: LD_INT 0
60146: ST_TO_ADDR
// normalCounter := 36 ;
60147: LD_ADDR_EXP 62
60151: PUSH
60152: LD_INT 36
60154: ST_TO_ADDR
// hardcoreCounter := 18 ;
60155: LD_ADDR_EXP 63
60159: PUSH
60160: LD_INT 18
60162: ST_TO_ADDR
// sRocket := false ;
60163: LD_ADDR_EXP 66
60167: PUSH
60168: LD_INT 0
60170: ST_TO_ADDR
// sSpeed := false ;
60171: LD_ADDR_EXP 65
60175: PUSH
60176: LD_INT 0
60178: ST_TO_ADDR
// sEngine := false ;
60179: LD_ADDR_EXP 67
60183: PUSH
60184: LD_INT 0
60186: ST_TO_ADDR
// sSpec := false ;
60187: LD_ADDR_EXP 64
60191: PUSH
60192: LD_INT 0
60194: ST_TO_ADDR
// sLevel := false ;
60195: LD_ADDR_EXP 68
60199: PUSH
60200: LD_INT 0
60202: ST_TO_ADDR
// sArmoury := false ;
60203: LD_ADDR_EXP 69
60207: PUSH
60208: LD_INT 0
60210: ST_TO_ADDR
// sRadar := false ;
60211: LD_ADDR_EXP 70
60215: PUSH
60216: LD_INT 0
60218: ST_TO_ADDR
// sBunker := false ;
60219: LD_ADDR_EXP 71
60223: PUSH
60224: LD_INT 0
60226: ST_TO_ADDR
// sHack := false ;
60227: LD_ADDR_EXP 72
60231: PUSH
60232: LD_INT 0
60234: ST_TO_ADDR
// sFire := false ;
60235: LD_ADDR_EXP 73
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// sRefresh := false ;
60243: LD_ADDR_EXP 74
60247: PUSH
60248: LD_INT 0
60250: ST_TO_ADDR
// sExp := false ;
60251: LD_ADDR_EXP 75
60255: PUSH
60256: LD_INT 0
60258: ST_TO_ADDR
// sDepot := false ;
60259: LD_ADDR_EXP 76
60263: PUSH
60264: LD_INT 0
60266: ST_TO_ADDR
// sFlag := false ;
60267: LD_ADDR_EXP 77
60271: PUSH
60272: LD_INT 0
60274: ST_TO_ADDR
// sKamikadze := false ;
60275: LD_ADDR_EXP 85
60279: PUSH
60280: LD_INT 0
60282: ST_TO_ADDR
// sTroll := false ;
60283: LD_ADDR_EXP 86
60287: PUSH
60288: LD_INT 0
60290: ST_TO_ADDR
// sSlow := false ;
60291: LD_ADDR_EXP 87
60295: PUSH
60296: LD_INT 0
60298: ST_TO_ADDR
// sLack := false ;
60299: LD_ADDR_EXP 88
60303: PUSH
60304: LD_INT 0
60306: ST_TO_ADDR
// sTank := false ;
60307: LD_ADDR_EXP 90
60311: PUSH
60312: LD_INT 0
60314: ST_TO_ADDR
// sRemote := false ;
60315: LD_ADDR_EXP 91
60319: PUSH
60320: LD_INT 0
60322: ST_TO_ADDR
// sPowell := false ;
60323: LD_ADDR_EXP 92
60327: PUSH
60328: LD_INT 0
60330: ST_TO_ADDR
// sTeleport := false ;
60331: LD_ADDR_EXP 95
60335: PUSH
60336: LD_INT 0
60338: ST_TO_ADDR
// sOilTower := false ;
60339: LD_ADDR_EXP 97
60343: PUSH
60344: LD_INT 0
60346: ST_TO_ADDR
// sShovel := false ;
60347: LD_ADDR_EXP 98
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// sSheik := false ;
60355: LD_ADDR_EXP 99
60359: PUSH
60360: LD_INT 0
60362: ST_TO_ADDR
// sEarthquake := false ;
60363: LD_ADDR_EXP 101
60367: PUSH
60368: LD_INT 0
60370: ST_TO_ADDR
// sAI := false ;
60371: LD_ADDR_EXP 102
60375: PUSH
60376: LD_INT 0
60378: ST_TO_ADDR
// sCargo := false ;
60379: LD_ADDR_EXP 105
60383: PUSH
60384: LD_INT 0
60386: ST_TO_ADDR
// sDLaser := false ;
60387: LD_ADDR_EXP 106
60391: PUSH
60392: LD_INT 0
60394: ST_TO_ADDR
// sExchange := false ;
60395: LD_ADDR_EXP 107
60399: PUSH
60400: LD_INT 0
60402: ST_TO_ADDR
// sFac := false ;
60403: LD_ADDR_EXP 108
60407: PUSH
60408: LD_INT 0
60410: ST_TO_ADDR
// sPower := false ;
60411: LD_ADDR_EXP 109
60415: PUSH
60416: LD_INT 0
60418: ST_TO_ADDR
// sRandom := false ;
60419: LD_ADDR_EXP 110
60423: PUSH
60424: LD_INT 0
60426: ST_TO_ADDR
// sShield := false ;
60427: LD_ADDR_EXP 111
60431: PUSH
60432: LD_INT 0
60434: ST_TO_ADDR
// sTime := false ;
60435: LD_ADDR_EXP 112
60439: PUSH
60440: LD_INT 0
60442: ST_TO_ADDR
// sTools := false ;
60443: LD_ADDR_EXP 113
60447: PUSH
60448: LD_INT 0
60450: ST_TO_ADDR
// sSold := false ;
60451: LD_ADDR_EXP 78
60455: PUSH
60456: LD_INT 0
60458: ST_TO_ADDR
// sDiff := false ;
60459: LD_ADDR_EXP 79
60463: PUSH
60464: LD_INT 0
60466: ST_TO_ADDR
// sFog := false ;
60467: LD_ADDR_EXP 82
60471: PUSH
60472: LD_INT 0
60474: ST_TO_ADDR
// sReset := false ;
60475: LD_ADDR_EXP 83
60479: PUSH
60480: LD_INT 0
60482: ST_TO_ADDR
// sSun := false ;
60483: LD_ADDR_EXP 84
60487: PUSH
60488: LD_INT 0
60490: ST_TO_ADDR
// sTiger := false ;
60491: LD_ADDR_EXP 80
60495: PUSH
60496: LD_INT 0
60498: ST_TO_ADDR
// sBomb := false ;
60499: LD_ADDR_EXP 81
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// sWound := false ;
60507: LD_ADDR_EXP 89
60511: PUSH
60512: LD_INT 0
60514: ST_TO_ADDR
// sBetray := false ;
60515: LD_ADDR_EXP 93
60519: PUSH
60520: LD_INT 0
60522: ST_TO_ADDR
// sContamin := false ;
60523: LD_ADDR_EXP 94
60527: PUSH
60528: LD_INT 0
60530: ST_TO_ADDR
// sOil := false ;
60531: LD_ADDR_EXP 96
60535: PUSH
60536: LD_INT 0
60538: ST_TO_ADDR
// sStu := false ;
60539: LD_ADDR_EXP 100
60543: PUSH
60544: LD_INT 0
60546: ST_TO_ADDR
// sBazooka := false ;
60547: LD_ADDR_EXP 103
60551: PUSH
60552: LD_INT 0
60554: ST_TO_ADDR
// sMortar := false ;
60555: LD_ADDR_EXP 104
60559: PUSH
60560: LD_INT 0
60562: ST_TO_ADDR
// sRanger := false ;
60563: LD_ADDR_EXP 114
60567: PUSH
60568: LD_INT 0
60570: ST_TO_ADDR
// sComputer := false ;
60571: LD_ADDR_EXP 115
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// s30 := false ;
60579: LD_ADDR_EXP 116
60583: PUSH
60584: LD_INT 0
60586: ST_TO_ADDR
// s60 := false ;
60587: LD_ADDR_EXP 117
60591: PUSH
60592: LD_INT 0
60594: ST_TO_ADDR
// end ;
60595: LD_VAR 0 1
60599: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60600: LD_INT 0
60602: PPUSH
60603: PPUSH
60604: PPUSH
60605: PPUSH
60606: PPUSH
60607: PPUSH
60608: PPUSH
// result := [ ] ;
60609: LD_ADDR_VAR 0 2
60613: PUSH
60614: EMPTY
60615: ST_TO_ADDR
// if campaign_id = 1 then
60616: LD_OWVAR 69
60620: PUSH
60621: LD_INT 1
60623: EQUAL
60624: IFFALSE 63790
// begin case mission_number of 1 :
60626: LD_OWVAR 70
60630: PUSH
60631: LD_INT 1
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60639
60637: GO 60715
60639: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60640: LD_ADDR_VAR 0 2
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: LD_INT 11
60653: PUSH
60654: LD_INT 12
60656: PUSH
60657: LD_INT 15
60659: PUSH
60660: LD_INT 16
60662: PUSH
60663: LD_INT 22
60665: PUSH
60666: LD_INT 23
60668: PUSH
60669: LD_INT 26
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 101
60685: PUSH
60686: LD_INT 102
60688: PUSH
60689: LD_INT 106
60691: PUSH
60692: LD_INT 116
60694: PUSH
60695: LD_INT 117
60697: PUSH
60698: LD_INT 118
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: ST_TO_ADDR
60713: GO 63788
60715: LD_INT 2
60717: DOUBLE
60718: EQUAL
60719: IFTRUE 60723
60721: GO 60807
60723: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60724: LD_ADDR_VAR 0 2
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: LD_INT 11
60737: PUSH
60738: LD_INT 12
60740: PUSH
60741: LD_INT 15
60743: PUSH
60744: LD_INT 16
60746: PUSH
60747: LD_INT 22
60749: PUSH
60750: LD_INT 23
60752: PUSH
60753: LD_INT 26
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 101
60769: PUSH
60770: LD_INT 102
60772: PUSH
60773: LD_INT 105
60775: PUSH
60776: LD_INT 106
60778: PUSH
60779: LD_INT 108
60781: PUSH
60782: LD_INT 116
60784: PUSH
60785: LD_INT 117
60787: PUSH
60788: LD_INT 118
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: ST_TO_ADDR
60805: GO 63788
60807: LD_INT 3
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60815
60813: GO 60903
60815: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60816: LD_ADDR_VAR 0 2
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: LD_INT 5
60829: PUSH
60830: LD_INT 11
60832: PUSH
60833: LD_INT 12
60835: PUSH
60836: LD_INT 15
60838: PUSH
60839: LD_INT 16
60841: PUSH
60842: LD_INT 22
60844: PUSH
60845: LD_INT 26
60847: PUSH
60848: LD_INT 36
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 101
60865: PUSH
60866: LD_INT 102
60868: PUSH
60869: LD_INT 105
60871: PUSH
60872: LD_INT 106
60874: PUSH
60875: LD_INT 108
60877: PUSH
60878: LD_INT 116
60880: PUSH
60881: LD_INT 117
60883: PUSH
60884: LD_INT 118
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: ST_TO_ADDR
60901: GO 63788
60903: LD_INT 4
60905: DOUBLE
60906: EQUAL
60907: IFTRUE 60911
60909: GO 61007
60911: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60912: LD_ADDR_VAR 0 2
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: LD_INT 4
60922: PUSH
60923: LD_INT 5
60925: PUSH
60926: LD_INT 8
60928: PUSH
60929: LD_INT 11
60931: PUSH
60932: LD_INT 12
60934: PUSH
60935: LD_INT 15
60937: PUSH
60938: LD_INT 16
60940: PUSH
60941: LD_INT 22
60943: PUSH
60944: LD_INT 23
60946: PUSH
60947: LD_INT 26
60949: PUSH
60950: LD_INT 36
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 101
60969: PUSH
60970: LD_INT 102
60972: PUSH
60973: LD_INT 105
60975: PUSH
60976: LD_INT 106
60978: PUSH
60979: LD_INT 108
60981: PUSH
60982: LD_INT 116
60984: PUSH
60985: LD_INT 117
60987: PUSH
60988: LD_INT 118
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: ST_TO_ADDR
61005: GO 63788
61007: LD_INT 5
61009: DOUBLE
61010: EQUAL
61011: IFTRUE 61015
61013: GO 61127
61015: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61016: LD_ADDR_VAR 0 2
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: LD_INT 5
61029: PUSH
61030: LD_INT 6
61032: PUSH
61033: LD_INT 8
61035: PUSH
61036: LD_INT 11
61038: PUSH
61039: LD_INT 12
61041: PUSH
61042: LD_INT 15
61044: PUSH
61045: LD_INT 16
61047: PUSH
61048: LD_INT 22
61050: PUSH
61051: LD_INT 23
61053: PUSH
61054: LD_INT 25
61056: PUSH
61057: LD_INT 26
61059: PUSH
61060: LD_INT 36
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 101
61081: PUSH
61082: LD_INT 102
61084: PUSH
61085: LD_INT 105
61087: PUSH
61088: LD_INT 106
61090: PUSH
61091: LD_INT 108
61093: PUSH
61094: LD_INT 109
61096: PUSH
61097: LD_INT 112
61099: PUSH
61100: LD_INT 116
61102: PUSH
61103: LD_INT 117
61105: PUSH
61106: LD_INT 118
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: ST_TO_ADDR
61125: GO 63788
61127: LD_INT 6
61129: DOUBLE
61130: EQUAL
61131: IFTRUE 61135
61133: GO 61267
61135: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61136: LD_ADDR_VAR 0 2
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: LD_INT 6
61152: PUSH
61153: LD_INT 8
61155: PUSH
61156: LD_INT 11
61158: PUSH
61159: LD_INT 12
61161: PUSH
61162: LD_INT 15
61164: PUSH
61165: LD_INT 16
61167: PUSH
61168: LD_INT 20
61170: PUSH
61171: LD_INT 21
61173: PUSH
61174: LD_INT 22
61176: PUSH
61177: LD_INT 23
61179: PUSH
61180: LD_INT 25
61182: PUSH
61183: LD_INT 26
61185: PUSH
61186: LD_INT 30
61188: PUSH
61189: LD_INT 31
61191: PUSH
61192: LD_INT 32
61194: PUSH
61195: LD_INT 36
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 101
61221: PUSH
61222: LD_INT 102
61224: PUSH
61225: LD_INT 105
61227: PUSH
61228: LD_INT 106
61230: PUSH
61231: LD_INT 108
61233: PUSH
61234: LD_INT 109
61236: PUSH
61237: LD_INT 112
61239: PUSH
61240: LD_INT 116
61242: PUSH
61243: LD_INT 117
61245: PUSH
61246: LD_INT 118
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: ST_TO_ADDR
61265: GO 63788
61267: LD_INT 7
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61387
61275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61276: LD_ADDR_VAR 0 2
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: LD_INT 7
61292: PUSH
61293: LD_INT 11
61295: PUSH
61296: LD_INT 12
61298: PUSH
61299: LD_INT 15
61301: PUSH
61302: LD_INT 16
61304: PUSH
61305: LD_INT 20
61307: PUSH
61308: LD_INT 21
61310: PUSH
61311: LD_INT 22
61313: PUSH
61314: LD_INT 23
61316: PUSH
61317: LD_INT 25
61319: PUSH
61320: LD_INT 26
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 101
61341: PUSH
61342: LD_INT 102
61344: PUSH
61345: LD_INT 103
61347: PUSH
61348: LD_INT 105
61350: PUSH
61351: LD_INT 106
61353: PUSH
61354: LD_INT 108
61356: PUSH
61357: LD_INT 112
61359: PUSH
61360: LD_INT 116
61362: PUSH
61363: LD_INT 117
61365: PUSH
61366: LD_INT 118
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: ST_TO_ADDR
61385: GO 63788
61387: LD_INT 8
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61395
61393: GO 61535
61395: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61396: LD_ADDR_VAR 0 2
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 4
61406: PUSH
61407: LD_INT 5
61409: PUSH
61410: LD_INT 6
61412: PUSH
61413: LD_INT 7
61415: PUSH
61416: LD_INT 8
61418: PUSH
61419: LD_INT 11
61421: PUSH
61422: LD_INT 12
61424: PUSH
61425: LD_INT 15
61427: PUSH
61428: LD_INT 16
61430: PUSH
61431: LD_INT 20
61433: PUSH
61434: LD_INT 21
61436: PUSH
61437: LD_INT 22
61439: PUSH
61440: LD_INT 23
61442: PUSH
61443: LD_INT 25
61445: PUSH
61446: LD_INT 26
61448: PUSH
61449: LD_INT 30
61451: PUSH
61452: LD_INT 31
61454: PUSH
61455: LD_INT 32
61457: PUSH
61458: LD_INT 36
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 101
61485: PUSH
61486: LD_INT 102
61488: PUSH
61489: LD_INT 103
61491: PUSH
61492: LD_INT 105
61494: PUSH
61495: LD_INT 106
61497: PUSH
61498: LD_INT 108
61500: PUSH
61501: LD_INT 109
61503: PUSH
61504: LD_INT 112
61506: PUSH
61507: LD_INT 116
61509: PUSH
61510: LD_INT 117
61512: PUSH
61513: LD_INT 118
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: ST_TO_ADDR
61533: GO 63788
61535: LD_INT 9
61537: DOUBLE
61538: EQUAL
61539: IFTRUE 61543
61541: GO 61691
61543: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61544: LD_ADDR_VAR 0 2
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: LD_INT 5
61557: PUSH
61558: LD_INT 6
61560: PUSH
61561: LD_INT 7
61563: PUSH
61564: LD_INT 8
61566: PUSH
61567: LD_INT 11
61569: PUSH
61570: LD_INT 12
61572: PUSH
61573: LD_INT 15
61575: PUSH
61576: LD_INT 16
61578: PUSH
61579: LD_INT 20
61581: PUSH
61582: LD_INT 21
61584: PUSH
61585: LD_INT 22
61587: PUSH
61588: LD_INT 23
61590: PUSH
61591: LD_INT 25
61593: PUSH
61594: LD_INT 26
61596: PUSH
61597: LD_INT 28
61599: PUSH
61600: LD_INT 30
61602: PUSH
61603: LD_INT 31
61605: PUSH
61606: LD_INT 32
61608: PUSH
61609: LD_INT 36
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 101
61637: PUSH
61638: LD_INT 102
61640: PUSH
61641: LD_INT 103
61643: PUSH
61644: LD_INT 105
61646: PUSH
61647: LD_INT 106
61649: PUSH
61650: LD_INT 108
61652: PUSH
61653: LD_INT 109
61655: PUSH
61656: LD_INT 112
61658: PUSH
61659: LD_INT 114
61661: PUSH
61662: LD_INT 116
61664: PUSH
61665: LD_INT 117
61667: PUSH
61668: LD_INT 118
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: ST_TO_ADDR
61689: GO 63788
61691: LD_INT 10
61693: DOUBLE
61694: EQUAL
61695: IFTRUE 61699
61697: GO 61895
61699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61700: LD_ADDR_VAR 0 2
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: LD_INT 6
61716: PUSH
61717: LD_INT 7
61719: PUSH
61720: LD_INT 8
61722: PUSH
61723: LD_INT 9
61725: PUSH
61726: LD_INT 10
61728: PUSH
61729: LD_INT 11
61731: PUSH
61732: LD_INT 12
61734: PUSH
61735: LD_INT 13
61737: PUSH
61738: LD_INT 14
61740: PUSH
61741: LD_INT 15
61743: PUSH
61744: LD_INT 16
61746: PUSH
61747: LD_INT 17
61749: PUSH
61750: LD_INT 18
61752: PUSH
61753: LD_INT 19
61755: PUSH
61756: LD_INT 20
61758: PUSH
61759: LD_INT 21
61761: PUSH
61762: LD_INT 22
61764: PUSH
61765: LD_INT 23
61767: PUSH
61768: LD_INT 24
61770: PUSH
61771: LD_INT 25
61773: PUSH
61774: LD_INT 26
61776: PUSH
61777: LD_INT 28
61779: PUSH
61780: LD_INT 30
61782: PUSH
61783: LD_INT 31
61785: PUSH
61786: LD_INT 32
61788: PUSH
61789: LD_INT 36
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 101
61825: PUSH
61826: LD_INT 102
61828: PUSH
61829: LD_INT 103
61831: PUSH
61832: LD_INT 104
61834: PUSH
61835: LD_INT 105
61837: PUSH
61838: LD_INT 106
61840: PUSH
61841: LD_INT 107
61843: PUSH
61844: LD_INT 108
61846: PUSH
61847: LD_INT 109
61849: PUSH
61850: LD_INT 110
61852: PUSH
61853: LD_INT 111
61855: PUSH
61856: LD_INT 112
61858: PUSH
61859: LD_INT 114
61861: PUSH
61862: LD_INT 116
61864: PUSH
61865: LD_INT 117
61867: PUSH
61868: LD_INT 118
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: ST_TO_ADDR
61893: GO 63788
61895: LD_INT 11
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61903
61901: GO 62107
61903: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: LD_INT 5
61920: PUSH
61921: LD_INT 6
61923: PUSH
61924: LD_INT 7
61926: PUSH
61927: LD_INT 8
61929: PUSH
61930: LD_INT 9
61932: PUSH
61933: LD_INT 10
61935: PUSH
61936: LD_INT 11
61938: PUSH
61939: LD_INT 12
61941: PUSH
61942: LD_INT 13
61944: PUSH
61945: LD_INT 14
61947: PUSH
61948: LD_INT 15
61950: PUSH
61951: LD_INT 16
61953: PUSH
61954: LD_INT 17
61956: PUSH
61957: LD_INT 18
61959: PUSH
61960: LD_INT 19
61962: PUSH
61963: LD_INT 20
61965: PUSH
61966: LD_INT 21
61968: PUSH
61969: LD_INT 22
61971: PUSH
61972: LD_INT 23
61974: PUSH
61975: LD_INT 24
61977: PUSH
61978: LD_INT 25
61980: PUSH
61981: LD_INT 26
61983: PUSH
61984: LD_INT 28
61986: PUSH
61987: LD_INT 30
61989: PUSH
61990: LD_INT 31
61992: PUSH
61993: LD_INT 32
61995: PUSH
61996: LD_INT 34
61998: PUSH
61999: LD_INT 36
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 101
62037: PUSH
62038: LD_INT 102
62040: PUSH
62041: LD_INT 103
62043: PUSH
62044: LD_INT 104
62046: PUSH
62047: LD_INT 105
62049: PUSH
62050: LD_INT 106
62052: PUSH
62053: LD_INT 107
62055: PUSH
62056: LD_INT 108
62058: PUSH
62059: LD_INT 109
62061: PUSH
62062: LD_INT 110
62064: PUSH
62065: LD_INT 111
62067: PUSH
62068: LD_INT 112
62070: PUSH
62071: LD_INT 114
62073: PUSH
62074: LD_INT 116
62076: PUSH
62077: LD_INT 117
62079: PUSH
62080: LD_INT 118
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: ST_TO_ADDR
62105: GO 63788
62107: LD_INT 12
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62115
62113: GO 62335
62115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62116: LD_ADDR_VAR 0 2
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: LD_INT 5
62135: PUSH
62136: LD_INT 6
62138: PUSH
62139: LD_INT 7
62141: PUSH
62142: LD_INT 8
62144: PUSH
62145: LD_INT 9
62147: PUSH
62148: LD_INT 10
62150: PUSH
62151: LD_INT 11
62153: PUSH
62154: LD_INT 12
62156: PUSH
62157: LD_INT 13
62159: PUSH
62160: LD_INT 14
62162: PUSH
62163: LD_INT 15
62165: PUSH
62166: LD_INT 16
62168: PUSH
62169: LD_INT 17
62171: PUSH
62172: LD_INT 18
62174: PUSH
62175: LD_INT 19
62177: PUSH
62178: LD_INT 20
62180: PUSH
62181: LD_INT 21
62183: PUSH
62184: LD_INT 22
62186: PUSH
62187: LD_INT 23
62189: PUSH
62190: LD_INT 24
62192: PUSH
62193: LD_INT 25
62195: PUSH
62196: LD_INT 26
62198: PUSH
62199: LD_INT 27
62201: PUSH
62202: LD_INT 28
62204: PUSH
62205: LD_INT 30
62207: PUSH
62208: LD_INT 31
62210: PUSH
62211: LD_INT 32
62213: PUSH
62214: LD_INT 33
62216: PUSH
62217: LD_INT 34
62219: PUSH
62220: LD_INT 36
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 101
62261: PUSH
62262: LD_INT 102
62264: PUSH
62265: LD_INT 103
62267: PUSH
62268: LD_INT 104
62270: PUSH
62271: LD_INT 105
62273: PUSH
62274: LD_INT 106
62276: PUSH
62277: LD_INT 107
62279: PUSH
62280: LD_INT 108
62282: PUSH
62283: LD_INT 109
62285: PUSH
62286: LD_INT 110
62288: PUSH
62289: LD_INT 111
62291: PUSH
62292: LD_INT 112
62294: PUSH
62295: LD_INT 113
62297: PUSH
62298: LD_INT 114
62300: PUSH
62301: LD_INT 116
62303: PUSH
62304: LD_INT 117
62306: PUSH
62307: LD_INT 118
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: ST_TO_ADDR
62333: GO 63788
62335: LD_INT 13
62337: DOUBLE
62338: EQUAL
62339: IFTRUE 62343
62341: GO 62551
62343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62344: LD_ADDR_VAR 0 2
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: LD_INT 5
62363: PUSH
62364: LD_INT 8
62366: PUSH
62367: LD_INT 9
62369: PUSH
62370: LD_INT 10
62372: PUSH
62373: LD_INT 11
62375: PUSH
62376: LD_INT 12
62378: PUSH
62379: LD_INT 14
62381: PUSH
62382: LD_INT 15
62384: PUSH
62385: LD_INT 16
62387: PUSH
62388: LD_INT 17
62390: PUSH
62391: LD_INT 18
62393: PUSH
62394: LD_INT 19
62396: PUSH
62397: LD_INT 20
62399: PUSH
62400: LD_INT 21
62402: PUSH
62403: LD_INT 22
62405: PUSH
62406: LD_INT 23
62408: PUSH
62409: LD_INT 24
62411: PUSH
62412: LD_INT 25
62414: PUSH
62415: LD_INT 26
62417: PUSH
62418: LD_INT 27
62420: PUSH
62421: LD_INT 28
62423: PUSH
62424: LD_INT 30
62426: PUSH
62427: LD_INT 31
62429: PUSH
62430: LD_INT 32
62432: PUSH
62433: LD_INT 33
62435: PUSH
62436: LD_INT 34
62438: PUSH
62439: LD_INT 36
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 101
62477: PUSH
62478: LD_INT 102
62480: PUSH
62481: LD_INT 103
62483: PUSH
62484: LD_INT 104
62486: PUSH
62487: LD_INT 105
62489: PUSH
62490: LD_INT 106
62492: PUSH
62493: LD_INT 107
62495: PUSH
62496: LD_INT 108
62498: PUSH
62499: LD_INT 109
62501: PUSH
62502: LD_INT 110
62504: PUSH
62505: LD_INT 111
62507: PUSH
62508: LD_INT 112
62510: PUSH
62511: LD_INT 113
62513: PUSH
62514: LD_INT 114
62516: PUSH
62517: LD_INT 116
62519: PUSH
62520: LD_INT 117
62522: PUSH
62523: LD_INT 118
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: ST_TO_ADDR
62549: GO 63788
62551: LD_INT 14
62553: DOUBLE
62554: EQUAL
62555: IFTRUE 62559
62557: GO 62783
62559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62560: LD_ADDR_VAR 0 2
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 6
62582: PUSH
62583: LD_INT 7
62585: PUSH
62586: LD_INT 8
62588: PUSH
62589: LD_INT 9
62591: PUSH
62592: LD_INT 10
62594: PUSH
62595: LD_INT 11
62597: PUSH
62598: LD_INT 12
62600: PUSH
62601: LD_INT 13
62603: PUSH
62604: LD_INT 14
62606: PUSH
62607: LD_INT 15
62609: PUSH
62610: LD_INT 16
62612: PUSH
62613: LD_INT 17
62615: PUSH
62616: LD_INT 18
62618: PUSH
62619: LD_INT 19
62621: PUSH
62622: LD_INT 20
62624: PUSH
62625: LD_INT 21
62627: PUSH
62628: LD_INT 22
62630: PUSH
62631: LD_INT 23
62633: PUSH
62634: LD_INT 24
62636: PUSH
62637: LD_INT 25
62639: PUSH
62640: LD_INT 26
62642: PUSH
62643: LD_INT 27
62645: PUSH
62646: LD_INT 28
62648: PUSH
62649: LD_INT 29
62651: PUSH
62652: LD_INT 30
62654: PUSH
62655: LD_INT 31
62657: PUSH
62658: LD_INT 32
62660: PUSH
62661: LD_INT 33
62663: PUSH
62664: LD_INT 34
62666: PUSH
62667: LD_INT 36
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 101
62709: PUSH
62710: LD_INT 102
62712: PUSH
62713: LD_INT 103
62715: PUSH
62716: LD_INT 104
62718: PUSH
62719: LD_INT 105
62721: PUSH
62722: LD_INT 106
62724: PUSH
62725: LD_INT 107
62727: PUSH
62728: LD_INT 108
62730: PUSH
62731: LD_INT 109
62733: PUSH
62734: LD_INT 110
62736: PUSH
62737: LD_INT 111
62739: PUSH
62740: LD_INT 112
62742: PUSH
62743: LD_INT 113
62745: PUSH
62746: LD_INT 114
62748: PUSH
62749: LD_INT 116
62751: PUSH
62752: LD_INT 117
62754: PUSH
62755: LD_INT 118
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: ST_TO_ADDR
62781: GO 63788
62783: LD_INT 15
62785: DOUBLE
62786: EQUAL
62787: IFTRUE 62791
62789: GO 63015
62791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62792: LD_ADDR_VAR 0 2
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: LD_INT 5
62811: PUSH
62812: LD_INT 6
62814: PUSH
62815: LD_INT 7
62817: PUSH
62818: LD_INT 8
62820: PUSH
62821: LD_INT 9
62823: PUSH
62824: LD_INT 10
62826: PUSH
62827: LD_INT 11
62829: PUSH
62830: LD_INT 12
62832: PUSH
62833: LD_INT 13
62835: PUSH
62836: LD_INT 14
62838: PUSH
62839: LD_INT 15
62841: PUSH
62842: LD_INT 16
62844: PUSH
62845: LD_INT 17
62847: PUSH
62848: LD_INT 18
62850: PUSH
62851: LD_INT 19
62853: PUSH
62854: LD_INT 20
62856: PUSH
62857: LD_INT 21
62859: PUSH
62860: LD_INT 22
62862: PUSH
62863: LD_INT 23
62865: PUSH
62866: LD_INT 24
62868: PUSH
62869: LD_INT 25
62871: PUSH
62872: LD_INT 26
62874: PUSH
62875: LD_INT 27
62877: PUSH
62878: LD_INT 28
62880: PUSH
62881: LD_INT 29
62883: PUSH
62884: LD_INT 30
62886: PUSH
62887: LD_INT 31
62889: PUSH
62890: LD_INT 32
62892: PUSH
62893: LD_INT 33
62895: PUSH
62896: LD_INT 34
62898: PUSH
62899: LD_INT 36
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 101
62941: PUSH
62942: LD_INT 102
62944: PUSH
62945: LD_INT 103
62947: PUSH
62948: LD_INT 104
62950: PUSH
62951: LD_INT 105
62953: PUSH
62954: LD_INT 106
62956: PUSH
62957: LD_INT 107
62959: PUSH
62960: LD_INT 108
62962: PUSH
62963: LD_INT 109
62965: PUSH
62966: LD_INT 110
62968: PUSH
62969: LD_INT 111
62971: PUSH
62972: LD_INT 112
62974: PUSH
62975: LD_INT 113
62977: PUSH
62978: LD_INT 114
62980: PUSH
62981: LD_INT 116
62983: PUSH
62984: LD_INT 117
62986: PUSH
62987: LD_INT 118
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: ST_TO_ADDR
63013: GO 63788
63015: LD_INT 16
63017: DOUBLE
63018: EQUAL
63019: IFTRUE 63023
63021: GO 63159
63023: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63024: LD_ADDR_VAR 0 2
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: LD_INT 5
63037: PUSH
63038: LD_INT 7
63040: PUSH
63041: LD_INT 11
63043: PUSH
63044: LD_INT 12
63046: PUSH
63047: LD_INT 15
63049: PUSH
63050: LD_INT 16
63052: PUSH
63053: LD_INT 20
63055: PUSH
63056: LD_INT 21
63058: PUSH
63059: LD_INT 22
63061: PUSH
63062: LD_INT 23
63064: PUSH
63065: LD_INT 25
63067: PUSH
63068: LD_INT 26
63070: PUSH
63071: LD_INT 30
63073: PUSH
63074: LD_INT 31
63076: PUSH
63077: LD_INT 32
63079: PUSH
63080: LD_INT 33
63082: PUSH
63083: LD_INT 34
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 101
63109: PUSH
63110: LD_INT 102
63112: PUSH
63113: LD_INT 103
63115: PUSH
63116: LD_INT 106
63118: PUSH
63119: LD_INT 108
63121: PUSH
63122: LD_INT 112
63124: PUSH
63125: LD_INT 113
63127: PUSH
63128: LD_INT 114
63130: PUSH
63131: LD_INT 116
63133: PUSH
63134: LD_INT 117
63136: PUSH
63137: LD_INT 118
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: ST_TO_ADDR
63157: GO 63788
63159: LD_INT 17
63161: DOUBLE
63162: EQUAL
63163: IFTRUE 63167
63165: GO 63391
63167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63168: LD_ADDR_VAR 0 2
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: LD_INT 4
63184: PUSH
63185: LD_INT 5
63187: PUSH
63188: LD_INT 6
63190: PUSH
63191: LD_INT 7
63193: PUSH
63194: LD_INT 8
63196: PUSH
63197: LD_INT 9
63199: PUSH
63200: LD_INT 10
63202: PUSH
63203: LD_INT 11
63205: PUSH
63206: LD_INT 12
63208: PUSH
63209: LD_INT 13
63211: PUSH
63212: LD_INT 14
63214: PUSH
63215: LD_INT 15
63217: PUSH
63218: LD_INT 16
63220: PUSH
63221: LD_INT 17
63223: PUSH
63224: LD_INT 18
63226: PUSH
63227: LD_INT 19
63229: PUSH
63230: LD_INT 20
63232: PUSH
63233: LD_INT 21
63235: PUSH
63236: LD_INT 22
63238: PUSH
63239: LD_INT 23
63241: PUSH
63242: LD_INT 24
63244: PUSH
63245: LD_INT 25
63247: PUSH
63248: LD_INT 26
63250: PUSH
63251: LD_INT 27
63253: PUSH
63254: LD_INT 28
63256: PUSH
63257: LD_INT 29
63259: PUSH
63260: LD_INT 30
63262: PUSH
63263: LD_INT 31
63265: PUSH
63266: LD_INT 32
63268: PUSH
63269: LD_INT 33
63271: PUSH
63272: LD_INT 34
63274: PUSH
63275: LD_INT 36
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 101
63317: PUSH
63318: LD_INT 102
63320: PUSH
63321: LD_INT 103
63323: PUSH
63324: LD_INT 104
63326: PUSH
63327: LD_INT 105
63329: PUSH
63330: LD_INT 106
63332: PUSH
63333: LD_INT 107
63335: PUSH
63336: LD_INT 108
63338: PUSH
63339: LD_INT 109
63341: PUSH
63342: LD_INT 110
63344: PUSH
63345: LD_INT 111
63347: PUSH
63348: LD_INT 112
63350: PUSH
63351: LD_INT 113
63353: PUSH
63354: LD_INT 114
63356: PUSH
63357: LD_INT 116
63359: PUSH
63360: LD_INT 117
63362: PUSH
63363: LD_INT 118
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: ST_TO_ADDR
63389: GO 63788
63391: LD_INT 18
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63399
63397: GO 63547
63399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63400: LD_ADDR_VAR 0 2
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: LD_INT 5
63413: PUSH
63414: LD_INT 7
63416: PUSH
63417: LD_INT 11
63419: PUSH
63420: LD_INT 12
63422: PUSH
63423: LD_INT 15
63425: PUSH
63426: LD_INT 16
63428: PUSH
63429: LD_INT 20
63431: PUSH
63432: LD_INT 21
63434: PUSH
63435: LD_INT 22
63437: PUSH
63438: LD_INT 23
63440: PUSH
63441: LD_INT 25
63443: PUSH
63444: LD_INT 26
63446: PUSH
63447: LD_INT 30
63449: PUSH
63450: LD_INT 31
63452: PUSH
63453: LD_INT 32
63455: PUSH
63456: LD_INT 33
63458: PUSH
63459: LD_INT 34
63461: PUSH
63462: LD_INT 35
63464: PUSH
63465: LD_INT 36
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 101
63493: PUSH
63494: LD_INT 102
63496: PUSH
63497: LD_INT 103
63499: PUSH
63500: LD_INT 106
63502: PUSH
63503: LD_INT 108
63505: PUSH
63506: LD_INT 112
63508: PUSH
63509: LD_INT 113
63511: PUSH
63512: LD_INT 114
63514: PUSH
63515: LD_INT 115
63517: PUSH
63518: LD_INT 116
63520: PUSH
63521: LD_INT 117
63523: PUSH
63524: LD_INT 118
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: ST_TO_ADDR
63545: GO 63788
63547: LD_INT 19
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63555
63553: GO 63787
63555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63556: LD_ADDR_VAR 0 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 4
63572: PUSH
63573: LD_INT 5
63575: PUSH
63576: LD_INT 6
63578: PUSH
63579: LD_INT 7
63581: PUSH
63582: LD_INT 8
63584: PUSH
63585: LD_INT 9
63587: PUSH
63588: LD_INT 10
63590: PUSH
63591: LD_INT 11
63593: PUSH
63594: LD_INT 12
63596: PUSH
63597: LD_INT 13
63599: PUSH
63600: LD_INT 14
63602: PUSH
63603: LD_INT 15
63605: PUSH
63606: LD_INT 16
63608: PUSH
63609: LD_INT 17
63611: PUSH
63612: LD_INT 18
63614: PUSH
63615: LD_INT 19
63617: PUSH
63618: LD_INT 20
63620: PUSH
63621: LD_INT 21
63623: PUSH
63624: LD_INT 22
63626: PUSH
63627: LD_INT 23
63629: PUSH
63630: LD_INT 24
63632: PUSH
63633: LD_INT 25
63635: PUSH
63636: LD_INT 26
63638: PUSH
63639: LD_INT 27
63641: PUSH
63642: LD_INT 28
63644: PUSH
63645: LD_INT 29
63647: PUSH
63648: LD_INT 30
63650: PUSH
63651: LD_INT 31
63653: PUSH
63654: LD_INT 32
63656: PUSH
63657: LD_INT 33
63659: PUSH
63660: LD_INT 34
63662: PUSH
63663: LD_INT 35
63665: PUSH
63666: LD_INT 36
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 101
63709: PUSH
63710: LD_INT 102
63712: PUSH
63713: LD_INT 103
63715: PUSH
63716: LD_INT 104
63718: PUSH
63719: LD_INT 105
63721: PUSH
63722: LD_INT 106
63724: PUSH
63725: LD_INT 107
63727: PUSH
63728: LD_INT 108
63730: PUSH
63731: LD_INT 109
63733: PUSH
63734: LD_INT 110
63736: PUSH
63737: LD_INT 111
63739: PUSH
63740: LD_INT 112
63742: PUSH
63743: LD_INT 113
63745: PUSH
63746: LD_INT 114
63748: PUSH
63749: LD_INT 115
63751: PUSH
63752: LD_INT 116
63754: PUSH
63755: LD_INT 117
63757: PUSH
63758: LD_INT 118
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: ST_TO_ADDR
63785: GO 63788
63787: POP
// end else
63788: GO 64019
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63790: LD_ADDR_VAR 0 2
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 3
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: LD_INT 5
63809: PUSH
63810: LD_INT 6
63812: PUSH
63813: LD_INT 7
63815: PUSH
63816: LD_INT 8
63818: PUSH
63819: LD_INT 9
63821: PUSH
63822: LD_INT 10
63824: PUSH
63825: LD_INT 11
63827: PUSH
63828: LD_INT 12
63830: PUSH
63831: LD_INT 13
63833: PUSH
63834: LD_INT 14
63836: PUSH
63837: LD_INT 15
63839: PUSH
63840: LD_INT 16
63842: PUSH
63843: LD_INT 17
63845: PUSH
63846: LD_INT 18
63848: PUSH
63849: LD_INT 19
63851: PUSH
63852: LD_INT 20
63854: PUSH
63855: LD_INT 21
63857: PUSH
63858: LD_INT 22
63860: PUSH
63861: LD_INT 23
63863: PUSH
63864: LD_INT 24
63866: PUSH
63867: LD_INT 25
63869: PUSH
63870: LD_INT 26
63872: PUSH
63873: LD_INT 27
63875: PUSH
63876: LD_INT 28
63878: PUSH
63879: LD_INT 29
63881: PUSH
63882: LD_INT 30
63884: PUSH
63885: LD_INT 31
63887: PUSH
63888: LD_INT 32
63890: PUSH
63891: LD_INT 33
63893: PUSH
63894: LD_INT 34
63896: PUSH
63897: LD_INT 35
63899: PUSH
63900: LD_INT 36
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 101
63943: PUSH
63944: LD_INT 102
63946: PUSH
63947: LD_INT 103
63949: PUSH
63950: LD_INT 104
63952: PUSH
63953: LD_INT 105
63955: PUSH
63956: LD_INT 106
63958: PUSH
63959: LD_INT 107
63961: PUSH
63962: LD_INT 108
63964: PUSH
63965: LD_INT 109
63967: PUSH
63968: LD_INT 110
63970: PUSH
63971: LD_INT 111
63973: PUSH
63974: LD_INT 112
63976: PUSH
63977: LD_INT 113
63979: PUSH
63980: LD_INT 114
63982: PUSH
63983: LD_INT 115
63985: PUSH
63986: LD_INT 116
63988: PUSH
63989: LD_INT 117
63991: PUSH
63992: LD_INT 118
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// if result then
64019: LD_VAR 0 2
64023: IFFALSE 64809
// begin normal :=  ;
64025: LD_ADDR_VAR 0 5
64029: PUSH
64030: LD_STRING 
64032: ST_TO_ADDR
// hardcore :=  ;
64033: LD_ADDR_VAR 0 6
64037: PUSH
64038: LD_STRING 
64040: ST_TO_ADDR
// active :=  ;
64041: LD_ADDR_VAR 0 7
64045: PUSH
64046: LD_STRING 
64048: ST_TO_ADDR
// for i = 1 to normalCounter do
64049: LD_ADDR_VAR 0 8
64053: PUSH
64054: DOUBLE
64055: LD_INT 1
64057: DEC
64058: ST_TO_ADDR
64059: LD_EXP 62
64063: PUSH
64064: FOR_TO
64065: IFFALSE 64166
// begin tmp := 0 ;
64067: LD_ADDR_VAR 0 3
64071: PUSH
64072: LD_STRING 0
64074: ST_TO_ADDR
// if result [ 1 ] then
64075: LD_VAR 0 2
64079: PUSH
64080: LD_INT 1
64082: ARRAY
64083: IFFALSE 64148
// if result [ 1 ] [ 1 ] = i then
64085: LD_VAR 0 2
64089: PUSH
64090: LD_INT 1
64092: ARRAY
64093: PUSH
64094: LD_INT 1
64096: ARRAY
64097: PUSH
64098: LD_VAR 0 8
64102: EQUAL
64103: IFFALSE 64148
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64105: LD_ADDR_VAR 0 2
64109: PUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: LD_INT 1
64117: PPUSH
64118: LD_VAR 0 2
64122: PUSH
64123: LD_INT 1
64125: ARRAY
64126: PPUSH
64127: LD_INT 1
64129: PPUSH
64130: CALL_OW 3
64134: PPUSH
64135: CALL_OW 1
64139: ST_TO_ADDR
// tmp := 1 ;
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_STRING 1
64147: ST_TO_ADDR
// end ; normal := normal & tmp ;
64148: LD_ADDR_VAR 0 5
64152: PUSH
64153: LD_VAR 0 5
64157: PUSH
64158: LD_VAR 0 3
64162: STR
64163: ST_TO_ADDR
// end ;
64164: GO 64064
64166: POP
64167: POP
// for i = 1 to hardcoreCounter do
64168: LD_ADDR_VAR 0 8
64172: PUSH
64173: DOUBLE
64174: LD_INT 1
64176: DEC
64177: ST_TO_ADDR
64178: LD_EXP 63
64182: PUSH
64183: FOR_TO
64184: IFFALSE 64289
// begin tmp := 0 ;
64186: LD_ADDR_VAR 0 3
64190: PUSH
64191: LD_STRING 0
64193: ST_TO_ADDR
// if result [ 2 ] then
64194: LD_VAR 0 2
64198: PUSH
64199: LD_INT 2
64201: ARRAY
64202: IFFALSE 64271
// if result [ 2 ] [ 1 ] = 100 + i then
64204: LD_VAR 0 2
64208: PUSH
64209: LD_INT 2
64211: ARRAY
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PUSH
64217: LD_INT 100
64219: PUSH
64220: LD_VAR 0 8
64224: PLUS
64225: EQUAL
64226: IFFALSE 64271
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64228: LD_ADDR_VAR 0 2
64232: PUSH
64233: LD_VAR 0 2
64237: PPUSH
64238: LD_INT 2
64240: PPUSH
64241: LD_VAR 0 2
64245: PUSH
64246: LD_INT 2
64248: ARRAY
64249: PPUSH
64250: LD_INT 1
64252: PPUSH
64253: CALL_OW 3
64257: PPUSH
64258: CALL_OW 1
64262: ST_TO_ADDR
// tmp := 1 ;
64263: LD_ADDR_VAR 0 3
64267: PUSH
64268: LD_STRING 1
64270: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64271: LD_ADDR_VAR 0 6
64275: PUSH
64276: LD_VAR 0 6
64280: PUSH
64281: LD_VAR 0 3
64285: STR
64286: ST_TO_ADDR
// end ;
64287: GO 64183
64289: POP
64290: POP
// if isGameLoad then
64291: LD_VAR 0 1
64295: IFFALSE 64770
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64297: LD_ADDR_VAR 0 4
64301: PUSH
64302: LD_EXP 66
64306: PUSH
64307: LD_EXP 65
64311: PUSH
64312: LD_EXP 67
64316: PUSH
64317: LD_EXP 64
64321: PUSH
64322: LD_EXP 68
64326: PUSH
64327: LD_EXP 69
64331: PUSH
64332: LD_EXP 70
64336: PUSH
64337: LD_EXP 71
64341: PUSH
64342: LD_EXP 72
64346: PUSH
64347: LD_EXP 73
64351: PUSH
64352: LD_EXP 74
64356: PUSH
64357: LD_EXP 75
64361: PUSH
64362: LD_EXP 76
64366: PUSH
64367: LD_EXP 77
64371: PUSH
64372: LD_EXP 85
64376: PUSH
64377: LD_EXP 86
64381: PUSH
64382: LD_EXP 87
64386: PUSH
64387: LD_EXP 88
64391: PUSH
64392: LD_EXP 90
64396: PUSH
64397: LD_EXP 91
64401: PUSH
64402: LD_EXP 92
64406: PUSH
64407: LD_EXP 95
64411: PUSH
64412: LD_EXP 97
64416: PUSH
64417: LD_EXP 98
64421: PUSH
64422: LD_EXP 99
64426: PUSH
64427: LD_EXP 101
64431: PUSH
64432: LD_EXP 102
64436: PUSH
64437: LD_EXP 105
64441: PUSH
64442: LD_EXP 106
64446: PUSH
64447: LD_EXP 107
64451: PUSH
64452: LD_EXP 108
64456: PUSH
64457: LD_EXP 109
64461: PUSH
64462: LD_EXP 110
64466: PUSH
64467: LD_EXP 111
64471: PUSH
64472: LD_EXP 112
64476: PUSH
64477: LD_EXP 113
64481: PUSH
64482: LD_EXP 78
64486: PUSH
64487: LD_EXP 79
64491: PUSH
64492: LD_EXP 82
64496: PUSH
64497: LD_EXP 83
64501: PUSH
64502: LD_EXP 84
64506: PUSH
64507: LD_EXP 80
64511: PUSH
64512: LD_EXP 81
64516: PUSH
64517: LD_EXP 89
64521: PUSH
64522: LD_EXP 93
64526: PUSH
64527: LD_EXP 94
64531: PUSH
64532: LD_EXP 96
64536: PUSH
64537: LD_EXP 100
64541: PUSH
64542: LD_EXP 103
64546: PUSH
64547: LD_EXP 104
64551: PUSH
64552: LD_EXP 114
64556: PUSH
64557: LD_EXP 115
64561: PUSH
64562: LD_EXP 116
64566: PUSH
64567: LD_EXP 117
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: ST_TO_ADDR
// tmp :=  ;
64628: LD_ADDR_VAR 0 3
64632: PUSH
64633: LD_STRING 
64635: ST_TO_ADDR
// for i = 1 to normalCounter do
64636: LD_ADDR_VAR 0 8
64640: PUSH
64641: DOUBLE
64642: LD_INT 1
64644: DEC
64645: ST_TO_ADDR
64646: LD_EXP 62
64650: PUSH
64651: FOR_TO
64652: IFFALSE 64688
// begin if flags [ i ] then
64654: LD_VAR 0 4
64658: PUSH
64659: LD_VAR 0 8
64663: ARRAY
64664: IFFALSE 64686
// tmp := tmp & i & ; ;
64666: LD_ADDR_VAR 0 3
64670: PUSH
64671: LD_VAR 0 3
64675: PUSH
64676: LD_VAR 0 8
64680: STR
64681: PUSH
64682: LD_STRING ;
64684: STR
64685: ST_TO_ADDR
// end ;
64686: GO 64651
64688: POP
64689: POP
// for i = 1 to hardcoreCounter do
64690: LD_ADDR_VAR 0 8
64694: PUSH
64695: DOUBLE
64696: LD_INT 1
64698: DEC
64699: ST_TO_ADDR
64700: LD_EXP 63
64704: PUSH
64705: FOR_TO
64706: IFFALSE 64752
// begin if flags [ normalCounter + i ] then
64708: LD_VAR 0 4
64712: PUSH
64713: LD_EXP 62
64717: PUSH
64718: LD_VAR 0 8
64722: PLUS
64723: ARRAY
64724: IFFALSE 64750
// tmp := tmp & ( 100 + i ) & ; ;
64726: LD_ADDR_VAR 0 3
64730: PUSH
64731: LD_VAR 0 3
64735: PUSH
64736: LD_INT 100
64738: PUSH
64739: LD_VAR 0 8
64743: PLUS
64744: STR
64745: PUSH
64746: LD_STRING ;
64748: STR
64749: ST_TO_ADDR
// end ;
64750: GO 64705
64752: POP
64753: POP
// if tmp then
64754: LD_VAR 0 3
64758: IFFALSE 64770
// active := tmp ;
64760: LD_ADDR_VAR 0 7
64764: PUSH
64765: LD_VAR 0 3
64769: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64770: LD_STRING getStreamItemsFromMission("
64772: PUSH
64773: LD_VAR 0 5
64777: STR
64778: PUSH
64779: LD_STRING ","
64781: STR
64782: PUSH
64783: LD_VAR 0 6
64787: STR
64788: PUSH
64789: LD_STRING ","
64791: STR
64792: PUSH
64793: LD_VAR 0 7
64797: STR
64798: PUSH
64799: LD_STRING ")
64801: STR
64802: PPUSH
64803: CALL_OW 559
// end else
64807: GO 64816
// ToLua ( getStreamItemsFromMission("","","") ) ;
64809: LD_STRING getStreamItemsFromMission("","","")
64811: PPUSH
64812: CALL_OW 559
// end ;
64816: LD_VAR 0 2
64820: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64821: LD_EXP 61
64825: PUSH
64826: LD_EXP 66
64830: AND
64831: IFFALSE 64955
64833: GO 64835
64835: DISABLE
64836: LD_INT 0
64838: PPUSH
64839: PPUSH
// begin enable ;
64840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64841: LD_ADDR_VAR 0 2
64845: PUSH
64846: LD_INT 22
64848: PUSH
64849: LD_OWVAR 2
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 34
64863: PUSH
64864: LD_INT 7
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 34
64873: PUSH
64874: LD_INT 45
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 34
64883: PUSH
64884: LD_INT 28
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 34
64893: PUSH
64894: LD_INT 47
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PPUSH
64912: CALL_OW 69
64916: ST_TO_ADDR
// if not tmp then
64917: LD_VAR 0 2
64921: NOT
64922: IFFALSE 64926
// exit ;
64924: GO 64955
// for i in tmp do
64926: LD_ADDR_VAR 0 1
64930: PUSH
64931: LD_VAR 0 2
64935: PUSH
64936: FOR_IN
64937: IFFALSE 64953
// begin SetLives ( i , 0 ) ;
64939: LD_VAR 0 1
64943: PPUSH
64944: LD_INT 0
64946: PPUSH
64947: CALL_OW 234
// end ;
64951: GO 64936
64953: POP
64954: POP
// end ;
64955: PPOPN 2
64957: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64958: LD_EXP 61
64962: PUSH
64963: LD_EXP 67
64967: AND
64968: IFFALSE 65052
64970: GO 64972
64972: DISABLE
64973: LD_INT 0
64975: PPUSH
64976: PPUSH
// begin enable ;
64977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64978: LD_ADDR_VAR 0 2
64982: PUSH
64983: LD_INT 22
64985: PUSH
64986: LD_OWVAR 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 32
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PPUSH
65009: CALL_OW 69
65013: ST_TO_ADDR
// if not tmp then
65014: LD_VAR 0 2
65018: NOT
65019: IFFALSE 65023
// exit ;
65021: GO 65052
// for i in tmp do
65023: LD_ADDR_VAR 0 1
65027: PUSH
65028: LD_VAR 0 2
65032: PUSH
65033: FOR_IN
65034: IFFALSE 65050
// begin SetLives ( i , 0 ) ;
65036: LD_VAR 0 1
65040: PPUSH
65041: LD_INT 0
65043: PPUSH
65044: CALL_OW 234
// end ;
65048: GO 65033
65050: POP
65051: POP
// end ;
65052: PPOPN 2
65054: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65055: LD_EXP 61
65059: PUSH
65060: LD_EXP 64
65064: AND
65065: IFFALSE 65158
65067: GO 65069
65069: DISABLE
65070: LD_INT 0
65072: PPUSH
// begin enable ;
65073: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65074: LD_ADDR_VAR 0 1
65078: PUSH
65079: LD_INT 22
65081: PUSH
65082: LD_OWVAR 2
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 25
65096: PUSH
65097: LD_INT 5
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 25
65106: PUSH
65107: LD_INT 9
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 25
65116: PUSH
65117: LD_INT 8
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PPUSH
65134: CALL_OW 69
65138: PUSH
65139: FOR_IN
65140: IFFALSE 65156
// begin SetClass ( i , 1 ) ;
65142: LD_VAR 0 1
65146: PPUSH
65147: LD_INT 1
65149: PPUSH
65150: CALL_OW 336
// end ;
65154: GO 65139
65156: POP
65157: POP
// end ;
65158: PPOPN 1
65160: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65161: LD_EXP 61
65165: PUSH
65166: LD_EXP 65
65170: AND
65171: PUSH
65172: LD_OWVAR 65
65176: PUSH
65177: LD_INT 7
65179: LESS
65180: AND
65181: IFFALSE 65195
65183: GO 65185
65185: DISABLE
// begin enable ;
65186: ENABLE
// game_speed := 7 ;
65187: LD_ADDR_OWVAR 65
65191: PUSH
65192: LD_INT 7
65194: ST_TO_ADDR
// end ;
65195: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65196: LD_EXP 61
65200: PUSH
65201: LD_EXP 68
65205: AND
65206: IFFALSE 65408
65208: GO 65210
65210: DISABLE
65211: LD_INT 0
65213: PPUSH
65214: PPUSH
65215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65216: LD_ADDR_VAR 0 3
65220: PUSH
65221: LD_INT 81
65223: PUSH
65224: LD_OWVAR 2
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 21
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PPUSH
65247: CALL_OW 69
65251: ST_TO_ADDR
// if not tmp then
65252: LD_VAR 0 3
65256: NOT
65257: IFFALSE 65261
// exit ;
65259: GO 65408
// if tmp > 5 then
65261: LD_VAR 0 3
65265: PUSH
65266: LD_INT 5
65268: GREATER
65269: IFFALSE 65281
// k := 5 else
65271: LD_ADDR_VAR 0 2
65275: PUSH
65276: LD_INT 5
65278: ST_TO_ADDR
65279: GO 65291
// k := tmp ;
65281: LD_ADDR_VAR 0 2
65285: PUSH
65286: LD_VAR 0 3
65290: ST_TO_ADDR
// for i := 1 to k do
65291: LD_ADDR_VAR 0 1
65295: PUSH
65296: DOUBLE
65297: LD_INT 1
65299: DEC
65300: ST_TO_ADDR
65301: LD_VAR 0 2
65305: PUSH
65306: FOR_TO
65307: IFFALSE 65406
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65309: LD_VAR 0 3
65313: PUSH
65314: LD_VAR 0 1
65318: ARRAY
65319: PPUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 4
65327: MOD
65328: PUSH
65329: LD_INT 1
65331: PLUS
65332: PPUSH
65333: CALL_OW 259
65337: PUSH
65338: LD_INT 10
65340: LESS
65341: IFFALSE 65404
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65343: LD_VAR 0 3
65347: PUSH
65348: LD_VAR 0 1
65352: ARRAY
65353: PPUSH
65354: LD_VAR 0 1
65358: PUSH
65359: LD_INT 4
65361: MOD
65362: PUSH
65363: LD_INT 1
65365: PLUS
65366: PPUSH
65367: LD_VAR 0 3
65371: PUSH
65372: LD_VAR 0 1
65376: ARRAY
65377: PPUSH
65378: LD_VAR 0 1
65382: PUSH
65383: LD_INT 4
65385: MOD
65386: PUSH
65387: LD_INT 1
65389: PLUS
65390: PPUSH
65391: CALL_OW 259
65395: PUSH
65396: LD_INT 1
65398: PLUS
65399: PPUSH
65400: CALL_OW 237
65404: GO 65306
65406: POP
65407: POP
// end ;
65408: PPOPN 3
65410: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65411: LD_EXP 61
65415: PUSH
65416: LD_EXP 69
65420: AND
65421: IFFALSE 65441
65423: GO 65425
65425: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65426: LD_INT 4
65428: PPUSH
65429: LD_OWVAR 2
65433: PPUSH
65434: LD_INT 0
65436: PPUSH
65437: CALL_OW 324
65441: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65442: LD_EXP 61
65446: PUSH
65447: LD_EXP 98
65451: AND
65452: IFFALSE 65472
65454: GO 65456
65456: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65457: LD_INT 19
65459: PPUSH
65460: LD_OWVAR 2
65464: PPUSH
65465: LD_INT 0
65467: PPUSH
65468: CALL_OW 324
65472: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65473: LD_EXP 61
65477: PUSH
65478: LD_EXP 70
65482: AND
65483: IFFALSE 65585
65485: GO 65487
65487: DISABLE
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
// begin enable ;
65492: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65493: LD_ADDR_VAR 0 2
65497: PUSH
65498: LD_INT 22
65500: PUSH
65501: LD_OWVAR 2
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 34
65515: PUSH
65516: LD_INT 11
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 34
65525: PUSH
65526: LD_INT 30
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: LIST
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PPUSH
65542: CALL_OW 69
65546: ST_TO_ADDR
// if not tmp then
65547: LD_VAR 0 2
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 65585
// for i in tmp do
65556: LD_ADDR_VAR 0 1
65560: PUSH
65561: LD_VAR 0 2
65565: PUSH
65566: FOR_IN
65567: IFFALSE 65583
// begin SetLives ( i , 0 ) ;
65569: LD_VAR 0 1
65573: PPUSH
65574: LD_INT 0
65576: PPUSH
65577: CALL_OW 234
// end ;
65581: GO 65566
65583: POP
65584: POP
// end ;
65585: PPOPN 2
65587: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65588: LD_EXP 61
65592: PUSH
65593: LD_EXP 71
65597: AND
65598: IFFALSE 65618
65600: GO 65602
65602: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65603: LD_INT 32
65605: PPUSH
65606: LD_OWVAR 2
65610: PPUSH
65611: LD_INT 0
65613: PPUSH
65614: CALL_OW 324
65618: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65619: LD_EXP 61
65623: PUSH
65624: LD_EXP 72
65628: AND
65629: IFFALSE 65810
65631: GO 65633
65633: DISABLE
65634: LD_INT 0
65636: PPUSH
65637: PPUSH
65638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65639: LD_ADDR_VAR 0 2
65643: PUSH
65644: LD_INT 22
65646: PUSH
65647: LD_OWVAR 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 33
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PPUSH
65670: CALL_OW 69
65674: ST_TO_ADDR
// if not tmp then
65675: LD_VAR 0 2
65679: NOT
65680: IFFALSE 65684
// exit ;
65682: GO 65810
// side := 0 ;
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_INT 0
65691: ST_TO_ADDR
// for i := 1 to 8 do
65692: LD_ADDR_VAR 0 1
65696: PUSH
65697: DOUBLE
65698: LD_INT 1
65700: DEC
65701: ST_TO_ADDR
65702: LD_INT 8
65704: PUSH
65705: FOR_TO
65706: IFFALSE 65754
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65708: LD_OWVAR 2
65712: PUSH
65713: LD_VAR 0 1
65717: NONEQUAL
65718: PUSH
65719: LD_OWVAR 2
65723: PPUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 81
65733: PUSH
65734: LD_INT 2
65736: EQUAL
65737: AND
65738: IFFALSE 65752
// begin side := i ;
65740: LD_ADDR_VAR 0 3
65744: PUSH
65745: LD_VAR 0 1
65749: ST_TO_ADDR
// break ;
65750: GO 65754
// end ;
65752: GO 65705
65754: POP
65755: POP
// if not side then
65756: LD_VAR 0 3
65760: NOT
65761: IFFALSE 65765
// exit ;
65763: GO 65810
// for i := 1 to tmp do
65765: LD_ADDR_VAR 0 1
65769: PUSH
65770: DOUBLE
65771: LD_INT 1
65773: DEC
65774: ST_TO_ADDR
65775: LD_VAR 0 2
65779: PUSH
65780: FOR_TO
65781: IFFALSE 65808
// if Prob ( 60 ) then
65783: LD_INT 60
65785: PPUSH
65786: CALL_OW 13
65790: IFFALSE 65806
// SetSide ( i , side ) ;
65792: LD_VAR 0 1
65796: PPUSH
65797: LD_VAR 0 3
65801: PPUSH
65802: CALL_OW 235
65806: GO 65780
65808: POP
65809: POP
// end ;
65810: PPOPN 3
65812: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65813: LD_EXP 61
65817: PUSH
65818: LD_EXP 74
65822: AND
65823: IFFALSE 65942
65825: GO 65827
65827: DISABLE
65828: LD_INT 0
65830: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65831: LD_ADDR_VAR 0 1
65835: PUSH
65836: LD_INT 22
65838: PUSH
65839: LD_OWVAR 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 21
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: LD_INT 23
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: LIST
65879: PPUSH
65880: CALL_OW 69
65884: PUSH
65885: FOR_IN
65886: IFFALSE 65940
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65888: LD_VAR 0 1
65892: PPUSH
65893: CALL_OW 257
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: LD_INT 2
65903: PUSH
65904: LD_INT 3
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: IN
65916: IFFALSE 65938
// SetClass ( un , rand ( 1 , 4 ) ) ;
65918: LD_VAR 0 1
65922: PPUSH
65923: LD_INT 1
65925: PPUSH
65926: LD_INT 4
65928: PPUSH
65929: CALL_OW 12
65933: PPUSH
65934: CALL_OW 336
65938: GO 65885
65940: POP
65941: POP
// end ;
65942: PPOPN 1
65944: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65945: LD_EXP 61
65949: PUSH
65950: LD_EXP 73
65954: AND
65955: IFFALSE 66034
65957: GO 65959
65959: DISABLE
65960: LD_INT 0
65962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65963: LD_ADDR_VAR 0 1
65967: PUSH
65968: LD_INT 22
65970: PUSH
65971: LD_OWVAR 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 21
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PPUSH
65994: CALL_OW 69
65998: ST_TO_ADDR
// if not tmp then
65999: LD_VAR 0 1
66003: NOT
66004: IFFALSE 66008
// exit ;
66006: GO 66034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66008: LD_VAR 0 1
66012: PUSH
66013: LD_INT 1
66015: PPUSH
66016: LD_VAR 0 1
66020: PPUSH
66021: CALL_OW 12
66025: ARRAY
66026: PPUSH
66027: LD_INT 100
66029: PPUSH
66030: CALL_OW 234
// end ;
66034: PPOPN 1
66036: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66037: LD_EXP 61
66041: PUSH
66042: LD_EXP 75
66046: AND
66047: IFFALSE 66145
66049: GO 66051
66051: DISABLE
66052: LD_INT 0
66054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66055: LD_ADDR_VAR 0 1
66059: PUSH
66060: LD_INT 22
66062: PUSH
66063: LD_OWVAR 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 21
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PPUSH
66086: CALL_OW 69
66090: ST_TO_ADDR
// if not tmp then
66091: LD_VAR 0 1
66095: NOT
66096: IFFALSE 66100
// exit ;
66098: GO 66145
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66100: LD_VAR 0 1
66104: PUSH
66105: LD_INT 1
66107: PPUSH
66108: LD_VAR 0 1
66112: PPUSH
66113: CALL_OW 12
66117: ARRAY
66118: PPUSH
66119: LD_INT 1
66121: PPUSH
66122: LD_INT 4
66124: PPUSH
66125: CALL_OW 12
66129: PPUSH
66130: LD_INT 3000
66132: PPUSH
66133: LD_INT 9000
66135: PPUSH
66136: CALL_OW 12
66140: PPUSH
66141: CALL_OW 492
// end ;
66145: PPOPN 1
66147: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66148: LD_EXP 61
66152: PUSH
66153: LD_EXP 76
66157: AND
66158: IFFALSE 66178
66160: GO 66162
66162: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66163: LD_INT 1
66165: PPUSH
66166: LD_OWVAR 2
66170: PPUSH
66171: LD_INT 0
66173: PPUSH
66174: CALL_OW 324
66178: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66179: LD_EXP 61
66183: PUSH
66184: LD_EXP 77
66188: AND
66189: IFFALSE 66272
66191: GO 66193
66193: DISABLE
66194: LD_INT 0
66196: PPUSH
66197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66198: LD_ADDR_VAR 0 2
66202: PUSH
66203: LD_INT 22
66205: PUSH
66206: LD_OWVAR 2
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 21
66217: PUSH
66218: LD_INT 3
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PPUSH
66229: CALL_OW 69
66233: ST_TO_ADDR
// if not tmp then
66234: LD_VAR 0 2
66238: NOT
66239: IFFALSE 66243
// exit ;
66241: GO 66272
// for i in tmp do
66243: LD_ADDR_VAR 0 1
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: FOR_IN
66254: IFFALSE 66270
// SetBLevel ( i , 10 ) ;
66256: LD_VAR 0 1
66260: PPUSH
66261: LD_INT 10
66263: PPUSH
66264: CALL_OW 241
66268: GO 66253
66270: POP
66271: POP
// end ;
66272: PPOPN 2
66274: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66275: LD_EXP 61
66279: PUSH
66280: LD_EXP 78
66284: AND
66285: IFFALSE 66396
66287: GO 66289
66289: DISABLE
66290: LD_INT 0
66292: PPUSH
66293: PPUSH
66294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66295: LD_ADDR_VAR 0 3
66299: PUSH
66300: LD_INT 22
66302: PUSH
66303: LD_OWVAR 2
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 25
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PPUSH
66326: CALL_OW 69
66330: ST_TO_ADDR
// if not tmp then
66331: LD_VAR 0 3
66335: NOT
66336: IFFALSE 66340
// exit ;
66338: GO 66396
// un := tmp [ rand ( 1 , tmp ) ] ;
66340: LD_ADDR_VAR 0 2
66344: PUSH
66345: LD_VAR 0 3
66349: PUSH
66350: LD_INT 1
66352: PPUSH
66353: LD_VAR 0 3
66357: PPUSH
66358: CALL_OW 12
66362: ARRAY
66363: ST_TO_ADDR
// if Crawls ( un ) then
66364: LD_VAR 0 2
66368: PPUSH
66369: CALL_OW 318
66373: IFFALSE 66384
// ComWalk ( un ) ;
66375: LD_VAR 0 2
66379: PPUSH
66380: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66384: LD_VAR 0 2
66388: PPUSH
66389: LD_INT 5
66391: PPUSH
66392: CALL_OW 336
// end ;
66396: PPOPN 3
66398: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66399: LD_EXP 61
66403: PUSH
66404: LD_EXP 79
66408: AND
66409: PUSH
66410: LD_OWVAR 67
66414: PUSH
66415: LD_INT 4
66417: LESS
66418: AND
66419: IFFALSE 66438
66421: GO 66423
66423: DISABLE
// begin Difficulty := Difficulty + 1 ;
66424: LD_ADDR_OWVAR 67
66428: PUSH
66429: LD_OWVAR 67
66433: PUSH
66434: LD_INT 1
66436: PLUS
66437: ST_TO_ADDR
// end ;
66438: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66439: LD_EXP 61
66443: PUSH
66444: LD_EXP 80
66448: AND
66449: IFFALSE 66552
66451: GO 66453
66453: DISABLE
66454: LD_INT 0
66456: PPUSH
// begin for i := 1 to 5 do
66457: LD_ADDR_VAR 0 1
66461: PUSH
66462: DOUBLE
66463: LD_INT 1
66465: DEC
66466: ST_TO_ADDR
66467: LD_INT 5
66469: PUSH
66470: FOR_TO
66471: IFFALSE 66550
// begin uc_nation := nation_nature ;
66473: LD_ADDR_OWVAR 21
66477: PUSH
66478: LD_INT 0
66480: ST_TO_ADDR
// uc_side := 0 ;
66481: LD_ADDR_OWVAR 20
66485: PUSH
66486: LD_INT 0
66488: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66489: LD_ADDR_OWVAR 29
66493: PUSH
66494: LD_INT 12
66496: PUSH
66497: LD_INT 12
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: ST_TO_ADDR
// hc_agressivity := 20 ;
66504: LD_ADDR_OWVAR 35
66508: PUSH
66509: LD_INT 20
66511: ST_TO_ADDR
// hc_class := class_tiger ;
66512: LD_ADDR_OWVAR 28
66516: PUSH
66517: LD_INT 14
66519: ST_TO_ADDR
// hc_gallery :=  ;
66520: LD_ADDR_OWVAR 33
66524: PUSH
66525: LD_STRING 
66527: ST_TO_ADDR
// hc_name :=  ;
66528: LD_ADDR_OWVAR 26
66532: PUSH
66533: LD_STRING 
66535: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66536: CALL_OW 44
66540: PPUSH
66541: LD_INT 0
66543: PPUSH
66544: CALL_OW 51
// end ;
66548: GO 66470
66550: POP
66551: POP
// end ;
66552: PPOPN 1
66554: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66555: LD_EXP 61
66559: PUSH
66560: LD_EXP 81
66564: AND
66565: IFFALSE 66574
66567: GO 66569
66569: DISABLE
// StreamSibBomb ;
66570: CALL 66575 0 0
66574: END
// export function StreamSibBomb ; var i , x , y ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
// result := false ;
66581: LD_ADDR_VAR 0 1
66585: PUSH
66586: LD_INT 0
66588: ST_TO_ADDR
// for i := 1 to 16 do
66589: LD_ADDR_VAR 0 2
66593: PUSH
66594: DOUBLE
66595: LD_INT 1
66597: DEC
66598: ST_TO_ADDR
66599: LD_INT 16
66601: PUSH
66602: FOR_TO
66603: IFFALSE 66802
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66605: LD_ADDR_VAR 0 3
66609: PUSH
66610: LD_INT 10
66612: PUSH
66613: LD_INT 20
66615: PUSH
66616: LD_INT 30
66618: PUSH
66619: LD_INT 40
66621: PUSH
66622: LD_INT 50
66624: PUSH
66625: LD_INT 60
66627: PUSH
66628: LD_INT 70
66630: PUSH
66631: LD_INT 80
66633: PUSH
66634: LD_INT 90
66636: PUSH
66637: LD_INT 100
66639: PUSH
66640: LD_INT 110
66642: PUSH
66643: LD_INT 120
66645: PUSH
66646: LD_INT 130
66648: PUSH
66649: LD_INT 140
66651: PUSH
66652: LD_INT 150
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: PPUSH
66675: LD_INT 15
66677: PPUSH
66678: CALL_OW 12
66682: ARRAY
66683: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: LD_INT 10
66691: PUSH
66692: LD_INT 20
66694: PUSH
66695: LD_INT 30
66697: PUSH
66698: LD_INT 40
66700: PUSH
66701: LD_INT 50
66703: PUSH
66704: LD_INT 60
66706: PUSH
66707: LD_INT 70
66709: PUSH
66710: LD_INT 80
66712: PUSH
66713: LD_INT 90
66715: PUSH
66716: LD_INT 100
66718: PUSH
66719: LD_INT 110
66721: PUSH
66722: LD_INT 120
66724: PUSH
66725: LD_INT 130
66727: PUSH
66728: LD_INT 140
66730: PUSH
66731: LD_INT 150
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PPUSH
66754: LD_INT 15
66756: PPUSH
66757: CALL_OW 12
66761: ARRAY
66762: ST_TO_ADDR
// if ValidHex ( x , y ) then
66763: LD_VAR 0 3
66767: PPUSH
66768: LD_VAR 0 4
66772: PPUSH
66773: CALL_OW 488
66777: IFFALSE 66800
// begin result := [ x , y ] ;
66779: LD_ADDR_VAR 0 1
66783: PUSH
66784: LD_VAR 0 3
66788: PUSH
66789: LD_VAR 0 4
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// break ;
66798: GO 66802
// end ; end ;
66800: GO 66602
66802: POP
66803: POP
// if result then
66804: LD_VAR 0 1
66808: IFFALSE 66868
// begin ToLua ( playSibBomb() ) ;
66810: LD_STRING playSibBomb()
66812: PPUSH
66813: CALL_OW 559
// wait ( 0 0$14 ) ;
66817: LD_INT 490
66819: PPUSH
66820: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 1
66831: ARRAY
66832: PPUSH
66833: LD_VAR 0 1
66837: PUSH
66838: LD_INT 2
66840: ARRAY
66841: PPUSH
66842: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66846: LD_VAR 0 1
66850: PUSH
66851: LD_INT 1
66853: ARRAY
66854: PPUSH
66855: LD_VAR 0 1
66859: PUSH
66860: LD_INT 2
66862: ARRAY
66863: PPUSH
66864: CALL_OW 429
// end ; end ;
66868: LD_VAR 0 1
66872: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66873: LD_EXP 61
66877: PUSH
66878: LD_EXP 83
66882: AND
66883: IFFALSE 66895
66885: GO 66887
66887: DISABLE
// YouLost (  ) ;
66888: LD_STRING 
66890: PPUSH
66891: CALL_OW 104
66895: END
// every 0 0$1 trigger StreamModeActive and sFog do
66896: LD_EXP 61
66900: PUSH
66901: LD_EXP 82
66905: AND
66906: IFFALSE 66920
66908: GO 66910
66910: DISABLE
// FogOff ( your_side ) ;
66911: LD_OWVAR 2
66915: PPUSH
66916: CALL_OW 344
66920: END
// every 0 0$1 trigger StreamModeActive and sSun do
66921: LD_EXP 61
66925: PUSH
66926: LD_EXP 84
66930: AND
66931: IFFALSE 66959
66933: GO 66935
66935: DISABLE
// begin solar_recharge_percent := 0 ;
66936: LD_ADDR_OWVAR 79
66940: PUSH
66941: LD_INT 0
66943: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66944: LD_INT 10500
66946: PPUSH
66947: CALL_OW 67
// solar_recharge_percent := 100 ;
66951: LD_ADDR_OWVAR 79
66955: PUSH
66956: LD_INT 100
66958: ST_TO_ADDR
// end ;
66959: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66960: LD_EXP 61
66964: PUSH
66965: LD_EXP 85
66969: AND
66970: IFFALSE 67209
66972: GO 66974
66974: DISABLE
66975: LD_INT 0
66977: PPUSH
66978: PPUSH
66979: PPUSH
// begin tmp := [ ] ;
66980: LD_ADDR_VAR 0 3
66984: PUSH
66985: EMPTY
66986: ST_TO_ADDR
// for i := 1 to 6 do
66987: LD_ADDR_VAR 0 1
66991: PUSH
66992: DOUBLE
66993: LD_INT 1
66995: DEC
66996: ST_TO_ADDR
66997: LD_INT 6
66999: PUSH
67000: FOR_TO
67001: IFFALSE 67106
// begin uc_nation := nation_nature ;
67003: LD_ADDR_OWVAR 21
67007: PUSH
67008: LD_INT 0
67010: ST_TO_ADDR
// uc_side := 0 ;
67011: LD_ADDR_OWVAR 20
67015: PUSH
67016: LD_INT 0
67018: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67019: LD_ADDR_OWVAR 29
67023: PUSH
67024: LD_INT 12
67026: PUSH
67027: LD_INT 12
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: ST_TO_ADDR
// hc_agressivity := 20 ;
67034: LD_ADDR_OWVAR 35
67038: PUSH
67039: LD_INT 20
67041: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67042: LD_ADDR_OWVAR 28
67046: PUSH
67047: LD_INT 17
67049: ST_TO_ADDR
// hc_gallery :=  ;
67050: LD_ADDR_OWVAR 33
67054: PUSH
67055: LD_STRING 
67057: ST_TO_ADDR
// hc_name :=  ;
67058: LD_ADDR_OWVAR 26
67062: PUSH
67063: LD_STRING 
67065: ST_TO_ADDR
// un := CreateHuman ;
67066: LD_ADDR_VAR 0 2
67070: PUSH
67071: CALL_OW 44
67075: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67076: LD_VAR 0 2
67080: PPUSH
67081: LD_INT 1
67083: PPUSH
67084: CALL_OW 51
// tmp := tmp ^ un ;
67088: LD_ADDR_VAR 0 3
67092: PUSH
67093: LD_VAR 0 3
67097: PUSH
67098: LD_VAR 0 2
67102: ADD
67103: ST_TO_ADDR
// end ;
67104: GO 67000
67106: POP
67107: POP
// repeat wait ( 0 0$1 ) ;
67108: LD_INT 35
67110: PPUSH
67111: CALL_OW 67
// for un in tmp do
67115: LD_ADDR_VAR 0 2
67119: PUSH
67120: LD_VAR 0 3
67124: PUSH
67125: FOR_IN
67126: IFFALSE 67200
// begin if IsDead ( un ) then
67128: LD_VAR 0 2
67132: PPUSH
67133: CALL_OW 301
67137: IFFALSE 67157
// begin tmp := tmp diff un ;
67139: LD_ADDR_VAR 0 3
67143: PUSH
67144: LD_VAR 0 3
67148: PUSH
67149: LD_VAR 0 2
67153: DIFF
67154: ST_TO_ADDR
// continue ;
67155: GO 67125
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67157: LD_VAR 0 2
67161: PPUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 22
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PPUSH
67179: CALL_OW 69
67183: PPUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: CALL_OW 74
67193: PPUSH
67194: CALL_OW 115
// end ;
67198: GO 67125
67200: POP
67201: POP
// until not tmp ;
67202: LD_VAR 0 3
67206: NOT
67207: IFFALSE 67108
// end ;
67209: PPOPN 3
67211: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67212: LD_EXP 61
67216: PUSH
67217: LD_EXP 86
67221: AND
67222: IFFALSE 67276
67224: GO 67226
67226: DISABLE
// begin ToLua ( displayTroll(); ) ;
67227: LD_STRING displayTroll();
67229: PPUSH
67230: CALL_OW 559
// wait ( 3 3$00 ) ;
67234: LD_INT 6300
67236: PPUSH
67237: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67241: LD_STRING hideTroll();
67243: PPUSH
67244: CALL_OW 559
// wait ( 1 1$00 ) ;
67248: LD_INT 2100
67250: PPUSH
67251: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67255: LD_STRING displayTroll();
67257: PPUSH
67258: CALL_OW 559
// wait ( 1 1$00 ) ;
67262: LD_INT 2100
67264: PPUSH
67265: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67269: LD_STRING hideTroll();
67271: PPUSH
67272: CALL_OW 559
// end ;
67276: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67277: LD_EXP 61
67281: PUSH
67282: LD_EXP 87
67286: AND
67287: IFFALSE 67350
67289: GO 67291
67291: DISABLE
67292: LD_INT 0
67294: PPUSH
// begin p := 0 ;
67295: LD_ADDR_VAR 0 1
67299: PUSH
67300: LD_INT 0
67302: ST_TO_ADDR
// repeat game_speed := 1 ;
67303: LD_ADDR_OWVAR 65
67307: PUSH
67308: LD_INT 1
67310: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67311: LD_INT 35
67313: PPUSH
67314: CALL_OW 67
// p := p + 1 ;
67318: LD_ADDR_VAR 0 1
67322: PUSH
67323: LD_VAR 0 1
67327: PUSH
67328: LD_INT 1
67330: PLUS
67331: ST_TO_ADDR
// until p >= 60 ;
67332: LD_VAR 0 1
67336: PUSH
67337: LD_INT 60
67339: GREATEREQUAL
67340: IFFALSE 67303
// game_speed := 4 ;
67342: LD_ADDR_OWVAR 65
67346: PUSH
67347: LD_INT 4
67349: ST_TO_ADDR
// end ;
67350: PPOPN 1
67352: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67353: LD_EXP 61
67357: PUSH
67358: LD_EXP 88
67362: AND
67363: IFFALSE 67509
67365: GO 67367
67367: DISABLE
67368: LD_INT 0
67370: PPUSH
67371: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67372: LD_ADDR_VAR 0 1
67376: PUSH
67377: LD_INT 22
67379: PUSH
67380: LD_OWVAR 2
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: LD_INT 30
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 30
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PPUSH
67421: CALL_OW 69
67425: ST_TO_ADDR
// if not depot then
67426: LD_VAR 0 1
67430: NOT
67431: IFFALSE 67435
// exit ;
67433: GO 67509
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67435: LD_ADDR_VAR 0 2
67439: PUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_INT 1
67447: PPUSH
67448: LD_VAR 0 1
67452: PPUSH
67453: CALL_OW 12
67457: ARRAY
67458: PPUSH
67459: CALL_OW 274
67463: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67464: LD_VAR 0 2
67468: PPUSH
67469: LD_INT 1
67471: PPUSH
67472: LD_INT 0
67474: PPUSH
67475: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67479: LD_VAR 0 2
67483: PPUSH
67484: LD_INT 2
67486: PPUSH
67487: LD_INT 0
67489: PPUSH
67490: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67494: LD_VAR 0 2
67498: PPUSH
67499: LD_INT 3
67501: PPUSH
67502: LD_INT 0
67504: PPUSH
67505: CALL_OW 277
// end ;
67509: PPOPN 2
67511: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67512: LD_EXP 61
67516: PUSH
67517: LD_EXP 89
67521: AND
67522: IFFALSE 67619
67524: GO 67526
67526: DISABLE
67527: LD_INT 0
67529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67530: LD_ADDR_VAR 0 1
67534: PUSH
67535: LD_INT 22
67537: PUSH
67538: LD_OWVAR 2
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 21
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 3
67559: PUSH
67560: LD_INT 23
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: PPUSH
67579: CALL_OW 69
67583: ST_TO_ADDR
// if not tmp then
67584: LD_VAR 0 1
67588: NOT
67589: IFFALSE 67593
// exit ;
67591: GO 67619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67593: LD_VAR 0 1
67597: PUSH
67598: LD_INT 1
67600: PPUSH
67601: LD_VAR 0 1
67605: PPUSH
67606: CALL_OW 12
67610: ARRAY
67611: PPUSH
67612: LD_INT 200
67614: PPUSH
67615: CALL_OW 234
// end ;
67619: PPOPN 1
67621: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67622: LD_EXP 61
67626: PUSH
67627: LD_EXP 90
67631: AND
67632: IFFALSE 67711
67634: GO 67636
67636: DISABLE
67637: LD_INT 0
67639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67640: LD_ADDR_VAR 0 1
67644: PUSH
67645: LD_INT 22
67647: PUSH
67648: LD_OWVAR 2
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 21
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PPUSH
67671: CALL_OW 69
67675: ST_TO_ADDR
// if not tmp then
67676: LD_VAR 0 1
67680: NOT
67681: IFFALSE 67685
// exit ;
67683: GO 67711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67685: LD_VAR 0 1
67689: PUSH
67690: LD_INT 1
67692: PPUSH
67693: LD_VAR 0 1
67697: PPUSH
67698: CALL_OW 12
67702: ARRAY
67703: PPUSH
67704: LD_INT 60
67706: PPUSH
67707: CALL_OW 234
// end ;
67711: PPOPN 1
67713: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67714: LD_EXP 61
67718: PUSH
67719: LD_EXP 91
67723: AND
67724: IFFALSE 67823
67726: GO 67728
67728: DISABLE
67729: LD_INT 0
67731: PPUSH
67732: PPUSH
// begin enable ;
67733: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67734: LD_ADDR_VAR 0 1
67738: PUSH
67739: LD_INT 22
67741: PUSH
67742: LD_OWVAR 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 61
67753: PUSH
67754: EMPTY
67755: LIST
67756: PUSH
67757: LD_INT 33
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: PPUSH
67772: CALL_OW 69
67776: ST_TO_ADDR
// if not tmp then
67777: LD_VAR 0 1
67781: NOT
67782: IFFALSE 67786
// exit ;
67784: GO 67823
// for i in tmp do
67786: LD_ADDR_VAR 0 2
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: FOR_IN
67797: IFFALSE 67821
// if IsControledBy ( i ) then
67799: LD_VAR 0 2
67803: PPUSH
67804: CALL_OW 312
67808: IFFALSE 67819
// ComUnlink ( i ) ;
67810: LD_VAR 0 2
67814: PPUSH
67815: CALL_OW 136
67819: GO 67796
67821: POP
67822: POP
// end ;
67823: PPOPN 2
67825: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67826: LD_EXP 61
67830: PUSH
67831: LD_EXP 92
67835: AND
67836: IFFALSE 67976
67838: GO 67840
67840: DISABLE
67841: LD_INT 0
67843: PPUSH
67844: PPUSH
// begin ToLua ( displayPowell(); ) ;
67845: LD_STRING displayPowell();
67847: PPUSH
67848: CALL_OW 559
// uc_side := 0 ;
67852: LD_ADDR_OWVAR 20
67856: PUSH
67857: LD_INT 0
67859: ST_TO_ADDR
// uc_nation := 2 ;
67860: LD_ADDR_OWVAR 21
67864: PUSH
67865: LD_INT 2
67867: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67868: LD_ADDR_OWVAR 37
67872: PUSH
67873: LD_INT 14
67875: ST_TO_ADDR
// vc_engine := engine_siberite ;
67876: LD_ADDR_OWVAR 39
67880: PUSH
67881: LD_INT 3
67883: ST_TO_ADDR
// vc_control := control_apeman ;
67884: LD_ADDR_OWVAR 38
67888: PUSH
67889: LD_INT 5
67891: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67892: LD_ADDR_OWVAR 40
67896: PUSH
67897: LD_INT 29
67899: ST_TO_ADDR
// un := CreateVehicle ;
67900: LD_ADDR_VAR 0 2
67904: PUSH
67905: CALL_OW 45
67909: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67910: LD_VAR 0 2
67914: PPUSH
67915: LD_INT 1
67917: PPUSH
67918: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67922: LD_INT 35
67924: PPUSH
67925: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67929: LD_VAR 0 2
67933: PPUSH
67934: LD_INT 22
67936: PUSH
67937: LD_OWVAR 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PPUSH
67946: CALL_OW 69
67950: PPUSH
67951: LD_VAR 0 2
67955: PPUSH
67956: CALL_OW 74
67960: PPUSH
67961: CALL_OW 115
// until IsDead ( un ) ;
67965: LD_VAR 0 2
67969: PPUSH
67970: CALL_OW 301
67974: IFFALSE 67922
// end ;
67976: PPOPN 2
67978: END
// every 0 0$1 trigger StreamModeActive and sStu do
67979: LD_EXP 61
67983: PUSH
67984: LD_EXP 100
67988: AND
67989: IFFALSE 68005
67991: GO 67993
67993: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67994: LD_STRING displayStucuk();
67996: PPUSH
67997: CALL_OW 559
// ResetFog ;
68001: CALL_OW 335
// end ;
68005: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68006: LD_EXP 61
68010: PUSH
68011: LD_EXP 93
68015: AND
68016: IFFALSE 68157
68018: GO 68020
68020: DISABLE
68021: LD_INT 0
68023: PPUSH
68024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68025: LD_ADDR_VAR 0 2
68029: PUSH
68030: LD_INT 22
68032: PUSH
68033: LD_OWVAR 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 21
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PPUSH
68056: CALL_OW 69
68060: ST_TO_ADDR
// if not tmp then
68061: LD_VAR 0 2
68065: NOT
68066: IFFALSE 68070
// exit ;
68068: GO 68157
// un := tmp [ rand ( 1 , tmp ) ] ;
68070: LD_ADDR_VAR 0 1
68074: PUSH
68075: LD_VAR 0 2
68079: PUSH
68080: LD_INT 1
68082: PPUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: CALL_OW 12
68092: ARRAY
68093: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68094: LD_VAR 0 1
68098: PPUSH
68099: LD_INT 0
68101: PPUSH
68102: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68106: LD_VAR 0 1
68110: PPUSH
68111: LD_OWVAR 3
68115: PUSH
68116: LD_VAR 0 1
68120: DIFF
68121: PPUSH
68122: LD_VAR 0 1
68126: PPUSH
68127: CALL_OW 74
68131: PPUSH
68132: CALL_OW 115
// wait ( 0 0$20 ) ;
68136: LD_INT 700
68138: PPUSH
68139: CALL_OW 67
// SetSide ( un , your_side ) ;
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_OWVAR 2
68152: PPUSH
68153: CALL_OW 235
// end ;
68157: PPOPN 2
68159: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68160: LD_EXP 61
68164: PUSH
68165: LD_EXP 94
68169: AND
68170: IFFALSE 68276
68172: GO 68174
68174: DISABLE
68175: LD_INT 0
68177: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68178: LD_ADDR_VAR 0 1
68182: PUSH
68183: LD_INT 22
68185: PUSH
68186: LD_OWVAR 2
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 2
68197: PUSH
68198: LD_INT 30
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 30
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PPUSH
68227: CALL_OW 69
68231: ST_TO_ADDR
// if not depot then
68232: LD_VAR 0 1
68236: NOT
68237: IFFALSE 68241
// exit ;
68239: GO 68276
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68241: LD_VAR 0 1
68245: PUSH
68246: LD_INT 1
68248: ARRAY
68249: PPUSH
68250: CALL_OW 250
68254: PPUSH
68255: LD_VAR 0 1
68259: PUSH
68260: LD_INT 1
68262: ARRAY
68263: PPUSH
68264: CALL_OW 251
68268: PPUSH
68269: LD_INT 70
68271: PPUSH
68272: CALL_OW 495
// end ;
68276: PPOPN 1
68278: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68279: LD_EXP 61
68283: PUSH
68284: LD_EXP 95
68288: AND
68289: IFFALSE 68500
68291: GO 68293
68293: DISABLE
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68301: LD_ADDR_VAR 0 5
68305: PUSH
68306: LD_INT 22
68308: PUSH
68309: LD_OWVAR 2
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 21
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PPUSH
68332: CALL_OW 69
68336: ST_TO_ADDR
// if not tmp then
68337: LD_VAR 0 5
68341: NOT
68342: IFFALSE 68346
// exit ;
68344: GO 68500
// for i in tmp do
68346: LD_ADDR_VAR 0 1
68350: PUSH
68351: LD_VAR 0 5
68355: PUSH
68356: FOR_IN
68357: IFFALSE 68498
// begin d := rand ( 0 , 5 ) ;
68359: LD_ADDR_VAR 0 4
68363: PUSH
68364: LD_INT 0
68366: PPUSH
68367: LD_INT 5
68369: PPUSH
68370: CALL_OW 12
68374: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68375: LD_ADDR_VAR 0 2
68379: PUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: CALL_OW 250
68389: PPUSH
68390: LD_VAR 0 4
68394: PPUSH
68395: LD_INT 3
68397: PPUSH
68398: LD_INT 12
68400: PPUSH
68401: CALL_OW 12
68405: PPUSH
68406: CALL_OW 272
68410: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68411: LD_ADDR_VAR 0 3
68415: PUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: CALL_OW 251
68425: PPUSH
68426: LD_VAR 0 4
68430: PPUSH
68431: LD_INT 3
68433: PPUSH
68434: LD_INT 12
68436: PPUSH
68437: CALL_OW 12
68441: PPUSH
68442: CALL_OW 273
68446: ST_TO_ADDR
// if ValidHex ( x , y ) then
68447: LD_VAR 0 2
68451: PPUSH
68452: LD_VAR 0 3
68456: PPUSH
68457: CALL_OW 488
68461: IFFALSE 68496
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68463: LD_VAR 0 1
68467: PPUSH
68468: LD_VAR 0 2
68472: PPUSH
68473: LD_VAR 0 3
68477: PPUSH
68478: LD_INT 3
68480: PPUSH
68481: LD_INT 6
68483: PPUSH
68484: CALL_OW 12
68488: PPUSH
68489: LD_INT 1
68491: PPUSH
68492: CALL_OW 483
// end ;
68496: GO 68356
68498: POP
68499: POP
// end ;
68500: PPOPN 5
68502: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68503: LD_EXP 61
68507: PUSH
68508: LD_EXP 96
68512: AND
68513: IFFALSE 68607
68515: GO 68517
68517: DISABLE
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68522: LD_ADDR_VAR 0 2
68526: PUSH
68527: LD_INT 22
68529: PUSH
68530: LD_OWVAR 2
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 32
68541: PUSH
68542: LD_INT 1
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 21
68551: PUSH
68552: LD_INT 2
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: LIST
68563: PPUSH
68564: CALL_OW 69
68568: ST_TO_ADDR
// if not tmp then
68569: LD_VAR 0 2
68573: NOT
68574: IFFALSE 68578
// exit ;
68576: GO 68607
// for i in tmp do
68578: LD_ADDR_VAR 0 1
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: FOR_IN
68589: IFFALSE 68605
// SetFuel ( i , 0 ) ;
68591: LD_VAR 0 1
68595: PPUSH
68596: LD_INT 0
68598: PPUSH
68599: CALL_OW 240
68603: GO 68588
68605: POP
68606: POP
// end ;
68607: PPOPN 2
68609: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68610: LD_EXP 61
68614: PUSH
68615: LD_EXP 97
68619: AND
68620: IFFALSE 68686
68622: GO 68624
68624: DISABLE
68625: LD_INT 0
68627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68628: LD_ADDR_VAR 0 1
68632: PUSH
68633: LD_INT 22
68635: PUSH
68636: LD_OWVAR 2
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 30
68647: PUSH
68648: LD_INT 29
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PPUSH
68659: CALL_OW 69
68663: ST_TO_ADDR
// if not tmp then
68664: LD_VAR 0 1
68668: NOT
68669: IFFALSE 68673
// exit ;
68671: GO 68686
// DestroyUnit ( tmp [ 1 ] ) ;
68673: LD_VAR 0 1
68677: PUSH
68678: LD_INT 1
68680: ARRAY
68681: PPUSH
68682: CALL_OW 65
// end ;
68686: PPOPN 1
68688: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68689: LD_EXP 61
68693: PUSH
68694: LD_EXP 99
68698: AND
68699: IFFALSE 68828
68701: GO 68703
68703: DISABLE
68704: LD_INT 0
68706: PPUSH
// begin uc_side := 0 ;
68707: LD_ADDR_OWVAR 20
68711: PUSH
68712: LD_INT 0
68714: ST_TO_ADDR
// uc_nation := nation_arabian ;
68715: LD_ADDR_OWVAR 21
68719: PUSH
68720: LD_INT 2
68722: ST_TO_ADDR
// hc_gallery :=  ;
68723: LD_ADDR_OWVAR 33
68727: PUSH
68728: LD_STRING 
68730: ST_TO_ADDR
// hc_name :=  ;
68731: LD_ADDR_OWVAR 26
68735: PUSH
68736: LD_STRING 
68738: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68739: LD_INT 1
68741: PPUSH
68742: LD_INT 11
68744: PPUSH
68745: LD_INT 10
68747: PPUSH
68748: CALL_OW 380
// un := CreateHuman ;
68752: LD_ADDR_VAR 0 1
68756: PUSH
68757: CALL_OW 44
68761: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68762: LD_VAR 0 1
68766: PPUSH
68767: LD_INT 1
68769: PPUSH
68770: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68774: LD_INT 35
68776: PPUSH
68777: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68781: LD_VAR 0 1
68785: PPUSH
68786: LD_INT 22
68788: PUSH
68789: LD_OWVAR 2
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PPUSH
68798: CALL_OW 69
68802: PPUSH
68803: LD_VAR 0 1
68807: PPUSH
68808: CALL_OW 74
68812: PPUSH
68813: CALL_OW 115
// until IsDead ( un ) ;
68817: LD_VAR 0 1
68821: PPUSH
68822: CALL_OW 301
68826: IFFALSE 68774
// end ;
68828: PPOPN 1
68830: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68831: LD_EXP 61
68835: PUSH
68836: LD_EXP 101
68840: AND
68841: IFFALSE 68853
68843: GO 68845
68845: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68846: LD_STRING earthquake(getX(game), 0, 32)
68848: PPUSH
68849: CALL_OW 559
68853: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68854: LD_EXP 61
68858: PUSH
68859: LD_EXP 102
68863: AND
68864: IFFALSE 68955
68866: GO 68868
68868: DISABLE
68869: LD_INT 0
68871: PPUSH
// begin enable ;
68872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68873: LD_ADDR_VAR 0 1
68877: PUSH
68878: LD_INT 22
68880: PUSH
68881: LD_OWVAR 2
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 21
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 33
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: PPUSH
68915: CALL_OW 69
68919: ST_TO_ADDR
// if not tmp then
68920: LD_VAR 0 1
68924: NOT
68925: IFFALSE 68929
// exit ;
68927: GO 68955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68929: LD_VAR 0 1
68933: PUSH
68934: LD_INT 1
68936: PPUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 12
68946: ARRAY
68947: PPUSH
68948: LD_INT 1
68950: PPUSH
68951: CALL_OW 234
// end ;
68955: PPOPN 1
68957: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68958: LD_EXP 61
68962: PUSH
68963: LD_EXP 103
68967: AND
68968: IFFALSE 69109
68970: GO 68972
68972: DISABLE
68973: LD_INT 0
68975: PPUSH
68976: PPUSH
68977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: LD_INT 22
68985: PUSH
68986: LD_OWVAR 2
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 25
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PPUSH
69009: CALL_OW 69
69013: ST_TO_ADDR
// if not tmp then
69014: LD_VAR 0 3
69018: NOT
69019: IFFALSE 69023
// exit ;
69021: GO 69109
// un := tmp [ rand ( 1 , tmp ) ] ;
69023: LD_ADDR_VAR 0 2
69027: PUSH
69028: LD_VAR 0 3
69032: PUSH
69033: LD_INT 1
69035: PPUSH
69036: LD_VAR 0 3
69040: PPUSH
69041: CALL_OW 12
69045: ARRAY
69046: ST_TO_ADDR
// if Crawls ( un ) then
69047: LD_VAR 0 2
69051: PPUSH
69052: CALL_OW 318
69056: IFFALSE 69067
// ComWalk ( un ) ;
69058: LD_VAR 0 2
69062: PPUSH
69063: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69067: LD_VAR 0 2
69071: PPUSH
69072: LD_INT 9
69074: PPUSH
69075: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69079: LD_INT 28
69081: PPUSH
69082: LD_OWVAR 2
69086: PPUSH
69087: LD_INT 2
69089: PPUSH
69090: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69094: LD_INT 29
69096: PPUSH
69097: LD_OWVAR 2
69101: PPUSH
69102: LD_INT 2
69104: PPUSH
69105: CALL_OW 322
// end ;
69109: PPOPN 3
69111: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69112: LD_EXP 61
69116: PUSH
69117: LD_EXP 104
69121: AND
69122: IFFALSE 69233
69124: GO 69126
69126: DISABLE
69127: LD_INT 0
69129: PPUSH
69130: PPUSH
69131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69132: LD_ADDR_VAR 0 3
69136: PUSH
69137: LD_INT 22
69139: PUSH
69140: LD_OWVAR 2
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 25
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PPUSH
69163: CALL_OW 69
69167: ST_TO_ADDR
// if not tmp then
69168: LD_VAR 0 3
69172: NOT
69173: IFFALSE 69177
// exit ;
69175: GO 69233
// un := tmp [ rand ( 1 , tmp ) ] ;
69177: LD_ADDR_VAR 0 2
69181: PUSH
69182: LD_VAR 0 3
69186: PUSH
69187: LD_INT 1
69189: PPUSH
69190: LD_VAR 0 3
69194: PPUSH
69195: CALL_OW 12
69199: ARRAY
69200: ST_TO_ADDR
// if Crawls ( un ) then
69201: LD_VAR 0 2
69205: PPUSH
69206: CALL_OW 318
69210: IFFALSE 69221
// ComWalk ( un ) ;
69212: LD_VAR 0 2
69216: PPUSH
69217: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69221: LD_VAR 0 2
69225: PPUSH
69226: LD_INT 8
69228: PPUSH
69229: CALL_OW 336
// end ;
69233: PPOPN 3
69235: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69236: LD_EXP 61
69240: PUSH
69241: LD_EXP 105
69245: AND
69246: IFFALSE 69390
69248: GO 69250
69250: DISABLE
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69255: LD_ADDR_VAR 0 2
69259: PUSH
69260: LD_INT 22
69262: PUSH
69263: LD_OWVAR 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 21
69274: PUSH
69275: LD_INT 2
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: LD_INT 34
69287: PUSH
69288: LD_INT 12
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 34
69297: PUSH
69298: LD_INT 51
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 34
69307: PUSH
69308: LD_INT 32
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: PPUSH
69326: CALL_OW 69
69330: ST_TO_ADDR
// if not tmp then
69331: LD_VAR 0 2
69335: NOT
69336: IFFALSE 69340
// exit ;
69338: GO 69390
// for i in tmp do
69340: LD_ADDR_VAR 0 1
69344: PUSH
69345: LD_VAR 0 2
69349: PUSH
69350: FOR_IN
69351: IFFALSE 69388
// if GetCargo ( i , mat_artifact ) = 0 then
69353: LD_VAR 0 1
69357: PPUSH
69358: LD_INT 4
69360: PPUSH
69361: CALL_OW 289
69365: PUSH
69366: LD_INT 0
69368: EQUAL
69369: IFFALSE 69386
// SetCargo ( i , mat_siberit , 100 ) ;
69371: LD_VAR 0 1
69375: PPUSH
69376: LD_INT 3
69378: PPUSH
69379: LD_INT 100
69381: PPUSH
69382: CALL_OW 290
69386: GO 69350
69388: POP
69389: POP
// end ;
69390: PPOPN 2
69392: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69393: LD_EXP 61
69397: PUSH
69398: LD_EXP 106
69402: AND
69403: IFFALSE 69586
69405: GO 69407
69407: DISABLE
69408: LD_INT 0
69410: PPUSH
69411: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69412: LD_ADDR_VAR 0 2
69416: PUSH
69417: LD_INT 22
69419: PUSH
69420: LD_OWVAR 2
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PPUSH
69429: CALL_OW 69
69433: ST_TO_ADDR
// if not tmp then
69434: LD_VAR 0 2
69438: NOT
69439: IFFALSE 69443
// exit ;
69441: GO 69586
// for i := 1 to 2 do
69443: LD_ADDR_VAR 0 1
69447: PUSH
69448: DOUBLE
69449: LD_INT 1
69451: DEC
69452: ST_TO_ADDR
69453: LD_INT 2
69455: PUSH
69456: FOR_TO
69457: IFFALSE 69584
// begin uc_side := your_side ;
69459: LD_ADDR_OWVAR 20
69463: PUSH
69464: LD_OWVAR 2
69468: ST_TO_ADDR
// uc_nation := nation_american ;
69469: LD_ADDR_OWVAR 21
69473: PUSH
69474: LD_INT 1
69476: ST_TO_ADDR
// vc_chassis := us_morphling ;
69477: LD_ADDR_OWVAR 37
69481: PUSH
69482: LD_INT 5
69484: ST_TO_ADDR
// vc_engine := engine_siberite ;
69485: LD_ADDR_OWVAR 39
69489: PUSH
69490: LD_INT 3
69492: ST_TO_ADDR
// vc_control := control_computer ;
69493: LD_ADDR_OWVAR 38
69497: PUSH
69498: LD_INT 3
69500: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69501: LD_ADDR_OWVAR 40
69505: PUSH
69506: LD_INT 10
69508: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69509: LD_VAR 0 2
69513: PUSH
69514: LD_INT 1
69516: ARRAY
69517: PPUSH
69518: CALL_OW 310
69522: NOT
69523: IFFALSE 69570
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69525: CALL_OW 45
69529: PPUSH
69530: LD_VAR 0 2
69534: PUSH
69535: LD_INT 1
69537: ARRAY
69538: PPUSH
69539: CALL_OW 250
69543: PPUSH
69544: LD_VAR 0 2
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PPUSH
69553: CALL_OW 251
69557: PPUSH
69558: LD_INT 12
69560: PPUSH
69561: LD_INT 1
69563: PPUSH
69564: CALL_OW 50
69568: GO 69582
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69570: CALL_OW 45
69574: PPUSH
69575: LD_INT 1
69577: PPUSH
69578: CALL_OW 51
// end ;
69582: GO 69456
69584: POP
69585: POP
// end ;
69586: PPOPN 2
69588: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69589: LD_EXP 61
69593: PUSH
69594: LD_EXP 107
69598: AND
69599: IFFALSE 69821
69601: GO 69603
69603: DISABLE
69604: LD_INT 0
69606: PPUSH
69607: PPUSH
69608: PPUSH
69609: PPUSH
69610: PPUSH
69611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69612: LD_ADDR_VAR 0 6
69616: PUSH
69617: LD_INT 22
69619: PUSH
69620: LD_OWVAR 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 21
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: LD_INT 23
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: LIST
69660: PPUSH
69661: CALL_OW 69
69665: ST_TO_ADDR
// if not tmp then
69666: LD_VAR 0 6
69670: NOT
69671: IFFALSE 69675
// exit ;
69673: GO 69821
// s1 := rand ( 1 , 4 ) ;
69675: LD_ADDR_VAR 0 2
69679: PUSH
69680: LD_INT 1
69682: PPUSH
69683: LD_INT 4
69685: PPUSH
69686: CALL_OW 12
69690: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69691: LD_ADDR_VAR 0 4
69695: PUSH
69696: LD_VAR 0 6
69700: PUSH
69701: LD_INT 1
69703: ARRAY
69704: PPUSH
69705: LD_VAR 0 2
69709: PPUSH
69710: CALL_OW 259
69714: ST_TO_ADDR
// if s1 = 1 then
69715: LD_VAR 0 2
69719: PUSH
69720: LD_INT 1
69722: EQUAL
69723: IFFALSE 69743
// s2 := rand ( 2 , 4 ) else
69725: LD_ADDR_VAR 0 3
69729: PUSH
69730: LD_INT 2
69732: PPUSH
69733: LD_INT 4
69735: PPUSH
69736: CALL_OW 12
69740: ST_TO_ADDR
69741: GO 69751
// s2 := 1 ;
69743: LD_ADDR_VAR 0 3
69747: PUSH
69748: LD_INT 1
69750: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69751: LD_ADDR_VAR 0 5
69755: PUSH
69756: LD_VAR 0 6
69760: PUSH
69761: LD_INT 1
69763: ARRAY
69764: PPUSH
69765: LD_VAR 0 3
69769: PPUSH
69770: CALL_OW 259
69774: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69775: LD_VAR 0 6
69779: PUSH
69780: LD_INT 1
69782: ARRAY
69783: PPUSH
69784: LD_VAR 0 2
69788: PPUSH
69789: LD_VAR 0 5
69793: PPUSH
69794: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69798: LD_VAR 0 6
69802: PUSH
69803: LD_INT 1
69805: ARRAY
69806: PPUSH
69807: LD_VAR 0 3
69811: PPUSH
69812: LD_VAR 0 4
69816: PPUSH
69817: CALL_OW 237
// end ;
69821: PPOPN 6
69823: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69824: LD_EXP 61
69828: PUSH
69829: LD_EXP 108
69833: AND
69834: IFFALSE 69913
69836: GO 69838
69838: DISABLE
69839: LD_INT 0
69841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69842: LD_ADDR_VAR 0 1
69846: PUSH
69847: LD_INT 22
69849: PUSH
69850: LD_OWVAR 2
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 30
69861: PUSH
69862: LD_INT 3
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PPUSH
69873: CALL_OW 69
69877: ST_TO_ADDR
// if not tmp then
69878: LD_VAR 0 1
69882: NOT
69883: IFFALSE 69887
// exit ;
69885: GO 69913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69887: LD_VAR 0 1
69891: PUSH
69892: LD_INT 1
69894: PPUSH
69895: LD_VAR 0 1
69899: PPUSH
69900: CALL_OW 12
69904: ARRAY
69905: PPUSH
69906: LD_INT 1
69908: PPUSH
69909: CALL_OW 234
// end ;
69913: PPOPN 1
69915: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69916: LD_EXP 61
69920: PUSH
69921: LD_EXP 109
69925: AND
69926: IFFALSE 70038
69928: GO 69930
69930: DISABLE
69931: LD_INT 0
69933: PPUSH
69934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69935: LD_ADDR_VAR 0 2
69939: PUSH
69940: LD_INT 22
69942: PUSH
69943: LD_OWVAR 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: LD_INT 30
69957: PUSH
69958: LD_INT 27
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 30
69967: PUSH
69968: LD_INT 26
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 30
69977: PUSH
69978: LD_INT 28
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PPUSH
69995: CALL_OW 69
69999: ST_TO_ADDR
// if not tmp then
70000: LD_VAR 0 2
70004: NOT
70005: IFFALSE 70009
// exit ;
70007: GO 70038
// for i in tmp do
70009: LD_ADDR_VAR 0 1
70013: PUSH
70014: LD_VAR 0 2
70018: PUSH
70019: FOR_IN
70020: IFFALSE 70036
// SetLives ( i , 1 ) ;
70022: LD_VAR 0 1
70026: PPUSH
70027: LD_INT 1
70029: PPUSH
70030: CALL_OW 234
70034: GO 70019
70036: POP
70037: POP
// end ;
70038: PPOPN 2
70040: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70041: LD_EXP 61
70045: PUSH
70046: LD_EXP 110
70050: AND
70051: IFFALSE 70338
70053: GO 70055
70055: DISABLE
70056: LD_INT 0
70058: PPUSH
70059: PPUSH
70060: PPUSH
// begin i := rand ( 1 , 7 ) ;
70061: LD_ADDR_VAR 0 1
70065: PUSH
70066: LD_INT 1
70068: PPUSH
70069: LD_INT 7
70071: PPUSH
70072: CALL_OW 12
70076: ST_TO_ADDR
// case i of 1 :
70077: LD_VAR 0 1
70081: PUSH
70082: LD_INT 1
70084: DOUBLE
70085: EQUAL
70086: IFTRUE 70090
70088: GO 70100
70090: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70091: LD_STRING earthquake(getX(game), 0, 32)
70093: PPUSH
70094: CALL_OW 559
70098: GO 70338
70100: LD_INT 2
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70108
70106: GO 70122
70108: POP
// begin ToLua ( displayStucuk(); ) ;
70109: LD_STRING displayStucuk();
70111: PPUSH
70112: CALL_OW 559
// ResetFog ;
70116: CALL_OW 335
// end ; 3 :
70120: GO 70338
70122: LD_INT 3
70124: DOUBLE
70125: EQUAL
70126: IFTRUE 70130
70128: GO 70234
70130: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70131: LD_ADDR_VAR 0 2
70135: PUSH
70136: LD_INT 22
70138: PUSH
70139: LD_OWVAR 2
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 25
70150: PUSH
70151: LD_INT 1
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PPUSH
70162: CALL_OW 69
70166: ST_TO_ADDR
// if not tmp then
70167: LD_VAR 0 2
70171: NOT
70172: IFFALSE 70176
// exit ;
70174: GO 70338
// un := tmp [ rand ( 1 , tmp ) ] ;
70176: LD_ADDR_VAR 0 3
70180: PUSH
70181: LD_VAR 0 2
70185: PUSH
70186: LD_INT 1
70188: PPUSH
70189: LD_VAR 0 2
70193: PPUSH
70194: CALL_OW 12
70198: ARRAY
70199: ST_TO_ADDR
// if Crawls ( un ) then
70200: LD_VAR 0 3
70204: PPUSH
70205: CALL_OW 318
70209: IFFALSE 70220
// ComWalk ( un ) ;
70211: LD_VAR 0 3
70215: PPUSH
70216: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70220: LD_VAR 0 3
70224: PPUSH
70225: LD_INT 8
70227: PPUSH
70228: CALL_OW 336
// end ; 4 :
70232: GO 70338
70234: LD_INT 4
70236: DOUBLE
70237: EQUAL
70238: IFTRUE 70242
70240: GO 70316
70242: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70243: LD_ADDR_VAR 0 2
70247: PUSH
70248: LD_INT 22
70250: PUSH
70251: LD_OWVAR 2
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 30
70262: PUSH
70263: LD_INT 29
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PPUSH
70274: CALL_OW 69
70278: ST_TO_ADDR
// if not tmp then
70279: LD_VAR 0 2
70283: NOT
70284: IFFALSE 70288
// exit ;
70286: GO 70338
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70288: LD_VAR 0 2
70292: PUSH
70293: LD_INT 1
70295: ARRAY
70296: PPUSH
70297: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70301: LD_VAR 0 2
70305: PUSH
70306: LD_INT 1
70308: ARRAY
70309: PPUSH
70310: CALL_OW 65
// end ; 5 .. 7 :
70314: GO 70338
70316: LD_INT 5
70318: DOUBLE
70319: GREATEREQUAL
70320: IFFALSE 70328
70322: LD_INT 7
70324: DOUBLE
70325: LESSEQUAL
70326: IFTRUE 70330
70328: GO 70337
70330: POP
// StreamSibBomb ; end ;
70331: CALL 66575 0 0
70335: GO 70338
70337: POP
// end ;
70338: PPOPN 3
70340: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70341: LD_EXP 61
70345: PUSH
70346: LD_EXP 111
70350: AND
70351: IFFALSE 70507
70353: GO 70355
70355: DISABLE
70356: LD_INT 0
70358: PPUSH
70359: PPUSH
70360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70361: LD_ADDR_VAR 0 2
70365: PUSH
70366: LD_INT 81
70368: PUSH
70369: LD_OWVAR 2
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 2
70380: PUSH
70381: LD_INT 21
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 21
70393: PUSH
70394: LD_INT 2
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: LIST
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PPUSH
70410: CALL_OW 69
70414: ST_TO_ADDR
// if not tmp then
70415: LD_VAR 0 2
70419: NOT
70420: IFFALSE 70424
// exit ;
70422: GO 70507
// p := 0 ;
70424: LD_ADDR_VAR 0 3
70428: PUSH
70429: LD_INT 0
70431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70432: LD_INT 35
70434: PPUSH
70435: CALL_OW 67
// p := p + 1 ;
70439: LD_ADDR_VAR 0 3
70443: PUSH
70444: LD_VAR 0 3
70448: PUSH
70449: LD_INT 1
70451: PLUS
70452: ST_TO_ADDR
// for i in tmp do
70453: LD_ADDR_VAR 0 1
70457: PUSH
70458: LD_VAR 0 2
70462: PUSH
70463: FOR_IN
70464: IFFALSE 70495
// if GetLives ( i ) < 1000 then
70466: LD_VAR 0 1
70470: PPUSH
70471: CALL_OW 256
70475: PUSH
70476: LD_INT 1000
70478: LESS
70479: IFFALSE 70493
// SetLives ( i , 1000 ) ;
70481: LD_VAR 0 1
70485: PPUSH
70486: LD_INT 1000
70488: PPUSH
70489: CALL_OW 234
70493: GO 70463
70495: POP
70496: POP
// until p > 20 ;
70497: LD_VAR 0 3
70501: PUSH
70502: LD_INT 20
70504: GREATER
70505: IFFALSE 70432
// end ;
70507: PPOPN 3
70509: END
// every 0 0$1 trigger StreamModeActive and sTime do
70510: LD_EXP 61
70514: PUSH
70515: LD_EXP 112
70519: AND
70520: IFFALSE 70555
70522: GO 70524
70524: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70525: LD_INT 28
70527: PPUSH
70528: LD_OWVAR 2
70532: PPUSH
70533: LD_INT 2
70535: PPUSH
70536: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70540: LD_INT 30
70542: PPUSH
70543: LD_OWVAR 2
70547: PPUSH
70548: LD_INT 2
70550: PPUSH
70551: CALL_OW 322
// end ;
70555: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70556: LD_EXP 61
70560: PUSH
70561: LD_EXP 113
70565: AND
70566: IFFALSE 70687
70568: GO 70570
70570: DISABLE
70571: LD_INT 0
70573: PPUSH
70574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70575: LD_ADDR_VAR 0 2
70579: PUSH
70580: LD_INT 22
70582: PUSH
70583: LD_OWVAR 2
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 21
70594: PUSH
70595: LD_INT 1
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 3
70604: PUSH
70605: LD_INT 23
70607: PUSH
70608: LD_INT 0
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: LIST
70623: PPUSH
70624: CALL_OW 69
70628: ST_TO_ADDR
// if not tmp then
70629: LD_VAR 0 2
70633: NOT
70634: IFFALSE 70638
// exit ;
70636: GO 70687
// for i in tmp do
70638: LD_ADDR_VAR 0 1
70642: PUSH
70643: LD_VAR 0 2
70647: PUSH
70648: FOR_IN
70649: IFFALSE 70685
// begin if Crawls ( i ) then
70651: LD_VAR 0 1
70655: PPUSH
70656: CALL_OW 318
70660: IFFALSE 70671
// ComWalk ( i ) ;
70662: LD_VAR 0 1
70666: PPUSH
70667: CALL_OW 138
// SetClass ( i , 2 ) ;
70671: LD_VAR 0 1
70675: PPUSH
70676: LD_INT 2
70678: PPUSH
70679: CALL_OW 336
// end ;
70683: GO 70648
70685: POP
70686: POP
// end ;
70687: PPOPN 2
70689: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70690: LD_EXP 61
70694: PUSH
70695: LD_EXP 114
70699: AND
70700: IFFALSE 70988
70702: GO 70704
70704: DISABLE
70705: LD_INT 0
70707: PPUSH
70708: PPUSH
70709: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70710: LD_OWVAR 2
70714: PPUSH
70715: LD_INT 9
70717: PPUSH
70718: LD_INT 1
70720: PPUSH
70721: LD_INT 1
70723: PPUSH
70724: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70728: LD_INT 9
70730: PPUSH
70731: LD_OWVAR 2
70735: PPUSH
70736: CALL_OW 343
// uc_side := 9 ;
70740: LD_ADDR_OWVAR 20
70744: PUSH
70745: LD_INT 9
70747: ST_TO_ADDR
// uc_nation := 2 ;
70748: LD_ADDR_OWVAR 21
70752: PUSH
70753: LD_INT 2
70755: ST_TO_ADDR
// hc_name := Dark Warrior ;
70756: LD_ADDR_OWVAR 26
70760: PUSH
70761: LD_STRING Dark Warrior
70763: ST_TO_ADDR
// hc_gallery :=  ;
70764: LD_ADDR_OWVAR 33
70768: PUSH
70769: LD_STRING 
70771: ST_TO_ADDR
// hc_noskilllimit := true ;
70772: LD_ADDR_OWVAR 76
70776: PUSH
70777: LD_INT 1
70779: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70780: LD_ADDR_OWVAR 31
70784: PUSH
70785: LD_INT 30
70787: PUSH
70788: LD_INT 30
70790: PUSH
70791: LD_INT 30
70793: PUSH
70794: LD_INT 30
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: ST_TO_ADDR
// un := CreateHuman ;
70803: LD_ADDR_VAR 0 3
70807: PUSH
70808: CALL_OW 44
70812: ST_TO_ADDR
// hc_noskilllimit := false ;
70813: LD_ADDR_OWVAR 76
70817: PUSH
70818: LD_INT 0
70820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70821: LD_VAR 0 3
70825: PPUSH
70826: LD_INT 1
70828: PPUSH
70829: CALL_OW 51
// ToLua ( playRanger() ) ;
70833: LD_STRING playRanger()
70835: PPUSH
70836: CALL_OW 559
// p := 0 ;
70840: LD_ADDR_VAR 0 2
70844: PUSH
70845: LD_INT 0
70847: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70848: LD_INT 35
70850: PPUSH
70851: CALL_OW 67
// p := p + 1 ;
70855: LD_ADDR_VAR 0 2
70859: PUSH
70860: LD_VAR 0 2
70864: PUSH
70865: LD_INT 1
70867: PLUS
70868: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70869: LD_VAR 0 3
70873: PPUSH
70874: CALL_OW 256
70878: PUSH
70879: LD_INT 1000
70881: LESS
70882: IFFALSE 70896
// SetLives ( un , 1000 ) ;
70884: LD_VAR 0 3
70888: PPUSH
70889: LD_INT 1000
70891: PPUSH
70892: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70896: LD_VAR 0 3
70900: PPUSH
70901: LD_INT 81
70903: PUSH
70904: LD_OWVAR 2
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 91
70915: PUSH
70916: LD_VAR 0 3
70920: PUSH
70921: LD_INT 30
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 69
70937: PPUSH
70938: LD_VAR 0 3
70942: PPUSH
70943: CALL_OW 74
70947: PPUSH
70948: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70952: LD_VAR 0 2
70956: PUSH
70957: LD_INT 80
70959: GREATER
70960: PUSH
70961: LD_VAR 0 3
70965: PPUSH
70966: CALL_OW 301
70970: OR
70971: IFFALSE 70848
// if un then
70973: LD_VAR 0 3
70977: IFFALSE 70988
// RemoveUnit ( un ) ;
70979: LD_VAR 0 3
70983: PPUSH
70984: CALL_OW 64
// end ;
70988: PPOPN 3
70990: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70991: LD_EXP 115
70995: IFFALSE 71111
70997: GO 70999
70999: DISABLE
71000: LD_INT 0
71002: PPUSH
71003: PPUSH
71004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71005: LD_ADDR_VAR 0 2
71009: PUSH
71010: LD_INT 81
71012: PUSH
71013: LD_OWVAR 2
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 21
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PPUSH
71036: CALL_OW 69
71040: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71041: LD_STRING playComputer()
71043: PPUSH
71044: CALL_OW 559
// if not tmp then
71048: LD_VAR 0 2
71052: NOT
71053: IFFALSE 71057
// exit ;
71055: GO 71111
// for i in tmp do
71057: LD_ADDR_VAR 0 1
71061: PUSH
71062: LD_VAR 0 2
71066: PUSH
71067: FOR_IN
71068: IFFALSE 71109
// for j := 1 to 4 do
71070: LD_ADDR_VAR 0 3
71074: PUSH
71075: DOUBLE
71076: LD_INT 1
71078: DEC
71079: ST_TO_ADDR
71080: LD_INT 4
71082: PUSH
71083: FOR_TO
71084: IFFALSE 71105
// SetSkill ( i , j , 10 ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 3
71095: PPUSH
71096: LD_INT 10
71098: PPUSH
71099: CALL_OW 237
71103: GO 71083
71105: POP
71106: POP
71107: GO 71067
71109: POP
71110: POP
// end ;
71111: PPOPN 3
71113: END
// every 0 0$1 trigger s30 do var i , tmp ;
71114: LD_EXP 116
71118: IFFALSE 71187
71120: GO 71122
71122: DISABLE
71123: LD_INT 0
71125: PPUSH
71126: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71127: LD_ADDR_VAR 0 2
71131: PUSH
71132: LD_INT 22
71134: PUSH
71135: LD_OWVAR 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PPUSH
71144: CALL_OW 69
71148: ST_TO_ADDR
// if not tmp then
71149: LD_VAR 0 2
71153: NOT
71154: IFFALSE 71158
// exit ;
71156: GO 71187
// for i in tmp do
71158: LD_ADDR_VAR 0 1
71162: PUSH
71163: LD_VAR 0 2
71167: PUSH
71168: FOR_IN
71169: IFFALSE 71185
// SetLives ( i , 300 ) ;
71171: LD_VAR 0 1
71175: PPUSH
71176: LD_INT 300
71178: PPUSH
71179: CALL_OW 234
71183: GO 71168
71185: POP
71186: POP
// end ;
71187: PPOPN 2
71189: END
// every 0 0$1 trigger s60 do var i , tmp ;
71190: LD_EXP 117
71194: IFFALSE 71263
71196: GO 71198
71198: DISABLE
71199: LD_INT 0
71201: PPUSH
71202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71203: LD_ADDR_VAR 0 2
71207: PUSH
71208: LD_INT 22
71210: PUSH
71211: LD_OWVAR 2
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PPUSH
71220: CALL_OW 69
71224: ST_TO_ADDR
// if not tmp then
71225: LD_VAR 0 2
71229: NOT
71230: IFFALSE 71234
// exit ;
71232: GO 71263
// for i in tmp do
71234: LD_ADDR_VAR 0 1
71238: PUSH
71239: LD_VAR 0 2
71243: PUSH
71244: FOR_IN
71245: IFFALSE 71261
// SetLives ( i , 600 ) ;
71247: LD_VAR 0 1
71251: PPUSH
71252: LD_INT 600
71254: PPUSH
71255: CALL_OW 234
71259: GO 71244
71261: POP
71262: POP
// end ;
71263: PPOPN 2
71265: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71266: LD_INT 0
71268: PPUSH
// case cmd of 301 :
71269: LD_VAR 0 1
71273: PUSH
71274: LD_INT 301
71276: DOUBLE
71277: EQUAL
71278: IFTRUE 71282
71280: GO 71314
71282: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71283: LD_VAR 0 6
71287: PPUSH
71288: LD_VAR 0 7
71292: PPUSH
71293: LD_VAR 0 8
71297: PPUSH
71298: LD_VAR 0 4
71302: PPUSH
71303: LD_VAR 0 5
71307: PPUSH
71308: CALL 72523 0 5
71312: GO 71435
71314: LD_INT 302
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71322
71320: GO 71359
71322: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71323: LD_VAR 0 6
71327: PPUSH
71328: LD_VAR 0 7
71332: PPUSH
71333: LD_VAR 0 8
71337: PPUSH
71338: LD_VAR 0 9
71342: PPUSH
71343: LD_VAR 0 4
71347: PPUSH
71348: LD_VAR 0 5
71352: PPUSH
71353: CALL 72614 0 6
71357: GO 71435
71359: LD_INT 303
71361: DOUBLE
71362: EQUAL
71363: IFTRUE 71367
71365: GO 71404
71367: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71368: LD_VAR 0 6
71372: PPUSH
71373: LD_VAR 0 7
71377: PPUSH
71378: LD_VAR 0 8
71382: PPUSH
71383: LD_VAR 0 9
71387: PPUSH
71388: LD_VAR 0 4
71392: PPUSH
71393: LD_VAR 0 5
71397: PPUSH
71398: CALL 71440 0 6
71402: GO 71435
71404: LD_INT 304
71406: DOUBLE
71407: EQUAL
71408: IFTRUE 71412
71410: GO 71434
71412: POP
// hHackTeleport ( unit , x , y ) ; end ;
71413: LD_VAR 0 2
71417: PPUSH
71418: LD_VAR 0 4
71422: PPUSH
71423: LD_VAR 0 5
71427: PPUSH
71428: CALL 73207 0 3
71432: GO 71435
71434: POP
// end ;
71435: LD_VAR 0 12
71439: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71440: LD_INT 0
71442: PPUSH
71443: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71444: LD_VAR 0 1
71448: PUSH
71449: LD_INT 1
71451: LESS
71452: PUSH
71453: LD_VAR 0 1
71457: PUSH
71458: LD_INT 3
71460: GREATER
71461: OR
71462: PUSH
71463: LD_VAR 0 5
71467: PPUSH
71468: LD_VAR 0 6
71472: PPUSH
71473: CALL_OW 428
71477: OR
71478: IFFALSE 71482
// exit ;
71480: GO 72210
// uc_side := your_side ;
71482: LD_ADDR_OWVAR 20
71486: PUSH
71487: LD_OWVAR 2
71491: ST_TO_ADDR
// uc_nation := nation ;
71492: LD_ADDR_OWVAR 21
71496: PUSH
71497: LD_VAR 0 1
71501: ST_TO_ADDR
// bc_level = 1 ;
71502: LD_ADDR_OWVAR 43
71506: PUSH
71507: LD_INT 1
71509: ST_TO_ADDR
// case btype of 1 :
71510: LD_VAR 0 2
71514: PUSH
71515: LD_INT 1
71517: DOUBLE
71518: EQUAL
71519: IFTRUE 71523
71521: GO 71534
71523: POP
// bc_type := b_depot ; 2 :
71524: LD_ADDR_OWVAR 42
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
71532: GO 72154
71534: LD_INT 2
71536: DOUBLE
71537: EQUAL
71538: IFTRUE 71542
71540: GO 71553
71542: POP
// bc_type := b_warehouse ; 3 :
71543: LD_ADDR_OWVAR 42
71547: PUSH
71548: LD_INT 1
71550: ST_TO_ADDR
71551: GO 72154
71553: LD_INT 3
71555: DOUBLE
71556: EQUAL
71557: IFTRUE 71561
71559: GO 71572
71561: POP
// bc_type := b_lab ; 4 .. 9 :
71562: LD_ADDR_OWVAR 42
71566: PUSH
71567: LD_INT 6
71569: ST_TO_ADDR
71570: GO 72154
71572: LD_INT 4
71574: DOUBLE
71575: GREATEREQUAL
71576: IFFALSE 71584
71578: LD_INT 9
71580: DOUBLE
71581: LESSEQUAL
71582: IFTRUE 71586
71584: GO 71646
71586: POP
// begin bc_type := b_lab_half ;
71587: LD_ADDR_OWVAR 42
71591: PUSH
71592: LD_INT 7
71594: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71595: LD_ADDR_OWVAR 44
71599: PUSH
71600: LD_INT 10
71602: PUSH
71603: LD_INT 11
71605: PUSH
71606: LD_INT 12
71608: PUSH
71609: LD_INT 15
71611: PUSH
71612: LD_INT 14
71614: PUSH
71615: LD_INT 13
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: PUSH
71626: LD_VAR 0 2
71630: PUSH
71631: LD_INT 3
71633: MINUS
71634: ARRAY
71635: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71636: LD_ADDR_OWVAR 45
71640: PUSH
71641: LD_INT 9
71643: ST_TO_ADDR
// end ; 10 .. 13 :
71644: GO 72154
71646: LD_INT 10
71648: DOUBLE
71649: GREATEREQUAL
71650: IFFALSE 71658
71652: LD_INT 13
71654: DOUBLE
71655: LESSEQUAL
71656: IFTRUE 71660
71658: GO 71737
71660: POP
// begin bc_type := b_lab_full ;
71661: LD_ADDR_OWVAR 42
71665: PUSH
71666: LD_INT 8
71668: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71669: LD_ADDR_OWVAR 44
71673: PUSH
71674: LD_INT 10
71676: PUSH
71677: LD_INT 12
71679: PUSH
71680: LD_INT 14
71682: PUSH
71683: LD_INT 13
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: PUSH
71692: LD_VAR 0 2
71696: PUSH
71697: LD_INT 9
71699: MINUS
71700: ARRAY
71701: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71702: LD_ADDR_OWVAR 45
71706: PUSH
71707: LD_INT 11
71709: PUSH
71710: LD_INT 15
71712: PUSH
71713: LD_INT 12
71715: PUSH
71716: LD_INT 15
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_INT 9
71732: MINUS
71733: ARRAY
71734: ST_TO_ADDR
// end ; 14 :
71735: GO 72154
71737: LD_INT 14
71739: DOUBLE
71740: EQUAL
71741: IFTRUE 71745
71743: GO 71756
71745: POP
// bc_type := b_workshop ; 15 :
71746: LD_ADDR_OWVAR 42
71750: PUSH
71751: LD_INT 2
71753: ST_TO_ADDR
71754: GO 72154
71756: LD_INT 15
71758: DOUBLE
71759: EQUAL
71760: IFTRUE 71764
71762: GO 71775
71764: POP
// bc_type := b_factory ; 16 :
71765: LD_ADDR_OWVAR 42
71769: PUSH
71770: LD_INT 3
71772: ST_TO_ADDR
71773: GO 72154
71775: LD_INT 16
71777: DOUBLE
71778: EQUAL
71779: IFTRUE 71783
71781: GO 71794
71783: POP
// bc_type := b_ext_gun ; 17 :
71784: LD_ADDR_OWVAR 42
71788: PUSH
71789: LD_INT 17
71791: ST_TO_ADDR
71792: GO 72154
71794: LD_INT 17
71796: DOUBLE
71797: EQUAL
71798: IFTRUE 71802
71800: GO 71830
71802: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71803: LD_ADDR_OWVAR 42
71807: PUSH
71808: LD_INT 19
71810: PUSH
71811: LD_INT 23
71813: PUSH
71814: LD_INT 19
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: LIST
71821: PUSH
71822: LD_VAR 0 1
71826: ARRAY
71827: ST_TO_ADDR
71828: GO 72154
71830: LD_INT 18
71832: DOUBLE
71833: EQUAL
71834: IFTRUE 71838
71836: GO 71849
71838: POP
// bc_type := b_ext_radar ; 19 :
71839: LD_ADDR_OWVAR 42
71843: PUSH
71844: LD_INT 20
71846: ST_TO_ADDR
71847: GO 72154
71849: LD_INT 19
71851: DOUBLE
71852: EQUAL
71853: IFTRUE 71857
71855: GO 71868
71857: POP
// bc_type := b_ext_radio ; 20 :
71858: LD_ADDR_OWVAR 42
71862: PUSH
71863: LD_INT 22
71865: ST_TO_ADDR
71866: GO 72154
71868: LD_INT 20
71870: DOUBLE
71871: EQUAL
71872: IFTRUE 71876
71874: GO 71887
71876: POP
// bc_type := b_ext_siberium ; 21 :
71877: LD_ADDR_OWVAR 42
71881: PUSH
71882: LD_INT 21
71884: ST_TO_ADDR
71885: GO 72154
71887: LD_INT 21
71889: DOUBLE
71890: EQUAL
71891: IFTRUE 71895
71893: GO 71906
71895: POP
// bc_type := b_ext_computer ; 22 :
71896: LD_ADDR_OWVAR 42
71900: PUSH
71901: LD_INT 24
71903: ST_TO_ADDR
71904: GO 72154
71906: LD_INT 22
71908: DOUBLE
71909: EQUAL
71910: IFTRUE 71914
71912: GO 71925
71914: POP
// bc_type := b_ext_track ; 23 :
71915: LD_ADDR_OWVAR 42
71919: PUSH
71920: LD_INT 16
71922: ST_TO_ADDR
71923: GO 72154
71925: LD_INT 23
71927: DOUBLE
71928: EQUAL
71929: IFTRUE 71933
71931: GO 71944
71933: POP
// bc_type := b_ext_laser ; 24 :
71934: LD_ADDR_OWVAR 42
71938: PUSH
71939: LD_INT 25
71941: ST_TO_ADDR
71942: GO 72154
71944: LD_INT 24
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71952
71950: GO 71963
71952: POP
// bc_type := b_control_tower ; 25 :
71953: LD_ADDR_OWVAR 42
71957: PUSH
71958: LD_INT 36
71960: ST_TO_ADDR
71961: GO 72154
71963: LD_INT 25
71965: DOUBLE
71966: EQUAL
71967: IFTRUE 71971
71969: GO 71982
71971: POP
// bc_type := b_breastwork ; 26 :
71972: LD_ADDR_OWVAR 42
71976: PUSH
71977: LD_INT 31
71979: ST_TO_ADDR
71980: GO 72154
71982: LD_INT 26
71984: DOUBLE
71985: EQUAL
71986: IFTRUE 71990
71988: GO 72001
71990: POP
// bc_type := b_bunker ; 27 :
71991: LD_ADDR_OWVAR 42
71995: PUSH
71996: LD_INT 32
71998: ST_TO_ADDR
71999: GO 72154
72001: LD_INT 27
72003: DOUBLE
72004: EQUAL
72005: IFTRUE 72009
72007: GO 72020
72009: POP
// bc_type := b_turret ; 28 :
72010: LD_ADDR_OWVAR 42
72014: PUSH
72015: LD_INT 33
72017: ST_TO_ADDR
72018: GO 72154
72020: LD_INT 28
72022: DOUBLE
72023: EQUAL
72024: IFTRUE 72028
72026: GO 72039
72028: POP
// bc_type := b_armoury ; 29 :
72029: LD_ADDR_OWVAR 42
72033: PUSH
72034: LD_INT 4
72036: ST_TO_ADDR
72037: GO 72154
72039: LD_INT 29
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72047
72045: GO 72058
72047: POP
// bc_type := b_barracks ; 30 :
72048: LD_ADDR_OWVAR 42
72052: PUSH
72053: LD_INT 5
72055: ST_TO_ADDR
72056: GO 72154
72058: LD_INT 30
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72066
72064: GO 72077
72066: POP
// bc_type := b_solar_power ; 31 :
72067: LD_ADDR_OWVAR 42
72071: PUSH
72072: LD_INT 27
72074: ST_TO_ADDR
72075: GO 72154
72077: LD_INT 31
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72096
72085: POP
// bc_type := b_oil_power ; 32 :
72086: LD_ADDR_OWVAR 42
72090: PUSH
72091: LD_INT 26
72093: ST_TO_ADDR
72094: GO 72154
72096: LD_INT 32
72098: DOUBLE
72099: EQUAL
72100: IFTRUE 72104
72102: GO 72115
72104: POP
// bc_type := b_siberite_power ; 33 :
72105: LD_ADDR_OWVAR 42
72109: PUSH
72110: LD_INT 28
72112: ST_TO_ADDR
72113: GO 72154
72115: LD_INT 33
72117: DOUBLE
72118: EQUAL
72119: IFTRUE 72123
72121: GO 72134
72123: POP
// bc_type := b_oil_mine ; 34 :
72124: LD_ADDR_OWVAR 42
72128: PUSH
72129: LD_INT 29
72131: ST_TO_ADDR
72132: GO 72154
72134: LD_INT 34
72136: DOUBLE
72137: EQUAL
72138: IFTRUE 72142
72140: GO 72153
72142: POP
// bc_type := b_siberite_mine ; end ;
72143: LD_ADDR_OWVAR 42
72147: PUSH
72148: LD_INT 30
72150: ST_TO_ADDR
72151: GO 72154
72153: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72154: LD_ADDR_VAR 0 8
72158: PUSH
72159: LD_VAR 0 5
72163: PPUSH
72164: LD_VAR 0 6
72168: PPUSH
72169: LD_VAR 0 3
72173: PPUSH
72174: CALL_OW 47
72178: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72179: LD_OWVAR 42
72183: PUSH
72184: LD_INT 32
72186: PUSH
72187: LD_INT 33
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: IN
72194: IFFALSE 72210
// PlaceWeaponTurret ( b , weapon ) ;
72196: LD_VAR 0 8
72200: PPUSH
72201: LD_VAR 0 4
72205: PPUSH
72206: CALL_OW 431
// end ;
72210: LD_VAR 0 7
72214: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72215: LD_INT 0
72217: PPUSH
72218: PPUSH
72219: PPUSH
72220: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72221: LD_ADDR_VAR 0 4
72225: PUSH
72226: LD_INT 22
72228: PUSH
72229: LD_OWVAR 2
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 2
72240: PUSH
72241: LD_INT 30
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 30
72253: PUSH
72254: LD_INT 1
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: LIST
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PPUSH
72270: CALL_OW 69
72274: ST_TO_ADDR
// if not tmp then
72275: LD_VAR 0 4
72279: NOT
72280: IFFALSE 72284
// exit ;
72282: GO 72343
// for i in tmp do
72284: LD_ADDR_VAR 0 2
72288: PUSH
72289: LD_VAR 0 4
72293: PUSH
72294: FOR_IN
72295: IFFALSE 72341
// for j = 1 to 3 do
72297: LD_ADDR_VAR 0 3
72301: PUSH
72302: DOUBLE
72303: LD_INT 1
72305: DEC
72306: ST_TO_ADDR
72307: LD_INT 3
72309: PUSH
72310: FOR_TO
72311: IFFALSE 72337
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72313: LD_VAR 0 2
72317: PPUSH
72318: CALL_OW 274
72322: PPUSH
72323: LD_VAR 0 3
72327: PPUSH
72328: LD_INT 99999
72330: PPUSH
72331: CALL_OW 277
72335: GO 72310
72337: POP
72338: POP
72339: GO 72294
72341: POP
72342: POP
// end ;
72343: LD_VAR 0 1
72347: RET
// export function hHackSetLevel10 ; var i , j ; begin
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
72352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72353: LD_ADDR_VAR 0 2
72357: PUSH
72358: LD_INT 21
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PPUSH
72368: CALL_OW 69
72372: PUSH
72373: FOR_IN
72374: IFFALSE 72426
// if IsSelected ( i ) then
72376: LD_VAR 0 2
72380: PPUSH
72381: CALL_OW 306
72385: IFFALSE 72424
// begin for j := 1 to 4 do
72387: LD_ADDR_VAR 0 3
72391: PUSH
72392: DOUBLE
72393: LD_INT 1
72395: DEC
72396: ST_TO_ADDR
72397: LD_INT 4
72399: PUSH
72400: FOR_TO
72401: IFFALSE 72422
// SetSkill ( i , j , 10 ) ;
72403: LD_VAR 0 2
72407: PPUSH
72408: LD_VAR 0 3
72412: PPUSH
72413: LD_INT 10
72415: PPUSH
72416: CALL_OW 237
72420: GO 72400
72422: POP
72423: POP
// end ;
72424: GO 72373
72426: POP
72427: POP
// end ;
72428: LD_VAR 0 1
72432: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72433: LD_INT 0
72435: PPUSH
72436: PPUSH
72437: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: LD_INT 22
72445: PUSH
72446: LD_OWVAR 2
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 21
72457: PUSH
72458: LD_INT 1
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PPUSH
72469: CALL_OW 69
72473: PUSH
72474: FOR_IN
72475: IFFALSE 72516
// begin for j := 1 to 4 do
72477: LD_ADDR_VAR 0 3
72481: PUSH
72482: DOUBLE
72483: LD_INT 1
72485: DEC
72486: ST_TO_ADDR
72487: LD_INT 4
72489: PUSH
72490: FOR_TO
72491: IFFALSE 72512
// SetSkill ( i , j , 10 ) ;
72493: LD_VAR 0 2
72497: PPUSH
72498: LD_VAR 0 3
72502: PPUSH
72503: LD_INT 10
72505: PPUSH
72506: CALL_OW 237
72510: GO 72490
72512: POP
72513: POP
// end ;
72514: GO 72474
72516: POP
72517: POP
// end ;
72518: LD_VAR 0 1
72522: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72523: LD_INT 0
72525: PPUSH
// uc_side := your_side ;
72526: LD_ADDR_OWVAR 20
72530: PUSH
72531: LD_OWVAR 2
72535: ST_TO_ADDR
// uc_nation := nation ;
72536: LD_ADDR_OWVAR 21
72540: PUSH
72541: LD_VAR 0 1
72545: ST_TO_ADDR
// InitHc ;
72546: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72550: LD_INT 0
72552: PPUSH
72553: LD_VAR 0 2
72557: PPUSH
72558: LD_VAR 0 3
72562: PPUSH
72563: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72567: LD_VAR 0 4
72571: PPUSH
72572: LD_VAR 0 5
72576: PPUSH
72577: CALL_OW 428
72581: PUSH
72582: LD_INT 0
72584: EQUAL
72585: IFFALSE 72609
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72587: CALL_OW 44
72591: PPUSH
72592: LD_VAR 0 4
72596: PPUSH
72597: LD_VAR 0 5
72601: PPUSH
72602: LD_INT 1
72604: PPUSH
72605: CALL_OW 48
// end ;
72609: LD_VAR 0 6
72613: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72614: LD_INT 0
72616: PPUSH
72617: PPUSH
// uc_side := your_side ;
72618: LD_ADDR_OWVAR 20
72622: PUSH
72623: LD_OWVAR 2
72627: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72628: LD_VAR 0 1
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: LD_INT 2
72638: PUSH
72639: LD_INT 3
72641: PUSH
72642: LD_INT 4
72644: PUSH
72645: LD_INT 5
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: IN
72655: IFFALSE 72667
// uc_nation := nation_american else
72657: LD_ADDR_OWVAR 21
72661: PUSH
72662: LD_INT 1
72664: ST_TO_ADDR
72665: GO 72710
// if chassis in [ 11 , 12 , 13 , 14 ] then
72667: LD_VAR 0 1
72671: PUSH
72672: LD_INT 11
72674: PUSH
72675: LD_INT 12
72677: PUSH
72678: LD_INT 13
72680: PUSH
72681: LD_INT 14
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: IN
72690: IFFALSE 72702
// uc_nation := nation_arabian else
72692: LD_ADDR_OWVAR 21
72696: PUSH
72697: LD_INT 2
72699: ST_TO_ADDR
72700: GO 72710
// uc_nation := nation_russian ;
72702: LD_ADDR_OWVAR 21
72706: PUSH
72707: LD_INT 3
72709: ST_TO_ADDR
// vc_chassis := chassis ;
72710: LD_ADDR_OWVAR 37
72714: PUSH
72715: LD_VAR 0 1
72719: ST_TO_ADDR
// vc_engine := engine ;
72720: LD_ADDR_OWVAR 39
72724: PUSH
72725: LD_VAR 0 2
72729: ST_TO_ADDR
// vc_control := control ;
72730: LD_ADDR_OWVAR 38
72734: PUSH
72735: LD_VAR 0 3
72739: ST_TO_ADDR
// vc_weapon := weapon ;
72740: LD_ADDR_OWVAR 40
72744: PUSH
72745: LD_VAR 0 4
72749: ST_TO_ADDR
// un := CreateVehicle ;
72750: LD_ADDR_VAR 0 8
72754: PUSH
72755: CALL_OW 45
72759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72760: LD_VAR 0 8
72764: PPUSH
72765: LD_INT 0
72767: PPUSH
72768: LD_INT 5
72770: PPUSH
72771: CALL_OW 12
72775: PPUSH
72776: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72780: LD_VAR 0 8
72784: PPUSH
72785: LD_VAR 0 5
72789: PPUSH
72790: LD_VAR 0 6
72794: PPUSH
72795: LD_INT 1
72797: PPUSH
72798: CALL_OW 48
// end ;
72802: LD_VAR 0 7
72806: RET
// export hInvincible ; every 1 do
72807: GO 72809
72809: DISABLE
// hInvincible := [ ] ;
72810: LD_ADDR_EXP 118
72814: PUSH
72815: EMPTY
72816: ST_TO_ADDR
72817: END
// every 10 do var i ;
72818: GO 72820
72820: DISABLE
72821: LD_INT 0
72823: PPUSH
// begin enable ;
72824: ENABLE
// if not hInvincible then
72825: LD_EXP 118
72829: NOT
72830: IFFALSE 72834
// exit ;
72832: GO 72878
// for i in hInvincible do
72834: LD_ADDR_VAR 0 1
72838: PUSH
72839: LD_EXP 118
72843: PUSH
72844: FOR_IN
72845: IFFALSE 72876
// if GetLives ( i ) < 1000 then
72847: LD_VAR 0 1
72851: PPUSH
72852: CALL_OW 256
72856: PUSH
72857: LD_INT 1000
72859: LESS
72860: IFFALSE 72874
// SetLives ( i , 1000 ) ;
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_INT 1000
72869: PPUSH
72870: CALL_OW 234
72874: GO 72844
72876: POP
72877: POP
// end ;
72878: PPOPN 1
72880: END
// export function hHackInvincible ; var i ; begin
72881: LD_INT 0
72883: PPUSH
72884: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72885: LD_ADDR_VAR 0 2
72889: PUSH
72890: LD_INT 2
72892: PUSH
72893: LD_INT 21
72895: PUSH
72896: LD_INT 1
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 21
72905: PUSH
72906: LD_INT 2
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: LIST
72917: PPUSH
72918: CALL_OW 69
72922: PUSH
72923: FOR_IN
72924: IFFALSE 72985
// if IsSelected ( i ) then
72926: LD_VAR 0 2
72930: PPUSH
72931: CALL_OW 306
72935: IFFALSE 72983
// begin if i in hInvincible then
72937: LD_VAR 0 2
72941: PUSH
72942: LD_EXP 118
72946: IN
72947: IFFALSE 72967
// hInvincible := hInvincible diff i else
72949: LD_ADDR_EXP 118
72953: PUSH
72954: LD_EXP 118
72958: PUSH
72959: LD_VAR 0 2
72963: DIFF
72964: ST_TO_ADDR
72965: GO 72983
// hInvincible := hInvincible union i ;
72967: LD_ADDR_EXP 118
72971: PUSH
72972: LD_EXP 118
72976: PUSH
72977: LD_VAR 0 2
72981: UNION
72982: ST_TO_ADDR
// end ;
72983: GO 72923
72985: POP
72986: POP
// end ;
72987: LD_VAR 0 1
72991: RET
// export function hHackInvisible ; var i , j ; begin
72992: LD_INT 0
72994: PPUSH
72995: PPUSH
72996: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72997: LD_ADDR_VAR 0 2
73001: PUSH
73002: LD_INT 21
73004: PUSH
73005: LD_INT 1
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PPUSH
73012: CALL_OW 69
73016: PUSH
73017: FOR_IN
73018: IFFALSE 73042
// if IsSelected ( i ) then
73020: LD_VAR 0 2
73024: PPUSH
73025: CALL_OW 306
73029: IFFALSE 73040
// ComForceInvisible ( i ) ;
73031: LD_VAR 0 2
73035: PPUSH
73036: CALL_OW 496
73040: GO 73017
73042: POP
73043: POP
// end ;
73044: LD_VAR 0 1
73048: RET
// export function hHackChangeYourSide ; begin
73049: LD_INT 0
73051: PPUSH
// if your_side = 8 then
73052: LD_OWVAR 2
73056: PUSH
73057: LD_INT 8
73059: EQUAL
73060: IFFALSE 73072
// your_side := 0 else
73062: LD_ADDR_OWVAR 2
73066: PUSH
73067: LD_INT 0
73069: ST_TO_ADDR
73070: GO 73086
// your_side := your_side + 1 ;
73072: LD_ADDR_OWVAR 2
73076: PUSH
73077: LD_OWVAR 2
73081: PUSH
73082: LD_INT 1
73084: PLUS
73085: ST_TO_ADDR
// end ;
73086: LD_VAR 0 1
73090: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73091: LD_INT 0
73093: PPUSH
73094: PPUSH
73095: PPUSH
// for i in all_units do
73096: LD_ADDR_VAR 0 2
73100: PUSH
73101: LD_OWVAR 3
73105: PUSH
73106: FOR_IN
73107: IFFALSE 73185
// if IsSelected ( i ) then
73109: LD_VAR 0 2
73113: PPUSH
73114: CALL_OW 306
73118: IFFALSE 73183
// begin j := GetSide ( i ) ;
73120: LD_ADDR_VAR 0 3
73124: PUSH
73125: LD_VAR 0 2
73129: PPUSH
73130: CALL_OW 255
73134: ST_TO_ADDR
// if j = 8 then
73135: LD_VAR 0 3
73139: PUSH
73140: LD_INT 8
73142: EQUAL
73143: IFFALSE 73155
// j := 0 else
73145: LD_ADDR_VAR 0 3
73149: PUSH
73150: LD_INT 0
73152: ST_TO_ADDR
73153: GO 73169
// j := j + 1 ;
73155: LD_ADDR_VAR 0 3
73159: PUSH
73160: LD_VAR 0 3
73164: PUSH
73165: LD_INT 1
73167: PLUS
73168: ST_TO_ADDR
// SetSide ( i , j ) ;
73169: LD_VAR 0 2
73173: PPUSH
73174: LD_VAR 0 3
73178: PPUSH
73179: CALL_OW 235
// end ;
73183: GO 73106
73185: POP
73186: POP
// end ;
73187: LD_VAR 0 1
73191: RET
// export function hHackFog ; begin
73192: LD_INT 0
73194: PPUSH
// FogOff ( true ) ;
73195: LD_INT 1
73197: PPUSH
73198: CALL_OW 344
// end ;
73202: LD_VAR 0 1
73206: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73207: LD_INT 0
73209: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73210: LD_VAR 0 1
73214: PPUSH
73215: LD_VAR 0 2
73219: PPUSH
73220: LD_VAR 0 3
73224: PPUSH
73225: LD_INT 1
73227: PPUSH
73228: LD_INT 1
73230: PPUSH
73231: CALL_OW 483
// CenterOnXY ( x , y ) ;
73235: LD_VAR 0 2
73239: PPUSH
73240: LD_VAR 0 3
73244: PPUSH
73245: CALL_OW 84
// end ;
73249: LD_VAR 0 4
73253: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73254: LD_INT 0
73256: PPUSH
73257: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73258: LD_VAR 0 1
73262: NOT
73263: PUSH
73264: LD_VAR 0 2
73268: PPUSH
73269: LD_VAR 0 3
73273: PPUSH
73274: CALL_OW 488
73278: NOT
73279: OR
73280: PUSH
73281: LD_VAR 0 1
73285: PPUSH
73286: CALL_OW 266
73290: PUSH
73291: LD_INT 3
73293: NONEQUAL
73294: PUSH
73295: LD_VAR 0 1
73299: PPUSH
73300: CALL_OW 247
73304: PUSH
73305: LD_INT 1
73307: EQUAL
73308: NOT
73309: AND
73310: OR
73311: IFFALSE 73315
// exit ;
73313: GO 73597
// if GetType ( factory ) = unit_human then
73315: LD_VAR 0 1
73319: PPUSH
73320: CALL_OW 247
73324: PUSH
73325: LD_INT 1
73327: EQUAL
73328: IFFALSE 73345
// factory := IsInUnit ( factory ) ;
73330: LD_ADDR_VAR 0 1
73334: PUSH
73335: LD_VAR 0 1
73339: PPUSH
73340: CALL_OW 310
73344: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73345: LD_VAR 0 1
73349: PPUSH
73350: CALL_OW 266
73354: PUSH
73355: LD_INT 3
73357: NONEQUAL
73358: IFFALSE 73362
// exit ;
73360: GO 73597
// for i := 1 to Count ( factoryWaypoints ) do
73362: LD_ADDR_VAR 0 5
73366: PUSH
73367: DOUBLE
73368: LD_INT 1
73370: DEC
73371: ST_TO_ADDR
73372: LD_EXP 119
73376: PPUSH
73377: CALL 17772 0 1
73381: PUSH
73382: FOR_TO
73383: IFFALSE 73545
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
73385: LD_VAR 0 2
73389: PPUSH
73390: LD_VAR 0 3
73394: PPUSH
73395: CALL_OW 428
73399: PUSH
73400: LD_EXP 119
73404: PUSH
73405: LD_VAR 0 5
73409: ARRAY
73410: PUSH
73411: LD_INT 2
73413: ARRAY
73414: EQUAL
73415: IFFALSE 73447
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73417: LD_ADDR_EXP 119
73421: PUSH
73422: LD_EXP 119
73426: PPUSH
73427: LD_VAR 0 5
73431: PPUSH
73432: CALL_OW 3
73436: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73437: CALL 73602 0 0
// exit ;
73441: POP
73442: POP
73443: GO 73597
// end else
73445: GO 73543
// if factory = factoryWaypoints [ i ] [ 2 ] then
73447: LD_VAR 0 1
73451: PUSH
73452: LD_EXP 119
73456: PUSH
73457: LD_VAR 0 5
73461: ARRAY
73462: PUSH
73463: LD_INT 2
73465: ARRAY
73466: EQUAL
73467: IFFALSE 73543
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
73469: LD_ADDR_EXP 119
73473: PUSH
73474: LD_EXP 119
73478: PPUSH
73479: LD_VAR 0 5
73483: PPUSH
73484: CALL_OW 3
73488: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73489: LD_ADDR_EXP 119
73493: PUSH
73494: LD_EXP 119
73498: PPUSH
73499: LD_VAR 0 1
73503: PPUSH
73504: CALL_OW 255
73508: PUSH
73509: LD_VAR 0 1
73513: PUSH
73514: LD_VAR 0 2
73518: PUSH
73519: LD_VAR 0 3
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PPUSH
73530: CALL 53522 0 2
73534: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73535: CALL 73602 0 0
// exit ;
73539: POP
73540: POP
73541: GO 73597
// end ; end ;
73543: GO 73382
73545: POP
73546: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
73547: LD_ADDR_EXP 119
73551: PUSH
73552: LD_EXP 119
73556: PPUSH
73557: LD_VAR 0 1
73561: PPUSH
73562: CALL_OW 255
73566: PUSH
73567: LD_VAR 0 1
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_VAR 0 3
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: PPUSH
73588: CALL 53522 0 2
73592: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73593: CALL 73602 0 0
// end ;
73597: LD_VAR 0 4
73601: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73602: LD_INT 0
73604: PPUSH
73605: PPUSH
73606: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73607: LD_STRING resetFactoryWaypoint();
73609: PPUSH
73610: CALL_OW 559
// if factoryWaypoints then
73614: LD_EXP 119
73618: IFFALSE 73739
// begin list := factoryWaypoints ;
73620: LD_ADDR_VAR 0 3
73624: PUSH
73625: LD_EXP 119
73629: ST_TO_ADDR
// for i := 1 to list do
73630: LD_ADDR_VAR 0 2
73634: PUSH
73635: DOUBLE
73636: LD_INT 1
73638: DEC
73639: ST_TO_ADDR
73640: LD_VAR 0 3
73644: PUSH
73645: FOR_TO
73646: IFFALSE 73737
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73648: LD_STRING setFactoryWaypointXY(
73650: PUSH
73651: LD_VAR 0 3
73655: PUSH
73656: LD_VAR 0 2
73660: ARRAY
73661: PUSH
73662: LD_INT 1
73664: ARRAY
73665: STR
73666: PUSH
73667: LD_STRING ,
73669: STR
73670: PUSH
73671: LD_VAR 0 3
73675: PUSH
73676: LD_VAR 0 2
73680: ARRAY
73681: PUSH
73682: LD_INT 2
73684: ARRAY
73685: STR
73686: PUSH
73687: LD_STRING ,
73689: STR
73690: PUSH
73691: LD_VAR 0 3
73695: PUSH
73696: LD_VAR 0 2
73700: ARRAY
73701: PUSH
73702: LD_INT 3
73704: ARRAY
73705: STR
73706: PUSH
73707: LD_STRING ,
73709: STR
73710: PUSH
73711: LD_VAR 0 3
73715: PUSH
73716: LD_VAR 0 2
73720: ARRAY
73721: PUSH
73722: LD_INT 4
73724: ARRAY
73725: STR
73726: PUSH
73727: LD_STRING )
73729: STR
73730: PPUSH
73731: CALL_OW 559
73735: GO 73645
73737: POP
73738: POP
// end ; end ;
73739: LD_VAR 0 1
73743: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73744: LD_INT 0
73746: PPUSH
// if HexInfo ( x , y ) = warehouse then
73747: LD_VAR 0 2
73751: PPUSH
73752: LD_VAR 0 3
73756: PPUSH
73757: CALL_OW 428
73761: PUSH
73762: LD_VAR 0 1
73766: EQUAL
73767: IFFALSE 73794
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73769: LD_ADDR_EXP 121
73773: PUSH
73774: LD_EXP 121
73778: PPUSH
73779: LD_VAR 0 1
73783: PPUSH
73784: LD_INT 0
73786: PPUSH
73787: CALL_OW 1
73791: ST_TO_ADDR
73792: GO 73845
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73794: LD_ADDR_EXP 121
73798: PUSH
73799: LD_EXP 121
73803: PPUSH
73804: LD_VAR 0 1
73808: PPUSH
73809: LD_VAR 0 1
73813: PPUSH
73814: CALL_OW 255
73818: PUSH
73819: LD_VAR 0 1
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_VAR 0 3
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: PPUSH
73840: CALL_OW 1
73844: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73845: CALL 73854 0 0
// end ;
73849: LD_VAR 0 4
73853: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73854: LD_INT 0
73856: PPUSH
73857: PPUSH
73858: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73859: LD_STRING resetWarehouseGatheringPoints();
73861: PPUSH
73862: CALL_OW 559
// if warehouseGatheringPoints then
73866: LD_EXP 121
73870: IFFALSE 73996
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73872: LD_ADDR_VAR 0 3
73876: PUSH
73877: LD_EXP 121
73881: PPUSH
73882: CALL 57424 0 1
73886: ST_TO_ADDR
// for i := 1 to list do
73887: LD_ADDR_VAR 0 2
73891: PUSH
73892: DOUBLE
73893: LD_INT 1
73895: DEC
73896: ST_TO_ADDR
73897: LD_VAR 0 3
73901: PUSH
73902: FOR_TO
73903: IFFALSE 73994
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73905: LD_STRING setWarehouseGatheringPointXY(
73907: PUSH
73908: LD_VAR 0 3
73912: PUSH
73913: LD_VAR 0 2
73917: ARRAY
73918: PUSH
73919: LD_INT 1
73921: ARRAY
73922: STR
73923: PUSH
73924: LD_STRING ,
73926: STR
73927: PUSH
73928: LD_VAR 0 3
73932: PUSH
73933: LD_VAR 0 2
73937: ARRAY
73938: PUSH
73939: LD_INT 2
73941: ARRAY
73942: STR
73943: PUSH
73944: LD_STRING ,
73946: STR
73947: PUSH
73948: LD_VAR 0 3
73952: PUSH
73953: LD_VAR 0 2
73957: ARRAY
73958: PUSH
73959: LD_INT 3
73961: ARRAY
73962: STR
73963: PUSH
73964: LD_STRING ,
73966: STR
73967: PUSH
73968: LD_VAR 0 3
73972: PUSH
73973: LD_VAR 0 2
73977: ARRAY
73978: PUSH
73979: LD_INT 4
73981: ARRAY
73982: STR
73983: PUSH
73984: LD_STRING )
73986: STR
73987: PPUSH
73988: CALL_OW 559
73992: GO 73902
73994: POP
73995: POP
// end ; end ;
73996: LD_VAR 0 1
74000: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74001: LD_EXP 121
74005: IFFALSE 74690
74007: GO 74009
74009: DISABLE
74010: LD_INT 0
74012: PPUSH
74013: PPUSH
74014: PPUSH
74015: PPUSH
74016: PPUSH
74017: PPUSH
74018: PPUSH
74019: PPUSH
74020: PPUSH
// begin enable ;
74021: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74022: LD_ADDR_VAR 0 3
74026: PUSH
74027: LD_EXP 121
74031: PPUSH
74032: CALL 57424 0 1
74036: ST_TO_ADDR
// if not list then
74037: LD_VAR 0 3
74041: NOT
74042: IFFALSE 74046
// exit ;
74044: GO 74690
// for i := 1 to list do
74046: LD_ADDR_VAR 0 1
74050: PUSH
74051: DOUBLE
74052: LD_INT 1
74054: DEC
74055: ST_TO_ADDR
74056: LD_VAR 0 3
74060: PUSH
74061: FOR_TO
74062: IFFALSE 74688
// begin depot := list [ i ] [ 2 ] ;
74064: LD_ADDR_VAR 0 8
74068: PUSH
74069: LD_VAR 0 3
74073: PUSH
74074: LD_VAR 0 1
74078: ARRAY
74079: PUSH
74080: LD_INT 2
74082: ARRAY
74083: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74084: LD_ADDR_VAR 0 5
74088: PUSH
74089: LD_VAR 0 3
74093: PUSH
74094: LD_VAR 0 1
74098: ARRAY
74099: PUSH
74100: LD_INT 1
74102: ARRAY
74103: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74104: LD_VAR 0 8
74108: PPUSH
74109: CALL_OW 301
74113: PUSH
74114: LD_VAR 0 5
74118: PUSH
74119: LD_VAR 0 8
74123: PPUSH
74124: CALL_OW 255
74128: NONEQUAL
74129: OR
74130: IFFALSE 74159
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74132: LD_ADDR_EXP 121
74136: PUSH
74137: LD_EXP 121
74141: PPUSH
74142: LD_VAR 0 8
74146: PPUSH
74147: LD_INT 0
74149: PPUSH
74150: CALL_OW 1
74154: ST_TO_ADDR
// exit ;
74155: POP
74156: POP
74157: GO 74690
// end ; x := list [ i ] [ 3 ] ;
74159: LD_ADDR_VAR 0 6
74163: PUSH
74164: LD_VAR 0 3
74168: PUSH
74169: LD_VAR 0 1
74173: ARRAY
74174: PUSH
74175: LD_INT 3
74177: ARRAY
74178: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74179: LD_ADDR_VAR 0 7
74183: PUSH
74184: LD_VAR 0 3
74188: PUSH
74189: LD_VAR 0 1
74193: ARRAY
74194: PUSH
74195: LD_INT 4
74197: ARRAY
74198: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74199: LD_ADDR_VAR 0 9
74203: PUSH
74204: LD_VAR 0 6
74208: PPUSH
74209: LD_VAR 0 7
74213: PPUSH
74214: LD_INT 16
74216: PPUSH
74217: CALL 56008 0 3
74221: ST_TO_ADDR
// if not cratesNearbyPoint then
74222: LD_VAR 0 9
74226: NOT
74227: IFFALSE 74233
// exit ;
74229: POP
74230: POP
74231: GO 74690
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74233: LD_ADDR_VAR 0 4
74237: PUSH
74238: LD_INT 22
74240: PUSH
74241: LD_VAR 0 5
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: PUSH
74250: LD_INT 3
74252: PUSH
74253: LD_INT 60
74255: PUSH
74256: EMPTY
74257: LIST
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 91
74265: PUSH
74266: LD_VAR 0 8
74270: PUSH
74271: LD_INT 6
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 2
74281: PUSH
74282: LD_INT 25
74284: PUSH
74285: LD_INT 2
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 25
74294: PUSH
74295: LD_INT 16
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: PPUSH
74313: CALL_OW 69
74317: PUSH
74318: LD_VAR 0 8
74322: PPUSH
74323: CALL_OW 313
74327: PPUSH
74328: LD_INT 3
74330: PUSH
74331: LD_INT 60
74333: PUSH
74334: EMPTY
74335: LIST
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 2
74343: PUSH
74344: LD_INT 25
74346: PUSH
74347: LD_INT 2
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 25
74356: PUSH
74357: LD_INT 16
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PPUSH
74373: CALL_OW 72
74377: UNION
74378: ST_TO_ADDR
// if tmp then
74379: LD_VAR 0 4
74383: IFFALSE 74463
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74385: LD_ADDR_VAR 0 4
74389: PUSH
74390: LD_VAR 0 4
74394: PPUSH
74395: LD_INT 3
74397: PPUSH
74398: CALL 53837 0 2
74402: ST_TO_ADDR
// for j in tmp do
74403: LD_ADDR_VAR 0 2
74407: PUSH
74408: LD_VAR 0 4
74412: PUSH
74413: FOR_IN
74414: IFFALSE 74457
// begin if IsInUnit ( j ) then
74416: LD_VAR 0 2
74420: PPUSH
74421: CALL_OW 310
74425: IFFALSE 74436
// ComExit ( j ) ;
74427: LD_VAR 0 2
74431: PPUSH
74432: CALL 53920 0 1
// AddComCollect ( j , x , y ) ;
74436: LD_VAR 0 2
74440: PPUSH
74441: LD_VAR 0 6
74445: PPUSH
74446: LD_VAR 0 7
74450: PPUSH
74451: CALL_OW 177
// end ;
74455: GO 74413
74457: POP
74458: POP
// exit ;
74459: POP
74460: POP
74461: GO 74690
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74463: LD_ADDR_VAR 0 4
74467: PUSH
74468: LD_INT 22
74470: PUSH
74471: LD_VAR 0 5
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 91
74482: PUSH
74483: LD_VAR 0 8
74487: PUSH
74488: LD_INT 8
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: LD_INT 34
74501: PUSH
74502: LD_INT 12
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: LD_INT 34
74511: PUSH
74512: LD_INT 51
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 34
74521: PUSH
74522: LD_INT 32
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 34
74531: PUSH
74532: LD_INT 89
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: PPUSH
74551: CALL_OW 69
74555: ST_TO_ADDR
// if tmp then
74556: LD_VAR 0 4
74560: IFFALSE 74686
// begin for j in tmp do
74562: LD_ADDR_VAR 0 2
74566: PUSH
74567: LD_VAR 0 4
74571: PUSH
74572: FOR_IN
74573: IFFALSE 74684
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74575: LD_VAR 0 2
74579: PPUSH
74580: CALL_OW 262
74584: PUSH
74585: LD_INT 3
74587: EQUAL
74588: PUSH
74589: LD_VAR 0 2
74593: PPUSH
74594: CALL_OW 261
74598: PUSH
74599: LD_INT 20
74601: GREATER
74602: OR
74603: PUSH
74604: LD_VAR 0 2
74608: PPUSH
74609: CALL_OW 314
74613: NOT
74614: AND
74615: PUSH
74616: LD_VAR 0 2
74620: PPUSH
74621: CALL_OW 263
74625: PUSH
74626: LD_INT 1
74628: NONEQUAL
74629: PUSH
74630: LD_VAR 0 2
74634: PPUSH
74635: CALL_OW 311
74639: OR
74640: AND
74641: IFFALSE 74682
// begin ComCollect ( j , x , y ) ;
74643: LD_VAR 0 2
74647: PPUSH
74648: LD_VAR 0 6
74652: PPUSH
74653: LD_VAR 0 7
74657: PPUSH
74658: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74662: LD_VAR 0 2
74666: PPUSH
74667: LD_VAR 0 8
74671: PPUSH
74672: CALL_OW 172
// exit ;
74676: POP
74677: POP
74678: POP
74679: POP
74680: GO 74690
// end ;
74682: GO 74572
74684: POP
74685: POP
// end ; end ;
74686: GO 74061
74688: POP
74689: POP
// end ; end_of_file
74690: PPOPN 9
74692: END
// export function SOS_UnitDestroyed ( un ) ; begin
74693: LD_INT 0
74695: PPUSH
// ComRadiation ( un ) ;
74696: LD_VAR 0 1
74700: PPUSH
74701: CALL 75762 0 1
// end ;
74705: LD_VAR 0 2
74709: RET
// export function SOS_UnitKamikazed ( un ) ; begin
74710: LD_INT 0
74712: PPUSH
// ComRadiation ( un ) ;
74713: LD_VAR 0 1
74717: PPUSH
74718: CALL 75762 0 1
// end ;
74722: LD_VAR 0 2
74726: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74727: LD_INT 0
74729: PPUSH
// end ;
74730: LD_VAR 0 4
74734: RET
// export function SOS_Command ( cmd ) ; begin
74735: LD_INT 0
74737: PPUSH
// end ;
74738: LD_VAR 0 2
74742: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74743: LD_INT 0
74745: PPUSH
// end ;
74746: LD_VAR 0 6
74750: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
74751: LD_INT 0
74753: PPUSH
74754: PPUSH
74755: PPUSH
74756: PPUSH
// if not vehicle or not factory then
74757: LD_VAR 0 1
74761: NOT
74762: PUSH
74763: LD_VAR 0 2
74767: NOT
74768: OR
74769: IFFALSE 74773
// exit ;
74771: GO 75353
// if not factoryWaypoints then
74773: LD_EXP 119
74777: NOT
74778: IFFALSE 74782
// exit ;
74780: GO 75353
// for i := 1 to Count ( factoryWaypoints ) do
74782: LD_ADDR_VAR 0 4
74786: PUSH
74787: DOUBLE
74788: LD_INT 1
74790: DEC
74791: ST_TO_ADDR
74792: LD_EXP 119
74796: PPUSH
74797: CALL 17772 0 1
74801: PUSH
74802: FOR_TO
74803: IFFALSE 75351
// if factoryWaypoints [ i ] [ 2 ] = factory then
74805: LD_EXP 119
74809: PUSH
74810: LD_VAR 0 4
74814: ARRAY
74815: PUSH
74816: LD_INT 2
74818: ARRAY
74819: PUSH
74820: LD_VAR 0 2
74824: EQUAL
74825: IFFALSE 75349
// begin if GetControl ( vehicle ) = control_manual then
74827: LD_VAR 0 1
74831: PPUSH
74832: CALL_OW 263
74836: PUSH
74837: LD_INT 1
74839: EQUAL
74840: IFFALSE 75202
// begin driver := IsDrivenBy ( vehicle ) ;
74842: LD_ADDR_VAR 0 5
74846: PUSH
74847: LD_VAR 0 1
74851: PPUSH
74852: CALL_OW 311
74856: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
74857: LD_VAR 0 5
74861: PUSH
74862: LD_EXP 120
74866: IN
74867: PUSH
74868: LD_VAR 0 1
74872: PUSH
74873: LD_EXP 120
74877: IN
74878: OR
74879: IFFALSE 74885
// exit ;
74881: POP
74882: POP
74883: GO 75353
// if not HasTask ( driver ) then
74885: LD_VAR 0 5
74889: PPUSH
74890: CALL_OW 314
74894: NOT
74895: IFFALSE 75200
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
74897: LD_ADDR_EXP 120
74901: PUSH
74902: LD_EXP 120
74906: PPUSH
74907: LD_VAR 0 5
74911: PPUSH
74912: CALL 53522 0 2
74916: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
74917: LD_ADDR_EXP 120
74921: PUSH
74922: LD_EXP 120
74926: PPUSH
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL 53522 0 2
74936: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
74937: LD_ADDR_VAR 0 6
74941: PUSH
74942: LD_EXP 119
74946: PUSH
74947: LD_VAR 0 4
74951: ARRAY
74952: PUSH
74953: LD_INT 3
74955: ARRAY
74956: PPUSH
74957: LD_EXP 119
74961: PUSH
74962: LD_VAR 0 4
74966: ARRAY
74967: PUSH
74968: LD_INT 4
74970: ARRAY
74971: PPUSH
74972: CALL_OW 428
74976: ST_TO_ADDR
// if hex then
74977: LD_VAR 0 6
74981: IFFALSE 74999
// ComMoveUnit ( driver , hex ) else
74983: LD_VAR 0 5
74987: PPUSH
74988: LD_VAR 0 6
74992: PPUSH
74993: CALL_OW 112
74997: GO 75083
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
74999: LD_VAR 0 1
75003: PPUSH
75004: LD_EXP 119
75008: PUSH
75009: LD_VAR 0 4
75013: ARRAY
75014: PUSH
75015: LD_INT 3
75017: ARRAY
75018: PPUSH
75019: LD_EXP 119
75023: PUSH
75024: LD_VAR 0 4
75028: ARRAY
75029: PUSH
75030: LD_INT 4
75032: ARRAY
75033: PPUSH
75034: CALL_OW 297
75038: PUSH
75039: LD_INT 0
75041: GREATER
75042: IFFALSE 75083
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75044: LD_VAR 0 5
75048: PPUSH
75049: LD_EXP 119
75053: PUSH
75054: LD_VAR 0 4
75058: ARRAY
75059: PUSH
75060: LD_INT 3
75062: ARRAY
75063: PPUSH
75064: LD_EXP 119
75068: PUSH
75069: LD_VAR 0 4
75073: ARRAY
75074: PUSH
75075: LD_INT 4
75077: ARRAY
75078: PPUSH
75079: CALL_OW 111
// AddComExitVehicle ( driver ) ;
75083: LD_VAR 0 5
75087: PPUSH
75088: CALL_OW 181
// if Multiplayer then
75092: LD_OWVAR 4
75096: IFFALSE 75145
// begin repeat wait ( 10 ) ;
75098: LD_INT 10
75100: PPUSH
75101: CALL_OW 67
// until not IsInUnit ( driver ) ;
75105: LD_VAR 0 5
75109: PPUSH
75110: CALL_OW 310
75114: NOT
75115: IFFALSE 75098
// if not HasTask ( driver ) then
75117: LD_VAR 0 5
75121: PPUSH
75122: CALL_OW 314
75126: NOT
75127: IFFALSE 75143
// ComEnterUnit ( driver , factory ) ;
75129: LD_VAR 0 5
75133: PPUSH
75134: LD_VAR 0 2
75138: PPUSH
75139: CALL_OW 120
// end else
75143: GO 75159
// AddComEnterUnit ( driver , factory ) ;
75145: LD_VAR 0 5
75149: PPUSH
75150: LD_VAR 0 2
75154: PPUSH
75155: CALL_OW 180
// wait ( 0 0$1 ) ;
75159: LD_INT 35
75161: PPUSH
75162: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
75166: LD_ADDR_EXP 120
75170: PUSH
75171: LD_EXP 120
75175: PUSH
75176: LD_VAR 0 5
75180: DIFF
75181: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
75182: LD_ADDR_EXP 120
75186: PUSH
75187: LD_EXP 120
75191: PUSH
75192: LD_VAR 0 1
75196: DIFF
75197: ST_TO_ADDR
// break ;
75198: GO 75351
// end ; end else
75200: GO 75349
// if GetControl ( vehicle ) = control_remote then
75202: LD_VAR 0 1
75206: PPUSH
75207: CALL_OW 263
75211: PUSH
75212: LD_INT 2
75214: EQUAL
75215: IFFALSE 75301
// begin wait ( 0 0$2 ) ;
75217: LD_INT 70
75219: PPUSH
75220: CALL_OW 67
// repeat wait ( 10 ) ;
75224: LD_INT 10
75226: PPUSH
75227: CALL_OW 67
// Connect ( vehicle ) ;
75231: LD_VAR 0 1
75235: PPUSH
75236: CALL 23978 0 1
// until IsControledBy ( vehicle ) ;
75240: LD_VAR 0 1
75244: PPUSH
75245: CALL_OW 312
75249: IFFALSE 75224
// wait ( 10 ) ;
75251: LD_INT 10
75253: PPUSH
75254: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75258: LD_VAR 0 1
75262: PPUSH
75263: LD_EXP 119
75267: PUSH
75268: LD_VAR 0 4
75272: ARRAY
75273: PUSH
75274: LD_INT 3
75276: ARRAY
75277: PPUSH
75278: LD_EXP 119
75282: PUSH
75283: LD_VAR 0 4
75287: ARRAY
75288: PUSH
75289: LD_INT 4
75291: ARRAY
75292: PPUSH
75293: CALL_OW 111
// break ;
75297: GO 75351
// end else
75299: GO 75349
// begin wait ( 0 0$3 ) ;
75301: LD_INT 105
75303: PPUSH
75304: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75308: LD_VAR 0 1
75312: PPUSH
75313: LD_EXP 119
75317: PUSH
75318: LD_VAR 0 4
75322: ARRAY
75323: PUSH
75324: LD_INT 3
75326: ARRAY
75327: PPUSH
75328: LD_EXP 119
75332: PUSH
75333: LD_VAR 0 4
75337: ARRAY
75338: PUSH
75339: LD_INT 4
75341: ARRAY
75342: PPUSH
75343: CALL_OW 111
// break ;
75347: GO 75351
// end ; end ;
75349: GO 74802
75351: POP
75352: POP
// end ;
75353: LD_VAR 0 3
75357: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75358: LD_INT 0
75360: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75361: LD_VAR 0 1
75365: PUSH
75366: LD_INT 250
75368: EQUAL
75369: PUSH
75370: LD_VAR 0 2
75374: PPUSH
75375: CALL_OW 264
75379: PUSH
75380: LD_INT 81
75382: EQUAL
75383: AND
75384: IFFALSE 75405
// MinerPlaceMine ( unit , x , y ) ;
75386: LD_VAR 0 2
75390: PPUSH
75391: LD_VAR 0 4
75395: PPUSH
75396: LD_VAR 0 5
75400: PPUSH
75401: CALL 78497 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75405: LD_VAR 0 1
75409: PUSH
75410: LD_INT 251
75412: EQUAL
75413: PUSH
75414: LD_VAR 0 2
75418: PPUSH
75419: CALL_OW 264
75423: PUSH
75424: LD_INT 81
75426: EQUAL
75427: AND
75428: IFFALSE 75449
// MinerDetonateMine ( unit , x , y ) ;
75430: LD_VAR 0 2
75434: PPUSH
75435: LD_VAR 0 4
75439: PPUSH
75440: LD_VAR 0 5
75444: PPUSH
75445: CALL 78772 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
75449: LD_VAR 0 1
75453: PUSH
75454: LD_INT 252
75456: EQUAL
75457: PUSH
75458: LD_VAR 0 2
75462: PPUSH
75463: CALL_OW 264
75467: PUSH
75468: LD_INT 81
75470: EQUAL
75471: AND
75472: IFFALSE 75493
// MinerCreateMinefield ( unit , x , y ) ;
75474: LD_VAR 0 2
75478: PPUSH
75479: LD_VAR 0 4
75483: PPUSH
75484: LD_VAR 0 5
75488: PPUSH
75489: CALL 79189 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75493: LD_VAR 0 1
75497: PUSH
75498: LD_INT 253
75500: EQUAL
75501: PUSH
75502: LD_VAR 0 2
75506: PPUSH
75507: CALL_OW 257
75511: PUSH
75512: LD_INT 5
75514: EQUAL
75515: AND
75516: IFFALSE 75537
// ComBinocular ( unit , x , y ) ;
75518: LD_VAR 0 2
75522: PPUSH
75523: LD_VAR 0 4
75527: PPUSH
75528: LD_VAR 0 5
75532: PPUSH
75533: CALL 79558 0 3
// if selectedUnit then
75537: LD_VAR 0 3
75541: IFFALSE 75597
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75543: LD_VAR 0 1
75547: PUSH
75548: LD_INT 254
75550: EQUAL
75551: PUSH
75552: LD_VAR 0 2
75556: PPUSH
75557: CALL_OW 264
75561: PUSH
75562: LD_INT 99
75564: EQUAL
75565: AND
75566: PUSH
75567: LD_VAR 0 3
75571: PPUSH
75572: CALL_OW 263
75576: PUSH
75577: LD_INT 3
75579: EQUAL
75580: AND
75581: IFFALSE 75597
// HackDestroyVehicle ( unit , selectedUnit ) ;
75583: LD_VAR 0 2
75587: PPUSH
75588: LD_VAR 0 3
75592: PPUSH
75593: CALL 77861 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75597: LD_VAR 0 1
75601: PUSH
75602: LD_INT 255
75604: EQUAL
75605: PUSH
75606: LD_VAR 0 2
75610: PPUSH
75611: CALL_OW 264
75615: PUSH
75616: LD_INT 14
75618: PUSH
75619: LD_INT 53
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: IN
75626: AND
75627: PUSH
75628: LD_VAR 0 4
75632: PPUSH
75633: LD_VAR 0 5
75637: PPUSH
75638: CALL_OW 488
75642: AND
75643: IFFALSE 75667
// CutTreeXYR ( unit , x , y , 12 ) ;
75645: LD_VAR 0 2
75649: PPUSH
75650: LD_VAR 0 4
75654: PPUSH
75655: LD_VAR 0 5
75659: PPUSH
75660: LD_INT 12
75662: PPUSH
75663: CALL 75858 0 4
// if cmd = 256 then
75667: LD_VAR 0 1
75671: PUSH
75672: LD_INT 256
75674: EQUAL
75675: IFFALSE 75696
// SetFactoryWaypoint ( unit , x , y ) ;
75677: LD_VAR 0 2
75681: PPUSH
75682: LD_VAR 0 4
75686: PPUSH
75687: LD_VAR 0 5
75691: PPUSH
75692: CALL 73254 0 3
// if cmd = 257 then
75696: LD_VAR 0 1
75700: PUSH
75701: LD_INT 257
75703: EQUAL
75704: IFFALSE 75725
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75706: LD_VAR 0 2
75710: PPUSH
75711: LD_VAR 0 4
75715: PPUSH
75716: LD_VAR 0 5
75720: PPUSH
75721: CALL 73744 0 3
// if cmd = 258 then
75725: LD_VAR 0 1
75729: PUSH
75730: LD_INT 258
75732: EQUAL
75733: IFFALSE 75757
// BurnTreeXYR ( unit , x , y , 8 ) ;
75735: LD_VAR 0 2
75739: PPUSH
75740: LD_VAR 0 4
75744: PPUSH
75745: LD_VAR 0 5
75749: PPUSH
75750: LD_INT 8
75752: PPUSH
75753: CALL 76252 0 4
// end ;
75757: LD_VAR 0 6
75761: RET
// export function ComRadiation ( un ) ; var eff ; begin
75762: LD_INT 0
75764: PPUSH
75765: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 264
75775: PUSH
75776: LD_INT 91
75778: NONEQUAL
75779: IFFALSE 75783
// exit ;
75781: GO 75853
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75783: LD_INT 68
75785: PPUSH
75786: LD_VAR 0 1
75790: PPUSH
75791: CALL_OW 255
75795: PPUSH
75796: CALL_OW 321
75800: PUSH
75801: LD_INT 2
75803: EQUAL
75804: IFFALSE 75816
// eff := 50 else
75806: LD_ADDR_VAR 0 3
75810: PUSH
75811: LD_INT 50
75813: ST_TO_ADDR
75814: GO 75824
// eff := 25 ;
75816: LD_ADDR_VAR 0 3
75820: PUSH
75821: LD_INT 25
75823: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75824: LD_VAR 0 1
75828: PPUSH
75829: CALL_OW 250
75833: PPUSH
75834: LD_VAR 0 1
75838: PPUSH
75839: CALL_OW 251
75843: PPUSH
75844: LD_VAR 0 3
75848: PPUSH
75849: CALL_OW 495
// end ;
75853: LD_VAR 0 2
75857: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75858: LD_INT 0
75860: PPUSH
75861: PPUSH
75862: PPUSH
75863: PPUSH
75864: PPUSH
75865: PPUSH
75866: PPUSH
75867: PPUSH
75868: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
75869: LD_VAR 0 1
75873: PPUSH
75874: CALL_OW 302
75878: NOT
75879: PUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: LD_VAR 0 3
75889: PPUSH
75890: CALL_OW 488
75894: NOT
75895: OR
75896: PUSH
75897: LD_VAR 0 4
75901: NOT
75902: OR
75903: IFFALSE 75907
// exit ;
75905: GO 76247
// list := [ ] ;
75907: LD_ADDR_VAR 0 13
75911: PUSH
75912: EMPTY
75913: ST_TO_ADDR
// if x - r < 0 then
75914: LD_VAR 0 2
75918: PUSH
75919: LD_VAR 0 4
75923: MINUS
75924: PUSH
75925: LD_INT 0
75927: LESS
75928: IFFALSE 75940
// min_x := 0 else
75930: LD_ADDR_VAR 0 7
75934: PUSH
75935: LD_INT 0
75937: ST_TO_ADDR
75938: GO 75956
// min_x := x - r ;
75940: LD_ADDR_VAR 0 7
75944: PUSH
75945: LD_VAR 0 2
75949: PUSH
75950: LD_VAR 0 4
75954: MINUS
75955: ST_TO_ADDR
// if y - r < 0 then
75956: LD_VAR 0 3
75960: PUSH
75961: LD_VAR 0 4
75965: MINUS
75966: PUSH
75967: LD_INT 0
75969: LESS
75970: IFFALSE 75982
// min_y := 0 else
75972: LD_ADDR_VAR 0 8
75976: PUSH
75977: LD_INT 0
75979: ST_TO_ADDR
75980: GO 75998
// min_y := y - r ;
75982: LD_ADDR_VAR 0 8
75986: PUSH
75987: LD_VAR 0 3
75991: PUSH
75992: LD_VAR 0 4
75996: MINUS
75997: ST_TO_ADDR
// max_x := x + r ;
75998: LD_ADDR_VAR 0 9
76002: PUSH
76003: LD_VAR 0 2
76007: PUSH
76008: LD_VAR 0 4
76012: PLUS
76013: ST_TO_ADDR
// max_y := y + r ;
76014: LD_ADDR_VAR 0 10
76018: PUSH
76019: LD_VAR 0 3
76023: PUSH
76024: LD_VAR 0 4
76028: PLUS
76029: ST_TO_ADDR
// for _x = min_x to max_x do
76030: LD_ADDR_VAR 0 11
76034: PUSH
76035: DOUBLE
76036: LD_VAR 0 7
76040: DEC
76041: ST_TO_ADDR
76042: LD_VAR 0 9
76046: PUSH
76047: FOR_TO
76048: IFFALSE 76165
// for _y = min_y to max_y do
76050: LD_ADDR_VAR 0 12
76054: PUSH
76055: DOUBLE
76056: LD_VAR 0 8
76060: DEC
76061: ST_TO_ADDR
76062: LD_VAR 0 10
76066: PUSH
76067: FOR_TO
76068: IFFALSE 76161
// begin if not ValidHex ( _x , _y ) then
76070: LD_VAR 0 11
76074: PPUSH
76075: LD_VAR 0 12
76079: PPUSH
76080: CALL_OW 488
76084: NOT
76085: IFFALSE 76089
// continue ;
76087: GO 76067
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76089: LD_VAR 0 11
76093: PPUSH
76094: LD_VAR 0 12
76098: PPUSH
76099: CALL_OW 351
76103: PUSH
76104: LD_VAR 0 11
76108: PPUSH
76109: LD_VAR 0 12
76113: PPUSH
76114: CALL_OW 554
76118: AND
76119: IFFALSE 76159
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76121: LD_ADDR_VAR 0 13
76125: PUSH
76126: LD_VAR 0 13
76130: PPUSH
76131: LD_VAR 0 13
76135: PUSH
76136: LD_INT 1
76138: PLUS
76139: PPUSH
76140: LD_VAR 0 11
76144: PUSH
76145: LD_VAR 0 12
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PPUSH
76154: CALL_OW 2
76158: ST_TO_ADDR
// end ;
76159: GO 76067
76161: POP
76162: POP
76163: GO 76047
76165: POP
76166: POP
// if not list then
76167: LD_VAR 0 13
76171: NOT
76172: IFFALSE 76176
// exit ;
76174: GO 76247
// for i in list do
76176: LD_ADDR_VAR 0 6
76180: PUSH
76181: LD_VAR 0 13
76185: PUSH
76186: FOR_IN
76187: IFFALSE 76245
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76189: LD_VAR 0 1
76193: PPUSH
76194: LD_STRING M
76196: PUSH
76197: LD_VAR 0 6
76201: PUSH
76202: LD_INT 1
76204: ARRAY
76205: PUSH
76206: LD_VAR 0 6
76210: PUSH
76211: LD_INT 2
76213: ARRAY
76214: PUSH
76215: LD_INT 0
76217: PUSH
76218: LD_INT 0
76220: PUSH
76221: LD_INT 0
76223: PUSH
76224: LD_INT 0
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: PPUSH
76239: CALL_OW 447
76243: GO 76186
76245: POP
76246: POP
// end ;
76247: LD_VAR 0 5
76251: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76252: LD_INT 0
76254: PPUSH
76255: PPUSH
76256: PPUSH
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
76262: PPUSH
76263: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76264: LD_VAR 0 1
76268: PPUSH
76269: CALL_OW 302
76273: NOT
76274: PUSH
76275: LD_VAR 0 2
76279: PPUSH
76280: LD_VAR 0 3
76284: PPUSH
76285: CALL_OW 488
76289: NOT
76290: OR
76291: PUSH
76292: LD_VAR 0 4
76296: NOT
76297: OR
76298: IFFALSE 76302
// exit ;
76300: GO 76815
// list := [ ] ;
76302: LD_ADDR_VAR 0 13
76306: PUSH
76307: EMPTY
76308: ST_TO_ADDR
// if x - r < 0 then
76309: LD_VAR 0 2
76313: PUSH
76314: LD_VAR 0 4
76318: MINUS
76319: PUSH
76320: LD_INT 0
76322: LESS
76323: IFFALSE 76335
// min_x := 0 else
76325: LD_ADDR_VAR 0 7
76329: PUSH
76330: LD_INT 0
76332: ST_TO_ADDR
76333: GO 76351
// min_x := x - r ;
76335: LD_ADDR_VAR 0 7
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_VAR 0 4
76349: MINUS
76350: ST_TO_ADDR
// if y - r < 0 then
76351: LD_VAR 0 3
76355: PUSH
76356: LD_VAR 0 4
76360: MINUS
76361: PUSH
76362: LD_INT 0
76364: LESS
76365: IFFALSE 76377
// min_y := 0 else
76367: LD_ADDR_VAR 0 8
76371: PUSH
76372: LD_INT 0
76374: ST_TO_ADDR
76375: GO 76393
// min_y := y - r ;
76377: LD_ADDR_VAR 0 8
76381: PUSH
76382: LD_VAR 0 3
76386: PUSH
76387: LD_VAR 0 4
76391: MINUS
76392: ST_TO_ADDR
// max_x := x + r ;
76393: LD_ADDR_VAR 0 9
76397: PUSH
76398: LD_VAR 0 2
76402: PUSH
76403: LD_VAR 0 4
76407: PLUS
76408: ST_TO_ADDR
// max_y := y + r ;
76409: LD_ADDR_VAR 0 10
76413: PUSH
76414: LD_VAR 0 3
76418: PUSH
76419: LD_VAR 0 4
76423: PLUS
76424: ST_TO_ADDR
// for _x = min_x to max_x do
76425: LD_ADDR_VAR 0 11
76429: PUSH
76430: DOUBLE
76431: LD_VAR 0 7
76435: DEC
76436: ST_TO_ADDR
76437: LD_VAR 0 9
76441: PUSH
76442: FOR_TO
76443: IFFALSE 76560
// for _y = min_y to max_y do
76445: LD_ADDR_VAR 0 12
76449: PUSH
76450: DOUBLE
76451: LD_VAR 0 8
76455: DEC
76456: ST_TO_ADDR
76457: LD_VAR 0 10
76461: PUSH
76462: FOR_TO
76463: IFFALSE 76556
// begin if not ValidHex ( _x , _y ) then
76465: LD_VAR 0 11
76469: PPUSH
76470: LD_VAR 0 12
76474: PPUSH
76475: CALL_OW 488
76479: NOT
76480: IFFALSE 76484
// continue ;
76482: GO 76462
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76484: LD_VAR 0 11
76488: PPUSH
76489: LD_VAR 0 12
76493: PPUSH
76494: CALL_OW 351
76498: PUSH
76499: LD_VAR 0 11
76503: PPUSH
76504: LD_VAR 0 12
76508: PPUSH
76509: CALL_OW 554
76513: AND
76514: IFFALSE 76554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76516: LD_ADDR_VAR 0 13
76520: PUSH
76521: LD_VAR 0 13
76525: PPUSH
76526: LD_VAR 0 13
76530: PUSH
76531: LD_INT 1
76533: PLUS
76534: PPUSH
76535: LD_VAR 0 11
76539: PUSH
76540: LD_VAR 0 12
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PPUSH
76549: CALL_OW 2
76553: ST_TO_ADDR
// end ;
76554: GO 76462
76556: POP
76557: POP
76558: GO 76442
76560: POP
76561: POP
// if not list then
76562: LD_VAR 0 13
76566: NOT
76567: IFFALSE 76571
// exit ;
76569: GO 76815
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
76571: LD_ADDR_VAR 0 13
76575: PUSH
76576: LD_VAR 0 1
76580: PPUSH
76581: LD_VAR 0 13
76585: PPUSH
76586: LD_INT 1
76588: PPUSH
76589: LD_INT 1
76591: PPUSH
76592: CALL 21120 0 4
76596: ST_TO_ADDR
// ComStop ( flame ) ;
76597: LD_VAR 0 1
76601: PPUSH
76602: CALL_OW 141
// for i in list do
76606: LD_ADDR_VAR 0 6
76610: PUSH
76611: LD_VAR 0 13
76615: PUSH
76616: FOR_IN
76617: IFFALSE 76648
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
76619: LD_VAR 0 1
76623: PPUSH
76624: LD_VAR 0 6
76628: PUSH
76629: LD_INT 1
76631: ARRAY
76632: PPUSH
76633: LD_VAR 0 6
76637: PUSH
76638: LD_INT 2
76640: ARRAY
76641: PPUSH
76642: CALL_OW 176
76646: GO 76616
76648: POP
76649: POP
// repeat wait ( 0 0$1 ) ;
76650: LD_INT 35
76652: PPUSH
76653: CALL_OW 67
// task := GetTaskList ( flame ) ;
76657: LD_ADDR_VAR 0 14
76661: PUSH
76662: LD_VAR 0 1
76666: PPUSH
76667: CALL_OW 437
76671: ST_TO_ADDR
// if not task then
76672: LD_VAR 0 14
76676: NOT
76677: IFFALSE 76681
// exit ;
76679: GO 76815
// if task [ 1 ] [ 1 ] <> | then
76681: LD_VAR 0 14
76685: PUSH
76686: LD_INT 1
76688: ARRAY
76689: PUSH
76690: LD_INT 1
76692: ARRAY
76693: PUSH
76694: LD_STRING |
76696: NONEQUAL
76697: IFFALSE 76701
// exit ;
76699: GO 76815
// _x := task [ 1 ] [ 2 ] ;
76701: LD_ADDR_VAR 0 11
76705: PUSH
76706: LD_VAR 0 14
76710: PUSH
76711: LD_INT 1
76713: ARRAY
76714: PUSH
76715: LD_INT 2
76717: ARRAY
76718: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
76719: LD_ADDR_VAR 0 12
76723: PUSH
76724: LD_VAR 0 14
76728: PUSH
76729: LD_INT 1
76731: ARRAY
76732: PUSH
76733: LD_INT 3
76735: ARRAY
76736: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
76737: LD_VAR 0 11
76741: PPUSH
76742: LD_VAR 0 12
76746: PPUSH
76747: CALL_OW 351
76751: NOT
76752: PUSH
76753: LD_VAR 0 11
76757: PPUSH
76758: LD_VAR 0 12
76762: PPUSH
76763: CALL_OW 554
76767: NOT
76768: OR
76769: IFFALSE 76803
// begin task := Delete ( task , 1 ) ;
76771: LD_ADDR_VAR 0 14
76775: PUSH
76776: LD_VAR 0 14
76780: PPUSH
76781: LD_INT 1
76783: PPUSH
76784: CALL_OW 3
76788: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
76789: LD_VAR 0 1
76793: PPUSH
76794: LD_VAR 0 14
76798: PPUSH
76799: CALL_OW 446
// end ; until not HasTask ( flame ) ;
76803: LD_VAR 0 1
76807: PPUSH
76808: CALL_OW 314
76812: NOT
76813: IFFALSE 76650
// end ;
76815: LD_VAR 0 5
76819: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76820: LD_EXP 123
76824: NOT
76825: IFFALSE 76875
76827: GO 76829
76829: DISABLE
// begin initHack := true ;
76830: LD_ADDR_EXP 123
76834: PUSH
76835: LD_INT 1
76837: ST_TO_ADDR
// hackTanks := [ ] ;
76838: LD_ADDR_EXP 124
76842: PUSH
76843: EMPTY
76844: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
76845: LD_ADDR_EXP 125
76849: PUSH
76850: EMPTY
76851: ST_TO_ADDR
// hackLimit := 3 ;
76852: LD_ADDR_EXP 126
76856: PUSH
76857: LD_INT 3
76859: ST_TO_ADDR
// hackDist := 12 ;
76860: LD_ADDR_EXP 127
76864: PUSH
76865: LD_INT 12
76867: ST_TO_ADDR
// hackCounter := [ ] ;
76868: LD_ADDR_EXP 128
76872: PUSH
76873: EMPTY
76874: ST_TO_ADDR
// end ;
76875: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
76876: LD_EXP 123
76880: PUSH
76881: LD_INT 34
76883: PUSH
76884: LD_INT 99
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PPUSH
76891: CALL_OW 69
76895: AND
76896: IFFALSE 77149
76898: GO 76900
76900: DISABLE
76901: LD_INT 0
76903: PPUSH
76904: PPUSH
// begin enable ;
76905: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
76906: LD_ADDR_VAR 0 1
76910: PUSH
76911: LD_INT 34
76913: PUSH
76914: LD_INT 99
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PPUSH
76921: CALL_OW 69
76925: PUSH
76926: FOR_IN
76927: IFFALSE 77147
// begin if not i in hackTanks then
76929: LD_VAR 0 1
76933: PUSH
76934: LD_EXP 124
76938: IN
76939: NOT
76940: IFFALSE 77023
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
76942: LD_ADDR_EXP 124
76946: PUSH
76947: LD_EXP 124
76951: PPUSH
76952: LD_EXP 124
76956: PUSH
76957: LD_INT 1
76959: PLUS
76960: PPUSH
76961: LD_VAR 0 1
76965: PPUSH
76966: CALL_OW 1
76970: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
76971: LD_ADDR_EXP 125
76975: PUSH
76976: LD_EXP 125
76980: PPUSH
76981: LD_EXP 125
76985: PUSH
76986: LD_INT 1
76988: PLUS
76989: PPUSH
76990: EMPTY
76991: PPUSH
76992: CALL_OW 1
76996: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
76997: LD_ADDR_EXP 128
77001: PUSH
77002: LD_EXP 128
77006: PPUSH
77007: LD_EXP 128
77011: PUSH
77012: LD_INT 1
77014: PLUS
77015: PPUSH
77016: EMPTY
77017: PPUSH
77018: CALL_OW 1
77022: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77023: LD_VAR 0 1
77027: PPUSH
77028: CALL_OW 302
77032: NOT
77033: IFFALSE 77046
// begin HackUnlinkAll ( i ) ;
77035: LD_VAR 0 1
77039: PPUSH
77040: CALL 77152 0 1
// continue ;
77044: GO 76926
// end ; HackCheckCapturedStatus ( i ) ;
77046: LD_VAR 0 1
77050: PPUSH
77051: CALL 77595 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77055: LD_ADDR_VAR 0 2
77059: PUSH
77060: LD_INT 81
77062: PUSH
77063: LD_VAR 0 1
77067: PPUSH
77068: CALL_OW 255
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 33
77079: PUSH
77080: LD_INT 3
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 91
77089: PUSH
77090: LD_VAR 0 1
77094: PUSH
77095: LD_EXP 127
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: LIST
77104: PUSH
77105: LD_INT 50
77107: PUSH
77108: EMPTY
77109: LIST
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: PPUSH
77117: CALL_OW 69
77121: ST_TO_ADDR
// if not tmp then
77122: LD_VAR 0 2
77126: NOT
77127: IFFALSE 77131
// continue ;
77129: GO 76926
// HackLink ( i , tmp ) ;
77131: LD_VAR 0 1
77135: PPUSH
77136: LD_VAR 0 2
77140: PPUSH
77141: CALL 77288 0 2
// end ;
77145: GO 76926
77147: POP
77148: POP
// end ;
77149: PPOPN 2
77151: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77152: LD_INT 0
77154: PPUSH
77155: PPUSH
77156: PPUSH
// if not hack in hackTanks then
77157: LD_VAR 0 1
77161: PUSH
77162: LD_EXP 124
77166: IN
77167: NOT
77168: IFFALSE 77172
// exit ;
77170: GO 77283
// index := GetElementIndex ( hackTanks , hack ) ;
77172: LD_ADDR_VAR 0 4
77176: PUSH
77177: LD_EXP 124
77181: PPUSH
77182: LD_VAR 0 1
77186: PPUSH
77187: CALL 20417 0 2
77191: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77192: LD_EXP 125
77196: PUSH
77197: LD_VAR 0 4
77201: ARRAY
77202: IFFALSE 77283
// begin for i in hackTanksCaptured [ index ] do
77204: LD_ADDR_VAR 0 3
77208: PUSH
77209: LD_EXP 125
77213: PUSH
77214: LD_VAR 0 4
77218: ARRAY
77219: PUSH
77220: FOR_IN
77221: IFFALSE 77247
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77223: LD_VAR 0 3
77227: PUSH
77228: LD_INT 1
77230: ARRAY
77231: PPUSH
77232: LD_VAR 0 3
77236: PUSH
77237: LD_INT 2
77239: ARRAY
77240: PPUSH
77241: CALL_OW 235
77245: GO 77220
77247: POP
77248: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77249: LD_ADDR_EXP 125
77253: PUSH
77254: LD_EXP 125
77258: PPUSH
77259: LD_VAR 0 4
77263: PPUSH
77264: EMPTY
77265: PPUSH
77266: CALL_OW 1
77270: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77271: LD_VAR 0 1
77275: PPUSH
77276: LD_INT 0
77278: PPUSH
77279: CALL_OW 505
// end ; end ;
77283: LD_VAR 0 2
77287: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
77288: LD_INT 0
77290: PPUSH
77291: PPUSH
77292: PPUSH
// if not hack in hackTanks or not vehicles then
77293: LD_VAR 0 1
77297: PUSH
77298: LD_EXP 124
77302: IN
77303: NOT
77304: PUSH
77305: LD_VAR 0 2
77309: NOT
77310: OR
77311: IFFALSE 77315
// exit ;
77313: GO 77590
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77315: LD_ADDR_VAR 0 2
77319: PUSH
77320: LD_VAR 0 1
77324: PPUSH
77325: LD_VAR 0 2
77329: PPUSH
77330: LD_INT 1
77332: PPUSH
77333: LD_INT 1
77335: PPUSH
77336: CALL 21067 0 4
77340: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77341: LD_ADDR_VAR 0 5
77345: PUSH
77346: LD_EXP 124
77350: PPUSH
77351: LD_VAR 0 1
77355: PPUSH
77356: CALL 20417 0 2
77360: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77361: LD_EXP 125
77365: PUSH
77366: LD_VAR 0 5
77370: ARRAY
77371: PUSH
77372: LD_EXP 126
77376: LESS
77377: IFFALSE 77566
// begin for i := 1 to vehicles do
77379: LD_ADDR_VAR 0 4
77383: PUSH
77384: DOUBLE
77385: LD_INT 1
77387: DEC
77388: ST_TO_ADDR
77389: LD_VAR 0 2
77393: PUSH
77394: FOR_TO
77395: IFFALSE 77564
// begin if hackTanksCaptured [ index ] = hackLimit then
77397: LD_EXP 125
77401: PUSH
77402: LD_VAR 0 5
77406: ARRAY
77407: PUSH
77408: LD_EXP 126
77412: EQUAL
77413: IFFALSE 77417
// break ;
77415: GO 77564
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77417: LD_ADDR_EXP 128
77421: PUSH
77422: LD_EXP 128
77426: PPUSH
77427: LD_VAR 0 5
77431: PPUSH
77432: LD_EXP 128
77436: PUSH
77437: LD_VAR 0 5
77441: ARRAY
77442: PUSH
77443: LD_INT 1
77445: PLUS
77446: PPUSH
77447: CALL_OW 1
77451: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77452: LD_ADDR_EXP 125
77456: PUSH
77457: LD_EXP 125
77461: PPUSH
77462: LD_VAR 0 5
77466: PUSH
77467: LD_EXP 125
77471: PUSH
77472: LD_VAR 0 5
77476: ARRAY
77477: PUSH
77478: LD_INT 1
77480: PLUS
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PPUSH
77486: LD_VAR 0 2
77490: PUSH
77491: LD_VAR 0 4
77495: ARRAY
77496: PUSH
77497: LD_VAR 0 2
77501: PUSH
77502: LD_VAR 0 4
77506: ARRAY
77507: PPUSH
77508: CALL_OW 255
77512: PUSH
77513: EMPTY
77514: LIST
77515: LIST
77516: PPUSH
77517: CALL 20632 0 3
77521: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77522: LD_VAR 0 2
77526: PUSH
77527: LD_VAR 0 4
77531: ARRAY
77532: PPUSH
77533: LD_VAR 0 1
77537: PPUSH
77538: CALL_OW 255
77542: PPUSH
77543: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77547: LD_VAR 0 2
77551: PUSH
77552: LD_VAR 0 4
77556: ARRAY
77557: PPUSH
77558: CALL_OW 141
// end ;
77562: GO 77394
77564: POP
77565: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77566: LD_VAR 0 1
77570: PPUSH
77571: LD_EXP 125
77575: PUSH
77576: LD_VAR 0 5
77580: ARRAY
77581: PUSH
77582: LD_INT 0
77584: PLUS
77585: PPUSH
77586: CALL_OW 505
// end ;
77590: LD_VAR 0 3
77594: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77595: LD_INT 0
77597: PPUSH
77598: PPUSH
77599: PPUSH
77600: PPUSH
// if not hack in hackTanks then
77601: LD_VAR 0 1
77605: PUSH
77606: LD_EXP 124
77610: IN
77611: NOT
77612: IFFALSE 77616
// exit ;
77614: GO 77856
// index := GetElementIndex ( hackTanks , hack ) ;
77616: LD_ADDR_VAR 0 4
77620: PUSH
77621: LD_EXP 124
77625: PPUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: CALL 20417 0 2
77635: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77636: LD_ADDR_VAR 0 3
77640: PUSH
77641: DOUBLE
77642: LD_EXP 125
77646: PUSH
77647: LD_VAR 0 4
77651: ARRAY
77652: INC
77653: ST_TO_ADDR
77654: LD_INT 1
77656: PUSH
77657: FOR_DOWNTO
77658: IFFALSE 77830
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77660: LD_ADDR_VAR 0 5
77664: PUSH
77665: LD_EXP 125
77669: PUSH
77670: LD_VAR 0 4
77674: ARRAY
77675: PUSH
77676: LD_VAR 0 3
77680: ARRAY
77681: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77682: LD_VAR 0 5
77686: PUSH
77687: LD_INT 1
77689: ARRAY
77690: PPUSH
77691: CALL_OW 302
77695: NOT
77696: PUSH
77697: LD_VAR 0 5
77701: PUSH
77702: LD_INT 1
77704: ARRAY
77705: PPUSH
77706: CALL_OW 255
77710: PUSH
77711: LD_VAR 0 1
77715: PPUSH
77716: CALL_OW 255
77720: NONEQUAL
77721: OR
77722: IFFALSE 77828
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77724: LD_VAR 0 5
77728: PUSH
77729: LD_INT 1
77731: ARRAY
77732: PPUSH
77733: CALL_OW 305
77737: PUSH
77738: LD_VAR 0 5
77742: PUSH
77743: LD_INT 1
77745: ARRAY
77746: PPUSH
77747: CALL_OW 255
77751: PUSH
77752: LD_VAR 0 1
77756: PPUSH
77757: CALL_OW 255
77761: EQUAL
77762: AND
77763: IFFALSE 77787
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77765: LD_VAR 0 5
77769: PUSH
77770: LD_INT 1
77772: ARRAY
77773: PPUSH
77774: LD_VAR 0 5
77778: PUSH
77779: LD_INT 2
77781: ARRAY
77782: PPUSH
77783: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77787: LD_ADDR_EXP 125
77791: PUSH
77792: LD_EXP 125
77796: PPUSH
77797: LD_VAR 0 4
77801: PPUSH
77802: LD_EXP 125
77806: PUSH
77807: LD_VAR 0 4
77811: ARRAY
77812: PPUSH
77813: LD_VAR 0 3
77817: PPUSH
77818: CALL_OW 3
77822: PPUSH
77823: CALL_OW 1
77827: ST_TO_ADDR
// end ; end ;
77828: GO 77657
77830: POP
77831: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77832: LD_VAR 0 1
77836: PPUSH
77837: LD_EXP 125
77841: PUSH
77842: LD_VAR 0 4
77846: ARRAY
77847: PUSH
77848: LD_INT 0
77850: PLUS
77851: PPUSH
77852: CALL_OW 505
// end ;
77856: LD_VAR 0 2
77860: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
// if not hack in hackTanks then
77867: LD_VAR 0 1
77871: PUSH
77872: LD_EXP 124
77876: IN
77877: NOT
77878: IFFALSE 77882
// exit ;
77880: GO 77967
// index := GetElementIndex ( hackTanks , hack ) ;
77882: LD_ADDR_VAR 0 5
77886: PUSH
77887: LD_EXP 124
77891: PPUSH
77892: LD_VAR 0 1
77896: PPUSH
77897: CALL 20417 0 2
77901: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
77902: LD_ADDR_VAR 0 4
77906: PUSH
77907: DOUBLE
77908: LD_INT 1
77910: DEC
77911: ST_TO_ADDR
77912: LD_EXP 125
77916: PUSH
77917: LD_VAR 0 5
77921: ARRAY
77922: PUSH
77923: FOR_TO
77924: IFFALSE 77965
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
77926: LD_EXP 125
77930: PUSH
77931: LD_VAR 0 5
77935: ARRAY
77936: PUSH
77937: LD_VAR 0 4
77941: ARRAY
77942: PUSH
77943: LD_INT 1
77945: ARRAY
77946: PUSH
77947: LD_VAR 0 2
77951: EQUAL
77952: IFFALSE 77963
// KillUnit ( vehicle ) ;
77954: LD_VAR 0 2
77958: PPUSH
77959: CALL_OW 66
77963: GO 77923
77965: POP
77966: POP
// end ;
77967: LD_VAR 0 3
77971: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
77972: LD_EXP 129
77976: NOT
77977: IFFALSE 78012
77979: GO 77981
77981: DISABLE
// begin initMiner := true ;
77982: LD_ADDR_EXP 129
77986: PUSH
77987: LD_INT 1
77989: ST_TO_ADDR
// minersList := [ ] ;
77990: LD_ADDR_EXP 130
77994: PUSH
77995: EMPTY
77996: ST_TO_ADDR
// minerMinesList := [ ] ;
77997: LD_ADDR_EXP 131
78001: PUSH
78002: EMPTY
78003: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78004: LD_ADDR_EXP 132
78008: PUSH
78009: LD_INT 5
78011: ST_TO_ADDR
// end ;
78012: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78013: LD_EXP 129
78017: PUSH
78018: LD_INT 34
78020: PUSH
78021: LD_INT 81
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PPUSH
78028: CALL_OW 69
78032: AND
78033: IFFALSE 78494
78035: GO 78037
78037: DISABLE
78038: LD_INT 0
78040: PPUSH
78041: PPUSH
78042: PPUSH
78043: PPUSH
// begin enable ;
78044: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78045: LD_ADDR_VAR 0 1
78049: PUSH
78050: LD_INT 34
78052: PUSH
78053: LD_INT 81
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PPUSH
78060: CALL_OW 69
78064: PUSH
78065: FOR_IN
78066: IFFALSE 78138
// begin if not i in minersList then
78068: LD_VAR 0 1
78072: PUSH
78073: LD_EXP 130
78077: IN
78078: NOT
78079: IFFALSE 78136
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78081: LD_ADDR_EXP 130
78085: PUSH
78086: LD_EXP 130
78090: PPUSH
78091: LD_EXP 130
78095: PUSH
78096: LD_INT 1
78098: PLUS
78099: PPUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 1
78109: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78110: LD_ADDR_EXP 131
78114: PUSH
78115: LD_EXP 131
78119: PPUSH
78120: LD_EXP 131
78124: PUSH
78125: LD_INT 1
78127: PLUS
78128: PPUSH
78129: EMPTY
78130: PPUSH
78131: CALL_OW 1
78135: ST_TO_ADDR
// end end ;
78136: GO 78065
78138: POP
78139: POP
// for i := minerMinesList downto 1 do
78140: LD_ADDR_VAR 0 1
78144: PUSH
78145: DOUBLE
78146: LD_EXP 131
78150: INC
78151: ST_TO_ADDR
78152: LD_INT 1
78154: PUSH
78155: FOR_DOWNTO
78156: IFFALSE 78492
// begin if IsLive ( minersList [ i ] ) then
78158: LD_EXP 130
78162: PUSH
78163: LD_VAR 0 1
78167: ARRAY
78168: PPUSH
78169: CALL_OW 300
78173: IFFALSE 78201
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78175: LD_EXP 130
78179: PUSH
78180: LD_VAR 0 1
78184: ARRAY
78185: PPUSH
78186: LD_EXP 131
78190: PUSH
78191: LD_VAR 0 1
78195: ARRAY
78196: PPUSH
78197: CALL_OW 505
// if not minerMinesList [ i ] then
78201: LD_EXP 131
78205: PUSH
78206: LD_VAR 0 1
78210: ARRAY
78211: NOT
78212: IFFALSE 78216
// continue ;
78214: GO 78155
// for j := minerMinesList [ i ] downto 1 do
78216: LD_ADDR_VAR 0 2
78220: PUSH
78221: DOUBLE
78222: LD_EXP 131
78226: PUSH
78227: LD_VAR 0 1
78231: ARRAY
78232: INC
78233: ST_TO_ADDR
78234: LD_INT 1
78236: PUSH
78237: FOR_DOWNTO
78238: IFFALSE 78488
// begin side := GetSide ( minersList [ i ] ) ;
78240: LD_ADDR_VAR 0 3
78244: PUSH
78245: LD_EXP 130
78249: PUSH
78250: LD_VAR 0 1
78254: ARRAY
78255: PPUSH
78256: CALL_OW 255
78260: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78261: LD_ADDR_VAR 0 4
78265: PUSH
78266: LD_EXP 131
78270: PUSH
78271: LD_VAR 0 1
78275: ARRAY
78276: PUSH
78277: LD_VAR 0 2
78281: ARRAY
78282: PUSH
78283: LD_INT 1
78285: ARRAY
78286: PPUSH
78287: LD_EXP 131
78291: PUSH
78292: LD_VAR 0 1
78296: ARRAY
78297: PUSH
78298: LD_VAR 0 2
78302: ARRAY
78303: PUSH
78304: LD_INT 2
78306: ARRAY
78307: PPUSH
78308: CALL_OW 428
78312: ST_TO_ADDR
// if not tmp then
78313: LD_VAR 0 4
78317: NOT
78318: IFFALSE 78322
// continue ;
78320: GO 78237
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78322: LD_VAR 0 4
78326: PUSH
78327: LD_INT 81
78329: PUSH
78330: LD_VAR 0 3
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: PPUSH
78339: CALL_OW 69
78343: IN
78344: PUSH
78345: LD_EXP 131
78349: PUSH
78350: LD_VAR 0 1
78354: ARRAY
78355: PUSH
78356: LD_VAR 0 2
78360: ARRAY
78361: PUSH
78362: LD_INT 1
78364: ARRAY
78365: PPUSH
78366: LD_EXP 131
78370: PUSH
78371: LD_VAR 0 1
78375: ARRAY
78376: PUSH
78377: LD_VAR 0 2
78381: ARRAY
78382: PUSH
78383: LD_INT 2
78385: ARRAY
78386: PPUSH
78387: CALL_OW 458
78391: AND
78392: IFFALSE 78486
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78394: LD_EXP 131
78398: PUSH
78399: LD_VAR 0 1
78403: ARRAY
78404: PUSH
78405: LD_VAR 0 2
78409: ARRAY
78410: PUSH
78411: LD_INT 1
78413: ARRAY
78414: PPUSH
78415: LD_EXP 131
78419: PUSH
78420: LD_VAR 0 1
78424: ARRAY
78425: PUSH
78426: LD_VAR 0 2
78430: ARRAY
78431: PUSH
78432: LD_INT 2
78434: ARRAY
78435: PPUSH
78436: LD_VAR 0 3
78440: PPUSH
78441: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78445: LD_ADDR_EXP 131
78449: PUSH
78450: LD_EXP 131
78454: PPUSH
78455: LD_VAR 0 1
78459: PPUSH
78460: LD_EXP 131
78464: PUSH
78465: LD_VAR 0 1
78469: ARRAY
78470: PPUSH
78471: LD_VAR 0 2
78475: PPUSH
78476: CALL_OW 3
78480: PPUSH
78481: CALL_OW 1
78485: ST_TO_ADDR
// end ; end ;
78486: GO 78237
78488: POP
78489: POP
// end ;
78490: GO 78155
78492: POP
78493: POP
// end ;
78494: PPOPN 4
78496: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78497: LD_INT 0
78499: PPUSH
78500: PPUSH
// result := false ;
78501: LD_ADDR_VAR 0 4
78505: PUSH
78506: LD_INT 0
78508: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78509: LD_VAR 0 1
78513: PPUSH
78514: CALL_OW 264
78518: PUSH
78519: LD_INT 81
78521: EQUAL
78522: NOT
78523: IFFALSE 78527
// exit ;
78525: GO 78767
// index := GetElementIndex ( minersList , unit ) ;
78527: LD_ADDR_VAR 0 5
78531: PUSH
78532: LD_EXP 130
78536: PPUSH
78537: LD_VAR 0 1
78541: PPUSH
78542: CALL 20417 0 2
78546: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78547: LD_EXP 131
78551: PUSH
78552: LD_VAR 0 5
78556: ARRAY
78557: PUSH
78558: LD_EXP 132
78562: GREATEREQUAL
78563: IFFALSE 78567
// exit ;
78565: GO 78767
// ComMoveXY ( unit , x , y ) ;
78567: LD_VAR 0 1
78571: PPUSH
78572: LD_VAR 0 2
78576: PPUSH
78577: LD_VAR 0 3
78581: PPUSH
78582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78586: LD_INT 35
78588: PPUSH
78589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78593: LD_VAR 0 1
78597: PPUSH
78598: LD_VAR 0 2
78602: PPUSH
78603: LD_VAR 0 3
78607: PPUSH
78608: CALL 52319 0 3
78612: NOT
78613: PUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: CALL_OW 314
78623: AND
78624: IFFALSE 78628
// exit ;
78626: GO 78767
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78628: LD_VAR 0 2
78632: PPUSH
78633: LD_VAR 0 3
78637: PPUSH
78638: CALL_OW 428
78642: PUSH
78643: LD_VAR 0 1
78647: EQUAL
78648: PUSH
78649: LD_VAR 0 1
78653: PPUSH
78654: CALL_OW 314
78658: NOT
78659: AND
78660: IFFALSE 78586
// PlaySoundXY ( x , y , PlantMine ) ;
78662: LD_VAR 0 2
78666: PPUSH
78667: LD_VAR 0 3
78671: PPUSH
78672: LD_STRING PlantMine
78674: PPUSH
78675: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78679: LD_VAR 0 2
78683: PPUSH
78684: LD_VAR 0 3
78688: PPUSH
78689: LD_VAR 0 1
78693: PPUSH
78694: CALL_OW 255
78698: PPUSH
78699: LD_INT 0
78701: PPUSH
78702: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78706: LD_ADDR_EXP 131
78710: PUSH
78711: LD_EXP 131
78715: PPUSH
78716: LD_VAR 0 5
78720: PUSH
78721: LD_EXP 131
78725: PUSH
78726: LD_VAR 0 5
78730: ARRAY
78731: PUSH
78732: LD_INT 1
78734: PLUS
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PPUSH
78740: LD_VAR 0 2
78744: PUSH
78745: LD_VAR 0 3
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PPUSH
78754: CALL 20632 0 3
78758: ST_TO_ADDR
// result := true ;
78759: LD_ADDR_VAR 0 4
78763: PUSH
78764: LD_INT 1
78766: ST_TO_ADDR
// end ;
78767: LD_VAR 0 4
78771: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78772: LD_INT 0
78774: PPUSH
78775: PPUSH
78776: PPUSH
// if not unit in minersList then
78777: LD_VAR 0 1
78781: PUSH
78782: LD_EXP 130
78786: IN
78787: NOT
78788: IFFALSE 78792
// exit ;
78790: GO 79184
// index := GetElementIndex ( minersList , unit ) ;
78792: LD_ADDR_VAR 0 6
78796: PUSH
78797: LD_EXP 130
78801: PPUSH
78802: LD_VAR 0 1
78806: PPUSH
78807: CALL 20417 0 2
78811: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78812: LD_ADDR_VAR 0 5
78816: PUSH
78817: DOUBLE
78818: LD_EXP 131
78822: PUSH
78823: LD_VAR 0 6
78827: ARRAY
78828: INC
78829: ST_TO_ADDR
78830: LD_INT 1
78832: PUSH
78833: FOR_DOWNTO
78834: IFFALSE 78995
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
78836: LD_EXP 131
78840: PUSH
78841: LD_VAR 0 6
78845: ARRAY
78846: PUSH
78847: LD_VAR 0 5
78851: ARRAY
78852: PUSH
78853: LD_INT 1
78855: ARRAY
78856: PUSH
78857: LD_VAR 0 2
78861: EQUAL
78862: PUSH
78863: LD_EXP 131
78867: PUSH
78868: LD_VAR 0 6
78872: ARRAY
78873: PUSH
78874: LD_VAR 0 5
78878: ARRAY
78879: PUSH
78880: LD_INT 2
78882: ARRAY
78883: PUSH
78884: LD_VAR 0 3
78888: EQUAL
78889: AND
78890: IFFALSE 78993
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78892: LD_EXP 131
78896: PUSH
78897: LD_VAR 0 6
78901: ARRAY
78902: PUSH
78903: LD_VAR 0 5
78907: ARRAY
78908: PUSH
78909: LD_INT 1
78911: ARRAY
78912: PPUSH
78913: LD_EXP 131
78917: PUSH
78918: LD_VAR 0 6
78922: ARRAY
78923: PUSH
78924: LD_VAR 0 5
78928: ARRAY
78929: PUSH
78930: LD_INT 2
78932: ARRAY
78933: PPUSH
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 255
78943: PPUSH
78944: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78948: LD_ADDR_EXP 131
78952: PUSH
78953: LD_EXP 131
78957: PPUSH
78958: LD_VAR 0 6
78962: PPUSH
78963: LD_EXP 131
78967: PUSH
78968: LD_VAR 0 6
78972: ARRAY
78973: PPUSH
78974: LD_VAR 0 5
78978: PPUSH
78979: CALL_OW 3
78983: PPUSH
78984: CALL_OW 1
78988: ST_TO_ADDR
// exit ;
78989: POP
78990: POP
78991: GO 79184
// end ; end ;
78993: GO 78833
78995: POP
78996: POP
// for i := minerMinesList [ index ] downto 1 do
78997: LD_ADDR_VAR 0 5
79001: PUSH
79002: DOUBLE
79003: LD_EXP 131
79007: PUSH
79008: LD_VAR 0 6
79012: ARRAY
79013: INC
79014: ST_TO_ADDR
79015: LD_INT 1
79017: PUSH
79018: FOR_DOWNTO
79019: IFFALSE 79182
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79021: LD_EXP 131
79025: PUSH
79026: LD_VAR 0 6
79030: ARRAY
79031: PUSH
79032: LD_VAR 0 5
79036: ARRAY
79037: PUSH
79038: LD_INT 1
79040: ARRAY
79041: PPUSH
79042: LD_EXP 131
79046: PUSH
79047: LD_VAR 0 6
79051: ARRAY
79052: PUSH
79053: LD_VAR 0 5
79057: ARRAY
79058: PUSH
79059: LD_INT 2
79061: ARRAY
79062: PPUSH
79063: LD_VAR 0 2
79067: PPUSH
79068: LD_VAR 0 3
79072: PPUSH
79073: CALL_OW 298
79077: PUSH
79078: LD_INT 6
79080: LESS
79081: IFFALSE 79180
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79083: LD_EXP 131
79087: PUSH
79088: LD_VAR 0 6
79092: ARRAY
79093: PUSH
79094: LD_VAR 0 5
79098: ARRAY
79099: PUSH
79100: LD_INT 1
79102: ARRAY
79103: PPUSH
79104: LD_EXP 131
79108: PUSH
79109: LD_VAR 0 6
79113: ARRAY
79114: PUSH
79115: LD_VAR 0 5
79119: ARRAY
79120: PUSH
79121: LD_INT 2
79123: ARRAY
79124: PPUSH
79125: LD_VAR 0 1
79129: PPUSH
79130: CALL_OW 255
79134: PPUSH
79135: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79139: LD_ADDR_EXP 131
79143: PUSH
79144: LD_EXP 131
79148: PPUSH
79149: LD_VAR 0 6
79153: PPUSH
79154: LD_EXP 131
79158: PUSH
79159: LD_VAR 0 6
79163: ARRAY
79164: PPUSH
79165: LD_VAR 0 5
79169: PPUSH
79170: CALL_OW 3
79174: PPUSH
79175: CALL_OW 1
79179: ST_TO_ADDR
// end ; end ;
79180: GO 79018
79182: POP
79183: POP
// end ;
79184: LD_VAR 0 4
79188: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79189: LD_INT 0
79191: PPUSH
79192: PPUSH
79193: PPUSH
79194: PPUSH
79195: PPUSH
79196: PPUSH
79197: PPUSH
79198: PPUSH
79199: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79200: LD_VAR 0 1
79204: PPUSH
79205: CALL_OW 264
79209: PUSH
79210: LD_INT 81
79212: EQUAL
79213: NOT
79214: PUSH
79215: LD_VAR 0 1
79219: PUSH
79220: LD_EXP 130
79224: IN
79225: NOT
79226: OR
79227: IFFALSE 79231
// exit ;
79229: GO 79553
// index := GetElementIndex ( minersList , unit ) ;
79231: LD_ADDR_VAR 0 6
79235: PUSH
79236: LD_EXP 130
79240: PPUSH
79241: LD_VAR 0 1
79245: PPUSH
79246: CALL 20417 0 2
79250: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79251: LD_ADDR_VAR 0 8
79255: PUSH
79256: LD_EXP 132
79260: PUSH
79261: LD_EXP 131
79265: PUSH
79266: LD_VAR 0 6
79270: ARRAY
79271: MINUS
79272: ST_TO_ADDR
// if not minesFreeAmount then
79273: LD_VAR 0 8
79277: NOT
79278: IFFALSE 79282
// exit ;
79280: GO 79553
// tmp := [ ] ;
79282: LD_ADDR_VAR 0 7
79286: PUSH
79287: EMPTY
79288: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
79289: LD_ADDR_VAR 0 5
79293: PUSH
79294: DOUBLE
79295: LD_INT 1
79297: DEC
79298: ST_TO_ADDR
79299: LD_VAR 0 8
79303: PUSH
79304: FOR_TO
79305: IFFALSE 79500
// begin _d := rand ( 0 , 5 ) ;
79307: LD_ADDR_VAR 0 11
79311: PUSH
79312: LD_INT 0
79314: PPUSH
79315: LD_INT 5
79317: PPUSH
79318: CALL_OW 12
79322: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79323: LD_ADDR_VAR 0 12
79327: PUSH
79328: LD_INT 2
79330: PPUSH
79331: LD_INT 6
79333: PPUSH
79334: CALL_OW 12
79338: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79339: LD_ADDR_VAR 0 9
79343: PUSH
79344: LD_VAR 0 2
79348: PPUSH
79349: LD_VAR 0 11
79353: PPUSH
79354: LD_VAR 0 12
79358: PPUSH
79359: CALL_OW 272
79363: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
79364: LD_ADDR_VAR 0 10
79368: PUSH
79369: LD_VAR 0 3
79373: PPUSH
79374: LD_VAR 0 11
79378: PPUSH
79379: LD_VAR 0 12
79383: PPUSH
79384: CALL_OW 273
79388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79389: LD_VAR 0 9
79393: PPUSH
79394: LD_VAR 0 10
79398: PPUSH
79399: CALL_OW 488
79403: PUSH
79404: LD_VAR 0 9
79408: PUSH
79409: LD_VAR 0 10
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_VAR 0 7
79422: IN
79423: NOT
79424: AND
79425: PUSH
79426: LD_VAR 0 9
79430: PPUSH
79431: LD_VAR 0 10
79435: PPUSH
79436: CALL_OW 458
79440: NOT
79441: AND
79442: IFFALSE 79484
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79444: LD_ADDR_VAR 0 7
79448: PUSH
79449: LD_VAR 0 7
79453: PPUSH
79454: LD_VAR 0 7
79458: PUSH
79459: LD_INT 1
79461: PLUS
79462: PPUSH
79463: LD_VAR 0 9
79467: PUSH
79468: LD_VAR 0 10
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PPUSH
79477: CALL_OW 1
79481: ST_TO_ADDR
79482: GO 79498
// i := i - 1 ;
79484: LD_ADDR_VAR 0 5
79488: PUSH
79489: LD_VAR 0 5
79493: PUSH
79494: LD_INT 1
79496: MINUS
79497: ST_TO_ADDR
// end ;
79498: GO 79304
79500: POP
79501: POP
// for i in tmp do
79502: LD_ADDR_VAR 0 5
79506: PUSH
79507: LD_VAR 0 7
79511: PUSH
79512: FOR_IN
79513: IFFALSE 79551
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79515: LD_VAR 0 1
79519: PPUSH
79520: LD_VAR 0 5
79524: PUSH
79525: LD_INT 1
79527: ARRAY
79528: PPUSH
79529: LD_VAR 0 5
79533: PUSH
79534: LD_INT 2
79536: ARRAY
79537: PPUSH
79538: CALL 78497 0 3
79542: NOT
79543: IFFALSE 79549
// exit ;
79545: POP
79546: POP
79547: GO 79553
79549: GO 79512
79551: POP
79552: POP
// end ;
79553: LD_VAR 0 4
79557: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
79558: LD_INT 0
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
79564: PPUSH
79565: PPUSH
79566: PPUSH
79567: PPUSH
79568: PPUSH
// if GetClass ( unit ) <> class_sniper then
79569: LD_VAR 0 1
79573: PPUSH
79574: CALL_OW 257
79578: PUSH
79579: LD_INT 5
79581: NONEQUAL
79582: IFFALSE 79586
// exit ;
79584: GO 80052
// dist := 8 ;
79586: LD_ADDR_VAR 0 5
79590: PUSH
79591: LD_INT 8
79593: ST_TO_ADDR
// viewRange := 12 ;
79594: LD_ADDR_VAR 0 8
79598: PUSH
79599: LD_INT 12
79601: ST_TO_ADDR
// side := GetSide ( unit ) ;
79602: LD_ADDR_VAR 0 6
79606: PUSH
79607: LD_VAR 0 1
79611: PPUSH
79612: CALL_OW 255
79616: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79617: LD_INT 61
79619: PPUSH
79620: LD_VAR 0 6
79624: PPUSH
79625: CALL_OW 321
79629: PUSH
79630: LD_INT 2
79632: EQUAL
79633: IFFALSE 79643
// viewRange := 16 ;
79635: LD_ADDR_VAR 0 8
79639: PUSH
79640: LD_INT 16
79642: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79643: LD_VAR 0 1
79647: PPUSH
79648: LD_VAR 0 2
79652: PPUSH
79653: LD_VAR 0 3
79657: PPUSH
79658: CALL_OW 297
79662: PUSH
79663: LD_VAR 0 5
79667: GREATER
79668: IFFALSE 79747
// begin ComMoveXY ( unit , x , y ) ;
79670: LD_VAR 0 1
79674: PPUSH
79675: LD_VAR 0 2
79679: PPUSH
79680: LD_VAR 0 3
79684: PPUSH
79685: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79689: LD_INT 35
79691: PPUSH
79692: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79696: LD_VAR 0 1
79700: PPUSH
79701: LD_VAR 0 2
79705: PPUSH
79706: LD_VAR 0 3
79710: PPUSH
79711: CALL 52319 0 3
79715: NOT
79716: IFFALSE 79720
// exit ;
79718: GO 80052
// until GetDistUnitXY ( unit , x , y ) < dist ;
79720: LD_VAR 0 1
79724: PPUSH
79725: LD_VAR 0 2
79729: PPUSH
79730: LD_VAR 0 3
79734: PPUSH
79735: CALL_OW 297
79739: PUSH
79740: LD_VAR 0 5
79744: LESS
79745: IFFALSE 79689
// end ; ComTurnXY ( unit , x , y ) ;
79747: LD_VAR 0 1
79751: PPUSH
79752: LD_VAR 0 2
79756: PPUSH
79757: LD_VAR 0 3
79761: PPUSH
79762: CALL_OW 118
// repeat if Multiplayer then
79766: LD_OWVAR 4
79770: IFFALSE 79781
// wait ( 35 ) else
79772: LD_INT 35
79774: PPUSH
79775: CALL_OW 67
79779: GO 79788
// wait ( 5 ) ;
79781: LD_INT 5
79783: PPUSH
79784: CALL_OW 67
// _d := GetDir ( unit ) ;
79788: LD_ADDR_VAR 0 11
79792: PUSH
79793: LD_VAR 0 1
79797: PPUSH
79798: CALL_OW 254
79802: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
79803: LD_ADDR_VAR 0 7
79807: PUSH
79808: LD_VAR 0 1
79812: PPUSH
79813: CALL_OW 250
79817: PPUSH
79818: LD_VAR 0 1
79822: PPUSH
79823: CALL_OW 251
79827: PPUSH
79828: LD_VAR 0 2
79832: PPUSH
79833: LD_VAR 0 3
79837: PPUSH
79838: CALL 54927 0 4
79842: ST_TO_ADDR
// until dir = _d ;
79843: LD_VAR 0 7
79847: PUSH
79848: LD_VAR 0 11
79852: EQUAL
79853: IFFALSE 79766
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
79855: LD_ADDR_VAR 0 9
79859: PUSH
79860: LD_VAR 0 1
79864: PPUSH
79865: CALL_OW 250
79869: PPUSH
79870: LD_VAR 0 7
79874: PPUSH
79875: LD_VAR 0 5
79879: PPUSH
79880: CALL_OW 272
79884: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
79885: LD_ADDR_VAR 0 10
79889: PUSH
79890: LD_VAR 0 1
79894: PPUSH
79895: CALL_OW 251
79899: PPUSH
79900: LD_VAR 0 7
79904: PPUSH
79905: LD_VAR 0 5
79909: PPUSH
79910: CALL_OW 273
79914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79915: LD_VAR 0 9
79919: PPUSH
79920: LD_VAR 0 10
79924: PPUSH
79925: CALL_OW 488
79929: NOT
79930: IFFALSE 79934
// exit ;
79932: GO 80052
// ComAnimCustom ( unit , 1 ) ;
79934: LD_VAR 0 1
79938: PPUSH
79939: LD_INT 1
79941: PPUSH
79942: CALL_OW 592
// p := 0 ;
79946: LD_ADDR_VAR 0 12
79950: PUSH
79951: LD_INT 0
79953: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
79954: LD_VAR 0 9
79958: PPUSH
79959: LD_VAR 0 10
79963: PPUSH
79964: LD_VAR 0 6
79968: PPUSH
79969: LD_VAR 0 8
79973: PPUSH
79974: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
79978: LD_INT 35
79980: PPUSH
79981: CALL_OW 67
// p := Inc ( p ) ;
79985: LD_ADDR_VAR 0 12
79989: PUSH
79990: LD_VAR 0 12
79994: PPUSH
79995: CALL 54883 0 1
79999: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
80000: LD_VAR 0 12
80004: PUSH
80005: LD_INT 3
80007: EQUAL
80008: PUSH
80009: LD_VAR 0 1
80013: PPUSH
80014: CALL_OW 302
80018: NOT
80019: OR
80020: PUSH
80021: LD_VAR 0 1
80025: PPUSH
80026: CALL_OW 301
80030: OR
80031: IFFALSE 79978
// RemoveSeeing ( _x , _y , side ) ;
80033: LD_VAR 0 9
80037: PPUSH
80038: LD_VAR 0 10
80042: PPUSH
80043: LD_VAR 0 6
80047: PPUSH
80048: CALL_OW 331
// end ; end_of_file
80052: LD_VAR 0 4
80056: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80057: LD_VAR 0 1
80061: PUSH
80062: LD_INT 200
80064: DOUBLE
80065: GREATEREQUAL
80066: IFFALSE 80074
80068: LD_INT 299
80070: DOUBLE
80071: LESSEQUAL
80072: IFTRUE 80076
80074: GO 80108
80076: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80077: LD_VAR 0 1
80081: PPUSH
80082: LD_VAR 0 2
80086: PPUSH
80087: LD_VAR 0 3
80091: PPUSH
80092: LD_VAR 0 4
80096: PPUSH
80097: LD_VAR 0 5
80101: PPUSH
80102: CALL 75358 0 5
80106: GO 80185
80108: LD_INT 300
80110: DOUBLE
80111: GREATEREQUAL
80112: IFFALSE 80120
80114: LD_INT 399
80116: DOUBLE
80117: LESSEQUAL
80118: IFTRUE 80122
80120: GO 80184
80122: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80123: LD_VAR 0 1
80127: PPUSH
80128: LD_VAR 0 2
80132: PPUSH
80133: LD_VAR 0 3
80137: PPUSH
80138: LD_VAR 0 4
80142: PPUSH
80143: LD_VAR 0 5
80147: PPUSH
80148: LD_VAR 0 6
80152: PPUSH
80153: LD_VAR 0 7
80157: PPUSH
80158: LD_VAR 0 8
80162: PPUSH
80163: LD_VAR 0 9
80167: PPUSH
80168: LD_VAR 0 10
80172: PPUSH
80173: LD_VAR 0 11
80177: PPUSH
80178: CALL 71266 0 11
80182: GO 80185
80184: POP
// end ;
80185: PPOPN 11
80187: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80188: LD_VAR 0 1
80192: PPUSH
80193: LD_VAR 0 2
80197: PPUSH
80198: LD_VAR 0 3
80202: PPUSH
80203: LD_VAR 0 4
80207: PPUSH
80208: LD_VAR 0 5
80212: PPUSH
80213: CALL 74743 0 5
// end ;
80217: PPOPN 5
80219: END
