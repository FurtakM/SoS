// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 302 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 86
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// enableOmicronAI = true ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// PrepareRussians ;
 281: CALL 925 0 0
// PrepareAmericans ;
 285: CALL 5321 0 0
// Nef_PrepareNature ;
 289: CALL 27579 0 0
// MissionIntro ;
 293: CALL 20286 0 0
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export function InitMapConfig ; begin
 302: LD_INT 0
 304: PPUSH
// BaseMapConfig ;
 305: CALL 318 0 0
// MissionMapConfig ;
 309: CALL 420 0 0
// end ;
 313: LD_VAR 0 1
 317: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 318: LD_INT 0
 320: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 321: LD_ADDR_EXP 30
 325: PUSH
 326: LD_INT 8
 328: PUSH
 329: LD_INT 12
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 348: LD_ADDR_EXP 31
 352: PUSH
 353: LD_INT 2
 355: PUSH
 356: LD_INT 2
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 5
 378: NEG
 379: PPUSH
 380: LD_INT 5
 382: PPUSH
 383: CALL_OW 12
 387: PUSH
 388: EMPTY
 389: LIST
 390: ST_TO_ADDR
// debugMode = 0 ;
 391: LD_ADDR_EXP 35
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// missionPrefix = 03_ ;
 399: LD_ADDR_EXP 33
 403: PUSH
 404: LD_STRING 03_
 406: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 407: LD_ADDR_EXP 34
 411: PUSH
 412: LD_STRING 02_
 414: ST_TO_ADDR
// end ;
 415: LD_VAR 0 1
 419: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 420: LD_INT 0
 422: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 423: LD_ADDR_EXP 36
 427: PUSH
 428: LD_INT 7
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 6
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PUSH
 442: LD_OWVAR 67
 446: ARRAY
 447: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 84000
 455: PUSH
 456: LD_INT 73500
 458: PUSH
 459: LD_INT 63000
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: LD_OWVAR 67
 471: ARRAY
 472: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 473: LD_ADDR_EXP 39
 477: PUSH
 478: LD_INT 150
 480: PUSH
 481: LD_INT 100
 483: PUSH
 484: LD_INT 50
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_OWVAR 67
 496: ARRAY
 497: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 498: LD_ADDR_EXP 40
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_OWVAR 67
 521: ARRAY
 522: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 523: LD_ADDR_EXP 41
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 2
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_OWVAR 67
 546: ARRAY
 547: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 548: LD_ADDR_EXP 44
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 6
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 573: LD_ADDR_EXP 45
 577: PUSH
 578: LD_INT 17850
 580: PUSH
 581: LD_INT 16800
 583: PUSH
 584: LD_INT 15750
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_OWVAR 67
 596: ARRAY
 597: ST_TO_ADDR
// end ;
 598: LD_VAR 0 1
 602: RET
// every 0 0$1 trigger debugMode do var i ;
 603: LD_EXP 35
 607: IFFALSE 922
 609: GO 611
 611: DISABLE
 612: LD_INT 0
 614: PPUSH
// begin enable ;
 615: ENABLE
// FogOff ( your_side ) ;
 616: LD_OWVAR 2
 620: PPUSH
 621: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 625: LD_ADDR_VAR 0 1
 629: PUSH
 630: LD_INT 22
 632: PUSH
 633: LD_OWVAR 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 21
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 69
 678: PUSH
 679: FOR_IN
 680: IFFALSE 696
// SetLives ( i , 1000 ) ;
 682: LD_VAR 0 1
 686: PPUSH
 687: LD_INT 1000
 689: PPUSH
 690: CALL_OW 234
 694: GO 679
 696: POP
 697: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 698: LD_ADDR_VAR 0 1
 702: PUSH
 703: LD_INT 22
 705: PUSH
 706: LD_OWVAR 2
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: LD_INT 21
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: CALL_OW 69
 733: PUSH
 734: FOR_IN
 735: IFFALSE 799
// begin SetSkill ( i , skill_combat , 10 ) ;
 737: LD_VAR 0 1
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 3
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// end ;
 797: GO 734
 799: POP
 800: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 801: LD_ADDR_VAR 0 1
 805: PUSH
 806: LD_INT 22
 808: PUSH
 809: LD_OWVAR 2
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 2
 820: PUSH
 821: LD_INT 30
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 30
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: PUSH
 855: FOR_IN
 856: IFFALSE 920
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 274
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 9999
 873: PPUSH
 874: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 878: LD_VAR 0 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 9999
 893: PPUSH
 894: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 274
 907: PPUSH
 908: LD_INT 3
 910: PPUSH
 911: LD_INT 9999
 913: PPUSH
 914: CALL_OW 277
// end ;
 918: GO 855
 920: POP
 921: POP
// end ; end_of_file
 922: PPOPN 1
 924: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 925: LD_INT 0
 927: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 928: LD_ADDR_EXP 78
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 951: LD_ADDR_EXP 72
 955: PUSH
 956: EMPTY
 957: ST_TO_ADDR
// PrepareKirovBase ;
 958: CALL 1945 0 0
// PrepareHeroes ;
 962: CALL 995 0 0
// PrepareKirovPersonel ;
 966: CALL 2710 0 0
// PrepareBeriaBase ;
 970: CALL 1347 0 0
// PrepareSecondBaseTeam ;
 974: CALL 3853 0 0
// PrepareGrishko ;
 978: CALL 3038 0 0
// PrepareOtherBuildings ;
 982: CALL 3287 0 0
// PrepareVehicles ;
 986: CALL 3111 0 0
// end ;
 990: LD_VAR 0 1
 994: RET
// function PrepareHeroes ; begin
 995: LD_INT 0
 997: PPUSH
// uc_side = 3 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 3
1005: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1006: LD_ADDR_EXP 46
1010: PUSH
1011: LD_STRING Burlak
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: CALL 6798 0 2
1021: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1022: LD_ADDR_EXP 47
1026: PUSH
1027: LD_STRING Gnyevko
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: CALL 6798 0 2
1037: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1038: LD_ADDR_EXP 49
1042: PUSH
1043: LD_STRING Kovalyuk
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6798 0 2
1053: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1054: LD_ADDR_EXP 48
1058: PUSH
1059: LD_STRING Kirilenkova
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL 6798 0 2
1069: ST_TO_ADDR
// uc_side = 6 ;
1070: LD_ADDR_OWVAR 20
1074: PUSH
1075: LD_INT 6
1077: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1078: LD_EXP 1
1082: NOT
1083: PUSH
1084: LD_STRING 02_Belkov
1086: PPUSH
1087: CALL_OW 28
1091: AND
1092: IFFALSE 1184
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1094: LD_ADDR_EXP 50
1098: PUSH
1099: LD_STRING Belkov
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL 6798 0 2
1109: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1110: LD_ADDR_EXP 51
1114: PUSH
1115: LD_STRING Belkov2
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL 6798 0 2
1125: ST_TO_ADDR
// BelkovDialog = Belkov ;
1126: LD_ADDR_EXP 60
1130: PUSH
1131: LD_EXP 50
1135: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1136: LD_EXP 50
1140: PPUSH
1141: LD_INT 165
1143: PPUSH
1144: LD_INT 110
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1154: LD_EXP 51
1158: PPUSH
1159: LD_INT 159
1161: PPUSH
1162: LD_INT 107
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 50
// ComHold ( Belkov ) ;
1175: LD_EXP 50
1179: PPUSH
1180: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1184: LD_EXP 1
1188: PUSH
1189: LD_STRING 02_Belkov2
1191: PPUSH
1192: CALL_OW 28
1196: AND
1197: IFFALSE 1252
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1199: LD_ADDR_EXP 51
1203: PUSH
1204: LD_STRING Belkov2
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: CALL 6798 0 2
1214: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1215: LD_ADDR_EXP 60
1219: PUSH
1220: LD_EXP 51
1224: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1225: LD_EXP 51
1229: PPUSH
1230: LD_INT 165
1232: PPUSH
1233: LD_INT 110
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL_OW 48
// ComHold ( Belkov2 ) ;
1243: LD_EXP 51
1247: PPUSH
1248: CALL_OW 140
// end ; PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1252: LD_EXP 46
1256: PPUSH
1257: LD_INT 164
1259: PPUSH
1260: LD_INT 108
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 48
// ComHold ( Burlak ) ;
1270: LD_EXP 46
1274: PPUSH
1275: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1279: LD_EXP 47
1283: PPUSH
1284: LD_INT 159
1286: PPUSH
1287: LD_INT 107
1289: PPUSH
1290: LD_INT 5
1292: PPUSH
1293: LD_INT 0
1295: PPUSH
1296: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1300: LD_EXP 49
1304: PPUSH
1305: LD_INT 159
1307: PPUSH
1308: LD_INT 107
1310: PPUSH
1311: LD_INT 5
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1321: LD_EXP 48
1325: PPUSH
1326: LD_INT 159
1328: PPUSH
1329: LD_INT 107
1331: PPUSH
1332: LD_INT 5
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 50
// end ;
1342: LD_VAR 0 1
1346: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1347: LD_INT 0
1349: PPUSH
1350: PPUSH
1351: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1352: LD_ADDR_EXP 56
1356: PUSH
1357: LD_STRING 02_BeriaBase_2
1359: PPUSH
1360: EMPTY
1361: PPUSH
1362: CALL_OW 30
1366: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1367: LD_ADDR_EXP 55
1371: PUSH
1372: LD_STRING 02_other_beria
1374: PPUSH
1375: CALL_OW 31
1379: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1380: LD_ADDR_EXP 53
1384: PUSH
1385: LD_STRING 02_other_survivors
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// uc_side = 3 ;
1393: LD_ADDR_OWVAR 20
1397: PUSH
1398: LD_INT 3
1400: ST_TO_ADDR
// uc_nation = 3 ;
1401: LD_ADDR_OWVAR 21
1405: PUSH
1406: LD_INT 3
1408: ST_TO_ADDR
// for i := 1 to beriaBase do
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: DOUBLE
1415: LD_INT 1
1417: DEC
1418: ST_TO_ADDR
1419: LD_EXP 56
1423: PUSH
1424: FOR_TO
1425: IFFALSE 1678
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1427: LD_ADDR_OWVAR 42
1431: PUSH
1432: LD_EXP 56
1436: PUSH
1437: LD_VAR 0 2
1441: ARRAY
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1447: LD_ADDR_OWVAR 43
1451: PUSH
1452: LD_EXP 56
1456: PUSH
1457: LD_VAR 0 2
1461: ARRAY
1462: PUSH
1463: LD_INT 5
1465: ARRAY
1466: ST_TO_ADDR
// if bc_type = b_lab then
1467: LD_OWVAR 42
1471: PUSH
1472: LD_INT 6
1474: EQUAL
1475: IFFALSE 1493
// begin bc_kind1 = b_lab_basic ;
1477: LD_ADDR_OWVAR 44
1481: PUSH
1482: LD_INT 9
1484: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1485: LD_ADDR_OWVAR 45
1489: PUSH
1490: LD_INT 9
1492: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1493: LD_OWVAR 42
1497: PUSH
1498: LD_INT 7
1500: EQUAL
1501: PUSH
1502: LD_OWVAR 42
1506: PUSH
1507: LD_INT 8
1509: EQUAL
1510: OR
1511: IFFALSE 1627
// begin if beriaBase [ i ] [ 7 ] then
1513: LD_EXP 56
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 7
1526: ARRAY
1527: IFFALSE 1549
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1529: LD_ADDR_OWVAR 44
1533: PUSH
1534: LD_EXP 56
1538: PUSH
1539: LD_VAR 0 2
1543: ARRAY
1544: PUSH
1545: LD_INT 7
1547: ARRAY
1548: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1549: LD_EXP 56
1553: PUSH
1554: LD_VAR 0 2
1558: ARRAY
1559: PUSH
1560: LD_INT 8
1562: ARRAY
1563: IFFALSE 1585
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1565: LD_ADDR_OWVAR 45
1569: PUSH
1570: LD_EXP 56
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 8
1583: ARRAY
1584: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1585: LD_EXP 56
1589: PUSH
1590: LD_VAR 0 2
1594: ARRAY
1595: PUSH
1596: LD_INT 7
1598: ARRAY
1599: NOT
1600: PUSH
1601: LD_EXP 56
1605: PUSH
1606: LD_VAR 0 2
1610: ARRAY
1611: PUSH
1612: LD_INT 8
1614: ARRAY
1615: NOT
1616: AND
1617: IFFALSE 1627
// bc_type := b_lab ;
1619: LD_ADDR_OWVAR 42
1623: PUSH
1624: LD_INT 6
1626: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1627: LD_EXP 56
1631: PUSH
1632: LD_VAR 0 2
1636: ARRAY
1637: PUSH
1638: LD_INT 2
1640: ARRAY
1641: PPUSH
1642: LD_EXP 56
1646: PUSH
1647: LD_VAR 0 2
1651: ARRAY
1652: PUSH
1653: LD_INT 3
1655: ARRAY
1656: PPUSH
1657: LD_EXP 56
1661: PUSH
1662: LD_VAR 0 2
1666: ARRAY
1667: PUSH
1668: LD_INT 4
1670: ARRAY
1671: PPUSH
1672: CALL_OW 47
// end ;
1676: GO 1424
1678: POP
1679: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1680: LD_ADDR_EXP 57
1684: PUSH
1685: LD_INT 22
1687: PUSH
1688: LD_INT 3
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PUSH
1695: LD_INT 30
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PPUSH
1709: CALL_OW 69
1713: PUSH
1714: LD_INT 1
1716: ARRAY
1717: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1718: LD_EXP 57
1722: PPUSH
1723: LD_STRING beria
1725: PPUSH
1726: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1730: LD_EXP 57
1734: PPUSH
1735: CALL_OW 274
1739: PPUSH
1740: LD_INT 1
1742: PPUSH
1743: LD_EXP 2
1747: PPUSH
1748: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1752: LD_EXP 57
1756: PPUSH
1757: CALL_OW 274
1761: PPUSH
1762: LD_INT 2
1764: PPUSH
1765: LD_EXP 3
1769: PPUSH
1770: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1774: LD_EXP 57
1778: PPUSH
1779: CALL_OW 274
1783: PPUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_EXP 57
1791: PPUSH
1792: CALL_OW 274
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: CALL_OW 275
1804: PUSH
1805: LD_EXP 39
1809: PLUS
1810: PPUSH
1811: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1815: LD_EXP 57
1819: PPUSH
1820: CALL_OW 274
1824: PPUSH
1825: LD_INT 2
1827: PPUSH
1828: LD_EXP 57
1832: PPUSH
1833: CALL_OW 274
1837: PPUSH
1838: LD_INT 2
1840: PPUSH
1841: CALL_OW 275
1845: PUSH
1846: LD_EXP 40
1850: PLUS
1851: PPUSH
1852: CALL_OW 277
// uc_side = 6 ;
1856: LD_ADDR_OWVAR 20
1860: PUSH
1861: LD_INT 6
1863: ST_TO_ADDR
// for i in otherBeriaUnits do
1864: LD_ADDR_VAR 0 2
1868: PUSH
1869: LD_EXP 55
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1900
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1877: LD_VAR 0 2
1881: PPUSH
1882: LD_INT 159
1884: PPUSH
1885: LD_INT 107
1887: PPUSH
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 50
1898: GO 1874
1900: POP
1901: POP
// for i in other_survivors do
1902: LD_ADDR_VAR 0 2
1906: PUSH
1907: LD_EXP 53
1911: PUSH
1912: FOR_IN
1913: IFFALSE 1938
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_INT 159
1922: PPUSH
1923: LD_INT 107
1925: PPUSH
1926: LD_INT 10
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 50
1936: GO 1912
1938: POP
1939: POP
// end ;
1940: LD_VAR 0 1
1944: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
1945: LD_INT 0
1947: PPUSH
1948: PPUSH
1949: PPUSH
1950: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
1951: LD_ADDR_EXP 63
1955: PUSH
1956: LD_STRING 02_KirovBase_3
1958: PPUSH
1959: EMPTY
1960: PPUSH
1961: CALL_OW 30
1965: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
1966: LD_ADDR_EXP 62
1970: PUSH
1971: LD_STRING 02_other_kirov
1973: PPUSH
1974: CALL_OW 31
1978: ST_TO_ADDR
// uc_side = 6 ;
1979: LD_ADDR_OWVAR 20
1983: PUSH
1984: LD_INT 6
1986: ST_TO_ADDR
// uc_nation = 3 ;
1987: LD_ADDR_OWVAR 21
1991: PUSH
1992: LD_INT 3
1994: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
1995: LD_ADDR_EXP 58
1999: PUSH
2000: LD_STRING Kurin
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 6798 0 2
2010: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2011: LD_EXP 58
2015: PPUSH
2016: LD_INT 166
2018: PPUSH
2019: LD_INT 109
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 48
// ComHold ( Kurin ) ;
2029: LD_EXP 58
2033: PPUSH
2034: CALL_OW 140
// for i := 1 to kirovBase do
2038: LD_ADDR_VAR 0 2
2042: PUSH
2043: DOUBLE
2044: LD_INT 1
2046: DEC
2047: ST_TO_ADDR
2048: LD_EXP 63
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2492
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2056: LD_ADDR_OWVAR 42
2060: PUSH
2061: LD_EXP 63
2065: PUSH
2066: LD_VAR 0 2
2070: ARRAY
2071: PUSH
2072: LD_INT 1
2074: ARRAY
2075: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2076: LD_ADDR_OWVAR 43
2080: PUSH
2081: LD_EXP 63
2085: PUSH
2086: LD_VAR 0 2
2090: ARRAY
2091: PUSH
2092: LD_INT 5
2094: ARRAY
2095: ST_TO_ADDR
// if bc_type = b_depot then
2096: LD_OWVAR 42
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: IFFALSE 2114
// bc_type = b_warehouse ;
2106: LD_ADDR_OWVAR 42
2110: PUSH
2111: LD_INT 1
2113: ST_TO_ADDR
// if bc_type = b_armoury then
2114: LD_OWVAR 42
2118: PUSH
2119: LD_INT 4
2121: EQUAL
2122: IFFALSE 2132
// bc_type = b_barracks ;
2124: LD_ADDR_OWVAR 42
2128: PUSH
2129: LD_INT 5
2131: ST_TO_ADDR
// if bc_type = b_lab then
2132: LD_OWVAR 42
2136: PUSH
2137: LD_INT 6
2139: EQUAL
2140: IFFALSE 2158
// begin bc_kind1 = b_lab_weapon ;
2142: LD_ADDR_OWVAR 44
2146: PUSH
2147: LD_INT 10
2149: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2150: LD_ADDR_OWVAR 45
2154: PUSH
2155: LD_INT 9
2157: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2158: LD_OWVAR 42
2162: PUSH
2163: LD_INT 2
2165: EQUAL
2166: IFFALSE 2176
// bc_type = b_factory ;
2168: LD_ADDR_OWVAR 42
2172: PUSH
2173: LD_INT 3
2175: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2176: LD_OWVAR 42
2180: PUSH
2181: LD_INT 7
2183: EQUAL
2184: PUSH
2185: LD_OWVAR 42
2189: PUSH
2190: LD_INT 8
2192: EQUAL
2193: OR
2194: IFFALSE 2310
// begin if kirovBase [ i ] [ 7 ] then
2196: LD_EXP 63
2200: PUSH
2201: LD_VAR 0 2
2205: ARRAY
2206: PUSH
2207: LD_INT 7
2209: ARRAY
2210: IFFALSE 2232
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2212: LD_ADDR_OWVAR 44
2216: PUSH
2217: LD_EXP 63
2221: PUSH
2222: LD_VAR 0 2
2226: ARRAY
2227: PUSH
2228: LD_INT 7
2230: ARRAY
2231: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2232: LD_EXP 63
2236: PUSH
2237: LD_VAR 0 2
2241: ARRAY
2242: PUSH
2243: LD_INT 8
2245: ARRAY
2246: IFFALSE 2268
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2248: LD_ADDR_OWVAR 45
2252: PUSH
2253: LD_EXP 63
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: PUSH
2264: LD_INT 8
2266: ARRAY
2267: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2268: LD_EXP 63
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PUSH
2279: LD_INT 7
2281: ARRAY
2282: NOT
2283: PUSH
2284: LD_EXP 63
2288: PUSH
2289: LD_VAR 0 2
2293: ARRAY
2294: PUSH
2295: LD_INT 8
2297: ARRAY
2298: NOT
2299: AND
2300: IFFALSE 2310
// bc_type := b_lab ;
2302: LD_ADDR_OWVAR 42
2306: PUSH
2307: LD_INT 6
2309: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2310: LD_OWVAR 42
2314: PUSH
2315: LD_INT 31
2317: EQUAL
2318: IFFALSE 2342
// begin bc_type = b_bunker ;
2320: LD_ADDR_OWVAR 42
2324: PUSH
2325: LD_INT 32
2327: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2328: LD_ADDR_EXP 74
2332: PUSH
2333: LD_EXP 74
2337: PUSH
2338: LD_INT 1
2340: PLUS
2341: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: LD_EXP 63
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: PUSH
2358: LD_INT 2
2360: ARRAY
2361: PPUSH
2362: LD_EXP 63
2366: PUSH
2367: LD_VAR 0 2
2371: ARRAY
2372: PUSH
2373: LD_INT 3
2375: ARRAY
2376: PPUSH
2377: LD_EXP 63
2381: PUSH
2382: LD_VAR 0 2
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 47
2396: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 4
2404: LESS
2405: PUSH
2406: LD_OWVAR 42
2410: PUSH
2411: LD_INT 32
2413: EQUAL
2414: AND
2415: IFFALSE 2464
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2417: LD_VAR 0 4
2421: PPUSH
2422: LD_INT 42
2424: PUSH
2425: LD_INT 43
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PUSH
2432: LD_INT 1
2434: PPUSH
2435: LD_INT 2
2437: PPUSH
2438: CALL_OW 12
2442: ARRAY
2443: PPUSH
2444: CALL_OW 431
// tmp = tmp + 1 ;
2448: LD_ADDR_VAR 0 3
2452: PUSH
2453: LD_VAR 0 3
2457: PUSH
2458: LD_INT 1
2460: PLUS
2461: ST_TO_ADDR
// end else
2462: GO 2490
// if bc_type = b_bunker then
2464: LD_OWVAR 42
2468: PUSH
2469: LD_INT 32
2471: EQUAL
2472: IFFALSE 2490
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2474: LD_ADDR_EXP 69
2478: PUSH
2479: LD_EXP 69
2483: PUSH
2484: LD_VAR 0 4
2488: ADD
2489: ST_TO_ADDR
// end ;
2490: GO 2053
2492: POP
2493: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2494: LD_ADDR_EXP 64
2498: PUSH
2499: LD_INT 22
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 1
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2532: LD_EXP 64
2536: PPUSH
2537: LD_STRING kirov
2539: PPUSH
2540: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2544: LD_EXP 64
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 5000
2559: PPUSH
2560: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2564: LD_EXP 64
2568: PPUSH
2569: CALL_OW 274
2573: PPUSH
2574: LD_INT 2
2576: PPUSH
2577: LD_INT 2000
2579: PPUSH
2580: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2584: LD_ADDR_EXP 66
2588: PUSH
2589: LD_INT 22
2591: PUSH
2592: LD_INT 6
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 21
2601: PUSH
2602: LD_INT 3
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 30
2611: PUSH
2612: LD_INT 5
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PPUSH
2629: LD_INT 145
2631: PPUSH
2632: LD_INT 102
2634: PPUSH
2635: CALL_OW 73
2639: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2640: LD_ADDR_EXP 67
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 6
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 21
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_INT 5
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: LD_EXP 66
2689: DIFF
2690: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2691: LD_ADDR_EXP 67
2695: PUSH
2696: LD_EXP 67
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: ST_TO_ADDR
// end ;
2705: LD_VAR 0 1
2709: RET
// export function PrepareKirovPersonel ; var i ; begin
2710: LD_INT 0
2712: PPUSH
2713: PPUSH
// PrepareEngineer ( false , 7 ) ;
2714: LD_INT 0
2716: PPUSH
2717: LD_INT 7
2719: PPUSH
2720: CALL_OW 382
// kirovEng = CreateHuman ;
2724: LD_ADDR_EXP 68
2728: PUSH
2729: CALL_OW 44
2733: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2734: LD_EXP 68
2738: PPUSH
2739: LD_INT 159
2741: PPUSH
2742: LD_INT 107
2744: PPUSH
2745: LD_INT 10
2747: PPUSH
2748: LD_INT 0
2750: PPUSH
2751: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2755: LD_ADDR_EXP 59
2759: PUSH
2760: LD_STRING Popov
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL 6798 0 2
2770: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2771: LD_EXP 59
2775: PPUSH
2776: LD_INT 4
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2786: LD_EXP 59
2790: PPUSH
2791: LD_INT 98
2793: PPUSH
2794: LD_INT 36
2796: PPUSH
2797: CALL_OW 118
// hc_name :=  ;
2801: LD_ADDR_OWVAR 26
2805: PUSH
2806: LD_STRING 
2808: ST_TO_ADDR
// hc_gallery :=  ;
2809: LD_ADDR_OWVAR 33
2813: PUSH
2814: LD_STRING 
2816: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2817: LD_INT 0
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL_OW 381
// ruScout = CreateHuman ;
2827: LD_ADDR_EXP 61
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2837: LD_EXP 61
2841: PPUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// ComCrawl ( ruScout ) ;
2852: LD_EXP 61
2856: PPUSH
2857: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2861: LD_EXP 61
2865: PPUSH
2866: LD_INT 98
2868: PPUSH
2869: LD_INT 36
2871: PPUSH
2872: CALL_OW 178
// uc_side = 6 ;
2876: LD_ADDR_OWVAR 20
2880: PUSH
2881: LD_INT 6
2883: ST_TO_ADDR
// for i in otherKirovUnits do
2884: LD_ADDR_VAR 0 2
2888: PUSH
2889: LD_EXP 62
2893: PUSH
2894: FOR_IN
2895: IFFALSE 3031
// begin SetSide ( i , 6 ) ;
2897: LD_VAR 0 2
2901: PPUSH
2902: LD_INT 6
2904: PPUSH
2905: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2909: LD_VAR 0 2
2913: PPUSH
2914: CALL_OW 257
2918: PUSH
2919: LD_INT 1
2921: EQUAL
2922: PUSH
2923: LD_EXP 74
2927: PUSH
2928: LD_INT 0
2930: GREATER
2931: AND
2932: IFFALSE 3008
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_INT 18
2941: PPUSH
2942: LD_INT 22
2944: PUSH
2945: LD_INT 6
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 21
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 32
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: PPUSH
2977: CALL_OW 70
2981: PUSH
2982: LD_EXP 74
2986: ARRAY
2987: PPUSH
2988: CALL 8174 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
2992: LD_ADDR_EXP 74
2996: PUSH
2997: LD_EXP 74
3001: PUSH
3002: LD_INT 1
3004: MINUS
3005: ST_TO_ADDR
// end else
3006: GO 3029
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3008: LD_VAR 0 2
3012: PPUSH
3013: LD_INT 159
3015: PPUSH
3016: LD_INT 107
3018: PPUSH
3019: LD_INT 10
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 50
// end ; end ;
3029: GO 2894
3031: POP
3032: POP
// end ;
3033: LD_VAR 0 1
3037: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3038: LD_INT 0
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
// uc_side = 6 ;
3044: LD_ADDR_OWVAR 20
3048: PUSH
3049: LD_INT 6
3051: ST_TO_ADDR
// uc_nation = 3 ;
3052: LD_ADDR_OWVAR 21
3056: PUSH
3057: LD_INT 3
3059: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3060: LD_ADDR_EXP 79
3064: PUSH
3065: LD_STRING Grishko
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: CALL 6798 0 2
3075: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3076: LD_EXP 79
3080: PPUSH
3081: LD_INT 218
3083: PPUSH
3084: LD_INT 108
3086: PPUSH
3087: LD_INT 3
3089: PPUSH
3090: LD_INT 0
3092: PPUSH
3093: CALL_OW 50
// ComHold ( Grishko ) ;
3097: LD_EXP 79
3101: PPUSH
3102: CALL_OW 140
// end ;
3106: LD_VAR 0 1
3110: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3111: LD_INT 0
3113: PPUSH
3114: PPUSH
3115: PPUSH
// uc_side = 3 ;
3116: LD_ADDR_OWVAR 20
3120: PUSH
3121: LD_INT 3
3123: ST_TO_ADDR
// uc_nation = 3 ;
3124: LD_ADDR_OWVAR 21
3128: PUSH
3129: LD_INT 3
3131: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_EXP 4
3146: PUSH
3147: FOR_TO
3148: IFFALSE 3280
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3150: LD_EXP 4
3154: PUSH
3155: LD_VAR 0 2
3159: ARRAY
3160: PUSH
3161: LD_INT 1
3163: ARRAY
3164: PPUSH
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 2
3174: ARRAY
3175: PUSH
3176: LD_INT 2
3178: ARRAY
3179: PPUSH
3180: LD_EXP 4
3184: PUSH
3185: LD_VAR 0 2
3189: ARRAY
3190: PUSH
3191: LD_INT 3
3193: ARRAY
3194: PPUSH
3195: LD_EXP 4
3199: PUSH
3200: LD_VAR 0 2
3204: ARRAY
3205: PUSH
3206: LD_INT 4
3208: ARRAY
3209: PPUSH
3210: LD_EXP 4
3214: PUSH
3215: LD_VAR 0 2
3219: ARRAY
3220: PUSH
3221: LD_INT 5
3223: ARRAY
3224: PPUSH
3225: CALL 33140 0 5
// vehicle = CreateVehicle ;
3229: LD_ADDR_VAR 0 3
3233: PUSH
3234: CALL_OW 45
3238: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3239: LD_VAR 0 3
3243: PPUSH
3244: LD_INT 25
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3254: LD_VAR 0 3
3258: PPUSH
3259: LD_EXP 4
3263: PUSH
3264: LD_VAR 0 2
3268: ARRAY
3269: PUSH
3270: LD_INT 6
3272: ARRAY
3273: PPUSH
3274: CALL_OW 234
// end ;
3278: GO 3147
3280: POP
3281: POP
// end ;
3282: LD_VAR 0 1
3286: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3287: LD_INT 0
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3293: LD_ADDR_VAR 0 3
3297: PUSH
3298: LD_STRING 02_OtherBuildings_4
3300: PPUSH
3301: EMPTY
3302: PPUSH
3303: CALL_OW 30
3307: ST_TO_ADDR
// uc_side = 3 ;
3308: LD_ADDR_OWVAR 20
3312: PUSH
3313: LD_INT 3
3315: ST_TO_ADDR
// for i := 1 to otherBuildings do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: DOUBLE
3322: LD_INT 1
3324: DEC
3325: ST_TO_ADDR
3326: LD_VAR 0 3
3330: PUSH
3331: FOR_TO
3332: IFFALSE 3593
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3334: LD_ADDR_OWVAR 21
3338: PUSH
3339: LD_VAR 0 3
3343: PUSH
3344: LD_VAR 0 2
3348: ARRAY
3349: PUSH
3350: LD_INT 6
3352: ARRAY
3353: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3354: LD_ADDR_OWVAR 42
3358: PUSH
3359: LD_VAR 0 3
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PUSH
3370: LD_INT 1
3372: ARRAY
3373: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3374: LD_ADDR_OWVAR 43
3378: PUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PUSH
3390: LD_INT 5
3392: ARRAY
3393: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3394: LD_ADDR_VAR 0 4
3398: PUSH
3399: LD_VAR 0 3
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PUSH
3410: LD_INT 2
3412: ARRAY
3413: PPUSH
3414: LD_VAR 0 3
3418: PUSH
3419: LD_VAR 0 2
3423: ARRAY
3424: PUSH
3425: LD_INT 3
3427: ARRAY
3428: PPUSH
3429: LD_VAR 0 3
3433: PUSH
3434: LD_VAR 0 2
3438: ARRAY
3439: PUSH
3440: LD_INT 4
3442: ARRAY
3443: PPUSH
3444: CALL_OW 47
3448: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3449: LD_VAR 0 4
3453: PPUSH
3454: LD_VAR 0 3
3458: PUSH
3459: LD_VAR 0 2
3463: ARRAY
3464: PUSH
3465: LD_INT 7
3467: ARRAY
3468: PPUSH
3469: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3473: LD_VAR 0 4
3477: PPUSH
3478: CALL_OW 266
3482: PUSH
3483: LD_INT 0
3485: PUSH
3486: LD_INT 1
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: IN
3493: IFFALSE 3591
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3495: LD_VAR 0 4
3499: PPUSH
3500: CALL_OW 274
3504: PPUSH
3505: LD_INT 1
3507: PPUSH
3508: LD_VAR 0 3
3512: PUSH
3513: LD_VAR 0 2
3517: ARRAY
3518: PUSH
3519: LD_INT 8
3521: ARRAY
3522: PPUSH
3523: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3527: LD_VAR 0 4
3531: PPUSH
3532: CALL_OW 274
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: LD_VAR 0 3
3544: PUSH
3545: LD_VAR 0 2
3549: ARRAY
3550: PUSH
3551: LD_INT 9
3553: ARRAY
3554: PPUSH
3555: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3559: LD_VAR 0 4
3563: PPUSH
3564: CALL_OW 274
3568: PPUSH
3569: LD_INT 1
3571: PPUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 2
3581: ARRAY
3582: PUSH
3583: LD_INT 10
3585: ARRAY
3586: PPUSH
3587: CALL_OW 277
// end ; end ;
3591: GO 3331
3593: POP
3594: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3595: LD_ADDR_VAR 0 3
3599: PUSH
3600: LD_STRING 02_AmericanBuildings_5
3602: PPUSH
3603: EMPTY
3604: PPUSH
3605: CALL_OW 30
3609: ST_TO_ADDR
// uc_side = 1 ;
3610: LD_ADDR_OWVAR 20
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// uc_nation = 1 ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_INT 1
3625: ST_TO_ADDR
// for i := 1 to otherBuildings do
3626: LD_ADDR_VAR 0 2
3630: PUSH
3631: DOUBLE
3632: LD_INT 1
3634: DEC
3635: ST_TO_ADDR
3636: LD_VAR 0 3
3640: PUSH
3641: FOR_TO
3642: IFFALSE 3846
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3644: LD_ADDR_OWVAR 42
3648: PUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_VAR 0 2
3658: ARRAY
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3664: LD_ADDR_OWVAR 43
3668: PUSH
3669: LD_VAR 0 3
3673: PUSH
3674: LD_VAR 0 2
3678: ARRAY
3679: PUSH
3680: LD_INT 5
3682: ARRAY
3683: ST_TO_ADDR
// if bc_type = b_breastwork then
3684: LD_OWVAR 42
3688: PUSH
3689: LD_INT 31
3691: EQUAL
3692: IFFALSE 3765
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3694: LD_ADDR_VAR 0 4
3698: PUSH
3699: LD_VAR 0 3
3703: PUSH
3704: LD_VAR 0 2
3708: ARRAY
3709: PUSH
3710: LD_INT 2
3712: ARRAY
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_VAR 0 2
3723: ARRAY
3724: PUSH
3725: LD_INT 3
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_VAR 0 2
3738: ARRAY
3739: PUSH
3740: LD_INT 4
3742: ARRAY
3743: PPUSH
3744: CALL_OW 47
3748: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3749: LD_EXP 41
3753: PPUSH
3754: LD_VAR 0 4
3758: PPUSH
3759: CALL 8264 0 2
// end else
3763: GO 3820
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3765: LD_ADDR_VAR 0 4
3769: PUSH
3770: LD_VAR 0 3
3774: PUSH
3775: LD_VAR 0 2
3779: ARRAY
3780: PUSH
3781: LD_INT 2
3783: ARRAY
3784: PPUSH
3785: LD_VAR 0 3
3789: PUSH
3790: LD_VAR 0 2
3794: ARRAY
3795: PUSH
3796: LD_INT 3
3798: ARRAY
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_VAR 0 2
3809: ARRAY
3810: PUSH
3811: LD_INT 4
3813: ARRAY
3814: PPUSH
3815: CALL_OW 47
3819: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3820: LD_VAR 0 4
3824: PPUSH
3825: LD_VAR 0 3
3829: PUSH
3830: LD_VAR 0 2
3834: ARRAY
3835: PUSH
3836: LD_INT 7
3838: ARRAY
3839: PPUSH
3840: CALL_OW 234
// end ;
3844: GO 3641
3846: POP
3847: POP
// end ;
3848: LD_VAR 0 1
3852: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3853: LD_INT 0
3855: PPUSH
3856: PPUSH
// secondBaseTeam = [ ] ;
3857: LD_ADDR_EXP 75
3861: PUSH
3862: EMPTY
3863: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3864: LD_INT 226
3866: PPUSH
3867: LD_INT 109
3869: PPUSH
3870: LD_INT 6
3872: PPUSH
3873: CALL_OW 441
// uc_side = 6 ;
3877: LD_ADDR_OWVAR 20
3881: PUSH
3882: LD_INT 6
3884: ST_TO_ADDR
// uc_nation = 3 ;
3885: LD_ADDR_OWVAR 21
3889: PUSH
3890: LD_INT 3
3892: ST_TO_ADDR
// hc_name =  ;
3893: LD_ADDR_OWVAR 26
3897: PUSH
3898: LD_STRING 
3900: ST_TO_ADDR
// hc_gallery =  ;
3901: LD_ADDR_OWVAR 33
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// for i := 1 to 3 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 3
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3976
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3925: LD_INT 0
3927: PPUSH
3928: LD_EXP 41
3932: PPUSH
3933: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3937: LD_ADDR_EXP 75
3941: PUSH
3942: LD_EXP 75
3946: PUSH
3947: CALL_OW 44
3951: ADD
3952: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
3953: LD_EXP 75
3957: PUSH
3958: LD_VAR 0 2
3962: ARRAY
3963: PPUSH
3964: LD_INT 19
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 49
// end ;
3974: GO 3922
3976: POP
3977: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
3978: LD_INT 0
3980: PPUSH
3981: LD_EXP 41
3985: PPUSH
3986: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3990: LD_ADDR_EXP 75
3994: PUSH
3995: LD_EXP 75
3999: PUSH
4000: CALL_OW 44
4004: ADD
4005: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4006: LD_EXP 75
4010: PUSH
4011: LD_INT 4
4013: ARRAY
4014: PPUSH
4015: LD_INT 19
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4025: LD_INT 0
4027: PPUSH
4028: LD_EXP 41
4032: PPUSH
4033: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4037: LD_ADDR_EXP 75
4041: PUSH
4042: LD_EXP 75
4046: PUSH
4047: CALL_OW 44
4051: ADD
4052: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4053: LD_EXP 75
4057: PUSH
4058: LD_INT 5
4060: ARRAY
4061: PPUSH
4062: LD_INT 19
4064: PPUSH
4065: LD_INT 0
4067: PPUSH
4068: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4072: LD_EXP 75
4076: PPUSH
4077: LD_INT 214
4079: PPUSH
4080: LD_INT 105
4082: PPUSH
4083: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4087: LD_EXP 75
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 2
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 0
4109: PPUSH
4110: LD_INT 222
4112: PPUSH
4113: LD_INT 115
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4123: LD_EXP 75
4127: PPUSH
4128: LD_INT 25
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PPUSH
4138: CALL_OW 72
4142: PPUSH
4143: LD_INT 224
4145: PPUSH
4146: LD_INT 107
4148: PPUSH
4149: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4153: LD_EXP 75
4157: PPUSH
4158: LD_INT 25
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_INT 228
4175: PPUSH
4176: LD_INT 110
4178: PPUSH
4179: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4183: LD_EXP 75
4187: PPUSH
4188: LD_INT 25
4190: PUSH
4191: LD_INT 2
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 72
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 216
4208: PPUSH
4209: LD_INT 114
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4219: LD_EXP 75
4223: PPUSH
4224: LD_INT 25
4226: PUSH
4227: LD_INT 2
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 72
4238: PPUSH
4239: LD_INT 31
4241: PPUSH
4242: LD_INT 215
4244: PPUSH
4245: LD_INT 103
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4255: LD_EXP 75
4259: PPUSH
4260: LD_INT 25
4262: PUSH
4263: LD_INT 2
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PPUSH
4270: CALL_OW 72
4274: PPUSH
4275: LD_INT 31
4277: PPUSH
4278: LD_INT 227
4280: PPUSH
4281: LD_INT 116
4283: PPUSH
4284: LD_INT 5
4286: PPUSH
4287: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4291: LD_EXP 75
4295: PPUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PPUSH
4306: CALL_OW 72
4310: PPUSH
4311: LD_INT 29
4313: PPUSH
4314: LD_INT 226
4316: PPUSH
4317: LD_INT 109
4319: PPUSH
4320: LD_INT 3
4322: PPUSH
4323: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4327: LD_EXP 75
4331: PPUSH
4332: LD_INT 25
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 72
4346: PPUSH
4347: LD_INT 208
4349: PPUSH
4350: LD_INT 106
4352: PPUSH
4353: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4357: LD_EXP 75
4361: PPUSH
4362: LD_INT 25
4364: PUSH
4365: LD_INT 2
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 72
4376: PPUSH
4377: LD_INT 209
4379: PPUSH
4380: LD_INT 105
4382: PPUSH
4383: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4387: LD_EXP 75
4391: PUSH
4392: LD_INT 5
4394: ARRAY
4395: PPUSH
4396: LD_INT 209
4398: PPUSH
4399: LD_INT 105
4401: PPUSH
4402: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4406: LD_EXP 75
4410: PUSH
4411: LD_INT 5
4413: ARRAY
4414: PPUSH
4415: LD_INT 208
4417: PPUSH
4418: LD_INT 106
4420: PPUSH
4421: CALL_OW 178
// end ;
4425: LD_VAR 0 1
4429: RET
// export function SpawnKirovSupport ; var i , un ; begin
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
4434: PPUSH
// uc_side = 6 ;
4435: LD_ADDR_OWVAR 20
4439: PUSH
4440: LD_INT 6
4442: ST_TO_ADDR
// uc_nation = 3 ;
4443: LD_ADDR_OWVAR 21
4447: PUSH
4448: LD_INT 3
4450: ST_TO_ADDR
// hc_name =  ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING 
4458: ST_TO_ADDR
// hc_gallery :=  ;
4459: LD_ADDR_OWVAR 33
4463: PUSH
4464: LD_STRING 
4466: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: DOUBLE
4473: LD_INT 1
4475: DEC
4476: ST_TO_ADDR
4477: LD_EXP 77
4481: PUSH
4482: FOR_TO
4483: IFFALSE 4571
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4485: LD_INT 0
4487: PPUSH
4488: LD_INT 1
4490: PPUSH
4491: LD_INT 4
4493: PPUSH
4494: CALL_OW 12
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 12
4509: PPUSH
4510: CALL_OW 380
// un = CreateHuman ;
4514: LD_ADDR_VAR 0 3
4518: PUSH
4519: CALL_OW 44
4523: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4524: LD_ADDR_EXP 76
4528: PUSH
4529: LD_EXP 76
4533: PUSH
4534: LD_VAR 0 3
4538: ADD
4539: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_INT 19
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4555: LD_VAR 0 3
4559: PPUSH
4560: LD_EXP 66
4564: PPUSH
4565: CALL_OW 120
// end ;
4569: GO 4482
4571: POP
4572: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4573: LD_ADDR_VAR 0 2
4577: PUSH
4578: DOUBLE
4579: LD_INT 1
4581: DEC
4582: ST_TO_ADDR
4583: LD_EXP 78
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: PUSH
4592: LD_INT 4
4594: PLUS
4595: PUSH
4596: FOR_TO
4597: IFFALSE 4695
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4599: LD_INT 0
4601: PPUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 1
4607: PPUSH
4608: LD_INT 3
4610: PPUSH
4611: CALL_OW 12
4615: PPUSH
4616: CALL_OW 380
// un = CreateHuman ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: CALL_OW 44
4629: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_INT 19
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// if i > kirovBunkersToOccupy then
4645: LD_VAR 0 2
4649: PUSH
4650: LD_EXP 70
4654: GREATER
4655: IFFALSE 4673
// ComEnterUnit ( un , ru2_bar2 ) else
4657: LD_VAR 0 3
4661: PPUSH
4662: LD_EXP 67
4666: PPUSH
4667: CALL_OW 120
4671: GO 4693
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4673: LD_VAR 0 3
4677: PPUSH
4678: LD_EXP 70
4682: PUSH
4683: LD_VAR 0 2
4687: ARRAY
4688: PPUSH
4689: CALL_OW 120
// end ;
4693: GO 4596
4695: POP
4696: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: DOUBLE
4703: LD_INT 1
4705: DEC
4706: ST_TO_ADDR
4707: LD_EXP 78
4711: PUSH
4712: LD_INT 3
4714: ARRAY
4715: PUSH
4716: FOR_TO
4717: IFFALSE 4820
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4719: LD_INT 0
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 1
4727: PPUSH
4728: LD_INT 3
4730: PPUSH
4731: CALL_OW 12
4735: PPUSH
4736: CALL_OW 380
// un = CreateHuman ;
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: CALL_OW 44
4749: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4750: LD_VAR 0 3
4754: PPUSH
4755: LD_INT 19
4757: PPUSH
4758: LD_INT 0
4760: PPUSH
4761: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4765: LD_VAR 0 3
4769: PPUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 6
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 21
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 30
4792: PUSH
4793: LD_INT 3
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: PPUSH
4805: CALL_OW 69
4809: PUSH
4810: LD_INT 1
4812: ARRAY
4813: PPUSH
4814: CALL_OW 120
// end ;
4818: GO 4716
4820: POP
4821: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 78
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4948
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4844: LD_INT 0
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_INT 3
4855: PPUSH
4856: CALL_OW 12
4860: PPUSH
4861: CALL_OW 380
// un = CreateHuman ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: CALL_OW 44
4874: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4875: LD_VAR 0 3
4879: PPUSH
4880: LD_INT 19
4882: PPUSH
4883: LD_INT 0
4885: PPUSH
4886: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_INT 18
4897: PPUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 30
4920: PUSH
4921: LD_INT 6
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 70
4937: PUSH
4938: LD_INT 1
4940: ARRAY
4941: PPUSH
4942: CALL_OW 120
// end ;
4946: GO 4841
4948: POP
4949: POP
// end ;
4950: LD_VAR 0 1
4954: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
4959: PPUSH
// survivorsArabianAttack = [ ] ;
4960: LD_ADDR_EXP 76
4964: PUSH
4965: EMPTY
4966: ST_TO_ADDR
// limit = 9 ;
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: LD_INT 9
4974: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
4975: LD_ADDR_EXP 76
4979: PUSH
4980: LD_EXP 76
4984: PUSH
4985: LD_EXP 59
4989: ADD
4990: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
4991: LD_EXP 50
4995: PPUSH
4996: CALL_OW 302
5000: PUSH
5001: LD_EXP 50
5005: PPUSH
5006: CALL_OW 255
5010: PUSH
5011: LD_INT 6
5013: EQUAL
5014: AND
5015: IFFALSE 5047
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5017: LD_ADDR_EXP 76
5021: PUSH
5022: LD_EXP 76
5026: PUSH
5027: LD_EXP 50
5031: ADD
5032: ST_TO_ADDR
// limit = limit - 1 ;
5033: LD_ADDR_VAR 0 2
5037: PUSH
5038: LD_VAR 0 2
5042: PUSH
5043: LD_INT 1
5045: MINUS
5046: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5047: LD_EXP 51
5051: PPUSH
5052: CALL_OW 302
5056: PUSH
5057: LD_EXP 51
5061: PPUSH
5062: CALL_OW 255
5066: PUSH
5067: LD_INT 6
5069: EQUAL
5070: AND
5071: IFFALSE 5103
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5073: LD_ADDR_EXP 76
5077: PUSH
5078: LD_EXP 76
5082: PUSH
5083: LD_EXP 51
5087: ADD
5088: ST_TO_ADDR
// limit = limit - 1 ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 1
5101: MINUS
5102: ST_TO_ADDR
// end ; for unit in other_survivors do
5103: LD_ADDR_VAR 0 3
5107: PUSH
5108: LD_EXP 53
5112: PUSH
5113: FOR_IN
5114: IFFALSE 5174
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5116: LD_VAR 0 3
5120: PPUSH
5121: CALL_OW 302
5125: PUSH
5126: LD_VAR 0 3
5130: PPUSH
5131: CALL_OW 255
5135: PUSH
5136: LD_INT 6
5138: EQUAL
5139: AND
5140: IFFALSE 5172
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5142: LD_ADDR_EXP 76
5146: PUSH
5147: LD_EXP 76
5151: PUSH
5152: LD_VAR 0 3
5156: ADD
5157: ST_TO_ADDR
// limit = limit - 1 ;
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_VAR 0 2
5167: PUSH
5168: LD_INT 1
5170: MINUS
5171: ST_TO_ADDR
// end ; end ;
5172: GO 5113
5174: POP
5175: POP
// for unit in otherBeriaUnits do
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_EXP 55
5185: PUSH
5186: FOR_IN
5187: IFFALSE 5247
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5189: LD_VAR 0 3
5193: PPUSH
5194: CALL_OW 302
5198: PUSH
5199: LD_VAR 0 3
5203: PPUSH
5204: CALL_OW 255
5208: PUSH
5209: LD_INT 6
5211: EQUAL
5212: AND
5213: IFFALSE 5245
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5215: LD_ADDR_EXP 76
5219: PUSH
5220: LD_EXP 76
5224: PUSH
5225: LD_VAR 0 3
5229: ADD
5230: ST_TO_ADDR
// limit = limit - 1 ;
5231: LD_ADDR_VAR 0 2
5235: PUSH
5236: LD_VAR 0 2
5240: PUSH
5241: LD_INT 1
5243: MINUS
5244: ST_TO_ADDR
// end ; end ;
5245: GO 5186
5247: POP
5248: POP
// if limit > 0 then
5249: LD_VAR 0 2
5253: PUSH
5254: LD_INT 0
5256: GREATER
5257: IFFALSE 5269
// survivorsToSpawn = limit ;
5259: LD_ADDR_EXP 77
5263: PUSH
5264: LD_VAR 0 2
5268: ST_TO_ADDR
// end ;
5269: LD_VAR 0 1
5273: RET
// export function PrepareScholtze ; begin
5274: LD_INT 0
5276: PPUSH
// uc_side = 8 ;
5277: LD_ADDR_OWVAR 20
5281: PUSH
5282: LD_INT 8
5284: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5285: LD_ADDR_EXP 52
5289: PUSH
5290: LD_STRING Scholtze
5292: PPUSH
5293: LD_INT 0
5295: PPUSH
5296: CALL 6798 0 2
5300: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5301: LD_EXP 52
5305: PPUSH
5306: LD_INT 30
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 49
// end ; end_of_file
5316: LD_VAR 0 1
5320: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5321: LD_INT 0
5323: PPUSH
// amSupportTroops = [ ] ;
5324: LD_ADDR_EXP 81
5328: PUSH
5329: EMPTY
5330: ST_TO_ADDR
// PrepareOmicronBase ;
5331: CALL 5340 0 0
// end ;
5335: LD_VAR 0 1
5339: RET
// function PrepareOmicronBase ; var base ; begin
5340: LD_INT 0
5342: PPUSH
5343: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5344: LD_ADDR_EXP 83
5348: PUSH
5349: LD_INT 64
5351: PPUSH
5352: LD_INT 13
5354: PPUSH
5355: LD_STRING omikron
5357: PPUSH
5358: LD_INT 1
5360: PUSH
5361: LD_INT 2
5363: PUSH
5364: LD_INT 2
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: LD_INT 3000
5380: PUSH
5381: LD_INT 3000
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: PPUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: LD_INT 4
5400: PUSH
5401: LD_INT 2
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL 36549 0 6
5414: ST_TO_ADDR
// case Difficulty of 2 :
5415: LD_OWVAR 67
5419: PUSH
5420: LD_INT 2
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5444
5428: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5429: LD_INT 51
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: CALL_OW 322
// end ; 3 :
5442: GO 5482
5444: LD_INT 3
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5481
5452: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5453: LD_INT 49
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: LD_INT 1
5461: PPUSH
5462: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5466: LD_INT 51
5468: PPUSH
5469: LD_INT 1
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: CALL_OW 322
// end ; end ;
5479: GO 5482
5481: POP
// end ;
5482: LD_VAR 0 1
5486: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5487: LD_INT 0
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
// amIntroUnits = [ ] ;
5493: LD_ADDR_EXP 80
5497: PUSH
5498: EMPTY
5499: ST_TO_ADDR
// uc_side = 1 ;
5500: LD_ADDR_OWVAR 20
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// uc_nation = nation_american ;
5508: LD_ADDR_OWVAR 21
5512: PUSH
5513: LD_INT 1
5515: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5516: LD_ADDR_OWVAR 37
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// vc_control = control_manual ;
5524: LD_ADDR_OWVAR 38
5528: PUSH
5529: LD_INT 1
5531: ST_TO_ADDR
// vc_engine = engine_combustion ;
5532: LD_ADDR_OWVAR 39
5536: PUSH
5537: LD_INT 1
5539: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5540: LD_ADDR_OWVAR 40
5544: PUSH
5545: LD_INT 5
5547: ST_TO_ADDR
// veh = CreateVehicle ;
5548: LD_ADDR_VAR 0 3
5552: PUSH
5553: CALL_OW 45
5557: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5558: LD_VAR 0 3
5562: PPUSH
5563: LD_INT 4
5565: PPUSH
5566: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5570: LD_ADDR_EXP 80
5574: PUSH
5575: LD_EXP 80
5579: PUSH
5580: LD_VAR 0 3
5584: ADD
5585: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5586: LD_VAR 0 3
5590: PPUSH
5591: LD_INT 5
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 49
// for i := 1 to 5 do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: DOUBLE
5607: LD_INT 1
5609: DEC
5610: ST_TO_ADDR
5611: LD_INT 5
5613: PUSH
5614: FOR_TO
5615: IFFALSE 5712
// begin hc_name :=  ;
5617: LD_ADDR_OWVAR 26
5621: PUSH
5622: LD_STRING 
5624: ST_TO_ADDR
// hc_gallery :=  ;
5625: LD_ADDR_OWVAR 33
5629: PUSH
5630: LD_STRING 
5632: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5633: LD_INT 0
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: CALL_OW 381
// human = CreateHuman ;
5643: LD_ADDR_VAR 0 4
5647: PUSH
5648: CALL_OW 44
5652: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5653: LD_ADDR_EXP 80
5657: PUSH
5658: LD_EXP 80
5662: PUSH
5663: LD_VAR 0 4
5667: ADD
5668: ST_TO_ADDR
// if i < 5 then
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 5
5676: LESS
5677: IFFALSE 5696
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5679: LD_VAR 0 4
5683: PPUSH
5684: LD_INT 5
5686: PPUSH
5687: LD_INT 0
5689: PPUSH
5690: CALL_OW 49
5694: GO 5710
// begin PlaceHumanInUnit ( human , veh ) ;
5696: LD_VAR 0 4
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 52
// end ; end ;
5710: GO 5614
5712: POP
5713: POP
// end ;
5714: LD_VAR 0 1
5718: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5719: LD_INT 0
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
// uc_side := 1 ;
5726: LD_ADDR_OWVAR 20
5730: PUSH
5731: LD_INT 1
5733: ST_TO_ADDR
// uc_nation := 1 ;
5734: LD_ADDR_OWVAR 21
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// hc_name :=  ;
5742: LD_ADDR_OWVAR 26
5746: PUSH
5747: LD_STRING 
5749: ST_TO_ADDR
// hc_gallery :=  ;
5750: LD_ADDR_OWVAR 33
5754: PUSH
5755: LD_STRING 
5757: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5758: LD_ADDR_VAR 0 6
5762: PUSH
5763: DOUBLE
5764: LD_INT 1
5766: DEC
5767: ST_TO_ADDR
5768: LD_VAR 0 1
5772: PUSH
5773: FOR_TO
5774: IFFALSE 5833
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5776: LD_INT 0
5778: PPUSH
5779: LD_EXP 41
5783: PPUSH
5784: CALL_OW 381
// un = CreateHuman ;
5788: LD_ADDR_VAR 0 7
5792: PUSH
5793: CALL_OW 44
5797: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5798: LD_ADDR_EXP 81
5802: PUSH
5803: LD_EXP 81
5807: PUSH
5808: LD_VAR 0 7
5812: ADD
5813: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5814: LD_VAR 0 7
5818: PPUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: LD_INT 0
5826: PPUSH
5827: CALL_OW 49
// end ;
5831: GO 5773
5833: POP
5834: POP
// for i := 1 to scientistsAmount do
5835: LD_ADDR_VAR 0 6
5839: PUSH
5840: DOUBLE
5841: LD_INT 1
5843: DEC
5844: ST_TO_ADDR
5845: LD_VAR 0 2
5849: PUSH
5850: FOR_TO
5851: IFFALSE 5910
// begin PrepareScientist ( false , enemySkillLevel ) ;
5853: LD_INT 0
5855: PPUSH
5856: LD_EXP 41
5860: PPUSH
5861: CALL_OW 384
// un = CreateHuman ;
5865: LD_ADDR_VAR 0 7
5869: PUSH
5870: CALL_OW 44
5874: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5875: LD_ADDR_EXP 81
5879: PUSH
5880: LD_EXP 81
5884: PUSH
5885: LD_VAR 0 7
5889: ADD
5890: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5891: LD_VAR 0 7
5895: PPUSH
5896: LD_VAR 0 4
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 49
// end ;
5908: GO 5850
5910: POP
5911: POP
// for i := 1 to vehiclesAmount do
5912: LD_ADDR_VAR 0 6
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_VAR 0 3
5926: PUSH
5927: FOR_TO
5928: IFFALSE 6094
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5930: LD_ADDR_OWVAR 40
5934: PUSH
5935: LD_INT 2
5937: PUSH
5938: LD_INT 4
5940: PUSH
5941: LD_INT 3
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: LIST
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: CALL_OW 12
5959: ARRAY
5960: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5961: LD_ADDR_OWVAR 37
5965: PUSH
5966: LD_INT 3
5968: ST_TO_ADDR
// vc_control = control_manual ;
5969: LD_ADDR_OWVAR 38
5973: PUSH
5974: LD_INT 1
5976: ST_TO_ADDR
// vc_engine = engine_combustion ;
5977: LD_ADDR_OWVAR 39
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// veh = CreateVehicle ;
5985: LD_ADDR_VAR 0 8
5989: PUSH
5990: CALL_OW 45
5994: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
5995: LD_ADDR_EXP 81
5999: PUSH
6000: LD_EXP 81
6004: PUSH
6005: LD_VAR 0 8
6009: ADD
6010: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6011: LD_VAR 0 8
6015: PPUSH
6016: LD_VAR 0 4
6020: PPUSH
6021: LD_INT 0
6023: PPUSH
6024: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6028: LD_INT 0
6030: PPUSH
6031: LD_EXP 41
6035: PPUSH
6036: CALL_OW 383
// un = CreateHuman ;
6040: LD_ADDR_VAR 0 7
6044: PUSH
6045: CALL_OW 44
6049: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6050: LD_ADDR_EXP 81
6054: PUSH
6055: LD_EXP 81
6059: PUSH
6060: LD_VAR 0 7
6064: ADD
6065: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6066: LD_VAR 0 7
6070: PPUSH
6071: LD_VAR 0 8
6075: PPUSH
6076: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6080: LD_VAR 0 8
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL_OW 240
// end ;
6092: GO 5927
6094: POP
6095: POP
// case area of NorthAmericanSpawnArea :
6096: LD_VAR 0 4
6100: PUSH
6101: LD_INT 7
6103: DOUBLE
6104: EQUAL
6105: IFTRUE 6109
6107: GO 6120
6109: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6110: LD_ADDR_VAR 0 9
6114: PUSH
6115: LD_INT 10
6117: ST_TO_ADDR
6118: GO 6159
6120: LD_INT 9
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6139
6128: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6129: LD_ADDR_VAR 0 9
6133: PUSH
6134: LD_INT 11
6136: ST_TO_ADDR
6137: GO 6159
6139: LD_INT 8
6141: DOUBLE
6142: EQUAL
6143: IFTRUE 6147
6145: GO 6158
6147: POP
// road = SouthRoadArea2 ; end ;
6148: LD_ADDR_VAR 0 9
6152: PUSH
6153: LD_INT 12
6155: ST_TO_ADDR
6156: GO 6159
6158: POP
// MoveToBase ( amSupportTroops , road ) ;
6159: LD_EXP 81
6163: PPUSH
6164: LD_VAR 0 9
6168: PPUSH
6169: CALL 17879 0 2
// end ;
6173: LD_VAR 0 5
6177: RET
// export function PrepareAmericanPatrol ; var un ; begin
6178: LD_INT 0
6180: PPUSH
6181: PPUSH
// amPatrol = [ ] ;
6182: LD_ADDR_EXP 82
6186: PUSH
6187: EMPTY
6188: ST_TO_ADDR
// uc_side = 1 ;
6189: LD_ADDR_OWVAR 20
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// uc_nation = 1 ;
6197: LD_ADDR_OWVAR 21
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6205: LD_ADDR_VAR 0 2
6209: PUSH
6210: LD_STRING Campell
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL 6798 0 2
6220: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6221: LD_ADDR_EXP 82
6225: PUSH
6226: LD_EXP 82
6230: PUSH
6231: LD_VAR 0 2
6235: ADD
6236: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6237: LD_VAR 0 2
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: LD_INT 0
6247: PPUSH
6248: CALL_OW 49
// SetClass ( un , 1 ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6264: LD_INT 1
6266: PPUSH
6267: LD_EXP 41
6271: PPUSH
6272: CALL_OW 381
// un = CreateHuman ;
6276: LD_ADDR_VAR 0 2
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6286: LD_ADDR_EXP 82
6290: PUSH
6291: LD_EXP 82
6295: PUSH
6296: LD_VAR 0 2
6300: ADD
6301: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6302: LD_VAR 0 2
6306: PPUSH
6307: LD_INT 14
6309: PPUSH
6310: LD_INT 0
6312: PPUSH
6313: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6317: LD_EXP 82
6321: PPUSH
6322: LD_EXP 52
6326: PPUSH
6327: CALL_OW 115
// end ; end_of_file
6331: LD_VAR 0 1
6335: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6336: LD_INT 0
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
// northGroup = [ ] ;
6342: LD_ADDR_EXP 84
6346: PUSH
6347: EMPTY
6348: ST_TO_ADDR
// southGroup = [ ] ;
6349: LD_ADDR_EXP 85
6353: PUSH
6354: EMPTY
6355: ST_TO_ADDR
// uc_side = 2 ;
6356: LD_ADDR_OWVAR 20
6360: PUSH
6361: LD_INT 2
6363: ST_TO_ADDR
// uc_nation = 2 ;
6364: LD_ADDR_OWVAR 21
6368: PUSH
6369: LD_INT 2
6371: ST_TO_ADDR
// hc_name :=  ;
6372: LD_ADDR_OWVAR 26
6376: PUSH
6377: LD_STRING 
6379: ST_TO_ADDR
// hc_gallery :=  ;
6380: LD_ADDR_OWVAR 33
6384: PUSH
6385: LD_STRING 
6387: ST_TO_ADDR
// for i := 1 to 10 do
6388: LD_ADDR_VAR 0 2
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 10
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6516
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6404: LD_INT 13
6406: PPUSH
6407: LD_INT 1
6409: PPUSH
6410: LD_INT 1
6412: PPUSH
6413: LD_INT 26
6415: PPUSH
6416: LD_INT 100
6418: PPUSH
6419: CALL 33140 0 5
// veh = CreateVehicle ;
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: CALL_OW 45
6432: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6433: LD_ADDR_EXP 85
6437: PUSH
6438: LD_EXP 85
6442: PUSH
6443: LD_VAR 0 4
6447: ADD
6448: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6449: LD_VAR 0 4
6453: PPUSH
6454: LD_INT 23
6456: PPUSH
6457: LD_INT 0
6459: PPUSH
6460: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6464: LD_INT 0
6466: PPUSH
6467: LD_INT 8
6469: PPUSH
6470: CALL_OW 383
// un = CreateHuman ;
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: CALL_OW 44
6483: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6484: LD_ADDR_EXP 85
6488: PUSH
6489: LD_EXP 85
6493: PUSH
6494: LD_VAR 0 3
6498: ADD
6499: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6500: LD_VAR 0 3
6504: PPUSH
6505: LD_VAR 0 4
6509: PPUSH
6510: CALL_OW 52
// end ;
6514: GO 6401
6516: POP
6517: POP
// for i := 1 to 20 do
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 20
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6587
// begin PrepareSoldier ( false , 8 ) ;
6534: LD_INT 0
6536: PPUSH
6537: LD_INT 8
6539: PPUSH
6540: CALL_OW 381
// un = CreateHuman ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: CALL_OW 44
6553: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6554: LD_ADDR_EXP 85
6558: PUSH
6559: LD_EXP 85
6563: PUSH
6564: LD_VAR 0 3
6568: ADD
6569: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6570: LD_VAR 0 3
6574: PPUSH
6575: LD_INT 23
6577: PPUSH
6578: LD_INT 0
6580: PPUSH
6581: CALL_OW 49
// end ;
6585: GO 6531
6587: POP
6588: POP
// for i := 1 to 20 do
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: DOUBLE
6595: LD_INT 1
6597: DEC
6598: ST_TO_ADDR
6599: LD_INT 20
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6661
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 8
6610: PPUSH
6611: LD_INT 8
6613: PPUSH
6614: CALL_OW 380
// un = CreateHuman ;
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: CALL_OW 44
6627: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6628: LD_ADDR_EXP 85
6632: PUSH
6633: LD_EXP 85
6637: PUSH
6638: LD_VAR 0 3
6642: ADD
6643: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6644: LD_VAR 0 3
6648: PPUSH
6649: LD_INT 23
6651: PPUSH
6652: LD_INT 0
6654: PPUSH
6655: CALL_OW 49
// end ;
6659: GO 6602
6661: POP
6662: POP
// for i := 1 to 10 do
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: DOUBLE
6669: LD_INT 1
6671: DEC
6672: ST_TO_ADDR
6673: LD_INT 10
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6791
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6679: LD_INT 13
6681: PPUSH
6682: LD_INT 1
6684: PPUSH
6685: LD_INT 1
6687: PPUSH
6688: LD_INT 26
6690: PPUSH
6691: LD_INT 100
6693: PPUSH
6694: CALL 33140 0 5
// veh = CreateVehicle ;
6698: LD_ADDR_VAR 0 4
6702: PUSH
6703: CALL_OW 45
6707: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6708: LD_ADDR_EXP 84
6712: PUSH
6713: LD_EXP 84
6717: PUSH
6718: LD_VAR 0 4
6722: ADD
6723: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6724: LD_VAR 0 4
6728: PPUSH
6729: LD_INT 22
6731: PPUSH
6732: LD_INT 0
6734: PPUSH
6735: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6739: LD_INT 0
6741: PPUSH
6742: LD_INT 8
6744: PPUSH
6745: CALL_OW 383
// un = CreateHuman ;
6749: LD_ADDR_VAR 0 3
6753: PUSH
6754: CALL_OW 44
6758: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6759: LD_ADDR_EXP 84
6763: PUSH
6764: LD_EXP 84
6768: PUSH
6769: LD_VAR 0 3
6773: ADD
6774: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6775: LD_VAR 0 3
6779: PPUSH
6780: LD_VAR 0 4
6784: PPUSH
6785: CALL_OW 52
// end ;
6789: GO 6676
6791: POP
6792: POP
// end ; end_of_file
6793: LD_VAR 0 1
6797: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6798: LD_INT 0
6800: PPUSH
6801: PPUSH
// if exist_mode then
6802: LD_VAR 0 2
6806: IFFALSE 6831
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6808: LD_ADDR_VAR 0 4
6812: PUSH
6813: LD_EXP 34
6817: PUSH
6818: LD_VAR 0 1
6822: STR
6823: PPUSH
6824: CALL_OW 34
6828: ST_TO_ADDR
6829: GO 6846
// unit := NewCharacter ( ident ) ;
6831: LD_ADDR_VAR 0 4
6835: PUSH
6836: LD_VAR 0 1
6840: PPUSH
6841: CALL_OW 25
6845: ST_TO_ADDR
// result := unit ;
6846: LD_ADDR_VAR 0 3
6850: PUSH
6851: LD_VAR 0 4
6855: ST_TO_ADDR
// end ;
6856: LD_VAR 0 3
6860: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
6861: LD_INT 0
6863: PPUSH
6864: PPUSH
6865: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
6866: LD_ADDR_VAR 0 1
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: LD_EXP 46
6880: PUSH
6881: LD_EXP 47
6885: PUSH
6886: LD_EXP 50
6890: PUSH
6891: LD_EXP 51
6895: PUSH
6896: LD_EXP 48
6900: PUSH
6901: LD_EXP 49
6905: PUSH
6906: LD_EXP 52
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: DIFF
6920: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
6921: LD_ADDR_VAR 0 7
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: LD_INT 1
6933: PPUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL_OW 12
6943: ARRAY
6944: ST_TO_ADDR
// if radio then
6945: LD_VAR 0 4
6949: IFFALSE 6998
// begin if GetSex ( speaker ) = sex_male then
6951: LD_VAR 0 7
6955: PPUSH
6956: CALL_OW 258
6960: PUSH
6961: LD_INT 1
6963: EQUAL
6964: IFFALSE 6982
// SayRadio ( speaker , dialogMID ) else
6966: LD_VAR 0 7
6970: PPUSH
6971: LD_VAR 0 2
6975: PPUSH
6976: CALL_OW 94
6980: GO 6996
// SayRadio ( speaker , dialogFID ) ;
6982: LD_VAR 0 7
6986: PPUSH
6987: LD_VAR 0 3
6991: PPUSH
6992: CALL_OW 94
// end else
6996: GO 7043
// begin if GetSex ( speaker ) = sex_male then
6998: LD_VAR 0 7
7002: PPUSH
7003: CALL_OW 258
7007: PUSH
7008: LD_INT 1
7010: EQUAL
7011: IFFALSE 7029
// Say ( speaker , dialogMID ) else
7013: LD_VAR 0 7
7017: PPUSH
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 88
7027: GO 7043
// Say ( speaker , dialogFID ) ;
7029: LD_VAR 0 7
7033: PPUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: CALL_OW 88
// end ; result := speaker ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_VAR 0 7
7052: ST_TO_ADDR
// end ;
7053: LD_VAR 0 5
7057: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7058: LD_INT 0
7060: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 255
7070: PUSH
7071: LD_VAR 0 3
7075: EQUAL
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 302
7086: AND
7087: IFFALSE 7109
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7089: LD_VAR 0 1
7093: PPUSH
7094: LD_EXP 33
7098: PUSH
7099: LD_VAR 0 2
7103: STR
7104: PPUSH
7105: CALL_OW 38
// end ;
7109: LD_VAR 0 4
7113: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7114: LD_INT 0
7116: PPUSH
7117: PPUSH
7118: PPUSH
// resultCharactersToSave = [ ] ;
7119: LD_ADDR_VAR 0 6
7123: PUSH
7124: EMPTY
7125: ST_TO_ADDR
// for unit in characters do
7126: LD_ADDR_VAR 0 5
7130: PUSH
7131: LD_VAR 0 1
7135: PUSH
7136: FOR_IN
7137: IFFALSE 7185
// if GetSide ( unit ) = side and IsOK ( unit ) then
7139: LD_VAR 0 5
7143: PPUSH
7144: CALL_OW 255
7148: PUSH
7149: LD_VAR 0 3
7153: EQUAL
7154: PUSH
7155: LD_VAR 0 5
7159: PPUSH
7160: CALL_OW 302
7164: AND
7165: IFFALSE 7183
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7167: LD_ADDR_VAR 0 6
7171: PUSH
7172: LD_VAR 0 6
7176: PUSH
7177: LD_VAR 0 5
7181: ADD
7182: ST_TO_ADDR
7183: GO 7136
7185: POP
7186: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7187: LD_VAR 0 6
7191: PPUSH
7192: LD_EXP 33
7196: PUSH
7197: LD_VAR 0 2
7201: STR
7202: PPUSH
7203: CALL_OW 38
// end ;
7207: LD_VAR 0 4
7211: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7212: LD_INT 0
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
// charsToChoose = otherKirovUnits ;
7218: LD_ADDR_VAR 0 4
7222: PUSH
7223: LD_EXP 62
7227: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7228: LD_ADDR_VAR 0 4
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_EXP 55
7242: ADD
7243: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7244: LD_ADDR_VAR 0 4
7248: PUSH
7249: LD_VAR 0 4
7253: PUSH
7254: LD_EXP 53
7258: ADD
7259: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7260: LD_ADDR_VAR 0 4
7264: PUSH
7265: LD_VAR 0 4
7269: PUSH
7270: LD_EXP 50
7274: ADD
7275: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_VAR 0 4
7285: PUSH
7286: LD_EXP 51
7290: ADD
7291: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_STRING text
7299: PPUSH
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 1
7309: PPUSH
7310: LD_INT -5
7312: PUSH
7313: LD_EXP 46
7317: PUSH
7318: LD_EXP 47
7322: PUSH
7323: LD_EXP 49
7327: PUSH
7328: LD_EXP 48
7332: PUSH
7333: LD_INT -6
7335: PUSH
7336: LD_INT -2
7338: PUSH
7339: LD_INT -3
7341: PUSH
7342: LD_INT -5
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_VAR 0 4
7360: ADD
7361: PUSH
7362: LD_INT -6
7364: PUSH
7365: LD_INT -4
7367: PUSH
7368: LD_EXP 58
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: ADD
7378: PPUSH
7379: LD_INT 1
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 42
7415: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 6
7423: PPUSH
7424: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7428: LD_VAR 0 5
7432: PPUSH
7433: LD_INT 3
7435: PPUSH
7436: CALL_OW 235
// SetSurvivorsArabianAttack ;
7440: CALL 4955 0 0
// MoveKurinUnitsToBuildings ;
7444: CALL 8882 0 0
// end ;
7448: LD_VAR 0 2
7452: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7457: LD_ADDR_VAR 0 5
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: LD_INT 22
7469: PUSH
7470: LD_VAR 0 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 21
7481: PUSH
7482: LD_INT 3
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 30
7491: PUSH
7492: LD_VAR 0 3
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 70
7510: PUSH
7511: FOR_IN
7512: IFFALSE 7545
// begin if UnitsInside ( building ) < 6 then
7514: LD_VAR 0 5
7518: PPUSH
7519: CALL_OW 313
7523: PUSH
7524: LD_INT 6
7526: LESS
7527: IFFALSE 7543
// begin result = building ;
7529: LD_ADDR_VAR 0 4
7533: PUSH
7534: LD_VAR 0 5
7538: ST_TO_ADDR
// exit ;
7539: POP
7540: POP
7541: GO 7555
// end ; end ;
7543: GO 7511
7545: POP
7546: POP
// result = 0 ;
7547: LD_ADDR_VAR 0 4
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// end ;
7555: LD_VAR 0 4
7559: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7566: LD_ADDR_VAR 0 6
7570: PUSH
7571: LD_INT 34
7573: PUSH
7574: LD_INT 71
7576: PUSH
7577: LD_INT 70
7579: PUSH
7580: LD_INT 69
7582: PUSH
7583: LD_INT 39
7585: PUSH
7586: LD_INT 31
7588: PUSH
7589: LD_INT 14
7591: PUSH
7592: LD_INT 10
7594: PUSH
7595: LD_INT 40
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// resultWeapons = [ ] ;
7609: LD_ADDR_VAR 0 5
7613: PUSH
7614: EMPTY
7615: ST_TO_ADDR
// for i := 1 to weaponTechs do
7616: LD_ADDR_VAR 0 4
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_VAR 0 6
7630: PUSH
7631: FOR_TO
7632: IFFALSE 7819
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7634: LD_VAR 0 6
7638: PUSH
7639: LD_VAR 0 4
7643: ARRAY
7644: PPUSH
7645: LD_VAR 0 2
7649: PPUSH
7650: CALL_OW 482
7654: PUSH
7655: LD_VAR 0 6
7659: PUSH
7660: LD_VAR 0 4
7664: ARRAY
7665: PPUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 321
7675: PUSH
7676: LD_INT 2
7678: EQUAL
7679: AND
7680: IFFALSE 7817
// case nation of nation_american :
7682: LD_VAR 0 2
7686: PUSH
7687: LD_INT 1
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7730
7695: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7696: LD_ADDR_VAR 0 5
7700: PUSH
7701: LD_VAR 0 5
7705: PUSH
7706: LD_VAR 0 6
7710: PUSH
7711: LD_VAR 0 4
7715: ARRAY
7716: PPUSH
7717: LD_VAR 0 2
7721: PPUSH
7722: CALL 7836 0 2
7726: ADD
7727: ST_TO_ADDR
7728: GO 7817
7730: LD_INT 2
7732: DOUBLE
7733: EQUAL
7734: IFTRUE 7738
7736: GO 7773
7738: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7739: LD_ADDR_VAR 0 5
7743: PUSH
7744: LD_VAR 0 5
7748: PUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_VAR 0 4
7758: ARRAY
7759: PPUSH
7760: LD_VAR 0 2
7764: PPUSH
7765: CALL 7836 0 2
7769: ADD
7770: ST_TO_ADDR
7771: GO 7817
7773: LD_INT 3
7775: DOUBLE
7776: EQUAL
7777: IFTRUE 7781
7779: GO 7816
7781: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7782: LD_ADDR_VAR 0 5
7786: PUSH
7787: LD_VAR 0 5
7791: PUSH
7792: LD_VAR 0 6
7796: PUSH
7797: LD_VAR 0 4
7801: ARRAY
7802: PPUSH
7803: LD_VAR 0 2
7807: PPUSH
7808: CALL 7836 0 2
7812: ADD
7813: ST_TO_ADDR
7814: GO 7817
7816: POP
// end ;
7817: GO 7631
7819: POP
7820: POP
// result = resultWeapons ;
7821: LD_ADDR_VAR 0 3
7825: PUSH
7826: LD_VAR 0 5
7830: ST_TO_ADDR
// end ;
7831: LD_VAR 0 3
7835: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
7836: LD_INT 0
7838: PPUSH
// case tech of tech_AdvMet :
7839: LD_VAR 0 1
7843: PUSH
7844: LD_INT 34
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7880
7852: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: LD_INT 6
7860: PUSH
7861: LD_STRING 
7863: PUSH
7864: LD_INT 46
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: PUSH
7872: LD_VAR 0 2
7876: ARRAY
7877: ST_TO_ADDR
7878: GO 8169
7880: LD_INT 71
7882: DOUBLE
7883: EQUAL
7884: IFTRUE 7888
7886: GO 7916
7888: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
7889: LD_ADDR_VAR 0 3
7893: PUSH
7894: LD_STRING 
7896: PUSH
7897: LD_STRING 
7899: PUSH
7900: LD_INT 47
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_VAR 0 2
7912: ARRAY
7913: ST_TO_ADDR
7914: GO 8169
7916: LD_INT 70
7918: DOUBLE
7919: EQUAL
7920: IFTRUE 7924
7922: GO 7952
7924: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
7925: LD_ADDR_VAR 0 3
7929: PUSH
7930: LD_STRING 
7932: PUSH
7933: LD_INT 26
7935: PUSH
7936: LD_STRING 
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: LD_VAR 0 2
7948: ARRAY
7949: ST_TO_ADDR
7950: GO 8169
7952: LD_INT 69
7954: DOUBLE
7955: EQUAL
7956: IFTRUE 7960
7958: GO 7988
7960: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
7961: LD_ADDR_VAR 0 3
7965: PUSH
7966: LD_INT 4
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 43
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PUSH
7980: LD_VAR 0 2
7984: ARRAY
7985: ST_TO_ADDR
7986: GO 8169
7988: LD_INT 39
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8024
7996: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 5
8004: PUSH
8005: LD_INT 27
8007: PUSH
8008: LD_INT 44
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_VAR 0 2
8020: ARRAY
8021: ST_TO_ADDR
8022: GO 8169
8024: LD_INT 31
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8032
8030: GO 8060
8032: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8033: LD_ADDR_VAR 0 3
8037: PUSH
8038: LD_STRING 
8040: PUSH
8041: LD_STRING 
8043: PUSH
8044: LD_INT 49
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: LD_VAR 0 2
8056: ARRAY
8057: ST_TO_ADDR
8058: GO 8169
8060: LD_INT 14
8062: DOUBLE
8063: EQUAL
8064: IFTRUE 8068
8066: GO 8096
8068: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8069: LD_ADDR_VAR 0 3
8073: PUSH
8074: LD_INT 10
8076: PUSH
8077: LD_STRING 
8079: PUSH
8080: LD_STRING 
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PUSH
8088: LD_VAR 0 2
8092: ARRAY
8093: ST_TO_ADDR
8094: GO 8169
8096: LD_INT 10
8098: DOUBLE
8099: EQUAL
8100: IFTRUE 8104
8102: GO 8132
8104: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8105: LD_ADDR_VAR 0 3
8109: PUSH
8110: LD_INT 9
8112: PUSH
8113: LD_STRING 
8115: PUSH
8116: LD_STRING 
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: LD_VAR 0 2
8128: ARRAY
8129: ST_TO_ADDR
8130: GO 8169
8132: LD_INT 40
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8168
8140: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8141: LD_ADDR_VAR 0 3
8145: PUSH
8146: LD_INT 7
8148: PUSH
8149: LD_INT 28
8151: PUSH
8152: LD_INT 45
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: LD_VAR 0 2
8164: ARRAY
8165: ST_TO_ADDR
8166: GO 8169
8168: POP
// end ;
8169: LD_VAR 0 3
8173: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8174: LD_INT 0
8176: PPUSH
8177: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8178: LD_ADDR_VAR 0 4
8182: PUSH
8183: LD_VAR 0 2
8187: PPUSH
8188: CALL_OW 254
8192: PUSH
8193: LD_INT 3
8195: MINUS
8196: ST_TO_ADDR
// if dir < 0 then
8197: LD_VAR 0 4
8201: PUSH
8202: LD_INT 0
8204: LESS
8205: IFFALSE 8221
// dir := 6 + dir ;
8207: LD_ADDR_VAR 0 4
8211: PUSH
8212: LD_INT 6
8214: PUSH
8215: LD_VAR 0 4
8219: PLUS
8220: ST_TO_ADDR
// SetDir ( un , dir ) ;
8221: LD_VAR 0 1
8225: PPUSH
8226: LD_VAR 0 4
8230: PPUSH
8231: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8235: LD_VAR 0 1
8239: PPUSH
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 52
// result = un ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_VAR 0 1
8258: ST_TO_ADDR
// end ;
8259: LD_VAR 0 3
8263: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8264: LD_INT 0
8266: PPUSH
8267: PPUSH
8268: PPUSH
// uc_side := GetSide ( b ) ;
8269: LD_ADDR_OWVAR 20
8273: PUSH
8274: LD_VAR 0 2
8278: PPUSH
8279: CALL_OW 255
8283: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8284: LD_ADDR_OWVAR 21
8288: PUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: CALL_OW 248
8298: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8299: LD_INT 0
8301: PPUSH
8302: LD_INT 1
8304: PPUSH
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL_OW 380
// un = CreateHuman ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8324: LD_ADDR_VAR 0 5
8328: PUSH
8329: LD_VAR 0 2
8333: PPUSH
8334: CALL_OW 254
8338: PUSH
8339: LD_INT 3
8341: MINUS
8342: ST_TO_ADDR
// if dir < 0 then
8343: LD_VAR 0 5
8347: PUSH
8348: LD_INT 0
8350: LESS
8351: IFFALSE 8367
// dir := 6 + dir ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 6
8360: PUSH
8361: LD_VAR 0 5
8365: PLUS
8366: ST_TO_ADDR
// SetDir ( un , dir ) ;
8367: LD_VAR 0 4
8371: PPUSH
8372: LD_VAR 0 5
8376: PPUSH
8377: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8381: LD_VAR 0 4
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 52
// result = un ;
8395: LD_ADDR_VAR 0 3
8399: PUSH
8400: LD_VAR 0 4
8404: ST_TO_ADDR
// end ;
8405: LD_VAR 0 3
8409: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
// for building in buildings do
8417: LD_ADDR_VAR 0 5
8421: PUSH
8422: LD_VAR 0 2
8426: PUSH
8427: FOR_IN
8428: IFFALSE 8520
// begin x = GetX ( building ) ;
8430: LD_ADDR_VAR 0 6
8434: PUSH
8435: LD_VAR 0 5
8439: PPUSH
8440: CALL_OW 250
8444: ST_TO_ADDR
// y = GetY ( building ) ;
8445: LD_ADDR_VAR 0 7
8449: PUSH
8450: LD_VAR 0 5
8454: PPUSH
8455: CALL_OW 251
8459: ST_TO_ADDR
// dir = GetDir ( building ) ;
8460: LD_ADDR_VAR 0 8
8464: PUSH
8465: LD_VAR 0 5
8469: PPUSH
8470: CALL_OW 254
8474: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8475: LD_VAR 0 1
8479: PPUSH
8480: LD_VAR 0 5
8484: PPUSH
8485: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: LD_VAR 0 6
8503: PPUSH
8504: LD_VAR 0 7
8508: PPUSH
8509: LD_VAR 0 8
8513: PPUSH
8514: CALL_OW 205
// end ;
8518: GO 8427
8520: POP
8521: POP
// end ;
8522: LD_VAR 0 4
8526: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8527: LD_INT 0
8529: PPUSH
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8670: LD_ADDR_VAR 0 9
8674: PUSH
8675: LD_INT 1
8677: PPUSH
8678: LD_INT 1
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL 28379 0 3
8688: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: DOUBLE
8695: LD_INT 1
8697: DEC
8698: ST_TO_ADDR
8699: LD_VAR 0 8
8703: PUSH
8704: FOR_TO
8705: IFFALSE 8781
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8707: LD_VAR 0 8
8711: PUSH
8712: LD_VAR 0 5
8716: ARRAY
8717: PPUSH
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 321
8727: PUSH
8728: LD_INT 1
8730: EQUAL
8731: PUSH
8732: LD_VAR 0 8
8736: PUSH
8737: LD_VAR 0 5
8741: ARRAY
8742: PPUSH
8743: LD_VAR 0 3
8747: PPUSH
8748: CALL_OW 482
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: AND
8757: IFFALSE 8779
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8759: LD_VAR 0 2
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_VAR 0 5
8773: ARRAY
8774: PPUSH
8775: CALL_OW 184
8779: GO 8704
8781: POP
8782: POP
// for i = 1 to am_tech_list do
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: DOUBLE
8789: LD_INT 1
8791: DEC
8792: ST_TO_ADDR
8793: LD_VAR 0 9
8797: PUSH
8798: FOR_TO
8799: IFFALSE 8875
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8801: LD_VAR 0 9
8805: PUSH
8806: LD_VAR 0 5
8810: ARRAY
8811: PPUSH
8812: LD_VAR 0 1
8816: PPUSH
8817: CALL_OW 321
8821: PUSH
8822: LD_INT 1
8824: EQUAL
8825: PUSH
8826: LD_VAR 0 9
8830: PUSH
8831: LD_VAR 0 5
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PPUSH
8842: CALL_OW 482
8846: PUSH
8847: LD_INT 1
8849: EQUAL
8850: AND
8851: IFFALSE 8873
// AddComResearch ( lab , am_tech_list [ i ] ) ;
8853: LD_VAR 0 2
8857: PPUSH
8858: LD_VAR 0 9
8862: PUSH
8863: LD_VAR 0 5
8867: ARRAY
8868: PPUSH
8869: CALL_OW 184
8873: GO 8798
8875: POP
8876: POP
// end ;
8877: LD_VAR 0 4
8881: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
8893: LD_ADDR_VAR 0 3
8897: PUSH
8898: LD_INT 22
8900: PUSH
8901: LD_INT 6
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 30
8920: PUSH
8921: LD_INT 6
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: PPUSH
8933: CALL_OW 69
8937: PUSH
8938: LD_INT 1
8940: ARRAY
8941: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8942: LD_ADDR_VAR 0 4
8946: PUSH
8947: LD_INT 22
8949: PUSH
8950: LD_INT 6
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 3
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 69
8986: PUSH
8987: LD_INT 1
8989: ARRAY
8990: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
8991: LD_ADDR_VAR 0 9
8995: PUSH
8996: LD_VAR 0 9
9000: PUSH
9001: LD_EXP 58
9005: ADD
9006: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9007: LD_ADDR_VAR 0 9
9011: PUSH
9012: LD_VAR 0 9
9016: PUSH
9017: LD_EXP 76
9021: ADD
9022: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9023: LD_ADDR_VAR 0 9
9027: PUSH
9028: LD_VAR 0 9
9032: PUSH
9033: LD_EXP 68
9037: ADD
9038: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9039: LD_ADDR_VAR 0 8
9043: PUSH
9044: LD_INT 18
9046: PPUSH
9047: LD_INT 22
9049: PUSH
9050: LD_INT 6
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: LD_INT 60
9072: PUSH
9073: EMPTY
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: PPUSH
9085: CALL_OW 70
9089: PUSH
9090: LD_VAR 0 9
9094: DIFF
9095: ST_TO_ADDR
// if not canTakeUnits then
9096: LD_VAR 0 8
9100: NOT
9101: IFFALSE 9134
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9103: LD_ADDR_EXP 78
9107: PUSH
9108: LD_EXP 78
9112: PPUSH
9113: LD_INT 4
9115: PPUSH
9116: LD_EXP 78
9120: PUSH
9121: LD_INT 3
9123: ARRAY
9124: PUSH
9125: LD_INT 2
9127: PLUS
9128: PPUSH
9129: CALL_OW 1
9133: ST_TO_ADDR
// if canTakeUnits > 2 then
9134: LD_VAR 0 8
9138: PUSH
9139: LD_INT 2
9141: GREATER
9142: IFFALSE 9212
// begin for i := 1 to rand ( 1 , 2 ) do
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: DOUBLE
9150: LD_INT 1
9152: DEC
9153: ST_TO_ADDR
9154: LD_INT 1
9156: PPUSH
9157: LD_INT 2
9159: PPUSH
9160: CALL_OW 12
9164: PUSH
9165: FOR_TO
9166: IFFALSE 9208
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9168: LD_VAR 0 8
9172: PUSH
9173: LD_VAR 0 2
9177: ARRAY
9178: PPUSH
9179: LD_VAR 0 3
9183: PPUSH
9184: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9188: LD_VAR 0 8
9192: PUSH
9193: LD_VAR 0 2
9197: ARRAY
9198: PPUSH
9199: LD_INT 4
9201: PPUSH
9202: CALL_OW 183
// end ;
9206: GO 9165
9208: POP
9209: POP
// end else
9210: GO 9280
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9212: LD_ADDR_VAR 0 2
9216: PUSH
9217: DOUBLE
9218: LD_INT 1
9220: DEC
9221: ST_TO_ADDR
9222: LD_INT 1
9224: PPUSH
9225: LD_VAR 0 8
9229: PPUSH
9230: CALL_OW 12
9234: PUSH
9235: FOR_TO
9236: IFFALSE 9278
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9238: LD_VAR 0 8
9242: PUSH
9243: LD_VAR 0 2
9247: ARRAY
9248: PPUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9258: LD_VAR 0 8
9262: PUSH
9263: LD_VAR 0 2
9267: ARRAY
9268: PPUSH
9269: LD_INT 4
9271: PPUSH
9272: CALL_OW 183
// end ;
9276: GO 9235
9278: POP
9279: POP
// end ; wait ( 0 0$01 ) ;
9280: LD_INT 35
9282: PPUSH
9283: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9287: LD_ADDR_VAR 0 8
9291: PUSH
9292: LD_INT 18
9294: PPUSH
9295: LD_INT 22
9297: PUSH
9298: LD_INT 6
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: LD_INT 21
9307: PUSH
9308: LD_INT 1
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: LD_INT 60
9320: PUSH
9321: EMPTY
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 70
9337: PUSH
9338: LD_VAR 0 9
9342: DIFF
9343: ST_TO_ADDR
// pom = 6 ;
9344: LD_ADDR_VAR 0 7
9348: PUSH
9349: LD_INT 6
9351: ST_TO_ADDR
// if canTakeUnits then
9352: LD_VAR 0 8
9356: IFFALSE 9473
// for i = 1 to canTakeUnits do
9358: LD_ADDR_VAR 0 2
9362: PUSH
9363: DOUBLE
9364: LD_INT 1
9366: DEC
9367: ST_TO_ADDR
9368: LD_VAR 0 8
9372: PUSH
9373: FOR_TO
9374: IFFALSE 9471
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9376: LD_VAR 0 8
9380: PUSH
9381: LD_VAR 0 2
9385: ARRAY
9386: PPUSH
9387: CALL_OW 257
9391: PUSH
9392: LD_INT 3
9394: NONEQUAL
9395: IFFALSE 9435
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9397: LD_VAR 0 8
9401: PUSH
9402: LD_VAR 0 2
9406: ARRAY
9407: PPUSH
9408: LD_VAR 0 4
9412: PPUSH
9413: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9417: LD_VAR 0 8
9421: PUSH
9422: LD_VAR 0 2
9426: ARRAY
9427: PPUSH
9428: LD_INT 3
9430: PPUSH
9431: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9435: LD_VAR 0 8
9439: PUSH
9440: LD_VAR 0 2
9444: ARRAY
9445: PPUSH
9446: LD_VAR 0 4
9450: PPUSH
9451: CALL_OW 120
// pom = pom - 1 ;
9455: LD_ADDR_VAR 0 7
9459: PUSH
9460: LD_VAR 0 7
9464: PUSH
9465: LD_INT 1
9467: MINUS
9468: ST_TO_ADDR
// end ;
9469: GO 9373
9471: POP
9472: POP
// if pom > 0 then
9473: LD_VAR 0 7
9477: PUSH
9478: LD_INT 0
9480: GREATER
9481: IFFALSE 9506
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9483: LD_ADDR_EXP 78
9487: PUSH
9488: LD_EXP 78
9492: PPUSH
9493: LD_INT 3
9495: PPUSH
9496: LD_VAR 0 7
9500: PPUSH
9501: CALL_OW 1
9505: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9506: LD_INT 35
9508: PPUSH
9509: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9513: LD_ADDR_VAR 0 5
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 6
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 21
9530: PUSH
9531: LD_INT 3
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 30
9540: PUSH
9541: LD_INT 32
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 59
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: PPUSH
9567: CALL_OW 69
9571: PUSH
9572: FOR_IN
9573: IFFALSE 9819
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9575: LD_ADDR_VAR 0 8
9579: PUSH
9580: LD_INT 18
9582: PPUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 6
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 3
9605: PUSH
9606: LD_INT 60
9608: PUSH
9609: EMPTY
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: PPUSH
9621: CALL_OW 70
9625: PUSH
9626: LD_VAR 0 9
9630: DIFF
9631: ST_TO_ADDR
// if canTakeUnits then
9632: LD_VAR 0 8
9636: IFFALSE 9770
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9638: LD_VAR 0 8
9642: PUSH
9643: LD_INT 1
9645: ARRAY
9646: PPUSH
9647: CALL_OW 257
9651: PUSH
9652: LD_INT 1
9654: NONEQUAL
9655: IFFALSE 9750
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9657: LD_VAR 0 8
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PPUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 6
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 3
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 30
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9714: LD_VAR 0 8
9718: PUSH
9719: LD_INT 1
9721: ARRAY
9722: PPUSH
9723: LD_INT 1
9725: PPUSH
9726: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9730: LD_VAR 0 8
9734: PUSH
9735: LD_INT 1
9737: ARRAY
9738: PPUSH
9739: CALL_OW 182
// wait ( 0 0$1 ) ;
9743: LD_INT 35
9745: PPUSH
9746: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9750: LD_VAR 0 8
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PPUSH
9759: LD_VAR 0 5
9763: PPUSH
9764: CALL_OW 120
// end else
9768: GO 9817
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9770: LD_ADDR_EXP 70
9774: PUSH
9775: LD_EXP 70
9779: PUSH
9780: LD_VAR 0 5
9784: ADD
9785: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9786: LD_ADDR_EXP 78
9790: PUSH
9791: LD_EXP 78
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: LD_EXP 78
9803: PUSH
9804: LD_INT 1
9806: ARRAY
9807: PUSH
9808: LD_INT 1
9810: PLUS
9811: PPUSH
9812: CALL_OW 1
9816: ST_TO_ADDR
// end ; end ;
9817: GO 9572
9819: POP
9820: POP
// end ;
9821: LD_VAR 0 1
9825: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9840: LD_VAR 0 1
9844: PPUSH
9845: CALL_OW 302
9849: NOT
9850: PUSH
9851: LD_VAR 0 4
9855: PUSH
9856: LD_INT 1
9858: EQUAL
9859: OR
9860: PUSH
9861: LD_VAR 0 2
9865: PPUSH
9866: LD_VAR 0 3
9870: PPUSH
9871: CALL_OW 488
9875: NOT
9876: OR
9877: PUSH
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: CALL_OW 297
9897: PUSH
9898: LD_VAR 0 4
9902: GREATEREQUAL
9903: OR
9904: PUSH
9905: LD_VAR 0 5
9909: PUSH
9910: LD_INT 1
9912: PUSH
9913: LD_INT 0
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: IN
9920: NOT
9921: OR
9922: IFFALSE 9926
// exit ;
9924: GO 11483
// attempts = 0 ;
9926: LD_ADDR_VAR 0 17
9930: PUSH
9931: LD_INT 0
9933: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9934: LD_ADDR_VAR 0 7
9938: PUSH
9939: EMPTY
9940: ST_TO_ADDR
// list_coords = [ ] ;
9941: LD_ADDR_VAR 0 8
9945: PUSH
9946: EMPTY
9947: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9948: LD_ADDR_VAR 0 9
9952: PUSH
9953: LD_VAR 0 2
9957: PPUSH
9958: LD_VAR 0 3
9962: PPUSH
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 250
9972: PPUSH
9973: LD_VAR 0 1
9977: PPUSH
9978: CALL_OW 251
9982: PPUSH
9983: CALL 11488 0 4
9987: ST_TO_ADDR
// if attempts = 0 then
9988: LD_VAR 0 17
9992: PUSH
9993: LD_INT 0
9995: EQUAL
9996: IFFALSE 10104
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9998: LD_ADDR_VAR 0 10
10002: PUSH
10003: LD_VAR 0 9
10007: PUSH
10008: LD_VAR 0 9
10012: PUSH
10013: LD_INT 1
10015: PLUS
10016: PUSH
10017: LD_VAR 0 9
10021: PUSH
10022: LD_INT 1
10024: MINUS
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10031: LD_VAR 0 10
10035: PUSH
10036: LD_INT 2
10038: ARRAY
10039: PUSH
10040: LD_INT 6
10042: EQUAL
10043: IFFALSE 10066
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10045: LD_ADDR_VAR 0 10
10049: PUSH
10050: LD_VAR 0 10
10054: PPUSH
10055: LD_INT 2
10057: PPUSH
10058: LD_INT 0
10060: PPUSH
10061: CALL_OW 1
10065: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10066: LD_VAR 0 10
10070: PUSH
10071: LD_INT 3
10073: ARRAY
10074: PUSH
10075: LD_INT 1
10077: NEG
10078: EQUAL
10079: IFFALSE 10102
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10081: LD_ADDR_VAR 0 10
10085: PUSH
10086: LD_VAR 0 10
10090: PPUSH
10091: LD_INT 3
10093: PPUSH
10094: LD_INT 5
10096: PPUSH
10097: CALL_OW 1
10101: ST_TO_ADDR
// end else
10102: GO 10141
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10104: LD_ADDR_VAR 0 10
10108: PUSH
10109: LD_INT 0
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: LD_INT 2
10117: PUSH
10118: LD_INT 3
10120: PUSH
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_VAR 0 9
10139: DIFF
10140: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10141: LD_ADDR_VAR 0 14
10145: PUSH
10146: DOUBLE
10147: LD_INT 1
10149: DEC
10150: ST_TO_ADDR
10151: LD_VAR 0 10
10155: PUSH
10156: LD_INT 0
10158: PLUS
10159: PUSH
10160: FOR_TO
10161: IFFALSE 10483
// case dir_list [ c ] of 0 :
10163: LD_VAR 0 10
10167: PUSH
10168: LD_VAR 0 14
10172: ARRAY
10173: PUSH
10174: LD_INT 0
10176: DOUBLE
10177: EQUAL
10178: IFTRUE 10182
10180: GO 10223
10182: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10183: LD_ADDR_VAR 0 8
10187: PUSH
10188: LD_VAR 0 8
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: LD_VAR 0 2
10200: PUSH
10201: LD_VAR 0 3
10205: PUSH
10206: LD_VAR 0 4
10210: MINUS
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 2
10220: ST_TO_ADDR
10221: GO 10481
10223: LD_INT 1
10225: DOUBLE
10226: EQUAL
10227: IFTRUE 10231
10229: GO 10272
10231: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10232: LD_ADDR_VAR 0 8
10236: PUSH
10237: LD_VAR 0 8
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: LD_VAR 0 2
10249: PUSH
10250: LD_VAR 0 4
10254: PLUS
10255: PUSH
10256: LD_VAR 0 3
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 2
10269: ST_TO_ADDR
10270: GO 10481
10272: LD_INT 2
10274: DOUBLE
10275: EQUAL
10276: IFTRUE 10280
10278: GO 10327
10280: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10281: LD_ADDR_VAR 0 8
10285: PUSH
10286: LD_VAR 0 8
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: LD_VAR 0 2
10298: PUSH
10299: LD_VAR 0 4
10303: PLUS
10304: PUSH
10305: LD_VAR 0 3
10309: PUSH
10310: LD_VAR 0 4
10314: PLUS
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: CALL_OW 2
10324: ST_TO_ADDR
10325: GO 10481
10327: LD_INT 3
10329: DOUBLE
10330: EQUAL
10331: IFTRUE 10335
10333: GO 10376
10335: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10336: LD_ADDR_VAR 0 8
10340: PUSH
10341: LD_VAR 0 8
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: LD_VAR 0 2
10353: PUSH
10354: LD_VAR 0 3
10358: PUSH
10359: LD_VAR 0 4
10363: PLUS
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 2
10373: ST_TO_ADDR
10374: GO 10481
10376: LD_INT 4
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10425
10384: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10385: LD_ADDR_VAR 0 8
10389: PUSH
10390: LD_VAR 0 8
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: LD_VAR 0 2
10402: PUSH
10403: LD_VAR 0 4
10407: MINUS
10408: PUSH
10409: LD_VAR 0 3
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PPUSH
10418: CALL_OW 2
10422: ST_TO_ADDR
10423: GO 10481
10425: LD_INT 5
10427: DOUBLE
10428: EQUAL
10429: IFTRUE 10433
10431: GO 10480
10433: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10434: LD_ADDR_VAR 0 8
10438: PUSH
10439: LD_VAR 0 8
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_VAR 0 4
10456: MINUS
10457: PUSH
10458: LD_VAR 0 3
10462: PUSH
10463: LD_VAR 0 4
10467: MINUS
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 2
10477: ST_TO_ADDR
10478: GO 10481
10480: POP
10481: GO 10160
10483: POP
10484: POP
// if dist < 30 then
10485: LD_VAR 0 4
10489: PUSH
10490: LD_INT 30
10492: LESS
10493: IFFALSE 10505
// c = 1 else
10495: LD_ADDR_VAR 0 14
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
10503: GO 10513
// c = 2 ;
10505: LD_ADDR_VAR 0 14
10509: PUSH
10510: LD_INT 2
10512: ST_TO_ADDR
// b = 1 ;
10513: LD_ADDR_VAR 0 11
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10521: LD_VAR 0 11
10525: PUSH
10526: LD_VAR 0 4
10530: PUSH
10531: LD_INT 1
10533: MINUS
10534: LESSEQUAL
10535: IFFALSE 10963
// begin if 0 in dir_list and 1 in dir_list then
10537: LD_INT 0
10539: PUSH
10540: LD_VAR 0 10
10544: IN
10545: PUSH
10546: LD_INT 1
10548: PUSH
10549: LD_VAR 0 10
10553: IN
10554: AND
10555: IFFALSE 10607
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10557: LD_ADDR_VAR 0 8
10561: PUSH
10562: LD_VAR 0 8
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: LD_VAR 0 2
10574: PUSH
10575: LD_VAR 0 11
10579: PLUS
10580: PUSH
10581: LD_VAR 0 3
10585: PUSH
10586: LD_VAR 0 4
10590: MINUS
10591: PUSH
10592: LD_VAR 0 11
10596: PLUS
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 2
10606: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10607: LD_INT 1
10609: PUSH
10610: LD_VAR 0 10
10614: IN
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_VAR 0 10
10623: IN
10624: AND
10625: IFFALSE 10671
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10627: LD_ADDR_VAR 0 8
10631: PUSH
10632: LD_VAR 0 8
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 2
10644: PUSH
10645: LD_VAR 0 4
10649: PLUS
10650: PUSH
10651: LD_VAR 0 3
10655: PUSH
10656: LD_VAR 0 11
10660: PLUS
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 2
10670: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10671: LD_INT 2
10673: PUSH
10674: LD_VAR 0 10
10678: IN
10679: PUSH
10680: LD_INT 3
10682: PUSH
10683: LD_VAR 0 10
10687: IN
10688: AND
10689: IFFALSE 10741
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PUSH
10709: LD_VAR 0 4
10713: PLUS
10714: PUSH
10715: LD_VAR 0 11
10719: MINUS
10720: PUSH
10721: LD_VAR 0 3
10725: PUSH
10726: LD_VAR 0 4
10730: PLUS
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 2
10740: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10741: LD_INT 3
10743: PUSH
10744: LD_VAR 0 10
10748: IN
10749: PUSH
10750: LD_INT 4
10752: PUSH
10753: LD_VAR 0 10
10757: IN
10758: AND
10759: IFFALSE 10811
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10761: LD_ADDR_VAR 0 8
10765: PUSH
10766: LD_VAR 0 8
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: LD_VAR 0 2
10778: PUSH
10779: LD_VAR 0 11
10783: MINUS
10784: PUSH
10785: LD_VAR 0 3
10789: PUSH
10790: LD_VAR 0 4
10794: PLUS
10795: PUSH
10796: LD_VAR 0 11
10800: MINUS
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 2
10810: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10811: LD_INT 4
10813: PUSH
10814: LD_VAR 0 10
10818: IN
10819: PUSH
10820: LD_INT 5
10822: PUSH
10823: LD_VAR 0 10
10827: IN
10828: AND
10829: IFFALSE 10875
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10831: LD_ADDR_VAR 0 8
10835: PUSH
10836: LD_VAR 0 8
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: LD_VAR 0 2
10848: PUSH
10849: LD_VAR 0 4
10853: MINUS
10854: PUSH
10855: LD_VAR 0 3
10859: PUSH
10860: LD_VAR 0 11
10864: MINUS
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 2
10874: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10875: LD_INT 5
10877: PUSH
10878: LD_VAR 0 10
10882: IN
10883: PUSH
10884: LD_INT 0
10886: PUSH
10887: LD_VAR 0 10
10891: IN
10892: AND
10893: IFFALSE 10945
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10895: LD_ADDR_VAR 0 8
10899: PUSH
10900: LD_VAR 0 8
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: LD_VAR 0 2
10912: PUSH
10913: LD_VAR 0 4
10917: MINUS
10918: PUSH
10919: LD_VAR 0 11
10923: PLUS
10924: PUSH
10925: LD_VAR 0 3
10929: PUSH
10930: LD_VAR 0 4
10934: MINUS
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 2
10944: ST_TO_ADDR
// b = b + c end ;
10945: LD_ADDR_VAR 0 11
10949: PUSH
10950: LD_VAR 0 11
10954: PUSH
10955: LD_VAR 0 14
10959: PLUS
10960: ST_TO_ADDR
10961: GO 10521
// if list_coords = 0 then
10963: LD_VAR 0 8
10967: PUSH
10968: LD_INT 0
10970: EQUAL
10971: IFFALSE 10975
// exit ;
10973: GO 11483
// repeat min_dist = 5000 ;
10975: LD_ADDR_VAR 0 12
10979: PUSH
10980: LD_INT 5000
10982: ST_TO_ADDR
// for b in list_coords do
10983: LD_ADDR_VAR 0 11
10987: PUSH
10988: LD_VAR 0 8
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11053
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10996: LD_ADDR_VAR 0 13
11000: PUSH
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_VAR 0 11
11010: PUSH
11011: LD_INT 1
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 11
11019: PUSH
11020: LD_INT 2
11022: ARRAY
11023: PPUSH
11024: CALL_OW 297
11028: ST_TO_ADDR
// if temp_dist < min_dist then
11029: LD_VAR 0 13
11033: PUSH
11034: LD_VAR 0 12
11038: LESS
11039: IFFALSE 11051
// min_dist = temp_dist ;
11041: LD_ADDR_VAR 0 12
11045: PUSH
11046: LD_VAR 0 13
11050: ST_TO_ADDR
// end ;
11051: GO 10993
11053: POP
11054: POP
// c = 0 ;
11055: LD_ADDR_VAR 0 14
11059: PUSH
11060: LD_INT 0
11062: ST_TO_ADDR
// repeat c = c + 1 ;
11063: LD_ADDR_VAR 0 14
11067: PUSH
11068: LD_VAR 0 14
11072: PUSH
11073: LD_INT 1
11075: PLUS
11076: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11077: LD_VAR 0 1
11081: PPUSH
11082: LD_VAR 0 8
11086: PUSH
11087: LD_VAR 0 14
11091: ARRAY
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 8
11101: PUSH
11102: LD_VAR 0 14
11106: ARRAY
11107: PUSH
11108: LD_INT 2
11110: ARRAY
11111: PPUSH
11112: CALL_OW 297
11116: PUSH
11117: LD_VAR 0 12
11121: EQUAL
11122: IFFALSE 11187
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11124: LD_ADDR_VAR 0 7
11128: PUSH
11129: LD_VAR 0 7
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: LD_VAR 0 8
11141: PUSH
11142: LD_VAR 0 14
11146: ARRAY
11147: PPUSH
11148: CALL_OW 2
11152: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11153: LD_ADDR_VAR 0 8
11157: PUSH
11158: LD_VAR 0 8
11162: PPUSH
11163: LD_VAR 0 14
11167: PPUSH
11168: CALL_OW 3
11172: ST_TO_ADDR
// c = c - 1 ;
11173: LD_ADDR_VAR 0 14
11177: PUSH
11178: LD_VAR 0 14
11182: PUSH
11183: LD_INT 1
11185: MINUS
11186: ST_TO_ADDR
// end ; until c = list_coords ;
11187: LD_VAR 0 14
11191: PUSH
11192: LD_VAR 0 8
11196: EQUAL
11197: IFFALSE 11063
// c = 0 ;
11199: LD_ADDR_VAR 0 14
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// if list_nearest > 0 then
11207: LD_VAR 0 7
11211: PUSH
11212: LD_INT 0
11214: GREATER
11215: IFFALSE 11357
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11217: LD_ADDR_VAR 0 15
11221: PUSH
11222: LD_INT 1
11224: PPUSH
11225: LD_VAR 0 7
11229: PPUSH
11230: CALL_OW 12
11234: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11235: LD_ADDR_VAR 0 16
11239: PUSH
11240: LD_VAR 0 7
11244: PUSH
11245: LD_VAR 0 15
11249: ARRAY
11250: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11251: LD_VAR 0 16
11255: PUSH
11256: LD_INT 1
11258: ARRAY
11259: PPUSH
11260: LD_VAR 0 16
11264: PUSH
11265: LD_INT 2
11267: ARRAY
11268: PPUSH
11269: CALL_OW 488
11273: PUSH
11274: LD_INT 0
11276: GREATER
11277: PUSH
11278: LD_VAR 0 16
11282: PUSH
11283: LD_INT 1
11285: ARRAY
11286: PPUSH
11287: LD_VAR 0 16
11291: PUSH
11292: LD_INT 2
11294: ARRAY
11295: PPUSH
11296: CALL_OW 428
11300: PUSH
11301: LD_INT 0
11303: EQUAL
11304: AND
11305: IFFALSE 11317
// c = 1 else
11307: LD_ADDR_VAR 0 14
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
11315: GO 11337
// list_nearest = Delete ( list_nearest , rand_num ) ;
11317: LD_ADDR_VAR 0 7
11321: PUSH
11322: LD_VAR 0 7
11326: PPUSH
11327: LD_VAR 0 15
11331: PPUSH
11332: CALL_OW 3
11336: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11337: LD_VAR 0 14
11341: PUSH
11342: LD_INT 1
11344: EQUAL
11345: PUSH
11346: LD_VAR 0 7
11350: PUSH
11351: LD_INT 0
11353: EQUAL
11354: OR
11355: IFFALSE 11217
// end ; until c = 1 or list_coords = 0 ;
11357: LD_VAR 0 14
11361: PUSH
11362: LD_INT 1
11364: EQUAL
11365: PUSH
11366: LD_VAR 0 8
11370: PUSH
11371: LD_INT 0
11373: EQUAL
11374: OR
11375: IFFALSE 10975
// attempts = attempts + 1 ;
11377: LD_ADDR_VAR 0 17
11381: PUSH
11382: LD_VAR 0 17
11386: PUSH
11387: LD_INT 1
11389: PLUS
11390: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11391: LD_VAR 0 14
11395: PUSH
11396: LD_INT 1
11398: EQUAL
11399: PUSH
11400: LD_VAR 0 17
11404: PUSH
11405: LD_INT 1
11407: GREATER
11408: OR
11409: IFFALSE 9934
// if c = 1 then
11411: LD_VAR 0 14
11415: PUSH
11416: LD_INT 1
11418: EQUAL
11419: IFFALSE 11483
// if add then
11421: LD_VAR 0 5
11425: IFFALSE 11456
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11427: LD_VAR 0 1
11431: PPUSH
11432: LD_VAR 0 16
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: PPUSH
11441: LD_VAR 0 16
11445: PUSH
11446: LD_INT 2
11448: ARRAY
11449: PPUSH
11450: CALL_OW 171
11454: GO 11483
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11456: LD_VAR 0 1
11460: PPUSH
11461: LD_VAR 0 16
11465: PUSH
11466: LD_INT 1
11468: ARRAY
11469: PPUSH
11470: LD_VAR 0 16
11474: PUSH
11475: LD_INT 2
11477: ARRAY
11478: PPUSH
11479: CALL_OW 111
// end ;
11483: LD_VAR 0 6
11487: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11488: LD_INT 0
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11496: LD_VAR 0 1
11500: PPUSH
11501: LD_VAR 0 2
11505: PPUSH
11506: CALL_OW 488
11510: NOT
11511: PUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_VAR 0 4
11521: PPUSH
11522: CALL_OW 488
11526: NOT
11527: OR
11528: IFFALSE 11541
// begin result = - 1 ;
11530: LD_ADDR_VAR 0 5
11534: PUSH
11535: LD_INT 1
11537: NEG
11538: ST_TO_ADDR
// exit ;
11539: GO 11701
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11541: LD_ADDR_VAR 0 6
11545: PUSH
11546: LD_VAR 0 1
11550: PPUSH
11551: LD_VAR 0 2
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_VAR 0 4
11565: PPUSH
11566: CALL_OW 298
11570: ST_TO_ADDR
// dist_2 = 99999 ;
11571: LD_ADDR_VAR 0 7
11575: PUSH
11576: LD_INT 99999
11578: ST_TO_ADDR
// for b = 0 to 5 do
11579: LD_ADDR_VAR 0 8
11583: PUSH
11584: DOUBLE
11585: LD_INT 0
11587: DEC
11588: ST_TO_ADDR
11589: LD_INT 5
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11689
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11595: LD_ADDR_VAR 0 9
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: LD_VAR 0 8
11609: PPUSH
11610: LD_VAR 0 6
11614: PPUSH
11615: CALL_OW 272
11619: PPUSH
11620: LD_VAR 0 2
11624: PPUSH
11625: LD_VAR 0 8
11629: PPUSH
11630: LD_VAR 0 6
11634: PPUSH
11635: CALL_OW 273
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: LD_VAR 0 4
11649: PPUSH
11650: CALL_OW 298
11654: ST_TO_ADDR
// if temp_dist < dist_2 then
11655: LD_VAR 0 9
11659: PUSH
11660: LD_VAR 0 7
11664: LESS
11665: IFFALSE 11687
// begin dist_2 = temp_dist ;
11667: LD_ADDR_VAR 0 7
11671: PUSH
11672: LD_VAR 0 9
11676: ST_TO_ADDR
// dir = b ;
11677: LD_ADDR_VAR 0 10
11681: PUSH
11682: LD_VAR 0 8
11686: ST_TO_ADDR
// end ; end ;
11687: GO 11592
11689: POP
11690: POP
// result = dir ;
11691: LD_ADDR_VAR 0 5
11695: PUSH
11696: LD_VAR 0 10
11700: ST_TO_ADDR
// end ; end_of_file
11701: LD_VAR 0 5
11705: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
11706: LD_INT 0
11708: PPUSH
11709: PPUSH
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
11714: PPUSH
11715: PPUSH
11716: PPUSH
11717: PPUSH
11718: PPUSH
11719: PPUSH
11720: PPUSH
11721: PPUSH
11722: PPUSH
11723: PPUSH
11724: PPUSH
11725: PPUSH
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
// personel = [ ] ;
11733: LD_ADDR_VAR 0 17
11737: PUSH
11738: EMPTY
11739: ST_TO_ADDR
// vehicles = [ ] ;
11740: LD_ADDR_VAR 0 23
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// for unit in basePersonel do
11747: LD_ADDR_VAR 0 16
11751: PUSH
11752: LD_VAR 0 3
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11806
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11760: LD_ADDR_VAR 0 17
11764: PUSH
11765: LD_VAR 0 17
11769: PUSH
11770: LD_VAR 0 16
11774: PUSH
11775: LD_VAR 0 16
11779: PPUSH
11780: CALL_OW 310
11784: PUSH
11785: LD_VAR 0 16
11789: PPUSH
11790: CALL_OW 302
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: ADD
11803: ST_TO_ADDR
11804: GO 11757
11806: POP
11807: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11808: LD_ADDR_VAR 0 22
11812: PUSH
11813: LD_VAR 0 4
11817: PPUSH
11818: LD_INT 22
11820: PUSH
11821: LD_VAR 0 1
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 21
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 50
11842: PUSH
11843: EMPTY
11844: LIST
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: LD_INT 34
11854: PUSH
11855: LD_INT 12
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 34
11864: PUSH
11865: LD_INT 51
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 34
11874: PUSH
11875: LD_INT 32
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: PPUSH
11898: CALL_OW 70
11902: PUSH
11903: FOR_IN
11904: IFFALSE 11952
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11906: LD_ADDR_VAR 0 23
11910: PUSH
11911: LD_VAR 0 23
11915: PUSH
11916: LD_VAR 0 22
11920: PUSH
11921: LD_VAR 0 22
11925: PPUSH
11926: CALL_OW 310
11930: PUSH
11931: LD_VAR 0 22
11935: PPUSH
11936: CALL_OW 302
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: ADD
11949: ST_TO_ADDR
11950: GO 11903
11952: POP
11953: POP
// repeat soldiers = [ ] ;
11954: LD_ADDR_VAR 0 18
11958: PUSH
11959: EMPTY
11960: ST_TO_ADDR
// engineers = [ ] ;
11961: LD_ADDR_VAR 0 19
11965: PUSH
11966: EMPTY
11967: ST_TO_ADDR
// mechanics = [ ] ;
11968: LD_ADDR_VAR 0 20
11972: PUSH
11973: EMPTY
11974: ST_TO_ADDR
// scientists = [ ] ;
11975: LD_ADDR_VAR 0 21
11979: PUSH
11980: EMPTY
11981: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11982: LD_ADDR_VAR 0 28
11986: PUSH
11987: LD_VAR 0 4
11991: PPUSH
11992: LD_INT 22
11994: PUSH
11995: LD_VAR 0 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 50
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 30
12025: PUSH
12026: LD_INT 0
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 30
12035: PUSH
12036: LD_INT 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 70
12058: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12059: LD_ADDR_VAR 0 29
12063: PUSH
12064: LD_VAR 0 4
12068: PPUSH
12069: LD_INT 22
12071: PUSH
12072: LD_VAR 0 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 21
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 50
12093: PUSH
12094: EMPTY
12095: LIST
12096: PUSH
12097: LD_INT 2
12099: PUSH
12100: LD_INT 30
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 30
12112: PUSH
12113: LD_INT 3
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 70
12135: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12136: LD_ADDR_VAR 0 30
12140: PUSH
12141: LD_VAR 0 4
12145: PPUSH
12146: LD_INT 22
12148: PUSH
12149: LD_VAR 0 1
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 21
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 50
12170: PUSH
12171: EMPTY
12172: LIST
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 6
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 30
12189: PUSH
12190: LD_INT 7
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 30
12199: PUSH
12200: LD_INT 8
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 70
12223: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12224: LD_ADDR_VAR 0 31
12228: PUSH
12229: LD_VAR 0 4
12233: PPUSH
12234: LD_INT 22
12236: PUSH
12237: LD_VAR 0 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 21
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 50
12258: PUSH
12259: EMPTY
12260: LIST
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: LD_INT 31
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 70
12300: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12301: LD_ADDR_VAR 0 32
12305: PUSH
12306: LD_VAR 0 4
12310: PPUSH
12311: LD_INT 22
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 21
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 50
12335: PUSH
12336: EMPTY
12337: LIST
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: LD_INT 30
12344: PUSH
12345: LD_INT 4
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 30
12354: PUSH
12355: LD_INT 5
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PPUSH
12373: CALL_OW 70
12377: ST_TO_ADDR
// for i := 1 to personel do
12378: LD_ADDR_VAR 0 13
12382: PUSH
12383: DOUBLE
12384: LD_INT 1
12386: DEC
12387: ST_TO_ADDR
12388: LD_VAR 0 17
12392: PUSH
12393: FOR_TO
12394: IFFALSE 12604
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12396: LD_VAR 0 17
12400: PUSH
12401: LD_VAR 0 13
12405: ARRAY
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: CALL_OW 256
12415: PUSH
12416: LD_INT 1000
12418: EQUAL
12419: IFFALSE 12461
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12421: LD_ADDR_VAR 0 17
12425: PUSH
12426: LD_VAR 0 17
12430: PPUSH
12431: LD_VAR 0 13
12435: PUSH
12436: LD_VAR 0 17
12440: PUSH
12441: LD_VAR 0 13
12445: ARRAY
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL 33262 0 3
12458: ST_TO_ADDR
// end else
12459: GO 12552
// if GetLives ( personel [ i ] [ 1 ] ) <= 650 then
12461: LD_VAR 0 17
12465: PUSH
12466: LD_VAR 0 13
12470: ARRAY
12471: PUSH
12472: LD_INT 1
12474: ARRAY
12475: PPUSH
12476: CALL_OW 256
12480: PUSH
12481: LD_INT 650
12483: LESSEQUAL
12484: IFFALSE 12552
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12486: LD_ADDR_VAR 0 17
12490: PUSH
12491: LD_VAR 0 17
12495: PPUSH
12496: LD_VAR 0 13
12500: PUSH
12501: LD_VAR 0 17
12505: PUSH
12506: LD_VAR 0 13
12510: ARRAY
12511: PUSH
12512: LD_INT 1
12514: MINUS
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: LD_INT 0
12522: PPUSH
12523: CALL 33262 0 3
12527: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12528: LD_VAR 0 17
12532: PUSH
12533: LD_VAR 0 13
12537: ARRAY
12538: PUSH
12539: LD_INT 1
12541: ARRAY
12542: PPUSH
12543: LD_VAR 0 5
12547: PPUSH
12548: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12552: LD_VAR 0 17
12556: PUSH
12557: LD_VAR 0 13
12561: ARRAY
12562: PUSH
12563: LD_INT 1
12565: ARRAY
12566: PPUSH
12567: CALL_OW 256
12571: PUSH
12572: LD_INT 250
12574: LESS
12575: IFFALSE 12602
// personel = personel diff [ personel [ i ] ] ;
12577: LD_ADDR_VAR 0 17
12581: PUSH
12582: LD_VAR 0 17
12586: PUSH
12587: LD_VAR 0 17
12591: PUSH
12592: LD_VAR 0 13
12596: ARRAY
12597: PUSH
12598: EMPTY
12599: LIST
12600: DIFF
12601: ST_TO_ADDR
// end ;
12602: GO 12393
12604: POP
12605: POP
// for i := 1 to vehicles do
12606: LD_ADDR_VAR 0 13
12610: PUSH
12611: DOUBLE
12612: LD_INT 1
12614: DEC
12615: ST_TO_ADDR
12616: LD_VAR 0 23
12620: PUSH
12621: FOR_TO
12622: IFFALSE 12961
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12624: LD_VAR 0 23
12628: PUSH
12629: LD_VAR 0 13
12633: ARRAY
12634: PUSH
12635: LD_INT 1
12637: ARRAY
12638: PPUSH
12639: CALL_OW 256
12643: PUSH
12644: LD_INT 1000
12646: EQUAL
12647: IFFALSE 12822
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12649: LD_VAR 0 23
12653: PUSH
12654: LD_VAR 0 13
12658: ARRAY
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: CALL_OW 263
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: IFFALSE 12730
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12674: LD_VAR 0 23
12678: PUSH
12679: LD_VAR 0 13
12683: ARRAY
12684: PUSH
12685: LD_INT 2
12687: ARRAY
12688: PPUSH
12689: CALL_OW 310
12693: NOT
12694: IFFALSE 12730
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12696: LD_VAR 0 23
12700: PUSH
12701: LD_VAR 0 13
12705: ARRAY
12706: PUSH
12707: LD_INT 2
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 23
12715: PUSH
12716: LD_VAR 0 13
12720: ARRAY
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PPUSH
12726: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12730: LD_VAR 0 23
12734: PUSH
12735: LD_VAR 0 10
12739: LESS
12740: IFFALSE 12782
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12742: LD_ADDR_VAR 0 23
12746: PUSH
12747: LD_VAR 0 23
12751: PPUSH
12752: LD_VAR 0 13
12756: PUSH
12757: LD_VAR 0 23
12761: PUSH
12762: LD_VAR 0 13
12766: ARRAY
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL 33262 0 3
12779: ST_TO_ADDR
12780: GO 12820
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12782: LD_ADDR_VAR 0 23
12786: PUSH
12787: LD_VAR 0 23
12791: PPUSH
12792: LD_VAR 0 13
12796: PUSH
12797: LD_VAR 0 23
12801: PUSH
12802: LD_VAR 0 13
12806: ARRAY
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: LD_INT 2
12814: PPUSH
12815: CALL 33262 0 3
12819: ST_TO_ADDR
// end else
12820: GO 12909
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12822: LD_VAR 0 23
12826: PUSH
12827: LD_VAR 0 13
12831: ARRAY
12832: PUSH
12833: LD_INT 1
12835: ARRAY
12836: PPUSH
12837: CALL_OW 256
12841: PUSH
12842: LD_INT 650
12844: LESSEQUAL
12845: IFFALSE 12909
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12847: LD_ADDR_VAR 0 23
12851: PUSH
12852: LD_VAR 0 23
12856: PPUSH
12857: LD_VAR 0 13
12861: PUSH
12862: LD_VAR 0 23
12866: PUSH
12867: LD_VAR 0 13
12871: ARRAY
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PPUSH
12877: LD_INT 0
12879: PPUSH
12880: CALL 33262 0 3
12884: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12885: LD_VAR 0 23
12889: PUSH
12890: LD_VAR 0 13
12894: ARRAY
12895: PUSH
12896: LD_INT 1
12898: ARRAY
12899: PPUSH
12900: LD_VAR 0 6
12904: PPUSH
12905: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12909: LD_VAR 0 23
12913: PUSH
12914: LD_VAR 0 13
12918: ARRAY
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: CALL_OW 256
12928: PUSH
12929: LD_INT 250
12931: LESS
12932: IFFALSE 12959
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12934: LD_ADDR_VAR 0 23
12938: PUSH
12939: LD_VAR 0 23
12943: PUSH
12944: LD_VAR 0 23
12948: PUSH
12949: LD_VAR 0 13
12953: ARRAY
12954: PUSH
12955: EMPTY
12956: LIST
12957: DIFF
12958: ST_TO_ADDR
// end ;
12959: GO 12621
12961: POP
12962: POP
// for i := 1 to personel do
12963: LD_ADDR_VAR 0 13
12967: PUSH
12968: DOUBLE
12969: LD_INT 1
12971: DEC
12972: ST_TO_ADDR
12973: LD_VAR 0 17
12977: PUSH
12978: FOR_TO
12979: IFFALSE 13020
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12981: LD_ADDR_VAR 0 18
12985: PUSH
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 17
12995: PUSH
12996: LD_VAR 0 13
13000: ARRAY
13001: PPUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: ADD
13017: ST_TO_ADDR
13018: GO 12978
13020: POP
13021: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13022: LD_VAR 0 18
13026: PUSH
13027: LD_VAR 0 31
13031: PPUSH
13032: LD_INT 3
13034: PUSH
13035: LD_INT 59
13037: PUSH
13038: EMPTY
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 72
13049: AND
13050: IFFALSE 13338
// begin for i := 1 to personel do
13052: LD_ADDR_VAR 0 13
13056: PUSH
13057: DOUBLE
13058: LD_INT 1
13060: DEC
13061: ST_TO_ADDR
13062: LD_VAR 0 17
13066: PUSH
13067: FOR_TO
13068: IFFALSE 13334
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13070: LD_VAR 0 17
13074: PUSH
13075: LD_VAR 0 13
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PPUSH
13085: CALL_OW 257
13089: PUSH
13090: LD_INT 1
13092: EQUAL
13093: PUSH
13094: LD_VAR 0 17
13098: PUSH
13099: LD_VAR 0 13
13103: ARRAY
13104: PUSH
13105: LD_INT 3
13107: ARRAY
13108: PUSH
13109: LD_INT 1
13111: EQUAL
13112: AND
13113: IFFALSE 13332
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13115: LD_VAR 0 17
13119: PUSH
13120: LD_VAR 0 13
13124: ARRAY
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 437
13134: IFFALSE 13235
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13136: LD_VAR 0 17
13140: PUSH
13141: LD_VAR 0 13
13145: ARRAY
13146: PUSH
13147: LD_INT 1
13149: ARRAY
13150: PPUSH
13151: CALL_OW 437
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PUSH
13160: LD_INT 1
13162: ARRAY
13163: PUSH
13164: LD_STRING e
13166: EQUAL
13167: PUSH
13168: LD_VAR 0 17
13172: PUSH
13173: LD_VAR 0 13
13177: ARRAY
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: PPUSH
13183: CALL_OW 437
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PUSH
13192: LD_INT 4
13194: ARRAY
13195: PPUSH
13196: CALL_OW 266
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: LD_INT 5
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: IN
13211: AND
13212: IFFALSE 13235
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13214: LD_VAR 0 17
13218: PUSH
13219: LD_VAR 0 13
13223: ARRAY
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: EMPTY
13230: PPUSH
13231: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13235: LD_ADDR_VAR 0 35
13239: PUSH
13240: LD_VAR 0 31
13244: PPUSH
13245: LD_INT 3
13247: PUSH
13248: LD_INT 59
13250: PUSH
13251: EMPTY
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 72
13262: PUSH
13263: FOR_IN
13264: IFFALSE 13330
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13266: LD_VAR 0 17
13270: PUSH
13271: LD_VAR 0 13
13275: ARRAY
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: CALL_OW 310
13285: PPUSH
13286: CALL_OW 266
13290: PUSH
13291: LD_INT 31
13293: PUSH
13294: LD_INT 32
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: IN
13301: NOT
13302: IFFALSE 13328
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13304: LD_VAR 0 17
13308: PUSH
13309: LD_VAR 0 13
13313: ARRAY
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: PPUSH
13319: LD_VAR 0 35
13323: PPUSH
13324: CALL_OW 120
13328: GO 13263
13330: POP
13331: POP
// end ; end ;
13332: GO 13067
13334: POP
13335: POP
// end else
13336: GO 13553
// if soldiers and barracks then
13338: LD_VAR 0 18
13342: PUSH
13343: LD_VAR 0 32
13347: AND
13348: IFFALSE 13553
// for i := 1 to personel do
13350: LD_ADDR_VAR 0 13
13354: PUSH
13355: DOUBLE
13356: LD_INT 1
13358: DEC
13359: ST_TO_ADDR
13360: LD_VAR 0 17
13364: PUSH
13365: FOR_TO
13366: IFFALSE 13551
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13368: LD_VAR 0 17
13372: PUSH
13373: LD_VAR 0 13
13377: ARRAY
13378: PUSH
13379: LD_INT 1
13381: ARRAY
13382: PPUSH
13383: CALL_OW 257
13387: PUSH
13388: LD_INT 1
13390: EQUAL
13391: PUSH
13392: LD_VAR 0 17
13396: PUSH
13397: LD_VAR 0 13
13401: ARRAY
13402: PUSH
13403: LD_INT 3
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: EQUAL
13410: AND
13411: PUSH
13412: LD_VAR 0 17
13416: PUSH
13417: LD_VAR 0 13
13421: ARRAY
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PPUSH
13427: LD_INT 56
13429: PUSH
13430: EMPTY
13431: LIST
13432: PPUSH
13433: CALL_OW 72
13437: AND
13438: IFFALSE 13549
// begin if not personel [ i ] [ 2 ] then
13440: LD_VAR 0 17
13444: PUSH
13445: LD_VAR 0 13
13449: ARRAY
13450: PUSH
13451: LD_INT 2
13453: ARRAY
13454: NOT
13455: IFFALSE 13515
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13457: LD_ADDR_VAR 0 17
13461: PUSH
13462: LD_VAR 0 17
13466: PPUSH
13467: LD_VAR 0 13
13471: PUSH
13472: LD_VAR 0 17
13476: PUSH
13477: LD_VAR 0 13
13481: ARRAY
13482: PUSH
13483: LD_INT 1
13485: MINUS
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: LD_VAR 0 32
13495: PUSH
13496: LD_INT 1
13498: PPUSH
13499: LD_VAR 0 32
13503: PPUSH
13504: CALL_OW 12
13508: ARRAY
13509: PPUSH
13510: CALL 33262 0 3
13514: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13515: LD_VAR 0 17
13519: PUSH
13520: LD_VAR 0 13
13524: ARRAY
13525: PUSH
13526: LD_INT 1
13528: ARRAY
13529: PPUSH
13530: LD_VAR 0 17
13534: PUSH
13535: LD_VAR 0 13
13539: ARRAY
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 120
// end ;
13549: GO 13365
13551: POP
13552: POP
// for i := 1 to personel do
13553: LD_ADDR_VAR 0 13
13557: PUSH
13558: DOUBLE
13559: LD_INT 1
13561: DEC
13562: ST_TO_ADDR
13563: LD_VAR 0 17
13567: PUSH
13568: FOR_TO
13569: IFFALSE 13610
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13571: LD_ADDR_VAR 0 19
13575: PUSH
13576: LD_VAR 0 19
13580: PUSH
13581: LD_VAR 0 17
13585: PUSH
13586: LD_VAR 0 13
13590: ARRAY
13591: PPUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: ADD
13607: ST_TO_ADDR
13608: GO 13568
13610: POP
13611: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13612: LD_VAR 0 19
13616: PUSH
13617: LD_VAR 0 4
13621: PPUSH
13622: LD_INT 22
13624: PUSH
13625: LD_VAR 0 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 21
13636: PUSH
13637: LD_INT 3
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 3
13646: PUSH
13647: LD_INT 24
13649: PUSH
13650: LD_INT 1000
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: PPUSH
13666: CALL_OW 70
13670: AND
13671: IFFALSE 13947
// begin for i := 1 to personel do
13673: LD_ADDR_VAR 0 13
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 17
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13943
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13691: LD_VAR 0 17
13695: PUSH
13696: LD_VAR 0 13
13700: ARRAY
13701: PUSH
13702: LD_INT 1
13704: ARRAY
13705: PPUSH
13706: CALL_OW 257
13710: PUSH
13711: LD_INT 2
13713: EQUAL
13714: PUSH
13715: LD_VAR 0 17
13719: PUSH
13720: LD_VAR 0 13
13724: ARRAY
13725: PUSH
13726: LD_INT 3
13728: ARRAY
13729: PUSH
13730: LD_INT 1
13732: EQUAL
13733: AND
13734: IFFALSE 13941
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13736: LD_VAR 0 17
13740: PUSH
13741: LD_VAR 0 13
13745: ARRAY
13746: PUSH
13747: LD_INT 1
13749: ARRAY
13750: PPUSH
13751: CALL_OW 437
13755: IFFALSE 13811
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13757: LD_VAR 0 17
13761: PUSH
13762: LD_VAR 0 13
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: CALL_OW 437
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PUSH
13781: LD_INT 1
13783: ARRAY
13784: PUSH
13785: LD_STRING e
13787: EQUAL
13788: IFFALSE 13811
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13790: LD_VAR 0 17
13794: PUSH
13795: LD_VAR 0 13
13799: ARRAY
13800: PUSH
13801: LD_INT 1
13803: ARRAY
13804: PPUSH
13805: EMPTY
13806: PPUSH
13807: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13811: LD_VAR 0 17
13815: PUSH
13816: LD_VAR 0 13
13820: ARRAY
13821: PUSH
13822: LD_INT 1
13824: ARRAY
13825: PPUSH
13826: CALL_OW 310
13830: IFFALSE 13851
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13832: LD_VAR 0 17
13836: PUSH
13837: LD_VAR 0 13
13841: ARRAY
13842: PUSH
13843: LD_INT 1
13845: ARRAY
13846: PPUSH
13847: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13851: LD_ADDR_VAR 0 33
13855: PUSH
13856: LD_VAR 0 4
13860: PPUSH
13861: LD_INT 22
13863: PUSH
13864: LD_VAR 0 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 21
13875: PUSH
13876: LD_INT 3
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 3
13885: PUSH
13886: LD_INT 24
13888: PUSH
13889: LD_INT 1000
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 70
13909: PUSH
13910: FOR_IN
13911: IFFALSE 13939
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13913: LD_VAR 0 17
13917: PUSH
13918: LD_VAR 0 13
13922: ARRAY
13923: PUSH
13924: LD_INT 1
13926: ARRAY
13927: PPUSH
13928: LD_VAR 0 33
13932: PPUSH
13933: CALL_OW 190
13937: GO 13910
13939: POP
13940: POP
// end ;
13941: GO 13688
13943: POP
13944: POP
// end else
13945: GO 14209
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13947: LD_VAR 0 19
13951: PUSH
13952: LD_VAR 0 19
13956: PPUSH
13957: LD_INT 56
13959: PUSH
13960: EMPTY
13961: LIST
13962: PPUSH
13963: CALL_OW 72
13967: AND
13968: PUSH
13969: LD_VAR 0 28
13973: AND
13974: IFFALSE 14209
// for i := 1 to personel do
13976: LD_ADDR_VAR 0 13
13980: PUSH
13981: DOUBLE
13982: LD_INT 1
13984: DEC
13985: ST_TO_ADDR
13986: LD_VAR 0 17
13990: PUSH
13991: FOR_TO
13992: IFFALSE 14207
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13994: LD_VAR 0 17
13998: PUSH
13999: LD_VAR 0 13
14003: ARRAY
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 257
14013: PUSH
14014: LD_INT 2
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 17
14022: PUSH
14023: LD_VAR 0 13
14027: ARRAY
14028: PUSH
14029: LD_INT 3
14031: ARRAY
14032: PUSH
14033: LD_INT 1
14035: EQUAL
14036: AND
14037: IFFALSE 14205
// begin if not personel [ i ] [ 2 ] then
14039: LD_VAR 0 17
14043: PUSH
14044: LD_VAR 0 13
14048: ARRAY
14049: PUSH
14050: LD_INT 2
14052: ARRAY
14053: NOT
14054: IFFALSE 14171
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14056: LD_ADDR_VAR 0 17
14060: PUSH
14061: LD_VAR 0 17
14065: PPUSH
14066: LD_VAR 0 13
14070: PUSH
14071: LD_VAR 0 17
14075: PUSH
14076: LD_VAR 0 13
14080: ARRAY
14081: PUSH
14082: LD_INT 1
14084: MINUS
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PPUSH
14090: LD_VAR 0 4
14094: PPUSH
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 50
14119: PUSH
14120: EMPTY
14121: LIST
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: LD_INT 30
14128: PUSH
14129: LD_INT 0
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 30
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 70
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: PPUSH
14166: CALL 33262 0 3
14170: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14171: LD_VAR 0 17
14175: PUSH
14176: LD_VAR 0 13
14180: ARRAY
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PPUSH
14186: LD_VAR 0 17
14190: PUSH
14191: LD_VAR 0 13
14195: ARRAY
14196: PUSH
14197: LD_INT 2
14199: ARRAY
14200: PPUSH
14201: CALL_OW 120
// end ; end ;
14205: GO 13991
14207: POP
14208: POP
// for i := 1 to personel do
14209: LD_ADDR_VAR 0 13
14213: PUSH
14214: DOUBLE
14215: LD_INT 1
14217: DEC
14218: ST_TO_ADDR
14219: LD_VAR 0 17
14223: PUSH
14224: FOR_TO
14225: IFFALSE 14266
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14227: LD_ADDR_VAR 0 20
14231: PUSH
14232: LD_VAR 0 20
14236: PUSH
14237: LD_VAR 0 17
14241: PUSH
14242: LD_VAR 0 13
14246: ARRAY
14247: PPUSH
14248: LD_INT 25
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PPUSH
14258: CALL_OW 72
14262: ADD
14263: ST_TO_ADDR
14264: GO 14224
14266: POP
14267: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14268: LD_VAR 0 20
14272: PUSH
14273: LD_VAR 0 4
14277: PPUSH
14278: LD_INT 22
14280: PUSH
14281: LD_VAR 0 1
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: LD_INT 24
14305: PUSH
14306: LD_INT 1000
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 70
14326: AND
14327: IFFALSE 14931
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14329: LD_ADDR_VAR 0 34
14333: PUSH
14334: LD_VAR 0 4
14338: PPUSH
14339: LD_INT 22
14341: PUSH
14342: LD_VAR 0 1
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 21
14353: PUSH
14354: LD_INT 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 3
14363: PUSH
14364: LD_INT 24
14366: PUSH
14367: LD_INT 1000
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 70
14387: PUSH
14388: FOR_IN
14389: IFFALSE 14927
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14391: LD_VAR 0 34
14395: PPUSH
14396: LD_VAR 0 6
14400: PPUSH
14401: CALL_OW 299
14405: PUSH
14406: LD_INT 5
14408: LESS
14409: IFFALSE 14704
// begin for i := 1 to vehicles do
14411: LD_ADDR_VAR 0 13
14415: PUSH
14416: DOUBLE
14417: LD_INT 1
14419: DEC
14420: ST_TO_ADDR
14421: LD_VAR 0 23
14425: PUSH
14426: FOR_TO
14427: IFFALSE 14496
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14429: LD_VAR 0 23
14433: PUSH
14434: LD_VAR 0 13
14438: ARRAY
14439: PUSH
14440: LD_INT 1
14442: ARRAY
14443: PUSH
14444: LD_VAR 0 34
14448: EQUAL
14449: IFFALSE 14470
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14451: LD_VAR 0 23
14455: PUSH
14456: LD_VAR 0 13
14460: ARRAY
14461: PUSH
14462: LD_INT 2
14464: ARRAY
14465: PPUSH
14466: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14470: LD_VAR 0 23
14474: PUSH
14475: LD_VAR 0 13
14479: ARRAY
14480: PUSH
14481: LD_INT 2
14483: ARRAY
14484: PPUSH
14485: LD_VAR 0 34
14489: PPUSH
14490: CALL_OW 189
// end ;
14494: GO 14426
14496: POP
14497: POP
// for i := 1 to personel do
14498: LD_ADDR_VAR 0 13
14502: PUSH
14503: DOUBLE
14504: LD_INT 1
14506: DEC
14507: ST_TO_ADDR
14508: LD_VAR 0 17
14512: PUSH
14513: FOR_TO
14514: IFFALSE 14702
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14516: LD_VAR 0 17
14520: PUSH
14521: LD_VAR 0 13
14525: ARRAY
14526: PUSH
14527: LD_INT 1
14529: ARRAY
14530: PPUSH
14531: CALL_OW 257
14535: PUSH
14536: LD_INT 3
14538: EQUAL
14539: PUSH
14540: LD_VAR 0 17
14544: PUSH
14545: LD_VAR 0 13
14549: ARRAY
14550: PUSH
14551: LD_INT 3
14553: ARRAY
14554: PUSH
14555: LD_INT 1
14557: EQUAL
14558: AND
14559: IFFALSE 14700
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14561: LD_VAR 0 17
14565: PUSH
14566: LD_VAR 0 13
14570: ARRAY
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PPUSH
14576: CALL_OW 437
14580: IFFALSE 14636
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14582: LD_VAR 0 17
14586: PUSH
14587: LD_VAR 0 13
14591: ARRAY
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PPUSH
14597: CALL_OW 437
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PUSH
14606: LD_INT 1
14608: ARRAY
14609: PUSH
14610: LD_STRING e
14612: EQUAL
14613: IFFALSE 14636
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14615: LD_VAR 0 17
14619: PUSH
14620: LD_VAR 0 13
14624: ARRAY
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: EMPTY
14631: PPUSH
14632: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14636: LD_VAR 0 17
14640: PUSH
14641: LD_VAR 0 13
14645: ARRAY
14646: PUSH
14647: LD_INT 1
14649: ARRAY
14650: PPUSH
14651: CALL_OW 310
14655: IFFALSE 14676
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14657: LD_VAR 0 17
14661: PUSH
14662: LD_VAR 0 13
14666: ARRAY
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14676: LD_VAR 0 17
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 34
14695: PPUSH
14696: CALL_OW 189
// end ;
14700: GO 14513
14702: POP
14703: POP
// end ; if GetLives ( damageUnit ) < 250 then
14704: LD_VAR 0 34
14708: PPUSH
14709: CALL_OW 256
14713: PUSH
14714: LD_INT 250
14716: LESS
14717: IFFALSE 14925
// for i := 1 to personel do
14719: LD_ADDR_VAR 0 13
14723: PUSH
14724: DOUBLE
14725: LD_INT 1
14727: DEC
14728: ST_TO_ADDR
14729: LD_VAR 0 17
14733: PUSH
14734: FOR_TO
14735: IFFALSE 14923
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14737: LD_VAR 0 17
14741: PUSH
14742: LD_VAR 0 13
14746: ARRAY
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: PPUSH
14752: CALL_OW 257
14756: PUSH
14757: LD_INT 3
14759: EQUAL
14760: PUSH
14761: LD_VAR 0 17
14765: PUSH
14766: LD_VAR 0 13
14770: ARRAY
14771: PUSH
14772: LD_INT 3
14774: ARRAY
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: AND
14780: IFFALSE 14921
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14782: LD_VAR 0 17
14786: PUSH
14787: LD_VAR 0 13
14791: ARRAY
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: CALL_OW 437
14801: IFFALSE 14857
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14803: LD_VAR 0 17
14807: PUSH
14808: LD_VAR 0 13
14812: ARRAY
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 437
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PUSH
14831: LD_STRING e
14833: EQUAL
14834: IFFALSE 14857
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14836: LD_VAR 0 17
14840: PUSH
14841: LD_VAR 0 13
14845: ARRAY
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: EMPTY
14852: PPUSH
14853: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14857: LD_VAR 0 17
14861: PUSH
14862: LD_VAR 0 13
14866: ARRAY
14867: PUSH
14868: LD_INT 1
14870: ARRAY
14871: PPUSH
14872: CALL_OW 310
14876: IFFALSE 14897
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14878: LD_VAR 0 17
14882: PUSH
14883: LD_VAR 0 13
14887: ARRAY
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14897: LD_VAR 0 17
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_VAR 0 34
14916: PPUSH
14917: CALL_OW 189
// end ;
14921: GO 14734
14923: POP
14924: POP
// end ;
14925: GO 14388
14927: POP
14928: POP
// end else
14929: GO 15136
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14931: LD_VAR 0 20
14935: PUSH
14936: LD_VAR 0 20
14940: PPUSH
14941: LD_INT 56
14943: PUSH
14944: EMPTY
14945: LIST
14946: PPUSH
14947: CALL_OW 72
14951: AND
14952: PUSH
14953: LD_VAR 0 29
14957: AND
14958: IFFALSE 15136
// for i := 1 to personel do
14960: LD_ADDR_VAR 0 13
14964: PUSH
14965: DOUBLE
14966: LD_INT 1
14968: DEC
14969: ST_TO_ADDR
14970: LD_VAR 0 17
14974: PUSH
14975: FOR_TO
14976: IFFALSE 15134
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14978: LD_VAR 0 17
14982: PUSH
14983: LD_VAR 0 13
14987: ARRAY
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PPUSH
14993: CALL_OW 257
14997: PUSH
14998: LD_INT 3
15000: EQUAL
15001: PUSH
15002: LD_VAR 0 17
15006: PUSH
15007: LD_VAR 0 13
15011: ARRAY
15012: PUSH
15013: LD_INT 3
15015: ARRAY
15016: PUSH
15017: LD_INT 1
15019: EQUAL
15020: AND
15021: IFFALSE 15132
// begin if not personel [ i ] [ 2 ] then
15023: LD_VAR 0 17
15027: PUSH
15028: LD_VAR 0 13
15032: ARRAY
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: NOT
15038: IFFALSE 15098
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15040: LD_ADDR_VAR 0 17
15044: PUSH
15045: LD_VAR 0 17
15049: PPUSH
15050: LD_VAR 0 13
15054: PUSH
15055: LD_VAR 0 17
15059: PUSH
15060: LD_VAR 0 13
15064: ARRAY
15065: PUSH
15066: LD_INT 1
15068: MINUS
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: LD_VAR 0 29
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 29
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: PPUSH
15093: CALL 33262 0 3
15097: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15098: LD_VAR 0 17
15102: PUSH
15103: LD_VAR 0 13
15107: ARRAY
15108: PUSH
15109: LD_INT 1
15111: ARRAY
15112: PPUSH
15113: LD_VAR 0 17
15117: PUSH
15118: LD_VAR 0 13
15122: ARRAY
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: PPUSH
15128: CALL_OW 120
// end ;
15132: GO 14975
15134: POP
15135: POP
// for i := 1 to personel do
15136: LD_ADDR_VAR 0 13
15140: PUSH
15141: DOUBLE
15142: LD_INT 1
15144: DEC
15145: ST_TO_ADDR
15146: LD_VAR 0 17
15150: PUSH
15151: FOR_TO
15152: IFFALSE 15193
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15154: LD_ADDR_VAR 0 21
15158: PUSH
15159: LD_VAR 0 21
15163: PUSH
15164: LD_VAR 0 17
15168: PUSH
15169: LD_VAR 0 13
15173: ARRAY
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PPUSH
15185: CALL_OW 72
15189: ADD
15190: ST_TO_ADDR
15191: GO 15151
15193: POP
15194: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15195: LD_VAR 0 21
15199: PUSH
15200: LD_VAR 0 4
15204: PPUSH
15205: LD_INT 22
15207: PUSH
15208: LD_VAR 0 1
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 21
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 24
15232: PUSH
15233: LD_INT 1000
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 70
15253: AND
15254: IFFALSE 15771
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15256: LD_ADDR_VAR 0 34
15260: PUSH
15261: LD_VAR 0 4
15265: PPUSH
15266: LD_INT 22
15268: PUSH
15269: LD_VAR 0 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 21
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 3
15290: PUSH
15291: LD_INT 24
15293: PUSH
15294: LD_INT 1000
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: PPUSH
15310: CALL_OW 70
15314: PUSH
15315: FOR_IN
15316: IFFALSE 15767
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15318: LD_VAR 0 34
15322: PPUSH
15323: LD_VAR 0 5
15327: PPUSH
15328: CALL_OW 299
15332: PUSH
15333: LD_INT 5
15335: LESS
15336: IFFALSE 15544
// for i := 1 to personel do
15338: LD_ADDR_VAR 0 13
15342: PUSH
15343: DOUBLE
15344: LD_INT 1
15346: DEC
15347: ST_TO_ADDR
15348: LD_VAR 0 17
15352: PUSH
15353: FOR_TO
15354: IFFALSE 15542
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15356: LD_VAR 0 17
15360: PUSH
15361: LD_VAR 0 13
15365: ARRAY
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: CALL_OW 257
15375: PUSH
15376: LD_INT 4
15378: EQUAL
15379: PUSH
15380: LD_VAR 0 17
15384: PUSH
15385: LD_VAR 0 13
15389: ARRAY
15390: PUSH
15391: LD_INT 3
15393: ARRAY
15394: PUSH
15395: LD_INT 1
15397: EQUAL
15398: AND
15399: IFFALSE 15540
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15401: LD_VAR 0 17
15405: PUSH
15406: LD_VAR 0 13
15410: ARRAY
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 437
15420: IFFALSE 15476
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15422: LD_VAR 0 17
15426: PUSH
15427: LD_VAR 0 13
15431: ARRAY
15432: PUSH
15433: LD_INT 1
15435: ARRAY
15436: PPUSH
15437: CALL_OW 437
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PUSH
15450: LD_STRING e
15452: EQUAL
15453: IFFALSE 15476
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15455: LD_VAR 0 17
15459: PUSH
15460: LD_VAR 0 13
15464: ARRAY
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: EMPTY
15471: PPUSH
15472: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15476: LD_VAR 0 17
15480: PUSH
15481: LD_VAR 0 13
15485: ARRAY
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PPUSH
15491: CALL_OW 310
15495: IFFALSE 15516
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15497: LD_VAR 0 17
15501: PUSH
15502: LD_VAR 0 13
15506: ARRAY
15507: PUSH
15508: LD_INT 1
15510: ARRAY
15511: PPUSH
15512: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15516: LD_VAR 0 17
15520: PUSH
15521: LD_VAR 0 13
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 34
15535: PPUSH
15536: CALL_OW 188
// end ;
15540: GO 15353
15542: POP
15543: POP
// if GetLives ( damageUnit ) < 250 then
15544: LD_VAR 0 34
15548: PPUSH
15549: CALL_OW 256
15553: PUSH
15554: LD_INT 250
15556: LESS
15557: IFFALSE 15765
// for i := 1 to personel do
15559: LD_ADDR_VAR 0 13
15563: PUSH
15564: DOUBLE
15565: LD_INT 1
15567: DEC
15568: ST_TO_ADDR
15569: LD_VAR 0 17
15573: PUSH
15574: FOR_TO
15575: IFFALSE 15763
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15577: LD_VAR 0 17
15581: PUSH
15582: LD_VAR 0 13
15586: ARRAY
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: CALL_OW 257
15596: PUSH
15597: LD_INT 4
15599: EQUAL
15600: PUSH
15601: LD_VAR 0 17
15605: PUSH
15606: LD_VAR 0 13
15610: ARRAY
15611: PUSH
15612: LD_INT 3
15614: ARRAY
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: AND
15620: IFFALSE 15761
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15622: LD_VAR 0 17
15626: PUSH
15627: LD_VAR 0 13
15631: ARRAY
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: CALL_OW 437
15641: IFFALSE 15697
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15643: LD_VAR 0 17
15647: PUSH
15648: LD_VAR 0 13
15652: ARRAY
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: CALL_OW 437
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PUSH
15671: LD_STRING e
15673: EQUAL
15674: IFFALSE 15697
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15676: LD_VAR 0 17
15680: PUSH
15681: LD_VAR 0 13
15685: ARRAY
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: EMPTY
15692: PPUSH
15693: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15697: LD_VAR 0 17
15701: PUSH
15702: LD_VAR 0 13
15706: ARRAY
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: CALL_OW 310
15716: IFFALSE 15737
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15718: LD_VAR 0 17
15722: PUSH
15723: LD_VAR 0 13
15727: ARRAY
15728: PUSH
15729: LD_INT 1
15731: ARRAY
15732: PPUSH
15733: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15737: LD_VAR 0 17
15741: PUSH
15742: LD_VAR 0 13
15746: ARRAY
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_VAR 0 34
15756: PPUSH
15757: CALL_OW 188
// end ;
15761: GO 15574
15763: POP
15764: POP
// end ;
15765: GO 15315
15767: POP
15768: POP
// end else
15769: GO 15976
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15771: LD_VAR 0 21
15775: PUSH
15776: LD_VAR 0 21
15780: PPUSH
15781: LD_INT 56
15783: PUSH
15784: EMPTY
15785: LIST
15786: PPUSH
15787: CALL_OW 72
15791: AND
15792: PUSH
15793: LD_VAR 0 30
15797: AND
15798: IFFALSE 15976
// for i := 1 to personel do
15800: LD_ADDR_VAR 0 13
15804: PUSH
15805: DOUBLE
15806: LD_INT 1
15808: DEC
15809: ST_TO_ADDR
15810: LD_VAR 0 17
15814: PUSH
15815: FOR_TO
15816: IFFALSE 15974
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15818: LD_VAR 0 17
15822: PUSH
15823: LD_VAR 0 13
15827: ARRAY
15828: PUSH
15829: LD_INT 1
15831: ARRAY
15832: PPUSH
15833: CALL_OW 257
15837: PUSH
15838: LD_INT 4
15840: EQUAL
15841: PUSH
15842: LD_VAR 0 17
15846: PUSH
15847: LD_VAR 0 13
15851: ARRAY
15852: PUSH
15853: LD_INT 3
15855: ARRAY
15856: PUSH
15857: LD_INT 1
15859: EQUAL
15860: AND
15861: IFFALSE 15972
// begin if not personel [ i ] [ 2 ] then
15863: LD_VAR 0 17
15867: PUSH
15868: LD_VAR 0 13
15872: ARRAY
15873: PUSH
15874: LD_INT 2
15876: ARRAY
15877: NOT
15878: IFFALSE 15938
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15880: LD_ADDR_VAR 0 17
15884: PUSH
15885: LD_VAR 0 17
15889: PPUSH
15890: LD_VAR 0 13
15894: PUSH
15895: LD_VAR 0 17
15899: PUSH
15900: LD_VAR 0 13
15904: ARRAY
15905: PUSH
15906: LD_INT 1
15908: MINUS
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: LD_VAR 0 30
15918: PUSH
15919: LD_INT 1
15921: PPUSH
15922: LD_VAR 0 30
15926: PPUSH
15927: CALL_OW 12
15931: ARRAY
15932: PPUSH
15933: CALL 33262 0 3
15937: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15938: LD_VAR 0 17
15942: PUSH
15943: LD_VAR 0 13
15947: ARRAY
15948: PUSH
15949: LD_INT 1
15951: ARRAY
15952: PPUSH
15953: LD_VAR 0 17
15957: PUSH
15958: LD_VAR 0 13
15962: ARRAY
15963: PUSH
15964: LD_INT 2
15966: ARRAY
15967: PPUSH
15968: CALL_OW 120
// end ;
15972: GO 15815
15974: POP
15975: POP
// wait ( 0 0$01 ) ;
15976: LD_INT 35
15978: PPUSH
15979: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15983: LD_VAR 0 23
15987: PUSH
15988: LD_VAR 0 8
15992: LESS
15993: PUSH
15994: LD_VAR 0 29
15998: AND
15999: IFFALSE 16249
// begin tmp = vehiclesAmount - vehicles ;
16001: LD_ADDR_VAR 0 14
16005: PUSH
16006: LD_VAR 0 8
16010: PUSH
16011: LD_VAR 0 23
16015: MINUS
16016: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16017: LD_ADDR_VAR 0 26
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: LD_VAR 0 2
16031: PPUSH
16032: CALL 7560 0 2
16036: ST_TO_ADDR
// for i := 1 to tmp do
16037: LD_ADDR_VAR 0 13
16041: PUSH
16042: DOUBLE
16043: LD_INT 1
16045: DEC
16046: ST_TO_ADDR
16047: LD_VAR 0 14
16051: PUSH
16052: FOR_TO
16053: IFFALSE 16245
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16055: LD_ADDR_VAR 0 14
16059: PUSH
16060: LD_VAR 0 26
16064: PUSH
16065: LD_INT 1
16067: PPUSH
16068: LD_VAR 0 26
16072: PPUSH
16073: CALL_OW 12
16077: ARRAY
16078: ST_TO_ADDR
// if tmp then
16079: LD_VAR 0 14
16083: IFFALSE 16243
// begin if tmp in [ 34 , 14 , 71 ] then
16085: LD_VAR 0 14
16089: PUSH
16090: LD_INT 34
16092: PUSH
16093: LD_INT 14
16095: PUSH
16096: LD_INT 71
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: IN
16104: IFFALSE 16142
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16106: LD_ADDR_VAR 0 27
16110: PUSH
16111: LD_INT 4
16113: PUSH
16114: EMPTY
16115: LIST
16116: PUSH
16117: LD_INT 14
16119: PUSH
16120: EMPTY
16121: LIST
16122: PUSH
16123: LD_INT 24
16125: PUSH
16126: EMPTY
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: PUSH
16134: LD_VAR 0 2
16138: ARRAY
16139: ST_TO_ADDR
16140: GO 16200
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16142: LD_ADDR_VAR 0 27
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 4
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 13
16163: PUSH
16164: LD_INT 14
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 21
16173: PUSH
16174: LD_INT 23
16176: PUSH
16177: LD_INT 24
16179: PUSH
16180: LD_INT 22
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: LD_VAR 0 2
16198: ARRAY
16199: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16200: LD_VAR 0 29
16204: PUSH
16205: LD_INT 1
16207: ARRAY
16208: PPUSH
16209: LD_VAR 0 27
16213: PUSH
16214: LD_INT 1
16216: PPUSH
16217: LD_VAR 0 27
16221: PPUSH
16222: CALL_OW 12
16226: ARRAY
16227: PPUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 14
16238: PPUSH
16239: CALL_OW 185
// end ; end ;
16243: GO 16052
16245: POP
16246: POP
// end else
16247: GO 16262
// ComCancel ( factory [ 1 ] ) ;
16249: LD_VAR 0 29
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16262: LD_ADDR_VAR 0 22
16266: PUSH
16267: LD_VAR 0 4
16271: PPUSH
16272: LD_INT 22
16274: PUSH
16275: LD_VAR 0 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 21
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PPUSH
16298: CALL_OW 70
16302: PUSH
16303: FOR_IN
16304: IFFALSE 16474
// begin vehicleInList = false ;
16306: LD_ADDR_VAR 0 24
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// for i := 1 to vehicles do
16314: LD_ADDR_VAR 0 13
16318: PUSH
16319: DOUBLE
16320: LD_INT 1
16322: DEC
16323: ST_TO_ADDR
16324: LD_VAR 0 23
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16360
// begin if vehicle in vehicles [ i ] then
16332: LD_VAR 0 22
16336: PUSH
16337: LD_VAR 0 23
16341: PUSH
16342: LD_VAR 0 13
16346: ARRAY
16347: IN
16348: IFFALSE 16358
// vehicleInList = true ;
16350: LD_ADDR_VAR 0 24
16354: PUSH
16355: LD_INT 1
16357: ST_TO_ADDR
// end ;
16358: GO 16329
16360: POP
16361: POP
// if not vehicleInList then
16362: LD_VAR 0 24
16366: NOT
16367: IFFALSE 16472
// if vehicles < vehiclesToAttackAmount then
16369: LD_VAR 0 23
16373: PUSH
16374: LD_VAR 0 10
16378: LESS
16379: IFFALSE 16431
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16381: LD_ADDR_VAR 0 23
16385: PUSH
16386: LD_VAR 0 23
16390: PUSH
16391: LD_VAR 0 22
16395: PUSH
16396: LD_VAR 0 22
16400: PPUSH
16401: CALL_OW 313
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PUSH
16410: LD_VAR 0 22
16414: PPUSH
16415: CALL_OW 302
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: ADD
16428: ST_TO_ADDR
16429: GO 16472
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16431: LD_ADDR_VAR 0 23
16435: PUSH
16436: LD_VAR 0 23
16440: PUSH
16441: LD_VAR 0 22
16445: PUSH
16446: LD_VAR 0 22
16450: PPUSH
16451: CALL_OW 313
16455: PUSH
16456: LD_INT 1
16458: ARRAY
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: ADD
16471: ST_TO_ADDR
// end ;
16472: GO 16303
16474: POP
16475: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16476: LD_ADDR_VAR 0 36
16480: PUSH
16481: LD_VAR 0 7
16485: PPUSH
16486: LD_INT 81
16488: PUSH
16489: LD_VAR 0 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 70
16502: PUSH
16503: FOR_IN
16504: IFFALSE 16683
// begin defenceUnits = [ ] ;
16506: LD_ADDR_VAR 0 25
16510: PUSH
16511: EMPTY
16512: ST_TO_ADDR
// for i := 1 to personel do
16513: LD_ADDR_VAR 0 13
16517: PUSH
16518: DOUBLE
16519: LD_INT 1
16521: DEC
16522: ST_TO_ADDR
16523: LD_VAR 0 17
16527: PUSH
16528: FOR_TO
16529: IFFALSE 16579
// if personel [ i ] [ 3 ] = 2 then
16531: LD_VAR 0 17
16535: PUSH
16536: LD_VAR 0 13
16540: ARRAY
16541: PUSH
16542: LD_INT 3
16544: ARRAY
16545: PUSH
16546: LD_INT 2
16548: EQUAL
16549: IFFALSE 16577
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16551: LD_ADDR_VAR 0 25
16555: PUSH
16556: LD_VAR 0 25
16560: PUSH
16561: LD_VAR 0 17
16565: PUSH
16566: LD_VAR 0 13
16570: ARRAY
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: ADD
16576: ST_TO_ADDR
16577: GO 16528
16579: POP
16580: POP
// for i := 1 to vehicles do
16581: LD_ADDR_VAR 0 13
16585: PUSH
16586: DOUBLE
16587: LD_INT 1
16589: DEC
16590: ST_TO_ADDR
16591: LD_VAR 0 23
16595: PUSH
16596: FOR_TO
16597: IFFALSE 16647
// if vehicles [ i ] [ 3 ] = 2 then
16599: LD_VAR 0 23
16603: PUSH
16604: LD_VAR 0 13
16608: ARRAY
16609: PUSH
16610: LD_INT 3
16612: ARRAY
16613: PUSH
16614: LD_INT 2
16616: EQUAL
16617: IFFALSE 16645
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16619: LD_ADDR_VAR 0 25
16623: PUSH
16624: LD_VAR 0 25
16628: PUSH
16629: LD_VAR 0 23
16633: PUSH
16634: LD_VAR 0 13
16638: ARRAY
16639: PUSH
16640: LD_INT 1
16642: ARRAY
16643: ADD
16644: ST_TO_ADDR
16645: GO 16596
16647: POP
16648: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16649: LD_VAR 0 25
16653: PPUSH
16654: LD_INT 3
16656: PUSH
16657: LD_INT 60
16659: PUSH
16660: EMPTY
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL_OW 72
16671: PPUSH
16672: LD_VAR 0 36
16676: PPUSH
16677: CALL_OW 175
// end ;
16681: GO 16503
16683: POP
16684: POP
// until not personel or not enableOmicronAI ;
16685: LD_VAR 0 17
16689: NOT
16690: PUSH
16691: LD_EXP 29
16695: NOT
16696: OR
16697: IFFALSE 11954
// end ;
16699: LD_VAR 0 12
16703: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
16704: LD_INT 0
16706: PPUSH
16707: PPUSH
16708: PPUSH
// weapons = [ ru_gatling_gun , ru_gun ] ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 43
16716: PUSH
16717: LD_INT 44
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
16724: LD_ADDR_VAR 0 2
16728: PUSH
16729: LD_EXP 69
16733: PUSH
16734: FOR_IN
16735: IFFALSE 16767
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
16737: LD_VAR 0 2
16741: PPUSH
16742: LD_VAR 0 3
16746: PUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: CALL_OW 12
16759: ARRAY
16760: PPUSH
16761: CALL_OW 208
16765: GO 16734
16767: POP
16768: POP
// end ;
16769: LD_VAR 0 1
16773: RET
// export function KirovProduceVehicles ( factory ) ; begin
16774: LD_INT 0
16776: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_INT 21
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_INT 51
16793: PPUSH
16794: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16798: LD_VAR 0 1
16802: PPUSH
16803: LD_INT 21
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: LD_INT 1
16811: PPUSH
16812: LD_INT 51
16814: PPUSH
16815: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 21
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 51
16835: PPUSH
16836: CALL_OW 185
// case Difficulty of 1 :
16840: LD_OWVAR 67
16844: PUSH
16845: LD_INT 1
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16976
16853: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
16854: LD_VAR 0 1
16858: PPUSH
16859: LD_INT 21
16861: PUSH
16862: LD_INT 23
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 1
16871: PPUSH
16872: LD_INT 2
16874: PPUSH
16875: CALL_OW 12
16879: ARRAY
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_INT 43
16889: PPUSH
16890: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_INT 21
16901: PUSH
16902: LD_INT 23
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: PPUSH
16912: LD_INT 2
16914: PPUSH
16915: CALL_OW 12
16919: ARRAY
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: LD_INT 43
16929: PPUSH
16930: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
16934: LD_VAR 0 1
16938: PPUSH
16939: LD_INT 21
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 1
16951: PPUSH
16952: LD_INT 2
16954: PPUSH
16955: CALL_OW 12
16959: ARRAY
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_INT 44
16969: PPUSH
16970: CALL_OW 185
// end ; 2 :
16974: GO 17239
16976: LD_INT 2
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17107
16984: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
16985: LD_VAR 0 1
16989: PPUSH
16990: LD_INT 21
16992: PUSH
16993: LD_INT 23
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PPUSH
17003: LD_INT 2
17005: PPUSH
17006: CALL_OW 12
17010: ARRAY
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: LD_INT 42
17020: PPUSH
17021: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 23
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_INT 2
17045: PPUSH
17046: CALL_OW 12
17050: ARRAY
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: LD_INT 43
17060: PPUSH
17061: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17065: LD_VAR 0 1
17069: PPUSH
17070: LD_INT 21
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: PPUSH
17083: LD_INT 2
17085: PPUSH
17086: CALL_OW 12
17090: ARRAY
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: LD_INT 43
17100: PPUSH
17101: CALL_OW 185
// end ; 3 :
17105: GO 17239
17107: LD_INT 3
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17238
17115: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17116: LD_VAR 0 1
17120: PPUSH
17121: LD_INT 21
17123: PUSH
17124: LD_INT 23
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_INT 2
17136: PPUSH
17137: CALL_OW 12
17141: ARRAY
17142: PPUSH
17143: LD_INT 1
17145: PPUSH
17146: LD_INT 1
17148: PPUSH
17149: LD_INT 42
17151: PPUSH
17152: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17156: LD_VAR 0 1
17160: PPUSH
17161: LD_INT 21
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: PPUSH
17174: LD_INT 2
17176: PPUSH
17177: CALL_OW 12
17181: ARRAY
17182: PPUSH
17183: LD_INT 1
17185: PPUSH
17186: LD_INT 1
17188: PPUSH
17189: LD_INT 42
17191: PPUSH
17192: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 23
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 12
17221: ARRAY
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_INT 43
17231: PPUSH
17232: CALL_OW 185
// end ; end ;
17236: GO 17239
17238: POP
// end ;
17239: LD_VAR 0 2
17243: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17244: LD_INT 0
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
// vehicles = [ ] ;
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17258: LD_ADDR_VAR 0 4
17262: PUSH
17263: LD_EXP 73
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17318
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17271: LD_ADDR_VAR 0 3
17275: PUSH
17276: LD_VAR 0 3
17280: PPUSH
17281: LD_INT 1
17283: PPUSH
17284: LD_VAR 0 4
17288: PUSH
17289: LD_VAR 0 4
17293: PPUSH
17294: CALL_OW 313
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PPUSH
17311: CALL_OW 2
17315: ST_TO_ADDR
17316: GO 17268
17318: POP
17319: POP
// repeat for i := 1 to vehicles do
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: DOUBLE
17326: LD_INT 1
17328: DEC
17329: ST_TO_ADDR
17330: LD_VAR 0 3
17334: PUSH
17335: FOR_TO
17336: IFFALSE 17374
// if vehicles [ i ] [ 3 ] = 1 then
17338: LD_VAR 0 3
17342: PUSH
17343: LD_VAR 0 2
17347: ARRAY
17348: PUSH
17349: LD_INT 3
17351: ARRAY
17352: PUSH
17353: LD_INT 1
17355: EQUAL
17356: IFFALSE 17372
// goodVehs = goodVehs + 1 ;
17358: LD_ADDR_VAR 0 5
17362: PUSH
17363: LD_VAR 0 5
17367: PUSH
17368: LD_INT 1
17370: PLUS
17371: ST_TO_ADDR
17372: GO 17335
17374: POP
17375: POP
// if goodVehs = vehicles then
17376: LD_VAR 0 5
17380: PUSH
17381: LD_VAR 0 3
17385: EQUAL
17386: IFFALSE 17435
// for i := 1 to vehicles do
17388: LD_ADDR_VAR 0 2
17392: PUSH
17393: DOUBLE
17394: LD_INT 1
17396: DEC
17397: ST_TO_ADDR
17398: LD_VAR 0 3
17402: PUSH
17403: FOR_TO
17404: IFFALSE 17433
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17406: LD_VAR 0 3
17410: PUSH
17411: LD_VAR 0 2
17415: ARRAY
17416: PUSH
17417: LD_INT 1
17419: ARRAY
17420: PPUSH
17421: LD_INT 26
17423: PPUSH
17424: LD_INT 35
17426: PPUSH
17427: CALL_OW 114
17431: GO 17403
17433: POP
17434: POP
// goodVehs = 0 ;
17435: LD_ADDR_VAR 0 5
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// for i := 1 to vehicles do
17443: LD_ADDR_VAR 0 2
17447: PUSH
17448: DOUBLE
17449: LD_INT 1
17451: DEC
17452: ST_TO_ADDR
17453: LD_VAR 0 3
17457: PUSH
17458: FOR_TO
17459: IFFALSE 17859
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17461: LD_VAR 0 3
17465: PUSH
17466: LD_VAR 0 2
17470: ARRAY
17471: PUSH
17472: LD_INT 1
17474: ARRAY
17475: PPUSH
17476: CALL_OW 256
17480: PUSH
17481: LD_INT 500
17483: LESS
17484: PUSH
17485: LD_VAR 0 3
17489: PUSH
17490: LD_VAR 0 2
17494: ARRAY
17495: PUSH
17496: LD_INT 1
17498: ARRAY
17499: PPUSH
17500: LD_INT 78
17502: PPUSH
17503: LD_INT 39
17505: PPUSH
17506: CALL_OW 297
17510: PUSH
17511: LD_INT 9
17513: LESS
17514: NOT
17515: AND
17516: IFFALSE 17581
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_VAR 0 2
17532: PUSH
17533: LD_VAR 0 3
17537: PUSH
17538: LD_VAR 0 2
17542: ARRAY
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PPUSH
17548: LD_INT 2
17550: PPUSH
17551: CALL 33262 0 3
17555: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17556: LD_VAR 0 3
17560: PUSH
17561: LD_VAR 0 2
17565: ARRAY
17566: PUSH
17567: LD_INT 1
17569: ARRAY
17570: PPUSH
17571: LD_INT 78
17573: PPUSH
17574: LD_INT 39
17576: PPUSH
17577: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 2
17590: ARRAY
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: PPUSH
17596: CALL_OW 256
17600: PUSH
17601: LD_INT 500
17603: LESS
17604: PUSH
17605: LD_VAR 0 3
17609: PUSH
17610: LD_VAR 0 2
17614: ARRAY
17615: PUSH
17616: LD_INT 1
17618: ARRAY
17619: PPUSH
17620: LD_INT 78
17622: PPUSH
17623: LD_INT 39
17625: PPUSH
17626: CALL_OW 297
17630: PUSH
17631: LD_INT 9
17633: LESS
17634: AND
17635: IFFALSE 17690
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
17637: LD_VAR 0 3
17641: PUSH
17642: LD_VAR 0 2
17646: ARRAY
17647: PUSH
17648: LD_INT 2
17650: ARRAY
17651: PPUSH
17652: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
17656: LD_VAR 0 3
17660: PUSH
17661: LD_VAR 0 2
17665: ARRAY
17666: PUSH
17667: LD_INT 2
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 3
17675: PUSH
17676: LD_VAR 0 2
17680: ARRAY
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
17690: LD_VAR 0 3
17694: PUSH
17695: LD_VAR 0 2
17699: ARRAY
17700: PUSH
17701: LD_INT 1
17703: ARRAY
17704: PPUSH
17705: CALL_OW 256
17709: PUSH
17710: LD_INT 1000
17712: EQUAL
17713: PUSH
17714: LD_VAR 0 3
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_INT 3
17727: ARRAY
17728: PUSH
17729: LD_INT 2
17731: EQUAL
17732: AND
17733: IFFALSE 17807
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_VAR 0 2
17749: PUSH
17750: LD_VAR 0 3
17754: PUSH
17755: LD_VAR 0 2
17759: ARRAY
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL 33262 0 3
17772: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
17773: LD_VAR 0 3
17777: PUSH
17778: LD_VAR 0 2
17782: ARRAY
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PPUSH
17788: LD_VAR 0 3
17792: PUSH
17793: LD_VAR 0 2
17797: ARRAY
17798: PUSH
17799: LD_INT 1
17801: ARRAY
17802: PPUSH
17803: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
17807: LD_VAR 0 3
17811: PUSH
17812: LD_VAR 0 2
17816: ARRAY
17817: PUSH
17818: LD_INT 1
17820: ARRAY
17821: PPUSH
17822: CALL_OW 256
17826: PUSH
17827: LD_INT 250
17829: LESS
17830: IFFALSE 17857
// vehicles = vehicles diff [ vehicles [ i ] ] ;
17832: LD_ADDR_VAR 0 3
17836: PUSH
17837: LD_VAR 0 3
17841: PUSH
17842: LD_VAR 0 3
17846: PUSH
17847: LD_VAR 0 2
17851: ARRAY
17852: PUSH
17853: EMPTY
17854: LIST
17855: DIFF
17856: ST_TO_ADDR
// end ;
17857: GO 17458
17859: POP
17860: POP
// wait ( 0 0$1 ) ;
17861: LD_INT 35
17863: PPUSH
17864: CALL_OW 67
// until omicronSurrender ;
17868: LD_EXP 23
17872: IFFALSE 17320
// end ;
17874: LD_VAR 0 1
17878: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
17894: PPUSH
// inBase = false ;
17895: LD_ADDR_VAR 0 15
17899: PUSH
17900: LD_INT 0
17902: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
17903: LD_ADDR_VAR 0 8
17907: PUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: LD_INT 22
17915: PUSH
17916: LD_INT 3
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: PPUSH
17926: CALL_OW 70
17930: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
17931: LD_ADDR_VAR 0 9
17935: PUSH
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL_OW 435
17945: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
17946: LD_ADDR_VAR 0 12
17950: PUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: LD_INT 50
17958: PUSH
17959: EMPTY
17960: LIST
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: LD_INT 25
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 25
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18010: LD_ADDR_VAR 0 13
18014: PUSH
18015: LD_VAR 0 1
18019: PPUSH
18020: LD_INT 50
18022: PUSH
18023: EMPTY
18024: LIST
18025: PUSH
18026: LD_INT 25
18028: PUSH
18029: LD_INT 4
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 72
18044: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18045: LD_ADDR_VAR 0 14
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: LD_INT 3
18057: PUSH
18058: LD_INT 24
18060: PUSH
18061: LD_INT 1000
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PPUSH
18072: CALL_OW 72
18076: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18077: LD_ADDR_VAR 0 6
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18100: LD_ADDR_VAR 0 5
18104: PUSH
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_INT 50
18112: PUSH
18113: EMPTY
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: PPUSH
18119: CALL_OW 72
18123: PUSH
18124: FOR_IN
18125: IFFALSE 18463
// begin if attackUnits and medics then
18127: LD_VAR 0 12
18131: PUSH
18132: LD_VAR 0 13
18136: AND
18137: IFFALSE 18204
// begin if damageUnits then
18139: LD_VAR 0 14
18143: IFFALSE 18165
// ComHeal ( medics , damageUnits [ 1 ] ) else
18145: LD_VAR 0 13
18149: PPUSH
18150: LD_VAR 0 14
18154: PUSH
18155: LD_INT 1
18157: ARRAY
18158: PPUSH
18159: CALL_OW 128
18163: GO 18202
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18165: LD_VAR 0 13
18169: PPUSH
18170: LD_VAR 0 12
18174: PUSH
18175: LD_INT 1
18177: ARRAY
18178: PPUSH
18179: CALL_OW 250
18183: PPUSH
18184: LD_VAR 0 12
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL_OW 251
18197: PPUSH
18198: CALL_OW 111
// end else
18202: GO 18233
// begin if not attackUnits and medics then
18204: LD_VAR 0 12
18208: NOT
18209: PUSH
18210: LD_VAR 0 13
18214: AND
18215: IFFALSE 18233
// attackUnits = attackUnits ^ medics ;
18217: LD_ADDR_VAR 0 12
18221: PUSH
18222: LD_VAR 0 12
18226: PUSH
18227: LD_VAR 0 13
18231: ADD
18232: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18233: LD_ADDR_VAR 0 4
18237: PUSH
18238: DOUBLE
18239: LD_INT 1
18241: DEC
18242: ST_TO_ADDR
18243: LD_VAR 0 9
18247: PUSH
18248: LD_INT 2
18250: DIVREAL
18251: PUSH
18252: FOR_TO
18253: IFFALSE 18292
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18255: LD_VAR 0 12
18259: PPUSH
18260: LD_VAR 0 9
18264: PUSH
18265: LD_VAR 0 4
18269: ARRAY
18270: PPUSH
18271: LD_VAR 0 9
18275: PUSH
18276: LD_VAR 0 4
18280: PUSH
18281: LD_INT 1
18283: PLUS
18284: ARRAY
18285: PPUSH
18286: CALL_OW 176
18290: GO 18252
18292: POP
18293: POP
// if enemyUnitsOnRoad then
18294: LD_VAR 0 8
18298: IFFALSE 18417
// begin for playerUnit in playerUnits do
18300: LD_ADDR_VAR 0 7
18304: PUSH
18305: LD_VAR 0 6
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18413
// begin if Attacks ( playerUnit ) then
18313: LD_VAR 0 7
18317: PPUSH
18318: CALL_OW 320
18322: IFFALSE 18377
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18324: LD_VAR 0 7
18328: PPUSH
18329: CALL_OW 320
18333: PUSH
18334: LD_VAR 0 1
18338: IN
18339: PUSH
18340: LD_VAR 0 7
18344: PPUSH
18345: LD_VAR 0 5
18349: PPUSH
18350: CALL_OW 296
18354: PUSH
18355: LD_INT 13
18357: LESS
18358: AND
18359: IFFALSE 18375
// ComAttackUnit ( attackUnits , playerUnit ) end else
18361: LD_VAR 0 12
18365: PPUSH
18366: LD_VAR 0 7
18370: PPUSH
18371: CALL_OW 115
18375: GO 18411
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18377: LD_ADDR_VAR 0 10
18381: PUSH
18382: LD_VAR 0 8
18386: PPUSH
18387: LD_VAR 0 5
18391: PPUSH
18392: CALL_OW 74
18396: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
18397: LD_VAR 0 12
18401: PPUSH
18402: LD_VAR 0 10
18406: PPUSH
18407: CALL_OW 115
// end ; end ;
18411: GO 18310
18413: POP
18414: POP
// end else
18415: GO 18432
// begin ComMoveXY ( unit , 27 , 34 ) ;
18417: LD_VAR 0 5
18421: PPUSH
18422: LD_INT 27
18424: PPUSH
18425: LD_INT 34
18427: PPUSH
18428: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
18432: LD_VAR 0 5
18436: PPUSH
18437: LD_INT 27
18439: PPUSH
18440: LD_INT 34
18442: PPUSH
18443: CALL_OW 297
18447: PUSH
18448: LD_INT 5
18450: LESS
18451: IFFALSE 18461
// inBase = true ;
18453: LD_ADDR_VAR 0 15
18457: PUSH
18458: LD_INT 1
18460: ST_TO_ADDR
// end ;
18461: GO 18124
18463: POP
18464: POP
// wait ( 0 0$1 ) ;
18465: LD_INT 35
18467: PPUSH
18468: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
18472: LD_VAR 0 1
18476: PPUSH
18477: LD_INT 50
18479: PUSH
18480: EMPTY
18481: LIST
18482: PPUSH
18483: CALL_OW 72
18487: PUSH
18488: LD_INT 0
18490: EQUAL
18491: PUSH
18492: LD_VAR 0 15
18496: OR
18497: IFFALSE 17903
// ComMoveXY ( units , 27 , 34 ) ;
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_INT 27
18506: PPUSH
18507: LD_INT 34
18509: PPUSH
18510: CALL_OW 111
// for i := 1 to units do
18514: LD_ADDR_VAR 0 4
18518: PUSH
18519: DOUBLE
18520: LD_INT 1
18522: DEC
18523: ST_TO_ADDR
18524: LD_VAR 0 1
18528: PUSH
18529: FOR_TO
18530: IFFALSE 18565
// if IsOk ( units [ i ] ) then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_VAR 0 4
18541: ARRAY
18542: PPUSH
18543: CALL_OW 302
18547: IFFALSE 18563
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
18549: LD_ADDR_EXP 12
18553: PUSH
18554: LD_EXP 12
18558: PUSH
18559: LD_INT 1
18561: PLUS
18562: ST_TO_ADDR
18563: GO 18529
18565: POP
18566: POP
// amSupportTroops = amSupportTroops diff units ;
18567: LD_ADDR_EXP 81
18571: PUSH
18572: LD_EXP 81
18576: PUSH
18577: LD_VAR 0 1
18581: DIFF
18582: ST_TO_ADDR
// newBase = amBase ;
18583: LD_ADDR_VAR 0 16
18587: PUSH
18588: LD_EXP 83
18592: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
18593: LD_ADDR_VAR 0 16
18597: PUSH
18598: LD_VAR 0 16
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_INT 50
18610: PUSH
18611: EMPTY
18612: LIST
18613: PPUSH
18614: CALL_OW 72
18618: ADD
18619: ST_TO_ADDR
// amBase = newBase ;
18620: LD_ADDR_EXP 83
18624: PUSH
18625: LD_VAR 0 16
18629: ST_TO_ADDR
// end ; end_of_file
18630: LD_VAR 0 3
18634: RET
// export function Lose_Burlak ; begin
18635: LD_INT 0
18637: PPUSH
// YouLost ( Burlak ) ;
18638: LD_STRING Burlak
18640: PPUSH
18641: CALL_OW 104
// end ;
18645: LD_VAR 0 1
18649: RET
// export function Lose_Omicron ; begin
18650: LD_INT 0
18652: PPUSH
// YouLost ( Omicron ) ;
18653: LD_STRING Omicron
18655: PPUSH
18656: CALL_OW 104
// end ;
18660: LD_VAR 0 1
18664: RET
// export function Lose_Vehicles ; begin
18665: LD_INT 0
18667: PPUSH
// YouLost ( Vehicles ) ;
18668: LD_STRING Vehicles
18670: PPUSH
18671: CALL_OW 104
// end ;
18675: LD_VAR 0 1
18679: RET
// export function Lose_SelfAttack ; begin
18680: LD_INT 0
18682: PPUSH
// YouLost ( SelfAttack ) ;
18683: LD_STRING SelfAttack
18685: PPUSH
18686: CALL_OW 104
// end ;
18690: LD_VAR 0 1
18694: RET
// export function Lose_Delay ; begin
18695: LD_INT 0
18697: PPUSH
// YouLost ( Delay ) ;
18698: LD_STRING Delay
18700: PPUSH
18701: CALL_OW 104
// end ; end_of_file
18705: LD_VAR 0 1
18709: RET
// export function FinishMission ; begin
18710: LD_INT 0
18712: PPUSH
// SetRewards ;
18713: CALL 18734 0 0
// SavePlayerCharacters ;
18717: CALL 18948 0 0
// SaveGlobalVariables ;
18721: CALL 19277 0 0
// YouWin ;
18725: CALL_OW 103
// end ;
18729: LD_VAR 0 1
18733: RET
// function SetRewards ; var unitsToReward ; begin
18734: LD_INT 0
18736: PPUSH
18737: PPUSH
// if produceMoreVehicles then
18738: LD_EXP 16
18742: IFFALSE 18756
// AddMedal ( Surplus , 1 ) else
18744: LD_STRING Surplus
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 101
18754: GO 18786
// if produceOnlyForYou then
18756: LD_EXP 17
18760: IFFALSE 18775
// AddMedal ( Surplus , - 1 ) else
18762: LD_STRING Surplus
18764: PPUSH
18765: LD_INT 1
18767: NEG
18768: PPUSH
18769: CALL_OW 101
18773: GO 18786
// AddMedal ( Surplus , - 2 ) ;
18775: LD_STRING Surplus
18777: PPUSH
18778: LD_INT 2
18780: NEG
18781: PPUSH
18782: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
18786: LD_EXP 12
18790: PUSH
18791: LD_EXP 44
18795: LESS
18796: IFFALSE 18810
// AddMedal ( PreventReinforcements , 1 ) else
18798: LD_STRING PreventReinforcements
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: CALL_OW 101
18808: GO 18821
// AddMedal ( PreventReinforcements , - 1 ) ;
18810: LD_STRING PreventReinforcements
18812: PPUSH
18813: LD_INT 1
18815: NEG
18816: PPUSH
18817: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
18821: LD_EXP 7
18825: PUSH
18826: LD_EXP 52
18830: PPUSH
18831: CALL_OW 302
18835: AND
18836: IFFALSE 18850
// AddMedal ( Scholtze , 1 ) else
18838: LD_STRING Scholtze
18840: PPUSH
18841: LD_INT 1
18843: PPUSH
18844: CALL_OW 101
18848: GO 18861
// AddMedal ( Scholtze , - 1 ) ;
18850: LD_STRING Scholtze
18852: PPUSH
18853: LD_INT 1
18855: NEG
18856: PPUSH
18857: CALL_OW 101
// GiveMedals ( Main ) ;
18861: LD_STRING Main
18863: PPUSH
18864: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_INT 3
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 21
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PPUSH
18897: CALL_OW 69
18901: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_VAR 0 2
18911: PUSH
18912: LD_EXP 76
18916: ADD
18917: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
18918: LD_ADDR_VAR 0 2
18922: PUSH
18923: LD_VAR 0 2
18927: PUSH
18928: LD_EXP 59
18932: DIFF
18933: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
18934: LD_VAR 0 2
18938: PPUSH
18939: CALL_OW 43
// end ;
18943: LD_VAR 0 1
18947: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
18948: LD_INT 0
18950: PPUSH
18951: PPUSH
18952: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18953: LD_EXP 46
18957: PPUSH
18958: LD_STRING Burlak
18960: PPUSH
18961: LD_INT 3
18963: PPUSH
18964: CALL 7058 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
18968: LD_EXP 47
18972: PPUSH
18973: LD_STRING Gnyevko
18975: PPUSH
18976: LD_INT 3
18978: PPUSH
18979: CALL 7058 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
18983: LD_EXP 49
18987: PPUSH
18988: LD_STRING Kovalyuk
18990: PPUSH
18991: LD_INT 3
18993: PPUSH
18994: CALL 7058 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
18998: LD_EXP 48
19002: PPUSH
19003: LD_STRING Kirilenkova
19005: PPUSH
19006: LD_INT 3
19008: PPUSH
19009: CALL 7058 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19013: LD_EXP 52
19017: PPUSH
19018: LD_STRING Scholtze
19020: PPUSH
19021: LD_INT 3
19023: PPUSH
19024: CALL 7058 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19028: LD_EXP 50
19032: PPUSH
19033: LD_STRING Belkov
19035: PPUSH
19036: LD_INT 3
19038: PPUSH
19039: CALL 7058 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19043: LD_EXP 51
19047: PPUSH
19048: LD_STRING Belkov2
19050: PPUSH
19051: LD_INT 3
19053: PPUSH
19054: CALL 7058 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19058: LD_EXP 50
19062: PPUSH
19063: LD_STRING Belkov
19065: PPUSH
19066: LD_INT 6
19068: PPUSH
19069: CALL 7058 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19073: LD_EXP 51
19077: PPUSH
19078: LD_STRING Belkov2
19080: PPUSH
19081: LD_INT 6
19083: PPUSH
19084: CALL 7058 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 21
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 50
19115: PUSH
19116: EMPTY
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PPUSH
19124: CALL_OW 69
19128: PUSH
19129: LD_EXP 46
19133: PUSH
19134: LD_EXP 47
19138: PUSH
19139: LD_EXP 50
19143: PUSH
19144: LD_EXP 51
19148: PUSH
19149: LD_EXP 49
19153: PUSH
19154: LD_EXP 48
19158: PUSH
19159: LD_EXP 52
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: DIFF
19173: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_STRING other_survivors
19181: PPUSH
19182: LD_INT 3
19184: PPUSH
19185: CALL 7114 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_INT 6
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 21
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 50
19216: PUSH
19217: EMPTY
19218: LIST
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PUSH
19230: LD_EXP 58
19234: PUSH
19235: LD_EXP 59
19239: PUSH
19240: LD_EXP 50
19244: PUSH
19245: LD_EXP 51
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: DIFF
19256: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
19257: LD_VAR 0 3
19261: PPUSH
19262: LD_STRING other_kirov
19264: PPUSH
19265: LD_INT 6
19267: PPUSH
19268: CALL 7114 0 3
// end ;
19272: LD_VAR 0 1
19276: RET
// function SaveGlobalVariables ; begin
19277: LD_INT 0
19279: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
19280: LD_EXP 26
19284: PPUSH
19285: LD_STRING 03_KurinOpinion_1
19287: PPUSH
19288: CALL_OW 39
// end ; end_of_file
19292: LD_VAR 0 1
19296: RET
// export function CustomEvent ( event ) ; begin
19297: LD_INT 0
19299: PPUSH
// end ;
19300: LD_VAR 0 2
19304: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19314: LD_ADDR_VAR 0 2
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 21
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PPUSH
19343: CALL_OW 69
19347: PUSH
19348: FOR_IN
19349: IFFALSE 19546
// if GetTaskList ( i ) > 0 then
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 437
19360: PUSH
19361: LD_INT 0
19363: GREATER
19364: IFFALSE 19544
// for j = 1 to GetTaskList ( i ) do
19366: LD_ADDR_VAR 0 3
19370: PUSH
19371: DOUBLE
19372: LD_INT 1
19374: DEC
19375: ST_TO_ADDR
19376: LD_VAR 0 2
19380: PPUSH
19381: CALL_OW 437
19385: PUSH
19386: FOR_TO
19387: IFFALSE 19542
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
19389: LD_ADDR_VAR 0 4
19393: PUSH
19394: LD_VAR 0 2
19398: PPUSH
19399: CALL_OW 437
19403: PUSH
19404: LD_VAR 0 3
19408: ARRAY
19409: PUSH
19410: LD_INT 4
19412: ARRAY
19413: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
19414: LD_ADDR_VAR 0 8
19418: PUSH
19419: LD_VAR 0 2
19423: PPUSH
19424: CALL_OW 437
19428: PUSH
19429: LD_VAR 0 3
19433: ARRAY
19434: PUSH
19435: LD_INT 5
19437: ARRAY
19438: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
19439: LD_ADDR_VAR 0 6
19443: PUSH
19444: LD_VAR 0 2
19448: PPUSH
19449: CALL_OW 437
19453: PUSH
19454: LD_VAR 0 3
19458: ARRAY
19459: PUSH
19460: LD_INT 2
19462: ARRAY
19463: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
19464: LD_ADDR_VAR 0 7
19468: PUSH
19469: LD_VAR 0 2
19473: PPUSH
19474: CALL_OW 437
19478: PUSH
19479: LD_VAR 0 3
19483: ARRAY
19484: PUSH
19485: LD_INT 3
19487: ARRAY
19488: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
19489: LD_VAR 0 4
19493: PPUSH
19494: CALL_OW 255
19498: PUSH
19499: LD_INT 6
19501: EQUAL
19502: PUSH
19503: LD_VAR 0 2
19507: PPUSH
19508: CALL_OW 437
19512: PUSH
19513: LD_VAR 0 3
19517: ARRAY
19518: PUSH
19519: LD_INT 1
19521: ARRAY
19522: PUSH
19523: LD_STRING <
19525: EQUAL
19526: AND
19527: IFFALSE 19540
// SetTaskList ( i , [ ] ) ;
19529: LD_VAR 0 2
19533: PPUSH
19534: EMPTY
19535: PPUSH
19536: CALL_OW 446
// end ;
19540: GO 19386
19542: POP
19543: POP
19544: GO 19348
19546: POP
19547: POP
// end ;
19548: PPOPN 8
19550: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
19551: LD_VAR 0 2
19555: PUSH
19556: LD_INT 6
19558: EQUAL
19559: IFFALSE 19573
// SetSide ( building , 6 ) ;
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_INT 6
19568: PPUSH
19569: CALL_OW 235
// end ;
19573: PPOPN 3
19575: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
19576: LD_INT 0
19578: PPUSH
19579: PPUSH
// begin diffUnits = [ ] ;
19580: LD_ADDR_VAR 0 2
19584: PUSH
19585: EMPTY
19586: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL_OW 255
19596: PUSH
19597: LD_INT 3
19599: EQUAL
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 266
19610: PUSH
19611: LD_INT 0
19613: EQUAL
19614: AND
19615: PUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: LD_INT 21
19623: PPUSH
19624: CALL_OW 308
19628: AND
19629: IFFALSE 19643
// SetBName ( building , kagan ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_STRING kagan
19638: PPUSH
19639: CALL_OW 500
// if GetSide ( building ) = 6 then
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 255
19652: PUSH
19653: LD_INT 6
19655: EQUAL
19656: IFFALSE 19896
// begin if GetBType ( building ) = b_ext_noncombat then
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 266
19667: PUSH
19668: LD_INT 19
19670: EQUAL
19671: IFFALSE 19736
// begin SpawnKirovSupport ;
19673: CALL 4430 0 0
// MountWeaponTurrent ;
19677: CALL 16704 0 0
// wait ( 3 3$30 ) ;
19681: LD_INT 7350
19683: PPUSH
19684: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
19688: LD_INT 22
19690: PUSH
19691: LD_INT 6
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 21
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 30
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: PPUSH
19723: CALL_OW 69
19727: PUSH
19728: LD_INT 1
19730: ARRAY
19731: PPUSH
19732: CALL 16774 0 1
// end ; if GetBType ( building ) = b_depot then
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 266
19745: PUSH
19746: LD_INT 0
19748: EQUAL
19749: IFFALSE 19795
// begin kirovOilDepot = building ;
19751: LD_ADDR_EXP 65
19755: PUSH
19756: LD_VAR 0 1
19760: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
19761: LD_EXP 65
19765: PPUSH
19766: CALL_OW 274
19770: PPUSH
19771: LD_INT 2
19773: PPUSH
19774: LD_INT 3000
19776: PPUSH
19777: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
19781: LD_EXP 79
19785: PPUSH
19786: LD_VAR 0 1
19790: PPUSH
19791: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 266
19804: PUSH
19805: LD_INT 31
19807: EQUAL
19808: PUSH
19809: LD_VAR 0 1
19813: PPUSH
19814: CALL_OW 266
19818: PUSH
19819: LD_INT 4
19821: EQUAL
19822: OR
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: LD_INT 20
19831: PPUSH
19832: CALL_OW 308
19836: AND
19837: IFFALSE 19896
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
19839: LD_EXP 75
19843: PPUSH
19844: LD_INT 25
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 56
19856: PUSH
19857: EMPTY
19858: LIST
19859: PUSH
19860: LD_INT 3
19862: PUSH
19863: LD_INT 60
19865: PUSH
19866: EMPTY
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 72
19882: PUSH
19883: LD_INT 1
19885: ARRAY
19886: PPUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 120
// end ; end ;
19896: PPOPN 3
19898: END
// on UpgradeComplete ( building ) do var i , tmp ;
19899: LD_INT 0
19901: PPUSH
19902: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 255
19912: PUSH
19913: LD_INT 3
19915: EQUAL
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: PUSH
19927: LD_INT 3
19929: EQUAL
19930: AND
19931: PUSH
19932: LD_EXP 8
19936: NOT
19937: AND
19938: IFFALSE 19949
// Dial_UpgradeWorkshop ( building ) ;
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL 22771 0 1
// end ;
19949: PPOPN 3
19951: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
19952: LD_VAR 0 1
19956: PUSH
19957: LD_EXP 46
19961: EQUAL
19962: IFFALSE 19968
// Lose_Burlak ;
19964: CALL 18635 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
19968: LD_VAR 0 1
19972: PUSH
19973: LD_EXP 57
19977: EQUAL
19978: PUSH
19979: LD_EXP 28
19983: NOT
19984: AND
19985: IFFALSE 19991
// Lose_Omicron ;
19987: CALL 18650 0 0
// end ;
19991: PPOPN 1
19993: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
19994: LD_VAR 0 1
19998: PUSH
19999: LD_INT 3
20001: EQUAL
20002: PUSH
20003: LD_VAR 0 2
20007: PUSH
20008: LD_INT 6
20010: EQUAL
20011: AND
20012: IFFALSE 20018
// Lose_SelfAttack ;
20014: CALL 18680 0 0
// end ;
20018: PPOPN 2
20020: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 255
20030: PUSH
20031: LD_INT 6
20033: EQUAL
20034: IFFALSE 20199
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 264
20045: PUSH
20046: LD_INT 51
20048: EQUAL
20049: PUSH
20050: LD_EXP 71
20054: NOT
20055: AND
20056: IFFALSE 20070
// kirovTransportCargo = vehicle else
20058: LD_ADDR_EXP 71
20062: PUSH
20063: LD_VAR 0 1
20067: ST_TO_ADDR
20068: GO 20142
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 264
20079: PUSH
20080: LD_INT 51
20082: EQUAL
20083: IFFALSE 20142
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_EXP 65
20094: PPUSH
20095: LD_INT 2
20097: PPUSH
20098: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20102: LD_VAR 0 1
20106: PPUSH
20107: LD_INT 137
20109: PPUSH
20110: LD_INT 99
20112: PPUSH
20113: CALL_OW 171
// AddComHold ( vehicle ) ;
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20126: LD_ADDR_EXP 72
20130: PUSH
20131: LD_EXP 72
20135: PUSH
20136: LD_VAR 0 1
20140: ADD
20141: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20142: LD_VAR 0 1
20146: PPUSH
20147: CALL_OW 264
20151: PUSH
20152: LD_INT 42
20154: PUSH
20155: LD_INT 43
20157: PUSH
20158: LD_INT 44
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: IN
20166: IFFALSE 20199
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20168: LD_ADDR_EXP 73
20172: PUSH
20173: LD_EXP 73
20177: PUSH
20178: LD_VAR 0 1
20182: ADD
20183: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20184: LD_VAR 0 1
20188: PPUSH
20189: LD_INT 137
20191: PPUSH
20192: LD_INT 99
20194: PPUSH
20195: CALL_OW 111
// end ; end ; end ;
20199: PPOPN 2
20201: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 6
20209: EQUAL
20210: IFFALSE 20233
// begin ComExitVehicle ( capturing_unit ) ;
20212: LD_VAR 0 4
20216: PPUSH
20217: CALL_OW 121
// SetSide ( new , 6 ) ;
20221: LD_VAR 0 1
20225: PPUSH
20226: LD_INT 6
20228: PPUSH
20229: CALL_OW 235
// end ; end ;
20233: PPOPN 4
20235: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 255
20245: PUSH
20246: LD_INT 6
20248: EQUAL
20249: PUSH
20250: LD_EXP 19
20254: AND
20255: IFFALSE 20283
// begin wait ( 0 0$2 ) ;
20257: LD_INT 70
20259: PPUSH
20260: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
20264: LD_VAR 0 1
20268: PPUSH
20269: LD_INT 78
20271: PPUSH
20272: LD_INT 39
20274: PPUSH
20275: CALL_OW 174
// KirovAttackOmicron ;
20279: CALL 17244 0 0
// end ; end ; end_of_file
20283: PPOPN 2
20285: END
// export function MissionIntro ; var unit ; begin
20286: LD_INT 0
20288: PPUSH
20289: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20290: LD_EXP 46
20294: PUSH
20295: LD_EXP 58
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
20308: LD_EXP 46
20312: PUSH
20313: LD_EXP 60
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PPUSH
20322: LD_EXP 58
20326: PPUSH
20327: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
20331: LD_EXP 58
20335: PPUSH
20336: LD_EXP 46
20340: PPUSH
20341: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20345: LD_INT 3
20347: PPUSH
20348: LD_INT 24
20350: PPUSH
20351: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
20355: LD_EXP 50
20359: PPUSH
20360: CALL_OW 305
20364: NOT
20365: PUSH
20366: LD_EXP 51
20370: PPUSH
20371: CALL_OW 305
20375: NOT
20376: AND
20377: IFFALSE 20465
// begin Say ( Kurin , D1a-Kur-1 ) ;
20379: LD_EXP 58
20383: PPUSH
20384: LD_STRING D1a-Kur-1
20386: PPUSH
20387: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
20391: LD_EXP 46
20395: PPUSH
20396: LD_STRING D1a-Bur-1
20398: PPUSH
20399: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
20403: LD_EXP 58
20407: PPUSH
20408: LD_STRING D1a-Kur-2
20410: PPUSH
20411: CALL_OW 88
// if platonovOpinion <= 1 then
20415: LD_EXP 27
20419: PUSH
20420: LD_INT 1
20422: LESSEQUAL
20423: IFFALSE 20439
// Say ( Kurin , D1a-Kur-2a ) else
20425: LD_EXP 58
20429: PPUSH
20430: LD_STRING D1a-Kur-2a
20432: PPUSH
20433: CALL_OW 88
20437: GO 20451
// Say ( Kurin , D1a-Kur-2b ) ;
20439: LD_EXP 58
20443: PPUSH
20444: LD_STRING D1a-Kur-2b
20446: PPUSH
20447: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
20451: LD_EXP 46
20455: PPUSH
20456: LD_STRING D1a-Bur-2
20458: PPUSH
20459: CALL_OW 88
// end else
20463: GO 20501
// begin Say ( Kurin , D1b-Kur-1 ) ;
20465: LD_EXP 58
20469: PPUSH
20470: LD_STRING D1b-Kur-1
20472: PPUSH
20473: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
20477: LD_EXP 60
20481: PPUSH
20482: LD_STRING D1b-Bel-1
20484: PPUSH
20485: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
20489: LD_EXP 58
20493: PPUSH
20494: LD_STRING D1b-Kur-2
20496: PPUSH
20497: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
20501: LD_EXP 58
20505: PPUSH
20506: LD_STRING D2-Kur-1
20508: PPUSH
20509: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
20513: LD_EXP 46
20517: PPUSH
20518: LD_STRING D2-Bur-1
20520: PPUSH
20521: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
20525: LD_EXP 58
20529: PPUSH
20530: LD_STRING D2-Kur-2
20532: PPUSH
20533: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
20537: LD_EXP 46
20541: PPUSH
20542: LD_STRING D2-Bur-2
20544: PPUSH
20545: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
20549: LD_EXP 58
20553: PPUSH
20554: LD_STRING D2-Kur-3
20556: PPUSH
20557: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20561: LD_INT 1
20563: PPUSH
20564: LD_INT 6
20566: PPUSH
20567: LD_INT 1
20569: PPUSH
20570: LD_INT 1
20572: PPUSH
20573: CALL_OW 80
// PrepareAmericansMissionIntro ;
20577: CALL 5487 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
20581: LD_EXP 80
20585: PPUSH
20586: LD_INT 28
20588: PPUSH
20589: LD_INT 35
20591: PPUSH
20592: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
20596: LD_INT 93
20598: PPUSH
20599: LD_INT 36
20601: PPUSH
20602: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
20606: LD_INT 93
20608: PPUSH
20609: LD_INT 36
20611: PPUSH
20612: LD_INT 3
20614: PPUSH
20615: LD_INT 9
20617: NEG
20618: PPUSH
20619: CALL_OW 330
// wait ( 0 0$6 ) ;
20623: LD_INT 210
20625: PPUSH
20626: CALL_OW 67
// CenterOnUnits ( Popov ) ;
20630: LD_EXP 59
20634: PPUSH
20635: CALL_OW 85
// wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
20646: LD_EXP 59
20650: PPUSH
20651: LD_STRING D2-Pop-3
20653: PPUSH
20654: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20658: LD_EXP 46
20662: PUSH
20663: LD_EXP 58
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PPUSH
20672: CALL_OW 87
// wait ( 0 0$1 ) ;
20676: LD_INT 35
20678: PPUSH
20679: CALL_OW 67
// for unit in amIntroUnits do
20683: LD_ADDR_VAR 0 2
20687: PUSH
20688: LD_EXP 80
20692: PUSH
20693: FOR_IN
20694: IFFALSE 20707
// RemoveUnit ( unit ) ;
20696: LD_VAR 0 2
20700: PPUSH
20701: CALL_OW 64
20705: GO 20693
20707: POP
20708: POP
// Say ( Kurin , D2-Kur-4 ) ;
20709: LD_EXP 58
20713: PPUSH
20714: LD_STRING D2-Kur-4
20716: PPUSH
20717: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
20721: LD_EXP 46
20725: PPUSH
20726: LD_STRING D2-Bur-4
20728: PPUSH
20729: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
20733: LD_EXP 58
20737: PPUSH
20738: LD_STRING D2-Kur-5
20740: PPUSH
20741: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
20745: LD_EXP 46
20749: PPUSH
20750: LD_STRING D2-Bur-5
20752: PPUSH
20753: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
20757: LD_EXP 58
20761: PPUSH
20762: LD_STRING D2-Kur-6
20764: PPUSH
20765: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
20769: LD_EXP 47
20773: PPUSH
20774: CALL_OW 305
20778: IFFALSE 20794
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20780: LD_ADDR_EXP 36
20784: PUSH
20785: LD_EXP 36
20789: PUSH
20790: LD_INT 1
20792: MINUS
20793: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
20794: LD_EXP 49
20798: PPUSH
20799: CALL_OW 305
20803: IFFALSE 20819
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20805: LD_ADDR_EXP 36
20809: PUSH
20810: LD_EXP 36
20814: PUSH
20815: LD_INT 1
20817: MINUS
20818: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
20819: LD_EXP 48
20823: PPUSH
20824: CALL_OW 305
20828: IFFALSE 20844
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20830: LD_ADDR_EXP 36
20834: PUSH
20835: LD_EXP 36
20839: PUSH
20840: LD_INT 1
20842: MINUS
20843: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
20844: LD_EXP 36
20848: PPUSH
20849: CALL 7212 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
20853: LD_INT 93
20855: PPUSH
20856: LD_INT 36
20858: PPUSH
20859: LD_INT 3
20861: PPUSH
20862: CALL_OW 331
// Resetfog ;
20866: CALL_OW 335
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20870: LD_INT 3
20872: PPUSH
20873: LD_INT 24
20875: PPUSH
20876: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20880: LD_INT 22
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 21
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PPUSH
20904: CALL_OW 69
20908: PPUSH
20909: CALL_OW 122
// wait ( 0 0$1 ) ;
20913: LD_INT 35
20915: PPUSH
20916: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
20920: LD_INT 22
20922: PUSH
20923: LD_INT 3
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PPUSH
20944: CALL_OW 69
20948: PPUSH
20949: LD_EXP 57
20953: PPUSH
20954: CALL_OW 250
20958: PPUSH
20959: LD_EXP 57
20963: PPUSH
20964: CALL_OW 251
20968: PPUSH
20969: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
20973: LD_INT 35
20975: PPUSH
20976: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
20980: LD_EXP 46
20984: PPUSH
20985: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
20989: LD_EXP 46
20993: PPUSH
20994: LD_EXP 57
20998: PPUSH
20999: CALL_OW 296
21003: PUSH
21004: LD_INT 6
21006: LESS
21007: IFFALSE 20973
// InGameOff ;
21009: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21013: LD_STRING M1
21015: PPUSH
21016: CALL_OW 337
// SaveForQuickRestart ;
21020: CALL_OW 22
// counterEnable = true ;
21024: LD_ADDR_EXP 86
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// counterIndex = 1 ;
21032: LD_ADDR_EXP 87
21036: PUSH
21037: LD_INT 1
21039: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21040: LD_INT 3
21042: PPUSH
21043: LD_INT 24
21045: PPUSH
21046: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21050: LD_INT 6
21052: PPUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 6
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 21
21065: PUSH
21066: LD_INT 3
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 30
21075: PUSH
21076: LD_INT 6
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: PUSH
21093: LD_INT 1
21095: ARRAY
21096: PPUSH
21097: LD_INT 3
21099: PPUSH
21100: CALL 8527 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
21104: LD_INT 1
21106: PPUSH
21107: LD_INT 22
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 21
21119: PUSH
21120: LD_INT 3
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 30
21129: PUSH
21130: LD_INT 7
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PUSH
21147: LD_INT 1
21149: ARRAY
21150: PPUSH
21151: LD_INT 1
21153: PPUSH
21154: CALL 8527 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
21158: LD_INT 18
21160: PPUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 6
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 21
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 25
21183: PUSH
21184: LD_INT 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: PPUSH
21196: CALL_OW 70
21200: PPUSH
21201: LD_INT 17
21203: PPUSH
21204: LD_INT 159
21206: PPUSH
21207: LD_INT 116
21209: PPUSH
21210: LD_INT 0
21212: PPUSH
21213: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
21217: LD_INT 18
21219: PPUSH
21220: LD_INT 22
21222: PUSH
21223: LD_INT 6
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 21
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 25
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 70
21259: PPUSH
21260: LD_INT 19
21262: PPUSH
21263: LD_INT 161
21265: PPUSH
21266: LD_INT 115
21268: PPUSH
21269: LD_INT 5
21271: PPUSH
21272: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
21276: LD_INT 18
21278: PPUSH
21279: LD_INT 22
21281: PUSH
21282: LD_INT 6
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 21
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 25
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 70
21318: PPUSH
21319: LD_EXP 64
21323: PPUSH
21324: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
21328: LD_EXP 76
21332: PPUSH
21333: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
21337: LD_EXP 76
21341: PUSH
21342: LD_EXP 59
21346: DIFF
21347: PPUSH
21348: LD_EXP 66
21352: PPUSH
21353: CALL_OW 180
// ComWalk ( ruScout ) ;
21357: LD_EXP 61
21361: PPUSH
21362: CALL_OW 138
// wait ( 0 0$1 ) ;
21366: LD_INT 35
21368: PPUSH
21369: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
21373: LD_EXP 61
21377: PUSH
21378: LD_EXP 59
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PPUSH
21387: LD_INT 99
21389: PPUSH
21390: LD_INT 37
21392: PPUSH
21393: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
21397: LD_EXP 61
21401: PUSH
21402: LD_EXP 59
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PPUSH
21411: LD_INT 88
21413: PPUSH
21414: LD_INT 60
21416: PPUSH
21417: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
21421: LD_EXP 61
21425: PUSH
21426: LD_EXP 59
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PPUSH
21435: LD_INT 129
21437: PPUSH
21438: LD_INT 99
21440: PPUSH
21441: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
21445: LD_EXP 59
21449: PUSH
21450: LD_EXP 61
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: LD_EXP 64
21463: PPUSH
21464: CALL_OW 180
// end ;
21468: LD_VAR 0 1
21472: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
21473: LD_EXP 22
21477: IFFALSE 21749
21479: GO 21481
21481: DISABLE
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
21489: LD_ADDR_VAR 0 4
21493: PUSH
21494: LD_VAR 0 4
21498: PUSH
21499: LD_EXP 58
21503: ADD
21504: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
21505: LD_ADDR_VAR 0 4
21509: PUSH
21510: LD_VAR 0 4
21514: PUSH
21515: LD_EXP 76
21519: ADD
21520: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
21521: LD_ADDR_VAR 0 4
21525: PUSH
21526: LD_VAR 0 4
21530: PUSH
21531: LD_EXP 68
21535: ADD
21536: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
21537: LD_ADDR_VAR 0 5
21541: PUSH
21542: LD_INT 18
21544: PPUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 6
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 21
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 70
21573: PUSH
21574: LD_VAR 0 4
21578: DIFF
21579: ST_TO_ADDR
// pom = 6 ;
21580: LD_ADDR_VAR 0 3
21584: PUSH
21585: LD_INT 6
21587: ST_TO_ADDR
// if canTakeUnits then
21588: LD_VAR 0 5
21592: IFFALSE 21716
// for i = 1 to canTakeUnits do
21594: LD_ADDR_VAR 0 1
21598: PUSH
21599: DOUBLE
21600: LD_INT 1
21602: DEC
21603: ST_TO_ADDR
21604: LD_VAR 0 5
21608: PUSH
21609: FOR_TO
21610: IFFALSE 21714
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
21612: LD_VAR 0 5
21616: PUSH
21617: LD_VAR 0 1
21621: ARRAY
21622: PPUSH
21623: CALL_OW 257
21627: PUSH
21628: LD_INT 3
21630: NONEQUAL
21631: IFFALSE 21678
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21633: LD_VAR 0 5
21637: PUSH
21638: LD_VAR 0 1
21642: ARRAY
21643: PPUSH
21644: LD_EXP 21
21648: PPUSH
21649: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
21653: LD_VAR 0 5
21657: PUSH
21658: LD_VAR 0 1
21662: ARRAY
21663: PPUSH
21664: LD_INT 1
21666: PPUSH
21667: CALL_OW 183
// wait ( 0 0$1 ) ;
21671: LD_INT 35
21673: PPUSH
21674: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21678: LD_VAR 0 5
21682: PUSH
21683: LD_VAR 0 1
21687: ARRAY
21688: PPUSH
21689: LD_EXP 21
21693: PPUSH
21694: CALL_OW 120
// pom = pom - 1 ;
21698: LD_ADDR_VAR 0 3
21702: PUSH
21703: LD_VAR 0 3
21707: PUSH
21708: LD_INT 1
21710: MINUS
21711: ST_TO_ADDR
// end ;
21712: GO 21609
21714: POP
21715: POP
// if pom > 0 then
21716: LD_VAR 0 3
21720: PUSH
21721: LD_INT 0
21723: GREATER
21724: IFFALSE 21749
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
21726: LD_ADDR_EXP 78
21730: PUSH
21731: LD_EXP 78
21735: PPUSH
21736: LD_INT 3
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: CALL_OW 1
21748: ST_TO_ADDR
// end ;
21749: PPOPN 5
21751: END
// every 0 0$1 trigger kirovTransportCargo do
21752: LD_EXP 71
21756: IFFALSE 21805
21758: GO 21760
21760: DISABLE
// begin enable ;
21761: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
21762: LD_EXP 71
21766: PPUSH
21767: LD_EXP 65
21771: PPUSH
21772: LD_INT 2
21774: PPUSH
21775: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
21779: LD_EXP 71
21783: PPUSH
21784: LD_EXP 64
21788: PPUSH
21789: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
21793: LD_EXP 71
21797: PPUSH
21798: LD_INT 100
21800: PPUSH
21801: CALL_OW 240
// end ;
21805: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
21806: LD_INT 78
21808: PPUSH
21809: LD_INT 112
21811: PPUSH
21812: LD_INT 3
21814: PPUSH
21815: CALL_OW 440
21819: IFFALSE 21873
21821: GO 21823
21823: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
21824: LD_INT 78
21826: PPUSH
21827: LD_INT 112
21829: PPUSH
21830: CALL_OW 84
// DialogueOn ;
21834: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
21838: LD_EXP 46
21842: PPUSH
21843: LD_STRING D2a-Bur-1
21845: PPUSH
21846: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
21850: LD_EXP 58
21854: PPUSH
21855: LD_STRING D2a-Kur-1
21857: PPUSH
21858: CALL_OW 94
// DialogueOff ;
21862: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21866: LD_STRING M2
21868: PPUSH
21869: CALL_OW 337
// end ;
21873: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
21874: LD_EXP 10
21878: NOT
21879: IFFALSE 22071
21881: GO 21883
21883: DISABLE
21884: LD_INT 0
21886: PPUSH
// begin enable ;
21887: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: LD_INT 22
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 21
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 23
21915: PUSH
21916: LD_INT 3
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 31
21928: PUSH
21929: LD_INT 21
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 31
21938: PUSH
21939: LD_INT 23
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: PPUSH
21957: CALL_OW 69
21961: PUSH
21962: FOR_IN
21963: IFFALSE 22069
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
21965: LD_VAR 0 1
21969: PPUSH
21970: LD_INT 48
21972: PPUSH
21973: LD_INT 81
21975: PPUSH
21976: CALL_OW 297
21980: PUSH
21981: LD_INT 7
21983: LESS
21984: IFFALSE 22067
// begin dialog_track = true ;
21986: LD_ADDR_EXP 10
21990: PUSH
21991: LD_INT 1
21993: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
21994: LD_INT 48
21996: PPUSH
21997: LD_INT 81
21999: PPUSH
22000: CALL_OW 86
// DialogueOn ;
22004: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22008: LD_EXP 46
22012: PPUSH
22013: LD_STRING D5a-Bur-1
22015: PPUSH
22016: CALL_OW 88
// DialogueOff ;
22020: CALL_OW 7
// SetTech ( 82 , 3 , state_enabled ) ;
22024: LD_INT 82
22026: PPUSH
22027: LD_INT 3
22029: PPUSH
22030: LD_INT 1
22032: PPUSH
22033: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22037: LD_INT 84
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22050: LD_INT 16
22052: PPUSH
22053: LD_INT 3
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: CALL_OW 324
// exit ;
22063: POP
22064: POP
22065: GO 22071
// end ;
22067: GO 21962
22069: POP
22070: POP
// end ;
22071: PPOPN 1
22073: END
// every 5 5$30 do
22074: GO 22076
22076: DISABLE
// begin PrepareScholtze ;
22077: CALL 5274 0 0
// wait ( 0 0$2 ) ;
22081: LD_INT 70
22083: PPUSH
22084: CALL_OW 67
// DialogueOn ;
22088: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
22092: LD_EXP 52
22096: PPUSH
22097: LD_STRING D4-Sch-1
22099: PPUSH
22100: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
22104: LD_EXP 46
22108: PPUSH
22109: LD_STRING D4-Bur-1
22111: PPUSH
22112: CALL_OW 88
// DialogueOff ;
22116: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
22120: LD_STRING M4
22122: PPUSH
22123: CALL_OW 337
// ComHold ( Scholtze ) ;
22127: LD_EXP 52
22131: PPUSH
22132: CALL_OW 140
// scholtzeSpawned = true ;
22136: LD_ADDR_EXP 6
22140: PUSH
22141: LD_INT 1
22143: ST_TO_ADDR
// end ;
22144: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
22145: LD_INT 3
22147: PPUSH
22148: LD_EXP 52
22152: PPUSH
22153: CALL_OW 292
22157: PUSH
22158: LD_EXP 6
22162: AND
22163: PUSH
22164: LD_EXP 7
22168: NOT
22169: AND
22170: IFFALSE 22351
22172: GO 22174
22174: DISABLE
// begin scholtzeSaved = true ;
22175: LD_ADDR_EXP 7
22179: PUSH
22180: LD_INT 1
22182: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
22183: LD_EXP 52
22187: PPUSH
22188: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
22192: LD_EXP 52
22196: PPUSH
22197: LD_INT 3
22199: PPUSH
22200: CALL_OW 235
// DialogueOn ;
22204: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
22208: LD_EXP 52
22212: PPUSH
22213: LD_STRING D4a-Sch-1
22215: PPUSH
22216: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
22220: LD_EXP 46
22224: PPUSH
22225: LD_STRING D4a-Bur-1
22227: PPUSH
22228: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
22232: LD_EXP 52
22236: PPUSH
22237: LD_STRING D4a-Sch-2
22239: PPUSH
22240: CALL_OW 88
// DialogueOff ;
22244: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
22248: LD_EXP 82
22252: PPUSH
22253: LD_INT 28
22255: PPUSH
22256: LD_INT 36
22258: PPUSH
22259: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
22263: LD_STRING MScholtzeOut
22265: PPUSH
22266: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
22270: LD_INT 49
22272: PPUSH
22273: LD_INT 3
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
22283: LD_INT 51
22285: PPUSH
22286: LD_INT 3
22288: PPUSH
22289: LD_INT 1
22291: PPUSH
22292: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
22296: LD_INT 82
22298: PPUSH
22299: LD_INT 3
22301: PPUSH
22302: CALL_OW 321
22306: PUSH
22307: LD_INT 0
22309: EQUAL
22310: IFFALSE 22325
// SetTech ( 82 , 3 , state_enabled ) ;
22312: LD_INT 82
22314: PPUSH
22315: LD_INT 3
22317: PPUSH
22318: LD_INT 1
22320: PPUSH
22321: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
22325: LD_INT 83
22327: PPUSH
22328: LD_INT 3
22330: PPUSH
22331: LD_INT 1
22333: PPUSH
22334: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
22338: LD_INT 19
22340: PPUSH
22341: LD_INT 3
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 324
// end ;
22351: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
22352: LD_EXP 52
22356: PPUSH
22357: CALL_OW 305
22361: PUSH
22362: LD_EXP 7
22366: NOT
22367: AND
22368: IFFALSE 22377
22370: GO 22372
22372: DISABLE
// PrepareAmericanPatrol ;
22373: CALL 6178 0 0
22377: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
22378: LD_EXP 52
22382: PPUSH
22383: CALL_OW 305
22387: PUSH
22388: LD_EXP 52
22392: PPUSH
22393: CALL_OW 255
22397: PUSH
22398: LD_INT 8
22400: EQUAL
22401: AND
22402: PUSH
22403: LD_EXP 45
22407: PUSH
22408: LD_INT 35
22410: GREATER
22411: AND
22412: IFFALSE 22588
22414: GO 22416
22416: DISABLE
22417: LD_INT 0
22419: PPUSH
22420: PPUSH
// begin enable ;
22421: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
22422: LD_ADDR_EXP 45
22426: PUSH
22427: LD_EXP 45
22431: PUSH
22432: LD_INT 35
22434: MINUS
22435: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
22436: LD_ADDR_VAR 0 1
22440: PUSH
22441: LD_INT 22
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 25
22453: PUSH
22454: LD_INT 12
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: PUSH
22470: FOR_IN
22471: IFFALSE 22510
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22473: LD_VAR 0 1
22477: PPUSH
22478: LD_EXP 52
22482: PPUSH
22483: CALL_OW 250
22487: PPUSH
22488: LD_EXP 52
22492: PPUSH
22493: CALL_OW 251
22497: PPUSH
22498: LD_INT 12
22500: PPUSH
22501: LD_INT 0
22503: PPUSH
22504: CALL 9826 0 5
22508: GO 22470
22510: POP
22511: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
22512: LD_ADDR_VAR 0 2
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_INT 0
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 25
22529: PUSH
22530: LD_INT 14
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 69
22545: PUSH
22546: FOR_IN
22547: IFFALSE 22586
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22549: LD_VAR 0 2
22553: PPUSH
22554: LD_EXP 52
22558: PPUSH
22559: CALL_OW 250
22563: PPUSH
22564: LD_EXP 52
22568: PPUSH
22569: CALL_OW 251
22573: PPUSH
22574: LD_INT 12
22576: PPUSH
22577: LD_INT 0
22579: PPUSH
22580: CALL 9826 0 5
22584: GO 22546
22586: POP
22587: POP
// end ;
22588: PPOPN 2
22590: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
22591: LD_INT 1
22593: PPUSH
22594: LD_EXP 52
22598: PPUSH
22599: CALL_OW 292
22603: PUSH
22604: LD_EXP 82
22608: AND
22609: PUSH
22610: LD_EXP 7
22614: NOT
22615: AND
22616: IFFALSE 22770
22618: GO 22620
22620: DISABLE
// begin enable ;
22621: ENABLE
// if not IsPlaced ( Scholtze ) then
22622: LD_EXP 52
22626: PPUSH
22627: CALL_OW 305
22631: NOT
22632: IFFALSE 22636
// exit ;
22634: GO 22770
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
22636: LD_EXP 82
22640: PUSH
22641: LD_INT 1
22643: ARRAY
22644: PPUSH
22645: CALL_OW 320
22649: PUSH
22650: LD_EXP 52
22654: EQUAL
22655: PUSH
22656: LD_EXP 82
22660: PUSH
22661: LD_INT 2
22663: ARRAY
22664: PPUSH
22665: CALL_OW 320
22669: PUSH
22670: LD_EXP 52
22674: EQUAL
22675: OR
22676: IFFALSE 22770
// begin DialogueOn ;
22678: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
22682: LD_EXP 52
22686: PPUSH
22687: LD_STRING D4b-Sch-1
22689: PPUSH
22690: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
22694: LD_EXP 82
22698: PUSH
22699: LD_INT 2
22701: ARRAY
22702: PPUSH
22703: LD_STRING D4b-Sol1-1
22705: PPUSH
22706: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
22710: LD_EXP 82
22714: PUSH
22715: LD_INT 1
22717: ARRAY
22718: PPUSH
22719: LD_STRING D4b-Sol2-1
22721: PPUSH
22722: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
22726: LD_EXP 52
22730: PPUSH
22731: LD_STRING D4b-Sch-2
22733: PPUSH
22734: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
22738: LD_EXP 46
22742: PPUSH
22743: LD_STRING D4b-Bur-2
22745: PPUSH
22746: CALL_OW 88
// DialogueOff ;
22750: CALL_OW 7
// Killunit ( Scholtze ) ;
22754: LD_EXP 52
22758: PPUSH
22759: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
22763: LD_STRING MScholtzeDel
22765: PPUSH
22766: CALL_OW 337
// end ; end ;
22770: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
22771: LD_INT 0
22773: PPUSH
22774: PPUSH
22775: PPUSH
// dialog_workshop = true ;
22776: LD_ADDR_EXP 8
22780: PUSH
22781: LD_INT 1
22783: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
22784: LD_INT 22
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 30
22796: PUSH
22797: LD_INT 26
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PPUSH
22808: CALL_OW 69
22812: NOT
22813: IFFALSE 23202
// begin CenterNowOnUnits ( building ) ;
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 87
// DialogueOn ;
22824: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
22828: LD_EXP 46
22832: PPUSH
22833: LD_STRING D3aa-Bur-1
22835: PPUSH
22836: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
22840: LD_EXP 52
22844: PPUSH
22845: CALL_OW 302
22849: PUSH
22850: LD_EXP 52
22854: PPUSH
22855: CALL_OW 255
22859: PUSH
22860: LD_INT 3
22862: EQUAL
22863: AND
22864: IFFALSE 22880
// Say ( Scholtze , D3aa-Sch-1 ) else
22866: LD_EXP 52
22870: PPUSH
22871: LD_STRING D3aa-Sch-1
22873: PPUSH
22874: CALL_OW 88
22878: GO 23186
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
22880: LD_ADDR_VAR 0 3
22884: PUSH
22885: LD_INT 22
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 4
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 50
22927: PUSH
22928: EMPTY
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: PUSH
22943: LD_EXP 46
22947: PUSH
22948: LD_EXP 47
22952: PUSH
22953: LD_EXP 49
22957: PUSH
22958: LD_EXP 50
22962: PUSH
22963: LD_EXP 51
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: DIFF
22975: ST_TO_ADDR
// if maleSci then
22976: LD_VAR 0 3
22980: IFFALSE 23000
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
22982: LD_VAR 0 3
22986: PUSH
22987: LD_INT 1
22989: ARRAY
22990: PPUSH
22991: LD_STRING D3aa-Sci1-1
22993: PPUSH
22994: CALL_OW 88
22998: GO 23186
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23000: LD_ADDR_VAR 0 4
23004: PUSH
23005: LD_INT 22
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 21
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 26
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 50
23037: PUSH
23038: EMPTY
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 69
23051: PUSH
23052: LD_EXP 46
23056: PUSH
23057: LD_EXP 47
23061: PUSH
23062: LD_EXP 49
23066: PUSH
23067: LD_EXP 50
23071: PUSH
23072: LD_EXP 51
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: DIFF
23084: ST_TO_ADDR
// if maleOthers then
23085: LD_VAR 0 4
23089: IFFALSE 23109
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
23091: LD_VAR 0 4
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: LD_STRING D3aa-Sci1-1
23102: PPUSH
23103: CALL_OW 88
23107: GO 23186
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23109: LD_ADDR_VAR 0 4
23113: PUSH
23114: LD_INT 22
23116: PUSH
23117: LD_INT 3
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 21
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 26
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 50
23146: PUSH
23147: EMPTY
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: PPUSH
23156: CALL_OW 69
23160: PUSH
23161: LD_EXP 46
23165: PUSH
23166: EMPTY
23167: LIST
23168: DIFF
23169: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
23170: LD_VAR 0 4
23174: PUSH
23175: LD_INT 1
23177: ARRAY
23178: PPUSH
23179: LD_STRING D3aa-Sci1-1
23181: PPUSH
23182: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
23186: LD_EXP 46
23190: PPUSH
23191: LD_STRING D3aa-Bur-2
23193: PPUSH
23194: CALL_OW 88
// DialogueOff ;
23198: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
23202: LD_STRING M3
23204: PPUSH
23205: CALL_OW 337
// end ;
23209: LD_VAR 0 2
23213: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
23214: LD_EXP 9
23218: NOT
23219: IFFALSE 23554
23221: GO 23223
23223: DISABLE
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
// begin enable ;
23228: ENABLE
// for amUnit in amSupportTroops do
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: LD_EXP 81
23238: PUSH
23239: FOR_IN
23240: IFFALSE 23552
// begin if See ( 3 , amUnit ) then
23242: LD_INT 3
23244: PPUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 292
23254: IFFALSE 23550
// begin dialog_amSupportTroops = true ;
23256: LD_ADDR_EXP 9
23260: PUSH
23261: LD_INT 1
23263: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 87
// DialogueOn ;
23273: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 22
23284: PUSH
23285: LD_INT 3
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 21
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 26
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 50
23314: PUSH
23315: EMPTY
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 69
23328: PUSH
23329: LD_EXP 46
23333: PUSH
23334: LD_EXP 47
23338: PUSH
23339: LD_EXP 49
23343: PUSH
23344: LD_EXP 50
23348: PUSH
23349: LD_EXP 51
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: DIFF
23361: ST_TO_ADDR
// if randomMale then
23362: LD_VAR 0 2
23366: IFFALSE 23430
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false ) else
23368: LD_INT 22
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 26
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 50
23400: PUSH
23401: EMPTY
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: PPUSH
23415: LD_STRING D3b-RSol1-1
23417: PPUSH
23418: LD_STRING 
23420: PPUSH
23421: LD_INT 0
23423: PPUSH
23424: CALL 6861 0 4
23428: GO 23507
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 3
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 21
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 26
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 50
23467: PUSH
23468: EMPTY
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PPUSH
23477: CALL_OW 69
23481: PUSH
23482: LD_EXP 46
23486: PUSH
23487: EMPTY
23488: LIST
23489: DIFF
23490: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
23491: LD_VAR 0 2
23495: PUSH
23496: LD_INT 1
23498: ARRAY
23499: PPUSH
23500: LD_STRING D3b-RSol1-1
23502: PPUSH
23503: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
23507: LD_EXP 47
23511: PPUSH
23512: CALL_OW 302
23516: IFFALSE 23530
// Say ( Gnyevko , D3b-Gny-1 ) ;
23518: LD_EXP 47
23522: PPUSH
23523: LD_STRING D3b-Gny-1
23525: PPUSH
23526: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
23530: LD_EXP 46
23534: PPUSH
23535: LD_STRING D3b-Bur-1
23537: PPUSH
23538: CALL_OW 88
// DialogueOff ;
23542: CALL_OW 7
// exit ;
23546: POP
23547: POP
23548: GO 23554
// end ; end ;
23550: GO 23239
23552: POP
23553: POP
// end ;
23554: PPOPN 2
23556: END
// every 2 2$0 trigger dialog_amSupportTroops do
23557: LD_EXP 9
23561: IFFALSE 23642
23563: GO 23565
23565: DISABLE
// begin if IsOK ( Kovalyuk ) then
23566: LD_EXP 49
23570: PPUSH
23571: CALL_OW 302
23575: IFFALSE 23589
// Say ( Kovalyuk , D3b-Kov-1 ) ;
23577: LD_EXP 49
23581: PPUSH
23582: LD_STRING D3b-Kov-1
23584: PPUSH
23585: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
23589: LD_INT 22
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 26
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PPUSH
23629: LD_STRING D3b-RSol1-2
23631: PPUSH
23632: LD_STRING 
23634: PPUSH
23635: LD_INT 0
23637: PPUSH
23638: CALL 6861 0 4
// end ;
23642: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
23643: LD_EXP 38
23647: PUSH
23648: LD_INT 35
23650: LESS
23651: IFFALSE 23879
23653: GO 23655
23655: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
23656: LD_EXP 58
23660: PPUSH
23661: CALL_OW 87
// InGameOn ;
23665: CALL_OW 8
// DialogueOn ;
23669: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
23673: LD_EXP 58
23677: PPUSH
23678: LD_STRING D5-Kur-1
23680: PPUSH
23681: CALL_OW 94
// case Query ( QVehicles ) of 1 :
23685: LD_STRING QVehicles
23687: PPUSH
23688: CALL_OW 97
23692: PUSH
23693: LD_INT 1
23695: DOUBLE
23696: EQUAL
23697: IFTRUE 23701
23699: GO 23744
23701: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
23702: LD_EXP 46
23706: PPUSH
23707: LD_STRING D6a-Bur-1
23709: PPUSH
23710: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
23714: LD_EXP 58
23718: PPUSH
23719: LD_STRING D6a-Kur-1
23721: PPUSH
23722: CALL_OW 94
// meetNearOmicronBase = true ;
23726: LD_ADDR_EXP 19
23730: PUSH
23731: LD_INT 1
23733: ST_TO_ADDR
// kurinCheckVehicles = true ;
23734: LD_ADDR_EXP 18
23738: PUSH
23739: LD_INT 1
23741: ST_TO_ADDR
// end ; 2 :
23742: GO 23871
23744: LD_INT 2
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23799
23752: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
23753: LD_EXP 46
23757: PPUSH
23758: LD_STRING D6b-Bur-1
23760: PPUSH
23761: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
23765: LD_EXP 58
23769: PPUSH
23770: LD_STRING D6b-Kur-1
23772: PPUSH
23773: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
23777: LD_EXP 46
23781: PPUSH
23782: LD_STRING D6b-Bur-2
23784: PPUSH
23785: CALL_OW 88
// meetNearOmicronBase = true ;
23789: LD_ADDR_EXP 19
23793: PUSH
23794: LD_INT 1
23796: ST_TO_ADDR
// end ; 3 :
23797: GO 23871
23799: LD_INT 3
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 23870
23807: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
23808: LD_EXP 46
23812: PPUSH
23813: LD_STRING D6c-Bur-1
23815: PPUSH
23816: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
23820: LD_EXP 58
23824: PPUSH
23825: LD_STRING D6c-Kur-1
23827: PPUSH
23828: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
23832: LD_EXP 46
23836: PPUSH
23837: LD_STRING D6c-Bur-2
23839: PPUSH
23840: CALL_OW 88
// kurinGiveMoreTime = true ;
23844: LD_ADDR_EXP 13
23848: PUSH
23849: LD_INT 1
23851: ST_TO_ADDR
// kurinOpinion = 0 ;
23852: LD_ADDR_EXP 26
23856: PUSH
23857: LD_INT 0
23859: ST_TO_ADDR
// counterIndex = 4 ;
23860: LD_ADDR_EXP 87
23864: PUSH
23865: LD_INT 4
23867: ST_TO_ADDR
// end ; end ;
23868: GO 23871
23870: POP
// InGameOff ;
23871: CALL_OW 9
// DialogueOff ;
23875: CALL_OW 7
// end ;
23879: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
23880: LD_EXP 14
23884: PUSH
23885: LD_INT 35
23887: LESS
23888: PUSH
23889: LD_EXP 13
23893: AND
23894: IFFALSE 23927
23896: GO 23898
23898: DISABLE
// begin DialogueOn ;
23899: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
23903: LD_EXP 58
23907: PPUSH
23908: LD_STRING D6c-Kur-2
23910: PPUSH
23911: CALL_OW 94
// DialogueOff ;
23915: CALL_OW 7
// meetNearOmicronBase = true ;
23919: LD_ADDR_EXP 19
23923: PUSH
23924: LD_INT 1
23926: ST_TO_ADDR
// end ;
23927: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
23928: LD_EXP 19
23932: IFFALSE 24533
23934: GO 23936
23936: DISABLE
23937: LD_INT 0
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
23943: PPUSH
// begin mechs = [ ] ;
23944: LD_ADDR_VAR 0 3
23948: PUSH
23949: EMPTY
23950: ST_TO_ADDR
// vehs = [ ] ;
23951: LD_ADDR_VAR 0 4
23955: PUSH
23956: EMPTY
23957: ST_TO_ADDR
// haveVehs = 0 ;
23958: LD_ADDR_VAR 0 5
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
// uc_side = 6 ;
23966: LD_ADDR_OWVAR 20
23970: PUSH
23971: LD_INT 6
23973: ST_TO_ADDR
// uc_nation = 3 ;
23974: LD_ADDR_OWVAR 21
23978: PUSH
23979: LD_INT 3
23981: ST_TO_ADDR
// for i := 1 to 2 do
23982: LD_ADDR_VAR 0 1
23986: PUSH
23987: DOUBLE
23988: LD_INT 1
23990: DEC
23991: ST_TO_ADDR
23992: LD_INT 2
23994: PUSH
23995: FOR_TO
23996: IFFALSE 24095
// begin PrepareMechanic ( false , 2 ) ;
23998: LD_INT 0
24000: PPUSH
24001: LD_INT 2
24003: PPUSH
24004: CALL_OW 383
// mech = CreateHuman ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: CALL_OW 44
24017: ST_TO_ADDR
// mechs = mechs ^ mech ;
24018: LD_ADDR_VAR 0 3
24022: PUSH
24023: LD_VAR 0 3
24027: PUSH
24028: LD_VAR 0 2
24032: ADD
24033: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24034: LD_VAR 0 2
24038: PPUSH
24039: LD_EXP 64
24043: PPUSH
24044: CALL_OW 52
// ComExitBuilding ( mech ) ;
24048: LD_VAR 0 2
24052: PPUSH
24053: CALL_OW 122
// wait ( 0 0$1 ) ;
24057: LD_INT 35
24059: PPUSH
24060: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
24064: LD_VAR 0 2
24068: PPUSH
24069: LD_EXP 57
24073: PPUSH
24074: CALL_OW 250
24078: PPUSH
24079: LD_EXP 57
24083: PPUSH
24084: CALL_OW 251
24088: PPUSH
24089: CALL_OW 171
// end ;
24093: GO 23995
24095: POP
24096: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
24097: LD_INT 22
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 21
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 23
24119: PUSH
24120: LD_INT 3
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_INT 3
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 21
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 69
24165: EQUAL
24166: IFFALSE 24176
// produceOnlyForYou = true ;
24168: LD_ADDR_EXP 17
24172: PUSH
24173: LD_INT 1
24175: ST_TO_ADDR
// wait ( 0 0$20 ) ;
24176: LD_INT 700
24178: PPUSH
24179: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
24183: LD_INT 22
24185: PUSH
24186: LD_INT 3
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 23
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: PPUSH
24218: CALL_OW 69
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_INT 3
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 21
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: PUSH
24252: LD_INT 2
24254: PLUS
24255: GREATEREQUAL
24256: IFFALSE 24503
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
24258: LD_ADDR_VAR 0 4
24262: PUSH
24263: LD_VAR 0 4
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 21
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 23
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: LD_INT 59
24303: PUSH
24304: EMPTY
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: PPUSH
24317: CALL_OW 69
24321: PUSH
24322: LD_INT 1
24324: ARRAY
24325: ADD
24326: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_VAR 0 4
24336: PUSH
24337: LD_INT 22
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 21
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 23
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: LD_INT 59
24372: PUSH
24373: EMPTY
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: PPUSH
24386: CALL_OW 69
24390: PUSH
24391: LD_INT 2
24393: ARRAY
24394: ADD
24395: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
24396: LD_ADDR_EXP 73
24400: PUSH
24401: LD_EXP 73
24405: PUSH
24406: LD_VAR 0 4
24410: ADD
24411: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
24412: LD_VAR 0 4
24416: PPUSH
24417: LD_INT 6
24419: PPUSH
24420: CALL_OW 235
// produceMoreVehicles = true ;
24424: LD_ADDR_EXP 16
24428: PUSH
24429: LD_INT 1
24431: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
24432: LD_VAR 0 3
24436: PUSH
24437: LD_INT 1
24439: ARRAY
24440: PPUSH
24441: LD_VAR 0 4
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 2
24461: ARRAY
24462: PPUSH
24463: LD_VAR 0 4
24467: PUSH
24468: LD_INT 2
24470: ARRAY
24471: PPUSH
24472: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
24476: LD_EXP 18
24480: PUSH
24481: LD_EXP 26
24485: PUSH
24486: LD_INT 0
24488: EQUAL
24489: NOT
24490: AND
24491: IFFALSE 24501
// kurinOpinion = 1 ;
24493: LD_ADDR_EXP 26
24497: PUSH
24498: LD_INT 1
24500: ST_TO_ADDR
// end else
24501: GO 24533
// begin if kurinCheckVehicles then
24503: LD_EXP 18
24507: IFFALSE 24533
// begin DialogueOn ;
24509: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
24513: LD_EXP 58
24517: PPUSH
24518: LD_STRING D6d-Kur-1
24520: PPUSH
24521: CALL_OW 94
// DialogueOff ;
24525: CALL_OW 7
// Lose_Vehicles ;
24529: CALL 18665 0 0
// end ; end ; end ;
24533: PPOPN 5
24535: END
// every 0 0$1 trigger meetNearOmicronBase do
24536: LD_EXP 19
24540: IFFALSE 24760
24542: GO 24544
24544: DISABLE
// begin spawnCrates = false ;
24545: LD_ADDR_EXP 5
24549: PUSH
24550: LD_INT 0
24552: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
24553: LD_INT 6
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: LD_INT 2
24561: PPUSH
24562: LD_INT 1
24564: PPUSH
24565: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
24569: LD_INT 0
24571: PPUSH
24572: LD_INT 3
24574: PPUSH
24575: LD_INT 0
24577: PPUSH
24578: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
24582: LD_STRING M3a
24584: PPUSH
24585: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
24589: LD_STRING M5
24591: PPUSH
24592: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
24596: LD_INT 15
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
24606: LD_EXP 73
24610: PPUSH
24611: LD_INT 75
24613: PPUSH
24614: LD_INT 38
24616: PPUSH
24617: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
24621: LD_EXP 72
24625: PPUSH
24626: LD_INT 75
24628: PPUSH
24629: LD_INT 38
24631: PPUSH
24632: CALL_OW 111
// counterIndex = 2 ;
24636: LD_ADDR_EXP 87
24640: PUSH
24641: LD_INT 2
24643: ST_TO_ADDR
// if not kurinOpinion = 0 then
24644: LD_EXP 26
24648: PUSH
24649: LD_INT 0
24651: EQUAL
24652: NOT
24653: IFFALSE 24663
// kurinOpinion = 1 ;
24655: LD_ADDR_EXP 26
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
24663: LD_INT 1
24665: PPUSH
24666: LD_INT 1
24668: PPUSH
24669: LD_INT 22
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 21
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 69
24697: PPUSH
24698: LD_INT 13
24700: PPUSH
24701: LD_INT 28
24703: PPUSH
24704: LD_INT 17
24706: PPUSH
24707: LD_INT 29
24709: PPUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: LD_INT 4
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: PUSH
24724: LD_OWVAR 67
24728: ARRAY
24729: PPUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: PUSH
24744: LD_OWVAR 67
24748: ARRAY
24749: PPUSH
24750: LD_INT 0
24752: PPUSH
24753: LD_INT 0
24755: PPUSH
24756: CALL 11706 0 11
// end ;
24760: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
24761: LD_EXP 15
24765: PUSH
24766: LD_INT 35
24768: LESS
24769: PUSH
24770: LD_EXP 87
24774: PUSH
24775: LD_INT 2
24777: EQUAL
24778: AND
24779: IFFALSE 24828
24781: GO 24783
24783: DISABLE
// begin DialogueOn ;
24784: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
24788: LD_EXP 58
24792: PPUSH
24793: LD_STRING D7a-Kur-1
24795: PPUSH
24796: CALL_OW 94
// DialogueOff ;
24800: CALL_OW 7
// counterIndex = 3 ;
24804: LD_ADDR_EXP 87
24808: PUSH
24809: LD_INT 3
24811: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
24812: LD_ADDR_EXP 15
24816: PUSH
24817: LD_INT 4200
24819: ST_TO_ADDR
// kurinOpinion = 0 ;
24820: LD_ADDR_EXP 26
24824: PUSH
24825: LD_INT 0
24827: ST_TO_ADDR
// end ;
24828: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
24829: LD_EXP 15
24833: PUSH
24834: LD_INT 35
24836: LESS
24837: PUSH
24838: LD_EXP 87
24842: PUSH
24843: LD_INT 3
24845: EQUAL
24846: AND
24847: IFFALSE 24856
24849: GO 24851
24851: DISABLE
// Lose_Delay ;
24852: CALL 18695 0 0
24856: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
24857: LD_EXP 19
24861: PUSH
24862: LD_INT 15
24864: PPUSH
24865: LD_INT 22
24867: PUSH
24868: LD_INT 3
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 21
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PPUSH
24889: CALL_OW 71
24893: PUSH
24894: LD_INT 0
24896: EQUAL
24897: AND
24898: IFFALSE 24986
24900: GO 24902
24902: DISABLE
// begin counterEnable = false ;
24903: LD_ADDR_EXP 86
24907: PUSH
24908: LD_INT 0
24910: ST_TO_ADDR
// Display_strings = [ ] ;
24911: LD_ADDR_OWVAR 47
24915: PUSH
24916: EMPTY
24917: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
24918: LD_INT 15
24920: PPUSH
24921: LD_INT 0
24923: PPUSH
24924: CALL_OW 424
// canExitBattlefield = false ;
24928: LD_ADDR_EXP 24
24932: PUSH
24933: LD_INT 0
24935: ST_TO_ADDR
// DialogueOn ;
24936: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
24940: LD_EXP 46
24944: PPUSH
24945: LD_STRING D7-Bur-1
24947: PPUSH
24948: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
24952: LD_EXP 58
24956: PPUSH
24957: LD_STRING D7-Kur-1
24959: PPUSH
24960: CALL_OW 94
// DialogueOff ;
24964: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24968: LD_STRING M5a
24970: PPUSH
24971: CALL_OW 337
// Query ( QRefuel ) ;
24975: LD_STRING QRefuel
24977: PPUSH
24978: CALL_OW 97
// KirovAttackOmicron ;
24982: CALL 17244 0 0
// end ;
24986: END
// every 0 0$1 trigger not canExitBattlefield do var unit ;
24987: LD_EXP 24
24991: NOT
24992: IFFALSE 25160
24994: GO 24996
24996: DISABLE
24997: LD_INT 0
24999: PPUSH
// begin enable ;
25000: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25001: LD_ADDR_VAR 0 1
25005: PUSH
25006: LD_INT 22
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: PUSH
25053: FOR_IN
25054: IFFALSE 25158
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_INT 26
25063: PPUSH
25064: CALL_OW 308
25068: NOT
25069: PUSH
25070: LD_VAR 0 1
25074: PPUSH
25075: LD_INT 59
25077: PUSH
25078: EMPTY
25079: LIST
25080: PUSH
25081: LD_INT 21
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PPUSH
25095: CALL_OW 72
25099: AND
25100: IFFALSE 25156
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
25102: LD_VAR 0 1
25106: PPUSH
25107: LD_INT 26
25109: PPUSH
25110: CALL_OW 113
// if not dialog_stop then
25114: LD_EXP 11
25118: NOT
25119: IFFALSE 25156
// begin dialog_stop = true ;
25121: LD_ADDR_EXP 11
25125: PUSH
25126: LD_INT 1
25128: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25129: LD_EXP 58
25133: PPUSH
25134: LD_STRING D12-Kur-1
25136: PPUSH
25137: CALL_OW 88
// wait ( 0 0$5 ) ;
25141: LD_INT 175
25143: PPUSH
25144: CALL_OW 67
// dialog_stop = false ;
25148: LD_ADDR_EXP 11
25152: PUSH
25153: LD_INT 0
25155: ST_TO_ADDR
// end ; end ;
25156: GO 25053
25158: POP
25159: POP
// end ;
25160: PPOPN 1
25162: END
// every 0 0$1 do var unit ;
25163: GO 25165
25165: DISABLE
25166: LD_INT 0
25168: PPUSH
// begin enable ;
25169: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25170: LD_ADDR_VAR 0 1
25174: PUSH
25175: LD_INT 22
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 21
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 21
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PPUSH
25217: CALL_OW 69
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25298
// if IsInArea ( unit , SecondKurinBase ) then
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_INT 20
25232: PPUSH
25233: CALL_OW 308
25237: IFFALSE 25296
// begin ComMoveXY ( unit , 200 , 114 ) ;
25239: LD_VAR 0 1
25243: PPUSH
25244: LD_INT 200
25246: PPUSH
25247: LD_INT 114
25249: PPUSH
25250: CALL_OW 111
// if not dialog_stop then
25254: LD_EXP 11
25258: NOT
25259: IFFALSE 25296
// begin dialog_stop = true ;
25261: LD_ADDR_EXP 11
25265: PUSH
25266: LD_INT 1
25268: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25269: LD_EXP 58
25273: PPUSH
25274: LD_STRING D12-Kur-1
25276: PPUSH
25277: CALL_OW 88
// wait ( 0 0$5 ) ;
25281: LD_INT 175
25283: PPUSH
25284: CALL_OW 67
// dialog_stop = false ;
25288: LD_ADDR_EXP 11
25292: PUSH
25293: LD_INT 0
25295: ST_TO_ADDR
// end ; end ;
25296: GO 25222
25298: POP
25299: POP
// end ;
25300: PPOPN 1
25302: END
// every 0 0$1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
25303: LD_EXP 19
25307: NOT
25308: PUSH
25309: LD_INT 290
25311: PPUSH
25312: CALL_OW 302
25316: AND
25317: IFFALSE 25633
25319: GO 25321
25321: DISABLE
25322: LD_INT 0
25324: PPUSH
25325: PPUSH
// begin enable ;
25326: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
25327: LD_ADDR_VAR 0 1
25331: PUSH
25332: LD_INT 13
25334: PPUSH
25335: LD_INT 22
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 21
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 21
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PPUSH
25388: CALL_OW 70
25392: PUSH
25393: FOR_IN
25394: IFFALSE 25631
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
25396: LD_VAR 0 1
25400: PPUSH
25401: LD_INT 22
25403: PUSH
25404: LD_INT 3
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: LD_INT 21
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 21
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PPUSH
25443: CALL_OW 69
25447: PPUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 74
25457: PPUSH
25458: CALL_OW 296
25462: PUSH
25463: LD_INT 17
25465: LESS
25466: IFFALSE 25629
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
25468: LD_INT 22
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 21
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 21
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: PPUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 74
25524: PPUSH
25525: LD_INT 69
25527: PPUSH
25528: LD_INT 85
25530: PPUSH
25531: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_INT 1
25542: PPUSH
25543: LD_INT 2
25545: PPUSH
25546: CALL_OW 12
25550: ST_TO_ADDR
// if not dialog_stop then
25551: LD_EXP 11
25555: NOT
25556: IFFALSE 25629
// begin dialog_stop = true ;
25558: LD_ADDR_EXP 11
25562: PUSH
25563: LD_INT 1
25565: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
25566: LD_VAR 0 2
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: PUSH
25575: LD_EXP 47
25579: PPUSH
25580: CALL_OW 302
25584: NOT
25585: OR
25586: IFFALSE 25602
// SayRadio ( Kurin , D11-Kur-1 ) else
25588: LD_EXP 58
25592: PPUSH
25593: LD_STRING D11-Kur-1
25595: PPUSH
25596: CALL_OW 94
25600: GO 25614
// Say ( Gnyevko , D11-Gny-1 ) ;
25602: LD_EXP 47
25606: PPUSH
25607: LD_STRING D11-Gny-1
25609: PPUSH
25610: CALL_OW 88
// wait ( 0 0$5 ) ;
25614: LD_INT 175
25616: PPUSH
25617: CALL_OW 67
// dialog_stop = false ;
25621: LD_ADDR_EXP 11
25625: PUSH
25626: LD_INT 0
25628: ST_TO_ADDR
// end ; end ;
25629: GO 25393
25631: POP
25632: POP
// end ;
25633: PPOPN 2
25635: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var tmpUs , tmpRu , building ;
25636: LD_INT 290
25638: PPUSH
25639: CALL_OW 301
25643: PUSH
25644: LD_INT 22
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 21
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: PUSH
25673: LD_INT 5
25675: LESS
25676: AND
25677: IFFALSE 27081
25679: GO 25681
25681: DISABLE
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
25686: PPUSH
// begin omicronSurrender = true ;
25687: LD_ADDR_EXP 23
25691: PUSH
25692: LD_INT 1
25694: ST_TO_ADDR
// canExitBattlefield = true ;
25695: LD_ADDR_EXP 24
25699: PUSH
25700: LD_INT 1
25702: ST_TO_ADDR
// enableOmicronAI = false ;
25703: LD_ADDR_EXP 29
25707: PUSH
25708: LD_INT 0
25710: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
25711: LD_INT 1
25713: PPUSH
25714: LD_INT 3
25716: PPUSH
25717: LD_INT 1
25719: PPUSH
25720: LD_INT 0
25722: PPUSH
25723: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
25727: LD_INT 2
25729: PPUSH
25730: LD_INT 3
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: LD_INT 1
25738: PPUSH
25739: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
25743: LD_EXP 46
25747: PPUSH
25748: CALL_OW 87
// uc_side = 1 ;
25752: LD_ADDR_OWVAR 20
25756: PUSH
25757: LD_INT 1
25759: ST_TO_ADDR
// uc_nation = 1 ;
25760: LD_ADDR_OWVAR 21
25764: PUSH
25765: LD_INT 1
25767: ST_TO_ADDR
// hc_name :=  ;
25768: LD_ADDR_OWVAR 26
25772: PUSH
25773: LD_STRING 
25775: ST_TO_ADDR
// hc_gallery =  ;
25776: LD_ADDR_OWVAR 33
25780: PUSH
25781: LD_STRING 
25783: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
25784: LD_INT 1
25786: PPUSH
25787: LD_INT 1
25789: PPUSH
25790: CALL_OW 381
// tmpUs = CreateHuman ;
25794: LD_ADDR_VAR 0 1
25798: PUSH
25799: CALL_OW 44
25803: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
25804: LD_INT 22
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PPUSH
25819: CALL_OW 141
// InGameOn ;
25823: CALL_OW 8
// DialogueOn ;
25827: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
25831: LD_INT 26
25833: PPUSH
25834: LD_INT 33
25836: PPUSH
25837: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
25841: LD_VAR 0 1
25845: PPUSH
25846: LD_STRING D8-Sol1-1
25848: PPUSH
25849: CALL_OW 94
// if IsOk ( Kovalyuk ) then
25853: LD_EXP 49
25857: PPUSH
25858: CALL_OW 302
25862: IFFALSE 25876
// Say ( Kovalyuk , D8-Kov-1 ) ;
25864: LD_EXP 49
25868: PPUSH
25869: LD_STRING D8-Kov-1
25871: PPUSH
25872: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
25876: LD_ADDR_VAR 0 2
25880: PUSH
25881: LD_INT 22
25883: PUSH
25884: LD_INT 3
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 21
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 26
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: PPUSH
25916: CALL_OW 69
25920: PPUSH
25921: LD_STRING D8-RSol1-1
25923: PPUSH
25924: LD_STRING 
25926: PPUSH
25927: LD_INT 0
25929: PPUSH
25930: CALL 6861 0 4
25934: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
25935: LD_EXP 47
25939: PPUSH
25940: CALL_OW 302
25944: IFFALSE 25958
// Say ( Gnyevko , D8-Gny-1 ) ;
25946: LD_EXP 47
25950: PPUSH
25951: LD_STRING D8-Gny-1
25953: PPUSH
25954: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
25958: LD_INT 22
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 21
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 26
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 69
25997: PUSH
25998: LD_VAR 0 2
26002: DIFF
26003: PPUSH
26004: LD_STRING D8-RSol2-1
26006: PPUSH
26007: LD_STRING 
26009: PPUSH
26010: LD_INT 0
26012: PPUSH
26013: CALL 6861 0 4
// DialogueOff ;
26017: CALL_OW 7
// PrepareArabian ;
26021: CALL 6336 0 0
// CenterNowOnXY ( 234 , 122 ) ;
26025: LD_INT 234
26027: PPUSH
26028: LD_INT 122
26030: PPUSH
26031: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
26035: LD_EXP 84
26039: PPUSH
26040: LD_INT 221
26042: PPUSH
26043: LD_INT 110
26045: PPUSH
26046: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26050: LD_EXP 85
26054: PPUSH
26055: LD_INT 21
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PPUSH
26065: CALL_OW 72
26069: PPUSH
26070: LD_INT 221
26072: PPUSH
26073: LD_INT 110
26075: PPUSH
26076: CALL_OW 114
// wait ( 0 0$7 ) ;
26080: LD_INT 245
26082: PPUSH
26083: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
26087: LD_EXP 85
26091: PPUSH
26092: LD_INT 221
26094: PPUSH
26095: LD_INT 110
26097: PPUSH
26098: CALL_OW 174
// wait ( 0 0$8 ) ;
26102: LD_INT 280
26104: PPUSH
26105: CALL_OW 67
// music_nat = nation_arabian ;
26109: LD_ADDR_OWVAR 71
26113: PUSH
26114: LD_INT 2
26116: ST_TO_ADDR
// music_class = music_combat ;
26117: LD_ADDR_OWVAR 72
26121: PUSH
26122: LD_INT 1
26124: ST_TO_ADDR
// game_speed = 4 ;
26125: LD_ADDR_OWVAR 65
26129: PUSH
26130: LD_INT 4
26132: ST_TO_ADDR
// DialogueOn ;
26133: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
26137: LD_EXP 79
26141: PPUSH
26142: LD_STRING D9-Gri-1
26144: PPUSH
26145: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
26149: LD_EXP 58
26153: PPUSH
26154: LD_STRING D9-Kur-1
26156: PPUSH
26157: CALL_OW 94
// DialogueOff ;
26161: CALL_OW 7
// wait ( 0 0$2.5 ) ;
26165: LD_INT 88
26167: PPUSH
26168: CALL_OW 67
// DialogueOn ;
26172: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
26176: LD_EXP 79
26180: PPUSH
26181: LD_STRING D9-Gri-2
26183: PPUSH
26184: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
26188: LD_EXP 58
26192: PPUSH
26193: LD_STRING D9-Kur-2
26195: PPUSH
26196: CALL_OW 94
// DialogueOff ;
26200: CALL_OW 7
// repeat wait ( 1 ) ;
26204: LD_INT 1
26206: PPUSH
26207: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
26211: LD_EXP 79
26215: PPUSH
26216: CALL_OW 256
26220: PUSH
26221: LD_INT 1000
26223: LESS
26224: IFFALSE 26204
// DialogueOn ;
26226: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
26230: LD_EXP 79
26234: PPUSH
26235: LD_STRING D9-Gri-3
26237: PPUSH
26238: CALL_OW 94
// DialogueOff ;
26242: CALL_OW 7
// KillUnit ( Grishko ) ;
26246: LD_EXP 79
26250: PPUSH
26251: CALL_OW 66
// wait ( 0 0$12 ) ;
26255: LD_INT 420
26257: PPUSH
26258: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
26262: LD_EXP 58
26266: PPUSH
26267: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
26271: LD_EXP 58
26275: PPUSH
26276: LD_STRING D9-Kur-3
26278: PPUSH
26279: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
26283: LD_INT 176
26285: PPUSH
26286: LD_INT 110
26288: PPUSH
26289: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26293: LD_EXP 85
26297: PPUSH
26298: LD_INT 21
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 72
26312: PPUSH
26313: LD_INT 221
26315: PPUSH
26316: LD_INT 110
26318: PPUSH
26319: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
26323: LD_EXP 84
26327: PPUSH
26328: LD_INT 161
26330: PPUSH
26331: LD_INT 109
26333: PPUSH
26334: CALL_OW 114
// wait ( 0 0$7 ) ;
26338: LD_INT 245
26340: PPUSH
26341: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
26345: LD_EXP 85
26349: PPUSH
26350: LD_INT 161
26352: PPUSH
26353: LD_INT 109
26355: PPUSH
26356: CALL_OW 114
// wait ( 0 0$11 ) ;
26360: LD_INT 385
26362: PPUSH
26363: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
26367: LD_EXP 58
26371: PPUSH
26372: LD_EXP 64
26376: PPUSH
26377: CALL_OW 120
// DialogueOn ;
26381: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
26385: LD_EXP 58
26389: PPUSH
26390: LD_STRING D9a-Kur-1
26392: PPUSH
26393: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
26397: LD_EXP 46
26401: PPUSH
26402: LD_STRING D9a-Bur-1
26404: PPUSH
26405: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
26409: LD_EXP 58
26413: PPUSH
26414: LD_STRING D9a-Kur-2
26416: PPUSH
26417: CALL_OW 94
// DialogueOff ;
26421: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
26425: LD_EXP 76
26429: PPUSH
26430: CALL_OW 122
// wait ( 0 0$1 ) ;
26434: LD_INT 35
26436: PPUSH
26437: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
26441: LD_EXP 76
26445: PPUSH
26446: LD_EXP 57
26450: PPUSH
26451: CALL_OW 250
26455: PPUSH
26456: LD_EXP 57
26460: PPUSH
26461: CALL_OW 251
26465: PPUSH
26466: CALL_OW 111
// immortalSurvivors = true ;
26470: LD_ADDR_EXP 25
26474: PUSH
26475: LD_INT 1
26477: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
26478: LD_ADDR_VAR 0 1
26482: PUSH
26483: LD_INT 22
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 50
26505: PUSH
26506: EMPTY
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: PPUSH
26514: CALL_OW 69
26518: PUSH
26519: FOR_IN
26520: IFFALSE 26533
// RemoveUnit ( tmpUS ) ;
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL_OW 64
26531: GO 26519
26533: POP
26534: POP
// wait ( 0 0$33 ) ;
26535: LD_INT 1155
26537: PPUSH
26538: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
26542: LD_INT 22
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 21
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PPUSH
26566: CALL_OW 69
26570: PPUSH
26571: CALL_OW 121
// wait ( 0 0$1 ) ;
26575: LD_INT 35
26577: PPUSH
26578: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26582: LD_INT 22
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 21
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: PPUSH
26611: LD_EXP 59
26615: PPUSH
26616: CALL_OW 250
26620: PPUSH
26621: LD_EXP 59
26625: PPUSH
26626: CALL_OW 251
26630: PPUSH
26631: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26635: LD_INT 22
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 21
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PPUSH
26659: CALL_OW 69
26663: PPUSH
26664: LD_EXP 59
26668: PPUSH
26669: CALL_OW 250
26673: PPUSH
26674: LD_EXP 59
26678: PPUSH
26679: CALL_OW 251
26683: PPUSH
26684: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
26688: LD_EXP 46
26692: PPUSH
26693: CALL_OW 87
// wait ( 0 0$1 ) ;
26697: LD_INT 35
26699: PPUSH
26700: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
26704: LD_EXP 46
26708: PPUSH
26709: LD_EXP 59
26713: PPUSH
26714: CALL_OW 296
26718: PUSH
26719: LD_INT 6
26721: LESS
26722: IFFALSE 26635
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
26724: LD_EXP 46
26728: PUSH
26729: LD_EXP 59
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
26742: LD_EXP 46
26746: PPUSH
26747: LD_EXP 59
26751: PPUSH
26752: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
26756: LD_EXP 59
26760: PPUSH
26761: LD_EXP 46
26765: PPUSH
26766: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
26770: LD_EXP 46
26774: PPUSH
26775: LD_STRING D10a-Bur-1
26777: PPUSH
26778: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
26782: LD_EXP 59
26786: PPUSH
26787: LD_STRING D10a-Pop-1
26789: PPUSH
26790: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
26794: LD_EXP 46
26798: PPUSH
26799: LD_STRING D10a-Bur-2
26801: PPUSH
26802: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
26806: LD_EXP 59
26810: PPUSH
26811: LD_STRING D10a-Pop-2
26813: PPUSH
26814: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
26818: LD_EXP 46
26822: PPUSH
26823: LD_STRING D10a-Bur-3
26825: PPUSH
26826: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
26830: LD_EXP 59
26834: PPUSH
26835: LD_STRING D10a-Pop-3
26837: PPUSH
26838: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
26842: LD_EXP 46
26846: PPUSH
26847: LD_STRING D10a-Bur-4
26849: PPUSH
26850: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
26854: LD_EXP 59
26858: PPUSH
26859: LD_STRING D10a-Pop-4
26861: PPUSH
26862: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
26866: LD_EXP 46
26870: PPUSH
26871: LD_STRING D10a-Bur-5
26873: PPUSH
26874: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
26878: LD_EXP 59
26882: PPUSH
26883: LD_STRING D10a-Pop-5
26885: PPUSH
26886: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
26890: LD_INT 22
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 21
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL_OW 69
26918: PPUSH
26919: LD_INT 83
26921: PPUSH
26922: LD_INT 157
26924: PPUSH
26925: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
26929: LD_EXP 76
26933: PPUSH
26934: LD_INT 83
26936: PPUSH
26937: LD_INT 157
26939: PPUSH
26940: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
26944: LD_EXP 46
26948: PPUSH
26949: CALL_OW 87
// wait ( 0 0$1 ) ;
26953: LD_INT 35
26955: PPUSH
26956: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
26960: LD_EXP 46
26964: PPUSH
26965: LD_EXP 57
26969: PPUSH
26970: CALL_OW 296
26974: PUSH
26975: LD_INT 19
26977: GREATER
26978: IFFALSE 26944
// CenterNowOnXY ( 113 , 96 ) ;
26980: LD_INT 113
26982: PPUSH
26983: LD_INT 96
26985: PPUSH
26986: CALL_OW 86
// canDestroyBeriaBase = true ;
26990: LD_ADDR_EXP 28
26994: PUSH
26995: LD_INT 1
26997: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
26998: LD_ADDR_VAR 0 3
27002: PUSH
27003: LD_INT 25
27005: PPUSH
27006: LD_INT 22
27008: PUSH
27009: LD_INT 3
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 21
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PPUSH
27030: CALL_OW 70
27034: PUSH
27035: FOR_IN
27036: IFFALSE 27068
// begin AddComAttackUnit ( northGroup , building ) ;
27038: LD_EXP 84
27042: PPUSH
27043: LD_VAR 0 3
27047: PPUSH
27048: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
27052: LD_EXP 85
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: CALL_OW 175
// end ;
27066: GO 27035
27068: POP
27069: POP
// wait ( 0 0$35 ) ;
27070: LD_INT 1225
27072: PPUSH
27073: CALL_OW 67
// FinishMission ;
27077: CALL 18710 0 0
// end ;
27081: PPOPN 3
27083: END
// every 1 trigger immortalSurvivors do var unit ;
27084: LD_EXP 25
27088: IFFALSE 27126
27090: GO 27092
27092: DISABLE
27093: LD_INT 0
27095: PPUSH
// begin enable ;
27096: ENABLE
// for unit in survivorsArabianAttack do
27097: LD_ADDR_VAR 0 1
27101: PUSH
27102: LD_EXP 76
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27124
// SetLives ( unit , 1000 ) ;
27110: LD_VAR 0 1
27114: PPUSH
27115: LD_INT 1000
27117: PPUSH
27118: CALL_OW 234
27122: GO 27107
27124: POP
27125: POP
// end ; end_of_file
27126: PPOPN 1
27128: END
// every 0 0$30 do
27129: GO 27131
27131: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
27132: LD_INT 3
27134: PPUSH
27135: LD_INT 5
27137: PPUSH
27138: CALL_OW 12
27142: PPUSH
27143: LD_INT 76
27145: PPUSH
27146: LD_INT 111
27148: PPUSH
27149: LD_INT 5
27151: PPUSH
27152: LD_INT 1
27154: PPUSH
27155: CALL_OW 56
27159: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
27160: LD_EXP 5
27164: IFFALSE 27236
27166: GO 27168
27168: DISABLE
27169: LD_INT 0
27171: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
27172: LD_INT 50
27174: PPUSH
27175: LD_INT 4200
27177: PPUSH
27178: CALL_OW 12
27182: PPUSH
27183: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
27187: LD_VAR 0 1
27191: PUSH
27192: LD_INT 175
27194: MUL
27195: PPUSH
27196: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
27200: LD_ADDR_VAR 0 1
27204: PUSH
27205: LD_VAR 0 1
27209: PUSH
27210: LD_INT 1
27212: PLUS
27213: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27214: LD_INT 3
27216: PPUSH
27217: LD_INT 5
27219: PPUSH
27220: CALL_OW 12
27224: PPUSH
27225: LD_INT 6
27227: PPUSH
27228: LD_INT 1
27230: PPUSH
27231: CALL_OW 55
// enable ;
27235: ENABLE
// end ; end_of_file
27236: PPOPN 1
27238: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
27239: LD_EXP 86
27243: IFFALSE 27406
27245: GO 27247
27247: DISABLE
// begin enable ;
27248: ENABLE
// case counterIndex of 1 :
27249: LD_EXP 87
27253: PUSH
27254: LD_INT 1
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 27279
27262: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
27263: LD_ADDR_EXP 38
27267: PUSH
27268: LD_EXP 38
27272: PUSH
27273: LD_INT 35
27275: MINUS
27276: ST_TO_ADDR
27277: GO 27406
27279: LD_INT 2
27281: DOUBLE
27282: EQUAL
27283: IFTRUE 27287
27285: GO 27321
27287: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
27288: LD_ADDR_OWVAR 47
27292: PUSH
27293: LD_STRING #Ru03-1
27295: PUSH
27296: LD_EXP 15
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27305: LD_ADDR_EXP 15
27309: PUSH
27310: LD_EXP 15
27314: PUSH
27315: LD_INT 35
27317: MINUS
27318: ST_TO_ADDR
// end ; 3 :
27319: GO 27406
27321: LD_INT 3
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27363
27329: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
27330: LD_ADDR_OWVAR 47
27334: PUSH
27335: LD_STRING #Ru03-2
27337: PUSH
27338: LD_EXP 15
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27347: LD_ADDR_EXP 15
27351: PUSH
27352: LD_EXP 15
27356: PUSH
27357: LD_INT 35
27359: MINUS
27360: ST_TO_ADDR
// end ; 4 :
27361: GO 27406
27363: LD_INT 4
27365: DOUBLE
27366: EQUAL
27367: IFTRUE 27371
27369: GO 27405
27371: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
27372: LD_ADDR_OWVAR 47
27376: PUSH
27377: LD_STRING #Ru03-3
27379: PUSH
27380: LD_EXP 14
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
27389: LD_ADDR_EXP 14
27393: PUSH
27394: LD_EXP 14
27398: PUSH
27399: LD_INT 35
27401: MINUS
27402: ST_TO_ADDR
// end ; end ;
27403: GO 27406
27405: POP
// end ; end_of_file
27406: END
// every 7 7$0 do
27407: GO 27409
27409: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27410: LD_INT 3
27412: PPUSH
27413: LD_INT 1
27415: PPUSH
27416: LD_INT 0
27418: PPUSH
27419: LD_INT 7
27421: PUSH
27422: LD_INT 9
27424: PUSH
27425: LD_INT 8
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PPUSH
27436: LD_INT 3
27438: PPUSH
27439: CALL_OW 12
27443: ARRAY
27444: PPUSH
27445: CALL 5719 0 4
27449: END
// every 12 12$0 do
27450: GO 27452
27452: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27453: LD_INT 4
27455: PPUSH
27456: LD_INT 2
27458: PPUSH
27459: LD_INT 1
27461: PPUSH
27462: LD_INT 7
27464: PUSH
27465: LD_INT 9
27467: PUSH
27468: LD_INT 8
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PPUSH
27479: LD_INT 3
27481: PPUSH
27482: CALL_OW 12
27486: ARRAY
27487: PPUSH
27488: CALL 5719 0 4
27492: END
// every 20 20$0 do
27493: GO 27495
27495: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27496: LD_INT 6
27498: PPUSH
27499: LD_INT 2
27501: PPUSH
27502: LD_INT 0
27504: PPUSH
27505: LD_INT 7
27507: PUSH
27508: LD_INT 9
27510: PUSH
27511: LD_INT 8
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: PPUSH
27522: LD_INT 3
27524: PPUSH
27525: CALL_OW 12
27529: ARRAY
27530: PPUSH
27531: CALL 5719 0 4
27535: END
// every 23 23$0 do
27536: GO 27538
27538: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
27539: LD_INT 5
27541: PPUSH
27542: LD_INT 1
27544: PPUSH
27545: LD_INT 3
27547: PPUSH
27548: LD_INT 7
27550: PUSH
27551: LD_INT 9
27553: PUSH
27554: LD_INT 8
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 3
27567: PPUSH
27568: CALL_OW 12
27572: ARRAY
27573: PPUSH
27574: CALL 5719 0 4
27578: END
// export function Nef_PrepareNature ; var i , un ; begin
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
27583: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27584: LD_ADDR_VAR 0 2
27588: PUSH
27589: DOUBLE
27590: LD_INT 1
27592: DEC
27593: ST_TO_ADDR
27594: LD_EXP 30
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: PUSH
27603: FOR_TO
27604: IFFALSE 27714
// begin uc_side = 0 ;
27606: LD_ADDR_OWVAR 20
27610: PUSH
27611: LD_INT 0
27613: ST_TO_ADDR
// uc_nation = nation_nature ;
27614: LD_ADDR_OWVAR 21
27618: PUSH
27619: LD_INT 0
27621: ST_TO_ADDR
// hc_class = class_apeman ;
27622: LD_ADDR_OWVAR 28
27626: PUSH
27627: LD_INT 12
27629: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27630: LD_ADDR_OWVAR 31
27634: PUSH
27635: LD_EXP 31
27639: PUSH
27640: LD_INT 1
27642: ARRAY
27643: PUSH
27644: LD_EXP 31
27648: PUSH
27649: LD_INT 2
27651: ARRAY
27652: PUSH
27653: LD_EXP 31
27657: PUSH
27658: LD_INT 3
27660: ARRAY
27661: PUSH
27662: LD_EXP 31
27666: PUSH
27667: LD_INT 4
27669: ARRAY
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27677: LD_ADDR_OWVAR 35
27681: PUSH
27682: LD_EXP 32
27686: ST_TO_ADDR
// un = CreateHuman ;
27687: LD_ADDR_VAR 0 3
27691: PUSH
27692: CALL_OW 44
27696: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27697: LD_VAR 0 3
27701: PPUSH
27702: LD_INT 27
27704: PPUSH
27705: LD_INT 0
27707: PPUSH
27708: CALL_OW 49
// end ;
27712: GO 27603
27714: POP
27715: POP
// for i := 1 to animalsAmount [ 2 ] do
27716: LD_ADDR_VAR 0 2
27720: PUSH
27721: DOUBLE
27722: LD_INT 1
27724: DEC
27725: ST_TO_ADDR
27726: LD_EXP 30
27730: PUSH
27731: LD_INT 2
27733: ARRAY
27734: PUSH
27735: FOR_TO
27736: IFFALSE 27846
// begin uc_side = 0 ;
27738: LD_ADDR_OWVAR 20
27742: PUSH
27743: LD_INT 0
27745: ST_TO_ADDR
// uc_nation = nation_nature ;
27746: LD_ADDR_OWVAR 21
27750: PUSH
27751: LD_INT 0
27753: ST_TO_ADDR
// hc_class = class_phororhacos ;
27754: LD_ADDR_OWVAR 28
27758: PUSH
27759: LD_INT 18
27761: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27762: LD_ADDR_OWVAR 31
27766: PUSH
27767: LD_EXP 31
27771: PUSH
27772: LD_INT 1
27774: ARRAY
27775: PUSH
27776: LD_EXP 31
27780: PUSH
27781: LD_INT 2
27783: ARRAY
27784: PUSH
27785: LD_EXP 31
27789: PUSH
27790: LD_INT 3
27792: ARRAY
27793: PUSH
27794: LD_EXP 31
27798: PUSH
27799: LD_INT 4
27801: ARRAY
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27809: LD_ADDR_OWVAR 35
27813: PUSH
27814: LD_EXP 32
27818: ST_TO_ADDR
// un = CreateHuman ;
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: CALL_OW 44
27828: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27829: LD_VAR 0 3
27833: PPUSH
27834: LD_INT 27
27836: PPUSH
27837: LD_INT 0
27839: PPUSH
27840: CALL_OW 49
// end ;
27844: GO 27735
27846: POP
27847: POP
// for i := 1 to animalsAmount [ 3 ] do
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: DOUBLE
27854: LD_INT 1
27856: DEC
27857: ST_TO_ADDR
27858: LD_EXP 30
27862: PUSH
27863: LD_INT 3
27865: ARRAY
27866: PUSH
27867: FOR_TO
27868: IFFALSE 27978
// begin uc_side = 0 ;
27870: LD_ADDR_OWVAR 20
27874: PUSH
27875: LD_INT 0
27877: ST_TO_ADDR
// uc_nation = nation_nature ;
27878: LD_ADDR_OWVAR 21
27882: PUSH
27883: LD_INT 0
27885: ST_TO_ADDR
// hc_class = class_tiger ;
27886: LD_ADDR_OWVAR 28
27890: PUSH
27891: LD_INT 14
27893: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27894: LD_ADDR_OWVAR 31
27898: PUSH
27899: LD_EXP 31
27903: PUSH
27904: LD_INT 1
27906: ARRAY
27907: PUSH
27908: LD_EXP 31
27912: PUSH
27913: LD_INT 2
27915: ARRAY
27916: PUSH
27917: LD_EXP 31
27921: PUSH
27922: LD_INT 3
27924: ARRAY
27925: PUSH
27926: LD_EXP 31
27930: PUSH
27931: LD_INT 4
27933: ARRAY
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27941: LD_ADDR_OWVAR 35
27945: PUSH
27946: LD_EXP 32
27950: ST_TO_ADDR
// un = CreateHuman ;
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: CALL_OW 44
27960: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27961: LD_VAR 0 3
27965: PPUSH
27966: LD_INT 27
27968: PPUSH
27969: LD_INT 0
27971: PPUSH
27972: CALL_OW 49
// end ;
27976: GO 27867
27978: POP
27979: POP
// for i := 1 to animalsAmount [ 4 ] do
27980: LD_ADDR_VAR 0 2
27984: PUSH
27985: DOUBLE
27986: LD_INT 1
27988: DEC
27989: ST_TO_ADDR
27990: LD_EXP 30
27994: PUSH
27995: LD_INT 4
27997: ARRAY
27998: PUSH
27999: FOR_TO
28000: IFFALSE 28110
// begin uc_side = 0 ;
28002: LD_ADDR_OWVAR 20
28006: PUSH
28007: LD_INT 0
28009: ST_TO_ADDR
// uc_nation = nation_nature ;
28010: LD_ADDR_OWVAR 21
28014: PUSH
28015: LD_INT 0
28017: ST_TO_ADDR
// hc_class = 21 ;
28018: LD_ADDR_OWVAR 28
28022: PUSH
28023: LD_INT 21
28025: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28026: LD_ADDR_OWVAR 31
28030: PUSH
28031: LD_EXP 31
28035: PUSH
28036: LD_INT 1
28038: ARRAY
28039: PUSH
28040: LD_EXP 31
28044: PUSH
28045: LD_INT 2
28047: ARRAY
28048: PUSH
28049: LD_EXP 31
28053: PUSH
28054: LD_INT 3
28056: ARRAY
28057: PUSH
28058: LD_EXP 31
28062: PUSH
28063: LD_INT 4
28065: ARRAY
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28073: LD_ADDR_OWVAR 35
28077: PUSH
28078: LD_EXP 32
28082: ST_TO_ADDR
// un = CreateHuman ;
28083: LD_ADDR_VAR 0 3
28087: PUSH
28088: CALL_OW 44
28092: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28093: LD_VAR 0 3
28097: PPUSH
28098: LD_INT 27
28100: PPUSH
28101: LD_INT 0
28103: PPUSH
28104: CALL_OW 49
// end ;
28108: GO 27999
28110: POP
28111: POP
// for i := 1 to animalsAmount [ 5 ] do
28112: LD_ADDR_VAR 0 2
28116: PUSH
28117: DOUBLE
28118: LD_INT 1
28120: DEC
28121: ST_TO_ADDR
28122: LD_EXP 30
28126: PUSH
28127: LD_INT 5
28129: ARRAY
28130: PUSH
28131: FOR_TO
28132: IFFALSE 28193
// begin uc_side = 0 ;
28134: LD_ADDR_OWVAR 20
28138: PUSH
28139: LD_INT 0
28141: ST_TO_ADDR
// uc_nation = nation_nature ;
28142: LD_ADDR_OWVAR 21
28146: PUSH
28147: LD_INT 0
28149: ST_TO_ADDR
// vc_chassis := 31 ;
28150: LD_ADDR_OWVAR 37
28154: PUSH
28155: LD_INT 31
28157: ST_TO_ADDR
// vc_control := control_rider ;
28158: LD_ADDR_OWVAR 38
28162: PUSH
28163: LD_INT 4
28165: ST_TO_ADDR
// un := CreateVehicle ;
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: CALL_OW 45
28175: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28176: LD_VAR 0 3
28180: PPUSH
28181: LD_INT 27
28183: PPUSH
28184: LD_INT 0
28186: PPUSH
28187: CALL_OW 49
// end ;
28191: GO 28131
28193: POP
28194: POP
// end ; end_of_file
28195: LD_VAR 0 1
28199: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
28200: GO 28202
28202: DISABLE
// begin ru_radar := 98 ;
28203: LD_ADDR_EXP 88
28207: PUSH
28208: LD_INT 98
28210: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28211: LD_ADDR_EXP 89
28215: PUSH
28216: LD_INT 89
28218: ST_TO_ADDR
// us_hack := 99 ;
28219: LD_ADDR_EXP 90
28223: PUSH
28224: LD_INT 99
28226: ST_TO_ADDR
// us_artillery := 97 ;
28227: LD_ADDR_EXP 91
28231: PUSH
28232: LD_INT 97
28234: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28235: LD_ADDR_EXP 92
28239: PUSH
28240: LD_INT 91
28242: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28243: LD_ADDR_EXP 93
28247: PUSH
28248: LD_INT 92
28250: ST_TO_ADDR
// tech_Artillery := 80 ;
28251: LD_ADDR_EXP 94
28255: PUSH
28256: LD_INT 80
28258: ST_TO_ADDR
// tech_RadMat := 81 ;
28259: LD_ADDR_EXP 95
28263: PUSH
28264: LD_INT 81
28266: ST_TO_ADDR
// tech_BasicTools := 82 ;
28267: LD_ADDR_EXP 96
28271: PUSH
28272: LD_INT 82
28274: ST_TO_ADDR
// tech_Cargo := 83 ;
28275: LD_ADDR_EXP 97
28279: PUSH
28280: LD_INT 83
28282: ST_TO_ADDR
// tech_Track := 84 ;
28283: LD_ADDR_EXP 98
28287: PUSH
28288: LD_INT 84
28290: ST_TO_ADDR
// tech_Crane := 85 ;
28291: LD_ADDR_EXP 99
28295: PUSH
28296: LD_INT 85
28298: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28299: LD_ADDR_EXP 100
28303: PUSH
28304: LD_INT 86
28306: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28307: LD_ADDR_EXP 101
28311: PUSH
28312: LD_INT 87
28314: ST_TO_ADDR
// end ; end_of_file
28315: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28316: LD_INT 0
28318: PPUSH
28319: PPUSH
// if exist_mode then
28320: LD_VAR 0 2
28324: IFFALSE 28349
// unit := CreateCharacter ( prefix & ident ) else
28326: LD_ADDR_VAR 0 5
28330: PUSH
28331: LD_VAR 0 3
28335: PUSH
28336: LD_VAR 0 1
28340: STR
28341: PPUSH
28342: CALL_OW 34
28346: ST_TO_ADDR
28347: GO 28364
// unit := NewCharacter ( ident ) ;
28349: LD_ADDR_VAR 0 5
28353: PUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 25
28363: ST_TO_ADDR
// result := unit ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_VAR 0 5
28373: ST_TO_ADDR
// end ;
28374: LD_VAR 0 4
28378: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28379: LD_INT 0
28381: PPUSH
28382: PPUSH
// if not side or not nation then
28383: LD_VAR 0 1
28387: NOT
28388: PUSH
28389: LD_VAR 0 2
28393: NOT
28394: OR
28395: IFFALSE 28399
// exit ;
28397: GO 29163
// case nation of nation_american :
28399: LD_VAR 0 2
28403: PUSH
28404: LD_INT 1
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28626
28412: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28413: LD_ADDR_VAR 0 4
28417: PUSH
28418: LD_INT 35
28420: PUSH
28421: LD_INT 45
28423: PUSH
28424: LD_INT 46
28426: PUSH
28427: LD_INT 47
28429: PUSH
28430: LD_INT 82
28432: PUSH
28433: LD_INT 83
28435: PUSH
28436: LD_INT 84
28438: PUSH
28439: LD_INT 85
28441: PUSH
28442: LD_INT 86
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 6
28453: PUSH
28454: LD_INT 15
28456: PUSH
28457: LD_INT 16
28459: PUSH
28460: LD_INT 7
28462: PUSH
28463: LD_INT 12
28465: PUSH
28466: LD_INT 13
28468: PUSH
28469: LD_INT 10
28471: PUSH
28472: LD_INT 14
28474: PUSH
28475: LD_INT 20
28477: PUSH
28478: LD_INT 21
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_INT 25
28486: PUSH
28487: LD_INT 32
28489: PUSH
28490: LD_INT 27
28492: PUSH
28493: LD_INT 36
28495: PUSH
28496: LD_INT 69
28498: PUSH
28499: LD_INT 39
28501: PUSH
28502: LD_INT 34
28504: PUSH
28505: LD_INT 40
28507: PUSH
28508: LD_INT 48
28510: PUSH
28511: LD_INT 49
28513: PUSH
28514: LD_INT 50
28516: PUSH
28517: LD_INT 51
28519: PUSH
28520: LD_INT 52
28522: PUSH
28523: LD_INT 53
28525: PUSH
28526: LD_INT 54
28528: PUSH
28529: LD_INT 55
28531: PUSH
28532: LD_INT 56
28534: PUSH
28535: LD_INT 57
28537: PUSH
28538: LD_INT 58
28540: PUSH
28541: LD_INT 59
28543: PUSH
28544: LD_INT 60
28546: PUSH
28547: LD_INT 61
28549: PUSH
28550: LD_INT 62
28552: PUSH
28553: LD_INT 80
28555: PUSH
28556: LD_INT 82
28558: PUSH
28559: LD_INT 83
28561: PUSH
28562: LD_INT 84
28564: PUSH
28565: LD_INT 85
28567: PUSH
28568: LD_INT 86
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
28624: GO 29087
28626: LD_INT 2
28628: DOUBLE
28629: EQUAL
28630: IFTRUE 28634
28632: GO 28856
28634: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28635: LD_ADDR_VAR 0 4
28639: PUSH
28640: LD_INT 35
28642: PUSH
28643: LD_INT 45
28645: PUSH
28646: LD_INT 46
28648: PUSH
28649: LD_INT 47
28651: PUSH
28652: LD_INT 82
28654: PUSH
28655: LD_INT 83
28657: PUSH
28658: LD_INT 84
28660: PUSH
28661: LD_INT 85
28663: PUSH
28664: LD_INT 87
28666: PUSH
28667: LD_INT 70
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 11
28675: PUSH
28676: LD_INT 3
28678: PUSH
28679: LD_INT 4
28681: PUSH
28682: LD_INT 5
28684: PUSH
28685: LD_INT 6
28687: PUSH
28688: LD_INT 15
28690: PUSH
28691: LD_INT 18
28693: PUSH
28694: LD_INT 7
28696: PUSH
28697: LD_INT 17
28699: PUSH
28700: LD_INT 8
28702: PUSH
28703: LD_INT 20
28705: PUSH
28706: LD_INT 21
28708: PUSH
28709: LD_INT 22
28711: PUSH
28712: LD_INT 72
28714: PUSH
28715: LD_INT 26
28717: PUSH
28718: LD_INT 69
28720: PUSH
28721: LD_INT 39
28723: PUSH
28724: LD_INT 40
28726: PUSH
28727: LD_INT 41
28729: PUSH
28730: LD_INT 42
28732: PUSH
28733: LD_INT 43
28735: PUSH
28736: LD_INT 48
28738: PUSH
28739: LD_INT 49
28741: PUSH
28742: LD_INT 50
28744: PUSH
28745: LD_INT 51
28747: PUSH
28748: LD_INT 52
28750: PUSH
28751: LD_INT 53
28753: PUSH
28754: LD_INT 54
28756: PUSH
28757: LD_INT 55
28759: PUSH
28760: LD_INT 56
28762: PUSH
28763: LD_INT 60
28765: PUSH
28766: LD_INT 61
28768: PUSH
28769: LD_INT 62
28771: PUSH
28772: LD_INT 66
28774: PUSH
28775: LD_INT 67
28777: PUSH
28778: LD_INT 68
28780: PUSH
28781: LD_INT 81
28783: PUSH
28784: LD_INT 82
28786: PUSH
28787: LD_INT 83
28789: PUSH
28790: LD_INT 84
28792: PUSH
28793: LD_INT 85
28795: PUSH
28796: LD_INT 87
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: ST_TO_ADDR
28854: GO 29087
28856: LD_INT 3
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 29086
28864: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28865: LD_ADDR_VAR 0 4
28869: PUSH
28870: LD_INT 46
28872: PUSH
28873: LD_INT 47
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 2
28881: PUSH
28882: LD_INT 82
28884: PUSH
28885: LD_INT 83
28887: PUSH
28888: LD_INT 84
28890: PUSH
28891: LD_INT 85
28893: PUSH
28894: LD_INT 86
28896: PUSH
28897: LD_INT 11
28899: PUSH
28900: LD_INT 9
28902: PUSH
28903: LD_INT 20
28905: PUSH
28906: LD_INT 19
28908: PUSH
28909: LD_INT 21
28911: PUSH
28912: LD_INT 24
28914: PUSH
28915: LD_INT 22
28917: PUSH
28918: LD_INT 25
28920: PUSH
28921: LD_INT 28
28923: PUSH
28924: LD_INT 29
28926: PUSH
28927: LD_INT 30
28929: PUSH
28930: LD_INT 31
28932: PUSH
28933: LD_INT 37
28935: PUSH
28936: LD_INT 38
28938: PUSH
28939: LD_INT 32
28941: PUSH
28942: LD_INT 27
28944: PUSH
28945: LD_INT 33
28947: PUSH
28948: LD_INT 69
28950: PUSH
28951: LD_INT 39
28953: PUSH
28954: LD_INT 34
28956: PUSH
28957: LD_INT 40
28959: PUSH
28960: LD_INT 71
28962: PUSH
28963: LD_INT 23
28965: PUSH
28966: LD_INT 44
28968: PUSH
28969: LD_INT 48
28971: PUSH
28972: LD_INT 49
28974: PUSH
28975: LD_INT 50
28977: PUSH
28978: LD_INT 51
28980: PUSH
28981: LD_INT 52
28983: PUSH
28984: LD_INT 53
28986: PUSH
28987: LD_INT 54
28989: PUSH
28990: LD_INT 55
28992: PUSH
28993: LD_INT 56
28995: PUSH
28996: LD_INT 57
28998: PUSH
28999: LD_INT 58
29001: PUSH
29002: LD_INT 59
29004: PUSH
29005: LD_INT 63
29007: PUSH
29008: LD_INT 64
29010: PUSH
29011: LD_INT 65
29013: PUSH
29014: LD_INT 82
29016: PUSH
29017: LD_INT 83
29019: PUSH
29020: LD_INT 84
29022: PUSH
29023: LD_INT 85
29025: PUSH
29026: LD_INT 86
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29087
29086: POP
// if state > - 1 and state < 3 then
29087: LD_VAR 0 3
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: GREATER
29096: PUSH
29097: LD_VAR 0 3
29101: PUSH
29102: LD_INT 3
29104: LESS
29105: AND
29106: IFFALSE 29163
// for i in result do
29108: LD_ADDR_VAR 0 5
29112: PUSH
29113: LD_VAR 0 4
29117: PUSH
29118: FOR_IN
29119: IFFALSE 29161
// if GetTech ( i , side ) <> state then
29121: LD_VAR 0 5
29125: PPUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 321
29135: PUSH
29136: LD_VAR 0 3
29140: NONEQUAL
29141: IFFALSE 29159
// result := result diff i ;
29143: LD_ADDR_VAR 0 4
29147: PUSH
29148: LD_VAR 0 4
29152: PUSH
29153: LD_VAR 0 5
29157: DIFF
29158: ST_TO_ADDR
29159: GO 29118
29161: POP
29162: POP
// end ;
29163: LD_VAR 0 4
29167: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
// result := true ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 1
29180: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29181: LD_ADDR_VAR 0 5
29185: PUSH
29186: LD_VAR 0 2
29190: PPUSH
29191: CALL_OW 480
29195: ST_TO_ADDR
// if not tmp then
29196: LD_VAR 0 5
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 29254
// for i in tmp do
29205: LD_ADDR_VAR 0 4
29209: PUSH
29210: LD_VAR 0 5
29214: PUSH
29215: FOR_IN
29216: IFFALSE 29252
// if GetTech ( i , side ) <> state_researched then
29218: LD_VAR 0 4
29222: PPUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL_OW 321
29232: PUSH
29233: LD_INT 2
29235: NONEQUAL
29236: IFFALSE 29250
// begin result := false ;
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 0
29245: ST_TO_ADDR
// exit ;
29246: POP
29247: POP
29248: GO 29254
// end ;
29250: GO 29215
29252: POP
29253: POP
// end ;
29254: LD_VAR 0 3
29258: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29259: LD_INT 0
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29274: LD_VAR 0 1
29278: NOT
29279: PUSH
29280: LD_VAR 0 1
29284: PPUSH
29285: CALL_OW 257
29289: PUSH
29290: LD_INT 9
29292: NONEQUAL
29293: OR
29294: IFFALSE 29298
// exit ;
29296: GO 29871
// side := GetSide ( unit ) ;
29298: LD_ADDR_VAR 0 9
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 255
29312: ST_TO_ADDR
// tech_space := tech_spacanom ;
29313: LD_ADDR_VAR 0 12
29317: PUSH
29318: LD_INT 29
29320: ST_TO_ADDR
// tech_time := tech_taurad ;
29321: LD_ADDR_VAR 0 13
29325: PUSH
29326: LD_INT 28
29328: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29329: LD_ADDR_VAR 0 11
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 310
29343: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29344: LD_VAR 0 11
29348: PPUSH
29349: CALL_OW 247
29353: PUSH
29354: LD_INT 2
29356: EQUAL
29357: IFFALSE 29361
// exit ;
29359: GO 29871
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29361: LD_ADDR_VAR 0 8
29365: PUSH
29366: LD_INT 81
29368: PUSH
29369: LD_VAR 0 9
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 21
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PPUSH
29399: CALL_OW 69
29403: ST_TO_ADDR
// if not tmp then
29404: LD_VAR 0 8
29408: NOT
29409: IFFALSE 29413
// exit ;
29411: GO 29871
// if in_unit then
29413: LD_VAR 0 11
29417: IFFALSE 29441
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29419: LD_ADDR_VAR 0 10
29423: PUSH
29424: LD_VAR 0 8
29428: PPUSH
29429: LD_VAR 0 11
29433: PPUSH
29434: CALL_OW 74
29438: ST_TO_ADDR
29439: GO 29461
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29441: LD_ADDR_VAR 0 10
29445: PUSH
29446: LD_VAR 0 8
29450: PPUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 74
29460: ST_TO_ADDR
// if not enemy then
29461: LD_VAR 0 10
29465: NOT
29466: IFFALSE 29470
// exit ;
29468: GO 29871
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29470: LD_VAR 0 11
29474: PUSH
29475: LD_VAR 0 11
29479: PPUSH
29480: LD_VAR 0 10
29484: PPUSH
29485: CALL_OW 296
29489: PUSH
29490: LD_INT 13
29492: GREATER
29493: AND
29494: PUSH
29495: LD_VAR 0 1
29499: PPUSH
29500: LD_VAR 0 10
29504: PPUSH
29505: CALL_OW 296
29509: PUSH
29510: LD_INT 12
29512: GREATER
29513: OR
29514: IFFALSE 29518
// exit ;
29516: GO 29871
// missile := [ 1 ] ;
29518: LD_ADDR_VAR 0 14
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29529: LD_VAR 0 9
29533: PPUSH
29534: LD_VAR 0 12
29538: PPUSH
29539: CALL_OW 325
29543: IFFALSE 29572
// missile := Insert ( missile , missile + 1 , 2 ) ;
29545: LD_ADDR_VAR 0 14
29549: PUSH
29550: LD_VAR 0 14
29554: PPUSH
29555: LD_VAR 0 14
29559: PUSH
29560: LD_INT 1
29562: PLUS
29563: PPUSH
29564: LD_INT 2
29566: PPUSH
29567: CALL_OW 2
29571: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 13
29581: PPUSH
29582: CALL_OW 325
29586: PUSH
29587: LD_VAR 0 10
29591: PPUSH
29592: CALL_OW 255
29596: PPUSH
29597: LD_VAR 0 13
29601: PPUSH
29602: CALL_OW 325
29606: NOT
29607: AND
29608: IFFALSE 29637
// missile := Insert ( missile , missile + 1 , 3 ) ;
29610: LD_ADDR_VAR 0 14
29614: PUSH
29615: LD_VAR 0 14
29619: PPUSH
29620: LD_VAR 0 14
29624: PUSH
29625: LD_INT 1
29627: PLUS
29628: PPUSH
29629: LD_INT 3
29631: PPUSH
29632: CALL_OW 2
29636: ST_TO_ADDR
// if missile < 2 then
29637: LD_VAR 0 14
29641: PUSH
29642: LD_INT 2
29644: LESS
29645: IFFALSE 29649
// exit ;
29647: GO 29871
// x := GetX ( enemy ) ;
29649: LD_ADDR_VAR 0 4
29653: PUSH
29654: LD_VAR 0 10
29658: PPUSH
29659: CALL_OW 250
29663: ST_TO_ADDR
// y := GetY ( enemy ) ;
29664: LD_ADDR_VAR 0 5
29668: PUSH
29669: LD_VAR 0 10
29673: PPUSH
29674: CALL_OW 251
29678: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29679: LD_ADDR_VAR 0 6
29683: PUSH
29684: LD_VAR 0 4
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: CALL_OW 12
29700: PLUS
29701: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29702: LD_ADDR_VAR 0 7
29706: PUSH
29707: LD_VAR 0 5
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PPUSH
29716: LD_INT 1
29718: PPUSH
29719: CALL_OW 12
29723: PLUS
29724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29725: LD_VAR 0 6
29729: PPUSH
29730: LD_VAR 0 7
29734: PPUSH
29735: CALL_OW 488
29739: NOT
29740: IFFALSE 29762
// begin _x := x ;
29742: LD_ADDR_VAR 0 6
29746: PUSH
29747: LD_VAR 0 4
29751: ST_TO_ADDR
// _y := y ;
29752: LD_ADDR_VAR 0 7
29756: PUSH
29757: LD_VAR 0 5
29761: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: LD_INT 1
29769: PPUSH
29770: LD_VAR 0 14
29774: PPUSH
29775: CALL_OW 12
29779: ST_TO_ADDR
// case i of 1 :
29780: LD_VAR 0 3
29784: PUSH
29785: LD_INT 1
29787: DOUBLE
29788: EQUAL
29789: IFTRUE 29793
29791: GO 29810
29793: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29794: LD_VAR 0 1
29798: PPUSH
29799: LD_VAR 0 10
29803: PPUSH
29804: CALL_OW 115
29808: GO 29871
29810: LD_INT 2
29812: DOUBLE
29813: EQUAL
29814: IFTRUE 29818
29816: GO 29840
29818: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_VAR 0 6
29828: PPUSH
29829: LD_VAR 0 7
29833: PPUSH
29834: CALL_OW 153
29838: GO 29871
29840: LD_INT 3
29842: DOUBLE
29843: EQUAL
29844: IFTRUE 29848
29846: GO 29870
29848: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29849: LD_VAR 0 1
29853: PPUSH
29854: LD_VAR 0 6
29858: PPUSH
29859: LD_VAR 0 7
29863: PPUSH
29864: CALL_OW 154
29868: GO 29871
29870: POP
// end ;
29871: LD_VAR 0 2
29875: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29876: LD_INT 0
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
// if not unit or not building then
29884: LD_VAR 0 1
29888: NOT
29889: PUSH
29890: LD_VAR 0 2
29894: NOT
29895: OR
29896: IFFALSE 29900
// exit ;
29898: GO 30058
// x := GetX ( building ) ;
29900: LD_ADDR_VAR 0 5
29904: PUSH
29905: LD_VAR 0 2
29909: PPUSH
29910: CALL_OW 250
29914: ST_TO_ADDR
// y := GetY ( building ) ;
29915: LD_ADDR_VAR 0 6
29919: PUSH
29920: LD_VAR 0 2
29924: PPUSH
29925: CALL_OW 251
29929: ST_TO_ADDR
// for i = 0 to 5 do
29930: LD_ADDR_VAR 0 4
29934: PUSH
29935: DOUBLE
29936: LD_INT 0
29938: DEC
29939: ST_TO_ADDR
29940: LD_INT 5
29942: PUSH
29943: FOR_TO
29944: IFFALSE 30056
// begin _x := ShiftX ( x , i , 3 ) ;
29946: LD_ADDR_VAR 0 7
29950: PUSH
29951: LD_VAR 0 5
29955: PPUSH
29956: LD_VAR 0 4
29960: PPUSH
29961: LD_INT 3
29963: PPUSH
29964: CALL_OW 272
29968: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29969: LD_ADDR_VAR 0 8
29973: PUSH
29974: LD_VAR 0 6
29978: PPUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: LD_INT 3
29986: PPUSH
29987: CALL_OW 273
29991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29992: LD_VAR 0 7
29996: PPUSH
29997: LD_VAR 0 8
30001: PPUSH
30002: CALL_OW 488
30006: NOT
30007: IFFALSE 30011
// continue ;
30009: GO 29943
// if HexInfo ( _x , _y ) = 0 then
30011: LD_VAR 0 7
30015: PPUSH
30016: LD_VAR 0 8
30020: PPUSH
30021: CALL_OW 428
30025: PUSH
30026: LD_INT 0
30028: EQUAL
30029: IFFALSE 30054
// begin ComMoveXY ( unit , _x , _y ) ;
30031: LD_VAR 0 1
30035: PPUSH
30036: LD_VAR 0 7
30040: PPUSH
30041: LD_VAR 0 8
30045: PPUSH
30046: CALL_OW 111
// exit ;
30050: POP
30051: POP
30052: GO 30058
// end ; end ;
30054: GO 29943
30056: POP
30057: POP
// end ;
30058: LD_VAR 0 3
30062: RET
// export function ScanBase ( side , base_area ) ; begin
30063: LD_INT 0
30065: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_VAR 0 2
30075: PPUSH
30076: LD_INT 81
30078: PUSH
30079: LD_VAR 0 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 70
30092: ST_TO_ADDR
// end ;
30093: LD_VAR 0 3
30097: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30098: LD_INT 0
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
// result := false ;
30104: LD_ADDR_VAR 0 2
30108: PUSH
30109: LD_INT 0
30111: ST_TO_ADDR
// side := GetSide ( unit ) ;
30112: LD_ADDR_VAR 0 3
30116: PUSH
30117: LD_VAR 0 1
30121: PPUSH
30122: CALL_OW 255
30126: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30127: LD_ADDR_VAR 0 4
30131: PUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 248
30141: ST_TO_ADDR
// case nat of 1 :
30142: LD_VAR 0 4
30146: PUSH
30147: LD_INT 1
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30166
30155: POP
// tech := tech_lassight ; 2 :
30156: LD_ADDR_VAR 0 5
30160: PUSH
30161: LD_INT 12
30163: ST_TO_ADDR
30164: GO 30205
30166: LD_INT 2
30168: DOUBLE
30169: EQUAL
30170: IFTRUE 30174
30172: GO 30185
30174: POP
// tech := tech_mortar ; 3 :
30175: LD_ADDR_VAR 0 5
30179: PUSH
30180: LD_INT 41
30182: ST_TO_ADDR
30183: GO 30205
30185: LD_INT 3
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30204
30193: POP
// tech := tech_bazooka ; end ;
30194: LD_ADDR_VAR 0 5
30198: PUSH
30199: LD_INT 44
30201: ST_TO_ADDR
30202: GO 30205
30204: POP
// if Researched ( side , tech ) then
30205: LD_VAR 0 3
30209: PPUSH
30210: LD_VAR 0 5
30214: PPUSH
30215: CALL_OW 325
30219: IFFALSE 30246
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30221: LD_ADDR_VAR 0 2
30225: PUSH
30226: LD_INT 5
30228: PUSH
30229: LD_INT 8
30231: PUSH
30232: LD_INT 9
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: PUSH
30240: LD_VAR 0 4
30244: ARRAY
30245: ST_TO_ADDR
// end ;
30246: LD_VAR 0 2
30250: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
30255: PPUSH
// if not mines then
30256: LD_VAR 0 2
30260: NOT
30261: IFFALSE 30265
// exit ;
30263: GO 30409
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30265: LD_ADDR_VAR 0 5
30269: PUSH
30270: LD_INT 81
30272: PUSH
30273: LD_VAR 0 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: LD_INT 21
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PPUSH
30303: CALL_OW 69
30307: ST_TO_ADDR
// for i in mines do
30308: LD_ADDR_VAR 0 4
30312: PUSH
30313: LD_VAR 0 2
30317: PUSH
30318: FOR_IN
30319: IFFALSE 30407
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30321: LD_VAR 0 4
30325: PUSH
30326: LD_INT 1
30328: ARRAY
30329: PPUSH
30330: LD_VAR 0 4
30334: PUSH
30335: LD_INT 2
30337: ARRAY
30338: PPUSH
30339: CALL_OW 458
30343: NOT
30344: IFFALSE 30348
// continue ;
30346: GO 30318
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30348: LD_VAR 0 4
30352: PUSH
30353: LD_INT 1
30355: ARRAY
30356: PPUSH
30357: LD_VAR 0 4
30361: PUSH
30362: LD_INT 2
30364: ARRAY
30365: PPUSH
30366: CALL_OW 428
30370: PUSH
30371: LD_VAR 0 5
30375: IN
30376: IFFALSE 30405
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30378: LD_VAR 0 4
30382: PUSH
30383: LD_INT 1
30385: ARRAY
30386: PPUSH
30387: LD_VAR 0 4
30391: PUSH
30392: LD_INT 2
30394: ARRAY
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 456
// end ;
30405: GO 30318
30407: POP
30408: POP
// end ;
30409: LD_VAR 0 3
30413: RET
// export function Count ( array ) ; var i ; begin
30414: LD_INT 0
30416: PPUSH
30417: PPUSH
// result := 0 ;
30418: LD_ADDR_VAR 0 2
30422: PUSH
30423: LD_INT 0
30425: ST_TO_ADDR
// for i in array do
30426: LD_ADDR_VAR 0 3
30430: PUSH
30431: LD_VAR 0 1
30435: PUSH
30436: FOR_IN
30437: IFFALSE 30461
// if i then
30439: LD_VAR 0 3
30443: IFFALSE 30459
// result := result + 1 ;
30445: LD_ADDR_VAR 0 2
30449: PUSH
30450: LD_VAR 0 2
30454: PUSH
30455: LD_INT 1
30457: PLUS
30458: ST_TO_ADDR
30459: GO 30436
30461: POP
30462: POP
// end ;
30463: LD_VAR 0 2
30467: RET
// export function IsEmpty ( building ) ; begin
30468: LD_INT 0
30470: PPUSH
// if not building then
30471: LD_VAR 0 1
30475: NOT
30476: IFFALSE 30480
// exit ;
30478: GO 30523
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30480: LD_ADDR_VAR 0 2
30484: PUSH
30485: LD_VAR 0 1
30489: PUSH
30490: LD_INT 22
30492: PUSH
30493: LD_VAR 0 1
30497: PPUSH
30498: CALL_OW 255
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 58
30509: PUSH
30510: EMPTY
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PPUSH
30517: CALL_OW 69
30521: IN
30522: ST_TO_ADDR
// end ;
30523: LD_VAR 0 2
30527: RET
// export function IsNotFull ( building ) ; begin
30528: LD_INT 0
30530: PPUSH
// if not building then
30531: LD_VAR 0 1
30535: NOT
30536: IFFALSE 30540
// exit ;
30538: GO 30559
// result := UnitsInside ( building ) < 6 ;
30540: LD_ADDR_VAR 0 2
30544: PUSH
30545: LD_VAR 0 1
30549: PPUSH
30550: CALL_OW 313
30554: PUSH
30555: LD_INT 6
30557: LESS
30558: ST_TO_ADDR
// end ;
30559: LD_VAR 0 2
30563: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30564: LD_INT 0
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
// tmp := [ ] ;
30570: LD_ADDR_VAR 0 3
30574: PUSH
30575: EMPTY
30576: ST_TO_ADDR
// list := [ ] ;
30577: LD_ADDR_VAR 0 5
30581: PUSH
30582: EMPTY
30583: ST_TO_ADDR
// for i = 16 to 25 do
30584: LD_ADDR_VAR 0 4
30588: PUSH
30589: DOUBLE
30590: LD_INT 16
30592: DEC
30593: ST_TO_ADDR
30594: LD_INT 25
30596: PUSH
30597: FOR_TO
30598: IFFALSE 30671
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30600: LD_ADDR_VAR 0 3
30604: PUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: CALL_OW 255
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 91
30629: PUSH
30630: LD_VAR 0 1
30634: PUSH
30635: LD_INT 6
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 30
30645: PUSH
30646: LD_VAR 0 4
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ADD
30668: ST_TO_ADDR
30669: GO 30597
30671: POP
30672: POP
// for i = 1 to tmp do
30673: LD_ADDR_VAR 0 4
30677: PUSH
30678: DOUBLE
30679: LD_INT 1
30681: DEC
30682: ST_TO_ADDR
30683: LD_VAR 0 3
30687: PUSH
30688: FOR_TO
30689: IFFALSE 30777
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_VAR 0 5
30700: PUSH
30701: LD_VAR 0 3
30705: PUSH
30706: LD_VAR 0 4
30710: ARRAY
30711: PPUSH
30712: CALL_OW 266
30716: PUSH
30717: LD_VAR 0 3
30721: PUSH
30722: LD_VAR 0 4
30726: ARRAY
30727: PPUSH
30728: CALL_OW 250
30732: PUSH
30733: LD_VAR 0 3
30737: PUSH
30738: LD_VAR 0 4
30742: ARRAY
30743: PPUSH
30744: CALL_OW 251
30748: PUSH
30749: LD_VAR 0 3
30753: PUSH
30754: LD_VAR 0 4
30758: ARRAY
30759: PPUSH
30760: CALL_OW 254
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: ADD
30774: ST_TO_ADDR
30775: GO 30688
30777: POP
30778: POP
// result := list ;
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 5
30788: ST_TO_ADDR
// end ;
30789: LD_VAR 0 2
30793: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30794: LD_INT 0
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
// if not factory then
30803: LD_VAR 0 1
30807: NOT
30808: IFFALSE 30812
// exit ;
30810: GO 31405
// if control = control_apeman then
30812: LD_VAR 0 4
30816: PUSH
30817: LD_INT 5
30819: EQUAL
30820: IFFALSE 30929
// begin tmp := UnitsInside ( factory ) ;
30822: LD_ADDR_VAR 0 8
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL_OW 313
30836: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30837: LD_VAR 0 8
30841: PPUSH
30842: LD_INT 25
30844: PUSH
30845: LD_INT 12
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PPUSH
30852: CALL_OW 72
30856: NOT
30857: IFFALSE 30867
// control := control_manual ;
30859: LD_ADDR_VAR 0 4
30863: PUSH
30864: LD_INT 1
30866: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30867: LD_ADDR_VAR 0 8
30871: PUSH
30872: LD_VAR 0 1
30876: PPUSH
30877: CALL 30564 0 1
30881: ST_TO_ADDR
// if tmp then
30882: LD_VAR 0 8
30886: IFFALSE 30929
// begin for i in tmp do
30888: LD_ADDR_VAR 0 7
30892: PUSH
30893: LD_VAR 0 8
30897: PUSH
30898: FOR_IN
30899: IFFALSE 30927
// if i [ 1 ] = b_ext_radio then
30901: LD_VAR 0 7
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PUSH
30910: LD_INT 22
30912: EQUAL
30913: IFFALSE 30925
// begin control := control_remote ;
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: LD_INT 2
30922: ST_TO_ADDR
// break ;
30923: GO 30927
// end ;
30925: GO 30898
30927: POP
30928: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 2
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: LD_VAR 0 4
30948: PPUSH
30949: LD_VAR 0 5
30953: PPUSH
30954: CALL_OW 448
30958: IFFALSE 30993
// begin result := [ chassis , engine , control , weapon ] ;
30960: LD_ADDR_VAR 0 6
30964: PUSH
30965: LD_VAR 0 2
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_VAR 0 4
30979: PUSH
30980: LD_VAR 0 5
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// exit ;
30991: GO 31405
// end ; _chassis := AvailableChassisList ( factory ) ;
30993: LD_ADDR_VAR 0 9
30997: PUSH
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 475
31007: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31008: LD_ADDR_VAR 0 11
31012: PUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL_OW 476
31022: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31023: LD_ADDR_VAR 0 12
31027: PUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: CALL_OW 477
31037: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31038: LD_ADDR_VAR 0 10
31042: PUSH
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 478
31052: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31053: LD_VAR 0 9
31057: NOT
31058: PUSH
31059: LD_VAR 0 11
31063: NOT
31064: OR
31065: PUSH
31066: LD_VAR 0 12
31070: NOT
31071: OR
31072: PUSH
31073: LD_VAR 0 10
31077: NOT
31078: OR
31079: IFFALSE 31114
// begin result := [ chassis , engine , control , weapon ] ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_VAR 0 2
31090: PUSH
31091: LD_VAR 0 3
31095: PUSH
31096: LD_VAR 0 4
31100: PUSH
31101: LD_VAR 0 5
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: ST_TO_ADDR
// exit ;
31112: GO 31405
// end ; if not chassis in _chassis then
31114: LD_VAR 0 2
31118: PUSH
31119: LD_VAR 0 9
31123: IN
31124: NOT
31125: IFFALSE 31151
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31127: LD_ADDR_VAR 0 2
31131: PUSH
31132: LD_VAR 0 9
31136: PUSH
31137: LD_INT 1
31139: PPUSH
31140: LD_VAR 0 9
31144: PPUSH
31145: CALL_OW 12
31149: ARRAY
31150: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31151: LD_VAR 0 2
31155: PPUSH
31156: LD_VAR 0 3
31160: PPUSH
31161: CALL 31410 0 2
31165: NOT
31166: IFFALSE 31225
// repeat engine := _engine [ 1 ] ;
31168: LD_ADDR_VAR 0 3
31172: PUSH
31173: LD_VAR 0 11
31177: PUSH
31178: LD_INT 1
31180: ARRAY
31181: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31182: LD_ADDR_VAR 0 11
31186: PUSH
31187: LD_VAR 0 11
31191: PPUSH
31192: LD_INT 1
31194: PPUSH
31195: CALL_OW 3
31199: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL 31410 0 2
31214: PUSH
31215: LD_VAR 0 11
31219: PUSH
31220: EMPTY
31221: EQUAL
31222: OR
31223: IFFALSE 31168
// if not control in _control then
31225: LD_VAR 0 4
31229: PUSH
31230: LD_VAR 0 12
31234: IN
31235: NOT
31236: IFFALSE 31262
// control := _control [ rand ( 1 , _control ) ] ;
31238: LD_ADDR_VAR 0 4
31242: PUSH
31243: LD_VAR 0 12
31247: PUSH
31248: LD_INT 1
31250: PPUSH
31251: LD_VAR 0 12
31255: PPUSH
31256: CALL_OW 12
31260: ARRAY
31261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31262: LD_VAR 0 2
31266: PPUSH
31267: LD_VAR 0 5
31271: PPUSH
31272: CALL 31630 0 2
31276: NOT
31277: IFFALSE 31336
// repeat weapon := _weapon [ 1 ] ;
31279: LD_ADDR_VAR 0 5
31283: PUSH
31284: LD_VAR 0 10
31288: PUSH
31289: LD_INT 1
31291: ARRAY
31292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31293: LD_ADDR_VAR 0 10
31297: PUSH
31298: LD_VAR 0 10
31302: PPUSH
31303: LD_INT 1
31305: PPUSH
31306: CALL_OW 3
31310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31311: LD_VAR 0 2
31315: PPUSH
31316: LD_VAR 0 5
31320: PPUSH
31321: CALL 31630 0 2
31325: PUSH
31326: LD_VAR 0 10
31330: PUSH
31331: EMPTY
31332: EQUAL
31333: OR
31334: IFFALSE 31279
// result := [ ] ;
31336: LD_ADDR_VAR 0 6
31340: PUSH
31341: EMPTY
31342: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31343: LD_VAR 0 1
31347: PPUSH
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: LD_VAR 0 4
31362: PPUSH
31363: LD_VAR 0 5
31367: PPUSH
31368: CALL_OW 448
31372: IFFALSE 31405
// result := [ chassis , engine , control , weapon ] ;
31374: LD_ADDR_VAR 0 6
31378: PUSH
31379: LD_VAR 0 2
31383: PUSH
31384: LD_VAR 0 3
31388: PUSH
31389: LD_VAR 0 4
31393: PUSH
31394: LD_VAR 0 5
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 6
31409: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31410: LD_INT 0
31412: PPUSH
// if not chassis or not engine then
31413: LD_VAR 0 1
31417: NOT
31418: PUSH
31419: LD_VAR 0 2
31423: NOT
31424: OR
31425: IFFALSE 31429
// exit ;
31427: GO 31625
// case engine of engine_solar :
31429: LD_VAR 0 2
31433: PUSH
31434: LD_INT 2
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31480
31442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 11
31450: PUSH
31451: LD_INT 12
31453: PUSH
31454: LD_INT 13
31456: PUSH
31457: LD_INT 14
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
31478: GO 31609
31480: LD_INT 1
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31550
31488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: LD_INT 11
31496: PUSH
31497: LD_INT 12
31499: PUSH
31500: LD_INT 13
31502: PUSH
31503: LD_INT 14
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: LD_INT 4
31517: PUSH
31518: LD_INT 5
31520: PUSH
31521: LD_INT 21
31523: PUSH
31524: LD_INT 23
31526: PUSH
31527: LD_INT 22
31529: PUSH
31530: LD_INT 24
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: ST_TO_ADDR
31548: GO 31609
31550: LD_INT 3
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31608
31558: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_INT 13
31566: PUSH
31567: LD_INT 14
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 4
31578: PUSH
31579: LD_INT 5
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 22
31587: PUSH
31588: LD_INT 23
31590: PUSH
31591: LD_INT 24
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: ST_TO_ADDR
31606: GO 31609
31608: POP
// result := ( chassis in result ) ;
31609: LD_ADDR_VAR 0 3
31613: PUSH
31614: LD_VAR 0 1
31618: PUSH
31619: LD_VAR 0 3
31623: IN
31624: ST_TO_ADDR
// end ;
31625: LD_VAR 0 3
31629: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31630: LD_INT 0
31632: PPUSH
// if not chassis or not weapon then
31633: LD_VAR 0 1
31637: NOT
31638: PUSH
31639: LD_VAR 0 2
31643: NOT
31644: OR
31645: IFFALSE 31649
// exit ;
31647: GO 32675
// case weapon of us_machine_gun :
31649: LD_VAR 0 2
31653: PUSH
31654: LD_INT 2
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31692
31662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 3
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 5
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
31690: GO 32659
31692: LD_INT 3
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31730
31700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 4
31717: PUSH
31718: LD_INT 5
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
31728: GO 32659
31730: LD_INT 11
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31768
31738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: LD_INT 3
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: LD_INT 5
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
31766: GO 32659
31768: LD_INT 4
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31802
31776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: LD_INT 4
31790: PUSH
31791: LD_INT 5
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 32659
31802: LD_INT 5
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31836
31810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 5
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
31834: GO 32659
31836: LD_INT 9
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31870
31844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32659
31870: LD_INT 7
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31904
31878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
31902: GO 32659
31904: LD_INT 12
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31938
31912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31913: LD_ADDR_VAR 0 3
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
31936: GO 32659
31938: LD_INT 13
31940: DOUBLE
31941: EQUAL
31942: IFTRUE 31946
31944: GO 31972
31946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 5
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
31970: GO 32659
31972: LD_INT 14
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 31998
31980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_INT 4
31988: PUSH
31989: LD_INT 5
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: ST_TO_ADDR
31996: GO 32659
31998: LD_INT 6
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32024
32006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32007: LD_ADDR_VAR 0 3
32011: PUSH
32012: LD_INT 4
32014: PUSH
32015: LD_INT 5
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: ST_TO_ADDR
32022: GO 32659
32024: LD_INT 10
32026: DOUBLE
32027: EQUAL
32028: IFTRUE 32032
32030: GO 32050
32032: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32033: LD_ADDR_VAR 0 3
32037: PUSH
32038: LD_INT 4
32040: PUSH
32041: LD_INT 5
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: ST_TO_ADDR
32048: GO 32659
32050: LD_INT 22
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32084
32058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_INT 11
32066: PUSH
32067: LD_INT 12
32069: PUSH
32070: LD_INT 13
32072: PUSH
32073: LD_INT 14
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: ST_TO_ADDR
32082: GO 32659
32084: LD_INT 23
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32118
32092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32093: LD_ADDR_VAR 0 3
32097: PUSH
32098: LD_INT 11
32100: PUSH
32101: LD_INT 12
32103: PUSH
32104: LD_INT 13
32106: PUSH
32107: LD_INT 14
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
32116: GO 32659
32118: LD_INT 24
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32152
32126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 11
32134: PUSH
32135: LD_INT 12
32137: PUSH
32138: LD_INT 13
32140: PUSH
32141: LD_INT 14
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
32150: GO 32659
32152: LD_INT 30
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32186
32160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: LD_INT 11
32168: PUSH
32169: LD_INT 12
32171: PUSH
32172: LD_INT 13
32174: PUSH
32175: LD_INT 14
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
32184: GO 32659
32186: LD_INT 25
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32212
32194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_INT 13
32202: PUSH
32203: LD_INT 14
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: ST_TO_ADDR
32210: GO 32659
32212: LD_INT 27
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32238
32220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32221: LD_ADDR_VAR 0 3
32225: PUSH
32226: LD_INT 13
32228: PUSH
32229: LD_INT 14
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: ST_TO_ADDR
32236: GO 32659
32238: LD_INT 28
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32264
32246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_INT 13
32254: PUSH
32255: LD_INT 14
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: ST_TO_ADDR
32262: GO 32659
32264: LD_INT 29
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32290
32272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 13
32280: PUSH
32281: LD_INT 14
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: ST_TO_ADDR
32288: GO 32659
32290: LD_INT 31
32292: DOUBLE
32293: EQUAL
32294: IFTRUE 32298
32296: GO 32316
32298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32299: LD_ADDR_VAR 0 3
32303: PUSH
32304: LD_INT 13
32306: PUSH
32307: LD_INT 14
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: ST_TO_ADDR
32314: GO 32659
32316: LD_INT 26
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32342
32324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32325: LD_ADDR_VAR 0 3
32329: PUSH
32330: LD_INT 13
32332: PUSH
32333: LD_INT 14
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: ST_TO_ADDR
32340: GO 32659
32342: LD_INT 42
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32376
32350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_INT 21
32358: PUSH
32359: LD_INT 22
32361: PUSH
32362: LD_INT 23
32364: PUSH
32365: LD_INT 24
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 32659
32376: LD_INT 43
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32410
32384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 21
32392: PUSH
32393: LD_INT 22
32395: PUSH
32396: LD_INT 23
32398: PUSH
32399: LD_INT 24
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
32408: GO 32659
32410: LD_INT 44
32412: DOUBLE
32413: EQUAL
32414: IFTRUE 32418
32416: GO 32444
32418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 21
32426: PUSH
32427: LD_INT 22
32429: PUSH
32430: LD_INT 23
32432: PUSH
32433: LD_INT 24
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
32442: GO 32659
32444: LD_INT 45
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32478
32452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 22
32463: PUSH
32464: LD_INT 23
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 32659
32478: LD_INT 49
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32512
32486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 22
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 24
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 32659
32512: LD_INT 51
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32546
32520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 21
32528: PUSH
32529: LD_INT 22
32531: PUSH
32532: LD_INT 23
32534: PUSH
32535: LD_INT 24
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 32659
32546: LD_INT 52
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32580
32554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 21
32562: PUSH
32563: LD_INT 22
32565: PUSH
32566: LD_INT 23
32568: PUSH
32569: LD_INT 24
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 32659
32580: LD_INT 53
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32606
32588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 23
32596: PUSH
32597: LD_INT 24
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: ST_TO_ADDR
32604: GO 32659
32606: LD_INT 46
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32632
32614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 23
32622: PUSH
32623: LD_INT 24
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: ST_TO_ADDR
32630: GO 32659
32632: LD_INT 47
32634: DOUBLE
32635: EQUAL
32636: IFTRUE 32640
32638: GO 32658
32640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_INT 23
32648: PUSH
32649: LD_INT 24
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 32659
32658: POP
// result := ( chassis in result ) ;
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_VAR 0 1
32668: PUSH
32669: LD_VAR 0 3
32673: IN
32674: ST_TO_ADDR
// end ;
32675: LD_VAR 0 3
32679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32680: LD_INT 0
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
// result := array ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 1
32698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32699: LD_VAR 0 1
32703: NOT
32704: PUSH
32705: LD_VAR 0 2
32709: NOT
32710: OR
32711: PUSH
32712: LD_VAR 0 3
32716: NOT
32717: OR
32718: PUSH
32719: LD_VAR 0 2
32723: PUSH
32724: LD_VAR 0 1
32728: GREATER
32729: OR
32730: PUSH
32731: LD_VAR 0 3
32735: PUSH
32736: LD_VAR 0 1
32740: GREATER
32741: OR
32742: IFFALSE 32746
// exit ;
32744: GO 33042
// if direction then
32746: LD_VAR 0 4
32750: IFFALSE 32814
// begin d := 1 ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// if i_from > i_to then
32760: LD_VAR 0 2
32764: PUSH
32765: LD_VAR 0 3
32769: GREATER
32770: IFFALSE 32796
// length := ( array - i_from ) + i_to else
32772: LD_ADDR_VAR 0 11
32776: PUSH
32777: LD_VAR 0 1
32781: PUSH
32782: LD_VAR 0 2
32786: MINUS
32787: PUSH
32788: LD_VAR 0 3
32792: PLUS
32793: ST_TO_ADDR
32794: GO 32812
// length := i_to - i_from ;
32796: LD_ADDR_VAR 0 11
32800: PUSH
32801: LD_VAR 0 3
32805: PUSH
32806: LD_VAR 0 2
32810: MINUS
32811: ST_TO_ADDR
// end else
32812: GO 32875
// begin d := - 1 ;
32814: LD_ADDR_VAR 0 9
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: ST_TO_ADDR
// if i_from > i_to then
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 3
32832: GREATER
32833: IFFALSE 32853
// length := i_from - i_to else
32835: LD_ADDR_VAR 0 11
32839: PUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_VAR 0 3
32849: MINUS
32850: ST_TO_ADDR
32851: GO 32875
// length := ( array - i_to ) + i_from ;
32853: LD_ADDR_VAR 0 11
32857: PUSH
32858: LD_VAR 0 1
32862: PUSH
32863: LD_VAR 0 3
32867: MINUS
32868: PUSH
32869: LD_VAR 0 2
32873: PLUS
32874: ST_TO_ADDR
// end ; if not length then
32875: LD_VAR 0 11
32879: NOT
32880: IFFALSE 32884
// exit ;
32882: GO 33042
// tmp := array ;
32884: LD_ADDR_VAR 0 10
32888: PUSH
32889: LD_VAR 0 1
32893: ST_TO_ADDR
// for i = 1 to length do
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: DOUBLE
32900: LD_INT 1
32902: DEC
32903: ST_TO_ADDR
32904: LD_VAR 0 11
32908: PUSH
32909: FOR_TO
32910: IFFALSE 33030
// begin for j = 1 to array do
32912: LD_ADDR_VAR 0 7
32916: PUSH
32917: DOUBLE
32918: LD_INT 1
32920: DEC
32921: ST_TO_ADDR
32922: LD_VAR 0 1
32926: PUSH
32927: FOR_TO
32928: IFFALSE 33016
// begin k := j + d ;
32930: LD_ADDR_VAR 0 8
32934: PUSH
32935: LD_VAR 0 7
32939: PUSH
32940: LD_VAR 0 9
32944: PLUS
32945: ST_TO_ADDR
// if k > array then
32946: LD_VAR 0 8
32950: PUSH
32951: LD_VAR 0 1
32955: GREATER
32956: IFFALSE 32966
// k := 1 ;
32958: LD_ADDR_VAR 0 8
32962: PUSH
32963: LD_INT 1
32965: ST_TO_ADDR
// if not k then
32966: LD_VAR 0 8
32970: NOT
32971: IFFALSE 32983
// k := array ;
32973: LD_ADDR_VAR 0 8
32977: PUSH
32978: LD_VAR 0 1
32982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32983: LD_ADDR_VAR 0 10
32987: PUSH
32988: LD_VAR 0 10
32992: PPUSH
32993: LD_VAR 0 8
32997: PPUSH
32998: LD_VAR 0 1
33002: PUSH
33003: LD_VAR 0 7
33007: ARRAY
33008: PPUSH
33009: CALL_OW 1
33013: ST_TO_ADDR
// end ;
33014: GO 32927
33016: POP
33017: POP
// array := tmp ;
33018: LD_ADDR_VAR 0 1
33022: PUSH
33023: LD_VAR 0 10
33027: ST_TO_ADDR
// end ;
33028: GO 32909
33030: POP
33031: POP
// result := array ;
33032: LD_ADDR_VAR 0 5
33036: PUSH
33037: LD_VAR 0 1
33041: ST_TO_ADDR
// end ;
33042: LD_VAR 0 5
33046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33047: LD_INT 0
33049: PPUSH
33050: PPUSH
// result := 0 ;
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_INT 0
33058: ST_TO_ADDR
// if not array or not value in array then
33059: LD_VAR 0 1
33063: NOT
33064: PUSH
33065: LD_VAR 0 2
33069: PUSH
33070: LD_VAR 0 1
33074: IN
33075: NOT
33076: OR
33077: IFFALSE 33081
// exit ;
33079: GO 33135
// for i = 1 to array do
33081: LD_ADDR_VAR 0 4
33085: PUSH
33086: DOUBLE
33087: LD_INT 1
33089: DEC
33090: ST_TO_ADDR
33091: LD_VAR 0 1
33095: PUSH
33096: FOR_TO
33097: IFFALSE 33133
// if value = array [ i ] then
33099: LD_VAR 0 2
33103: PUSH
33104: LD_VAR 0 1
33108: PUSH
33109: LD_VAR 0 4
33113: ARRAY
33114: EQUAL
33115: IFFALSE 33131
// begin result := i ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_VAR 0 4
33126: ST_TO_ADDR
// exit ;
33127: POP
33128: POP
33129: GO 33135
// end ;
33131: GO 33096
33133: POP
33134: POP
// end ;
33135: LD_VAR 0 3
33139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33140: LD_INT 0
33142: PPUSH
// vc_chassis := chassis ;
33143: LD_ADDR_OWVAR 37
33147: PUSH
33148: LD_VAR 0 1
33152: ST_TO_ADDR
// vc_engine := engine ;
33153: LD_ADDR_OWVAR 39
33157: PUSH
33158: LD_VAR 0 2
33162: ST_TO_ADDR
// vc_control := control ;
33163: LD_ADDR_OWVAR 38
33167: PUSH
33168: LD_VAR 0 3
33172: ST_TO_ADDR
// vc_weapon := weapon ;
33173: LD_ADDR_OWVAR 40
33177: PUSH
33178: LD_VAR 0 4
33182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33183: LD_ADDR_OWVAR 41
33187: PUSH
33188: LD_VAR 0 5
33192: ST_TO_ADDR
// end ;
33193: LD_VAR 0 6
33197: RET
// export function WantPlant ( unit ) ; var task ; begin
33198: LD_INT 0
33200: PPUSH
33201: PPUSH
// result := false ;
33202: LD_ADDR_VAR 0 2
33206: PUSH
33207: LD_INT 0
33209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 437
33224: ST_TO_ADDR
// if task then
33225: LD_VAR 0 3
33229: IFFALSE 33257
// if task [ 1 ] [ 1 ] = p then
33231: LD_VAR 0 3
33235: PUSH
33236: LD_INT 1
33238: ARRAY
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: PUSH
33244: LD_STRING p
33246: EQUAL
33247: IFFALSE 33257
// result := true ;
33249: LD_ADDR_VAR 0 2
33253: PUSH
33254: LD_INT 1
33256: ST_TO_ADDR
// end ;
33257: LD_VAR 0 2
33261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33262: LD_INT 0
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
// if pos < 1 then
33268: LD_VAR 0 2
33272: PUSH
33273: LD_INT 1
33275: LESS
33276: IFFALSE 33280
// exit ;
33278: GO 33583
// if pos = 1 then
33280: LD_VAR 0 2
33284: PUSH
33285: LD_INT 1
33287: EQUAL
33288: IFFALSE 33321
// result := Replace ( arr , pos [ 1 ] , value ) else
33290: LD_ADDR_VAR 0 4
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_VAR 0 2
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_VAR 0 3
33313: PPUSH
33314: CALL_OW 1
33318: ST_TO_ADDR
33319: GO 33583
// begin tmp := arr ;
33321: LD_ADDR_VAR 0 6
33325: PUSH
33326: LD_VAR 0 1
33330: ST_TO_ADDR
// s_arr := [ tmp ] ;
33331: LD_ADDR_VAR 0 7
33335: PUSH
33336: LD_VAR 0 6
33340: PUSH
33341: EMPTY
33342: LIST
33343: ST_TO_ADDR
// for i = 1 to pos - 1 do
33344: LD_ADDR_VAR 0 5
33348: PUSH
33349: DOUBLE
33350: LD_INT 1
33352: DEC
33353: ST_TO_ADDR
33354: LD_VAR 0 2
33358: PUSH
33359: LD_INT 1
33361: MINUS
33362: PUSH
33363: FOR_TO
33364: IFFALSE 33409
// begin tmp := tmp [ pos [ i ] ] ;
33366: LD_ADDR_VAR 0 6
33370: PUSH
33371: LD_VAR 0 6
33375: PUSH
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 5
33385: ARRAY
33386: ARRAY
33387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33388: LD_ADDR_VAR 0 7
33392: PUSH
33393: LD_VAR 0 7
33397: PUSH
33398: LD_VAR 0 6
33402: PUSH
33403: EMPTY
33404: LIST
33405: ADD
33406: ST_TO_ADDR
// end ;
33407: GO 33363
33409: POP
33410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33411: LD_ADDR_VAR 0 6
33415: PUSH
33416: LD_VAR 0 6
33420: PPUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_VAR 0 2
33430: ARRAY
33431: PPUSH
33432: LD_VAR 0 3
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33442: LD_ADDR_VAR 0 7
33446: PUSH
33447: LD_VAR 0 7
33451: PPUSH
33452: LD_VAR 0 7
33456: PPUSH
33457: LD_VAR 0 6
33461: PPUSH
33462: CALL_OW 1
33466: ST_TO_ADDR
// for i = s_arr downto 2 do
33467: LD_ADDR_VAR 0 5
33471: PUSH
33472: DOUBLE
33473: LD_VAR 0 7
33477: INC
33478: ST_TO_ADDR
33479: LD_INT 2
33481: PUSH
33482: FOR_DOWNTO
33483: IFFALSE 33567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33485: LD_ADDR_VAR 0 6
33489: PUSH
33490: LD_VAR 0 7
33494: PUSH
33495: LD_VAR 0 5
33499: PUSH
33500: LD_INT 1
33502: MINUS
33503: ARRAY
33504: PPUSH
33505: LD_VAR 0 2
33509: PUSH
33510: LD_VAR 0 5
33514: PUSH
33515: LD_INT 1
33517: MINUS
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 7
33524: PUSH
33525: LD_VAR 0 5
33529: ARRAY
33530: PPUSH
33531: CALL_OW 1
33535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33536: LD_ADDR_VAR 0 7
33540: PUSH
33541: LD_VAR 0 7
33545: PPUSH
33546: LD_VAR 0 5
33550: PUSH
33551: LD_INT 1
33553: MINUS
33554: PPUSH
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
// end ;
33565: GO 33482
33567: POP
33568: POP
// result := s_arr [ 1 ] ;
33569: LD_ADDR_VAR 0 4
33573: PUSH
33574: LD_VAR 0 7
33578: PUSH
33579: LD_INT 1
33581: ARRAY
33582: ST_TO_ADDR
// end ; end ;
33583: LD_VAR 0 4
33587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
// if not list then
33592: LD_VAR 0 1
33596: NOT
33597: IFFALSE 33601
// exit ;
33599: GO 33692
// i := list [ pos1 ] ;
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_VAR 0 1
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: ST_TO_ADDR
// if not i then
33617: LD_VAR 0 5
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 33692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33626: LD_ADDR_VAR 0 1
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: LD_VAR 0 2
33640: PPUSH
33641: LD_VAR 0 1
33645: PUSH
33646: LD_VAR 0 3
33650: ARRAY
33651: PPUSH
33652: CALL_OW 1
33656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33657: LD_ADDR_VAR 0 1
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
// result := list ;
33682: LD_ADDR_VAR 0 4
33686: PUSH
33687: LD_VAR 0 1
33691: ST_TO_ADDR
// end ;
33692: LD_VAR 0 4
33696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33697: LD_INT 0
33699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33700: LD_ADDR_VAR 0 5
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 250
33714: PPUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 251
33724: PPUSH
33725: LD_VAR 0 2
33729: PPUSH
33730: LD_VAR 0 3
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL 33750 0 5
33744: ST_TO_ADDR
// end ;
33745: LD_VAR 0 5
33749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
// if not list then
33756: LD_VAR 0 3
33760: NOT
33761: IFFALSE 33765
// exit ;
33763: GO 34153
// result := [ ] ;
33765: LD_ADDR_VAR 0 6
33769: PUSH
33770: EMPTY
33771: ST_TO_ADDR
// for i in list do
33772: LD_ADDR_VAR 0 7
33776: PUSH
33777: LD_VAR 0 3
33781: PUSH
33782: FOR_IN
33783: IFFALSE 33985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33785: LD_ADDR_VAR 0 9
33789: PUSH
33790: LD_VAR 0 7
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: LD_VAR 0 2
33804: PPUSH
33805: CALL_OW 297
33809: ST_TO_ADDR
// if not result then
33810: LD_VAR 0 6
33814: NOT
33815: IFFALSE 33841
// result := [ [ i , tmp ] ] else
33817: LD_ADDR_VAR 0 6
33821: PUSH
33822: LD_VAR 0 7
33826: PUSH
33827: LD_VAR 0 9
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: ST_TO_ADDR
33839: GO 33983
// begin if result [ result ] [ 2 ] < tmp then
33841: LD_VAR 0 6
33845: PUSH
33846: LD_VAR 0 6
33850: ARRAY
33851: PUSH
33852: LD_INT 2
33854: ARRAY
33855: PUSH
33856: LD_VAR 0 9
33860: LESS
33861: IFFALSE 33903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33863: LD_ADDR_VAR 0 6
33867: PUSH
33868: LD_VAR 0 6
33872: PPUSH
33873: LD_VAR 0 6
33877: PUSH
33878: LD_INT 1
33880: PLUS
33881: PPUSH
33882: LD_VAR 0 7
33886: PUSH
33887: LD_VAR 0 9
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PPUSH
33896: CALL_OW 2
33900: ST_TO_ADDR
33901: GO 33983
// for j = 1 to result do
33903: LD_ADDR_VAR 0 8
33907: PUSH
33908: DOUBLE
33909: LD_INT 1
33911: DEC
33912: ST_TO_ADDR
33913: LD_VAR 0 6
33917: PUSH
33918: FOR_TO
33919: IFFALSE 33981
// begin if tmp < result [ j ] [ 2 ] then
33921: LD_VAR 0 9
33925: PUSH
33926: LD_VAR 0 6
33930: PUSH
33931: LD_VAR 0 8
33935: ARRAY
33936: PUSH
33937: LD_INT 2
33939: ARRAY
33940: LESS
33941: IFFALSE 33979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33943: LD_ADDR_VAR 0 6
33947: PUSH
33948: LD_VAR 0 6
33952: PPUSH
33953: LD_VAR 0 8
33957: PPUSH
33958: LD_VAR 0 7
33962: PUSH
33963: LD_VAR 0 9
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PPUSH
33972: CALL_OW 2
33976: ST_TO_ADDR
// break ;
33977: GO 33981
// end ; end ;
33979: GO 33918
33981: POP
33982: POP
// end ; end ;
33983: GO 33782
33985: POP
33986: POP
// if result and not asc then
33987: LD_VAR 0 6
33991: PUSH
33992: LD_VAR 0 4
33996: NOT
33997: AND
33998: IFFALSE 34073
// begin tmp := result ;
34000: LD_ADDR_VAR 0 9
34004: PUSH
34005: LD_VAR 0 6
34009: ST_TO_ADDR
// for i = tmp downto 1 do
34010: LD_ADDR_VAR 0 7
34014: PUSH
34015: DOUBLE
34016: LD_VAR 0 9
34020: INC
34021: ST_TO_ADDR
34022: LD_INT 1
34024: PUSH
34025: FOR_DOWNTO
34026: IFFALSE 34071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34028: LD_ADDR_VAR 0 6
34032: PUSH
34033: LD_VAR 0 6
34037: PPUSH
34038: LD_VAR 0 9
34042: PUSH
34043: LD_VAR 0 7
34047: MINUS
34048: PUSH
34049: LD_INT 1
34051: PLUS
34052: PPUSH
34053: LD_VAR 0 9
34057: PUSH
34058: LD_VAR 0 7
34062: ARRAY
34063: PPUSH
34064: CALL_OW 1
34068: ST_TO_ADDR
34069: GO 34025
34071: POP
34072: POP
// end ; tmp := [ ] ;
34073: LD_ADDR_VAR 0 9
34077: PUSH
34078: EMPTY
34079: ST_TO_ADDR
// if mode then
34080: LD_VAR 0 5
34084: IFFALSE 34153
// begin for i = 1 to result do
34086: LD_ADDR_VAR 0 7
34090: PUSH
34091: DOUBLE
34092: LD_INT 1
34094: DEC
34095: ST_TO_ADDR
34096: LD_VAR 0 6
34100: PUSH
34101: FOR_TO
34102: IFFALSE 34141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34104: LD_ADDR_VAR 0 9
34108: PUSH
34109: LD_VAR 0 9
34113: PPUSH
34114: LD_VAR 0 7
34118: PPUSH
34119: LD_VAR 0 6
34123: PUSH
34124: LD_VAR 0 7
34128: ARRAY
34129: PUSH
34130: LD_INT 1
34132: ARRAY
34133: PPUSH
34134: CALL_OW 1
34138: ST_TO_ADDR
34139: GO 34101
34141: POP
34142: POP
// result := tmp ;
34143: LD_ADDR_VAR 0 6
34147: PUSH
34148: LD_VAR 0 9
34152: ST_TO_ADDR
// end ; end ;
34153: LD_VAR 0 6
34157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// if not x or not y then
34188: LD_VAR 0 2
34192: NOT
34193: PUSH
34194: LD_VAR 0 3
34198: NOT
34199: OR
34200: IFFALSE 34204
// exit ;
34202: GO 35850
// if not range then
34204: LD_VAR 0 4
34208: NOT
34209: IFFALSE 34219
// range := 10 ;
34211: LD_ADDR_VAR 0 4
34215: PUSH
34216: LD_INT 10
34218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34219: LD_ADDR_VAR 0 8
34223: PUSH
34224: LD_INT 81
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 92
34238: PUSH
34239: LD_VAR 0 2
34243: PUSH
34244: LD_VAR 0 3
34248: PUSH
34249: LD_VAR 0 4
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: LD_INT 21
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 69
34286: ST_TO_ADDR
// if not tmp then
34287: LD_VAR 0 8
34291: NOT
34292: IFFALSE 34296
// exit ;
34294: GO 35850
// for i in tmp do
34296: LD_ADDR_VAR 0 6
34300: PUSH
34301: LD_VAR 0 8
34305: PUSH
34306: FOR_IN
34307: IFFALSE 35825
// begin points := [ 0 , 0 , 0 ] ;
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
// bpoints := 1 ;
34328: LD_ADDR_VAR 0 10
34332: PUSH
34333: LD_INT 1
34335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 247
34345: PUSH
34346: LD_INT 1
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34932
34354: POP
// begin if GetClass ( i ) = 1 then
34355: LD_VAR 0 6
34359: PPUSH
34360: CALL_OW 257
34364: PUSH
34365: LD_INT 1
34367: EQUAL
34368: IFFALSE 34389
// points := [ 10 , 5 , 3 ] ;
34370: LD_ADDR_VAR 0 9
34374: PUSH
34375: LD_INT 10
34377: PUSH
34378: LD_INT 5
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34389: LD_VAR 0 6
34393: PPUSH
34394: CALL_OW 257
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 4
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: IN
34413: IFFALSE 34434
// points := [ 3 , 2 , 1 ] ;
34415: LD_ADDR_VAR 0 9
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34434: LD_VAR 0 6
34438: PPUSH
34439: CALL_OW 257
34443: PUSH
34444: LD_INT 5
34446: EQUAL
34447: IFFALSE 34468
// points := [ 130 , 5 , 2 ] ;
34449: LD_ADDR_VAR 0 9
34453: PUSH
34454: LD_INT 130
34456: PUSH
34457: LD_INT 5
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34468: LD_VAR 0 6
34472: PPUSH
34473: CALL_OW 257
34477: PUSH
34478: LD_INT 8
34480: EQUAL
34481: IFFALSE 34502
// points := [ 35 , 35 , 30 ] ;
34483: LD_ADDR_VAR 0 9
34487: PUSH
34488: LD_INT 35
34490: PUSH
34491: LD_INT 35
34493: PUSH
34494: LD_INT 30
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34502: LD_VAR 0 6
34506: PPUSH
34507: CALL_OW 257
34511: PUSH
34512: LD_INT 9
34514: EQUAL
34515: IFFALSE 34536
// points := [ 20 , 55 , 40 ] ;
34517: LD_ADDR_VAR 0 9
34521: PUSH
34522: LD_INT 20
34524: PUSH
34525: LD_INT 55
34527: PUSH
34528: LD_INT 40
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34536: LD_VAR 0 6
34540: PPUSH
34541: CALL_OW 257
34545: PUSH
34546: LD_INT 12
34548: PUSH
34549: LD_INT 16
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: IN
34556: IFFALSE 34577
// points := [ 5 , 3 , 2 ] ;
34558: LD_ADDR_VAR 0 9
34562: PUSH
34563: LD_INT 5
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34577: LD_VAR 0 6
34581: PPUSH
34582: CALL_OW 257
34586: PUSH
34587: LD_INT 17
34589: EQUAL
34590: IFFALSE 34611
// points := [ 100 , 50 , 75 ] ;
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_INT 100
34599: PUSH
34600: LD_INT 50
34602: PUSH
34603: LD_INT 75
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34611: LD_VAR 0 6
34615: PPUSH
34616: CALL_OW 257
34620: PUSH
34621: LD_INT 15
34623: EQUAL
34624: IFFALSE 34645
// points := [ 10 , 5 , 3 ] ;
34626: LD_ADDR_VAR 0 9
34630: PUSH
34631: LD_INT 10
34633: PUSH
34634: LD_INT 5
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34645: LD_VAR 0 6
34649: PPUSH
34650: CALL_OW 257
34654: PUSH
34655: LD_INT 14
34657: EQUAL
34658: IFFALSE 34679
// points := [ 10 , 0 , 0 ] ;
34660: LD_ADDR_VAR 0 9
34664: PUSH
34665: LD_INT 10
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34679: LD_VAR 0 6
34683: PPUSH
34684: CALL_OW 257
34688: PUSH
34689: LD_INT 11
34691: EQUAL
34692: IFFALSE 34713
// points := [ 30 , 10 , 5 ] ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_INT 30
34701: PUSH
34702: LD_INT 10
34704: PUSH
34705: LD_INT 5
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34713: LD_VAR 0 1
34717: PPUSH
34718: LD_INT 5
34720: PPUSH
34721: CALL_OW 321
34725: PUSH
34726: LD_INT 2
34728: EQUAL
34729: IFFALSE 34746
// bpoints := bpoints * 1.8 ;
34731: LD_ADDR_VAR 0 10
34735: PUSH
34736: LD_VAR 0 10
34740: PUSH
34741: LD_REAL  1.80000000000000E+0000
34744: MUL
34745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34746: LD_VAR 0 6
34750: PPUSH
34751: CALL_OW 257
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 2
34761: PUSH
34762: LD_INT 3
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: IN
34774: PUSH
34775: LD_VAR 0 1
34779: PPUSH
34780: LD_INT 51
34782: PPUSH
34783: CALL_OW 321
34787: PUSH
34788: LD_INT 2
34790: EQUAL
34791: AND
34792: IFFALSE 34809
// bpoints := bpoints * 1.2 ;
34794: LD_ADDR_VAR 0 10
34798: PUSH
34799: LD_VAR 0 10
34803: PUSH
34804: LD_REAL  1.20000000000000E+0000
34807: MUL
34808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34809: LD_VAR 0 6
34813: PPUSH
34814: CALL_OW 257
34818: PUSH
34819: LD_INT 5
34821: PUSH
34822: LD_INT 7
34824: PUSH
34825: LD_INT 9
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: IN
34833: PUSH
34834: LD_VAR 0 1
34838: PPUSH
34839: LD_INT 52
34841: PPUSH
34842: CALL_OW 321
34846: PUSH
34847: LD_INT 2
34849: EQUAL
34850: AND
34851: IFFALSE 34868
// bpoints := bpoints * 1.5 ;
34853: LD_ADDR_VAR 0 10
34857: PUSH
34858: LD_VAR 0 10
34862: PUSH
34863: LD_REAL  1.50000000000000E+0000
34866: MUL
34867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34868: LD_VAR 0 1
34872: PPUSH
34873: LD_INT 66
34875: PPUSH
34876: CALL_OW 321
34880: PUSH
34881: LD_INT 2
34883: EQUAL
34884: IFFALSE 34901
// bpoints := bpoints * 1.1 ;
34886: LD_ADDR_VAR 0 10
34890: PUSH
34891: LD_VAR 0 10
34895: PUSH
34896: LD_REAL  1.10000000000000E+0000
34899: MUL
34900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34901: LD_ADDR_VAR 0 10
34905: PUSH
34906: LD_VAR 0 10
34910: PUSH
34911: LD_VAR 0 6
34915: PPUSH
34916: LD_INT 1
34918: PPUSH
34919: CALL_OW 259
34923: PUSH
34924: LD_REAL  1.15000000000000E+0000
34927: MUL
34928: MUL
34929: ST_TO_ADDR
// end ; unit_vehicle :
34930: GO 35754
34932: LD_INT 2
34934: DOUBLE
34935: EQUAL
34936: IFTRUE 34940
34938: GO 35742
34940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34941: LD_VAR 0 6
34945: PPUSH
34946: CALL_OW 264
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 42
34956: PUSH
34957: LD_INT 24
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: IN
34965: IFFALSE 34986
// points := [ 25 , 5 , 3 ] ;
34967: LD_ADDR_VAR 0 9
34971: PUSH
34972: LD_INT 25
34974: PUSH
34975: LD_INT 5
34977: PUSH
34978: LD_INT 3
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34986: LD_VAR 0 6
34990: PPUSH
34991: CALL_OW 264
34995: PUSH
34996: LD_INT 4
34998: PUSH
34999: LD_INT 43
35001: PUSH
35002: LD_INT 25
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: IN
35010: IFFALSE 35031
// points := [ 40 , 15 , 5 ] ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_INT 40
35019: PUSH
35020: LD_INT 15
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35031: LD_VAR 0 6
35035: PPUSH
35036: CALL_OW 264
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 23
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: IN
35051: IFFALSE 35072
// points := [ 7 , 25 , 8 ] ;
35053: LD_ADDR_VAR 0 9
35057: PUSH
35058: LD_INT 7
35060: PUSH
35061: LD_INT 25
35063: PUSH
35064: LD_INT 8
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35072: LD_VAR 0 6
35076: PPUSH
35077: CALL_OW 264
35081: PUSH
35082: LD_INT 5
35084: PUSH
35085: LD_INT 27
35087: PUSH
35088: LD_INT 44
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: IN
35096: IFFALSE 35117
// points := [ 14 , 50 , 16 ] ;
35098: LD_ADDR_VAR 0 9
35102: PUSH
35103: LD_INT 14
35105: PUSH
35106: LD_INT 50
35108: PUSH
35109: LD_INT 16
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 264
35126: PUSH
35127: LD_INT 6
35129: PUSH
35130: LD_INT 46
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: IN
35137: IFFALSE 35158
// points := [ 32 , 120 , 70 ] ;
35139: LD_ADDR_VAR 0 9
35143: PUSH
35144: LD_INT 32
35146: PUSH
35147: LD_INT 120
35149: PUSH
35150: LD_INT 70
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35158: LD_VAR 0 6
35162: PPUSH
35163: CALL_OW 264
35167: PUSH
35168: LD_INT 7
35170: PUSH
35171: LD_INT 28
35173: PUSH
35174: LD_INT 45
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: IN
35182: IFFALSE 35203
// points := [ 35 , 20 , 45 ] ;
35184: LD_ADDR_VAR 0 9
35188: PUSH
35189: LD_INT 35
35191: PUSH
35192: LD_INT 20
35194: PUSH
35195: LD_INT 45
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35203: LD_VAR 0 6
35207: PPUSH
35208: CALL_OW 264
35212: PUSH
35213: LD_INT 47
35215: PUSH
35216: EMPTY
35217: LIST
35218: IN
35219: IFFALSE 35240
// points := [ 67 , 45 , 75 ] ;
35221: LD_ADDR_VAR 0 9
35225: PUSH
35226: LD_INT 67
35228: PUSH
35229: LD_INT 45
35231: PUSH
35232: LD_INT 75
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35240: LD_VAR 0 6
35244: PPUSH
35245: CALL_OW 264
35249: PUSH
35250: LD_INT 26
35252: PUSH
35253: EMPTY
35254: LIST
35255: IN
35256: IFFALSE 35277
// points := [ 120 , 30 , 80 ] ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_INT 120
35265: PUSH
35266: LD_INT 30
35268: PUSH
35269: LD_INT 80
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35277: LD_VAR 0 6
35281: PPUSH
35282: CALL_OW 264
35286: PUSH
35287: LD_INT 22
35289: PUSH
35290: EMPTY
35291: LIST
35292: IN
35293: IFFALSE 35314
// points := [ 40 , 1 , 1 ] ;
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_INT 40
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35314: LD_VAR 0 6
35318: PPUSH
35319: CALL_OW 264
35323: PUSH
35324: LD_INT 29
35326: PUSH
35327: EMPTY
35328: LIST
35329: IN
35330: IFFALSE 35351
// points := [ 70 , 200 , 400 ] ;
35332: LD_ADDR_VAR 0 9
35336: PUSH
35337: LD_INT 70
35339: PUSH
35340: LD_INT 200
35342: PUSH
35343: LD_INT 400
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35351: LD_VAR 0 6
35355: PPUSH
35356: CALL_OW 264
35360: PUSH
35361: LD_INT 14
35363: PUSH
35364: LD_INT 53
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: IN
35371: IFFALSE 35392
// points := [ 40 , 10 , 20 ] ;
35373: LD_ADDR_VAR 0 9
35377: PUSH
35378: LD_INT 40
35380: PUSH
35381: LD_INT 10
35383: PUSH
35384: LD_INT 20
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35392: LD_VAR 0 6
35396: PPUSH
35397: CALL_OW 264
35401: PUSH
35402: LD_INT 9
35404: PUSH
35405: EMPTY
35406: LIST
35407: IN
35408: IFFALSE 35429
// points := [ 5 , 70 , 20 ] ;
35410: LD_ADDR_VAR 0 9
35414: PUSH
35415: LD_INT 5
35417: PUSH
35418: LD_INT 70
35420: PUSH
35421: LD_INT 20
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35429: LD_VAR 0 6
35433: PPUSH
35434: CALL_OW 264
35438: PUSH
35439: LD_INT 10
35441: PUSH
35442: EMPTY
35443: LIST
35444: IN
35445: IFFALSE 35466
// points := [ 35 , 110 , 70 ] ;
35447: LD_ADDR_VAR 0 9
35451: PUSH
35452: LD_INT 35
35454: PUSH
35455: LD_INT 110
35457: PUSH
35458: LD_INT 70
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35466: LD_VAR 0 6
35470: PPUSH
35471: CALL_OW 265
35475: PUSH
35476: LD_INT 25
35478: EQUAL
35479: IFFALSE 35500
// points := [ 80 , 65 , 100 ] ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_INT 80
35488: PUSH
35489: LD_INT 65
35491: PUSH
35492: LD_INT 100
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35500: LD_VAR 0 6
35504: PPUSH
35505: CALL_OW 263
35509: PUSH
35510: LD_INT 1
35512: EQUAL
35513: IFFALSE 35548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35515: LD_ADDR_VAR 0 10
35519: PUSH
35520: LD_VAR 0 10
35524: PUSH
35525: LD_VAR 0 6
35529: PPUSH
35530: CALL_OW 311
35534: PPUSH
35535: LD_INT 3
35537: PPUSH
35538: CALL_OW 259
35542: PUSH
35543: LD_INT 4
35545: MUL
35546: MUL
35547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35548: LD_VAR 0 6
35552: PPUSH
35553: CALL_OW 263
35557: PUSH
35558: LD_INT 2
35560: EQUAL
35561: IFFALSE 35612
// begin j := IsControledBy ( i ) ;
35563: LD_ADDR_VAR 0 7
35567: PUSH
35568: LD_VAR 0 6
35572: PPUSH
35573: CALL_OW 312
35577: ST_TO_ADDR
// if j then
35578: LD_VAR 0 7
35582: IFFALSE 35612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35584: LD_ADDR_VAR 0 10
35588: PUSH
35589: LD_VAR 0 10
35593: PUSH
35594: LD_VAR 0 7
35598: PPUSH
35599: LD_INT 3
35601: PPUSH
35602: CALL_OW 259
35606: PUSH
35607: LD_INT 3
35609: MUL
35610: MUL
35611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 264
35621: PUSH
35622: LD_INT 5
35624: PUSH
35625: LD_INT 6
35627: PUSH
35628: LD_INT 46
35630: PUSH
35631: LD_INT 44
35633: PUSH
35634: LD_INT 47
35636: PUSH
35637: LD_INT 45
35639: PUSH
35640: LD_INT 28
35642: PUSH
35643: LD_INT 7
35645: PUSH
35646: LD_INT 27
35648: PUSH
35649: LD_INT 29
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: IN
35664: PUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: LD_INT 52
35672: PPUSH
35673: CALL_OW 321
35677: PUSH
35678: LD_INT 2
35680: EQUAL
35681: AND
35682: IFFALSE 35699
// bpoints := bpoints * 1.2 ;
35684: LD_ADDR_VAR 0 10
35688: PUSH
35689: LD_VAR 0 10
35693: PUSH
35694: LD_REAL  1.20000000000000E+0000
35697: MUL
35698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35699: LD_VAR 0 6
35703: PPUSH
35704: CALL_OW 264
35708: PUSH
35709: LD_INT 6
35711: PUSH
35712: LD_INT 46
35714: PUSH
35715: LD_INT 47
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: IN
35723: IFFALSE 35740
// bpoints := bpoints * 1.2 ;
35725: LD_ADDR_VAR 0 10
35729: PUSH
35730: LD_VAR 0 10
35734: PUSH
35735: LD_REAL  1.20000000000000E+0000
35738: MUL
35739: ST_TO_ADDR
// end ; unit_building :
35740: GO 35754
35742: LD_INT 3
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35753
35750: POP
// ; end ;
35751: GO 35754
35753: POP
// for j = 1 to 3 do
35754: LD_ADDR_VAR 0 7
35758: PUSH
35759: DOUBLE
35760: LD_INT 1
35762: DEC
35763: ST_TO_ADDR
35764: LD_INT 3
35766: PUSH
35767: FOR_TO
35768: IFFALSE 35821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35770: LD_ADDR_VAR 0 5
35774: PUSH
35775: LD_VAR 0 5
35779: PPUSH
35780: LD_VAR 0 7
35784: PPUSH
35785: LD_VAR 0 5
35789: PUSH
35790: LD_VAR 0 7
35794: ARRAY
35795: PUSH
35796: LD_VAR 0 9
35800: PUSH
35801: LD_VAR 0 7
35805: ARRAY
35806: PUSH
35807: LD_VAR 0 10
35811: MUL
35812: PLUS
35813: PPUSH
35814: CALL_OW 1
35818: ST_TO_ADDR
35819: GO 35767
35821: POP
35822: POP
// end ;
35823: GO 34306
35825: POP
35826: POP
// result := Replace ( result , 4 , tmp ) ;
35827: LD_ADDR_VAR 0 5
35831: PUSH
35832: LD_VAR 0 5
35836: PPUSH
35837: LD_INT 4
35839: PPUSH
35840: LD_VAR 0 8
35844: PPUSH
35845: CALL_OW 1
35849: ST_TO_ADDR
// end ;
35850: LD_VAR 0 5
35854: RET
// export function DangerAtRange ( unit , range ) ; begin
35855: LD_INT 0
35857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 255
35872: PPUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 250
35882: PPUSH
35883: LD_VAR 0 1
35887: PPUSH
35888: CALL_OW 251
35892: PPUSH
35893: LD_VAR 0 2
35897: PPUSH
35898: CALL 34158 0 4
35902: ST_TO_ADDR
// end ;
35903: LD_VAR 0 3
35907: RET
// export function DangerInArea ( side , area ) ; begin
35908: LD_INT 0
35910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_VAR 0 2
35920: PPUSH
35921: LD_INT 81
35923: PUSH
35924: LD_VAR 0 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PPUSH
35933: CALL_OW 70
35937: ST_TO_ADDR
// end ;
35938: LD_VAR 0 3
35942: RET
// export function IsExtension ( b ) ; begin
35943: LD_INT 0
35945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35946: LD_ADDR_VAR 0 2
35950: PUSH
35951: LD_VAR 0 1
35955: PUSH
35956: LD_INT 23
35958: PUSH
35959: LD_INT 20
35961: PUSH
35962: LD_INT 22
35964: PUSH
35965: LD_INT 17
35967: PUSH
35968: LD_INT 24
35970: PUSH
35971: LD_INT 21
35973: PUSH
35974: LD_INT 19
35976: PUSH
35977: LD_INT 16
35979: PUSH
35980: LD_INT 25
35982: PUSH
35983: LD_INT 18
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: IN
35998: ST_TO_ADDR
// end ;
35999: LD_VAR 0 2
36003: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36004: LD_INT 0
36006: PPUSH
36007: PPUSH
36008: PPUSH
// result := [ ] ;
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: EMPTY
36015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36016: LD_ADDR_VAR 0 4
36020: PUSH
36021: LD_VAR 0 2
36025: PPUSH
36026: LD_INT 21
36028: PUSH
36029: LD_INT 3
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL_OW 70
36040: ST_TO_ADDR
// if not tmp then
36041: LD_VAR 0 4
36045: NOT
36046: IFFALSE 36050
// exit ;
36048: GO 36108
// for i in tmp do
36050: LD_ADDR_VAR 0 5
36054: PUSH
36055: LD_VAR 0 4
36059: PUSH
36060: FOR_IN
36061: IFFALSE 36096
// if GetBase ( i ) <> base then
36063: LD_VAR 0 5
36067: PPUSH
36068: CALL_OW 274
36072: PUSH
36073: LD_VAR 0 1
36077: NONEQUAL
36078: IFFALSE 36094
// ComLinkToBase ( base , i ) ;
36080: LD_VAR 0 1
36084: PPUSH
36085: LD_VAR 0 5
36089: PPUSH
36090: CALL_OW 169
36094: GO 36060
36096: POP
36097: POP
// result := tmp ;
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_VAR 0 4
36107: ST_TO_ADDR
// end ;
36108: LD_VAR 0 3
36112: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36113: LD_INT 0
36115: PPUSH
36116: PPUSH
// if BuildingStatus ( b ) = bs_build then
36117: LD_VAR 0 2
36121: PPUSH
36122: CALL_OW 461
36126: PUSH
36127: LD_INT 1
36129: EQUAL
36130: IFFALSE 36190
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36132: LD_VAR 0 1
36136: PPUSH
36137: LD_STRING h
36139: PUSH
36140: LD_VAR 0 2
36144: PPUSH
36145: CALL_OW 250
36149: PUSH
36150: LD_VAR 0 2
36154: PPUSH
36155: CALL_OW 251
36159: PUSH
36160: LD_VAR 0 2
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: PPUSH
36186: CALL_OW 446
// end ;
36190: LD_VAR 0 3
36194: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36195: LD_INT 0
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36203: LD_VAR 0 1
36207: NOT
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 263
36218: PUSH
36219: LD_INT 2
36221: EQUAL
36222: NOT
36223: OR
36224: IFFALSE 36228
// exit ;
36226: GO 36544
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36228: LD_ADDR_VAR 0 6
36232: PUSH
36233: LD_INT 22
36235: PUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: CALL_OW 255
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 30
36255: PUSH
36256: LD_INT 36
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 34
36265: PUSH
36266: LD_INT 31
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PPUSH
36282: CALL_OW 69
36286: ST_TO_ADDR
// if not tmp then
36287: LD_VAR 0 6
36291: NOT
36292: IFFALSE 36296
// exit ;
36294: GO 36544
// result := [ ] ;
36296: LD_ADDR_VAR 0 2
36300: PUSH
36301: EMPTY
36302: ST_TO_ADDR
// for i in tmp do
36303: LD_ADDR_VAR 0 3
36307: PUSH
36308: LD_VAR 0 6
36312: PUSH
36313: FOR_IN
36314: IFFALSE 36385
// begin t := UnitsInside ( i ) ;
36316: LD_ADDR_VAR 0 4
36320: PUSH
36321: LD_VAR 0 3
36325: PPUSH
36326: CALL_OW 313
36330: ST_TO_ADDR
// if t then
36331: LD_VAR 0 4
36335: IFFALSE 36383
// for j in t do
36337: LD_ADDR_VAR 0 7
36341: PUSH
36342: LD_VAR 0 4
36346: PUSH
36347: FOR_IN
36348: IFFALSE 36381
// result := Insert ( result , result + 1 , j ) ;
36350: LD_ADDR_VAR 0 2
36354: PUSH
36355: LD_VAR 0 2
36359: PPUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_INT 1
36367: PLUS
36368: PPUSH
36369: LD_VAR 0 7
36373: PPUSH
36374: CALL_OW 2
36378: ST_TO_ADDR
36379: GO 36347
36381: POP
36382: POP
// end ;
36383: GO 36313
36385: POP
36386: POP
// if not result then
36387: LD_VAR 0 2
36391: NOT
36392: IFFALSE 36396
// exit ;
36394: GO 36544
// mech := result [ 1 ] ;
36396: LD_ADDR_VAR 0 5
36400: PUSH
36401: LD_VAR 0 2
36405: PUSH
36406: LD_INT 1
36408: ARRAY
36409: ST_TO_ADDR
// if result > 1 then
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 1
36417: GREATER
36418: IFFALSE 36530
// for i = 2 to result do
36420: LD_ADDR_VAR 0 3
36424: PUSH
36425: DOUBLE
36426: LD_INT 2
36428: DEC
36429: ST_TO_ADDR
36430: LD_VAR 0 2
36434: PUSH
36435: FOR_TO
36436: IFFALSE 36528
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_VAR 0 3
36452: ARRAY
36453: PPUSH
36454: LD_INT 3
36456: PPUSH
36457: CALL_OW 259
36461: PUSH
36462: LD_VAR 0 2
36466: PUSH
36467: LD_VAR 0 3
36471: ARRAY
36472: PPUSH
36473: CALL_OW 432
36477: MINUS
36478: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36479: LD_VAR 0 4
36483: PUSH
36484: LD_VAR 0 5
36488: PPUSH
36489: LD_INT 3
36491: PPUSH
36492: CALL_OW 259
36496: PUSH
36497: LD_VAR 0 5
36501: PPUSH
36502: CALL_OW 432
36506: MINUS
36507: GREATEREQUAL
36508: IFFALSE 36526
// mech := result [ i ] ;
36510: LD_ADDR_VAR 0 5
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_VAR 0 3
36524: ARRAY
36525: ST_TO_ADDR
// end ;
36526: GO 36435
36528: POP
36529: POP
// ComLinkTo ( vehicle , mech ) ;
36530: LD_VAR 0 1
36534: PPUSH
36535: LD_VAR 0 5
36539: PPUSH
36540: CALL_OW 135
// end ;
36544: LD_VAR 0 2
36548: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36549: LD_INT 0
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
// result := [ ] ;
36564: LD_ADDR_VAR 0 7
36568: PUSH
36569: EMPTY
36570: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 266
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: IN
36591: NOT
36592: IFFALSE 36596
// exit ;
36594: GO 38227
// if name then
36596: LD_VAR 0 3
36600: IFFALSE 36616
// SetBName ( base_dep , name ) ;
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: CALL_OW 500
// base := GetBase ( base_dep ) ;
36616: LD_ADDR_VAR 0 15
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 274
36630: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36631: LD_ADDR_VAR 0 16
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 255
36645: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36646: LD_ADDR_VAR 0 17
36650: PUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 248
36660: ST_TO_ADDR
// if sources then
36661: LD_VAR 0 5
36665: IFFALSE 36712
// for i = 1 to 3 do
36667: LD_ADDR_VAR 0 8
36671: PUSH
36672: DOUBLE
36673: LD_INT 1
36675: DEC
36676: ST_TO_ADDR
36677: LD_INT 3
36679: PUSH
36680: FOR_TO
36681: IFFALSE 36710
// AddResourceType ( base , i , sources [ i ] ) ;
36683: LD_VAR 0 15
36687: PPUSH
36688: LD_VAR 0 8
36692: PPUSH
36693: LD_VAR 0 5
36697: PUSH
36698: LD_VAR 0 8
36702: ARRAY
36703: PPUSH
36704: CALL_OW 276
36708: GO 36680
36710: POP
36711: POP
// buildings := GetBaseBuildings ( base , area ) ;
36712: LD_ADDR_VAR 0 18
36716: PUSH
36717: LD_VAR 0 15
36721: PPUSH
36722: LD_VAR 0 2
36726: PPUSH
36727: CALL 36004 0 2
36731: ST_TO_ADDR
// InitHc ;
36732: CALL_OW 19
// InitUc ;
36736: CALL_OW 18
// uc_side := side ;
36740: LD_ADDR_OWVAR 20
36744: PUSH
36745: LD_VAR 0 16
36749: ST_TO_ADDR
// uc_nation := nation ;
36750: LD_ADDR_OWVAR 21
36754: PUSH
36755: LD_VAR 0 17
36759: ST_TO_ADDR
// if buildings then
36760: LD_VAR 0 18
36764: IFFALSE 38086
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36766: LD_ADDR_VAR 0 19
36770: PUSH
36771: LD_VAR 0 18
36775: PPUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 30
36781: PUSH
36782: LD_INT 29
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 30
36791: PUSH
36792: LD_INT 30
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: PPUSH
36804: CALL_OW 72
36808: ST_TO_ADDR
// if tmp then
36809: LD_VAR 0 19
36813: IFFALSE 36861
// for i in tmp do
36815: LD_ADDR_VAR 0 8
36819: PUSH
36820: LD_VAR 0 19
36824: PUSH
36825: FOR_IN
36826: IFFALSE 36859
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36828: LD_VAR 0 8
36832: PPUSH
36833: CALL_OW 250
36837: PPUSH
36838: LD_VAR 0 8
36842: PPUSH
36843: CALL_OW 251
36847: PPUSH
36848: LD_VAR 0 16
36852: PPUSH
36853: CALL_OW 441
36857: GO 36825
36859: POP
36860: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36861: LD_VAR 0 18
36865: PPUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 30
36871: PUSH
36872: LD_INT 32
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 30
36881: PUSH
36882: LD_INT 33
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: PPUSH
36894: CALL_OW 72
36898: IFFALSE 36986
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36900: LD_ADDR_VAR 0 8
36904: PUSH
36905: LD_VAR 0 18
36909: PPUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 30
36915: PUSH
36916: LD_INT 32
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 33
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: PPUSH
36938: CALL_OW 72
36942: PUSH
36943: FOR_IN
36944: IFFALSE 36984
// begin if not GetBWeapon ( i ) then
36946: LD_VAR 0 8
36950: PPUSH
36951: CALL_OW 269
36955: NOT
36956: IFFALSE 36982
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36958: LD_VAR 0 8
36962: PPUSH
36963: LD_VAR 0 8
36967: PPUSH
36968: LD_VAR 0 2
36972: PPUSH
36973: CALL 38232 0 2
36977: PPUSH
36978: CALL_OW 431
// end ;
36982: GO 36943
36984: POP
36985: POP
// end ; for i = 1 to personel do
36986: LD_ADDR_VAR 0 8
36990: PUSH
36991: DOUBLE
36992: LD_INT 1
36994: DEC
36995: ST_TO_ADDR
36996: LD_VAR 0 6
37000: PUSH
37001: FOR_TO
37002: IFFALSE 38066
// begin if i > 4 then
37004: LD_VAR 0 8
37008: PUSH
37009: LD_INT 4
37011: GREATER
37012: IFFALSE 37016
// break ;
37014: GO 38066
// case i of 1 :
37016: LD_VAR 0 8
37020: PUSH
37021: LD_INT 1
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37029
37027: GO 37109
37029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37030: LD_ADDR_VAR 0 12
37034: PUSH
37035: LD_VAR 0 18
37039: PPUSH
37040: LD_INT 22
37042: PUSH
37043: LD_VAR 0 16
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 58
37054: PUSH
37055: EMPTY
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: LD_INT 30
37063: PUSH
37064: LD_INT 32
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 30
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 30
37083: PUSH
37084: LD_INT 5
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: PPUSH
37102: CALL_OW 72
37106: ST_TO_ADDR
37107: GO 37331
37109: LD_INT 2
37111: DOUBLE
37112: EQUAL
37113: IFTRUE 37117
37115: GO 37179
37117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37118: LD_ADDR_VAR 0 12
37122: PUSH
37123: LD_VAR 0 18
37127: PPUSH
37128: LD_INT 22
37130: PUSH
37131: LD_VAR 0 16
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 30
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 30
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PPUSH
37172: CALL_OW 72
37176: ST_TO_ADDR
37177: GO 37331
37179: LD_INT 3
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37249
37187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37188: LD_ADDR_VAR 0 12
37192: PUSH
37193: LD_VAR 0 18
37197: PPUSH
37198: LD_INT 22
37200: PUSH
37201: LD_VAR 0 16
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 72
37246: ST_TO_ADDR
37247: GO 37331
37249: LD_INT 4
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37330
37257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37258: LD_ADDR_VAR 0 12
37262: PUSH
37263: LD_VAR 0 18
37267: PPUSH
37268: LD_INT 22
37270: PUSH
37271: LD_VAR 0 16
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 6
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 30
37295: PUSH
37296: LD_INT 7
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 30
37305: PUSH
37306: LD_INT 8
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PPUSH
37323: CALL_OW 72
37327: ST_TO_ADDR
37328: GO 37331
37330: POP
// if i = 1 then
37331: LD_VAR 0 8
37335: PUSH
37336: LD_INT 1
37338: EQUAL
37339: IFFALSE 37450
// begin tmp := [ ] ;
37341: LD_ADDR_VAR 0 19
37345: PUSH
37346: EMPTY
37347: ST_TO_ADDR
// for j in f do
37348: LD_ADDR_VAR 0 9
37352: PUSH
37353: LD_VAR 0 12
37357: PUSH
37358: FOR_IN
37359: IFFALSE 37432
// if GetBType ( j ) = b_bunker then
37361: LD_VAR 0 9
37365: PPUSH
37366: CALL_OW 266
37370: PUSH
37371: LD_INT 32
37373: EQUAL
37374: IFFALSE 37401
// tmp := Insert ( tmp , 1 , j ) else
37376: LD_ADDR_VAR 0 19
37380: PUSH
37381: LD_VAR 0 19
37385: PPUSH
37386: LD_INT 1
37388: PPUSH
37389: LD_VAR 0 9
37393: PPUSH
37394: CALL_OW 2
37398: ST_TO_ADDR
37399: GO 37430
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37401: LD_ADDR_VAR 0 19
37405: PUSH
37406: LD_VAR 0 19
37410: PPUSH
37411: LD_VAR 0 19
37415: PUSH
37416: LD_INT 1
37418: PLUS
37419: PPUSH
37420: LD_VAR 0 9
37424: PPUSH
37425: CALL_OW 2
37429: ST_TO_ADDR
37430: GO 37358
37432: POP
37433: POP
// if tmp then
37434: LD_VAR 0 19
37438: IFFALSE 37450
// f := tmp ;
37440: LD_ADDR_VAR 0 12
37444: PUSH
37445: LD_VAR 0 19
37449: ST_TO_ADDR
// end ; x := personel [ i ] ;
37450: LD_ADDR_VAR 0 13
37454: PUSH
37455: LD_VAR 0 6
37459: PUSH
37460: LD_VAR 0 8
37464: ARRAY
37465: ST_TO_ADDR
// if x = - 1 then
37466: LD_VAR 0 13
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: EQUAL
37475: IFFALSE 37684
// begin for j in f do
37477: LD_ADDR_VAR 0 9
37481: PUSH
37482: LD_VAR 0 12
37486: PUSH
37487: FOR_IN
37488: IFFALSE 37680
// repeat InitHc ;
37490: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37494: LD_VAR 0 9
37498: PPUSH
37499: CALL_OW 266
37503: PUSH
37504: LD_INT 5
37506: EQUAL
37507: IFFALSE 37577
// begin if UnitsInside ( j ) < 3 then
37509: LD_VAR 0 9
37513: PPUSH
37514: CALL_OW 313
37518: PUSH
37519: LD_INT 3
37521: LESS
37522: IFFALSE 37558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37524: LD_INT 0
37526: PPUSH
37527: LD_INT 5
37529: PUSH
37530: LD_INT 8
37532: PUSH
37533: LD_INT 9
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: PUSH
37541: LD_VAR 0 17
37545: ARRAY
37546: PPUSH
37547: LD_VAR 0 4
37551: PPUSH
37552: CALL_OW 380
37556: GO 37575
// PrepareHuman ( false , i , skill ) ;
37558: LD_INT 0
37560: PPUSH
37561: LD_VAR 0 8
37565: PPUSH
37566: LD_VAR 0 4
37570: PPUSH
37571: CALL_OW 380
// end else
37575: GO 37594
// PrepareHuman ( false , i , skill ) ;
37577: LD_INT 0
37579: PPUSH
37580: LD_VAR 0 8
37584: PPUSH
37585: LD_VAR 0 4
37589: PPUSH
37590: CALL_OW 380
// un := CreateHuman ;
37594: LD_ADDR_VAR 0 14
37598: PUSH
37599: CALL_OW 44
37603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37604: LD_ADDR_VAR 0 7
37608: PUSH
37609: LD_VAR 0 7
37613: PPUSH
37614: LD_INT 1
37616: PPUSH
37617: LD_VAR 0 14
37621: PPUSH
37622: CALL_OW 2
37626: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37627: LD_VAR 0 14
37631: PPUSH
37632: LD_VAR 0 9
37636: PPUSH
37637: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37641: LD_VAR 0 9
37645: PPUSH
37646: CALL_OW 313
37650: PUSH
37651: LD_INT 6
37653: EQUAL
37654: PUSH
37655: LD_VAR 0 9
37659: PPUSH
37660: CALL_OW 266
37664: PUSH
37665: LD_INT 32
37667: PUSH
37668: LD_INT 31
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: IN
37675: OR
37676: IFFALSE 37490
37678: GO 37487
37680: POP
37681: POP
// end else
37682: GO 38064
// for j = 1 to x do
37684: LD_ADDR_VAR 0 9
37688: PUSH
37689: DOUBLE
37690: LD_INT 1
37692: DEC
37693: ST_TO_ADDR
37694: LD_VAR 0 13
37698: PUSH
37699: FOR_TO
37700: IFFALSE 38062
// begin InitHc ;
37702: CALL_OW 19
// if not f then
37706: LD_VAR 0 12
37710: NOT
37711: IFFALSE 37800
// begin PrepareHuman ( false , i , skill ) ;
37713: LD_INT 0
37715: PPUSH
37716: LD_VAR 0 8
37720: PPUSH
37721: LD_VAR 0 4
37725: PPUSH
37726: CALL_OW 380
// un := CreateHuman ;
37730: LD_ADDR_VAR 0 14
37734: PUSH
37735: CALL_OW 44
37739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37740: LD_ADDR_VAR 0 7
37744: PUSH
37745: LD_VAR 0 7
37749: PPUSH
37750: LD_INT 1
37752: PPUSH
37753: LD_VAR 0 14
37757: PPUSH
37758: CALL_OW 2
37762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37763: LD_VAR 0 14
37767: PPUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 250
37777: PPUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 251
37787: PPUSH
37788: LD_INT 10
37790: PPUSH
37791: LD_INT 0
37793: PPUSH
37794: CALL_OW 50
// continue ;
37798: GO 37699
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37800: LD_VAR 0 12
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PPUSH
37809: CALL_OW 313
37813: PUSH
37814: LD_VAR 0 12
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: CALL_OW 266
37827: PUSH
37828: LD_INT 32
37830: PUSH
37831: LD_INT 31
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: IN
37838: AND
37839: PUSH
37840: LD_VAR 0 12
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: CALL_OW 313
37853: PUSH
37854: LD_INT 6
37856: EQUAL
37857: OR
37858: IFFALSE 37878
// f := Delete ( f , 1 ) ;
37860: LD_ADDR_VAR 0 12
37864: PUSH
37865: LD_VAR 0 12
37869: PPUSH
37870: LD_INT 1
37872: PPUSH
37873: CALL_OW 3
37877: ST_TO_ADDR
// if not f then
37878: LD_VAR 0 12
37882: NOT
37883: IFFALSE 37901
// begin x := x + 2 ;
37885: LD_ADDR_VAR 0 13
37889: PUSH
37890: LD_VAR 0 13
37894: PUSH
37895: LD_INT 2
37897: PLUS
37898: ST_TO_ADDR
// continue ;
37899: GO 37699
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37901: LD_VAR 0 12
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: PPUSH
37910: CALL_OW 266
37914: PUSH
37915: LD_INT 5
37917: EQUAL
37918: IFFALSE 37992
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37920: LD_VAR 0 12
37924: PUSH
37925: LD_INT 1
37927: ARRAY
37928: PPUSH
37929: CALL_OW 313
37933: PUSH
37934: LD_INT 3
37936: LESS
37937: IFFALSE 37973
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37939: LD_INT 0
37941: PPUSH
37942: LD_INT 5
37944: PUSH
37945: LD_INT 8
37947: PUSH
37948: LD_INT 9
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: PUSH
37956: LD_VAR 0 17
37960: ARRAY
37961: PPUSH
37962: LD_VAR 0 4
37966: PPUSH
37967: CALL_OW 380
37971: GO 37990
// PrepareHuman ( false , i , skill ) ;
37973: LD_INT 0
37975: PPUSH
37976: LD_VAR 0 8
37980: PPUSH
37981: LD_VAR 0 4
37985: PPUSH
37986: CALL_OW 380
// end else
37990: GO 38009
// PrepareHuman ( false , i , skill ) ;
37992: LD_INT 0
37994: PPUSH
37995: LD_VAR 0 8
37999: PPUSH
38000: LD_VAR 0 4
38004: PPUSH
38005: CALL_OW 380
// un := CreateHuman ;
38009: LD_ADDR_VAR 0 14
38013: PUSH
38014: CALL_OW 44
38018: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38019: LD_ADDR_VAR 0 7
38023: PUSH
38024: LD_VAR 0 7
38028: PPUSH
38029: LD_INT 1
38031: PPUSH
38032: LD_VAR 0 14
38036: PPUSH
38037: CALL_OW 2
38041: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38042: LD_VAR 0 14
38046: PPUSH
38047: LD_VAR 0 12
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: CALL_OW 52
// end ;
38060: GO 37699
38062: POP
38063: POP
// end ;
38064: GO 37001
38066: POP
38067: POP
// result := result ^ buildings ;
38068: LD_ADDR_VAR 0 7
38072: PUSH
38073: LD_VAR 0 7
38077: PUSH
38078: LD_VAR 0 18
38082: ADD
38083: ST_TO_ADDR
// end else
38084: GO 38227
// begin for i = 1 to personel do
38086: LD_ADDR_VAR 0 8
38090: PUSH
38091: DOUBLE
38092: LD_INT 1
38094: DEC
38095: ST_TO_ADDR
38096: LD_VAR 0 6
38100: PUSH
38101: FOR_TO
38102: IFFALSE 38225
// begin if i > 4 then
38104: LD_VAR 0 8
38108: PUSH
38109: LD_INT 4
38111: GREATER
38112: IFFALSE 38116
// break ;
38114: GO 38225
// x := personel [ i ] ;
38116: LD_ADDR_VAR 0 13
38120: PUSH
38121: LD_VAR 0 6
38125: PUSH
38126: LD_VAR 0 8
38130: ARRAY
38131: ST_TO_ADDR
// if x = - 1 then
38132: LD_VAR 0 13
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: EQUAL
38141: IFFALSE 38145
// continue ;
38143: GO 38101
// PrepareHuman ( false , i , skill ) ;
38145: LD_INT 0
38147: PPUSH
38148: LD_VAR 0 8
38152: PPUSH
38153: LD_VAR 0 4
38157: PPUSH
38158: CALL_OW 380
// un := CreateHuman ;
38162: LD_ADDR_VAR 0 14
38166: PUSH
38167: CALL_OW 44
38171: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38172: LD_VAR 0 14
38176: PPUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 250
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 251
38196: PPUSH
38197: LD_INT 10
38199: PPUSH
38200: LD_INT 0
38202: PPUSH
38203: CALL_OW 50
// result := result ^ un ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: LD_VAR 0 7
38216: PUSH
38217: LD_VAR 0 14
38221: ADD
38222: ST_TO_ADDR
// end ;
38223: GO 38101
38225: POP
38226: POP
// end ; end ;
38227: LD_VAR 0 7
38231: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38232: LD_INT 0
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
// result := false ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_INT 0
38257: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38258: LD_VAR 0 1
38262: NOT
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 266
38273: PUSH
38274: LD_INT 32
38276: PUSH
38277: LD_INT 33
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: IN
38284: NOT
38285: OR
38286: IFFALSE 38290
// exit ;
38288: GO 39426
// nat := GetNation ( tower ) ;
38290: LD_ADDR_VAR 0 12
38294: PUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL_OW 248
38304: ST_TO_ADDR
// side := GetSide ( tower ) ;
38305: LD_ADDR_VAR 0 16
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 255
38319: ST_TO_ADDR
// x := GetX ( tower ) ;
38320: LD_ADDR_VAR 0 10
38324: PUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL_OW 250
38334: ST_TO_ADDR
// y := GetY ( tower ) ;
38335: LD_ADDR_VAR 0 11
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 251
38349: ST_TO_ADDR
// if not x or not y then
38350: LD_VAR 0 10
38354: NOT
38355: PUSH
38356: LD_VAR 0 11
38360: NOT
38361: OR
38362: IFFALSE 38366
// exit ;
38364: GO 39426
// weapon := 0 ;
38366: LD_ADDR_VAR 0 18
38370: PUSH
38371: LD_INT 0
38373: ST_TO_ADDR
// fac_list := [ ] ;
38374: LD_ADDR_VAR 0 17
38378: PUSH
38379: EMPTY
38380: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38381: LD_ADDR_VAR 0 6
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 274
38395: PPUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: CALL 36004 0 2
38405: PPUSH
38406: LD_INT 30
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PPUSH
38416: CALL_OW 72
38420: ST_TO_ADDR
// if not factories then
38421: LD_VAR 0 6
38425: NOT
38426: IFFALSE 38430
// exit ;
38428: GO 39426
// for i in factories do
38430: LD_ADDR_VAR 0 8
38434: PUSH
38435: LD_VAR 0 6
38439: PUSH
38440: FOR_IN
38441: IFFALSE 38466
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38443: LD_ADDR_VAR 0 17
38447: PUSH
38448: LD_VAR 0 17
38452: PUSH
38453: LD_VAR 0 8
38457: PPUSH
38458: CALL_OW 478
38462: UNION
38463: ST_TO_ADDR
38464: GO 38440
38466: POP
38467: POP
// if not fac_list then
38468: LD_VAR 0 17
38472: NOT
38473: IFFALSE 38477
// exit ;
38475: GO 39426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38477: LD_ADDR_VAR 0 5
38481: PUSH
38482: LD_INT 4
38484: PUSH
38485: LD_INT 5
38487: PUSH
38488: LD_INT 9
38490: PUSH
38491: LD_INT 10
38493: PUSH
38494: LD_INT 6
38496: PUSH
38497: LD_INT 7
38499: PUSH
38500: LD_INT 11
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 27
38514: PUSH
38515: LD_INT 28
38517: PUSH
38518: LD_INT 26
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 43
38532: PUSH
38533: LD_INT 44
38535: PUSH
38536: LD_INT 46
38538: PUSH
38539: LD_INT 45
38541: PUSH
38542: LD_INT 47
38544: PUSH
38545: LD_INT 49
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: LD_VAR 0 12
38565: ARRAY
38566: ST_TO_ADDR
// for i in list do
38567: LD_ADDR_VAR 0 8
38571: PUSH
38572: LD_VAR 0 5
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38611
// if not i in fac_list then
38580: LD_VAR 0 8
38584: PUSH
38585: LD_VAR 0 17
38589: IN
38590: NOT
38591: IFFALSE 38609
// list := list diff i ;
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_VAR 0 5
38602: PUSH
38603: LD_VAR 0 8
38607: DIFF
38608: ST_TO_ADDR
38609: GO 38577
38611: POP
38612: POP
// if not list then
38613: LD_VAR 0 5
38617: NOT
38618: IFFALSE 38622
// exit ;
38620: GO 39426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38622: LD_VAR 0 12
38626: PUSH
38627: LD_INT 3
38629: EQUAL
38630: PUSH
38631: LD_INT 49
38633: PUSH
38634: LD_VAR 0 5
38638: IN
38639: AND
38640: PUSH
38641: LD_INT 31
38643: PPUSH
38644: LD_VAR 0 16
38648: PPUSH
38649: CALL_OW 321
38653: PUSH
38654: LD_INT 2
38656: EQUAL
38657: AND
38658: IFFALSE 38718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38660: LD_INT 22
38662: PUSH
38663: LD_VAR 0 16
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 35
38674: PUSH
38675: LD_INT 49
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 91
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: LD_INT 10
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 69
38707: NOT
38708: IFFALSE 38718
// weapon := ru_time_lapser ;
38710: LD_ADDR_VAR 0 18
38714: PUSH
38715: LD_INT 49
38717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38718: LD_VAR 0 12
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: IN
38733: PUSH
38734: LD_INT 11
38736: PUSH
38737: LD_VAR 0 5
38741: IN
38742: PUSH
38743: LD_INT 30
38745: PUSH
38746: LD_VAR 0 5
38750: IN
38751: OR
38752: AND
38753: PUSH
38754: LD_INT 6
38756: PPUSH
38757: LD_VAR 0 16
38761: PPUSH
38762: CALL_OW 321
38766: PUSH
38767: LD_INT 2
38769: EQUAL
38770: AND
38771: IFFALSE 38936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38773: LD_INT 22
38775: PUSH
38776: LD_VAR 0 16
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: LD_INT 35
38790: PUSH
38791: LD_INT 11
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 35
38800: PUSH
38801: LD_INT 30
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 91
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_INT 18
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PPUSH
38834: CALL_OW 69
38838: NOT
38839: PUSH
38840: LD_INT 22
38842: PUSH
38843: LD_VAR 0 16
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 30
38857: PUSH
38858: LD_INT 32
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 30
38867: PUSH
38868: LD_INT 33
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 91
38882: PUSH
38883: LD_VAR 0 1
38887: PUSH
38888: LD_INT 12
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: PPUSH
38904: CALL_OW 69
38908: PUSH
38909: LD_INT 2
38911: GREATER
38912: AND
38913: IFFALSE 38936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38915: LD_ADDR_VAR 0 18
38919: PUSH
38920: LD_INT 11
38922: PUSH
38923: LD_INT 30
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_VAR 0 12
38934: ARRAY
38935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38936: LD_VAR 0 18
38940: NOT
38941: PUSH
38942: LD_INT 40
38944: PPUSH
38945: LD_VAR 0 16
38949: PPUSH
38950: CALL_OW 321
38954: PUSH
38955: LD_INT 2
38957: EQUAL
38958: AND
38959: PUSH
38960: LD_INT 7
38962: PUSH
38963: LD_VAR 0 5
38967: IN
38968: PUSH
38969: LD_INT 28
38971: PUSH
38972: LD_VAR 0 5
38976: IN
38977: OR
38978: PUSH
38979: LD_INT 45
38981: PUSH
38982: LD_VAR 0 5
38986: IN
38987: OR
38988: AND
38989: IFFALSE 39243
// begin hex := GetHexInfo ( x , y ) ;
38991: LD_ADDR_VAR 0 4
38995: PUSH
38996: LD_VAR 0 10
39000: PPUSH
39001: LD_VAR 0 11
39005: PPUSH
39006: CALL_OW 546
39010: ST_TO_ADDR
// if hex [ 1 ] then
39011: LD_VAR 0 4
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: IFFALSE 39023
// exit ;
39021: GO 39426
// height := hex [ 2 ] ;
39023: LD_ADDR_VAR 0 15
39027: PUSH
39028: LD_VAR 0 4
39032: PUSH
39033: LD_INT 2
39035: ARRAY
39036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39037: LD_ADDR_VAR 0 14
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 5
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// for i in tmp do
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: LD_VAR 0 14
39069: PUSH
39070: FOR_IN
39071: IFFALSE 39241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39073: LD_ADDR_VAR 0 9
39077: PUSH
39078: LD_VAR 0 10
39082: PPUSH
39083: LD_VAR 0 8
39087: PPUSH
39088: LD_INT 5
39090: PPUSH
39091: CALL_OW 272
39095: PUSH
39096: LD_VAR 0 11
39100: PPUSH
39101: LD_VAR 0 8
39105: PPUSH
39106: LD_INT 5
39108: PPUSH
39109: CALL_OW 273
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39118: LD_VAR 0 9
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: LD_VAR 0 9
39131: PUSH
39132: LD_INT 2
39134: ARRAY
39135: PPUSH
39136: CALL_OW 488
39140: IFFALSE 39239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39142: LD_ADDR_VAR 0 4
39146: PUSH
39147: LD_VAR 0 9
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PPUSH
39156: LD_VAR 0 9
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: PPUSH
39165: CALL_OW 546
39169: ST_TO_ADDR
// if hex [ 1 ] then
39170: LD_VAR 0 4
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: IFFALSE 39182
// continue ;
39180: GO 39070
// h := hex [ 2 ] ;
39182: LD_ADDR_VAR 0 13
39186: PUSH
39187: LD_VAR 0 4
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: ST_TO_ADDR
// if h + 7 < height then
39196: LD_VAR 0 13
39200: PUSH
39201: LD_INT 7
39203: PLUS
39204: PUSH
39205: LD_VAR 0 15
39209: LESS
39210: IFFALSE 39239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39212: LD_ADDR_VAR 0 18
39216: PUSH
39217: LD_INT 7
39219: PUSH
39220: LD_INT 28
39222: PUSH
39223: LD_INT 45
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: PUSH
39231: LD_VAR 0 12
39235: ARRAY
39236: ST_TO_ADDR
// break ;
39237: GO 39241
// end ; end ; end ;
39239: GO 39070
39241: POP
39242: POP
// end ; if not weapon then
39243: LD_VAR 0 18
39247: NOT
39248: IFFALSE 39308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 5
39259: PUSH
39260: LD_INT 11
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: LD_INT 49
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: DIFF
39274: ST_TO_ADDR
// if not list then
39275: LD_VAR 0 5
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39426
// weapon := list [ rand ( 1 , list ) ] ;
39284: LD_ADDR_VAR 0 18
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: LD_INT 1
39296: PPUSH
39297: LD_VAR 0 5
39301: PPUSH
39302: CALL_OW 12
39306: ARRAY
39307: ST_TO_ADDR
// end ; if weapon then
39308: LD_VAR 0 18
39312: IFFALSE 39426
// begin tmp := CostOfWeapon ( weapon ) ;
39314: LD_ADDR_VAR 0 14
39318: PUSH
39319: LD_VAR 0 18
39323: PPUSH
39324: CALL_OW 451
39328: ST_TO_ADDR
// j := GetBase ( tower ) ;
39329: LD_ADDR_VAR 0 9
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 274
39343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39344: LD_VAR 0 9
39348: PPUSH
39349: LD_INT 1
39351: PPUSH
39352: CALL_OW 275
39356: PUSH
39357: LD_VAR 0 14
39361: PUSH
39362: LD_INT 1
39364: ARRAY
39365: GREATEREQUAL
39366: PUSH
39367: LD_VAR 0 9
39371: PPUSH
39372: LD_INT 2
39374: PPUSH
39375: CALL_OW 275
39379: PUSH
39380: LD_VAR 0 14
39384: PUSH
39385: LD_INT 2
39387: ARRAY
39388: GREATEREQUAL
39389: AND
39390: PUSH
39391: LD_VAR 0 9
39395: PPUSH
39396: LD_INT 3
39398: PPUSH
39399: CALL_OW 275
39403: PUSH
39404: LD_VAR 0 14
39408: PUSH
39409: LD_INT 3
39411: ARRAY
39412: GREATEREQUAL
39413: AND
39414: IFFALSE 39426
// result := weapon ;
39416: LD_ADDR_VAR 0 3
39420: PUSH
39421: LD_VAR 0 18
39425: ST_TO_ADDR
// end ; end ;
39426: LD_VAR 0 3
39430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39431: LD_INT 0
39433: PPUSH
39434: PPUSH
// result := true ;
39435: LD_ADDR_VAR 0 3
39439: PUSH
39440: LD_INT 1
39442: ST_TO_ADDR
// if array1 = array2 then
39443: LD_VAR 0 1
39447: PUSH
39448: LD_VAR 0 2
39452: EQUAL
39453: IFFALSE 39513
// begin for i = 1 to array1 do
39455: LD_ADDR_VAR 0 4
39459: PUSH
39460: DOUBLE
39461: LD_INT 1
39463: DEC
39464: ST_TO_ADDR
39465: LD_VAR 0 1
39469: PUSH
39470: FOR_TO
39471: IFFALSE 39509
// if array1 [ i ] <> array2 [ i ] then
39473: LD_VAR 0 1
39477: PUSH
39478: LD_VAR 0 4
39482: ARRAY
39483: PUSH
39484: LD_VAR 0 2
39488: PUSH
39489: LD_VAR 0 4
39493: ARRAY
39494: NONEQUAL
39495: IFFALSE 39507
// begin result := false ;
39497: LD_ADDR_VAR 0 3
39501: PUSH
39502: LD_INT 0
39504: ST_TO_ADDR
// break ;
39505: GO 39509
// end ;
39507: GO 39470
39509: POP
39510: POP
// end else
39511: GO 39521
// result := false ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 0
39520: ST_TO_ADDR
// end ;
39521: LD_VAR 0 3
39525: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39526: LD_INT 0
39528: PPUSH
39529: PPUSH
39530: PPUSH
// pom := GetBase ( fac ) ;
39531: LD_ADDR_VAR 0 5
39535: PUSH
39536: LD_VAR 0 1
39540: PPUSH
39541: CALL_OW 274
39545: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: PPUSH
39560: LD_VAR 0 2
39564: PUSH
39565: LD_INT 2
39567: ARRAY
39568: PPUSH
39569: LD_VAR 0 2
39573: PUSH
39574: LD_INT 3
39576: ARRAY
39577: PPUSH
39578: LD_VAR 0 2
39582: PUSH
39583: LD_INT 4
39585: ARRAY
39586: PPUSH
39587: CALL_OW 449
39591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_VAR 0 5
39601: PPUSH
39602: LD_INT 1
39604: PPUSH
39605: CALL_OW 275
39609: PUSH
39610: LD_VAR 0 4
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: GREATEREQUAL
39619: PUSH
39620: LD_VAR 0 5
39624: PPUSH
39625: LD_INT 2
39627: PPUSH
39628: CALL_OW 275
39632: PUSH
39633: LD_VAR 0 4
39637: PUSH
39638: LD_INT 2
39640: ARRAY
39641: GREATEREQUAL
39642: AND
39643: PUSH
39644: LD_VAR 0 5
39648: PPUSH
39649: LD_INT 3
39651: PPUSH
39652: CALL_OW 275
39656: PUSH
39657: LD_VAR 0 4
39661: PUSH
39662: LD_INT 3
39664: ARRAY
39665: GREATEREQUAL
39666: AND
39667: ST_TO_ADDR
// end ;
39668: LD_VAR 0 3
39672: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39673: LD_INT 0
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
// pom := GetBase ( building ) ;
39679: LD_ADDR_VAR 0 3
39683: PUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 274
39693: ST_TO_ADDR
// if not pom then
39694: LD_VAR 0 3
39698: NOT
39699: IFFALSE 39703
// exit ;
39701: GO 39873
// btype := GetBType ( building ) ;
39703: LD_ADDR_VAR 0 5
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 266
39717: ST_TO_ADDR
// if btype = b_armoury then
39718: LD_VAR 0 5
39722: PUSH
39723: LD_INT 4
39725: EQUAL
39726: IFFALSE 39736
// btype := b_barracks ;
39728: LD_ADDR_VAR 0 5
39732: PUSH
39733: LD_INT 5
39735: ST_TO_ADDR
// if btype = b_depot then
39736: LD_VAR 0 5
39740: PUSH
39741: LD_INT 0
39743: EQUAL
39744: IFFALSE 39754
// btype := b_warehouse ;
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_INT 1
39753: ST_TO_ADDR
// if btype = b_workshop then
39754: LD_VAR 0 5
39758: PUSH
39759: LD_INT 2
39761: EQUAL
39762: IFFALSE 39772
// btype := b_factory ;
39764: LD_ADDR_VAR 0 5
39768: PUSH
39769: LD_INT 3
39771: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39772: LD_ADDR_VAR 0 4
39776: PUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 248
39791: PPUSH
39792: CALL_OW 450
39796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39797: LD_ADDR_VAR 0 2
39801: PUSH
39802: LD_VAR 0 3
39806: PPUSH
39807: LD_INT 1
39809: PPUSH
39810: CALL_OW 275
39814: PUSH
39815: LD_VAR 0 4
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: GREATEREQUAL
39824: PUSH
39825: LD_VAR 0 3
39829: PPUSH
39830: LD_INT 2
39832: PPUSH
39833: CALL_OW 275
39837: PUSH
39838: LD_VAR 0 4
39842: PUSH
39843: LD_INT 2
39845: ARRAY
39846: GREATEREQUAL
39847: AND
39848: PUSH
39849: LD_VAR 0 3
39853: PPUSH
39854: LD_INT 3
39856: PPUSH
39857: CALL_OW 275
39861: PUSH
39862: LD_VAR 0 4
39866: PUSH
39867: LD_INT 3
39869: ARRAY
39870: GREATEREQUAL
39871: AND
39872: ST_TO_ADDR
// end ;
39873: LD_VAR 0 2
39877: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39878: LD_INT 0
39880: PPUSH
39881: PPUSH
39882: PPUSH
// pom := GetBase ( building ) ;
39883: LD_ADDR_VAR 0 4
39887: PUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 274
39897: ST_TO_ADDR
// if not pom then
39898: LD_VAR 0 4
39902: NOT
39903: IFFALSE 39907
// exit ;
39905: GO 40008
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39907: LD_ADDR_VAR 0 5
39911: PUSH
39912: LD_VAR 0 2
39916: PPUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 248
39926: PPUSH
39927: CALL_OW 450
39931: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39932: LD_ADDR_VAR 0 3
39936: PUSH
39937: LD_VAR 0 4
39941: PPUSH
39942: LD_INT 1
39944: PPUSH
39945: CALL_OW 275
39949: PUSH
39950: LD_VAR 0 5
39954: PUSH
39955: LD_INT 1
39957: ARRAY
39958: GREATEREQUAL
39959: PUSH
39960: LD_VAR 0 4
39964: PPUSH
39965: LD_INT 2
39967: PPUSH
39968: CALL_OW 275
39972: PUSH
39973: LD_VAR 0 5
39977: PUSH
39978: LD_INT 2
39980: ARRAY
39981: GREATEREQUAL
39982: AND
39983: PUSH
39984: LD_VAR 0 4
39988: PPUSH
39989: LD_INT 3
39991: PPUSH
39992: CALL_OW 275
39996: PUSH
39997: LD_VAR 0 5
40001: PUSH
40002: LD_INT 3
40004: ARRAY
40005: GREATEREQUAL
40006: AND
40007: ST_TO_ADDR
// end ;
40008: LD_VAR 0 3
40012: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40013: LD_INT 0
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
// result := false ;
40025: LD_ADDR_VAR 0 6
40029: PUSH
40030: LD_INT 0
40032: ST_TO_ADDR
// if not base or not btype or not x or not y then
40033: LD_VAR 0 1
40037: NOT
40038: PUSH
40039: LD_VAR 0 2
40043: NOT
40044: OR
40045: PUSH
40046: LD_VAR 0 3
40050: NOT
40051: OR
40052: PUSH
40053: LD_VAR 0 4
40057: NOT
40058: OR
40059: IFFALSE 40063
// exit ;
40061: GO 40672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40063: LD_ADDR_VAR 0 12
40067: PUSH
40068: LD_VAR 0 2
40072: PPUSH
40073: LD_VAR 0 3
40077: PPUSH
40078: LD_VAR 0 4
40082: PPUSH
40083: LD_VAR 0 5
40087: PPUSH
40088: LD_VAR 0 1
40092: PUSH
40093: LD_INT 1
40095: ARRAY
40096: PPUSH
40097: CALL_OW 248
40101: PPUSH
40102: LD_INT 0
40104: PPUSH
40105: CALL 41509 0 6
40109: ST_TO_ADDR
// if not hexes then
40110: LD_VAR 0 12
40114: NOT
40115: IFFALSE 40119
// exit ;
40117: GO 40672
// for i = 1 to hexes do
40119: LD_ADDR_VAR 0 7
40123: PUSH
40124: DOUBLE
40125: LD_INT 1
40127: DEC
40128: ST_TO_ADDR
40129: LD_VAR 0 12
40133: PUSH
40134: FOR_TO
40135: IFFALSE 40670
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40137: LD_ADDR_VAR 0 11
40141: PUSH
40142: LD_VAR 0 12
40146: PUSH
40147: LD_VAR 0 7
40151: ARRAY
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: PPUSH
40157: LD_VAR 0 12
40161: PUSH
40162: LD_VAR 0 7
40166: ARRAY
40167: PUSH
40168: LD_INT 2
40170: ARRAY
40171: PPUSH
40172: CALL_OW 428
40176: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40177: LD_VAR 0 12
40181: PUSH
40182: LD_VAR 0 7
40186: ARRAY
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: LD_VAR 0 12
40196: PUSH
40197: LD_VAR 0 7
40201: ARRAY
40202: PUSH
40203: LD_INT 2
40205: ARRAY
40206: PPUSH
40207: CALL_OW 351
40211: PUSH
40212: LD_VAR 0 12
40216: PUSH
40217: LD_VAR 0 7
40221: ARRAY
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 12
40231: PUSH
40232: LD_VAR 0 7
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 488
40246: NOT
40247: OR
40248: PUSH
40249: LD_VAR 0 11
40253: PPUSH
40254: CALL_OW 247
40258: PUSH
40259: LD_INT 3
40261: EQUAL
40262: OR
40263: IFFALSE 40269
// exit ;
40265: POP
40266: POP
40267: GO 40672
// if not tmp or not tmp in base then
40269: LD_VAR 0 11
40273: NOT
40274: PUSH
40275: LD_VAR 0 11
40279: PUSH
40280: LD_VAR 0 1
40284: IN
40285: NOT
40286: OR
40287: IFFALSE 40291
// continue ;
40289: GO 40134
// result := true ;
40291: LD_ADDR_VAR 0 6
40295: PUSH
40296: LD_INT 1
40298: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40299: LD_ADDR_VAR 0 15
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: LD_INT 22
40311: PUSH
40312: LD_VAR 0 11
40316: PPUSH
40317: CALL_OW 255
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 30
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 30
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PPUSH
40358: CALL_OW 72
40362: ST_TO_ADDR
// if dep then
40363: LD_VAR 0 15
40367: IFFALSE 40503
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40369: LD_ADDR_VAR 0 14
40373: PUSH
40374: LD_VAR 0 15
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: CALL_OW 250
40387: PPUSH
40388: LD_VAR 0 15
40392: PUSH
40393: LD_INT 1
40395: ARRAY
40396: PPUSH
40397: CALL_OW 254
40401: PPUSH
40402: LD_INT 5
40404: PPUSH
40405: CALL_OW 272
40409: PUSH
40410: LD_VAR 0 15
40414: PUSH
40415: LD_INT 1
40417: ARRAY
40418: PPUSH
40419: CALL_OW 251
40423: PPUSH
40424: LD_VAR 0 15
40428: PUSH
40429: LD_INT 1
40431: ARRAY
40432: PPUSH
40433: CALL_OW 254
40437: PPUSH
40438: LD_INT 5
40440: PPUSH
40441: CALL_OW 273
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40450: LD_VAR 0 14
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: PPUSH
40459: LD_VAR 0 14
40463: PUSH
40464: LD_INT 2
40466: ARRAY
40467: PPUSH
40468: CALL_OW 488
40472: IFFALSE 40503
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40474: LD_VAR 0 11
40478: PPUSH
40479: LD_VAR 0 14
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 14
40492: PUSH
40493: LD_INT 2
40495: ARRAY
40496: PPUSH
40497: CALL_OW 111
// continue ;
40501: GO 40134
// end ; end ; r := GetDir ( tmp ) ;
40503: LD_ADDR_VAR 0 13
40507: PUSH
40508: LD_VAR 0 11
40512: PPUSH
40513: CALL_OW 254
40517: ST_TO_ADDR
// if r = 5 then
40518: LD_VAR 0 13
40522: PUSH
40523: LD_INT 5
40525: EQUAL
40526: IFFALSE 40536
// r := 0 ;
40528: LD_ADDR_VAR 0 13
40532: PUSH
40533: LD_INT 0
40535: ST_TO_ADDR
// for j = r to 5 do
40536: LD_ADDR_VAR 0 8
40540: PUSH
40541: DOUBLE
40542: LD_VAR 0 13
40546: DEC
40547: ST_TO_ADDR
40548: LD_INT 5
40550: PUSH
40551: FOR_TO
40552: IFFALSE 40666
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: LD_VAR 0 11
40563: PPUSH
40564: CALL_OW 250
40568: PPUSH
40569: LD_VAR 0 8
40573: PPUSH
40574: LD_INT 2
40576: PPUSH
40577: CALL_OW 272
40581: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40582: LD_ADDR_VAR 0 10
40586: PUSH
40587: LD_VAR 0 11
40591: PPUSH
40592: CALL_OW 251
40596: PPUSH
40597: LD_VAR 0 8
40601: PPUSH
40602: LD_INT 2
40604: PPUSH
40605: CALL_OW 273
40609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40610: LD_VAR 0 9
40614: PPUSH
40615: LD_VAR 0 10
40619: PPUSH
40620: CALL_OW 488
40624: PUSH
40625: LD_VAR 0 9
40629: PPUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: CALL_OW 428
40639: NOT
40640: AND
40641: IFFALSE 40664
// begin ComMoveXY ( tmp , _x , _y ) ;
40643: LD_VAR 0 11
40647: PPUSH
40648: LD_VAR 0 9
40652: PPUSH
40653: LD_VAR 0 10
40657: PPUSH
40658: CALL_OW 111
// break ;
40662: GO 40666
// end ; end ;
40664: GO 40551
40666: POP
40667: POP
// end ;
40668: GO 40134
40670: POP
40671: POP
// end ;
40672: LD_VAR 0 6
40676: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// result := false ;
40689: LD_ADDR_VAR 0 6
40693: PUSH
40694: LD_INT 0
40696: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40697: LD_VAR 0 1
40701: NOT
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 266
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: IN
40723: NOT
40724: OR
40725: PUSH
40726: LD_VAR 0 2
40730: NOT
40731: OR
40732: PUSH
40733: LD_VAR 0 5
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 3
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: IN
40764: NOT
40765: OR
40766: PUSH
40767: LD_VAR 0 3
40771: PPUSH
40772: LD_VAR 0 4
40776: PPUSH
40777: CALL_OW 488
40781: NOT
40782: OR
40783: IFFALSE 40787
// exit ;
40785: GO 41504
// pom := GetBase ( depot ) ;
40787: LD_ADDR_VAR 0 10
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: CALL_OW 274
40801: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40802: LD_ADDR_VAR 0 11
40806: PUSH
40807: LD_VAR 0 2
40811: PPUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 248
40821: PPUSH
40822: CALL_OW 450
40826: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40827: LD_VAR 0 10
40831: PPUSH
40832: LD_INT 1
40834: PPUSH
40835: CALL_OW 275
40839: PUSH
40840: LD_VAR 0 11
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: GREATEREQUAL
40849: PUSH
40850: LD_VAR 0 10
40854: PPUSH
40855: LD_INT 2
40857: PPUSH
40858: CALL_OW 275
40862: PUSH
40863: LD_VAR 0 11
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: GREATEREQUAL
40872: AND
40873: PUSH
40874: LD_VAR 0 10
40878: PPUSH
40879: LD_INT 3
40881: PPUSH
40882: CALL_OW 275
40886: PUSH
40887: LD_VAR 0 11
40891: PUSH
40892: LD_INT 3
40894: ARRAY
40895: GREATEREQUAL
40896: AND
40897: NOT
40898: IFFALSE 40902
// exit ;
40900: GO 41504
// if GetBType ( depot ) = b_depot then
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 266
40911: PUSH
40912: LD_INT 0
40914: EQUAL
40915: IFFALSE 40927
// dist := 28 else
40917: LD_ADDR_VAR 0 14
40921: PUSH
40922: LD_INT 28
40924: ST_TO_ADDR
40925: GO 40935
// dist := 36 ;
40927: LD_ADDR_VAR 0 14
40931: PUSH
40932: LD_INT 36
40934: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40935: LD_VAR 0 1
40939: PPUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: LD_VAR 0 4
40949: PPUSH
40950: CALL_OW 297
40954: PUSH
40955: LD_VAR 0 14
40959: GREATER
40960: IFFALSE 40964
// exit ;
40962: GO 41504
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40964: LD_ADDR_VAR 0 12
40968: PUSH
40969: LD_VAR 0 2
40973: PPUSH
40974: LD_VAR 0 3
40978: PPUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: LD_VAR 0 5
40988: PPUSH
40989: LD_VAR 0 1
40993: PPUSH
40994: CALL_OW 248
40998: PPUSH
40999: LD_INT 0
41001: PPUSH
41002: CALL 41509 0 6
41006: ST_TO_ADDR
// if not hexes then
41007: LD_VAR 0 12
41011: NOT
41012: IFFALSE 41016
// exit ;
41014: GO 41504
// hex := GetHexInfo ( x , y ) ;
41016: LD_ADDR_VAR 0 15
41020: PUSH
41021: LD_VAR 0 3
41025: PPUSH
41026: LD_VAR 0 4
41030: PPUSH
41031: CALL_OW 546
41035: ST_TO_ADDR
// if hex [ 1 ] then
41036: LD_VAR 0 15
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: IFFALSE 41048
// exit ;
41046: GO 41504
// height := hex [ 2 ] ;
41048: LD_ADDR_VAR 0 13
41052: PUSH
41053: LD_VAR 0 15
41057: PUSH
41058: LD_INT 2
41060: ARRAY
41061: ST_TO_ADDR
// for i = 1 to hexes do
41062: LD_ADDR_VAR 0 7
41066: PUSH
41067: DOUBLE
41068: LD_INT 1
41070: DEC
41071: ST_TO_ADDR
41072: LD_VAR 0 12
41076: PUSH
41077: FOR_TO
41078: IFFALSE 41408
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41080: LD_VAR 0 12
41084: PUSH
41085: LD_VAR 0 7
41089: ARRAY
41090: PUSH
41091: LD_INT 1
41093: ARRAY
41094: PPUSH
41095: LD_VAR 0 12
41099: PUSH
41100: LD_VAR 0 7
41104: ARRAY
41105: PUSH
41106: LD_INT 2
41108: ARRAY
41109: PPUSH
41110: CALL_OW 488
41114: NOT
41115: PUSH
41116: LD_VAR 0 12
41120: PUSH
41121: LD_VAR 0 7
41125: ARRAY
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PPUSH
41131: LD_VAR 0 12
41135: PUSH
41136: LD_VAR 0 7
41140: ARRAY
41141: PUSH
41142: LD_INT 2
41144: ARRAY
41145: PPUSH
41146: CALL_OW 428
41150: PUSH
41151: LD_INT 0
41153: GREATER
41154: OR
41155: PUSH
41156: LD_VAR 0 12
41160: PUSH
41161: LD_VAR 0 7
41165: ARRAY
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: PPUSH
41171: LD_VAR 0 12
41175: PUSH
41176: LD_VAR 0 7
41180: ARRAY
41181: PUSH
41182: LD_INT 2
41184: ARRAY
41185: PPUSH
41186: CALL_OW 351
41190: OR
41191: IFFALSE 41197
// exit ;
41193: POP
41194: POP
41195: GO 41504
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41197: LD_ADDR_VAR 0 8
41201: PUSH
41202: LD_VAR 0 12
41206: PUSH
41207: LD_VAR 0 7
41211: ARRAY
41212: PUSH
41213: LD_INT 1
41215: ARRAY
41216: PPUSH
41217: LD_VAR 0 12
41221: PUSH
41222: LD_VAR 0 7
41226: ARRAY
41227: PUSH
41228: LD_INT 2
41230: ARRAY
41231: PPUSH
41232: CALL_OW 546
41236: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41237: LD_VAR 0 8
41241: PUSH
41242: LD_INT 1
41244: ARRAY
41245: PUSH
41246: LD_VAR 0 8
41250: PUSH
41251: LD_INT 2
41253: ARRAY
41254: PUSH
41255: LD_VAR 0 13
41259: PUSH
41260: LD_INT 2
41262: PLUS
41263: GREATER
41264: OR
41265: PUSH
41266: LD_VAR 0 8
41270: PUSH
41271: LD_INT 2
41273: ARRAY
41274: PUSH
41275: LD_VAR 0 13
41279: PUSH
41280: LD_INT 2
41282: MINUS
41283: LESS
41284: OR
41285: PUSH
41286: LD_VAR 0 8
41290: PUSH
41291: LD_INT 3
41293: ARRAY
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 8
41300: PUSH
41301: LD_INT 9
41303: PUSH
41304: LD_INT 10
41306: PUSH
41307: LD_INT 11
41309: PUSH
41310: LD_INT 12
41312: PUSH
41313: LD_INT 13
41315: PUSH
41316: LD_INT 16
41318: PUSH
41319: LD_INT 17
41321: PUSH
41322: LD_INT 18
41324: PUSH
41325: LD_INT 19
41327: PUSH
41328: LD_INT 20
41330: PUSH
41331: LD_INT 21
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: IN
41349: NOT
41350: OR
41351: PUSH
41352: LD_VAR 0 8
41356: PUSH
41357: LD_INT 5
41359: ARRAY
41360: NOT
41361: OR
41362: PUSH
41363: LD_VAR 0 8
41367: PUSH
41368: LD_INT 6
41370: ARRAY
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 7
41380: PUSH
41381: LD_INT 9
41383: PUSH
41384: LD_INT 10
41386: PUSH
41387: LD_INT 11
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: IN
41398: NOT
41399: OR
41400: IFFALSE 41406
// exit ;
41402: POP
41403: POP
41404: GO 41504
// end ;
41406: GO 41077
41408: POP
41409: POP
// side := GetSide ( depot ) ;
41410: LD_ADDR_VAR 0 9
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 255
41424: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41425: LD_VAR 0 9
41429: PPUSH
41430: LD_VAR 0 3
41434: PPUSH
41435: LD_VAR 0 4
41439: PPUSH
41440: LD_INT 20
41442: PPUSH
41443: CALL 34158 0 4
41447: PUSH
41448: LD_INT 4
41450: ARRAY
41451: IFFALSE 41455
// exit ;
41453: GO 41504
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41455: LD_VAR 0 2
41459: PUSH
41460: LD_INT 29
41462: PUSH
41463: LD_INT 30
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: IN
41470: PUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: LD_VAR 0 4
41480: PPUSH
41481: LD_VAR 0 9
41485: PPUSH
41486: CALL_OW 440
41490: NOT
41491: AND
41492: IFFALSE 41496
// exit ;
41494: GO 41504
// result := true ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: LD_INT 1
41503: ST_TO_ADDR
// end ;
41504: LD_VAR 0 6
41508: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41509: LD_INT 0
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
41546: PPUSH
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
41563: PPUSH
41564: PPUSH
41565: PPUSH
41566: PPUSH
41567: PPUSH
41568: PPUSH
// result = [ ] ;
41569: LD_ADDR_VAR 0 7
41573: PUSH
41574: EMPTY
41575: ST_TO_ADDR
// temp_list = [ ] ;
41576: LD_ADDR_VAR 0 9
41580: PUSH
41581: EMPTY
41582: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41583: LD_VAR 0 4
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 5
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: IN
41614: NOT
41615: PUSH
41616: LD_VAR 0 1
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: IN
41631: PUSH
41632: LD_VAR 0 5
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: IN
41651: NOT
41652: AND
41653: OR
41654: IFFALSE 41658
// exit ;
41656: GO 60049
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41658: LD_VAR 0 1
41662: PUSH
41663: LD_INT 6
41665: PUSH
41666: LD_INT 7
41668: PUSH
41669: LD_INT 8
41671: PUSH
41672: LD_INT 13
41674: PUSH
41675: LD_INT 12
41677: PUSH
41678: LD_INT 15
41680: PUSH
41681: LD_INT 11
41683: PUSH
41684: LD_INT 14
41686: PUSH
41687: LD_INT 10
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: IN
41701: IFFALSE 41711
// btype = b_lab ;
41703: LD_ADDR_VAR 0 1
41707: PUSH
41708: LD_INT 6
41710: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41711: LD_VAR 0 6
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: IN
41730: NOT
41731: PUSH
41732: LD_VAR 0 1
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 3
41748: PUSH
41749: LD_INT 6
41751: PUSH
41752: LD_INT 36
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: LD_INT 31
41763: PUSH
41764: LD_INT 32
41766: PUSH
41767: LD_INT 33
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: IN
41783: NOT
41784: PUSH
41785: LD_VAR 0 6
41789: PUSH
41790: LD_INT 1
41792: EQUAL
41793: AND
41794: OR
41795: PUSH
41796: LD_VAR 0 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: IN
41811: NOT
41812: PUSH
41813: LD_VAR 0 6
41817: PUSH
41818: LD_INT 2
41820: EQUAL
41821: AND
41822: OR
41823: IFFALSE 41833
// mode = 0 ;
41825: LD_ADDR_VAR 0 6
41829: PUSH
41830: LD_INT 0
41832: ST_TO_ADDR
// case mode of 0 :
41833: LD_VAR 0 6
41837: PUSH
41838: LD_INT 0
41840: DOUBLE
41841: EQUAL
41842: IFTRUE 41846
41844: GO 53299
41846: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41847: LD_ADDR_VAR 0 11
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 3
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42040: LD_ADDR_VAR 0 12
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: NEG
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42236: LD_ADDR_VAR 0 13
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 3
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: LD_INT 3
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42435: LD_ADDR_VAR 0 14
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 3
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42631: LD_ADDR_VAR 0 15
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42824: LD_ADDR_VAR 0 16
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43017: LD_ADDR_VAR 0 17
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43247: LD_ADDR_VAR 0 18
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43477: LD_ADDR_VAR 0 19
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43707: LD_ADDR_VAR 0 20
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43937: LD_ADDR_VAR 0 21
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44167: LD_ADDR_VAR 0 22
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44397: LD_ADDR_VAR 0 23
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 3
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44677: LD_ADDR_VAR 0 24
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44953: LD_ADDR_VAR 0 25
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45227: LD_ADDR_VAR 0 26
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45503: LD_ADDR_VAR 0 27
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45783: LD_ADDR_VAR 0 28
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 3
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46065: LD_ADDR_VAR 0 29
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46344: LD_ADDR_VAR 0 30
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 3
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46622: LD_ADDR_VAR 0 31
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46900: LD_ADDR_VAR 0 32
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 3
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47178: LD_ADDR_VAR 0 33
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47457: LD_ADDR_VAR 0 34
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47737: LD_ADDR_VAR 0 35
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47849: LD_ADDR_VAR 0 36
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47961: LD_ADDR_VAR 0 37
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48073: LD_ADDR_VAR 0 38
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48185: LD_ADDR_VAR 0 39
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48297: LD_ADDR_VAR 0 40
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48409: LD_ADDR_VAR 0 41
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48759: LD_ADDR_VAR 0 42
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49109: LD_ADDR_VAR 0 43
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 3
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 3
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: NEG
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49457: LD_ADDR_VAR 0 44
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49807: LD_ADDR_VAR 0 45
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: LD_INT 3
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 3
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 3
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50157: LD_ADDR_VAR 0 46
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 3
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50505: LD_ADDR_VAR 0 47
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50656: LD_ADDR_VAR 0 48
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50803: LD_ADDR_VAR 0 49
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50947: LD_ADDR_VAR 0 50
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51091: LD_ADDR_VAR 0 51
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51238: LD_ADDR_VAR 0 52
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51389: LD_ADDR_VAR 0 53
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51619: LD_ADDR_VAR 0 54
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51849: LD_ADDR_VAR 0 55
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52079: LD_ADDR_VAR 0 56
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52309: LD_ADDR_VAR 0 57
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52539: LD_ADDR_VAR 0 58
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52769: LD_ADDR_VAR 0 59
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52857: LD_ADDR_VAR 0 60
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52945: LD_ADDR_VAR 0 61
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53033: LD_ADDR_VAR 0 62
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53121: LD_ADDR_VAR 0 63
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53209: LD_ADDR_VAR 0 64
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// end ; 1 :
53297: GO 59194
53299: LD_INT 1
53301: DOUBLE
53302: EQUAL
53303: IFTRUE 53307
53305: GO 55930
53307: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53308: LD_ADDR_VAR 0 11
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53352: LD_ADDR_VAR 0 12
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53393: LD_ADDR_VAR 0 13
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53433: LD_ADDR_VAR 0 14
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53474: LD_ADDR_VAR 0 15
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53518: LD_ADDR_VAR 0 16
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: NEG
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53564: LD_ADDR_VAR 0 17
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53608: LD_ADDR_VAR 0 18
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53649: LD_ADDR_VAR 0 19
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53689: LD_ADDR_VAR 0 20
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53730: LD_ADDR_VAR 0 21
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53774: LD_ADDR_VAR 0 22
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53820: LD_ADDR_VAR 0 23
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53864: LD_ADDR_VAR 0 24
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53905: LD_ADDR_VAR 0 25
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53945: LD_ADDR_VAR 0 26
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53986: LD_ADDR_VAR 0 27
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54030: LD_ADDR_VAR 0 28
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 4
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54076: LD_ADDR_VAR 0 29
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 4
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 4
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 5
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 4
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 6
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 6
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54231: LD_ADDR_VAR 0 30
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 4
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 5
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 5
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 6
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 6
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54374: LD_ADDR_VAR 0 31
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 5
54441: PUSH
54442: LD_INT 4
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 5
54451: PUSH
54452: LD_INT 5
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: PUSH
54462: LD_INT 5
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 6
54471: PUSH
54472: LD_INT 5
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 6
54481: PUSH
54482: LD_INT 6
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: LD_INT 6
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54513: LD_ADDR_VAR 0 32
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 4
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 4
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 5
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 5
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 4
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 6
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 6
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 5
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54656: LD_ADDR_VAR 0 33
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 4
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 5
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 5
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 5
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 6
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 6
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54811: LD_ADDR_VAR 0 34
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: LD_INT 3
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 4
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 3
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: NEG
54879: PUSH
54880: LD_INT 4
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 4
54890: NEG
54891: PUSH
54892: LD_INT 5
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: NEG
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 5
54914: NEG
54915: PUSH
54916: LD_INT 5
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 5
54926: NEG
54927: PUSH
54928: LD_INT 6
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 6
54938: NEG
54939: PUSH
54940: LD_INT 5
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 6
54950: NEG
54951: PUSH
54952: LD_INT 6
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54974: LD_ADDR_VAR 0 41
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: LIST
55017: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55018: LD_ADDR_VAR 0 42
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55059: LD_ADDR_VAR 0 43
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55099: LD_ADDR_VAR 0 44
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55140: LD_ADDR_VAR 0 45
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55184: LD_ADDR_VAR 0 46
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55230: LD_ADDR_VAR 0 47
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55263: LD_ADDR_VAR 0 48
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55294: LD_ADDR_VAR 0 49
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55323: LD_ADDR_VAR 0 50
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55352: LD_ADDR_VAR 0 51
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55383: LD_ADDR_VAR 0 52
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55416: LD_ADDR_VAR 0 53
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55460: LD_ADDR_VAR 0 54
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55501: LD_ADDR_VAR 0 55
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55541: LD_ADDR_VAR 0 56
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55582: LD_ADDR_VAR 0 57
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55626: LD_ADDR_VAR 0 58
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55672: LD_ADDR_VAR 0 59
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55716: LD_ADDR_VAR 0 60
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55757: LD_ADDR_VAR 0 61
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55797: LD_ADDR_VAR 0 62
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55838: LD_ADDR_VAR 0 63
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55882: LD_ADDR_VAR 0 64
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: ST_TO_ADDR
// end ; 2 :
55928: GO 59194
55930: LD_INT 2
55932: DOUBLE
55933: EQUAL
55934: IFTRUE 55938
55936: GO 59193
55938: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55939: LD_ADDR_VAR 0 29
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 4
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: PUSH
56070: LD_INT 4
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 5
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: LD_INT 4
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 4
56336: NEG
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: LD_INT 4
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 4
56372: NEG
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 5
56384: NEG
56385: PUSH
56386: LD_INT 4
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 5
56396: NEG
56397: PUSH
56398: LD_INT 5
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: LD_INT 5
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 5
56420: NEG
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56477: LD_ADDR_VAR 0 30
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: LD_INT 4
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: LD_INT 5
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 5
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 4
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 5
56723: NEG
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 5
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 5
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 4
56829: NEG
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 4
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 4
56865: NEG
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 4
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 4
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 5
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 3
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 5
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57024: LD_ADDR_VAR 0 31
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 4
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 4
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 5
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: NEG
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: LD_INT 4
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 4
57238: NEG
57239: PUSH
57240: LD_INT 5
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: LD_INT 4
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 5
57286: NEG
57287: PUSH
57288: LD_INT 4
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 5
57298: NEG
57299: PUSH
57300: LD_INT 5
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: LD_INT 5
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 5
57322: NEG
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 4
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 4
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 5
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 4
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 5
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57574: LD_ADDR_VAR 0 32
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 4
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 5
57660: NEG
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: NEG
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 4
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 4
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 5
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 5
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 5
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 4
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 4
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 4
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 4
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: PUSH
57997: LD_INT 3
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 5
58006: PUSH
58007: LD_INT 4
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 5
58016: PUSH
58017: LD_INT 5
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 5
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: LD_INT 5
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58121: LD_ADDR_VAR 0 33
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: LD_INT 4
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 4
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: NEG
58201: PUSH
58202: LD_INT 5
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 3
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 4
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 4
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 5
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 5
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 5
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58659: LD_ADDR_VAR 0 34
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 5
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 5
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 5
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 4
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: LD_INT 5
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 5
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 4
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 5
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 5
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// end ; end ;
59191: GO 59194
59193: POP
// case btype of b_depot , b_warehouse :
59194: LD_VAR 0 1
59198: PUSH
59199: LD_INT 0
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59213
59205: LD_INT 1
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59213
59211: GO 59414
59213: POP
// case nation of nation_american :
59214: LD_VAR 0 5
59218: PUSH
59219: LD_INT 1
59221: DOUBLE
59222: EQUAL
59223: IFTRUE 59227
59225: GO 59283
59227: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59228: LD_ADDR_VAR 0 9
59232: PUSH
59233: LD_VAR 0 11
59237: PUSH
59238: LD_VAR 0 12
59242: PUSH
59243: LD_VAR 0 13
59247: PUSH
59248: LD_VAR 0 14
59252: PUSH
59253: LD_VAR 0 15
59257: PUSH
59258: LD_VAR 0 16
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: PUSH
59271: LD_VAR 0 4
59275: PUSH
59276: LD_INT 1
59278: PLUS
59279: ARRAY
59280: ST_TO_ADDR
59281: GO 59412
59283: LD_INT 2
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59347
59291: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59292: LD_ADDR_VAR 0 9
59296: PUSH
59297: LD_VAR 0 17
59301: PUSH
59302: LD_VAR 0 18
59306: PUSH
59307: LD_VAR 0 19
59311: PUSH
59312: LD_VAR 0 20
59316: PUSH
59317: LD_VAR 0 21
59321: PUSH
59322: LD_VAR 0 22
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: PUSH
59335: LD_VAR 0 4
59339: PUSH
59340: LD_INT 1
59342: PLUS
59343: ARRAY
59344: ST_TO_ADDR
59345: GO 59412
59347: LD_INT 3
59349: DOUBLE
59350: EQUAL
59351: IFTRUE 59355
59353: GO 59411
59355: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59356: LD_ADDR_VAR 0 9
59360: PUSH
59361: LD_VAR 0 23
59365: PUSH
59366: LD_VAR 0 24
59370: PUSH
59371: LD_VAR 0 25
59375: PUSH
59376: LD_VAR 0 26
59380: PUSH
59381: LD_VAR 0 27
59385: PUSH
59386: LD_VAR 0 28
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: PUSH
59399: LD_VAR 0 4
59403: PUSH
59404: LD_INT 1
59406: PLUS
59407: ARRAY
59408: ST_TO_ADDR
59409: GO 59412
59411: POP
59412: GO 59967
59414: LD_INT 2
59416: DOUBLE
59417: EQUAL
59418: IFTRUE 59428
59420: LD_INT 3
59422: DOUBLE
59423: EQUAL
59424: IFTRUE 59428
59426: GO 59484
59428: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59429: LD_ADDR_VAR 0 9
59433: PUSH
59434: LD_VAR 0 29
59438: PUSH
59439: LD_VAR 0 30
59443: PUSH
59444: LD_VAR 0 31
59448: PUSH
59449: LD_VAR 0 32
59453: PUSH
59454: LD_VAR 0 33
59458: PUSH
59459: LD_VAR 0 34
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: PUSH
59472: LD_VAR 0 4
59476: PUSH
59477: LD_INT 1
59479: PLUS
59480: ARRAY
59481: ST_TO_ADDR
59482: GO 59967
59484: LD_INT 16
59486: DOUBLE
59487: EQUAL
59488: IFTRUE 59546
59490: LD_INT 17
59492: DOUBLE
59493: EQUAL
59494: IFTRUE 59546
59496: LD_INT 18
59498: DOUBLE
59499: EQUAL
59500: IFTRUE 59546
59502: LD_INT 19
59504: DOUBLE
59505: EQUAL
59506: IFTRUE 59546
59508: LD_INT 22
59510: DOUBLE
59511: EQUAL
59512: IFTRUE 59546
59514: LD_INT 20
59516: DOUBLE
59517: EQUAL
59518: IFTRUE 59546
59520: LD_INT 21
59522: DOUBLE
59523: EQUAL
59524: IFTRUE 59546
59526: LD_INT 23
59528: DOUBLE
59529: EQUAL
59530: IFTRUE 59546
59532: LD_INT 24
59534: DOUBLE
59535: EQUAL
59536: IFTRUE 59546
59538: LD_INT 25
59540: DOUBLE
59541: EQUAL
59542: IFTRUE 59546
59544: GO 59602
59546: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59547: LD_ADDR_VAR 0 9
59551: PUSH
59552: LD_VAR 0 35
59556: PUSH
59557: LD_VAR 0 36
59561: PUSH
59562: LD_VAR 0 37
59566: PUSH
59567: LD_VAR 0 38
59571: PUSH
59572: LD_VAR 0 39
59576: PUSH
59577: LD_VAR 0 40
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: PUSH
59590: LD_VAR 0 4
59594: PUSH
59595: LD_INT 1
59597: PLUS
59598: ARRAY
59599: ST_TO_ADDR
59600: GO 59967
59602: LD_INT 6
59604: DOUBLE
59605: EQUAL
59606: IFTRUE 59658
59608: LD_INT 7
59610: DOUBLE
59611: EQUAL
59612: IFTRUE 59658
59614: LD_INT 8
59616: DOUBLE
59617: EQUAL
59618: IFTRUE 59658
59620: LD_INT 13
59622: DOUBLE
59623: EQUAL
59624: IFTRUE 59658
59626: LD_INT 12
59628: DOUBLE
59629: EQUAL
59630: IFTRUE 59658
59632: LD_INT 15
59634: DOUBLE
59635: EQUAL
59636: IFTRUE 59658
59638: LD_INT 11
59640: DOUBLE
59641: EQUAL
59642: IFTRUE 59658
59644: LD_INT 14
59646: DOUBLE
59647: EQUAL
59648: IFTRUE 59658
59650: LD_INT 10
59652: DOUBLE
59653: EQUAL
59654: IFTRUE 59658
59656: GO 59714
59658: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59659: LD_ADDR_VAR 0 9
59663: PUSH
59664: LD_VAR 0 41
59668: PUSH
59669: LD_VAR 0 42
59673: PUSH
59674: LD_VAR 0 43
59678: PUSH
59679: LD_VAR 0 44
59683: PUSH
59684: LD_VAR 0 45
59688: PUSH
59689: LD_VAR 0 46
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: LD_VAR 0 4
59706: PUSH
59707: LD_INT 1
59709: PLUS
59710: ARRAY
59711: ST_TO_ADDR
59712: GO 59967
59714: LD_INT 36
59716: DOUBLE
59717: EQUAL
59718: IFTRUE 59722
59720: GO 59778
59722: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59723: LD_ADDR_VAR 0 9
59727: PUSH
59728: LD_VAR 0 47
59732: PUSH
59733: LD_VAR 0 48
59737: PUSH
59738: LD_VAR 0 49
59742: PUSH
59743: LD_VAR 0 50
59747: PUSH
59748: LD_VAR 0 51
59752: PUSH
59753: LD_VAR 0 52
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: PUSH
59766: LD_VAR 0 4
59770: PUSH
59771: LD_INT 1
59773: PLUS
59774: ARRAY
59775: ST_TO_ADDR
59776: GO 59967
59778: LD_INT 4
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59804
59784: LD_INT 5
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59804
59790: LD_INT 34
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59804
59796: LD_INT 37
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59804
59802: GO 59860
59804: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59805: LD_ADDR_VAR 0 9
59809: PUSH
59810: LD_VAR 0 53
59814: PUSH
59815: LD_VAR 0 54
59819: PUSH
59820: LD_VAR 0 55
59824: PUSH
59825: LD_VAR 0 56
59829: PUSH
59830: LD_VAR 0 57
59834: PUSH
59835: LD_VAR 0 58
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 4
59852: PUSH
59853: LD_INT 1
59855: PLUS
59856: ARRAY
59857: ST_TO_ADDR
59858: GO 59967
59860: LD_INT 31
59862: DOUBLE
59863: EQUAL
59864: IFTRUE 59910
59866: LD_INT 32
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59910
59872: LD_INT 33
59874: DOUBLE
59875: EQUAL
59876: IFTRUE 59910
59878: LD_INT 27
59880: DOUBLE
59881: EQUAL
59882: IFTRUE 59910
59884: LD_INT 26
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59910
59890: LD_INT 28
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59910
59896: LD_INT 29
59898: DOUBLE
59899: EQUAL
59900: IFTRUE 59910
59902: LD_INT 30
59904: DOUBLE
59905: EQUAL
59906: IFTRUE 59910
59908: GO 59966
59910: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
59911: LD_ADDR_VAR 0 9
59915: PUSH
59916: LD_VAR 0 59
59920: PUSH
59921: LD_VAR 0 60
59925: PUSH
59926: LD_VAR 0 61
59930: PUSH
59931: LD_VAR 0 62
59935: PUSH
59936: LD_VAR 0 63
59940: PUSH
59941: LD_VAR 0 64
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: PUSH
59954: LD_VAR 0 4
59958: PUSH
59959: LD_INT 1
59961: PLUS
59962: ARRAY
59963: ST_TO_ADDR
59964: GO 59967
59966: POP
// temp_list2 = [ ] ;
59967: LD_ADDR_VAR 0 10
59971: PUSH
59972: EMPTY
59973: ST_TO_ADDR
// for i in temp_list do
59974: LD_ADDR_VAR 0 8
59978: PUSH
59979: LD_VAR 0 9
59983: PUSH
59984: FOR_IN
59985: IFFALSE 60037
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59987: LD_ADDR_VAR 0 10
59991: PUSH
59992: LD_VAR 0 10
59996: PUSH
59997: LD_VAR 0 8
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: PUSH
60006: LD_VAR 0 2
60010: PLUS
60011: PUSH
60012: LD_VAR 0 8
60016: PUSH
60017: LD_INT 2
60019: ARRAY
60020: PUSH
60021: LD_VAR 0 3
60025: PLUS
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: ADD
60034: ST_TO_ADDR
60035: GO 59984
60037: POP
60038: POP
// result = temp_list2 ;
60039: LD_ADDR_VAR 0 7
60043: PUSH
60044: LD_VAR 0 10
60048: ST_TO_ADDR
// end ;
60049: LD_VAR 0 7
60053: RET
// export function EnemyInRange ( unit , dist ) ; begin
60054: LD_INT 0
60056: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60057: LD_ADDR_VAR 0 3
60061: PUSH
60062: LD_VAR 0 1
60066: PPUSH
60067: CALL_OW 255
60071: PPUSH
60072: LD_VAR 0 1
60076: PPUSH
60077: CALL_OW 250
60081: PPUSH
60082: LD_VAR 0 1
60086: PPUSH
60087: CALL_OW 251
60091: PPUSH
60092: LD_VAR 0 2
60096: PPUSH
60097: CALL 34158 0 4
60101: PUSH
60102: LD_INT 4
60104: ARRAY
60105: ST_TO_ADDR
// end ;
60106: LD_VAR 0 3
60110: RET
// export function PlayerSeeMe ( unit ) ; begin
60111: LD_INT 0
60113: PPUSH
// result := See ( your_side , unit ) ;
60114: LD_ADDR_VAR 0 2
60118: PUSH
60119: LD_OWVAR 2
60123: PPUSH
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL_OW 292
60133: ST_TO_ADDR
// end ;
60134: LD_VAR 0 2
60138: RET
// export function ReverseDir ( unit ) ; begin
60139: LD_INT 0
60141: PPUSH
// if not unit then
60142: LD_VAR 0 1
60146: NOT
60147: IFFALSE 60151
// exit ;
60149: GO 60174
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60151: LD_ADDR_VAR 0 2
60155: PUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL_OW 254
60165: PUSH
60166: LD_INT 3
60168: PLUS
60169: PUSH
60170: LD_INT 6
60172: MOD
60173: ST_TO_ADDR
// end ;
60174: LD_VAR 0 2
60178: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60179: LD_INT 0
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
60185: PPUSH
// if not hexes then
60186: LD_VAR 0 2
60190: NOT
60191: IFFALSE 60195
// exit ;
60193: GO 60343
// dist := 9999 ;
60195: LD_ADDR_VAR 0 5
60199: PUSH
60200: LD_INT 9999
60202: ST_TO_ADDR
// for i = 1 to hexes do
60203: LD_ADDR_VAR 0 4
60207: PUSH
60208: DOUBLE
60209: LD_INT 1
60211: DEC
60212: ST_TO_ADDR
60213: LD_VAR 0 2
60217: PUSH
60218: FOR_TO
60219: IFFALSE 60331
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60221: LD_VAR 0 1
60225: PPUSH
60226: LD_VAR 0 2
60230: PUSH
60231: LD_VAR 0 4
60235: ARRAY
60236: PUSH
60237: LD_INT 1
60239: ARRAY
60240: PPUSH
60241: LD_VAR 0 2
60245: PUSH
60246: LD_VAR 0 4
60250: ARRAY
60251: PUSH
60252: LD_INT 2
60254: ARRAY
60255: PPUSH
60256: CALL_OW 297
60260: PUSH
60261: LD_VAR 0 5
60265: LESS
60266: IFFALSE 60329
// begin hex := hexes [ i ] ;
60268: LD_ADDR_VAR 0 7
60272: PUSH
60273: LD_VAR 0 2
60277: PUSH
60278: LD_VAR 0 4
60282: ARRAY
60283: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60284: LD_ADDR_VAR 0 5
60288: PUSH
60289: LD_VAR 0 1
60293: PPUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_VAR 0 4
60303: ARRAY
60304: PUSH
60305: LD_INT 1
60307: ARRAY
60308: PPUSH
60309: LD_VAR 0 2
60313: PUSH
60314: LD_VAR 0 4
60318: ARRAY
60319: PUSH
60320: LD_INT 2
60322: ARRAY
60323: PPUSH
60324: CALL_OW 297
60328: ST_TO_ADDR
// end ; end ;
60329: GO 60218
60331: POP
60332: POP
// result := hex ;
60333: LD_ADDR_VAR 0 3
60337: PUSH
60338: LD_VAR 0 7
60342: ST_TO_ADDR
// end ;
60343: LD_VAR 0 3
60347: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60348: LD_INT 0
60350: PPUSH
60351: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60352: LD_VAR 0 1
60356: NOT
60357: PUSH
60358: LD_VAR 0 1
60362: PUSH
60363: LD_INT 21
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 23
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PPUSH
60387: CALL_OW 69
60391: IN
60392: NOT
60393: OR
60394: IFFALSE 60398
// exit ;
60396: GO 60445
// for i = 1 to 3 do
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: DOUBLE
60404: LD_INT 1
60406: DEC
60407: ST_TO_ADDR
60408: LD_INT 3
60410: PUSH
60411: FOR_TO
60412: IFFALSE 60443
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 250
60423: PPUSH
60424: LD_VAR 0 1
60428: PPUSH
60429: CALL_OW 251
60433: PPUSH
60434: LD_INT 1
60436: PPUSH
60437: CALL_OW 453
60441: GO 60411
60443: POP
60444: POP
// end ;
60445: LD_VAR 0 2
60449: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60450: LD_INT 0
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60458: LD_VAR 0 1
60462: NOT
60463: PUSH
60464: LD_VAR 0 2
60468: NOT
60469: OR
60470: PUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: CALL_OW 314
60480: OR
60481: IFFALSE 60485
// exit ;
60483: GO 60926
// x := GetX ( enemy_unit ) ;
60485: LD_ADDR_VAR 0 7
60489: PUSH
60490: LD_VAR 0 2
60494: PPUSH
60495: CALL_OW 250
60499: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60500: LD_ADDR_VAR 0 8
60504: PUSH
60505: LD_VAR 0 2
60509: PPUSH
60510: CALL_OW 251
60514: ST_TO_ADDR
// if not x or not y then
60515: LD_VAR 0 7
60519: NOT
60520: PUSH
60521: LD_VAR 0 8
60525: NOT
60526: OR
60527: IFFALSE 60531
// exit ;
60529: GO 60926
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60531: LD_ADDR_VAR 0 6
60535: PUSH
60536: LD_VAR 0 7
60540: PPUSH
60541: LD_INT 0
60543: PPUSH
60544: LD_INT 4
60546: PPUSH
60547: CALL_OW 272
60551: PUSH
60552: LD_VAR 0 8
60556: PPUSH
60557: LD_INT 0
60559: PPUSH
60560: LD_INT 4
60562: PPUSH
60563: CALL_OW 273
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_VAR 0 7
60576: PPUSH
60577: LD_INT 1
60579: PPUSH
60580: LD_INT 4
60582: PPUSH
60583: CALL_OW 272
60587: PUSH
60588: LD_VAR 0 8
60592: PPUSH
60593: LD_INT 1
60595: PPUSH
60596: LD_INT 4
60598: PPUSH
60599: CALL_OW 273
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_VAR 0 7
60612: PPUSH
60613: LD_INT 2
60615: PPUSH
60616: LD_INT 4
60618: PPUSH
60619: CALL_OW 272
60623: PUSH
60624: LD_VAR 0 8
60628: PPUSH
60629: LD_INT 2
60631: PPUSH
60632: LD_INT 4
60634: PPUSH
60635: CALL_OW 273
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_VAR 0 7
60648: PPUSH
60649: LD_INT 3
60651: PPUSH
60652: LD_INT 4
60654: PPUSH
60655: CALL_OW 272
60659: PUSH
60660: LD_VAR 0 8
60664: PPUSH
60665: LD_INT 3
60667: PPUSH
60668: LD_INT 4
60670: PPUSH
60671: CALL_OW 273
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_VAR 0 7
60684: PPUSH
60685: LD_INT 4
60687: PPUSH
60688: LD_INT 4
60690: PPUSH
60691: CALL_OW 272
60695: PUSH
60696: LD_VAR 0 8
60700: PPUSH
60701: LD_INT 4
60703: PPUSH
60704: LD_INT 4
60706: PPUSH
60707: CALL_OW 273
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_VAR 0 7
60720: PPUSH
60721: LD_INT 5
60723: PPUSH
60724: LD_INT 4
60726: PPUSH
60727: CALL_OW 272
60731: PUSH
60732: LD_VAR 0 8
60736: PPUSH
60737: LD_INT 5
60739: PPUSH
60740: LD_INT 4
60742: PPUSH
60743: CALL_OW 273
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: ST_TO_ADDR
// for i = tmp downto 1 do
60760: LD_ADDR_VAR 0 4
60764: PUSH
60765: DOUBLE
60766: LD_VAR 0 6
60770: INC
60771: ST_TO_ADDR
60772: LD_INT 1
60774: PUSH
60775: FOR_DOWNTO
60776: IFFALSE 60877
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60778: LD_VAR 0 6
60782: PUSH
60783: LD_VAR 0 4
60787: ARRAY
60788: PUSH
60789: LD_INT 1
60791: ARRAY
60792: PPUSH
60793: LD_VAR 0 6
60797: PUSH
60798: LD_VAR 0 4
60802: ARRAY
60803: PUSH
60804: LD_INT 2
60806: ARRAY
60807: PPUSH
60808: CALL_OW 488
60812: NOT
60813: PUSH
60814: LD_VAR 0 6
60818: PUSH
60819: LD_VAR 0 4
60823: ARRAY
60824: PUSH
60825: LD_INT 1
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 6
60833: PUSH
60834: LD_VAR 0 4
60838: ARRAY
60839: PUSH
60840: LD_INT 2
60842: ARRAY
60843: PPUSH
60844: CALL_OW 428
60848: PUSH
60849: LD_INT 0
60851: NONEQUAL
60852: OR
60853: IFFALSE 60875
// tmp := Delete ( tmp , i ) ;
60855: LD_ADDR_VAR 0 6
60859: PUSH
60860: LD_VAR 0 6
60864: PPUSH
60865: LD_VAR 0 4
60869: PPUSH
60870: CALL_OW 3
60874: ST_TO_ADDR
60875: GO 60775
60877: POP
60878: POP
// j := GetClosestHex ( unit , tmp ) ;
60879: LD_ADDR_VAR 0 5
60883: PUSH
60884: LD_VAR 0 1
60888: PPUSH
60889: LD_VAR 0 6
60893: PPUSH
60894: CALL 60179 0 2
60898: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_VAR 0 5
60908: PUSH
60909: LD_INT 1
60911: ARRAY
60912: PPUSH
60913: LD_VAR 0 5
60917: PUSH
60918: LD_INT 2
60920: ARRAY
60921: PPUSH
60922: CALL_OW 111
// end ;
60926: LD_VAR 0 3
60930: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60931: LD_INT 0
60933: PPUSH
60934: PPUSH
60935: PPUSH
// uc_side = 0 ;
60936: LD_ADDR_OWVAR 20
60940: PUSH
60941: LD_INT 0
60943: ST_TO_ADDR
// uc_nation = 0 ;
60944: LD_ADDR_OWVAR 21
60948: PUSH
60949: LD_INT 0
60951: ST_TO_ADDR
// InitHc ;
60952: CALL_OW 19
// InitVc ;
60956: CALL_OW 20
// if mastodonts then
60960: LD_VAR 0 6
60964: IFFALSE 61031
// for i = 1 to mastodonts do
60966: LD_ADDR_VAR 0 11
60970: PUSH
60971: DOUBLE
60972: LD_INT 1
60974: DEC
60975: ST_TO_ADDR
60976: LD_VAR 0 6
60980: PUSH
60981: FOR_TO
60982: IFFALSE 61029
// begin vc_chassis := 31 ;
60984: LD_ADDR_OWVAR 37
60988: PUSH
60989: LD_INT 31
60991: ST_TO_ADDR
// vc_control := control_rider ;
60992: LD_ADDR_OWVAR 38
60996: PUSH
60997: LD_INT 4
60999: ST_TO_ADDR
// animal := CreateVehicle ;
61000: LD_ADDR_VAR 0 12
61004: PUSH
61005: CALL_OW 45
61009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61010: LD_VAR 0 12
61014: PPUSH
61015: LD_VAR 0 8
61019: PPUSH
61020: LD_INT 0
61022: PPUSH
61023: CALL 63100 0 3
// end ;
61027: GO 60981
61029: POP
61030: POP
// if horses then
61031: LD_VAR 0 5
61035: IFFALSE 61102
// for i = 1 to horses do
61037: LD_ADDR_VAR 0 11
61041: PUSH
61042: DOUBLE
61043: LD_INT 1
61045: DEC
61046: ST_TO_ADDR
61047: LD_VAR 0 5
61051: PUSH
61052: FOR_TO
61053: IFFALSE 61100
// begin hc_class := 21 ;
61055: LD_ADDR_OWVAR 28
61059: PUSH
61060: LD_INT 21
61062: ST_TO_ADDR
// hc_gallery :=  ;
61063: LD_ADDR_OWVAR 33
61067: PUSH
61068: LD_STRING 
61070: ST_TO_ADDR
// animal := CreateHuman ;
61071: LD_ADDR_VAR 0 12
61075: PUSH
61076: CALL_OW 44
61080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61081: LD_VAR 0 12
61085: PPUSH
61086: LD_VAR 0 8
61090: PPUSH
61091: LD_INT 0
61093: PPUSH
61094: CALL 63100 0 3
// end ;
61098: GO 61052
61100: POP
61101: POP
// if birds then
61102: LD_VAR 0 1
61106: IFFALSE 61173
// for i = 1 to birds do
61108: LD_ADDR_VAR 0 11
61112: PUSH
61113: DOUBLE
61114: LD_INT 1
61116: DEC
61117: ST_TO_ADDR
61118: LD_VAR 0 1
61122: PUSH
61123: FOR_TO
61124: IFFALSE 61171
// begin hc_class = 18 ;
61126: LD_ADDR_OWVAR 28
61130: PUSH
61131: LD_INT 18
61133: ST_TO_ADDR
// hc_gallery =  ;
61134: LD_ADDR_OWVAR 33
61138: PUSH
61139: LD_STRING 
61141: ST_TO_ADDR
// animal := CreateHuman ;
61142: LD_ADDR_VAR 0 12
61146: PUSH
61147: CALL_OW 44
61151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61152: LD_VAR 0 12
61156: PPUSH
61157: LD_VAR 0 8
61161: PPUSH
61162: LD_INT 0
61164: PPUSH
61165: CALL 63100 0 3
// end ;
61169: GO 61123
61171: POP
61172: POP
// if tigers then
61173: LD_VAR 0 2
61177: IFFALSE 61261
// for i = 1 to tigers do
61179: LD_ADDR_VAR 0 11
61183: PUSH
61184: DOUBLE
61185: LD_INT 1
61187: DEC
61188: ST_TO_ADDR
61189: LD_VAR 0 2
61193: PUSH
61194: FOR_TO
61195: IFFALSE 61259
// begin hc_class = class_tiger ;
61197: LD_ADDR_OWVAR 28
61201: PUSH
61202: LD_INT 14
61204: ST_TO_ADDR
// hc_gallery =  ;
61205: LD_ADDR_OWVAR 33
61209: PUSH
61210: LD_STRING 
61212: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61213: LD_ADDR_OWVAR 35
61217: PUSH
61218: LD_INT 7
61220: NEG
61221: PPUSH
61222: LD_INT 7
61224: PPUSH
61225: CALL_OW 12
61229: ST_TO_ADDR
// animal := CreateHuman ;
61230: LD_ADDR_VAR 0 12
61234: PUSH
61235: CALL_OW 44
61239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61240: LD_VAR 0 12
61244: PPUSH
61245: LD_VAR 0 8
61249: PPUSH
61250: LD_INT 0
61252: PPUSH
61253: CALL 63100 0 3
// end ;
61257: GO 61194
61259: POP
61260: POP
// if apemans then
61261: LD_VAR 0 3
61265: IFFALSE 61388
// for i = 1 to apemans do
61267: LD_ADDR_VAR 0 11
61271: PUSH
61272: DOUBLE
61273: LD_INT 1
61275: DEC
61276: ST_TO_ADDR
61277: LD_VAR 0 3
61281: PUSH
61282: FOR_TO
61283: IFFALSE 61386
// begin hc_class = class_apeman ;
61285: LD_ADDR_OWVAR 28
61289: PUSH
61290: LD_INT 12
61292: ST_TO_ADDR
// hc_gallery =  ;
61293: LD_ADDR_OWVAR 33
61297: PUSH
61298: LD_STRING 
61300: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61301: LD_ADDR_OWVAR 35
61305: PUSH
61306: LD_INT 5
61308: NEG
61309: PPUSH
61310: LD_INT 5
61312: PPUSH
61313: CALL_OW 12
61317: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61318: LD_ADDR_OWVAR 31
61322: PUSH
61323: LD_INT 1
61325: PPUSH
61326: LD_INT 3
61328: PPUSH
61329: CALL_OW 12
61333: PUSH
61334: LD_INT 1
61336: PPUSH
61337: LD_INT 3
61339: PPUSH
61340: CALL_OW 12
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// animal := CreateHuman ;
61357: LD_ADDR_VAR 0 12
61361: PUSH
61362: CALL_OW 44
61366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61367: LD_VAR 0 12
61371: PPUSH
61372: LD_VAR 0 8
61376: PPUSH
61377: LD_INT 0
61379: PPUSH
61380: CALL 63100 0 3
// end ;
61384: GO 61282
61386: POP
61387: POP
// if enchidnas then
61388: LD_VAR 0 4
61392: IFFALSE 61459
// for i = 1 to enchidnas do
61394: LD_ADDR_VAR 0 11
61398: PUSH
61399: DOUBLE
61400: LD_INT 1
61402: DEC
61403: ST_TO_ADDR
61404: LD_VAR 0 4
61408: PUSH
61409: FOR_TO
61410: IFFALSE 61457
// begin hc_class = 13 ;
61412: LD_ADDR_OWVAR 28
61416: PUSH
61417: LD_INT 13
61419: ST_TO_ADDR
// hc_gallery =  ;
61420: LD_ADDR_OWVAR 33
61424: PUSH
61425: LD_STRING 
61427: ST_TO_ADDR
// animal := CreateHuman ;
61428: LD_ADDR_VAR 0 12
61432: PUSH
61433: CALL_OW 44
61437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61438: LD_VAR 0 12
61442: PPUSH
61443: LD_VAR 0 8
61447: PPUSH
61448: LD_INT 0
61450: PPUSH
61451: CALL 63100 0 3
// end ;
61455: GO 61409
61457: POP
61458: POP
// if fishes then
61459: LD_VAR 0 7
61463: IFFALSE 61530
// for i = 1 to fishes do
61465: LD_ADDR_VAR 0 11
61469: PUSH
61470: DOUBLE
61471: LD_INT 1
61473: DEC
61474: ST_TO_ADDR
61475: LD_VAR 0 7
61479: PUSH
61480: FOR_TO
61481: IFFALSE 61528
// begin hc_class = 20 ;
61483: LD_ADDR_OWVAR 28
61487: PUSH
61488: LD_INT 20
61490: ST_TO_ADDR
// hc_gallery =  ;
61491: LD_ADDR_OWVAR 33
61495: PUSH
61496: LD_STRING 
61498: ST_TO_ADDR
// animal := CreateHuman ;
61499: LD_ADDR_VAR 0 12
61503: PUSH
61504: CALL_OW 44
61508: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61509: LD_VAR 0 12
61513: PPUSH
61514: LD_VAR 0 9
61518: PPUSH
61519: LD_INT 0
61521: PPUSH
61522: CALL 63100 0 3
// end ;
61526: GO 61480
61528: POP
61529: POP
// end ;
61530: LD_VAR 0 10
61534: RET
// export function WantHeal ( sci , unit ) ; begin
61535: LD_INT 0
61537: PPUSH
// if GetTaskList ( sci ) > 0 then
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 437
61547: PUSH
61548: LD_INT 0
61550: GREATER
61551: IFFALSE 61621
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61553: LD_VAR 0 1
61557: PPUSH
61558: CALL_OW 437
61562: PUSH
61563: LD_INT 1
61565: ARRAY
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PUSH
61571: LD_STRING l
61573: EQUAL
61574: PUSH
61575: LD_VAR 0 1
61579: PPUSH
61580: CALL_OW 437
61584: PUSH
61585: LD_INT 1
61587: ARRAY
61588: PUSH
61589: LD_INT 4
61591: ARRAY
61592: PUSH
61593: LD_VAR 0 2
61597: EQUAL
61598: AND
61599: IFFALSE 61611
// result := true else
61601: LD_ADDR_VAR 0 3
61605: PUSH
61606: LD_INT 1
61608: ST_TO_ADDR
61609: GO 61619
// result := false ;
61611: LD_ADDR_VAR 0 3
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// end else
61619: GO 61629
// result := false ;
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: LD_INT 0
61628: ST_TO_ADDR
// end ;
61629: LD_VAR 0 3
61633: RET
// export function HealTarget ( sci ) ; begin
61634: LD_INT 0
61636: PPUSH
// if not sci then
61637: LD_VAR 0 1
61641: NOT
61642: IFFALSE 61646
// exit ;
61644: GO 61711
// result := 0 ;
61646: LD_ADDR_VAR 0 2
61650: PUSH
61651: LD_INT 0
61653: ST_TO_ADDR
// if GetTaskList ( sci ) then
61654: LD_VAR 0 1
61658: PPUSH
61659: CALL_OW 437
61663: IFFALSE 61711
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 437
61674: PUSH
61675: LD_INT 1
61677: ARRAY
61678: PUSH
61679: LD_INT 1
61681: ARRAY
61682: PUSH
61683: LD_STRING l
61685: EQUAL
61686: IFFALSE 61711
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61688: LD_ADDR_VAR 0 2
61692: PUSH
61693: LD_VAR 0 1
61697: PPUSH
61698: CALL_OW 437
61702: PUSH
61703: LD_INT 1
61705: ARRAY
61706: PUSH
61707: LD_INT 4
61709: ARRAY
61710: ST_TO_ADDR
// end ;
61711: LD_VAR 0 2
61715: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61716: LD_INT 0
61718: PPUSH
61719: PPUSH
61720: PPUSH
61721: PPUSH
// if not base_units then
61722: LD_VAR 0 1
61726: NOT
61727: IFFALSE 61731
// exit ;
61729: GO 61818
// result := false ;
61731: LD_ADDR_VAR 0 2
61735: PUSH
61736: LD_INT 0
61738: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61739: LD_ADDR_VAR 0 5
61743: PUSH
61744: LD_VAR 0 1
61748: PPUSH
61749: LD_INT 21
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PPUSH
61759: CALL_OW 72
61763: ST_TO_ADDR
// if not tmp then
61764: LD_VAR 0 5
61768: NOT
61769: IFFALSE 61773
// exit ;
61771: GO 61818
// for i in tmp do
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: LD_VAR 0 5
61782: PUSH
61783: FOR_IN
61784: IFFALSE 61816
// begin result := EnemyInRange ( i , 22 ) ;
61786: LD_ADDR_VAR 0 2
61790: PUSH
61791: LD_VAR 0 3
61795: PPUSH
61796: LD_INT 22
61798: PPUSH
61799: CALL 60054 0 2
61803: ST_TO_ADDR
// if result then
61804: LD_VAR 0 2
61808: IFFALSE 61814
// exit ;
61810: POP
61811: POP
61812: GO 61818
// end ;
61814: GO 61783
61816: POP
61817: POP
// end ;
61818: LD_VAR 0 2
61822: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61823: LD_INT 0
61825: PPUSH
61826: PPUSH
// if not units then
61827: LD_VAR 0 1
61831: NOT
61832: IFFALSE 61836
// exit ;
61834: GO 61906
// result := [ ] ;
61836: LD_ADDR_VAR 0 3
61840: PUSH
61841: EMPTY
61842: ST_TO_ADDR
// for i in units do
61843: LD_ADDR_VAR 0 4
61847: PUSH
61848: LD_VAR 0 1
61852: PUSH
61853: FOR_IN
61854: IFFALSE 61904
// if GetTag ( i ) = tag then
61856: LD_VAR 0 4
61860: PPUSH
61861: CALL_OW 110
61865: PUSH
61866: LD_VAR 0 2
61870: EQUAL
61871: IFFALSE 61902
// result := Insert ( result , result + 1 , i ) ;
61873: LD_ADDR_VAR 0 3
61877: PUSH
61878: LD_VAR 0 3
61882: PPUSH
61883: LD_VAR 0 3
61887: PUSH
61888: LD_INT 1
61890: PLUS
61891: PPUSH
61892: LD_VAR 0 4
61896: PPUSH
61897: CALL_OW 2
61901: ST_TO_ADDR
61902: GO 61853
61904: POP
61905: POP
// end ;
61906: LD_VAR 0 3
61910: RET
// export function IsDriver ( un ) ; begin
61911: LD_INT 0
61913: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61914: LD_ADDR_VAR 0 2
61918: PUSH
61919: LD_VAR 0 1
61923: PUSH
61924: LD_INT 55
61926: PUSH
61927: EMPTY
61928: LIST
61929: PPUSH
61930: CALL_OW 69
61934: IN
61935: ST_TO_ADDR
// end ;
61936: LD_VAR 0 2
61940: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61941: LD_INT 0
61943: PPUSH
61944: PPUSH
// list := [ ] ;
61945: LD_ADDR_VAR 0 5
61949: PUSH
61950: EMPTY
61951: ST_TO_ADDR
// case d of 0 :
61952: LD_VAR 0 3
61956: PUSH
61957: LD_INT 0
61959: DOUBLE
61960: EQUAL
61961: IFTRUE 61965
61963: GO 62098
61965: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61966: LD_ADDR_VAR 0 5
61970: PUSH
61971: LD_VAR 0 1
61975: PUSH
61976: LD_INT 4
61978: MINUS
61979: PUSH
61980: LD_VAR 0 2
61984: PUSH
61985: LD_INT 4
61987: MINUS
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: PUSH
61997: LD_VAR 0 1
62001: PUSH
62002: LD_INT 3
62004: MINUS
62005: PUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: PUSH
62019: LD_VAR 0 1
62023: PUSH
62024: LD_INT 4
62026: PLUS
62027: PUSH
62028: LD_VAR 0 2
62032: PUSH
62033: LD_INT 4
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: PUSH
62041: LD_VAR 0 1
62045: PUSH
62046: LD_INT 3
62048: PLUS
62049: PUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_INT 3
62057: PLUS
62058: PUSH
62059: LD_INT 5
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: LIST
62066: PUSH
62067: LD_VAR 0 1
62071: PUSH
62072: LD_VAR 0 2
62076: PUSH
62077: LD_INT 4
62079: PLUS
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: ST_TO_ADDR
// end ; 1 :
62096: GO 62796
62098: LD_INT 1
62100: DOUBLE
62101: EQUAL
62102: IFTRUE 62106
62104: GO 62239
62106: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62107: LD_ADDR_VAR 0 5
62111: PUSH
62112: LD_VAR 0 1
62116: PUSH
62117: LD_VAR 0 2
62121: PUSH
62122: LD_INT 4
62124: MINUS
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: PUSH
62134: LD_VAR 0 1
62138: PUSH
62139: LD_INT 3
62141: MINUS
62142: PUSH
62143: LD_VAR 0 2
62147: PUSH
62148: LD_INT 3
62150: MINUS
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: PUSH
62160: LD_VAR 0 1
62164: PUSH
62165: LD_INT 4
62167: MINUS
62168: PUSH
62169: LD_VAR 0 2
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: PUSH
62182: LD_VAR 0 1
62186: PUSH
62187: LD_VAR 0 2
62191: PUSH
62192: LD_INT 3
62194: PLUS
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: PUSH
62204: LD_VAR 0 1
62208: PUSH
62209: LD_INT 4
62211: PLUS
62212: PUSH
62213: LD_VAR 0 2
62217: PUSH
62218: LD_INT 4
62220: PLUS
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// end ; 2 :
62237: GO 62796
62239: LD_INT 2
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62376
62247: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62248: LD_ADDR_VAR 0 5
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_VAR 0 2
62262: PUSH
62263: LD_INT 3
62265: MINUS
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: PUSH
62275: LD_VAR 0 1
62279: PUSH
62280: LD_INT 4
62282: PLUS
62283: PUSH
62284: LD_VAR 0 2
62288: PUSH
62289: LD_INT 4
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_VAR 0 2
62306: PUSH
62307: LD_INT 4
62309: PLUS
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: PUSH
62319: LD_VAR 0 1
62323: PUSH
62324: LD_INT 3
62326: MINUS
62327: PUSH
62328: LD_VAR 0 2
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: PUSH
62341: LD_VAR 0 1
62345: PUSH
62346: LD_INT 4
62348: MINUS
62349: PUSH
62350: LD_VAR 0 2
62354: PUSH
62355: LD_INT 4
62357: MINUS
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// end ; 3 :
62374: GO 62796
62376: LD_INT 3
62378: DOUBLE
62379: EQUAL
62380: IFTRUE 62384
62382: GO 62517
62384: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62385: LD_ADDR_VAR 0 5
62389: PUSH
62390: LD_VAR 0 1
62394: PUSH
62395: LD_INT 3
62397: PLUS
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 4
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: PUSH
62412: LD_VAR 0 1
62416: PUSH
62417: LD_INT 4
62419: PLUS
62420: PUSH
62421: LD_VAR 0 2
62425: PUSH
62426: LD_INT 4
62428: PLUS
62429: PUSH
62430: LD_INT 5
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: PUSH
62438: LD_VAR 0 1
62442: PUSH
62443: LD_INT 4
62445: MINUS
62446: PUSH
62447: LD_VAR 0 2
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: PUSH
62460: LD_VAR 0 1
62464: PUSH
62465: LD_VAR 0 2
62469: PUSH
62470: LD_INT 4
62472: MINUS
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: PUSH
62482: LD_VAR 0 1
62486: PUSH
62487: LD_INT 3
62489: MINUS
62490: PUSH
62491: LD_VAR 0 2
62495: PUSH
62496: LD_INT 3
62498: MINUS
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: ST_TO_ADDR
// end ; 4 :
62515: GO 62796
62517: LD_INT 4
62519: DOUBLE
62520: EQUAL
62521: IFTRUE 62525
62523: GO 62658
62525: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62526: LD_ADDR_VAR 0 5
62530: PUSH
62531: LD_VAR 0 1
62535: PUSH
62536: LD_VAR 0 2
62540: PUSH
62541: LD_INT 4
62543: PLUS
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: PUSH
62553: LD_VAR 0 1
62557: PUSH
62558: LD_INT 3
62560: PLUS
62561: PUSH
62562: LD_VAR 0 2
62566: PUSH
62567: LD_INT 3
62569: PLUS
62570: PUSH
62571: LD_INT 5
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: LD_VAR 0 1
62583: PUSH
62584: LD_INT 4
62586: PLUS
62587: PUSH
62588: LD_VAR 0 2
62592: PUSH
62593: LD_INT 4
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: PUSH
62601: LD_VAR 0 1
62605: PUSH
62606: LD_VAR 0 2
62610: PUSH
62611: LD_INT 3
62613: MINUS
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 1
62627: PUSH
62628: LD_INT 4
62630: MINUS
62631: PUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 4
62639: MINUS
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// end ; 5 :
62656: GO 62796
62658: LD_INT 5
62660: DOUBLE
62661: EQUAL
62662: IFTRUE 62666
62664: GO 62795
62666: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 4
62679: MINUS
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: PUSH
62694: LD_VAR 0 1
62698: PUSH
62699: LD_VAR 0 2
62703: PUSH
62704: LD_INT 4
62706: MINUS
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: PUSH
62716: LD_VAR 0 1
62720: PUSH
62721: LD_INT 4
62723: PLUS
62724: PUSH
62725: LD_VAR 0 2
62729: PUSH
62730: LD_INT 4
62732: PLUS
62733: PUSH
62734: LD_INT 5
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_INT 3
62749: PLUS
62750: PUSH
62751: LD_VAR 0 2
62755: PUSH
62756: LD_INT 4
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_VAR 0 2
62773: PUSH
62774: LD_INT 3
62776: PLUS
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: LIST
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// end ; end ;
62793: GO 62796
62795: POP
// result := list ;
62796: LD_ADDR_VAR 0 4
62800: PUSH
62801: LD_VAR 0 5
62805: ST_TO_ADDR
// end ;
62806: LD_VAR 0 4
62810: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62811: LD_INT 0
62813: PPUSH
62814: PPUSH
62815: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62816: LD_VAR 0 1
62820: NOT
62821: PUSH
62822: LD_VAR 0 2
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 4
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: IN
62845: NOT
62846: OR
62847: IFFALSE 62851
// exit ;
62849: GO 62943
// tmp := [ ] ;
62851: LD_ADDR_VAR 0 5
62855: PUSH
62856: EMPTY
62857: ST_TO_ADDR
// for i in units do
62858: LD_ADDR_VAR 0 4
62862: PUSH
62863: LD_VAR 0 1
62867: PUSH
62868: FOR_IN
62869: IFFALSE 62912
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62871: LD_ADDR_VAR 0 5
62875: PUSH
62876: LD_VAR 0 5
62880: PPUSH
62881: LD_VAR 0 5
62885: PUSH
62886: LD_INT 1
62888: PLUS
62889: PPUSH
62890: LD_VAR 0 4
62894: PPUSH
62895: LD_VAR 0 2
62899: PPUSH
62900: CALL_OW 259
62904: PPUSH
62905: CALL_OW 2
62909: ST_TO_ADDR
62910: GO 62868
62912: POP
62913: POP
// if not tmp then
62914: LD_VAR 0 5
62918: NOT
62919: IFFALSE 62923
// exit ;
62921: GO 62943
// result := SortListByListDesc ( units , tmp ) ;
62923: LD_ADDR_VAR 0 3
62927: PUSH
62928: LD_VAR 0 1
62932: PPUSH
62933: LD_VAR 0 5
62937: PPUSH
62938: CALL_OW 77
62942: ST_TO_ADDR
// end ;
62943: LD_VAR 0 3
62947: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62948: LD_INT 0
62950: PPUSH
62951: PPUSH
62952: PPUSH
// x := GetX ( building ) ;
62953: LD_ADDR_VAR 0 4
62957: PUSH
62958: LD_VAR 0 2
62962: PPUSH
62963: CALL_OW 250
62967: ST_TO_ADDR
// y := GetY ( building ) ;
62968: LD_ADDR_VAR 0 5
62972: PUSH
62973: LD_VAR 0 2
62977: PPUSH
62978: CALL_OW 251
62982: ST_TO_ADDR
// if GetTaskList ( unit ) then
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 437
62992: IFFALSE 63087
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62994: LD_STRING e
62996: PUSH
62997: LD_VAR 0 1
63001: PPUSH
63002: CALL_OW 437
63006: PUSH
63007: LD_INT 1
63009: ARRAY
63010: PUSH
63011: LD_INT 1
63013: ARRAY
63014: EQUAL
63015: PUSH
63016: LD_VAR 0 4
63020: PUSH
63021: LD_VAR 0 1
63025: PPUSH
63026: CALL_OW 437
63030: PUSH
63031: LD_INT 1
63033: ARRAY
63034: PUSH
63035: LD_INT 2
63037: ARRAY
63038: EQUAL
63039: AND
63040: PUSH
63041: LD_VAR 0 5
63045: PUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: CALL_OW 437
63055: PUSH
63056: LD_INT 1
63058: ARRAY
63059: PUSH
63060: LD_INT 3
63062: ARRAY
63063: EQUAL
63064: AND
63065: IFFALSE 63077
// result := true else
63067: LD_ADDR_VAR 0 3
63071: PUSH
63072: LD_INT 1
63074: ST_TO_ADDR
63075: GO 63085
// result := false ;
63077: LD_ADDR_VAR 0 3
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
// end else
63085: GO 63095
// result := false ;
63087: LD_ADDR_VAR 0 3
63091: PUSH
63092: LD_INT 0
63094: ST_TO_ADDR
// end ;
63095: LD_VAR 0 3
63099: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63100: LD_INT 0
63102: PPUSH
63103: PPUSH
63104: PPUSH
63105: PPUSH
// if not unit or not area then
63106: LD_VAR 0 1
63110: NOT
63111: PUSH
63112: LD_VAR 0 2
63116: NOT
63117: OR
63118: IFFALSE 63122
// exit ;
63120: GO 63286
// tmp := AreaToList ( area , i ) ;
63122: LD_ADDR_VAR 0 6
63126: PUSH
63127: LD_VAR 0 2
63131: PPUSH
63132: LD_VAR 0 5
63136: PPUSH
63137: CALL_OW 517
63141: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63142: LD_ADDR_VAR 0 5
63146: PUSH
63147: DOUBLE
63148: LD_INT 1
63150: DEC
63151: ST_TO_ADDR
63152: LD_VAR 0 6
63156: PUSH
63157: LD_INT 1
63159: ARRAY
63160: PUSH
63161: FOR_TO
63162: IFFALSE 63284
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63164: LD_ADDR_VAR 0 7
63168: PUSH
63169: LD_VAR 0 6
63173: PUSH
63174: LD_INT 1
63176: ARRAY
63177: PUSH
63178: LD_VAR 0 5
63182: ARRAY
63183: PUSH
63184: LD_VAR 0 6
63188: PUSH
63189: LD_INT 2
63191: ARRAY
63192: PUSH
63193: LD_VAR 0 5
63197: ARRAY
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63203: LD_VAR 0 7
63207: PUSH
63208: LD_INT 1
63210: ARRAY
63211: PPUSH
63212: LD_VAR 0 7
63216: PUSH
63217: LD_INT 2
63219: ARRAY
63220: PPUSH
63221: CALL_OW 428
63225: PUSH
63226: LD_INT 0
63228: EQUAL
63229: IFFALSE 63282
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63231: LD_VAR 0 1
63235: PPUSH
63236: LD_VAR 0 7
63240: PUSH
63241: LD_INT 1
63243: ARRAY
63244: PPUSH
63245: LD_VAR 0 7
63249: PUSH
63250: LD_INT 2
63252: ARRAY
63253: PPUSH
63254: LD_VAR 0 3
63258: PPUSH
63259: CALL_OW 48
// result := IsPlaced ( unit ) ;
63263: LD_ADDR_VAR 0 4
63267: PUSH
63268: LD_VAR 0 1
63272: PPUSH
63273: CALL_OW 305
63277: ST_TO_ADDR
// exit ;
63278: POP
63279: POP
63280: GO 63286
// end ; end ;
63282: GO 63161
63284: POP
63285: POP
// end ;
63286: LD_VAR 0 4
63290: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63291: LD_INT 0
63293: PPUSH
63294: PPUSH
63295: PPUSH
// if not side or side > 8 then
63296: LD_VAR 0 1
63300: NOT
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_INT 8
63309: GREATER
63310: OR
63311: IFFALSE 63315
// exit ;
63313: GO 63502
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63315: LD_ADDR_VAR 0 4
63319: PUSH
63320: LD_INT 22
63322: PUSH
63323: LD_VAR 0 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 21
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PPUSH
63346: CALL_OW 69
63350: ST_TO_ADDR
// if not tmp then
63351: LD_VAR 0 4
63355: NOT
63356: IFFALSE 63360
// exit ;
63358: GO 63502
// enable_addtolog := true ;
63360: LD_ADDR_OWVAR 81
63364: PUSH
63365: LD_INT 1
63367: ST_TO_ADDR
// AddToLog ( [ ) ;
63368: LD_STRING [
63370: PPUSH
63371: CALL_OW 561
// for i in tmp do
63375: LD_ADDR_VAR 0 3
63379: PUSH
63380: LD_VAR 0 4
63384: PUSH
63385: FOR_IN
63386: IFFALSE 63493
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63388: LD_STRING [
63390: PUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: CALL_OW 266
63400: STR
63401: PUSH
63402: LD_STRING , 
63404: STR
63405: PUSH
63406: LD_VAR 0 3
63410: PPUSH
63411: CALL_OW 250
63415: STR
63416: PUSH
63417: LD_STRING , 
63419: STR
63420: PUSH
63421: LD_VAR 0 3
63425: PPUSH
63426: CALL_OW 251
63430: STR
63431: PUSH
63432: LD_STRING , 
63434: STR
63435: PUSH
63436: LD_VAR 0 3
63440: PPUSH
63441: CALL_OW 254
63445: STR
63446: PUSH
63447: LD_STRING , 
63449: STR
63450: PUSH
63451: LD_VAR 0 3
63455: PPUSH
63456: LD_INT 1
63458: PPUSH
63459: CALL_OW 268
63463: STR
63464: PUSH
63465: LD_STRING , 
63467: STR
63468: PUSH
63469: LD_VAR 0 3
63473: PPUSH
63474: LD_INT 2
63476: PPUSH
63477: CALL_OW 268
63481: STR
63482: PUSH
63483: LD_STRING ],
63485: STR
63486: PPUSH
63487: CALL_OW 561
// end ;
63491: GO 63385
63493: POP
63494: POP
// AddToLog ( ]; ) ;
63495: LD_STRING ];
63497: PPUSH
63498: CALL_OW 561
// end ;
63502: LD_VAR 0 2
63506: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63507: LD_INT 0
63509: PPUSH
63510: PPUSH
63511: PPUSH
63512: PPUSH
63513: PPUSH
// if not area or not rate or not max then
63514: LD_VAR 0 1
63518: NOT
63519: PUSH
63520: LD_VAR 0 2
63524: NOT
63525: OR
63526: PUSH
63527: LD_VAR 0 4
63531: NOT
63532: OR
63533: IFFALSE 63537
// exit ;
63535: GO 63729
// while 1 do
63537: LD_INT 1
63539: IFFALSE 63729
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63541: LD_ADDR_VAR 0 9
63545: PUSH
63546: LD_VAR 0 1
63550: PPUSH
63551: LD_INT 1
63553: PPUSH
63554: CALL_OW 287
63558: PUSH
63559: LD_INT 10
63561: MUL
63562: ST_TO_ADDR
// r := rate / 10 ;
63563: LD_ADDR_VAR 0 7
63567: PUSH
63568: LD_VAR 0 2
63572: PUSH
63573: LD_INT 10
63575: DIVREAL
63576: ST_TO_ADDR
// time := 1 1$00 ;
63577: LD_ADDR_VAR 0 8
63581: PUSH
63582: LD_INT 2100
63584: ST_TO_ADDR
// if amount < min then
63585: LD_VAR 0 9
63589: PUSH
63590: LD_VAR 0 3
63594: LESS
63595: IFFALSE 63613
// r := r * 2 else
63597: LD_ADDR_VAR 0 7
63601: PUSH
63602: LD_VAR 0 7
63606: PUSH
63607: LD_INT 2
63609: MUL
63610: ST_TO_ADDR
63611: GO 63639
// if amount > max then
63613: LD_VAR 0 9
63617: PUSH
63618: LD_VAR 0 4
63622: GREATER
63623: IFFALSE 63639
// r := r / 2 ;
63625: LD_ADDR_VAR 0 7
63629: PUSH
63630: LD_VAR 0 7
63634: PUSH
63635: LD_INT 2
63637: DIVREAL
63638: ST_TO_ADDR
// time := time / r ;
63639: LD_ADDR_VAR 0 8
63643: PUSH
63644: LD_VAR 0 8
63648: PUSH
63649: LD_VAR 0 7
63653: DIVREAL
63654: ST_TO_ADDR
// if time < 0 then
63655: LD_VAR 0 8
63659: PUSH
63660: LD_INT 0
63662: LESS
63663: IFFALSE 63680
// time := time * - 1 ;
63665: LD_ADDR_VAR 0 8
63669: PUSH
63670: LD_VAR 0 8
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: MUL
63679: ST_TO_ADDR
// wait ( time ) ;
63680: LD_VAR 0 8
63684: PPUSH
63685: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63689: LD_INT 35
63691: PPUSH
63692: LD_INT 875
63694: PPUSH
63695: CALL_OW 12
63699: PPUSH
63700: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63704: LD_INT 1
63706: PPUSH
63707: LD_INT 5
63709: PPUSH
63710: CALL_OW 12
63714: PPUSH
63715: LD_VAR 0 1
63719: PPUSH
63720: LD_INT 1
63722: PPUSH
63723: CALL_OW 55
// end ;
63727: GO 63537
// end ;
63729: LD_VAR 0 5
63733: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63734: LD_INT 0
63736: PPUSH
63737: PPUSH
63738: PPUSH
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
// if not turrets or not factories then
63744: LD_VAR 0 1
63748: NOT
63749: PUSH
63750: LD_VAR 0 2
63754: NOT
63755: OR
63756: IFFALSE 63760
// exit ;
63758: GO 64067
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63760: LD_ADDR_VAR 0 10
63764: PUSH
63765: LD_INT 5
63767: PUSH
63768: LD_INT 6
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: LD_INT 4
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 24
63802: PUSH
63803: LD_INT 25
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 23
63812: PUSH
63813: LD_INT 27
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 42
63826: PUSH
63827: LD_INT 43
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 44
63836: PUSH
63837: LD_INT 46
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 45
63846: PUSH
63847: LD_INT 47
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// result := [ ] ;
63864: LD_ADDR_VAR 0 3
63868: PUSH
63869: EMPTY
63870: ST_TO_ADDR
// for i in turrets do
63871: LD_ADDR_VAR 0 4
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: FOR_IN
63882: IFFALSE 64065
// begin nat := GetNation ( i ) ;
63884: LD_ADDR_VAR 0 7
63888: PUSH
63889: LD_VAR 0 4
63893: PPUSH
63894: CALL_OW 248
63898: ST_TO_ADDR
// weapon := 0 ;
63899: LD_ADDR_VAR 0 8
63903: PUSH
63904: LD_INT 0
63906: ST_TO_ADDR
// if not nat then
63907: LD_VAR 0 7
63911: NOT
63912: IFFALSE 63916
// continue ;
63914: GO 63881
// for j in list [ nat ] do
63916: LD_ADDR_VAR 0 5
63920: PUSH
63921: LD_VAR 0 10
63925: PUSH
63926: LD_VAR 0 7
63930: ARRAY
63931: PUSH
63932: FOR_IN
63933: IFFALSE 63974
// if GetBWeapon ( i ) = j [ 1 ] then
63935: LD_VAR 0 4
63939: PPUSH
63940: CALL_OW 269
63944: PUSH
63945: LD_VAR 0 5
63949: PUSH
63950: LD_INT 1
63952: ARRAY
63953: EQUAL
63954: IFFALSE 63972
// begin weapon := j [ 2 ] ;
63956: LD_ADDR_VAR 0 8
63960: PUSH
63961: LD_VAR 0 5
63965: PUSH
63966: LD_INT 2
63968: ARRAY
63969: ST_TO_ADDR
// break ;
63970: GO 63974
// end ;
63972: GO 63932
63974: POP
63975: POP
// if not weapon then
63976: LD_VAR 0 8
63980: NOT
63981: IFFALSE 63985
// continue ;
63983: GO 63881
// for k in factories do
63985: LD_ADDR_VAR 0 6
63989: PUSH
63990: LD_VAR 0 2
63994: PUSH
63995: FOR_IN
63996: IFFALSE 64061
// begin weapons := AvailableWeaponList ( k ) ;
63998: LD_ADDR_VAR 0 9
64002: PUSH
64003: LD_VAR 0 6
64007: PPUSH
64008: CALL_OW 478
64012: ST_TO_ADDR
// if not weapons then
64013: LD_VAR 0 9
64017: NOT
64018: IFFALSE 64022
// continue ;
64020: GO 63995
// if weapon in weapons then
64022: LD_VAR 0 8
64026: PUSH
64027: LD_VAR 0 9
64031: IN
64032: IFFALSE 64059
// begin result := [ i , weapon ] ;
64034: LD_ADDR_VAR 0 3
64038: PUSH
64039: LD_VAR 0 4
64043: PUSH
64044: LD_VAR 0 8
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: ST_TO_ADDR
// exit ;
64053: POP
64054: POP
64055: POP
64056: POP
64057: GO 64067
// end ; end ;
64059: GO 63995
64061: POP
64062: POP
// end ;
64063: GO 63881
64065: POP
64066: POP
// end ;
64067: LD_VAR 0 3
64071: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64072: LD_INT 0
64074: PPUSH
// if not side or side > 8 then
64075: LD_VAR 0 3
64079: NOT
64080: PUSH
64081: LD_VAR 0 3
64085: PUSH
64086: LD_INT 8
64088: GREATER
64089: OR
64090: IFFALSE 64094
// exit ;
64092: GO 64153
// if not range then
64094: LD_VAR 0 4
64098: NOT
64099: IFFALSE 64110
// range := - 12 ;
64101: LD_ADDR_VAR 0 4
64105: PUSH
64106: LD_INT 12
64108: NEG
64109: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64110: LD_VAR 0 1
64114: PPUSH
64115: LD_VAR 0 2
64119: PPUSH
64120: LD_VAR 0 3
64124: PPUSH
64125: LD_VAR 0 4
64129: PPUSH
64130: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64134: LD_VAR 0 1
64138: PPUSH
64139: LD_VAR 0 2
64143: PPUSH
64144: LD_VAR 0 3
64148: PPUSH
64149: CALL_OW 331
// end ;
64153: LD_VAR 0 5
64157: RET
// export function Video ( mode ) ; begin
64158: LD_INT 0
64160: PPUSH
// ingame_video = mode ;
64161: LD_ADDR_OWVAR 52
64165: PUSH
64166: LD_VAR 0 1
64170: ST_TO_ADDR
// interface_hidden = mode ;
64171: LD_ADDR_OWVAR 54
64175: PUSH
64176: LD_VAR 0 1
64180: ST_TO_ADDR
// end ;
64181: LD_VAR 0 2
64185: RET
// export function Join ( array , element ) ; begin
64186: LD_INT 0
64188: PPUSH
// result := array ^ element ;
64189: LD_ADDR_VAR 0 3
64193: PUSH
64194: LD_VAR 0 1
64198: PUSH
64199: LD_VAR 0 2
64203: ADD
64204: ST_TO_ADDR
// end ;
64205: LD_VAR 0 3
64209: RET
// export function JoinUnion ( array , element ) ; begin
64210: LD_INT 0
64212: PPUSH
// result := array union element ;
64213: LD_ADDR_VAR 0 3
64217: PUSH
64218: LD_VAR 0 1
64222: PUSH
64223: LD_VAR 0 2
64227: UNION
64228: ST_TO_ADDR
// end ;
64229: LD_VAR 0 3
64233: RET
// export function GetBehemoths ( side ) ; begin
64234: LD_INT 0
64236: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64237: LD_ADDR_VAR 0 2
64241: PUSH
64242: LD_INT 22
64244: PUSH
64245: LD_VAR 0 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 31
64256: PUSH
64257: LD_INT 25
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PPUSH
64268: CALL_OW 69
64272: ST_TO_ADDR
// end ;
64273: LD_VAR 0 2
64277: RET
// export function Shuffle ( array ) ; var i , index ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
64282: PPUSH
// result := [ ] ;
64283: LD_ADDR_VAR 0 2
64287: PUSH
64288: EMPTY
64289: ST_TO_ADDR
// if not array then
64290: LD_VAR 0 1
64294: NOT
64295: IFFALSE 64299
// exit ;
64297: GO 64398
// Randomize ;
64299: CALL_OW 10
// for i = array downto 1 do
64303: LD_ADDR_VAR 0 3
64307: PUSH
64308: DOUBLE
64309: LD_VAR 0 1
64313: INC
64314: ST_TO_ADDR
64315: LD_INT 1
64317: PUSH
64318: FOR_DOWNTO
64319: IFFALSE 64396
// begin index := rand ( 1 , array ) ;
64321: LD_ADDR_VAR 0 4
64325: PUSH
64326: LD_INT 1
64328: PPUSH
64329: LD_VAR 0 1
64333: PPUSH
64334: CALL_OW 12
64338: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64339: LD_ADDR_VAR 0 2
64343: PUSH
64344: LD_VAR 0 2
64348: PPUSH
64349: LD_VAR 0 2
64353: PUSH
64354: LD_INT 1
64356: PLUS
64357: PPUSH
64358: LD_VAR 0 1
64362: PUSH
64363: LD_VAR 0 4
64367: ARRAY
64368: PPUSH
64369: CALL_OW 2
64373: ST_TO_ADDR
// array := Delete ( array , index ) ;
64374: LD_ADDR_VAR 0 1
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: LD_VAR 0 4
64388: PPUSH
64389: CALL_OW 3
64393: ST_TO_ADDR
// end ;
64394: GO 64318
64396: POP
64397: POP
// end ;
64398: LD_VAR 0 2
64402: RET
// export function GetBaseMaterials ( base ) ; begin
64403: LD_INT 0
64405: PPUSH
// result := [ 0 , 0 , 0 ] ;
64406: LD_ADDR_VAR 0 2
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: ST_TO_ADDR
// if not base then
64425: LD_VAR 0 1
64429: NOT
64430: IFFALSE 64434
// exit ;
64432: GO 64483
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64434: LD_ADDR_VAR 0 2
64438: PUSH
64439: LD_VAR 0 1
64443: PPUSH
64444: LD_INT 1
64446: PPUSH
64447: CALL_OW 275
64451: PUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_INT 2
64459: PPUSH
64460: CALL_OW 275
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: LD_INT 3
64472: PPUSH
64473: CALL_OW 275
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// end ;
64483: LD_VAR 0 2
64487: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64488: LD_INT 0
64490: PPUSH
64491: PPUSH
// result := array ;
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 1
64501: ST_TO_ADDR
// if size > 0 then
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 0
64509: GREATER
64510: IFFALSE 64556
// for i := array downto size do
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: DOUBLE
64518: LD_VAR 0 1
64522: INC
64523: ST_TO_ADDR
64524: LD_VAR 0 2
64528: PUSH
64529: FOR_DOWNTO
64530: IFFALSE 64554
// result := Delete ( result , result ) ;
64532: LD_ADDR_VAR 0 3
64536: PUSH
64537: LD_VAR 0 3
64541: PPUSH
64542: LD_VAR 0 3
64546: PPUSH
64547: CALL_OW 3
64551: ST_TO_ADDR
64552: GO 64529
64554: POP
64555: POP
// end ;
64556: LD_VAR 0 3
64560: RET
// export function ComExit ( unit ) ; var tmp ; begin
64561: LD_INT 0
64563: PPUSH
64564: PPUSH
// if not IsInUnit ( unit ) then
64565: LD_VAR 0 1
64569: PPUSH
64570: CALL_OW 310
64574: NOT
64575: IFFALSE 64579
// exit ;
64577: GO 64639
// tmp := IsInUnit ( unit ) ;
64579: LD_ADDR_VAR 0 3
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 310
64593: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64594: LD_VAR 0 3
64598: PPUSH
64599: CALL_OW 247
64603: PUSH
64604: LD_INT 2
64606: EQUAL
64607: IFFALSE 64620
// ComExitVehicle ( unit ) else
64609: LD_VAR 0 1
64613: PPUSH
64614: CALL_OW 121
64618: GO 64629
// ComExitBuilding ( unit ) ;
64620: LD_VAR 0 1
64624: PPUSH
64625: CALL_OW 122
// result := tmp ;
64629: LD_ADDR_VAR 0 2
64633: PUSH
64634: LD_VAR 0 3
64638: ST_TO_ADDR
// end ;
64639: LD_VAR 0 2
64643: RET
// export function ResetHc ; begin
64644: LD_INT 0
64646: PPUSH
// InitHc ;
64647: CALL_OW 19
// hc_importance := 0 ;
64651: LD_ADDR_OWVAR 32
64655: PUSH
64656: LD_INT 0
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 1
64663: RET
