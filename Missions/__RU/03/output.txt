// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 8171 0 0
// PrepareRussian ;
  12: CALL 370 0 0
// PrepareAmerican ;
  16: CALL 2710 0 0
// Action ;
  20: CALL 13796 0 0
// end ;
  24: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter , americanRetreat , omicronRetreatCounter , joinToOmicronCounter ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 02_
  57: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  58: LD_ADDR_EXP 3
  62: PUSH
  63: LD_STRING 03_
  65: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  66: LD_ADDR_EXP 6
  70: PUSH
  71: LD_STRING 02_belkovSaved
  73: PPUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 30
  81: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  82: LD_ADDR_EXP 4
  86: PUSH
  87: LD_STRING 02_Selfish
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: CALL_OW 30
  97: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
  98: LD_ADDR_EXP 15
 102: PUSH
 103: LD_STRING 02_DickensKilled
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL_OW 30
 113: ST_TO_ADDR
// hasProblem := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gameStart := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// arabAttackActive := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// allianceAttacked := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 146: LD_ADDR_EXP 17
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// foundOil := false ;
 154: LD_ADDR_EXP 10
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasScholtze := false ;
 162: LD_ADDR_EXP 11
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasKagan := false ;
 170: LD_ADDR_EXP 12
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 178: LD_ADDR_EXP 13
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 186: LD_ADDR_EXP 22
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasOilTower := false ;
 194: LD_ADDR_EXP 14
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// hasFactory := false ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// canSearchForScholtze := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// retreat := false ;
 218: LD_ADDR_EXP 18
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// kurinWaitForVehiclesTime := [ 30 30$0 , 28 28$0 , 26 26$0 , 24 24$0 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 63000
 233: PUSH
 234: LD_INT 58800
 236: PUSH
 237: LD_INT 54600
 239: PUSH
 240: LD_INT 50400
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 3
 262: PUSH
 263: LD_INT 3
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 4
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 284: LD_ADDR_EXP 23
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 292: LD_ADDR_EXP 24
 296: PUSH
 297: LD_INT 1
 299: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 300: LD_ADDR_EXP 25
 304: PUSH
 305: LD_INT 4
 307: PUSH
 308: LD_INT 5
 310: PUSH
 311: LD_INT 6
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: LD_OWVAR 67
 327: ARRAY
 328: ST_TO_ADDR
// americanRetreat := false ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// omicronRetreatCounter := 0 ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// joinToOmicronCounter := [ ] ;
 345: LD_ADDR_EXP 28
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// if debug then
 352: LD_EXP 1
 356: IFFALSE 365
// FogOff ( 3 ) ;
 358: LD_INT 3
 360: PPUSH
 361: CALL_OW 344
// end ; end_of_file
 365: LD_VAR 0 1
 369: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 370: LD_INT 0
 372: PPUSH
 373: PPUSH
 374: PPUSH
 375: PPUSH
 376: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 377: LD_EXP 45
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 3000
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 397: LD_EXP 45
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 2
 409: PPUSH
 410: LD_INT 600
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 417: LD_EXP 46
 421: PPUSH
 422: CALL_OW 274
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 350
 432: PUSH
 433: LD_INT 280
 435: PUSH
 436: LD_INT 210
 438: PUSH
 439: LD_INT 150
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: PUSH
 448: LD_OWVAR 67
 452: ARRAY
 453: PPUSH
 454: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 458: LD_EXP 46
 462: PPUSH
 463: CALL_OW 274
 467: PPUSH
 468: LD_INT 2
 470: PPUSH
 471: LD_INT 60
 473: PUSH
 474: LD_INT 40
 476: PUSH
 477: LD_INT 20
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: CALL_OW 277
// uc_side := 3 ;
 499: LD_ADDR_OWVAR 20
 503: PUSH
 504: LD_INT 3
 506: ST_TO_ADDR
// uc_nation := 3 ;
 507: LD_ADDR_OWVAR 21
 511: PUSH
 512: LD_INT 3
 514: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 515: LD_ADDR_EXP 29
 519: PUSH
 520: LD_STRING Burlak
 522: PPUSH
 523: LD_EXP 1
 527: NOT
 528: PPUSH
 529: LD_EXP 2
 533: PPUSH
 534: CALL 22050 0 3
 538: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 539: LD_ADDR_EXP 39
 543: PUSH
 544: EMPTY
 545: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 546: LD_ADDR_EXP 38
 550: PUSH
 551: EMPTY
 552: ST_TO_ADDR
// popovTeam := [ ] ;
 553: LD_ADDR_EXP 44
 557: PUSH
 558: EMPTY
 559: ST_TO_ADDR
// grishkoTeam := [ ] ;
 560: LD_ADDR_EXP 40
 564: PUSH
 565: EMPTY
 566: ST_TO_ADDR
// uc_side := 5 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 5
 574: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 575: LD_ADDR_EXP 36
 579: PUSH
 580: LD_STRING Scholtze
 582: PPUSH
 583: CALL_OW 25
 587: ST_TO_ADDR
// uc_side := 6 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 6
 595: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 596: LD_ADDR_EXP 30
 600: PUSH
 601: LD_STRING Gnyevko
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: LD_EXP 2
 614: PPUSH
 615: CALL 22050 0 3
 619: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 620: LD_ADDR_EXP 32
 624: PUSH
 625: LD_STRING Kirilenkova
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_EXP 2
 638: PPUSH
 639: CALL 22050 0 3
 643: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 644: LD_ADDR_EXP 34
 648: PUSH
 649: LD_STRING Kovalyuk
 651: PPUSH
 652: LD_EXP 1
 656: NOT
 657: PPUSH
 658: LD_EXP 2
 662: PPUSH
 663: CALL 22050 0 3
 667: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 668: LD_ADDR_EXP 31
 672: PUSH
 673: LD_STRING Belkov
 675: PPUSH
 676: LD_EXP 1
 680: NOT
 681: PPUSH
 682: LD_EXP 2
 686: PPUSH
 687: CALL 22050 0 3
 691: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 692: LD_ADDR_EXP 33
 696: PUSH
 697: LD_STRING Kurin
 699: PPUSH
 700: CALL_OW 25
 704: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 705: LD_ADDR_EXP 35
 709: PUSH
 710: LD_STRING Popov
 712: PPUSH
 713: CALL_OW 25
 717: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 718: LD_ADDR_EXP 37
 722: PUSH
 723: LD_STRING Grishko
 725: PPUSH
 726: CALL_OW 25
 730: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 731: LD_ADDR_EXP 41
 735: PUSH
 736: LD_EXP 2
 740: PUSH
 741: LD_STRING burlakTeam
 743: STR
 744: PPUSH
 745: CALL_OW 31
 749: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 750: LD_ADDR_EXP 42
 754: PUSH
 755: LD_EXP 2
 759: PUSH
 760: LD_STRING kirovTeam
 762: STR
 763: PPUSH
 764: CALL_OW 31
 768: ST_TO_ADDR
// if kirovTeam < 15 then
 769: LD_EXP 42
 773: PUSH
 774: LD_INT 15
 776: LESS
 777: IFFALSE 849
// for i := Count ( kirovTeam ) to 15 do
 779: LD_ADDR_VAR 0 2
 783: PUSH
 784: DOUBLE
 785: LD_EXP 42
 789: PPUSH
 790: CALL 24274 0 1
 794: DEC
 795: ST_TO_ADDR
 796: LD_INT 15
 798: PUSH
 799: FOR_TO
 800: IFFALSE 847
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 802: LD_INT 0
 804: PPUSH
 805: LD_VAR 0 2
 809: PUSH
 810: LD_INT 4
 812: MOD
 813: PUSH
 814: LD_INT 1
 816: PLUS
 817: PPUSH
 818: LD_INT 2
 820: PPUSH
 821: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 825: LD_ADDR_EXP 42
 829: PUSH
 830: LD_EXP 42
 834: PPUSH
 835: CALL_OW 44
 839: PPUSH
 840: CALL 60250 0 2
 844: ST_TO_ADDR
// end ;
 845: GO 799
 847: POP
 848: POP
// for i in kirovTeam union burlakTeam do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: LD_EXP 42
 858: PUSH
 859: LD_EXP 41
 863: UNION
 864: PUSH
 865: FOR_IN
 866: IFFALSE 1111
// begin case GetClass ( i ) of class_soldier , class_engineer :
 868: LD_VAR 0 2
 872: PPUSH
 873: CALL_OW 257
 877: PUSH
 878: LD_INT 1
 880: DOUBLE
 881: EQUAL
 882: IFTRUE 892
 884: LD_INT 2
 886: DOUBLE
 887: EQUAL
 888: IFTRUE 892
 890: GO 943
 892: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 893: LD_ADDR_VAR 0 5
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 6
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 62
 913: PUSH
 914: EMPTY
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 30
 923: PUSH
 924: LD_INT 4
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: PPUSH
 936: CALL_OW 69
 940: ST_TO_ADDR
 941: GO 1062
 943: LD_INT 4
 945: DOUBLE
 946: EQUAL
 947: IFTRUE 951
 949: GO 1002
 951: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 952: LD_ADDR_VAR 0 5
 956: PUSH
 957: LD_INT 22
 959: PUSH
 960: LD_INT 6
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 3
 969: PUSH
 970: LD_INT 62
 972: PUSH
 973: EMPTY
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 30
 982: PUSH
 983: LD_INT 6
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
1000: GO 1062
1002: LD_INT 3
1004: DOUBLE
1005: EQUAL
1006: IFTRUE 1010
1008: GO 1061
1010: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 6
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 3
1028: PUSH
1029: LD_INT 62
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: LD_INT 30
1041: PUSH
1042: LD_INT 2
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 69
1058: ST_TO_ADDR
1059: GO 1062
1061: POP
// if tmp then
1062: LD_VAR 0 5
1066: IFFALSE 1088
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1068: LD_VAR 0 2
1072: PPUSH
1073: LD_VAR 0 5
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: CALL_OW 52
1086: GO 1109
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1088: LD_VAR 0 2
1092: PPUSH
1093: LD_INT 158
1095: PPUSH
1096: LD_INT 106
1098: PPUSH
1099: LD_INT 3
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 50
// end ;
1109: GO 865
1111: POP
1112: POP
// for i := 1 to 2 do
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: DOUBLE
1119: LD_INT 1
1121: DEC
1122: ST_TO_ADDR
1123: LD_INT 2
1125: PUSH
1126: FOR_TO
1127: IFFALSE 1161
// begin PrepareSoldier ( sex_male , 2 ) ;
1129: LD_INT 1
1131: PPUSH
1132: LD_INT 2
1134: PPUSH
1135: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1139: LD_ADDR_EXP 40
1143: PUSH
1144: LD_EXP 40
1148: PPUSH
1149: CALL_OW 44
1153: PPUSH
1154: CALL 60250 0 2
1158: ST_TO_ADDR
// end ;
1159: GO 1126
1161: POP
1162: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1163: LD_ADDR_EXP 40
1167: PUSH
1168: LD_EXP 40
1172: PPUSH
1173: LD_EXP 37
1177: PPUSH
1178: CALL 60250 0 2
1182: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: LD_STRING 02_VehiclesCount
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: CALL_OW 30
1198: ST_TO_ADDR
// if vehiclesAmount > 4 then
1199: LD_VAR 0 3
1203: PUSH
1204: LD_INT 4
1206: GREATER
1207: IFFALSE 1217
// vehiclesAmount := 4 ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1217: LD_OWVAR 67
1221: PUSH
1222: LD_INT 2
1224: GREATER
1225: IFFALSE 1237
1227: PUSH
1228: LD_VAR 0 3
1232: PUSH
1233: LD_INT 2
1235: GREATER
1236: AND
1237: IFFALSE 1247
// vehiclesAmount := 2 ;
1239: LD_ADDR_VAR 0 3
1243: PUSH
1244: LD_INT 2
1246: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_VAR 0 3
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin uc_side := 3 ;
1265: LD_ADDR_OWVAR 20
1269: PUSH
1270: LD_INT 3
1272: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1273: LD_INT 21
1275: PPUSH
1276: LD_INT 1
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: LD_INT 42
1284: PPUSH
1285: LD_INT 80
1287: PPUSH
1288: CALL 27070 0 5
// veh := CreateVehicle ;
1292: LD_ADDR_VAR 0 4
1296: PUSH
1297: CALL_OW 45
1301: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: LD_INT 5
1312: PPUSH
1313: CALL_OW 12
1317: PPUSH
1318: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1322: LD_VAR 0 4
1326: PPUSH
1327: LD_INT 112
1329: PPUSH
1330: LD_INT 98
1332: PPUSH
1333: LD_INT 12
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 50
// end ;
1343: GO 1262
1345: POP
1346: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: LD_STRING 02_KirovVehiclesCount
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: CALL_OW 30
1362: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: DOUBLE
1369: LD_INT 1
1371: DEC
1372: ST_TO_ADDR
1373: LD_VAR 0 3
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1461
// begin uc_side := 6 ;
1381: LD_ADDR_OWVAR 20
1385: PUSH
1386: LD_INT 6
1388: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1389: LD_INT 21
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: LD_INT 42
1400: PPUSH
1401: LD_INT 80
1403: PPUSH
1404: CALL 27070 0 5
// veh := CreateVehicle ;
1408: LD_ADDR_VAR 0 4
1412: PUSH
1413: CALL_OW 45
1417: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1418: LD_VAR 0 4
1422: PPUSH
1423: LD_INT 0
1425: PPUSH
1426: LD_INT 5
1428: PPUSH
1429: CALL_OW 12
1433: PPUSH
1434: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1438: LD_VAR 0 4
1442: PPUSH
1443: LD_INT 157
1445: PPUSH
1446: LD_INT 106
1448: PPUSH
1449: LD_INT 12
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 50
// end ;
1459: GO 1378
1461: POP
1462: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1463: LD_ADDR_EXP 48
1467: PUSH
1468: LD_EXP 29
1472: PUSH
1473: LD_EXP 34
1477: PUSH
1478: LD_EXP 30
1482: PUSH
1483: LD_EXP 31
1487: PUSH
1488: LD_EXP 36
1492: PUSH
1493: LD_EXP 32
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1506: LD_ADDR_EXP 49
1510: PUSH
1511: LD_INT 22
1513: PUSH
1514: LD_INT 6
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 21
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1540: LD_ADDR_EXP 50
1544: PUSH
1545: EMPTY
1546: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1547: LD_ADDR_EXP 51
1551: PUSH
1552: LD_INT 6
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL 22197 0 3
1565: ST_TO_ADDR
// kirovConstructList := [ ] ;
1566: LD_ADDR_EXP 53
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] ] ;
1573: LD_ADDR_EXP 52
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: LD_INT 159
1583: PUSH
1584: LD_INT 113
1586: PUSH
1587: LD_INT 0
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 7
1598: PUSH
1599: LD_INT 153
1601: PUSH
1602: LD_INT 99
1604: PUSH
1605: LD_INT 3
1607: PUSH
1608: LD_INT 10
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 32
1620: PUSH
1621: LD_INT 144
1623: PUSH
1624: LD_INT 98
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 26
1638: PUSH
1639: LD_INT 155
1641: PUSH
1642: LD_INT 94
1644: PUSH
1645: LD_INT 0
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 26
1656: PUSH
1657: LD_INT 158
1659: PUSH
1660: LD_INT 96
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 17
1674: PUSH
1675: LD_INT 162
1677: PUSH
1678: LD_INT 116
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 32
1692: PUSH
1693: LD_INT 169
1695: PUSH
1696: LD_INT 101
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 32
1710: PUSH
1711: LD_INT 171
1713: PUSH
1714: LD_INT 119
1716: PUSH
1717: LD_INT 5
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 32
1728: PUSH
1729: LD_INT 144
1731: PUSH
1732: LD_INT 106
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: ST_TO_ADDR
// end ;
1755: LD_VAR 0 1
1759: RET
// every 0 0$1 trigger gameStart do
1760: LD_EXP 7
1764: IFFALSE 1844
1766: GO 1768
1768: DISABLE
// begin enable ;
1769: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1770: LD_INT 6
1772: PPUSH
1773: LD_INT 10
1775: PPUSH
1776: LD_INT 13
1778: PPUSH
1779: LD_INT 12
1781: PPUSH
1782: LD_INT 11
1784: PPUSH
1785: LD_EXP 38
1789: PPUSH
1790: LD_EXP 49
1794: PPUSH
1795: LD_EXP 51
1799: PPUSH
1800: LD_EXP 53
1804: PPUSH
1805: LD_EXP 52
1809: PPUSH
1810: LD_INT 153
1812: PUSH
1813: LD_INT 103
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: LD_INT 144
1822: PUSH
1823: LD_INT 102
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: LD_INT 122
1832: PUSH
1833: LD_INT 49
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL 8907 0 13
// end ;
1844: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
1845: LD_EXP 7
1849: IFFALSE 2080
1851: GO 1853
1853: DISABLE
1854: LD_INT 0
1856: PPUSH
// begin for i in grishkoTeam do
1857: LD_ADDR_VAR 0 1
1861: PUSH
1862: LD_EXP 40
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1981
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
1870: LD_VAR 0 1
1874: PPUSH
1875: LD_INT 15
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
1885: LD_VAR 0 1
1889: PPUSH
1890: LD_INT 142
1892: PPUSH
1893: LD_INT 135
1895: PPUSH
1896: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
1900: LD_VAR 0 1
1904: PPUSH
1905: LD_INT 420
1907: PUSH
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 70
1915: MUL
1916: MINUS
1917: PPUSH
1918: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
1922: LD_VAR 0 1
1926: PPUSH
1927: LD_INT 176
1929: PPUSH
1930: LD_INT 131
1932: PPUSH
1933: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
1937: LD_VAR 0 1
1941: PPUSH
1942: LD_INT 210
1944: PPUSH
1945: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
1949: LD_VAR 0 1
1953: PPUSH
1954: LD_INT 199
1956: PPUSH
1957: LD_INT 105
1959: PPUSH
1960: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
1964: LD_INT 35
1966: PPUSH
1967: LD_INT 105
1969: PPUSH
1970: CALL_OW 12
1974: PPUSH
1975: CALL_OW 67
// end ;
1979: GO 1867
1981: POP
1982: POP
// repeat wait ( 0 0$1 ) ;
1983: LD_INT 35
1985: PPUSH
1986: CALL_OW 67
// for i in grishkoTeam do
1990: LD_ADDR_VAR 0 1
1994: PUSH
1995: LD_EXP 40
1999: PUSH
2000: FOR_IN
2001: IFFALSE 2060
// if IsAt ( i , 199 , 105 ) then
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 199
2010: PPUSH
2011: LD_INT 105
2013: PPUSH
2014: CALL_OW 307
2018: IFFALSE 2031
// RemoveUnit ( i ) else
2020: LD_VAR 0 1
2024: PPUSH
2025: CALL_OW 64
2029: GO 2058
// if not HasTask ( i ) then
2031: LD_VAR 0 1
2035: PPUSH
2036: CALL_OW 314
2040: NOT
2041: IFFALSE 2058
// ComMoveXY ( i , 199 , 105 ) ;
2043: LD_VAR 0 1
2047: PPUSH
2048: LD_INT 199
2050: PPUSH
2051: LD_INT 105
2053: PPUSH
2054: CALL_OW 111
2058: GO 2000
2060: POP
2061: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2062: LD_EXP 40
2066: PPUSH
2067: LD_INT 50
2069: PUSH
2070: EMPTY
2071: LIST
2072: PPUSH
2073: CALL_OW 72
2077: NOT
2078: IFFALSE 1983
// end ;
2080: PPOPN 1
2082: END
// export function SendCargoWithOil ; var i , tmp , un , veh ; begin
2083: LD_INT 0
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
// ruCargos := [ ] ;
2090: LD_ADDR_EXP 54
2094: PUSH
2095: EMPTY
2096: ST_TO_ADDR
// ruGuards := [ ] ;
2097: LD_ADDR_EXP 55
2101: PUSH
2102: EMPTY
2103: ST_TO_ADDR
// for i := 1 to 3 do
2104: LD_ADDR_VAR 0 2
2108: PUSH
2109: DOUBLE
2110: LD_INT 1
2112: DEC
2113: ST_TO_ADDR
2114: LD_INT 3
2116: PUSH
2117: FOR_TO
2118: IFFALSE 2134
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_INT 17
2127: PPUSH
2128: CALL_OW 286
2132: GO 2117
2134: POP
2135: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2136: LD_ADDR_VAR 0 3
2140: PUSH
2141: LD_INT 92
2143: PUSH
2144: LD_INT 207
2146: PUSH
2147: LD_INT 162
2149: PUSH
2150: LD_INT 6
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PPUSH
2159: CALL_OW 69
2163: ST_TO_ADDR
// if tmp then
2164: LD_VAR 0 3
2168: IFFALSE 2247
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2170: LD_VAR 0 3
2174: PPUSH
2175: LD_INT 21
2177: PUSH
2178: LD_INT 3
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PPUSH
2185: CALL_OW 72
2189: IFFALSE 2232
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 3
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PPUSH
2211: CALL_OW 72
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2230
// RemoveUnit ( i ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: CALL_OW 64
2228: GO 2216
2230: POP
2231: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_INT 200
2239: PPUSH
2240: LD_INT 147
2242: PPUSH
2243: CALL_OW 111
// end ; tmp := [ ] ;
2247: LD_ADDR_VAR 0 3
2251: PUSH
2252: EMPTY
2253: ST_TO_ADDR
// for i := 1 to 3 do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_INT 1
2262: DEC
2263: ST_TO_ADDR
2264: LD_INT 3
2266: PUSH
2267: FOR_TO
2268: IFFALSE 2460
// begin uc_side := 6 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 6
2277: ST_TO_ADDR
// uc_nation := nation_russian ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 3
2285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2286: LD_INT 21
2288: PPUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 51
2297: PPUSH
2298: LD_INT 90
2300: PPUSH
2301: CALL 27070 0 5
// veh := CreateVehicle ;
2305: LD_ADDR_VAR 0 5
2309: PUSH
2310: CALL_OW 45
2314: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2315: LD_ADDR_EXP 54
2319: PUSH
2320: LD_EXP 54
2324: PPUSH
2325: LD_VAR 0 5
2329: PPUSH
2330: CALL 60250 0 2
2334: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2335: LD_VAR 0 5
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 100
2345: PPUSH
2346: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2350: LD_INT 35
2352: PPUSH
2353: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2357: LD_VAR 0 5
2361: PPUSH
2362: LD_INT 14
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: CALL_OW 49
2372: IFFALSE 2350
// PrepareSoldier ( false , 2 ) ;
2374: LD_INT 0
2376: PPUSH
2377: LD_INT 2
2379: PPUSH
2380: CALL_OW 381
// un := CreateHuman ;
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: CALL_OW 44
2393: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2394: LD_ADDR_EXP 55
2398: PUSH
2399: LD_EXP 55
2403: PPUSH
2404: LD_VAR 0 4
2408: PPUSH
2409: CALL 60250 0 2
2413: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2428: LD_VAR 0 5
2432: PPUSH
2433: LD_INT 105
2435: PPUSH
2436: LD_INT 47
2438: PPUSH
2439: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2443: LD_VAR 0 5
2447: PPUSH
2448: LD_INT 71
2450: PPUSH
2451: LD_INT 29
2453: PPUSH
2454: CALL_OW 171
// end ;
2458: GO 2267
2460: POP
2461: POP
// repeat wait ( 0 0$3 ) ;
2462: LD_INT 105
2464: PPUSH
2465: CALL_OW 67
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 6 ] ) >= 2 ;
2469: LD_EXP 54
2473: PPUSH
2474: LD_INT 92
2476: PUSH
2477: LD_INT 71
2479: PUSH
2480: LD_INT 29
2482: PUSH
2483: LD_INT 6
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 72
2496: PUSH
2497: LD_INT 2
2499: GREATEREQUAL
2500: IFFALSE 2462
// for i in ruGuards do
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: LD_EXP 55
2511: PUSH
2512: FOR_IN
2513: IFFALSE 2548
// begin ComExitVehicle ( i ) ;
2515: LD_VAR 0 2
2519: PPUSH
2520: CALL_OW 121
// wait ( 0 0$1 ) ;
2524: LD_INT 35
2526: PPUSH
2527: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2531: LD_VAR 0 2
2535: PPUSH
2536: LD_INT 63
2538: PPUSH
2539: LD_INT 47
2541: PPUSH
2542: CALL_OW 114
// end ;
2546: GO 2512
2548: POP
2549: POP
// end ;
2550: LD_VAR 0 1
2554: RET
// every 0 0$1 trigger GetLives ( Popov ) < 500 and IsInArea ( Popov , easternHillArea ) and GetDistUnitXY ( Popov , 146 , 67 ) > 3 do
2555: LD_EXP 35
2559: PPUSH
2560: CALL_OW 256
2564: PUSH
2565: LD_INT 500
2567: LESS
2568: IFFALSE 2584
2570: PUSH
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: CALL_OW 308
2583: AND
2584: IFFALSE 2607
2586: PUSH
2587: LD_EXP 35
2591: PPUSH
2592: LD_INT 146
2594: PPUSH
2595: LD_INT 67
2597: PPUSH
2598: CALL_OW 297
2602: PUSH
2603: LD_INT 3
2605: GREATER
2606: AND
2607: IFFALSE 2628
2609: GO 2611
2611: DISABLE
// begin enable ;
2612: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
2613: LD_EXP 35
2617: PPUSH
2618: LD_INT 146
2620: PPUSH
2621: LD_INT 67
2623: PPUSH
2624: CALL_OW 111
// end ;
2628: END
// every 0 0$1 trigger not americanRetreat and ( ( not IsInArea ( Popov , easternHillArea ) and not HasTask ( Popov ) ) or GetDistUnitXY ( Popov , 146 , 67 ) > 30 ) do
2629: LD_EXP 26
2633: NOT
2634: IFFALSE 2688
2636: PUSH
2637: LD_EXP 35
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: CALL_OW 308
2649: NOT
2650: IFFALSE 2664
2652: PUSH
2653: LD_EXP 35
2657: PPUSH
2658: CALL_OW 314
2662: NOT
2663: AND
2664: IFTRUE 2687
2666: PUSH
2667: LD_EXP 35
2671: PPUSH
2672: LD_INT 146
2674: PPUSH
2675: LD_INT 67
2677: PPUSH
2678: CALL_OW 297
2682: PUSH
2683: LD_INT 30
2685: GREATER
2686: OR
2687: AND
2688: IFFALSE 2709
2690: GO 2692
2692: DISABLE
// begin enable ;
2693: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
2694: LD_EXP 35
2698: PPUSH
2699: LD_INT 146
2701: PPUSH
2702: LD_INT 67
2704: PPUSH
2705: CALL_OW 111
// end ; end_of_file
2709: END
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronAttackVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
2710: LD_INT 0
2712: PPUSH
2713: PPUSH
2714: PPUSH
2715: PPUSH
// uc_side := omicronSide ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := nation_american ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
2732: LD_ADDR_EXP 58
2736: PUSH
2737: EMPTY
2738: ST_TO_ADDR
// omicronTroops := [ ] ;
2739: LD_ADDR_EXP 57
2743: PUSH
2744: EMPTY
2745: ST_TO_ADDR
// omicronVehicles := [ ] ;
2746: LD_ADDR_EXP 59
2750: PUSH
2751: EMPTY
2752: ST_TO_ADDR
// omicronAttackVehicles := [ ] ;
2753: LD_ADDR_EXP 60
2757: PUSH
2758: EMPTY
2759: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
2760: LD_ADDR_EXP 61
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL 22197 0 3
2778: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
2779: LD_ADDR_EXP 63
2783: PUSH
2784: EMPTY
2785: ST_TO_ADDR
// omicronConstructList := [ ] ;
2786: LD_ADDR_EXP 62
2790: PUSH
2791: EMPTY
2792: ST_TO_ADDR
// SetResourceType ( GetBase ( usDep ) , mat_cans , 1000 ) ;
2793: LD_INT 290
2795: PPUSH
2796: CALL_OW 274
2800: PPUSH
2801: LD_INT 1
2803: PPUSH
2804: LD_INT 1000
2806: PPUSH
2807: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , mat_oil , 100 ) ;
2811: LD_INT 290
2813: PPUSH
2814: CALL_OW 274
2818: PPUSH
2819: LD_INT 2
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 277
// SetBName ( usDep , omikron ) ;
2829: LD_INT 290
2831: PPUSH
2832: LD_STRING omikron
2834: PPUSH
2835: CALL_OW 500
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2839: LD_ADDR_VAR 0 2
2843: PUSH
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 21
2856: PUSH
2857: LD_INT 3
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 69
2872: PUSH
2873: FOR_IN
2874: IFFALSE 2896
// SetBLevel ( i , 1 + Difficulty ) ;
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PPUSH
2890: CALL_OW 241
2894: GO 2873
2896: POP
2897: POP
// limit := [ 8 , 9 , 9 , 10 ] [ Difficulty ] ;
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: LD_INT 8
2905: PUSH
2906: LD_INT 9
2908: PUSH
2909: LD_INT 9
2911: PUSH
2912: LD_INT 10
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: LD_OWVAR 67
2925: ARRAY
2926: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
2927: LD_ADDR_EXP 56
2931: PUSH
2932: LD_STRING Sikorski
2934: PPUSH
2935: CALL_OW 25
2939: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
2940: LD_EXP 56
2944: PPUSH
2945: LD_INT 290
2947: PPUSH
2948: CALL_OW 52
// for i := 1 to limit - 5 do
2952: LD_ADDR_VAR 0 2
2956: PUSH
2957: DOUBLE
2958: LD_INT 1
2960: DEC
2961: ST_TO_ADDR
2962: LD_VAR 0 4
2966: PUSH
2967: LD_INT 5
2969: MINUS
2970: PUSH
2971: FOR_TO
2972: IFFALSE 3058
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 2
2979: PUSH
2980: LD_INT 2
2982: PUSH
2983: LD_INT 3
2985: PUSH
2986: LD_INT 4
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_OWVAR 67
2999: ARRAY
3000: PPUSH
3001: CALL_OW 381
// un := CreateHuman ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
3015: LD_ADDR_EXP 57
3019: PUSH
3020: LD_EXP 57
3024: PPUSH
3025: LD_VAR 0 3
3029: PPUSH
3030: CALL 60250 0 2
3034: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 27
3042: PPUSH
3043: LD_INT 36
3045: PPUSH
3046: LD_INT 5
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 50
// end ;
3056: GO 2971
3058: POP
3059: POP
// limit := limit - 5 ;
3060: LD_ADDR_VAR 0 4
3064: PUSH
3065: LD_VAR 0 4
3069: PUSH
3070: LD_INT 5
3072: MINUS
3073: ST_TO_ADDR
// for i := 1 to limit do
3074: LD_ADDR_VAR 0 2
3078: PUSH
3079: DOUBLE
3080: LD_INT 1
3082: DEC
3083: ST_TO_ADDR
3084: LD_VAR 0 4
3088: PUSH
3089: FOR_TO
3090: IFFALSE 3168
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
3092: LD_INT 0
3094: PPUSH
3095: LD_VAR 0 2
3099: PUSH
3100: LD_INT 3
3102: MOD
3103: PUSH
3104: LD_INT 2
3106: PLUS
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: CALL_OW 380
// un := CreateHuman ;
3115: LD_ADDR_VAR 0 3
3119: PUSH
3120: CALL_OW 44
3124: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
3125: LD_ADDR_EXP 57
3129: PUSH
3130: LD_EXP 57
3134: PPUSH
3135: LD_VAR 0 3
3139: PPUSH
3140: CALL 60250 0 2
3144: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 27
3152: PPUSH
3153: LD_INT 36
3155: PPUSH
3156: LD_INT 5
3158: PPUSH
3159: LD_INT 0
3161: PPUSH
3162: CALL_OW 50
// end ;
3166: GO 3089
3168: POP
3169: POP
// uc_side := reinforcementsSide ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 4
3177: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 381
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 3
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
3198: LD_ADDR_EXP 58
3202: PUSH
3203: LD_EXP 58
3207: PPUSH
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL 60250 0 2
3217: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
3218: LD_VAR 0 3
3222: PPUSH
3223: LD_INT 71
3225: PPUSH
3226: LD_INT 102
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 50
// end ;
3239: LD_VAR 0 1
3243: RET
// every 0 0$1 trigger gameStart do
3244: LD_EXP 7
3248: IFFALSE 3320
3250: GO 3252
3252: DISABLE
// begin BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
3253: LD_INT 1
3255: PPUSH
3256: LD_INT 18
3258: PPUSH
3259: LD_INT 18
3261: PPUSH
3262: LD_INT 19
3264: PPUSH
3265: LD_INT 20
3267: PPUSH
3268: LD_EXP 57
3272: PPUSH
3273: LD_EXP 59
3277: PPUSH
3278: LD_EXP 61
3282: PPUSH
3283: LD_EXP 62
3287: PPUSH
3288: LD_EXP 63
3292: PPUSH
3293: LD_INT 27
3295: PUSH
3296: LD_INT 32
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PPUSH
3303: LD_INT 19
3305: PUSH
3306: LD_INT 14
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: EMPTY
3314: PPUSH
3315: CALL 8907 0 13
// enable ;
3319: ENABLE
// end ;
3320: END
// every 0 0$1 + 1 1$00 trigger gameStart and hasOilTower do var i , time ;
3321: LD_EXP 7
3325: IFFALSE 3333
3327: PUSH
3328: LD_EXP 14
3332: AND
3333: IFFALSE 3425
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin time := [ 4 4$30 , 4 4$00 , 3 3$40 , 3 3$20 ] [ Difficulty ] ;
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: LD_INT 9450
3349: PUSH
3350: LD_INT 8400
3352: PUSH
3353: LD_INT 7700
3355: PUSH
3356: LD_INT 7000
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_OWVAR 67
3369: ARRAY
3370: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$20 ) ) ;
3371: LD_VAR 0 2
3375: PUSH
3376: LD_INT 700
3378: NEG
3379: PPUSH
3380: LD_INT 700
3382: PPUSH
3383: CALL_OW 12
3387: PLUS
3388: PPUSH
3389: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
3393: LD_INT 2
3395: PPUSH
3396: CALL_OW 427
// convoysCounter := Dec ( convoysCounter ) ;
3400: LD_ADDR_EXP 25
3404: PUSH
3405: LD_EXP 25
3409: PPUSH
3410: CALL 61645 0 1
3414: ST_TO_ADDR
// until convoysCounter = 0 ;
3415: LD_EXP 25
3419: PUSH
3420: LD_INT 0
3422: EQUAL
3423: IFFALSE 3371
// end ;
3425: PPOPN 2
3427: END
// export function SendConvoy ; var i , tmp , path , strength , parts , points , skill , un , veh , coords , tag , hurt , emptyVeh , driver ; begin
3428: LD_INT 0
3430: PPUSH
3431: PPUSH
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
3436: PPUSH
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
3444: PPUSH
// path := rand ( 1 , 2 ) ;
3445: LD_ADDR_VAR 0 4
3449: PUSH
3450: LD_INT 1
3452: PPUSH
3453: LD_INT 2
3455: PPUSH
3456: CALL_OW 12
3460: ST_TO_ADDR
// coords := [ [ [ 123 , 41 ] , [ 102 , 42 ] , [ 81 , 40 ] , [ 56 , 14 ] , [ 21 , 19 ] ] , [ [ 98 , 128 ] , [ 82 , 95 ] , [ 69 , 70 ] , [ 49 , 46 ] , [ 28 , 38 ] ] ] [ path ] ;
3461: LD_ADDR_VAR 0 11
3465: PUSH
3466: LD_INT 123
3468: PUSH
3469: LD_INT 41
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 102
3478: PUSH
3479: LD_INT 42
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 81
3488: PUSH
3489: LD_INT 40
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 56
3498: PUSH
3499: LD_INT 14
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 21
3508: PUSH
3509: LD_INT 19
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 98
3525: PUSH
3526: LD_INT 128
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 82
3535: PUSH
3536: LD_INT 95
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 69
3545: PUSH
3546: LD_INT 70
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 49
3555: PUSH
3556: LD_INT 46
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 28
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_VAR 0 4
3588: ARRAY
3589: ST_TO_ADDR
// strength := [ 4 , 6 , 8 , 10 , 12 , 14 ] [ 7 - convoysCounter ] * Difficulty ;
3590: LD_ADDR_VAR 0 5
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: LD_INT 6
3600: PUSH
3601: LD_INT 8
3603: PUSH
3604: LD_INT 10
3606: PUSH
3607: LD_INT 12
3609: PUSH
3610: LD_INT 14
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: PUSH
3621: LD_INT 7
3623: PUSH
3624: LD_EXP 25
3628: MINUS
3629: ARRAY
3630: PUSH
3631: LD_OWVAR 67
3635: MUL
3636: ST_TO_ADDR
// tmp := [ ] ;
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: EMPTY
3643: ST_TO_ADDR
// parts := [ 3 , 4 , 5 , 15 , 20 , 25 ] ;
3644: LD_ADDR_VAR 0 6
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: LD_INT 5
3657: PUSH
3658: LD_INT 15
3660: PUSH
3661: LD_INT 20
3663: PUSH
3664: LD_INT 25
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: ST_TO_ADDR
// skill := [ 2 , 2 , 3 , 4 ] [ Difficulty ] ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: LD_INT 3
3688: PUSH
3689: LD_INT 4
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_OWVAR 67
3702: ARRAY
3703: ST_TO_ADDR
// repeat points := parts [ rand ( 1 , Count ( parts ) ) ] ;
3704: LD_ADDR_VAR 0 7
3708: PUSH
3709: LD_VAR 0 6
3713: PUSH
3714: LD_INT 1
3716: PPUSH
3717: LD_VAR 0 6
3721: PPUSH
3722: CALL 24274 0 1
3726: PPUSH
3727: CALL_OW 12
3731: ARRAY
3732: ST_TO_ADDR
// if points > strength then
3733: LD_VAR 0 7
3737: PUSH
3738: LD_VAR 0 5
3742: GREATER
3743: IFFALSE 3747
// continue ;
3745: GO 3704
// strength := strength - points ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_VAR 0 5
3756: PUSH
3757: LD_VAR 0 7
3761: MINUS
3762: ST_TO_ADDR
// uc_side := 4 ;
3763: LD_ADDR_OWVAR 20
3767: PUSH
3768: LD_INT 4
3770: ST_TO_ADDR
// uc_nation := nation_american ;
3771: LD_ADDR_OWVAR 21
3775: PUSH
3776: LD_INT 1
3778: ST_TO_ADDR
// case points of 3 :
3779: LD_VAR 0 7
3783: PUSH
3784: LD_INT 3
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3827
3792: POP
// begin PrepareSoldier ( false , skill ) ;
3793: LD_INT 0
3795: PPUSH
3796: LD_VAR 0 8
3800: PPUSH
3801: CALL_OW 381
// tmp := Join ( tmp , CreateHuman ) ;
3805: LD_ADDR_VAR 0 3
3809: PUSH
3810: LD_VAR 0 3
3814: PPUSH
3815: CALL_OW 44
3819: PPUSH
3820: CALL 60250 0 2
3824: ST_TO_ADDR
// end ; 4 :
3825: GO 4342
3827: LD_INT 4
3829: DOUBLE
3830: EQUAL
3831: IFTRUE 3835
3833: GO 3870
3835: POP
// begin PrepareScientist ( false , skill ) ;
3836: LD_INT 0
3838: PPUSH
3839: LD_VAR 0 8
3843: PPUSH
3844: CALL_OW 384
// tmp := Join ( tmp , CreateHuman ) ;
3848: LD_ADDR_VAR 0 3
3852: PUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 44
3862: PPUSH
3863: CALL 60250 0 2
3867: ST_TO_ADDR
// end ; 5 :
3868: GO 4342
3870: LD_INT 5
3872: DOUBLE
3873: EQUAL
3874: IFTRUE 3878
3876: GO 3913
3878: POP
// begin PrepareEngineer ( false , skill ) ;
3879: LD_INT 0
3881: PPUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: CALL_OW 382
// tmp := Join ( tmp , CreateHuman ) ;
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 44
3905: PPUSH
3906: CALL 60250 0 2
3910: ST_TO_ADDR
// end ; 15 :
3911: GO 4342
3913: LD_INT 15
3915: DOUBLE
3916: EQUAL
3917: IFTRUE 3921
3919: GO 4057
3921: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_machine_gun , 100 ) ;
3922: LD_INT 1
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 2
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 3
3941: PPUSH
3942: CALL_OW 12
3946: ARRAY
3947: PPUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 1
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 2
3963: PPUSH
3964: CALL_OW 12
3968: ARRAY
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_INT 2
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 27070 0 5
// veh := CreateVehicle ;
3983: LD_ADDR_VAR 0 10
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_VAR 0 10
4007: PPUSH
4008: CALL 60250 0 2
4012: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_VAR 0 8
4020: PPUSH
4021: CALL_OW 383
// un := CreateHuman ;
4025: LD_ADDR_VAR 0 9
4029: PUSH
4030: CALL_OW 44
4034: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_VAR 0 9
4049: PPUSH
4050: CALL 60250 0 2
4054: ST_TO_ADDR
// end ; 20 :
4055: GO 4342
4057: LD_INT 20
4059: DOUBLE
4060: EQUAL
4061: IFTRUE 4065
4063: GO 4197
4065: POP
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_gatling_gun , 100 ) ;
4066: LD_INT 3
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL_OW 12
4086: ARRAY
4087: PPUSH
4088: LD_INT 2
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 2
4103: PPUSH
4104: CALL_OW 12
4108: ARRAY
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 4
4115: PPUSH
4116: LD_INT 100
4118: PPUSH
4119: CALL 27070 0 5
// veh := CreateVehicle ;
4123: LD_ADDR_VAR 0 10
4127: PUSH
4128: CALL_OW 45
4132: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: LD_VAR 0 3
4142: PPUSH
4143: LD_VAR 0 10
4147: PPUSH
4148: CALL 60250 0 2
4152: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
4153: LD_INT 0
4155: PPUSH
4156: LD_VAR 0 8
4160: PPUSH
4161: CALL_OW 383
// un := CreateHuman ;
4165: LD_ADDR_VAR 0 9
4169: PUSH
4170: CALL_OW 44
4174: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: LD_VAR 0 3
4184: PPUSH
4185: LD_VAR 0 9
4189: PPUSH
4190: CALL 60250 0 2
4194: ST_TO_ADDR
// end ; 25 :
4195: GO 4342
4197: LD_INT 25
4199: DOUBLE
4200: EQUAL
4201: IFTRUE 4205
4203: GO 4341
4205: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_light_gun , 80 ) ;
4206: LD_INT 1
4208: PUSH
4209: LD_INT 3
4211: PUSH
4212: LD_INT 2
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 12
4230: ARRAY
4231: PPUSH
4232: LD_INT 2
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 12
4252: ARRAY
4253: PPUSH
4254: LD_INT 1
4256: PPUSH
4257: LD_INT 3
4259: PPUSH
4260: LD_INT 80
4262: PPUSH
4263: CALL 27070 0 5
// veh := CreateVehicle ;
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: CALL_OW 45
4276: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
4277: LD_ADDR_VAR 0 3
4281: PUSH
4282: LD_VAR 0 3
4286: PPUSH
4287: LD_VAR 0 10
4291: PPUSH
4292: CALL 60250 0 2
4296: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
4297: LD_INT 0
4299: PPUSH
4300: LD_VAR 0 8
4304: PPUSH
4305: CALL_OW 383
// un := CreateHuman ;
4309: LD_ADDR_VAR 0 9
4313: PUSH
4314: CALL_OW 44
4318: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4319: LD_ADDR_VAR 0 3
4323: PUSH
4324: LD_VAR 0 3
4328: PPUSH
4329: LD_VAR 0 9
4333: PPUSH
4334: CALL 60250 0 2
4338: ST_TO_ADDR
// end ; end ;
4339: GO 4342
4341: POP
// until strength < 3 ;
4342: LD_VAR 0 5
4346: PUSH
4347: LD_INT 3
4349: LESS
4350: IFFALSE 3704
// if not tmp then
4352: LD_VAR 0 3
4356: NOT
4357: IFFALSE 4361
// exit ;
4359: GO 5809
// americanReinforcementsTroops := americanReinforcementsTroops union tmp ;
4361: LD_ADDR_EXP 58
4365: PUSH
4366: LD_EXP 58
4370: PUSH
4371: LD_VAR 0 3
4375: UNION
4376: ST_TO_ADDR
// case path of 1 :
4377: LD_VAR 0 4
4381: PUSH
4382: LD_INT 1
4384: DOUBLE
4385: EQUAL
4386: IFTRUE 4390
4388: GO 4556
4390: POP
// begin for i in tmp do
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_VAR 0 3
4400: PUSH
4401: FOR_IN
4402: IFFALSE 4552
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
4404: LD_ADDR_VAR 0 14
4408: PUSH
4409: LD_EXP 58
4413: PPUSH
4414: LD_INT 21
4416: PUSH
4417: LD_INT 2
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: PUSH
4424: LD_INT 50
4426: PUSH
4427: EMPTY
4428: LIST
4429: PUSH
4430: LD_INT 58
4432: PUSH
4433: EMPTY
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: PPUSH
4441: CALL_OW 72
4445: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
4446: LD_VAR 0 2
4450: PPUSH
4451: CALL_OW 257
4455: PUSH
4456: LD_INT 3
4458: EQUAL
4459: IFFALSE 4487
// begin if emptyVeh then
4461: LD_VAR 0 14
4465: IFFALSE 4487
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_VAR 0 14
4476: PUSH
4477: LD_INT 1
4479: ARRAY
4480: PPUSH
4481: CALL_OW 52
// continue ;
4485: GO 4401
// end ; end ; SetDir ( i , 4 ) ;
4487: LD_VAR 0 2
4491: PPUSH
4492: LD_INT 4
4494: PPUSH
4495: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
4499: LD_INT 10
4501: PPUSH
4502: CALL_OW 67
// until PlaceUnitArea ( i , omicronEastRefSpawnArea , false ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: LD_INT 22
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 49
4521: IFFALSE 4499
// ComMoveXY ( i , 136 , 20 ) ;
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_INT 136
4530: PPUSH
4531: LD_INT 20
4533: PPUSH
4534: CALL_OW 111
// SetTag ( i , 1 ) ;
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 109
// end ;
4550: GO 4401
4552: POP
4553: POP
// end ; 2 :
4554: GO 4731
4556: LD_INT 2
4558: DOUBLE
4559: EQUAL
4560: IFTRUE 4564
4562: GO 4730
4564: POP
// begin for i in tmp do
4565: LD_ADDR_VAR 0 2
4569: PUSH
4570: LD_VAR 0 3
4574: PUSH
4575: FOR_IN
4576: IFFALSE 4726
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
4578: LD_ADDR_VAR 0 14
4582: PUSH
4583: LD_EXP 58
4587: PPUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 2
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 50
4600: PUSH
4601: EMPTY
4602: LIST
4603: PUSH
4604: LD_INT 58
4606: PUSH
4607: EMPTY
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 72
4619: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
4620: LD_VAR 0 2
4624: PPUSH
4625: CALL_OW 257
4629: PUSH
4630: LD_INT 3
4632: EQUAL
4633: IFFALSE 4661
// begin if emptyVeh then
4635: LD_VAR 0 14
4639: IFFALSE 4661
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
4641: LD_VAR 0 2
4645: PPUSH
4646: LD_VAR 0 14
4650: PUSH
4651: LD_INT 1
4653: ARRAY
4654: PPUSH
4655: CALL_OW 52
// continue ;
4659: GO 4575
// end ; end ; SetDir ( i , 0 ) ;
4661: LD_VAR 0 2
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
4673: LD_INT 10
4675: PPUSH
4676: CALL_OW 67
// until PlaceUnitArea ( i , omicronWestRefSpawnArea , false ) ;
4680: LD_VAR 0 2
4684: PPUSH
4685: LD_INT 21
4687: PPUSH
4688: LD_INT 0
4690: PPUSH
4691: CALL_OW 49
4695: IFFALSE 4673
// ComMoveXY ( i , 95 , 143 ) ;
4697: LD_VAR 0 2
4701: PPUSH
4702: LD_INT 95
4704: PPUSH
4705: LD_INT 143
4707: PPUSH
4708: CALL_OW 111
// SetTag ( i , 1 ) ;
4712: LD_VAR 0 2
4716: PPUSH
4717: LD_INT 1
4719: PPUSH
4720: CALL_OW 109
// end ;
4724: GO 4575
4726: POP
4727: POP
// end ; end ;
4728: GO 4731
4730: POP
// repeat wait ( 0 0$1 ) ;
4731: LD_INT 35
4733: PPUSH
4734: CALL_OW 67
// for i in tmp do
4738: LD_ADDR_VAR 0 2
4742: PUSH
4743: LD_VAR 0 3
4747: PUSH
4748: FOR_IN
4749: IFFALSE 5800
// begin tag := GetTag ( i ) ;
4751: LD_ADDR_VAR 0 12
4755: PUSH
4756: LD_VAR 0 2
4760: PPUSH
4761: CALL_OW 110
4765: ST_TO_ADDR
// if IsInArea ( i , omicronBaseArea ) then
4766: LD_VAR 0 2
4770: PPUSH
4771: LD_INT 18
4773: PPUSH
4774: CALL_OW 308
4778: IFFALSE 5170
// begin americanReinforcementsTroops := americanReinforcementsTroops diff i ;
4780: LD_ADDR_EXP 58
4784: PUSH
4785: LD_EXP 58
4789: PUSH
4790: LD_VAR 0 2
4794: DIFF
4795: ST_TO_ADDR
// tmp := tmp diff i ;
4796: LD_ADDR_VAR 0 3
4800: PUSH
4801: LD_VAR 0 3
4805: PUSH
4806: LD_VAR 0 2
4810: DIFF
4811: ST_TO_ADDR
// SetSide ( i , 1 ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 235
// if GetType ( i ) = unit_human then
4824: LD_VAR 0 2
4828: PPUSH
4829: CALL_OW 247
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: IFFALSE 5043
// begin SetLives ( i , 1000 ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 1000
4846: PPUSH
4847: CALL_OW 234
// if GetClass ( i ) = class_engineer then
4851: LD_VAR 0 2
4855: PPUSH
4856: CALL_OW 257
4860: PUSH
4861: LD_INT 2
4863: EQUAL
4864: IFFALSE 4903
// if UnitFilter ( omicronTroops , [ f_class , class_engineer ] ) > 4 then
4866: LD_EXP 57
4870: PPUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: PUSH
4886: LD_INT 4
4888: GREATER
4889: IFFALSE 4903
// SetClass ( i , class_soldier ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: CALL_OW 336
// if GetClass ( i ) = class_scientistic then
4903: LD_VAR 0 2
4907: PPUSH
4908: CALL_OW 257
4912: PUSH
4913: LD_INT 4
4915: EQUAL
4916: IFFALSE 4955
// if UnitFilter ( omicronTroops , [ f_class , class_scientistic ] ) > 3 then
4918: LD_EXP 57
4922: PPUSH
4923: LD_INT 25
4925: PUSH
4926: LD_INT 4
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 72
4937: PUSH
4938: LD_INT 3
4940: GREATER
4941: IFFALSE 4955
// SetClass ( i , class_soldier ) ;
4943: LD_VAR 0 2
4947: PPUSH
4948: LD_INT 1
4950: PPUSH
4951: CALL_OW 336
// if GetClass ( i ) = class_mechanic then
4955: LD_VAR 0 2
4959: PPUSH
4960: CALL_OW 257
4964: PUSH
4965: LD_INT 3
4967: EQUAL
4968: IFFALSE 5009
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4995
// SetTag ( i , tMech ) else
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_INT 7
4988: PPUSH
4989: CALL_OW 109
4993: GO 5007
// SetTag ( i , 0 ) end else
4995: LD_VAR 0 2
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 109
5007: GO 5021
// SetTag ( i , 0 ) ;
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_INT 0
5016: PPUSH
5017: CALL_OW 109
// omicronTroops := Join ( omicronTroops , i ) ;
5021: LD_ADDR_EXP 57
5025: PUSH
5026: LD_EXP 57
5030: PPUSH
5031: LD_VAR 0 2
5035: PPUSH
5036: CALL 60250 0 2
5040: ST_TO_ADDR
// end else
5041: GO 5148
// if omicronVehicles < 3 then
5043: LD_EXP 59
5047: PUSH
5048: LD_INT 3
5050: LESS
5051: IFFALSE 5116
// begin omicronVehicles := Join ( omicronVehicles , i ) ;
5053: LD_ADDR_EXP 59
5057: PUSH
5058: LD_EXP 59
5062: PPUSH
5063: LD_VAR 0 2
5067: PPUSH
5068: CALL 60250 0 2
5072: ST_TO_ADDR
// if GetLives ( i ) < 1000 then
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL_OW 256
5082: PUSH
5083: LD_INT 1000
5085: LESS
5086: IFFALSE 5102
// SetTag ( i , tVehRepair ) else
5088: LD_VAR 0 2
5092: PPUSH
5093: LD_INT 9
5095: PPUSH
5096: CALL_OW 109
5100: GO 5114
// SetTag ( i , 0 ) ;
5102: LD_VAR 0 2
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 109
// end else
5114: GO 5148
// begin omicronAttackVehicles := Join ( omicronAttackVehicles , i ) ;
5116: LD_ADDR_EXP 60
5120: PUSH
5121: LD_EXP 60
5125: PPUSH
5126: LD_VAR 0 2
5130: PPUSH
5131: CALL 60250 0 2
5135: ST_TO_ADDR
// SetTag ( i , 0 ) ;
5136: LD_VAR 0 2
5140: PPUSH
5141: LD_INT 0
5143: PPUSH
5144: CALL_OW 109
// end ; joinToOmicronCounter := Join ( joinToOmicronCounter , i ) ;
5148: LD_ADDR_EXP 28
5152: PUSH
5153: LD_EXP 28
5157: PPUSH
5158: LD_VAR 0 2
5162: PPUSH
5163: CALL 60250 0 2
5167: ST_TO_ADDR
// continue ;
5168: GO 4748
// end ; if IsDead ( i ) then
5170: LD_VAR 0 2
5174: PPUSH
5175: CALL_OW 301
5179: IFFALSE 5199
// begin tmp := tmp diff i ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_VAR 0 2
5195: DIFF
5196: ST_TO_ADDR
// continue ;
5197: GO 4748
// end ; if GetDistUnitXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) < 6 then
5199: LD_VAR 0 2
5203: PPUSH
5204: LD_VAR 0 11
5208: PUSH
5209: LD_VAR 0 12
5213: ARRAY
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_VAR 0 11
5223: PUSH
5224: LD_VAR 0 12
5228: ARRAY
5229: PUSH
5230: LD_INT 2
5232: ARRAY
5233: PPUSH
5234: CALL_OW 297
5238: PUSH
5239: LD_INT 6
5241: LESS
5242: IFFALSE 5262
// SetTag ( i , tag + 1 ) ;
5244: LD_VAR 0 2
5248: PPUSH
5249: LD_VAR 0 12
5253: PUSH
5254: LD_INT 1
5256: PLUS
5257: PPUSH
5258: CALL_OW 109
// if GetClass ( i ) = class_soldier then
5262: LD_VAR 0 2
5266: PPUSH
5267: CALL_OW 257
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: IFFALSE 5374
// begin if GetLives ( i ) < 500 then
5277: LD_VAR 0 2
5281: PPUSH
5282: CALL_OW 256
5286: PUSH
5287: LD_INT 500
5289: LESS
5290: IFFALSE 5333
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5292: LD_VAR 0 2
5296: PPUSH
5297: LD_VAR 0 11
5301: PUSH
5302: LD_VAR 0 12
5306: ARRAY
5307: PUSH
5308: LD_INT 1
5310: ARRAY
5311: PPUSH
5312: LD_VAR 0 11
5316: PUSH
5317: LD_VAR 0 12
5321: ARRAY
5322: PUSH
5323: LD_INT 2
5325: ARRAY
5326: PPUSH
5327: CALL_OW 111
// continue ;
5331: GO 4748
// end ; ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5333: LD_VAR 0 2
5337: PPUSH
5338: LD_VAR 0 11
5342: PUSH
5343: LD_VAR 0 12
5347: ARRAY
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: PPUSH
5353: LD_VAR 0 11
5357: PUSH
5358: LD_VAR 0 12
5362: ARRAY
5363: PUSH
5364: LD_INT 2
5366: ARRAY
5367: PPUSH
5368: CALL_OW 114
// continue ;
5372: GO 4748
// end ; if GetClass ( i ) = class_scientistic then
5374: LD_VAR 0 2
5378: PPUSH
5379: CALL_OW 257
5383: PUSH
5384: LD_INT 4
5386: EQUAL
5387: IFFALSE 5587
// begin if GetLives ( i ) < 500 then
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL_OW 256
5398: PUSH
5399: LD_INT 500
5401: LESS
5402: IFFALSE 5445
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_VAR 0 11
5413: PUSH
5414: LD_VAR 0 12
5418: ARRAY
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: LD_VAR 0 11
5428: PUSH
5429: LD_VAR 0 12
5433: ARRAY
5434: PUSH
5435: LD_INT 2
5437: ARRAY
5438: PPUSH
5439: CALL_OW 111
// continue ;
5443: GO 4748
// end ; hurt := UnitFilter ( tmp , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 8 ] , [ f_not , [ f_driving ] ] ] ) ;
5445: LD_ADDR_VAR 0 13
5449: PUSH
5450: LD_VAR 0 3
5454: PPUSH
5455: LD_INT 21
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 3
5467: PUSH
5468: LD_INT 24
5470: PUSH
5471: LD_INT 1000
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 91
5484: PUSH
5485: LD_VAR 0 2
5489: PUSH
5490: LD_INT 8
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 3
5500: PUSH
5501: LD_INT 55
5503: PUSH
5504: EMPTY
5505: LIST
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 72
5521: ST_TO_ADDR
// if hurt then
5522: LD_VAR 0 13
5526: IFFALSE 5548
// begin ComHeal ( i , hurt [ 1 ] ) ;
5528: LD_VAR 0 2
5532: PPUSH
5533: LD_VAR 0 13
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 128
// continue ;
5546: GO 4748
// end ; ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: LD_VAR 0 11
5557: PUSH
5558: LD_VAR 0 12
5562: ARRAY
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_VAR 0 11
5572: PUSH
5573: LD_VAR 0 12
5577: ARRAY
5578: PUSH
5579: LD_INT 2
5581: ARRAY
5582: PPUSH
5583: CALL_OW 111
// end ; if GetClass ( i ) = class_engineer then
5587: LD_VAR 0 2
5591: PPUSH
5592: CALL_OW 257
5596: PUSH
5597: LD_INT 2
5599: EQUAL
5600: IFFALSE 5643
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5602: LD_VAR 0 2
5606: PPUSH
5607: LD_VAR 0 11
5611: PUSH
5612: LD_VAR 0 12
5616: ARRAY
5617: PUSH
5618: LD_INT 1
5620: ARRAY
5621: PPUSH
5622: LD_VAR 0 11
5626: PUSH
5627: LD_VAR 0 12
5631: ARRAY
5632: PUSH
5633: LD_INT 2
5635: ARRAY
5636: PPUSH
5637: CALL_OW 111
// continue ;
5641: GO 4748
// end ; if GetClass ( i ) = class_mechanic then
5643: LD_VAR 0 2
5647: PPUSH
5648: CALL_OW 257
5652: PUSH
5653: LD_INT 3
5655: EQUAL
5656: IFFALSE 5688
// begin if IsInUnit ( i ) then
5658: LD_VAR 0 2
5662: PPUSH
5663: CALL_OW 310
5667: IFFALSE 5671
// continue ;
5669: GO 4748
// ComMoveXY ( i , 30 , 38 ) ;
5671: LD_VAR 0 2
5675: PPUSH
5676: LD_INT 30
5678: PPUSH
5679: LD_INT 38
5681: PPUSH
5682: CALL_OW 111
// continue ;
5686: GO 4748
// end ; if GetType ( i ) = unit_vehicle then
5688: LD_VAR 0 2
5692: PPUSH
5693: CALL_OW 247
5697: PUSH
5698: LD_INT 2
5700: EQUAL
5701: IFFALSE 5798
// begin if GetLives ( i ) < 500 then
5703: LD_VAR 0 2
5707: PPUSH
5708: CALL_OW 256
5712: PUSH
5713: LD_INT 500
5715: LESS
5716: IFFALSE 5759
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5718: LD_VAR 0 2
5722: PPUSH
5723: LD_VAR 0 11
5727: PUSH
5728: LD_VAR 0 12
5732: ARRAY
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: LD_VAR 0 11
5742: PUSH
5743: LD_VAR 0 12
5747: ARRAY
5748: PUSH
5749: LD_INT 2
5751: ARRAY
5752: PPUSH
5753: CALL_OW 111
// continue ;
5757: GO 4748
// end ; ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 11
5768: PUSH
5769: LD_VAR 0 12
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 11
5783: PUSH
5784: LD_VAR 0 12
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 114
// end ; end ;
5798: GO 4748
5800: POP
5801: POP
// until not tmp ;
5802: LD_VAR 0 3
5806: NOT
5807: IFFALSE 4731
// end ;
5809: LD_VAR 0 1
5813: RET
// every 0 0$10 trigger not americanRetreat and IsOk ( usFac ) and not omicronConstructList and UnitsInside ( usFac ) and BuildingStatus ( usFac ) = bs_idle and GetSide ( usFac ) = 1 do var chassis , weapon ;
5814: LD_EXP 26
5818: NOT
5819: IFFALSE 5830
5821: PUSH
5822: LD_INT 291
5824: PPUSH
5825: CALL_OW 302
5829: AND
5830: IFFALSE 5839
5832: PUSH
5833: LD_EXP 62
5837: NOT
5838: AND
5839: IFFALSE 5850
5841: PUSH
5842: LD_INT 291
5844: PPUSH
5845: CALL_OW 313
5849: AND
5850: IFFALSE 5865
5852: PUSH
5853: LD_INT 291
5855: PPUSH
5856: CALL_OW 461
5860: PUSH
5861: LD_INT 2
5863: EQUAL
5864: AND
5865: IFFALSE 5880
5867: PUSH
5868: LD_INT 291
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 1
5878: EQUAL
5879: AND
5880: IFFALSE 6025
5882: GO 5884
5884: DISABLE
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
// begin chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 1
5906: PPUSH
5907: LD_INT 2
5909: PPUSH
5910: CALL_OW 12
5914: ARRAY
5915: ST_TO_ADDR
// if Difficulty > 2 then
5916: LD_OWVAR 67
5920: PUSH
5921: LD_INT 2
5923: GREATER
5924: IFFALSE 5963
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun , us_double_gun ] [ rand ( 1 , 4 ) ] else
5926: LD_ADDR_VAR 0 2
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: LD_INT 4
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: LD_INT 5
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_INT 4
5954: PPUSH
5955: CALL_OW 12
5959: ARRAY
5960: ST_TO_ADDR
5961: GO 5994
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] ;
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_INT 3
5970: PUSH
5971: LD_INT 4
5973: PUSH
5974: LD_INT 2
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 1
5984: PPUSH
5985: LD_INT 3
5987: PPUSH
5988: CALL_OW 12
5992: ARRAY
5993: ST_TO_ADDR
// omicronConstructList := [ [ chassis , engine_combustion , control_manual , weapon ] ] ;
5994: LD_ADDR_EXP 62
5998: PUSH
5999: LD_VAR 0 1
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: LD_INT 1
6009: PUSH
6010: LD_VAR 0 2
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: ST_TO_ADDR
// enable ;
6024: ENABLE
// end ;
6025: PPOPN 2
6027: END
// every 0 0$2 trigger americanRetreat do var i , tmp ;
6028: LD_EXP 26
6032: IFFALSE 6259
6034: GO 6036
6036: DISABLE
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6041: LD_ADDR_VAR 0 2
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: LD_INT 22
6051: PUSH
6052: LD_INT 1
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 21
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 50
6086: PUSH
6087: EMPTY
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: PPUSH
6095: CALL_OW 69
6099: ST_TO_ADDR
// if not tmp then
6100: LD_VAR 0 2
6104: NOT
6105: IFFALSE 6109
// exit ;
6107: GO 6259
// repeat for i in tmp do
6109: LD_ADDR_VAR 0 1
6113: PUSH
6114: LD_VAR 0 2
6118: PUSH
6119: FOR_IN
6120: IFFALSE 6184
// begin if IsInUnit ( i ) then
6122: LD_VAR 0 1
6126: PPUSH
6127: CALL_OW 310
6131: IFFALSE 6144
// ComExit ( i ) else
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL 60648 0 1
6142: GO 6182
// if not IsInArea ( i , americanRetreatArea ) then
6144: LD_VAR 0 1
6148: PPUSH
6149: LD_INT 26
6151: PPUSH
6152: CALL_OW 308
6156: NOT
6157: IFFALSE 6173
// ComMoveToArea ( i , americanRetreatArea ) else
6159: LD_VAR 0 1
6163: PPUSH
6164: LD_INT 26
6166: PPUSH
6167: CALL_OW 113
6171: GO 6182
// RemoveUnit ( i ) ;
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 64
// end ;
6182: GO 6119
6184: POP
6185: POP
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 22
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 21
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 50
6231: PUSH
6232: EMPTY
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// until not tmp ;
6252: LD_VAR 0 2
6256: NOT
6257: IFFALSE 6109
// end ;
6259: PPOPN 2
6261: END
// every 0 0$1 trigger omicronAttackVehicles do var i , mech , enemy ;
6262: LD_EXP 60
6266: IFFALSE 6829
6268: GO 6270
6270: DISABLE
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
// begin enable ;
6276: ENABLE
// if not omicronAttackVehicles then
6277: LD_EXP 60
6281: NOT
6282: IFFALSE 6286
// exit ;
6284: GO 6829
// for i in omicronAttackVehicles do
6286: LD_ADDR_VAR 0 1
6290: PUSH
6291: LD_EXP 60
6295: PUSH
6296: FOR_IN
6297: IFFALSE 6827
// begin if not IsOk ( i ) or GetSide ( i ) <> 1 then
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 302
6308: NOT
6309: IFTRUE 6326
6311: PUSH
6312: LD_VAR 0 1
6316: PPUSH
6317: CALL_OW 255
6321: PUSH
6322: LD_INT 1
6324: NONEQUAL
6325: OR
6326: IFFALSE 6346
// begin omicronAttackVehicles := omicronAttackVehicles diff i ;
6328: LD_ADDR_EXP 60
6332: PUSH
6333: LD_EXP 60
6337: PUSH
6338: LD_VAR 0 1
6342: DIFF
6343: ST_TO_ADDR
// continue ;
6344: GO 6296
// end ; if GetTag ( i ) = 300 then
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 110
6355: PUSH
6356: LD_INT 300
6358: EQUAL
6359: IFFALSE 6474
// begin if GetFuel ( i ) < 50 then
6361: LD_VAR 0 1
6365: PPUSH
6366: CALL_OW 261
6370: PUSH
6371: LD_INT 50
6373: LESS
6374: IFFALSE 6433
// begin ComMoveXY ( i , 24 , 36 ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_INT 24
6383: PPUSH
6384: LD_INT 36
6386: PPUSH
6387: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6391: LD_INT 35
6393: PPUSH
6394: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
6398: LD_VAR 0 1
6402: PPUSH
6403: LD_INT 24
6405: PPUSH
6406: LD_INT 36
6408: PPUSH
6409: CALL_OW 297
6413: PUSH
6414: LD_INT 4
6416: LESS
6417: IFFALSE 6391
// SetFuel ( i , 100 ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: LD_INT 100
6426: PPUSH
6427: CALL_OW 240
// end else
6431: GO 6474
// if not IsInArea ( i , omicronParkingArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 28
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6462
// ComMoveToArea ( i , omicronParkingArea ) else
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 28
6455: PPUSH
6456: CALL_OW 113
6460: GO 6474
// SetTag ( i , 301 ) ;
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 301
6469: PPUSH
6470: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 110
6483: PUSH
6484: LD_INT 301
6486: EQUAL
6487: IFFALSE 6629
// begin if GetLives ( i ) < 1000 then
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 256
6498: PUSH
6499: LD_INT 1000
6501: LESS
6502: IFFALSE 6606
// begin if not IsDrivenBy ( i ) then
6504: LD_VAR 0 1
6508: PPUSH
6509: CALL_OW 311
6513: NOT
6514: IFFALSE 6518
// continue ;
6516: GO 6296
// mech := IsDrivenBy ( i ) ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL_OW 311
6532: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
6533: LD_VAR 0 2
6537: PPUSH
6538: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_VAR 0 1
6551: PPUSH
6552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6556: LD_INT 35
6558: PPUSH
6559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 256
6572: PUSH
6573: LD_INT 1000
6575: EQUAL
6576: IFFALSE 6556
// SetLives ( mech , 1000 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 1000
6585: PPUSH
6586: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
6590: LD_VAR 0 2
6594: PPUSH
6595: LD_VAR 0 1
6599: PPUSH
6600: CALL_OW 120
// end else
6604: GO 6629
// if IsDrivenBy ( i ) then
6606: LD_VAR 0 1
6610: PPUSH
6611: CALL_OW 311
6615: IFFALSE 6629
// SetTag ( i , 0 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 0
6624: PPUSH
6625: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 300
6641: LESS
6642: IFFALSE 6825
// begin enemy := FilterUnitsInArea ( omicronBaseArea , [ f_enemy , 1 ] ) ;
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: LD_INT 18
6651: PPUSH
6652: LD_INT 81
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 70
6666: ST_TO_ADDR
// if GetLives ( i ) < 650 then
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 256
6676: PUSH
6677: LD_INT 650
6679: LESS
6680: IFFALSE 6705
// begin ComStop ( i ) ;
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 141
// SetTag ( i , 300 ) ;
6691: LD_VAR 0 1
6695: PPUSH
6696: LD_INT 300
6698: PPUSH
6699: CALL_OW 109
// continue ;
6703: GO 6296
// end ; if enemy then
6705: LD_VAR 0 3
6709: IFFALSE 6749
// begin if not HasTask ( i ) then
6711: LD_VAR 0 1
6715: PPUSH
6716: CALL_OW 314
6720: NOT
6721: IFFALSE 6747
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6723: LD_VAR 0 1
6727: PPUSH
6728: LD_VAR 0 3
6732: PPUSH
6733: LD_VAR 0 1
6737: PPUSH
6738: CALL_OW 74
6742: PPUSH
6743: CALL_OW 115
// end else
6747: GO 6825
// if omicronAttackVehicles then
6749: LD_EXP 60
6753: IFFALSE 6825
// begin enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
6755: LD_ADDR_VAR 0 3
6759: PUSH
6760: LD_INT 81
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 69
6774: ST_TO_ADDR
// if enemy then
6775: LD_VAR 0 3
6779: IFFALSE 6825
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
6781: LD_VAR 0 1
6785: PPUSH
6786: LD_INT 49
6788: PUSH
6789: LD_INT 43
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 63
6798: PUSH
6799: LD_INT 56
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 72
6808: PUSH
6809: LD_INT 67
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PPUSH
6821: CALL 63016 0 2
// end ; end ; end ;
6825: GO 6296
6827: POP
6828: POP
// end ;
6829: PPOPN 3
6831: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6832: LD_INT 22
6834: PUSH
6835: LD_INT 1
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 32
6844: PUSH
6845: LD_INT 1
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 69
6860: IFFALSE 6937
6862: GO 6864
6864: DISABLE
6865: LD_INT 0
6867: PPUSH
// begin enable ;
6868: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
6869: LD_ADDR_VAR 0 1
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 32
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 69
6902: PUSH
6903: FOR_IN
6904: IFFALSE 6935
// if GetFuel ( i ) < 3 then
6906: LD_VAR 0 1
6910: PPUSH
6911: CALL_OW 261
6915: PUSH
6916: LD_INT 3
6918: LESS
6919: IFFALSE 6933
// SetFuel ( i , 3 ) ;
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_INT 3
6928: PPUSH
6929: CALL_OW 240
6933: GO 6903
6935: POP
6936: POP
// end ;
6937: PPOPN 1
6939: END
// every 0 0$2 trigger joinToOmicronCounter > 2 do
6940: LD_EXP 28
6944: PUSH
6945: LD_INT 2
6947: GREATER
6948: IFFALSE 6985
6950: GO 6952
6952: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_breastwork , 23 , 5 , 4 ] ] ;
6953: LD_ADDR_EXP 63
6957: PUSH
6958: LD_EXP 63
6962: PUSH
6963: LD_INT 31
6965: PUSH
6966: LD_INT 23
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 4
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: ADD
6984: ST_TO_ADDR
6985: END
// every 0 0$2 trigger joinToOmicronCounter > 6 do
6986: LD_EXP 28
6990: PUSH
6991: LD_INT 6
6993: GREATER
6994: IFFALSE 7031
6996: GO 6998
6998: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_armoury , 22 , 14 , 3 ] ] ; end_of_file
6999: LD_ADDR_EXP 63
7003: PUSH
7004: LD_EXP 63
7008: PUSH
7009: LD_INT 4
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 14
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: ADD
7030: ST_TO_ADDR
7031: END
// export function SpawnArabAttack ; var i ; begin
7032: LD_INT 0
7034: PPUSH
7035: PPUSH
// result := [ ] ;
7036: LD_ADDR_VAR 0 1
7040: PUSH
7041: EMPTY
7042: ST_TO_ADDR
// end ;
7043: LD_VAR 0 1
7047: RET
// every 0 0$1 trigger arabAttackActive do
7048: LD_EXP 8
7052: IFFALSE 7057
7054: GO 7056
7056: DISABLE
// begin end ; end_of_file
7057: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL 81690 0 1
// if un in kirovVehicles then
7067: LD_VAR 0 1
7071: PUSH
7072: LD_EXP 49
7076: IN
7077: IFFALSE 7095
// kirovVehicles := kirovVehicles diff un ;
7079: LD_ADDR_EXP 49
7083: PUSH
7084: LD_EXP 49
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// if un = Burlak then
7095: LD_VAR 0 1
7099: PUSH
7100: LD_EXP 29
7104: EQUAL
7105: IFFALSE 7114
// YouLost ( Burlak ) ;
7107: LD_STRING Burlak
7109: PPUSH
7110: CALL_OW 104
// if un = Popov then
7114: LD_VAR 0 1
7118: PUSH
7119: LD_EXP 35
7123: EQUAL
7124: IFFALSE 7133
// YouLost ( Popov ) ;
7126: LD_STRING Popov
7128: PPUSH
7129: CALL_OW 104
// if un = Kurin and not arabAttackActive then
7133: LD_VAR 0 1
7137: PUSH
7138: LD_EXP 33
7142: EQUAL
7143: IFFALSE 7152
7145: PUSH
7146: LD_EXP 8
7150: NOT
7151: AND
7152: IFFALSE 7161
// YouLost ( Kurin ) ;
7154: LD_STRING Kurin
7156: PPUSH
7157: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
7161: LD_VAR 0 1
7165: PUSH
7166: LD_EXP 46
7170: EQUAL
7171: IFFALSE 7180
7173: PUSH
7174: LD_EXP 8
7178: NOT
7179: AND
7180: IFFALSE 7189
// YouLost ( Beria ) ;
7182: LD_STRING Beria
7184: PPUSH
7185: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
7189: LD_VAR 0 1
7193: PUSH
7194: LD_EXP 47
7198: EQUAL
7199: IFFALSE 7208
7201: PUSH
7202: LD_EXP 8
7206: NOT
7207: AND
7208: IFFALSE 7217
// YouLost ( Kagan ) ;
7210: LD_STRING Kagan
7212: PPUSH
7213: CALL_OW 104
// end ;
7217: PPOPN 1
7219: END
// on VehicleConstructed ( vehicle , factory ) do var side , driver ;
7220: LD_INT 0
7222: PPUSH
7223: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PPUSH
7234: CALL 81748 0 2
// side := GetSide ( vehicle ) ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 255
7252: ST_TO_ADDR
// if side = 6 then
7253: LD_VAR 0 3
7257: PUSH
7258: LD_INT 6
7260: EQUAL
7261: IFFALSE 7328
// begin driver := IsDrivenBy ( vehicle ) ;
7263: LD_ADDR_VAR 0 4
7267: PUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 311
7277: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , vehicle ) ;
7278: LD_ADDR_EXP 49
7282: PUSH
7283: LD_EXP 49
7287: PPUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL 60250 0 2
7297: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
7298: LD_VAR 0 4
7302: PPUSH
7303: LD_INT 7
7305: PPUSH
7306: CALL_OW 109
// kirovConstructList := Delete ( kirovConstructList , 1 ) ;
7310: LD_ADDR_EXP 53
7314: PUSH
7315: LD_EXP 53
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: CALL_OW 3
7327: ST_TO_ADDR
// end ; if side = 1 then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 1
7335: EQUAL
7336: IFFALSE 7470
// begin driver := IsDrivenBy ( vehicle ) ;
7338: LD_ADDR_VAR 0 4
7342: PUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 311
7352: ST_TO_ADDR
// if driver then
7353: LD_VAR 0 4
7357: IFFALSE 7371
// SetTag ( driver , tMech ) ;
7359: LD_VAR 0 4
7363: PPUSH
7364: LD_INT 7
7366: PPUSH
7367: CALL_OW 109
// if Count ( omicronVehicles ) < 3 or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
7371: LD_EXP 59
7375: PPUSH
7376: CALL 24274 0 1
7380: PUSH
7381: LD_INT 3
7383: LESS
7384: IFTRUE 7408
7386: PUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 266
7396: PUSH
7397: LD_INT 12
7399: PUSH
7400: LD_INT 13
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: IN
7407: OR
7408: IFFALSE 7432
// omicronVehicles := Join ( omicronVehicles , vehicle ) else
7410: LD_ADDR_EXP 59
7414: PUSH
7415: LD_EXP 59
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL 60250 0 2
7429: ST_TO_ADDR
7430: GO 7452
// omicronAttackVehicles := Join ( omicronAttackVehicles , vehicle ) ;
7432: LD_ADDR_EXP 60
7436: PUSH
7437: LD_EXP 60
7441: PPUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL 60250 0 2
7451: ST_TO_ADDR
// omicronConstructList := Delete ( omicronConstructList , 1 ) ;
7452: LD_ADDR_EXP 62
7456: PUSH
7457: LD_EXP 62
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: CALL_OW 3
7469: ST_TO_ADDR
// end ; end ;
7470: PPOPN 4
7472: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 110
7482: PUSH
7483: LD_INT 7
7485: EQUAL
7486: IFFALSE 7500
// SetTag ( driver , 0 ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT 0
7495: PPUSH
7496: CALL_OW 109
// if GetSide ( driver ) = 1 and IsOk ( usFac ) then
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 255
7509: PUSH
7510: LD_INT 1
7512: EQUAL
7513: IFFALSE 7524
7515: PUSH
7516: LD_INT 291
7518: PPUSH
7519: CALL_OW 302
7523: AND
7524: IFFALSE 7538
// ComEnterUnit ( driver , usFac ) ;
7526: LD_VAR 0 1
7530: PPUSH
7531: LD_INT 291
7533: PPUSH
7534: CALL_OW 120
// end ;
7538: PPOPN 4
7540: END
// on UpgradeComplete ( b ) do var side , btype ;
7541: LD_INT 0
7543: PPUSH
7544: PPUSH
// begin side := GetSide ( b ) ;
7545: LD_ADDR_VAR 0 2
7549: PUSH
7550: LD_VAR 0 1
7554: PPUSH
7555: CALL_OW 255
7559: ST_TO_ADDR
// btype := GetBType ( b ) ;
7560: LD_ADDR_VAR 0 3
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 266
7574: ST_TO_ADDR
// if side = 6 then
7575: LD_VAR 0 2
7579: PUSH
7580: LD_INT 6
7582: EQUAL
7583: IFFALSE 7603
// begin kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
7585: LD_ADDR_EXP 52
7589: PUSH
7590: LD_EXP 52
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: CALL_OW 3
7602: ST_TO_ADDR
// end ; end ;
7603: PPOPN 3
7605: END
// on ResearchComplete ( tech , lab ) do var side ;
7606: LD_INT 0
7608: PPUSH
// begin side := GetSide ( lab ) ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 255
7623: ST_TO_ADDR
// if side = 6 then
7624: LD_VAR 0 3
7628: PUSH
7629: LD_INT 6
7631: EQUAL
7632: IFFALSE 7650
// kirovTechs := kirovTechs diff tech ;
7634: LD_ADDR_EXP 51
7638: PUSH
7639: LD_EXP 51
7643: PUSH
7644: LD_VAR 0 1
7648: DIFF
7649: ST_TO_ADDR
// end ;
7650: PPOPN 3
7652: END
// on BuildingComplete ( b ) do var side , btype ;
7653: LD_INT 0
7655: PPUSH
7656: PPUSH
// begin side := GetSide ( b ) ;
7657: LD_ADDR_VAR 0 2
7661: PUSH
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 255
7671: ST_TO_ADDR
// btype := GetBType ( b ) ;
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 266
7686: ST_TO_ADDR
// if side = 3 then
7687: LD_VAR 0 2
7691: PUSH
7692: LD_INT 3
7694: EQUAL
7695: IFFALSE 7785
// begin if btype = b_oil_mine then
7697: LD_VAR 0 3
7701: PUSH
7702: LD_INT 29
7704: EQUAL
7705: IFFALSE 7715
// hasOilTower := true ;
7707: LD_ADDR_EXP 14
7711: PUSH
7712: LD_INT 1
7714: ST_TO_ADDR
// if btype = b_depot then
7715: LD_VAR 0 3
7719: PUSH
7720: LD_INT 0
7722: EQUAL
7723: IFFALSE 7785
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
7725: LD_VAR 0 1
7729: PPUSH
7730: LD_INT 78
7732: PPUSH
7733: LD_INT 112
7735: PPUSH
7736: CALL_OW 297
7740: PUSH
7741: LD_INT 28
7743: LESS
7744: IFFALSE 7753
7746: PUSH
7747: LD_EXP 12
7751: NOT
7752: AND
7753: IFFALSE 7785
// begin hasKagan := true ;
7755: LD_ADDR_EXP 12
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// kaganDepot := b ;
7763: LD_ADDR_EXP 47
7767: PUSH
7768: LD_VAR 0 1
7772: ST_TO_ADDR
// SetBName ( b , kagan ) ;
7773: LD_VAR 0 1
7777: PPUSH
7778: LD_STRING kagan
7780: PPUSH
7781: CALL_OW 500
// end ; end ; if side = 1 then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 1
7792: EQUAL
7793: IFFALSE 7813
// omicronBuildingsToBuild := Delete ( omicronBuildingsToBuild , 1 ) ;
7795: LD_ADDR_EXP 63
7799: PUSH
7800: LD_EXP 63
7804: PPUSH
7805: LD_INT 1
7807: PPUSH
7808: CALL_OW 3
7812: ST_TO_ADDR
// if side = 6 then
7813: LD_VAR 0 2
7817: PUSH
7818: LD_INT 6
7820: EQUAL
7821: IFFALSE 7841
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
7823: LD_ADDR_EXP 52
7827: PUSH
7828: LD_EXP 52
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: CALL_OW 3
7840: ST_TO_ADDR
// end ;
7841: PPOPN 3
7843: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
7844: LD_VAR 0 1
7848: PUSH
7849: LD_INT 3
7851: EQUAL
7852: IFFALSE 7864
7854: PUSH
7855: LD_VAR 0 2
7859: PUSH
7860: LD_INT 6
7862: EQUAL
7863: AND
7864: IFFALSE 7874
// allianceAttacked := true ;
7866: LD_ADDR_EXP 9
7870: PUSH
7871: LD_INT 1
7873: ST_TO_ADDR
// end ;
7874: PPOPN 2
7876: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
7877: LD_VAR 0 2
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 6
7889: EQUAL
7890: IFFALSE 7907
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 255
7902: PUSH
7903: LD_INT 3
7905: EQUAL
7906: AND
7907: IFFALSE 7924
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
7909: LD_ADDR_EXP 17
7913: PUSH
7914: LD_EXP 17
7918: PPUSH
7919: CALL 61623 0 1
7923: ST_TO_ADDR
// end ;
7924: PPOPN 2
7926: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
7927: LD_EXP 22
7931: IFFALSE 7935
// exit ;
7933: GO 8052
// if oldSide = 6 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 6
7942: EQUAL
7943: IFFALSE 8052
// begin ComExit ( driver ) ;
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL 60648 0 1
// SetSide ( newId , 6 ) ;
7954: LD_VAR 0 1
7958: PPUSH
7959: LD_INT 6
7961: PPUSH
7962: CALL_OW 235
// if oldId in kirovVehicles then
7966: LD_VAR 0 2
7970: PUSH
7971: LD_EXP 49
7975: IN
7976: IFFALSE 8016
// begin kirovVehicles := kirovVehicles diff oldId ;
7978: LD_ADDR_EXP 49
7982: PUSH
7983: LD_EXP 49
7987: PUSH
7988: LD_VAR 0 2
7992: DIFF
7993: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
7994: LD_ADDR_EXP 49
7998: PUSH
7999: LD_EXP 49
8003: PPUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL 60250 0 2
8013: ST_TO_ADDR
// end else
8014: GO 8052
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
8016: LD_ADDR_EXP 50
8020: PUSH
8021: LD_EXP 50
8025: PUSH
8026: LD_VAR 0 2
8030: DIFF
8031: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
8032: LD_ADDR_EXP 50
8036: PUSH
8037: LD_EXP 50
8041: PPUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL 60250 0 2
8051: ST_TO_ADDR
// end ; end ; end ;
8052: PPOPN 4
8054: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
8055: LD_INT 0
8057: PPUSH
// begin tag := GetTag ( un ) ;
8058: LD_ADDR_VAR 0 4
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 110
8072: ST_TO_ADDR
// if tag = tWannaBeMech then
8073: LD_VAR 0 4
8077: PUSH
8078: LD_INT 14
8080: EQUAL
8081: IFFALSE 8095
// SetTag ( un , 0 ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: LD_INT 0
8090: PPUSH
8091: CALL_OW 109
// end ;
8095: PPOPN 4
8097: END
// on SailEvent ( event ) do begin if event = eventCargo then
8098: LD_VAR 0 1
8102: PUSH
8103: LD_INT 1
8105: EQUAL
8106: IFFALSE 8112
// SendCargoWithOil ;
8108: CALL 2083 0 0
// if event = eventConvoy then
8112: LD_VAR 0 1
8116: PUSH
8117: LD_INT 2
8119: EQUAL
8120: IFFALSE 8126
// SendConvoy ;
8122: CALL 3428 0 0
// end ;
8126: PPOPN 1
8128: END
// on EnterBuilding ( b , un ) do begin if b = usFac and GetSide ( un ) = 1 then
8129: LD_VAR 0 1
8133: PUSH
8134: LD_INT 291
8136: EQUAL
8137: IFFALSE 8154
8139: PUSH
8140: LD_VAR 0 2
8144: PPUSH
8145: CALL_OW 255
8149: PUSH
8150: LD_INT 1
8152: EQUAL
8153: AND
8154: IFFALSE 8168
// SetLives ( un , 1000 ) ;
8156: LD_VAR 0 2
8160: PPUSH
8161: LD_INT 1000
8163: PPUSH
8164: CALL_OW 234
// end ; end_of_file
8168: PPOPN 2
8170: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] ] ) ;
8176: LD_ADDR_VAR 0 3
8180: PUSH
8181: LD_STRING 02_Beria
8183: PPUSH
8184: LD_INT 31
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 63
8195: PUSH
8196: LD_INT 86
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 31
8212: PUSH
8213: LD_INT 3
8215: PUSH
8216: LD_INT 3
8218: PUSH
8219: LD_INT 74
8221: PUSH
8222: LD_INT 94
8224: PUSH
8225: LD_INT 4
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 31
8238: PUSH
8239: LD_INT 3
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: LD_INT 77
8247: PUSH
8248: LD_INT 103
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 0
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: LD_INT 66
8273: PUSH
8274: LD_INT 104
8276: PUSH
8277: LD_INT 0
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 0
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: LD_INT 2
8296: PUSH
8297: LD_INT 103
8299: PUSH
8300: LD_INT 67
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 30
8325: ST_TO_ADDR
// uc_side := 3 ;
8326: LD_ADDR_OWVAR 20
8330: PUSH
8331: LD_INT 3
8333: ST_TO_ADDR
// for i in tmp do
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_VAR 0 3
8343: PUSH
8344: FOR_IN
8345: IFFALSE 8442
// begin uc_nation := i [ 2 ] ;
8347: LD_ADDR_OWVAR 21
8351: PUSH
8352: LD_VAR 0 2
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8361: LD_ADDR_OWVAR 42
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: ST_TO_ADDR
// bc_level := i [ 3 ] ;
8375: LD_ADDR_OWVAR 43
8379: PUSH
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 3
8387: ARRAY
8388: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
8389: LD_ADDR_OWVAR 44
8393: PUSH
8394: LD_INT 9
8396: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
8397: LD_ADDR_OWVAR 45
8401: PUSH
8402: LD_INT 9
8404: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 4
8412: ARRAY
8413: PUSH
8414: LD_INT 46
8416: PLUS
8417: PPUSH
8418: LD_VAR 0 2
8422: PUSH
8423: LD_INT 5
8425: ARRAY
8426: PPUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 6
8434: ARRAY
8435: PPUSH
8436: CALL_OW 47
// end ;
8440: GO 8344
8442: POP
8443: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
8444: LD_ADDR_VAR 0 3
8448: PUSH
8449: LD_STRING 02_Kirov
8451: PPUSH
8452: LD_INT 31
8454: PUSH
8455: LD_INT 3
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 98
8463: PUSH
8464: LD_INT 98
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 6
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 107
8489: PUSH
8490: LD_INT 99
8492: PUSH
8493: LD_INT 3
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 0
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: LD_INT 3
8512: PUSH
8513: LD_INT 117
8515: PUSH
8516: LD_INT 104
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 4
8532: PUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: LD_INT 105
8541: PUSH
8542: LD_INT 108
8544: PUSH
8545: LD_INT 0
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 4
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 120
8567: PUSH
8568: LD_INT 116
8570: PUSH
8571: LD_INT 0
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 2
8584: PUSH
8585: LD_INT 3
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 113
8593: PUSH
8594: LD_INT 113
8596: PUSH
8597: LD_INT 0
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: LD_INT 3
8616: PUSH
8617: LD_INT 116
8619: PUSH
8620: LD_INT 98
8622: PUSH
8623: LD_INT 0
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 30
8647: ST_TO_ADDR
// uc_side := 6 ;
8648: LD_ADDR_OWVAR 20
8652: PUSH
8653: LD_INT 6
8655: ST_TO_ADDR
// for i in tmp do
8656: LD_ADDR_VAR 0 2
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: FOR_IN
8667: IFFALSE 8764
// begin uc_nation := i [ 2 ] ;
8669: LD_ADDR_OWVAR 21
8673: PUSH
8674: LD_VAR 0 2
8678: PUSH
8679: LD_INT 2
8681: ARRAY
8682: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8683: LD_ADDR_OWVAR 42
8687: PUSH
8688: LD_VAR 0 2
8692: PUSH
8693: LD_INT 1
8695: ARRAY
8696: ST_TO_ADDR
// bc_level := i [ 3 ] ;
8697: LD_ADDR_OWVAR 43
8701: PUSH
8702: LD_VAR 0 2
8706: PUSH
8707: LD_INT 3
8709: ARRAY
8710: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
8711: LD_ADDR_OWVAR 44
8715: PUSH
8716: LD_INT 9
8718: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
8719: LD_ADDR_OWVAR 45
8723: PUSH
8724: LD_INT 9
8726: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
8727: LD_VAR 0 2
8731: PUSH
8732: LD_INT 4
8734: ARRAY
8735: PUSH
8736: LD_INT 46
8738: PLUS
8739: PPUSH
8740: LD_VAR 0 2
8744: PUSH
8745: LD_INT 5
8747: ARRAY
8748: PPUSH
8749: LD_VAR 0 2
8753: PUSH
8754: LD_INT 6
8756: ARRAY
8757: PPUSH
8758: CALL_OW 47
// end ;
8762: GO 8666
8764: POP
8765: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
8766: LD_ADDR_VAR 0 3
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_INT 3
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 95
8783: PUSH
8784: LD_INT 3
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: ST_TO_ADDR
// if tmp then
8811: LD_VAR 0 3
8815: IFFALSE 8846
// for i in tmp do
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_VAR 0 3
8826: PUSH
8827: FOR_IN
8828: IFFALSE 8844
// SetSide ( i , 6 ) ;
8830: LD_VAR 0 2
8834: PPUSH
8835: LD_INT 6
8837: PPUSH
8838: CALL_OW 235
8842: GO 8827
8844: POP
8845: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
8846: LD_ADDR_EXP 45
8850: PUSH
8851: LD_INT 163
8853: PPUSH
8854: LD_INT 104
8856: PPUSH
8857: CALL_OW 428
8861: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
8862: LD_ADDR_EXP 46
8866: PUSH
8867: LD_INT 112
8869: PPUSH
8870: LD_INT 104
8872: PPUSH
8873: CALL_OW 428
8877: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
8878: LD_EXP 46
8882: PPUSH
8883: LD_STRING beria
8885: PPUSH
8886: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
8890: LD_EXP 45
8894: PPUSH
8895: LD_STRING kirov
8897: PPUSH
8898: CALL_OW 500
// end ;
8902: LD_VAR 0 1
8906: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
8907: LD_INT 0
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
8925: PPUSH
8926: PPUSH
8927: PPUSH
8928: PPUSH
8929: PPUSH
8930: PPUSH
8931: PPUSH
// enable ;
8932: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
8933: LD_ADDR_VAR 0 16
8937: PUSH
8938: LD_INT 81
8940: PUSH
8941: LD_VAR 0 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 69
8954: ST_TO_ADDR
// if tmp then
8955: LD_VAR 0 16
8959: IFFALSE 8980
// enemySide := GetSide ( tmp [ 1 ] ) ;
8961: LD_ADDR_VAR 0 36
8965: PUSH
8966: LD_VAR 0 16
8970: PUSH
8971: LD_INT 1
8973: ARRAY
8974: PPUSH
8975: CALL_OW 255
8979: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
8980: LD_ADDR_VAR 0 29
8984: PUSH
8985: LD_VAR 0 4
8989: PPUSH
8990: LD_INT 81
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 70
9006: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
9007: LD_ADDR_VAR 0 30
9011: PUSH
9012: LD_VAR 0 5
9016: PPUSH
9017: LD_INT 81
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PPUSH
9029: CALL_OW 70
9033: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9034: LD_ADDR_VAR 0 35
9038: PUSH
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 22
9046: PUSH
9047: LD_VAR 0 1
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 0
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 70
9092: ST_TO_ADDR
// if depot then
9093: LD_VAR 0 35
9097: IFFALSE 9113
// depot := depot [ 1 ] ;
9099: LD_ADDR_VAR 0 35
9103: PUSH
9104: LD_VAR 0 35
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
9113: LD_ADDR_VAR 0 32
9117: PUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: LD_INT 22
9125: PUSH
9126: LD_VAR 0 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 30
9137: PUSH
9138: LD_INT 3
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 50
9147: PUSH
9148: EMPTY
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: PPUSH
9156: CALL_OW 70
9160: ST_TO_ADDR
// if Count ( techs ) then
9161: LD_VAR 0 8
9165: PPUSH
9166: CALL 24274 0 1
9170: IFFALSE 9331
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9172: LD_ADDR_VAR 0 18
9176: PUSH
9177: LD_VAR 0 2
9181: PPUSH
9182: LD_INT 22
9184: PUSH
9185: LD_VAR 0 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 50
9196: PUSH
9197: EMPTY
9198: LIST
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: LD_INT 30
9205: PUSH
9206: LD_INT 6
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 30
9215: PUSH
9216: LD_INT 7
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 30
9225: PUSH
9226: LD_INT 8
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: PPUSH
9244: CALL_OW 70
9248: ST_TO_ADDR
// if lab then
9249: LD_VAR 0 18
9253: IFFALSE 9329
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
9255: LD_VAR 0 18
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: IFFALSE 9329
// begin for i in techs do
9274: LD_ADDR_VAR 0 15
9278: PUSH
9279: LD_VAR 0 8
9283: PUSH
9284: FOR_IN
9285: IFFALSE 9327
// if CanBeResearched ( lab [ 1 ] , i ) then
9287: LD_VAR 0 18
9291: PUSH
9292: LD_INT 1
9294: ARRAY
9295: PPUSH
9296: LD_VAR 0 15
9300: PPUSH
9301: CALL_OW 430
9305: IFFALSE 9325
// begin AddComResearch ( lab [ 1 ] , i ) ;
9307: LD_VAR 0 18
9311: PUSH
9312: LD_INT 1
9314: ARRAY
9315: PPUSH
9316: LD_VAR 0 15
9320: PPUSH
9321: CALL_OW 184
// end ;
9325: GO 9284
9327: POP
9328: POP
// end ; end ; end else
9329: GO 9634
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
9331: LD_VAR 0 32
9335: PPUSH
9336: LD_INT 3
9338: PUSH
9339: LD_INT 62
9341: PUSH
9342: EMPTY
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 72
9353: IFFALSE 9420
9355: PUSH
9356: LD_VAR 0 6
9360: PPUSH
9361: LD_INT 3
9363: PUSH
9364: LD_INT 60
9366: PUSH
9367: EMPTY
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 3
9376: PUSH
9377: LD_INT 120
9379: PUSH
9380: LD_INT 14
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 25
9393: PUSH
9394: LD_INT 4
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 72
9410: PPUSH
9411: CALL 24274 0 1
9415: PUSH
9416: LD_INT 2
9418: GREATER
9419: AND
9420: IFFALSE 9634
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
9422: LD_ADDR_VAR 0 16
9426: PUSH
9427: LD_VAR 0 6
9431: PPUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 60
9437: PUSH
9438: EMPTY
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 3
9447: PUSH
9448: LD_INT 120
9450: PUSH
9451: LD_INT 14
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 25
9464: PUSH
9465: LD_INT 4
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 72
9481: ST_TO_ADDR
// for i := tmp downto 2 do
9482: LD_ADDR_VAR 0 15
9486: PUSH
9487: DOUBLE
9488: LD_VAR 0 16
9492: INC
9493: ST_TO_ADDR
9494: LD_INT 2
9496: PUSH
9497: FOR_DOWNTO
9498: IFFALSE 9632
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
9500: LD_VAR 0 32
9504: PUSH
9505: LD_INT 1
9507: ARRAY
9508: PPUSH
9509: CALL_OW 313
9513: PPUSH
9514: CALL 24274 0 1
9518: PUSH
9519: LD_VAR 0 6
9523: PPUSH
9524: LD_INT 120
9526: PUSH
9527: LD_INT 14
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 72
9538: PPUSH
9539: CALL 24274 0 1
9543: PLUS
9544: PUSH
9545: LD_INT 6
9547: EQUAL
9548: IFFALSE 9552
// break ;
9550: GO 9632
// sci := tmp [ i ] ;
9552: LD_ADDR_VAR 0 24
9556: PUSH
9557: LD_VAR 0 16
9561: PUSH
9562: LD_VAR 0 15
9566: ARRAY
9567: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
9568: LD_VAR 0 24
9572: PPUSH
9573: LD_INT 14
9575: PPUSH
9576: CALL_OW 109
// if IsInUnit ( sci ) then
9580: LD_VAR 0 24
9584: PPUSH
9585: CALL_OW 310
9589: IFFALSE 9600
// ComExitBuilding ( sci ) ;
9591: LD_VAR 0 24
9595: PPUSH
9596: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
9600: LD_VAR 0 24
9604: PPUSH
9605: LD_VAR 0 32
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
9618: LD_VAR 0 24
9622: PPUSH
9623: LD_INT 3
9625: PPUSH
9626: CALL_OW 183
// end ;
9630: GO 9497
9632: POP
9633: POP
// end ; if fac then
9634: LD_VAR 0 32
9638: IFFALSE 9953
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
9640: LD_VAR 0 32
9644: PUSH
9645: LD_INT 1
9647: ARRAY
9648: PPUSH
9649: CALL_OW 461
9653: PUSH
9654: LD_INT 2
9656: EQUAL
9657: IFFALSE 9953
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
9659: LD_ADDR_VAR 0 33
9663: PUSH
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_INT 2
9671: PUSH
9672: LD_INT 30
9674: PUSH
9675: LD_INT 32
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 30
9684: PUSH
9685: LD_INT 33
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 35
9699: PUSH
9700: LD_INT 0
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 70
9715: ST_TO_ADDR
// if emptyTowers then
9716: LD_VAR 0 33
9720: IFFALSE 9770
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
9722: LD_ADDR_VAR 0 34
9726: PUSH
9727: LD_VAR 0 33
9731: PUSH
9732: LD_INT 1
9734: ARRAY
9735: PPUSH
9736: LD_VAR 0 2
9740: PPUSH
9741: CALL 32599 0 2
9745: ST_TO_ADDR
// if weapon then
9746: LD_VAR 0 34
9750: IFFALSE 9770
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
9752: LD_VAR 0 33
9756: PUSH
9757: LD_INT 1
9759: ARRAY
9760: PPUSH
9761: LD_VAR 0 34
9765: PPUSH
9766: CALL_OW 148
// end ; if constructList then
9770: LD_VAR 0 9
9774: IFFALSE 9953
// for i := 1 to Count ( constructList ) do
9776: LD_ADDR_VAR 0 15
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL 24274 0 1
9795: PUSH
9796: FOR_TO
9797: IFFALSE 9951
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
9799: LD_VAR 0 32
9803: PUSH
9804: LD_INT 1
9806: ARRAY
9807: PPUSH
9808: LD_VAR 0 9
9812: PUSH
9813: LD_VAR 0 15
9817: ARRAY
9818: PUSH
9819: LD_INT 1
9821: ARRAY
9822: PPUSH
9823: LD_VAR 0 9
9827: PUSH
9828: LD_VAR 0 15
9832: ARRAY
9833: PUSH
9834: LD_INT 2
9836: ARRAY
9837: PPUSH
9838: LD_VAR 0 9
9842: PUSH
9843: LD_VAR 0 15
9847: ARRAY
9848: PUSH
9849: LD_INT 3
9851: ARRAY
9852: PPUSH
9853: LD_VAR 0 9
9857: PUSH
9858: LD_VAR 0 15
9862: ARRAY
9863: PUSH
9864: LD_INT 4
9866: ARRAY
9867: PPUSH
9868: CALL_OW 448
9872: IFFALSE 9949
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
9874: LD_VAR 0 32
9878: PUSH
9879: LD_INT 1
9881: ARRAY
9882: PPUSH
9883: LD_VAR 0 9
9887: PUSH
9888: LD_VAR 0 15
9892: ARRAY
9893: PUSH
9894: LD_INT 1
9896: ARRAY
9897: PPUSH
9898: LD_VAR 0 9
9902: PUSH
9903: LD_VAR 0 15
9907: ARRAY
9908: PUSH
9909: LD_INT 2
9911: ARRAY
9912: PPUSH
9913: LD_VAR 0 9
9917: PUSH
9918: LD_VAR 0 15
9922: ARRAY
9923: PUSH
9924: LD_INT 3
9926: ARRAY
9927: PPUSH
9928: LD_VAR 0 9
9932: PUSH
9933: LD_VAR 0 15
9937: ARRAY
9938: PUSH
9939: LD_INT 4
9941: ARRAY
9942: PPUSH
9943: CALL_OW 125
// break ;
9947: GO 9951
// end ; end ;
9949: GO 9796
9951: POP
9952: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9953: LD_ADDR_VAR 0 16
9957: PUSH
9958: LD_VAR 0 2
9962: PPUSH
9963: LD_INT 22
9965: PUSH
9966: LD_VAR 0 1
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 3
9987: PUSH
9988: LD_INT 57
9990: PUSH
9991: EMPTY
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 3
10000: PUSH
10001: LD_INT 24
10003: PUSH
10004: LD_INT 1000
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 70
10025: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
10026: LD_ADDR_VAR 0 20
10030: PUSH
10031: LD_VAR 0 6
10035: PPUSH
10036: LD_INT 25
10038: PUSH
10039: LD_INT 3
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 50
10048: PUSH
10049: EMPTY
10050: LIST
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 72
10060: ST_TO_ADDR
// if fac then
10061: LD_VAR 0 32
10065: IFFALSE 10186
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
10067: LD_VAR 0 20
10071: PPUSH
10072: LD_INT 3
10074: PUSH
10075: LD_INT 120
10077: PUSH
10078: LD_INT 7
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: LD_INT 54
10094: PUSH
10095: EMPTY
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 72
10110: IFFALSE 10127
10112: PUSH
10113: LD_VAR 0 32
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: PPUSH
10122: CALL_OW 302
10126: AND
10127: IFFALSE 10186
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
10129: LD_VAR 0 20
10133: PPUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 120
10139: PUSH
10140: LD_INT 7
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 3
10153: PUSH
10154: LD_INT 54
10156: PUSH
10157: EMPTY
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 72
10172: PPUSH
10173: LD_VAR 0 32
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
10186: LD_ADDR_VAR 0 24
10190: PUSH
10191: LD_VAR 0 6
10195: PPUSH
10196: LD_INT 25
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 120
10211: PUSH
10212: LD_INT 14
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 50
10225: PUSH
10226: EMPTY
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 72
10238: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
10239: LD_ADDR_VAR 0 18
10243: PUSH
10244: LD_VAR 0 2
10248: PPUSH
10249: LD_INT 2
10251: PUSH
10252: LD_INT 30
10254: PUSH
10255: LD_INT 6
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 30
10264: PUSH
10265: LD_INT 7
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 30
10274: PUSH
10275: LD_INT 8
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: PPUSH
10288: CALL_OW 70
10292: ST_TO_ADDR
// if sci then
10293: LD_VAR 0 24
10297: IFFALSE 10476
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 1000 ] ] , [ f_tag , tHeal ] ] ) ;
10299: LD_ADDR_VAR 0 27
10303: PUSH
10304: LD_VAR 0 6
10308: PPUSH
10309: LD_INT 95
10311: PUSH
10312: LD_VAR 0 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 3
10323: PUSH
10324: LD_INT 24
10326: PUSH
10327: LD_INT 1000
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 120
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 72
10357: ST_TO_ADDR
// if hurtUnits then
10358: LD_VAR 0 27
10362: IFFALSE 10423
// begin for i in sci do
10364: LD_ADDR_VAR 0 15
10368: PUSH
10369: LD_VAR 0 24
10373: PUSH
10374: FOR_IN
10375: IFFALSE 10419
// if IsInUnit ( i ) then
10377: LD_VAR 0 15
10381: PPUSH
10382: CALL_OW 310
10386: IFFALSE 10399
// ComExitBuilding ( i ) else
10388: LD_VAR 0 15
10392: PPUSH
10393: CALL_OW 122
10397: GO 10417
// ComHeal ( i , hurtUnits [ 1 ] ) ;
10399: LD_VAR 0 15
10403: PPUSH
10404: LD_VAR 0 27
10408: PUSH
10409: LD_INT 1
10411: ARRAY
10412: PPUSH
10413: CALL_OW 128
10417: GO 10374
10419: POP
10420: POP
// end else
10421: GO 10476
// if lab then
10423: LD_VAR 0 18
10427: IFFALSE 10476
// begin for i in sci do
10429: LD_ADDR_VAR 0 15
10433: PUSH
10434: LD_VAR 0 24
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10474
// if not IsInUnit ( i ) then
10442: LD_VAR 0 15
10446: PPUSH
10447: CALL_OW 310
10451: NOT
10452: IFFALSE 10472
// ComEnterUnit ( i , lab [ 1 ] ) ;
10454: LD_VAR 0 15
10458: PPUSH
10459: LD_VAR 0 18
10463: PUSH
10464: LD_INT 1
10466: ARRAY
10467: PPUSH
10468: CALL_OW 120
10472: GO 10439
10474: POP
10475: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
10476: LD_ADDR_VAR 0 19
10480: PUSH
10481: LD_VAR 0 6
10485: PPUSH
10486: LD_INT 25
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 72
10500: ST_TO_ADDR
// if eng then
10501: LD_VAR 0 19
10505: IFFALSE 11834
// begin for i in eng do
10507: LD_ADDR_VAR 0 15
10511: PUSH
10512: LD_VAR 0 19
10516: PUSH
10517: FOR_IN
10518: IFFALSE 11832
// begin cr := GetListOfCratesInArea ( area ) ;
10520: LD_ADDR_VAR 0 23
10524: PUSH
10525: LD_VAR 0 2
10529: PPUSH
10530: CALL_OW 435
10534: ST_TO_ADDR
// if cratesArea then
10535: LD_VAR 0 3
10539: IFFALSE 10562
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
10541: LD_ADDR_VAR 0 23
10545: PUSH
10546: LD_VAR 0 23
10550: PUSH
10551: LD_VAR 0 3
10555: PPUSH
10556: CALL_OW 435
10560: UNION
10561: ST_TO_ADDR
// tag := GetTag ( i ) ;
10562: LD_ADDR_VAR 0 21
10566: PUSH
10567: LD_VAR 0 15
10571: PPUSH
10572: CALL_OW 110
10576: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
10577: LD_VAR 0 15
10581: PPUSH
10582: LD_VAR 0 5
10586: PPUSH
10587: CALL_OW 308
10591: IFFALSE 10598
10593: PUSH
10594: LD_INT 2
10596: NOT
10597: AND
10598: IFFALSE 10629
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10600: LD_VAR 0 15
10604: PPUSH
10605: LD_VAR 0 12
10609: PUSH
10610: LD_INT 1
10612: ARRAY
10613: PPUSH
10614: LD_VAR 0 12
10618: PUSH
10619: LD_INT 2
10621: ARRAY
10622: PPUSH
10623: CALL_OW 111
// continue ;
10627: GO 10517
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
10629: LD_VAR 0 15
10633: PPUSH
10634: CALL_OW 256
10638: PUSH
10639: LD_INT 800
10641: LESS
10642: IFFALSE 10654
10644: PUSH
10645: LD_VAR 0 21
10649: PUSH
10650: LD_INT 1
10652: NONEQUAL
10653: AND
10654: IFFALSE 10704
// begin SetTag ( i , tHeal ) ;
10656: LD_VAR 0 15
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10668: LD_VAR 0 15
10672: PPUSH
10673: LD_VAR 0 11
10677: PUSH
10678: LD_INT 1
10680: ARRAY
10681: PPUSH
10682: LD_VAR 0 11
10686: PUSH
10687: LD_INT 2
10689: ARRAY
10690: PPUSH
10691: CALL_OW 111
// AddComHold ( i ) ;
10695: LD_VAR 0 15
10699: PPUSH
10700: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
10704: LD_VAR 0 21
10708: PUSH
10709: LD_INT 1
10711: EQUAL
10712: IFFALSE 10729
10714: PUSH
10715: LD_VAR 0 15
10719: PPUSH
10720: CALL_OW 256
10724: PUSH
10725: LD_INT 1000
10727: EQUAL
10728: AND
10729: IFFALSE 10743
// SetTag ( i , 0 ) ;
10731: LD_VAR 0 15
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 109
// if not tag then
10743: LD_VAR 0 21
10747: NOT
10748: IFFALSE 10919
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
10750: LD_ADDR_VAR 0 17
10754: PUSH
10755: LD_VAR 0 2
10759: PPUSH
10760: LD_INT 57
10762: PUSH
10763: EMPTY
10764: LIST
10765: PPUSH
10766: CALL_OW 70
10770: ST_TO_ADDR
// if undone then
10771: LD_VAR 0 17
10775: IFFALSE 10797
// begin ComComplete ( i , undone [ 1 ] ) ;
10777: LD_VAR 0 15
10781: PPUSH
10782: LD_VAR 0 17
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: CALL 30444 0 2
// continue ;
10795: GO 10517
// end ; if cr or tmp or buildingsToBuild then
10797: LD_VAR 0 23
10801: IFTRUE 10809
10803: PUSH
10804: LD_VAR 0 16
10808: OR
10809: IFTRUE 10817
10811: PUSH
10812: LD_VAR 0 10
10816: OR
10817: IFFALSE 10893
// begin if IsInUnit ( i ) then
10819: LD_VAR 0 15
10823: PPUSH
10824: CALL_OW 310
10828: IFFALSE 10839
// ComExitBuilding ( i ) ;
10830: LD_VAR 0 15
10834: PPUSH
10835: CALL_OW 122
// if tmp then
10839: LD_VAR 0 16
10843: IFFALSE 10859
// SetTag ( i , tRepair ) else
10845: LD_VAR 0 15
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 109
10857: GO 10891
// if cr then
10859: LD_VAR 0 23
10863: IFFALSE 10879
// SetTag ( i , tCrates ) else
10865: LD_VAR 0 15
10869: PPUSH
10870: LD_INT 2
10872: PPUSH
10873: CALL_OW 109
10877: GO 10891
// SetTag ( i , tBuild ) ;
10879: LD_VAR 0 15
10883: PPUSH
10884: LD_INT 5
10886: PPUSH
10887: CALL_OW 109
// end else
10891: GO 10919
// if not IsInUnit ( i ) then
10893: LD_VAR 0 15
10897: PPUSH
10898: CALL_OW 310
10902: NOT
10903: IFFALSE 10919
// ComEnterUnit ( i , depot ) ;
10905: LD_VAR 0 15
10909: PPUSH
10910: LD_VAR 0 35
10914: PPUSH
10915: CALL_OW 120
// end ; if tag = tRepair then
10919: LD_VAR 0 21
10923: PUSH
10924: LD_INT 3
10926: EQUAL
10927: IFFALSE 11033
// begin if IsInUnit ( i ) then
10929: LD_VAR 0 15
10933: PPUSH
10934: CALL_OW 310
10938: IFFALSE 10951
// begin ComExitBuilding ( i ) ;
10940: LD_VAR 0 15
10944: PPUSH
10945: CALL_OW 122
// continue ;
10949: GO 10517
// end ; if not tmp then
10951: LD_VAR 0 16
10955: NOT
10956: IFFALSE 10972
// begin SetTag ( i , 0 ) ;
10958: LD_VAR 0 15
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 109
// continue ;
10970: GO 10517
// end ; if not HasTask ( i ) then
10972: LD_VAR 0 15
10976: PPUSH
10977: CALL_OW 314
10981: NOT
10982: IFFALSE 11002
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
10984: LD_VAR 0 15
10988: PPUSH
10989: LD_VAR 0 16
10993: PUSH
10994: LD_INT 1
10996: ARRAY
10997: PPUSH
10998: CALL_OW 130
// if not IsInarea ( i , area ) then
11002: LD_VAR 0 15
11006: PPUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: CALL_OW 308
11016: NOT
11017: IFFALSE 11033
// ComMoveToArea ( i , area ) ;
11019: LD_VAR 0 15
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: CALL_OW 113
// end ; if tag = tBuild then
11033: LD_VAR 0 21
11037: PUSH
11038: LD_INT 5
11040: EQUAL
11041: IFFALSE 11615
// begin if IsInUnit ( i ) then
11043: LD_VAR 0 15
11047: PPUSH
11048: CALL_OW 310
11052: IFFALSE 11065
// begin ComExitBuilding ( i ) ;
11054: LD_VAR 0 15
11058: PPUSH
11059: CALL_OW 122
// continue ;
11063: GO 10517
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
11065: LD_VAR 0 10
11069: NOT
11070: IFTRUE 11078
11072: PUSH
11073: LD_VAR 0 29
11077: OR
11078: IFTRUE 11086
11080: PUSH
11081: LD_VAR 0 30
11085: OR
11086: IFFALSE 11104
// begin SetTag ( i , 0 ) ;
11088: LD_VAR 0 15
11092: PPUSH
11093: LD_INT 0
11095: PPUSH
11096: CALL_OW 109
// continue ;
11100: GO 10517
// end else
11102: GO 11143
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
11104: LD_VAR 0 35
11108: PPUSH
11109: LD_VAR 0 10
11113: PUSH
11114: LD_INT 1
11116: ARRAY
11117: PUSH
11118: LD_INT 1
11120: ARRAY
11121: PPUSH
11122: CALL 64345 0 2
11126: NOT
11127: IFFALSE 11143
// begin SetTag ( i , 0 ) ;
11129: LD_VAR 0 15
11133: PPUSH
11134: LD_INT 0
11136: PPUSH
11137: CALL_OW 109
// continue ;
11141: GO 10517
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
11143: LD_ADDR_VAR 0 17
11147: PUSH
11148: LD_VAR 0 2
11152: PPUSH
11153: LD_INT 57
11155: PUSH
11156: EMPTY
11157: LIST
11158: PPUSH
11159: CALL_OW 70
11163: ST_TO_ADDR
// if undone then
11164: LD_VAR 0 17
11168: IFFALSE 11190
// begin ComComplete ( i , undone [ 1 ] ) ;
11170: LD_VAR 0 15
11174: PPUSH
11175: LD_VAR 0 17
11179: PUSH
11180: LD_INT 1
11182: ARRAY
11183: PPUSH
11184: CALL 30444 0 2
// continue ;
11188: GO 10517
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
11190: LD_VAR 0 10
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PUSH
11199: LD_INT 1
11201: ARRAY
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 5
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: IN
11213: IFFALSE 11310
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
11215: LD_VAR 0 10
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PUSH
11224: LD_INT 2
11226: ARRAY
11227: PPUSH
11228: LD_VAR 0 10
11232: PUSH
11233: LD_INT 1
11235: ARRAY
11236: PUSH
11237: LD_INT 3
11239: ARRAY
11240: PPUSH
11241: CALL_OW 428
11245: IFFALSE 11271
11247: PUSH
11248: LD_VAR 0 35
11252: PPUSH
11253: LD_VAR 0 10
11257: PUSH
11258: LD_INT 1
11260: ARRAY
11261: PUSH
11262: LD_INT 1
11264: ARRAY
11265: PPUSH
11266: CALL 64345 0 2
11270: AND
11271: IFFALSE 11308
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
11273: LD_VAR 0 10
11277: PUSH
11278: LD_INT 1
11280: ARRAY
11281: PUSH
11282: LD_INT 2
11284: ARRAY
11285: PPUSH
11286: LD_VAR 0 10
11290: PUSH
11291: LD_INT 1
11293: ARRAY
11294: PUSH
11295: LD_INT 3
11297: ARRAY
11298: PPUSH
11299: CALL_OW 428
11303: PPUSH
11304: CALL_OW 146
// end ; continue ;
11308: GO 10517
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
11310: LD_VAR 0 10
11314: PUSH
11315: LD_INT 1
11317: ARRAY
11318: PUSH
11319: LD_INT 1
11321: ARRAY
11322: PUSH
11323: LD_INT 7
11325: PUSH
11326: LD_INT 8
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: IN
11333: IFFALSE 11443
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
11335: LD_VAR 0 10
11339: PUSH
11340: LD_INT 1
11342: ARRAY
11343: PUSH
11344: LD_INT 2
11346: ARRAY
11347: PPUSH
11348: LD_VAR 0 10
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PUSH
11357: LD_INT 3
11359: ARRAY
11360: PPUSH
11361: CALL_OW 428
11365: IFFALSE 11391
11367: PUSH
11368: LD_VAR 0 35
11372: PPUSH
11373: LD_VAR 0 10
11377: PUSH
11378: LD_INT 1
11380: ARRAY
11381: PUSH
11382: LD_INT 1
11384: ARRAY
11385: PPUSH
11386: CALL 64345 0 2
11390: AND
11391: IFFALSE 11441
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
11393: LD_VAR 0 10
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PUSH
11402: LD_INT 2
11404: ARRAY
11405: PPUSH
11406: LD_VAR 0 10
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PUSH
11415: LD_INT 3
11417: ARRAY
11418: PPUSH
11419: CALL_OW 428
11423: PPUSH
11424: LD_VAR 0 10
11428: PUSH
11429: LD_INT 1
11431: ARRAY
11432: PUSH
11433: LD_INT 5
11435: ARRAY
11436: PPUSH
11437: CALL_OW 147
// end ; continue ;
11441: GO 10517
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
11443: LD_VAR 0 10
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PUSH
11456: LD_INT 32
11458: PUSH
11459: LD_INT 33
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: IN
11466: IFFALSE 11542
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
11468: LD_VAR 0 10
11472: PUSH
11473: LD_INT 1
11475: ARRAY
11476: PUSH
11477: LD_INT 2
11479: ARRAY
11480: PPUSH
11481: LD_VAR 0 10
11485: PUSH
11486: LD_INT 1
11488: ARRAY
11489: PUSH
11490: LD_INT 3
11492: ARRAY
11493: PPUSH
11494: CALL_OW 428
11498: IFFALSE 11542
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
11500: LD_VAR 0 15
11504: PPUSH
11505: LD_VAR 0 10
11509: PUSH
11510: LD_INT 1
11512: ARRAY
11513: PUSH
11514: LD_INT 2
11516: ARRAY
11517: PPUSH
11518: LD_VAR 0 10
11522: PUSH
11523: LD_INT 1
11525: ARRAY
11526: PUSH
11527: LD_INT 3
11529: ARRAY
11530: PPUSH
11531: CALL_OW 428
11535: PPUSH
11536: CALL_OW 167
// continue ;
11540: GO 10517
// end ; end ; if not HasTask ( i ) then
11542: LD_VAR 0 15
11546: PPUSH
11547: CALL_OW 314
11551: NOT
11552: IFFALSE 11615
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
11554: LD_VAR 0 15
11558: PPUSH
11559: LD_VAR 0 10
11563: PUSH
11564: LD_INT 1
11566: ARRAY
11567: PUSH
11568: LD_INT 1
11570: ARRAY
11571: PPUSH
11572: LD_VAR 0 10
11576: PUSH
11577: LD_INT 1
11579: ARRAY
11580: PUSH
11581: LD_INT 2
11583: ARRAY
11584: PPUSH
11585: LD_VAR 0 10
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PUSH
11594: LD_INT 3
11596: ARRAY
11597: PPUSH
11598: LD_VAR 0 10
11602: PUSH
11603: LD_INT 1
11605: ARRAY
11606: PUSH
11607: LD_INT 4
11609: ARRAY
11610: PPUSH
11611: CALL_OW 145
// end ; if tag = tCrates then
11615: LD_VAR 0 21
11619: PUSH
11620: LD_INT 2
11622: EQUAL
11623: IFFALSE 11830
// begin cr := GetListOfCratesInArea ( area ) ;
11625: LD_ADDR_VAR 0 23
11629: PUSH
11630: LD_VAR 0 2
11634: PPUSH
11635: CALL_OW 435
11639: ST_TO_ADDR
// if cratesArea then
11640: LD_VAR 0 3
11644: IFFALSE 11667
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
11646: LD_ADDR_VAR 0 23
11650: PUSH
11651: LD_VAR 0 23
11655: PUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: CALL_OW 435
11665: UNION
11666: ST_TO_ADDR
// if IsInUnit ( i ) then
11667: LD_VAR 0 15
11671: PPUSH
11672: CALL_OW 310
11676: IFFALSE 11689
// begin ComExitBuilding ( i ) ;
11678: LD_VAR 0 15
11682: PPUSH
11683: CALL_OW 122
// continue ;
11687: GO 10517
// end ; if not cr then
11689: LD_VAR 0 23
11693: NOT
11694: IFFALSE 11710
// begin SetTag ( i , 0 ) ;
11696: LD_VAR 0 15
11700: PPUSH
11701: LD_INT 0
11703: PPUSH
11704: CALL_OW 109
// continue ;
11708: GO 10517
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) and ValidHex ( cr [ 1 ] , cr [ 2 ] ) then
11710: LD_VAR 0 15
11714: PPUSH
11715: CALL_OW 314
11719: NOT
11720: IFFALSE 11775
11722: PUSH
11723: LD_INT 81
11725: PUSH
11726: LD_VAR 0 1
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 92
11737: PUSH
11738: LD_VAR 0 23
11742: PUSH
11743: LD_INT 1
11745: ARRAY
11746: PUSH
11747: LD_VAR 0 23
11751: PUSH
11752: LD_INT 2
11754: ARRAY
11755: PUSH
11756: LD_INT 12
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 69
11773: NOT
11774: AND
11775: IFFALSE 11801
11777: PUSH
11778: LD_VAR 0 23
11782: PUSH
11783: LD_INT 1
11785: ARRAY
11786: PPUSH
11787: LD_VAR 0 23
11791: PUSH
11792: LD_INT 2
11794: ARRAY
11795: PPUSH
11796: CALL_OW 488
11800: AND
11801: IFFALSE 11830
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
11803: LD_VAR 0 15
11807: PPUSH
11808: LD_VAR 0 23
11812: PUSH
11813: LD_INT 1
11815: ARRAY
11816: PPUSH
11817: LD_VAR 0 23
11821: PUSH
11822: LD_INT 2
11824: ARRAY
11825: PPUSH
11826: CALL_OW 117
// end ; end ;
11830: GO 10517
11832: POP
11833: POP
// end ; if vehicles then
11834: LD_VAR 0 7
11838: IFFALSE 12900
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
11840: LD_ADDR_VAR 0 7
11844: PUSH
11845: LD_VAR 0 7
11849: PPUSH
11850: LD_INT 3
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_INT 52
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 34
11868: PUSH
11869: LD_INT 51
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 34
11878: PUSH
11879: LD_INT 13
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 34
11888: PUSH
11889: LD_INT 12
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 50
11909: PUSH
11910: EMPTY
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: ST_TO_ADDR
// if vehicles then
11922: LD_VAR 0 7
11926: IFFALSE 12900
// begin for i in vehicles do
11928: LD_ADDR_VAR 0 15
11932: PUSH
11933: LD_VAR 0 7
11937: PUSH
11938: FOR_IN
11939: IFFALSE 12898
// begin tag := GetTag ( i ) ;
11941: LD_ADDR_VAR 0 21
11945: PUSH
11946: LD_VAR 0 15
11950: PPUSH
11951: CALL_OW 110
11955: ST_TO_ADDR
// if not tag then
11956: LD_VAR 0 21
11960: NOT
11961: IFFALSE 12098
// begin if GetControl ( i ) = control_manual then
11963: LD_VAR 0 15
11967: PPUSH
11968: CALL_OW 263
11972: PUSH
11973: LD_INT 1
11975: EQUAL
11976: IFFALSE 12084
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
11978: LD_ADDR_VAR 0 26
11982: PUSH
11983: LD_VAR 0 20
11987: PPUSH
11988: LD_INT 120
11990: PUSH
11991: LD_INT 7
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 72
12002: ST_TO_ADDR
// if not drivers then
12003: LD_VAR 0 26
12007: NOT
12008: IFFALSE 12064
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
12010: LD_ADDR_VAR 0 26
12014: PUSH
12015: LD_VAR 0 20
12019: PPUSH
12020: LD_INT 3
12022: PUSH
12023: LD_INT 120
12025: PUSH
12026: LD_INT 7
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 72
12041: ST_TO_ADDR
// if drivers then
12042: LD_VAR 0 26
12046: IFFALSE 12064
// begin SetTag ( drivers [ 1 ] , tMech ) ;
12048: LD_VAR 0 26
12052: PUSH
12053: LD_INT 1
12055: ARRAY
12056: PPUSH
12057: LD_INT 7
12059: PPUSH
12060: CALL_OW 109
// end ; end ; if drivers then
12064: LD_VAR 0 26
12068: IFFALSE 12082
// SetTag ( i , tBusy ) ;
12070: LD_VAR 0 15
12074: PPUSH
12075: LD_INT 8
12077: PPUSH
12078: CALL_OW 109
// continue ;
12082: GO 11938
// end ; SetTag ( i , tBusy ) ;
12084: LD_VAR 0 15
12088: PPUSH
12089: LD_INT 8
12091: PPUSH
12092: CALL_OW 109
// end else
12096: GO 12896
// if tag = tBusy then
12098: LD_VAR 0 21
12102: PUSH
12103: LD_INT 8
12105: EQUAL
12106: IFFALSE 12361
// begin if GetLives ( i ) = 1000 then
12108: LD_VAR 0 15
12112: PPUSH
12113: CALL_OW 256
12117: PUSH
12118: LD_INT 1000
12120: EQUAL
12121: IFFALSE 12359
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
12123: LD_VAR 0 15
12127: PPUSH
12128: CALL_OW 263
12132: PUSH
12133: LD_INT 1
12135: EQUAL
12136: IFFALSE 12150
12138: PUSH
12139: LD_VAR 0 15
12143: PPUSH
12144: CALL_OW 311
12148: NOT
12149: AND
12150: IFFALSE 12327
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
12152: LD_ADDR_VAR 0 26
12156: PUSH
12157: LD_VAR 0 20
12161: PPUSH
12162: LD_INT 120
12164: PUSH
12165: LD_INT 7
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 72
12176: ST_TO_ADDR
// if not drivers then
12177: LD_VAR 0 26
12181: NOT
12182: IFFALSE 12198
// begin SetTag ( i , 0 ) ;
12184: LD_VAR 0 15
12188: PPUSH
12189: LD_INT 0
12191: PPUSH
12192: CALL_OW 109
// continue ;
12196: GO 11938
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
12198: LD_VAR 0 26
12202: PUSH
12203: LD_INT 1
12205: ARRAY
12206: PPUSH
12207: CALL_OW 310
12211: IFFALSE 12229
12213: PUSH
12214: LD_VAR 0 26
12218: PUSH
12219: LD_INT 1
12221: ARRAY
12222: PPUSH
12223: CALL 57830 0 1
12227: NOT
12228: AND
12229: IFFALSE 12244
// ComExitBuilding ( drivers [ 1 ] ) ;
12231: LD_VAR 0 26
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PPUSH
12240: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
12244: LD_VAR 0 7
12248: PPUSH
12249: LD_INT 120
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PPUSH
12259: CALL_OW 72
12263: IFFALSE 12281
12265: PUSH
12266: LD_VAR 0 26
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PPUSH
12275: CALL_OW 314
12279: NOT
12280: AND
12281: IFTRUE 12305
12283: PUSH
12284: LD_VAR 0 7
12288: PPUSH
12289: LD_INT 120
12291: PUSH
12292: LD_INT 3
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 72
12303: NOT
12304: OR
12305: IFFALSE 12325
// ComEnterUnit ( drivers [ 1 ] , i ) ;
12307: LD_VAR 0 26
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 15
12320: PPUSH
12321: CALL_OW 120
// continue ;
12325: GO 11938
// end ; if allowToPatrol then
12327: LD_VAR 0 13
12331: IFFALSE 12347
// SetTag ( i , tPatrol ) else
12333: LD_VAR 0 15
12337: PPUSH
12338: LD_INT 15
12340: PPUSH
12341: CALL_OW 109
12345: GO 12359
// SetTag ( i , tAttack ) ;
12347: LD_VAR 0 15
12351: PPUSH
12352: LD_INT 13
12354: PPUSH
12355: CALL_OW 109
// end ; end else
12359: GO 12896
// if tag = tPatrol then
12361: LD_VAR 0 21
12365: PUSH
12366: LD_INT 15
12368: EQUAL
12369: IFFALSE 12563
// begin if GetLives ( i ) < 650 then
12371: LD_VAR 0 15
12375: PPUSH
12376: CALL_OW 256
12380: PUSH
12381: LD_INT 650
12383: LESS
12384: IFFALSE 12427
// begin SetTag ( i , tVehRepair ) ;
12386: LD_VAR 0 15
12390: PPUSH
12391: LD_INT 9
12393: PPUSH
12394: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12398: LD_VAR 0 15
12402: PPUSH
12403: LD_VAR 0 12
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PPUSH
12412: LD_VAR 0 12
12416: PUSH
12417: LD_INT 2
12419: ARRAY
12420: PPUSH
12421: CALL_OW 111
// continue ;
12425: GO 11938
// end ; if GetEngine ( i ) = engine_combustion then
12427: LD_VAR 0 15
12431: PPUSH
12432: CALL_OW 262
12436: PUSH
12437: LD_INT 1
12439: EQUAL
12440: IFFALSE 12487
// if GetFuel ( i ) < 30 then
12442: LD_VAR 0 15
12446: PPUSH
12447: CALL_OW 261
12451: PUSH
12452: LD_INT 30
12454: LESS
12455: IFFALSE 12487
// begin ComMoveUnit ( i , depot ) ;
12457: LD_VAR 0 15
12461: PPUSH
12462: LD_VAR 0 35
12466: PPUSH
12467: CALL_OW 112
// AddComRefuel ( i , depot ) ;
12471: LD_VAR 0 15
12475: PPUSH
12476: LD_VAR 0 35
12480: PPUSH
12481: CALL_OW 210
// continue ;
12485: GO 11938
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
12487: LD_VAR 0 15
12491: PPUSH
12492: LD_VAR 0 13
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 13
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: PPUSH
12510: CALL_OW 297
12514: PUSH
12515: LD_INT 12
12517: GREATER
12518: IFFALSE 12532
12520: PUSH
12521: LD_VAR 0 15
12525: PPUSH
12526: CALL_OW 314
12530: NOT
12531: AND
12532: IFFALSE 12561
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
12534: LD_VAR 0 15
12538: PPUSH
12539: LD_VAR 0 13
12543: PUSH
12544: LD_INT 1
12546: ARRAY
12547: PPUSH
12548: LD_VAR 0 13
12552: PUSH
12553: LD_INT 2
12555: ARRAY
12556: PPUSH
12557: CALL_OW 114
// end else
12561: GO 12896
// if tag = tAttack then
12563: LD_VAR 0 21
12567: PUSH
12568: LD_INT 13
12570: EQUAL
12571: IFFALSE 12753
// begin enemy := enemyInBase ;
12573: LD_ADDR_VAR 0 28
12577: PUSH
12578: LD_VAR 0 29
12582: ST_TO_ADDR
// if not enemy then
12583: LD_VAR 0 28
12587: NOT
12588: IFFALSE 12600
// enemy := enemyOuterBase ;
12590: LD_ADDR_VAR 0 28
12594: PUSH
12595: LD_VAR 0 30
12599: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
12600: LD_VAR 0 28
12604: NOT
12605: IFFALSE 12640
12607: PUSH
12608: LD_VAR 0 15
12612: PPUSH
12613: LD_VAR 0 12
12617: PUSH
12618: LD_INT 1
12620: ARRAY
12621: PPUSH
12622: LD_VAR 0 12
12626: PUSH
12627: LD_INT 2
12629: ARRAY
12630: PPUSH
12631: CALL_OW 297
12635: PUSH
12636: LD_INT 10
12638: GREATER
12639: AND
12640: IFFALSE 12671
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12642: LD_VAR 0 15
12646: PPUSH
12647: LD_VAR 0 12
12651: PUSH
12652: LD_INT 1
12654: ARRAY
12655: PPUSH
12656: LD_VAR 0 12
12660: PUSH
12661: LD_INT 2
12663: ARRAY
12664: PPUSH
12665: CALL_OW 111
// continue ;
12669: GO 11938
// end ; if GetLives ( i ) < 650 then
12671: LD_VAR 0 15
12675: PPUSH
12676: CALL_OW 256
12680: PUSH
12681: LD_INT 650
12683: LESS
12684: IFFALSE 12727
// begin SetTag ( i , tVehRepair ) ;
12686: LD_VAR 0 15
12690: PPUSH
12691: LD_INT 9
12693: PPUSH
12694: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12698: LD_VAR 0 15
12702: PPUSH
12703: LD_VAR 0 12
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: LD_VAR 0 12
12716: PUSH
12717: LD_INT 2
12719: ARRAY
12720: PPUSH
12721: CALL_OW 111
// continue ;
12725: GO 11938
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12727: LD_VAR 0 15
12731: PPUSH
12732: LD_VAR 0 28
12736: PPUSH
12737: LD_VAR 0 15
12741: PPUSH
12742: CALL_OW 74
12746: PPUSH
12747: CALL_OW 115
// end else
12751: GO 12896
// if tag = tVehRepair then
12753: LD_VAR 0 21
12757: PUSH
12758: LD_INT 9
12760: EQUAL
12761: IFFALSE 12896
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
12763: LD_VAR 0 15
12767: PPUSH
12768: LD_VAR 0 12
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: PPUSH
12777: LD_VAR 0 12
12781: PUSH
12782: LD_INT 2
12784: ARRAY
12785: PPUSH
12786: CALL_OW 297
12790: PUSH
12791: LD_INT 10
12793: GREATER
12794: IFFALSE 12825
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12796: LD_VAR 0 15
12800: PPUSH
12801: LD_VAR 0 12
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: LD_VAR 0 12
12814: PUSH
12815: LD_INT 2
12817: ARRAY
12818: PPUSH
12819: CALL_OW 111
// continue ;
12823: GO 11938
// end ; if GetLives ( i ) = 1000 then
12825: LD_VAR 0 15
12829: PPUSH
12830: CALL_OW 256
12834: PUSH
12835: LD_INT 1000
12837: EQUAL
12838: IFFALSE 12854
// begin SetTag ( i , tBusy ) ;
12840: LD_VAR 0 15
12844: PPUSH
12845: LD_INT 8
12847: PPUSH
12848: CALL_OW 109
// continue ;
12852: GO 11938
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
12854: LD_VAR 0 15
12858: PPUSH
12859: CALL_OW 263
12863: PUSH
12864: LD_INT 1
12866: EQUAL
12867: IFFALSE 12880
12869: PUSH
12870: LD_VAR 0 15
12874: PPUSH
12875: CALL_OW 311
12879: AND
12880: IFFALSE 12896
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
12882: LD_VAR 0 15
12886: PPUSH
12887: CALL_OW 311
12891: PPUSH
12892: CALL 61964 0 1
// end ; end ;
12896: GO 11938
12898: POP
12899: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
12900: LD_ADDR_VAR 0 25
12904: PUSH
12905: LD_VAR 0 6
12909: PPUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 8
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 9
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 50
12962: PUSH
12963: EMPTY
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 72
12974: ST_TO_ADDR
// if sol then
12975: LD_VAR 0 25
12979: IFFALSE 13791
// begin if enemyInBase then
12981: LD_VAR 0 29
12985: IFFALSE 13164
// begin for i in sol do
12987: LD_ADDR_VAR 0 15
12991: PUSH
12992: LD_VAR 0 25
12996: PUSH
12997: FOR_IN
12998: IFFALSE 13160
// begin tw := IsInUnit ( i ) ;
13000: LD_ADDR_VAR 0 22
13004: PUSH
13005: LD_VAR 0 15
13009: PPUSH
13010: CALL_OW 310
13014: ST_TO_ADDR
// if tw then
13015: LD_VAR 0 22
13019: IFFALSE 13102
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
13021: LD_VAR 0 22
13025: PUSH
13026: LD_INT 22
13028: PUSH
13029: LD_VAR 0 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 101
13040: PUSH
13041: LD_VAR 0 36
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 30
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 30
13065: PUSH
13066: LD_INT 31
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: IN
13088: NOT
13089: IFFALSE 13100
// ComExitBuilding ( i ) ;
13091: LD_VAR 0 15
13095: PPUSH
13096: CALL_OW 122
// end else
13100: GO 13158
// if IsInArea ( i , area ) then
13102: LD_VAR 0 15
13106: PPUSH
13107: LD_VAR 0 2
13111: PPUSH
13112: CALL_OW 308
13116: IFFALSE 13144
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
13118: LD_VAR 0 15
13122: PPUSH
13123: LD_VAR 0 29
13127: PPUSH
13128: LD_VAR 0 15
13132: PPUSH
13133: CALL_OW 74
13137: PPUSH
13138: CALL_OW 115
13142: GO 13158
// ComMoveToArea ( i , area ) ;
13144: LD_VAR 0 15
13148: PPUSH
13149: LD_VAR 0 2
13153: PPUSH
13154: CALL_OW 113
// end ;
13158: GO 12997
13160: POP
13161: POP
// end else
13162: GO 13791
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
13164: LD_ADDR_VAR 0 31
13168: PUSH
13169: LD_VAR 0 2
13173: PPUSH
13174: LD_INT 3
13176: PUSH
13177: LD_INT 62
13179: PUSH
13180: EMPTY
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: LD_INT 57
13192: PUSH
13193: EMPTY
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 2
13202: PUSH
13203: LD_INT 30
13205: PUSH
13206: LD_INT 32
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 4
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 30
13225: PUSH
13226: LD_INT 5
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 30
13235: PUSH
13236: LD_INT 31
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 70
13259: ST_TO_ADDR
// emptyTowers := [ ] ;
13260: LD_ADDR_VAR 0 33
13264: PUSH
13265: EMPTY
13266: ST_TO_ADDR
// if empty then
13267: LD_VAR 0 31
13271: IFFALSE 13337
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
13273: LD_ADDR_VAR 0 33
13277: PUSH
13278: LD_VAR 0 31
13282: PPUSH
13283: LD_INT 3
13285: PUSH
13286: LD_INT 120
13288: PUSH
13289: LD_INT 10
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 30
13305: PUSH
13306: LD_INT 32
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 30
13315: PUSH
13316: LD_INT 33
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 72
13336: ST_TO_ADDR
// for i in sol do
13337: LD_ADDR_VAR 0 15
13341: PUSH
13342: LD_VAR 0 25
13346: PUSH
13347: FOR_IN
13348: IFFALSE 13789
// begin tag := GetTag ( i ) ;
13350: LD_ADDR_VAR 0 21
13354: PUSH
13355: LD_VAR 0 15
13359: PPUSH
13360: CALL_OW 110
13364: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
13365: LD_VAR 0 15
13369: PPUSH
13370: CALL_OW 256
13374: PUSH
13375: LD_INT 1000
13377: LESS
13378: IFFALSE 13390
13380: PUSH
13381: LD_VAR 0 21
13385: PUSH
13386: LD_INT 1
13388: NONEQUAL
13389: AND
13390: IFFALSE 13442
// begin SetTag ( i , tHeal ) ;
13392: LD_VAR 0 15
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13404: LD_VAR 0 15
13408: PPUSH
13409: LD_VAR 0 11
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_VAR 0 11
13422: PUSH
13423: LD_INT 2
13425: ARRAY
13426: PPUSH
13427: CALL_OW 111
// AddComHold ( i ) ;
13431: LD_VAR 0 15
13435: PPUSH
13436: CALL_OW 200
// continue ;
13440: GO 13347
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
13442: LD_VAR 0 15
13446: PPUSH
13447: CALL_OW 256
13451: PUSH
13452: LD_INT 1000
13454: EQUAL
13455: IFFALSE 13467
13457: PUSH
13458: LD_VAR 0 21
13462: PUSH
13463: LD_INT 1
13465: EQUAL
13466: AND
13467: IFFALSE 13483
// begin SetTag ( i , 0 ) ;
13469: LD_VAR 0 15
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: CALL_OW 109
// continue ;
13481: GO 13347
// end ; if HasTask ( i ) then
13483: LD_VAR 0 15
13487: PPUSH
13488: CALL_OW 314
13492: IFFALSE 13496
// continue ;
13494: GO 13347
// if not IsInUnit ( i ) and not tag and empty then
13496: LD_VAR 0 15
13500: PPUSH
13501: CALL_OW 310
13505: NOT
13506: IFFALSE 13515
13508: PUSH
13509: LD_VAR 0 21
13513: NOT
13514: AND
13515: IFFALSE 13523
13517: PUSH
13518: LD_VAR 0 31
13522: AND
13523: IFFALSE 13563
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
13525: LD_VAR 0 15
13529: PPUSH
13530: LD_VAR 0 31
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PPUSH
13539: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
13543: LD_ADDR_VAR 0 31
13547: PUSH
13548: LD_VAR 0 31
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: CALL_OW 3
13560: ST_TO_ADDR
// continue ;
13561: GO 13347
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
13563: LD_VAR 0 15
13567: PPUSH
13568: CALL_OW 310
13572: IFFALSE 13581
13574: PUSH
13575: LD_VAR 0 21
13579: NOT
13580: AND
13581: IFFALSE 13589
13583: PUSH
13584: LD_VAR 0 33
13588: AND
13589: IFFALSE 13787
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
13591: LD_VAR 0 15
13595: PPUSH
13596: CALL_OW 310
13600: PPUSH
13601: CALL_OW 266
13605: PUSH
13606: LD_INT 32
13608: PUSH
13609: LD_INT 31
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: IN
13616: IFFALSE 13620
// continue ;
13618: GO 13347
// SetTag ( i , tTower ) ;
13620: LD_VAR 0 15
13624: PPUSH
13625: LD_INT 10
13627: PPUSH
13628: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
13632: LD_VAR 0 33
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_INT 10
13643: PPUSH
13644: CALL_OW 109
// ComExit ( i ) ;
13648: LD_VAR 0 15
13652: PPUSH
13653: CALL 60648 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
13657: LD_VAR 0 15
13661: PPUSH
13662: LD_VAR 0 33
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
13675: LD_INT 35
13677: PPUSH
13678: CALL_OW 67
// if not HasTask ( i ) then
13682: LD_VAR 0 15
13686: PPUSH
13687: CALL_OW 314
13691: NOT
13692: IFFALSE 13712
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
13694: LD_VAR 0 15
13698: PPUSH
13699: LD_VAR 0 33
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
13712: LD_VAR 0 33
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: CALL 24296 0 1
13725: NOT
13726: IFFALSE 13730
// break ;
13728: GO 13755
// until IsInUnit ( i ) or not IsOk ( i ) ;
13730: LD_VAR 0 15
13734: PPUSH
13735: CALL_OW 310
13739: IFTRUE 13753
13741: PUSH
13742: LD_VAR 0 15
13746: PPUSH
13747: CALL_OW 302
13751: NOT
13752: OR
13753: IFFALSE 13675
// SetTag ( i , 0 ) ;
13755: LD_VAR 0 15
13759: PPUSH
13760: LD_INT 0
13762: PPUSH
13763: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
13767: LD_VAR 0 33
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PPUSH
13776: LD_INT 0
13778: PPUSH
13779: CALL_OW 109
// exit ;
13783: POP
13784: POP
13785: GO 13791
// end ; end ;
13787: GO 13347
13789: POP
13790: POP
// end ; end ; end ; end_of_file
13791: LD_VAR 0 14
13795: RET
// export function Action ; var i , c , tmp ; begin
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
// InGameOn ;
13802: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
13806: LD_INT 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
13816: LD_EXP 33
13820: PPUSH
13821: LD_EXP 45
13825: PPUSH
13826: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
13830: LD_EXP 29
13834: PPUSH
13835: LD_EXP 45
13839: PPUSH
13840: CALL_OW 52
// if Belkov then
13844: LD_EXP 31
13848: IFFALSE 13864
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
13850: LD_EXP 31
13854: PPUSH
13855: LD_EXP 45
13859: PPUSH
13860: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
13864: LD_EXP 35
13868: PPUSH
13869: LD_EXP 45
13873: PPUSH
13874: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
13878: LD_INT 159
13880: PPUSH
13881: LD_INT 103
13883: PPUSH
13884: CALL_OW 86
// wait ( 0 0$0.3 ) ;
13888: LD_INT 10
13890: PPUSH
13891: CALL_OW 67
// if not Belkov then
13895: LD_EXP 31
13899: NOT
13900: IFFALSE 13997
// begin Say ( Kurin , D1a-Kur-1 ) ;
13902: LD_EXP 33
13906: PPUSH
13907: LD_STRING D1a-Kur-1
13909: PPUSH
13910: CALL_OW 88
// if not belkovSaved then
13914: LD_EXP 6
13918: NOT
13919: IFFALSE 13945
// begin Say ( Burlak , D1a-Bur-1 ) ;
13921: LD_EXP 29
13925: PPUSH
13926: LD_STRING D1a-Bur-1
13928: PPUSH
13929: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
13933: LD_EXP 33
13937: PPUSH
13938: LD_STRING D1a-Kur-2
13940: PPUSH
13941: CALL_OW 88
// end ; if wasSelfish then
13945: LD_EXP 4
13949: IFFALSE 13963
// Say ( Kurin , D1a-Kur-2a ) ;
13951: LD_EXP 33
13955: PPUSH
13956: LD_STRING D1a-Kur-2a
13958: PPUSH
13959: CALL_OW 88
// hasProblem := true ;
13963: LD_ADDR_EXP 5
13967: PUSH
13968: LD_INT 1
13970: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
13971: LD_EXP 33
13975: PPUSH
13976: LD_STRING D1a-Kur-2b
13978: PPUSH
13979: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
13983: LD_EXP 29
13987: PPUSH
13988: LD_STRING D1a-Bur-2
13990: PPUSH
13991: CALL_OW 88
// end else
13995: GO 14033
// begin Say ( Kurin , D1b-Kur-1 ) ;
13997: LD_EXP 33
14001: PPUSH
14002: LD_STRING D1b-Kur-1
14004: PPUSH
14005: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
14009: LD_EXP 31
14013: PPUSH
14014: LD_STRING D1b-Bel-1
14016: PPUSH
14017: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
14021: LD_EXP 33
14025: PPUSH
14026: LD_STRING D1b-Kur-2
14028: PPUSH
14029: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
14033: LD_EXP 33
14037: PPUSH
14038: LD_STRING D2-Kur-1
14040: PPUSH
14041: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
14045: LD_EXP 29
14049: PPUSH
14050: LD_STRING D2-Bur-1
14052: PPUSH
14053: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
14057: LD_EXP 33
14061: PPUSH
14062: LD_STRING D2-Kur-2
14064: PPUSH
14065: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
14069: LD_EXP 29
14073: PPUSH
14074: LD_STRING D2-Bur-2
14076: PPUSH
14077: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
14081: LD_EXP 33
14085: PPUSH
14086: LD_STRING D2-Kur-3
14088: PPUSH
14089: CALL_OW 88
// wait ( 0 0$0.5 ) ;
14093: LD_INT 18
14095: PPUSH
14096: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
14100: LD_EXP 35
14104: PPUSH
14105: LD_STRING D2-Pop-3
14107: PPUSH
14108: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
14112: LD_EXP 33
14116: PPUSH
14117: LD_STRING D2-Kur-4
14119: PPUSH
14120: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
14124: LD_EXP 29
14128: PPUSH
14129: LD_STRING D2-Bur-4
14131: PPUSH
14132: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
14136: LD_EXP 33
14140: PPUSH
14141: LD_STRING D2-Kur-5
14143: PPUSH
14144: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
14148: LD_EXP 29
14152: PPUSH
14153: LD_STRING D2-Bur-5
14155: PPUSH
14156: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
14160: LD_EXP 33
14164: PPUSH
14165: LD_STRING D2-Kur-6
14167: PPUSH
14168: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 9 , 8 , 8 , 7 ] [ Difficulty ] , [ 9 , 8 , 8 , 7 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
14172: LD_ADDR_EXP 39
14176: PUSH
14177: LD_STRING 1
14179: PPUSH
14180: LD_INT 9
14182: PUSH
14183: LD_INT 8
14185: PUSH
14186: LD_INT 8
14188: PUSH
14189: LD_INT 7
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: LD_OWVAR 67
14202: ARRAY
14203: PPUSH
14204: LD_INT 9
14206: PUSH
14207: LD_INT 8
14209: PUSH
14210: LD_INT 8
14212: PUSH
14213: LD_INT 7
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_OWVAR 67
14226: ARRAY
14227: PPUSH
14228: LD_INT -5
14230: PUSH
14231: LD_EXP 29
14235: PUSH
14236: LD_INT -3
14238: PUSH
14239: LD_INT -5
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: LD_EXP 31
14252: ADD
14253: PUSH
14254: LD_EXP 30
14258: ADD
14259: PUSH
14260: LD_EXP 32
14264: ADD
14265: PUSH
14266: LD_EXP 34
14270: ADD
14271: PUSH
14272: LD_EXP 43
14276: ADD
14277: PUSH
14278: LD_INT -2
14280: PUSH
14281: LD_INT -4
14283: PUSH
14284: LD_INT -6
14286: PUSH
14287: LD_EXP 33
14291: PUSH
14292: LD_EXP 35
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: ADD
14304: PUSH
14305: LD_INT -3
14307: PUSH
14308: LD_INT -5
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: ADD
14315: PUSH
14316: LD_EXP 42
14320: ADD
14321: PPUSH
14322: LD_INT 2
14324: PUSH
14325: LD_INT 1
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 4
14334: PUSH
14335: LD_INT 1
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: LD_INT 0
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PPUSH
14368: CALL_OW 42
14372: ST_TO_ADDR
// stop_talking := true ;
14373: LD_ADDR_OWVAR 56
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
14381: LD_EXP 29
14385: PPUSH
14386: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
14390: LD_EXP 29
14394: PPUSH
14395: LD_INT 123
14397: PPUSH
14398: LD_INT 98
14400: PPUSH
14401: CALL_OW 171
// for i in beriaBaseSquad do
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_EXP 39
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14491
// begin SetSide ( i , 3 ) ;
14418: LD_VAR 0 2
14422: PPUSH
14423: LD_INT 3
14425: PPUSH
14426: CALL_OW 235
// if not IsPlaced ( i ) then
14430: LD_VAR 0 2
14434: PPUSH
14435: CALL_OW 305
14439: NOT
14440: IFFALSE 14465
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
14442: LD_VAR 0 2
14446: PPUSH
14447: LD_INT 112
14449: PPUSH
14450: LD_INT 98
14452: PPUSH
14453: LD_INT 3
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 50
14463: GO 14489
// begin ComExit ( i ) ;
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL 60648 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
14474: LD_VAR 0 2
14478: PPUSH
14479: LD_INT 123
14481: PPUSH
14482: LD_INT 98
14484: PPUSH
14485: CALL_OW 171
// end ; end ;
14489: GO 14415
14491: POP
14492: POP
// stop_talking := false ;
14493: LD_ADDR_OWVAR 56
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14501: LD_INT 70
14503: PPUSH
14504: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
14508: LD_INT 110
14510: PPUSH
14511: LD_INT 97
14513: PPUSH
14514: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
14518: LD_EXP 31
14522: IFFALSE 14537
14524: PUSH
14525: LD_EXP 31
14529: PUSH
14530: LD_EXP 39
14534: IN
14535: NOT
14536: AND
14537: IFFALSE 14559
// popovTeam := Join ( popovTeam , Belkov ) ;
14539: LD_ADDR_EXP 44
14543: PUSH
14544: LD_EXP 44
14548: PPUSH
14549: LD_EXP 31
14553: PPUSH
14554: CALL 60250 0 2
14558: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
14559: LD_EXP 30
14563: IFFALSE 14578
14565: PUSH
14566: LD_EXP 30
14570: PUSH
14571: LD_EXP 39
14575: IN
14576: NOT
14577: AND
14578: IFFALSE 14600
// popovTeam := Join ( popovTeam , Gnyevko ) ;
14580: LD_ADDR_EXP 44
14584: PUSH
14585: LD_EXP 44
14589: PPUSH
14590: LD_EXP 30
14594: PPUSH
14595: CALL 60250 0 2
14599: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
14600: LD_EXP 32
14604: IFFALSE 14619
14606: PUSH
14607: LD_EXP 32
14611: PUSH
14612: LD_EXP 39
14616: IN
14617: NOT
14618: AND
14619: IFFALSE 14641
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
14621: LD_ADDR_EXP 44
14625: PUSH
14626: LD_EXP 44
14630: PPUSH
14631: LD_EXP 32
14635: PPUSH
14636: CALL 60250 0 2
14640: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
14641: LD_EXP 34
14645: IFFALSE 14660
14647: PUSH
14648: LD_EXP 34
14652: PUSH
14653: LD_EXP 39
14657: IN
14658: NOT
14659: AND
14660: IFFALSE 14682
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
14662: LD_ADDR_EXP 44
14666: PUSH
14667: LD_EXP 44
14671: PPUSH
14672: LD_EXP 34
14676: PPUSH
14677: CALL 60250 0 2
14681: ST_TO_ADDR
// for i in beriaTeam do
14682: LD_ADDR_VAR 0 2
14686: PUSH
14687: LD_EXP 43
14691: PUSH
14692: FOR_IN
14693: IFFALSE 14730
// if not i in beriaBaseSquad then
14695: LD_VAR 0 2
14699: PUSH
14700: LD_EXP 39
14704: IN
14705: NOT
14706: IFFALSE 14728
// popovTeam := Join ( popovTeam , i ) ;
14708: LD_ADDR_EXP 44
14712: PUSH
14713: LD_EXP 44
14717: PPUSH
14718: LD_VAR 0 2
14722: PPUSH
14723: CALL 60250 0 2
14727: ST_TO_ADDR
14728: GO 14692
14730: POP
14731: POP
// if popovTeam < 3 then
14732: LD_EXP 44
14736: PUSH
14737: LD_INT 3
14739: LESS
14740: IFFALSE 14818
// for i := Count ( popovTeam ) to 3 do
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: DOUBLE
14748: LD_EXP 44
14752: PPUSH
14753: CALL 24274 0 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_INT 3
14761: PUSH
14762: FOR_TO
14763: IFFALSE 14816
// begin uc_side := 6 ;
14765: LD_ADDR_OWVAR 20
14769: PUSH
14770: LD_INT 6
14772: ST_TO_ADDR
// uc_nation := nation_russian ;
14773: LD_ADDR_OWVAR 21
14777: PUSH
14778: LD_INT 3
14780: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
14781: LD_INT 0
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: LD_INT 2
14789: PPUSH
14790: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
14794: LD_ADDR_EXP 44
14798: PUSH
14799: LD_EXP 44
14803: PPUSH
14804: CALL_OW 44
14808: PPUSH
14809: CALL 60250 0 2
14813: ST_TO_ADDR
// end ;
14814: GO 14762
14816: POP
14817: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
14818: LD_EXP 44
14822: PPUSH
14823: LD_INT 25
14825: PUSH
14826: LD_INT 4
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 72
14837: NOT
14838: IFFALSE 14856
// SetClass ( popovTeam [ 1 ] , 4 ) ;
14840: LD_EXP 44
14844: PUSH
14845: LD_INT 1
14847: ARRAY
14848: PPUSH
14849: LD_INT 4
14851: PPUSH
14852: CALL_OW 336
// for i in popovTeam do
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_EXP 44
14865: PUSH
14866: FOR_IN
14867: IFFALSE 14970
// begin if not GetClass ( i ) in [ 1 , 4 ] then
14869: LD_VAR 0 2
14873: PPUSH
14874: CALL_OW 257
14878: PUSH
14879: LD_INT 1
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: IN
14889: NOT
14890: IFFALSE 14904
// SetClass ( i , class_soldier ) ;
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 336
// if not IsPlaced ( i ) then
14904: LD_VAR 0 2
14908: PPUSH
14909: CALL_OW 305
14913: NOT
14914: IFFALSE 14939
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
14916: LD_VAR 0 2
14920: PPUSH
14921: LD_INT 161
14923: PPUSH
14924: LD_INT 107
14926: PPUSH
14927: LD_INT 3
14929: PPUSH
14930: LD_INT 0
14932: PPUSH
14933: CALL_OW 50
14937: GO 14959
// if IsInUnit ( i ) then
14939: LD_VAR 0 2
14943: PPUSH
14944: CALL_OW 310
14948: IFFALSE 14959
// ComExitBuilding ( i ) ;
14950: LD_VAR 0 2
14954: PPUSH
14955: CALL_OW 122
// AddComHold ( i ) ;
14959: LD_VAR 0 2
14963: PPUSH
14964: CALL_OW 200
// end ;
14968: GO 14866
14970: POP
14971: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
14972: LD_ADDR_EXP 38
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_INT 6
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: PUSH
15006: LD_EXP 33
15010: PUSH
15011: LD_EXP 35
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_EXP 44
15024: ADD
15025: DIFF
15026: ST_TO_ADDR
// for i in kirovBaseSquad do
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_EXP 38
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15169
// begin tmp := IsInUnit ( i ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: CALL_OW 310
15054: ST_TO_ADDR
// if not tmp then
15055: LD_VAR 0 4
15059: NOT
15060: IFFALSE 15064
// continue ;
15062: GO 15037
// case GetBType ( tmp ) of b_workshop :
15064: LD_VAR 0 4
15068: PPUSH
15069: CALL_OW 266
15073: PUSH
15074: LD_INT 2
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15082
15080: GO 15097
15082: POP
// SetClass ( i , class_mechanic ) ; b_lab :
15083: LD_VAR 0 2
15087: PPUSH
15088: LD_INT 3
15090: PPUSH
15091: CALL_OW 336
15095: GO 15167
15097: LD_INT 6
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15120
15105: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_INT 4
15113: PPUSH
15114: CALL_OW 336
15118: GO 15167
15120: LD_INT 4
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15143
15128: POP
// SetClass ( i , class_soldier ) ; b_depot :
15129: LD_VAR 0 2
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 336
15141: GO 15167
15143: LD_INT 0
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15166
15151: POP
// SetClass ( i , class_engineer ) ; end ;
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_INT 2
15159: PPUSH
15160: CALL_OW 336
15164: GO 15167
15166: POP
// end ;
15167: GO 15037
15169: POP
15170: POP
// for c := 1 to 4 do
15171: LD_ADDR_VAR 0 3
15175: PUSH
15176: DOUBLE
15177: LD_INT 1
15179: DEC
15180: ST_TO_ADDR
15181: LD_INT 4
15183: PUSH
15184: FOR_TO
15185: IFFALSE 15276
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
15187: LD_EXP 38
15191: PPUSH
15192: LD_INT 25
15194: PUSH
15195: LD_VAR 0 3
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PPUSH
15204: CALL_OW 72
15208: PUSH
15209: LD_INT 2
15211: LESS
15212: IFFALSE 15274
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
15214: LD_ADDR_VAR 0 4
15218: PUSH
15219: LD_EXP 38
15223: PPUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: CALL 58730 0 2
15233: ST_TO_ADDR
// for i := 1 to 2 do
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_INT 2
15246: PUSH
15247: FOR_TO
15248: IFFALSE 15272
// SetClass ( tmp [ i ] , c ) ;
15250: LD_VAR 0 4
15254: PUSH
15255: LD_VAR 0 2
15259: ARRAY
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: CALL_OW 336
15270: GO 15247
15272: POP
15273: POP
// end ;
15274: GO 15184
15276: POP
15277: POP
// wait ( 0 0$3 ) ;
15278: LD_INT 105
15280: PPUSH
15281: CALL_OW 67
// InGameOff ;
15285: CALL_OW 9
// gameStart := true ;
15289: LD_ADDR_EXP 7
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// Query ( QBriefing ) ;
15297: LD_STRING QBriefing
15299: PPUSH
15300: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
15304: LD_STRING M1
15306: PPUSH
15307: CALL_OW 337
// SaveForQuickRestart ;
15311: CALL_OW 22
// wait ( 0 0$5 ) ;
15315: LD_INT 175
15317: PPUSH
15318: CALL_OW 67
// ComExitBuilding ( Popov ) ;
15322: LD_EXP 35
15326: PPUSH
15327: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
15331: LD_EXP 35
15335: PPUSH
15336: LD_INT 142
15338: PPUSH
15339: LD_INT 64
15341: PPUSH
15342: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
15346: LD_EXP 44
15350: PPUSH
15351: LD_INT 142
15353: PPUSH
15354: LD_INT 64
15356: PPUSH
15357: CALL_OW 171
// AddComFree ( popovTeam ) ;
15361: LD_EXP 44
15365: PPUSH
15366: CALL_OW 199
// wait ( 1 1$00 ) ;
15370: LD_INT 2100
15372: PPUSH
15373: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
15377: LD_EXP 58
15381: PPUSH
15382: LD_INT 50
15384: PUSH
15385: EMPTY
15386: LIST
15387: PPUSH
15388: CALL_OW 72
15392: NOT
15393: IFFALSE 15397
// exit ;
15395: GO 15559
// ComMoveXY ( americanReinforcementsTroops , 27 , 36 ) ;
15397: LD_EXP 58
15401: PPUSH
15402: LD_INT 27
15404: PPUSH
15405: LD_INT 36
15407: PPUSH
15408: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15412: LD_INT 35
15414: PPUSH
15415: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
15419: LD_EXP 58
15423: PPUSH
15424: LD_INT 50
15426: PUSH
15427: EMPTY
15428: LIST
15429: PPUSH
15430: CALL_OW 72
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 15559
// until IsInArea ( americanReinforcementsTroops [ 1 ] , omicronBaseArea ) ;
15439: LD_EXP 58
15443: PUSH
15444: LD_INT 1
15446: ARRAY
15447: PPUSH
15448: LD_INT 18
15450: PPUSH
15451: CALL_OW 308
15455: IFFALSE 15412
// SetSide ( americanReinforcementsTroops [ 1 ] , 1 ) ;
15457: LD_EXP 58
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 235
// omicronTroops := omicronTroops union americanReinforcementsTroops [ 1 ] ;
15473: LD_ADDR_EXP 57
15477: PUSH
15478: LD_EXP 57
15482: PUSH
15483: LD_EXP 58
15487: PUSH
15488: LD_INT 1
15490: ARRAY
15491: UNION
15492: ST_TO_ADDR
// if HexInfo ( 30 , 53 ) and UnitsInside ( HexInfo ( 30 , 53 ) ) = 0 then
15493: LD_INT 30
15495: PPUSH
15496: LD_INT 53
15498: PPUSH
15499: CALL_OW 428
15503: IFFALSE 15526
15505: PUSH
15506: LD_INT 30
15508: PPUSH
15509: LD_INT 53
15511: PPUSH
15512: CALL_OW 428
15516: PPUSH
15517: CALL_OW 313
15521: PUSH
15522: LD_INT 0
15524: EQUAL
15525: AND
15526: IFFALSE 15552
// ComEnterUnit ( americanReinforcementsTroops [ 1 ] , HexInfo ( 30 , 53 ) ) ;
15528: LD_EXP 58
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: LD_INT 30
15539: PPUSH
15540: LD_INT 53
15542: PPUSH
15543: CALL_OW 428
15547: PPUSH
15548: CALL_OW 120
// americanReinforcementsTroops := [ ] ;
15552: LD_ADDR_EXP 58
15556: PUSH
15557: EMPTY
15558: ST_TO_ADDR
// end ;
15559: LD_VAR 0 1
15563: RET
// every 0 0$2 trigger allianceAttacked do
15564: LD_EXP 9
15568: IFFALSE 15607
15570: GO 15572
15572: DISABLE
// begin DialogueOn ;
15573: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
15577: LD_EXP 33
15581: PPUSH
15582: LD_STRING DArestKur
15584: PPUSH
15585: CALL_OW 88
// dwait ( 0 0$1 ) ;
15589: LD_INT 35
15591: PPUSH
15592: CALL_OW 68
// YouLost ( SelfAttack ) ;
15596: LD_STRING SelfAttack
15598: PPUSH
15599: CALL_OW 104
// DialogueOff ;
15603: CALL_OW 7
// end ;
15607: END
// every 0 0$2 trigger youTookCratesFromKirov do
15608: LD_EXP 17
15612: IFFALSE 15675
15614: GO 15616
15616: DISABLE
// begin Query ( QTookCrates ) ;
15617: LD_STRING QTookCrates
15619: PPUSH
15620: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
15624: LD_INT 35
15626: PPUSH
15627: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
15631: LD_EXP 17
15635: PUSH
15636: LD_INT 3
15638: GREATEREQUAL
15639: IFFALSE 15624
// DialogueOn ;
15641: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
15645: LD_EXP 33
15649: PPUSH
15650: LD_STRING DArestKur
15652: PPUSH
15653: CALL_OW 88
// dwait ( 0 0$1 ) ;
15657: LD_INT 35
15659: PPUSH
15660: CALL_OW 68
// YouLost ( TookCrates ) ;
15664: LD_STRING TookCrates
15666: PPUSH
15667: CALL_OW 104
// DialogueOff ;
15671: CALL_OW 7
// end ;
15675: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
15676: LD_INT 78
15678: PPUSH
15679: LD_INT 112
15681: PPUSH
15682: LD_INT 3
15684: PPUSH
15685: CALL_OW 440
15689: IFFALSE 15748
15691: GO 15693
15693: DISABLE
// begin foundOil := true ;
15694: LD_ADDR_EXP 10
15698: PUSH
15699: LD_INT 1
15701: ST_TO_ADDR
// if not IsOk ( Burlak ) then
15702: LD_EXP 29
15706: PPUSH
15707: CALL_OW 302
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15748
// DialogueOn ;
15716: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
15720: LD_EXP 29
15724: PPUSH
15725: LD_STRING D2a-Bur-1
15727: PPUSH
15728: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
15732: LD_EXP 33
15736: PPUSH
15737: LD_STRING D2a-Kur-1
15739: PPUSH
15740: CALL_OW 94
// DialogueOff ;
15744: CALL_OW 7
// end ;
15748: END
// every 0 0$1 trigger hasKagan and hasOilTower do
15749: LD_EXP 12
15753: IFFALSE 15761
15755: PUSH
15756: LD_EXP 14
15760: AND
15761: IFFALSE 15773
15763: GO 15765
15765: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
15766: LD_STRING M2
15768: PPUSH
15769: CALL_OW 337
// end ;
15773: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
15774: LD_INT 22
15776: PUSH
15777: LD_INT 3
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 3
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 3
15796: PUSH
15797: LD_INT 57
15799: PUSH
15800: EMPTY
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: PPUSH
15812: CALL_OW 69
15816: IFTRUE 15862
15818: PUSH
15819: LD_INT 22
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 30
15831: PUSH
15832: LD_INT 7
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 57
15844: PUSH
15845: EMPTY
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: OR
15862: IFFALSE 15895
15864: PUSH
15865: LD_INT 22
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 30
15877: PUSH
15878: LD_INT 26
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: NOT
15894: AND
15895: IFFALSE 15908
15897: PUSH
15898: LD_EXP 29
15902: PPUSH
15903: CALL_OW 302
15907: AND
15908: IFFALSE 16102
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin DialogueOn ;
15916: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
15920: LD_EXP 29
15924: PPUSH
15925: LD_STRING D3aa-Bur-1
15927: PPUSH
15928: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
15932: LD_EXP 11
15936: IFFALSE 15949
15938: PUSH
15939: LD_EXP 36
15943: PPUSH
15944: CALL_OW 302
15948: AND
15949: IFFALSE 15975
// begin sci := Scholtze ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_EXP 36
15960: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
15961: LD_EXP 36
15965: PPUSH
15966: LD_STRING D3aa-Sch-1
15968: PPUSH
15969: CALL_OW 88
// end else
15973: GO 16080
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 50
15992: PUSH
15993: EMPTY
15994: LIST
15995: PUSH
15996: LD_INT 25
15998: PUSH
15999: LD_INT 4
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 26
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: PPUSH
16022: CALL_OW 69
16026: PUSH
16027: LD_EXP 48
16031: DIFF
16032: ST_TO_ADDR
// if sci then
16033: LD_VAR 0 1
16037: IFFALSE 16080
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
16039: LD_ADDR_VAR 0 1
16043: PUSH
16044: LD_VAR 0 1
16048: PUSH
16049: LD_INT 1
16051: PPUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL 24274 0 1
16061: PPUSH
16062: CALL_OW 12
16066: ARRAY
16067: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_STRING D3aa-Sci1-1
16075: PPUSH
16076: CALL_OW 88
// end ; end ; if sci then
16080: LD_VAR 0 1
16084: IFFALSE 16098
// Say ( Burlak , D3aa-Bur-2 ) ;
16086: LD_EXP 29
16090: PPUSH
16091: LD_STRING D3aa-Bur-2
16093: PPUSH
16094: CALL_OW 88
// DialogueOff ;
16098: CALL_OW 7
// end ;
16102: PPOPN 1
16104: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
16105: LD_EXP 58
16109: PPUSH
16110: LD_INT 101
16112: PUSH
16113: LD_INT 3
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 72
16124: IFFALSE 16137
16126: PUSH
16127: LD_EXP 29
16131: PPUSH
16132: CALL_OW 302
16136: AND
16137: IFFALSE 16146
16139: PUSH
16140: LD_EXP 13
16144: NOT
16145: AND
16146: IFFALSE 16460
16148: GO 16150
16150: DISABLE
16151: LD_INT 0
16153: PPUSH
16154: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
16155: LD_ADDR_VAR 0 2
16159: PUSH
16160: LD_EXP 58
16164: PPUSH
16165: LD_INT 101
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 72
16179: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
16180: LD_ADDR_VAR 0 1
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 3
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 50
16197: PUSH
16198: EMPTY
16199: LIST
16200: PUSH
16201: LD_INT 26
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PUSH
16221: LD_EXP 48
16225: DIFF
16226: ST_TO_ADDR
// if not sol then
16227: LD_VAR 0 1
16231: NOT
16232: IFFALSE 16236
// exit ;
16234: GO 16460
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
16236: LD_ADDR_VAR 0 1
16240: PUSH
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 1
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL 24274 0 1
16258: PPUSH
16259: CALL_OW 12
16263: ARRAY
16264: ST_TO_ADDR
// DialogueOn ;
16265: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
16269: LD_VAR 0 2
16273: PPUSH
16274: LD_EXP 29
16278: PPUSH
16279: CALL_OW 74
16283: PPUSH
16284: CALL_OW 87
// if not hasKagan then
16288: LD_EXP 12
16292: NOT
16293: IFFALSE 16321
// begin Say ( sol , D3a-RSol1-1 ) ;
16295: LD_VAR 0 1
16299: PPUSH
16300: LD_STRING D3a-RSol1-1
16302: PPUSH
16303: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
16307: LD_EXP 29
16311: PPUSH
16312: LD_STRING D3a-Bur-1
16314: PPUSH
16315: CALL_OW 88
// end else
16319: GO 16456
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_STRING D3a-RSol1-1
16328: PUSH
16329: LD_STRING D3b-RSol1-1
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_VAR 0 1
16340: PUSH
16341: LD_INT 2
16343: MOD
16344: PUSH
16345: LD_INT 1
16347: PLUS
16348: ARRAY
16349: PPUSH
16350: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
16354: LD_EXP 30
16358: PPUSH
16359: CALL_OW 302
16363: IFFALSE 16377
16365: PUSH
16366: LD_EXP 30
16370: PUSH
16371: LD_EXP 39
16375: IN
16376: AND
16377: IFFALSE 16393
// Say ( Gnyevko , D3b-Gny-1 ) else
16379: LD_EXP 30
16383: PPUSH
16384: LD_STRING D3b-Gny-1
16386: PPUSH
16387: CALL_OW 88
16391: GO 16444
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
16393: LD_EXP 34
16397: PPUSH
16398: CALL_OW 302
16402: IFFALSE 16416
16404: PUSH
16405: LD_EXP 34
16409: PUSH
16410: LD_EXP 39
16414: IN
16415: AND
16416: IFFALSE 16432
// Say ( Kovalyuk , D3b-Kov-1 ) else
16418: LD_EXP 34
16422: PPUSH
16423: LD_STRING D3b-Kov-1
16425: PPUSH
16426: CALL_OW 88
16430: GO 16444
// Say ( sol , D3b-RSol1-2 ) ;
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_STRING D3b-RSol1-2
16439: PPUSH
16440: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
16444: LD_EXP 29
16448: PPUSH
16449: LD_STRING D3b-Bur-1
16451: PPUSH
16452: CALL_OW 88
// end ; DialogueOff ;
16456: CALL_OW 7
// end ;
16460: PPOPN 2
16462: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
16463: LD_EXP 10
16467: IFFALSE 17472
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
16480: LD_INT 1050
16482: PUSH
16483: LD_INT 350
16485: PPUSH
16486: LD_INT 2100
16488: PPUSH
16489: CALL_OW 12
16493: PLUS
16494: PPUSH
16495: CALL_OW 67
// case Difficulty of 1 :
16499: LD_OWVAR 67
16503: PUSH
16504: LD_INT 1
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 16523
16512: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
16513: LD_ADDR_VAR 0 4
16517: PUSH
16518: LD_INT 8
16520: ST_TO_ADDR
16521: GO 16650
16523: LD_INT 2
16525: DOUBLE
16526: EQUAL
16527: IFTRUE 16531
16529: GO 16565
16531: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
16532: LD_ADDR_VAR 0 4
16536: PUSH
16537: LD_INT 8
16539: PUSH
16540: LD_INT 7
16542: PUSH
16543: LD_INT 7
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 1
16553: PPUSH
16554: LD_INT 3
16556: PPUSH
16557: CALL_OW 12
16561: ARRAY
16562: ST_TO_ADDR
16563: GO 16650
16565: LD_INT 3
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16607
16573: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_INT 7
16581: PUSH
16582: LD_INT 7
16584: PUSH
16585: LD_INT 6
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 1
16595: PPUSH
16596: LD_INT 3
16598: PPUSH
16599: CALL_OW 12
16603: ARRAY
16604: ST_TO_ADDR
16605: GO 16650
16607: LD_INT 4
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16615
16613: GO 16649
16615: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
16616: LD_ADDR_VAR 0 4
16620: PUSH
16621: LD_INT 7
16623: PUSH
16624: LD_INT 6
16626: PUSH
16627: LD_INT 6
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 1
16637: PPUSH
16638: LD_INT 3
16640: PPUSH
16641: CALL_OW 12
16645: ARRAY
16646: ST_TO_ADDR
16647: GO 16650
16649: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
16650: LD_EXP 36
16654: PPUSH
16655: LD_VAR 0 4
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 49
// ComHold ( Scholtze ) ;
16667: LD_EXP 36
16671: PPUSH
16672: CALL_OW 140
// wait ( 0 0$4 ) ;
16676: LD_INT 140
16678: PPUSH
16679: CALL_OW 67
// if See ( 3 , Scholtze ) then
16683: LD_INT 3
16685: PPUSH
16686: LD_EXP 36
16690: PPUSH
16691: CALL_OW 292
16695: IFFALSE 16779
// begin hasScholtze := true ;
16697: LD_ADDR_EXP 11
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
16705: LD_EXP 36
16709: PPUSH
16710: LD_INT 3
16712: PPUSH
16713: CALL_OW 235
// ComFree ( Scholtze ) ;
16717: LD_EXP 36
16721: PPUSH
16722: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
16726: LD_EXP 36
16730: PPUSH
16731: CALL_OW 87
// DialogueOn ;
16735: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
16739: LD_EXP 36
16743: PPUSH
16744: LD_STRING D4a-Sch-1
16746: PPUSH
16747: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
16751: LD_EXP 29
16755: PPUSH
16756: LD_STRING D4a-Bur-1
16758: PPUSH
16759: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
16763: LD_EXP 36
16767: PPUSH
16768: LD_STRING D4a-Sch-2
16770: PPUSH
16771: CALL_OW 88
// DialogueOff ;
16775: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
16779: LD_ADDR_VAR 0 2
16783: PUSH
16784: LD_EXP 36
16788: PPUSH
16789: CALL_OW 250
16793: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
16794: LD_ADDR_VAR 0 3
16798: PUSH
16799: LD_EXP 36
16803: PPUSH
16804: CALL_OW 251
16808: ST_TO_ADDR
// uc_side := 6 ;
16809: LD_ADDR_OWVAR 20
16813: PUSH
16814: LD_INT 6
16816: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
16817: LD_INT 1
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: LD_INT 1
16825: PPUSH
16826: CALL_OW 380
// fake := CreateHuman ;
16830: LD_ADDR_VAR 0 1
16834: PUSH
16835: CALL_OW 44
16839: ST_TO_ADDR
// InGameOn ;
16840: CALL_OW 8
// DialogueOn ;
16844: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
16848: LD_VAR 0 1
16852: PPUSH
16853: LD_STRING D4-Sch-1
16855: PPUSH
16856: CALL 64495 0 2
// Say ( Burlak , D4-Bur-1 ) ;
16860: LD_EXP 29
16864: PPUSH
16865: LD_STRING D4-Bur-1
16867: PPUSH
16868: CALL_OW 88
// DialogueOff ;
16872: CALL_OW 7
// InGameOff ;
16876: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
16880: LD_STRING M4
16882: PPUSH
16883: CALL_OW 337
// canSearchForScholtze := true ;
16887: LD_ADDR_EXP 16
16891: PUSH
16892: LD_INT 1
16894: ST_TO_ADDR
// if dickensKilled then
16895: LD_EXP 15
16899: IFFALSE 16903
// exit ;
16901: GO 17472
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
16903: LD_INT 4200
16905: PUSH
16906: LD_INT 700
16908: PUSH
16909: LD_OWVAR 67
16913: MUL
16914: MINUS
16915: PPUSH
16916: CALL_OW 67
// uc_side := 1 ;
16920: LD_ADDR_OWVAR 20
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// uc_nation := nation_american ;
16928: LD_ADDR_OWVAR 21
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
16936: LD_ADDR_VAR 0 5
16940: PUSH
16941: LD_STRING Dickens
16943: PPUSH
16944: CALL_OW 25
16948: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
16949: LD_VAR 0 5
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: LD_OWVAR 67
16961: PPUSH
16962: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
16966: LD_INT 1
16968: PPUSH
16969: LD_OWVAR 67
16973: PPUSH
16974: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
16978: LD_ADDR_OWVAR 29
16982: PUSH
16983: LD_INT 10
16985: PUSH
16986: LD_INT 10
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: ST_TO_ADDR
// DickensFriend := CreateHuman ;
16993: LD_ADDR_VAR 0 6
16997: PUSH
16998: CALL_OW 44
17002: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
17003: LD_VAR 0 5
17007: PPUSH
17008: LD_INT 22
17010: PPUSH
17011: LD_INT 17
17013: PPUSH
17014: LD_INT 3
17016: PPUSH
17017: LD_INT 0
17019: PPUSH
17020: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
17024: LD_VAR 0 6
17028: PPUSH
17029: LD_INT 22
17031: PPUSH
17032: LD_INT 17
17034: PPUSH
17035: LD_INT 3
17037: PPUSH
17038: LD_INT 0
17040: PPUSH
17041: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
17045: LD_VAR 0 5
17049: PUSH
17050: LD_VAR 0 6
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PPUSH
17059: LD_VAR 0 2
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17073: LD_INT 35
17075: PPUSH
17076: CALL_OW 67
// if not IsOk ( Dickens ) then
17080: LD_VAR 0 5
17084: PPUSH
17085: CALL_OW 302
17089: NOT
17090: IFFALSE 17137
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
17092: LD_VAR 0 6
17096: PPUSH
17097: LD_INT 31
17099: PPUSH
17100: LD_INT 39
17102: PPUSH
17103: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
17107: LD_VAR 0 6
17111: PPUSH
17112: LD_INT 297
17114: PPUSH
17115: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
17119: LD_ADDR_EXP 57
17123: PUSH
17124: LD_EXP 57
17128: PUSH
17129: LD_VAR 0 6
17133: UNION
17134: ST_TO_ADDR
// exit ;
17135: GO 17472
// end ; if not IsOk ( DickensFriend ) then
17137: LD_VAR 0 6
17141: PPUSH
17142: CALL_OW 302
17146: NOT
17147: IFFALSE 17194
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
17149: LD_VAR 0 5
17153: PPUSH
17154: LD_INT 31
17156: PPUSH
17157: LD_INT 39
17159: PPUSH
17160: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
17164: LD_VAR 0 5
17168: PPUSH
17169: LD_INT 297
17171: PPUSH
17172: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
17176: LD_ADDR_EXP 57
17180: PUSH
17181: LD_EXP 57
17185: PUSH
17186: LD_VAR 0 5
17190: UNION
17191: ST_TO_ADDR
// exit ;
17192: GO 17472
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
17194: LD_INT 1
17196: PPUSH
17197: LD_EXP 36
17201: PPUSH
17202: CALL_OW 292
17206: IFFALSE 17223
17208: PUSH
17209: LD_EXP 36
17213: PPUSH
17214: CALL_OW 256
17218: PUSH
17219: LD_INT 1000
17221: LESS
17222: AND
17223: IFFALSE 17232
17225: PUSH
17226: LD_EXP 11
17230: NOT
17231: AND
17232: IFFALSE 17073
// canSearchForScholtze := false ;
17234: LD_ADDR_EXP 16
17238: PUSH
17239: LD_INT 0
17241: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
17242: LD_VAR 0 5
17246: PUSH
17247: LD_VAR 0 6
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: LD_EXP 36
17260: PPUSH
17261: CALL_OW 115
// wait ( 0 0$0.3 ) ;
17265: LD_INT 10
17267: PPUSH
17268: CALL_OW 67
// InGameOn ;
17272: CALL_OW 8
// DialogueOn ;
17276: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
17280: LD_VAR 0 2
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_INT 3
17292: PPUSH
17293: LD_INT 10
17295: NEG
17296: PPUSH
17297: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
17301: LD_VAR 0 2
17305: PPUSH
17306: LD_VAR 0 3
17310: PPUSH
17311: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
17315: LD_EXP 36
17319: PPUSH
17320: LD_STRING D4b-Sch-1
17322: PPUSH
17323: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
17327: LD_VAR 0 6
17331: PPUSH
17332: LD_STRING D4b-Sol1-1
17334: PPUSH
17335: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
17339: LD_VAR 0 5
17343: PPUSH
17344: LD_STRING D4b-Sol2-1
17346: PPUSH
17347: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
17351: LD_EXP 36
17355: PPUSH
17356: LD_STRING D4b-Sch-2
17358: PPUSH
17359: CALL_OW 88
// DialogueOff ;
17363: CALL_OW 7
// wait ( 0 0$0.3 ) ;
17367: LD_INT 10
17369: PPUSH
17370: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
17374: LD_VAR 0 2
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 3
17386: PPUSH
17387: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
17391: LD_EXP 29
17395: PPUSH
17396: LD_STRING D4b-Bur-2
17398: PPUSH
17399: CALL_OW 88
// InGameOff ;
17403: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
17407: LD_STRING MScholtzeDel
17409: PPUSH
17410: CALL_OW 337
// KillUnit ( Scholtze ) ;
17414: LD_EXP 36
17418: PPUSH
17419: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
17423: LD_VAR 0 5
17427: PUSH
17428: LD_VAR 0 6
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: LD_INT 25
17439: PPUSH
17440: LD_INT 31
17442: PPUSH
17443: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
17447: LD_ADDR_EXP 57
17451: PUSH
17452: LD_EXP 57
17456: PUSH
17457: LD_VAR 0 5
17461: PUSH
17462: LD_VAR 0 6
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: UNION
17471: ST_TO_ADDR
// end ;
17472: PPOPN 6
17474: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
17475: LD_INT 3
17477: PPUSH
17478: LD_EXP 36
17482: PPUSH
17483: CALL_OW 292
17487: IFFALSE 17495
17489: PUSH
17490: LD_EXP 16
17494: AND
17495: IFFALSE 17504
17497: PUSH
17498: LD_EXP 11
17502: NOT
17503: AND
17504: IFFALSE 17589
17506: GO 17508
17508: DISABLE
// begin hasScholtze := true ;
17509: LD_ADDR_EXP 11
17513: PUSH
17514: LD_INT 1
17516: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
17517: LD_EXP 36
17521: PPUSH
17522: LD_INT 3
17524: PPUSH
17525: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
17529: LD_EXP 36
17533: PPUSH
17534: CALL_OW 87
// DialogueOn ;
17538: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
17542: LD_EXP 36
17546: PPUSH
17547: LD_STRING D4a-Sch-1
17549: PPUSH
17550: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
17554: LD_EXP 29
17558: PPUSH
17559: LD_STRING D4a-Bur-1
17561: PPUSH
17562: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
17566: LD_EXP 36
17570: PPUSH
17571: LD_STRING D4a-Sch-2
17573: PPUSH
17574: CALL_OW 88
// DialogueOff ;
17578: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
17582: LD_STRING MScholtzeOut
17584: PPUSH
17585: CALL_OW 337
// end ;
17589: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
17590: LD_INT 3
17592: PPUSH
17593: LD_INT 22
17595: PUSH
17596: LD_INT 6
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 21
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 70
17621: IFFALSE 17696
17623: GO 17625
17625: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
17626: LD_INT 131
17628: PPUSH
17629: LD_INT 50
17631: PPUSH
17632: LD_INT 3
17634: PPUSH
17635: LD_INT 12
17637: PPUSH
17638: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
17642: LD_INT 35
17644: PPUSH
17645: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
17649: LD_INT 3
17651: PPUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 6
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 21
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 70
17680: NOT
17681: IFFALSE 17642
// RemoveSeeing ( 131 , 50 , 3 ) ;
17683: LD_INT 131
17685: PPUSH
17686: LD_INT 50
17688: PPUSH
17689: LD_INT 3
17691: PPUSH
17692: CALL_OW 331
// end ;
17696: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
17697: LD_EXP 18
17701: NOT
17702: IFFALSE 17748
17704: PUSH
17705: LD_INT 9
17707: PPUSH
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 31
17730: PUSH
17731: LD_INT 21
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL_OW 70
17747: AND
17748: IFFALSE 17761
17750: PUSH
17751: LD_EXP 29
17755: PPUSH
17756: CALL_OW 302
17760: AND
17761: IFFALSE 17812
17763: GO 17765
17765: DISABLE
// begin DialogueOn ;
17766: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
17770: LD_EXP 29
17774: PPUSH
17775: LD_STRING D5a-Bur-1
17777: PPUSH
17778: CALL_OW 88
// DialogueOff ;
17782: CALL_OW 7
// SetTech ( tech_Track , 3 , state_enabled ) ;
17786: LD_INT 84
17788: PPUSH
17789: LD_INT 3
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
17799: LD_INT 16
17801: PPUSH
17802: LD_INT 3
17804: PPUSH
17805: LD_INT 1
17807: PPUSH
17808: CALL_OW 324
// end ;
17812: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
17813: LD_EXP 19
17817: IFFALSE 17825
17819: PUSH
17820: LD_EXP 14
17824: AND
17825: IFFALSE 19522
17827: GO 17829
17829: DISABLE
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
17841: LD_STRING M3
17843: PPUSH
17844: CALL_OW 337
// sendMechanics := false ;
17848: LD_ADDR_VAR 0 9
17852: PUSH
17853: LD_INT 0
17855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17856: LD_INT 35
17858: PPUSH
17859: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
17863: LD_ADDR_VAR 0 5
17867: PUSH
17868: LD_INT 22
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 50
17890: PUSH
17891: EMPTY
17892: LIST
17893: PUSH
17894: LD_INT 23
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PPUSH
17910: CALL_OW 69
17914: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
17915: LD_ADDR_VAR 0 7
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 21
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 23
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: PPUSH
17955: CALL_OW 69
17959: PPUSH
17960: CALL 24274 0 1
17964: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
17965: LD_VAR 0 5
17969: PUSH
17970: LD_VAR 0 7
17974: PUSH
17975: LD_EXP 21
17979: PLUS
17980: LESS
17981: IFFALSE 18024
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
17983: LD_ADDR_OWVAR 47
17987: PUSH
17988: LD_STRING #Ru03-5
17990: PUSH
17991: LD_VAR 0 7
17995: PUSH
17996: LD_EXP 21
18000: PLUS
18001: PUSH
18002: LD_VAR 0 5
18006: MINUS
18007: PUSH
18008: LD_STRING #Ru03-6
18010: PUSH
18011: LD_EXP 20
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: ST_TO_ADDR
18022: GO 18045
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
18024: LD_ADDR_OWVAR 47
18028: PUSH
18029: LD_STRING #Ru03-5a
18031: PUSH
18032: LD_STRING #Ru03-6
18034: PUSH
18035: LD_EXP 20
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
18045: LD_ADDR_EXP 20
18049: PUSH
18050: LD_EXP 20
18054: PUSH
18055: LD_INT 35
18057: MINUS
18058: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
18059: LD_EXP 20
18063: PUSH
18064: LD_INT 0
18066: EQUAL
18067: IFFALSE 17856
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
18069: LD_VAR 0 5
18073: PUSH
18074: LD_VAR 0 7
18078: PUSH
18079: LD_EXP 21
18083: PLUS
18084: GREATEREQUAL
18085: IFFALSE 18118
// begin AddMedal ( Surplus , 1 ) ;
18087: LD_STRING Surplus
18089: PPUSH
18090: LD_INT 1
18092: PPUSH
18093: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
18097: LD_ADDR_VAR 0 8
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// end else
18116: GO 18180
// if vehiclesOwned >= pepCount then
18118: LD_VAR 0 5
18122: PUSH
18123: LD_VAR 0 7
18127: GREATEREQUAL
18128: IFFALSE 18158
// begin AddMedal ( Surplus , - 1 ) ;
18130: LD_STRING Surplus
18132: PPUSH
18133: LD_INT 1
18135: NEG
18136: PPUSH
18137: CALL_OW 101
// points := [ 2 , 3 ] ;
18141: LD_ADDR_VAR 0 8
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: ST_TO_ADDR
// end else
18156: GO 18180
// begin AddMedal ( Surplus , - 2 ) ;
18158: LD_STRING Surplus
18160: PPUSH
18161: LD_INT 2
18163: NEG
18164: PPUSH
18165: CALL_OW 101
// points := [ 3 ] ;
18169: LD_ADDR_VAR 0 8
18173: PUSH
18174: LD_INT 3
18176: PUSH
18177: EMPTY
18178: LIST
18179: ST_TO_ADDR
// end ; InGameOn ;
18180: CALL_OW 8
// DialogueOn ;
18184: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
18188: LD_EXP 33
18192: PPUSH
18193: LD_STRING D5-Kur-1
18195: PPUSH
18196: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
18200: LD_ADDR_VAR 0 6
18204: PUSH
18205: LD_STRING QVehicles
18207: PPUSH
18208: LD_VAR 0 8
18212: PPUSH
18213: CALL_OW 98
18217: ST_TO_ADDR
// case q of 1 :
18218: LD_VAR 0 6
18222: PUSH
18223: LD_INT 1
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18274
18231: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
18232: LD_EXP 29
18236: PPUSH
18237: LD_STRING D6a-Bur-1
18239: PPUSH
18240: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
18244: LD_EXP 33
18248: PPUSH
18249: LD_STRING D6a-Kur-1
18251: PPUSH
18252: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
18256: LD_ADDR_EXP 23
18260: PUSH
18261: LD_INT 4200
18263: ST_TO_ADDR
// sendMechanics := true ;
18264: LD_ADDR_VAR 0 9
18268: PUSH
18269: LD_INT 1
18271: ST_TO_ADDR
// end ; 2 :
18272: GO 18369
18274: LD_INT 2
18276: DOUBLE
18277: EQUAL
18278: IFTRUE 18282
18280: GO 18325
18282: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
18283: LD_EXP 29
18287: PPUSH
18288: LD_STRING D6b-Bur-1
18290: PPUSH
18291: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
18295: LD_EXP 33
18299: PPUSH
18300: LD_STRING D6b-Kur-1
18302: PPUSH
18303: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
18307: LD_ADDR_EXP 23
18311: PUSH
18312: LD_INT 6300
18314: ST_TO_ADDR
// sendMechanics := true ;
18315: LD_ADDR_VAR 0 9
18319: PUSH
18320: LD_INT 1
18322: ST_TO_ADDR
// end ; 3 :
18323: GO 18369
18325: LD_INT 3
18327: DOUBLE
18328: EQUAL
18329: IFTRUE 18333
18331: GO 18368
18333: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
18334: LD_EXP 29
18338: PPUSH
18339: LD_STRING D6c-Bur-1
18341: PPUSH
18342: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
18346: LD_EXP 33
18350: PPUSH
18351: LD_STRING D6c-Kur-1
18353: PPUSH
18354: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
18358: LD_ADDR_EXP 20
18362: PUSH
18363: LD_INT 14700
18365: ST_TO_ADDR
// end ; end ;
18366: GO 18369
18368: POP
// DialogueOff ;
18369: CALL_OW 7
// InGameOff ;
18373: CALL_OW 9
// if q = 3 then
18377: LD_VAR 0 6
18381: PUSH
18382: LD_INT 3
18384: EQUAL
18385: IFFALSE 18677
// begin repeat wait ( 0 0$1 ) ;
18387: LD_INT 35
18389: PPUSH
18390: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
18394: LD_ADDR_VAR 0 5
18398: PUSH
18399: LD_INT 22
18401: PUSH
18402: LD_INT 3
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 21
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 50
18421: PUSH
18422: EMPTY
18423: LIST
18424: PUSH
18425: LD_INT 23
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: PPUSH
18441: CALL_OW 69
18445: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
18446: LD_ADDR_VAR 0 7
18450: PUSH
18451: LD_INT 22
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 21
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 23
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 69
18490: PPUSH
18491: CALL 24274 0 1
18495: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
18496: LD_VAR 0 5
18500: PUSH
18501: LD_VAR 0 7
18505: PUSH
18506: LD_EXP 21
18510: PLUS
18511: LESS
18512: IFFALSE 18555
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
18514: LD_ADDR_OWVAR 47
18518: PUSH
18519: LD_STRING #Ru03-5
18521: PUSH
18522: LD_VAR 0 7
18526: PUSH
18527: LD_EXP 21
18531: PLUS
18532: PUSH
18533: LD_VAR 0 5
18537: MINUS
18538: PUSH
18539: LD_STRING #Ru03-6
18541: PUSH
18542: LD_EXP 20
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: ST_TO_ADDR
18553: GO 18576
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
18555: LD_ADDR_OWVAR 47
18559: PUSH
18560: LD_STRING #Ru03-5a
18562: PUSH
18563: LD_STRING #Ru03-6
18565: PUSH
18566: LD_EXP 20
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
18576: LD_ADDR_EXP 20
18580: PUSH
18581: LD_EXP 20
18585: PUSH
18586: LD_INT 35
18588: MINUS
18589: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
18590: LD_EXP 20
18594: PUSH
18595: LD_INT 0
18597: EQUAL
18598: IFFALSE 18387
// if vehiclesOwned < requiredVehiclesAmount then
18600: LD_VAR 0 5
18604: PUSH
18605: LD_EXP 21
18609: LESS
18610: IFFALSE 18641
// begin DialogueOn ;
18612: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
18616: LD_EXP 33
18620: PPUSH
18621: LD_STRING D6d-Kur-1
18623: PPUSH
18624: CALL_OW 94
// YouLost ( Vehicles ) ;
18628: LD_STRING Vehicles
18630: PPUSH
18631: CALL_OW 104
// DialogueOff ;
18635: CALL_OW 7
// exit ;
18639: GO 19522
// end ; DialogueOn ;
18641: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
18645: LD_EXP 33
18649: PPUSH
18650: LD_STRING D6c-Kur-2
18652: PPUSH
18653: CALL_OW 94
// DialogueOff ;
18657: CALL_OW 7
// sendMechanics := true ;
18661: LD_ADDR_VAR 0 9
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
18669: LD_ADDR_EXP 23
18673: PUSH
18674: LD_INT 4200
18676: ST_TO_ADDR
// end ; display_strings := [ ] ;
18677: LD_ADDR_OWVAR 47
18681: PUSH
18682: EMPTY
18683: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
18684: LD_STRING M5
18686: PPUSH
18687: CALL_OW 337
// if sendMechanics then
18691: LD_VAR 0 9
18695: IFFALSE 19522
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
18697: LD_ADDR_VAR 0 3
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_INT 6
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 21
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 25
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: LD_INT 120
18737: PUSH
18738: LD_INT 7
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 69
18759: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
18760: LD_VAR 0 3
18764: PPUSH
18765: CALL 24274 0 1
18769: PUSH
18770: LD_EXP 21
18774: LESS
18775: IFFALSE 18966
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: DOUBLE
18783: LD_VAR 0 3
18787: PPUSH
18788: CALL 24274 0 1
18792: DEC
18793: ST_TO_ADDR
18794: LD_EXP 21
18798: PUSH
18799: FOR_TO
18800: IFFALSE 18901
// begin uc_side := 6 ;
18802: LD_ADDR_OWVAR 20
18806: PUSH
18807: LD_INT 6
18809: ST_TO_ADDR
// uc_nation := nation_russian ;
18810: LD_ADDR_OWVAR 21
18814: PUSH
18815: LD_INT 3
18817: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
18818: LD_INT 0
18820: PPUSH
18821: LD_INT 3
18823: PPUSH
18824: CALL_OW 383
// un := CreateHuman ;
18828: LD_ADDR_VAR 0 2
18832: PUSH
18833: CALL_OW 44
18837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18838: LD_INT 35
18840: PPUSH
18841: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
18845: LD_VAR 0 2
18849: PPUSH
18850: LD_INT 14
18852: PPUSH
18853: LD_INT 0
18855: PPUSH
18856: CALL_OW 49
18860: IFFALSE 18838
// ComMoveXY ( un , 193 , 135 ) ;
18862: LD_VAR 0 2
18866: PPUSH
18867: LD_INT 193
18869: PPUSH
18870: LD_INT 135
18872: PPUSH
18873: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
18877: LD_VAR 0 2
18881: PPUSH
18882: LD_INT 159
18884: PPUSH
18885: LD_INT 106
18887: PPUSH
18888: CALL_OW 171
// wait ( 0 0$1 ) ;
18892: LD_INT 35
18894: PPUSH
18895: CALL_OW 67
// end ;
18899: GO 18799
18901: POP
18902: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 22
18910: PUSH
18911: LD_INT 6
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 25
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 3
18940: PUSH
18941: LD_INT 120
18943: PUSH
18944: LD_INT 7
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
18966: LD_ADDR_EXP 38
18970: PUSH
18971: LD_EXP 38
18975: PUSH
18976: LD_VAR 0 3
18980: DIFF
18981: ST_TO_ADDR
// vehicles := [ ] ;
18982: LD_ADDR_VAR 0 4
18986: PUSH
18987: EMPTY
18988: ST_TO_ADDR
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
18989: LD_ADDR_VAR 0 5
18993: PUSH
18994: LD_INT 22
18996: PUSH
18997: LD_INT 3
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 21
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 50
19016: PUSH
19017: EMPTY
19018: LIST
19019: PUSH
19020: LD_INT 23
19022: PUSH
19023: LD_INT 3
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: PPUSH
19036: CALL_OW 69
19040: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
19041: LD_ADDR_VAR 0 1
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_EXP 21
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19140
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
19059: LD_VAR 0 5
19063: PUSH
19064: LD_VAR 0 1
19068: ARRAY
19069: PPUSH
19070: CALL_OW 311
19074: PPUSH
19075: CALL 60648 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
19079: LD_VAR 0 5
19083: PUSH
19084: LD_VAR 0 1
19088: ARRAY
19089: PPUSH
19090: LD_INT 6
19092: PPUSH
19093: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
19097: LD_ADDR_VAR 0 4
19101: PUSH
19102: LD_VAR 0 4
19106: PPUSH
19107: LD_VAR 0 5
19111: PUSH
19112: LD_VAR 0 1
19116: ARRAY
19117: PPUSH
19118: CALL 60250 0 2
19122: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
19123: LD_VAR 0 3
19127: PUSH
19128: LD_VAR 0 1
19132: ARRAY
19133: PPUSH
19134: CALL 60648 0 1
// end ;
19138: GO 19056
19140: POP
19141: POP
// if not vehicles then
19142: LD_VAR 0 4
19146: NOT
19147: IFFALSE 19151
// exit ;
19149: GO 19522
// kirovAttackVehicles := kirovVehicles union vehicles ;
19151: LD_ADDR_EXP 50
19155: PUSH
19156: LD_EXP 49
19160: PUSH
19161: LD_VAR 0 4
19165: UNION
19166: ST_TO_ADDR
// kirovVehicles := [ ] ;
19167: LD_ADDR_EXP 49
19171: PUSH
19172: EMPTY
19173: ST_TO_ADDR
// for i in kirovAttackVehicles do
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_EXP 50
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19201
// SetTag ( i , 0 ) ;
19187: LD_VAR 0 1
19191: PPUSH
19192: LD_INT 0
19194: PPUSH
19195: CALL_OW 109
19199: GO 19184
19201: POP
19202: POP
// repeat wait ( 0 0$3 ) ;
19203: LD_INT 105
19205: PPUSH
19206: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_INT 6
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 25
19237: PUSH
19238: LD_INT 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 3
19247: PUSH
19248: LD_INT 55
19250: PUSH
19251: EMPTY
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: LD_INT 120
19263: PUSH
19264: LD_INT 7
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
19287: LD_ADDR_VAR 0 4
19291: PUSH
19292: LD_EXP 50
19296: PPUSH
19297: LD_INT 58
19299: PUSH
19300: EMPTY
19301: LIST
19302: PPUSH
19303: CALL_OW 72
19307: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
19308: LD_ADDR_VAR 0 1
19312: PUSH
19313: DOUBLE
19314: LD_INT 1
19316: DEC
19317: ST_TO_ADDR
19318: LD_VAR 0 4
19322: PPUSH
19323: CALL 24274 0 1
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19371
// if i <= tmp then
19331: LD_VAR 0 1
19335: PUSH
19336: LD_VAR 0 3
19340: LESSEQUAL
19341: IFFALSE 19369
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
19343: LD_VAR 0 3
19347: PUSH
19348: LD_VAR 0 1
19352: ARRAY
19353: PPUSH
19354: LD_VAR 0 4
19358: PUSH
19359: LD_VAR 0 1
19363: ARRAY
19364: PPUSH
19365: CALL_OW 120
19369: GO 19328
19371: POP
19372: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
19373: LD_EXP 50
19377: PPUSH
19378: LD_INT 58
19380: PUSH
19381: EMPTY
19382: LIST
19383: PPUSH
19384: CALL_OW 72
19388: NOT
19389: IFFALSE 19203
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
19391: LD_ADDR_VAR 0 3
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_INT 6
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 25
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: LD_INT 120
19421: PUSH
19422: LD_INT 7
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: LD_INT 55
19438: PUSH
19439: EMPTY
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: PPUSH
19452: CALL_OW 69
19456: ST_TO_ADDR
// for i in tmp do
19457: LD_ADDR_VAR 0 1
19461: PUSH
19462: LD_VAR 0 3
19466: PUSH
19467: FOR_IN
19468: IFFALSE 19505
// if not i in kirovBaseSquad then
19470: LD_VAR 0 1
19474: PUSH
19475: LD_EXP 38
19479: IN
19480: NOT
19481: IFFALSE 19503
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
19483: LD_ADDR_EXP 38
19487: PUSH
19488: LD_EXP 38
19492: PPUSH
19493: LD_VAR 0 1
19497: PPUSH
19498: CALL 60250 0 2
19502: ST_TO_ADDR
19503: GO 19467
19505: POP
19506: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
19507: LD_EXP 50
19511: PPUSH
19512: LD_INT 71
19514: PPUSH
19515: LD_INT 36
19517: PPUSH
19518: CALL_OW 111
// end ; end ;
19522: PPOPN 9
19524: END
// every 0 0$1 trigger timeToAttackOnOmicron do
19525: LD_EXP 23
19529: IFFALSE 19963
19531: GO 19533
19533: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
19534: LD_INT 16
19536: PPUSH
19537: LD_INT 1
19539: PPUSH
19540: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
19544: LD_INT 1
19546: PPUSH
19547: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
19551: LD_INT 35
19553: PPUSH
19554: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
19558: LD_ADDR_OWVAR 47
19562: PUSH
19563: LD_STRING #Ru03-1
19565: PUSH
19566: LD_EXP 23
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
19575: LD_ADDR_EXP 23
19579: PUSH
19580: LD_EXP 23
19584: PUSH
19585: LD_INT 35
19587: MINUS
19588: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
19589: LD_EXP 23
19593: PUSH
19594: LD_INT 0
19596: EQUAL
19597: IFFALSE 19551
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
19599: LD_INT 16
19601: PPUSH
19602: LD_INT 22
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: LD_INT 58
19627: PUSH
19628: EMPTY
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 71
19644: IFTRUE 19693
19646: PUSH
19647: LD_INT 16
19649: PPUSH
19650: LD_INT 22
19652: PUSH
19653: LD_INT 3
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 3
19672: PUSH
19673: LD_INT 55
19675: PUSH
19676: EMPTY
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 71
19692: OR
19693: IFFALSE 19876
// begin DialogueOn ;
19695: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
19699: LD_EXP 33
19703: PPUSH
19704: LD_STRING D7a-Kur-1
19706: PPUSH
19707: CALL_OW 94
// DialogueOff ;
19711: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
19715: LD_ADDR_EXP 23
19719: PUSH
19720: LD_INT 4200
19722: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19723: LD_INT 35
19725: PPUSH
19726: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
19730: LD_ADDR_OWVAR 47
19734: PUSH
19735: LD_STRING #Ru03-2
19737: PUSH
19738: LD_EXP 23
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
19747: LD_ADDR_EXP 23
19751: PUSH
19752: LD_EXP 23
19756: PUSH
19757: LD_INT 35
19759: MINUS
19760: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
19761: LD_EXP 23
19765: PUSH
19766: LD_INT 0
19768: EQUAL
19769: IFFALSE 19723
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
19771: LD_INT 16
19773: PPUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 21
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 3
19796: PUSH
19797: LD_INT 58
19799: PUSH
19800: EMPTY
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: PPUSH
19812: CALL_OW 71
19816: IFTRUE 19865
19818: PUSH
19819: LD_INT 16
19821: PPUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 21
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 3
19844: PUSH
19845: LD_INT 55
19847: PUSH
19848: EMPTY
19849: LIST
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: PPUSH
19860: CALL_OW 71
19864: OR
19865: IFFALSE 19876
// begin YouLost ( Delay ) ;
19867: LD_STRING Delay
19869: PPUSH
19870: CALL_OW 104
// exit ;
19874: GO 19963
// end ; end ; display_strings := [ ] ;
19876: LD_ADDR_OWVAR 47
19880: PUSH
19881: EMPTY
19882: ST_TO_ADDR
// allowedToAttackOmicron := true ;
19883: LD_ADDR_EXP 13
19887: PUSH
19888: LD_INT 1
19890: ST_TO_ADDR
// canCaptureKirovVehs := true ;
19891: LD_ADDR_EXP 22
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// retreatToKirovAllowed := false ;
19899: LD_ADDR_EXP 24
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
19907: LD_INT 16
19909: PPUSH
19910: LD_INT 0
19912: PPUSH
19913: CALL_OW 424
// DialogueOn ;
19917: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
19921: LD_EXP 29
19925: PPUSH
19926: LD_STRING D7-Bur-1
19928: PPUSH
19929: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
19933: LD_EXP 33
19937: PPUSH
19938: LD_STRING D7-Kur-1
19940: PPUSH
19941: CALL_OW 94
// DialogueOff ;
19945: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19949: LD_STRING M5a
19951: PPUSH
19952: CALL_OW 337
// Query ( QRefuel ) ;
19956: LD_STRING QRefuel
19958: PPUSH
19959: CALL_OW 97
// end ;
19963: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
19964: LD_EXP 24
19968: NOT
19969: IFFALSE 20057
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 3
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 91
19984: PUSH
19985: LD_EXP 45
19989: PUSH
19990: LD_INT 16
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 3
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 21
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 58
20016: PUSH
20017: EMPTY
20018: LIST
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 3
20031: PUSH
20032: LD_INT 21
20034: PUSH
20035: LD_INT 3
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: AND
20057: IFFALSE 20208
20059: GO 20061
20061: DISABLE
20062: LD_INT 0
20064: PPUSH
20065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20066: LD_ADDR_VAR 0 2
20070: PUSH
20071: LD_INT 22
20073: PUSH
20074: LD_INT 3
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 91
20083: PUSH
20084: LD_EXP 45
20088: PUSH
20089: LD_INT 16
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: LD_INT 21
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 58
20115: PUSH
20116: EMPTY
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: LD_INT 21
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
20156: LD_VAR 0 2
20160: PPUSH
20161: CALL_OW 87
// InGameOn ;
20165: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_INT 70
20176: PPUSH
20177: LD_INT 33
20179: PPUSH
20180: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
20184: LD_EXP 33
20188: PPUSH
20189: LD_STRING D12-Kur-1
20191: PPUSH
20192: CALL_OW 94
// InGameOff ;
20196: CALL_OW 9
// wait ( 0 0$2 ) ;
20200: LD_INT 70
20202: PPUSH
20203: CALL_OW 67
// enable ;
20207: ENABLE
// end ;
20208: PPOPN 2
20210: END
// every 0 0$2 trigger not allowedToAttackOmicron and FilterUnitsInArea ( omicronBaseOuterArea , [ f_side , 3 ] ) do var i ;
20211: LD_EXP 13
20215: NOT
20216: IFFALSE 20237
20218: PUSH
20219: LD_INT 20
20221: PPUSH
20222: LD_INT 22
20224: PUSH
20225: LD_INT 3
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 70
20236: AND
20237: IFFALSE 20395
20239: GO 20241
20241: DISABLE
20242: LD_INT 0
20244: PPUSH
// begin if IsOk ( Gnyevko ) and omicronRetreatCounter = 0 then
20245: LD_EXP 30
20249: PPUSH
20250: CALL_OW 302
20254: IFFALSE 20266
20256: PUSH
20257: LD_EXP 27
20261: PUSH
20262: LD_INT 0
20264: EQUAL
20265: AND
20266: IFFALSE 20302
// begin DialogueOn ;
20268: CALL_OW 6
// Say ( Gnyevko , D11-Gny-1 ) ;
20272: LD_EXP 30
20276: PPUSH
20277: LD_STRING D11-Gny-1
20279: PPUSH
20280: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
20284: LD_EXP 29
20288: PPUSH
20289: LD_STRING D11-Bur-1
20291: PPUSH
20292: CALL_OW 88
// DialogueOff ;
20296: CALL_OW 7
// end else
20300: GO 20322
// begin DialogueOn ;
20302: CALL_OW 6
// SayRadio ( Kurin , D11-Kur-1 ) ;
20306: LD_EXP 33
20310: PPUSH
20311: LD_STRING D11-Kur-1
20313: PPUSH
20314: CALL_OW 94
// DialogueOff ;
20318: CALL_OW 7
// end ; omicronRetreatCounter := Inc ( omicronRetreatCounter ) ;
20322: LD_ADDR_EXP 27
20326: PUSH
20327: LD_EXP 27
20331: PPUSH
20332: CALL 61623 0 1
20336: ST_TO_ADDR
// InGameOn ;
20337: CALL_OW 8
// for i in FilterUnitsInArea ( omicronBaseOuterArea , [ f_side , 3 ] ) do
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_INT 20
20348: PPUSH
20349: LD_INT 22
20351: PUSH
20352: LD_INT 3
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 70
20363: PUSH
20364: FOR_IN
20365: IFFALSE 20381
// ComMoveToArea ( i , omicronRetreatArea ) ;
20367: LD_VAR 0 1
20371: PPUSH
20372: LD_INT 27
20374: PPUSH
20375: CALL_OW 113
20379: GO 20364
20381: POP
20382: POP
// wait ( 0 0$2 ) ;
20383: LD_INT 70
20385: PPUSH
20386: CALL_OW 67
// InGameOff ;
20390: CALL_OW 9
// enable ;
20394: ENABLE
// end ;
20395: PPOPN 1
20397: END
// every 0 0$2 trigger ( FilterUnitsInArea ( omicronBaseInnerArea , [ f_enemy , 1 ] ) or GetLives ( usDep ) < 1000 ) and allowedToAttackOmicron do var i , tmp , random , sol , nearest ;
20398: LD_INT 19
20400: PPUSH
20401: LD_INT 81
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PPUSH
20411: CALL_OW 70
20415: IFTRUE 20430
20417: PUSH
20418: LD_INT 290
20420: PPUSH
20421: CALL_OW 256
20425: PUSH
20426: LD_INT 1000
20428: LESS
20429: OR
20430: IFFALSE 20438
20432: PUSH
20433: LD_EXP 13
20437: AND
20438: IFFALSE 21633
20440: GO 20442
20442: DISABLE
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
20447: PPUSH
20448: PPUSH
20449: PPUSH
// begin uc_side := 1 ;
20450: LD_ADDR_OWVAR 20
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// uc_nation := nation_american ;
20458: LD_ADDR_OWVAR 21
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
20466: LD_INT 1
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL_OW 381
// random := CreateHuman ;
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: CALL_OW 44
20485: ST_TO_ADDR
// SayRadioNoFaceNoName ( random , D8-Sol1-1 ) ;
20486: LD_VAR 0 3
20490: PPUSH
20491: LD_STRING D8-Sol1-1
20493: PPUSH
20494: CALL 64495 0 2
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
20498: LD_ADDR_VAR 0 4
20502: PUSH
20503: LD_INT 22
20505: PUSH
20506: LD_INT 3
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 50
20515: PUSH
20516: EMPTY
20517: LIST
20518: PUSH
20519: LD_INT 26
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: PUSH
20539: LD_EXP 48
20543: DIFF
20544: ST_TO_ADDR
// if sol then
20545: LD_VAR 0 4
20549: IFFALSE 20567
// Say ( sol [ 1 ] , D8-RSol1-1 ) ;
20551: LD_VAR 0 4
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: PPUSH
20560: LD_STRING D8-RSol1-1
20562: PPUSH
20563: CALL_OW 88
// if IsOk ( Kovalyuk ) then
20567: LD_EXP 34
20571: PPUSH
20572: CALL_OW 302
20576: IFFALSE 20590
// Say ( Kovalyuk , D8-Kov-1 ) ;
20578: LD_EXP 34
20582: PPUSH
20583: LD_STRING D8-Kov-1
20585: PPUSH
20586: CALL_OW 88
// americanRetreat := true ;
20590: LD_ADDR_EXP 26
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// wait ( 0 0$4 ) ;
20598: LD_INT 140
20600: PPUSH
20601: CALL_OW 67
// if Count ( sol ) > 1 then
20605: LD_VAR 0 4
20609: PPUSH
20610: CALL 24274 0 1
20614: PUSH
20615: LD_INT 1
20617: GREATER
20618: IFFALSE 20638
// Say ( sol [ 2 ] , D8-RSol2-1 ) else
20620: LD_VAR 0 4
20624: PUSH
20625: LD_INT 2
20627: ARRAY
20628: PPUSH
20629: LD_STRING D8-RSol2-1
20631: PPUSH
20632: CALL_OW 88
20636: GO 20661
// if IsOk ( Gnyevko ) then
20638: LD_EXP 30
20642: PPUSH
20643: CALL_OW 302
20647: IFFALSE 20661
// Say ( Gnyevko , D8-Gny-1 ) ;
20649: LD_EXP 30
20653: PPUSH
20654: LD_STRING D8-Gny-1
20656: PPUSH
20657: CALL_OW 88
// wait ( 0 0$4 ) ;
20661: LD_INT 140
20663: PPUSH
20664: CALL_OW 67
// DialogueOn ;
20668: CALL_OW 6
// CenterNowOnUnits ( Kurin ) ;
20672: LD_EXP 33
20676: PPUSH
20677: CALL_OW 87
// SayRadio ( Grishko , D9-Gri-1 ) ;
20681: LD_EXP 37
20685: PPUSH
20686: LD_STRING D9-Gri-1
20688: PPUSH
20689: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
20693: LD_EXP 33
20697: PPUSH
20698: LD_STRING D9-Kur-1
20700: PPUSH
20701: CALL_OW 94
// SayRadio ( Grishko , D9-Gri-2 ) ;
20705: LD_EXP 37
20709: PPUSH
20710: LD_STRING D9-Gri-2
20712: PPUSH
20713: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
20717: LD_EXP 33
20721: PPUSH
20722: LD_STRING D9-Kur-2
20724: PPUSH
20725: CALL_OW 94
// dwait ( 0 0$2 ) ;
20729: LD_INT 70
20731: PPUSH
20732: CALL_OW 68
// SayRadio ( Grishko , D9-Gri-3 ) ;
20736: LD_EXP 37
20740: PPUSH
20741: LD_STRING D9-Gri-3
20743: PPUSH
20744: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
20748: LD_EXP 33
20752: PPUSH
20753: LD_STRING D9-Kur-3
20755: PPUSH
20756: CALL_OW 94
// DialogueOff ;
20760: CALL_OW 7
// arabAttackActive := true ;
20764: LD_ADDR_EXP 8
20768: PUSH
20769: LD_INT 1
20771: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
20772: LD_EXP 29
20776: PPUSH
20777: CALL_OW 87
// wait ( 0 0$5 ) ;
20781: LD_INT 175
20783: PPUSH
20784: CALL_OW 67
// SpawnArabAttack ;
20788: CALL 7032 0 0
// InGameOn ;
20792: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
20796: LD_EXP 33
20800: PPUSH
20801: CALL_OW 87
// SayRadio ( Kurin , D9a-Kur-1 ) ;
20805: LD_EXP 33
20809: PPUSH
20810: LD_STRING D9a-Kur-1
20812: PPUSH
20813: CALL_OW 94
// Say ( Burlak , D9a-Bur- ) ;
20817: LD_EXP 29
20821: PPUSH
20822: LD_STRING D9a-Bur-
20824: PPUSH
20825: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
20829: LD_EXP 33
20833: PPUSH
20834: LD_STRING D9a-Kur-2
20836: PPUSH
20837: CALL_OW 94
// InGameOff ;
20841: CALL_OW 9
// CenterNowOnUnits ( Burlak ) ;
20845: LD_EXP 29
20849: PPUSH
20850: CALL_OW 87
// ChangeMissionObjectives ( M6a ) ;
20854: LD_STRING M6a
20856: PPUSH
20857: CALL_OW 337
// ComMoveXY ( Popov union popovTeam , 121 , 43 ) ;
20861: LD_EXP 35
20865: PUSH
20866: LD_EXP 44
20870: UNION
20871: PPUSH
20872: LD_INT 121
20874: PPUSH
20875: LD_INT 43
20877: PPUSH
20878: CALL_OW 111
// AddComMoveXY ( Popov union popovTeam , 90 , 60 ) ;
20882: LD_EXP 35
20886: PUSH
20887: LD_EXP 44
20891: UNION
20892: PPUSH
20893: LD_INT 90
20895: PPUSH
20896: LD_INT 60
20898: PPUSH
20899: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
20903: LD_INT 35
20905: PPUSH
20906: CALL_OW 67
// nearest := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 3 ] , [ f_ok ] ] ) diff [ Belkov , Gnyevko , Kovalyuk , Scholtze ] ;
20910: LD_ADDR_VAR 0 5
20914: PUSH
20915: LD_INT 22
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 26
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 3
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 50
20957: PUSH
20958: EMPTY
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PPUSH
20968: CALL_OW 69
20972: PUSH
20973: LD_EXP 31
20977: PUSH
20978: LD_EXP 30
20982: PUSH
20983: LD_EXP 34
20987: PUSH
20988: LD_EXP 36
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: DIFF
20999: ST_TO_ADDR
// if not nearest then
21000: LD_VAR 0 5
21004: NOT
21005: IFFALSE 21009
// exit ;
21007: GO 21633
// nearest := NearestUnitToUnit ( nearest , Popov ) ;
21009: LD_ADDR_VAR 0 5
21013: PUSH
21014: LD_VAR 0 5
21018: PPUSH
21019: LD_EXP 35
21023: PPUSH
21024: CALL_OW 74
21028: ST_TO_ADDR
// until GetDistUnits ( nearest , Popov ) < 8 ;
21029: LD_VAR 0 5
21033: PPUSH
21034: LD_EXP 35
21038: PPUSH
21039: CALL_OW 296
21043: PUSH
21044: LD_INT 8
21046: LESS
21047: IFFALSE 20903
// retreat := true ;
21049: LD_ADDR_EXP 18
21053: PUSH
21054: LD_INT 1
21056: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 185 , 126 ) ;
21057: LD_INT 22
21059: PUSH
21060: LD_INT 2
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PPUSH
21067: CALL_OW 69
21071: PPUSH
21072: LD_INT 185
21074: PPUSH
21075: LD_INT 126
21077: PPUSH
21078: CALL_OW 111
// if nearest = Burlak then
21082: LD_VAR 0 5
21086: PUSH
21087: LD_EXP 29
21091: EQUAL
21092: IFFALSE 21346
// begin InGameOn ;
21094: CALL_OW 8
// CenterOnUnits ( Popov ) ;
21098: LD_EXP 35
21102: PPUSH
21103: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 21
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PPUSH
21136: CALL_OW 69
21140: PUSH
21141: FOR_IN
21142: IFFALSE 21161
// ComMoveXY ( i , 83 , 49 ) ;
21144: LD_VAR 0 1
21148: PPUSH
21149: LD_INT 83
21151: PPUSH
21152: LD_INT 49
21154: PPUSH
21155: CALL_OW 111
21159: GO 21141
21161: POP
21162: POP
// ComMoveUnit ( Burlak , Popov ) ;
21163: LD_EXP 29
21167: PPUSH
21168: LD_EXP 35
21172: PPUSH
21173: CALL_OW 112
// ComTurnUnit ( Popov , Burlak ) ;
21177: LD_EXP 35
21181: PPUSH
21182: LD_EXP 29
21186: PPUSH
21187: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
21191: LD_EXP 29
21195: PPUSH
21196: LD_STRING D10a-Bur-1
21198: PPUSH
21199: CALL_OW 88
// ComTurnUnit ( Burlak , Popov ) ;
21203: LD_EXP 29
21207: PPUSH
21208: LD_EXP 35
21212: PPUSH
21213: CALL_OW 119
// Say ( Popov , D10a-Pop-1 ) ;
21217: LD_EXP 35
21221: PPUSH
21222: LD_STRING D10a-Pop-1
21224: PPUSH
21225: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
21229: LD_EXP 29
21233: PPUSH
21234: LD_STRING D10a-Bur-2
21236: PPUSH
21237: CALL_OW 88
// CenterOnXY ( 159 , 107 ) ;
21241: LD_INT 159
21243: PPUSH
21244: LD_INT 107
21246: PPUSH
21247: CALL_OW 84
// Say ( Popov , D10a-Pop-2 ) ;
21251: LD_EXP 35
21255: PPUSH
21256: LD_STRING D10a-Pop-2
21258: PPUSH
21259: CALL_OW 88
// CenterNowOnUnits ( Popov ) ;
21263: LD_EXP 35
21267: PPUSH
21268: CALL_OW 87
// Say ( Burlak , D10a-Bur-3 ) ;
21272: LD_EXP 29
21276: PPUSH
21277: LD_STRING D10a-Bur-3
21279: PPUSH
21280: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
21284: LD_EXP 35
21288: PPUSH
21289: LD_STRING D10a-Pop-3
21291: PPUSH
21292: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
21296: LD_EXP 29
21300: PPUSH
21301: LD_STRING D10a-Bur-4
21303: PPUSH
21304: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
21308: LD_EXP 35
21312: PPUSH
21313: LD_STRING D10a-Pop-4
21315: PPUSH
21316: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
21320: LD_EXP 29
21324: PPUSH
21325: LD_STRING D10a-Bur-5
21327: PPUSH
21328: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
21332: LD_EXP 35
21336: PPUSH
21337: LD_STRING D10a-Pop-5
21339: PPUSH
21340: CALL_OW 88
// end else
21344: GO 21571
// begin InGameOn ;
21346: CALL_OW 8
// CenterOnUnits ( Popov ) ;
21350: LD_EXP 35
21354: PPUSH
21355: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
21359: LD_ADDR_VAR 0 1
21363: PUSH
21364: LD_INT 22
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 21
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PPUSH
21388: CALL_OW 69
21392: PUSH
21393: FOR_IN
21394: IFFALSE 21407
// ComHold ( i ) ;
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 140
21405: GO 21393
21407: POP
21408: POP
// ComMoveUnit ( nearest , Popov ) ;
21409: LD_VAR 0 5
21413: PPUSH
21414: LD_EXP 35
21418: PPUSH
21419: CALL_OW 112
// ComTurnUnit ( Popov , nearest ) ;
21423: LD_EXP 35
21427: PPUSH
21428: LD_VAR 0 5
21432: PPUSH
21433: CALL_OW 119
// Say ( nearest , D10b-RSol1-1 ) ;
21437: LD_VAR 0 5
21441: PPUSH
21442: LD_STRING D10b-RSol1-1
21444: PPUSH
21445: CALL_OW 88
// ComTurnUnit ( nearest , Popov ) ;
21449: LD_VAR 0 5
21453: PPUSH
21454: LD_EXP 35
21458: PPUSH
21459: CALL_OW 119
// Say ( Popov , D10b-Pop-1 ) ;
21463: LD_EXP 35
21467: PPUSH
21468: LD_STRING D10b-Pop-1
21470: PPUSH
21471: CALL_OW 88
// Say ( nearest , D10b-RSol1-2 ) ;
21475: LD_VAR 0 5
21479: PPUSH
21480: LD_STRING D10b-RSol1-2
21482: PPUSH
21483: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-2 ) ;
21487: LD_EXP 35
21491: PPUSH
21492: LD_STRING D10b-Pop-2
21494: PPUSH
21495: CALL_OW 94
// Say ( Burlak , D10b-Bur-2 ) ;
21499: LD_EXP 29
21503: PPUSH
21504: LD_STRING D10b-Bur-2
21506: PPUSH
21507: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-3 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING D10b-Pop-3
21518: PPUSH
21519: CALL_OW 94
// Say ( Burlak , D10b-Bur-3 ) ;
21523: LD_EXP 29
21527: PPUSH
21528: LD_STRING D10b-Bur-3
21530: PPUSH
21531: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-4 ) ;
21535: LD_EXP 35
21539: PPUSH
21540: LD_STRING D10b-Pop-4
21542: PPUSH
21543: CALL_OW 94
// Say ( Burlak , D10b-Bur-4 ) ;
21547: LD_EXP 29
21551: PPUSH
21552: LD_STRING D10b-Bur-4
21554: PPUSH
21555: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-5 ) ;
21559: LD_EXP 35
21563: PPUSH
21564: LD_STRING D10b-Pop-5
21566: PPUSH
21567: CALL_OW 94
// end ; ComMoveXY ( Popov ^ popovTeam ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 67 , 127 ) ;
21571: LD_EXP 35
21575: PUSH
21576: LD_EXP 44
21580: ADD
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_INT 3
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 21
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ADD
21611: PPUSH
21612: LD_INT 67
21614: PPUSH
21615: LD_INT 127
21617: PPUSH
21618: CALL_OW 111
// wait ( 0 0$3 ) ;
21622: LD_INT 105
21624: PPUSH
21625: CALL_OW 67
// FinishMission ;
21629: CALL 21636 0 0
// end ;
21633: PPOPN 5
21635: END
// function FinishMission ; begin
21636: LD_INT 0
21638: PPUSH
// end ; end_of_file
21639: LD_VAR 0 1
21643: RET
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
21644: LD_EXP 8
21648: NOT
21649: IFFALSE 21676
21651: GO 21653
21653: DISABLE
// begin enable ;
21654: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
21655: LD_INT 1
21657: PPUSH
21658: LD_INT 5
21660: PPUSH
21661: CALL_OW 12
21665: PPUSH
21666: LD_INT 13
21668: PPUSH
21669: LD_INT 1
21671: PPUSH
21672: CALL_OW 55
// end ;
21676: END
// every 2 2$30 trigger not allowedToAttackOmicron and GetResourceArea ( omicronBaseArea , mat_cans ) < 6 do
21677: LD_EXP 13
21681: NOT
21682: IFFALSE 21700
21684: PUSH
21685: LD_INT 18
21687: PPUSH
21688: LD_INT 1
21690: PPUSH
21691: CALL_OW 287
21695: PUSH
21696: LD_INT 6
21698: LESS
21699: AND
21700: IFFALSE 21727
21702: GO 21704
21704: DISABLE
// begin enable ;
21705: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , omicronBaseArea , true ) ;
21706: LD_INT 1
21708: PPUSH
21709: LD_INT 5
21711: PPUSH
21712: CALL_OW 12
21716: PPUSH
21717: LD_INT 18
21719: PPUSH
21720: LD_INT 1
21722: PPUSH
21723: CALL_OW 55
// end ;
21727: END
// every 0 0$20 do var i , time , area ;
21728: GO 21730
21730: DISABLE
21731: LD_INT 0
21733: PPUSH
21734: PPUSH
21735: PPUSH
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] + rand ( 0 , 1 ) do
21736: LD_ADDR_VAR 0 1
21740: PUSH
21741: DOUBLE
21742: LD_INT 1
21744: DEC
21745: ST_TO_ADDR
21746: LD_INT 3
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: PUSH
21764: LD_OWVAR 67
21768: ARRAY
21769: PUSH
21770: LD_INT 0
21772: PPUSH
21773: LD_INT 1
21775: PPUSH
21776: CALL_OW 12
21780: PLUS
21781: PUSH
21782: FOR_TO
21783: IFFALSE 21821
// begin CreateCratesXYR ( rand ( 1 , 5 ) , 110 , 97 , 12 , true ) ;
21785: LD_INT 1
21787: PPUSH
21788: LD_INT 5
21790: PPUSH
21791: CALL_OW 12
21795: PPUSH
21796: LD_INT 110
21798: PPUSH
21799: LD_INT 97
21801: PPUSH
21802: LD_INT 12
21804: PPUSH
21805: LD_INT 1
21807: PPUSH
21808: CALL_OW 56
// wait ( 0 0$15 ) ;
21812: LD_INT 525
21814: PPUSH
21815: CALL_OW 67
// end ;
21819: GO 21782
21821: POP
21822: POP
// for i := 1 to 6 do
21823: LD_ADDR_VAR 0 1
21827: PUSH
21828: DOUBLE
21829: LD_INT 1
21831: DEC
21832: ST_TO_ADDR
21833: LD_INT 6
21835: PUSH
21836: FOR_TO
21837: IFFALSE 21869
// begin CreateCratesArea ( rand ( 3 , 5 ) , beriaCrates1Area , true ) ;
21839: LD_INT 3
21841: PPUSH
21842: LD_INT 5
21844: PPUSH
21845: CALL_OW 12
21849: PPUSH
21850: LD_INT 23
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 55
// wait ( 0 0$25 ) ;
21860: LD_INT 875
21862: PPUSH
21863: CALL_OW 67
// end ;
21867: GO 21836
21869: POP
21870: POP
// CreateCratesXYR ( 5 , 76 , 117 , 5 , true ) ;
21871: LD_INT 5
21873: PPUSH
21874: LD_INT 76
21876: PPUSH
21877: LD_INT 117
21879: PPUSH
21880: LD_INT 5
21882: PPUSH
21883: LD_INT 1
21885: PPUSH
21886: CALL_OW 56
// repeat wait ( 0 0$45 ) ;
21890: LD_INT 1575
21892: PPUSH
21893: CALL_OW 67
// area := 0 ;
21897: LD_ADDR_VAR 0 3
21901: PUSH
21902: LD_INT 0
21904: ST_TO_ADDR
// case rand ( 0 , 10 ) of 1 .. 2 :
21905: LD_INT 0
21907: PPUSH
21908: LD_INT 10
21910: PPUSH
21911: CALL_OW 12
21915: PUSH
21916: LD_INT 1
21918: DOUBLE
21919: GREATEREQUAL
21920: IFFALSE 21928
21922: LD_INT 2
21924: DOUBLE
21925: LESSEQUAL
21926: IFTRUE 21930
21928: GO 21941
21930: POP
// area := beriaCrates1Area ; 3 .. 7 :
21931: LD_ADDR_VAR 0 3
21935: PUSH
21936: LD_INT 23
21938: ST_TO_ADDR
21939: GO 21992
21941: LD_INT 3
21943: DOUBLE
21944: GREATEREQUAL
21945: IFFALSE 21953
21947: LD_INT 7
21949: DOUBLE
21950: LESSEQUAL
21951: IFTRUE 21955
21953: GO 21966
21955: POP
// area := beriaCrates2Area ; 8 .. 10 :
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 24
21963: ST_TO_ADDR
21964: GO 21992
21966: LD_INT 8
21968: DOUBLE
21969: GREATEREQUAL
21970: IFFALSE 21978
21972: LD_INT 10
21974: DOUBLE
21975: LESSEQUAL
21976: IFTRUE 21980
21978: GO 21991
21980: POP
// area := beriaCrates3Area ; end ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 25
21988: ST_TO_ADDR
21989: GO 21992
21991: POP
// if area and GetResourceArea ( area , mat_cans ) < 6 then
21992: LD_VAR 0 3
21996: IFFALSE 22016
21998: PUSH
21999: LD_VAR 0 3
22003: PPUSH
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 287
22011: PUSH
22012: LD_INT 6
22014: LESS
22015: AND
22016: IFFALSE 22041
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
22018: LD_INT 1
22020: PPUSH
22021: LD_INT 5
22023: PPUSH
22024: CALL_OW 12
22028: PPUSH
22029: LD_VAR 0 3
22033: PPUSH
22034: LD_INT 1
22036: PPUSH
22037: CALL_OW 55
// until arabAttackActive ;
22041: LD_EXP 8
22045: IFFALSE 21890
// end ; end_of_file
22047: PPOPN 3
22049: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22050: LD_INT 0
22052: PPUSH
22053: PPUSH
// if exist_mode then
22054: LD_VAR 0 2
22058: IFFALSE 22104
// begin unit := CreateCharacter ( prefix & ident ) ;
22060: LD_ADDR_VAR 0 5
22064: PUSH
22065: LD_VAR 0 3
22069: PUSH
22070: LD_VAR 0 1
22074: STR
22075: PPUSH
22076: CALL_OW 34
22080: ST_TO_ADDR
// if unit then
22081: LD_VAR 0 5
22085: IFFALSE 22102
// DeleteCharacters ( prefix & ident ) ;
22087: LD_VAR 0 3
22091: PUSH
22092: LD_VAR 0 1
22096: STR
22097: PPUSH
22098: CALL_OW 40
// end else
22102: GO 22119
// unit := NewCharacter ( ident ) ;
22104: LD_ADDR_VAR 0 5
22108: PUSH
22109: LD_VAR 0 1
22113: PPUSH
22114: CALL_OW 25
22118: ST_TO_ADDR
// result := unit ;
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_VAR 0 5
22128: ST_TO_ADDR
// end ;
22129: LD_VAR 0 4
22133: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
22134: LD_INT 0
22136: PPUSH
22137: PPUSH
// if exist_mode then
22138: LD_VAR 0 2
22142: IFFALSE 22167
// unit := CreateCharacter ( prefix & ident ) else
22144: LD_ADDR_VAR 0 5
22148: PUSH
22149: LD_VAR 0 3
22153: PUSH
22154: LD_VAR 0 1
22158: STR
22159: PPUSH
22160: CALL_OW 34
22164: ST_TO_ADDR
22165: GO 22182
// unit := NewCharacter ( ident ) ;
22167: LD_ADDR_VAR 0 5
22171: PUSH
22172: LD_VAR 0 1
22176: PPUSH
22177: CALL_OW 25
22181: ST_TO_ADDR
// result := unit ;
22182: LD_ADDR_VAR 0 4
22186: PUSH
22187: LD_VAR 0 5
22191: ST_TO_ADDR
// end ;
22192: LD_VAR 0 4
22196: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22197: LD_INT 0
22199: PPUSH
22200: PPUSH
// if not side or not nation then
22201: LD_VAR 0 1
22205: NOT
22206: IFTRUE 22215
22208: PUSH
22209: LD_VAR 0 2
22213: NOT
22214: OR
22215: IFFALSE 22219
// exit ;
22217: GO 23013
// case nation of nation_american :
22219: LD_VAR 0 2
22223: PUSH
22224: LD_INT 1
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22454
22232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
22233: LD_ADDR_VAR 0 4
22237: PUSH
22238: LD_INT 35
22240: PUSH
22241: LD_INT 45
22243: PUSH
22244: LD_INT 46
22246: PUSH
22247: LD_INT 47
22249: PUSH
22250: LD_INT 82
22252: PUSH
22253: LD_INT 83
22255: PUSH
22256: LD_INT 84
22258: PUSH
22259: LD_INT 85
22261: PUSH
22262: LD_INT 86
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: LD_INT 6
22273: PUSH
22274: LD_INT 15
22276: PUSH
22277: LD_INT 16
22279: PUSH
22280: LD_INT 7
22282: PUSH
22283: LD_INT 12
22285: PUSH
22286: LD_INT 13
22288: PUSH
22289: LD_INT 10
22291: PUSH
22292: LD_INT 14
22294: PUSH
22295: LD_INT 20
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 27
22312: PUSH
22313: LD_INT 36
22315: PUSH
22316: LD_INT 69
22318: PUSH
22319: LD_INT 39
22321: PUSH
22322: LD_INT 34
22324: PUSH
22325: LD_INT 40
22327: PUSH
22328: LD_INT 48
22330: PUSH
22331: LD_INT 49
22333: PUSH
22334: LD_INT 50
22336: PUSH
22337: LD_INT 51
22339: PUSH
22340: LD_INT 52
22342: PUSH
22343: LD_INT 53
22345: PUSH
22346: LD_INT 54
22348: PUSH
22349: LD_INT 55
22351: PUSH
22352: LD_INT 56
22354: PUSH
22355: LD_INT 57
22357: PUSH
22358: LD_INT 58
22360: PUSH
22361: LD_INT 59
22363: PUSH
22364: LD_INT 60
22366: PUSH
22367: LD_INT 61
22369: PUSH
22370: LD_INT 62
22372: PUSH
22373: LD_INT 80
22375: PUSH
22376: LD_INT 82
22378: PUSH
22379: LD_INT 83
22381: PUSH
22382: LD_INT 84
22384: PUSH
22385: LD_INT 85
22387: PUSH
22388: LD_INT 86
22390: PUSH
22391: LD_INT 90
22393: PUSH
22394: LD_INT 93
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: ST_TO_ADDR
22452: GO 22935
22454: LD_INT 2
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22696
22462: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
22463: LD_ADDR_VAR 0 4
22467: PUSH
22468: LD_INT 35
22470: PUSH
22471: LD_INT 45
22473: PUSH
22474: LD_INT 46
22476: PUSH
22477: LD_INT 47
22479: PUSH
22480: LD_INT 82
22482: PUSH
22483: LD_INT 83
22485: PUSH
22486: LD_INT 84
22488: PUSH
22489: LD_INT 85
22491: PUSH
22492: LD_INT 87
22494: PUSH
22495: LD_INT 70
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 11
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: LD_INT 4
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: LD_INT 6
22515: PUSH
22516: LD_INT 15
22518: PUSH
22519: LD_INT 18
22521: PUSH
22522: LD_INT 7
22524: PUSH
22525: LD_INT 17
22527: PUSH
22528: LD_INT 8
22530: PUSH
22531: LD_INT 20
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 72
22542: PUSH
22543: LD_INT 26
22545: PUSH
22546: LD_INT 69
22548: PUSH
22549: LD_INT 39
22551: PUSH
22552: LD_INT 40
22554: PUSH
22555: LD_INT 41
22557: PUSH
22558: LD_INT 42
22560: PUSH
22561: LD_INT 43
22563: PUSH
22564: LD_INT 48
22566: PUSH
22567: LD_INT 49
22569: PUSH
22570: LD_INT 50
22572: PUSH
22573: LD_INT 51
22575: PUSH
22576: LD_INT 52
22578: PUSH
22579: LD_INT 53
22581: PUSH
22582: LD_INT 54
22584: PUSH
22585: LD_INT 55
22587: PUSH
22588: LD_INT 56
22590: PUSH
22591: LD_INT 60
22593: PUSH
22594: LD_INT 61
22596: PUSH
22597: LD_INT 62
22599: PUSH
22600: LD_INT 66
22602: PUSH
22603: LD_INT 67
22605: PUSH
22606: LD_INT 68
22608: PUSH
22609: LD_INT 81
22611: PUSH
22612: LD_INT 82
22614: PUSH
22615: LD_INT 83
22617: PUSH
22618: LD_INT 84
22620: PUSH
22621: LD_INT 85
22623: PUSH
22624: LD_INT 87
22626: PUSH
22627: LD_INT 88
22629: PUSH
22630: LD_INT 92
22632: PUSH
22633: LD_INT 94
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 22935
22696: LD_INT 3
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22934
22704: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
22705: LD_ADDR_VAR 0 4
22709: PUSH
22710: LD_INT 46
22712: PUSH
22713: LD_INT 47
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 82
22724: PUSH
22725: LD_INT 83
22727: PUSH
22728: LD_INT 84
22730: PUSH
22731: LD_INT 85
22733: PUSH
22734: LD_INT 86
22736: PUSH
22737: LD_INT 11
22739: PUSH
22740: LD_INT 9
22742: PUSH
22743: LD_INT 20
22745: PUSH
22746: LD_INT 19
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 24
22754: PUSH
22755: LD_INT 22
22757: PUSH
22758: LD_INT 25
22760: PUSH
22761: LD_INT 28
22763: PUSH
22764: LD_INT 29
22766: PUSH
22767: LD_INT 30
22769: PUSH
22770: LD_INT 31
22772: PUSH
22773: LD_INT 37
22775: PUSH
22776: LD_INT 38
22778: PUSH
22779: LD_INT 32
22781: PUSH
22782: LD_INT 27
22784: PUSH
22785: LD_INT 33
22787: PUSH
22788: LD_INT 69
22790: PUSH
22791: LD_INT 39
22793: PUSH
22794: LD_INT 34
22796: PUSH
22797: LD_INT 40
22799: PUSH
22800: LD_INT 71
22802: PUSH
22803: LD_INT 23
22805: PUSH
22806: LD_INT 44
22808: PUSH
22809: LD_INT 48
22811: PUSH
22812: LD_INT 49
22814: PUSH
22815: LD_INT 50
22817: PUSH
22818: LD_INT 51
22820: PUSH
22821: LD_INT 52
22823: PUSH
22824: LD_INT 53
22826: PUSH
22827: LD_INT 54
22829: PUSH
22830: LD_INT 55
22832: PUSH
22833: LD_INT 56
22835: PUSH
22836: LD_INT 57
22838: PUSH
22839: LD_INT 58
22841: PUSH
22842: LD_INT 59
22844: PUSH
22845: LD_INT 63
22847: PUSH
22848: LD_INT 64
22850: PUSH
22851: LD_INT 65
22853: PUSH
22854: LD_INT 82
22856: PUSH
22857: LD_INT 83
22859: PUSH
22860: LD_INT 84
22862: PUSH
22863: LD_INT 85
22865: PUSH
22866: LD_INT 86
22868: PUSH
22869: LD_INT 89
22871: PUSH
22872: LD_INT 91
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
22932: GO 22935
22934: POP
// if state > - 1 and state < 3 then
22935: LD_VAR 0 3
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: GREATER
22944: IFFALSE 22956
22946: PUSH
22947: LD_VAR 0 3
22951: PUSH
22952: LD_INT 3
22954: LESS
22955: AND
22956: IFFALSE 23013
// for i in result do
22958: LD_ADDR_VAR 0 5
22962: PUSH
22963: LD_VAR 0 4
22967: PUSH
22968: FOR_IN
22969: IFFALSE 23011
// if GetTech ( i , side ) <> state then
22971: LD_VAR 0 5
22975: PPUSH
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 321
22985: PUSH
22986: LD_VAR 0 3
22990: NONEQUAL
22991: IFFALSE 23009
// result := result diff i ;
22993: LD_ADDR_VAR 0 4
22997: PUSH
22998: LD_VAR 0 4
23002: PUSH
23003: LD_VAR 0 5
23007: DIFF
23008: ST_TO_ADDR
23009: GO 22968
23011: POP
23012: POP
// end ;
23013: LD_VAR 0 4
23017: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23018: LD_INT 0
23020: PPUSH
23021: PPUSH
23022: PPUSH
// result := true ;
23023: LD_ADDR_VAR 0 3
23027: PUSH
23028: LD_INT 1
23030: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23031: LD_ADDR_VAR 0 5
23035: PUSH
23036: LD_VAR 0 2
23040: PPUSH
23041: CALL_OW 480
23045: ST_TO_ADDR
// if not tmp then
23046: LD_VAR 0 5
23050: NOT
23051: IFFALSE 23055
// exit ;
23053: GO 23104
// for i in tmp do
23055: LD_ADDR_VAR 0 4
23059: PUSH
23060: LD_VAR 0 5
23064: PUSH
23065: FOR_IN
23066: IFFALSE 23102
// if GetTech ( i , side ) <> state_researched then
23068: LD_VAR 0 4
23072: PPUSH
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 321
23082: PUSH
23083: LD_INT 2
23085: NONEQUAL
23086: IFFALSE 23100
// begin result := false ;
23088: LD_ADDR_VAR 0 3
23092: PUSH
23093: LD_INT 0
23095: ST_TO_ADDR
// exit ;
23096: POP
23097: POP
23098: GO 23104
// end ;
23100: GO 23065
23102: POP
23103: POP
// end ;
23104: LD_VAR 0 3
23108: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23109: LD_INT 0
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
23117: PPUSH
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23124: LD_VAR 0 1
23128: NOT
23129: IFTRUE 23146
23131: PUSH
23132: LD_VAR 0 1
23136: PPUSH
23137: CALL_OW 257
23141: PUSH
23142: LD_INT 9
23144: NONEQUAL
23145: OR
23146: IFFALSE 23150
// exit ;
23148: GO 23729
// side := GetSide ( unit ) ;
23150: LD_ADDR_VAR 0 9
23154: PUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 255
23164: ST_TO_ADDR
// tech_space := tech_spacanom ;
23165: LD_ADDR_VAR 0 12
23169: PUSH
23170: LD_INT 29
23172: ST_TO_ADDR
// tech_time := tech_taurad ;
23173: LD_ADDR_VAR 0 13
23177: PUSH
23178: LD_INT 28
23180: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23181: LD_ADDR_VAR 0 11
23185: PUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: CALL_OW 310
23195: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23196: LD_VAR 0 11
23200: PPUSH
23201: CALL_OW 247
23205: PUSH
23206: LD_INT 2
23208: EQUAL
23209: IFFALSE 23213
// exit ;
23211: GO 23729
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23213: LD_ADDR_VAR 0 8
23217: PUSH
23218: LD_INT 81
23220: PUSH
23221: LD_VAR 0 9
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: LD_INT 21
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 8
23260: NOT
23261: IFFALSE 23265
// exit ;
23263: GO 23729
// if in_unit then
23265: LD_VAR 0 11
23269: IFFALSE 23293
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23271: LD_ADDR_VAR 0 10
23275: PUSH
23276: LD_VAR 0 8
23280: PPUSH
23281: LD_VAR 0 11
23285: PPUSH
23286: CALL_OW 74
23290: ST_TO_ADDR
23291: GO 23313
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23293: LD_ADDR_VAR 0 10
23297: PUSH
23298: LD_VAR 0 8
23302: PPUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 74
23312: ST_TO_ADDR
// if not enemy then
23313: LD_VAR 0 10
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23729
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23322: LD_VAR 0 11
23326: IFFALSE 23348
23328: PUSH
23329: LD_VAR 0 11
23333: PPUSH
23334: LD_VAR 0 10
23338: PPUSH
23339: CALL_OW 296
23343: PUSH
23344: LD_INT 13
23346: GREATER
23347: AND
23348: IFTRUE 23370
23350: PUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: LD_VAR 0 10
23360: PPUSH
23361: CALL_OW 296
23365: PUSH
23366: LD_INT 12
23368: GREATER
23369: OR
23370: IFFALSE 23374
// exit ;
23372: GO 23729
// missile := [ 1 ] ;
23374: LD_ADDR_VAR 0 14
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23385: LD_VAR 0 9
23389: PPUSH
23390: LD_VAR 0 12
23394: PPUSH
23395: CALL_OW 325
23399: IFFALSE 23428
// missile := Replace ( missile , missile + 1 , 2 ) ;
23401: LD_ADDR_VAR 0 14
23405: PUSH
23406: LD_VAR 0 14
23410: PPUSH
23411: LD_VAR 0 14
23415: PUSH
23416: LD_INT 1
23418: PLUS
23419: PPUSH
23420: LD_INT 2
23422: PPUSH
23423: CALL_OW 1
23427: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23428: LD_VAR 0 9
23432: PPUSH
23433: LD_VAR 0 13
23437: PPUSH
23438: CALL_OW 325
23442: IFFALSE 23466
23444: PUSH
23445: LD_VAR 0 10
23449: PPUSH
23450: CALL_OW 255
23454: PPUSH
23455: LD_VAR 0 13
23459: PPUSH
23460: CALL_OW 325
23464: NOT
23465: AND
23466: IFFALSE 23495
// missile := Replace ( missile , missile + 1 , 3 ) ;
23468: LD_ADDR_VAR 0 14
23472: PUSH
23473: LD_VAR 0 14
23477: PPUSH
23478: LD_VAR 0 14
23482: PUSH
23483: LD_INT 1
23485: PLUS
23486: PPUSH
23487: LD_INT 3
23489: PPUSH
23490: CALL_OW 1
23494: ST_TO_ADDR
// if missile < 2 then
23495: LD_VAR 0 14
23499: PUSH
23500: LD_INT 2
23502: LESS
23503: IFFALSE 23507
// exit ;
23505: GO 23729
// x := GetX ( enemy ) ;
23507: LD_ADDR_VAR 0 4
23511: PUSH
23512: LD_VAR 0 10
23516: PPUSH
23517: CALL_OW 250
23521: ST_TO_ADDR
// y := GetY ( enemy ) ;
23522: LD_ADDR_VAR 0 5
23526: PUSH
23527: LD_VAR 0 10
23531: PPUSH
23532: CALL_OW 251
23536: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23537: LD_ADDR_VAR 0 6
23541: PUSH
23542: LD_VAR 0 4
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: CALL_OW 12
23558: PLUS
23559: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23560: LD_ADDR_VAR 0 7
23564: PUSH
23565: LD_VAR 0 5
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PPUSH
23574: LD_INT 1
23576: PPUSH
23577: CALL_OW 12
23581: PLUS
23582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23583: LD_VAR 0 6
23587: PPUSH
23588: LD_VAR 0 7
23592: PPUSH
23593: CALL_OW 488
23597: NOT
23598: IFFALSE 23620
// begin _x := x ;
23600: LD_ADDR_VAR 0 6
23604: PUSH
23605: LD_VAR 0 4
23609: ST_TO_ADDR
// _y := y ;
23610: LD_ADDR_VAR 0 7
23614: PUSH
23615: LD_VAR 0 5
23619: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: LD_INT 1
23627: PPUSH
23628: LD_VAR 0 14
23632: PPUSH
23633: CALL_OW 12
23637: ST_TO_ADDR
// case i of 1 :
23638: LD_VAR 0 3
23642: PUSH
23643: LD_INT 1
23645: DOUBLE
23646: EQUAL
23647: IFTRUE 23651
23649: GO 23668
23651: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23652: LD_VAR 0 1
23656: PPUSH
23657: LD_VAR 0 10
23661: PPUSH
23662: CALL_OW 115
23666: GO 23729
23668: LD_INT 2
23670: DOUBLE
23671: EQUAL
23672: IFTRUE 23676
23674: GO 23698
23676: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23677: LD_VAR 0 1
23681: PPUSH
23682: LD_VAR 0 6
23686: PPUSH
23687: LD_VAR 0 7
23691: PPUSH
23692: CALL_OW 153
23696: GO 23729
23698: LD_INT 3
23700: DOUBLE
23701: EQUAL
23702: IFTRUE 23706
23704: GO 23728
23706: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23707: LD_VAR 0 1
23711: PPUSH
23712: LD_VAR 0 6
23716: PPUSH
23717: LD_VAR 0 7
23721: PPUSH
23722: CALL_OW 154
23726: GO 23729
23728: POP
// end ;
23729: LD_VAR 0 2
23733: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23734: LD_INT 0
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
// if not unit or not building then
23742: LD_VAR 0 1
23746: NOT
23747: IFTRUE 23756
23749: PUSH
23750: LD_VAR 0 2
23754: NOT
23755: OR
23756: IFFALSE 23760
// exit ;
23758: GO 23918
// x := GetX ( building ) ;
23760: LD_ADDR_VAR 0 5
23764: PUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: CALL_OW 250
23774: ST_TO_ADDR
// y := GetY ( building ) ;
23775: LD_ADDR_VAR 0 6
23779: PUSH
23780: LD_VAR 0 2
23784: PPUSH
23785: CALL_OW 251
23789: ST_TO_ADDR
// for i := 0 to 5 do
23790: LD_ADDR_VAR 0 4
23794: PUSH
23795: DOUBLE
23796: LD_INT 0
23798: DEC
23799: ST_TO_ADDR
23800: LD_INT 5
23802: PUSH
23803: FOR_TO
23804: IFFALSE 23916
// begin _x := ShiftX ( x , i , 3 ) ;
23806: LD_ADDR_VAR 0 7
23810: PUSH
23811: LD_VAR 0 5
23815: PPUSH
23816: LD_VAR 0 4
23820: PPUSH
23821: LD_INT 3
23823: PPUSH
23824: CALL_OW 272
23828: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23829: LD_ADDR_VAR 0 8
23833: PUSH
23834: LD_VAR 0 6
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: LD_INT 3
23846: PPUSH
23847: CALL_OW 273
23851: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23852: LD_VAR 0 7
23856: PPUSH
23857: LD_VAR 0 8
23861: PPUSH
23862: CALL_OW 488
23866: NOT
23867: IFFALSE 23871
// continue ;
23869: GO 23803
// if HexInfo ( _x , _y ) = 0 then
23871: LD_VAR 0 7
23875: PPUSH
23876: LD_VAR 0 8
23880: PPUSH
23881: CALL_OW 428
23885: PUSH
23886: LD_INT 0
23888: EQUAL
23889: IFFALSE 23914
// begin ComMoveXY ( unit , _x , _y ) ;
23891: LD_VAR 0 1
23895: PPUSH
23896: LD_VAR 0 7
23900: PPUSH
23901: LD_VAR 0 8
23905: PPUSH
23906: CALL_OW 111
// exit ;
23910: POP
23911: POP
23912: GO 23918
// end ; end ;
23914: GO 23803
23916: POP
23917: POP
// end ;
23918: LD_VAR 0 3
23922: RET
// export function ScanBase ( side , base_area ) ; begin
23923: LD_INT 0
23925: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23926: LD_ADDR_VAR 0 3
23930: PUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: LD_INT 81
23938: PUSH
23939: LD_VAR 0 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PPUSH
23948: CALL_OW 70
23952: ST_TO_ADDR
// end ;
23953: LD_VAR 0 3
23957: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23958: LD_INT 0
23960: PPUSH
23961: PPUSH
23962: PPUSH
23963: PPUSH
// result := false ;
23964: LD_ADDR_VAR 0 2
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
// side := GetSide ( unit ) ;
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 255
23986: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23987: LD_ADDR_VAR 0 4
23991: PUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 248
24001: ST_TO_ADDR
// case nat of 1 :
24002: LD_VAR 0 4
24006: PUSH
24007: LD_INT 1
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24026
24015: POP
// tech := tech_lassight ; 2 :
24016: LD_ADDR_VAR 0 5
24020: PUSH
24021: LD_INT 12
24023: ST_TO_ADDR
24024: GO 24065
24026: LD_INT 2
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24045
24034: POP
// tech := tech_mortar ; 3 :
24035: LD_ADDR_VAR 0 5
24039: PUSH
24040: LD_INT 41
24042: ST_TO_ADDR
24043: GO 24065
24045: LD_INT 3
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24064
24053: POP
// tech := tech_bazooka ; end ;
24054: LD_ADDR_VAR 0 5
24058: PUSH
24059: LD_INT 44
24061: ST_TO_ADDR
24062: GO 24065
24064: POP
// if Researched ( side , tech ) then
24065: LD_VAR 0 3
24069: PPUSH
24070: LD_VAR 0 5
24074: PPUSH
24075: CALL_OW 325
24079: IFFALSE 24106
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24081: LD_ADDR_VAR 0 2
24085: PUSH
24086: LD_INT 5
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: LD_INT 9
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: PUSH
24100: LD_VAR 0 4
24104: ARRAY
24105: ST_TO_ADDR
// end ;
24106: LD_VAR 0 2
24110: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
24115: PPUSH
// if not mines then
24116: LD_VAR 0 2
24120: NOT
24121: IFFALSE 24125
// exit ;
24123: GO 24269
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24125: LD_ADDR_VAR 0 5
24129: PUSH
24130: LD_INT 81
24132: PUSH
24133: LD_VAR 0 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: LD_INT 21
24147: PUSH
24148: LD_INT 3
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ST_TO_ADDR
// for i in mines do
24168: LD_ADDR_VAR 0 4
24172: PUSH
24173: LD_VAR 0 2
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24267
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24181: LD_VAR 0 4
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: LD_VAR 0 4
24194: PUSH
24195: LD_INT 2
24197: ARRAY
24198: PPUSH
24199: CALL_OW 458
24203: NOT
24204: IFFALSE 24208
// continue ;
24206: GO 24178
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24208: LD_VAR 0 4
24212: PUSH
24213: LD_INT 1
24215: ARRAY
24216: PPUSH
24217: LD_VAR 0 4
24221: PUSH
24222: LD_INT 2
24224: ARRAY
24225: PPUSH
24226: CALL_OW 428
24230: PUSH
24231: LD_VAR 0 5
24235: IN
24236: IFFALSE 24265
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24238: LD_VAR 0 4
24242: PUSH
24243: LD_INT 1
24245: ARRAY
24246: PPUSH
24247: LD_VAR 0 4
24251: PUSH
24252: LD_INT 2
24254: ARRAY
24255: PPUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL_OW 456
// end ;
24265: GO 24178
24267: POP
24268: POP
// end ;
24269: LD_VAR 0 3
24273: RET
// export function Count ( array ) ; begin
24274: LD_INT 0
24276: PPUSH
// result := array + 0 ;
24277: LD_ADDR_VAR 0 2
24281: PUSH
24282: LD_VAR 0 1
24286: PUSH
24287: LD_INT 0
24289: PLUS
24290: ST_TO_ADDR
// end ;
24291: LD_VAR 0 2
24295: RET
// export function IsEmpty ( building ) ; begin
24296: LD_INT 0
24298: PPUSH
// if not building then
24299: LD_VAR 0 1
24303: NOT
24304: IFFALSE 24308
// exit ;
24306: GO 24351
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24308: LD_ADDR_VAR 0 2
24312: PUSH
24313: LD_VAR 0 1
24317: PUSH
24318: LD_INT 22
24320: PUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL_OW 255
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 58
24337: PUSH
24338: EMPTY
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PPUSH
24345: CALL_OW 69
24349: IN
24350: ST_TO_ADDR
// end ;
24351: LD_VAR 0 2
24355: RET
// export function IsNotFull ( building ) ; var places ; begin
24356: LD_INT 0
24358: PPUSH
24359: PPUSH
// if not building then
24360: LD_VAR 0 1
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24397
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_INT 3
24381: PUSH
24382: LD_INT 62
24384: PUSH
24385: EMPTY
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PPUSH
24392: CALL_OW 72
24396: ST_TO_ADDR
// end ;
24397: LD_VAR 0 2
24401: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24402: LD_INT 0
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
// tmp := [ ] ;
24408: LD_ADDR_VAR 0 3
24412: PUSH
24413: EMPTY
24414: ST_TO_ADDR
// list := [ ] ;
24415: LD_ADDR_VAR 0 5
24419: PUSH
24420: EMPTY
24421: ST_TO_ADDR
// for i = 16 to 25 do
24422: LD_ADDR_VAR 0 4
24426: PUSH
24427: DOUBLE
24428: LD_INT 16
24430: DEC
24431: ST_TO_ADDR
24432: LD_INT 25
24434: PUSH
24435: FOR_TO
24436: IFFALSE 24509
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_VAR 0 3
24447: PUSH
24448: LD_INT 22
24450: PUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 255
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 91
24467: PUSH
24468: LD_VAR 0 1
24472: PUSH
24473: LD_INT 6
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_VAR 0 4
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: ADD
24506: ST_TO_ADDR
24507: GO 24435
24509: POP
24510: POP
// for i = 1 to tmp do
24511: LD_ADDR_VAR 0 4
24515: PUSH
24516: DOUBLE
24517: LD_INT 1
24519: DEC
24520: ST_TO_ADDR
24521: LD_VAR 0 3
24525: PUSH
24526: FOR_TO
24527: IFFALSE 24615
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24529: LD_ADDR_VAR 0 5
24533: PUSH
24534: LD_VAR 0 5
24538: PUSH
24539: LD_VAR 0 3
24543: PUSH
24544: LD_VAR 0 4
24548: ARRAY
24549: PPUSH
24550: CALL_OW 266
24554: PUSH
24555: LD_VAR 0 3
24559: PUSH
24560: LD_VAR 0 4
24564: ARRAY
24565: PPUSH
24566: CALL_OW 250
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 4
24580: ARRAY
24581: PPUSH
24582: CALL_OW 251
24586: PUSH
24587: LD_VAR 0 3
24591: PUSH
24592: LD_VAR 0 4
24596: ARRAY
24597: PPUSH
24598: CALL_OW 254
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: ADD
24612: ST_TO_ADDR
24613: GO 24526
24615: POP
24616: POP
// result := list ;
24617: LD_ADDR_VAR 0 2
24621: PUSH
24622: LD_VAR 0 5
24626: ST_TO_ADDR
// end ;
24627: LD_VAR 0 2
24631: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
// if not factory then
24641: LD_VAR 0 1
24645: NOT
24646: IFFALSE 24650
// exit ;
24648: GO 25253
// if control = control_apeman then
24650: LD_VAR 0 4
24654: PUSH
24655: LD_INT 5
24657: EQUAL
24658: IFFALSE 24767
// begin tmp := UnitsInside ( factory ) ;
24660: LD_ADDR_VAR 0 8
24664: PUSH
24665: LD_VAR 0 1
24669: PPUSH
24670: CALL_OW 313
24674: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24675: LD_VAR 0 8
24679: PPUSH
24680: LD_INT 25
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PPUSH
24690: CALL_OW 72
24694: NOT
24695: IFFALSE 24705
// control := control_manual ;
24697: LD_ADDR_VAR 0 4
24701: PUSH
24702: LD_INT 1
24704: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24705: LD_ADDR_VAR 0 8
24709: PUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: CALL 24402 0 1
24719: ST_TO_ADDR
// if tmp then
24720: LD_VAR 0 8
24724: IFFALSE 24767
// begin for i in tmp do
24726: LD_ADDR_VAR 0 7
24730: PUSH
24731: LD_VAR 0 8
24735: PUSH
24736: FOR_IN
24737: IFFALSE 24765
// if i [ 1 ] = b_ext_radio then
24739: LD_VAR 0 7
24743: PUSH
24744: LD_INT 1
24746: ARRAY
24747: PUSH
24748: LD_INT 22
24750: EQUAL
24751: IFFALSE 24763
// begin control := control_remote ;
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: LD_INT 2
24760: ST_TO_ADDR
// break ;
24761: GO 24765
// end ;
24763: GO 24736
24765: POP
24766: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24767: LD_VAR 0 1
24771: PPUSH
24772: LD_VAR 0 2
24776: PPUSH
24777: LD_VAR 0 3
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: LD_VAR 0 5
24791: PPUSH
24792: CALL_OW 448
24796: IFFALSE 24831
// begin result := [ chassis , engine , control , weapon ] ;
24798: LD_ADDR_VAR 0 6
24802: PUSH
24803: LD_VAR 0 2
24807: PUSH
24808: LD_VAR 0 3
24812: PUSH
24813: LD_VAR 0 4
24817: PUSH
24818: LD_VAR 0 5
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: ST_TO_ADDR
// exit ;
24829: GO 25253
// end ; _chassis := AvailableChassisList ( factory ) ;
24831: LD_ADDR_VAR 0 9
24835: PUSH
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL_OW 475
24845: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24846: LD_ADDR_VAR 0 11
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: CALL_OW 476
24860: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24861: LD_ADDR_VAR 0 12
24865: PUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 477
24875: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24876: LD_ADDR_VAR 0 10
24880: PUSH
24881: LD_VAR 0 1
24885: PPUSH
24886: CALL_OW 478
24890: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24891: LD_VAR 0 9
24895: NOT
24896: IFTRUE 24905
24898: PUSH
24899: LD_VAR 0 11
24903: NOT
24904: OR
24905: IFTRUE 24914
24907: PUSH
24908: LD_VAR 0 12
24912: NOT
24913: OR
24914: IFTRUE 24923
24916: PUSH
24917: LD_VAR 0 10
24921: NOT
24922: OR
24923: IFFALSE 24958
// begin result := [ chassis , engine , control , weapon ] ;
24925: LD_ADDR_VAR 0 6
24929: PUSH
24930: LD_VAR 0 2
24934: PUSH
24935: LD_VAR 0 3
24939: PUSH
24940: LD_VAR 0 4
24944: PUSH
24945: LD_VAR 0 5
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
// exit ;
24956: GO 25253
// end ; if not chassis in _chassis then
24958: LD_VAR 0 2
24962: PUSH
24963: LD_VAR 0 9
24967: IN
24968: NOT
24969: IFFALSE 24995
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24971: LD_ADDR_VAR 0 2
24975: PUSH
24976: LD_VAR 0 9
24980: PUSH
24981: LD_INT 1
24983: PPUSH
24984: LD_VAR 0 9
24988: PPUSH
24989: CALL_OW 12
24993: ARRAY
24994: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24995: LD_VAR 0 2
24999: PPUSH
25000: LD_VAR 0 3
25004: PPUSH
25005: CALL 25258 0 2
25009: NOT
25010: IFFALSE 25071
// repeat engine := _engine [ 1 ] ;
25012: LD_ADDR_VAR 0 3
25016: PUSH
25017: LD_VAR 0 11
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25026: LD_ADDR_VAR 0 11
25030: PUSH
25031: LD_VAR 0 11
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: CALL_OW 3
25043: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25044: LD_VAR 0 2
25048: PPUSH
25049: LD_VAR 0 3
25053: PPUSH
25054: CALL 25258 0 2
25058: IFTRUE 25069
25060: PUSH
25061: LD_VAR 0 11
25065: PUSH
25066: EMPTY
25067: EQUAL
25068: OR
25069: IFFALSE 25012
// if not control in _control then
25071: LD_VAR 0 4
25075: PUSH
25076: LD_VAR 0 12
25080: IN
25081: NOT
25082: IFFALSE 25108
// control := _control [ rand ( 1 , _control ) ] ;
25084: LD_ADDR_VAR 0 4
25088: PUSH
25089: LD_VAR 0 12
25093: PUSH
25094: LD_INT 1
25096: PPUSH
25097: LD_VAR 0 12
25101: PPUSH
25102: CALL_OW 12
25106: ARRAY
25107: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25108: LD_VAR 0 2
25112: PPUSH
25113: LD_VAR 0 5
25117: PPUSH
25118: CALL 25480 0 2
25122: NOT
25123: IFFALSE 25184
// repeat weapon := _weapon [ 1 ] ;
25125: LD_ADDR_VAR 0 5
25129: PUSH
25130: LD_VAR 0 10
25134: PUSH
25135: LD_INT 1
25137: ARRAY
25138: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25139: LD_ADDR_VAR 0 10
25143: PUSH
25144: LD_VAR 0 10
25148: PPUSH
25149: LD_INT 1
25151: PPUSH
25152: CALL_OW 3
25156: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25157: LD_VAR 0 2
25161: PPUSH
25162: LD_VAR 0 5
25166: PPUSH
25167: CALL 25480 0 2
25171: IFTRUE 25182
25173: PUSH
25174: LD_VAR 0 10
25178: PUSH
25179: EMPTY
25180: EQUAL
25181: OR
25182: IFFALSE 25125
// result := [ ] ;
25184: LD_ADDR_VAR 0 6
25188: PUSH
25189: EMPTY
25190: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25191: LD_VAR 0 1
25195: PPUSH
25196: LD_VAR 0 2
25200: PPUSH
25201: LD_VAR 0 3
25205: PPUSH
25206: LD_VAR 0 4
25210: PPUSH
25211: LD_VAR 0 5
25215: PPUSH
25216: CALL_OW 448
25220: IFFALSE 25253
// result := [ chassis , engine , control , weapon ] ;
25222: LD_ADDR_VAR 0 6
25226: PUSH
25227: LD_VAR 0 2
25231: PUSH
25232: LD_VAR 0 3
25236: PUSH
25237: LD_VAR 0 4
25241: PUSH
25242: LD_VAR 0 5
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: ST_TO_ADDR
// end ;
25253: LD_VAR 0 6
25257: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25258: LD_INT 0
25260: PPUSH
// if not chassis or not engine then
25261: LD_VAR 0 1
25265: NOT
25266: IFTRUE 25275
25268: PUSH
25269: LD_VAR 0 2
25273: NOT
25274: OR
25275: IFFALSE 25279
// exit ;
25277: GO 25475
// case engine of engine_solar :
25279: LD_VAR 0 2
25283: PUSH
25284: LD_INT 2
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25330
25292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 11
25300: PUSH
25301: LD_INT 12
25303: PUSH
25304: LD_INT 13
25306: PUSH
25307: LD_INT 14
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
25328: GO 25459
25330: LD_INT 1
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25400
25338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25339: LD_ADDR_VAR 0 3
25343: PUSH
25344: LD_INT 11
25346: PUSH
25347: LD_INT 12
25349: PUSH
25350: LD_INT 13
25352: PUSH
25353: LD_INT 14
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 3
25364: PUSH
25365: LD_INT 4
25367: PUSH
25368: LD_INT 5
25370: PUSH
25371: LD_INT 21
25373: PUSH
25374: LD_INT 23
25376: PUSH
25377: LD_INT 22
25379: PUSH
25380: LD_INT 24
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: ST_TO_ADDR
25398: GO 25459
25400: LD_INT 3
25402: DOUBLE
25403: EQUAL
25404: IFTRUE 25408
25406: GO 25458
25408: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25409: LD_ADDR_VAR 0 3
25413: PUSH
25414: LD_INT 13
25416: PUSH
25417: LD_INT 14
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: LD_INT 4
25428: PUSH
25429: LD_INT 5
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_INT 23
25440: PUSH
25441: LD_INT 24
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: ST_TO_ADDR
25456: GO 25459
25458: POP
// result := ( chassis in result ) ;
25459: LD_ADDR_VAR 0 3
25463: PUSH
25464: LD_VAR 0 1
25468: PUSH
25469: LD_VAR 0 3
25473: IN
25474: ST_TO_ADDR
// end ;
25475: LD_VAR 0 3
25479: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25480: LD_INT 0
25482: PPUSH
// if not chassis or not weapon then
25483: LD_VAR 0 1
25487: NOT
25488: IFTRUE 25497
25490: PUSH
25491: LD_VAR 0 2
25495: NOT
25496: OR
25497: IFFALSE 25501
// exit ;
25499: GO 26595
// case weapon of us_machine_gun :
25501: LD_VAR 0 2
25505: PUSH
25506: LD_INT 2
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25544
25514: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: LD_INT 5
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: ST_TO_ADDR
25542: GO 26579
25544: LD_INT 3
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25582
25552: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25553: LD_ADDR_VAR 0 3
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: LD_INT 4
25569: PUSH
25570: LD_INT 5
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: ST_TO_ADDR
25580: GO 26579
25582: LD_INT 11
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25620
25590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25591: LD_ADDR_VAR 0 3
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 3
25604: PUSH
25605: LD_INT 4
25607: PUSH
25608: LD_INT 5
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: ST_TO_ADDR
25618: GO 26579
25620: LD_INT 4
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25654
25628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25629: LD_ADDR_VAR 0 3
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 4
25642: PUSH
25643: LD_INT 5
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: ST_TO_ADDR
25652: GO 26579
25654: LD_INT 5
25656: DOUBLE
25657: EQUAL
25658: IFTRUE 25662
25660: GO 25688
25662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: LD_INT 4
25676: PUSH
25677: LD_INT 5
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: ST_TO_ADDR
25686: GO 26579
25688: LD_INT 9
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25722
25696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 3
25707: PUSH
25708: LD_INT 4
25710: PUSH
25711: LD_INT 5
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
25720: GO 26579
25722: LD_INT 7
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25756
25730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: LD_INT 4
25744: PUSH
25745: LD_INT 5
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: ST_TO_ADDR
25754: GO 26579
25756: LD_INT 12
25758: DOUBLE
25759: EQUAL
25760: IFTRUE 25764
25762: GO 25790
25764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: LD_INT 4
25778: PUSH
25779: LD_INT 5
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
25788: GO 26579
25790: LD_INT 13
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25798
25796: GO 25824
25798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25799: LD_ADDR_VAR 0 3
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: LD_INT 4
25812: PUSH
25813: LD_INT 5
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: ST_TO_ADDR
25822: GO 26579
25824: LD_INT 14
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25832
25830: GO 25850
25832: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: LD_INT 4
25840: PUSH
25841: LD_INT 5
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: ST_TO_ADDR
25848: GO 26579
25850: LD_INT 6
25852: DOUBLE
25853: EQUAL
25854: IFTRUE 25858
25856: GO 25876
25858: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: LD_INT 4
25866: PUSH
25867: LD_INT 5
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: ST_TO_ADDR
25874: GO 26579
25876: LD_INT 10
25878: DOUBLE
25879: EQUAL
25880: IFTRUE 25884
25882: GO 25902
25884: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: LD_INT 4
25892: PUSH
25893: LD_INT 5
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: ST_TO_ADDR
25900: GO 26579
25902: LD_INT 22
25904: DOUBLE
25905: EQUAL
25906: IFTRUE 25910
25908: GO 25936
25910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_INT 11
25918: PUSH
25919: LD_INT 12
25921: PUSH
25922: LD_INT 13
25924: PUSH
25925: LD_INT 14
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
25934: GO 26579
25936: LD_INT 23
25938: DOUBLE
25939: EQUAL
25940: IFTRUE 25944
25942: GO 25970
25944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25945: LD_ADDR_VAR 0 3
25949: PUSH
25950: LD_INT 11
25952: PUSH
25953: LD_INT 12
25955: PUSH
25956: LD_INT 13
25958: PUSH
25959: LD_INT 14
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
25968: GO 26579
25970: LD_INT 24
25972: DOUBLE
25973: EQUAL
25974: IFTRUE 25978
25976: GO 26004
25978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_INT 11
25986: PUSH
25987: LD_INT 12
25989: PUSH
25990: LD_INT 13
25992: PUSH
25993: LD_INT 14
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: ST_TO_ADDR
26002: GO 26579
26004: LD_INT 30
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 26038
26012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26013: LD_ADDR_VAR 0 3
26017: PUSH
26018: LD_INT 11
26020: PUSH
26021: LD_INT 12
26023: PUSH
26024: LD_INT 13
26026: PUSH
26027: LD_INT 14
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
26036: GO 26579
26038: LD_INT 25
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26064
26046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_INT 13
26054: PUSH
26055: LD_INT 14
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: ST_TO_ADDR
26062: GO 26579
26064: LD_INT 27
26066: DOUBLE
26067: EQUAL
26068: IFTRUE 26072
26070: GO 26090
26072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26073: LD_ADDR_VAR 0 3
26077: PUSH
26078: LD_INT 13
26080: PUSH
26081: LD_INT 14
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: ST_TO_ADDR
26088: GO 26579
26090: LD_INT 92
26092: DOUBLE
26093: EQUAL
26094: IFTRUE 26098
26096: GO 26124
26098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26099: LD_ADDR_VAR 0 3
26103: PUSH
26104: LD_INT 11
26106: PUSH
26107: LD_INT 12
26109: PUSH
26110: LD_INT 13
26112: PUSH
26113: LD_INT 14
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: ST_TO_ADDR
26122: GO 26579
26124: LD_INT 28
26126: DOUBLE
26127: EQUAL
26128: IFTRUE 26132
26130: GO 26150
26132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26133: LD_ADDR_VAR 0 3
26137: PUSH
26138: LD_INT 13
26140: PUSH
26141: LD_INT 14
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: ST_TO_ADDR
26148: GO 26579
26150: LD_INT 29
26152: DOUBLE
26153: EQUAL
26154: IFTRUE 26158
26156: GO 26176
26158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26159: LD_ADDR_VAR 0 3
26163: PUSH
26164: LD_INT 13
26166: PUSH
26167: LD_INT 14
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: ST_TO_ADDR
26174: GO 26579
26176: LD_INT 31
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26184
26182: GO 26202
26184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_INT 13
26192: PUSH
26193: LD_INT 14
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: ST_TO_ADDR
26200: GO 26579
26202: LD_INT 26
26204: DOUBLE
26205: EQUAL
26206: IFTRUE 26210
26208: GO 26228
26210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_INT 13
26218: PUSH
26219: LD_INT 14
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: ST_TO_ADDR
26226: GO 26579
26228: LD_INT 42
26230: DOUBLE
26231: EQUAL
26232: IFTRUE 26236
26234: GO 26262
26236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_INT 21
26244: PUSH
26245: LD_INT 22
26247: PUSH
26248: LD_INT 23
26250: PUSH
26251: LD_INT 24
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
26260: GO 26579
26262: LD_INT 43
26264: DOUBLE
26265: EQUAL
26266: IFTRUE 26270
26268: GO 26296
26270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26271: LD_ADDR_VAR 0 3
26275: PUSH
26276: LD_INT 21
26278: PUSH
26279: LD_INT 22
26281: PUSH
26282: LD_INT 23
26284: PUSH
26285: LD_INT 24
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: ST_TO_ADDR
26294: GO 26579
26296: LD_INT 44
26298: DOUBLE
26299: EQUAL
26300: IFTRUE 26304
26302: GO 26330
26304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26305: LD_ADDR_VAR 0 3
26309: PUSH
26310: LD_INT 21
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_INT 23
26318: PUSH
26319: LD_INT 24
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: ST_TO_ADDR
26328: GO 26579
26330: LD_INT 45
26332: DOUBLE
26333: EQUAL
26334: IFTRUE 26338
26336: GO 26364
26338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26339: LD_ADDR_VAR 0 3
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 22
26349: PUSH
26350: LD_INT 23
26352: PUSH
26353: LD_INT 24
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: ST_TO_ADDR
26362: GO 26579
26364: LD_INT 49
26366: DOUBLE
26367: EQUAL
26368: IFTRUE 26372
26370: GO 26398
26372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26373: LD_ADDR_VAR 0 3
26377: PUSH
26378: LD_INT 21
26380: PUSH
26381: LD_INT 22
26383: PUSH
26384: LD_INT 23
26386: PUSH
26387: LD_INT 24
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: ST_TO_ADDR
26396: GO 26579
26398: LD_INT 51
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26432
26406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26407: LD_ADDR_VAR 0 3
26411: PUSH
26412: LD_INT 21
26414: PUSH
26415: LD_INT 22
26417: PUSH
26418: LD_INT 23
26420: PUSH
26421: LD_INT 24
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: ST_TO_ADDR
26430: GO 26579
26432: LD_INT 52
26434: DOUBLE
26435: EQUAL
26436: IFTRUE 26440
26438: GO 26466
26440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26441: LD_ADDR_VAR 0 3
26445: PUSH
26446: LD_INT 21
26448: PUSH
26449: LD_INT 22
26451: PUSH
26452: LD_INT 23
26454: PUSH
26455: LD_INT 24
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
26464: GO 26579
26466: LD_INT 53
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26492
26474: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_INT 23
26482: PUSH
26483: LD_INT 24
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: ST_TO_ADDR
26490: GO 26579
26492: LD_INT 46
26494: DOUBLE
26495: EQUAL
26496: IFTRUE 26500
26498: GO 26518
26500: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26501: LD_ADDR_VAR 0 3
26505: PUSH
26506: LD_INT 23
26508: PUSH
26509: LD_INT 24
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: ST_TO_ADDR
26516: GO 26579
26518: LD_INT 47
26520: DOUBLE
26521: EQUAL
26522: IFTRUE 26526
26524: GO 26544
26526: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: LD_INT 23
26534: PUSH
26535: LD_INT 24
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: ST_TO_ADDR
26542: GO 26579
26544: LD_INT 98
26546: DOUBLE
26547: EQUAL
26548: IFTRUE 26552
26550: GO 26578
26552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_INT 23
26566: PUSH
26567: LD_INT 24
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: ST_TO_ADDR
26576: GO 26579
26578: POP
// result := ( chassis in result ) ;
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: LD_VAR 0 1
26588: PUSH
26589: LD_VAR 0 3
26593: IN
26594: ST_TO_ADDR
// end ;
26595: LD_VAR 0 3
26599: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
26604: PPUSH
26605: PPUSH
26606: PPUSH
26607: PPUSH
26608: PPUSH
// result := array ;
26609: LD_ADDR_VAR 0 5
26613: PUSH
26614: LD_VAR 0 1
26618: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26619: LD_VAR 0 1
26623: NOT
26624: IFTRUE 26633
26626: PUSH
26627: LD_VAR 0 2
26631: NOT
26632: OR
26633: IFTRUE 26642
26635: PUSH
26636: LD_VAR 0 3
26640: NOT
26641: OR
26642: IFTRUE 26656
26644: PUSH
26645: LD_VAR 0 2
26649: PUSH
26650: LD_VAR 0 1
26654: GREATER
26655: OR
26656: IFTRUE 26670
26658: PUSH
26659: LD_VAR 0 3
26663: PUSH
26664: LD_VAR 0 1
26668: GREATER
26669: OR
26670: IFFALSE 26674
// exit ;
26672: GO 26970
// if direction then
26674: LD_VAR 0 4
26678: IFFALSE 26742
// begin d := 1 ;
26680: LD_ADDR_VAR 0 9
26684: PUSH
26685: LD_INT 1
26687: ST_TO_ADDR
// if i_from > i_to then
26688: LD_VAR 0 2
26692: PUSH
26693: LD_VAR 0 3
26697: GREATER
26698: IFFALSE 26724
// length := ( array - i_from ) + i_to else
26700: LD_ADDR_VAR 0 11
26704: PUSH
26705: LD_VAR 0 1
26709: PUSH
26710: LD_VAR 0 2
26714: MINUS
26715: PUSH
26716: LD_VAR 0 3
26720: PLUS
26721: ST_TO_ADDR
26722: GO 26740
// length := i_to - i_from ;
26724: LD_ADDR_VAR 0 11
26728: PUSH
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 2
26738: MINUS
26739: ST_TO_ADDR
// end else
26740: GO 26803
// begin d := - 1 ;
26742: LD_ADDR_VAR 0 9
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: ST_TO_ADDR
// if i_from > i_to then
26751: LD_VAR 0 2
26755: PUSH
26756: LD_VAR 0 3
26760: GREATER
26761: IFFALSE 26781
// length := i_from - i_to else
26763: LD_ADDR_VAR 0 11
26767: PUSH
26768: LD_VAR 0 2
26772: PUSH
26773: LD_VAR 0 3
26777: MINUS
26778: ST_TO_ADDR
26779: GO 26803
// length := ( array - i_to ) + i_from ;
26781: LD_ADDR_VAR 0 11
26785: PUSH
26786: LD_VAR 0 1
26790: PUSH
26791: LD_VAR 0 3
26795: MINUS
26796: PUSH
26797: LD_VAR 0 2
26801: PLUS
26802: ST_TO_ADDR
// end ; if not length then
26803: LD_VAR 0 11
26807: NOT
26808: IFFALSE 26812
// exit ;
26810: GO 26970
// tmp := array ;
26812: LD_ADDR_VAR 0 10
26816: PUSH
26817: LD_VAR 0 1
26821: ST_TO_ADDR
// for i = 1 to length do
26822: LD_ADDR_VAR 0 6
26826: PUSH
26827: DOUBLE
26828: LD_INT 1
26830: DEC
26831: ST_TO_ADDR
26832: LD_VAR 0 11
26836: PUSH
26837: FOR_TO
26838: IFFALSE 26958
// begin for j = 1 to array do
26840: LD_ADDR_VAR 0 7
26844: PUSH
26845: DOUBLE
26846: LD_INT 1
26848: DEC
26849: ST_TO_ADDR
26850: LD_VAR 0 1
26854: PUSH
26855: FOR_TO
26856: IFFALSE 26944
// begin k := j + d ;
26858: LD_ADDR_VAR 0 8
26862: PUSH
26863: LD_VAR 0 7
26867: PUSH
26868: LD_VAR 0 9
26872: PLUS
26873: ST_TO_ADDR
// if k > array then
26874: LD_VAR 0 8
26878: PUSH
26879: LD_VAR 0 1
26883: GREATER
26884: IFFALSE 26894
// k := 1 ;
26886: LD_ADDR_VAR 0 8
26890: PUSH
26891: LD_INT 1
26893: ST_TO_ADDR
// if not k then
26894: LD_VAR 0 8
26898: NOT
26899: IFFALSE 26911
// k := array ;
26901: LD_ADDR_VAR 0 8
26905: PUSH
26906: LD_VAR 0 1
26910: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26911: LD_ADDR_VAR 0 10
26915: PUSH
26916: LD_VAR 0 10
26920: PPUSH
26921: LD_VAR 0 8
26925: PPUSH
26926: LD_VAR 0 1
26930: PUSH
26931: LD_VAR 0 7
26935: ARRAY
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end ;
26942: GO 26855
26944: POP
26945: POP
// array := tmp ;
26946: LD_ADDR_VAR 0 1
26950: PUSH
26951: LD_VAR 0 10
26955: ST_TO_ADDR
// end ;
26956: GO 26837
26958: POP
26959: POP
// result := array ;
26960: LD_ADDR_VAR 0 5
26964: PUSH
26965: LD_VAR 0 1
26969: ST_TO_ADDR
// end ;
26970: LD_VAR 0 5
26974: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26975: LD_INT 0
26977: PPUSH
26978: PPUSH
// result := 0 ;
26979: LD_ADDR_VAR 0 3
26983: PUSH
26984: LD_INT 0
26986: ST_TO_ADDR
// if not array or not value in array then
26987: LD_VAR 0 1
26991: NOT
26992: IFTRUE 27007
26994: PUSH
26995: LD_VAR 0 2
26999: PUSH
27000: LD_VAR 0 1
27004: IN
27005: NOT
27006: OR
27007: IFFALSE 27011
// exit ;
27009: GO 27065
// for i = 1 to array do
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: DOUBLE
27017: LD_INT 1
27019: DEC
27020: ST_TO_ADDR
27021: LD_VAR 0 1
27025: PUSH
27026: FOR_TO
27027: IFFALSE 27063
// if value = array [ i ] then
27029: LD_VAR 0 2
27033: PUSH
27034: LD_VAR 0 1
27038: PUSH
27039: LD_VAR 0 4
27043: ARRAY
27044: EQUAL
27045: IFFALSE 27061
// begin result := i ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 4
27056: ST_TO_ADDR
// exit ;
27057: POP
27058: POP
27059: GO 27065
// end ;
27061: GO 27026
27063: POP
27064: POP
// end ;
27065: LD_VAR 0 3
27069: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27070: LD_INT 0
27072: PPUSH
// vc_chassis := chassis ;
27073: LD_ADDR_OWVAR 37
27077: PUSH
27078: LD_VAR 0 1
27082: ST_TO_ADDR
// vc_engine := engine ;
27083: LD_ADDR_OWVAR 39
27087: PUSH
27088: LD_VAR 0 2
27092: ST_TO_ADDR
// vc_control := control ;
27093: LD_ADDR_OWVAR 38
27097: PUSH
27098: LD_VAR 0 3
27102: ST_TO_ADDR
// vc_weapon := weapon ;
27103: LD_ADDR_OWVAR 40
27107: PUSH
27108: LD_VAR 0 4
27112: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27113: LD_ADDR_OWVAR 41
27117: PUSH
27118: LD_VAR 0 5
27122: ST_TO_ADDR
// end ;
27123: LD_VAR 0 6
27127: RET
// export function WantPlant ( unit ) ; var task ; begin
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
// result := false ;
27132: LD_ADDR_VAR 0 2
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27140: LD_ADDR_VAR 0 3
27144: PUSH
27145: LD_VAR 0 1
27149: PPUSH
27150: CALL_OW 437
27154: ST_TO_ADDR
// if task then
27155: LD_VAR 0 3
27159: IFFALSE 27187
// if task [ 1 ] [ 1 ] = p then
27161: LD_VAR 0 3
27165: PUSH
27166: LD_INT 1
27168: ARRAY
27169: PUSH
27170: LD_INT 1
27172: ARRAY
27173: PUSH
27174: LD_STRING p
27176: EQUAL
27177: IFFALSE 27187
// result := true ;
27179: LD_ADDR_VAR 0 2
27183: PUSH
27184: LD_INT 1
27186: ST_TO_ADDR
// end ;
27187: LD_VAR 0 2
27191: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27192: LD_INT 0
27194: PPUSH
27195: PPUSH
27196: PPUSH
27197: PPUSH
// if pos < 1 then
27198: LD_VAR 0 2
27202: PUSH
27203: LD_INT 1
27205: LESS
27206: IFFALSE 27210
// exit ;
27208: GO 27513
// if pos = 1 then
27210: LD_VAR 0 2
27214: PUSH
27215: LD_INT 1
27217: EQUAL
27218: IFFALSE 27251
// result := Replace ( arr , pos [ 1 ] , value ) else
27220: LD_ADDR_VAR 0 4
27224: PUSH
27225: LD_VAR 0 1
27229: PPUSH
27230: LD_VAR 0 2
27234: PUSH
27235: LD_INT 1
27237: ARRAY
27238: PPUSH
27239: LD_VAR 0 3
27243: PPUSH
27244: CALL_OW 1
27248: ST_TO_ADDR
27249: GO 27513
// begin tmp := arr ;
27251: LD_ADDR_VAR 0 6
27255: PUSH
27256: LD_VAR 0 1
27260: ST_TO_ADDR
// s_arr := [ tmp ] ;
27261: LD_ADDR_VAR 0 7
27265: PUSH
27266: LD_VAR 0 6
27270: PUSH
27271: EMPTY
27272: LIST
27273: ST_TO_ADDR
// for i = 1 to pos - 1 do
27274: LD_ADDR_VAR 0 5
27278: PUSH
27279: DOUBLE
27280: LD_INT 1
27282: DEC
27283: ST_TO_ADDR
27284: LD_VAR 0 2
27288: PUSH
27289: LD_INT 1
27291: MINUS
27292: PUSH
27293: FOR_TO
27294: IFFALSE 27339
// begin tmp := tmp [ pos [ i ] ] ;
27296: LD_ADDR_VAR 0 6
27300: PUSH
27301: LD_VAR 0 6
27305: PUSH
27306: LD_VAR 0 2
27310: PUSH
27311: LD_VAR 0 5
27315: ARRAY
27316: ARRAY
27317: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27318: LD_ADDR_VAR 0 7
27322: PUSH
27323: LD_VAR 0 7
27327: PUSH
27328: LD_VAR 0 6
27332: PUSH
27333: EMPTY
27334: LIST
27335: ADD
27336: ST_TO_ADDR
// end ;
27337: GO 27293
27339: POP
27340: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27341: LD_ADDR_VAR 0 6
27345: PUSH
27346: LD_VAR 0 6
27350: PPUSH
27351: LD_VAR 0 2
27355: PUSH
27356: LD_VAR 0 2
27360: ARRAY
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 1
27371: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27372: LD_ADDR_VAR 0 7
27376: PUSH
27377: LD_VAR 0 7
27381: PPUSH
27382: LD_VAR 0 7
27386: PPUSH
27387: LD_VAR 0 6
27391: PPUSH
27392: CALL_OW 1
27396: ST_TO_ADDR
// for i = s_arr downto 2 do
27397: LD_ADDR_VAR 0 5
27401: PUSH
27402: DOUBLE
27403: LD_VAR 0 7
27407: INC
27408: ST_TO_ADDR
27409: LD_INT 2
27411: PUSH
27412: FOR_DOWNTO
27413: IFFALSE 27497
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27415: LD_ADDR_VAR 0 6
27419: PUSH
27420: LD_VAR 0 7
27424: PUSH
27425: LD_VAR 0 5
27429: PUSH
27430: LD_INT 1
27432: MINUS
27433: ARRAY
27434: PPUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 5
27444: PUSH
27445: LD_INT 1
27447: MINUS
27448: ARRAY
27449: PPUSH
27450: LD_VAR 0 7
27454: PUSH
27455: LD_VAR 0 5
27459: ARRAY
27460: PPUSH
27461: CALL_OW 1
27465: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27466: LD_ADDR_VAR 0 7
27470: PUSH
27471: LD_VAR 0 7
27475: PPUSH
27476: LD_VAR 0 5
27480: PUSH
27481: LD_INT 1
27483: MINUS
27484: PPUSH
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 1
27494: ST_TO_ADDR
// end ;
27495: GO 27412
27497: POP
27498: POP
// result := s_arr [ 1 ] ;
27499: LD_ADDR_VAR 0 4
27503: PUSH
27504: LD_VAR 0 7
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: ST_TO_ADDR
// end ; end ;
27513: LD_VAR 0 4
27517: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27518: LD_INT 0
27520: PPUSH
27521: PPUSH
// if not list then
27522: LD_VAR 0 1
27526: NOT
27527: IFFALSE 27531
// exit ;
27529: GO 27622
// i := list [ pos1 ] ;
27531: LD_ADDR_VAR 0 5
27535: PUSH
27536: LD_VAR 0 1
27540: PUSH
27541: LD_VAR 0 2
27545: ARRAY
27546: ST_TO_ADDR
// if not i then
27547: LD_VAR 0 5
27551: NOT
27552: IFFALSE 27556
// exit ;
27554: GO 27622
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 1
27575: PUSH
27576: LD_VAR 0 3
27580: ARRAY
27581: PPUSH
27582: CALL_OW 1
27586: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27587: LD_ADDR_VAR 0 1
27591: PUSH
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_VAR 0 3
27601: PPUSH
27602: LD_VAR 0 5
27606: PPUSH
27607: CALL_OW 1
27611: ST_TO_ADDR
// result := list ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_VAR 0 1
27621: ST_TO_ADDR
// end ;
27622: LD_VAR 0 4
27626: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27627: LD_INT 0
27629: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27630: LD_ADDR_VAR 0 5
27634: PUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 250
27644: PPUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: CALL_OW 251
27654: PPUSH
27655: LD_VAR 0 2
27659: PPUSH
27660: LD_VAR 0 3
27664: PPUSH
27665: LD_VAR 0 4
27669: PPUSH
27670: CALL 28052 0 5
27674: ST_TO_ADDR
// end ;
27675: LD_VAR 0 5
27679: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27680: LD_INT 0
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not list or not unit then
27686: LD_VAR 0 2
27690: NOT
27691: IFTRUE 27700
27693: PUSH
27694: LD_VAR 0 1
27698: NOT
27699: OR
27700: IFFALSE 27704
// exit ;
27702: GO 28047
// result := [ ] ;
27704: LD_ADDR_VAR 0 5
27708: PUSH
27709: EMPTY
27710: ST_TO_ADDR
// for i in list do
27711: LD_ADDR_VAR 0 6
27715: PUSH
27716: LD_VAR 0 2
27720: PUSH
27721: FOR_IN
27722: IFFALSE 27940
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27724: LD_ADDR_VAR 0 8
27728: PUSH
27729: LD_VAR 0 1
27733: PPUSH
27734: LD_VAR 0 6
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: LD_VAR 0 6
27747: PUSH
27748: LD_INT 2
27750: ARRAY
27751: PPUSH
27752: CALL_OW 297
27756: ST_TO_ADDR
// if not Count ( result ) then
27757: LD_VAR 0 5
27761: PPUSH
27762: CALL 24274 0 1
27766: NOT
27767: IFFALSE 27800
// begin result := Join ( result , [ i , tmp ] ) ;
27769: LD_ADDR_VAR 0 5
27773: PUSH
27774: LD_VAR 0 5
27778: PPUSH
27779: LD_VAR 0 6
27783: PUSH
27784: LD_VAR 0 8
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PPUSH
27793: CALL 60250 0 2
27797: ST_TO_ADDR
// continue ;
27798: GO 27721
// end ; if result [ result ] [ 2 ] <= tmp then
27800: LD_VAR 0 5
27804: PUSH
27805: LD_VAR 0 5
27809: ARRAY
27810: PUSH
27811: LD_INT 2
27813: ARRAY
27814: PUSH
27815: LD_VAR 0 8
27819: LESSEQUAL
27820: IFFALSE 27853
// result := Join ( result , [ i , tmp ] ) else
27822: LD_ADDR_VAR 0 5
27826: PUSH
27827: LD_VAR 0 5
27831: PPUSH
27832: LD_VAR 0 6
27836: PUSH
27837: LD_VAR 0 8
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PPUSH
27846: CALL 60250 0 2
27850: ST_TO_ADDR
27851: GO 27938
// begin for j := 1 to Count ( result ) do
27853: LD_ADDR_VAR 0 7
27857: PUSH
27858: DOUBLE
27859: LD_INT 1
27861: DEC
27862: ST_TO_ADDR
27863: LD_VAR 0 5
27867: PPUSH
27868: CALL 24274 0 1
27872: PUSH
27873: FOR_TO
27874: IFFALSE 27936
// begin if tmp < result [ j ] [ 2 ] then
27876: LD_VAR 0 8
27880: PUSH
27881: LD_VAR 0 5
27885: PUSH
27886: LD_VAR 0 7
27890: ARRAY
27891: PUSH
27892: LD_INT 2
27894: ARRAY
27895: LESS
27896: IFFALSE 27934
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27898: LD_ADDR_VAR 0 5
27902: PUSH
27903: LD_VAR 0 5
27907: PPUSH
27908: LD_VAR 0 7
27912: PPUSH
27913: LD_VAR 0 6
27917: PUSH
27918: LD_VAR 0 8
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PPUSH
27927: CALL_OW 2
27931: ST_TO_ADDR
// break ;
27932: GO 27936
// end ; end ;
27934: GO 27873
27936: POP
27937: POP
// end ; end ;
27938: GO 27721
27940: POP
27941: POP
// if result and not asc then
27942: LD_VAR 0 5
27946: IFFALSE 27955
27948: PUSH
27949: LD_VAR 0 3
27953: NOT
27954: AND
27955: IFFALSE 27972
// result := ReverseArray ( result ) ;
27957: LD_ADDR_VAR 0 5
27961: PUSH
27962: LD_VAR 0 5
27966: PPUSH
27967: CALL 55330 0 1
27971: ST_TO_ADDR
// tmp := [ ] ;
27972: LD_ADDR_VAR 0 8
27976: PUSH
27977: EMPTY
27978: ST_TO_ADDR
// if mode then
27979: LD_VAR 0 4
27983: IFFALSE 28047
// begin for i := 1 to result do
27985: LD_ADDR_VAR 0 6
27989: PUSH
27990: DOUBLE
27991: LD_INT 1
27993: DEC
27994: ST_TO_ADDR
27995: LD_VAR 0 5
27999: PUSH
28000: FOR_TO
28001: IFFALSE 28035
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28003: LD_ADDR_VAR 0 8
28007: PUSH
28008: LD_VAR 0 8
28012: PPUSH
28013: LD_VAR 0 5
28017: PUSH
28018: LD_VAR 0 6
28022: ARRAY
28023: PUSH
28024: LD_INT 1
28026: ARRAY
28027: PPUSH
28028: CALL 60250 0 2
28032: ST_TO_ADDR
28033: GO 28000
28035: POP
28036: POP
// result := tmp ;
28037: LD_ADDR_VAR 0 5
28041: PUSH
28042: LD_VAR 0 8
28046: ST_TO_ADDR
// end ; end ;
28047: LD_VAR 0 5
28051: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
// if not list then
28058: LD_VAR 0 3
28062: NOT
28063: IFFALSE 28067
// exit ;
28065: GO 28457
// result := [ ] ;
28067: LD_ADDR_VAR 0 6
28071: PUSH
28072: EMPTY
28073: ST_TO_ADDR
// for i in list do
28074: LD_ADDR_VAR 0 7
28078: PUSH
28079: LD_VAR 0 3
28083: PUSH
28084: FOR_IN
28085: IFFALSE 28287
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28087: LD_ADDR_VAR 0 9
28091: PUSH
28092: LD_VAR 0 7
28096: PPUSH
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_VAR 0 2
28106: PPUSH
28107: CALL_OW 297
28111: ST_TO_ADDR
// if not result then
28112: LD_VAR 0 6
28116: NOT
28117: IFFALSE 28143
// result := [ [ i , tmp ] ] else
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: LD_VAR 0 7
28128: PUSH
28129: LD_VAR 0 9
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: ST_TO_ADDR
28141: GO 28285
// begin if result [ result ] [ 2 ] <= tmp then
28143: LD_VAR 0 6
28147: PUSH
28148: LD_VAR 0 6
28152: ARRAY
28153: PUSH
28154: LD_INT 2
28156: ARRAY
28157: PUSH
28158: LD_VAR 0 9
28162: LESSEQUAL
28163: IFFALSE 28205
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28165: LD_ADDR_VAR 0 6
28169: PUSH
28170: LD_VAR 0 6
28174: PPUSH
28175: LD_VAR 0 6
28179: PUSH
28180: LD_INT 1
28182: PLUS
28183: PPUSH
28184: LD_VAR 0 7
28188: PUSH
28189: LD_VAR 0 9
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 2
28202: ST_TO_ADDR
28203: GO 28285
// for j := 1 to result do
28205: LD_ADDR_VAR 0 8
28209: PUSH
28210: DOUBLE
28211: LD_INT 1
28213: DEC
28214: ST_TO_ADDR
28215: LD_VAR 0 6
28219: PUSH
28220: FOR_TO
28221: IFFALSE 28283
// begin if tmp < result [ j ] [ 2 ] then
28223: LD_VAR 0 9
28227: PUSH
28228: LD_VAR 0 6
28232: PUSH
28233: LD_VAR 0 8
28237: ARRAY
28238: PUSH
28239: LD_INT 2
28241: ARRAY
28242: LESS
28243: IFFALSE 28281
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28245: LD_ADDR_VAR 0 6
28249: PUSH
28250: LD_VAR 0 6
28254: PPUSH
28255: LD_VAR 0 8
28259: PPUSH
28260: LD_VAR 0 7
28264: PUSH
28265: LD_VAR 0 9
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 2
28278: ST_TO_ADDR
// break ;
28279: GO 28283
// end ; end ;
28281: GO 28220
28283: POP
28284: POP
// end ; end ;
28285: GO 28084
28287: POP
28288: POP
// if result and not asc then
28289: LD_VAR 0 6
28293: IFFALSE 28302
28295: PUSH
28296: LD_VAR 0 4
28300: NOT
28301: AND
28302: IFFALSE 28377
// begin tmp := result ;
28304: LD_ADDR_VAR 0 9
28308: PUSH
28309: LD_VAR 0 6
28313: ST_TO_ADDR
// for i = tmp downto 1 do
28314: LD_ADDR_VAR 0 7
28318: PUSH
28319: DOUBLE
28320: LD_VAR 0 9
28324: INC
28325: ST_TO_ADDR
28326: LD_INT 1
28328: PUSH
28329: FOR_DOWNTO
28330: IFFALSE 28375
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28332: LD_ADDR_VAR 0 6
28336: PUSH
28337: LD_VAR 0 6
28341: PPUSH
28342: LD_VAR 0 9
28346: PUSH
28347: LD_VAR 0 7
28351: MINUS
28352: PUSH
28353: LD_INT 1
28355: PLUS
28356: PPUSH
28357: LD_VAR 0 9
28361: PUSH
28362: LD_VAR 0 7
28366: ARRAY
28367: PPUSH
28368: CALL_OW 1
28372: ST_TO_ADDR
28373: GO 28329
28375: POP
28376: POP
// end ; tmp := [ ] ;
28377: LD_ADDR_VAR 0 9
28381: PUSH
28382: EMPTY
28383: ST_TO_ADDR
// if mode then
28384: LD_VAR 0 5
28388: IFFALSE 28457
// begin for i = 1 to result do
28390: LD_ADDR_VAR 0 7
28394: PUSH
28395: DOUBLE
28396: LD_INT 1
28398: DEC
28399: ST_TO_ADDR
28400: LD_VAR 0 6
28404: PUSH
28405: FOR_TO
28406: IFFALSE 28445
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_VAR 0 9
28417: PPUSH
28418: LD_VAR 0 7
28422: PPUSH
28423: LD_VAR 0 6
28427: PUSH
28428: LD_VAR 0 7
28432: ARRAY
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: CALL_OW 1
28442: ST_TO_ADDR
28443: GO 28405
28445: POP
28446: POP
// result := tmp ;
28447: LD_ADDR_VAR 0 6
28451: PUSH
28452: LD_VAR 0 9
28456: ST_TO_ADDR
// end ; end ;
28457: LD_VAR 0 6
28461: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28462: LD_INT 0
28464: PPUSH
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
28469: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28470: LD_ADDR_VAR 0 5
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: EMPTY
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if not x or not y then
28492: LD_VAR 0 2
28496: NOT
28497: IFTRUE 28506
28499: PUSH
28500: LD_VAR 0 3
28504: NOT
28505: OR
28506: IFFALSE 28510
// exit ;
28508: GO 30166
// if not range then
28510: LD_VAR 0 4
28514: NOT
28515: IFFALSE 28525
// range := 10 ;
28517: LD_ADDR_VAR 0 4
28521: PUSH
28522: LD_INT 10
28524: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28525: LD_ADDR_VAR 0 8
28529: PUSH
28530: LD_INT 81
28532: PUSH
28533: LD_VAR 0 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 92
28544: PUSH
28545: LD_VAR 0 2
28549: PUSH
28550: LD_VAR 0 3
28554: PUSH
28555: LD_VAR 0 4
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: LD_INT 21
28571: PUSH
28572: LD_INT 3
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: PPUSH
28588: CALL_OW 69
28592: ST_TO_ADDR
// if not tmp then
28593: LD_VAR 0 8
28597: NOT
28598: IFFALSE 28602
// exit ;
28600: GO 30166
// for i in tmp do
28602: LD_ADDR_VAR 0 6
28606: PUSH
28607: LD_VAR 0 8
28611: PUSH
28612: FOR_IN
28613: IFFALSE 30141
// begin points := [ 0 , 0 , 0 ] ;
28615: LD_ADDR_VAR 0 9
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
// bpoints := 1 ;
28634: LD_ADDR_VAR 0 10
28638: PUSH
28639: LD_INT 1
28641: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28642: LD_VAR 0 6
28646: PPUSH
28647: CALL_OW 247
28651: PUSH
28652: LD_INT 1
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 29242
28660: POP
// begin if GetClass ( i ) = 1 then
28661: LD_VAR 0 6
28665: PPUSH
28666: CALL_OW 257
28670: PUSH
28671: LD_INT 1
28673: EQUAL
28674: IFFALSE 28695
// points := [ 10 , 5 , 3 ] ;
28676: LD_ADDR_VAR 0 9
28680: PUSH
28681: LD_INT 10
28683: PUSH
28684: LD_INT 5
28686: PUSH
28687: LD_INT 3
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28695: LD_VAR 0 6
28699: PPUSH
28700: CALL_OW 257
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: LD_INT 4
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: IN
28719: IFFALSE 28740
// points := [ 3 , 2 , 1 ] ;
28721: LD_ADDR_VAR 0 9
28725: PUSH
28726: LD_INT 3
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28740: LD_VAR 0 6
28744: PPUSH
28745: CALL_OW 257
28749: PUSH
28750: LD_INT 5
28752: EQUAL
28753: IFFALSE 28774
// points := [ 130 , 5 , 2 ] ;
28755: LD_ADDR_VAR 0 9
28759: PUSH
28760: LD_INT 130
28762: PUSH
28763: LD_INT 5
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28774: LD_VAR 0 6
28778: PPUSH
28779: CALL_OW 257
28783: PUSH
28784: LD_INT 8
28786: EQUAL
28787: IFFALSE 28808
// points := [ 35 , 35 , 30 ] ;
28789: LD_ADDR_VAR 0 9
28793: PUSH
28794: LD_INT 35
28796: PUSH
28797: LD_INT 35
28799: PUSH
28800: LD_INT 30
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28808: LD_VAR 0 6
28812: PPUSH
28813: CALL_OW 257
28817: PUSH
28818: LD_INT 9
28820: EQUAL
28821: IFFALSE 28842
// points := [ 20 , 55 , 40 ] ;
28823: LD_ADDR_VAR 0 9
28827: PUSH
28828: LD_INT 20
28830: PUSH
28831: LD_INT 55
28833: PUSH
28834: LD_INT 40
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28842: LD_VAR 0 6
28846: PPUSH
28847: CALL_OW 257
28851: PUSH
28852: LD_INT 12
28854: PUSH
28855: LD_INT 16
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: IN
28862: IFFALSE 28883
// points := [ 5 , 3 , 2 ] ;
28864: LD_ADDR_VAR 0 9
28868: PUSH
28869: LD_INT 5
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28883: LD_VAR 0 6
28887: PPUSH
28888: CALL_OW 257
28892: PUSH
28893: LD_INT 17
28895: EQUAL
28896: IFFALSE 28917
// points := [ 100 , 50 , 75 ] ;
28898: LD_ADDR_VAR 0 9
28902: PUSH
28903: LD_INT 100
28905: PUSH
28906: LD_INT 50
28908: PUSH
28909: LD_INT 75
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28917: LD_VAR 0 6
28921: PPUSH
28922: CALL_OW 257
28926: PUSH
28927: LD_INT 15
28929: EQUAL
28930: IFFALSE 28951
// points := [ 10 , 5 , 3 ] ;
28932: LD_ADDR_VAR 0 9
28936: PUSH
28937: LD_INT 10
28939: PUSH
28940: LD_INT 5
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28951: LD_VAR 0 6
28955: PPUSH
28956: CALL_OW 257
28960: PUSH
28961: LD_INT 14
28963: EQUAL
28964: IFFALSE 28985
// points := [ 10 , 0 , 0 ] ;
28966: LD_ADDR_VAR 0 9
28970: PUSH
28971: LD_INT 10
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28985: LD_VAR 0 6
28989: PPUSH
28990: CALL_OW 257
28994: PUSH
28995: LD_INT 11
28997: EQUAL
28998: IFFALSE 29019
// points := [ 30 , 10 , 5 ] ;
29000: LD_ADDR_VAR 0 9
29004: PUSH
29005: LD_INT 30
29007: PUSH
29008: LD_INT 10
29010: PUSH
29011: LD_INT 5
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: LIST
29018: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29019: LD_VAR 0 1
29023: PPUSH
29024: LD_INT 5
29026: PPUSH
29027: CALL_OW 321
29031: PUSH
29032: LD_INT 2
29034: EQUAL
29035: IFFALSE 29052
// bpoints := bpoints * 1.8 ;
29037: LD_ADDR_VAR 0 10
29041: PUSH
29042: LD_VAR 0 10
29046: PUSH
29047: LD_REAL  1.80000000000000E+0000
29050: MUL
29051: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 257
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 3
29070: PUSH
29071: LD_INT 4
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: IN
29080: IFFALSE 29100
29082: PUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 51
29090: PPUSH
29091: CALL_OW 321
29095: PUSH
29096: LD_INT 2
29098: EQUAL
29099: AND
29100: IFFALSE 29117
// bpoints := bpoints * 1.2 ;
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 10
29111: PUSH
29112: LD_REAL  1.20000000000000E+0000
29115: MUL
29116: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29117: LD_VAR 0 6
29121: PPUSH
29122: CALL_OW 257
29126: PUSH
29127: LD_INT 5
29129: PUSH
29130: LD_INT 7
29132: PUSH
29133: LD_INT 9
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: IN
29141: IFFALSE 29161
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: LD_INT 52
29151: PPUSH
29152: CALL_OW 321
29156: PUSH
29157: LD_INT 2
29159: EQUAL
29160: AND
29161: IFFALSE 29178
// bpoints := bpoints * 1.5 ;
29163: LD_ADDR_VAR 0 10
29167: PUSH
29168: LD_VAR 0 10
29172: PUSH
29173: LD_REAL  1.50000000000000E+0000
29176: MUL
29177: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_INT 66
29185: PPUSH
29186: CALL_OW 321
29190: PUSH
29191: LD_INT 2
29193: EQUAL
29194: IFFALSE 29211
// bpoints := bpoints * 1.1 ;
29196: LD_ADDR_VAR 0 10
29200: PUSH
29201: LD_VAR 0 10
29205: PUSH
29206: LD_REAL  1.10000000000000E+0000
29209: MUL
29210: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29211: LD_ADDR_VAR 0 10
29215: PUSH
29216: LD_VAR 0 10
29220: PUSH
29221: LD_VAR 0 6
29225: PPUSH
29226: LD_INT 1
29228: PPUSH
29229: CALL_OW 259
29233: PUSH
29234: LD_REAL  1.15000000000000E+0000
29237: MUL
29238: MUL
29239: ST_TO_ADDR
// end ; unit_vehicle :
29240: GO 30070
29242: LD_INT 2
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 30058
29250: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29251: LD_VAR 0 6
29255: PPUSH
29256: CALL_OW 264
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 42
29266: PUSH
29267: LD_INT 24
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: IN
29275: IFFALSE 29296
// points := [ 25 , 5 , 3 ] ;
29277: LD_ADDR_VAR 0 9
29281: PUSH
29282: LD_INT 25
29284: PUSH
29285: LD_INT 5
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29296: LD_VAR 0 6
29300: PPUSH
29301: CALL_OW 264
29305: PUSH
29306: LD_INT 4
29308: PUSH
29309: LD_INT 43
29311: PUSH
29312: LD_INT 25
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: IN
29320: IFFALSE 29341
// points := [ 40 , 15 , 5 ] ;
29322: LD_ADDR_VAR 0 9
29326: PUSH
29327: LD_INT 40
29329: PUSH
29330: LD_INT 15
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29341: LD_VAR 0 6
29345: PPUSH
29346: CALL_OW 264
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: LD_INT 23
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: IN
29361: IFFALSE 29382
// points := [ 7 , 25 , 8 ] ;
29363: LD_ADDR_VAR 0 9
29367: PUSH
29368: LD_INT 7
29370: PUSH
29371: LD_INT 25
29373: PUSH
29374: LD_INT 8
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29382: LD_VAR 0 6
29386: PPUSH
29387: CALL_OW 264
29391: PUSH
29392: LD_INT 5
29394: PUSH
29395: LD_INT 27
29397: PUSH
29398: LD_INT 44
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: IN
29406: IFFALSE 29427
// points := [ 14 , 50 , 16 ] ;
29408: LD_ADDR_VAR 0 9
29412: PUSH
29413: LD_INT 14
29415: PUSH
29416: LD_INT 50
29418: PUSH
29419: LD_INT 16
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29427: LD_VAR 0 6
29431: PPUSH
29432: CALL_OW 264
29436: PUSH
29437: LD_INT 6
29439: PUSH
29440: LD_INT 46
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: IN
29447: IFFALSE 29468
// points := [ 32 , 120 , 70 ] ;
29449: LD_ADDR_VAR 0 9
29453: PUSH
29454: LD_INT 32
29456: PUSH
29457: LD_INT 120
29459: PUSH
29460: LD_INT 70
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29468: LD_VAR 0 6
29472: PPUSH
29473: CALL_OW 264
29477: PUSH
29478: LD_INT 7
29480: PUSH
29481: LD_INT 28
29483: PUSH
29484: LD_INT 45
29486: PUSH
29487: LD_INT 92
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: IN
29496: IFFALSE 29517
// points := [ 35 , 20 , 45 ] ;
29498: LD_ADDR_VAR 0 9
29502: PUSH
29503: LD_INT 35
29505: PUSH
29506: LD_INT 20
29508: PUSH
29509: LD_INT 45
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29517: LD_VAR 0 6
29521: PPUSH
29522: CALL_OW 264
29526: PUSH
29527: LD_INT 47
29529: PUSH
29530: EMPTY
29531: LIST
29532: IN
29533: IFFALSE 29554
// points := [ 67 , 45 , 75 ] ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_INT 67
29542: PUSH
29543: LD_INT 45
29545: PUSH
29546: LD_INT 75
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 264
29563: PUSH
29564: LD_INT 26
29566: PUSH
29567: EMPTY
29568: LIST
29569: IN
29570: IFFALSE 29591
// points := [ 120 , 30 , 80 ] ;
29572: LD_ADDR_VAR 0 9
29576: PUSH
29577: LD_INT 120
29579: PUSH
29580: LD_INT 30
29582: PUSH
29583: LD_INT 80
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29591: LD_VAR 0 6
29595: PPUSH
29596: CALL_OW 264
29600: PUSH
29601: LD_INT 22
29603: PUSH
29604: EMPTY
29605: LIST
29606: IN
29607: IFFALSE 29628
// points := [ 40 , 1 , 1 ] ;
29609: LD_ADDR_VAR 0 9
29613: PUSH
29614: LD_INT 40
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29628: LD_VAR 0 6
29632: PPUSH
29633: CALL_OW 264
29637: PUSH
29638: LD_INT 29
29640: PUSH
29641: EMPTY
29642: LIST
29643: IN
29644: IFFALSE 29665
// points := [ 70 , 200 , 400 ] ;
29646: LD_ADDR_VAR 0 9
29650: PUSH
29651: LD_INT 70
29653: PUSH
29654: LD_INT 200
29656: PUSH
29657: LD_INT 400
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29665: LD_VAR 0 6
29669: PPUSH
29670: CALL_OW 264
29674: PUSH
29675: LD_INT 14
29677: PUSH
29678: LD_INT 53
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: IN
29685: IFFALSE 29706
// points := [ 40 , 10 , 20 ] ;
29687: LD_ADDR_VAR 0 9
29691: PUSH
29692: LD_INT 40
29694: PUSH
29695: LD_INT 10
29697: PUSH
29698: LD_INT 20
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29706: LD_VAR 0 6
29710: PPUSH
29711: CALL_OW 264
29715: PUSH
29716: LD_INT 9
29718: PUSH
29719: EMPTY
29720: LIST
29721: IN
29722: IFFALSE 29743
// points := [ 5 , 70 , 20 ] ;
29724: LD_ADDR_VAR 0 9
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: LD_INT 70
29734: PUSH
29735: LD_INT 20
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29743: LD_VAR 0 6
29747: PPUSH
29748: CALL_OW 264
29752: PUSH
29753: LD_INT 10
29755: PUSH
29756: EMPTY
29757: LIST
29758: IN
29759: IFFALSE 29780
// points := [ 35 , 110 , 70 ] ;
29761: LD_ADDR_VAR 0 9
29765: PUSH
29766: LD_INT 35
29768: PUSH
29769: LD_INT 110
29771: PUSH
29772: LD_INT 70
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29780: LD_VAR 0 6
29784: PPUSH
29785: CALL_OW 265
29789: PUSH
29790: LD_INT 25
29792: EQUAL
29793: IFFALSE 29814
// points := [ 80 , 65 , 100 ] ;
29795: LD_ADDR_VAR 0 9
29799: PUSH
29800: LD_INT 80
29802: PUSH
29803: LD_INT 65
29805: PUSH
29806: LD_INT 100
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29814: LD_VAR 0 6
29818: PPUSH
29819: CALL_OW 263
29823: PUSH
29824: LD_INT 1
29826: EQUAL
29827: IFFALSE 29862
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29829: LD_ADDR_VAR 0 10
29833: PUSH
29834: LD_VAR 0 10
29838: PUSH
29839: LD_VAR 0 6
29843: PPUSH
29844: CALL_OW 311
29848: PPUSH
29849: LD_INT 3
29851: PPUSH
29852: CALL_OW 259
29856: PUSH
29857: LD_INT 4
29859: MUL
29860: MUL
29861: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29862: LD_VAR 0 6
29866: PPUSH
29867: CALL_OW 263
29871: PUSH
29872: LD_INT 2
29874: EQUAL
29875: IFFALSE 29926
// begin j := IsControledBy ( i ) ;
29877: LD_ADDR_VAR 0 7
29881: PUSH
29882: LD_VAR 0 6
29886: PPUSH
29887: CALL_OW 312
29891: ST_TO_ADDR
// if j then
29892: LD_VAR 0 7
29896: IFFALSE 29926
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29898: LD_ADDR_VAR 0 10
29902: PUSH
29903: LD_VAR 0 10
29907: PUSH
29908: LD_VAR 0 7
29912: PPUSH
29913: LD_INT 3
29915: PPUSH
29916: CALL_OW 259
29920: PUSH
29921: LD_INT 3
29923: MUL
29924: MUL
29925: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29926: LD_VAR 0 6
29930: PPUSH
29931: CALL_OW 264
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: LD_INT 6
29941: PUSH
29942: LD_INT 46
29944: PUSH
29945: LD_INT 44
29947: PUSH
29948: LD_INT 47
29950: PUSH
29951: LD_INT 45
29953: PUSH
29954: LD_INT 28
29956: PUSH
29957: LD_INT 7
29959: PUSH
29960: LD_INT 27
29962: PUSH
29963: LD_INT 29
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: IN
29978: IFFALSE 29998
29980: PUSH
29981: LD_VAR 0 1
29985: PPUSH
29986: LD_INT 52
29988: PPUSH
29989: CALL_OW 321
29993: PUSH
29994: LD_INT 2
29996: EQUAL
29997: AND
29998: IFFALSE 30015
// bpoints := bpoints * 1.2 ;
30000: LD_ADDR_VAR 0 10
30004: PUSH
30005: LD_VAR 0 10
30009: PUSH
30010: LD_REAL  1.20000000000000E+0000
30013: MUL
30014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30015: LD_VAR 0 6
30019: PPUSH
30020: CALL_OW 264
30024: PUSH
30025: LD_INT 6
30027: PUSH
30028: LD_INT 46
30030: PUSH
30031: LD_INT 47
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: IN
30039: IFFALSE 30056
// bpoints := bpoints * 1.2 ;
30041: LD_ADDR_VAR 0 10
30045: PUSH
30046: LD_VAR 0 10
30050: PUSH
30051: LD_REAL  1.20000000000000E+0000
30054: MUL
30055: ST_TO_ADDR
// end ; unit_building :
30056: GO 30070
30058: LD_INT 3
30060: DOUBLE
30061: EQUAL
30062: IFTRUE 30066
30064: GO 30069
30066: POP
// ; end ;
30067: GO 30070
30069: POP
// for j = 1 to 3 do
30070: LD_ADDR_VAR 0 7
30074: PUSH
30075: DOUBLE
30076: LD_INT 1
30078: DEC
30079: ST_TO_ADDR
30080: LD_INT 3
30082: PUSH
30083: FOR_TO
30084: IFFALSE 30137
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30086: LD_ADDR_VAR 0 5
30090: PUSH
30091: LD_VAR 0 5
30095: PPUSH
30096: LD_VAR 0 7
30100: PPUSH
30101: LD_VAR 0 5
30105: PUSH
30106: LD_VAR 0 7
30110: ARRAY
30111: PUSH
30112: LD_VAR 0 9
30116: PUSH
30117: LD_VAR 0 7
30121: ARRAY
30122: PUSH
30123: LD_VAR 0 10
30127: MUL
30128: PLUS
30129: PPUSH
30130: CALL_OW 1
30134: ST_TO_ADDR
30135: GO 30083
30137: POP
30138: POP
// end ;
30139: GO 28612
30141: POP
30142: POP
// result := Replace ( result , 4 , tmp ) ;
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_VAR 0 5
30152: PPUSH
30153: LD_INT 4
30155: PPUSH
30156: LD_VAR 0 8
30160: PPUSH
30161: CALL_OW 1
30165: ST_TO_ADDR
// end ;
30166: LD_VAR 0 5
30170: RET
// export function DangerAtRange ( unit , range ) ; begin
30171: LD_INT 0
30173: PPUSH
// if not unit then
30174: LD_VAR 0 1
30178: NOT
30179: IFFALSE 30183
// exit ;
30181: GO 30228
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 255
30197: PPUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 250
30207: PPUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 251
30217: PPUSH
30218: LD_VAR 0 2
30222: PPUSH
30223: CALL 28462 0 4
30227: ST_TO_ADDR
// end ;
30228: LD_VAR 0 3
30232: RET
// export function DangerInArea ( side , area ) ; begin
30233: LD_INT 0
30235: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: LD_INT 81
30248: PUSH
30249: LD_VAR 0 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PPUSH
30258: CALL_OW 70
30262: ST_TO_ADDR
// end ;
30263: LD_VAR 0 3
30267: RET
// export function IsExtension ( b ) ; begin
30268: LD_INT 0
30270: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30271: LD_ADDR_VAR 0 2
30275: PUSH
30276: LD_VAR 0 1
30280: PUSH
30281: LD_INT 23
30283: PUSH
30284: LD_INT 20
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_INT 17
30292: PUSH
30293: LD_INT 24
30295: PUSH
30296: LD_INT 21
30298: PUSH
30299: LD_INT 19
30301: PUSH
30302: LD_INT 16
30304: PUSH
30305: LD_INT 25
30307: PUSH
30308: LD_INT 18
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: IN
30323: ST_TO_ADDR
// end ;
30324: LD_VAR 0 2
30328: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30329: LD_INT 0
30331: PPUSH
30332: PPUSH
30333: PPUSH
// result := [ ] ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: EMPTY
30340: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30341: LD_ADDR_VAR 0 5
30345: PUSH
30346: LD_VAR 0 2
30350: PPUSH
30351: LD_INT 21
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 70
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 5
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30439
// if checkLink then
30375: LD_VAR 0 3
30379: IFFALSE 30429
// begin for i in tmp do
30381: LD_ADDR_VAR 0 6
30385: PUSH
30386: LD_VAR 0 5
30390: PUSH
30391: FOR_IN
30392: IFFALSE 30427
// if GetBase ( i ) <> base then
30394: LD_VAR 0 6
30398: PPUSH
30399: CALL_OW 274
30403: PUSH
30404: LD_VAR 0 1
30408: NONEQUAL
30409: IFFALSE 30425
// ComLinkToBase ( base , i ) ;
30411: LD_VAR 0 1
30415: PPUSH
30416: LD_VAR 0 6
30420: PPUSH
30421: CALL_OW 169
30425: GO 30391
30427: POP
30428: POP
// end ; result := tmp ;
30429: LD_ADDR_VAR 0 4
30433: PUSH
30434: LD_VAR 0 5
30438: ST_TO_ADDR
// end ;
30439: LD_VAR 0 4
30443: RET
// export function ComComplete ( units , b ) ; var i ; begin
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
// if not units then
30448: LD_VAR 0 1
30452: NOT
30453: IFFALSE 30457
// exit ;
30455: GO 30547
// for i in units do
30457: LD_ADDR_VAR 0 4
30461: PUSH
30462: LD_VAR 0 1
30466: PUSH
30467: FOR_IN
30468: IFFALSE 30545
// if BuildingStatus ( b ) = bs_build then
30470: LD_VAR 0 2
30474: PPUSH
30475: CALL_OW 461
30479: PUSH
30480: LD_INT 1
30482: EQUAL
30483: IFFALSE 30543
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30485: LD_VAR 0 4
30489: PPUSH
30490: LD_STRING h
30492: PUSH
30493: LD_VAR 0 2
30497: PPUSH
30498: CALL_OW 250
30502: PUSH
30503: LD_VAR 0 2
30507: PPUSH
30508: CALL_OW 251
30512: PUSH
30513: LD_VAR 0 2
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: PUSH
30536: EMPTY
30537: LIST
30538: PPUSH
30539: CALL_OW 446
30543: GO 30467
30545: POP
30546: POP
// end ;
30547: LD_VAR 0 3
30551: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30552: LD_INT 0
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30560: LD_VAR 0 1
30564: NOT
30565: IFTRUE 30582
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 263
30577: PUSH
30578: LD_INT 2
30580: NONEQUAL
30581: OR
30582: IFFALSE 30586
// exit ;
30584: GO 30902
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30586: LD_ADDR_VAR 0 6
30590: PUSH
30591: LD_INT 22
30593: PUSH
30594: LD_VAR 0 1
30598: PPUSH
30599: CALL_OW 255
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 30
30613: PUSH
30614: LD_INT 36
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 34
30623: PUSH
30624: LD_INT 31
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PPUSH
30640: CALL_OW 69
30644: ST_TO_ADDR
// if not tmp then
30645: LD_VAR 0 6
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 30902
// result := [ ] ;
30654: LD_ADDR_VAR 0 2
30658: PUSH
30659: EMPTY
30660: ST_TO_ADDR
// for i in tmp do
30661: LD_ADDR_VAR 0 3
30665: PUSH
30666: LD_VAR 0 6
30670: PUSH
30671: FOR_IN
30672: IFFALSE 30743
// begin t := UnitsInside ( i ) ;
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: LD_VAR 0 3
30683: PPUSH
30684: CALL_OW 313
30688: ST_TO_ADDR
// if t then
30689: LD_VAR 0 4
30693: IFFALSE 30741
// for j in t do
30695: LD_ADDR_VAR 0 7
30699: PUSH
30700: LD_VAR 0 4
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30739
// result := Replace ( result , result + 1 , j ) ;
30708: LD_ADDR_VAR 0 2
30712: PUSH
30713: LD_VAR 0 2
30717: PPUSH
30718: LD_VAR 0 2
30722: PUSH
30723: LD_INT 1
30725: PLUS
30726: PPUSH
30727: LD_VAR 0 7
30731: PPUSH
30732: CALL_OW 1
30736: ST_TO_ADDR
30737: GO 30705
30739: POP
30740: POP
// end ;
30741: GO 30671
30743: POP
30744: POP
// if not result then
30745: LD_VAR 0 2
30749: NOT
30750: IFFALSE 30754
// exit ;
30752: GO 30902
// mech := result [ 1 ] ;
30754: LD_ADDR_VAR 0 5
30758: PUSH
30759: LD_VAR 0 2
30763: PUSH
30764: LD_INT 1
30766: ARRAY
30767: ST_TO_ADDR
// if result > 1 then
30768: LD_VAR 0 2
30772: PUSH
30773: LD_INT 1
30775: GREATER
30776: IFFALSE 30888
// begin for i = 2 to result do
30778: LD_ADDR_VAR 0 3
30782: PUSH
30783: DOUBLE
30784: LD_INT 2
30786: DEC
30787: ST_TO_ADDR
30788: LD_VAR 0 2
30792: PUSH
30793: FOR_TO
30794: IFFALSE 30886
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30796: LD_ADDR_VAR 0 4
30800: PUSH
30801: LD_VAR 0 2
30805: PUSH
30806: LD_VAR 0 3
30810: ARRAY
30811: PPUSH
30812: LD_INT 3
30814: PPUSH
30815: CALL_OW 259
30819: PUSH
30820: LD_VAR 0 2
30824: PUSH
30825: LD_VAR 0 3
30829: ARRAY
30830: PPUSH
30831: CALL_OW 432
30835: MINUS
30836: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30837: LD_VAR 0 4
30841: PUSH
30842: LD_VAR 0 5
30846: PPUSH
30847: LD_INT 3
30849: PPUSH
30850: CALL_OW 259
30854: PUSH
30855: LD_VAR 0 5
30859: PPUSH
30860: CALL_OW 432
30864: MINUS
30865: GREATEREQUAL
30866: IFFALSE 30884
// mech := result [ i ] ;
30868: LD_ADDR_VAR 0 5
30872: PUSH
30873: LD_VAR 0 2
30877: PUSH
30878: LD_VAR 0 3
30882: ARRAY
30883: ST_TO_ADDR
// end ;
30884: GO 30793
30886: POP
30887: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30888: LD_VAR 0 1
30892: PPUSH
30893: LD_VAR 0 5
30897: PPUSH
30898: CALL_OW 135
// end ;
30902: LD_VAR 0 2
30906: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30907: LD_INT 0
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
// result := [ ] ;
30922: LD_ADDR_VAR 0 7
30926: PUSH
30927: EMPTY
30928: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 266
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: IN
30949: NOT
30950: IFFALSE 30954
// exit ;
30952: GO 32594
// if name then
30954: LD_VAR 0 3
30958: IFFALSE 30974
// SetBName ( base_dep , name ) ;
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_VAR 0 3
30969: PPUSH
30970: CALL_OW 500
// base := GetBase ( base_dep ) ;
30974: LD_ADDR_VAR 0 15
30978: PUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 274
30988: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30989: LD_ADDR_VAR 0 16
30993: PUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 255
31003: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31004: LD_ADDR_VAR 0 17
31008: PUSH
31009: LD_VAR 0 1
31013: PPUSH
31014: CALL_OW 248
31018: ST_TO_ADDR
// if sources then
31019: LD_VAR 0 5
31023: IFFALSE 31070
// for i = 1 to 3 do
31025: LD_ADDR_VAR 0 8
31029: PUSH
31030: DOUBLE
31031: LD_INT 1
31033: DEC
31034: ST_TO_ADDR
31035: LD_INT 3
31037: PUSH
31038: FOR_TO
31039: IFFALSE 31068
// AddResourceType ( base , i , sources [ i ] ) ;
31041: LD_VAR 0 15
31045: PPUSH
31046: LD_VAR 0 8
31050: PPUSH
31051: LD_VAR 0 5
31055: PUSH
31056: LD_VAR 0 8
31060: ARRAY
31061: PPUSH
31062: CALL_OW 276
31066: GO 31038
31068: POP
31069: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31070: LD_ADDR_VAR 0 18
31074: PUSH
31075: LD_VAR 0 15
31079: PPUSH
31080: LD_VAR 0 2
31084: PPUSH
31085: LD_INT 1
31087: PPUSH
31088: CALL 30329 0 3
31092: ST_TO_ADDR
// InitHc ;
31093: CALL_OW 19
// InitUc ;
31097: CALL_OW 18
// uc_side := side ;
31101: LD_ADDR_OWVAR 20
31105: PUSH
31106: LD_VAR 0 16
31110: ST_TO_ADDR
// uc_nation := nation ;
31111: LD_ADDR_OWVAR 21
31115: PUSH
31116: LD_VAR 0 17
31120: ST_TO_ADDR
// if buildings then
31121: LD_VAR 0 18
31125: IFFALSE 32453
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31127: LD_ADDR_VAR 0 19
31131: PUSH
31132: LD_VAR 0 18
31136: PPUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 30
31142: PUSH
31143: LD_INT 29
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 30
31152: PUSH
31153: LD_INT 30
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 72
31169: ST_TO_ADDR
// if tmp then
31170: LD_VAR 0 19
31174: IFFALSE 31222
// for i in tmp do
31176: LD_ADDR_VAR 0 8
31180: PUSH
31181: LD_VAR 0 19
31185: PUSH
31186: FOR_IN
31187: IFFALSE 31220
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31189: LD_VAR 0 8
31193: PPUSH
31194: CALL_OW 250
31198: PPUSH
31199: LD_VAR 0 8
31203: PPUSH
31204: CALL_OW 251
31208: PPUSH
31209: LD_VAR 0 16
31213: PPUSH
31214: CALL_OW 441
31218: GO 31186
31220: POP
31221: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31222: LD_VAR 0 18
31226: PPUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 32
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 33
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: PPUSH
31255: CALL_OW 72
31259: IFFALSE 31347
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31261: LD_ADDR_VAR 0 8
31265: PUSH
31266: LD_VAR 0 18
31270: PPUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 32
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 33
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 72
31303: PUSH
31304: FOR_IN
31305: IFFALSE 31345
// begin if not GetBWeapon ( i ) then
31307: LD_VAR 0 8
31311: PPUSH
31312: CALL_OW 269
31316: NOT
31317: IFFALSE 31343
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31319: LD_VAR 0 8
31323: PPUSH
31324: LD_VAR 0 8
31328: PPUSH
31329: LD_VAR 0 2
31333: PPUSH
31334: CALL 32599 0 2
31338: PPUSH
31339: CALL_OW 431
// end ;
31343: GO 31304
31345: POP
31346: POP
// end ; for i = 1 to personel do
31347: LD_ADDR_VAR 0 8
31351: PUSH
31352: DOUBLE
31353: LD_INT 1
31355: DEC
31356: ST_TO_ADDR
31357: LD_VAR 0 6
31361: PUSH
31362: FOR_TO
31363: IFFALSE 32433
// begin if i > 4 then
31365: LD_VAR 0 8
31369: PUSH
31370: LD_INT 4
31372: GREATER
31373: IFFALSE 31377
// break ;
31375: GO 32433
// case i of 1 :
31377: LD_VAR 0 8
31381: PUSH
31382: LD_INT 1
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31470
31390: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31391: LD_ADDR_VAR 0 12
31395: PUSH
31396: LD_VAR 0 18
31400: PPUSH
31401: LD_INT 22
31403: PUSH
31404: LD_VAR 0 16
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 58
31415: PUSH
31416: EMPTY
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: PUSH
31422: LD_INT 30
31424: PUSH
31425: LD_INT 32
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 30
31434: PUSH
31435: LD_INT 4
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: LD_INT 5
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: PPUSH
31463: CALL_OW 72
31467: ST_TO_ADDR
31468: GO 31692
31470: LD_INT 2
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31540
31478: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31479: LD_ADDR_VAR 0 12
31483: PUSH
31484: LD_VAR 0 18
31488: PPUSH
31489: LD_INT 22
31491: PUSH
31492: LD_VAR 0 16
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 30
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 30
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: CALL_OW 72
31537: ST_TO_ADDR
31538: GO 31692
31540: LD_INT 3
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31610
31548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31549: LD_ADDR_VAR 0 12
31553: PUSH
31554: LD_VAR 0 18
31558: PPUSH
31559: LD_INT 22
31561: PUSH
31562: LD_VAR 0 16
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 30
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 30
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 72
31607: ST_TO_ADDR
31608: GO 31692
31610: LD_INT 4
31612: DOUBLE
31613: EQUAL
31614: IFTRUE 31618
31616: GO 31691
31618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31619: LD_ADDR_VAR 0 12
31623: PUSH
31624: LD_VAR 0 18
31628: PPUSH
31629: LD_INT 22
31631: PUSH
31632: LD_VAR 0 16
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 30
31646: PUSH
31647: LD_INT 6
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 30
31656: PUSH
31657: LD_INT 7
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 30
31666: PUSH
31667: LD_INT 8
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 72
31688: ST_TO_ADDR
31689: GO 31692
31691: POP
// if i = 1 then
31692: LD_VAR 0 8
31696: PUSH
31697: LD_INT 1
31699: EQUAL
31700: IFFALSE 31811
// begin tmp := [ ] ;
31702: LD_ADDR_VAR 0 19
31706: PUSH
31707: EMPTY
31708: ST_TO_ADDR
// for j in f do
31709: LD_ADDR_VAR 0 9
31713: PUSH
31714: LD_VAR 0 12
31718: PUSH
31719: FOR_IN
31720: IFFALSE 31793
// if GetBType ( j ) = b_bunker then
31722: LD_VAR 0 9
31726: PPUSH
31727: CALL_OW 266
31731: PUSH
31732: LD_INT 32
31734: EQUAL
31735: IFFALSE 31762
// tmp := Insert ( tmp , 1 , j ) else
31737: LD_ADDR_VAR 0 19
31741: PUSH
31742: LD_VAR 0 19
31746: PPUSH
31747: LD_INT 1
31749: PPUSH
31750: LD_VAR 0 9
31754: PPUSH
31755: CALL_OW 2
31759: ST_TO_ADDR
31760: GO 31791
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31762: LD_ADDR_VAR 0 19
31766: PUSH
31767: LD_VAR 0 19
31771: PPUSH
31772: LD_VAR 0 19
31776: PUSH
31777: LD_INT 1
31779: PLUS
31780: PPUSH
31781: LD_VAR 0 9
31785: PPUSH
31786: CALL_OW 2
31790: ST_TO_ADDR
31791: GO 31719
31793: POP
31794: POP
// if tmp then
31795: LD_VAR 0 19
31799: IFFALSE 31811
// f := tmp ;
31801: LD_ADDR_VAR 0 12
31805: PUSH
31806: LD_VAR 0 19
31810: ST_TO_ADDR
// end ; x := personel [ i ] ;
31811: LD_ADDR_VAR 0 13
31815: PUSH
31816: LD_VAR 0 6
31820: PUSH
31821: LD_VAR 0 8
31825: ARRAY
31826: ST_TO_ADDR
// if x = - 1 then
31827: LD_VAR 0 13
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: EQUAL
31836: IFFALSE 32047
// begin for j in f do
31838: LD_ADDR_VAR 0 9
31842: PUSH
31843: LD_VAR 0 12
31847: PUSH
31848: FOR_IN
31849: IFFALSE 32043
// repeat InitHc ;
31851: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31855: LD_VAR 0 9
31859: PPUSH
31860: CALL_OW 266
31864: PUSH
31865: LD_INT 5
31867: EQUAL
31868: IFFALSE 31938
// begin if UnitsInside ( j ) < 3 then
31870: LD_VAR 0 9
31874: PPUSH
31875: CALL_OW 313
31879: PUSH
31880: LD_INT 3
31882: LESS
31883: IFFALSE 31919
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31885: LD_INT 0
31887: PPUSH
31888: LD_INT 5
31890: PUSH
31891: LD_INT 8
31893: PUSH
31894: LD_INT 9
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: PUSH
31902: LD_VAR 0 17
31906: ARRAY
31907: PPUSH
31908: LD_VAR 0 4
31912: PPUSH
31913: CALL_OW 380
31917: GO 31936
// PrepareHuman ( false , i , skill ) ;
31919: LD_INT 0
31921: PPUSH
31922: LD_VAR 0 8
31926: PPUSH
31927: LD_VAR 0 4
31931: PPUSH
31932: CALL_OW 380
// end else
31936: GO 31955
// PrepareHuman ( false , i , skill ) ;
31938: LD_INT 0
31940: PPUSH
31941: LD_VAR 0 8
31945: PPUSH
31946: LD_VAR 0 4
31950: PPUSH
31951: CALL_OW 380
// un := CreateHuman ;
31955: LD_ADDR_VAR 0 14
31959: PUSH
31960: CALL_OW 44
31964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31965: LD_ADDR_VAR 0 7
31969: PUSH
31970: LD_VAR 0 7
31974: PPUSH
31975: LD_INT 1
31977: PPUSH
31978: LD_VAR 0 14
31982: PPUSH
31983: CALL_OW 2
31987: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31988: LD_VAR 0 14
31992: PPUSH
31993: LD_VAR 0 9
31997: PPUSH
31998: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32002: LD_VAR 0 9
32006: PPUSH
32007: CALL_OW 313
32011: PUSH
32012: LD_INT 6
32014: EQUAL
32015: IFTRUE 32039
32017: PUSH
32018: LD_VAR 0 9
32022: PPUSH
32023: CALL_OW 266
32027: PUSH
32028: LD_INT 32
32030: PUSH
32031: LD_INT 31
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: IN
32038: OR
32039: IFFALSE 31851
32041: GO 31848
32043: POP
32044: POP
// end else
32045: GO 32431
// for j = 1 to x do
32047: LD_ADDR_VAR 0 9
32051: PUSH
32052: DOUBLE
32053: LD_INT 1
32055: DEC
32056: ST_TO_ADDR
32057: LD_VAR 0 13
32061: PUSH
32062: FOR_TO
32063: IFFALSE 32429
// begin InitHc ;
32065: CALL_OW 19
// if not f then
32069: LD_VAR 0 12
32073: NOT
32074: IFFALSE 32163
// begin PrepareHuman ( false , i , skill ) ;
32076: LD_INT 0
32078: PPUSH
32079: LD_VAR 0 8
32083: PPUSH
32084: LD_VAR 0 4
32088: PPUSH
32089: CALL_OW 380
// un := CreateHuman ;
32093: LD_ADDR_VAR 0 14
32097: PUSH
32098: CALL_OW 44
32102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32103: LD_ADDR_VAR 0 7
32107: PUSH
32108: LD_VAR 0 7
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: LD_VAR 0 14
32120: PPUSH
32121: CALL_OW 2
32125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32126: LD_VAR 0 14
32130: PPUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 250
32140: PPUSH
32141: LD_VAR 0 1
32145: PPUSH
32146: CALL_OW 251
32150: PPUSH
32151: LD_INT 10
32153: PPUSH
32154: LD_INT 0
32156: PPUSH
32157: CALL_OW 50
// continue ;
32161: GO 32062
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32163: LD_VAR 0 12
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PPUSH
32172: CALL_OW 313
32176: IFFALSE 32204
32178: PUSH
32179: LD_VAR 0 12
32183: PUSH
32184: LD_INT 1
32186: ARRAY
32187: PPUSH
32188: CALL_OW 266
32192: PUSH
32193: LD_INT 32
32195: PUSH
32196: LD_INT 31
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: IN
32203: AND
32204: IFTRUE 32225
32206: PUSH
32207: LD_VAR 0 12
32211: PUSH
32212: LD_INT 1
32214: ARRAY
32215: PPUSH
32216: CALL_OW 313
32220: PUSH
32221: LD_INT 6
32223: EQUAL
32224: OR
32225: IFFALSE 32245
// f := Delete ( f , 1 ) ;
32227: LD_ADDR_VAR 0 12
32231: PUSH
32232: LD_VAR 0 12
32236: PPUSH
32237: LD_INT 1
32239: PPUSH
32240: CALL_OW 3
32244: ST_TO_ADDR
// if not f then
32245: LD_VAR 0 12
32249: NOT
32250: IFFALSE 32268
// begin x := x + 2 ;
32252: LD_ADDR_VAR 0 13
32256: PUSH
32257: LD_VAR 0 13
32261: PUSH
32262: LD_INT 2
32264: PLUS
32265: ST_TO_ADDR
// continue ;
32266: GO 32062
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32268: LD_VAR 0 12
32272: PUSH
32273: LD_INT 1
32275: ARRAY
32276: PPUSH
32277: CALL_OW 266
32281: PUSH
32282: LD_INT 5
32284: EQUAL
32285: IFFALSE 32359
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32287: LD_VAR 0 12
32291: PUSH
32292: LD_INT 1
32294: ARRAY
32295: PPUSH
32296: CALL_OW 313
32300: PUSH
32301: LD_INT 3
32303: LESS
32304: IFFALSE 32340
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32306: LD_INT 0
32308: PPUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 8
32314: PUSH
32315: LD_INT 9
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_VAR 0 17
32327: ARRAY
32328: PPUSH
32329: LD_VAR 0 4
32333: PPUSH
32334: CALL_OW 380
32338: GO 32357
// PrepareHuman ( false , i , skill ) ;
32340: LD_INT 0
32342: PPUSH
32343: LD_VAR 0 8
32347: PPUSH
32348: LD_VAR 0 4
32352: PPUSH
32353: CALL_OW 380
// end else
32357: GO 32376
// PrepareHuman ( false , i , skill ) ;
32359: LD_INT 0
32361: PPUSH
32362: LD_VAR 0 8
32366: PPUSH
32367: LD_VAR 0 4
32371: PPUSH
32372: CALL_OW 380
// un := CreateHuman ;
32376: LD_ADDR_VAR 0 14
32380: PUSH
32381: CALL_OW 44
32385: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32386: LD_ADDR_VAR 0 7
32390: PUSH
32391: LD_VAR 0 7
32395: PPUSH
32396: LD_INT 1
32398: PPUSH
32399: LD_VAR 0 14
32403: PPUSH
32404: CALL_OW 2
32408: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32409: LD_VAR 0 14
32413: PPUSH
32414: LD_VAR 0 12
32418: PUSH
32419: LD_INT 1
32421: ARRAY
32422: PPUSH
32423: CALL_OW 52
// end ;
32427: GO 32062
32429: POP
32430: POP
// end ;
32431: GO 31362
32433: POP
32434: POP
// result := result ^ buildings ;
32435: LD_ADDR_VAR 0 7
32439: PUSH
32440: LD_VAR 0 7
32444: PUSH
32445: LD_VAR 0 18
32449: ADD
32450: ST_TO_ADDR
// end else
32451: GO 32594
// begin for i = 1 to personel do
32453: LD_ADDR_VAR 0 8
32457: PUSH
32458: DOUBLE
32459: LD_INT 1
32461: DEC
32462: ST_TO_ADDR
32463: LD_VAR 0 6
32467: PUSH
32468: FOR_TO
32469: IFFALSE 32592
// begin if i > 4 then
32471: LD_VAR 0 8
32475: PUSH
32476: LD_INT 4
32478: GREATER
32479: IFFALSE 32483
// break ;
32481: GO 32592
// x := personel [ i ] ;
32483: LD_ADDR_VAR 0 13
32487: PUSH
32488: LD_VAR 0 6
32492: PUSH
32493: LD_VAR 0 8
32497: ARRAY
32498: ST_TO_ADDR
// if x = - 1 then
32499: LD_VAR 0 13
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: EQUAL
32508: IFFALSE 32512
// continue ;
32510: GO 32468
// PrepareHuman ( false , i , skill ) ;
32512: LD_INT 0
32514: PPUSH
32515: LD_VAR 0 8
32519: PPUSH
32520: LD_VAR 0 4
32524: PPUSH
32525: CALL_OW 380
// un := CreateHuman ;
32529: LD_ADDR_VAR 0 14
32533: PUSH
32534: CALL_OW 44
32538: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32539: LD_VAR 0 14
32543: PPUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 250
32553: PPUSH
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 251
32563: PPUSH
32564: LD_INT 10
32566: PPUSH
32567: LD_INT 0
32569: PPUSH
32570: CALL_OW 50
// result := result ^ un ;
32574: LD_ADDR_VAR 0 7
32578: PUSH
32579: LD_VAR 0 7
32583: PUSH
32584: LD_VAR 0 14
32588: ADD
32589: ST_TO_ADDR
// end ;
32590: GO 32468
32592: POP
32593: POP
// end ; end ;
32594: LD_VAR 0 7
32598: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32599: LD_INT 0
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
// result := false ;
32617: LD_ADDR_VAR 0 3
32621: PUSH
32622: LD_INT 0
32624: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32625: LD_VAR 0 1
32629: NOT
32630: IFTRUE 32655
32632: PUSH
32633: LD_VAR 0 1
32637: PPUSH
32638: CALL_OW 266
32642: PUSH
32643: LD_INT 32
32645: PUSH
32646: LD_INT 33
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: IN
32653: NOT
32654: OR
32655: IFFALSE 32659
// exit ;
32657: GO 33794
// nat := GetNation ( tower ) ;
32659: LD_ADDR_VAR 0 12
32663: PUSH
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 248
32673: ST_TO_ADDR
// side := GetSide ( tower ) ;
32674: LD_ADDR_VAR 0 16
32678: PUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 255
32688: ST_TO_ADDR
// x := GetX ( tower ) ;
32689: LD_ADDR_VAR 0 10
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 250
32703: ST_TO_ADDR
// y := GetY ( tower ) ;
32704: LD_ADDR_VAR 0 11
32708: PUSH
32709: LD_VAR 0 1
32713: PPUSH
32714: CALL_OW 251
32718: ST_TO_ADDR
// if not x or not y then
32719: LD_VAR 0 10
32723: NOT
32724: IFTRUE 32733
32726: PUSH
32727: LD_VAR 0 11
32731: NOT
32732: OR
32733: IFFALSE 32737
// exit ;
32735: GO 33794
// weapon := 0 ;
32737: LD_ADDR_VAR 0 18
32741: PUSH
32742: LD_INT 0
32744: ST_TO_ADDR
// fac_list := [ ] ;
32745: LD_ADDR_VAR 0 17
32749: PUSH
32750: EMPTY
32751: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32752: LD_ADDR_VAR 0 6
32756: PUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 274
32766: PPUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_INT 0
32774: PPUSH
32775: CALL 30329 0 3
32779: PPUSH
32780: LD_INT 30
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PPUSH
32790: CALL_OW 72
32794: ST_TO_ADDR
// if not factories then
32795: LD_VAR 0 6
32799: NOT
32800: IFFALSE 32804
// exit ;
32802: GO 33794
// for i in factories do
32804: LD_ADDR_VAR 0 8
32808: PUSH
32809: LD_VAR 0 6
32813: PUSH
32814: FOR_IN
32815: IFFALSE 32840
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32817: LD_ADDR_VAR 0 17
32821: PUSH
32822: LD_VAR 0 17
32826: PUSH
32827: LD_VAR 0 8
32831: PPUSH
32832: CALL_OW 478
32836: UNION
32837: ST_TO_ADDR
32838: GO 32814
32840: POP
32841: POP
// if not fac_list then
32842: LD_VAR 0 17
32846: NOT
32847: IFFALSE 32851
// exit ;
32849: GO 33794
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32851: LD_ADDR_VAR 0 5
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: LD_INT 9
32864: PUSH
32865: LD_INT 10
32867: PUSH
32868: LD_INT 6
32870: PUSH
32871: LD_INT 7
32873: PUSH
32874: LD_INT 11
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 27
32888: PUSH
32889: LD_INT 28
32891: PUSH
32892: LD_INT 26
32894: PUSH
32895: LD_INT 30
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 43
32906: PUSH
32907: LD_INT 44
32909: PUSH
32910: LD_INT 46
32912: PUSH
32913: LD_INT 45
32915: PUSH
32916: LD_INT 47
32918: PUSH
32919: LD_INT 49
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: PUSH
32935: LD_VAR 0 12
32939: ARRAY
32940: ST_TO_ADDR
// list := list isect fac_list ;
32941: LD_ADDR_VAR 0 5
32945: PUSH
32946: LD_VAR 0 5
32950: PUSH
32951: LD_VAR 0 17
32955: ISECT
32956: ST_TO_ADDR
// if not list then
32957: LD_VAR 0 5
32961: NOT
32962: IFFALSE 32966
// exit ;
32964: GO 33794
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32966: LD_VAR 0 12
32970: PUSH
32971: LD_INT 3
32973: EQUAL
32974: IFFALSE 32986
32976: PUSH
32977: LD_INT 49
32979: PUSH
32980: LD_VAR 0 5
32984: IN
32985: AND
32986: IFFALSE 33006
32988: PUSH
32989: LD_INT 31
32991: PPUSH
32992: LD_VAR 0 16
32996: PPUSH
32997: CALL_OW 321
33001: PUSH
33002: LD_INT 2
33004: EQUAL
33005: AND
33006: IFFALSE 33066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33008: LD_INT 22
33010: PUSH
33011: LD_VAR 0 16
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 35
33022: PUSH
33023: LD_INT 49
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 91
33032: PUSH
33033: LD_VAR 0 1
33037: PUSH
33038: LD_INT 10
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: PPUSH
33051: CALL_OW 69
33055: NOT
33056: IFFALSE 33066
// weapon := ru_time_lapser ;
33058: LD_ADDR_VAR 0 18
33062: PUSH
33063: LD_INT 49
33065: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33066: LD_VAR 0 12
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: IN
33081: IFFALSE 33105
33083: PUSH
33084: LD_INT 11
33086: PUSH
33087: LD_VAR 0 5
33091: IN
33092: IFTRUE 33104
33094: PUSH
33095: LD_INT 30
33097: PUSH
33098: LD_VAR 0 5
33102: IN
33103: OR
33104: AND
33105: IFFALSE 33125
33107: PUSH
33108: LD_INT 6
33110: PPUSH
33111: LD_VAR 0 16
33115: PPUSH
33116: CALL_OW 321
33120: PUSH
33121: LD_INT 2
33123: EQUAL
33124: AND
33125: IFFALSE 33292
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33127: LD_INT 22
33129: PUSH
33130: LD_VAR 0 16
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: LD_INT 35
33144: PUSH
33145: LD_INT 11
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 35
33154: PUSH
33155: LD_INT 30
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 91
33169: PUSH
33170: LD_VAR 0 1
33174: PUSH
33175: LD_INT 18
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: PPUSH
33188: CALL_OW 69
33192: NOT
33193: IFFALSE 33269
33195: PUSH
33196: LD_INT 22
33198: PUSH
33199: LD_VAR 0 16
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: LD_INT 30
33213: PUSH
33214: LD_INT 32
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 30
33223: PUSH
33224: LD_INT 33
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 91
33238: PUSH
33239: LD_VAR 0 1
33243: PUSH
33244: LD_INT 12
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: PPUSH
33260: CALL_OW 69
33264: PUSH
33265: LD_INT 2
33267: GREATER
33268: AND
33269: IFFALSE 33292
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33271: LD_ADDR_VAR 0 18
33275: PUSH
33276: LD_INT 11
33278: PUSH
33279: LD_INT 30
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_VAR 0 12
33290: ARRAY
33291: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33292: LD_VAR 0 18
33296: NOT
33297: IFFALSE 33317
33299: PUSH
33300: LD_INT 40
33302: PPUSH
33303: LD_VAR 0 16
33307: PPUSH
33308: CALL_OW 321
33312: PUSH
33313: LD_INT 2
33315: EQUAL
33316: AND
33317: IFFALSE 33353
33319: PUSH
33320: LD_INT 7
33322: PUSH
33323: LD_VAR 0 5
33327: IN
33328: IFTRUE 33340
33330: PUSH
33331: LD_INT 28
33333: PUSH
33334: LD_VAR 0 5
33338: IN
33339: OR
33340: IFTRUE 33352
33342: PUSH
33343: LD_INT 45
33345: PUSH
33346: LD_VAR 0 5
33350: IN
33351: OR
33352: AND
33353: IFFALSE 33607
// begin hex := GetHexInfo ( x , y ) ;
33355: LD_ADDR_VAR 0 4
33359: PUSH
33360: LD_VAR 0 10
33364: PPUSH
33365: LD_VAR 0 11
33369: PPUSH
33370: CALL_OW 546
33374: ST_TO_ADDR
// if hex [ 1 ] then
33375: LD_VAR 0 4
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: IFFALSE 33387
// exit ;
33385: GO 33794
// height := hex [ 2 ] ;
33387: LD_ADDR_VAR 0 15
33391: PUSH
33392: LD_VAR 0 4
33396: PUSH
33397: LD_INT 2
33399: ARRAY
33400: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33401: LD_ADDR_VAR 0 14
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
// for i in tmp do
33424: LD_ADDR_VAR 0 8
33428: PUSH
33429: LD_VAR 0 14
33433: PUSH
33434: FOR_IN
33435: IFFALSE 33605
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33437: LD_ADDR_VAR 0 9
33441: PUSH
33442: LD_VAR 0 10
33446: PPUSH
33447: LD_VAR 0 8
33451: PPUSH
33452: LD_INT 5
33454: PPUSH
33455: CALL_OW 272
33459: PUSH
33460: LD_VAR 0 11
33464: PPUSH
33465: LD_VAR 0 8
33469: PPUSH
33470: LD_INT 5
33472: PPUSH
33473: CALL_OW 273
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33482: LD_VAR 0 9
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PPUSH
33491: LD_VAR 0 9
33495: PUSH
33496: LD_INT 2
33498: ARRAY
33499: PPUSH
33500: CALL_OW 488
33504: IFFALSE 33603
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33506: LD_ADDR_VAR 0 4
33510: PUSH
33511: LD_VAR 0 9
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 9
33524: PUSH
33525: LD_INT 2
33527: ARRAY
33528: PPUSH
33529: CALL_OW 546
33533: ST_TO_ADDR
// if hex [ 1 ] then
33534: LD_VAR 0 4
33538: PUSH
33539: LD_INT 1
33541: ARRAY
33542: IFFALSE 33546
// continue ;
33544: GO 33434
// h := hex [ 2 ] ;
33546: LD_ADDR_VAR 0 13
33550: PUSH
33551: LD_VAR 0 4
33555: PUSH
33556: LD_INT 2
33558: ARRAY
33559: ST_TO_ADDR
// if h + 7 < height then
33560: LD_VAR 0 13
33564: PUSH
33565: LD_INT 7
33567: PLUS
33568: PUSH
33569: LD_VAR 0 15
33573: LESS
33574: IFFALSE 33603
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33576: LD_ADDR_VAR 0 18
33580: PUSH
33581: LD_INT 7
33583: PUSH
33584: LD_INT 28
33586: PUSH
33587: LD_INT 45
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: PUSH
33595: LD_VAR 0 12
33599: ARRAY
33600: ST_TO_ADDR
// break ;
33601: GO 33605
// end ; end ; end ;
33603: GO 33434
33605: POP
33606: POP
// end ; if not weapon then
33607: LD_VAR 0 18
33611: NOT
33612: IFFALSE 33672
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33614: LD_ADDR_VAR 0 5
33618: PUSH
33619: LD_VAR 0 5
33623: PUSH
33624: LD_INT 11
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 49
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: DIFF
33638: ST_TO_ADDR
// if not list then
33639: LD_VAR 0 5
33643: NOT
33644: IFFALSE 33648
// exit ;
33646: GO 33794
// weapon := list [ rand ( 1 , list ) ] ;
33648: LD_ADDR_VAR 0 18
33652: PUSH
33653: LD_VAR 0 5
33657: PUSH
33658: LD_INT 1
33660: PPUSH
33661: LD_VAR 0 5
33665: PPUSH
33666: CALL_OW 12
33670: ARRAY
33671: ST_TO_ADDR
// end ; if weapon then
33672: LD_VAR 0 18
33676: IFFALSE 33794
// begin tmp := CostOfWeapon ( weapon ) ;
33678: LD_ADDR_VAR 0 14
33682: PUSH
33683: LD_VAR 0 18
33687: PPUSH
33688: CALL_OW 451
33692: ST_TO_ADDR
// j := GetBase ( tower ) ;
33693: LD_ADDR_VAR 0 9
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 274
33707: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33708: LD_VAR 0 9
33712: PPUSH
33713: LD_INT 1
33715: PPUSH
33716: CALL_OW 275
33720: PUSH
33721: LD_VAR 0 14
33725: PUSH
33726: LD_INT 1
33728: ARRAY
33729: GREATEREQUAL
33730: IFFALSE 33756
33732: PUSH
33733: LD_VAR 0 9
33737: PPUSH
33738: LD_INT 2
33740: PPUSH
33741: CALL_OW 275
33745: PUSH
33746: LD_VAR 0 14
33750: PUSH
33751: LD_INT 2
33753: ARRAY
33754: GREATEREQUAL
33755: AND
33756: IFFALSE 33782
33758: PUSH
33759: LD_VAR 0 9
33763: PPUSH
33764: LD_INT 3
33766: PPUSH
33767: CALL_OW 275
33771: PUSH
33772: LD_VAR 0 14
33776: PUSH
33777: LD_INT 3
33779: ARRAY
33780: GREATEREQUAL
33781: AND
33782: IFFALSE 33794
// result := weapon ;
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_VAR 0 18
33793: ST_TO_ADDR
// end ; end ;
33794: LD_VAR 0 3
33798: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
// result := true ;
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 1
33810: ST_TO_ADDR
// if array1 = array2 then
33811: LD_VAR 0 1
33815: PUSH
33816: LD_VAR 0 2
33820: EQUAL
33821: IFFALSE 33881
// begin for i = 1 to array1 do
33823: LD_ADDR_VAR 0 4
33827: PUSH
33828: DOUBLE
33829: LD_INT 1
33831: DEC
33832: ST_TO_ADDR
33833: LD_VAR 0 1
33837: PUSH
33838: FOR_TO
33839: IFFALSE 33877
// if array1 [ i ] <> array2 [ i ] then
33841: LD_VAR 0 1
33845: PUSH
33846: LD_VAR 0 4
33850: ARRAY
33851: PUSH
33852: LD_VAR 0 2
33856: PUSH
33857: LD_VAR 0 4
33861: ARRAY
33862: NONEQUAL
33863: IFFALSE 33875
// begin result := false ;
33865: LD_ADDR_VAR 0 3
33869: PUSH
33870: LD_INT 0
33872: ST_TO_ADDR
// break ;
33873: GO 33877
// end ;
33875: GO 33838
33877: POP
33878: POP
// end else
33879: GO 33889
// result := false ;
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 0
33888: ST_TO_ADDR
// end ;
33889: LD_VAR 0 3
33893: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
// if not array1 or not array2 then
33898: LD_VAR 0 1
33902: NOT
33903: IFTRUE 33912
33905: PUSH
33906: LD_VAR 0 2
33910: NOT
33911: OR
33912: IFFALSE 33916
// exit ;
33914: GO 33980
// result := true ;
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 1
33923: ST_TO_ADDR
// for i = 1 to array1 do
33924: LD_ADDR_VAR 0 4
33928: PUSH
33929: DOUBLE
33930: LD_INT 1
33932: DEC
33933: ST_TO_ADDR
33934: LD_VAR 0 1
33938: PUSH
33939: FOR_TO
33940: IFFALSE 33978
// if array1 [ i ] <> array2 [ i ] then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_VAR 0 4
33951: ARRAY
33952: PUSH
33953: LD_VAR 0 2
33957: PUSH
33958: LD_VAR 0 4
33962: ARRAY
33963: NONEQUAL
33964: IFFALSE 33976
// begin result := false ;
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: LD_INT 0
33973: ST_TO_ADDR
// break ;
33974: GO 33978
// end ;
33976: GO 33939
33978: POP
33979: POP
// end ;
33980: LD_VAR 0 3
33984: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33985: LD_INT 0
33987: PPUSH
33988: PPUSH
33989: PPUSH
// pom := GetBase ( fac ) ;
33990: LD_ADDR_VAR 0 5
33994: PUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 274
34004: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34005: LD_ADDR_VAR 0 4
34009: PUSH
34010: LD_VAR 0 2
34014: PUSH
34015: LD_INT 1
34017: ARRAY
34018: PPUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_INT 3
34035: ARRAY
34036: PPUSH
34037: LD_VAR 0 2
34041: PUSH
34042: LD_INT 4
34044: ARRAY
34045: PPUSH
34046: CALL_OW 449
34050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34051: LD_ADDR_VAR 0 3
34055: PUSH
34056: LD_VAR 0 5
34060: PPUSH
34061: LD_INT 1
34063: PPUSH
34064: CALL_OW 275
34068: PUSH
34069: LD_VAR 0 4
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: GREATEREQUAL
34078: IFFALSE 34104
34080: PUSH
34081: LD_VAR 0 5
34085: PPUSH
34086: LD_INT 2
34088: PPUSH
34089: CALL_OW 275
34093: PUSH
34094: LD_VAR 0 4
34098: PUSH
34099: LD_INT 2
34101: ARRAY
34102: GREATEREQUAL
34103: AND
34104: IFFALSE 34130
34106: PUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: LD_INT 3
34114: PPUSH
34115: CALL_OW 275
34119: PUSH
34120: LD_VAR 0 4
34124: PUSH
34125: LD_INT 3
34127: ARRAY
34128: GREATEREQUAL
34129: AND
34130: ST_TO_ADDR
// end ;
34131: LD_VAR 0 3
34135: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34136: LD_INT 0
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
// pom := GetBase ( building ) ;
34142: LD_ADDR_VAR 0 3
34146: PUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL_OW 274
34156: ST_TO_ADDR
// if not pom then
34157: LD_VAR 0 3
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34340
// btype := GetBType ( building ) ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 266
34180: ST_TO_ADDR
// if btype = b_armoury then
34181: LD_VAR 0 5
34185: PUSH
34186: LD_INT 4
34188: EQUAL
34189: IFFALSE 34199
// btype := b_barracks ;
34191: LD_ADDR_VAR 0 5
34195: PUSH
34196: LD_INT 5
34198: ST_TO_ADDR
// if btype = b_depot then
34199: LD_VAR 0 5
34203: PUSH
34204: LD_INT 0
34206: EQUAL
34207: IFFALSE 34217
// btype := b_warehouse ;
34209: LD_ADDR_VAR 0 5
34213: PUSH
34214: LD_INT 1
34216: ST_TO_ADDR
// if btype = b_workshop then
34217: LD_VAR 0 5
34221: PUSH
34222: LD_INT 2
34224: EQUAL
34225: IFFALSE 34235
// btype := b_factory ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_INT 3
34234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34235: LD_ADDR_VAR 0 4
34239: PUSH
34240: LD_VAR 0 5
34244: PPUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 248
34254: PPUSH
34255: CALL_OW 450
34259: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34260: LD_ADDR_VAR 0 2
34264: PUSH
34265: LD_VAR 0 3
34269: PPUSH
34270: LD_INT 1
34272: PPUSH
34273: CALL_OW 275
34277: PUSH
34278: LD_VAR 0 4
34282: PUSH
34283: LD_INT 1
34285: ARRAY
34286: GREATEREQUAL
34287: IFFALSE 34313
34289: PUSH
34290: LD_VAR 0 3
34294: PPUSH
34295: LD_INT 2
34297: PPUSH
34298: CALL_OW 275
34302: PUSH
34303: LD_VAR 0 4
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: GREATEREQUAL
34312: AND
34313: IFFALSE 34339
34315: PUSH
34316: LD_VAR 0 3
34320: PPUSH
34321: LD_INT 3
34323: PPUSH
34324: CALL_OW 275
34328: PUSH
34329: LD_VAR 0 4
34333: PUSH
34334: LD_INT 3
34336: ARRAY
34337: GREATEREQUAL
34338: AND
34339: ST_TO_ADDR
// end ;
34340: LD_VAR 0 2
34344: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34345: LD_INT 0
34347: PPUSH
34348: PPUSH
34349: PPUSH
// pom := GetBase ( building ) ;
34350: LD_ADDR_VAR 0 4
34354: PUSH
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 274
34364: ST_TO_ADDR
// if not pom then
34365: LD_VAR 0 4
34369: NOT
34370: IFFALSE 34374
// exit ;
34372: GO 34479
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34374: LD_ADDR_VAR 0 5
34378: PUSH
34379: LD_VAR 0 2
34383: PPUSH
34384: LD_VAR 0 1
34388: PPUSH
34389: CALL_OW 248
34393: PPUSH
34394: CALL_OW 450
34398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 4
34408: PPUSH
34409: LD_INT 1
34411: PPUSH
34412: CALL_OW 275
34416: PUSH
34417: LD_VAR 0 5
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: GREATEREQUAL
34426: IFFALSE 34452
34428: PUSH
34429: LD_VAR 0 4
34433: PPUSH
34434: LD_INT 2
34436: PPUSH
34437: CALL_OW 275
34441: PUSH
34442: LD_VAR 0 5
34446: PUSH
34447: LD_INT 2
34449: ARRAY
34450: GREATEREQUAL
34451: AND
34452: IFFALSE 34478
34454: PUSH
34455: LD_VAR 0 4
34459: PPUSH
34460: LD_INT 3
34462: PPUSH
34463: CALL_OW 275
34467: PUSH
34468: LD_VAR 0 5
34472: PUSH
34473: LD_INT 3
34475: ARRAY
34476: GREATEREQUAL
34477: AND
34478: ST_TO_ADDR
// end ;
34479: LD_VAR 0 3
34483: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34484: LD_INT 0
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
34496: PPUSH
// result := false ;
34497: LD_ADDR_VAR 0 8
34501: PUSH
34502: LD_INT 0
34504: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34505: LD_VAR 0 5
34509: NOT
34510: IFTRUE 34519
34512: PUSH
34513: LD_VAR 0 1
34517: NOT
34518: OR
34519: IFTRUE 34528
34521: PUSH
34522: LD_VAR 0 2
34526: NOT
34527: OR
34528: IFTRUE 34537
34530: PUSH
34531: LD_VAR 0 3
34535: NOT
34536: OR
34537: IFFALSE 34541
// exit ;
34539: GO 35367
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34541: LD_ADDR_VAR 0 14
34545: PUSH
34546: LD_VAR 0 1
34550: PPUSH
34551: LD_VAR 0 2
34555: PPUSH
34556: LD_VAR 0 3
34560: PPUSH
34561: LD_VAR 0 4
34565: PPUSH
34566: LD_VAR 0 5
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: CALL_OW 248
34579: PPUSH
34580: LD_INT 0
34582: PPUSH
34583: CALL 36648 0 6
34587: ST_TO_ADDR
// if not hexes then
34588: LD_VAR 0 14
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35367
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34597: LD_ADDR_VAR 0 17
34601: PUSH
34602: LD_VAR 0 5
34606: PPUSH
34607: LD_INT 22
34609: PUSH
34610: LD_VAR 0 13
34614: PPUSH
34615: CALL_OW 255
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 30
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PPUSH
34656: CALL_OW 72
34660: ST_TO_ADDR
// for i = 1 to hexes do
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: DOUBLE
34667: LD_INT 1
34669: DEC
34670: ST_TO_ADDR
34671: LD_VAR 0 14
34675: PUSH
34676: FOR_TO
34677: IFFALSE 35365
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34679: LD_ADDR_VAR 0 13
34683: PUSH
34684: LD_VAR 0 14
34688: PUSH
34689: LD_VAR 0 9
34693: ARRAY
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: PPUSH
34699: LD_VAR 0 14
34703: PUSH
34704: LD_VAR 0 9
34708: ARRAY
34709: PUSH
34710: LD_INT 2
34712: ARRAY
34713: PPUSH
34714: CALL_OW 428
34718: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34719: LD_VAR 0 14
34723: PUSH
34724: LD_VAR 0 9
34728: ARRAY
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: PPUSH
34734: LD_VAR 0 14
34738: PUSH
34739: LD_VAR 0 9
34743: ARRAY
34744: PUSH
34745: LD_INT 2
34747: ARRAY
34748: PPUSH
34749: CALL_OW 351
34753: IFTRUE 34792
34755: PUSH
34756: LD_VAR 0 14
34760: PUSH
34761: LD_VAR 0 9
34765: ARRAY
34766: PUSH
34767: LD_INT 1
34769: ARRAY
34770: PPUSH
34771: LD_VAR 0 14
34775: PUSH
34776: LD_VAR 0 9
34780: ARRAY
34781: PUSH
34782: LD_INT 2
34784: ARRAY
34785: PPUSH
34786: CALL_OW 488
34790: NOT
34791: OR
34792: IFTRUE 34809
34794: PUSH
34795: LD_VAR 0 13
34799: PPUSH
34800: CALL_OW 247
34804: PUSH
34805: LD_INT 3
34807: EQUAL
34808: OR
34809: IFFALSE 34815
// exit ;
34811: POP
34812: POP
34813: GO 35367
// if not tmp then
34815: LD_VAR 0 13
34819: NOT
34820: IFFALSE 34824
// continue ;
34822: GO 34676
// result := true ;
34824: LD_ADDR_VAR 0 8
34828: PUSH
34829: LD_INT 1
34831: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34832: LD_VAR 0 6
34836: IFFALSE 34853
34838: PUSH
34839: LD_VAR 0 13
34843: PPUSH
34844: CALL_OW 247
34848: PUSH
34849: LD_INT 2
34851: EQUAL
34852: AND
34853: IFFALSE 34870
34855: PUSH
34856: LD_VAR 0 13
34860: PPUSH
34861: CALL_OW 263
34865: PUSH
34866: LD_INT 1
34868: EQUAL
34869: AND
34870: IFFALSE 35034
// begin if IsDrivenBy ( tmp ) then
34872: LD_VAR 0 13
34876: PPUSH
34877: CALL_OW 311
34881: IFFALSE 34885
// continue ;
34883: GO 34676
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34885: LD_VAR 0 6
34889: PPUSH
34890: LD_INT 3
34892: PUSH
34893: LD_INT 60
34895: PUSH
34896: EMPTY
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: LD_INT 55
34908: PUSH
34909: EMPTY
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 72
34924: IFFALSE 35032
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34926: LD_ADDR_VAR 0 18
34930: PUSH
34931: LD_VAR 0 6
34935: PPUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 60
34941: PUSH
34942: EMPTY
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 3
34951: PUSH
34952: LD_INT 55
34954: PUSH
34955: EMPTY
34956: LIST
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PPUSH
34966: CALL_OW 72
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: ST_TO_ADDR
// if IsInUnit ( driver ) then
34975: LD_VAR 0 18
34979: PPUSH
34980: CALL_OW 310
34984: IFFALSE 34995
// ComExit ( driver ) ;
34986: LD_VAR 0 18
34990: PPUSH
34991: CALL 60648 0 1
// AddComEnterUnit ( driver , tmp ) ;
34995: LD_VAR 0 18
34999: PPUSH
35000: LD_VAR 0 13
35004: PPUSH
35005: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35009: LD_VAR 0 18
35013: PPUSH
35014: LD_VAR 0 7
35018: PPUSH
35019: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35023: LD_VAR 0 18
35027: PPUSH
35028: CALL_OW 181
// end ; continue ;
35032: GO 34676
// end ; if not cleaners or not tmp in cleaners then
35034: LD_VAR 0 6
35038: NOT
35039: IFTRUE 35054
35041: PUSH
35042: LD_VAR 0 13
35046: PUSH
35047: LD_VAR 0 6
35051: IN
35052: NOT
35053: OR
35054: IFFALSE 35363
// begin if dep then
35056: LD_VAR 0 17
35060: IFFALSE 35196
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35062: LD_ADDR_VAR 0 16
35066: PUSH
35067: LD_VAR 0 17
35071: PUSH
35072: LD_INT 1
35074: ARRAY
35075: PPUSH
35076: CALL_OW 250
35080: PPUSH
35081: LD_VAR 0 17
35085: PUSH
35086: LD_INT 1
35088: ARRAY
35089: PPUSH
35090: CALL_OW 254
35094: PPUSH
35095: LD_INT 5
35097: PPUSH
35098: CALL_OW 272
35102: PUSH
35103: LD_VAR 0 17
35107: PUSH
35108: LD_INT 1
35110: ARRAY
35111: PPUSH
35112: CALL_OW 251
35116: PPUSH
35117: LD_VAR 0 17
35121: PUSH
35122: LD_INT 1
35124: ARRAY
35125: PPUSH
35126: CALL_OW 254
35130: PPUSH
35131: LD_INT 5
35133: PPUSH
35134: CALL_OW 273
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35143: LD_VAR 0 16
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: PPUSH
35152: LD_VAR 0 16
35156: PUSH
35157: LD_INT 2
35159: ARRAY
35160: PPUSH
35161: CALL_OW 488
35165: IFFALSE 35196
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35167: LD_VAR 0 13
35171: PPUSH
35172: LD_VAR 0 16
35176: PUSH
35177: LD_INT 1
35179: ARRAY
35180: PPUSH
35181: LD_VAR 0 16
35185: PUSH
35186: LD_INT 2
35188: ARRAY
35189: PPUSH
35190: CALL_OW 111
// continue ;
35194: GO 34676
// end ; end ; r := GetDir ( tmp ) ;
35196: LD_ADDR_VAR 0 15
35200: PUSH
35201: LD_VAR 0 13
35205: PPUSH
35206: CALL_OW 254
35210: ST_TO_ADDR
// if r = 5 then
35211: LD_VAR 0 15
35215: PUSH
35216: LD_INT 5
35218: EQUAL
35219: IFFALSE 35229
// r := 0 ;
35221: LD_ADDR_VAR 0 15
35225: PUSH
35226: LD_INT 0
35228: ST_TO_ADDR
// for j = r to 5 do
35229: LD_ADDR_VAR 0 10
35233: PUSH
35234: DOUBLE
35235: LD_VAR 0 15
35239: DEC
35240: ST_TO_ADDR
35241: LD_INT 5
35243: PUSH
35244: FOR_TO
35245: IFFALSE 35361
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35247: LD_ADDR_VAR 0 11
35251: PUSH
35252: LD_VAR 0 13
35256: PPUSH
35257: CALL_OW 250
35261: PPUSH
35262: LD_VAR 0 10
35266: PPUSH
35267: LD_INT 2
35269: PPUSH
35270: CALL_OW 272
35274: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35275: LD_ADDR_VAR 0 12
35279: PUSH
35280: LD_VAR 0 13
35284: PPUSH
35285: CALL_OW 251
35289: PPUSH
35290: LD_VAR 0 10
35294: PPUSH
35295: LD_INT 2
35297: PPUSH
35298: CALL_OW 273
35302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35303: LD_VAR 0 11
35307: PPUSH
35308: LD_VAR 0 12
35312: PPUSH
35313: CALL_OW 488
35317: IFFALSE 35336
35319: PUSH
35320: LD_VAR 0 11
35324: PPUSH
35325: LD_VAR 0 12
35329: PPUSH
35330: CALL_OW 428
35334: NOT
35335: AND
35336: IFFALSE 35359
// begin ComMoveXY ( tmp , _x , _y ) ;
35338: LD_VAR 0 13
35342: PPUSH
35343: LD_VAR 0 11
35347: PPUSH
35348: LD_VAR 0 12
35352: PPUSH
35353: CALL_OW 111
// break ;
35357: GO 35361
// end ; end ;
35359: GO 35244
35361: POP
35362: POP
// end ; end ;
35363: GO 34676
35365: POP
35366: POP
// end ;
35367: LD_VAR 0 8
35371: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35372: LD_INT 0
35374: PPUSH
// result := true ;
35375: LD_ADDR_VAR 0 3
35379: PUSH
35380: LD_INT 1
35382: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35383: LD_VAR 0 2
35387: PUSH
35388: LD_INT 24
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35402
35394: LD_INT 33
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35427
35402: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_INT 32
35410: PPUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 321
35420: PUSH
35421: LD_INT 2
35423: EQUAL
35424: ST_TO_ADDR
35425: GO 35743
35427: LD_INT 20
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35460
35435: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35436: LD_ADDR_VAR 0 3
35440: PUSH
35441: LD_INT 6
35443: PPUSH
35444: LD_VAR 0 1
35448: PPUSH
35449: CALL_OW 321
35453: PUSH
35454: LD_INT 2
35456: EQUAL
35457: ST_TO_ADDR
35458: GO 35743
35460: LD_INT 22
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35474
35466: LD_INT 36
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35474
35472: GO 35499
35474: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_INT 15
35482: PPUSH
35483: LD_VAR 0 1
35487: PPUSH
35488: CALL_OW 321
35492: PUSH
35493: LD_INT 2
35495: EQUAL
35496: ST_TO_ADDR
35497: GO 35743
35499: LD_INT 30
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35532
35507: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35508: LD_ADDR_VAR 0 3
35512: PUSH
35513: LD_INT 20
35515: PPUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 321
35525: PUSH
35526: LD_INT 2
35528: EQUAL
35529: ST_TO_ADDR
35530: GO 35743
35532: LD_INT 28
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35546
35538: LD_INT 21
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35546
35544: GO 35571
35546: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35547: LD_ADDR_VAR 0 3
35551: PUSH
35552: LD_INT 21
35554: PPUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 321
35564: PUSH
35565: LD_INT 2
35567: EQUAL
35568: ST_TO_ADDR
35569: GO 35743
35571: LD_INT 16
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35579
35577: GO 35604
35579: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: LD_INT 84
35587: PPUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: CALL_OW 321
35597: PUSH
35598: LD_INT 2
35600: EQUAL
35601: ST_TO_ADDR
35602: GO 35743
35604: LD_INT 19
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35618
35610: LD_INT 23
35612: DOUBLE
35613: EQUAL
35614: IFTRUE 35618
35616: GO 35643
35618: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35619: LD_ADDR_VAR 0 3
35623: PUSH
35624: LD_INT 83
35626: PPUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 321
35636: PUSH
35637: LD_INT 2
35639: EQUAL
35640: ST_TO_ADDR
35641: GO 35743
35643: LD_INT 17
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35676
35651: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35652: LD_ADDR_VAR 0 3
35656: PUSH
35657: LD_INT 39
35659: PPUSH
35660: LD_VAR 0 1
35664: PPUSH
35665: CALL_OW 321
35669: PUSH
35670: LD_INT 2
35672: EQUAL
35673: ST_TO_ADDR
35674: GO 35743
35676: LD_INT 18
35678: DOUBLE
35679: EQUAL
35680: IFTRUE 35684
35682: GO 35709
35684: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35685: LD_ADDR_VAR 0 3
35689: PUSH
35690: LD_INT 40
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 321
35702: PUSH
35703: LD_INT 2
35705: EQUAL
35706: ST_TO_ADDR
35707: GO 35743
35709: LD_INT 27
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35717
35715: GO 35742
35717: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_INT 35
35725: PPUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 321
35735: PUSH
35736: LD_INT 2
35738: EQUAL
35739: ST_TO_ADDR
35740: GO 35743
35742: POP
// end ;
35743: LD_VAR 0 3
35747: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35748: LD_INT 0
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
// result := false ;
35761: LD_ADDR_VAR 0 6
35765: PUSH
35766: LD_INT 0
35768: ST_TO_ADDR
// if btype = b_depot then
35769: LD_VAR 0 2
35773: PUSH
35774: LD_INT 0
35776: EQUAL
35777: IFFALSE 35789
// begin result := true ;
35779: LD_ADDR_VAR 0 6
35783: PUSH
35784: LD_INT 1
35786: ST_TO_ADDR
// exit ;
35787: GO 36643
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35789: LD_VAR 0 1
35793: NOT
35794: IFTRUE 35819
35796: PUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 266
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: IN
35817: NOT
35818: OR
35819: IFTRUE 35828
35821: PUSH
35822: LD_VAR 0 2
35826: NOT
35827: OR
35828: IFTRUE 35864
35830: PUSH
35831: LD_VAR 0 5
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 3
35847: PUSH
35848: LD_INT 4
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: IN
35862: NOT
35863: OR
35864: IFTRUE 35883
35866: PUSH
35867: LD_VAR 0 3
35871: PPUSH
35872: LD_VAR 0 4
35876: PPUSH
35877: CALL_OW 488
35881: NOT
35882: OR
35883: IFFALSE 35887
// exit ;
35885: GO 36643
// side := GetSide ( depot ) ;
35887: LD_ADDR_VAR 0 9
35891: PUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 255
35901: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35902: LD_VAR 0 9
35906: PPUSH
35907: LD_VAR 0 2
35911: PPUSH
35912: CALL 35372 0 2
35916: NOT
35917: IFFALSE 35921
// exit ;
35919: GO 36643
// pom := GetBase ( depot ) ;
35921: LD_ADDR_VAR 0 10
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: CALL_OW 274
35935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35936: LD_ADDR_VAR 0 11
35940: PUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 248
35955: PPUSH
35956: CALL_OW 450
35960: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35961: LD_VAR 0 10
35965: PPUSH
35966: LD_INT 1
35968: PPUSH
35969: CALL_OW 275
35973: PUSH
35974: LD_VAR 0 11
35978: PUSH
35979: LD_INT 1
35981: ARRAY
35982: GREATEREQUAL
35983: IFFALSE 36009
35985: PUSH
35986: LD_VAR 0 10
35990: PPUSH
35991: LD_INT 2
35993: PPUSH
35994: CALL_OW 275
35998: PUSH
35999: LD_VAR 0 11
36003: PUSH
36004: LD_INT 2
36006: ARRAY
36007: GREATEREQUAL
36008: AND
36009: IFFALSE 36035
36011: PUSH
36012: LD_VAR 0 10
36016: PPUSH
36017: LD_INT 3
36019: PPUSH
36020: CALL_OW 275
36024: PUSH
36025: LD_VAR 0 11
36029: PUSH
36030: LD_INT 3
36032: ARRAY
36033: GREATEREQUAL
36034: AND
36035: NOT
36036: IFFALSE 36040
// exit ;
36038: GO 36643
// if GetBType ( depot ) = b_depot then
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 266
36049: PUSH
36050: LD_INT 0
36052: EQUAL
36053: IFFALSE 36065
// dist := 28 else
36055: LD_ADDR_VAR 0 14
36059: PUSH
36060: LD_INT 28
36062: ST_TO_ADDR
36063: GO 36073
// dist := 36 ;
36065: LD_ADDR_VAR 0 14
36069: PUSH
36070: LD_INT 36
36072: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36073: LD_VAR 0 1
36077: PPUSH
36078: LD_VAR 0 3
36082: PPUSH
36083: LD_VAR 0 4
36087: PPUSH
36088: CALL_OW 297
36092: PUSH
36093: LD_VAR 0 14
36097: GREATER
36098: IFFALSE 36102
// exit ;
36100: GO 36643
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36102: LD_ADDR_VAR 0 12
36106: PUSH
36107: LD_VAR 0 2
36111: PPUSH
36112: LD_VAR 0 3
36116: PPUSH
36117: LD_VAR 0 4
36121: PPUSH
36122: LD_VAR 0 5
36126: PPUSH
36127: LD_VAR 0 1
36131: PPUSH
36132: CALL_OW 248
36136: PPUSH
36137: LD_INT 0
36139: PPUSH
36140: CALL 36648 0 6
36144: ST_TO_ADDR
// if not hexes then
36145: LD_VAR 0 12
36149: NOT
36150: IFFALSE 36154
// exit ;
36152: GO 36643
// hex := GetHexInfo ( x , y ) ;
36154: LD_ADDR_VAR 0 15
36158: PUSH
36159: LD_VAR 0 3
36163: PPUSH
36164: LD_VAR 0 4
36168: PPUSH
36169: CALL_OW 546
36173: ST_TO_ADDR
// if hex [ 1 ] then
36174: LD_VAR 0 15
36178: PUSH
36179: LD_INT 1
36181: ARRAY
36182: IFFALSE 36186
// exit ;
36184: GO 36643
// height := hex [ 2 ] ;
36186: LD_ADDR_VAR 0 13
36190: PUSH
36191: LD_VAR 0 15
36195: PUSH
36196: LD_INT 2
36198: ARRAY
36199: ST_TO_ADDR
// for i = 1 to hexes do
36200: LD_ADDR_VAR 0 7
36204: PUSH
36205: DOUBLE
36206: LD_INT 1
36208: DEC
36209: ST_TO_ADDR
36210: LD_VAR 0 12
36214: PUSH
36215: FOR_TO
36216: IFFALSE 36560
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36218: LD_VAR 0 12
36222: PUSH
36223: LD_VAR 0 7
36227: ARRAY
36228: PUSH
36229: LD_INT 1
36231: ARRAY
36232: PPUSH
36233: LD_VAR 0 12
36237: PUSH
36238: LD_VAR 0 7
36242: ARRAY
36243: PUSH
36244: LD_INT 2
36246: ARRAY
36247: PPUSH
36248: CALL_OW 488
36252: NOT
36253: IFTRUE 36295
36255: PUSH
36256: LD_VAR 0 12
36260: PUSH
36261: LD_VAR 0 7
36265: ARRAY
36266: PUSH
36267: LD_INT 1
36269: ARRAY
36270: PPUSH
36271: LD_VAR 0 12
36275: PUSH
36276: LD_VAR 0 7
36280: ARRAY
36281: PUSH
36282: LD_INT 2
36284: ARRAY
36285: PPUSH
36286: CALL_OW 428
36290: PUSH
36291: LD_INT 0
36293: GREATER
36294: OR
36295: IFTRUE 36333
36297: PUSH
36298: LD_VAR 0 12
36302: PUSH
36303: LD_VAR 0 7
36307: ARRAY
36308: PUSH
36309: LD_INT 1
36311: ARRAY
36312: PPUSH
36313: LD_VAR 0 12
36317: PUSH
36318: LD_VAR 0 7
36322: ARRAY
36323: PUSH
36324: LD_INT 2
36326: ARRAY
36327: PPUSH
36328: CALL_OW 351
36332: OR
36333: IFFALSE 36339
// exit ;
36335: POP
36336: POP
36337: GO 36643
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36339: LD_ADDR_VAR 0 8
36343: PUSH
36344: LD_VAR 0 12
36348: PUSH
36349: LD_VAR 0 7
36353: ARRAY
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PPUSH
36359: LD_VAR 0 12
36363: PUSH
36364: LD_VAR 0 7
36368: ARRAY
36369: PUSH
36370: LD_INT 2
36372: ARRAY
36373: PPUSH
36374: CALL_OW 546
36378: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36379: LD_VAR 0 8
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: IFTRUE 36409
36389: PUSH
36390: LD_VAR 0 8
36394: PUSH
36395: LD_INT 2
36397: ARRAY
36398: PUSH
36399: LD_VAR 0 13
36403: PUSH
36404: LD_INT 2
36406: PLUS
36407: GREATER
36408: OR
36409: IFTRUE 36431
36411: PUSH
36412: LD_VAR 0 8
36416: PUSH
36417: LD_INT 2
36419: ARRAY
36420: PUSH
36421: LD_VAR 0 13
36425: PUSH
36426: LD_INT 2
36428: MINUS
36429: LESS
36430: OR
36431: IFTRUE 36499
36433: PUSH
36434: LD_VAR 0 8
36438: PUSH
36439: LD_INT 3
36441: ARRAY
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 8
36448: PUSH
36449: LD_INT 9
36451: PUSH
36452: LD_INT 10
36454: PUSH
36455: LD_INT 11
36457: PUSH
36458: LD_INT 12
36460: PUSH
36461: LD_INT 13
36463: PUSH
36464: LD_INT 16
36466: PUSH
36467: LD_INT 17
36469: PUSH
36470: LD_INT 18
36472: PUSH
36473: LD_INT 19
36475: PUSH
36476: LD_INT 20
36478: PUSH
36479: LD_INT 21
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: IN
36497: NOT
36498: OR
36499: IFTRUE 36512
36501: PUSH
36502: LD_VAR 0 8
36506: PUSH
36507: LD_INT 5
36509: ARRAY
36510: NOT
36511: OR
36512: IFTRUE 36552
36514: PUSH
36515: LD_VAR 0 8
36519: PUSH
36520: LD_INT 6
36522: ARRAY
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: LD_INT 7
36532: PUSH
36533: LD_INT 9
36535: PUSH
36536: LD_INT 10
36538: PUSH
36539: LD_INT 11
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: IN
36550: NOT
36551: OR
36552: IFFALSE 36558
// exit ;
36554: POP
36555: POP
36556: GO 36643
// end ;
36558: GO 36215
36560: POP
36561: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36562: LD_VAR 0 9
36566: PPUSH
36567: LD_VAR 0 3
36571: PPUSH
36572: LD_VAR 0 4
36576: PPUSH
36577: LD_INT 20
36579: PPUSH
36580: CALL 28462 0 4
36584: PUSH
36585: LD_INT 4
36587: ARRAY
36588: IFFALSE 36592
// exit ;
36590: GO 36643
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36592: LD_VAR 0 2
36596: PUSH
36597: LD_INT 29
36599: PUSH
36600: LD_INT 30
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: IN
36607: IFFALSE 36631
36609: PUSH
36610: LD_VAR 0 3
36614: PPUSH
36615: LD_VAR 0 4
36619: PPUSH
36620: LD_VAR 0 9
36624: PPUSH
36625: CALL_OW 440
36629: NOT
36630: AND
36631: IFFALSE 36635
// exit ;
36633: GO 36643
// result := true ;
36635: LD_ADDR_VAR 0 6
36639: PUSH
36640: LD_INT 1
36642: ST_TO_ADDR
// end ;
36643: LD_VAR 0 6
36647: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36648: LD_INT 0
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
36674: PPUSH
36675: PPUSH
36676: PPUSH
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
// result = [ ] ;
36708: LD_ADDR_VAR 0 7
36712: PUSH
36713: EMPTY
36714: ST_TO_ADDR
// temp_list = [ ] ;
36715: LD_ADDR_VAR 0 9
36719: PUSH
36720: EMPTY
36721: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36722: LD_VAR 0 4
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: LD_INT 4
36741: PUSH
36742: LD_INT 5
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: IN
36753: NOT
36754: IFTRUE 36797
36756: PUSH
36757: LD_VAR 0 1
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: IN
36772: IFFALSE 36796
36774: PUSH
36775: LD_VAR 0 5
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: IN
36794: NOT
36795: AND
36796: OR
36797: IFFALSE 36801
// exit ;
36799: GO 55200
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36801: LD_VAR 0 1
36805: PUSH
36806: LD_INT 6
36808: PUSH
36809: LD_INT 7
36811: PUSH
36812: LD_INT 8
36814: PUSH
36815: LD_INT 13
36817: PUSH
36818: LD_INT 12
36820: PUSH
36821: LD_INT 15
36823: PUSH
36824: LD_INT 11
36826: PUSH
36827: LD_INT 14
36829: PUSH
36830: LD_INT 10
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: IN
36844: IFFALSE 36854
// btype = b_lab ;
36846: LD_ADDR_VAR 0 1
36850: PUSH
36851: LD_INT 6
36853: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36854: LD_VAR 0 6
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: IN
36873: NOT
36874: IFTRUE 36942
36876: PUSH
36877: LD_VAR 0 1
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 6
36896: PUSH
36897: LD_INT 36
36899: PUSH
36900: LD_INT 4
36902: PUSH
36903: LD_INT 5
36905: PUSH
36906: LD_INT 31
36908: PUSH
36909: LD_INT 32
36911: PUSH
36912: LD_INT 33
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: IN
36928: NOT
36929: IFFALSE 36941
36931: PUSH
36932: LD_VAR 0 6
36936: PUSH
36937: LD_INT 1
36939: EQUAL
36940: AND
36941: OR
36942: IFTRUE 36974
36944: PUSH
36945: LD_VAR 0 1
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: IN
36960: NOT
36961: IFFALSE 36973
36963: PUSH
36964: LD_VAR 0 6
36968: PUSH
36969: LD_INT 2
36971: EQUAL
36972: AND
36973: OR
36974: IFFALSE 36984
// mode = 0 ;
36976: LD_ADDR_VAR 0 6
36980: PUSH
36981: LD_INT 0
36983: ST_TO_ADDR
// case mode of 0 :
36984: LD_VAR 0 6
36988: PUSH
36989: LD_INT 0
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 48450
36997: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36998: LD_ADDR_VAR 0 11
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37191: LD_ADDR_VAR 0 12
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37387: LD_ADDR_VAR 0 13
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 3
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 3
37558: NEG
37559: PUSH
37560: LD_INT 3
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37586: LD_ADDR_VAR 0 14
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 3
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37782: LD_ADDR_VAR 0 15
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 3
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37975: LD_ADDR_VAR 0 16
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 3
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 3
38132: PUSH
38133: LD_INT 3
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38168: LD_ADDR_VAR 0 17
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38398: LD_ADDR_VAR 0 18
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38628: LD_ADDR_VAR 0 19
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38858: LD_ADDR_VAR 0 20
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39088: LD_ADDR_VAR 0 21
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39318: LD_ADDR_VAR 0 22
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39548: LD_ADDR_VAR 0 23
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39828: LD_ADDR_VAR 0 24
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40104: LD_ADDR_VAR 0 25
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40378: LD_ADDR_VAR 0 26
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40654: LD_ADDR_VAR 0 27
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40934: LD_ADDR_VAR 0 28
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 3
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41216: LD_ADDR_VAR 0 29
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41495: LD_ADDR_VAR 0 30
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41773: LD_ADDR_VAR 0 31
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 3
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42051: LD_ADDR_VAR 0 32
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 3
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42329: LD_ADDR_VAR 0 33
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: LD_INT 3
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42608: LD_ADDR_VAR 0 34
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 3
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42888: LD_ADDR_VAR 0 35
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43000: LD_ADDR_VAR 0 36
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43112: LD_ADDR_VAR 0 37
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43224: LD_ADDR_VAR 0 38
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43336: LD_ADDR_VAR 0 39
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43448: LD_ADDR_VAR 0 40
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43560: LD_ADDR_VAR 0 41
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43910: LD_ADDR_VAR 0 42
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 3
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 3
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44260: LD_ADDR_VAR 0 43
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 3
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44608: LD_ADDR_VAR 0 44
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 3
44917: NEG
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44958: LD_ADDR_VAR 0 45
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 3
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: NEG
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45308: LD_ADDR_VAR 0 46
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45656: LD_ADDR_VAR 0 47
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45807: LD_ADDR_VAR 0 48
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45954: LD_ADDR_VAR 0 49
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46098: LD_ADDR_VAR 0 50
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46242: LD_ADDR_VAR 0 51
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46389: LD_ADDR_VAR 0 52
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46540: LD_ADDR_VAR 0 53
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46770: LD_ADDR_VAR 0 54
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 55
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47230: LD_ADDR_VAR 0 56
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47460: LD_ADDR_VAR 0 57
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47690: LD_ADDR_VAR 0 58
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47920: LD_ADDR_VAR 0 59
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48008: LD_ADDR_VAR 0 60
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48096: LD_ADDR_VAR 0 61
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48184: LD_ADDR_VAR 0 62
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48272: LD_ADDR_VAR 0 63
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48360: LD_ADDR_VAR 0 64
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// end ; 1 :
48448: GO 54345
48450: LD_INT 1
48452: DOUBLE
48453: EQUAL
48454: IFTRUE 48458
48456: GO 51081
48458: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48459: LD_ADDR_VAR 0 11
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48503: LD_ADDR_VAR 0 12
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48544: LD_ADDR_VAR 0 13
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48584: LD_ADDR_VAR 0 14
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48625: LD_ADDR_VAR 0 15
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48669: LD_ADDR_VAR 0 16
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48715: LD_ADDR_VAR 0 17
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48759: LD_ADDR_VAR 0 18
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48800: LD_ADDR_VAR 0 19
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48840: LD_ADDR_VAR 0 20
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48881: LD_ADDR_VAR 0 21
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48925: LD_ADDR_VAR 0 22
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48971: LD_ADDR_VAR 0 23
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49015: LD_ADDR_VAR 0 24
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 4
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49056: LD_ADDR_VAR 0 25
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 4
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: LD_INT 4
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49096: LD_ADDR_VAR 0 26
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 4
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49137: LD_ADDR_VAR 0 27
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 4
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49181: LD_ADDR_VAR 0 28
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 3
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 4
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 4
49212: NEG
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49227: LD_ADDR_VAR 0 29
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 4
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 4
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 5
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 5
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 4
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 6
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 6
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 5
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49382: LD_ADDR_VAR 0 30
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 4
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 4
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 4
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 5
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 5
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 5
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 6
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 6
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49525: LD_ADDR_VAR 0 31
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 4
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: LD_INT 4
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 4
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 5
49592: PUSH
49593: LD_INT 4
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 5
49602: PUSH
49603: LD_INT 5
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 4
49612: PUSH
49613: LD_INT 5
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 6
49622: PUSH
49623: LD_INT 5
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 6
49632: PUSH
49633: LD_INT 6
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 5
49642: PUSH
49643: LD_INT 6
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49664: LD_ADDR_VAR 0 32
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 4
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 4
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 5
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 5
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 6
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 6
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49807: LD_ADDR_VAR 0 33
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 4
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 4
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 4
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 5
49893: NEG
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 5
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 5
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 6
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 6
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49962: LD_ADDR_VAR 0 34
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 3
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 4
50017: NEG
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 4
50029: NEG
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 4
50041: NEG
50042: PUSH
50043: LD_INT 5
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 5
50053: NEG
50054: PUSH
50055: LD_INT 4
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 5
50065: NEG
50066: PUSH
50067: LD_INT 5
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 5
50077: NEG
50078: PUSH
50079: LD_INT 6
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 6
50089: NEG
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 6
50101: NEG
50102: PUSH
50103: LD_INT 6
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50125: LD_ADDR_VAR 0 41
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 3
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50169: LD_ADDR_VAR 0 42
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50210: LD_ADDR_VAR 0 43
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50250: LD_ADDR_VAR 0 44
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 45
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50335: LD_ADDR_VAR 0 46
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50381: LD_ADDR_VAR 0 47
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50414: LD_ADDR_VAR 0 48
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50445: LD_ADDR_VAR 0 49
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50474: LD_ADDR_VAR 0 50
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50503: LD_ADDR_VAR 0 51
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50534: LD_ADDR_VAR 0 52
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50567: LD_ADDR_VAR 0 53
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50611: LD_ADDR_VAR 0 54
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50652: LD_ADDR_VAR 0 55
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50692: LD_ADDR_VAR 0 56
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50733: LD_ADDR_VAR 0 57
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50777: LD_ADDR_VAR 0 58
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50823: LD_ADDR_VAR 0 59
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50867: LD_ADDR_VAR 0 60
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50908: LD_ADDR_VAR 0 61
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50948: LD_ADDR_VAR 0 62
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50989: LD_ADDR_VAR 0 63
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51033: LD_ADDR_VAR 0 64
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// end ; 2 :
51079: GO 54345
51081: LD_INT 2
51083: DOUBLE
51084: EQUAL
51085: IFTRUE 51089
51087: GO 54344
51089: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51090: LD_ADDR_VAR 0 29
51094: PUSH
51095: LD_INT 4
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 5
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 4
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 4
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 4
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 4
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 5
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 3
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 4
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 4
51475: NEG
51476: PUSH
51477: LD_INT 4
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 4
51487: NEG
51488: PUSH
51489: LD_INT 5
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 4
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 5
51535: NEG
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 5
51547: NEG
51548: PUSH
51549: LD_INT 5
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: LD_INT 5
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51628: LD_ADDR_VAR 0 30
51632: PUSH
51633: LD_INT 4
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 4
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 5
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 5
51665: PUSH
51666: LD_INT 5
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: LD_INT 5
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 5
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 5
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 4
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 4
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 4
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 5
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 5
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 5
51897: NEG
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 4
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: LD_INT 4
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: LD_INT 4
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 4
52016: NEG
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 4
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 5
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 4
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 5
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: LD_INT 5
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52175: LD_ADDR_VAR 0 31
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 4
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 5
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 4
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 5
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 4
52331: NEG
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 4
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 4
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: LD_INT 4
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 4
52389: NEG
52390: PUSH
52391: LD_INT 5
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: LD_INT 4
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 4
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: NEG
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 5
52449: NEG
52450: PUSH
52451: LD_INT 5
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: LD_INT 5
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 5
52473: NEG
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 4
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 4
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 5
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 5
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52725: LD_ADDR_VAR 0 32
52729: PUSH
52730: LD_INT 4
52732: NEG
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 4
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 4
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 5
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 5
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 4
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 4
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 4
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 5
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 4
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 4
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 5
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 5
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 4
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 4
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 4
53137: PUSH
53138: LD_INT 4
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 5
53157: PUSH
53158: LD_INT 4
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 5
53167: PUSH
53168: LD_INT 5
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 4
53177: PUSH
53178: LD_INT 5
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 5
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53272: LD_ADDR_VAR 0 33
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: LD_INT 4
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: LD_INT 5
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: LD_INT 4
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 4
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 5
53339: NEG
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 5
53351: NEG
53352: PUSH
53353: LD_INT 5
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 5
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 5
53375: NEG
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 4
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 4
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 5
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 5
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 5
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 4
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: LD_INT 4
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: LD_INT 4
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 4
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 4
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 5
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 5
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 4
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 5
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53810: LD_ADDR_VAR 0 34
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 4
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 5
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 4
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 5
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 5
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 4
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 4
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: LD_INT 4
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: LD_INT 5
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: LD_INT 5
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 5
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 5
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 4
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 4
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 5
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 5
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 5
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// end ; end ;
54342: GO 54345
54344: POP
// case btype of b_depot , b_warehouse :
54345: LD_VAR 0 1
54349: PUSH
54350: LD_INT 0
54352: DOUBLE
54353: EQUAL
54354: IFTRUE 54364
54356: LD_INT 1
54358: DOUBLE
54359: EQUAL
54360: IFTRUE 54364
54362: GO 54565
54364: POP
// case nation of nation_american :
54365: LD_VAR 0 5
54369: PUSH
54370: LD_INT 1
54372: DOUBLE
54373: EQUAL
54374: IFTRUE 54378
54376: GO 54434
54378: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54379: LD_ADDR_VAR 0 9
54383: PUSH
54384: LD_VAR 0 11
54388: PUSH
54389: LD_VAR 0 12
54393: PUSH
54394: LD_VAR 0 13
54398: PUSH
54399: LD_VAR 0 14
54403: PUSH
54404: LD_VAR 0 15
54408: PUSH
54409: LD_VAR 0 16
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: PUSH
54422: LD_VAR 0 4
54426: PUSH
54427: LD_INT 1
54429: PLUS
54430: ARRAY
54431: ST_TO_ADDR
54432: GO 54563
54434: LD_INT 2
54436: DOUBLE
54437: EQUAL
54438: IFTRUE 54442
54440: GO 54498
54442: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54443: LD_ADDR_VAR 0 9
54447: PUSH
54448: LD_VAR 0 17
54452: PUSH
54453: LD_VAR 0 18
54457: PUSH
54458: LD_VAR 0 19
54462: PUSH
54463: LD_VAR 0 20
54467: PUSH
54468: LD_VAR 0 21
54472: PUSH
54473: LD_VAR 0 22
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: PUSH
54486: LD_VAR 0 4
54490: PUSH
54491: LD_INT 1
54493: PLUS
54494: ARRAY
54495: ST_TO_ADDR
54496: GO 54563
54498: LD_INT 3
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54506
54504: GO 54562
54506: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54507: LD_ADDR_VAR 0 9
54511: PUSH
54512: LD_VAR 0 23
54516: PUSH
54517: LD_VAR 0 24
54521: PUSH
54522: LD_VAR 0 25
54526: PUSH
54527: LD_VAR 0 26
54531: PUSH
54532: LD_VAR 0 27
54536: PUSH
54537: LD_VAR 0 28
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 4
54554: PUSH
54555: LD_INT 1
54557: PLUS
54558: ARRAY
54559: ST_TO_ADDR
54560: GO 54563
54562: POP
54563: GO 55118
54565: LD_INT 2
54567: DOUBLE
54568: EQUAL
54569: IFTRUE 54579
54571: LD_INT 3
54573: DOUBLE
54574: EQUAL
54575: IFTRUE 54579
54577: GO 54635
54579: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 29
54589: PUSH
54590: LD_VAR 0 30
54594: PUSH
54595: LD_VAR 0 31
54599: PUSH
54600: LD_VAR 0 32
54604: PUSH
54605: LD_VAR 0 33
54609: PUSH
54610: LD_VAR 0 34
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 4
54627: PUSH
54628: LD_INT 1
54630: PLUS
54631: ARRAY
54632: ST_TO_ADDR
54633: GO 55118
54635: LD_INT 16
54637: DOUBLE
54638: EQUAL
54639: IFTRUE 54697
54641: LD_INT 17
54643: DOUBLE
54644: EQUAL
54645: IFTRUE 54697
54647: LD_INT 18
54649: DOUBLE
54650: EQUAL
54651: IFTRUE 54697
54653: LD_INT 19
54655: DOUBLE
54656: EQUAL
54657: IFTRUE 54697
54659: LD_INT 22
54661: DOUBLE
54662: EQUAL
54663: IFTRUE 54697
54665: LD_INT 20
54667: DOUBLE
54668: EQUAL
54669: IFTRUE 54697
54671: LD_INT 21
54673: DOUBLE
54674: EQUAL
54675: IFTRUE 54697
54677: LD_INT 23
54679: DOUBLE
54680: EQUAL
54681: IFTRUE 54697
54683: LD_INT 24
54685: DOUBLE
54686: EQUAL
54687: IFTRUE 54697
54689: LD_INT 25
54691: DOUBLE
54692: EQUAL
54693: IFTRUE 54697
54695: GO 54753
54697: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54698: LD_ADDR_VAR 0 9
54702: PUSH
54703: LD_VAR 0 35
54707: PUSH
54708: LD_VAR 0 36
54712: PUSH
54713: LD_VAR 0 37
54717: PUSH
54718: LD_VAR 0 38
54722: PUSH
54723: LD_VAR 0 39
54727: PUSH
54728: LD_VAR 0 40
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: PUSH
54741: LD_VAR 0 4
54745: PUSH
54746: LD_INT 1
54748: PLUS
54749: ARRAY
54750: ST_TO_ADDR
54751: GO 55118
54753: LD_INT 6
54755: DOUBLE
54756: EQUAL
54757: IFTRUE 54809
54759: LD_INT 7
54761: DOUBLE
54762: EQUAL
54763: IFTRUE 54809
54765: LD_INT 8
54767: DOUBLE
54768: EQUAL
54769: IFTRUE 54809
54771: LD_INT 13
54773: DOUBLE
54774: EQUAL
54775: IFTRUE 54809
54777: LD_INT 12
54779: DOUBLE
54780: EQUAL
54781: IFTRUE 54809
54783: LD_INT 15
54785: DOUBLE
54786: EQUAL
54787: IFTRUE 54809
54789: LD_INT 11
54791: DOUBLE
54792: EQUAL
54793: IFTRUE 54809
54795: LD_INT 14
54797: DOUBLE
54798: EQUAL
54799: IFTRUE 54809
54801: LD_INT 10
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54809
54807: GO 54865
54809: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54810: LD_ADDR_VAR 0 9
54814: PUSH
54815: LD_VAR 0 41
54819: PUSH
54820: LD_VAR 0 42
54824: PUSH
54825: LD_VAR 0 43
54829: PUSH
54830: LD_VAR 0 44
54834: PUSH
54835: LD_VAR 0 45
54839: PUSH
54840: LD_VAR 0 46
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: PUSH
54853: LD_VAR 0 4
54857: PUSH
54858: LD_INT 1
54860: PLUS
54861: ARRAY
54862: ST_TO_ADDR
54863: GO 55118
54865: LD_INT 36
54867: DOUBLE
54868: EQUAL
54869: IFTRUE 54873
54871: GO 54929
54873: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54874: LD_ADDR_VAR 0 9
54878: PUSH
54879: LD_VAR 0 47
54883: PUSH
54884: LD_VAR 0 48
54888: PUSH
54889: LD_VAR 0 49
54893: PUSH
54894: LD_VAR 0 50
54898: PUSH
54899: LD_VAR 0 51
54903: PUSH
54904: LD_VAR 0 52
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: PUSH
54917: LD_VAR 0 4
54921: PUSH
54922: LD_INT 1
54924: PLUS
54925: ARRAY
54926: ST_TO_ADDR
54927: GO 55118
54929: LD_INT 4
54931: DOUBLE
54932: EQUAL
54933: IFTRUE 54955
54935: LD_INT 5
54937: DOUBLE
54938: EQUAL
54939: IFTRUE 54955
54941: LD_INT 34
54943: DOUBLE
54944: EQUAL
54945: IFTRUE 54955
54947: LD_INT 37
54949: DOUBLE
54950: EQUAL
54951: IFTRUE 54955
54953: GO 55011
54955: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54956: LD_ADDR_VAR 0 9
54960: PUSH
54961: LD_VAR 0 53
54965: PUSH
54966: LD_VAR 0 54
54970: PUSH
54971: LD_VAR 0 55
54975: PUSH
54976: LD_VAR 0 56
54980: PUSH
54981: LD_VAR 0 57
54985: PUSH
54986: LD_VAR 0 58
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: PUSH
54999: LD_VAR 0 4
55003: PUSH
55004: LD_INT 1
55006: PLUS
55007: ARRAY
55008: ST_TO_ADDR
55009: GO 55118
55011: LD_INT 31
55013: DOUBLE
55014: EQUAL
55015: IFTRUE 55061
55017: LD_INT 32
55019: DOUBLE
55020: EQUAL
55021: IFTRUE 55061
55023: LD_INT 33
55025: DOUBLE
55026: EQUAL
55027: IFTRUE 55061
55029: LD_INT 27
55031: DOUBLE
55032: EQUAL
55033: IFTRUE 55061
55035: LD_INT 26
55037: DOUBLE
55038: EQUAL
55039: IFTRUE 55061
55041: LD_INT 28
55043: DOUBLE
55044: EQUAL
55045: IFTRUE 55061
55047: LD_INT 29
55049: DOUBLE
55050: EQUAL
55051: IFTRUE 55061
55053: LD_INT 30
55055: DOUBLE
55056: EQUAL
55057: IFTRUE 55061
55059: GO 55117
55061: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55062: LD_ADDR_VAR 0 9
55066: PUSH
55067: LD_VAR 0 59
55071: PUSH
55072: LD_VAR 0 60
55076: PUSH
55077: LD_VAR 0 61
55081: PUSH
55082: LD_VAR 0 62
55086: PUSH
55087: LD_VAR 0 63
55091: PUSH
55092: LD_VAR 0 64
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: PUSH
55105: LD_VAR 0 4
55109: PUSH
55110: LD_INT 1
55112: PLUS
55113: ARRAY
55114: ST_TO_ADDR
55115: GO 55118
55117: POP
// temp_list2 = [ ] ;
55118: LD_ADDR_VAR 0 10
55122: PUSH
55123: EMPTY
55124: ST_TO_ADDR
// for i in temp_list do
55125: LD_ADDR_VAR 0 8
55129: PUSH
55130: LD_VAR 0 9
55134: PUSH
55135: FOR_IN
55136: IFFALSE 55188
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55138: LD_ADDR_VAR 0 10
55142: PUSH
55143: LD_VAR 0 10
55147: PUSH
55148: LD_VAR 0 8
55152: PUSH
55153: LD_INT 1
55155: ARRAY
55156: PUSH
55157: LD_VAR 0 2
55161: PLUS
55162: PUSH
55163: LD_VAR 0 8
55167: PUSH
55168: LD_INT 2
55170: ARRAY
55171: PUSH
55172: LD_VAR 0 3
55176: PLUS
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: ADD
55185: ST_TO_ADDR
55186: GO 55135
55188: POP
55189: POP
// result = temp_list2 ;
55190: LD_ADDR_VAR 0 7
55194: PUSH
55195: LD_VAR 0 10
55199: ST_TO_ADDR
// end ;
55200: LD_VAR 0 7
55204: RET
// export function EnemyInRange ( unit , dist ) ; begin
55205: LD_INT 0
55207: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55208: LD_ADDR_VAR 0 3
55212: PUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: CALL_OW 255
55222: PPUSH
55223: LD_VAR 0 1
55227: PPUSH
55228: CALL_OW 250
55232: PPUSH
55233: LD_VAR 0 1
55237: PPUSH
55238: CALL_OW 251
55242: PPUSH
55243: LD_VAR 0 2
55247: PPUSH
55248: CALL 28462 0 4
55252: PUSH
55253: LD_INT 4
55255: ARRAY
55256: ST_TO_ADDR
// end ;
55257: LD_VAR 0 3
55261: RET
// export function PlayerSeeMe ( unit ) ; begin
55262: LD_INT 0
55264: PPUSH
// result := See ( your_side , unit ) ;
55265: LD_ADDR_VAR 0 2
55269: PUSH
55270: LD_OWVAR 2
55274: PPUSH
55275: LD_VAR 0 1
55279: PPUSH
55280: CALL_OW 292
55284: ST_TO_ADDR
// end ;
55285: LD_VAR 0 2
55289: RET
// export function ReverseDir ( unit ) ; begin
55290: LD_INT 0
55292: PPUSH
// if not unit then
55293: LD_VAR 0 1
55297: NOT
55298: IFFALSE 55302
// exit ;
55300: GO 55325
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55302: LD_ADDR_VAR 0 2
55306: PUSH
55307: LD_VAR 0 1
55311: PPUSH
55312: CALL_OW 254
55316: PUSH
55317: LD_INT 3
55319: PLUS
55320: PUSH
55321: LD_INT 6
55323: MOD
55324: ST_TO_ADDR
// end ;
55325: LD_VAR 0 2
55329: RET
// export function ReverseArray ( array ) ; var i ; begin
55330: LD_INT 0
55332: PPUSH
55333: PPUSH
// if not array then
55334: LD_VAR 0 1
55338: NOT
55339: IFFALSE 55343
// exit ;
55341: GO 55398
// result := [ ] ;
55343: LD_ADDR_VAR 0 2
55347: PUSH
55348: EMPTY
55349: ST_TO_ADDR
// for i := array downto 1 do
55350: LD_ADDR_VAR 0 3
55354: PUSH
55355: DOUBLE
55356: LD_VAR 0 1
55360: INC
55361: ST_TO_ADDR
55362: LD_INT 1
55364: PUSH
55365: FOR_DOWNTO
55366: IFFALSE 55396
// result := Join ( result , array [ i ] ) ;
55368: LD_ADDR_VAR 0 2
55372: PUSH
55373: LD_VAR 0 2
55377: PPUSH
55378: LD_VAR 0 1
55382: PUSH
55383: LD_VAR 0 3
55387: ARRAY
55388: PPUSH
55389: CALL 60250 0 2
55393: ST_TO_ADDR
55394: GO 55365
55396: POP
55397: POP
// end ;
55398: LD_VAR 0 2
55402: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
// if not unit or not hexes then
55411: LD_VAR 0 1
55415: NOT
55416: IFTRUE 55425
55418: PUSH
55419: LD_VAR 0 2
55423: NOT
55424: OR
55425: IFFALSE 55429
// exit ;
55427: GO 55552
// dist := 9999 ;
55429: LD_ADDR_VAR 0 5
55433: PUSH
55434: LD_INT 9999
55436: ST_TO_ADDR
// for i = 1 to hexes do
55437: LD_ADDR_VAR 0 4
55441: PUSH
55442: DOUBLE
55443: LD_INT 1
55445: DEC
55446: ST_TO_ADDR
55447: LD_VAR 0 2
55451: PUSH
55452: FOR_TO
55453: IFFALSE 55540
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55455: LD_ADDR_VAR 0 6
55459: PUSH
55460: LD_VAR 0 1
55464: PPUSH
55465: LD_VAR 0 2
55469: PUSH
55470: LD_VAR 0 4
55474: ARRAY
55475: PUSH
55476: LD_INT 1
55478: ARRAY
55479: PPUSH
55480: LD_VAR 0 2
55484: PUSH
55485: LD_VAR 0 4
55489: ARRAY
55490: PUSH
55491: LD_INT 2
55493: ARRAY
55494: PPUSH
55495: CALL_OW 297
55499: ST_TO_ADDR
// if tdist < dist then
55500: LD_VAR 0 6
55504: PUSH
55505: LD_VAR 0 5
55509: LESS
55510: IFFALSE 55538
// begin hex := hexes [ i ] ;
55512: LD_ADDR_VAR 0 8
55516: PUSH
55517: LD_VAR 0 2
55521: PUSH
55522: LD_VAR 0 4
55526: ARRAY
55527: ST_TO_ADDR
// dist := tdist ;
55528: LD_ADDR_VAR 0 5
55532: PUSH
55533: LD_VAR 0 6
55537: ST_TO_ADDR
// end ; end ;
55538: GO 55452
55540: POP
55541: POP
// result := hex ;
55542: LD_ADDR_VAR 0 3
55546: PUSH
55547: LD_VAR 0 8
55551: ST_TO_ADDR
// end ;
55552: LD_VAR 0 3
55556: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55557: LD_INT 0
55559: PPUSH
55560: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55561: LD_VAR 0 1
55565: NOT
55566: IFTRUE 55605
55568: PUSH
55569: LD_VAR 0 1
55573: PUSH
55574: LD_INT 21
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 23
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PPUSH
55598: CALL_OW 69
55602: IN
55603: NOT
55604: OR
55605: IFFALSE 55609
// exit ;
55607: GO 55656
// for i = 1 to 3 do
55609: LD_ADDR_VAR 0 3
55613: PUSH
55614: DOUBLE
55615: LD_INT 1
55617: DEC
55618: ST_TO_ADDR
55619: LD_INT 3
55621: PUSH
55622: FOR_TO
55623: IFFALSE 55654
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55625: LD_VAR 0 1
55629: PPUSH
55630: CALL_OW 250
55634: PPUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL_OW 251
55644: PPUSH
55645: LD_INT 1
55647: PPUSH
55648: CALL_OW 453
55652: GO 55622
55654: POP
55655: POP
// end ;
55656: LD_VAR 0 2
55660: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55661: LD_INT 0
55663: PPUSH
55664: PPUSH
55665: PPUSH
55666: PPUSH
55667: PPUSH
55668: PPUSH
// if not unit or not enemy_unit then
55669: LD_VAR 0 1
55673: NOT
55674: IFTRUE 55683
55676: PUSH
55677: LD_VAR 0 2
55681: NOT
55682: OR
55683: IFFALSE 55687
// exit ;
55685: GO 56168
// if GetLives ( i ) < 250 then
55687: LD_VAR 0 4
55691: PPUSH
55692: CALL_OW 256
55696: PUSH
55697: LD_INT 250
55699: LESS
55700: IFFALSE 55713
// begin ComAutodestruct ( i ) ;
55702: LD_VAR 0 4
55706: PPUSH
55707: CALL 55557 0 1
// exit ;
55711: GO 56168
// end ; x := GetX ( enemy_unit ) ;
55713: LD_ADDR_VAR 0 7
55717: PUSH
55718: LD_VAR 0 2
55722: PPUSH
55723: CALL_OW 250
55727: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55728: LD_ADDR_VAR 0 8
55732: PUSH
55733: LD_VAR 0 2
55737: PPUSH
55738: CALL_OW 251
55742: ST_TO_ADDR
// if not x or not y then
55743: LD_VAR 0 7
55747: NOT
55748: IFTRUE 55757
55750: PUSH
55751: LD_VAR 0 8
55755: NOT
55756: OR
55757: IFFALSE 55761
// exit ;
55759: GO 56168
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55761: LD_ADDR_VAR 0 6
55765: PUSH
55766: LD_VAR 0 7
55770: PPUSH
55771: LD_INT 0
55773: PPUSH
55774: LD_INT 4
55776: PPUSH
55777: CALL_OW 272
55781: PUSH
55782: LD_VAR 0 8
55786: PPUSH
55787: LD_INT 0
55789: PPUSH
55790: LD_INT 4
55792: PPUSH
55793: CALL_OW 273
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_VAR 0 7
55806: PPUSH
55807: LD_INT 1
55809: PPUSH
55810: LD_INT 4
55812: PPUSH
55813: CALL_OW 272
55817: PUSH
55818: LD_VAR 0 8
55822: PPUSH
55823: LD_INT 1
55825: PPUSH
55826: LD_INT 4
55828: PPUSH
55829: CALL_OW 273
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_VAR 0 7
55842: PPUSH
55843: LD_INT 2
55845: PPUSH
55846: LD_INT 4
55848: PPUSH
55849: CALL_OW 272
55853: PUSH
55854: LD_VAR 0 8
55858: PPUSH
55859: LD_INT 2
55861: PPUSH
55862: LD_INT 4
55864: PPUSH
55865: CALL_OW 273
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_VAR 0 7
55878: PPUSH
55879: LD_INT 3
55881: PPUSH
55882: LD_INT 4
55884: PPUSH
55885: CALL_OW 272
55889: PUSH
55890: LD_VAR 0 8
55894: PPUSH
55895: LD_INT 3
55897: PPUSH
55898: LD_INT 4
55900: PPUSH
55901: CALL_OW 273
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_VAR 0 7
55914: PPUSH
55915: LD_INT 4
55917: PPUSH
55918: LD_INT 4
55920: PPUSH
55921: CALL_OW 272
55925: PUSH
55926: LD_VAR 0 8
55930: PPUSH
55931: LD_INT 4
55933: PPUSH
55934: LD_INT 4
55936: PPUSH
55937: CALL_OW 273
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_VAR 0 7
55950: PPUSH
55951: LD_INT 5
55953: PPUSH
55954: LD_INT 4
55956: PPUSH
55957: CALL_OW 272
55961: PUSH
55962: LD_VAR 0 8
55966: PPUSH
55967: LD_INT 5
55969: PPUSH
55970: LD_INT 4
55972: PPUSH
55973: CALL_OW 273
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// for i = tmp downto 1 do
55990: LD_ADDR_VAR 0 4
55994: PUSH
55995: DOUBLE
55996: LD_VAR 0 6
56000: INC
56001: ST_TO_ADDR
56002: LD_INT 1
56004: PUSH
56005: FOR_DOWNTO
56006: IFFALSE 56109
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56008: LD_VAR 0 6
56012: PUSH
56013: LD_VAR 0 4
56017: ARRAY
56018: PUSH
56019: LD_INT 1
56021: ARRAY
56022: PPUSH
56023: LD_VAR 0 6
56027: PUSH
56028: LD_VAR 0 4
56032: ARRAY
56033: PUSH
56034: LD_INT 2
56036: ARRAY
56037: PPUSH
56038: CALL_OW 488
56042: NOT
56043: IFTRUE 56085
56045: PUSH
56046: LD_VAR 0 6
56050: PUSH
56051: LD_VAR 0 4
56055: ARRAY
56056: PUSH
56057: LD_INT 1
56059: ARRAY
56060: PPUSH
56061: LD_VAR 0 6
56065: PUSH
56066: LD_VAR 0 4
56070: ARRAY
56071: PUSH
56072: LD_INT 2
56074: ARRAY
56075: PPUSH
56076: CALL_OW 428
56080: PUSH
56081: LD_INT 0
56083: NONEQUAL
56084: OR
56085: IFFALSE 56107
// tmp := Delete ( tmp , i ) ;
56087: LD_ADDR_VAR 0 6
56091: PUSH
56092: LD_VAR 0 6
56096: PPUSH
56097: LD_VAR 0 4
56101: PPUSH
56102: CALL_OW 3
56106: ST_TO_ADDR
56107: GO 56005
56109: POP
56110: POP
// j := GetClosestHex ( unit , tmp ) ;
56111: LD_ADDR_VAR 0 5
56115: PUSH
56116: LD_VAR 0 1
56120: PPUSH
56121: LD_VAR 0 6
56125: PPUSH
56126: CALL 55403 0 2
56130: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56131: LD_VAR 0 1
56135: PPUSH
56136: LD_VAR 0 5
56140: PUSH
56141: LD_INT 1
56143: ARRAY
56144: PPUSH
56145: LD_VAR 0 5
56149: PUSH
56150: LD_INT 2
56152: ARRAY
56153: PPUSH
56154: CALL_OW 111
// result := j ;
56158: LD_ADDR_VAR 0 3
56162: PUSH
56163: LD_VAR 0 5
56167: ST_TO_ADDR
// end ;
56168: LD_VAR 0 3
56172: RET
// export function PrepareApemanSoldier ( ) ; begin
56173: LD_INT 0
56175: PPUSH
// uc_nation := 0 ;
56176: LD_ADDR_OWVAR 21
56180: PUSH
56181: LD_INT 0
56183: ST_TO_ADDR
// hc_sex := sex_male ;
56184: LD_ADDR_OWVAR 27
56188: PUSH
56189: LD_INT 1
56191: ST_TO_ADDR
// hc_name :=  ;
56192: LD_ADDR_OWVAR 26
56196: PUSH
56197: LD_STRING 
56199: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56200: LD_ADDR_OWVAR 28
56204: PUSH
56205: LD_INT 15
56207: ST_TO_ADDR
// hc_gallery :=  ;
56208: LD_ADDR_OWVAR 33
56212: PUSH
56213: LD_STRING 
56215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56216: LD_ADDR_OWVAR 31
56220: PUSH
56221: LD_INT 0
56223: PPUSH
56224: LD_INT 3
56226: PPUSH
56227: CALL_OW 12
56231: PUSH
56232: LD_INT 0
56234: PPUSH
56235: LD_INT 3
56237: PPUSH
56238: CALL_OW 12
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
56255: LD_ADDR_OWVAR 29
56259: PUSH
56260: LD_INT 10
56262: PUSH
56263: LD_INT 12
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// end ;
56270: LD_VAR 0 1
56274: RET
// export function PrepareApemanEngineer ( ) ; begin
56275: LD_INT 0
56277: PPUSH
// uc_nation := 0 ;
56278: LD_ADDR_OWVAR 21
56282: PUSH
56283: LD_INT 0
56285: ST_TO_ADDR
// hc_sex := sex_male ;
56286: LD_ADDR_OWVAR 27
56290: PUSH
56291: LD_INT 1
56293: ST_TO_ADDR
// hc_name :=  ;
56294: LD_ADDR_OWVAR 26
56298: PUSH
56299: LD_STRING 
56301: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56302: LD_ADDR_OWVAR 28
56306: PUSH
56307: LD_INT 16
56309: ST_TO_ADDR
// hc_gallery :=  ;
56310: LD_ADDR_OWVAR 33
56314: PUSH
56315: LD_STRING 
56317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56318: LD_ADDR_OWVAR 31
56322: PUSH
56323: LD_INT 0
56325: PPUSH
56326: LD_INT 3
56328: PPUSH
56329: CALL_OW 12
56333: PUSH
56334: LD_INT 0
56336: PPUSH
56337: LD_INT 3
56339: PPUSH
56340: CALL_OW 12
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
56357: LD_ADDR_OWVAR 29
56361: PUSH
56362: LD_INT 10
56364: PUSH
56365: LD_INT 12
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// end ;
56372: LD_VAR 0 1
56376: RET
// export function PrepareApeman ( agressivity ) ; begin
56377: LD_INT 0
56379: PPUSH
// uc_side := 0 ;
56380: LD_ADDR_OWVAR 20
56384: PUSH
56385: LD_INT 0
56387: ST_TO_ADDR
// uc_nation := 0 ;
56388: LD_ADDR_OWVAR 21
56392: PUSH
56393: LD_INT 0
56395: ST_TO_ADDR
// hc_sex := sex_male ;
56396: LD_ADDR_OWVAR 27
56400: PUSH
56401: LD_INT 1
56403: ST_TO_ADDR
// hc_class := class_apeman ;
56404: LD_ADDR_OWVAR 28
56408: PUSH
56409: LD_INT 12
56411: ST_TO_ADDR
// hc_gallery :=  ;
56412: LD_ADDR_OWVAR 33
56416: PUSH
56417: LD_STRING 
56419: ST_TO_ADDR
// hc_name :=  ;
56420: LD_ADDR_OWVAR 26
56424: PUSH
56425: LD_STRING 
56427: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
56428: LD_ADDR_OWVAR 29
56432: PUSH
56433: LD_INT 10
56435: PUSH
56436: LD_INT 12
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// if agressivity = 0 then
56443: LD_VAR 0 1
56447: PUSH
56448: LD_INT 0
56450: EQUAL
56451: IFFALSE 56463
// hc_agressivity := 0 else
56453: LD_ADDR_OWVAR 35
56457: PUSH
56458: LD_INT 0
56460: ST_TO_ADDR
56461: GO 56484
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56463: LD_ADDR_OWVAR 35
56467: PUSH
56468: LD_VAR 0 1
56472: NEG
56473: PPUSH
56474: LD_VAR 0 1
56478: PPUSH
56479: CALL_OW 12
56483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56484: LD_ADDR_OWVAR 31
56488: PUSH
56489: LD_INT 0
56491: PPUSH
56492: LD_INT 3
56494: PPUSH
56495: CALL_OW 12
56499: PUSH
56500: LD_INT 0
56502: PPUSH
56503: LD_INT 3
56505: PPUSH
56506: CALL_OW 12
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: ST_TO_ADDR
// end ;
56523: LD_VAR 0 2
56527: RET
// export function PrepareTiger ( agressivity ) ; begin
56528: LD_INT 0
56530: PPUSH
// uc_side := 0 ;
56531: LD_ADDR_OWVAR 20
56535: PUSH
56536: LD_INT 0
56538: ST_TO_ADDR
// uc_nation := 0 ;
56539: LD_ADDR_OWVAR 21
56543: PUSH
56544: LD_INT 0
56546: ST_TO_ADDR
// InitHc ;
56547: CALL_OW 19
// hc_class := class_tiger ;
56551: LD_ADDR_OWVAR 28
56555: PUSH
56556: LD_INT 14
56558: ST_TO_ADDR
// hc_gallery :=  ;
56559: LD_ADDR_OWVAR 33
56563: PUSH
56564: LD_STRING 
56566: ST_TO_ADDR
// hc_name :=  ;
56567: LD_ADDR_OWVAR 26
56571: PUSH
56572: LD_STRING 
56574: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56575: LD_ADDR_OWVAR 35
56579: PUSH
56580: LD_VAR 0 1
56584: NEG
56585: PPUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: CALL_OW 12
56595: ST_TO_ADDR
// end ;
56596: LD_VAR 0 2
56600: RET
// export function PrepareEnchidna ( ) ; begin
56601: LD_INT 0
56603: PPUSH
// uc_side := 0 ;
56604: LD_ADDR_OWVAR 20
56608: PUSH
56609: LD_INT 0
56611: ST_TO_ADDR
// uc_nation := 0 ;
56612: LD_ADDR_OWVAR 21
56616: PUSH
56617: LD_INT 0
56619: ST_TO_ADDR
// InitHc ;
56620: CALL_OW 19
// hc_class := class_baggie ;
56624: LD_ADDR_OWVAR 28
56628: PUSH
56629: LD_INT 13
56631: ST_TO_ADDR
// hc_gallery :=  ;
56632: LD_ADDR_OWVAR 33
56636: PUSH
56637: LD_STRING 
56639: ST_TO_ADDR
// hc_name :=  ;
56640: LD_ADDR_OWVAR 26
56644: PUSH
56645: LD_STRING 
56647: ST_TO_ADDR
// end ;
56648: LD_VAR 0 1
56652: RET
// export function PrepareFrog ( ) ; begin
56653: LD_INT 0
56655: PPUSH
// uc_side := 0 ;
56656: LD_ADDR_OWVAR 20
56660: PUSH
56661: LD_INT 0
56663: ST_TO_ADDR
// uc_nation := 0 ;
56664: LD_ADDR_OWVAR 21
56668: PUSH
56669: LD_INT 0
56671: ST_TO_ADDR
// InitHc ;
56672: CALL_OW 19
// hc_class := class_frog ;
56676: LD_ADDR_OWVAR 28
56680: PUSH
56681: LD_INT 19
56683: ST_TO_ADDR
// hc_gallery :=  ;
56684: LD_ADDR_OWVAR 33
56688: PUSH
56689: LD_STRING 
56691: ST_TO_ADDR
// hc_name :=  ;
56692: LD_ADDR_OWVAR 26
56696: PUSH
56697: LD_STRING 
56699: ST_TO_ADDR
// end ;
56700: LD_VAR 0 1
56704: RET
// export function PrepareFish ( ) ; begin
56705: LD_INT 0
56707: PPUSH
// uc_side := 0 ;
56708: LD_ADDR_OWVAR 20
56712: PUSH
56713: LD_INT 0
56715: ST_TO_ADDR
// uc_nation := 0 ;
56716: LD_ADDR_OWVAR 21
56720: PUSH
56721: LD_INT 0
56723: ST_TO_ADDR
// InitHc ;
56724: CALL_OW 19
// hc_class := class_fish ;
56728: LD_ADDR_OWVAR 28
56732: PUSH
56733: LD_INT 20
56735: ST_TO_ADDR
// hc_gallery :=  ;
56736: LD_ADDR_OWVAR 33
56740: PUSH
56741: LD_STRING 
56743: ST_TO_ADDR
// hc_name :=  ;
56744: LD_ADDR_OWVAR 26
56748: PUSH
56749: LD_STRING 
56751: ST_TO_ADDR
// end ;
56752: LD_VAR 0 1
56756: RET
// export function PrepareBird ( ) ; begin
56757: LD_INT 0
56759: PPUSH
// uc_side := 0 ;
56760: LD_ADDR_OWVAR 20
56764: PUSH
56765: LD_INT 0
56767: ST_TO_ADDR
// uc_nation := 0 ;
56768: LD_ADDR_OWVAR 21
56772: PUSH
56773: LD_INT 0
56775: ST_TO_ADDR
// InitHc ;
56776: CALL_OW 19
// hc_class := class_phororhacos ;
56780: LD_ADDR_OWVAR 28
56784: PUSH
56785: LD_INT 18
56787: ST_TO_ADDR
// hc_gallery :=  ;
56788: LD_ADDR_OWVAR 33
56792: PUSH
56793: LD_STRING 
56795: ST_TO_ADDR
// hc_name :=  ;
56796: LD_ADDR_OWVAR 26
56800: PUSH
56801: LD_STRING 
56803: ST_TO_ADDR
// end ;
56804: LD_VAR 0 1
56808: RET
// export function PrepareHorse ( ) ; begin
56809: LD_INT 0
56811: PPUSH
// uc_side := 0 ;
56812: LD_ADDR_OWVAR 20
56816: PUSH
56817: LD_INT 0
56819: ST_TO_ADDR
// uc_nation := 0 ;
56820: LD_ADDR_OWVAR 21
56824: PUSH
56825: LD_INT 0
56827: ST_TO_ADDR
// InitHc ;
56828: CALL_OW 19
// hc_class := class_horse ;
56832: LD_ADDR_OWVAR 28
56836: PUSH
56837: LD_INT 21
56839: ST_TO_ADDR
// hc_gallery :=  ;
56840: LD_ADDR_OWVAR 33
56844: PUSH
56845: LD_STRING 
56847: ST_TO_ADDR
// hc_name :=  ;
56848: LD_ADDR_OWVAR 26
56852: PUSH
56853: LD_STRING 
56855: ST_TO_ADDR
// end ;
56856: LD_VAR 0 1
56860: RET
// export function PrepareMastodont ( ) ; begin
56861: LD_INT 0
56863: PPUSH
// uc_side := 0 ;
56864: LD_ADDR_OWVAR 20
56868: PUSH
56869: LD_INT 0
56871: ST_TO_ADDR
// uc_nation := 0 ;
56872: LD_ADDR_OWVAR 21
56876: PUSH
56877: LD_INT 0
56879: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56880: LD_ADDR_OWVAR 37
56884: PUSH
56885: LD_INT 31
56887: ST_TO_ADDR
// vc_control := control_rider ;
56888: LD_ADDR_OWVAR 38
56892: PUSH
56893: LD_INT 4
56895: ST_TO_ADDR
// end ;
56896: LD_VAR 0 1
56900: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
56905: PPUSH
// uc_side = 0 ;
56906: LD_ADDR_OWVAR 20
56910: PUSH
56911: LD_INT 0
56913: ST_TO_ADDR
// uc_nation = 0 ;
56914: LD_ADDR_OWVAR 21
56918: PUSH
56919: LD_INT 0
56921: ST_TO_ADDR
// InitHc_All ( ) ;
56922: CALL_OW 584
// InitVc ;
56926: CALL_OW 20
// if mastodonts then
56930: LD_VAR 0 6
56934: IFFALSE 57001
// for i = 1 to mastodonts do
56936: LD_ADDR_VAR 0 11
56940: PUSH
56941: DOUBLE
56942: LD_INT 1
56944: DEC
56945: ST_TO_ADDR
56946: LD_VAR 0 6
56950: PUSH
56951: FOR_TO
56952: IFFALSE 56999
// begin vc_chassis := 31 ;
56954: LD_ADDR_OWVAR 37
56958: PUSH
56959: LD_INT 31
56961: ST_TO_ADDR
// vc_control := control_rider ;
56962: LD_ADDR_OWVAR 38
56966: PUSH
56967: LD_INT 4
56969: ST_TO_ADDR
// animal := CreateVehicle ;
56970: LD_ADDR_VAR 0 12
56974: PUSH
56975: CALL_OW 45
56979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56980: LD_VAR 0 12
56984: PPUSH
56985: LD_VAR 0 8
56989: PPUSH
56990: LD_INT 0
56992: PPUSH
56993: CALL 59143 0 3
// end ;
56997: GO 56951
56999: POP
57000: POP
// if horses then
57001: LD_VAR 0 5
57005: IFFALSE 57072
// for i = 1 to horses do
57007: LD_ADDR_VAR 0 11
57011: PUSH
57012: DOUBLE
57013: LD_INT 1
57015: DEC
57016: ST_TO_ADDR
57017: LD_VAR 0 5
57021: PUSH
57022: FOR_TO
57023: IFFALSE 57070
// begin hc_class := 21 ;
57025: LD_ADDR_OWVAR 28
57029: PUSH
57030: LD_INT 21
57032: ST_TO_ADDR
// hc_gallery :=  ;
57033: LD_ADDR_OWVAR 33
57037: PUSH
57038: LD_STRING 
57040: ST_TO_ADDR
// animal := CreateHuman ;
57041: LD_ADDR_VAR 0 12
57045: PUSH
57046: CALL_OW 44
57050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57051: LD_VAR 0 12
57055: PPUSH
57056: LD_VAR 0 8
57060: PPUSH
57061: LD_INT 0
57063: PPUSH
57064: CALL 59143 0 3
// end ;
57068: GO 57022
57070: POP
57071: POP
// if birds then
57072: LD_VAR 0 1
57076: IFFALSE 57143
// for i = 1 to birds do
57078: LD_ADDR_VAR 0 11
57082: PUSH
57083: DOUBLE
57084: LD_INT 1
57086: DEC
57087: ST_TO_ADDR
57088: LD_VAR 0 1
57092: PUSH
57093: FOR_TO
57094: IFFALSE 57141
// begin hc_class := 18 ;
57096: LD_ADDR_OWVAR 28
57100: PUSH
57101: LD_INT 18
57103: ST_TO_ADDR
// hc_gallery =  ;
57104: LD_ADDR_OWVAR 33
57108: PUSH
57109: LD_STRING 
57111: ST_TO_ADDR
// animal := CreateHuman ;
57112: LD_ADDR_VAR 0 12
57116: PUSH
57117: CALL_OW 44
57121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57122: LD_VAR 0 12
57126: PPUSH
57127: LD_VAR 0 8
57131: PPUSH
57132: LD_INT 0
57134: PPUSH
57135: CALL 59143 0 3
// end ;
57139: GO 57093
57141: POP
57142: POP
// if tigers then
57143: LD_VAR 0 2
57147: IFFALSE 57231
// for i = 1 to tigers do
57149: LD_ADDR_VAR 0 11
57153: PUSH
57154: DOUBLE
57155: LD_INT 1
57157: DEC
57158: ST_TO_ADDR
57159: LD_VAR 0 2
57163: PUSH
57164: FOR_TO
57165: IFFALSE 57229
// begin hc_class = class_tiger ;
57167: LD_ADDR_OWVAR 28
57171: PUSH
57172: LD_INT 14
57174: ST_TO_ADDR
// hc_gallery =  ;
57175: LD_ADDR_OWVAR 33
57179: PUSH
57180: LD_STRING 
57182: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57183: LD_ADDR_OWVAR 35
57187: PUSH
57188: LD_INT 7
57190: NEG
57191: PPUSH
57192: LD_INT 7
57194: PPUSH
57195: CALL_OW 12
57199: ST_TO_ADDR
// animal := CreateHuman ;
57200: LD_ADDR_VAR 0 12
57204: PUSH
57205: CALL_OW 44
57209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57210: LD_VAR 0 12
57214: PPUSH
57215: LD_VAR 0 8
57219: PPUSH
57220: LD_INT 0
57222: PPUSH
57223: CALL 59143 0 3
// end ;
57227: GO 57164
57229: POP
57230: POP
// if apemans then
57231: LD_VAR 0 3
57235: IFFALSE 57358
// for i = 1 to apemans do
57237: LD_ADDR_VAR 0 11
57241: PUSH
57242: DOUBLE
57243: LD_INT 1
57245: DEC
57246: ST_TO_ADDR
57247: LD_VAR 0 3
57251: PUSH
57252: FOR_TO
57253: IFFALSE 57356
// begin hc_class = class_apeman ;
57255: LD_ADDR_OWVAR 28
57259: PUSH
57260: LD_INT 12
57262: ST_TO_ADDR
// hc_gallery =  ;
57263: LD_ADDR_OWVAR 33
57267: PUSH
57268: LD_STRING 
57270: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57271: LD_ADDR_OWVAR 35
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PPUSH
57280: LD_INT 2
57282: PPUSH
57283: CALL_OW 12
57287: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57288: LD_ADDR_OWVAR 31
57292: PUSH
57293: LD_INT 1
57295: PPUSH
57296: LD_INT 3
57298: PPUSH
57299: CALL_OW 12
57303: PUSH
57304: LD_INT 1
57306: PPUSH
57307: LD_INT 3
57309: PPUSH
57310: CALL_OW 12
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: ST_TO_ADDR
// animal := CreateHuman ;
57327: LD_ADDR_VAR 0 12
57331: PUSH
57332: CALL_OW 44
57336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57337: LD_VAR 0 12
57341: PPUSH
57342: LD_VAR 0 8
57346: PPUSH
57347: LD_INT 0
57349: PPUSH
57350: CALL 59143 0 3
// end ;
57354: GO 57252
57356: POP
57357: POP
// if enchidnas then
57358: LD_VAR 0 4
57362: IFFALSE 57429
// for i = 1 to enchidnas do
57364: LD_ADDR_VAR 0 11
57368: PUSH
57369: DOUBLE
57370: LD_INT 1
57372: DEC
57373: ST_TO_ADDR
57374: LD_VAR 0 4
57378: PUSH
57379: FOR_TO
57380: IFFALSE 57427
// begin hc_class = 13 ;
57382: LD_ADDR_OWVAR 28
57386: PUSH
57387: LD_INT 13
57389: ST_TO_ADDR
// hc_gallery =  ;
57390: LD_ADDR_OWVAR 33
57394: PUSH
57395: LD_STRING 
57397: ST_TO_ADDR
// animal := CreateHuman ;
57398: LD_ADDR_VAR 0 12
57402: PUSH
57403: CALL_OW 44
57407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57408: LD_VAR 0 12
57412: PPUSH
57413: LD_VAR 0 8
57417: PPUSH
57418: LD_INT 0
57420: PPUSH
57421: CALL 59143 0 3
// end ;
57425: GO 57379
57427: POP
57428: POP
// if fishes then
57429: LD_VAR 0 7
57433: IFFALSE 57500
// for i = 1 to fishes do
57435: LD_ADDR_VAR 0 11
57439: PUSH
57440: DOUBLE
57441: LD_INT 1
57443: DEC
57444: ST_TO_ADDR
57445: LD_VAR 0 7
57449: PUSH
57450: FOR_TO
57451: IFFALSE 57498
// begin hc_class = 20 ;
57453: LD_ADDR_OWVAR 28
57457: PUSH
57458: LD_INT 20
57460: ST_TO_ADDR
// hc_gallery =  ;
57461: LD_ADDR_OWVAR 33
57465: PUSH
57466: LD_STRING 
57468: ST_TO_ADDR
// animal := CreateHuman ;
57469: LD_ADDR_VAR 0 12
57473: PUSH
57474: CALL_OW 44
57478: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57479: LD_VAR 0 12
57483: PPUSH
57484: LD_VAR 0 9
57488: PPUSH
57489: LD_INT 0
57491: PPUSH
57492: CALL 59143 0 3
// end ;
57496: GO 57450
57498: POP
57499: POP
// end ;
57500: LD_VAR 0 10
57504: RET
// export function WantHeal ( sci , unit ) ; begin
57505: LD_INT 0
57507: PPUSH
// if GetTaskList ( sci ) > 0 then
57508: LD_VAR 0 1
57512: PPUSH
57513: CALL_OW 437
57517: PUSH
57518: LD_INT 0
57520: GREATER
57521: IFFALSE 57593
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL_OW 437
57532: PUSH
57533: LD_INT 1
57535: ARRAY
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: LD_STRING l
57543: EQUAL
57544: IFFALSE 57571
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 437
57556: PUSH
57557: LD_INT 1
57559: ARRAY
57560: PUSH
57561: LD_INT 4
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 2
57569: EQUAL
57570: AND
57571: IFFALSE 57583
// result := true else
57573: LD_ADDR_VAR 0 3
57577: PUSH
57578: LD_INT 1
57580: ST_TO_ADDR
57581: GO 57591
// result := false ;
57583: LD_ADDR_VAR 0 3
57587: PUSH
57588: LD_INT 0
57590: ST_TO_ADDR
// end else
57591: GO 57601
// result := false ;
57593: LD_ADDR_VAR 0 3
57597: PUSH
57598: LD_INT 0
57600: ST_TO_ADDR
// end ;
57601: LD_VAR 0 3
57605: RET
// export function HealTarget ( sci ) ; begin
57606: LD_INT 0
57608: PPUSH
// if not sci then
57609: LD_VAR 0 1
57613: NOT
57614: IFFALSE 57618
// exit ;
57616: GO 57683
// result := 0 ;
57618: LD_ADDR_VAR 0 2
57622: PUSH
57623: LD_INT 0
57625: ST_TO_ADDR
// if GetTaskList ( sci ) then
57626: LD_VAR 0 1
57630: PPUSH
57631: CALL_OW 437
57635: IFFALSE 57683
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57637: LD_VAR 0 1
57641: PPUSH
57642: CALL_OW 437
57646: PUSH
57647: LD_INT 1
57649: ARRAY
57650: PUSH
57651: LD_INT 1
57653: ARRAY
57654: PUSH
57655: LD_STRING l
57657: EQUAL
57658: IFFALSE 57683
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57660: LD_ADDR_VAR 0 2
57664: PUSH
57665: LD_VAR 0 1
57669: PPUSH
57670: CALL_OW 437
57674: PUSH
57675: LD_INT 1
57677: ARRAY
57678: PUSH
57679: LD_INT 4
57681: ARRAY
57682: ST_TO_ADDR
// end ;
57683: LD_VAR 0 2
57687: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57688: LD_INT 0
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
// if not base_units then
57694: LD_VAR 0 1
57698: NOT
57699: IFFALSE 57703
// exit ;
57701: GO 57790
// result := false ;
57703: LD_ADDR_VAR 0 2
57707: PUSH
57708: LD_INT 0
57710: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57711: LD_ADDR_VAR 0 5
57715: PUSH
57716: LD_VAR 0 1
57720: PPUSH
57721: LD_INT 21
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PPUSH
57731: CALL_OW 72
57735: ST_TO_ADDR
// if not tmp then
57736: LD_VAR 0 5
57740: NOT
57741: IFFALSE 57745
// exit ;
57743: GO 57790
// for i in tmp do
57745: LD_ADDR_VAR 0 3
57749: PUSH
57750: LD_VAR 0 5
57754: PUSH
57755: FOR_IN
57756: IFFALSE 57788
// begin result := EnemyInRange ( i , 22 ) ;
57758: LD_ADDR_VAR 0 2
57762: PUSH
57763: LD_VAR 0 3
57767: PPUSH
57768: LD_INT 22
57770: PPUSH
57771: CALL 55205 0 2
57775: ST_TO_ADDR
// if result then
57776: LD_VAR 0 2
57780: IFFALSE 57786
// exit ;
57782: POP
57783: POP
57784: GO 57790
// end ;
57786: GO 57755
57788: POP
57789: POP
// end ;
57790: LD_VAR 0 2
57794: RET
// export function FilterByTag ( units , tag ) ; begin
57795: LD_INT 0
57797: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57798: LD_ADDR_VAR 0 3
57802: PUSH
57803: LD_VAR 0 1
57807: PPUSH
57808: LD_INT 120
57810: PUSH
57811: LD_VAR 0 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PPUSH
57820: CALL_OW 72
57824: ST_TO_ADDR
// end ;
57825: LD_VAR 0 3
57829: RET
// export function IsDriver ( un ) ; begin
57830: LD_INT 0
57832: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57833: LD_ADDR_VAR 0 2
57837: PUSH
57838: LD_VAR 0 1
57842: PUSH
57843: LD_INT 55
57845: PUSH
57846: EMPTY
57847: LIST
57848: PPUSH
57849: CALL_OW 69
57853: IN
57854: ST_TO_ADDR
// end ;
57855: LD_VAR 0 2
57859: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57860: LD_INT 0
57862: PPUSH
57863: PPUSH
// list := [ ] ;
57864: LD_ADDR_VAR 0 5
57868: PUSH
57869: EMPTY
57870: ST_TO_ADDR
// case d of 0 :
57871: LD_VAR 0 3
57875: PUSH
57876: LD_INT 0
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57884
57882: GO 58017
57884: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57885: LD_ADDR_VAR 0 5
57889: PUSH
57890: LD_VAR 0 1
57894: PUSH
57895: LD_INT 4
57897: MINUS
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_INT 4
57906: MINUS
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: PUSH
57916: LD_VAR 0 1
57920: PUSH
57921: LD_INT 3
57923: MINUS
57924: PUSH
57925: LD_VAR 0 2
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: PUSH
57938: LD_VAR 0 1
57942: PUSH
57943: LD_INT 4
57945: PLUS
57946: PUSH
57947: LD_VAR 0 2
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: PUSH
57960: LD_VAR 0 1
57964: PUSH
57965: LD_INT 3
57967: PLUS
57968: PUSH
57969: LD_VAR 0 2
57973: PUSH
57974: LD_INT 3
57976: PLUS
57977: PUSH
57978: LD_INT 5
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: PUSH
57986: LD_VAR 0 1
57990: PUSH
57991: LD_VAR 0 2
57995: PUSH
57996: LD_INT 4
57998: PLUS
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: ST_TO_ADDR
// end ; 1 :
58015: GO 58715
58017: LD_INT 1
58019: DOUBLE
58020: EQUAL
58021: IFTRUE 58025
58023: GO 58158
58025: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58026: LD_ADDR_VAR 0 5
58030: PUSH
58031: LD_VAR 0 1
58035: PUSH
58036: LD_VAR 0 2
58040: PUSH
58041: LD_INT 4
58043: MINUS
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: PUSH
58053: LD_VAR 0 1
58057: PUSH
58058: LD_INT 3
58060: MINUS
58061: PUSH
58062: LD_VAR 0 2
58066: PUSH
58067: LD_INT 3
58069: MINUS
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: PUSH
58079: LD_VAR 0 1
58083: PUSH
58084: LD_INT 4
58086: MINUS
58087: PUSH
58088: LD_VAR 0 2
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: PUSH
58101: LD_VAR 0 1
58105: PUSH
58106: LD_VAR 0 2
58110: PUSH
58111: LD_INT 3
58113: PLUS
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: LIST
58122: PUSH
58123: LD_VAR 0 1
58127: PUSH
58128: LD_INT 4
58130: PLUS
58131: PUSH
58132: LD_VAR 0 2
58136: PUSH
58137: LD_INT 4
58139: PLUS
58140: PUSH
58141: LD_INT 5
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// end ; 2 :
58156: GO 58715
58158: LD_INT 2
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58166
58164: GO 58295
58166: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58167: LD_ADDR_VAR 0 5
58171: PUSH
58172: LD_VAR 0 1
58176: PUSH
58177: LD_VAR 0 2
58181: PUSH
58182: LD_INT 3
58184: MINUS
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: PUSH
58194: LD_VAR 0 1
58198: PUSH
58199: LD_INT 4
58201: PLUS
58202: PUSH
58203: LD_VAR 0 2
58207: PUSH
58208: LD_INT 4
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: PUSH
58216: LD_VAR 0 1
58220: PUSH
58221: LD_VAR 0 2
58225: PUSH
58226: LD_INT 4
58228: PLUS
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: LD_VAR 0 1
58242: PUSH
58243: LD_INT 3
58245: MINUS
58246: PUSH
58247: LD_VAR 0 2
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: PUSH
58260: LD_VAR 0 1
58264: PUSH
58265: LD_INT 4
58267: MINUS
58268: PUSH
58269: LD_VAR 0 2
58273: PUSH
58274: LD_INT 4
58276: MINUS
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// end ; 3 :
58293: GO 58715
58295: LD_INT 3
58297: DOUBLE
58298: EQUAL
58299: IFTRUE 58303
58301: GO 58436
58303: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58304: LD_ADDR_VAR 0 5
58308: PUSH
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 3
58316: PLUS
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: LD_INT 4
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: PUSH
58331: LD_VAR 0 1
58335: PUSH
58336: LD_INT 4
58338: PLUS
58339: PUSH
58340: LD_VAR 0 2
58344: PUSH
58345: LD_INT 4
58347: PLUS
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: LD_INT 4
58364: MINUS
58365: PUSH
58366: LD_VAR 0 2
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: PUSH
58379: LD_VAR 0 1
58383: PUSH
58384: LD_VAR 0 2
58388: PUSH
58389: LD_INT 4
58391: MINUS
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: PUSH
58401: LD_VAR 0 1
58405: PUSH
58406: LD_INT 3
58408: MINUS
58409: PUSH
58410: LD_VAR 0 2
58414: PUSH
58415: LD_INT 3
58417: MINUS
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// end ; 4 :
58434: GO 58715
58436: LD_INT 4
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58444
58442: GO 58577
58444: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58445: LD_ADDR_VAR 0 5
58449: PUSH
58450: LD_VAR 0 1
58454: PUSH
58455: LD_VAR 0 2
58459: PUSH
58460: LD_INT 4
58462: PLUS
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: PUSH
58472: LD_VAR 0 1
58476: PUSH
58477: LD_INT 3
58479: PLUS
58480: PUSH
58481: LD_VAR 0 2
58485: PUSH
58486: LD_INT 3
58488: PLUS
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_INT 4
58505: PLUS
58506: PUSH
58507: LD_VAR 0 2
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 3
58532: MINUS
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_INT 4
58549: MINUS
58550: PUSH
58551: LD_VAR 0 2
58555: PUSH
58556: LD_INT 4
58558: MINUS
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: ST_TO_ADDR
// end ; 5 :
58575: GO 58715
58577: LD_INT 5
58579: DOUBLE
58580: EQUAL
58581: IFTRUE 58585
58583: GO 58714
58585: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58586: LD_ADDR_VAR 0 5
58590: PUSH
58591: LD_VAR 0 1
58595: PUSH
58596: LD_INT 4
58598: MINUS
58599: PUSH
58600: LD_VAR 0 2
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: PUSH
58613: LD_VAR 0 1
58617: PUSH
58618: LD_VAR 0 2
58622: PUSH
58623: LD_INT 4
58625: MINUS
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: PUSH
58635: LD_VAR 0 1
58639: PUSH
58640: LD_INT 4
58642: PLUS
58643: PUSH
58644: LD_VAR 0 2
58648: PUSH
58649: LD_INT 4
58651: PLUS
58652: PUSH
58653: LD_INT 5
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: PUSH
58661: LD_VAR 0 1
58665: PUSH
58666: LD_INT 3
58668: PLUS
58669: PUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: PUSH
58683: LD_VAR 0 1
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 3
58695: PLUS
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// end ; end ;
58712: GO 58715
58714: POP
// result := list ;
58715: LD_ADDR_VAR 0 4
58719: PUSH
58720: LD_VAR 0 5
58724: ST_TO_ADDR
// end ;
58725: LD_VAR 0 4
58729: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58730: LD_INT 0
58732: PPUSH
58733: PPUSH
58734: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58735: LD_VAR 0 1
58739: NOT
58740: IFTRUE 58768
58742: PUSH
58743: LD_VAR 0 2
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: IN
58766: NOT
58767: OR
58768: IFFALSE 58772
// exit ;
58770: GO 58855
// tmp := [ ] ;
58772: LD_ADDR_VAR 0 5
58776: PUSH
58777: EMPTY
58778: ST_TO_ADDR
// for i in units do
58779: LD_ADDR_VAR 0 4
58783: PUSH
58784: LD_VAR 0 1
58788: PUSH
58789: FOR_IN
58790: IFFALSE 58824
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58792: LD_ADDR_VAR 0 5
58796: PUSH
58797: LD_VAR 0 5
58801: PPUSH
58802: LD_VAR 0 4
58806: PPUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: CALL_OW 259
58816: PPUSH
58817: CALL 60250 0 2
58821: ST_TO_ADDR
58822: GO 58789
58824: POP
58825: POP
// if not tmp then
58826: LD_VAR 0 5
58830: NOT
58831: IFFALSE 58835
// exit ;
58833: GO 58855
// result := SortListByListDesc ( units , tmp ) ;
58835: LD_ADDR_VAR 0 3
58839: PUSH
58840: LD_VAR 0 1
58844: PPUSH
58845: LD_VAR 0 5
58849: PPUSH
58850: CALL_OW 77
58854: ST_TO_ADDR
// end ;
58855: LD_VAR 0 3
58859: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58860: LD_INT 0
58862: PPUSH
58863: PPUSH
58864: PPUSH
// result := false ;
58865: LD_ADDR_VAR 0 3
58869: PUSH
58870: LD_INT 0
58872: ST_TO_ADDR
// if not building then
58873: LD_VAR 0 2
58877: NOT
58878: IFFALSE 58882
// exit ;
58880: GO 59026
// x := GetX ( building ) ;
58882: LD_ADDR_VAR 0 4
58886: PUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: CALL_OW 250
58896: ST_TO_ADDR
// y := GetY ( building ) ;
58897: LD_ADDR_VAR 0 5
58901: PUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: CALL_OW 251
58911: ST_TO_ADDR
// if not x or not y then
58912: LD_VAR 0 4
58916: NOT
58917: IFTRUE 58926
58919: PUSH
58920: LD_VAR 0 5
58924: NOT
58925: OR
58926: IFFALSE 58930
// exit ;
58928: GO 59026
// if GetTaskList ( unit ) then
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 437
58939: IFFALSE 59026
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58941: LD_STRING e
58943: PUSH
58944: LD_VAR 0 1
58948: PPUSH
58949: CALL_OW 437
58953: PUSH
58954: LD_INT 1
58956: ARRAY
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: EQUAL
58962: IFFALSE 58989
58964: PUSH
58965: LD_VAR 0 4
58969: PUSH
58970: LD_VAR 0 1
58974: PPUSH
58975: CALL_OW 437
58979: PUSH
58980: LD_INT 1
58982: ARRAY
58983: PUSH
58984: LD_INT 2
58986: ARRAY
58987: EQUAL
58988: AND
58989: IFFALSE 59016
58991: PUSH
58992: LD_VAR 0 5
58996: PUSH
58997: LD_VAR 0 1
59001: PPUSH
59002: CALL_OW 437
59006: PUSH
59007: LD_INT 1
59009: ARRAY
59010: PUSH
59011: LD_INT 3
59013: ARRAY
59014: EQUAL
59015: AND
59016: IFFALSE 59026
// result := true end ;
59018: LD_ADDR_VAR 0 3
59022: PUSH
59023: LD_INT 1
59025: ST_TO_ADDR
// end ;
59026: LD_VAR 0 3
59030: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59031: LD_INT 0
59033: PPUSH
// result := false ;
59034: LD_ADDR_VAR 0 4
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// if GetTaskList ( unit ) then
59042: LD_VAR 0 1
59046: PPUSH
59047: CALL_OW 437
59051: IFFALSE 59138
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59053: LD_STRING M
59055: PUSH
59056: LD_VAR 0 1
59060: PPUSH
59061: CALL_OW 437
59065: PUSH
59066: LD_INT 1
59068: ARRAY
59069: PUSH
59070: LD_INT 1
59072: ARRAY
59073: EQUAL
59074: IFFALSE 59101
59076: PUSH
59077: LD_VAR 0 2
59081: PUSH
59082: LD_VAR 0 1
59086: PPUSH
59087: CALL_OW 437
59091: PUSH
59092: LD_INT 1
59094: ARRAY
59095: PUSH
59096: LD_INT 2
59098: ARRAY
59099: EQUAL
59100: AND
59101: IFFALSE 59128
59103: PUSH
59104: LD_VAR 0 3
59108: PUSH
59109: LD_VAR 0 1
59113: PPUSH
59114: CALL_OW 437
59118: PUSH
59119: LD_INT 1
59121: ARRAY
59122: PUSH
59123: LD_INT 3
59125: ARRAY
59126: EQUAL
59127: AND
59128: IFFALSE 59138
// result := true ;
59130: LD_ADDR_VAR 0 4
59134: PUSH
59135: LD_INT 1
59137: ST_TO_ADDR
// end ; end ;
59138: LD_VAR 0 4
59142: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59143: LD_INT 0
59145: PPUSH
59146: PPUSH
59147: PPUSH
59148: PPUSH
// if not unit or not area then
59149: LD_VAR 0 1
59153: NOT
59154: IFTRUE 59163
59156: PUSH
59157: LD_VAR 0 2
59161: NOT
59162: OR
59163: IFFALSE 59167
// exit ;
59165: GO 59343
// tmp := AreaToList ( area , i ) ;
59167: LD_ADDR_VAR 0 6
59171: PUSH
59172: LD_VAR 0 2
59176: PPUSH
59177: LD_VAR 0 5
59181: PPUSH
59182: CALL_OW 517
59186: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59187: LD_ADDR_VAR 0 5
59191: PUSH
59192: DOUBLE
59193: LD_INT 1
59195: DEC
59196: ST_TO_ADDR
59197: LD_VAR 0 6
59201: PUSH
59202: LD_INT 1
59204: ARRAY
59205: PUSH
59206: FOR_TO
59207: IFFALSE 59341
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59209: LD_ADDR_VAR 0 7
59213: PUSH
59214: LD_VAR 0 6
59218: PUSH
59219: LD_INT 1
59221: ARRAY
59222: PUSH
59223: LD_VAR 0 5
59227: ARRAY
59228: PUSH
59229: LD_VAR 0 6
59233: PUSH
59234: LD_INT 2
59236: ARRAY
59237: PUSH
59238: LD_VAR 0 5
59242: ARRAY
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59248: LD_INT 92
59250: PUSH
59251: LD_VAR 0 7
59255: PUSH
59256: LD_INT 1
59258: ARRAY
59259: PUSH
59260: LD_VAR 0 7
59264: PUSH
59265: LD_INT 2
59267: ARRAY
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: PPUSH
59278: CALL_OW 69
59282: PUSH
59283: LD_INT 0
59285: EQUAL
59286: IFFALSE 59339
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59288: LD_VAR 0 1
59292: PPUSH
59293: LD_VAR 0 7
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PPUSH
59302: LD_VAR 0 7
59306: PUSH
59307: LD_INT 2
59309: ARRAY
59310: PPUSH
59311: LD_VAR 0 3
59315: PPUSH
59316: CALL_OW 48
// result := IsPlaced ( unit ) ;
59320: LD_ADDR_VAR 0 4
59324: PUSH
59325: LD_VAR 0 1
59329: PPUSH
59330: CALL_OW 305
59334: ST_TO_ADDR
// exit ;
59335: POP
59336: POP
59337: GO 59343
// end ; end ;
59339: GO 59206
59341: POP
59342: POP
// end ;
59343: LD_VAR 0 4
59347: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59348: LD_INT 0
59350: PPUSH
59351: PPUSH
59352: PPUSH
// if not side or side > 8 then
59353: LD_VAR 0 1
59357: NOT
59358: IFTRUE 59370
59360: PUSH
59361: LD_VAR 0 1
59365: PUSH
59366: LD_INT 8
59368: GREATER
59369: OR
59370: IFFALSE 59374
// exit ;
59372: GO 59561
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59374: LD_ADDR_VAR 0 4
59378: PUSH
59379: LD_INT 22
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 21
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PPUSH
59405: CALL_OW 69
59409: ST_TO_ADDR
// if not tmp then
59410: LD_VAR 0 4
59414: NOT
59415: IFFALSE 59419
// exit ;
59417: GO 59561
// enable_addtolog := true ;
59419: LD_ADDR_OWVAR 81
59423: PUSH
59424: LD_INT 1
59426: ST_TO_ADDR
// AddToLog ( [ ) ;
59427: LD_STRING [
59429: PPUSH
59430: CALL_OW 561
// for i in tmp do
59434: LD_ADDR_VAR 0 3
59438: PUSH
59439: LD_VAR 0 4
59443: PUSH
59444: FOR_IN
59445: IFFALSE 59552
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59447: LD_STRING [
59449: PUSH
59450: LD_VAR 0 3
59454: PPUSH
59455: CALL_OW 266
59459: STR
59460: PUSH
59461: LD_STRING , 
59463: STR
59464: PUSH
59465: LD_VAR 0 3
59469: PPUSH
59470: CALL_OW 250
59474: STR
59475: PUSH
59476: LD_STRING , 
59478: STR
59479: PUSH
59480: LD_VAR 0 3
59484: PPUSH
59485: CALL_OW 251
59489: STR
59490: PUSH
59491: LD_STRING , 
59493: STR
59494: PUSH
59495: LD_VAR 0 3
59499: PPUSH
59500: CALL_OW 254
59504: STR
59505: PUSH
59506: LD_STRING , 
59508: STR
59509: PUSH
59510: LD_VAR 0 3
59514: PPUSH
59515: LD_INT 1
59517: PPUSH
59518: CALL_OW 268
59522: STR
59523: PUSH
59524: LD_STRING , 
59526: STR
59527: PUSH
59528: LD_VAR 0 3
59532: PPUSH
59533: LD_INT 2
59535: PPUSH
59536: CALL_OW 268
59540: STR
59541: PUSH
59542: LD_STRING ],
59544: STR
59545: PPUSH
59546: CALL_OW 561
// end ;
59550: GO 59444
59552: POP
59553: POP
// AddToLog ( ]; ) ;
59554: LD_STRING ];
59556: PPUSH
59557: CALL_OW 561
// end ;
59561: LD_VAR 0 2
59565: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59566: LD_INT 0
59568: PPUSH
59569: PPUSH
59570: PPUSH
59571: PPUSH
59572: PPUSH
// if not area or not rate or not max then
59573: LD_VAR 0 1
59577: NOT
59578: IFTRUE 59587
59580: PUSH
59581: LD_VAR 0 2
59585: NOT
59586: OR
59587: IFTRUE 59596
59589: PUSH
59590: LD_VAR 0 4
59594: NOT
59595: OR
59596: IFFALSE 59600
// exit ;
59598: GO 59789
// while 1 do
59600: LD_INT 1
59602: IFFALSE 59789
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59604: LD_ADDR_VAR 0 9
59608: PUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: LD_INT 1
59616: PPUSH
59617: CALL_OW 287
59621: PUSH
59622: LD_INT 10
59624: MUL
59625: ST_TO_ADDR
// r := rate / 10 ;
59626: LD_ADDR_VAR 0 7
59630: PUSH
59631: LD_VAR 0 2
59635: PUSH
59636: LD_INT 10
59638: DIVREAL
59639: ST_TO_ADDR
// time := 1 1$00 ;
59640: LD_ADDR_VAR 0 8
59644: PUSH
59645: LD_INT 2100
59647: ST_TO_ADDR
// if amount < min then
59648: LD_VAR 0 9
59652: PUSH
59653: LD_VAR 0 3
59657: LESS
59658: IFFALSE 59676
// r := r * 2 else
59660: LD_ADDR_VAR 0 7
59664: PUSH
59665: LD_VAR 0 7
59669: PUSH
59670: LD_INT 2
59672: MUL
59673: ST_TO_ADDR
59674: GO 59702
// if amount > max then
59676: LD_VAR 0 9
59680: PUSH
59681: LD_VAR 0 4
59685: GREATER
59686: IFFALSE 59702
// r := r / 2 ;
59688: LD_ADDR_VAR 0 7
59692: PUSH
59693: LD_VAR 0 7
59697: PUSH
59698: LD_INT 2
59700: DIVREAL
59701: ST_TO_ADDR
// time := time / r ;
59702: LD_ADDR_VAR 0 8
59706: PUSH
59707: LD_VAR 0 8
59711: PUSH
59712: LD_VAR 0 7
59716: DIVREAL
59717: ST_TO_ADDR
// if time < 0 then
59718: LD_VAR 0 8
59722: PUSH
59723: LD_INT 0
59725: LESS
59726: IFFALSE 59743
// time := time * - 1 ;
59728: LD_ADDR_VAR 0 8
59732: PUSH
59733: LD_VAR 0 8
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: MUL
59742: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59743: LD_VAR 0 8
59747: PUSH
59748: LD_INT 35
59750: PPUSH
59751: LD_INT 875
59753: PPUSH
59754: CALL_OW 12
59758: PLUS
59759: PPUSH
59760: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59764: LD_INT 1
59766: PPUSH
59767: LD_INT 5
59769: PPUSH
59770: CALL_OW 12
59774: PPUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_INT 1
59782: PPUSH
59783: CALL_OW 55
// end ;
59787: GO 59600
// end ;
59789: LD_VAR 0 5
59793: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59794: LD_INT 0
59796: PPUSH
59797: PPUSH
59798: PPUSH
59799: PPUSH
59800: PPUSH
59801: PPUSH
59802: PPUSH
59803: PPUSH
// if not turrets or not factories then
59804: LD_VAR 0 1
59808: NOT
59809: IFTRUE 59818
59811: PUSH
59812: LD_VAR 0 2
59816: NOT
59817: OR
59818: IFFALSE 59822
// exit ;
59820: GO 60129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59822: LD_ADDR_VAR 0 10
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: LD_INT 6
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 5
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 24
59864: PUSH
59865: LD_INT 25
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 23
59874: PUSH
59875: LD_INT 27
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 42
59888: PUSH
59889: LD_INT 43
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 44
59898: PUSH
59899: LD_INT 46
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 45
59908: PUSH
59909: LD_INT 47
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// result := [ ] ;
59926: LD_ADDR_VAR 0 3
59930: PUSH
59931: EMPTY
59932: ST_TO_ADDR
// for i in turrets do
59933: LD_ADDR_VAR 0 4
59937: PUSH
59938: LD_VAR 0 1
59942: PUSH
59943: FOR_IN
59944: IFFALSE 60127
// begin nat := GetNation ( i ) ;
59946: LD_ADDR_VAR 0 7
59950: PUSH
59951: LD_VAR 0 4
59955: PPUSH
59956: CALL_OW 248
59960: ST_TO_ADDR
// weapon := 0 ;
59961: LD_ADDR_VAR 0 8
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// if not nat then
59969: LD_VAR 0 7
59973: NOT
59974: IFFALSE 59978
// continue ;
59976: GO 59943
// for j in list [ nat ] do
59978: LD_ADDR_VAR 0 5
59982: PUSH
59983: LD_VAR 0 10
59987: PUSH
59988: LD_VAR 0 7
59992: ARRAY
59993: PUSH
59994: FOR_IN
59995: IFFALSE 60036
// if GetBWeapon ( i ) = j [ 1 ] then
59997: LD_VAR 0 4
60001: PPUSH
60002: CALL_OW 269
60006: PUSH
60007: LD_VAR 0 5
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: EQUAL
60016: IFFALSE 60034
// begin weapon := j [ 2 ] ;
60018: LD_ADDR_VAR 0 8
60022: PUSH
60023: LD_VAR 0 5
60027: PUSH
60028: LD_INT 2
60030: ARRAY
60031: ST_TO_ADDR
// break ;
60032: GO 60036
// end ;
60034: GO 59994
60036: POP
60037: POP
// if not weapon then
60038: LD_VAR 0 8
60042: NOT
60043: IFFALSE 60047
// continue ;
60045: GO 59943
// for k in factories do
60047: LD_ADDR_VAR 0 6
60051: PUSH
60052: LD_VAR 0 2
60056: PUSH
60057: FOR_IN
60058: IFFALSE 60123
// begin weapons := AvailableWeaponList ( k ) ;
60060: LD_ADDR_VAR 0 9
60064: PUSH
60065: LD_VAR 0 6
60069: PPUSH
60070: CALL_OW 478
60074: ST_TO_ADDR
// if not weapons then
60075: LD_VAR 0 9
60079: NOT
60080: IFFALSE 60084
// continue ;
60082: GO 60057
// if weapon in weapons then
60084: LD_VAR 0 8
60088: PUSH
60089: LD_VAR 0 9
60093: IN
60094: IFFALSE 60121
// begin result := [ i , weapon ] ;
60096: LD_ADDR_VAR 0 3
60100: PUSH
60101: LD_VAR 0 4
60105: PUSH
60106: LD_VAR 0 8
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: ST_TO_ADDR
// exit ;
60115: POP
60116: POP
60117: POP
60118: POP
60119: GO 60129
// end ; end ;
60121: GO 60057
60123: POP
60124: POP
// end ;
60125: GO 59943
60127: POP
60128: POP
// end ;
60129: LD_VAR 0 3
60133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60134: LD_INT 0
60136: PPUSH
// if not side or side > 8 then
60137: LD_VAR 0 3
60141: NOT
60142: IFTRUE 60154
60144: PUSH
60145: LD_VAR 0 3
60149: PUSH
60150: LD_INT 8
60152: GREATER
60153: OR
60154: IFFALSE 60158
// exit ;
60156: GO 60217
// if not range then
60158: LD_VAR 0 4
60162: NOT
60163: IFFALSE 60174
// range := - 12 ;
60165: LD_ADDR_VAR 0 4
60169: PUSH
60170: LD_INT 12
60172: NEG
60173: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60174: LD_VAR 0 1
60178: PPUSH
60179: LD_VAR 0 2
60183: PPUSH
60184: LD_VAR 0 3
60188: PPUSH
60189: LD_VAR 0 4
60193: PPUSH
60194: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60198: LD_VAR 0 1
60202: PPUSH
60203: LD_VAR 0 2
60207: PPUSH
60208: LD_VAR 0 3
60212: PPUSH
60213: CALL_OW 331
// end ;
60217: LD_VAR 0 5
60221: RET
// export function Video ( mode ) ; begin
60222: LD_INT 0
60224: PPUSH
// ingame_video = mode ;
60225: LD_ADDR_OWVAR 52
60229: PUSH
60230: LD_VAR 0 1
60234: ST_TO_ADDR
// interface_hidden = mode ;
60235: LD_ADDR_OWVAR 54
60239: PUSH
60240: LD_VAR 0 1
60244: ST_TO_ADDR
// end ;
60245: LD_VAR 0 2
60249: RET
// export function Join ( array , element ) ; begin
60250: LD_INT 0
60252: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60253: LD_ADDR_VAR 0 3
60257: PUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_INT 1
60270: PLUS
60271: PPUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: CALL_OW 1
60281: ST_TO_ADDR
// end ;
60282: LD_VAR 0 3
60286: RET
// export function JoinUnion ( array , element ) ; begin
60287: LD_INT 0
60289: PPUSH
// result := array union element ;
60290: LD_ADDR_VAR 0 3
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_VAR 0 2
60304: UNION
60305: ST_TO_ADDR
// end ;
60306: LD_VAR 0 3
60310: RET
// export function GetBehemoths ( side ) ; begin
60311: LD_INT 0
60313: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60314: LD_ADDR_VAR 0 2
60318: PUSH
60319: LD_INT 22
60321: PUSH
60322: LD_VAR 0 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 31
60333: PUSH
60334: LD_INT 25
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PPUSH
60345: CALL_OW 69
60349: ST_TO_ADDR
// end ;
60350: LD_VAR 0 2
60354: RET
// export function Shuffle ( array ) ; var i , index ; begin
60355: LD_INT 0
60357: PPUSH
60358: PPUSH
60359: PPUSH
// result := [ ] ;
60360: LD_ADDR_VAR 0 2
60364: PUSH
60365: EMPTY
60366: ST_TO_ADDR
// if not array then
60367: LD_VAR 0 1
60371: NOT
60372: IFFALSE 60376
// exit ;
60374: GO 60475
// Randomize ;
60376: CALL_OW 10
// for i = array downto 1 do
60380: LD_ADDR_VAR 0 3
60384: PUSH
60385: DOUBLE
60386: LD_VAR 0 1
60390: INC
60391: ST_TO_ADDR
60392: LD_INT 1
60394: PUSH
60395: FOR_DOWNTO
60396: IFFALSE 60473
// begin index := rand ( 1 , array ) ;
60398: LD_ADDR_VAR 0 4
60402: PUSH
60403: LD_INT 1
60405: PPUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 12
60415: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60416: LD_ADDR_VAR 0 2
60420: PUSH
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_VAR 0 2
60430: PUSH
60431: LD_INT 1
60433: PLUS
60434: PPUSH
60435: LD_VAR 0 1
60439: PUSH
60440: LD_VAR 0 4
60444: ARRAY
60445: PPUSH
60446: CALL_OW 2
60450: ST_TO_ADDR
// array := Delete ( array , index ) ;
60451: LD_ADDR_VAR 0 1
60455: PUSH
60456: LD_VAR 0 1
60460: PPUSH
60461: LD_VAR 0 4
60465: PPUSH
60466: CALL_OW 3
60470: ST_TO_ADDR
// end ;
60471: GO 60395
60473: POP
60474: POP
// end ;
60475: LD_VAR 0 2
60479: RET
// export function GetBaseMaterials ( base ) ; begin
60480: LD_INT 0
60482: PPUSH
// result := [ 0 , 0 , 0 ] ;
60483: LD_ADDR_VAR 0 2
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: ST_TO_ADDR
// if not base then
60502: LD_VAR 0 1
60506: NOT
60507: IFFALSE 60511
// exit ;
60509: GO 60560
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60511: LD_ADDR_VAR 0 2
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_INT 1
60523: PPUSH
60524: CALL_OW 275
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: LD_INT 2
60536: PPUSH
60537: CALL_OW 275
60541: PUSH
60542: LD_VAR 0 1
60546: PPUSH
60547: LD_INT 3
60549: PPUSH
60550: CALL_OW 275
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// end ;
60560: LD_VAR 0 2
60564: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60565: LD_INT 0
60567: PPUSH
60568: PPUSH
// result := array ;
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_VAR 0 1
60578: ST_TO_ADDR
// if size >= result then
60579: LD_VAR 0 2
60583: PUSH
60584: LD_VAR 0 3
60588: GREATEREQUAL
60589: IFFALSE 60593
// exit ;
60591: GO 60643
// if size then
60593: LD_VAR 0 2
60597: IFFALSE 60643
// for i := array downto size do
60599: LD_ADDR_VAR 0 4
60603: PUSH
60604: DOUBLE
60605: LD_VAR 0 1
60609: INC
60610: ST_TO_ADDR
60611: LD_VAR 0 2
60615: PUSH
60616: FOR_DOWNTO
60617: IFFALSE 60641
// result := Delete ( result , result ) ;
60619: LD_ADDR_VAR 0 3
60623: PUSH
60624: LD_VAR 0 3
60628: PPUSH
60629: LD_VAR 0 3
60633: PPUSH
60634: CALL_OW 3
60638: ST_TO_ADDR
60639: GO 60616
60641: POP
60642: POP
// end ;
60643: LD_VAR 0 3
60647: RET
// export function ComExit ( unit ) ; var tmp ; begin
60648: LD_INT 0
60650: PPUSH
60651: PPUSH
// if not IsInUnit ( unit ) then
60652: LD_VAR 0 1
60656: PPUSH
60657: CALL_OW 310
60661: NOT
60662: IFFALSE 60666
// exit ;
60664: GO 60726
// tmp := IsInUnit ( unit ) ;
60666: LD_ADDR_VAR 0 3
60670: PUSH
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL_OW 310
60680: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60681: LD_VAR 0 3
60685: PPUSH
60686: CALL_OW 247
60690: PUSH
60691: LD_INT 2
60693: EQUAL
60694: IFFALSE 60707
// ComExitVehicle ( unit ) else
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 121
60705: GO 60716
// ComExitBuilding ( unit ) ;
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 122
// result := tmp ;
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: LD_VAR 0 3
60725: ST_TO_ADDR
// end ;
60726: LD_VAR 0 2
60730: RET
// export function ComExitAll ( units ) ; var i ; begin
60731: LD_INT 0
60733: PPUSH
60734: PPUSH
// if not units then
60735: LD_VAR 0 1
60739: NOT
60740: IFFALSE 60744
// exit ;
60742: GO 60770
// for i in units do
60744: LD_ADDR_VAR 0 3
60748: PUSH
60749: LD_VAR 0 1
60753: PUSH
60754: FOR_IN
60755: IFFALSE 60768
// ComExit ( i ) ;
60757: LD_VAR 0 3
60761: PPUSH
60762: CALL 60648 0 1
60766: GO 60754
60768: POP
60769: POP
// end ;
60770: LD_VAR 0 2
60774: RET
// export function ResetHc ; begin
60775: LD_INT 0
60777: PPUSH
// InitHc ;
60778: CALL_OW 19
// hc_importance := 0 ;
60782: LD_ADDR_OWVAR 32
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// end ;
60790: LD_VAR 0 1
60794: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
60799: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: LD_VAR 0 3
60814: PLUS
60815: PUSH
60816: LD_INT 2
60818: DIV
60819: ST_TO_ADDR
// if _x < 0 then
60820: LD_VAR 0 6
60824: PUSH
60825: LD_INT 0
60827: LESS
60828: IFFALSE 60845
// _x := _x * - 1 ;
60830: LD_ADDR_VAR 0 6
60834: PUSH
60835: LD_VAR 0 6
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: MUL
60844: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60845: LD_ADDR_VAR 0 7
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_VAR 0 4
60859: PLUS
60860: PUSH
60861: LD_INT 2
60863: DIV
60864: ST_TO_ADDR
// if _y < 0 then
60865: LD_VAR 0 7
60869: PUSH
60870: LD_INT 0
60872: LESS
60873: IFFALSE 60890
// _y := _y * - 1 ;
60875: LD_ADDR_VAR 0 7
60879: PUSH
60880: LD_VAR 0 7
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: MUL
60889: ST_TO_ADDR
// result := [ _x , _y ] ;
60890: LD_ADDR_VAR 0 5
60894: PUSH
60895: LD_VAR 0 6
60899: PUSH
60900: LD_VAR 0 7
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: ST_TO_ADDR
// end ;
60909: LD_VAR 0 5
60913: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
// task := GetTaskList ( unit ) ;
60920: LD_ADDR_VAR 0 7
60924: PUSH
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 437
60934: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60935: LD_VAR 0 7
60939: NOT
60940: IFFALSE 60959
60942: PUSH
60943: LD_VAR 0 1
60947: PPUSH
60948: LD_VAR 0 2
60952: PPUSH
60953: CALL_OW 308
60957: NOT
60958: AND
60959: IFFALSE 60963
// exit ;
60961: GO 61081
// if IsInArea ( unit , area ) then
60963: LD_VAR 0 1
60967: PPUSH
60968: LD_VAR 0 2
60972: PPUSH
60973: CALL_OW 308
60977: IFFALSE 60995
// begin ComMoveToArea ( unit , goAway ) ;
60979: LD_VAR 0 1
60983: PPUSH
60984: LD_VAR 0 3
60988: PPUSH
60989: CALL_OW 113
// exit ;
60993: GO 61081
// end ; if task [ 1 ] [ 1 ] <> M then
60995: LD_VAR 0 7
60999: PUSH
61000: LD_INT 1
61002: ARRAY
61003: PUSH
61004: LD_INT 1
61006: ARRAY
61007: PUSH
61008: LD_STRING M
61010: NONEQUAL
61011: IFFALSE 61015
// exit ;
61013: GO 61081
// x := task [ 1 ] [ 2 ] ;
61015: LD_ADDR_VAR 0 5
61019: PUSH
61020: LD_VAR 0 7
61024: PUSH
61025: LD_INT 1
61027: ARRAY
61028: PUSH
61029: LD_INT 2
61031: ARRAY
61032: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61033: LD_ADDR_VAR 0 6
61037: PUSH
61038: LD_VAR 0 7
61042: PUSH
61043: LD_INT 1
61045: ARRAY
61046: PUSH
61047: LD_INT 3
61049: ARRAY
61050: ST_TO_ADDR
// if InArea ( x , y , area ) then
61051: LD_VAR 0 5
61055: PPUSH
61056: LD_VAR 0 6
61060: PPUSH
61061: LD_VAR 0 2
61065: PPUSH
61066: CALL_OW 309
61070: IFFALSE 61081
// ComStop ( unit ) ;
61072: LD_VAR 0 1
61076: PPUSH
61077: CALL_OW 141
// end ;
61081: LD_VAR 0 4
61085: RET
// export function Abs ( value ) ; begin
61086: LD_INT 0
61088: PPUSH
// result := value ;
61089: LD_ADDR_VAR 0 2
61093: PUSH
61094: LD_VAR 0 1
61098: ST_TO_ADDR
// if value < 0 then
61099: LD_VAR 0 1
61103: PUSH
61104: LD_INT 0
61106: LESS
61107: IFFALSE 61124
// result := value * - 1 ;
61109: LD_ADDR_VAR 0 2
61113: PUSH
61114: LD_VAR 0 1
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: MUL
61123: ST_TO_ADDR
// end ;
61124: LD_VAR 0 2
61128: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61129: LD_INT 0
61131: PPUSH
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
61136: PPUSH
61137: PPUSH
61138: PPUSH
// if not unit or not building then
61139: LD_VAR 0 1
61143: NOT
61144: IFTRUE 61153
61146: PUSH
61147: LD_VAR 0 2
61151: NOT
61152: OR
61153: IFFALSE 61157
// exit ;
61155: GO 61385
// x := GetX ( building ) ;
61157: LD_ADDR_VAR 0 4
61161: PUSH
61162: LD_VAR 0 2
61166: PPUSH
61167: CALL_OW 250
61171: ST_TO_ADDR
// y := GetY ( building ) ;
61172: LD_ADDR_VAR 0 6
61176: PUSH
61177: LD_VAR 0 2
61181: PPUSH
61182: CALL_OW 251
61186: ST_TO_ADDR
// d := GetDir ( building ) ;
61187: LD_ADDR_VAR 0 8
61191: PUSH
61192: LD_VAR 0 2
61196: PPUSH
61197: CALL_OW 254
61201: ST_TO_ADDR
// r := 4 ;
61202: LD_ADDR_VAR 0 9
61206: PUSH
61207: LD_INT 4
61209: ST_TO_ADDR
// for i := 1 to 5 do
61210: LD_ADDR_VAR 0 10
61214: PUSH
61215: DOUBLE
61216: LD_INT 1
61218: DEC
61219: ST_TO_ADDR
61220: LD_INT 5
61222: PUSH
61223: FOR_TO
61224: IFFALSE 61383
// begin _x := ShiftX ( x , d , r + i ) ;
61226: LD_ADDR_VAR 0 5
61230: PUSH
61231: LD_VAR 0 4
61235: PPUSH
61236: LD_VAR 0 8
61240: PPUSH
61241: LD_VAR 0 9
61245: PUSH
61246: LD_VAR 0 10
61250: PLUS
61251: PPUSH
61252: CALL_OW 272
61256: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61257: LD_ADDR_VAR 0 7
61261: PUSH
61262: LD_VAR 0 6
61266: PPUSH
61267: LD_VAR 0 8
61271: PPUSH
61272: LD_VAR 0 9
61276: PUSH
61277: LD_VAR 0 10
61281: PLUS
61282: PPUSH
61283: CALL_OW 273
61287: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61288: LD_VAR 0 5
61292: PPUSH
61293: LD_VAR 0 7
61297: PPUSH
61298: CALL_OW 488
61302: IFFALSE 61337
61304: PUSH
61305: LD_VAR 0 5
61309: PPUSH
61310: LD_VAR 0 7
61314: PPUSH
61315: CALL_OW 428
61319: PPUSH
61320: CALL_OW 247
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: IN
61335: NOT
61336: AND
61337: IFFALSE 61381
// begin ComMoveXY ( unit , _x , _y ) ;
61339: LD_VAR 0 1
61343: PPUSH
61344: LD_VAR 0 5
61348: PPUSH
61349: LD_VAR 0 7
61353: PPUSH
61354: CALL_OW 111
// result := [ _x , _y ] ;
61358: LD_ADDR_VAR 0 3
61362: PUSH
61363: LD_VAR 0 5
61367: PUSH
61368: LD_VAR 0 7
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// exit ;
61377: POP
61378: POP
61379: GO 61385
// end ; end ;
61381: GO 61223
61383: POP
61384: POP
// end ;
61385: LD_VAR 0 3
61389: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
// result := 0 ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_INT 0
61402: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61403: LD_VAR 0 1
61407: PUSH
61408: LD_INT 0
61410: LESS
61411: IFTRUE 61423
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_INT 8
61421: GREATER
61422: OR
61423: IFTRUE 61435
61425: PUSH
61426: LD_VAR 0 2
61430: PUSH
61431: LD_INT 0
61433: LESS
61434: OR
61435: IFTRUE 61447
61437: PUSH
61438: LD_VAR 0 2
61442: PUSH
61443: LD_INT 8
61445: GREATER
61446: OR
61447: IFFALSE 61451
// exit ;
61449: GO 61526
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61451: LD_ADDR_VAR 0 4
61455: PUSH
61456: LD_INT 22
61458: PUSH
61459: LD_VAR 0 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PPUSH
61468: CALL_OW 69
61472: PUSH
61473: FOR_IN
61474: IFFALSE 61524
// begin un := UnitShoot ( i ) ;
61476: LD_ADDR_VAR 0 5
61480: PUSH
61481: LD_VAR 0 4
61485: PPUSH
61486: CALL_OW 504
61490: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61491: LD_VAR 0 5
61495: PPUSH
61496: CALL_OW 255
61500: PUSH
61501: LD_VAR 0 1
61505: EQUAL
61506: IFFALSE 61522
// begin result := un ;
61508: LD_ADDR_VAR 0 3
61512: PUSH
61513: LD_VAR 0 5
61517: ST_TO_ADDR
// exit ;
61518: POP
61519: POP
61520: GO 61526
// end ; end ;
61522: GO 61473
61524: POP
61525: POP
// end ;
61526: LD_VAR 0 3
61530: RET
// export function GetCargoBay ( units ) ; begin
61531: LD_INT 0
61533: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61534: LD_ADDR_VAR 0 2
61538: PUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 34
61549: PUSH
61550: LD_INT 12
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 34
61559: PUSH
61560: LD_INT 51
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 34
61569: PUSH
61570: LD_INT 32
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 34
61579: PUSH
61580: LD_INT 89
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: PPUSH
61594: CALL_OW 72
61598: ST_TO_ADDR
// end ;
61599: LD_VAR 0 2
61603: RET
// export function Negate ( value ) ; begin
61604: LD_INT 0
61606: PPUSH
// result := not value ;
61607: LD_ADDR_VAR 0 2
61611: PUSH
61612: LD_VAR 0 1
61616: NOT
61617: ST_TO_ADDR
// end ;
61618: LD_VAR 0 2
61622: RET
// export function Inc ( value ) ; begin
61623: LD_INT 0
61625: PPUSH
// result := value + 1 ;
61626: LD_ADDR_VAR 0 2
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_INT 1
61638: PLUS
61639: ST_TO_ADDR
// end ;
61640: LD_VAR 0 2
61644: RET
// export function Dec ( value ) ; begin
61645: LD_INT 0
61647: PPUSH
// result := value - 1 ;
61648: LD_ADDR_VAR 0 2
61652: PUSH
61653: LD_VAR 0 1
61657: PUSH
61658: LD_INT 1
61660: MINUS
61661: ST_TO_ADDR
// end ;
61662: LD_VAR 0 2
61666: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
61675: PPUSH
61676: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61677: LD_VAR 0 1
61681: PPUSH
61682: LD_VAR 0 2
61686: PPUSH
61687: CALL_OW 488
61691: NOT
61692: IFTRUE 61711
61694: PUSH
61695: LD_VAR 0 3
61699: PPUSH
61700: LD_VAR 0 4
61704: PPUSH
61705: CALL_OW 488
61709: NOT
61710: OR
61711: IFFALSE 61724
// begin result := - 1 ;
61713: LD_ADDR_VAR 0 5
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: ST_TO_ADDR
// exit ;
61722: GO 61959
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61724: LD_ADDR_VAR 0 12
61728: PUSH
61729: LD_VAR 0 1
61733: PPUSH
61734: LD_VAR 0 2
61738: PPUSH
61739: LD_VAR 0 3
61743: PPUSH
61744: LD_VAR 0 4
61748: PPUSH
61749: CALL 60795 0 4
61753: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61754: LD_ADDR_VAR 0 11
61758: PUSH
61759: LD_VAR 0 1
61763: PPUSH
61764: LD_VAR 0 2
61768: PPUSH
61769: LD_VAR 0 12
61773: PUSH
61774: LD_INT 1
61776: ARRAY
61777: PPUSH
61778: LD_VAR 0 12
61782: PUSH
61783: LD_INT 2
61785: ARRAY
61786: PPUSH
61787: CALL_OW 298
61791: ST_TO_ADDR
// distance := 9999 ;
61792: LD_ADDR_VAR 0 10
61796: PUSH
61797: LD_INT 9999
61799: ST_TO_ADDR
// for i := 0 to 5 do
61800: LD_ADDR_VAR 0 6
61804: PUSH
61805: DOUBLE
61806: LD_INT 0
61808: DEC
61809: ST_TO_ADDR
61810: LD_INT 5
61812: PUSH
61813: FOR_TO
61814: IFFALSE 61957
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61816: LD_ADDR_VAR 0 7
61820: PUSH
61821: LD_VAR 0 1
61825: PPUSH
61826: LD_VAR 0 6
61830: PPUSH
61831: LD_VAR 0 11
61835: PPUSH
61836: CALL_OW 272
61840: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61841: LD_ADDR_VAR 0 8
61845: PUSH
61846: LD_VAR 0 2
61850: PPUSH
61851: LD_VAR 0 6
61855: PPUSH
61856: LD_VAR 0 11
61860: PPUSH
61861: CALL_OW 273
61865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61866: LD_VAR 0 7
61870: PPUSH
61871: LD_VAR 0 8
61875: PPUSH
61876: CALL_OW 488
61880: NOT
61881: IFFALSE 61885
// continue ;
61883: GO 61813
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61885: LD_ADDR_VAR 0 9
61889: PUSH
61890: LD_VAR 0 12
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: PPUSH
61899: LD_VAR 0 12
61903: PUSH
61904: LD_INT 2
61906: ARRAY
61907: PPUSH
61908: LD_VAR 0 7
61912: PPUSH
61913: LD_VAR 0 8
61917: PPUSH
61918: CALL_OW 298
61922: ST_TO_ADDR
// if tmp < distance then
61923: LD_VAR 0 9
61927: PUSH
61928: LD_VAR 0 10
61932: LESS
61933: IFFALSE 61955
// begin result := i ;
61935: LD_ADDR_VAR 0 5
61939: PUSH
61940: LD_VAR 0 6
61944: ST_TO_ADDR
// distance := tmp ;
61945: LD_ADDR_VAR 0 10
61949: PUSH
61950: LD_VAR 0 9
61954: ST_TO_ADDR
// end ; end ;
61955: GO 61813
61957: POP
61958: POP
// end ;
61959: LD_VAR 0 5
61963: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61964: LD_INT 0
61966: PPUSH
61967: PPUSH
// if not driver or not IsInUnit ( driver ) then
61968: LD_VAR 0 1
61972: NOT
61973: IFTRUE 61987
61975: PUSH
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 310
61985: NOT
61986: OR
61987: IFFALSE 61991
// exit ;
61989: GO 62081
// vehicle := IsInUnit ( driver ) ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_VAR 0 1
62000: PPUSH
62001: CALL_OW 310
62005: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62006: LD_VAR 0 1
62010: PPUSH
62011: LD_STRING \
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: PUSH
62041: LD_STRING E
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_VAR 0 3
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PPUSH
62077: CALL_OW 446
// end ;
62081: LD_VAR 0 2
62085: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62086: LD_INT 0
62088: PPUSH
62089: PPUSH
// if not driver or not IsInUnit ( driver ) then
62090: LD_VAR 0 1
62094: NOT
62095: IFTRUE 62109
62097: PUSH
62098: LD_VAR 0 1
62102: PPUSH
62103: CALL_OW 310
62107: NOT
62108: OR
62109: IFFALSE 62113
// exit ;
62111: GO 62203
// vehicle := IsInUnit ( driver ) ;
62113: LD_ADDR_VAR 0 3
62117: PUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 310
62127: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62128: LD_VAR 0 1
62132: PPUSH
62133: LD_STRING \
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: LD_STRING E
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_VAR 0 3
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PPUSH
62199: CALL_OW 447
// end ;
62203: LD_VAR 0 2
62207: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62208: LD_INT 0
62210: PPUSH
62211: PPUSH
62212: PPUSH
// tmp := [ ] ;
62213: LD_ADDR_VAR 0 5
62217: PUSH
62218: EMPTY
62219: ST_TO_ADDR
// for i in units do
62220: LD_ADDR_VAR 0 4
62224: PUSH
62225: LD_VAR 0 1
62229: PUSH
62230: FOR_IN
62231: IFFALSE 62269
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62233: LD_ADDR_VAR 0 5
62237: PUSH
62238: LD_VAR 0 5
62242: PPUSH
62243: LD_VAR 0 5
62247: PUSH
62248: LD_INT 1
62250: PLUS
62251: PPUSH
62252: LD_VAR 0 4
62256: PPUSH
62257: CALL_OW 256
62261: PPUSH
62262: CALL_OW 2
62266: ST_TO_ADDR
62267: GO 62230
62269: POP
62270: POP
// if not tmp then
62271: LD_VAR 0 5
62275: NOT
62276: IFFALSE 62280
// exit ;
62278: GO 62328
// if asc then
62280: LD_VAR 0 2
62284: IFFALSE 62308
// result := SortListByListAsc ( units , tmp ) else
62286: LD_ADDR_VAR 0 3
62290: PUSH
62291: LD_VAR 0 1
62295: PPUSH
62296: LD_VAR 0 5
62300: PPUSH
62301: CALL_OW 76
62305: ST_TO_ADDR
62306: GO 62328
// result := SortListByListDesc ( units , tmp ) ;
62308: LD_ADDR_VAR 0 3
62312: PUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_VAR 0 5
62322: PPUSH
62323: CALL_OW 77
62327: ST_TO_ADDR
// end ;
62328: LD_VAR 0 3
62332: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62333: LD_INT 0
62335: PPUSH
62336: PPUSH
// task := GetTaskList ( mech ) ;
62337: LD_ADDR_VAR 0 4
62341: PUSH
62342: LD_VAR 0 1
62346: PPUSH
62347: CALL_OW 437
62351: ST_TO_ADDR
// if not task then
62352: LD_VAR 0 4
62356: NOT
62357: IFFALSE 62361
// exit ;
62359: GO 62405
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62361: LD_ADDR_VAR 0 3
62365: PUSH
62366: LD_VAR 0 4
62370: PUSH
62371: LD_INT 1
62373: ARRAY
62374: PUSH
62375: LD_INT 1
62377: ARRAY
62378: PUSH
62379: LD_STRING r
62381: EQUAL
62382: IFFALSE 62404
62384: PUSH
62385: LD_VAR 0 4
62389: PUSH
62390: LD_INT 1
62392: ARRAY
62393: PUSH
62394: LD_INT 4
62396: ARRAY
62397: PUSH
62398: LD_VAR 0 2
62402: EQUAL
62403: AND
62404: ST_TO_ADDR
// end ;
62405: LD_VAR 0 3
62409: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62410: LD_INT 0
62412: PPUSH
// SetDir ( unit , d ) ;
62413: LD_VAR 0 1
62417: PPUSH
62418: LD_VAR 0 4
62422: PPUSH
62423: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62427: LD_ADDR_VAR 0 6
62431: PUSH
62432: LD_VAR 0 1
62436: PPUSH
62437: LD_VAR 0 2
62441: PPUSH
62442: LD_VAR 0 3
62446: PPUSH
62447: LD_VAR 0 5
62451: PPUSH
62452: CALL_OW 48
62456: ST_TO_ADDR
// end ;
62457: LD_VAR 0 6
62461: RET
// export function ToNaturalNumber ( number ) ; begin
62462: LD_INT 0
62464: PPUSH
// result := number div 1 ;
62465: LD_ADDR_VAR 0 2
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_INT 1
62477: DIV
62478: ST_TO_ADDR
// if number < 0 then
62479: LD_VAR 0 1
62483: PUSH
62484: LD_INT 0
62486: LESS
62487: IFFALSE 62497
// result := 0 ;
62489: LD_ADDR_VAR 0 2
62493: PUSH
62494: LD_INT 0
62496: ST_TO_ADDR
// end ;
62497: LD_VAR 0 2
62501: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
62502: LD_INT 0
62504: PPUSH
62505: PPUSH
62506: PPUSH
// if not buildings then
62507: LD_VAR 0 1
62511: NOT
62512: IFFALSE 62516
// exit ;
62514: GO 62631
// tmp := [ ] ;
62516: LD_ADDR_VAR 0 5
62520: PUSH
62521: EMPTY
62522: ST_TO_ADDR
// for b in buildings do
62523: LD_ADDR_VAR 0 4
62527: PUSH
62528: LD_VAR 0 1
62532: PUSH
62533: FOR_IN
62534: IFFALSE 62572
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
62536: LD_ADDR_VAR 0 5
62540: PUSH
62541: LD_VAR 0 5
62545: PPUSH
62546: LD_VAR 0 5
62550: PUSH
62551: LD_INT 1
62553: PLUS
62554: PPUSH
62555: LD_VAR 0 4
62559: PPUSH
62560: CALL_OW 266
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
62570: GO 62533
62572: POP
62573: POP
// if not tmp then
62574: LD_VAR 0 5
62578: NOT
62579: IFFALSE 62583
// exit ;
62581: GO 62631
// if asc then
62583: LD_VAR 0 2
62587: IFFALSE 62611
// result := SortListByListAsc ( buildings , tmp ) else
62589: LD_ADDR_VAR 0 3
62593: PUSH
62594: LD_VAR 0 1
62598: PPUSH
62599: LD_VAR 0 5
62603: PPUSH
62604: CALL_OW 76
62608: ST_TO_ADDR
62609: GO 62631
// result := SortListByListDesc ( buildings , tmp ) ;
62611: LD_ADDR_VAR 0 3
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_VAR 0 5
62625: PPUSH
62626: CALL_OW 77
62630: ST_TO_ADDR
// end ;
62631: LD_VAR 0 3
62635: RET
// export function SortByClass ( units , class ) ; var un ; begin
62636: LD_INT 0
62638: PPUSH
62639: PPUSH
// if not units or not class then
62640: LD_VAR 0 1
62644: NOT
62645: IFTRUE 62654
62647: PUSH
62648: LD_VAR 0 2
62652: NOT
62653: OR
62654: IFFALSE 62658
// exit ;
62656: GO 62753
// result := [ ] ;
62658: LD_ADDR_VAR 0 3
62662: PUSH
62663: EMPTY
62664: ST_TO_ADDR
// for un in units do
62665: LD_ADDR_VAR 0 4
62669: PUSH
62670: LD_VAR 0 1
62674: PUSH
62675: FOR_IN
62676: IFFALSE 62751
// if GetClass ( un ) = class then
62678: LD_VAR 0 4
62682: PPUSH
62683: CALL_OW 257
62687: PUSH
62688: LD_VAR 0 2
62692: EQUAL
62693: IFFALSE 62720
// result := Insert ( result , 1 , un ) else
62695: LD_ADDR_VAR 0 3
62699: PUSH
62700: LD_VAR 0 3
62704: PPUSH
62705: LD_INT 1
62707: PPUSH
62708: LD_VAR 0 4
62712: PPUSH
62713: CALL_OW 2
62717: ST_TO_ADDR
62718: GO 62749
// result := Replace ( result , result + 1 , un ) ;
62720: LD_ADDR_VAR 0 3
62724: PUSH
62725: LD_VAR 0 3
62729: PPUSH
62730: LD_VAR 0 3
62734: PUSH
62735: LD_INT 1
62737: PLUS
62738: PPUSH
62739: LD_VAR 0 4
62743: PPUSH
62744: CALL_OW 1
62748: ST_TO_ADDR
62749: GO 62675
62751: POP
62752: POP
// end ;
62753: LD_VAR 0 3
62757: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62758: LD_INT 0
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
// result := [ ] ;
62767: LD_ADDR_VAR 0 4
62771: PUSH
62772: EMPTY
62773: ST_TO_ADDR
// if x - r < 0 then
62774: LD_VAR 0 1
62778: PUSH
62779: LD_VAR 0 3
62783: MINUS
62784: PUSH
62785: LD_INT 0
62787: LESS
62788: IFFALSE 62800
// min_x := 0 else
62790: LD_ADDR_VAR 0 8
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
62798: GO 62816
// min_x := x - r ;
62800: LD_ADDR_VAR 0 8
62804: PUSH
62805: LD_VAR 0 1
62809: PUSH
62810: LD_VAR 0 3
62814: MINUS
62815: ST_TO_ADDR
// if y - r < 0 then
62816: LD_VAR 0 2
62820: PUSH
62821: LD_VAR 0 3
62825: MINUS
62826: PUSH
62827: LD_INT 0
62829: LESS
62830: IFFALSE 62842
// min_y := 0 else
62832: LD_ADDR_VAR 0 7
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
62840: GO 62858
// min_y := y - r ;
62842: LD_ADDR_VAR 0 7
62846: PUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_VAR 0 3
62856: MINUS
62857: ST_TO_ADDR
// max_x := x + r ;
62858: LD_ADDR_VAR 0 9
62862: PUSH
62863: LD_VAR 0 1
62867: PUSH
62868: LD_VAR 0 3
62872: PLUS
62873: ST_TO_ADDR
// max_y := y + r ;
62874: LD_ADDR_VAR 0 10
62878: PUSH
62879: LD_VAR 0 2
62883: PUSH
62884: LD_VAR 0 3
62888: PLUS
62889: ST_TO_ADDR
// for _x = min_x to max_x do
62890: LD_ADDR_VAR 0 5
62894: PUSH
62895: DOUBLE
62896: LD_VAR 0 8
62900: DEC
62901: ST_TO_ADDR
62902: LD_VAR 0 9
62906: PUSH
62907: FOR_TO
62908: IFFALSE 63009
// for _y = min_y to max_y do
62910: LD_ADDR_VAR 0 6
62914: PUSH
62915: DOUBLE
62916: LD_VAR 0 7
62920: DEC
62921: ST_TO_ADDR
62922: LD_VAR 0 10
62926: PUSH
62927: FOR_TO
62928: IFFALSE 63005
// begin if not ValidHex ( _x , _y ) then
62930: LD_VAR 0 5
62934: PPUSH
62935: LD_VAR 0 6
62939: PPUSH
62940: CALL_OW 488
62944: NOT
62945: IFFALSE 62949
// continue ;
62947: GO 62927
// if GetResourceTypeXY ( _x , _y ) then
62949: LD_VAR 0 5
62953: PPUSH
62954: LD_VAR 0 6
62958: PPUSH
62959: CALL_OW 283
62963: IFFALSE 63003
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62965: LD_ADDR_VAR 0 4
62969: PUSH
62970: LD_VAR 0 4
62974: PPUSH
62975: LD_VAR 0 4
62979: PUSH
62980: LD_INT 1
62982: PLUS
62983: PPUSH
62984: LD_VAR 0 5
62988: PUSH
62989: LD_VAR 0 6
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PPUSH
62998: CALL_OW 1
63002: ST_TO_ADDR
// end ;
63003: GO 62927
63005: POP
63006: POP
63007: GO 62907
63009: POP
63010: POP
// end ;
63011: LD_VAR 0 4
63015: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63016: LD_INT 0
63018: PPUSH
63019: PPUSH
63020: PPUSH
63021: PPUSH
63022: PPUSH
63023: PPUSH
63024: PPUSH
63025: PPUSH
// if not units then
63026: LD_VAR 0 1
63030: NOT
63031: IFFALSE 63035
// exit ;
63033: GO 63567
// result := UnitFilter ( units , [ f_ok ] ) ;
63035: LD_ADDR_VAR 0 3
63039: PUSH
63040: LD_VAR 0 1
63044: PPUSH
63045: LD_INT 50
63047: PUSH
63048: EMPTY
63049: LIST
63050: PPUSH
63051: CALL_OW 72
63055: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63056: LD_ADDR_VAR 0 8
63060: PUSH
63061: LD_VAR 0 1
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PPUSH
63070: CALL_OW 255
63074: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63075: LD_ADDR_VAR 0 10
63079: PUSH
63080: LD_INT 29
63082: PUSH
63083: LD_INT 91
63085: PUSH
63086: LD_INT 49
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// if not result then
63094: LD_VAR 0 3
63098: NOT
63099: IFFALSE 63103
// exit ;
63101: GO 63567
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63103: LD_ADDR_VAR 0 5
63107: PUSH
63108: LD_INT 81
63110: PUSH
63111: LD_VAR 0 8
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PPUSH
63120: CALL_OW 69
63124: ST_TO_ADDR
// for i in result do
63125: LD_ADDR_VAR 0 4
63129: PUSH
63130: LD_VAR 0 3
63134: PUSH
63135: FOR_IN
63136: IFFALSE 63565
// begin tag := GetTag ( i ) + 1 ;
63138: LD_ADDR_VAR 0 9
63142: PUSH
63143: LD_VAR 0 4
63147: PPUSH
63148: CALL_OW 110
63152: PUSH
63153: LD_INT 1
63155: PLUS
63156: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63157: LD_ADDR_VAR 0 7
63161: PUSH
63162: LD_VAR 0 4
63166: PPUSH
63167: CALL_OW 250
63171: PPUSH
63172: LD_VAR 0 4
63176: PPUSH
63177: CALL_OW 251
63181: PPUSH
63182: LD_INT 4
63184: PPUSH
63185: CALL 62758 0 3
63189: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63190: LD_VAR 0 4
63194: PPUSH
63195: CALL_OW 247
63199: PUSH
63200: LD_INT 2
63202: EQUAL
63203: IFFALSE 63215
63205: PUSH
63206: LD_VAR 0 7
63210: PUSH
63211: LD_INT 2
63213: GREATER
63214: AND
63215: IFFALSE 63235
63217: PUSH
63218: LD_VAR 0 4
63222: PPUSH
63223: CALL_OW 264
63227: PUSH
63228: LD_VAR 0 10
63232: IN
63233: NOT
63234: AND
63235: IFFALSE 63274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63237: LD_VAR 0 4
63241: PPUSH
63242: LD_VAR 0 7
63246: PUSH
63247: LD_INT 1
63249: ARRAY
63250: PUSH
63251: LD_INT 1
63253: ARRAY
63254: PPUSH
63255: LD_VAR 0 7
63259: PUSH
63260: LD_INT 1
63262: ARRAY
63263: PUSH
63264: LD_INT 2
63266: ARRAY
63267: PPUSH
63268: CALL_OW 116
63272: GO 63563
// if path > tag then
63274: LD_VAR 0 2
63278: PUSH
63279: LD_VAR 0 9
63283: GREATER
63284: IFFALSE 63492
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63286: LD_ADDR_VAR 0 6
63290: PUSH
63291: LD_VAR 0 5
63295: PPUSH
63296: LD_INT 91
63298: PUSH
63299: LD_VAR 0 4
63303: PUSH
63304: LD_INT 8
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: PPUSH
63312: CALL_OW 72
63316: ST_TO_ADDR
// if nearEnemy then
63317: LD_VAR 0 6
63321: IFFALSE 63390
// begin if GetWeapon ( i ) = ru_time_lapser then
63323: LD_VAR 0 4
63327: PPUSH
63328: CALL_OW 264
63332: PUSH
63333: LD_INT 49
63335: EQUAL
63336: IFFALSE 63364
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63338: LD_VAR 0 4
63342: PPUSH
63343: LD_VAR 0 6
63347: PPUSH
63348: LD_VAR 0 4
63352: PPUSH
63353: CALL_OW 74
63357: PPUSH
63358: CALL_OW 112
63362: GO 63388
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63364: LD_VAR 0 4
63368: PPUSH
63369: LD_VAR 0 6
63373: PPUSH
63374: LD_VAR 0 4
63378: PPUSH
63379: CALL_OW 74
63383: PPUSH
63384: CALL 64648 0 2
// end else
63388: GO 63490
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63390: LD_VAR 0 4
63394: PPUSH
63395: LD_VAR 0 2
63399: PUSH
63400: LD_VAR 0 9
63404: ARRAY
63405: PUSH
63406: LD_INT 1
63408: ARRAY
63409: PPUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_VAR 0 9
63419: ARRAY
63420: PUSH
63421: LD_INT 2
63423: ARRAY
63424: PPUSH
63425: CALL_OW 297
63429: PUSH
63430: LD_INT 6
63432: GREATER
63433: IFFALSE 63476
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63435: LD_VAR 0 4
63439: PPUSH
63440: LD_VAR 0 2
63444: PUSH
63445: LD_VAR 0 9
63449: ARRAY
63450: PUSH
63451: LD_INT 1
63453: ARRAY
63454: PPUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_VAR 0 9
63464: ARRAY
63465: PUSH
63466: LD_INT 2
63468: ARRAY
63469: PPUSH
63470: CALL_OW 114
63474: GO 63490
// SetTag ( i , tag ) ;
63476: LD_VAR 0 4
63480: PPUSH
63481: LD_VAR 0 9
63485: PPUSH
63486: CALL_OW 109
// end else
63490: GO 63563
// if enemy then
63492: LD_VAR 0 5
63496: IFFALSE 63563
// begin if GetWeapon ( i ) = ru_time_lapser then
63498: LD_VAR 0 4
63502: PPUSH
63503: CALL_OW 264
63507: PUSH
63508: LD_INT 49
63510: EQUAL
63511: IFFALSE 63539
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63513: LD_VAR 0 4
63517: PPUSH
63518: LD_VAR 0 5
63522: PPUSH
63523: LD_VAR 0 4
63527: PPUSH
63528: CALL_OW 74
63532: PPUSH
63533: CALL_OW 112
63537: GO 63563
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63539: LD_VAR 0 4
63543: PPUSH
63544: LD_VAR 0 5
63548: PPUSH
63549: LD_VAR 0 4
63553: PPUSH
63554: CALL_OW 74
63558: PPUSH
63559: CALL 64648 0 2
// end ; end ;
63563: GO 63135
63565: POP
63566: POP
// end ;
63567: LD_VAR 0 3
63571: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63572: LD_INT 0
63574: PPUSH
63575: PPUSH
63576: PPUSH
// if not unit or IsInUnit ( unit ) then
63577: LD_VAR 0 1
63581: NOT
63582: IFTRUE 63595
63584: PUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 310
63594: OR
63595: IFFALSE 63599
// exit ;
63597: GO 63690
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63599: LD_ADDR_VAR 0 4
63603: PUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 250
63613: PPUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: LD_INT 1
63621: PPUSH
63622: CALL_OW 272
63626: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63627: LD_ADDR_VAR 0 5
63631: PUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 251
63641: PPUSH
63642: LD_VAR 0 2
63646: PPUSH
63647: LD_INT 1
63649: PPUSH
63650: CALL_OW 273
63654: ST_TO_ADDR
// if ValidHex ( x , y ) then
63655: LD_VAR 0 4
63659: PPUSH
63660: LD_VAR 0 5
63664: PPUSH
63665: CALL_OW 488
63669: IFFALSE 63690
// ComTurnXY ( unit , x , y ) ;
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 4
63680: PPUSH
63681: LD_VAR 0 5
63685: PPUSH
63686: CALL_OW 118
// end ;
63690: LD_VAR 0 3
63694: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63695: LD_INT 0
63697: PPUSH
63698: PPUSH
// result := false ;
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_INT 0
63706: ST_TO_ADDR
// if not units then
63707: LD_VAR 0 2
63711: NOT
63712: IFFALSE 63716
// exit ;
63714: GO 63761
// for i in units do
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_VAR 0 2
63725: PUSH
63726: FOR_IN
63727: IFFALSE 63759
// if See ( side , i ) then
63729: LD_VAR 0 1
63733: PPUSH
63734: LD_VAR 0 4
63738: PPUSH
63739: CALL_OW 292
63743: IFFALSE 63757
// begin result := true ;
63745: LD_ADDR_VAR 0 3
63749: PUSH
63750: LD_INT 1
63752: ST_TO_ADDR
// exit ;
63753: POP
63754: POP
63755: GO 63761
// end ;
63757: GO 63726
63759: POP
63760: POP
// end ;
63761: LD_VAR 0 3
63765: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63766: LD_INT 0
63768: PPUSH
63769: PPUSH
63770: PPUSH
63771: PPUSH
// if not unit or not points then
63772: LD_VAR 0 1
63776: NOT
63777: IFTRUE 63786
63779: PUSH
63780: LD_VAR 0 2
63784: NOT
63785: OR
63786: IFFALSE 63790
// exit ;
63788: GO 63880
// dist := 99999 ;
63790: LD_ADDR_VAR 0 5
63794: PUSH
63795: LD_INT 99999
63797: ST_TO_ADDR
// for i in points do
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: FOR_IN
63809: IFFALSE 63878
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63811: LD_ADDR_VAR 0 6
63815: PUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: LD_VAR 0 4
63825: PUSH
63826: LD_INT 1
63828: ARRAY
63829: PPUSH
63830: LD_VAR 0 4
63834: PUSH
63835: LD_INT 2
63837: ARRAY
63838: PPUSH
63839: CALL_OW 297
63843: ST_TO_ADDR
// if tmpDist < dist then
63844: LD_VAR 0 6
63848: PUSH
63849: LD_VAR 0 5
63853: LESS
63854: IFFALSE 63876
// begin result := i ;
63856: LD_ADDR_VAR 0 3
63860: PUSH
63861: LD_VAR 0 4
63865: ST_TO_ADDR
// dist := tmpDist ;
63866: LD_ADDR_VAR 0 5
63870: PUSH
63871: LD_VAR 0 6
63875: ST_TO_ADDR
// end ; end ;
63876: GO 63808
63878: POP
63879: POP
// end ;
63880: LD_VAR 0 3
63884: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63885: LD_INT 0
63887: PPUSH
// uc_side := side ;
63888: LD_ADDR_OWVAR 20
63892: PUSH
63893: LD_VAR 0 1
63897: ST_TO_ADDR
// uc_nation := 3 ;
63898: LD_ADDR_OWVAR 21
63902: PUSH
63903: LD_INT 3
63905: ST_TO_ADDR
// vc_chassis := 25 ;
63906: LD_ADDR_OWVAR 37
63910: PUSH
63911: LD_INT 25
63913: ST_TO_ADDR
// vc_engine := engine_siberite ;
63914: LD_ADDR_OWVAR 39
63918: PUSH
63919: LD_INT 3
63921: ST_TO_ADDR
// vc_control := control_computer ;
63922: LD_ADDR_OWVAR 38
63926: PUSH
63927: LD_INT 3
63929: ST_TO_ADDR
// vc_weapon := 59 ;
63930: LD_ADDR_OWVAR 40
63934: PUSH
63935: LD_INT 59
63937: ST_TO_ADDR
// result := CreateVehicle ;
63938: LD_ADDR_VAR 0 5
63942: PUSH
63943: CALL_OW 45
63947: ST_TO_ADDR
// SetDir ( result , d ) ;
63948: LD_VAR 0 5
63952: PPUSH
63953: LD_VAR 0 4
63957: PPUSH
63958: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63962: LD_VAR 0 5
63966: PPUSH
63967: LD_VAR 0 2
63971: PPUSH
63972: LD_VAR 0 3
63976: PPUSH
63977: LD_INT 0
63979: PPUSH
63980: CALL_OW 48
// end ;
63984: LD_VAR 0 5
63988: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63989: LD_INT 0
63991: PPUSH
63992: PPUSH
63993: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63994: LD_ADDR_VAR 0 2
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64017: LD_VAR 0 1
64021: NOT
64022: IFTRUE 64055
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 264
64034: PUSH
64035: LD_INT 12
64037: PUSH
64038: LD_INT 51
64040: PUSH
64041: LD_INT 32
64043: PUSH
64044: LD_INT 89
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: IN
64053: NOT
64054: OR
64055: IFFALSE 64059
// exit ;
64057: GO 64157
// for i := 1 to 3 do
64059: LD_ADDR_VAR 0 3
64063: PUSH
64064: DOUBLE
64065: LD_INT 1
64067: DEC
64068: ST_TO_ADDR
64069: LD_INT 3
64071: PUSH
64072: FOR_TO
64073: IFFALSE 64155
// begin tmp := GetCargo ( cargo , i ) ;
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: LD_VAR 0 1
64084: PPUSH
64085: LD_VAR 0 3
64089: PPUSH
64090: CALL_OW 289
64094: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64095: LD_ADDR_VAR 0 2
64099: PUSH
64100: LD_VAR 0 2
64104: PPUSH
64105: LD_VAR 0 3
64109: PPUSH
64110: LD_VAR 0 4
64114: PPUSH
64115: CALL_OW 1
64119: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64120: LD_ADDR_VAR 0 2
64124: PUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: LD_INT 4
64132: PPUSH
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 4
64140: ARRAY
64141: PUSH
64142: LD_VAR 0 4
64146: PLUS
64147: PPUSH
64148: CALL_OW 1
64152: ST_TO_ADDR
// end ;
64153: GO 64072
64155: POP
64156: POP
// end ;
64157: LD_VAR 0 2
64161: RET
// export function Length ( array ) ; begin
64162: LD_INT 0
64164: PPUSH
// result := array + 0 ;
64165: LD_ADDR_VAR 0 2
64169: PUSH
64170: LD_VAR 0 1
64174: PUSH
64175: LD_INT 0
64177: PLUS
64178: ST_TO_ADDR
// end ;
64179: LD_VAR 0 2
64183: RET
// export function PrepareArray ( array ) ; begin
64184: LD_INT 0
64186: PPUSH
// result := array diff 0 ;
64187: LD_ADDR_VAR 0 2
64191: PUSH
64192: LD_VAR 0 1
64196: PUSH
64197: LD_INT 0
64199: DIFF
64200: ST_TO_ADDR
// if not result [ 1 ] then
64201: LD_VAR 0 2
64205: PUSH
64206: LD_INT 1
64208: ARRAY
64209: NOT
64210: IFFALSE 64230
// result := Delete ( result , 1 ) ;
64212: LD_ADDR_VAR 0 2
64216: PUSH
64217: LD_VAR 0 2
64221: PPUSH
64222: LD_INT 1
64224: PPUSH
64225: CALL_OW 3
64229: ST_TO_ADDR
// end ;
64230: LD_VAR 0 2
64234: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64235: LD_INT 0
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
// sibRocketRange := 25 ;
64241: LD_ADDR_VAR 0 6
64245: PUSH
64246: LD_INT 25
64248: ST_TO_ADDR
// result := false ;
64249: LD_ADDR_VAR 0 4
64253: PUSH
64254: LD_INT 0
64256: ST_TO_ADDR
// for i := 0 to 5 do
64257: LD_ADDR_VAR 0 5
64261: PUSH
64262: DOUBLE
64263: LD_INT 0
64265: DEC
64266: ST_TO_ADDR
64267: LD_INT 5
64269: PUSH
64270: FOR_TO
64271: IFFALSE 64338
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 5
64282: PPUSH
64283: LD_VAR 0 6
64287: PPUSH
64288: CALL_OW 272
64292: PPUSH
64293: LD_VAR 0 2
64297: PPUSH
64298: LD_VAR 0 5
64302: PPUSH
64303: LD_VAR 0 6
64307: PPUSH
64308: CALL_OW 273
64312: PPUSH
64313: LD_VAR 0 3
64317: PPUSH
64318: CALL_OW 309
64322: IFFALSE 64336
// begin result := true ;
64324: LD_ADDR_VAR 0 4
64328: PUSH
64329: LD_INT 1
64331: ST_TO_ADDR
// exit ;
64332: POP
64333: POP
64334: GO 64340
// end ;
64336: GO 64270
64338: POP
64339: POP
// end ;
64340: LD_VAR 0 4
64344: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
64349: PPUSH
// if btype = b_depot then
64350: LD_VAR 0 2
64354: PUSH
64355: LD_INT 0
64357: EQUAL
64358: IFFALSE 64370
// begin result := true ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_INT 1
64367: ST_TO_ADDR
// exit ;
64368: GO 64490
// end ; pom := GetBase ( depot ) ;
64370: LD_ADDR_VAR 0 4
64374: PUSH
64375: LD_VAR 0 1
64379: PPUSH
64380: CALL_OW 274
64384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64385: LD_ADDR_VAR 0 5
64389: PUSH
64390: LD_VAR 0 2
64394: PPUSH
64395: LD_VAR 0 1
64399: PPUSH
64400: CALL_OW 248
64404: PPUSH
64405: CALL_OW 450
64409: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64410: LD_ADDR_VAR 0 3
64414: PUSH
64415: LD_VAR 0 4
64419: PPUSH
64420: LD_INT 1
64422: PPUSH
64423: CALL_OW 275
64427: PUSH
64428: LD_VAR 0 5
64432: PUSH
64433: LD_INT 1
64435: ARRAY
64436: GREATEREQUAL
64437: IFFALSE 64463
64439: PUSH
64440: LD_VAR 0 4
64444: PPUSH
64445: LD_INT 2
64447: PPUSH
64448: CALL_OW 275
64452: PUSH
64453: LD_VAR 0 5
64457: PUSH
64458: LD_INT 2
64460: ARRAY
64461: GREATEREQUAL
64462: AND
64463: IFFALSE 64489
64465: PUSH
64466: LD_VAR 0 4
64470: PPUSH
64471: LD_INT 3
64473: PPUSH
64474: CALL_OW 275
64478: PUSH
64479: LD_VAR 0 5
64483: PUSH
64484: LD_INT 3
64486: ARRAY
64487: GREATEREQUAL
64488: AND
64489: ST_TO_ADDR
// end ;
64490: LD_VAR 0 3
64494: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64495: LD_INT 0
64497: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64498: LD_VAR 0 1
64502: PPUSH
64503: LD_VAR 0 2
64507: PPUSH
64508: LD_INT 0
64510: PPUSH
64511: LD_INT 0
64513: PPUSH
64514: LD_INT 1
64516: PPUSH
64517: LD_INT 0
64519: PPUSH
64520: CALL_OW 587
// end ;
64524: LD_VAR 0 3
64528: RET
// export function CenterOnNow ( unit ) ; begin
64529: LD_INT 0
64531: PPUSH
// result := IsInUnit ( unit ) ;
64532: LD_ADDR_VAR 0 2
64536: PUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 310
64546: ST_TO_ADDR
// if not result then
64547: LD_VAR 0 2
64551: NOT
64552: IFFALSE 64564
// result := unit ;
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_VAR 0 1
64563: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 87
// end ;
64573: LD_VAR 0 2
64577: RET
// export function ComMoveHex ( unit , hex ) ; begin
64578: LD_INT 0
64580: PPUSH
// if not hex then
64581: LD_VAR 0 2
64585: NOT
64586: IFFALSE 64590
// exit ;
64588: GO 64643
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64590: LD_VAR 0 2
64594: PUSH
64595: LD_INT 1
64597: ARRAY
64598: PPUSH
64599: LD_VAR 0 2
64603: PUSH
64604: LD_INT 2
64606: ARRAY
64607: PPUSH
64608: CALL_OW 428
64612: IFFALSE 64616
// exit ;
64614: GO 64643
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64616: LD_VAR 0 1
64620: PPUSH
64621: LD_VAR 0 2
64625: PUSH
64626: LD_INT 1
64628: ARRAY
64629: PPUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_INT 2
64637: ARRAY
64638: PPUSH
64639: CALL_OW 111
// end ;
64643: LD_VAR 0 3
64647: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64648: LD_INT 0
64650: PPUSH
64651: PPUSH
64652: PPUSH
// if not unit or not enemy then
64653: LD_VAR 0 1
64657: NOT
64658: IFTRUE 64667
64660: PUSH
64661: LD_VAR 0 2
64665: NOT
64666: OR
64667: IFFALSE 64671
// exit ;
64669: GO 64797
// x := GetX ( enemy ) ;
64671: LD_ADDR_VAR 0 4
64675: PUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: CALL_OW 250
64685: ST_TO_ADDR
// y := GetY ( enemy ) ;
64686: LD_ADDR_VAR 0 5
64690: PUSH
64691: LD_VAR 0 2
64695: PPUSH
64696: CALL_OW 251
64700: ST_TO_ADDR
// if ValidHex ( x , y ) then
64701: LD_VAR 0 4
64705: PPUSH
64706: LD_VAR 0 5
64710: PPUSH
64711: CALL_OW 488
64715: IFFALSE 64797
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64717: LD_VAR 0 2
64721: PPUSH
64722: CALL_OW 247
64726: PUSH
64727: LD_INT 3
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: IN
64737: IFTRUE 64760
64739: PUSH
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 255
64749: PPUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: CALL_OW 292
64759: OR
64760: IFFALSE 64778
// ComAttackUnit ( unit , enemy ) else
64762: LD_VAR 0 1
64766: PPUSH
64767: LD_VAR 0 2
64771: PPUSH
64772: CALL_OW 115
64776: GO 64797
// ComAgressiveMove ( unit , x , y ) ;
64778: LD_VAR 0 1
64782: PPUSH
64783: LD_VAR 0 4
64787: PPUSH
64788: LD_VAR 0 5
64792: PPUSH
64793: CALL_OW 114
// end ;
64797: LD_VAR 0 3
64801: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64802: LD_INT 0
64804: PPUSH
64805: PPUSH
64806: PPUSH
// list := AreaToList ( area , 0 ) ;
64807: LD_ADDR_VAR 0 5
64811: PUSH
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_INT 0
64819: PPUSH
64820: CALL_OW 517
64824: ST_TO_ADDR
// if not list then
64825: LD_VAR 0 5
64829: NOT
64830: IFFALSE 64834
// exit ;
64832: GO 64964
// if all then
64834: LD_VAR 0 2
64838: IFFALSE 64926
// begin for i := 1 to list [ 1 ] do
64840: LD_ADDR_VAR 0 4
64844: PUSH
64845: DOUBLE
64846: LD_INT 1
64848: DEC
64849: ST_TO_ADDR
64850: LD_VAR 0 5
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: FOR_TO
64860: IFFALSE 64922
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64862: LD_ADDR_VAR 0 3
64866: PUSH
64867: LD_VAR 0 3
64871: PPUSH
64872: LD_VAR 0 3
64876: PUSH
64877: LD_INT 1
64879: PLUS
64880: PPUSH
64881: LD_VAR 0 5
64885: PUSH
64886: LD_INT 1
64888: ARRAY
64889: PUSH
64890: LD_VAR 0 4
64894: ARRAY
64895: PUSH
64896: LD_VAR 0 5
64900: PUSH
64901: LD_INT 2
64903: ARRAY
64904: PUSH
64905: LD_VAR 0 4
64909: ARRAY
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PPUSH
64915: CALL_OW 1
64919: ST_TO_ADDR
64920: GO 64859
64922: POP
64923: POP
// exit ;
64924: GO 64964
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64926: LD_ADDR_VAR 0 3
64930: PUSH
64931: LD_VAR 0 5
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PUSH
64940: LD_INT 1
64942: ARRAY
64943: PUSH
64944: LD_VAR 0 5
64948: PUSH
64949: LD_INT 2
64951: ARRAY
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: ST_TO_ADDR
// end ;
64964: LD_VAR 0 3
64968: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64969: LD_INT 0
64971: PPUSH
64972: PPUSH
// list := AreaToList ( area , 0 ) ;
64973: LD_ADDR_VAR 0 4
64977: PUSH
64978: LD_VAR 0 1
64982: PPUSH
64983: LD_INT 0
64985: PPUSH
64986: CALL_OW 517
64990: ST_TO_ADDR
// if not list then
64991: LD_VAR 0 4
64995: NOT
64996: IFFALSE 65000
// exit ;
64998: GO 65041
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65000: LD_ADDR_VAR 0 3
65004: PUSH
65005: LD_VAR 0 4
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PUSH
65018: LD_VAR 0 4
65022: PUSH
65023: LD_INT 2
65025: ARRAY
65026: PUSH
65027: LD_INT 1
65029: ARRAY
65030: PUSH
65031: LD_VAR 0 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// end ;
65041: LD_VAR 0 3
65045: RET
// export function First ( array ) ; begin
65046: LD_INT 0
65048: PPUSH
// if not array then
65049: LD_VAR 0 1
65053: NOT
65054: IFFALSE 65058
// exit ;
65056: GO 65072
// result := array [ 1 ] ;
65058: LD_ADDR_VAR 0 2
65062: PUSH
65063: LD_VAR 0 1
65067: PUSH
65068: LD_INT 1
65070: ARRAY
65071: ST_TO_ADDR
// end ;
65072: LD_VAR 0 2
65076: RET
// export function Last ( array ) ; begin
65077: LD_INT 0
65079: PPUSH
// if not array then
65080: LD_VAR 0 1
65084: NOT
65085: IFFALSE 65089
// exit ;
65087: GO 65105
// result := array [ array ] ;
65089: LD_ADDR_VAR 0 2
65093: PUSH
65094: LD_VAR 0 1
65098: PUSH
65099: LD_VAR 0 1
65103: ARRAY
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 2
65109: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65110: LD_INT 0
65112: PPUSH
65113: PPUSH
// result := [ ] ;
65114: LD_ADDR_VAR 0 5
65118: PUSH
65119: EMPTY
65120: ST_TO_ADDR
// if not array then
65121: LD_VAR 0 1
65125: NOT
65126: IFFALSE 65130
// exit ;
65128: GO 65242
// for i := 1 to array do
65130: LD_ADDR_VAR 0 6
65134: PUSH
65135: DOUBLE
65136: LD_INT 1
65138: DEC
65139: ST_TO_ADDR
65140: LD_VAR 0 1
65144: PUSH
65145: FOR_TO
65146: IFFALSE 65240
// if array [ i ] [ index ] = value then
65148: LD_VAR 0 1
65152: PUSH
65153: LD_VAR 0 6
65157: ARRAY
65158: PUSH
65159: LD_VAR 0 2
65163: ARRAY
65164: PUSH
65165: LD_VAR 0 3
65169: EQUAL
65170: IFFALSE 65238
// begin if indexColumn then
65172: LD_VAR 0 4
65176: IFFALSE 65212
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65178: LD_ADDR_VAR 0 5
65182: PUSH
65183: LD_VAR 0 5
65187: PPUSH
65188: LD_VAR 0 1
65192: PUSH
65193: LD_VAR 0 6
65197: ARRAY
65198: PUSH
65199: LD_VAR 0 4
65203: ARRAY
65204: PPUSH
65205: CALL 60250 0 2
65209: ST_TO_ADDR
65210: GO 65238
// result := Join ( result , array [ i ] ) ;
65212: LD_ADDR_VAR 0 5
65216: PUSH
65217: LD_VAR 0 5
65221: PPUSH
65222: LD_VAR 0 1
65226: PUSH
65227: LD_VAR 0 6
65231: ARRAY
65232: PPUSH
65233: CALL 60250 0 2
65237: ST_TO_ADDR
// end ;
65238: GO 65145
65240: POP
65241: POP
// end ;
65242: LD_VAR 0 5
65246: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65247: LD_INT 0
65249: PPUSH
// if not vehicles or not parkingPoint then
65250: LD_VAR 0 1
65254: NOT
65255: IFTRUE 65264
65257: PUSH
65258: LD_VAR 0 2
65262: NOT
65263: OR
65264: IFFALSE 65268
// exit ;
65266: GO 65366
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65268: LD_ADDR_VAR 0 1
65272: PUSH
65273: LD_VAR 0 1
65277: PPUSH
65278: LD_INT 50
65280: PUSH
65281: EMPTY
65282: LIST
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: LD_INT 92
65289: PUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_INT 1
65297: ARRAY
65298: PUSH
65299: LD_VAR 0 2
65303: PUSH
65304: LD_INT 2
65306: ARRAY
65307: PUSH
65308: LD_INT 8
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PPUSH
65325: CALL_OW 72
65329: ST_TO_ADDR
// if not vehicles then
65330: LD_VAR 0 1
65334: NOT
65335: IFFALSE 65339
// exit ;
65337: GO 65366
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65339: LD_VAR 0 1
65343: PPUSH
65344: LD_VAR 0 2
65348: PUSH
65349: LD_INT 1
65351: ARRAY
65352: PPUSH
65353: LD_VAR 0 2
65357: PUSH
65358: LD_INT 2
65360: ARRAY
65361: PPUSH
65362: CALL_OW 111
// end ;
65366: LD_VAR 0 3
65370: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65371: LD_INT 0
65373: PPUSH
65374: PPUSH
65375: PPUSH
// if not side or not area then
65376: LD_VAR 0 1
65380: NOT
65381: IFTRUE 65390
65383: PUSH
65384: LD_VAR 0 2
65388: NOT
65389: OR
65390: IFFALSE 65394
// exit ;
65392: GO 65513
// tmp := AreaToList ( area , 0 ) ;
65394: LD_ADDR_VAR 0 5
65398: PUSH
65399: LD_VAR 0 2
65403: PPUSH
65404: LD_INT 0
65406: PPUSH
65407: CALL_OW 517
65411: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65412: LD_ADDR_VAR 0 4
65416: PUSH
65417: DOUBLE
65418: LD_INT 1
65420: DEC
65421: ST_TO_ADDR
65422: LD_VAR 0 5
65426: PUSH
65427: LD_INT 1
65429: ARRAY
65430: PUSH
65431: FOR_TO
65432: IFFALSE 65511
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65434: LD_VAR 0 5
65438: PUSH
65439: LD_INT 1
65441: ARRAY
65442: PUSH
65443: LD_VAR 0 4
65447: ARRAY
65448: PPUSH
65449: LD_VAR 0 5
65453: PUSH
65454: LD_INT 2
65456: ARRAY
65457: PUSH
65458: LD_VAR 0 4
65462: ARRAY
65463: PPUSH
65464: CALL_OW 351
65468: IFFALSE 65509
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65470: LD_VAR 0 5
65474: PUSH
65475: LD_INT 1
65477: ARRAY
65478: PUSH
65479: LD_VAR 0 4
65483: ARRAY
65484: PPUSH
65485: LD_VAR 0 5
65489: PUSH
65490: LD_INT 2
65492: ARRAY
65493: PUSH
65494: LD_VAR 0 4
65498: ARRAY
65499: PPUSH
65500: LD_VAR 0 1
65504: PPUSH
65505: CALL_OW 244
// end ;
65509: GO 65431
65511: POP
65512: POP
// end ;
65513: LD_VAR 0 3
65517: RET
// export function UniqueArray ( array ) ; var i ; begin
65518: LD_INT 0
65520: PPUSH
65521: PPUSH
// result := [ ] ;
65522: LD_ADDR_VAR 0 2
65526: PUSH
65527: EMPTY
65528: ST_TO_ADDR
// if not array then
65529: LD_VAR 0 1
65533: NOT
65534: IFFALSE 65538
// exit ;
65536: GO 65599
// for i := 1 to array do
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: DOUBLE
65544: LD_INT 1
65546: DEC
65547: ST_TO_ADDR
65548: LD_VAR 0 1
65552: PUSH
65553: FOR_TO
65554: IFFALSE 65597
// if not array [ i ] in result then
65556: LD_VAR 0 1
65560: PUSH
65561: LD_VAR 0 3
65565: ARRAY
65566: PUSH
65567: LD_VAR 0 2
65571: IN
65572: NOT
65573: IFFALSE 65595
// result := Join ( result , i ) ;
65575: LD_ADDR_VAR 0 2
65579: PUSH
65580: LD_VAR 0 2
65584: PPUSH
65585: LD_VAR 0 3
65589: PPUSH
65590: CALL 60250 0 2
65594: ST_TO_ADDR
65595: GO 65553
65597: POP
65598: POP
// end ; end_of_file
65599: LD_VAR 0 2
65603: RET
// export globalGameSaveCounter ; every 0 0$1 do
65604: GO 65606
65606: DISABLE
// begin enable ;
65607: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65608: LD_STRING updateTimer(
65610: PUSH
65611: LD_OWVAR 1
65615: STR
65616: PUSH
65617: LD_STRING );
65619: STR
65620: PPUSH
65621: CALL_OW 559
// end ;
65625: END
// every 0 0$1 do
65626: GO 65628
65628: DISABLE
// begin globalGameSaveCounter := 0 ;
65629: LD_ADDR_EXP 64
65633: PUSH
65634: LD_INT 0
65636: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
65637: LD_STRING setGameSaveCounter(0)
65639: PPUSH
65640: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
65644: LD_STRING initStreamRollete();
65646: PPUSH
65647: CALL_OW 559
// InitStreamMode ;
65651: CALL 67003 0 0
// DefineStreamItems ( false ) ;
65655: LD_INT 0
65657: PPUSH
65658: CALL 67467 0 1
// end ;
65662: END
// export function SOS_MapStart ( ) ; begin
65663: LD_INT 0
65665: PPUSH
// if streamModeActive then
65666: LD_EXP 65
65670: IFFALSE 65679
// DefineStreamItems ( true ) ;
65672: LD_INT 1
65674: PPUSH
65675: CALL 67467 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
65679: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
65681: PPUSH
65682: CALL_OW 559
// UpdateLuaVariables ( ) ;
65686: CALL 65703 0 0
// UpdateFactoryWaypoints ( ) ;
65690: CALL 80589 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65694: CALL 80841 0 0
// end ;
65698: LD_VAR 0 1
65702: RET
// function UpdateLuaVariables ( ) ; begin
65703: LD_INT 0
65705: PPUSH
// if globalGameSaveCounter then
65706: LD_EXP 64
65710: IFFALSE 65744
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
65712: LD_ADDR_EXP 64
65716: PUSH
65717: LD_EXP 64
65721: PPUSH
65722: CALL 61623 0 1
65726: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65727: LD_STRING setGameSaveCounter(
65729: PUSH
65730: LD_EXP 64
65734: STR
65735: PUSH
65736: LD_STRING )
65738: STR
65739: PPUSH
65740: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65744: LD_STRING setGameDifficulty(
65746: PUSH
65747: LD_OWVAR 67
65751: STR
65752: PUSH
65753: LD_STRING )
65755: STR
65756: PPUSH
65757: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65761: LD_STRING displayDifficulty(
65763: PUSH
65764: LD_OWVAR 67
65768: STR
65769: PUSH
65770: LD_STRING )
65772: STR
65773: PPUSH
65774: CALL_OW 559
// end ;
65778: LD_VAR 0 1
65782: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65783: LD_INT 0
65785: PPUSH
// if p2 = stream_mode then
65786: LD_VAR 0 2
65790: PUSH
65791: LD_INT 100
65793: EQUAL
65794: IFFALSE 66797
// begin if not StreamModeActive then
65796: LD_EXP 65
65800: NOT
65801: IFFALSE 65811
// StreamModeActive := true ;
65803: LD_ADDR_EXP 65
65807: PUSH
65808: LD_INT 1
65810: ST_TO_ADDR
// if p3 = 0 then
65811: LD_VAR 0 3
65815: PUSH
65816: LD_INT 0
65818: EQUAL
65819: IFFALSE 65825
// InitStreamMode ;
65821: CALL 67003 0 0
// if p3 = 1 then
65825: LD_VAR 0 3
65829: PUSH
65830: LD_INT 1
65832: EQUAL
65833: IFFALSE 65843
// sRocket := true ;
65835: LD_ADDR_EXP 70
65839: PUSH
65840: LD_INT 1
65842: ST_TO_ADDR
// if p3 = 2 then
65843: LD_VAR 0 3
65847: PUSH
65848: LD_INT 2
65850: EQUAL
65851: IFFALSE 65861
// sSpeed := true ;
65853: LD_ADDR_EXP 69
65857: PUSH
65858: LD_INT 1
65860: ST_TO_ADDR
// if p3 = 3 then
65861: LD_VAR 0 3
65865: PUSH
65866: LD_INT 3
65868: EQUAL
65869: IFFALSE 65879
// sEngine := true ;
65871: LD_ADDR_EXP 71
65875: PUSH
65876: LD_INT 1
65878: ST_TO_ADDR
// if p3 = 4 then
65879: LD_VAR 0 3
65883: PUSH
65884: LD_INT 4
65886: EQUAL
65887: IFFALSE 65897
// sSpec := true ;
65889: LD_ADDR_EXP 68
65893: PUSH
65894: LD_INT 1
65896: ST_TO_ADDR
// if p3 = 5 then
65897: LD_VAR 0 3
65901: PUSH
65902: LD_INT 5
65904: EQUAL
65905: IFFALSE 65915
// sLevel := true ;
65907: LD_ADDR_EXP 72
65911: PUSH
65912: LD_INT 1
65914: ST_TO_ADDR
// if p3 = 6 then
65915: LD_VAR 0 3
65919: PUSH
65920: LD_INT 6
65922: EQUAL
65923: IFFALSE 65933
// sArmoury := true ;
65925: LD_ADDR_EXP 73
65929: PUSH
65930: LD_INT 1
65932: ST_TO_ADDR
// if p3 = 7 then
65933: LD_VAR 0 3
65937: PUSH
65938: LD_INT 7
65940: EQUAL
65941: IFFALSE 65951
// sRadar := true ;
65943: LD_ADDR_EXP 74
65947: PUSH
65948: LD_INT 1
65950: ST_TO_ADDR
// if p3 = 8 then
65951: LD_VAR 0 3
65955: PUSH
65956: LD_INT 8
65958: EQUAL
65959: IFFALSE 65969
// sBunker := true ;
65961: LD_ADDR_EXP 75
65965: PUSH
65966: LD_INT 1
65968: ST_TO_ADDR
// if p3 = 9 then
65969: LD_VAR 0 3
65973: PUSH
65974: LD_INT 9
65976: EQUAL
65977: IFFALSE 65987
// sHack := true ;
65979: LD_ADDR_EXP 76
65983: PUSH
65984: LD_INT 1
65986: ST_TO_ADDR
// if p3 = 10 then
65987: LD_VAR 0 3
65991: PUSH
65992: LD_INT 10
65994: EQUAL
65995: IFFALSE 66005
// sFire := true ;
65997: LD_ADDR_EXP 77
66001: PUSH
66002: LD_INT 1
66004: ST_TO_ADDR
// if p3 = 11 then
66005: LD_VAR 0 3
66009: PUSH
66010: LD_INT 11
66012: EQUAL
66013: IFFALSE 66023
// sRefresh := true ;
66015: LD_ADDR_EXP 78
66019: PUSH
66020: LD_INT 1
66022: ST_TO_ADDR
// if p3 = 12 then
66023: LD_VAR 0 3
66027: PUSH
66028: LD_INT 12
66030: EQUAL
66031: IFFALSE 66041
// sExp := true ;
66033: LD_ADDR_EXP 79
66037: PUSH
66038: LD_INT 1
66040: ST_TO_ADDR
// if p3 = 13 then
66041: LD_VAR 0 3
66045: PUSH
66046: LD_INT 13
66048: EQUAL
66049: IFFALSE 66059
// sDepot := true ;
66051: LD_ADDR_EXP 80
66055: PUSH
66056: LD_INT 1
66058: ST_TO_ADDR
// if p3 = 14 then
66059: LD_VAR 0 3
66063: PUSH
66064: LD_INT 14
66066: EQUAL
66067: IFFALSE 66077
// sFlag := true ;
66069: LD_ADDR_EXP 81
66073: PUSH
66074: LD_INT 1
66076: ST_TO_ADDR
// if p3 = 15 then
66077: LD_VAR 0 3
66081: PUSH
66082: LD_INT 15
66084: EQUAL
66085: IFFALSE 66095
// sKamikadze := true ;
66087: LD_ADDR_EXP 89
66091: PUSH
66092: LD_INT 1
66094: ST_TO_ADDR
// if p3 = 16 then
66095: LD_VAR 0 3
66099: PUSH
66100: LD_INT 16
66102: EQUAL
66103: IFFALSE 66113
// sTroll := true ;
66105: LD_ADDR_EXP 90
66109: PUSH
66110: LD_INT 1
66112: ST_TO_ADDR
// if p3 = 17 then
66113: LD_VAR 0 3
66117: PUSH
66118: LD_INT 17
66120: EQUAL
66121: IFFALSE 66131
// sSlow := true ;
66123: LD_ADDR_EXP 91
66127: PUSH
66128: LD_INT 1
66130: ST_TO_ADDR
// if p3 = 18 then
66131: LD_VAR 0 3
66135: PUSH
66136: LD_INT 18
66138: EQUAL
66139: IFFALSE 66149
// sLack := true ;
66141: LD_ADDR_EXP 92
66145: PUSH
66146: LD_INT 1
66148: ST_TO_ADDR
// if p3 = 19 then
66149: LD_VAR 0 3
66153: PUSH
66154: LD_INT 19
66156: EQUAL
66157: IFFALSE 66167
// sTank := true ;
66159: LD_ADDR_EXP 94
66163: PUSH
66164: LD_INT 1
66166: ST_TO_ADDR
// if p3 = 20 then
66167: LD_VAR 0 3
66171: PUSH
66172: LD_INT 20
66174: EQUAL
66175: IFFALSE 66185
// sRemote := true ;
66177: LD_ADDR_EXP 95
66181: PUSH
66182: LD_INT 1
66184: ST_TO_ADDR
// if p3 = 21 then
66185: LD_VAR 0 3
66189: PUSH
66190: LD_INT 21
66192: EQUAL
66193: IFFALSE 66203
// sPowell := true ;
66195: LD_ADDR_EXP 96
66199: PUSH
66200: LD_INT 1
66202: ST_TO_ADDR
// if p3 = 22 then
66203: LD_VAR 0 3
66207: PUSH
66208: LD_INT 22
66210: EQUAL
66211: IFFALSE 66221
// sTeleport := true ;
66213: LD_ADDR_EXP 99
66217: PUSH
66218: LD_INT 1
66220: ST_TO_ADDR
// if p3 = 23 then
66221: LD_VAR 0 3
66225: PUSH
66226: LD_INT 23
66228: EQUAL
66229: IFFALSE 66239
// sOilTower := true ;
66231: LD_ADDR_EXP 101
66235: PUSH
66236: LD_INT 1
66238: ST_TO_ADDR
// if p3 = 24 then
66239: LD_VAR 0 3
66243: PUSH
66244: LD_INT 24
66246: EQUAL
66247: IFFALSE 66257
// sShovel := true ;
66249: LD_ADDR_EXP 102
66253: PUSH
66254: LD_INT 1
66256: ST_TO_ADDR
// if p3 = 25 then
66257: LD_VAR 0 3
66261: PUSH
66262: LD_INT 25
66264: EQUAL
66265: IFFALSE 66275
// sSheik := true ;
66267: LD_ADDR_EXP 103
66271: PUSH
66272: LD_INT 1
66274: ST_TO_ADDR
// if p3 = 26 then
66275: LD_VAR 0 3
66279: PUSH
66280: LD_INT 26
66282: EQUAL
66283: IFFALSE 66293
// sEarthquake := true ;
66285: LD_ADDR_EXP 105
66289: PUSH
66290: LD_INT 1
66292: ST_TO_ADDR
// if p3 = 27 then
66293: LD_VAR 0 3
66297: PUSH
66298: LD_INT 27
66300: EQUAL
66301: IFFALSE 66311
// sAI := true ;
66303: LD_ADDR_EXP 106
66307: PUSH
66308: LD_INT 1
66310: ST_TO_ADDR
// if p3 = 28 then
66311: LD_VAR 0 3
66315: PUSH
66316: LD_INT 28
66318: EQUAL
66319: IFFALSE 66329
// sCargo := true ;
66321: LD_ADDR_EXP 109
66325: PUSH
66326: LD_INT 1
66328: ST_TO_ADDR
// if p3 = 29 then
66329: LD_VAR 0 3
66333: PUSH
66334: LD_INT 29
66336: EQUAL
66337: IFFALSE 66347
// sDLaser := true ;
66339: LD_ADDR_EXP 110
66343: PUSH
66344: LD_INT 1
66346: ST_TO_ADDR
// if p3 = 30 then
66347: LD_VAR 0 3
66351: PUSH
66352: LD_INT 30
66354: EQUAL
66355: IFFALSE 66365
// sExchange := true ;
66357: LD_ADDR_EXP 111
66361: PUSH
66362: LD_INT 1
66364: ST_TO_ADDR
// if p3 = 31 then
66365: LD_VAR 0 3
66369: PUSH
66370: LD_INT 31
66372: EQUAL
66373: IFFALSE 66383
// sFac := true ;
66375: LD_ADDR_EXP 112
66379: PUSH
66380: LD_INT 1
66382: ST_TO_ADDR
// if p3 = 32 then
66383: LD_VAR 0 3
66387: PUSH
66388: LD_INT 32
66390: EQUAL
66391: IFFALSE 66401
// sPower := true ;
66393: LD_ADDR_EXP 113
66397: PUSH
66398: LD_INT 1
66400: ST_TO_ADDR
// if p3 = 33 then
66401: LD_VAR 0 3
66405: PUSH
66406: LD_INT 33
66408: EQUAL
66409: IFFALSE 66419
// sRandom := true ;
66411: LD_ADDR_EXP 114
66415: PUSH
66416: LD_INT 1
66418: ST_TO_ADDR
// if p3 = 34 then
66419: LD_VAR 0 3
66423: PUSH
66424: LD_INT 34
66426: EQUAL
66427: IFFALSE 66437
// sShield := true ;
66429: LD_ADDR_EXP 115
66433: PUSH
66434: LD_INT 1
66436: ST_TO_ADDR
// if p3 = 35 then
66437: LD_VAR 0 3
66441: PUSH
66442: LD_INT 35
66444: EQUAL
66445: IFFALSE 66455
// sTime := true ;
66447: LD_ADDR_EXP 116
66451: PUSH
66452: LD_INT 1
66454: ST_TO_ADDR
// if p3 = 36 then
66455: LD_VAR 0 3
66459: PUSH
66460: LD_INT 36
66462: EQUAL
66463: IFFALSE 66473
// sTools := true ;
66465: LD_ADDR_EXP 117
66469: PUSH
66470: LD_INT 1
66472: ST_TO_ADDR
// if p3 = 101 then
66473: LD_VAR 0 3
66477: PUSH
66478: LD_INT 101
66480: EQUAL
66481: IFFALSE 66491
// sSold := true ;
66483: LD_ADDR_EXP 82
66487: PUSH
66488: LD_INT 1
66490: ST_TO_ADDR
// if p3 = 102 then
66491: LD_VAR 0 3
66495: PUSH
66496: LD_INT 102
66498: EQUAL
66499: IFFALSE 66509
// sDiff := true ;
66501: LD_ADDR_EXP 83
66505: PUSH
66506: LD_INT 1
66508: ST_TO_ADDR
// if p3 = 103 then
66509: LD_VAR 0 3
66513: PUSH
66514: LD_INT 103
66516: EQUAL
66517: IFFALSE 66527
// sFog := true ;
66519: LD_ADDR_EXP 86
66523: PUSH
66524: LD_INT 1
66526: ST_TO_ADDR
// if p3 = 104 then
66527: LD_VAR 0 3
66531: PUSH
66532: LD_INT 104
66534: EQUAL
66535: IFFALSE 66545
// sReset := true ;
66537: LD_ADDR_EXP 87
66541: PUSH
66542: LD_INT 1
66544: ST_TO_ADDR
// if p3 = 105 then
66545: LD_VAR 0 3
66549: PUSH
66550: LD_INT 105
66552: EQUAL
66553: IFFALSE 66563
// sSun := true ;
66555: LD_ADDR_EXP 88
66559: PUSH
66560: LD_INT 1
66562: ST_TO_ADDR
// if p3 = 106 then
66563: LD_VAR 0 3
66567: PUSH
66568: LD_INT 106
66570: EQUAL
66571: IFFALSE 66581
// sTiger := true ;
66573: LD_ADDR_EXP 84
66577: PUSH
66578: LD_INT 1
66580: ST_TO_ADDR
// if p3 = 107 then
66581: LD_VAR 0 3
66585: PUSH
66586: LD_INT 107
66588: EQUAL
66589: IFFALSE 66599
// sBomb := true ;
66591: LD_ADDR_EXP 85
66595: PUSH
66596: LD_INT 1
66598: ST_TO_ADDR
// if p3 = 108 then
66599: LD_VAR 0 3
66603: PUSH
66604: LD_INT 108
66606: EQUAL
66607: IFFALSE 66617
// sWound := true ;
66609: LD_ADDR_EXP 93
66613: PUSH
66614: LD_INT 1
66616: ST_TO_ADDR
// if p3 = 109 then
66617: LD_VAR 0 3
66621: PUSH
66622: LD_INT 109
66624: EQUAL
66625: IFFALSE 66635
// sBetray := true ;
66627: LD_ADDR_EXP 97
66631: PUSH
66632: LD_INT 1
66634: ST_TO_ADDR
// if p3 = 110 then
66635: LD_VAR 0 3
66639: PUSH
66640: LD_INT 110
66642: EQUAL
66643: IFFALSE 66653
// sContamin := true ;
66645: LD_ADDR_EXP 98
66649: PUSH
66650: LD_INT 1
66652: ST_TO_ADDR
// if p3 = 111 then
66653: LD_VAR 0 3
66657: PUSH
66658: LD_INT 111
66660: EQUAL
66661: IFFALSE 66671
// sOil := true ;
66663: LD_ADDR_EXP 100
66667: PUSH
66668: LD_INT 1
66670: ST_TO_ADDR
// if p3 = 112 then
66671: LD_VAR 0 3
66675: PUSH
66676: LD_INT 112
66678: EQUAL
66679: IFFALSE 66689
// sStu := true ;
66681: LD_ADDR_EXP 104
66685: PUSH
66686: LD_INT 1
66688: ST_TO_ADDR
// if p3 = 113 then
66689: LD_VAR 0 3
66693: PUSH
66694: LD_INT 113
66696: EQUAL
66697: IFFALSE 66707
// sBazooka := true ;
66699: LD_ADDR_EXP 107
66703: PUSH
66704: LD_INT 1
66706: ST_TO_ADDR
// if p3 = 114 then
66707: LD_VAR 0 3
66711: PUSH
66712: LD_INT 114
66714: EQUAL
66715: IFFALSE 66725
// sMortar := true ;
66717: LD_ADDR_EXP 108
66721: PUSH
66722: LD_INT 1
66724: ST_TO_ADDR
// if p3 = 115 then
66725: LD_VAR 0 3
66729: PUSH
66730: LD_INT 115
66732: EQUAL
66733: IFFALSE 66743
// sRanger := true ;
66735: LD_ADDR_EXP 118
66739: PUSH
66740: LD_INT 1
66742: ST_TO_ADDR
// if p3 = 116 then
66743: LD_VAR 0 3
66747: PUSH
66748: LD_INT 116
66750: EQUAL
66751: IFFALSE 66761
// sComputer := true ;
66753: LD_ADDR_EXP 119
66757: PUSH
66758: LD_INT 1
66760: ST_TO_ADDR
// if p3 = 117 then
66761: LD_VAR 0 3
66765: PUSH
66766: LD_INT 117
66768: EQUAL
66769: IFFALSE 66779
// s30 := true ;
66771: LD_ADDR_EXP 120
66775: PUSH
66776: LD_INT 1
66778: ST_TO_ADDR
// if p3 = 118 then
66779: LD_VAR 0 3
66783: PUSH
66784: LD_INT 118
66786: EQUAL
66787: IFFALSE 66797
// s60 := true ;
66789: LD_ADDR_EXP 121
66793: PUSH
66794: LD_INT 1
66796: ST_TO_ADDR
// end ; if p2 = hack_mode then
66797: LD_VAR 0 2
66801: PUSH
66802: LD_INT 101
66804: EQUAL
66805: IFFALSE 66933
// begin case p3 of 1 :
66807: LD_VAR 0 3
66811: PUSH
66812: LD_INT 1
66814: DOUBLE
66815: EQUAL
66816: IFTRUE 66820
66818: GO 66827
66820: POP
// hHackUnlimitedResources ; 2 :
66821: CALL 79196 0 0
66825: GO 66933
66827: LD_INT 2
66829: DOUBLE
66830: EQUAL
66831: IFTRUE 66835
66833: GO 66842
66835: POP
// hHackSetLevel10 ; 3 :
66836: CALL 79329 0 0
66840: GO 66933
66842: LD_INT 3
66844: DOUBLE
66845: EQUAL
66846: IFTRUE 66850
66848: GO 66857
66850: POP
// hHackSetLevel10YourUnits ; 4 :
66851: CALL 79414 0 0
66855: GO 66933
66857: LD_INT 4
66859: DOUBLE
66860: EQUAL
66861: IFTRUE 66865
66863: GO 66872
66865: POP
// hHackInvincible ; 5 :
66866: CALL 79862 0 0
66870: GO 66933
66872: LD_INT 5
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66880
66878: GO 66887
66880: POP
// hHackInvisible ; 6 :
66881: CALL 79973 0 0
66885: GO 66933
66887: LD_INT 6
66889: DOUBLE
66890: EQUAL
66891: IFTRUE 66895
66893: GO 66902
66895: POP
// hHackChangeYourSide ; 7 :
66896: CALL 80030 0 0
66900: GO 66933
66902: LD_INT 7
66904: DOUBLE
66905: EQUAL
66906: IFTRUE 66910
66908: GO 66917
66910: POP
// hHackChangeUnitSide ; 8 :
66911: CALL 80072 0 0
66915: GO 66933
66917: LD_INT 8
66919: DOUBLE
66920: EQUAL
66921: IFTRUE 66925
66923: GO 66932
66925: POP
// hHackFog ; end ;
66926: CALL 80173 0 0
66930: GO 66933
66932: POP
// end ; if p2 = game_save_mode then
66933: LD_VAR 0 2
66937: PUSH
66938: LD_INT 102
66940: EQUAL
66941: IFFALSE 66998
// begin if p3 = 1 then
66943: LD_VAR 0 3
66947: PUSH
66948: LD_INT 1
66950: EQUAL
66951: IFFALSE 66963
// globalGameSaveCounter := p4 ;
66953: LD_ADDR_EXP 64
66957: PUSH
66958: LD_VAR 0 4
66962: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
66963: LD_VAR 0 3
66967: PUSH
66968: LD_INT 2
66970: EQUAL
66971: IFFALSE 66979
66973: PUSH
66974: LD_EXP 64
66978: AND
66979: IFFALSE 66998
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66981: LD_STRING setGameSaveCounter(
66983: PUSH
66984: LD_EXP 64
66988: STR
66989: PUSH
66990: LD_STRING )
66992: STR
66993: PPUSH
66994: CALL_OW 559
// end ; end ;
66998: LD_VAR 0 7
67002: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
67003: LD_INT 0
67005: PPUSH
// streamModeActive := false ;
67006: LD_ADDR_EXP 65
67010: PUSH
67011: LD_INT 0
67013: ST_TO_ADDR
// normalCounter := 36 ;
67014: LD_ADDR_EXP 66
67018: PUSH
67019: LD_INT 36
67021: ST_TO_ADDR
// hardcoreCounter := 18 ;
67022: LD_ADDR_EXP 67
67026: PUSH
67027: LD_INT 18
67029: ST_TO_ADDR
// sRocket := false ;
67030: LD_ADDR_EXP 70
67034: PUSH
67035: LD_INT 0
67037: ST_TO_ADDR
// sSpeed := false ;
67038: LD_ADDR_EXP 69
67042: PUSH
67043: LD_INT 0
67045: ST_TO_ADDR
// sEngine := false ;
67046: LD_ADDR_EXP 71
67050: PUSH
67051: LD_INT 0
67053: ST_TO_ADDR
// sSpec := false ;
67054: LD_ADDR_EXP 68
67058: PUSH
67059: LD_INT 0
67061: ST_TO_ADDR
// sLevel := false ;
67062: LD_ADDR_EXP 72
67066: PUSH
67067: LD_INT 0
67069: ST_TO_ADDR
// sArmoury := false ;
67070: LD_ADDR_EXP 73
67074: PUSH
67075: LD_INT 0
67077: ST_TO_ADDR
// sRadar := false ;
67078: LD_ADDR_EXP 74
67082: PUSH
67083: LD_INT 0
67085: ST_TO_ADDR
// sBunker := false ;
67086: LD_ADDR_EXP 75
67090: PUSH
67091: LD_INT 0
67093: ST_TO_ADDR
// sHack := false ;
67094: LD_ADDR_EXP 76
67098: PUSH
67099: LD_INT 0
67101: ST_TO_ADDR
// sFire := false ;
67102: LD_ADDR_EXP 77
67106: PUSH
67107: LD_INT 0
67109: ST_TO_ADDR
// sRefresh := false ;
67110: LD_ADDR_EXP 78
67114: PUSH
67115: LD_INT 0
67117: ST_TO_ADDR
// sExp := false ;
67118: LD_ADDR_EXP 79
67122: PUSH
67123: LD_INT 0
67125: ST_TO_ADDR
// sDepot := false ;
67126: LD_ADDR_EXP 80
67130: PUSH
67131: LD_INT 0
67133: ST_TO_ADDR
// sFlag := false ;
67134: LD_ADDR_EXP 81
67138: PUSH
67139: LD_INT 0
67141: ST_TO_ADDR
// sKamikadze := false ;
67142: LD_ADDR_EXP 89
67146: PUSH
67147: LD_INT 0
67149: ST_TO_ADDR
// sTroll := false ;
67150: LD_ADDR_EXP 90
67154: PUSH
67155: LD_INT 0
67157: ST_TO_ADDR
// sSlow := false ;
67158: LD_ADDR_EXP 91
67162: PUSH
67163: LD_INT 0
67165: ST_TO_ADDR
// sLack := false ;
67166: LD_ADDR_EXP 92
67170: PUSH
67171: LD_INT 0
67173: ST_TO_ADDR
// sTank := false ;
67174: LD_ADDR_EXP 94
67178: PUSH
67179: LD_INT 0
67181: ST_TO_ADDR
// sRemote := false ;
67182: LD_ADDR_EXP 95
67186: PUSH
67187: LD_INT 0
67189: ST_TO_ADDR
// sPowell := false ;
67190: LD_ADDR_EXP 96
67194: PUSH
67195: LD_INT 0
67197: ST_TO_ADDR
// sTeleport := false ;
67198: LD_ADDR_EXP 99
67202: PUSH
67203: LD_INT 0
67205: ST_TO_ADDR
// sOilTower := false ;
67206: LD_ADDR_EXP 101
67210: PUSH
67211: LD_INT 0
67213: ST_TO_ADDR
// sShovel := false ;
67214: LD_ADDR_EXP 102
67218: PUSH
67219: LD_INT 0
67221: ST_TO_ADDR
// sSheik := false ;
67222: LD_ADDR_EXP 103
67226: PUSH
67227: LD_INT 0
67229: ST_TO_ADDR
// sEarthquake := false ;
67230: LD_ADDR_EXP 105
67234: PUSH
67235: LD_INT 0
67237: ST_TO_ADDR
// sAI := false ;
67238: LD_ADDR_EXP 106
67242: PUSH
67243: LD_INT 0
67245: ST_TO_ADDR
// sCargo := false ;
67246: LD_ADDR_EXP 109
67250: PUSH
67251: LD_INT 0
67253: ST_TO_ADDR
// sDLaser := false ;
67254: LD_ADDR_EXP 110
67258: PUSH
67259: LD_INT 0
67261: ST_TO_ADDR
// sExchange := false ;
67262: LD_ADDR_EXP 111
67266: PUSH
67267: LD_INT 0
67269: ST_TO_ADDR
// sFac := false ;
67270: LD_ADDR_EXP 112
67274: PUSH
67275: LD_INT 0
67277: ST_TO_ADDR
// sPower := false ;
67278: LD_ADDR_EXP 113
67282: PUSH
67283: LD_INT 0
67285: ST_TO_ADDR
// sRandom := false ;
67286: LD_ADDR_EXP 114
67290: PUSH
67291: LD_INT 0
67293: ST_TO_ADDR
// sShield := false ;
67294: LD_ADDR_EXP 115
67298: PUSH
67299: LD_INT 0
67301: ST_TO_ADDR
// sTime := false ;
67302: LD_ADDR_EXP 116
67306: PUSH
67307: LD_INT 0
67309: ST_TO_ADDR
// sTools := false ;
67310: LD_ADDR_EXP 117
67314: PUSH
67315: LD_INT 0
67317: ST_TO_ADDR
// sSold := false ;
67318: LD_ADDR_EXP 82
67322: PUSH
67323: LD_INT 0
67325: ST_TO_ADDR
// sDiff := false ;
67326: LD_ADDR_EXP 83
67330: PUSH
67331: LD_INT 0
67333: ST_TO_ADDR
// sFog := false ;
67334: LD_ADDR_EXP 86
67338: PUSH
67339: LD_INT 0
67341: ST_TO_ADDR
// sReset := false ;
67342: LD_ADDR_EXP 87
67346: PUSH
67347: LD_INT 0
67349: ST_TO_ADDR
// sSun := false ;
67350: LD_ADDR_EXP 88
67354: PUSH
67355: LD_INT 0
67357: ST_TO_ADDR
// sTiger := false ;
67358: LD_ADDR_EXP 84
67362: PUSH
67363: LD_INT 0
67365: ST_TO_ADDR
// sBomb := false ;
67366: LD_ADDR_EXP 85
67370: PUSH
67371: LD_INT 0
67373: ST_TO_ADDR
// sWound := false ;
67374: LD_ADDR_EXP 93
67378: PUSH
67379: LD_INT 0
67381: ST_TO_ADDR
// sBetray := false ;
67382: LD_ADDR_EXP 97
67386: PUSH
67387: LD_INT 0
67389: ST_TO_ADDR
// sContamin := false ;
67390: LD_ADDR_EXP 98
67394: PUSH
67395: LD_INT 0
67397: ST_TO_ADDR
// sOil := false ;
67398: LD_ADDR_EXP 100
67402: PUSH
67403: LD_INT 0
67405: ST_TO_ADDR
// sStu := false ;
67406: LD_ADDR_EXP 104
67410: PUSH
67411: LD_INT 0
67413: ST_TO_ADDR
// sBazooka := false ;
67414: LD_ADDR_EXP 107
67418: PUSH
67419: LD_INT 0
67421: ST_TO_ADDR
// sMortar := false ;
67422: LD_ADDR_EXP 108
67426: PUSH
67427: LD_INT 0
67429: ST_TO_ADDR
// sRanger := false ;
67430: LD_ADDR_EXP 118
67434: PUSH
67435: LD_INT 0
67437: ST_TO_ADDR
// sComputer := false ;
67438: LD_ADDR_EXP 119
67442: PUSH
67443: LD_INT 0
67445: ST_TO_ADDR
// s30 := false ;
67446: LD_ADDR_EXP 120
67450: PUSH
67451: LD_INT 0
67453: ST_TO_ADDR
// s60 := false ;
67454: LD_ADDR_EXP 121
67458: PUSH
67459: LD_INT 0
67461: ST_TO_ADDR
// end ;
67462: LD_VAR 0 1
67466: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
67467: LD_INT 0
67469: PPUSH
67470: PPUSH
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
// result := [ ] ;
67476: LD_ADDR_VAR 0 2
67480: PUSH
67481: EMPTY
67482: ST_TO_ADDR
// if campaign_id = 1 then
67483: LD_OWVAR 69
67487: PUSH
67488: LD_INT 1
67490: EQUAL
67491: IFFALSE 70657
// begin case mission_number of 1 :
67493: LD_OWVAR 70
67497: PUSH
67498: LD_INT 1
67500: DOUBLE
67501: EQUAL
67502: IFTRUE 67506
67504: GO 67582
67506: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
67507: LD_ADDR_VAR 0 2
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 4
67517: PUSH
67518: LD_INT 11
67520: PUSH
67521: LD_INT 12
67523: PUSH
67524: LD_INT 15
67526: PUSH
67527: LD_INT 16
67529: PUSH
67530: LD_INT 22
67532: PUSH
67533: LD_INT 23
67535: PUSH
67536: LD_INT 26
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 101
67552: PUSH
67553: LD_INT 102
67555: PUSH
67556: LD_INT 106
67558: PUSH
67559: LD_INT 116
67561: PUSH
67562: LD_INT 117
67564: PUSH
67565: LD_INT 118
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: ST_TO_ADDR
67580: GO 70655
67582: LD_INT 2
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67590
67588: GO 67674
67590: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
67591: LD_ADDR_VAR 0 2
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 4
67601: PUSH
67602: LD_INT 11
67604: PUSH
67605: LD_INT 12
67607: PUSH
67608: LD_INT 15
67610: PUSH
67611: LD_INT 16
67613: PUSH
67614: LD_INT 22
67616: PUSH
67617: LD_INT 23
67619: PUSH
67620: LD_INT 26
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 101
67636: PUSH
67637: LD_INT 102
67639: PUSH
67640: LD_INT 105
67642: PUSH
67643: LD_INT 106
67645: PUSH
67646: LD_INT 108
67648: PUSH
67649: LD_INT 116
67651: PUSH
67652: LD_INT 117
67654: PUSH
67655: LD_INT 118
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: ST_TO_ADDR
67672: GO 70655
67674: LD_INT 3
67676: DOUBLE
67677: EQUAL
67678: IFTRUE 67682
67680: GO 67770
67682: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
67683: LD_ADDR_VAR 0 2
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: LD_INT 5
67696: PUSH
67697: LD_INT 11
67699: PUSH
67700: LD_INT 12
67702: PUSH
67703: LD_INT 15
67705: PUSH
67706: LD_INT 16
67708: PUSH
67709: LD_INT 22
67711: PUSH
67712: LD_INT 26
67714: PUSH
67715: LD_INT 36
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 101
67732: PUSH
67733: LD_INT 102
67735: PUSH
67736: LD_INT 105
67738: PUSH
67739: LD_INT 106
67741: PUSH
67742: LD_INT 108
67744: PUSH
67745: LD_INT 116
67747: PUSH
67748: LD_INT 117
67750: PUSH
67751: LD_INT 118
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: ST_TO_ADDR
67768: GO 70655
67770: LD_INT 4
67772: DOUBLE
67773: EQUAL
67774: IFTRUE 67778
67776: GO 67874
67778: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
67779: LD_ADDR_VAR 0 2
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: LD_INT 8
67795: PUSH
67796: LD_INT 11
67798: PUSH
67799: LD_INT 12
67801: PUSH
67802: LD_INT 15
67804: PUSH
67805: LD_INT 16
67807: PUSH
67808: LD_INT 22
67810: PUSH
67811: LD_INT 23
67813: PUSH
67814: LD_INT 26
67816: PUSH
67817: LD_INT 36
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 101
67836: PUSH
67837: LD_INT 102
67839: PUSH
67840: LD_INT 105
67842: PUSH
67843: LD_INT 106
67845: PUSH
67846: LD_INT 108
67848: PUSH
67849: LD_INT 116
67851: PUSH
67852: LD_INT 117
67854: PUSH
67855: LD_INT 118
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: ST_TO_ADDR
67872: GO 70655
67874: LD_INT 5
67876: DOUBLE
67877: EQUAL
67878: IFTRUE 67882
67880: GO 67994
67882: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67883: LD_ADDR_VAR 0 2
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: LD_INT 4
67893: PUSH
67894: LD_INT 5
67896: PUSH
67897: LD_INT 6
67899: PUSH
67900: LD_INT 8
67902: PUSH
67903: LD_INT 11
67905: PUSH
67906: LD_INT 12
67908: PUSH
67909: LD_INT 15
67911: PUSH
67912: LD_INT 16
67914: PUSH
67915: LD_INT 22
67917: PUSH
67918: LD_INT 23
67920: PUSH
67921: LD_INT 25
67923: PUSH
67924: LD_INT 26
67926: PUSH
67927: LD_INT 36
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 101
67948: PUSH
67949: LD_INT 102
67951: PUSH
67952: LD_INT 105
67954: PUSH
67955: LD_INT 106
67957: PUSH
67958: LD_INT 108
67960: PUSH
67961: LD_INT 109
67963: PUSH
67964: LD_INT 112
67966: PUSH
67967: LD_INT 116
67969: PUSH
67970: LD_INT 117
67972: PUSH
67973: LD_INT 118
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: ST_TO_ADDR
67992: GO 70655
67994: LD_INT 6
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68002
68000: GO 68134
68002: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68003: LD_ADDR_VAR 0 2
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: LD_INT 5
68016: PUSH
68017: LD_INT 6
68019: PUSH
68020: LD_INT 8
68022: PUSH
68023: LD_INT 11
68025: PUSH
68026: LD_INT 12
68028: PUSH
68029: LD_INT 15
68031: PUSH
68032: LD_INT 16
68034: PUSH
68035: LD_INT 20
68037: PUSH
68038: LD_INT 21
68040: PUSH
68041: LD_INT 22
68043: PUSH
68044: LD_INT 23
68046: PUSH
68047: LD_INT 25
68049: PUSH
68050: LD_INT 26
68052: PUSH
68053: LD_INT 30
68055: PUSH
68056: LD_INT 31
68058: PUSH
68059: LD_INT 32
68061: PUSH
68062: LD_INT 36
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 101
68088: PUSH
68089: LD_INT 102
68091: PUSH
68092: LD_INT 105
68094: PUSH
68095: LD_INT 106
68097: PUSH
68098: LD_INT 108
68100: PUSH
68101: LD_INT 109
68103: PUSH
68104: LD_INT 112
68106: PUSH
68107: LD_INT 116
68109: PUSH
68110: LD_INT 117
68112: PUSH
68113: LD_INT 118
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: ST_TO_ADDR
68132: GO 70655
68134: LD_INT 7
68136: DOUBLE
68137: EQUAL
68138: IFTRUE 68142
68140: GO 68254
68142: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68143: LD_ADDR_VAR 0 2
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: LD_INT 5
68156: PUSH
68157: LD_INT 7
68159: PUSH
68160: LD_INT 11
68162: PUSH
68163: LD_INT 12
68165: PUSH
68166: LD_INT 15
68168: PUSH
68169: LD_INT 16
68171: PUSH
68172: LD_INT 20
68174: PUSH
68175: LD_INT 21
68177: PUSH
68178: LD_INT 22
68180: PUSH
68181: LD_INT 23
68183: PUSH
68184: LD_INT 25
68186: PUSH
68187: LD_INT 26
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 101
68208: PUSH
68209: LD_INT 102
68211: PUSH
68212: LD_INT 103
68214: PUSH
68215: LD_INT 105
68217: PUSH
68218: LD_INT 106
68220: PUSH
68221: LD_INT 108
68223: PUSH
68224: LD_INT 112
68226: PUSH
68227: LD_INT 116
68229: PUSH
68230: LD_INT 117
68232: PUSH
68233: LD_INT 118
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: ST_TO_ADDR
68252: GO 70655
68254: LD_INT 8
68256: DOUBLE
68257: EQUAL
68258: IFTRUE 68262
68260: GO 68402
68262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
68263: LD_ADDR_VAR 0 2
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: LD_INT 4
68273: PUSH
68274: LD_INT 5
68276: PUSH
68277: LD_INT 6
68279: PUSH
68280: LD_INT 7
68282: PUSH
68283: LD_INT 8
68285: PUSH
68286: LD_INT 11
68288: PUSH
68289: LD_INT 12
68291: PUSH
68292: LD_INT 15
68294: PUSH
68295: LD_INT 16
68297: PUSH
68298: LD_INT 20
68300: PUSH
68301: LD_INT 21
68303: PUSH
68304: LD_INT 22
68306: PUSH
68307: LD_INT 23
68309: PUSH
68310: LD_INT 25
68312: PUSH
68313: LD_INT 26
68315: PUSH
68316: LD_INT 30
68318: PUSH
68319: LD_INT 31
68321: PUSH
68322: LD_INT 32
68324: PUSH
68325: LD_INT 36
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 101
68352: PUSH
68353: LD_INT 102
68355: PUSH
68356: LD_INT 103
68358: PUSH
68359: LD_INT 105
68361: PUSH
68362: LD_INT 106
68364: PUSH
68365: LD_INT 108
68367: PUSH
68368: LD_INT 109
68370: PUSH
68371: LD_INT 112
68373: PUSH
68374: LD_INT 116
68376: PUSH
68377: LD_INT 117
68379: PUSH
68380: LD_INT 118
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: ST_TO_ADDR
68400: GO 70655
68402: LD_INT 9
68404: DOUBLE
68405: EQUAL
68406: IFTRUE 68410
68408: GO 68558
68410: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
68411: LD_ADDR_VAR 0 2
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: LD_INT 5
68424: PUSH
68425: LD_INT 6
68427: PUSH
68428: LD_INT 7
68430: PUSH
68431: LD_INT 8
68433: PUSH
68434: LD_INT 11
68436: PUSH
68437: LD_INT 12
68439: PUSH
68440: LD_INT 15
68442: PUSH
68443: LD_INT 16
68445: PUSH
68446: LD_INT 20
68448: PUSH
68449: LD_INT 21
68451: PUSH
68452: LD_INT 22
68454: PUSH
68455: LD_INT 23
68457: PUSH
68458: LD_INT 25
68460: PUSH
68461: LD_INT 26
68463: PUSH
68464: LD_INT 28
68466: PUSH
68467: LD_INT 30
68469: PUSH
68470: LD_INT 31
68472: PUSH
68473: LD_INT 32
68475: PUSH
68476: LD_INT 36
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 101
68504: PUSH
68505: LD_INT 102
68507: PUSH
68508: LD_INT 103
68510: PUSH
68511: LD_INT 105
68513: PUSH
68514: LD_INT 106
68516: PUSH
68517: LD_INT 108
68519: PUSH
68520: LD_INT 109
68522: PUSH
68523: LD_INT 112
68525: PUSH
68526: LD_INT 114
68528: PUSH
68529: LD_INT 116
68531: PUSH
68532: LD_INT 117
68534: PUSH
68535: LD_INT 118
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: ST_TO_ADDR
68556: GO 70655
68558: LD_INT 10
68560: DOUBLE
68561: EQUAL
68562: IFTRUE 68566
68564: GO 68762
68566: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: LD_INT 5
68580: PUSH
68581: LD_INT 6
68583: PUSH
68584: LD_INT 7
68586: PUSH
68587: LD_INT 8
68589: PUSH
68590: LD_INT 9
68592: PUSH
68593: LD_INT 10
68595: PUSH
68596: LD_INT 11
68598: PUSH
68599: LD_INT 12
68601: PUSH
68602: LD_INT 13
68604: PUSH
68605: LD_INT 14
68607: PUSH
68608: LD_INT 15
68610: PUSH
68611: LD_INT 16
68613: PUSH
68614: LD_INT 17
68616: PUSH
68617: LD_INT 18
68619: PUSH
68620: LD_INT 19
68622: PUSH
68623: LD_INT 20
68625: PUSH
68626: LD_INT 21
68628: PUSH
68629: LD_INT 22
68631: PUSH
68632: LD_INT 23
68634: PUSH
68635: LD_INT 24
68637: PUSH
68638: LD_INT 25
68640: PUSH
68641: LD_INT 26
68643: PUSH
68644: LD_INT 28
68646: PUSH
68647: LD_INT 30
68649: PUSH
68650: LD_INT 31
68652: PUSH
68653: LD_INT 32
68655: PUSH
68656: LD_INT 36
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 101
68692: PUSH
68693: LD_INT 102
68695: PUSH
68696: LD_INT 103
68698: PUSH
68699: LD_INT 104
68701: PUSH
68702: LD_INT 105
68704: PUSH
68705: LD_INT 106
68707: PUSH
68708: LD_INT 107
68710: PUSH
68711: LD_INT 108
68713: PUSH
68714: LD_INT 109
68716: PUSH
68717: LD_INT 110
68719: PUSH
68720: LD_INT 111
68722: PUSH
68723: LD_INT 112
68725: PUSH
68726: LD_INT 114
68728: PUSH
68729: LD_INT 116
68731: PUSH
68732: LD_INT 117
68734: PUSH
68735: LD_INT 118
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: ST_TO_ADDR
68760: GO 70655
68762: LD_INT 11
68764: DOUBLE
68765: EQUAL
68766: IFTRUE 68770
68768: GO 68974
68770: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
68771: LD_ADDR_VAR 0 2
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 4
68784: PUSH
68785: LD_INT 5
68787: PUSH
68788: LD_INT 6
68790: PUSH
68791: LD_INT 7
68793: PUSH
68794: LD_INT 8
68796: PUSH
68797: LD_INT 9
68799: PUSH
68800: LD_INT 10
68802: PUSH
68803: LD_INT 11
68805: PUSH
68806: LD_INT 12
68808: PUSH
68809: LD_INT 13
68811: PUSH
68812: LD_INT 14
68814: PUSH
68815: LD_INT 15
68817: PUSH
68818: LD_INT 16
68820: PUSH
68821: LD_INT 17
68823: PUSH
68824: LD_INT 18
68826: PUSH
68827: LD_INT 19
68829: PUSH
68830: LD_INT 20
68832: PUSH
68833: LD_INT 21
68835: PUSH
68836: LD_INT 22
68838: PUSH
68839: LD_INT 23
68841: PUSH
68842: LD_INT 24
68844: PUSH
68845: LD_INT 25
68847: PUSH
68848: LD_INT 26
68850: PUSH
68851: LD_INT 28
68853: PUSH
68854: LD_INT 30
68856: PUSH
68857: LD_INT 31
68859: PUSH
68860: LD_INT 32
68862: PUSH
68863: LD_INT 34
68865: PUSH
68866: LD_INT 36
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 101
68904: PUSH
68905: LD_INT 102
68907: PUSH
68908: LD_INT 103
68910: PUSH
68911: LD_INT 104
68913: PUSH
68914: LD_INT 105
68916: PUSH
68917: LD_INT 106
68919: PUSH
68920: LD_INT 107
68922: PUSH
68923: LD_INT 108
68925: PUSH
68926: LD_INT 109
68928: PUSH
68929: LD_INT 110
68931: PUSH
68932: LD_INT 111
68934: PUSH
68935: LD_INT 112
68937: PUSH
68938: LD_INT 114
68940: PUSH
68941: LD_INT 116
68943: PUSH
68944: LD_INT 117
68946: PUSH
68947: LD_INT 118
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: ST_TO_ADDR
68972: GO 70655
68974: LD_INT 12
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 68982
68980: GO 69202
68982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68983: LD_ADDR_VAR 0 2
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: LD_INT 2
68993: PUSH
68994: LD_INT 3
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: LD_INT 5
69002: PUSH
69003: LD_INT 6
69005: PUSH
69006: LD_INT 7
69008: PUSH
69009: LD_INT 8
69011: PUSH
69012: LD_INT 9
69014: PUSH
69015: LD_INT 10
69017: PUSH
69018: LD_INT 11
69020: PUSH
69021: LD_INT 12
69023: PUSH
69024: LD_INT 13
69026: PUSH
69027: LD_INT 14
69029: PUSH
69030: LD_INT 15
69032: PUSH
69033: LD_INT 16
69035: PUSH
69036: LD_INT 17
69038: PUSH
69039: LD_INT 18
69041: PUSH
69042: LD_INT 19
69044: PUSH
69045: LD_INT 20
69047: PUSH
69048: LD_INT 21
69050: PUSH
69051: LD_INT 22
69053: PUSH
69054: LD_INT 23
69056: PUSH
69057: LD_INT 24
69059: PUSH
69060: LD_INT 25
69062: PUSH
69063: LD_INT 26
69065: PUSH
69066: LD_INT 27
69068: PUSH
69069: LD_INT 28
69071: PUSH
69072: LD_INT 30
69074: PUSH
69075: LD_INT 31
69077: PUSH
69078: LD_INT 32
69080: PUSH
69081: LD_INT 33
69083: PUSH
69084: LD_INT 34
69086: PUSH
69087: LD_INT 36
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 101
69128: PUSH
69129: LD_INT 102
69131: PUSH
69132: LD_INT 103
69134: PUSH
69135: LD_INT 104
69137: PUSH
69138: LD_INT 105
69140: PUSH
69141: LD_INT 106
69143: PUSH
69144: LD_INT 107
69146: PUSH
69147: LD_INT 108
69149: PUSH
69150: LD_INT 109
69152: PUSH
69153: LD_INT 110
69155: PUSH
69156: LD_INT 111
69158: PUSH
69159: LD_INT 112
69161: PUSH
69162: LD_INT 113
69164: PUSH
69165: LD_INT 114
69167: PUSH
69168: LD_INT 116
69170: PUSH
69171: LD_INT 117
69173: PUSH
69174: LD_INT 118
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: ST_TO_ADDR
69200: GO 70655
69202: LD_INT 13
69204: DOUBLE
69205: EQUAL
69206: IFTRUE 69210
69208: GO 69418
69210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
69211: LD_ADDR_VAR 0 2
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 3
69224: PUSH
69225: LD_INT 4
69227: PUSH
69228: LD_INT 5
69230: PUSH
69231: LD_INT 8
69233: PUSH
69234: LD_INT 9
69236: PUSH
69237: LD_INT 10
69239: PUSH
69240: LD_INT 11
69242: PUSH
69243: LD_INT 12
69245: PUSH
69246: LD_INT 14
69248: PUSH
69249: LD_INT 15
69251: PUSH
69252: LD_INT 16
69254: PUSH
69255: LD_INT 17
69257: PUSH
69258: LD_INT 18
69260: PUSH
69261: LD_INT 19
69263: PUSH
69264: LD_INT 20
69266: PUSH
69267: LD_INT 21
69269: PUSH
69270: LD_INT 22
69272: PUSH
69273: LD_INT 23
69275: PUSH
69276: LD_INT 24
69278: PUSH
69279: LD_INT 25
69281: PUSH
69282: LD_INT 26
69284: PUSH
69285: LD_INT 27
69287: PUSH
69288: LD_INT 28
69290: PUSH
69291: LD_INT 30
69293: PUSH
69294: LD_INT 31
69296: PUSH
69297: LD_INT 32
69299: PUSH
69300: LD_INT 33
69302: PUSH
69303: LD_INT 34
69305: PUSH
69306: LD_INT 36
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 101
69344: PUSH
69345: LD_INT 102
69347: PUSH
69348: LD_INT 103
69350: PUSH
69351: LD_INT 104
69353: PUSH
69354: LD_INT 105
69356: PUSH
69357: LD_INT 106
69359: PUSH
69360: LD_INT 107
69362: PUSH
69363: LD_INT 108
69365: PUSH
69366: LD_INT 109
69368: PUSH
69369: LD_INT 110
69371: PUSH
69372: LD_INT 111
69374: PUSH
69375: LD_INT 112
69377: PUSH
69378: LD_INT 113
69380: PUSH
69381: LD_INT 114
69383: PUSH
69384: LD_INT 116
69386: PUSH
69387: LD_INT 117
69389: PUSH
69390: LD_INT 118
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: ST_TO_ADDR
69416: GO 70655
69418: LD_INT 14
69420: DOUBLE
69421: EQUAL
69422: IFTRUE 69426
69424: GO 69650
69426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
69427: LD_ADDR_VAR 0 2
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: LD_INT 3
69440: PUSH
69441: LD_INT 4
69443: PUSH
69444: LD_INT 5
69446: PUSH
69447: LD_INT 6
69449: PUSH
69450: LD_INT 7
69452: PUSH
69453: LD_INT 8
69455: PUSH
69456: LD_INT 9
69458: PUSH
69459: LD_INT 10
69461: PUSH
69462: LD_INT 11
69464: PUSH
69465: LD_INT 12
69467: PUSH
69468: LD_INT 13
69470: PUSH
69471: LD_INT 14
69473: PUSH
69474: LD_INT 15
69476: PUSH
69477: LD_INT 16
69479: PUSH
69480: LD_INT 17
69482: PUSH
69483: LD_INT 18
69485: PUSH
69486: LD_INT 19
69488: PUSH
69489: LD_INT 20
69491: PUSH
69492: LD_INT 21
69494: PUSH
69495: LD_INT 22
69497: PUSH
69498: LD_INT 23
69500: PUSH
69501: LD_INT 24
69503: PUSH
69504: LD_INT 25
69506: PUSH
69507: LD_INT 26
69509: PUSH
69510: LD_INT 27
69512: PUSH
69513: LD_INT 28
69515: PUSH
69516: LD_INT 29
69518: PUSH
69519: LD_INT 30
69521: PUSH
69522: LD_INT 31
69524: PUSH
69525: LD_INT 32
69527: PUSH
69528: LD_INT 33
69530: PUSH
69531: LD_INT 34
69533: PUSH
69534: LD_INT 36
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 101
69576: PUSH
69577: LD_INT 102
69579: PUSH
69580: LD_INT 103
69582: PUSH
69583: LD_INT 104
69585: PUSH
69586: LD_INT 105
69588: PUSH
69589: LD_INT 106
69591: PUSH
69592: LD_INT 107
69594: PUSH
69595: LD_INT 108
69597: PUSH
69598: LD_INT 109
69600: PUSH
69601: LD_INT 110
69603: PUSH
69604: LD_INT 111
69606: PUSH
69607: LD_INT 112
69609: PUSH
69610: LD_INT 113
69612: PUSH
69613: LD_INT 114
69615: PUSH
69616: LD_INT 116
69618: PUSH
69619: LD_INT 117
69621: PUSH
69622: LD_INT 118
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: ST_TO_ADDR
69648: GO 70655
69650: LD_INT 15
69652: DOUBLE
69653: EQUAL
69654: IFTRUE 69658
69656: GO 69882
69658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
69659: LD_ADDR_VAR 0 2
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: LD_INT 3
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: LD_INT 5
69678: PUSH
69679: LD_INT 6
69681: PUSH
69682: LD_INT 7
69684: PUSH
69685: LD_INT 8
69687: PUSH
69688: LD_INT 9
69690: PUSH
69691: LD_INT 10
69693: PUSH
69694: LD_INT 11
69696: PUSH
69697: LD_INT 12
69699: PUSH
69700: LD_INT 13
69702: PUSH
69703: LD_INT 14
69705: PUSH
69706: LD_INT 15
69708: PUSH
69709: LD_INT 16
69711: PUSH
69712: LD_INT 17
69714: PUSH
69715: LD_INT 18
69717: PUSH
69718: LD_INT 19
69720: PUSH
69721: LD_INT 20
69723: PUSH
69724: LD_INT 21
69726: PUSH
69727: LD_INT 22
69729: PUSH
69730: LD_INT 23
69732: PUSH
69733: LD_INT 24
69735: PUSH
69736: LD_INT 25
69738: PUSH
69739: LD_INT 26
69741: PUSH
69742: LD_INT 27
69744: PUSH
69745: LD_INT 28
69747: PUSH
69748: LD_INT 29
69750: PUSH
69751: LD_INT 30
69753: PUSH
69754: LD_INT 31
69756: PUSH
69757: LD_INT 32
69759: PUSH
69760: LD_INT 33
69762: PUSH
69763: LD_INT 34
69765: PUSH
69766: LD_INT 36
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 101
69808: PUSH
69809: LD_INT 102
69811: PUSH
69812: LD_INT 103
69814: PUSH
69815: LD_INT 104
69817: PUSH
69818: LD_INT 105
69820: PUSH
69821: LD_INT 106
69823: PUSH
69824: LD_INT 107
69826: PUSH
69827: LD_INT 108
69829: PUSH
69830: LD_INT 109
69832: PUSH
69833: LD_INT 110
69835: PUSH
69836: LD_INT 111
69838: PUSH
69839: LD_INT 112
69841: PUSH
69842: LD_INT 113
69844: PUSH
69845: LD_INT 114
69847: PUSH
69848: LD_INT 116
69850: PUSH
69851: LD_INT 117
69853: PUSH
69854: LD_INT 118
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: ST_TO_ADDR
69880: GO 70655
69882: LD_INT 16
69884: DOUBLE
69885: EQUAL
69886: IFTRUE 69890
69888: GO 70026
69890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69891: LD_ADDR_VAR 0 2
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: LD_INT 5
69904: PUSH
69905: LD_INT 7
69907: PUSH
69908: LD_INT 11
69910: PUSH
69911: LD_INT 12
69913: PUSH
69914: LD_INT 15
69916: PUSH
69917: LD_INT 16
69919: PUSH
69920: LD_INT 20
69922: PUSH
69923: LD_INT 21
69925: PUSH
69926: LD_INT 22
69928: PUSH
69929: LD_INT 23
69931: PUSH
69932: LD_INT 25
69934: PUSH
69935: LD_INT 26
69937: PUSH
69938: LD_INT 30
69940: PUSH
69941: LD_INT 31
69943: PUSH
69944: LD_INT 32
69946: PUSH
69947: LD_INT 33
69949: PUSH
69950: LD_INT 34
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 101
69976: PUSH
69977: LD_INT 102
69979: PUSH
69980: LD_INT 103
69982: PUSH
69983: LD_INT 106
69985: PUSH
69986: LD_INT 108
69988: PUSH
69989: LD_INT 112
69991: PUSH
69992: LD_INT 113
69994: PUSH
69995: LD_INT 114
69997: PUSH
69998: LD_INT 116
70000: PUSH
70001: LD_INT 117
70003: PUSH
70004: LD_INT 118
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: ST_TO_ADDR
70024: GO 70655
70026: LD_INT 17
70028: DOUBLE
70029: EQUAL
70030: IFTRUE 70034
70032: GO 70258
70034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70035: LD_ADDR_VAR 0 2
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: LD_INT 2
70045: PUSH
70046: LD_INT 3
70048: PUSH
70049: LD_INT 4
70051: PUSH
70052: LD_INT 5
70054: PUSH
70055: LD_INT 6
70057: PUSH
70058: LD_INT 7
70060: PUSH
70061: LD_INT 8
70063: PUSH
70064: LD_INT 9
70066: PUSH
70067: LD_INT 10
70069: PUSH
70070: LD_INT 11
70072: PUSH
70073: LD_INT 12
70075: PUSH
70076: LD_INT 13
70078: PUSH
70079: LD_INT 14
70081: PUSH
70082: LD_INT 15
70084: PUSH
70085: LD_INT 16
70087: PUSH
70088: LD_INT 17
70090: PUSH
70091: LD_INT 18
70093: PUSH
70094: LD_INT 19
70096: PUSH
70097: LD_INT 20
70099: PUSH
70100: LD_INT 21
70102: PUSH
70103: LD_INT 22
70105: PUSH
70106: LD_INT 23
70108: PUSH
70109: LD_INT 24
70111: PUSH
70112: LD_INT 25
70114: PUSH
70115: LD_INT 26
70117: PUSH
70118: LD_INT 27
70120: PUSH
70121: LD_INT 28
70123: PUSH
70124: LD_INT 29
70126: PUSH
70127: LD_INT 30
70129: PUSH
70130: LD_INT 31
70132: PUSH
70133: LD_INT 32
70135: PUSH
70136: LD_INT 33
70138: PUSH
70139: LD_INT 34
70141: PUSH
70142: LD_INT 36
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 101
70184: PUSH
70185: LD_INT 102
70187: PUSH
70188: LD_INT 103
70190: PUSH
70191: LD_INT 104
70193: PUSH
70194: LD_INT 105
70196: PUSH
70197: LD_INT 106
70199: PUSH
70200: LD_INT 107
70202: PUSH
70203: LD_INT 108
70205: PUSH
70206: LD_INT 109
70208: PUSH
70209: LD_INT 110
70211: PUSH
70212: LD_INT 111
70214: PUSH
70215: LD_INT 112
70217: PUSH
70218: LD_INT 113
70220: PUSH
70221: LD_INT 114
70223: PUSH
70224: LD_INT 116
70226: PUSH
70227: LD_INT 117
70229: PUSH
70230: LD_INT 118
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: ST_TO_ADDR
70256: GO 70655
70258: LD_INT 18
70260: DOUBLE
70261: EQUAL
70262: IFTRUE 70266
70264: GO 70414
70266: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
70267: LD_ADDR_VAR 0 2
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 4
70277: PUSH
70278: LD_INT 5
70280: PUSH
70281: LD_INT 7
70283: PUSH
70284: LD_INT 11
70286: PUSH
70287: LD_INT 12
70289: PUSH
70290: LD_INT 15
70292: PUSH
70293: LD_INT 16
70295: PUSH
70296: LD_INT 20
70298: PUSH
70299: LD_INT 21
70301: PUSH
70302: LD_INT 22
70304: PUSH
70305: LD_INT 23
70307: PUSH
70308: LD_INT 25
70310: PUSH
70311: LD_INT 26
70313: PUSH
70314: LD_INT 30
70316: PUSH
70317: LD_INT 31
70319: PUSH
70320: LD_INT 32
70322: PUSH
70323: LD_INT 33
70325: PUSH
70326: LD_INT 34
70328: PUSH
70329: LD_INT 35
70331: PUSH
70332: LD_INT 36
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 101
70360: PUSH
70361: LD_INT 102
70363: PUSH
70364: LD_INT 103
70366: PUSH
70367: LD_INT 106
70369: PUSH
70370: LD_INT 108
70372: PUSH
70373: LD_INT 112
70375: PUSH
70376: LD_INT 113
70378: PUSH
70379: LD_INT 114
70381: PUSH
70382: LD_INT 115
70384: PUSH
70385: LD_INT 116
70387: PUSH
70388: LD_INT 117
70390: PUSH
70391: LD_INT 118
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: ST_TO_ADDR
70412: GO 70655
70414: LD_INT 19
70416: DOUBLE
70417: EQUAL
70418: IFTRUE 70422
70420: GO 70654
70422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
70423: LD_ADDR_VAR 0 2
70427: PUSH
70428: LD_INT 1
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 3
70436: PUSH
70437: LD_INT 4
70439: PUSH
70440: LD_INT 5
70442: PUSH
70443: LD_INT 6
70445: PUSH
70446: LD_INT 7
70448: PUSH
70449: LD_INT 8
70451: PUSH
70452: LD_INT 9
70454: PUSH
70455: LD_INT 10
70457: PUSH
70458: LD_INT 11
70460: PUSH
70461: LD_INT 12
70463: PUSH
70464: LD_INT 13
70466: PUSH
70467: LD_INT 14
70469: PUSH
70470: LD_INT 15
70472: PUSH
70473: LD_INT 16
70475: PUSH
70476: LD_INT 17
70478: PUSH
70479: LD_INT 18
70481: PUSH
70482: LD_INT 19
70484: PUSH
70485: LD_INT 20
70487: PUSH
70488: LD_INT 21
70490: PUSH
70491: LD_INT 22
70493: PUSH
70494: LD_INT 23
70496: PUSH
70497: LD_INT 24
70499: PUSH
70500: LD_INT 25
70502: PUSH
70503: LD_INT 26
70505: PUSH
70506: LD_INT 27
70508: PUSH
70509: LD_INT 28
70511: PUSH
70512: LD_INT 29
70514: PUSH
70515: LD_INT 30
70517: PUSH
70518: LD_INT 31
70520: PUSH
70521: LD_INT 32
70523: PUSH
70524: LD_INT 33
70526: PUSH
70527: LD_INT 34
70529: PUSH
70530: LD_INT 35
70532: PUSH
70533: LD_INT 36
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 101
70576: PUSH
70577: LD_INT 102
70579: PUSH
70580: LD_INT 103
70582: PUSH
70583: LD_INT 104
70585: PUSH
70586: LD_INT 105
70588: PUSH
70589: LD_INT 106
70591: PUSH
70592: LD_INT 107
70594: PUSH
70595: LD_INT 108
70597: PUSH
70598: LD_INT 109
70600: PUSH
70601: LD_INT 110
70603: PUSH
70604: LD_INT 111
70606: PUSH
70607: LD_INT 112
70609: PUSH
70610: LD_INT 113
70612: PUSH
70613: LD_INT 114
70615: PUSH
70616: LD_INT 115
70618: PUSH
70619: LD_INT 116
70621: PUSH
70622: LD_INT 117
70624: PUSH
70625: LD_INT 118
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: ST_TO_ADDR
70652: GO 70655
70654: POP
// end else
70655: GO 70886
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
70657: LD_ADDR_VAR 0 2
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: LD_INT 3
70670: PUSH
70671: LD_INT 4
70673: PUSH
70674: LD_INT 5
70676: PUSH
70677: LD_INT 6
70679: PUSH
70680: LD_INT 7
70682: PUSH
70683: LD_INT 8
70685: PUSH
70686: LD_INT 9
70688: PUSH
70689: LD_INT 10
70691: PUSH
70692: LD_INT 11
70694: PUSH
70695: LD_INT 12
70697: PUSH
70698: LD_INT 13
70700: PUSH
70701: LD_INT 14
70703: PUSH
70704: LD_INT 15
70706: PUSH
70707: LD_INT 16
70709: PUSH
70710: LD_INT 17
70712: PUSH
70713: LD_INT 18
70715: PUSH
70716: LD_INT 19
70718: PUSH
70719: LD_INT 20
70721: PUSH
70722: LD_INT 21
70724: PUSH
70725: LD_INT 22
70727: PUSH
70728: LD_INT 23
70730: PUSH
70731: LD_INT 24
70733: PUSH
70734: LD_INT 25
70736: PUSH
70737: LD_INT 26
70739: PUSH
70740: LD_INT 27
70742: PUSH
70743: LD_INT 28
70745: PUSH
70746: LD_INT 29
70748: PUSH
70749: LD_INT 30
70751: PUSH
70752: LD_INT 31
70754: PUSH
70755: LD_INT 32
70757: PUSH
70758: LD_INT 33
70760: PUSH
70761: LD_INT 34
70763: PUSH
70764: LD_INT 35
70766: PUSH
70767: LD_INT 36
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 101
70810: PUSH
70811: LD_INT 102
70813: PUSH
70814: LD_INT 103
70816: PUSH
70817: LD_INT 104
70819: PUSH
70820: LD_INT 105
70822: PUSH
70823: LD_INT 106
70825: PUSH
70826: LD_INT 107
70828: PUSH
70829: LD_INT 108
70831: PUSH
70832: LD_INT 109
70834: PUSH
70835: LD_INT 110
70837: PUSH
70838: LD_INT 111
70840: PUSH
70841: LD_INT 112
70843: PUSH
70844: LD_INT 113
70846: PUSH
70847: LD_INT 114
70849: PUSH
70850: LD_INT 115
70852: PUSH
70853: LD_INT 116
70855: PUSH
70856: LD_INT 117
70858: PUSH
70859: LD_INT 118
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// if result then
70886: LD_VAR 0 2
70890: IFFALSE 71676
// begin normal :=  ;
70892: LD_ADDR_VAR 0 5
70896: PUSH
70897: LD_STRING 
70899: ST_TO_ADDR
// hardcore :=  ;
70900: LD_ADDR_VAR 0 6
70904: PUSH
70905: LD_STRING 
70907: ST_TO_ADDR
// active :=  ;
70908: LD_ADDR_VAR 0 7
70912: PUSH
70913: LD_STRING 
70915: ST_TO_ADDR
// for i = 1 to normalCounter do
70916: LD_ADDR_VAR 0 8
70920: PUSH
70921: DOUBLE
70922: LD_INT 1
70924: DEC
70925: ST_TO_ADDR
70926: LD_EXP 66
70930: PUSH
70931: FOR_TO
70932: IFFALSE 71033
// begin tmp := 0 ;
70934: LD_ADDR_VAR 0 3
70938: PUSH
70939: LD_STRING 0
70941: ST_TO_ADDR
// if result [ 1 ] then
70942: LD_VAR 0 2
70946: PUSH
70947: LD_INT 1
70949: ARRAY
70950: IFFALSE 71015
// if result [ 1 ] [ 1 ] = i then
70952: LD_VAR 0 2
70956: PUSH
70957: LD_INT 1
70959: ARRAY
70960: PUSH
70961: LD_INT 1
70963: ARRAY
70964: PUSH
70965: LD_VAR 0 8
70969: EQUAL
70970: IFFALSE 71015
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70972: LD_ADDR_VAR 0 2
70976: PUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: LD_INT 1
70984: PPUSH
70985: LD_VAR 0 2
70989: PUSH
70990: LD_INT 1
70992: ARRAY
70993: PPUSH
70994: LD_INT 1
70996: PPUSH
70997: CALL_OW 3
71001: PPUSH
71002: CALL_OW 1
71006: ST_TO_ADDR
// tmp := 1 ;
71007: LD_ADDR_VAR 0 3
71011: PUSH
71012: LD_STRING 1
71014: ST_TO_ADDR
// end ; normal := normal & tmp ;
71015: LD_ADDR_VAR 0 5
71019: PUSH
71020: LD_VAR 0 5
71024: PUSH
71025: LD_VAR 0 3
71029: STR
71030: ST_TO_ADDR
// end ;
71031: GO 70931
71033: POP
71034: POP
// for i = 1 to hardcoreCounter do
71035: LD_ADDR_VAR 0 8
71039: PUSH
71040: DOUBLE
71041: LD_INT 1
71043: DEC
71044: ST_TO_ADDR
71045: LD_EXP 67
71049: PUSH
71050: FOR_TO
71051: IFFALSE 71156
// begin tmp := 0 ;
71053: LD_ADDR_VAR 0 3
71057: PUSH
71058: LD_STRING 0
71060: ST_TO_ADDR
// if result [ 2 ] then
71061: LD_VAR 0 2
71065: PUSH
71066: LD_INT 2
71068: ARRAY
71069: IFFALSE 71138
// if result [ 2 ] [ 1 ] = 100 + i then
71071: LD_VAR 0 2
71075: PUSH
71076: LD_INT 2
71078: ARRAY
71079: PUSH
71080: LD_INT 1
71082: ARRAY
71083: PUSH
71084: LD_INT 100
71086: PUSH
71087: LD_VAR 0 8
71091: PLUS
71092: EQUAL
71093: IFFALSE 71138
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71095: LD_ADDR_VAR 0 2
71099: PUSH
71100: LD_VAR 0 2
71104: PPUSH
71105: LD_INT 2
71107: PPUSH
71108: LD_VAR 0 2
71112: PUSH
71113: LD_INT 2
71115: ARRAY
71116: PPUSH
71117: LD_INT 1
71119: PPUSH
71120: CALL_OW 3
71124: PPUSH
71125: CALL_OW 1
71129: ST_TO_ADDR
// tmp := 1 ;
71130: LD_ADDR_VAR 0 3
71134: PUSH
71135: LD_STRING 1
71137: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71138: LD_ADDR_VAR 0 6
71142: PUSH
71143: LD_VAR 0 6
71147: PUSH
71148: LD_VAR 0 3
71152: STR
71153: ST_TO_ADDR
// end ;
71154: GO 71050
71156: POP
71157: POP
// if isGameLoad then
71158: LD_VAR 0 1
71162: IFFALSE 71637
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71164: LD_ADDR_VAR 0 4
71168: PUSH
71169: LD_EXP 70
71173: PUSH
71174: LD_EXP 69
71178: PUSH
71179: LD_EXP 71
71183: PUSH
71184: LD_EXP 68
71188: PUSH
71189: LD_EXP 72
71193: PUSH
71194: LD_EXP 73
71198: PUSH
71199: LD_EXP 74
71203: PUSH
71204: LD_EXP 75
71208: PUSH
71209: LD_EXP 76
71213: PUSH
71214: LD_EXP 77
71218: PUSH
71219: LD_EXP 78
71223: PUSH
71224: LD_EXP 79
71228: PUSH
71229: LD_EXP 80
71233: PUSH
71234: LD_EXP 81
71238: PUSH
71239: LD_EXP 89
71243: PUSH
71244: LD_EXP 90
71248: PUSH
71249: LD_EXP 91
71253: PUSH
71254: LD_EXP 92
71258: PUSH
71259: LD_EXP 94
71263: PUSH
71264: LD_EXP 95
71268: PUSH
71269: LD_EXP 96
71273: PUSH
71274: LD_EXP 99
71278: PUSH
71279: LD_EXP 101
71283: PUSH
71284: LD_EXP 102
71288: PUSH
71289: LD_EXP 103
71293: PUSH
71294: LD_EXP 105
71298: PUSH
71299: LD_EXP 106
71303: PUSH
71304: LD_EXP 109
71308: PUSH
71309: LD_EXP 110
71313: PUSH
71314: LD_EXP 111
71318: PUSH
71319: LD_EXP 112
71323: PUSH
71324: LD_EXP 113
71328: PUSH
71329: LD_EXP 114
71333: PUSH
71334: LD_EXP 115
71338: PUSH
71339: LD_EXP 116
71343: PUSH
71344: LD_EXP 117
71348: PUSH
71349: LD_EXP 82
71353: PUSH
71354: LD_EXP 83
71358: PUSH
71359: LD_EXP 86
71363: PUSH
71364: LD_EXP 87
71368: PUSH
71369: LD_EXP 88
71373: PUSH
71374: LD_EXP 84
71378: PUSH
71379: LD_EXP 85
71383: PUSH
71384: LD_EXP 93
71388: PUSH
71389: LD_EXP 97
71393: PUSH
71394: LD_EXP 98
71398: PUSH
71399: LD_EXP 100
71403: PUSH
71404: LD_EXP 104
71408: PUSH
71409: LD_EXP 107
71413: PUSH
71414: LD_EXP 108
71418: PUSH
71419: LD_EXP 118
71423: PUSH
71424: LD_EXP 119
71428: PUSH
71429: LD_EXP 120
71433: PUSH
71434: LD_EXP 121
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: ST_TO_ADDR
// tmp :=  ;
71495: LD_ADDR_VAR 0 3
71499: PUSH
71500: LD_STRING 
71502: ST_TO_ADDR
// for i = 1 to normalCounter do
71503: LD_ADDR_VAR 0 8
71507: PUSH
71508: DOUBLE
71509: LD_INT 1
71511: DEC
71512: ST_TO_ADDR
71513: LD_EXP 66
71517: PUSH
71518: FOR_TO
71519: IFFALSE 71555
// begin if flags [ i ] then
71521: LD_VAR 0 4
71525: PUSH
71526: LD_VAR 0 8
71530: ARRAY
71531: IFFALSE 71553
// tmp := tmp & i & ; ;
71533: LD_ADDR_VAR 0 3
71537: PUSH
71538: LD_VAR 0 3
71542: PUSH
71543: LD_VAR 0 8
71547: STR
71548: PUSH
71549: LD_STRING ;
71551: STR
71552: ST_TO_ADDR
// end ;
71553: GO 71518
71555: POP
71556: POP
// for i = 1 to hardcoreCounter do
71557: LD_ADDR_VAR 0 8
71561: PUSH
71562: DOUBLE
71563: LD_INT 1
71565: DEC
71566: ST_TO_ADDR
71567: LD_EXP 67
71571: PUSH
71572: FOR_TO
71573: IFFALSE 71619
// begin if flags [ normalCounter + i ] then
71575: LD_VAR 0 4
71579: PUSH
71580: LD_EXP 66
71584: PUSH
71585: LD_VAR 0 8
71589: PLUS
71590: ARRAY
71591: IFFALSE 71617
// tmp := tmp & ( 100 + i ) & ; ;
71593: LD_ADDR_VAR 0 3
71597: PUSH
71598: LD_VAR 0 3
71602: PUSH
71603: LD_INT 100
71605: PUSH
71606: LD_VAR 0 8
71610: PLUS
71611: STR
71612: PUSH
71613: LD_STRING ;
71615: STR
71616: ST_TO_ADDR
// end ;
71617: GO 71572
71619: POP
71620: POP
// if tmp then
71621: LD_VAR 0 3
71625: IFFALSE 71637
// active := tmp ;
71627: LD_ADDR_VAR 0 7
71631: PUSH
71632: LD_VAR 0 3
71636: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
71637: LD_STRING getStreamItemsFromMission("
71639: PUSH
71640: LD_VAR 0 5
71644: STR
71645: PUSH
71646: LD_STRING ","
71648: STR
71649: PUSH
71650: LD_VAR 0 6
71654: STR
71655: PUSH
71656: LD_STRING ","
71658: STR
71659: PUSH
71660: LD_VAR 0 7
71664: STR
71665: PUSH
71666: LD_STRING ")
71668: STR
71669: PPUSH
71670: CALL_OW 559
// end else
71674: GO 71683
// ToLua ( getStreamItemsFromMission("","","") ) ;
71676: LD_STRING getStreamItemsFromMission("","","")
71678: PPUSH
71679: CALL_OW 559
// end ;
71683: LD_VAR 0 2
71687: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
71688: LD_EXP 65
71692: IFFALSE 71700
71694: PUSH
71695: LD_EXP 70
71699: AND
71700: IFFALSE 71824
71702: GO 71704
71704: DISABLE
71705: LD_INT 0
71707: PPUSH
71708: PPUSH
// begin enable ;
71709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
71710: LD_ADDR_VAR 0 2
71714: PUSH
71715: LD_INT 22
71717: PUSH
71718: LD_OWVAR 2
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: LD_INT 34
71732: PUSH
71733: LD_INT 7
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 34
71742: PUSH
71743: LD_INT 45
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 34
71752: PUSH
71753: LD_INT 28
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 34
71762: PUSH
71763: LD_INT 47
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PPUSH
71781: CALL_OW 69
71785: ST_TO_ADDR
// if not tmp then
71786: LD_VAR 0 2
71790: NOT
71791: IFFALSE 71795
// exit ;
71793: GO 71824
// for i in tmp do
71795: LD_ADDR_VAR 0 1
71799: PUSH
71800: LD_VAR 0 2
71804: PUSH
71805: FOR_IN
71806: IFFALSE 71822
// begin SetLives ( i , 0 ) ;
71808: LD_VAR 0 1
71812: PPUSH
71813: LD_INT 0
71815: PPUSH
71816: CALL_OW 234
// end ;
71820: GO 71805
71822: POP
71823: POP
// end ;
71824: PPOPN 2
71826: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71827: LD_EXP 65
71831: IFFALSE 71839
71833: PUSH
71834: LD_EXP 71
71838: AND
71839: IFFALSE 71923
71841: GO 71843
71843: DISABLE
71844: LD_INT 0
71846: PPUSH
71847: PPUSH
// begin enable ;
71848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71849: LD_ADDR_VAR 0 2
71853: PUSH
71854: LD_INT 22
71856: PUSH
71857: LD_OWVAR 2
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 32
71868: PUSH
71869: LD_INT 3
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 69
71884: ST_TO_ADDR
// if not tmp then
71885: LD_VAR 0 2
71889: NOT
71890: IFFALSE 71894
// exit ;
71892: GO 71923
// for i in tmp do
71894: LD_ADDR_VAR 0 1
71898: PUSH
71899: LD_VAR 0 2
71903: PUSH
71904: FOR_IN
71905: IFFALSE 71921
// begin SetLives ( i , 0 ) ;
71907: LD_VAR 0 1
71911: PPUSH
71912: LD_INT 0
71914: PPUSH
71915: CALL_OW 234
// end ;
71919: GO 71904
71921: POP
71922: POP
// end ;
71923: PPOPN 2
71925: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71926: LD_EXP 65
71930: IFFALSE 71938
71932: PUSH
71933: LD_EXP 68
71937: AND
71938: IFFALSE 72031
71940: GO 71942
71942: DISABLE
71943: LD_INT 0
71945: PPUSH
// begin enable ;
71946: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71947: LD_ADDR_VAR 0 1
71951: PUSH
71952: LD_INT 22
71954: PUSH
71955: LD_OWVAR 2
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: LD_INT 25
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 25
71979: PUSH
71980: LD_INT 9
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 25
71989: PUSH
71990: LD_INT 8
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PPUSH
72007: CALL_OW 69
72011: PUSH
72012: FOR_IN
72013: IFFALSE 72029
// begin SetClass ( i , 1 ) ;
72015: LD_VAR 0 1
72019: PPUSH
72020: LD_INT 1
72022: PPUSH
72023: CALL_OW 336
// end ;
72027: GO 72012
72029: POP
72030: POP
// end ;
72031: PPOPN 1
72033: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72034: LD_EXP 65
72038: IFFALSE 72046
72040: PUSH
72041: LD_EXP 69
72045: AND
72046: IFFALSE 72058
72048: PUSH
72049: LD_OWVAR 65
72053: PUSH
72054: LD_INT 7
72056: LESS
72057: AND
72058: IFFALSE 72072
72060: GO 72062
72062: DISABLE
// begin enable ;
72063: ENABLE
// game_speed := 7 ;
72064: LD_ADDR_OWVAR 65
72068: PUSH
72069: LD_INT 7
72071: ST_TO_ADDR
// end ;
72072: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72073: LD_EXP 65
72077: IFFALSE 72085
72079: PUSH
72080: LD_EXP 72
72084: AND
72085: IFFALSE 72287
72087: GO 72089
72089: DISABLE
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
72094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72095: LD_ADDR_VAR 0 3
72099: PUSH
72100: LD_INT 81
72102: PUSH
72103: LD_OWVAR 2
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 21
72114: PUSH
72115: LD_INT 1
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PPUSH
72126: CALL_OW 69
72130: ST_TO_ADDR
// if not tmp then
72131: LD_VAR 0 3
72135: NOT
72136: IFFALSE 72140
// exit ;
72138: GO 72287
// if tmp > 5 then
72140: LD_VAR 0 3
72144: PUSH
72145: LD_INT 5
72147: GREATER
72148: IFFALSE 72160
// k := 5 else
72150: LD_ADDR_VAR 0 2
72154: PUSH
72155: LD_INT 5
72157: ST_TO_ADDR
72158: GO 72170
// k := tmp ;
72160: LD_ADDR_VAR 0 2
72164: PUSH
72165: LD_VAR 0 3
72169: ST_TO_ADDR
// for i := 1 to k do
72170: LD_ADDR_VAR 0 1
72174: PUSH
72175: DOUBLE
72176: LD_INT 1
72178: DEC
72179: ST_TO_ADDR
72180: LD_VAR 0 2
72184: PUSH
72185: FOR_TO
72186: IFFALSE 72285
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72188: LD_VAR 0 3
72192: PUSH
72193: LD_VAR 0 1
72197: ARRAY
72198: PPUSH
72199: LD_VAR 0 1
72203: PUSH
72204: LD_INT 4
72206: MOD
72207: PUSH
72208: LD_INT 1
72210: PLUS
72211: PPUSH
72212: CALL_OW 259
72216: PUSH
72217: LD_INT 10
72219: LESS
72220: IFFALSE 72283
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72222: LD_VAR 0 3
72226: PUSH
72227: LD_VAR 0 1
72231: ARRAY
72232: PPUSH
72233: LD_VAR 0 1
72237: PUSH
72238: LD_INT 4
72240: MOD
72241: PUSH
72242: LD_INT 1
72244: PLUS
72245: PPUSH
72246: LD_VAR 0 3
72250: PUSH
72251: LD_VAR 0 1
72255: ARRAY
72256: PPUSH
72257: LD_VAR 0 1
72261: PUSH
72262: LD_INT 4
72264: MOD
72265: PUSH
72266: LD_INT 1
72268: PLUS
72269: PPUSH
72270: CALL_OW 259
72274: PUSH
72275: LD_INT 1
72277: PLUS
72278: PPUSH
72279: CALL_OW 237
72283: GO 72185
72285: POP
72286: POP
// end ;
72287: PPOPN 3
72289: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
72290: LD_EXP 65
72294: IFFALSE 72302
72296: PUSH
72297: LD_EXP 73
72301: AND
72302: IFFALSE 72322
72304: GO 72306
72306: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
72307: LD_INT 4
72309: PPUSH
72310: LD_OWVAR 2
72314: PPUSH
72315: LD_INT 0
72317: PPUSH
72318: CALL_OW 324
72322: END
// every 0 0$1 trigger StreamModeActive and sShovel do
72323: LD_EXP 65
72327: IFFALSE 72335
72329: PUSH
72330: LD_EXP 102
72334: AND
72335: IFFALSE 72355
72337: GO 72339
72339: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
72340: LD_INT 19
72342: PPUSH
72343: LD_OWVAR 2
72347: PPUSH
72348: LD_INT 0
72350: PPUSH
72351: CALL_OW 324
72355: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
72356: LD_EXP 65
72360: IFFALSE 72368
72362: PUSH
72363: LD_EXP 74
72367: AND
72368: IFFALSE 72470
72370: GO 72372
72372: DISABLE
72373: LD_INT 0
72375: PPUSH
72376: PPUSH
// begin enable ;
72377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
72378: LD_ADDR_VAR 0 2
72382: PUSH
72383: LD_INT 22
72385: PUSH
72386: LD_OWVAR 2
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: LD_INT 34
72400: PUSH
72401: LD_INT 11
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 34
72410: PUSH
72411: LD_INT 30
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: LIST
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PPUSH
72427: CALL_OW 69
72431: ST_TO_ADDR
// if not tmp then
72432: LD_VAR 0 2
72436: NOT
72437: IFFALSE 72441
// exit ;
72439: GO 72470
// for i in tmp do
72441: LD_ADDR_VAR 0 1
72445: PUSH
72446: LD_VAR 0 2
72450: PUSH
72451: FOR_IN
72452: IFFALSE 72468
// begin SetLives ( i , 0 ) ;
72454: LD_VAR 0 1
72458: PPUSH
72459: LD_INT 0
72461: PPUSH
72462: CALL_OW 234
// end ;
72466: GO 72451
72468: POP
72469: POP
// end ;
72470: PPOPN 2
72472: END
// every 0 0$1 trigger StreamModeActive and sBunker do
72473: LD_EXP 65
72477: IFFALSE 72485
72479: PUSH
72480: LD_EXP 75
72484: AND
72485: IFFALSE 72505
72487: GO 72489
72489: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
72490: LD_INT 32
72492: PPUSH
72493: LD_OWVAR 2
72497: PPUSH
72498: LD_INT 0
72500: PPUSH
72501: CALL_OW 324
72505: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
72506: LD_EXP 65
72510: IFFALSE 72518
72512: PUSH
72513: LD_EXP 76
72517: AND
72518: IFFALSE 72701
72520: GO 72522
72522: DISABLE
72523: LD_INT 0
72525: PPUSH
72526: PPUSH
72527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
72528: LD_ADDR_VAR 0 2
72532: PUSH
72533: LD_INT 22
72535: PUSH
72536: LD_OWVAR 2
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 33
72547: PUSH
72548: LD_INT 3
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 69
72563: ST_TO_ADDR
// if not tmp then
72564: LD_VAR 0 2
72568: NOT
72569: IFFALSE 72573
// exit ;
72571: GO 72701
// side := 0 ;
72573: LD_ADDR_VAR 0 3
72577: PUSH
72578: LD_INT 0
72580: ST_TO_ADDR
// for i := 1 to 8 do
72581: LD_ADDR_VAR 0 1
72585: PUSH
72586: DOUBLE
72587: LD_INT 1
72589: DEC
72590: ST_TO_ADDR
72591: LD_INT 8
72593: PUSH
72594: FOR_TO
72595: IFFALSE 72645
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
72597: LD_OWVAR 2
72601: PUSH
72602: LD_VAR 0 1
72606: NONEQUAL
72607: IFFALSE 72629
72609: PUSH
72610: LD_OWVAR 2
72614: PPUSH
72615: LD_VAR 0 1
72619: PPUSH
72620: CALL_OW 81
72624: PUSH
72625: LD_INT 2
72627: EQUAL
72628: AND
72629: IFFALSE 72643
// begin side := i ;
72631: LD_ADDR_VAR 0 3
72635: PUSH
72636: LD_VAR 0 1
72640: ST_TO_ADDR
// break ;
72641: GO 72645
// end ;
72643: GO 72594
72645: POP
72646: POP
// if not side then
72647: LD_VAR 0 3
72651: NOT
72652: IFFALSE 72656
// exit ;
72654: GO 72701
// for i := 1 to tmp do
72656: LD_ADDR_VAR 0 1
72660: PUSH
72661: DOUBLE
72662: LD_INT 1
72664: DEC
72665: ST_TO_ADDR
72666: LD_VAR 0 2
72670: PUSH
72671: FOR_TO
72672: IFFALSE 72699
// if Prob ( 60 ) then
72674: LD_INT 60
72676: PPUSH
72677: CALL_OW 13
72681: IFFALSE 72697
// SetSide ( i , side ) ;
72683: LD_VAR 0 1
72687: PPUSH
72688: LD_VAR 0 3
72692: PPUSH
72693: CALL_OW 235
72697: GO 72671
72699: POP
72700: POP
// end ;
72701: PPOPN 3
72703: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
72704: LD_EXP 65
72708: IFFALSE 72716
72710: PUSH
72711: LD_EXP 78
72715: AND
72716: IFFALSE 72835
72718: GO 72720
72720: DISABLE
72721: LD_INT 0
72723: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
72724: LD_ADDR_VAR 0 1
72728: PUSH
72729: LD_INT 22
72731: PUSH
72732: LD_OWVAR 2
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 21
72743: PUSH
72744: LD_INT 1
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 3
72753: PUSH
72754: LD_INT 23
72756: PUSH
72757: LD_INT 0
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: LIST
72772: PPUSH
72773: CALL_OW 69
72777: PUSH
72778: FOR_IN
72779: IFFALSE 72833
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
72781: LD_VAR 0 1
72785: PPUSH
72786: CALL_OW 257
72790: PUSH
72791: LD_INT 1
72793: PUSH
72794: LD_INT 2
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: LD_INT 4
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: IN
72809: IFFALSE 72831
// SetClass ( un , rand ( 1 , 4 ) ) ;
72811: LD_VAR 0 1
72815: PPUSH
72816: LD_INT 1
72818: PPUSH
72819: LD_INT 4
72821: PPUSH
72822: CALL_OW 12
72826: PPUSH
72827: CALL_OW 336
72831: GO 72778
72833: POP
72834: POP
// end ;
72835: PPOPN 1
72837: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
72838: LD_EXP 65
72842: IFFALSE 72850
72844: PUSH
72845: LD_EXP 77
72849: AND
72850: IFFALSE 72929
72852: GO 72854
72854: DISABLE
72855: LD_INT 0
72857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72858: LD_ADDR_VAR 0 1
72862: PUSH
72863: LD_INT 22
72865: PUSH
72866: LD_OWVAR 2
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 21
72877: PUSH
72878: LD_INT 3
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PPUSH
72889: CALL_OW 69
72893: ST_TO_ADDR
// if not tmp then
72894: LD_VAR 0 1
72898: NOT
72899: IFFALSE 72903
// exit ;
72901: GO 72929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72903: LD_VAR 0 1
72907: PUSH
72908: LD_INT 1
72910: PPUSH
72911: LD_VAR 0 1
72915: PPUSH
72916: CALL_OW 12
72920: ARRAY
72921: PPUSH
72922: LD_INT 100
72924: PPUSH
72925: CALL_OW 234
// end ;
72929: PPOPN 1
72931: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72932: LD_EXP 65
72936: IFFALSE 72944
72938: PUSH
72939: LD_EXP 79
72943: AND
72944: IFFALSE 73042
72946: GO 72948
72948: DISABLE
72949: LD_INT 0
72951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72952: LD_ADDR_VAR 0 1
72956: PUSH
72957: LD_INT 22
72959: PUSH
72960: LD_OWVAR 2
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 21
72971: PUSH
72972: LD_INT 1
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PPUSH
72983: CALL_OW 69
72987: ST_TO_ADDR
// if not tmp then
72988: LD_VAR 0 1
72992: NOT
72993: IFFALSE 72997
// exit ;
72995: GO 73042
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72997: LD_VAR 0 1
73001: PUSH
73002: LD_INT 1
73004: PPUSH
73005: LD_VAR 0 1
73009: PPUSH
73010: CALL_OW 12
73014: ARRAY
73015: PPUSH
73016: LD_INT 1
73018: PPUSH
73019: LD_INT 4
73021: PPUSH
73022: CALL_OW 12
73026: PPUSH
73027: LD_INT 3000
73029: PPUSH
73030: LD_INT 9000
73032: PPUSH
73033: CALL_OW 12
73037: PPUSH
73038: CALL_OW 492
// end ;
73042: PPOPN 1
73044: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73045: LD_EXP 65
73049: IFFALSE 73057
73051: PUSH
73052: LD_EXP 80
73056: AND
73057: IFFALSE 73077
73059: GO 73061
73061: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73062: LD_INT 1
73064: PPUSH
73065: LD_OWVAR 2
73069: PPUSH
73070: LD_INT 0
73072: PPUSH
73073: CALL_OW 324
73077: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73078: LD_EXP 65
73082: IFFALSE 73090
73084: PUSH
73085: LD_EXP 81
73089: AND
73090: IFFALSE 73173
73092: GO 73094
73094: DISABLE
73095: LD_INT 0
73097: PPUSH
73098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73099: LD_ADDR_VAR 0 2
73103: PUSH
73104: LD_INT 22
73106: PUSH
73107: LD_OWVAR 2
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 21
73118: PUSH
73119: LD_INT 3
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PPUSH
73130: CALL_OW 69
73134: ST_TO_ADDR
// if not tmp then
73135: LD_VAR 0 2
73139: NOT
73140: IFFALSE 73144
// exit ;
73142: GO 73173
// for i in tmp do
73144: LD_ADDR_VAR 0 1
73148: PUSH
73149: LD_VAR 0 2
73153: PUSH
73154: FOR_IN
73155: IFFALSE 73171
// SetBLevel ( i , 10 ) ;
73157: LD_VAR 0 1
73161: PPUSH
73162: LD_INT 10
73164: PPUSH
73165: CALL_OW 241
73169: GO 73154
73171: POP
73172: POP
// end ;
73173: PPOPN 2
73175: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73176: LD_EXP 65
73180: IFFALSE 73188
73182: PUSH
73183: LD_EXP 82
73187: AND
73188: IFFALSE 73299
73190: GO 73192
73192: DISABLE
73193: LD_INT 0
73195: PPUSH
73196: PPUSH
73197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73198: LD_ADDR_VAR 0 3
73202: PUSH
73203: LD_INT 22
73205: PUSH
73206: LD_OWVAR 2
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 25
73217: PUSH
73218: LD_INT 1
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PPUSH
73229: CALL_OW 69
73233: ST_TO_ADDR
// if not tmp then
73234: LD_VAR 0 3
73238: NOT
73239: IFFALSE 73243
// exit ;
73241: GO 73299
// un := tmp [ rand ( 1 , tmp ) ] ;
73243: LD_ADDR_VAR 0 2
73247: PUSH
73248: LD_VAR 0 3
73252: PUSH
73253: LD_INT 1
73255: PPUSH
73256: LD_VAR 0 3
73260: PPUSH
73261: CALL_OW 12
73265: ARRAY
73266: ST_TO_ADDR
// if Crawls ( un ) then
73267: LD_VAR 0 2
73271: PPUSH
73272: CALL_OW 318
73276: IFFALSE 73287
// ComWalk ( un ) ;
73278: LD_VAR 0 2
73282: PPUSH
73283: CALL_OW 138
// SetClass ( un , class_sniper ) ;
73287: LD_VAR 0 2
73291: PPUSH
73292: LD_INT 5
73294: PPUSH
73295: CALL_OW 336
// end ;
73299: PPOPN 3
73301: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
73302: LD_EXP 65
73306: IFFALSE 73314
73308: PUSH
73309: LD_EXP 83
73313: AND
73314: IFFALSE 73326
73316: PUSH
73317: LD_OWVAR 67
73321: PUSH
73322: LD_INT 4
73324: LESS
73325: AND
73326: IFFALSE 73345
73328: GO 73330
73330: DISABLE
// begin Difficulty := Difficulty + 1 ;
73331: LD_ADDR_OWVAR 67
73335: PUSH
73336: LD_OWVAR 67
73340: PUSH
73341: LD_INT 1
73343: PLUS
73344: ST_TO_ADDR
// end ;
73345: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
73346: LD_EXP 65
73350: IFFALSE 73358
73352: PUSH
73353: LD_EXP 84
73357: AND
73358: IFFALSE 73461
73360: GO 73362
73362: DISABLE
73363: LD_INT 0
73365: PPUSH
// begin for i := 1 to 5 do
73366: LD_ADDR_VAR 0 1
73370: PUSH
73371: DOUBLE
73372: LD_INT 1
73374: DEC
73375: ST_TO_ADDR
73376: LD_INT 5
73378: PUSH
73379: FOR_TO
73380: IFFALSE 73459
// begin uc_nation := nation_nature ;
73382: LD_ADDR_OWVAR 21
73386: PUSH
73387: LD_INT 0
73389: ST_TO_ADDR
// uc_side := 0 ;
73390: LD_ADDR_OWVAR 20
73394: PUSH
73395: LD_INT 0
73397: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73398: LD_ADDR_OWVAR 29
73402: PUSH
73403: LD_INT 12
73405: PUSH
73406: LD_INT 12
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: ST_TO_ADDR
// hc_agressivity := 20 ;
73413: LD_ADDR_OWVAR 35
73417: PUSH
73418: LD_INT 20
73420: ST_TO_ADDR
// hc_class := class_tiger ;
73421: LD_ADDR_OWVAR 28
73425: PUSH
73426: LD_INT 14
73428: ST_TO_ADDR
// hc_gallery :=  ;
73429: LD_ADDR_OWVAR 33
73433: PUSH
73434: LD_STRING 
73436: ST_TO_ADDR
// hc_name :=  ;
73437: LD_ADDR_OWVAR 26
73441: PUSH
73442: LD_STRING 
73444: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
73445: CALL_OW 44
73449: PPUSH
73450: LD_INT 0
73452: PPUSH
73453: CALL_OW 51
// end ;
73457: GO 73379
73459: POP
73460: POP
// end ;
73461: PPOPN 1
73463: END
// every 0 0$1 trigger StreamModeActive and sBomb do
73464: LD_EXP 65
73468: IFFALSE 73476
73470: PUSH
73471: LD_EXP 85
73475: AND
73476: IFFALSE 73485
73478: GO 73480
73480: DISABLE
// StreamSibBomb ;
73481: CALL 73486 0 0
73485: END
// export function StreamSibBomb ; var i , x , y ; begin
73486: LD_INT 0
73488: PPUSH
73489: PPUSH
73490: PPUSH
73491: PPUSH
// result := false ;
73492: LD_ADDR_VAR 0 1
73496: PUSH
73497: LD_INT 0
73499: ST_TO_ADDR
// for i := 1 to 16 do
73500: LD_ADDR_VAR 0 2
73504: PUSH
73505: DOUBLE
73506: LD_INT 1
73508: DEC
73509: ST_TO_ADDR
73510: LD_INT 16
73512: PUSH
73513: FOR_TO
73514: IFFALSE 73713
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73516: LD_ADDR_VAR 0 3
73520: PUSH
73521: LD_INT 10
73523: PUSH
73524: LD_INT 20
73526: PUSH
73527: LD_INT 30
73529: PUSH
73530: LD_INT 40
73532: PUSH
73533: LD_INT 50
73535: PUSH
73536: LD_INT 60
73538: PUSH
73539: LD_INT 70
73541: PUSH
73542: LD_INT 80
73544: PUSH
73545: LD_INT 90
73547: PUSH
73548: LD_INT 100
73550: PUSH
73551: LD_INT 110
73553: PUSH
73554: LD_INT 120
73556: PUSH
73557: LD_INT 130
73559: PUSH
73560: LD_INT 140
73562: PUSH
73563: LD_INT 150
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 1
73585: PPUSH
73586: LD_INT 15
73588: PPUSH
73589: CALL_OW 12
73593: ARRAY
73594: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
73595: LD_ADDR_VAR 0 4
73599: PUSH
73600: LD_INT 10
73602: PUSH
73603: LD_INT 20
73605: PUSH
73606: LD_INT 30
73608: PUSH
73609: LD_INT 40
73611: PUSH
73612: LD_INT 50
73614: PUSH
73615: LD_INT 60
73617: PUSH
73618: LD_INT 70
73620: PUSH
73621: LD_INT 80
73623: PUSH
73624: LD_INT 90
73626: PUSH
73627: LD_INT 100
73629: PUSH
73630: LD_INT 110
73632: PUSH
73633: LD_INT 120
73635: PUSH
73636: LD_INT 130
73638: PUSH
73639: LD_INT 140
73641: PUSH
73642: LD_INT 150
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: PPUSH
73665: LD_INT 15
73667: PPUSH
73668: CALL_OW 12
73672: ARRAY
73673: ST_TO_ADDR
// if ValidHex ( x , y ) then
73674: LD_VAR 0 3
73678: PPUSH
73679: LD_VAR 0 4
73683: PPUSH
73684: CALL_OW 488
73688: IFFALSE 73711
// begin result := [ x , y ] ;
73690: LD_ADDR_VAR 0 1
73694: PUSH
73695: LD_VAR 0 3
73699: PUSH
73700: LD_VAR 0 4
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: ST_TO_ADDR
// break ;
73709: GO 73713
// end ; end ;
73711: GO 73513
73713: POP
73714: POP
// if result then
73715: LD_VAR 0 1
73719: IFFALSE 73779
// begin ToLua ( playSibBomb() ) ;
73721: LD_STRING playSibBomb()
73723: PPUSH
73724: CALL_OW 559
// wait ( 0 0$14 ) ;
73728: LD_INT 490
73730: PPUSH
73731: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
73735: LD_VAR 0 1
73739: PUSH
73740: LD_INT 1
73742: ARRAY
73743: PPUSH
73744: LD_VAR 0 1
73748: PUSH
73749: LD_INT 2
73751: ARRAY
73752: PPUSH
73753: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
73757: LD_VAR 0 1
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: PPUSH
73766: LD_VAR 0 1
73770: PUSH
73771: LD_INT 2
73773: ARRAY
73774: PPUSH
73775: CALL_OW 429
// end ; end ;
73779: LD_VAR 0 1
73783: RET
// every 0 0$1 trigger StreamModeActive and sReset do
73784: LD_EXP 65
73788: IFFALSE 73796
73790: PUSH
73791: LD_EXP 87
73795: AND
73796: IFFALSE 73808
73798: GO 73800
73800: DISABLE
// YouLost (  ) ;
73801: LD_STRING 
73803: PPUSH
73804: CALL_OW 104
73808: END
// every 0 0$1 trigger StreamModeActive and sFog do
73809: LD_EXP 65
73813: IFFALSE 73821
73815: PUSH
73816: LD_EXP 86
73820: AND
73821: IFFALSE 73835
73823: GO 73825
73825: DISABLE
// FogOff ( your_side ) ;
73826: LD_OWVAR 2
73830: PPUSH
73831: CALL_OW 344
73835: END
// every 0 0$1 trigger StreamModeActive and sSun do
73836: LD_EXP 65
73840: IFFALSE 73848
73842: PUSH
73843: LD_EXP 88
73847: AND
73848: IFFALSE 73876
73850: GO 73852
73852: DISABLE
// begin solar_recharge_percent := 0 ;
73853: LD_ADDR_OWVAR 79
73857: PUSH
73858: LD_INT 0
73860: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73861: LD_INT 10500
73863: PPUSH
73864: CALL_OW 67
// solar_recharge_percent := 100 ;
73868: LD_ADDR_OWVAR 79
73872: PUSH
73873: LD_INT 100
73875: ST_TO_ADDR
// end ;
73876: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73877: LD_EXP 65
73881: IFFALSE 73889
73883: PUSH
73884: LD_EXP 89
73888: AND
73889: IFFALSE 74128
73891: GO 73893
73893: DISABLE
73894: LD_INT 0
73896: PPUSH
73897: PPUSH
73898: PPUSH
// begin tmp := [ ] ;
73899: LD_ADDR_VAR 0 3
73903: PUSH
73904: EMPTY
73905: ST_TO_ADDR
// for i := 1 to 6 do
73906: LD_ADDR_VAR 0 1
73910: PUSH
73911: DOUBLE
73912: LD_INT 1
73914: DEC
73915: ST_TO_ADDR
73916: LD_INT 6
73918: PUSH
73919: FOR_TO
73920: IFFALSE 74025
// begin uc_nation := nation_nature ;
73922: LD_ADDR_OWVAR 21
73926: PUSH
73927: LD_INT 0
73929: ST_TO_ADDR
// uc_side := 0 ;
73930: LD_ADDR_OWVAR 20
73934: PUSH
73935: LD_INT 0
73937: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73938: LD_ADDR_OWVAR 29
73942: PUSH
73943: LD_INT 12
73945: PUSH
73946: LD_INT 12
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: ST_TO_ADDR
// hc_agressivity := 20 ;
73953: LD_ADDR_OWVAR 35
73957: PUSH
73958: LD_INT 20
73960: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73961: LD_ADDR_OWVAR 28
73965: PUSH
73966: LD_INT 17
73968: ST_TO_ADDR
// hc_gallery :=  ;
73969: LD_ADDR_OWVAR 33
73973: PUSH
73974: LD_STRING 
73976: ST_TO_ADDR
// hc_name :=  ;
73977: LD_ADDR_OWVAR 26
73981: PUSH
73982: LD_STRING 
73984: ST_TO_ADDR
// un := CreateHuman ;
73985: LD_ADDR_VAR 0 2
73989: PUSH
73990: CALL_OW 44
73994: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73995: LD_VAR 0 2
73999: PPUSH
74000: LD_INT 1
74002: PPUSH
74003: CALL_OW 51
// tmp := tmp ^ un ;
74007: LD_ADDR_VAR 0 3
74011: PUSH
74012: LD_VAR 0 3
74016: PUSH
74017: LD_VAR 0 2
74021: ADD
74022: ST_TO_ADDR
// end ;
74023: GO 73919
74025: POP
74026: POP
// repeat wait ( 0 0$1 ) ;
74027: LD_INT 35
74029: PPUSH
74030: CALL_OW 67
// for un in tmp do
74034: LD_ADDR_VAR 0 2
74038: PUSH
74039: LD_VAR 0 3
74043: PUSH
74044: FOR_IN
74045: IFFALSE 74119
// begin if IsDead ( un ) then
74047: LD_VAR 0 2
74051: PPUSH
74052: CALL_OW 301
74056: IFFALSE 74076
// begin tmp := tmp diff un ;
74058: LD_ADDR_VAR 0 3
74062: PUSH
74063: LD_VAR 0 3
74067: PUSH
74068: LD_VAR 0 2
74072: DIFF
74073: ST_TO_ADDR
// continue ;
74074: GO 74044
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74076: LD_VAR 0 2
74080: PPUSH
74081: LD_INT 3
74083: PUSH
74084: LD_INT 22
74086: PUSH
74087: LD_INT 0
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PPUSH
74098: CALL_OW 69
74102: PPUSH
74103: LD_VAR 0 2
74107: PPUSH
74108: CALL_OW 74
74112: PPUSH
74113: CALL_OW 115
// end ;
74117: GO 74044
74119: POP
74120: POP
// until not tmp ;
74121: LD_VAR 0 3
74125: NOT
74126: IFFALSE 74027
// end ;
74128: PPOPN 3
74130: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74131: LD_EXP 65
74135: IFFALSE 74143
74137: PUSH
74138: LD_EXP 90
74142: AND
74143: IFFALSE 74197
74145: GO 74147
74147: DISABLE
// begin ToLua ( displayTroll(); ) ;
74148: LD_STRING displayTroll();
74150: PPUSH
74151: CALL_OW 559
// wait ( 3 3$00 ) ;
74155: LD_INT 6300
74157: PPUSH
74158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74162: LD_STRING hideTroll();
74164: PPUSH
74165: CALL_OW 559
// wait ( 1 1$00 ) ;
74169: LD_INT 2100
74171: PPUSH
74172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74176: LD_STRING displayTroll();
74178: PPUSH
74179: CALL_OW 559
// wait ( 1 1$00 ) ;
74183: LD_INT 2100
74185: PPUSH
74186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74190: LD_STRING hideTroll();
74192: PPUSH
74193: CALL_OW 559
// end ;
74197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74198: LD_EXP 65
74202: IFFALSE 74210
74204: PUSH
74205: LD_EXP 91
74209: AND
74210: IFFALSE 74273
74212: GO 74214
74214: DISABLE
74215: LD_INT 0
74217: PPUSH
// begin p := 0 ;
74218: LD_ADDR_VAR 0 1
74222: PUSH
74223: LD_INT 0
74225: ST_TO_ADDR
// repeat game_speed := 1 ;
74226: LD_ADDR_OWVAR 65
74230: PUSH
74231: LD_INT 1
74233: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74234: LD_INT 35
74236: PPUSH
74237: CALL_OW 67
// p := p + 1 ;
74241: LD_ADDR_VAR 0 1
74245: PUSH
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 1
74253: PLUS
74254: ST_TO_ADDR
// until p >= 60 ;
74255: LD_VAR 0 1
74259: PUSH
74260: LD_INT 60
74262: GREATEREQUAL
74263: IFFALSE 74226
// game_speed := 4 ;
74265: LD_ADDR_OWVAR 65
74269: PUSH
74270: LD_INT 4
74272: ST_TO_ADDR
// end ;
74273: PPOPN 1
74275: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74276: LD_EXP 65
74280: IFFALSE 74288
74282: PUSH
74283: LD_EXP 92
74287: AND
74288: IFFALSE 74434
74290: GO 74292
74292: DISABLE
74293: LD_INT 0
74295: PPUSH
74296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74297: LD_ADDR_VAR 0 1
74301: PUSH
74302: LD_INT 22
74304: PUSH
74305: LD_OWVAR 2
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 2
74316: PUSH
74317: LD_INT 30
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 30
74329: PUSH
74330: LD_INT 1
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: LIST
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: PPUSH
74346: CALL_OW 69
74350: ST_TO_ADDR
// if not depot then
74351: LD_VAR 0 1
74355: NOT
74356: IFFALSE 74360
// exit ;
74358: GO 74434
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
74360: LD_ADDR_VAR 0 2
74364: PUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_INT 1
74372: PPUSH
74373: LD_VAR 0 1
74377: PPUSH
74378: CALL_OW 12
74382: ARRAY
74383: PPUSH
74384: CALL_OW 274
74388: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
74389: LD_VAR 0 2
74393: PPUSH
74394: LD_INT 1
74396: PPUSH
74397: LD_INT 0
74399: PPUSH
74400: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
74404: LD_VAR 0 2
74408: PPUSH
74409: LD_INT 2
74411: PPUSH
74412: LD_INT 0
74414: PPUSH
74415: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
74419: LD_VAR 0 2
74423: PPUSH
74424: LD_INT 3
74426: PPUSH
74427: LD_INT 0
74429: PPUSH
74430: CALL_OW 277
// end ;
74434: PPOPN 2
74436: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
74437: LD_EXP 65
74441: IFFALSE 74449
74443: PUSH
74444: LD_EXP 93
74448: AND
74449: IFFALSE 74546
74451: GO 74453
74453: DISABLE
74454: LD_INT 0
74456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74457: LD_ADDR_VAR 0 1
74461: PUSH
74462: LD_INT 22
74464: PUSH
74465: LD_OWVAR 2
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: PUSH
74474: LD_INT 21
74476: PUSH
74477: LD_INT 1
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 3
74486: PUSH
74487: LD_INT 23
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: PPUSH
74506: CALL_OW 69
74510: ST_TO_ADDR
// if not tmp then
74511: LD_VAR 0 1
74515: NOT
74516: IFFALSE 74520
// exit ;
74518: GO 74546
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
74520: LD_VAR 0 1
74524: PUSH
74525: LD_INT 1
74527: PPUSH
74528: LD_VAR 0 1
74532: PPUSH
74533: CALL_OW 12
74537: ARRAY
74538: PPUSH
74539: LD_INT 200
74541: PPUSH
74542: CALL_OW 234
// end ;
74546: PPOPN 1
74548: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
74549: LD_EXP 65
74553: IFFALSE 74561
74555: PUSH
74556: LD_EXP 94
74560: AND
74561: IFFALSE 74640
74563: GO 74565
74565: DISABLE
74566: LD_INT 0
74568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
74569: LD_ADDR_VAR 0 1
74573: PUSH
74574: LD_INT 22
74576: PUSH
74577: LD_OWVAR 2
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 21
74588: PUSH
74589: LD_INT 2
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PPUSH
74600: CALL_OW 69
74604: ST_TO_ADDR
// if not tmp then
74605: LD_VAR 0 1
74609: NOT
74610: IFFALSE 74614
// exit ;
74612: GO 74640
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
74614: LD_VAR 0 1
74618: PUSH
74619: LD_INT 1
74621: PPUSH
74622: LD_VAR 0 1
74626: PPUSH
74627: CALL_OW 12
74631: ARRAY
74632: PPUSH
74633: LD_INT 60
74635: PPUSH
74636: CALL_OW 234
// end ;
74640: PPOPN 1
74642: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
74643: LD_EXP 65
74647: IFFALSE 74655
74649: PUSH
74650: LD_EXP 95
74654: AND
74655: IFFALSE 74754
74657: GO 74659
74659: DISABLE
74660: LD_INT 0
74662: PPUSH
74663: PPUSH
// begin enable ;
74664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
74665: LD_ADDR_VAR 0 1
74669: PUSH
74670: LD_INT 22
74672: PUSH
74673: LD_OWVAR 2
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: LD_INT 61
74684: PUSH
74685: EMPTY
74686: LIST
74687: PUSH
74688: LD_INT 33
74690: PUSH
74691: LD_INT 2
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: PPUSH
74703: CALL_OW 69
74707: ST_TO_ADDR
// if not tmp then
74708: LD_VAR 0 1
74712: NOT
74713: IFFALSE 74717
// exit ;
74715: GO 74754
// for i in tmp do
74717: LD_ADDR_VAR 0 2
74721: PUSH
74722: LD_VAR 0 1
74726: PUSH
74727: FOR_IN
74728: IFFALSE 74752
// if IsControledBy ( i ) then
74730: LD_VAR 0 2
74734: PPUSH
74735: CALL_OW 312
74739: IFFALSE 74750
// ComUnlink ( i ) ;
74741: LD_VAR 0 2
74745: PPUSH
74746: CALL_OW 136
74750: GO 74727
74752: POP
74753: POP
// end ;
74754: PPOPN 2
74756: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
74757: LD_EXP 65
74761: IFFALSE 74769
74763: PUSH
74764: LD_EXP 96
74768: AND
74769: IFFALSE 74909
74771: GO 74773
74773: DISABLE
74774: LD_INT 0
74776: PPUSH
74777: PPUSH
// begin ToLua ( displayPowell(); ) ;
74778: LD_STRING displayPowell();
74780: PPUSH
74781: CALL_OW 559
// uc_side := 0 ;
74785: LD_ADDR_OWVAR 20
74789: PUSH
74790: LD_INT 0
74792: ST_TO_ADDR
// uc_nation := 2 ;
74793: LD_ADDR_OWVAR 21
74797: PUSH
74798: LD_INT 2
74800: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
74801: LD_ADDR_OWVAR 37
74805: PUSH
74806: LD_INT 14
74808: ST_TO_ADDR
// vc_engine := engine_siberite ;
74809: LD_ADDR_OWVAR 39
74813: PUSH
74814: LD_INT 3
74816: ST_TO_ADDR
// vc_control := control_apeman ;
74817: LD_ADDR_OWVAR 38
74821: PUSH
74822: LD_INT 5
74824: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
74825: LD_ADDR_OWVAR 40
74829: PUSH
74830: LD_INT 29
74832: ST_TO_ADDR
// un := CreateVehicle ;
74833: LD_ADDR_VAR 0 2
74837: PUSH
74838: CALL_OW 45
74842: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74843: LD_VAR 0 2
74847: PPUSH
74848: LD_INT 1
74850: PPUSH
74851: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74855: LD_INT 35
74857: PPUSH
74858: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74862: LD_VAR 0 2
74866: PPUSH
74867: LD_INT 22
74869: PUSH
74870: LD_OWVAR 2
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PPUSH
74879: CALL_OW 69
74883: PPUSH
74884: LD_VAR 0 2
74888: PPUSH
74889: CALL_OW 74
74893: PPUSH
74894: CALL_OW 115
// until IsDead ( un ) ;
74898: LD_VAR 0 2
74902: PPUSH
74903: CALL_OW 301
74907: IFFALSE 74855
// end ;
74909: PPOPN 2
74911: END
// every 0 0$1 trigger StreamModeActive and sStu do
74912: LD_EXP 65
74916: IFFALSE 74924
74918: PUSH
74919: LD_EXP 104
74923: AND
74924: IFFALSE 74940
74926: GO 74928
74928: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74929: LD_STRING displayStucuk();
74931: PPUSH
74932: CALL_OW 559
// ResetFog ;
74936: CALL_OW 335
// end ;
74940: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74941: LD_EXP 65
74945: IFFALSE 74953
74947: PUSH
74948: LD_EXP 97
74952: AND
74953: IFFALSE 75094
74955: GO 74957
74957: DISABLE
74958: LD_INT 0
74960: PPUSH
74961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74962: LD_ADDR_VAR 0 2
74966: PUSH
74967: LD_INT 22
74969: PUSH
74970: LD_OWVAR 2
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 21
74981: PUSH
74982: LD_INT 1
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PPUSH
74993: CALL_OW 69
74997: ST_TO_ADDR
// if not tmp then
74998: LD_VAR 0 2
75002: NOT
75003: IFFALSE 75007
// exit ;
75005: GO 75094
// un := tmp [ rand ( 1 , tmp ) ] ;
75007: LD_ADDR_VAR 0 1
75011: PUSH
75012: LD_VAR 0 2
75016: PUSH
75017: LD_INT 1
75019: PPUSH
75020: LD_VAR 0 2
75024: PPUSH
75025: CALL_OW 12
75029: ARRAY
75030: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75031: LD_VAR 0 1
75035: PPUSH
75036: LD_INT 0
75038: PPUSH
75039: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75043: LD_VAR 0 1
75047: PPUSH
75048: LD_OWVAR 3
75052: PUSH
75053: LD_VAR 0 1
75057: DIFF
75058: PPUSH
75059: LD_VAR 0 1
75063: PPUSH
75064: CALL_OW 74
75068: PPUSH
75069: CALL_OW 115
// wait ( 0 0$20 ) ;
75073: LD_INT 700
75075: PPUSH
75076: CALL_OW 67
// SetSide ( un , your_side ) ;
75080: LD_VAR 0 1
75084: PPUSH
75085: LD_OWVAR 2
75089: PPUSH
75090: CALL_OW 235
// end ;
75094: PPOPN 2
75096: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75097: LD_EXP 65
75101: IFFALSE 75109
75103: PUSH
75104: LD_EXP 98
75108: AND
75109: IFFALSE 75215
75111: GO 75113
75113: DISABLE
75114: LD_INT 0
75116: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75117: LD_ADDR_VAR 0 1
75121: PUSH
75122: LD_INT 22
75124: PUSH
75125: LD_OWVAR 2
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 2
75136: PUSH
75137: LD_INT 30
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 30
75149: PUSH
75150: LD_INT 1
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: LIST
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PPUSH
75166: CALL_OW 69
75170: ST_TO_ADDR
// if not depot then
75171: LD_VAR 0 1
75175: NOT
75176: IFFALSE 75180
// exit ;
75178: GO 75215
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 1
75187: ARRAY
75188: PPUSH
75189: CALL_OW 250
75193: PPUSH
75194: LD_VAR 0 1
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PPUSH
75203: CALL_OW 251
75207: PPUSH
75208: LD_INT 70
75210: PPUSH
75211: CALL_OW 495
// end ;
75215: PPOPN 1
75217: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75218: LD_EXP 65
75222: IFFALSE 75230
75224: PUSH
75225: LD_EXP 99
75229: AND
75230: IFFALSE 75441
75232: GO 75234
75234: DISABLE
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
75239: PPUSH
75240: PPUSH
75241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75242: LD_ADDR_VAR 0 5
75246: PUSH
75247: LD_INT 22
75249: PUSH
75250: LD_OWVAR 2
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 21
75261: PUSH
75262: LD_INT 1
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PPUSH
75273: CALL_OW 69
75277: ST_TO_ADDR
// if not tmp then
75278: LD_VAR 0 5
75282: NOT
75283: IFFALSE 75287
// exit ;
75285: GO 75441
// for i in tmp do
75287: LD_ADDR_VAR 0 1
75291: PUSH
75292: LD_VAR 0 5
75296: PUSH
75297: FOR_IN
75298: IFFALSE 75439
// begin d := rand ( 0 , 5 ) ;
75300: LD_ADDR_VAR 0 4
75304: PUSH
75305: LD_INT 0
75307: PPUSH
75308: LD_INT 5
75310: PPUSH
75311: CALL_OW 12
75315: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
75316: LD_ADDR_VAR 0 2
75320: PUSH
75321: LD_VAR 0 1
75325: PPUSH
75326: CALL_OW 250
75330: PPUSH
75331: LD_VAR 0 4
75335: PPUSH
75336: LD_INT 3
75338: PPUSH
75339: LD_INT 12
75341: PPUSH
75342: CALL_OW 12
75346: PPUSH
75347: CALL_OW 272
75351: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
75352: LD_ADDR_VAR 0 3
75356: PUSH
75357: LD_VAR 0 1
75361: PPUSH
75362: CALL_OW 251
75366: PPUSH
75367: LD_VAR 0 4
75371: PPUSH
75372: LD_INT 3
75374: PPUSH
75375: LD_INT 12
75377: PPUSH
75378: CALL_OW 12
75382: PPUSH
75383: CALL_OW 273
75387: ST_TO_ADDR
// if ValidHex ( x , y ) then
75388: LD_VAR 0 2
75392: PPUSH
75393: LD_VAR 0 3
75397: PPUSH
75398: CALL_OW 488
75402: IFFALSE 75437
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
75404: LD_VAR 0 1
75408: PPUSH
75409: LD_VAR 0 2
75413: PPUSH
75414: LD_VAR 0 3
75418: PPUSH
75419: LD_INT 3
75421: PPUSH
75422: LD_INT 6
75424: PPUSH
75425: CALL_OW 12
75429: PPUSH
75430: LD_INT 1
75432: PPUSH
75433: CALL_OW 483
// end ;
75437: GO 75297
75439: POP
75440: POP
// end ;
75441: PPOPN 5
75443: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
75444: LD_EXP 65
75448: IFFALSE 75456
75450: PUSH
75451: LD_EXP 100
75455: AND
75456: IFFALSE 75550
75458: GO 75460
75460: DISABLE
75461: LD_INT 0
75463: PPUSH
75464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
75465: LD_ADDR_VAR 0 2
75469: PUSH
75470: LD_INT 22
75472: PUSH
75473: LD_OWVAR 2
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 32
75484: PUSH
75485: LD_INT 1
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 21
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: PPUSH
75507: CALL_OW 69
75511: ST_TO_ADDR
// if not tmp then
75512: LD_VAR 0 2
75516: NOT
75517: IFFALSE 75521
// exit ;
75519: GO 75550
// for i in tmp do
75521: LD_ADDR_VAR 0 1
75525: PUSH
75526: LD_VAR 0 2
75530: PUSH
75531: FOR_IN
75532: IFFALSE 75548
// SetFuel ( i , 0 ) ;
75534: LD_VAR 0 1
75538: PPUSH
75539: LD_INT 0
75541: PPUSH
75542: CALL_OW 240
75546: GO 75531
75548: POP
75549: POP
// end ;
75550: PPOPN 2
75552: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
75553: LD_EXP 65
75557: IFFALSE 75565
75559: PUSH
75560: LD_EXP 101
75564: AND
75565: IFFALSE 75631
75567: GO 75569
75569: DISABLE
75570: LD_INT 0
75572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75573: LD_ADDR_VAR 0 1
75577: PUSH
75578: LD_INT 22
75580: PUSH
75581: LD_OWVAR 2
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 30
75592: PUSH
75593: LD_INT 29
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: PPUSH
75604: CALL_OW 69
75608: ST_TO_ADDR
// if not tmp then
75609: LD_VAR 0 1
75613: NOT
75614: IFFALSE 75618
// exit ;
75616: GO 75631
// DestroyUnit ( tmp [ 1 ] ) ;
75618: LD_VAR 0 1
75622: PUSH
75623: LD_INT 1
75625: ARRAY
75626: PPUSH
75627: CALL_OW 65
// end ;
75631: PPOPN 1
75633: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
75634: LD_EXP 65
75638: IFFALSE 75646
75640: PUSH
75641: LD_EXP 103
75645: AND
75646: IFFALSE 75775
75648: GO 75650
75650: DISABLE
75651: LD_INT 0
75653: PPUSH
// begin uc_side := 0 ;
75654: LD_ADDR_OWVAR 20
75658: PUSH
75659: LD_INT 0
75661: ST_TO_ADDR
// uc_nation := nation_arabian ;
75662: LD_ADDR_OWVAR 21
75666: PUSH
75667: LD_INT 2
75669: ST_TO_ADDR
// hc_gallery :=  ;
75670: LD_ADDR_OWVAR 33
75674: PUSH
75675: LD_STRING 
75677: ST_TO_ADDR
// hc_name :=  ;
75678: LD_ADDR_OWVAR 26
75682: PUSH
75683: LD_STRING 
75685: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
75686: LD_INT 1
75688: PPUSH
75689: LD_INT 11
75691: PPUSH
75692: LD_INT 10
75694: PPUSH
75695: CALL_OW 380
// un := CreateHuman ;
75699: LD_ADDR_VAR 0 1
75703: PUSH
75704: CALL_OW 44
75708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75709: LD_VAR 0 1
75713: PPUSH
75714: LD_INT 1
75716: PPUSH
75717: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75721: LD_INT 35
75723: PPUSH
75724: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75728: LD_VAR 0 1
75732: PPUSH
75733: LD_INT 22
75735: PUSH
75736: LD_OWVAR 2
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PPUSH
75745: CALL_OW 69
75749: PPUSH
75750: LD_VAR 0 1
75754: PPUSH
75755: CALL_OW 74
75759: PPUSH
75760: CALL_OW 115
// until IsDead ( un ) ;
75764: LD_VAR 0 1
75768: PPUSH
75769: CALL_OW 301
75773: IFFALSE 75721
// end ;
75775: PPOPN 1
75777: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
75778: LD_EXP 65
75782: IFFALSE 75790
75784: PUSH
75785: LD_EXP 105
75789: AND
75790: IFFALSE 75802
75792: GO 75794
75794: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
75795: LD_STRING earthquake(getX(game), 0, 32)
75797: PPUSH
75798: CALL_OW 559
75802: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
75803: LD_EXP 65
75807: IFFALSE 75815
75809: PUSH
75810: LD_EXP 106
75814: AND
75815: IFFALSE 75906
75817: GO 75819
75819: DISABLE
75820: LD_INT 0
75822: PPUSH
// begin enable ;
75823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
75824: LD_ADDR_VAR 0 1
75828: PUSH
75829: LD_INT 22
75831: PUSH
75832: LD_OWVAR 2
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 21
75843: PUSH
75844: LD_INT 2
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 33
75853: PUSH
75854: LD_INT 3
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: LIST
75865: PPUSH
75866: CALL_OW 69
75870: ST_TO_ADDR
// if not tmp then
75871: LD_VAR 0 1
75875: NOT
75876: IFFALSE 75880
// exit ;
75878: GO 75906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75880: LD_VAR 0 1
75884: PUSH
75885: LD_INT 1
75887: PPUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: CALL_OW 12
75897: ARRAY
75898: PPUSH
75899: LD_INT 1
75901: PPUSH
75902: CALL_OW 234
// end ;
75906: PPOPN 1
75908: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75909: LD_EXP 65
75913: IFFALSE 75921
75915: PUSH
75916: LD_EXP 107
75920: AND
75921: IFFALSE 76062
75923: GO 75925
75925: DISABLE
75926: LD_INT 0
75928: PPUSH
75929: PPUSH
75930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75931: LD_ADDR_VAR 0 3
75935: PUSH
75936: LD_INT 22
75938: PUSH
75939: LD_OWVAR 2
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_INT 25
75950: PUSH
75951: LD_INT 1
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PPUSH
75962: CALL_OW 69
75966: ST_TO_ADDR
// if not tmp then
75967: LD_VAR 0 3
75971: NOT
75972: IFFALSE 75976
// exit ;
75974: GO 76062
// un := tmp [ rand ( 1 , tmp ) ] ;
75976: LD_ADDR_VAR 0 2
75980: PUSH
75981: LD_VAR 0 3
75985: PUSH
75986: LD_INT 1
75988: PPUSH
75989: LD_VAR 0 3
75993: PPUSH
75994: CALL_OW 12
75998: ARRAY
75999: ST_TO_ADDR
// if Crawls ( un ) then
76000: LD_VAR 0 2
76004: PPUSH
76005: CALL_OW 318
76009: IFFALSE 76020
// ComWalk ( un ) ;
76011: LD_VAR 0 2
76015: PPUSH
76016: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76020: LD_VAR 0 2
76024: PPUSH
76025: LD_INT 9
76027: PPUSH
76028: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76032: LD_INT 28
76034: PPUSH
76035: LD_OWVAR 2
76039: PPUSH
76040: LD_INT 2
76042: PPUSH
76043: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76047: LD_INT 29
76049: PPUSH
76050: LD_OWVAR 2
76054: PPUSH
76055: LD_INT 2
76057: PPUSH
76058: CALL_OW 322
// end ;
76062: PPOPN 3
76064: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76065: LD_EXP 65
76069: IFFALSE 76077
76071: PUSH
76072: LD_EXP 108
76076: AND
76077: IFFALSE 76188
76079: GO 76081
76081: DISABLE
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
76086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76087: LD_ADDR_VAR 0 3
76091: PUSH
76092: LD_INT 22
76094: PUSH
76095: LD_OWVAR 2
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 25
76106: PUSH
76107: LD_INT 1
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PPUSH
76118: CALL_OW 69
76122: ST_TO_ADDR
// if not tmp then
76123: LD_VAR 0 3
76127: NOT
76128: IFFALSE 76132
// exit ;
76130: GO 76188
// un := tmp [ rand ( 1 , tmp ) ] ;
76132: LD_ADDR_VAR 0 2
76136: PUSH
76137: LD_VAR 0 3
76141: PUSH
76142: LD_INT 1
76144: PPUSH
76145: LD_VAR 0 3
76149: PPUSH
76150: CALL_OW 12
76154: ARRAY
76155: ST_TO_ADDR
// if Crawls ( un ) then
76156: LD_VAR 0 2
76160: PPUSH
76161: CALL_OW 318
76165: IFFALSE 76176
// ComWalk ( un ) ;
76167: LD_VAR 0 2
76171: PPUSH
76172: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76176: LD_VAR 0 2
76180: PPUSH
76181: LD_INT 8
76183: PPUSH
76184: CALL_OW 336
// end ;
76188: PPOPN 3
76190: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76191: LD_EXP 65
76195: IFFALSE 76203
76197: PUSH
76198: LD_EXP 109
76202: AND
76203: IFFALSE 76347
76205: GO 76207
76207: DISABLE
76208: LD_INT 0
76210: PPUSH
76211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76212: LD_ADDR_VAR 0 2
76216: PUSH
76217: LD_INT 22
76219: PUSH
76220: LD_OWVAR 2
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 21
76231: PUSH
76232: LD_INT 2
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_INT 2
76241: PUSH
76242: LD_INT 34
76244: PUSH
76245: LD_INT 12
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: LD_INT 34
76254: PUSH
76255: LD_INT 51
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 34
76264: PUSH
76265: LD_INT 32
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: LIST
76282: PPUSH
76283: CALL_OW 69
76287: ST_TO_ADDR
// if not tmp then
76288: LD_VAR 0 2
76292: NOT
76293: IFFALSE 76297
// exit ;
76295: GO 76347
// for i in tmp do
76297: LD_ADDR_VAR 0 1
76301: PUSH
76302: LD_VAR 0 2
76306: PUSH
76307: FOR_IN
76308: IFFALSE 76345
// if GetCargo ( i , mat_artifact ) = 0 then
76310: LD_VAR 0 1
76314: PPUSH
76315: LD_INT 4
76317: PPUSH
76318: CALL_OW 289
76322: PUSH
76323: LD_INT 0
76325: EQUAL
76326: IFFALSE 76343
// SetCargo ( i , mat_siberit , 100 ) ;
76328: LD_VAR 0 1
76332: PPUSH
76333: LD_INT 3
76335: PPUSH
76336: LD_INT 100
76338: PPUSH
76339: CALL_OW 290
76343: GO 76307
76345: POP
76346: POP
// end ;
76347: PPOPN 2
76349: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
76350: LD_EXP 65
76354: IFFALSE 76362
76356: PUSH
76357: LD_EXP 110
76361: AND
76362: IFFALSE 76545
76364: GO 76366
76366: DISABLE
76367: LD_INT 0
76369: PPUSH
76370: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76371: LD_ADDR_VAR 0 2
76375: PUSH
76376: LD_INT 22
76378: PUSH
76379: LD_OWVAR 2
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PPUSH
76388: CALL_OW 69
76392: ST_TO_ADDR
// if not tmp then
76393: LD_VAR 0 2
76397: NOT
76398: IFFALSE 76402
// exit ;
76400: GO 76545
// for i := 1 to 2 do
76402: LD_ADDR_VAR 0 1
76406: PUSH
76407: DOUBLE
76408: LD_INT 1
76410: DEC
76411: ST_TO_ADDR
76412: LD_INT 2
76414: PUSH
76415: FOR_TO
76416: IFFALSE 76543
// begin uc_side := your_side ;
76418: LD_ADDR_OWVAR 20
76422: PUSH
76423: LD_OWVAR 2
76427: ST_TO_ADDR
// uc_nation := nation_american ;
76428: LD_ADDR_OWVAR 21
76432: PUSH
76433: LD_INT 1
76435: ST_TO_ADDR
// vc_chassis := us_morphling ;
76436: LD_ADDR_OWVAR 37
76440: PUSH
76441: LD_INT 5
76443: ST_TO_ADDR
// vc_engine := engine_siberite ;
76444: LD_ADDR_OWVAR 39
76448: PUSH
76449: LD_INT 3
76451: ST_TO_ADDR
// vc_control := control_computer ;
76452: LD_ADDR_OWVAR 38
76456: PUSH
76457: LD_INT 3
76459: ST_TO_ADDR
// vc_weapon := us_double_laser ;
76460: LD_ADDR_OWVAR 40
76464: PUSH
76465: LD_INT 10
76467: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
76468: LD_VAR 0 2
76472: PUSH
76473: LD_INT 1
76475: ARRAY
76476: PPUSH
76477: CALL_OW 310
76481: NOT
76482: IFFALSE 76529
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
76484: CALL_OW 45
76488: PPUSH
76489: LD_VAR 0 2
76493: PUSH
76494: LD_INT 1
76496: ARRAY
76497: PPUSH
76498: CALL_OW 250
76502: PPUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 1
76510: ARRAY
76511: PPUSH
76512: CALL_OW 251
76516: PPUSH
76517: LD_INT 12
76519: PPUSH
76520: LD_INT 1
76522: PPUSH
76523: CALL_OW 50
76527: GO 76541
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
76529: CALL_OW 45
76533: PPUSH
76534: LD_INT 1
76536: PPUSH
76537: CALL_OW 51
// end ;
76541: GO 76415
76543: POP
76544: POP
// end ;
76545: PPOPN 2
76547: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
76548: LD_EXP 65
76552: IFFALSE 76560
76554: PUSH
76555: LD_EXP 111
76559: AND
76560: IFFALSE 76782
76562: GO 76564
76564: DISABLE
76565: LD_INT 0
76567: PPUSH
76568: PPUSH
76569: PPUSH
76570: PPUSH
76571: PPUSH
76572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76573: LD_ADDR_VAR 0 6
76577: PUSH
76578: LD_INT 22
76580: PUSH
76581: LD_OWVAR 2
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 21
76592: PUSH
76593: LD_INT 1
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: LD_INT 3
76602: PUSH
76603: LD_INT 23
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: LIST
76621: PPUSH
76622: CALL_OW 69
76626: ST_TO_ADDR
// if not tmp then
76627: LD_VAR 0 6
76631: NOT
76632: IFFALSE 76636
// exit ;
76634: GO 76782
// s1 := rand ( 1 , 4 ) ;
76636: LD_ADDR_VAR 0 2
76640: PUSH
76641: LD_INT 1
76643: PPUSH
76644: LD_INT 4
76646: PPUSH
76647: CALL_OW 12
76651: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
76652: LD_ADDR_VAR 0 4
76656: PUSH
76657: LD_VAR 0 6
76661: PUSH
76662: LD_INT 1
76664: ARRAY
76665: PPUSH
76666: LD_VAR 0 2
76670: PPUSH
76671: CALL_OW 259
76675: ST_TO_ADDR
// if s1 = 1 then
76676: LD_VAR 0 2
76680: PUSH
76681: LD_INT 1
76683: EQUAL
76684: IFFALSE 76704
// s2 := rand ( 2 , 4 ) else
76686: LD_ADDR_VAR 0 3
76690: PUSH
76691: LD_INT 2
76693: PPUSH
76694: LD_INT 4
76696: PPUSH
76697: CALL_OW 12
76701: ST_TO_ADDR
76702: GO 76712
// s2 := 1 ;
76704: LD_ADDR_VAR 0 3
76708: PUSH
76709: LD_INT 1
76711: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
76712: LD_ADDR_VAR 0 5
76716: PUSH
76717: LD_VAR 0 6
76721: PUSH
76722: LD_INT 1
76724: ARRAY
76725: PPUSH
76726: LD_VAR 0 3
76730: PPUSH
76731: CALL_OW 259
76735: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
76736: LD_VAR 0 6
76740: PUSH
76741: LD_INT 1
76743: ARRAY
76744: PPUSH
76745: LD_VAR 0 2
76749: PPUSH
76750: LD_VAR 0 5
76754: PPUSH
76755: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
76759: LD_VAR 0 6
76763: PUSH
76764: LD_INT 1
76766: ARRAY
76767: PPUSH
76768: LD_VAR 0 3
76772: PPUSH
76773: LD_VAR 0 4
76777: PPUSH
76778: CALL_OW 237
// end ;
76782: PPOPN 6
76784: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
76785: LD_EXP 65
76789: IFFALSE 76797
76791: PUSH
76792: LD_EXP 112
76796: AND
76797: IFFALSE 76876
76799: GO 76801
76801: DISABLE
76802: LD_INT 0
76804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
76805: LD_ADDR_VAR 0 1
76809: PUSH
76810: LD_INT 22
76812: PUSH
76813: LD_OWVAR 2
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 30
76824: PUSH
76825: LD_INT 3
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: PPUSH
76836: CALL_OW 69
76840: ST_TO_ADDR
// if not tmp then
76841: LD_VAR 0 1
76845: NOT
76846: IFFALSE 76850
// exit ;
76848: GO 76876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76850: LD_VAR 0 1
76854: PUSH
76855: LD_INT 1
76857: PPUSH
76858: LD_VAR 0 1
76862: PPUSH
76863: CALL_OW 12
76867: ARRAY
76868: PPUSH
76869: LD_INT 1
76871: PPUSH
76872: CALL_OW 234
// end ;
76876: PPOPN 1
76878: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76879: LD_EXP 65
76883: IFFALSE 76891
76885: PUSH
76886: LD_EXP 113
76890: AND
76891: IFFALSE 77003
76893: GO 76895
76895: DISABLE
76896: LD_INT 0
76898: PPUSH
76899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76900: LD_ADDR_VAR 0 2
76904: PUSH
76905: LD_INT 22
76907: PUSH
76908: LD_OWVAR 2
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 2
76919: PUSH
76920: LD_INT 30
76922: PUSH
76923: LD_INT 27
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: PUSH
76930: LD_INT 30
76932: PUSH
76933: LD_INT 26
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: PUSH
76940: LD_INT 30
76942: PUSH
76943: LD_INT 28
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PPUSH
76960: CALL_OW 69
76964: ST_TO_ADDR
// if not tmp then
76965: LD_VAR 0 2
76969: NOT
76970: IFFALSE 76974
// exit ;
76972: GO 77003
// for i in tmp do
76974: LD_ADDR_VAR 0 1
76978: PUSH
76979: LD_VAR 0 2
76983: PUSH
76984: FOR_IN
76985: IFFALSE 77001
// SetLives ( i , 1 ) ;
76987: LD_VAR 0 1
76991: PPUSH
76992: LD_INT 1
76994: PPUSH
76995: CALL_OW 234
76999: GO 76984
77001: POP
77002: POP
// end ;
77003: PPOPN 2
77005: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77006: LD_EXP 65
77010: IFFALSE 77018
77012: PUSH
77013: LD_EXP 114
77017: AND
77018: IFFALSE 77305
77020: GO 77022
77022: DISABLE
77023: LD_INT 0
77025: PPUSH
77026: PPUSH
77027: PPUSH
// begin i := rand ( 1 , 7 ) ;
77028: LD_ADDR_VAR 0 1
77032: PUSH
77033: LD_INT 1
77035: PPUSH
77036: LD_INT 7
77038: PPUSH
77039: CALL_OW 12
77043: ST_TO_ADDR
// case i of 1 :
77044: LD_VAR 0 1
77048: PUSH
77049: LD_INT 1
77051: DOUBLE
77052: EQUAL
77053: IFTRUE 77057
77055: GO 77067
77057: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77058: LD_STRING earthquake(getX(game), 0, 32)
77060: PPUSH
77061: CALL_OW 559
77065: GO 77305
77067: LD_INT 2
77069: DOUBLE
77070: EQUAL
77071: IFTRUE 77075
77073: GO 77089
77075: POP
// begin ToLua ( displayStucuk(); ) ;
77076: LD_STRING displayStucuk();
77078: PPUSH
77079: CALL_OW 559
// ResetFog ;
77083: CALL_OW 335
// end ; 3 :
77087: GO 77305
77089: LD_INT 3
77091: DOUBLE
77092: EQUAL
77093: IFTRUE 77097
77095: GO 77201
77097: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77098: LD_ADDR_VAR 0 2
77102: PUSH
77103: LD_INT 22
77105: PUSH
77106: LD_OWVAR 2
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: PUSH
77115: LD_INT 25
77117: PUSH
77118: LD_INT 1
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PPUSH
77129: CALL_OW 69
77133: ST_TO_ADDR
// if not tmp then
77134: LD_VAR 0 2
77138: NOT
77139: IFFALSE 77143
// exit ;
77141: GO 77305
// un := tmp [ rand ( 1 , tmp ) ] ;
77143: LD_ADDR_VAR 0 3
77147: PUSH
77148: LD_VAR 0 2
77152: PUSH
77153: LD_INT 1
77155: PPUSH
77156: LD_VAR 0 2
77160: PPUSH
77161: CALL_OW 12
77165: ARRAY
77166: ST_TO_ADDR
// if Crawls ( un ) then
77167: LD_VAR 0 3
77171: PPUSH
77172: CALL_OW 318
77176: IFFALSE 77187
// ComWalk ( un ) ;
77178: LD_VAR 0 3
77182: PPUSH
77183: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77187: LD_VAR 0 3
77191: PPUSH
77192: LD_INT 8
77194: PPUSH
77195: CALL_OW 336
// end ; 4 :
77199: GO 77305
77201: LD_INT 4
77203: DOUBLE
77204: EQUAL
77205: IFTRUE 77209
77207: GO 77283
77209: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77210: LD_ADDR_VAR 0 2
77214: PUSH
77215: LD_INT 22
77217: PUSH
77218: LD_OWVAR 2
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 30
77229: PUSH
77230: LD_INT 29
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PPUSH
77241: CALL_OW 69
77245: ST_TO_ADDR
// if not tmp then
77246: LD_VAR 0 2
77250: NOT
77251: IFFALSE 77255
// exit ;
77253: GO 77305
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77255: LD_VAR 0 2
77259: PUSH
77260: LD_INT 1
77262: ARRAY
77263: PPUSH
77264: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77268: LD_VAR 0 2
77272: PUSH
77273: LD_INT 1
77275: ARRAY
77276: PPUSH
77277: CALL_OW 65
// end ; 5 .. 7 :
77281: GO 77305
77283: LD_INT 5
77285: DOUBLE
77286: GREATEREQUAL
77287: IFFALSE 77295
77289: LD_INT 7
77291: DOUBLE
77292: LESSEQUAL
77293: IFTRUE 77297
77295: GO 77304
77297: POP
// StreamSibBomb ; end ;
77298: CALL 73486 0 0
77302: GO 77305
77304: POP
// end ;
77305: PPOPN 3
77307: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77308: LD_EXP 65
77312: IFFALSE 77320
77314: PUSH
77315: LD_EXP 115
77319: AND
77320: IFFALSE 77476
77322: GO 77324
77324: DISABLE
77325: LD_INT 0
77327: PPUSH
77328: PPUSH
77329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77330: LD_ADDR_VAR 0 2
77334: PUSH
77335: LD_INT 81
77337: PUSH
77338: LD_OWVAR 2
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 2
77349: PUSH
77350: LD_INT 21
77352: PUSH
77353: LD_INT 1
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_INT 21
77362: PUSH
77363: LD_INT 2
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: LIST
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PPUSH
77379: CALL_OW 69
77383: ST_TO_ADDR
// if not tmp then
77384: LD_VAR 0 2
77388: NOT
77389: IFFALSE 77393
// exit ;
77391: GO 77476
// p := 0 ;
77393: LD_ADDR_VAR 0 3
77397: PUSH
77398: LD_INT 0
77400: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77401: LD_INT 35
77403: PPUSH
77404: CALL_OW 67
// p := p + 1 ;
77408: LD_ADDR_VAR 0 3
77412: PUSH
77413: LD_VAR 0 3
77417: PUSH
77418: LD_INT 1
77420: PLUS
77421: ST_TO_ADDR
// for i in tmp do
77422: LD_ADDR_VAR 0 1
77426: PUSH
77427: LD_VAR 0 2
77431: PUSH
77432: FOR_IN
77433: IFFALSE 77464
// if GetLives ( i ) < 1000 then
77435: LD_VAR 0 1
77439: PPUSH
77440: CALL_OW 256
77444: PUSH
77445: LD_INT 1000
77447: LESS
77448: IFFALSE 77462
// SetLives ( i , 1000 ) ;
77450: LD_VAR 0 1
77454: PPUSH
77455: LD_INT 1000
77457: PPUSH
77458: CALL_OW 234
77462: GO 77432
77464: POP
77465: POP
// until p > 20 ;
77466: LD_VAR 0 3
77470: PUSH
77471: LD_INT 20
77473: GREATER
77474: IFFALSE 77401
// end ;
77476: PPOPN 3
77478: END
// every 0 0$1 trigger StreamModeActive and sTime do
77479: LD_EXP 65
77483: IFFALSE 77491
77485: PUSH
77486: LD_EXP 116
77490: AND
77491: IFFALSE 77526
77493: GO 77495
77495: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
77496: LD_INT 28
77498: PPUSH
77499: LD_OWVAR 2
77503: PPUSH
77504: LD_INT 2
77506: PPUSH
77507: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
77511: LD_INT 30
77513: PPUSH
77514: LD_OWVAR 2
77518: PPUSH
77519: LD_INT 2
77521: PPUSH
77522: CALL_OW 322
// end ;
77526: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
77527: LD_EXP 65
77531: IFFALSE 77539
77533: PUSH
77534: LD_EXP 117
77538: AND
77539: IFFALSE 77660
77541: GO 77543
77543: DISABLE
77544: LD_INT 0
77546: PPUSH
77547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77548: LD_ADDR_VAR 0 2
77552: PUSH
77553: LD_INT 22
77555: PUSH
77556: LD_OWVAR 2
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 21
77567: PUSH
77568: LD_INT 1
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 3
77577: PUSH
77578: LD_INT 23
77580: PUSH
77581: LD_INT 0
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: LIST
77596: PPUSH
77597: CALL_OW 69
77601: ST_TO_ADDR
// if not tmp then
77602: LD_VAR 0 2
77606: NOT
77607: IFFALSE 77611
// exit ;
77609: GO 77660
// for i in tmp do
77611: LD_ADDR_VAR 0 1
77615: PUSH
77616: LD_VAR 0 2
77620: PUSH
77621: FOR_IN
77622: IFFALSE 77658
// begin if Crawls ( i ) then
77624: LD_VAR 0 1
77628: PPUSH
77629: CALL_OW 318
77633: IFFALSE 77644
// ComWalk ( i ) ;
77635: LD_VAR 0 1
77639: PPUSH
77640: CALL_OW 138
// SetClass ( i , 2 ) ;
77644: LD_VAR 0 1
77648: PPUSH
77649: LD_INT 2
77651: PPUSH
77652: CALL_OW 336
// end ;
77656: GO 77621
77658: POP
77659: POP
// end ;
77660: PPOPN 2
77662: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
77663: LD_EXP 65
77667: IFFALSE 77675
77669: PUSH
77670: LD_EXP 118
77674: AND
77675: IFFALSE 77965
77677: GO 77679
77679: DISABLE
77680: LD_INT 0
77682: PPUSH
77683: PPUSH
77684: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
77685: LD_OWVAR 2
77689: PPUSH
77690: LD_INT 9
77692: PPUSH
77693: LD_INT 1
77695: PPUSH
77696: LD_INT 1
77698: PPUSH
77699: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
77703: LD_INT 9
77705: PPUSH
77706: LD_OWVAR 2
77710: PPUSH
77711: CALL_OW 343
// uc_side := 9 ;
77715: LD_ADDR_OWVAR 20
77719: PUSH
77720: LD_INT 9
77722: ST_TO_ADDR
// uc_nation := 2 ;
77723: LD_ADDR_OWVAR 21
77727: PUSH
77728: LD_INT 2
77730: ST_TO_ADDR
// hc_name := Dark Warrior ;
77731: LD_ADDR_OWVAR 26
77735: PUSH
77736: LD_STRING Dark Warrior
77738: ST_TO_ADDR
// hc_gallery :=  ;
77739: LD_ADDR_OWVAR 33
77743: PUSH
77744: LD_STRING 
77746: ST_TO_ADDR
// hc_noskilllimit := true ;
77747: LD_ADDR_OWVAR 76
77751: PUSH
77752: LD_INT 1
77754: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
77755: LD_ADDR_OWVAR 31
77759: PUSH
77760: LD_INT 30
77762: PUSH
77763: LD_INT 30
77765: PUSH
77766: LD_INT 30
77768: PUSH
77769: LD_INT 30
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: ST_TO_ADDR
// un := CreateHuman ;
77778: LD_ADDR_VAR 0 3
77782: PUSH
77783: CALL_OW 44
77787: ST_TO_ADDR
// hc_noskilllimit := false ;
77788: LD_ADDR_OWVAR 76
77792: PUSH
77793: LD_INT 0
77795: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77796: LD_VAR 0 3
77800: PPUSH
77801: LD_INT 1
77803: PPUSH
77804: CALL_OW 51
// ToLua ( playRanger() ) ;
77808: LD_STRING playRanger()
77810: PPUSH
77811: CALL_OW 559
// p := 0 ;
77815: LD_ADDR_VAR 0 2
77819: PUSH
77820: LD_INT 0
77822: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77823: LD_INT 35
77825: PPUSH
77826: CALL_OW 67
// p := p + 1 ;
77830: LD_ADDR_VAR 0 2
77834: PUSH
77835: LD_VAR 0 2
77839: PUSH
77840: LD_INT 1
77842: PLUS
77843: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
77844: LD_VAR 0 3
77848: PPUSH
77849: CALL_OW 256
77853: PUSH
77854: LD_INT 1000
77856: LESS
77857: IFFALSE 77871
// SetLives ( un , 1000 ) ;
77859: LD_VAR 0 3
77863: PPUSH
77864: LD_INT 1000
77866: PPUSH
77867: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
77871: LD_VAR 0 3
77875: PPUSH
77876: LD_INT 81
77878: PUSH
77879: LD_OWVAR 2
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: LD_INT 91
77890: PUSH
77891: LD_VAR 0 3
77895: PUSH
77896: LD_INT 30
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: LIST
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PPUSH
77908: CALL_OW 69
77912: PPUSH
77913: LD_VAR 0 3
77917: PPUSH
77918: CALL_OW 74
77922: PPUSH
77923: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77927: LD_VAR 0 2
77931: PUSH
77932: LD_INT 80
77934: GREATER
77935: IFTRUE 77948
77937: PUSH
77938: LD_VAR 0 3
77942: PPUSH
77943: CALL_OW 301
77947: OR
77948: IFFALSE 77823
// if un then
77950: LD_VAR 0 3
77954: IFFALSE 77965
// RemoveUnit ( un ) ;
77956: LD_VAR 0 3
77960: PPUSH
77961: CALL_OW 64
// end ;
77965: PPOPN 3
77967: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77968: LD_EXP 119
77972: IFFALSE 78088
77974: GO 77976
77976: DISABLE
77977: LD_INT 0
77979: PPUSH
77980: PPUSH
77981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77982: LD_ADDR_VAR 0 2
77986: PUSH
77987: LD_INT 81
77989: PUSH
77990: LD_OWVAR 2
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 21
78001: PUSH
78002: LD_INT 1
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PPUSH
78013: CALL_OW 69
78017: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78018: LD_STRING playComputer()
78020: PPUSH
78021: CALL_OW 559
// if not tmp then
78025: LD_VAR 0 2
78029: NOT
78030: IFFALSE 78034
// exit ;
78032: GO 78088
// for i in tmp do
78034: LD_ADDR_VAR 0 1
78038: PUSH
78039: LD_VAR 0 2
78043: PUSH
78044: FOR_IN
78045: IFFALSE 78086
// for j := 1 to 4 do
78047: LD_ADDR_VAR 0 3
78051: PUSH
78052: DOUBLE
78053: LD_INT 1
78055: DEC
78056: ST_TO_ADDR
78057: LD_INT 4
78059: PUSH
78060: FOR_TO
78061: IFFALSE 78082
// SetSkill ( i , j , 10 ) ;
78063: LD_VAR 0 1
78067: PPUSH
78068: LD_VAR 0 3
78072: PPUSH
78073: LD_INT 10
78075: PPUSH
78076: CALL_OW 237
78080: GO 78060
78082: POP
78083: POP
78084: GO 78044
78086: POP
78087: POP
// end ;
78088: PPOPN 3
78090: END
// every 0 0$1 trigger s30 do var i , tmp ;
78091: LD_EXP 120
78095: IFFALSE 78164
78097: GO 78099
78099: DISABLE
78100: LD_INT 0
78102: PPUSH
78103: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78104: LD_ADDR_VAR 0 2
78108: PUSH
78109: LD_INT 22
78111: PUSH
78112: LD_OWVAR 2
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PPUSH
78121: CALL_OW 69
78125: ST_TO_ADDR
// if not tmp then
78126: LD_VAR 0 2
78130: NOT
78131: IFFALSE 78135
// exit ;
78133: GO 78164
// for i in tmp do
78135: LD_ADDR_VAR 0 1
78139: PUSH
78140: LD_VAR 0 2
78144: PUSH
78145: FOR_IN
78146: IFFALSE 78162
// SetLives ( i , 300 ) ;
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_INT 300
78155: PPUSH
78156: CALL_OW 234
78160: GO 78145
78162: POP
78163: POP
// end ;
78164: PPOPN 2
78166: END
// every 0 0$1 trigger s60 do var i , tmp ;
78167: LD_EXP 121
78171: IFFALSE 78240
78173: GO 78175
78175: DISABLE
78176: LD_INT 0
78178: PPUSH
78179: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78180: LD_ADDR_VAR 0 2
78184: PUSH
78185: LD_INT 22
78187: PUSH
78188: LD_OWVAR 2
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PPUSH
78197: CALL_OW 69
78201: ST_TO_ADDR
// if not tmp then
78202: LD_VAR 0 2
78206: NOT
78207: IFFALSE 78211
// exit ;
78209: GO 78240
// for i in tmp do
78211: LD_ADDR_VAR 0 1
78215: PUSH
78216: LD_VAR 0 2
78220: PUSH
78221: FOR_IN
78222: IFFALSE 78238
// SetLives ( i , 600 ) ;
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_INT 600
78231: PPUSH
78232: CALL_OW 234
78236: GO 78221
78238: POP
78239: POP
// end ;
78240: PPOPN 2
78242: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78243: LD_INT 0
78245: PPUSH
// case cmd of 301 :
78246: LD_VAR 0 1
78250: PUSH
78251: LD_INT 301
78253: DOUBLE
78254: EQUAL
78255: IFTRUE 78259
78257: GO 78291
78259: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78260: LD_VAR 0 6
78264: PPUSH
78265: LD_VAR 0 7
78269: PPUSH
78270: LD_VAR 0 8
78274: PPUSH
78275: LD_VAR 0 4
78279: PPUSH
78280: LD_VAR 0 5
78284: PPUSH
78285: CALL 79504 0 5
78289: GO 78412
78291: LD_INT 302
78293: DOUBLE
78294: EQUAL
78295: IFTRUE 78299
78297: GO 78336
78299: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78300: LD_VAR 0 6
78304: PPUSH
78305: LD_VAR 0 7
78309: PPUSH
78310: LD_VAR 0 8
78314: PPUSH
78315: LD_VAR 0 9
78319: PPUSH
78320: LD_VAR 0 4
78324: PPUSH
78325: LD_VAR 0 5
78329: PPUSH
78330: CALL 79595 0 6
78334: GO 78412
78336: LD_INT 303
78338: DOUBLE
78339: EQUAL
78340: IFTRUE 78344
78342: GO 78381
78344: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
78345: LD_VAR 0 6
78349: PPUSH
78350: LD_VAR 0 7
78354: PPUSH
78355: LD_VAR 0 8
78359: PPUSH
78360: LD_VAR 0 9
78364: PPUSH
78365: LD_VAR 0 4
78369: PPUSH
78370: LD_VAR 0 5
78374: PPUSH
78375: CALL 78417 0 6
78379: GO 78412
78381: LD_INT 304
78383: DOUBLE
78384: EQUAL
78385: IFTRUE 78389
78387: GO 78411
78389: POP
// hHackTeleport ( unit , x , y ) ; end ;
78390: LD_VAR 0 2
78394: PPUSH
78395: LD_VAR 0 4
78399: PPUSH
78400: LD_VAR 0 5
78404: PPUSH
78405: CALL 80188 0 3
78409: GO 78412
78411: POP
// end ;
78412: LD_VAR 0 12
78416: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
78417: LD_INT 0
78419: PPUSH
78420: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
78421: LD_VAR 0 1
78425: PUSH
78426: LD_INT 1
78428: LESS
78429: IFTRUE 78441
78431: PUSH
78432: LD_VAR 0 1
78436: PUSH
78437: LD_INT 3
78439: GREATER
78440: OR
78441: IFTRUE 78459
78443: PUSH
78444: LD_VAR 0 5
78448: PPUSH
78449: LD_VAR 0 6
78453: PPUSH
78454: CALL_OW 428
78458: OR
78459: IFFALSE 78463
// exit ;
78461: GO 79191
// uc_side := your_side ;
78463: LD_ADDR_OWVAR 20
78467: PUSH
78468: LD_OWVAR 2
78472: ST_TO_ADDR
// uc_nation := nation ;
78473: LD_ADDR_OWVAR 21
78477: PUSH
78478: LD_VAR 0 1
78482: ST_TO_ADDR
// bc_level = 1 ;
78483: LD_ADDR_OWVAR 43
78487: PUSH
78488: LD_INT 1
78490: ST_TO_ADDR
// case btype of 1 :
78491: LD_VAR 0 2
78495: PUSH
78496: LD_INT 1
78498: DOUBLE
78499: EQUAL
78500: IFTRUE 78504
78502: GO 78515
78504: POP
// bc_type := b_depot ; 2 :
78505: LD_ADDR_OWVAR 42
78509: PUSH
78510: LD_INT 0
78512: ST_TO_ADDR
78513: GO 79135
78515: LD_INT 2
78517: DOUBLE
78518: EQUAL
78519: IFTRUE 78523
78521: GO 78534
78523: POP
// bc_type := b_warehouse ; 3 :
78524: LD_ADDR_OWVAR 42
78528: PUSH
78529: LD_INT 1
78531: ST_TO_ADDR
78532: GO 79135
78534: LD_INT 3
78536: DOUBLE
78537: EQUAL
78538: IFTRUE 78542
78540: GO 78553
78542: POP
// bc_type := b_lab ; 4 .. 9 :
78543: LD_ADDR_OWVAR 42
78547: PUSH
78548: LD_INT 6
78550: ST_TO_ADDR
78551: GO 79135
78553: LD_INT 4
78555: DOUBLE
78556: GREATEREQUAL
78557: IFFALSE 78565
78559: LD_INT 9
78561: DOUBLE
78562: LESSEQUAL
78563: IFTRUE 78567
78565: GO 78627
78567: POP
// begin bc_type := b_lab_half ;
78568: LD_ADDR_OWVAR 42
78572: PUSH
78573: LD_INT 7
78575: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
78576: LD_ADDR_OWVAR 44
78580: PUSH
78581: LD_INT 10
78583: PUSH
78584: LD_INT 11
78586: PUSH
78587: LD_INT 12
78589: PUSH
78590: LD_INT 15
78592: PUSH
78593: LD_INT 14
78595: PUSH
78596: LD_INT 13
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: LIST
78606: PUSH
78607: LD_VAR 0 2
78611: PUSH
78612: LD_INT 3
78614: MINUS
78615: ARRAY
78616: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
78617: LD_ADDR_OWVAR 45
78621: PUSH
78622: LD_INT 9
78624: ST_TO_ADDR
// end ; 10 .. 13 :
78625: GO 79135
78627: LD_INT 10
78629: DOUBLE
78630: GREATEREQUAL
78631: IFFALSE 78639
78633: LD_INT 13
78635: DOUBLE
78636: LESSEQUAL
78637: IFTRUE 78641
78639: GO 78718
78641: POP
// begin bc_type := b_lab_full ;
78642: LD_ADDR_OWVAR 42
78646: PUSH
78647: LD_INT 8
78649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
78650: LD_ADDR_OWVAR 44
78654: PUSH
78655: LD_INT 10
78657: PUSH
78658: LD_INT 12
78660: PUSH
78661: LD_INT 14
78663: PUSH
78664: LD_INT 13
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: PUSH
78673: LD_VAR 0 2
78677: PUSH
78678: LD_INT 9
78680: MINUS
78681: ARRAY
78682: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
78683: LD_ADDR_OWVAR 45
78687: PUSH
78688: LD_INT 11
78690: PUSH
78691: LD_INT 15
78693: PUSH
78694: LD_INT 12
78696: PUSH
78697: LD_INT 15
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: LIST
78704: LIST
78705: PUSH
78706: LD_VAR 0 2
78710: PUSH
78711: LD_INT 9
78713: MINUS
78714: ARRAY
78715: ST_TO_ADDR
// end ; 14 :
78716: GO 79135
78718: LD_INT 14
78720: DOUBLE
78721: EQUAL
78722: IFTRUE 78726
78724: GO 78737
78726: POP
// bc_type := b_workshop ; 15 :
78727: LD_ADDR_OWVAR 42
78731: PUSH
78732: LD_INT 2
78734: ST_TO_ADDR
78735: GO 79135
78737: LD_INT 15
78739: DOUBLE
78740: EQUAL
78741: IFTRUE 78745
78743: GO 78756
78745: POP
// bc_type := b_factory ; 16 :
78746: LD_ADDR_OWVAR 42
78750: PUSH
78751: LD_INT 3
78753: ST_TO_ADDR
78754: GO 79135
78756: LD_INT 16
78758: DOUBLE
78759: EQUAL
78760: IFTRUE 78764
78762: GO 78775
78764: POP
// bc_type := b_ext_gun ; 17 :
78765: LD_ADDR_OWVAR 42
78769: PUSH
78770: LD_INT 17
78772: ST_TO_ADDR
78773: GO 79135
78775: LD_INT 17
78777: DOUBLE
78778: EQUAL
78779: IFTRUE 78783
78781: GO 78811
78783: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
78784: LD_ADDR_OWVAR 42
78788: PUSH
78789: LD_INT 19
78791: PUSH
78792: LD_INT 23
78794: PUSH
78795: LD_INT 19
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: LIST
78802: PUSH
78803: LD_VAR 0 1
78807: ARRAY
78808: ST_TO_ADDR
78809: GO 79135
78811: LD_INT 18
78813: DOUBLE
78814: EQUAL
78815: IFTRUE 78819
78817: GO 78830
78819: POP
// bc_type := b_ext_radar ; 19 :
78820: LD_ADDR_OWVAR 42
78824: PUSH
78825: LD_INT 20
78827: ST_TO_ADDR
78828: GO 79135
78830: LD_INT 19
78832: DOUBLE
78833: EQUAL
78834: IFTRUE 78838
78836: GO 78849
78838: POP
// bc_type := b_ext_radio ; 20 :
78839: LD_ADDR_OWVAR 42
78843: PUSH
78844: LD_INT 22
78846: ST_TO_ADDR
78847: GO 79135
78849: LD_INT 20
78851: DOUBLE
78852: EQUAL
78853: IFTRUE 78857
78855: GO 78868
78857: POP
// bc_type := b_ext_siberium ; 21 :
78858: LD_ADDR_OWVAR 42
78862: PUSH
78863: LD_INT 21
78865: ST_TO_ADDR
78866: GO 79135
78868: LD_INT 21
78870: DOUBLE
78871: EQUAL
78872: IFTRUE 78876
78874: GO 78887
78876: POP
// bc_type := b_ext_computer ; 22 :
78877: LD_ADDR_OWVAR 42
78881: PUSH
78882: LD_INT 24
78884: ST_TO_ADDR
78885: GO 79135
78887: LD_INT 22
78889: DOUBLE
78890: EQUAL
78891: IFTRUE 78895
78893: GO 78906
78895: POP
// bc_type := b_ext_track ; 23 :
78896: LD_ADDR_OWVAR 42
78900: PUSH
78901: LD_INT 16
78903: ST_TO_ADDR
78904: GO 79135
78906: LD_INT 23
78908: DOUBLE
78909: EQUAL
78910: IFTRUE 78914
78912: GO 78925
78914: POP
// bc_type := b_ext_laser ; 24 :
78915: LD_ADDR_OWVAR 42
78919: PUSH
78920: LD_INT 25
78922: ST_TO_ADDR
78923: GO 79135
78925: LD_INT 24
78927: DOUBLE
78928: EQUAL
78929: IFTRUE 78933
78931: GO 78944
78933: POP
// bc_type := b_control_tower ; 25 :
78934: LD_ADDR_OWVAR 42
78938: PUSH
78939: LD_INT 36
78941: ST_TO_ADDR
78942: GO 79135
78944: LD_INT 25
78946: DOUBLE
78947: EQUAL
78948: IFTRUE 78952
78950: GO 78963
78952: POP
// bc_type := b_breastwork ; 26 :
78953: LD_ADDR_OWVAR 42
78957: PUSH
78958: LD_INT 31
78960: ST_TO_ADDR
78961: GO 79135
78963: LD_INT 26
78965: DOUBLE
78966: EQUAL
78967: IFTRUE 78971
78969: GO 78982
78971: POP
// bc_type := b_bunker ; 27 :
78972: LD_ADDR_OWVAR 42
78976: PUSH
78977: LD_INT 32
78979: ST_TO_ADDR
78980: GO 79135
78982: LD_INT 27
78984: DOUBLE
78985: EQUAL
78986: IFTRUE 78990
78988: GO 79001
78990: POP
// bc_type := b_turret ; 28 :
78991: LD_ADDR_OWVAR 42
78995: PUSH
78996: LD_INT 33
78998: ST_TO_ADDR
78999: GO 79135
79001: LD_INT 28
79003: DOUBLE
79004: EQUAL
79005: IFTRUE 79009
79007: GO 79020
79009: POP
// bc_type := b_armoury ; 29 :
79010: LD_ADDR_OWVAR 42
79014: PUSH
79015: LD_INT 4
79017: ST_TO_ADDR
79018: GO 79135
79020: LD_INT 29
79022: DOUBLE
79023: EQUAL
79024: IFTRUE 79028
79026: GO 79039
79028: POP
// bc_type := b_barracks ; 30 :
79029: LD_ADDR_OWVAR 42
79033: PUSH
79034: LD_INT 5
79036: ST_TO_ADDR
79037: GO 79135
79039: LD_INT 30
79041: DOUBLE
79042: EQUAL
79043: IFTRUE 79047
79045: GO 79058
79047: POP
// bc_type := b_solar_power ; 31 :
79048: LD_ADDR_OWVAR 42
79052: PUSH
79053: LD_INT 27
79055: ST_TO_ADDR
79056: GO 79135
79058: LD_INT 31
79060: DOUBLE
79061: EQUAL
79062: IFTRUE 79066
79064: GO 79077
79066: POP
// bc_type := b_oil_power ; 32 :
79067: LD_ADDR_OWVAR 42
79071: PUSH
79072: LD_INT 26
79074: ST_TO_ADDR
79075: GO 79135
79077: LD_INT 32
79079: DOUBLE
79080: EQUAL
79081: IFTRUE 79085
79083: GO 79096
79085: POP
// bc_type := b_siberite_power ; 33 :
79086: LD_ADDR_OWVAR 42
79090: PUSH
79091: LD_INT 28
79093: ST_TO_ADDR
79094: GO 79135
79096: LD_INT 33
79098: DOUBLE
79099: EQUAL
79100: IFTRUE 79104
79102: GO 79115
79104: POP
// bc_type := b_oil_mine ; 34 :
79105: LD_ADDR_OWVAR 42
79109: PUSH
79110: LD_INT 29
79112: ST_TO_ADDR
79113: GO 79135
79115: LD_INT 34
79117: DOUBLE
79118: EQUAL
79119: IFTRUE 79123
79121: GO 79134
79123: POP
// bc_type := b_siberite_mine ; end ;
79124: LD_ADDR_OWVAR 42
79128: PUSH
79129: LD_INT 30
79131: ST_TO_ADDR
79132: GO 79135
79134: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79135: LD_ADDR_VAR 0 8
79139: PUSH
79140: LD_VAR 0 5
79144: PPUSH
79145: LD_VAR 0 6
79149: PPUSH
79150: LD_VAR 0 3
79154: PPUSH
79155: CALL_OW 47
79159: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79160: LD_OWVAR 42
79164: PUSH
79165: LD_INT 32
79167: PUSH
79168: LD_INT 33
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: IN
79175: IFFALSE 79191
// PlaceWeaponTurret ( b , weapon ) ;
79177: LD_VAR 0 8
79181: PPUSH
79182: LD_VAR 0 4
79186: PPUSH
79187: CALL_OW 431
// end ;
79191: LD_VAR 0 7
79195: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79196: LD_INT 0
79198: PPUSH
79199: PPUSH
79200: PPUSH
79201: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79202: LD_ADDR_VAR 0 4
79206: PUSH
79207: LD_INT 22
79209: PUSH
79210: LD_OWVAR 2
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 2
79221: PUSH
79222: LD_INT 30
79224: PUSH
79225: LD_INT 0
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: LD_INT 30
79234: PUSH
79235: LD_INT 1
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: LIST
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: PPUSH
79251: CALL_OW 69
79255: ST_TO_ADDR
// if not tmp then
79256: LD_VAR 0 4
79260: NOT
79261: IFFALSE 79265
// exit ;
79263: GO 79324
// for i in tmp do
79265: LD_ADDR_VAR 0 2
79269: PUSH
79270: LD_VAR 0 4
79274: PUSH
79275: FOR_IN
79276: IFFALSE 79322
// for j = 1 to 3 do
79278: LD_ADDR_VAR 0 3
79282: PUSH
79283: DOUBLE
79284: LD_INT 1
79286: DEC
79287: ST_TO_ADDR
79288: LD_INT 3
79290: PUSH
79291: FOR_TO
79292: IFFALSE 79318
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79294: LD_VAR 0 2
79298: PPUSH
79299: CALL_OW 274
79303: PPUSH
79304: LD_VAR 0 3
79308: PPUSH
79309: LD_INT 99999
79311: PPUSH
79312: CALL_OW 277
79316: GO 79291
79318: POP
79319: POP
79320: GO 79275
79322: POP
79323: POP
// end ;
79324: LD_VAR 0 1
79328: RET
// export function hHackSetLevel10 ; var i , j ; begin
79329: LD_INT 0
79331: PPUSH
79332: PPUSH
79333: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79334: LD_ADDR_VAR 0 2
79338: PUSH
79339: LD_INT 21
79341: PUSH
79342: LD_INT 1
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PPUSH
79349: CALL_OW 69
79353: PUSH
79354: FOR_IN
79355: IFFALSE 79407
// if IsSelected ( i ) then
79357: LD_VAR 0 2
79361: PPUSH
79362: CALL_OW 306
79366: IFFALSE 79405
// begin for j := 1 to 4 do
79368: LD_ADDR_VAR 0 3
79372: PUSH
79373: DOUBLE
79374: LD_INT 1
79376: DEC
79377: ST_TO_ADDR
79378: LD_INT 4
79380: PUSH
79381: FOR_TO
79382: IFFALSE 79403
// SetSkill ( i , j , 10 ) ;
79384: LD_VAR 0 2
79388: PPUSH
79389: LD_VAR 0 3
79393: PPUSH
79394: LD_INT 10
79396: PPUSH
79397: CALL_OW 237
79401: GO 79381
79403: POP
79404: POP
// end ;
79405: GO 79354
79407: POP
79408: POP
// end ;
79409: LD_VAR 0 1
79413: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79414: LD_INT 0
79416: PPUSH
79417: PPUSH
79418: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79419: LD_ADDR_VAR 0 2
79423: PUSH
79424: LD_INT 22
79426: PUSH
79427: LD_OWVAR 2
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PUSH
79436: LD_INT 21
79438: PUSH
79439: LD_INT 1
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PPUSH
79450: CALL_OW 69
79454: PUSH
79455: FOR_IN
79456: IFFALSE 79497
// begin for j := 1 to 4 do
79458: LD_ADDR_VAR 0 3
79462: PUSH
79463: DOUBLE
79464: LD_INT 1
79466: DEC
79467: ST_TO_ADDR
79468: LD_INT 4
79470: PUSH
79471: FOR_TO
79472: IFFALSE 79493
// SetSkill ( i , j , 10 ) ;
79474: LD_VAR 0 2
79478: PPUSH
79479: LD_VAR 0 3
79483: PPUSH
79484: LD_INT 10
79486: PPUSH
79487: CALL_OW 237
79491: GO 79471
79493: POP
79494: POP
// end ;
79495: GO 79455
79497: POP
79498: POP
// end ;
79499: LD_VAR 0 1
79503: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
79504: LD_INT 0
79506: PPUSH
// uc_side := your_side ;
79507: LD_ADDR_OWVAR 20
79511: PUSH
79512: LD_OWVAR 2
79516: ST_TO_ADDR
// uc_nation := nation ;
79517: LD_ADDR_OWVAR 21
79521: PUSH
79522: LD_VAR 0 1
79526: ST_TO_ADDR
// InitHc ;
79527: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79531: LD_INT 0
79533: PPUSH
79534: LD_VAR 0 2
79538: PPUSH
79539: LD_VAR 0 3
79543: PPUSH
79544: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
79548: LD_VAR 0 4
79552: PPUSH
79553: LD_VAR 0 5
79557: PPUSH
79558: CALL_OW 428
79562: PUSH
79563: LD_INT 0
79565: EQUAL
79566: IFFALSE 79590
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
79568: CALL_OW 44
79572: PPUSH
79573: LD_VAR 0 4
79577: PPUSH
79578: LD_VAR 0 5
79582: PPUSH
79583: LD_INT 1
79585: PPUSH
79586: CALL_OW 48
// end ;
79590: LD_VAR 0 6
79594: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
79595: LD_INT 0
79597: PPUSH
79598: PPUSH
// uc_side := your_side ;
79599: LD_ADDR_OWVAR 20
79603: PUSH
79604: LD_OWVAR 2
79608: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
79609: LD_VAR 0 1
79613: PUSH
79614: LD_INT 1
79616: PUSH
79617: LD_INT 2
79619: PUSH
79620: LD_INT 3
79622: PUSH
79623: LD_INT 4
79625: PUSH
79626: LD_INT 5
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: IN
79636: IFFALSE 79648
// uc_nation := nation_american else
79638: LD_ADDR_OWVAR 21
79642: PUSH
79643: LD_INT 1
79645: ST_TO_ADDR
79646: GO 79691
// if chassis in [ 11 , 12 , 13 , 14 ] then
79648: LD_VAR 0 1
79652: PUSH
79653: LD_INT 11
79655: PUSH
79656: LD_INT 12
79658: PUSH
79659: LD_INT 13
79661: PUSH
79662: LD_INT 14
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: IN
79671: IFFALSE 79683
// uc_nation := nation_arabian else
79673: LD_ADDR_OWVAR 21
79677: PUSH
79678: LD_INT 2
79680: ST_TO_ADDR
79681: GO 79691
// uc_nation := nation_russian ;
79683: LD_ADDR_OWVAR 21
79687: PUSH
79688: LD_INT 3
79690: ST_TO_ADDR
// vc_chassis := chassis ;
79691: LD_ADDR_OWVAR 37
79695: PUSH
79696: LD_VAR 0 1
79700: ST_TO_ADDR
// vc_engine := engine ;
79701: LD_ADDR_OWVAR 39
79705: PUSH
79706: LD_VAR 0 2
79710: ST_TO_ADDR
// vc_control := control ;
79711: LD_ADDR_OWVAR 38
79715: PUSH
79716: LD_VAR 0 3
79720: ST_TO_ADDR
// vc_weapon := weapon ;
79721: LD_ADDR_OWVAR 40
79725: PUSH
79726: LD_VAR 0 4
79730: ST_TO_ADDR
// un := CreateVehicle ;
79731: LD_ADDR_VAR 0 8
79735: PUSH
79736: CALL_OW 45
79740: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
79741: LD_VAR 0 8
79745: PPUSH
79746: LD_INT 0
79748: PPUSH
79749: LD_INT 5
79751: PPUSH
79752: CALL_OW 12
79756: PPUSH
79757: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
79761: LD_VAR 0 8
79765: PPUSH
79766: LD_VAR 0 5
79770: PPUSH
79771: LD_VAR 0 6
79775: PPUSH
79776: LD_INT 1
79778: PPUSH
79779: CALL_OW 48
// end ;
79783: LD_VAR 0 7
79787: RET
// export hInvincible ; every 1 do
79788: GO 79790
79790: DISABLE
// hInvincible := [ ] ;
79791: LD_ADDR_EXP 122
79795: PUSH
79796: EMPTY
79797: ST_TO_ADDR
79798: END
// every 10 do var i ;
79799: GO 79801
79801: DISABLE
79802: LD_INT 0
79804: PPUSH
// begin enable ;
79805: ENABLE
// if not hInvincible then
79806: LD_EXP 122
79810: NOT
79811: IFFALSE 79815
// exit ;
79813: GO 79859
// for i in hInvincible do
79815: LD_ADDR_VAR 0 1
79819: PUSH
79820: LD_EXP 122
79824: PUSH
79825: FOR_IN
79826: IFFALSE 79857
// if GetLives ( i ) < 1000 then
79828: LD_VAR 0 1
79832: PPUSH
79833: CALL_OW 256
79837: PUSH
79838: LD_INT 1000
79840: LESS
79841: IFFALSE 79855
// SetLives ( i , 1000 ) ;
79843: LD_VAR 0 1
79847: PPUSH
79848: LD_INT 1000
79850: PPUSH
79851: CALL_OW 234
79855: GO 79825
79857: POP
79858: POP
// end ;
79859: PPOPN 1
79861: END
// export function hHackInvincible ; var i ; begin
79862: LD_INT 0
79864: PPUSH
79865: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79866: LD_ADDR_VAR 0 2
79870: PUSH
79871: LD_INT 2
79873: PUSH
79874: LD_INT 21
79876: PUSH
79877: LD_INT 1
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: LD_INT 21
79886: PUSH
79887: LD_INT 2
79889: PUSH
79890: EMPTY
79891: LIST
79892: LIST
79893: PUSH
79894: EMPTY
79895: LIST
79896: LIST
79897: LIST
79898: PPUSH
79899: CALL_OW 69
79903: PUSH
79904: FOR_IN
79905: IFFALSE 79966
// if IsSelected ( i ) then
79907: LD_VAR 0 2
79911: PPUSH
79912: CALL_OW 306
79916: IFFALSE 79964
// begin if i in hInvincible then
79918: LD_VAR 0 2
79922: PUSH
79923: LD_EXP 122
79927: IN
79928: IFFALSE 79948
// hInvincible := hInvincible diff i else
79930: LD_ADDR_EXP 122
79934: PUSH
79935: LD_EXP 122
79939: PUSH
79940: LD_VAR 0 2
79944: DIFF
79945: ST_TO_ADDR
79946: GO 79964
// hInvincible := hInvincible union i ;
79948: LD_ADDR_EXP 122
79952: PUSH
79953: LD_EXP 122
79957: PUSH
79958: LD_VAR 0 2
79962: UNION
79963: ST_TO_ADDR
// end ;
79964: GO 79904
79966: POP
79967: POP
// end ;
79968: LD_VAR 0 1
79972: RET
// export function hHackInvisible ; var i , j ; begin
79973: LD_INT 0
79975: PPUSH
79976: PPUSH
79977: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79978: LD_ADDR_VAR 0 2
79982: PUSH
79983: LD_INT 21
79985: PUSH
79986: LD_INT 1
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PPUSH
79993: CALL_OW 69
79997: PUSH
79998: FOR_IN
79999: IFFALSE 80023
// if IsSelected ( i ) then
80001: LD_VAR 0 2
80005: PPUSH
80006: CALL_OW 306
80010: IFFALSE 80021
// ComForceInvisible ( i ) ;
80012: LD_VAR 0 2
80016: PPUSH
80017: CALL_OW 496
80021: GO 79998
80023: POP
80024: POP
// end ;
80025: LD_VAR 0 1
80029: RET
// export function hHackChangeYourSide ; begin
80030: LD_INT 0
80032: PPUSH
// if your_side = 8 then
80033: LD_OWVAR 2
80037: PUSH
80038: LD_INT 8
80040: EQUAL
80041: IFFALSE 80053
// your_side := 0 else
80043: LD_ADDR_OWVAR 2
80047: PUSH
80048: LD_INT 0
80050: ST_TO_ADDR
80051: GO 80067
// your_side := your_side + 1 ;
80053: LD_ADDR_OWVAR 2
80057: PUSH
80058: LD_OWVAR 2
80062: PUSH
80063: LD_INT 1
80065: PLUS
80066: ST_TO_ADDR
// end ;
80067: LD_VAR 0 1
80071: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80072: LD_INT 0
80074: PPUSH
80075: PPUSH
80076: PPUSH
// for i in all_units do
80077: LD_ADDR_VAR 0 2
80081: PUSH
80082: LD_OWVAR 3
80086: PUSH
80087: FOR_IN
80088: IFFALSE 80166
// if IsSelected ( i ) then
80090: LD_VAR 0 2
80094: PPUSH
80095: CALL_OW 306
80099: IFFALSE 80164
// begin j := GetSide ( i ) ;
80101: LD_ADDR_VAR 0 3
80105: PUSH
80106: LD_VAR 0 2
80110: PPUSH
80111: CALL_OW 255
80115: ST_TO_ADDR
// if j = 8 then
80116: LD_VAR 0 3
80120: PUSH
80121: LD_INT 8
80123: EQUAL
80124: IFFALSE 80136
// j := 0 else
80126: LD_ADDR_VAR 0 3
80130: PUSH
80131: LD_INT 0
80133: ST_TO_ADDR
80134: GO 80150
// j := j + 1 ;
80136: LD_ADDR_VAR 0 3
80140: PUSH
80141: LD_VAR 0 3
80145: PUSH
80146: LD_INT 1
80148: PLUS
80149: ST_TO_ADDR
// SetSide ( i , j ) ;
80150: LD_VAR 0 2
80154: PPUSH
80155: LD_VAR 0 3
80159: PPUSH
80160: CALL_OW 235
// end ;
80164: GO 80087
80166: POP
80167: POP
// end ;
80168: LD_VAR 0 1
80172: RET
// export function hHackFog ; begin
80173: LD_INT 0
80175: PPUSH
// FogOff ( true ) ;
80176: LD_INT 1
80178: PPUSH
80179: CALL_OW 344
// end ;
80183: LD_VAR 0 1
80187: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80188: LD_INT 0
80190: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80191: LD_VAR 0 1
80195: PPUSH
80196: LD_VAR 0 2
80200: PPUSH
80201: LD_VAR 0 3
80205: PPUSH
80206: LD_INT 1
80208: PPUSH
80209: LD_INT 1
80211: PPUSH
80212: CALL_OW 483
// CenterOnXY ( x , y ) ;
80216: LD_VAR 0 2
80220: PPUSH
80221: LD_VAR 0 3
80225: PPUSH
80226: CALL_OW 84
// end ;
80230: LD_VAR 0 4
80234: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
80235: LD_INT 0
80237: PPUSH
80238: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
80239: LD_VAR 0 1
80243: NOT
80244: IFTRUE 80263
80246: PUSH
80247: LD_VAR 0 2
80251: PPUSH
80252: LD_VAR 0 3
80256: PPUSH
80257: CALL_OW 488
80261: NOT
80262: OR
80263: IFTRUE 80298
80265: PUSH
80266: LD_VAR 0 1
80270: PPUSH
80271: CALL_OW 266
80275: PUSH
80276: LD_INT 3
80278: NONEQUAL
80279: IFFALSE 80297
80281: PUSH
80282: LD_VAR 0 1
80286: PPUSH
80287: CALL_OW 247
80291: PUSH
80292: LD_INT 1
80294: EQUAL
80295: NOT
80296: AND
80297: OR
80298: IFFALSE 80302
// exit ;
80300: GO 80584
// if GetType ( factory ) = unit_human then
80302: LD_VAR 0 1
80306: PPUSH
80307: CALL_OW 247
80311: PUSH
80312: LD_INT 1
80314: EQUAL
80315: IFFALSE 80332
// factory := IsInUnit ( factory ) ;
80317: LD_ADDR_VAR 0 1
80321: PUSH
80322: LD_VAR 0 1
80326: PPUSH
80327: CALL_OW 310
80331: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
80332: LD_VAR 0 1
80336: PPUSH
80337: CALL_OW 266
80341: PUSH
80342: LD_INT 3
80344: NONEQUAL
80345: IFFALSE 80349
// exit ;
80347: GO 80584
// for i := 1 to Count ( factoryWaypoints ) do
80349: LD_ADDR_VAR 0 5
80353: PUSH
80354: DOUBLE
80355: LD_INT 1
80357: DEC
80358: ST_TO_ADDR
80359: LD_EXP 123
80363: PPUSH
80364: CALL 24274 0 1
80368: PUSH
80369: FOR_TO
80370: IFFALSE 80532
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
80372: LD_VAR 0 2
80376: PPUSH
80377: LD_VAR 0 3
80381: PPUSH
80382: CALL_OW 428
80386: PUSH
80387: LD_EXP 123
80391: PUSH
80392: LD_VAR 0 5
80396: ARRAY
80397: PUSH
80398: LD_INT 2
80400: ARRAY
80401: EQUAL
80402: IFFALSE 80434
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
80404: LD_ADDR_EXP 123
80408: PUSH
80409: LD_EXP 123
80413: PPUSH
80414: LD_VAR 0 5
80418: PPUSH
80419: CALL_OW 3
80423: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80424: CALL 80589 0 0
// exit ;
80428: POP
80429: POP
80430: GO 80584
// end else
80432: GO 80530
// if factory = factoryWaypoints [ i ] [ 2 ] then
80434: LD_VAR 0 1
80438: PUSH
80439: LD_EXP 123
80443: PUSH
80444: LD_VAR 0 5
80448: ARRAY
80449: PUSH
80450: LD_INT 2
80452: ARRAY
80453: EQUAL
80454: IFFALSE 80530
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
80456: LD_ADDR_EXP 123
80460: PUSH
80461: LD_EXP 123
80465: PPUSH
80466: LD_VAR 0 5
80470: PPUSH
80471: CALL_OW 3
80475: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
80476: LD_ADDR_EXP 123
80480: PUSH
80481: LD_EXP 123
80485: PPUSH
80486: LD_VAR 0 1
80490: PPUSH
80491: CALL_OW 255
80495: PUSH
80496: LD_VAR 0 1
80500: PUSH
80501: LD_VAR 0 2
80505: PUSH
80506: LD_VAR 0 3
80510: PUSH
80511: EMPTY
80512: LIST
80513: LIST
80514: LIST
80515: LIST
80516: PPUSH
80517: CALL 60250 0 2
80521: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80522: CALL 80589 0 0
// exit ;
80526: POP
80527: POP
80528: GO 80584
// end ; end ;
80530: GO 80369
80532: POP
80533: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
80534: LD_ADDR_EXP 123
80538: PUSH
80539: LD_EXP 123
80543: PPUSH
80544: LD_VAR 0 1
80548: PPUSH
80549: CALL_OW 255
80553: PUSH
80554: LD_VAR 0 1
80558: PUSH
80559: LD_VAR 0 2
80563: PUSH
80564: LD_VAR 0 3
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: PPUSH
80575: CALL 60250 0 2
80579: ST_TO_ADDR
// UpdateFactoryWaypoints ;
80580: CALL 80589 0 0
// end ;
80584: LD_VAR 0 4
80588: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
80589: LD_INT 0
80591: PPUSH
80592: PPUSH
80593: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
80594: LD_STRING resetFactoryWaypoint();
80596: PPUSH
80597: CALL_OW 559
// if factoryWaypoints then
80601: LD_EXP 123
80605: IFFALSE 80726
// begin list := factoryWaypoints ;
80607: LD_ADDR_VAR 0 3
80611: PUSH
80612: LD_EXP 123
80616: ST_TO_ADDR
// for i := 1 to list do
80617: LD_ADDR_VAR 0 2
80621: PUSH
80622: DOUBLE
80623: LD_INT 1
80625: DEC
80626: ST_TO_ADDR
80627: LD_VAR 0 3
80631: PUSH
80632: FOR_TO
80633: IFFALSE 80724
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80635: LD_STRING setFactoryWaypointXY(
80637: PUSH
80638: LD_VAR 0 3
80642: PUSH
80643: LD_VAR 0 2
80647: ARRAY
80648: PUSH
80649: LD_INT 1
80651: ARRAY
80652: STR
80653: PUSH
80654: LD_STRING ,
80656: STR
80657: PUSH
80658: LD_VAR 0 3
80662: PUSH
80663: LD_VAR 0 2
80667: ARRAY
80668: PUSH
80669: LD_INT 2
80671: ARRAY
80672: STR
80673: PUSH
80674: LD_STRING ,
80676: STR
80677: PUSH
80678: LD_VAR 0 3
80682: PUSH
80683: LD_VAR 0 2
80687: ARRAY
80688: PUSH
80689: LD_INT 3
80691: ARRAY
80692: STR
80693: PUSH
80694: LD_STRING ,
80696: STR
80697: PUSH
80698: LD_VAR 0 3
80702: PUSH
80703: LD_VAR 0 2
80707: ARRAY
80708: PUSH
80709: LD_INT 4
80711: ARRAY
80712: STR
80713: PUSH
80714: LD_STRING )
80716: STR
80717: PPUSH
80718: CALL_OW 559
80722: GO 80632
80724: POP
80725: POP
// end ; end ;
80726: LD_VAR 0 1
80730: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
80731: LD_INT 0
80733: PPUSH
// if HexInfo ( x , y ) = warehouse then
80734: LD_VAR 0 2
80738: PPUSH
80739: LD_VAR 0 3
80743: PPUSH
80744: CALL_OW 428
80748: PUSH
80749: LD_VAR 0 1
80753: EQUAL
80754: IFFALSE 80781
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
80756: LD_ADDR_EXP 125
80760: PUSH
80761: LD_EXP 125
80765: PPUSH
80766: LD_VAR 0 1
80770: PPUSH
80771: LD_INT 0
80773: PPUSH
80774: CALL_OW 1
80778: ST_TO_ADDR
80779: GO 80832
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
80781: LD_ADDR_EXP 125
80785: PUSH
80786: LD_EXP 125
80790: PPUSH
80791: LD_VAR 0 1
80795: PPUSH
80796: LD_VAR 0 1
80800: PPUSH
80801: CALL_OW 255
80805: PUSH
80806: LD_VAR 0 1
80810: PUSH
80811: LD_VAR 0 2
80815: PUSH
80816: LD_VAR 0 3
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: LIST
80825: LIST
80826: PPUSH
80827: CALL_OW 1
80831: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
80832: CALL 80841 0 0
// end ;
80836: LD_VAR 0 4
80840: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
80841: LD_INT 0
80843: PPUSH
80844: PPUSH
80845: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
80846: LD_STRING resetWarehouseGatheringPoints();
80848: PPUSH
80849: CALL_OW 559
// if warehouseGatheringPoints then
80853: LD_EXP 125
80857: IFFALSE 80983
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
80859: LD_ADDR_VAR 0 3
80863: PUSH
80864: LD_EXP 125
80868: PPUSH
80869: CALL 64184 0 1
80873: ST_TO_ADDR
// for i := 1 to list do
80874: LD_ADDR_VAR 0 2
80878: PUSH
80879: DOUBLE
80880: LD_INT 1
80882: DEC
80883: ST_TO_ADDR
80884: LD_VAR 0 3
80888: PUSH
80889: FOR_TO
80890: IFFALSE 80981
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80892: LD_STRING setWarehouseGatheringPointXY(
80894: PUSH
80895: LD_VAR 0 3
80899: PUSH
80900: LD_VAR 0 2
80904: ARRAY
80905: PUSH
80906: LD_INT 1
80908: ARRAY
80909: STR
80910: PUSH
80911: LD_STRING ,
80913: STR
80914: PUSH
80915: LD_VAR 0 3
80919: PUSH
80920: LD_VAR 0 2
80924: ARRAY
80925: PUSH
80926: LD_INT 2
80928: ARRAY
80929: STR
80930: PUSH
80931: LD_STRING ,
80933: STR
80934: PUSH
80935: LD_VAR 0 3
80939: PUSH
80940: LD_VAR 0 2
80944: ARRAY
80945: PUSH
80946: LD_INT 3
80948: ARRAY
80949: STR
80950: PUSH
80951: LD_STRING ,
80953: STR
80954: PUSH
80955: LD_VAR 0 3
80959: PUSH
80960: LD_VAR 0 2
80964: ARRAY
80965: PUSH
80966: LD_INT 4
80968: ARRAY
80969: STR
80970: PUSH
80971: LD_STRING )
80973: STR
80974: PPUSH
80975: CALL_OW 559
80979: GO 80889
80981: POP
80982: POP
// end ; end ;
80983: LD_VAR 0 1
80987: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
80988: LD_EXP 125
80992: IFFALSE 81687
80994: GO 80996
80996: DISABLE
80997: LD_INT 0
80999: PPUSH
81000: PPUSH
81001: PPUSH
81002: PPUSH
81003: PPUSH
81004: PPUSH
81005: PPUSH
81006: PPUSH
81007: PPUSH
// begin enable ;
81008: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81009: LD_ADDR_VAR 0 3
81013: PUSH
81014: LD_EXP 125
81018: PPUSH
81019: CALL 64184 0 1
81023: ST_TO_ADDR
// if not list then
81024: LD_VAR 0 3
81028: NOT
81029: IFFALSE 81033
// exit ;
81031: GO 81687
// for i := 1 to list do
81033: LD_ADDR_VAR 0 1
81037: PUSH
81038: DOUBLE
81039: LD_INT 1
81041: DEC
81042: ST_TO_ADDR
81043: LD_VAR 0 3
81047: PUSH
81048: FOR_TO
81049: IFFALSE 81685
// begin depot := list [ i ] [ 2 ] ;
81051: LD_ADDR_VAR 0 8
81055: PUSH
81056: LD_VAR 0 3
81060: PUSH
81061: LD_VAR 0 1
81065: ARRAY
81066: PUSH
81067: LD_INT 2
81069: ARRAY
81070: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81071: LD_ADDR_VAR 0 5
81075: PUSH
81076: LD_VAR 0 3
81080: PUSH
81081: LD_VAR 0 1
81085: ARRAY
81086: PUSH
81087: LD_INT 1
81089: ARRAY
81090: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81091: LD_VAR 0 8
81095: PPUSH
81096: CALL_OW 301
81100: IFTRUE 81119
81102: PUSH
81103: LD_VAR 0 5
81107: PUSH
81108: LD_VAR 0 8
81112: PPUSH
81113: CALL_OW 255
81117: NONEQUAL
81118: OR
81119: IFFALSE 81148
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81121: LD_ADDR_EXP 125
81125: PUSH
81126: LD_EXP 125
81130: PPUSH
81131: LD_VAR 0 8
81135: PPUSH
81136: LD_INT 0
81138: PPUSH
81139: CALL_OW 1
81143: ST_TO_ADDR
// exit ;
81144: POP
81145: POP
81146: GO 81687
// end ; x := list [ i ] [ 3 ] ;
81148: LD_ADDR_VAR 0 6
81152: PUSH
81153: LD_VAR 0 3
81157: PUSH
81158: LD_VAR 0 1
81162: ARRAY
81163: PUSH
81164: LD_INT 3
81166: ARRAY
81167: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81168: LD_ADDR_VAR 0 7
81172: PUSH
81173: LD_VAR 0 3
81177: PUSH
81178: LD_VAR 0 1
81182: ARRAY
81183: PUSH
81184: LD_INT 4
81186: ARRAY
81187: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81188: LD_ADDR_VAR 0 9
81192: PUSH
81193: LD_VAR 0 6
81197: PPUSH
81198: LD_VAR 0 7
81202: PPUSH
81203: LD_INT 16
81205: PPUSH
81206: CALL 62758 0 3
81210: ST_TO_ADDR
// if not cratesNearbyPoint then
81211: LD_VAR 0 9
81215: NOT
81216: IFFALSE 81222
// exit ;
81218: POP
81219: POP
81220: GO 81687
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81222: LD_ADDR_VAR 0 4
81226: PUSH
81227: LD_INT 22
81229: PUSH
81230: LD_VAR 0 5
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: PUSH
81239: LD_INT 3
81241: PUSH
81242: LD_INT 60
81244: PUSH
81245: EMPTY
81246: LIST
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: PUSH
81252: LD_INT 91
81254: PUSH
81255: LD_VAR 0 8
81259: PUSH
81260: LD_INT 6
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: LIST
81267: PUSH
81268: LD_INT 2
81270: PUSH
81271: LD_INT 25
81273: PUSH
81274: LD_INT 2
81276: PUSH
81277: EMPTY
81278: LIST
81279: LIST
81280: PUSH
81281: LD_INT 25
81283: PUSH
81284: LD_INT 16
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: EMPTY
81292: LIST
81293: LIST
81294: LIST
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: LIST
81300: LIST
81301: PPUSH
81302: CALL_OW 69
81306: PUSH
81307: LD_VAR 0 8
81311: PPUSH
81312: CALL_OW 313
81316: PPUSH
81317: LD_INT 3
81319: PUSH
81320: LD_INT 60
81322: PUSH
81323: EMPTY
81324: LIST
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: PUSH
81330: LD_INT 2
81332: PUSH
81333: LD_INT 25
81335: PUSH
81336: LD_INT 2
81338: PUSH
81339: EMPTY
81340: LIST
81341: LIST
81342: PUSH
81343: LD_INT 25
81345: PUSH
81346: LD_INT 16
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: LIST
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PPUSH
81362: CALL_OW 72
81366: UNION
81367: ST_TO_ADDR
// if tmp then
81368: LD_VAR 0 4
81372: IFFALSE 81452
// begin tmp := ShrinkArray ( tmp , 3 ) ;
81374: LD_ADDR_VAR 0 4
81378: PUSH
81379: LD_VAR 0 4
81383: PPUSH
81384: LD_INT 3
81386: PPUSH
81387: CALL 60565 0 2
81391: ST_TO_ADDR
// for j in tmp do
81392: LD_ADDR_VAR 0 2
81396: PUSH
81397: LD_VAR 0 4
81401: PUSH
81402: FOR_IN
81403: IFFALSE 81446
// begin if IsInUnit ( j ) then
81405: LD_VAR 0 2
81409: PPUSH
81410: CALL_OW 310
81414: IFFALSE 81425
// ComExit ( j ) ;
81416: LD_VAR 0 2
81420: PPUSH
81421: CALL 60648 0 1
// AddComCollect ( j , x , y ) ;
81425: LD_VAR 0 2
81429: PPUSH
81430: LD_VAR 0 6
81434: PPUSH
81435: LD_VAR 0 7
81439: PPUSH
81440: CALL_OW 177
// end ;
81444: GO 81402
81446: POP
81447: POP
// exit ;
81448: POP
81449: POP
81450: GO 81687
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
81452: LD_ADDR_VAR 0 4
81456: PUSH
81457: LD_INT 22
81459: PUSH
81460: LD_VAR 0 5
81464: PUSH
81465: EMPTY
81466: LIST
81467: LIST
81468: PUSH
81469: LD_INT 91
81471: PUSH
81472: LD_VAR 0 8
81476: PUSH
81477: LD_INT 8
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: LIST
81484: PUSH
81485: LD_INT 2
81487: PUSH
81488: LD_INT 34
81490: PUSH
81491: LD_INT 12
81493: PUSH
81494: EMPTY
81495: LIST
81496: LIST
81497: PUSH
81498: LD_INT 34
81500: PUSH
81501: LD_INT 51
81503: PUSH
81504: EMPTY
81505: LIST
81506: LIST
81507: PUSH
81508: LD_INT 34
81510: PUSH
81511: LD_INT 32
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: PUSH
81518: LD_INT 34
81520: PUSH
81521: LD_INT 89
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: PUSH
81528: EMPTY
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: LIST
81539: PPUSH
81540: CALL_OW 69
81544: ST_TO_ADDR
// if tmp then
81545: LD_VAR 0 4
81549: IFFALSE 81683
// begin for j in tmp do
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 4
81560: PUSH
81561: FOR_IN
81562: IFFALSE 81681
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
81564: LD_VAR 0 2
81568: PPUSH
81569: CALL_OW 262
81573: PUSH
81574: LD_INT 3
81576: EQUAL
81577: IFTRUE 81594
81579: PUSH
81580: LD_VAR 0 2
81584: PPUSH
81585: CALL_OW 261
81589: PUSH
81590: LD_INT 20
81592: GREATER
81593: OR
81594: IFFALSE 81608
81596: PUSH
81597: LD_VAR 0 2
81601: PPUSH
81602: CALL_OW 314
81606: NOT
81607: AND
81608: IFFALSE 81638
81610: PUSH
81611: LD_VAR 0 2
81615: PPUSH
81616: CALL_OW 263
81620: PUSH
81621: LD_INT 1
81623: NONEQUAL
81624: IFTRUE 81637
81626: PUSH
81627: LD_VAR 0 2
81631: PPUSH
81632: CALL_OW 311
81636: OR
81637: AND
81638: IFFALSE 81679
// begin ComCollect ( j , x , y ) ;
81640: LD_VAR 0 2
81644: PPUSH
81645: LD_VAR 0 6
81649: PPUSH
81650: LD_VAR 0 7
81654: PPUSH
81655: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
81659: LD_VAR 0 2
81663: PPUSH
81664: LD_VAR 0 8
81668: PPUSH
81669: CALL_OW 172
// exit ;
81673: POP
81674: POP
81675: POP
81676: POP
81677: GO 81687
// end ;
81679: GO 81561
81681: POP
81682: POP
// end ; end ;
81683: GO 81048
81685: POP
81686: POP
// end ; end_of_file
81687: PPOPN 9
81689: END
// export function SOS_UnitDestroyed ( un ) ; begin
81690: LD_INT 0
81692: PPUSH
// ComRadiation ( un ) ;
81693: LD_VAR 0 1
81697: PPUSH
81698: CALL 82860 0 1
// end ;
81702: LD_VAR 0 2
81706: RET
// export function SOS_UnitKamikazed ( un ) ; begin
81707: LD_INT 0
81709: PPUSH
// ComRadiation ( un ) ;
81710: LD_VAR 0 1
81714: PPUSH
81715: CALL 82860 0 1
// end ;
81719: LD_VAR 0 2
81723: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
81724: LD_INT 0
81726: PPUSH
// end ;
81727: LD_VAR 0 4
81731: RET
// export function SOS_Command ( cmd ) ; begin
81732: LD_INT 0
81734: PPUSH
// end ;
81735: LD_VAR 0 2
81739: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
81740: LD_INT 0
81742: PPUSH
// end ;
81743: LD_VAR 0 6
81747: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
81748: LD_INT 0
81750: PPUSH
81751: PPUSH
81752: PPUSH
81753: PPUSH
81754: PPUSH
// if not vehicle or not factory then
81755: LD_VAR 0 1
81759: NOT
81760: IFTRUE 81769
81762: PUSH
81763: LD_VAR 0 2
81767: NOT
81768: OR
81769: IFFALSE 81773
// exit ;
81771: GO 82435
// weapon := GetWeapon ( vehicle ) ;
81773: LD_ADDR_VAR 0 7
81777: PUSH
81778: LD_VAR 0 1
81782: PPUSH
81783: CALL_OW 264
81787: ST_TO_ADDR
// if weapon = ar_miner then
81788: LD_VAR 0 7
81792: PUSH
81793: LD_INT 81
81795: EQUAL
81796: IFFALSE 81853
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
81798: LD_ADDR_EXP 134
81802: PUSH
81803: LD_EXP 134
81807: PPUSH
81808: LD_EXP 134
81812: PUSH
81813: LD_INT 1
81815: PLUS
81816: PPUSH
81817: LD_VAR 0 1
81821: PPUSH
81822: CALL_OW 1
81826: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81827: LD_ADDR_EXP 135
81831: PUSH
81832: LD_EXP 135
81836: PPUSH
81837: LD_EXP 135
81841: PUSH
81842: LD_INT 1
81844: PLUS
81845: PPUSH
81846: EMPTY
81847: PPUSH
81848: CALL_OW 1
81852: ST_TO_ADDR
// end ; if not factoryWaypoints then
81853: LD_EXP 123
81857: NOT
81858: IFFALSE 81862
// exit ;
81860: GO 82435
// for i := 1 to Count ( factoryWaypoints ) do
81862: LD_ADDR_VAR 0 4
81866: PUSH
81867: DOUBLE
81868: LD_INT 1
81870: DEC
81871: ST_TO_ADDR
81872: LD_EXP 123
81876: PPUSH
81877: CALL 24274 0 1
81881: PUSH
81882: FOR_TO
81883: IFFALSE 82433
// if factoryWaypoints [ i ] [ 2 ] = factory then
81885: LD_EXP 123
81889: PUSH
81890: LD_VAR 0 4
81894: ARRAY
81895: PUSH
81896: LD_INT 2
81898: ARRAY
81899: PUSH
81900: LD_VAR 0 2
81904: EQUAL
81905: IFFALSE 82431
// begin if GetControl ( vehicle ) = control_manual then
81907: LD_VAR 0 1
81911: PPUSH
81912: CALL_OW 263
81916: PUSH
81917: LD_INT 1
81919: EQUAL
81920: IFFALSE 82284
// begin driver := IsDrivenBy ( vehicle ) ;
81922: LD_ADDR_VAR 0 5
81926: PUSH
81927: LD_VAR 0 1
81931: PPUSH
81932: CALL_OW 311
81936: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
81937: LD_VAR 0 5
81941: PUSH
81942: LD_EXP 124
81946: IN
81947: IFTRUE 81961
81949: PUSH
81950: LD_VAR 0 1
81954: PUSH
81955: LD_EXP 124
81959: IN
81960: OR
81961: IFFALSE 81967
// exit ;
81963: POP
81964: POP
81965: GO 82435
// if not HasTask ( driver ) then
81967: LD_VAR 0 5
81971: PPUSH
81972: CALL_OW 314
81976: NOT
81977: IFFALSE 82282
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
81979: LD_ADDR_EXP 124
81983: PUSH
81984: LD_EXP 124
81988: PPUSH
81989: LD_VAR 0 5
81993: PPUSH
81994: CALL 60250 0 2
81998: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
81999: LD_ADDR_EXP 124
82003: PUSH
82004: LD_EXP 124
82008: PPUSH
82009: LD_VAR 0 1
82013: PPUSH
82014: CALL 60250 0 2
82018: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
82019: LD_ADDR_VAR 0 6
82023: PUSH
82024: LD_EXP 123
82028: PUSH
82029: LD_VAR 0 4
82033: ARRAY
82034: PUSH
82035: LD_INT 3
82037: ARRAY
82038: PPUSH
82039: LD_EXP 123
82043: PUSH
82044: LD_VAR 0 4
82048: ARRAY
82049: PUSH
82050: LD_INT 4
82052: ARRAY
82053: PPUSH
82054: CALL_OW 428
82058: ST_TO_ADDR
// if hex then
82059: LD_VAR 0 6
82063: IFFALSE 82081
// ComMoveUnit ( driver , hex ) else
82065: LD_VAR 0 5
82069: PPUSH
82070: LD_VAR 0 6
82074: PPUSH
82075: CALL_OW 112
82079: GO 82165
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
82081: LD_VAR 0 1
82085: PPUSH
82086: LD_EXP 123
82090: PUSH
82091: LD_VAR 0 4
82095: ARRAY
82096: PUSH
82097: LD_INT 3
82099: ARRAY
82100: PPUSH
82101: LD_EXP 123
82105: PUSH
82106: LD_VAR 0 4
82110: ARRAY
82111: PUSH
82112: LD_INT 4
82114: ARRAY
82115: PPUSH
82116: CALL_OW 297
82120: PUSH
82121: LD_INT 0
82123: GREATER
82124: IFFALSE 82165
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
82126: LD_VAR 0 5
82130: PPUSH
82131: LD_EXP 123
82135: PUSH
82136: LD_VAR 0 4
82140: ARRAY
82141: PUSH
82142: LD_INT 3
82144: ARRAY
82145: PPUSH
82146: LD_EXP 123
82150: PUSH
82151: LD_VAR 0 4
82155: ARRAY
82156: PUSH
82157: LD_INT 4
82159: ARRAY
82160: PPUSH
82161: CALL_OW 111
// AddComExitVehicle ( driver ) ;
82165: LD_VAR 0 5
82169: PPUSH
82170: CALL_OW 181
// if Multiplayer then
82174: LD_OWVAR 4
82178: IFFALSE 82227
// begin repeat wait ( 10 ) ;
82180: LD_INT 10
82182: PPUSH
82183: CALL_OW 67
// until not IsInUnit ( driver ) ;
82187: LD_VAR 0 5
82191: PPUSH
82192: CALL_OW 310
82196: NOT
82197: IFFALSE 82180
// if not HasTask ( driver ) then
82199: LD_VAR 0 5
82203: PPUSH
82204: CALL_OW 314
82208: NOT
82209: IFFALSE 82225
// ComEnterUnit ( driver , factory ) ;
82211: LD_VAR 0 5
82215: PPUSH
82216: LD_VAR 0 2
82220: PPUSH
82221: CALL_OW 120
// end else
82225: GO 82241
// AddComEnterUnit ( driver , factory ) ;
82227: LD_VAR 0 5
82231: PPUSH
82232: LD_VAR 0 2
82236: PPUSH
82237: CALL_OW 180
// wait ( 0 0$1 ) ;
82241: LD_INT 35
82243: PPUSH
82244: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
82248: LD_ADDR_EXP 124
82252: PUSH
82253: LD_EXP 124
82257: PUSH
82258: LD_VAR 0 5
82262: DIFF
82263: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
82264: LD_ADDR_EXP 124
82268: PUSH
82269: LD_EXP 124
82273: PUSH
82274: LD_VAR 0 1
82278: DIFF
82279: ST_TO_ADDR
// break ;
82280: GO 82433
// end ; end else
82282: GO 82431
// if GetControl ( vehicle ) = control_remote then
82284: LD_VAR 0 1
82288: PPUSH
82289: CALL_OW 263
82293: PUSH
82294: LD_INT 2
82296: EQUAL
82297: IFFALSE 82383
// begin wait ( 0 0$2 ) ;
82299: LD_INT 70
82301: PPUSH
82302: CALL_OW 67
// repeat wait ( 10 ) ;
82306: LD_INT 10
82308: PPUSH
82309: CALL_OW 67
// Connect ( vehicle ) ;
82313: LD_VAR 0 1
82317: PPUSH
82318: CALL 30552 0 1
// until IsControledBy ( vehicle ) ;
82322: LD_VAR 0 1
82326: PPUSH
82327: CALL_OW 312
82331: IFFALSE 82306
// wait ( 10 ) ;
82333: LD_INT 10
82335: PPUSH
82336: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
82340: LD_VAR 0 1
82344: PPUSH
82345: LD_EXP 123
82349: PUSH
82350: LD_VAR 0 4
82354: ARRAY
82355: PUSH
82356: LD_INT 3
82358: ARRAY
82359: PPUSH
82360: LD_EXP 123
82364: PUSH
82365: LD_VAR 0 4
82369: ARRAY
82370: PUSH
82371: LD_INT 4
82373: ARRAY
82374: PPUSH
82375: CALL_OW 111
// break ;
82379: GO 82433
// end else
82381: GO 82431
// begin wait ( 0 0$3 ) ;
82383: LD_INT 105
82385: PPUSH
82386: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
82390: LD_VAR 0 1
82394: PPUSH
82395: LD_EXP 123
82399: PUSH
82400: LD_VAR 0 4
82404: ARRAY
82405: PUSH
82406: LD_INT 3
82408: ARRAY
82409: PPUSH
82410: LD_EXP 123
82414: PUSH
82415: LD_VAR 0 4
82419: ARRAY
82420: PUSH
82421: LD_INT 4
82423: ARRAY
82424: PPUSH
82425: CALL_OW 111
// break ;
82429: GO 82433
// end ; end ;
82431: GO 81882
82433: POP
82434: POP
// end ;
82435: LD_VAR 0 3
82439: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82440: LD_INT 0
82442: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82443: LD_VAR 0 1
82447: PUSH
82448: LD_INT 250
82450: EQUAL
82451: IFFALSE 82468
82453: PUSH
82454: LD_VAR 0 2
82458: PPUSH
82459: CALL_OW 264
82463: PUSH
82464: LD_INT 81
82466: EQUAL
82467: AND
82468: IFFALSE 82489
// MinerPlaceMine ( unit , x , y ) ;
82470: LD_VAR 0 2
82474: PPUSH
82475: LD_VAR 0 4
82479: PPUSH
82480: LD_VAR 0 5
82484: PPUSH
82485: CALL 85835 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82489: LD_VAR 0 1
82493: PUSH
82494: LD_INT 251
82496: EQUAL
82497: IFFALSE 82514
82499: PUSH
82500: LD_VAR 0 2
82504: PPUSH
82505: CALL_OW 264
82509: PUSH
82510: LD_INT 81
82512: EQUAL
82513: AND
82514: IFFALSE 82535
// MinerDetonateMine ( unit , x , y ) ;
82516: LD_VAR 0 2
82520: PPUSH
82521: LD_VAR 0 4
82525: PPUSH
82526: LD_VAR 0 5
82530: PPUSH
82531: CALL 86242 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82535: LD_VAR 0 1
82539: PUSH
82540: LD_INT 252
82542: EQUAL
82543: IFFALSE 82560
82545: PUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: CALL_OW 264
82555: PUSH
82556: LD_INT 81
82558: EQUAL
82559: AND
82560: IFFALSE 82581
// MinerCreateMinefield ( unit , x , y ) ;
82562: LD_VAR 0 2
82566: PPUSH
82567: LD_VAR 0 4
82571: PPUSH
82572: LD_VAR 0 5
82576: PPUSH
82577: CALL 86474 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82581: LD_VAR 0 1
82585: PUSH
82586: LD_INT 253
82588: EQUAL
82589: IFFALSE 82606
82591: PUSH
82592: LD_VAR 0 2
82596: PPUSH
82597: CALL_OW 257
82601: PUSH
82602: LD_INT 5
82604: EQUAL
82605: AND
82606: IFFALSE 82627
// ComBinocular ( unit , x , y ) ;
82608: LD_VAR 0 2
82612: PPUSH
82613: LD_VAR 0 4
82617: PPUSH
82618: LD_VAR 0 5
82622: PPUSH
82623: CALL 86849 0 3
// if selectedUnit then
82627: LD_VAR 0 3
82631: IFFALSE 82691
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82633: LD_VAR 0 1
82637: PUSH
82638: LD_INT 254
82640: EQUAL
82641: IFFALSE 82658
82643: PUSH
82644: LD_VAR 0 2
82648: PPUSH
82649: CALL_OW 264
82653: PUSH
82654: LD_INT 99
82656: EQUAL
82657: AND
82658: IFFALSE 82675
82660: PUSH
82661: LD_VAR 0 3
82665: PPUSH
82666: CALL_OW 263
82670: PUSH
82671: LD_INT 3
82673: EQUAL
82674: AND
82675: IFFALSE 82691
// HackDestroyVehicle ( unit , selectedUnit ) ;
82677: LD_VAR 0 2
82681: PPUSH
82682: LD_VAR 0 3
82686: PPUSH
82687: CALL 85025 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82691: LD_VAR 0 1
82695: PUSH
82696: LD_INT 255
82698: EQUAL
82699: IFFALSE 82723
82701: PUSH
82702: LD_VAR 0 2
82706: PPUSH
82707: CALL_OW 264
82711: PUSH
82712: LD_INT 14
82714: PUSH
82715: LD_INT 53
82717: PUSH
82718: EMPTY
82719: LIST
82720: LIST
82721: IN
82722: AND
82723: IFFALSE 82741
82725: PUSH
82726: LD_VAR 0 4
82730: PPUSH
82731: LD_VAR 0 5
82735: PPUSH
82736: CALL_OW 488
82740: AND
82741: IFFALSE 82765
// CutTreeXYR ( unit , x , y , 12 ) ;
82743: LD_VAR 0 2
82747: PPUSH
82748: LD_VAR 0 4
82752: PPUSH
82753: LD_VAR 0 5
82757: PPUSH
82758: LD_INT 12
82760: PPUSH
82761: CALL 82956 0 4
// if cmd = 256 then
82765: LD_VAR 0 1
82769: PUSH
82770: LD_INT 256
82772: EQUAL
82773: IFFALSE 82794
// SetFactoryWaypoint ( unit , x , y ) ;
82775: LD_VAR 0 2
82779: PPUSH
82780: LD_VAR 0 4
82784: PPUSH
82785: LD_VAR 0 5
82789: PPUSH
82790: CALL 80235 0 3
// if cmd = 257 then
82794: LD_VAR 0 1
82798: PUSH
82799: LD_INT 257
82801: EQUAL
82802: IFFALSE 82823
// SetWarehouseGatheringPoint ( unit , x , y ) ;
82804: LD_VAR 0 2
82808: PPUSH
82809: LD_VAR 0 4
82813: PPUSH
82814: LD_VAR 0 5
82818: PPUSH
82819: CALL 80731 0 3
// if cmd = 258 then
82823: LD_VAR 0 1
82827: PUSH
82828: LD_INT 258
82830: EQUAL
82831: IFFALSE 82855
// BurnTreeXYR ( unit , x , y , 8 ) ;
82833: LD_VAR 0 2
82837: PPUSH
82838: LD_VAR 0 4
82842: PPUSH
82843: LD_VAR 0 5
82847: PPUSH
82848: LD_INT 8
82850: PPUSH
82851: CALL 83378 0 4
// end ;
82855: LD_VAR 0 6
82859: RET
// export function ComRadiation ( un ) ; var eff ; begin
82860: LD_INT 0
82862: PPUSH
82863: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
82864: LD_VAR 0 1
82868: PPUSH
82869: CALL_OW 264
82873: PUSH
82874: LD_INT 91
82876: NONEQUAL
82877: IFFALSE 82881
// exit ;
82879: GO 82951
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82881: LD_INT 68
82883: PPUSH
82884: LD_VAR 0 1
82888: PPUSH
82889: CALL_OW 255
82893: PPUSH
82894: CALL_OW 321
82898: PUSH
82899: LD_INT 2
82901: EQUAL
82902: IFFALSE 82914
// eff := 50 else
82904: LD_ADDR_VAR 0 3
82908: PUSH
82909: LD_INT 50
82911: ST_TO_ADDR
82912: GO 82922
// eff := 25 ;
82914: LD_ADDR_VAR 0 3
82918: PUSH
82919: LD_INT 25
82921: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82922: LD_VAR 0 1
82926: PPUSH
82927: CALL_OW 250
82931: PPUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 251
82941: PPUSH
82942: LD_VAR 0 3
82946: PPUSH
82947: CALL_OW 495
// end ;
82951: LD_VAR 0 2
82955: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82956: LD_INT 0
82958: PPUSH
82959: PPUSH
82960: PPUSH
82961: PPUSH
82962: PPUSH
82963: PPUSH
82964: PPUSH
82965: PPUSH
82966: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
82967: LD_VAR 0 1
82971: PPUSH
82972: CALL_OW 302
82976: NOT
82977: IFTRUE 82996
82979: PUSH
82980: LD_VAR 0 2
82984: PPUSH
82985: LD_VAR 0 3
82989: PPUSH
82990: CALL_OW 488
82994: NOT
82995: OR
82996: IFTRUE 83005
82998: PUSH
82999: LD_VAR 0 4
83003: NOT
83004: OR
83005: IFFALSE 83009
// exit ;
83007: GO 83373
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
83009: LD_VAR 0 1
83013: PPUSH
83014: CALL_OW 437
83018: PPUSH
83019: CALL 24274 0 1
83023: PUSH
83024: LD_INT 10
83026: GREATER
83027: IFFALSE 83031
// exit ;
83029: GO 83373
// list := [ ] ;
83031: LD_ADDR_VAR 0 13
83035: PUSH
83036: EMPTY
83037: ST_TO_ADDR
// if x - r < 0 then
83038: LD_VAR 0 2
83042: PUSH
83043: LD_VAR 0 4
83047: MINUS
83048: PUSH
83049: LD_INT 0
83051: LESS
83052: IFFALSE 83064
// min_x := 0 else
83054: LD_ADDR_VAR 0 7
83058: PUSH
83059: LD_INT 0
83061: ST_TO_ADDR
83062: GO 83080
// min_x := x - r ;
83064: LD_ADDR_VAR 0 7
83068: PUSH
83069: LD_VAR 0 2
83073: PUSH
83074: LD_VAR 0 4
83078: MINUS
83079: ST_TO_ADDR
// if y - r < 0 then
83080: LD_VAR 0 3
83084: PUSH
83085: LD_VAR 0 4
83089: MINUS
83090: PUSH
83091: LD_INT 0
83093: LESS
83094: IFFALSE 83106
// min_y := 0 else
83096: LD_ADDR_VAR 0 8
83100: PUSH
83101: LD_INT 0
83103: ST_TO_ADDR
83104: GO 83122
// min_y := y - r ;
83106: LD_ADDR_VAR 0 8
83110: PUSH
83111: LD_VAR 0 3
83115: PUSH
83116: LD_VAR 0 4
83120: MINUS
83121: ST_TO_ADDR
// max_x := x + r ;
83122: LD_ADDR_VAR 0 9
83126: PUSH
83127: LD_VAR 0 2
83131: PUSH
83132: LD_VAR 0 4
83136: PLUS
83137: ST_TO_ADDR
// max_y := y + r ;
83138: LD_ADDR_VAR 0 10
83142: PUSH
83143: LD_VAR 0 3
83147: PUSH
83148: LD_VAR 0 4
83152: PLUS
83153: ST_TO_ADDR
// for _x = min_x to max_x do
83154: LD_ADDR_VAR 0 11
83158: PUSH
83159: DOUBLE
83160: LD_VAR 0 7
83164: DEC
83165: ST_TO_ADDR
83166: LD_VAR 0 9
83170: PUSH
83171: FOR_TO
83172: IFFALSE 83291
// for _y = min_y to max_y do
83174: LD_ADDR_VAR 0 12
83178: PUSH
83179: DOUBLE
83180: LD_VAR 0 8
83184: DEC
83185: ST_TO_ADDR
83186: LD_VAR 0 10
83190: PUSH
83191: FOR_TO
83192: IFFALSE 83287
// begin if not ValidHex ( _x , _y ) then
83194: LD_VAR 0 11
83198: PPUSH
83199: LD_VAR 0 12
83203: PPUSH
83204: CALL_OW 488
83208: NOT
83209: IFFALSE 83213
// continue ;
83211: GO 83191
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83213: LD_VAR 0 11
83217: PPUSH
83218: LD_VAR 0 12
83222: PPUSH
83223: CALL_OW 351
83227: IFFALSE 83245
83229: PUSH
83230: LD_VAR 0 11
83234: PPUSH
83235: LD_VAR 0 12
83239: PPUSH
83240: CALL_OW 554
83244: AND
83245: IFFALSE 83285
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83247: LD_ADDR_VAR 0 13
83251: PUSH
83252: LD_VAR 0 13
83256: PPUSH
83257: LD_VAR 0 13
83261: PUSH
83262: LD_INT 1
83264: PLUS
83265: PPUSH
83266: LD_VAR 0 11
83270: PUSH
83271: LD_VAR 0 12
83275: PUSH
83276: EMPTY
83277: LIST
83278: LIST
83279: PPUSH
83280: CALL_OW 2
83284: ST_TO_ADDR
// end ;
83285: GO 83191
83287: POP
83288: POP
83289: GO 83171
83291: POP
83292: POP
// if not list then
83293: LD_VAR 0 13
83297: NOT
83298: IFFALSE 83302
// exit ;
83300: GO 83373
// for i in list do
83302: LD_ADDR_VAR 0 6
83306: PUSH
83307: LD_VAR 0 13
83311: PUSH
83312: FOR_IN
83313: IFFALSE 83371
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83315: LD_VAR 0 1
83319: PPUSH
83320: LD_STRING M
83322: PUSH
83323: LD_VAR 0 6
83327: PUSH
83328: LD_INT 1
83330: ARRAY
83331: PUSH
83332: LD_VAR 0 6
83336: PUSH
83337: LD_INT 2
83339: ARRAY
83340: PUSH
83341: LD_INT 0
83343: PUSH
83344: LD_INT 0
83346: PUSH
83347: LD_INT 0
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: EMPTY
83354: LIST
83355: LIST
83356: LIST
83357: LIST
83358: LIST
83359: LIST
83360: LIST
83361: PUSH
83362: EMPTY
83363: LIST
83364: PPUSH
83365: CALL_OW 447
83369: GO 83312
83371: POP
83372: POP
// end ;
83373: LD_VAR 0 5
83377: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
83378: LD_INT 0
83380: PPUSH
83381: PPUSH
83382: PPUSH
83383: PPUSH
83384: PPUSH
83385: PPUSH
83386: PPUSH
83387: PPUSH
83388: PPUSH
83389: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
83390: LD_VAR 0 1
83394: PPUSH
83395: CALL_OW 302
83399: NOT
83400: IFTRUE 83419
83402: PUSH
83403: LD_VAR 0 2
83407: PPUSH
83408: LD_VAR 0 3
83412: PPUSH
83413: CALL_OW 488
83417: NOT
83418: OR
83419: IFTRUE 83428
83421: PUSH
83422: LD_VAR 0 4
83426: NOT
83427: OR
83428: IFFALSE 83432
// exit ;
83430: GO 83971
// if Count ( GetTaskList ( flame ) ) > 10 then
83432: LD_VAR 0 1
83436: PPUSH
83437: CALL_OW 437
83441: PPUSH
83442: CALL 24274 0 1
83446: PUSH
83447: LD_INT 10
83449: GREATER
83450: IFFALSE 83454
// exit ;
83452: GO 83971
// list := [ ] ;
83454: LD_ADDR_VAR 0 13
83458: PUSH
83459: EMPTY
83460: ST_TO_ADDR
// if x - r < 0 then
83461: LD_VAR 0 2
83465: PUSH
83466: LD_VAR 0 4
83470: MINUS
83471: PUSH
83472: LD_INT 0
83474: LESS
83475: IFFALSE 83487
// min_x := 0 else
83477: LD_ADDR_VAR 0 7
83481: PUSH
83482: LD_INT 0
83484: ST_TO_ADDR
83485: GO 83503
// min_x := x - r ;
83487: LD_ADDR_VAR 0 7
83491: PUSH
83492: LD_VAR 0 2
83496: PUSH
83497: LD_VAR 0 4
83501: MINUS
83502: ST_TO_ADDR
// if y - r < 0 then
83503: LD_VAR 0 3
83507: PUSH
83508: LD_VAR 0 4
83512: MINUS
83513: PUSH
83514: LD_INT 0
83516: LESS
83517: IFFALSE 83529
// min_y := 0 else
83519: LD_ADDR_VAR 0 8
83523: PUSH
83524: LD_INT 0
83526: ST_TO_ADDR
83527: GO 83545
// min_y := y - r ;
83529: LD_ADDR_VAR 0 8
83533: PUSH
83534: LD_VAR 0 3
83538: PUSH
83539: LD_VAR 0 4
83543: MINUS
83544: ST_TO_ADDR
// max_x := x + r ;
83545: LD_ADDR_VAR 0 9
83549: PUSH
83550: LD_VAR 0 2
83554: PUSH
83555: LD_VAR 0 4
83559: PLUS
83560: ST_TO_ADDR
// max_y := y + r ;
83561: LD_ADDR_VAR 0 10
83565: PUSH
83566: LD_VAR 0 3
83570: PUSH
83571: LD_VAR 0 4
83575: PLUS
83576: ST_TO_ADDR
// for _x = min_x to max_x do
83577: LD_ADDR_VAR 0 11
83581: PUSH
83582: DOUBLE
83583: LD_VAR 0 7
83587: DEC
83588: ST_TO_ADDR
83589: LD_VAR 0 9
83593: PUSH
83594: FOR_TO
83595: IFFALSE 83714
// for _y = min_y to max_y do
83597: LD_ADDR_VAR 0 12
83601: PUSH
83602: DOUBLE
83603: LD_VAR 0 8
83607: DEC
83608: ST_TO_ADDR
83609: LD_VAR 0 10
83613: PUSH
83614: FOR_TO
83615: IFFALSE 83710
// begin if not ValidHex ( _x , _y ) then
83617: LD_VAR 0 11
83621: PPUSH
83622: LD_VAR 0 12
83626: PPUSH
83627: CALL_OW 488
83631: NOT
83632: IFFALSE 83636
// continue ;
83634: GO 83614
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83636: LD_VAR 0 11
83640: PPUSH
83641: LD_VAR 0 12
83645: PPUSH
83646: CALL_OW 351
83650: IFFALSE 83668
83652: PUSH
83653: LD_VAR 0 11
83657: PPUSH
83658: LD_VAR 0 12
83662: PPUSH
83663: CALL_OW 554
83667: AND
83668: IFFALSE 83708
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83670: LD_ADDR_VAR 0 13
83674: PUSH
83675: LD_VAR 0 13
83679: PPUSH
83680: LD_VAR 0 13
83684: PUSH
83685: LD_INT 1
83687: PLUS
83688: PPUSH
83689: LD_VAR 0 11
83693: PUSH
83694: LD_VAR 0 12
83698: PUSH
83699: EMPTY
83700: LIST
83701: LIST
83702: PPUSH
83703: CALL_OW 2
83707: ST_TO_ADDR
// end ;
83708: GO 83614
83710: POP
83711: POP
83712: GO 83594
83714: POP
83715: POP
// if not list then
83716: LD_VAR 0 13
83720: NOT
83721: IFFALSE 83725
// exit ;
83723: GO 83971
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
83725: LD_ADDR_VAR 0 13
83729: PUSH
83730: LD_VAR 0 1
83734: PPUSH
83735: LD_VAR 0 13
83739: PPUSH
83740: LD_INT 1
83742: PPUSH
83743: LD_INT 1
83745: PPUSH
83746: CALL 27680 0 4
83750: ST_TO_ADDR
// ComStop ( flame ) ;
83751: LD_VAR 0 1
83755: PPUSH
83756: CALL_OW 141
// for i in list do
83760: LD_ADDR_VAR 0 6
83764: PUSH
83765: LD_VAR 0 13
83769: PUSH
83770: FOR_IN
83771: IFFALSE 83802
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
83773: LD_VAR 0 1
83777: PPUSH
83778: LD_VAR 0 6
83782: PUSH
83783: LD_INT 1
83785: ARRAY
83786: PPUSH
83787: LD_VAR 0 6
83791: PUSH
83792: LD_INT 2
83794: ARRAY
83795: PPUSH
83796: CALL_OW 176
83800: GO 83770
83802: POP
83803: POP
// repeat wait ( 0 0$1 ) ;
83804: LD_INT 35
83806: PPUSH
83807: CALL_OW 67
// task := GetTaskList ( flame ) ;
83811: LD_ADDR_VAR 0 14
83815: PUSH
83816: LD_VAR 0 1
83820: PPUSH
83821: CALL_OW 437
83825: ST_TO_ADDR
// if not task then
83826: LD_VAR 0 14
83830: NOT
83831: IFFALSE 83835
// exit ;
83833: GO 83971
// if task [ 1 ] [ 1 ] <> | then
83835: LD_VAR 0 14
83839: PUSH
83840: LD_INT 1
83842: ARRAY
83843: PUSH
83844: LD_INT 1
83846: ARRAY
83847: PUSH
83848: LD_STRING |
83850: NONEQUAL
83851: IFFALSE 83855
// exit ;
83853: GO 83971
// _x := task [ 1 ] [ 2 ] ;
83855: LD_ADDR_VAR 0 11
83859: PUSH
83860: LD_VAR 0 14
83864: PUSH
83865: LD_INT 1
83867: ARRAY
83868: PUSH
83869: LD_INT 2
83871: ARRAY
83872: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
83873: LD_ADDR_VAR 0 12
83877: PUSH
83878: LD_VAR 0 14
83882: PUSH
83883: LD_INT 1
83885: ARRAY
83886: PUSH
83887: LD_INT 3
83889: ARRAY
83890: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
83891: LD_VAR 0 11
83895: PPUSH
83896: LD_VAR 0 12
83900: PPUSH
83901: CALL_OW 351
83905: NOT
83906: IFTRUE 83925
83908: PUSH
83909: LD_VAR 0 11
83913: PPUSH
83914: LD_VAR 0 12
83918: PPUSH
83919: CALL_OW 554
83923: NOT
83924: OR
83925: IFFALSE 83959
// begin task := Delete ( task , 1 ) ;
83927: LD_ADDR_VAR 0 14
83931: PUSH
83932: LD_VAR 0 14
83936: PPUSH
83937: LD_INT 1
83939: PPUSH
83940: CALL_OW 3
83944: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
83945: LD_VAR 0 1
83949: PPUSH
83950: LD_VAR 0 14
83954: PPUSH
83955: CALL_OW 446
// end ; until not HasTask ( flame ) ;
83959: LD_VAR 0 1
83963: PPUSH
83964: CALL_OW 314
83968: NOT
83969: IFFALSE 83804
// end ;
83971: LD_VAR 0 5
83975: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83976: LD_EXP 127
83980: NOT
83981: IFFALSE 84031
83983: GO 83985
83985: DISABLE
// begin initHack := true ;
83986: LD_ADDR_EXP 127
83990: PUSH
83991: LD_INT 1
83993: ST_TO_ADDR
// hackTanks := [ ] ;
83994: LD_ADDR_EXP 128
83998: PUSH
83999: EMPTY
84000: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84001: LD_ADDR_EXP 129
84005: PUSH
84006: EMPTY
84007: ST_TO_ADDR
// hackLimit := 3 ;
84008: LD_ADDR_EXP 130
84012: PUSH
84013: LD_INT 3
84015: ST_TO_ADDR
// hackDist := 12 ;
84016: LD_ADDR_EXP 131
84020: PUSH
84021: LD_INT 12
84023: ST_TO_ADDR
// hackCounter := [ ] ;
84024: LD_ADDR_EXP 132
84028: PUSH
84029: EMPTY
84030: ST_TO_ADDR
// end ;
84031: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84032: LD_EXP 127
84036: IFFALSE 84054
84038: PUSH
84039: LD_INT 34
84041: PUSH
84042: LD_INT 99
84044: PUSH
84045: EMPTY
84046: LIST
84047: LIST
84048: PPUSH
84049: CALL_OW 69
84053: AND
84054: IFFALSE 84307
84056: GO 84058
84058: DISABLE
84059: LD_INT 0
84061: PPUSH
84062: PPUSH
// begin enable ;
84063: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84064: LD_ADDR_VAR 0 1
84068: PUSH
84069: LD_INT 34
84071: PUSH
84072: LD_INT 99
84074: PUSH
84075: EMPTY
84076: LIST
84077: LIST
84078: PPUSH
84079: CALL_OW 69
84083: PUSH
84084: FOR_IN
84085: IFFALSE 84305
// begin if not i in hackTanks then
84087: LD_VAR 0 1
84091: PUSH
84092: LD_EXP 128
84096: IN
84097: NOT
84098: IFFALSE 84181
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84100: LD_ADDR_EXP 128
84104: PUSH
84105: LD_EXP 128
84109: PPUSH
84110: LD_EXP 128
84114: PUSH
84115: LD_INT 1
84117: PLUS
84118: PPUSH
84119: LD_VAR 0 1
84123: PPUSH
84124: CALL_OW 1
84128: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84129: LD_ADDR_EXP 129
84133: PUSH
84134: LD_EXP 129
84138: PPUSH
84139: LD_EXP 129
84143: PUSH
84144: LD_INT 1
84146: PLUS
84147: PPUSH
84148: EMPTY
84149: PPUSH
84150: CALL_OW 1
84154: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84155: LD_ADDR_EXP 132
84159: PUSH
84160: LD_EXP 132
84164: PPUSH
84165: LD_EXP 132
84169: PUSH
84170: LD_INT 1
84172: PLUS
84173: PPUSH
84174: EMPTY
84175: PPUSH
84176: CALL_OW 1
84180: ST_TO_ADDR
// end ; if not IsOk ( i ) then
84181: LD_VAR 0 1
84185: PPUSH
84186: CALL_OW 302
84190: NOT
84191: IFFALSE 84204
// begin HackUnlinkAll ( i ) ;
84193: LD_VAR 0 1
84197: PPUSH
84198: CALL 84310 0 1
// continue ;
84202: GO 84084
// end ; HackCheckCapturedStatus ( i ) ;
84204: LD_VAR 0 1
84208: PPUSH
84209: CALL 84755 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
84213: LD_ADDR_VAR 0 2
84217: PUSH
84218: LD_INT 81
84220: PUSH
84221: LD_VAR 0 1
84225: PPUSH
84226: CALL_OW 255
84230: PUSH
84231: EMPTY
84232: LIST
84233: LIST
84234: PUSH
84235: LD_INT 33
84237: PUSH
84238: LD_INT 3
84240: PUSH
84241: EMPTY
84242: LIST
84243: LIST
84244: PUSH
84245: LD_INT 91
84247: PUSH
84248: LD_VAR 0 1
84252: PUSH
84253: LD_EXP 131
84257: PUSH
84258: EMPTY
84259: LIST
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 50
84265: PUSH
84266: EMPTY
84267: LIST
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: LIST
84273: LIST
84274: PPUSH
84275: CALL_OW 69
84279: ST_TO_ADDR
// if not tmp then
84280: LD_VAR 0 2
84284: NOT
84285: IFFALSE 84289
// continue ;
84287: GO 84084
// HackLink ( i , tmp ) ;
84289: LD_VAR 0 1
84293: PPUSH
84294: LD_VAR 0 2
84298: PPUSH
84299: CALL 84446 0 2
// end ;
84303: GO 84084
84305: POP
84306: POP
// end ;
84307: PPOPN 2
84309: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
84310: LD_INT 0
84312: PPUSH
84313: PPUSH
84314: PPUSH
// if not hack in hackTanks then
84315: LD_VAR 0 1
84319: PUSH
84320: LD_EXP 128
84324: IN
84325: NOT
84326: IFFALSE 84330
// exit ;
84328: GO 84441
// index := GetElementIndex ( hackTanks , hack ) ;
84330: LD_ADDR_VAR 0 4
84334: PUSH
84335: LD_EXP 128
84339: PPUSH
84340: LD_VAR 0 1
84344: PPUSH
84345: CALL 26975 0 2
84349: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84350: LD_EXP 129
84354: PUSH
84355: LD_VAR 0 4
84359: ARRAY
84360: IFFALSE 84441
// begin for i in hackTanksCaptured [ index ] do
84362: LD_ADDR_VAR 0 3
84366: PUSH
84367: LD_EXP 129
84371: PUSH
84372: LD_VAR 0 4
84376: ARRAY
84377: PUSH
84378: FOR_IN
84379: IFFALSE 84405
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84381: LD_VAR 0 3
84385: PUSH
84386: LD_INT 1
84388: ARRAY
84389: PPUSH
84390: LD_VAR 0 3
84394: PUSH
84395: LD_INT 2
84397: ARRAY
84398: PPUSH
84399: CALL_OW 235
84403: GO 84378
84405: POP
84406: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84407: LD_ADDR_EXP 129
84411: PUSH
84412: LD_EXP 129
84416: PPUSH
84417: LD_VAR 0 4
84421: PPUSH
84422: EMPTY
84423: PPUSH
84424: CALL_OW 1
84428: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84429: LD_VAR 0 1
84433: PPUSH
84434: LD_INT 0
84436: PPUSH
84437: CALL_OW 505
// end ; end ;
84441: LD_VAR 0 2
84445: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84446: LD_INT 0
84448: PPUSH
84449: PPUSH
84450: PPUSH
// if not hack in hackTanks or not vehicles then
84451: LD_VAR 0 1
84455: PUSH
84456: LD_EXP 128
84460: IN
84461: NOT
84462: IFTRUE 84471
84464: PUSH
84465: LD_VAR 0 2
84469: NOT
84470: OR
84471: IFFALSE 84475
// exit ;
84473: GO 84750
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84475: LD_ADDR_VAR 0 2
84479: PUSH
84480: LD_VAR 0 1
84484: PPUSH
84485: LD_VAR 0 2
84489: PPUSH
84490: LD_INT 1
84492: PPUSH
84493: LD_INT 1
84495: PPUSH
84496: CALL 27627 0 4
84500: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84501: LD_ADDR_VAR 0 5
84505: PUSH
84506: LD_EXP 128
84510: PPUSH
84511: LD_VAR 0 1
84515: PPUSH
84516: CALL 26975 0 2
84520: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84521: LD_EXP 129
84525: PUSH
84526: LD_VAR 0 5
84530: ARRAY
84531: PUSH
84532: LD_EXP 130
84536: LESS
84537: IFFALSE 84726
// begin for i := 1 to vehicles do
84539: LD_ADDR_VAR 0 4
84543: PUSH
84544: DOUBLE
84545: LD_INT 1
84547: DEC
84548: ST_TO_ADDR
84549: LD_VAR 0 2
84553: PUSH
84554: FOR_TO
84555: IFFALSE 84724
// begin if hackTanksCaptured [ index ] = hackLimit then
84557: LD_EXP 129
84561: PUSH
84562: LD_VAR 0 5
84566: ARRAY
84567: PUSH
84568: LD_EXP 130
84572: EQUAL
84573: IFFALSE 84577
// break ;
84575: GO 84724
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84577: LD_ADDR_EXP 132
84581: PUSH
84582: LD_EXP 132
84586: PPUSH
84587: LD_VAR 0 5
84591: PPUSH
84592: LD_EXP 132
84596: PUSH
84597: LD_VAR 0 5
84601: ARRAY
84602: PUSH
84603: LD_INT 1
84605: PLUS
84606: PPUSH
84607: CALL_OW 1
84611: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84612: LD_ADDR_EXP 129
84616: PUSH
84617: LD_EXP 129
84621: PPUSH
84622: LD_VAR 0 5
84626: PUSH
84627: LD_EXP 129
84631: PUSH
84632: LD_VAR 0 5
84636: ARRAY
84637: PUSH
84638: LD_INT 1
84640: PLUS
84641: PUSH
84642: EMPTY
84643: LIST
84644: LIST
84645: PPUSH
84646: LD_VAR 0 2
84650: PUSH
84651: LD_VAR 0 4
84655: ARRAY
84656: PUSH
84657: LD_VAR 0 2
84661: PUSH
84662: LD_VAR 0 4
84666: ARRAY
84667: PPUSH
84668: CALL_OW 255
84672: PUSH
84673: EMPTY
84674: LIST
84675: LIST
84676: PPUSH
84677: CALL 27192 0 3
84681: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84682: LD_VAR 0 2
84686: PUSH
84687: LD_VAR 0 4
84691: ARRAY
84692: PPUSH
84693: LD_VAR 0 1
84697: PPUSH
84698: CALL_OW 255
84702: PPUSH
84703: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84707: LD_VAR 0 2
84711: PUSH
84712: LD_VAR 0 4
84716: ARRAY
84717: PPUSH
84718: CALL_OW 141
// end ;
84722: GO 84554
84724: POP
84725: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84726: LD_VAR 0 1
84730: PPUSH
84731: LD_EXP 129
84735: PUSH
84736: LD_VAR 0 5
84740: ARRAY
84741: PUSH
84742: LD_INT 0
84744: PLUS
84745: PPUSH
84746: CALL_OW 505
// end ;
84750: LD_VAR 0 3
84754: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84755: LD_INT 0
84757: PPUSH
84758: PPUSH
84759: PPUSH
84760: PPUSH
// if not hack in hackTanks then
84761: LD_VAR 0 1
84765: PUSH
84766: LD_EXP 128
84770: IN
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 85020
// index := GetElementIndex ( hackTanks , hack ) ;
84776: LD_ADDR_VAR 0 4
84780: PUSH
84781: LD_EXP 128
84785: PPUSH
84786: LD_VAR 0 1
84790: PPUSH
84791: CALL 26975 0 2
84795: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84796: LD_ADDR_VAR 0 3
84800: PUSH
84801: DOUBLE
84802: LD_EXP 129
84806: PUSH
84807: LD_VAR 0 4
84811: ARRAY
84812: INC
84813: ST_TO_ADDR
84814: LD_INT 1
84816: PUSH
84817: FOR_DOWNTO
84818: IFFALSE 84994
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84820: LD_ADDR_VAR 0 5
84824: PUSH
84825: LD_EXP 129
84829: PUSH
84830: LD_VAR 0 4
84834: ARRAY
84835: PUSH
84836: LD_VAR 0 3
84840: ARRAY
84841: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84842: LD_VAR 0 5
84846: PUSH
84847: LD_INT 1
84849: ARRAY
84850: PPUSH
84851: CALL_OW 302
84855: NOT
84856: IFTRUE 84884
84858: PUSH
84859: LD_VAR 0 5
84863: PUSH
84864: LD_INT 1
84866: ARRAY
84867: PPUSH
84868: CALL_OW 255
84872: PUSH
84873: LD_VAR 0 1
84877: PPUSH
84878: CALL_OW 255
84882: NONEQUAL
84883: OR
84884: IFFALSE 84992
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84886: LD_VAR 0 5
84890: PUSH
84891: LD_INT 1
84893: ARRAY
84894: PPUSH
84895: CALL_OW 305
84899: IFFALSE 84927
84901: PUSH
84902: LD_VAR 0 5
84906: PUSH
84907: LD_INT 1
84909: ARRAY
84910: PPUSH
84911: CALL_OW 255
84915: PUSH
84916: LD_VAR 0 1
84920: PPUSH
84921: CALL_OW 255
84925: EQUAL
84926: AND
84927: IFFALSE 84951
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84929: LD_VAR 0 5
84933: PUSH
84934: LD_INT 1
84936: ARRAY
84937: PPUSH
84938: LD_VAR 0 5
84942: PUSH
84943: LD_INT 2
84945: ARRAY
84946: PPUSH
84947: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84951: LD_ADDR_EXP 129
84955: PUSH
84956: LD_EXP 129
84960: PPUSH
84961: LD_VAR 0 4
84965: PPUSH
84966: LD_EXP 129
84970: PUSH
84971: LD_VAR 0 4
84975: ARRAY
84976: PPUSH
84977: LD_VAR 0 3
84981: PPUSH
84982: CALL_OW 3
84986: PPUSH
84987: CALL_OW 1
84991: ST_TO_ADDR
// end ; end ;
84992: GO 84817
84994: POP
84995: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84996: LD_VAR 0 1
85000: PPUSH
85001: LD_EXP 129
85005: PUSH
85006: LD_VAR 0 4
85010: ARRAY
85011: PUSH
85012: LD_INT 0
85014: PLUS
85015: PPUSH
85016: CALL_OW 505
// end ;
85020: LD_VAR 0 2
85024: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85025: LD_INT 0
85027: PPUSH
85028: PPUSH
85029: PPUSH
85030: PPUSH
// if not hack in hackTanks then
85031: LD_VAR 0 1
85035: PUSH
85036: LD_EXP 128
85040: IN
85041: NOT
85042: IFFALSE 85046
// exit ;
85044: GO 85131
// index := GetElementIndex ( hackTanks , hack ) ;
85046: LD_ADDR_VAR 0 5
85050: PUSH
85051: LD_EXP 128
85055: PPUSH
85056: LD_VAR 0 1
85060: PPUSH
85061: CALL 26975 0 2
85065: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85066: LD_ADDR_VAR 0 4
85070: PUSH
85071: DOUBLE
85072: LD_INT 1
85074: DEC
85075: ST_TO_ADDR
85076: LD_EXP 129
85080: PUSH
85081: LD_VAR 0 5
85085: ARRAY
85086: PUSH
85087: FOR_TO
85088: IFFALSE 85129
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85090: LD_EXP 129
85094: PUSH
85095: LD_VAR 0 5
85099: ARRAY
85100: PUSH
85101: LD_VAR 0 4
85105: ARRAY
85106: PUSH
85107: LD_INT 1
85109: ARRAY
85110: PUSH
85111: LD_VAR 0 2
85115: EQUAL
85116: IFFALSE 85127
// KillUnit ( vehicle ) ;
85118: LD_VAR 0 2
85122: PPUSH
85123: CALL_OW 66
85127: GO 85087
85129: POP
85130: POP
// end ;
85131: LD_VAR 0 3
85135: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
85136: LD_EXP 133
85140: NOT
85141: IFFALSE 85274
85143: GO 85145
85145: DISABLE
85146: LD_INT 0
85148: PPUSH
// begin initMiner := true ;
85149: LD_ADDR_EXP 133
85153: PUSH
85154: LD_INT 1
85156: ST_TO_ADDR
// minersList := [ ] ;
85157: LD_ADDR_EXP 134
85161: PUSH
85162: EMPTY
85163: ST_TO_ADDR
// minerMinesList := [ ] ;
85164: LD_ADDR_EXP 135
85168: PUSH
85169: EMPTY
85170: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
85171: LD_ADDR_EXP 136
85175: PUSH
85176: LD_INT 10
85178: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
85179: LD_ADDR_VAR 0 1
85183: PUSH
85184: LD_INT 34
85186: PUSH
85187: LD_INT 81
85189: PUSH
85190: EMPTY
85191: LIST
85192: LIST
85193: PPUSH
85194: CALL_OW 69
85198: PUSH
85199: FOR_IN
85200: IFFALSE 85272
// begin if not i in minersList then
85202: LD_VAR 0 1
85206: PUSH
85207: LD_EXP 134
85211: IN
85212: NOT
85213: IFFALSE 85270
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
85215: LD_ADDR_EXP 134
85219: PUSH
85220: LD_EXP 134
85224: PPUSH
85225: LD_EXP 134
85229: PUSH
85230: LD_INT 1
85232: PLUS
85233: PPUSH
85234: LD_VAR 0 1
85238: PPUSH
85239: CALL_OW 1
85243: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85244: LD_ADDR_EXP 135
85248: PUSH
85249: LD_EXP 135
85253: PPUSH
85254: LD_EXP 135
85258: PUSH
85259: LD_INT 1
85261: PLUS
85262: PPUSH
85263: EMPTY
85264: PPUSH
85265: CALL_OW 1
85269: ST_TO_ADDR
// end end ;
85270: GO 85199
85272: POP
85273: POP
// end ;
85274: PPOPN 1
85276: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
85277: LD_EXP 133
85281: IFFALSE 85312
85283: PUSH
85284: LD_EXP 135
85288: PPUSH
85289: CALL 24274 0 1
85293: IFTRUE 85311
85295: PUSH
85296: LD_INT 34
85298: PUSH
85299: LD_INT 81
85301: PUSH
85302: EMPTY
85303: LIST
85304: LIST
85305: PPUSH
85306: CALL_OW 69
85310: OR
85311: AND
85312: IFFALSE 85832
85314: GO 85316
85316: DISABLE
85317: LD_INT 0
85319: PPUSH
85320: PPUSH
85321: PPUSH
85322: PPUSH
// begin enable ;
85323: ENABLE
// for i := minerMinesList downto 1 do
85324: LD_ADDR_VAR 0 1
85328: PUSH
85329: DOUBLE
85330: LD_EXP 135
85334: INC
85335: ST_TO_ADDR
85336: LD_INT 1
85338: PUSH
85339: FOR_DOWNTO
85340: IFFALSE 85830
// begin side := GetSide ( minersList [ i ] ) ;
85342: LD_ADDR_VAR 0 3
85346: PUSH
85347: LD_EXP 134
85351: PUSH
85352: LD_VAR 0 1
85356: ARRAY
85357: PPUSH
85358: CALL_OW 255
85362: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
85363: LD_EXP 134
85367: PUSH
85368: LD_VAR 0 1
85372: ARRAY
85373: PPUSH
85374: CALL_OW 300
85378: IFFALSE 85399
85380: PUSH
85381: LD_VAR 0 3
85385: PUSH
85386: LD_OWVAR 2
85390: PUSH
85391: LD_INT 9
85393: PUSH
85394: EMPTY
85395: LIST
85396: LIST
85397: IN
85398: AND
85399: IFFALSE 85432
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
85401: LD_EXP 134
85405: PUSH
85406: LD_VAR 0 1
85410: ARRAY
85411: PPUSH
85412: LD_EXP 135
85416: PUSH
85417: LD_VAR 0 1
85421: ARRAY
85422: PPUSH
85423: CALL 24274 0 1
85427: PPUSH
85428: CALL_OW 505
// if not minerMinesList [ i ] then
85432: LD_EXP 135
85436: PUSH
85437: LD_VAR 0 1
85441: ARRAY
85442: NOT
85443: IFFALSE 85447
// continue ;
85445: GO 85339
// for j := minerMinesList [ i ] downto 1 do
85447: LD_ADDR_VAR 0 2
85451: PUSH
85452: DOUBLE
85453: LD_EXP 135
85457: PUSH
85458: LD_VAR 0 1
85462: ARRAY
85463: INC
85464: ST_TO_ADDR
85465: LD_INT 1
85467: PUSH
85468: FOR_DOWNTO
85469: IFFALSE 85826
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
85471: LD_EXP 134
85475: PUSH
85476: LD_VAR 0 1
85480: ARRAY
85481: PPUSH
85482: CALL_OW 301
85486: IFTRUE 85506
85488: PUSH
85489: LD_EXP 134
85493: PUSH
85494: LD_VAR 0 1
85498: ARRAY
85499: PPUSH
85500: CALL_OW 305
85504: NOT
85505: OR
85506: IFFALSE 85597
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85508: LD_EXP 135
85512: PUSH
85513: LD_VAR 0 1
85517: ARRAY
85518: PUSH
85519: LD_VAR 0 2
85523: ARRAY
85524: PUSH
85525: LD_INT 1
85527: ARRAY
85528: PPUSH
85529: LD_EXP 135
85533: PUSH
85534: LD_VAR 0 1
85538: ARRAY
85539: PUSH
85540: LD_VAR 0 2
85544: ARRAY
85545: PUSH
85546: LD_INT 2
85548: ARRAY
85549: PPUSH
85550: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85554: LD_ADDR_EXP 135
85558: PUSH
85559: LD_EXP 135
85563: PPUSH
85564: LD_VAR 0 1
85568: PPUSH
85569: LD_EXP 135
85573: PUSH
85574: LD_VAR 0 1
85578: ARRAY
85579: PPUSH
85580: LD_VAR 0 2
85584: PPUSH
85585: CALL_OW 3
85589: PPUSH
85590: CALL_OW 1
85594: ST_TO_ADDR
// continue ;
85595: GO 85468
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85597: LD_ADDR_VAR 0 4
85601: PUSH
85602: LD_EXP 135
85606: PUSH
85607: LD_VAR 0 1
85611: ARRAY
85612: PUSH
85613: LD_VAR 0 2
85617: ARRAY
85618: PUSH
85619: LD_INT 1
85621: ARRAY
85622: PPUSH
85623: LD_EXP 135
85627: PUSH
85628: LD_VAR 0 1
85632: ARRAY
85633: PUSH
85634: LD_VAR 0 2
85638: ARRAY
85639: PUSH
85640: LD_INT 2
85642: ARRAY
85643: PPUSH
85644: CALL_OW 428
85648: ST_TO_ADDR
// if not tmp then
85649: LD_VAR 0 4
85653: NOT
85654: IFFALSE 85658
// continue ;
85656: GO 85468
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85658: LD_VAR 0 4
85662: PUSH
85663: LD_INT 81
85665: PUSH
85666: LD_VAR 0 3
85670: PUSH
85671: EMPTY
85672: LIST
85673: LIST
85674: PPUSH
85675: CALL_OW 69
85679: IN
85680: IFFALSE 85730
85682: PUSH
85683: LD_EXP 135
85687: PUSH
85688: LD_VAR 0 1
85692: ARRAY
85693: PUSH
85694: LD_VAR 0 2
85698: ARRAY
85699: PUSH
85700: LD_INT 1
85702: ARRAY
85703: PPUSH
85704: LD_EXP 135
85708: PUSH
85709: LD_VAR 0 1
85713: ARRAY
85714: PUSH
85715: LD_VAR 0 2
85719: ARRAY
85720: PUSH
85721: LD_INT 2
85723: ARRAY
85724: PPUSH
85725: CALL_OW 458
85729: AND
85730: IFFALSE 85824
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85732: LD_EXP 135
85736: PUSH
85737: LD_VAR 0 1
85741: ARRAY
85742: PUSH
85743: LD_VAR 0 2
85747: ARRAY
85748: PUSH
85749: LD_INT 1
85751: ARRAY
85752: PPUSH
85753: LD_EXP 135
85757: PUSH
85758: LD_VAR 0 1
85762: ARRAY
85763: PUSH
85764: LD_VAR 0 2
85768: ARRAY
85769: PUSH
85770: LD_INT 2
85772: ARRAY
85773: PPUSH
85774: LD_VAR 0 3
85778: PPUSH
85779: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85783: LD_ADDR_EXP 135
85787: PUSH
85788: LD_EXP 135
85792: PPUSH
85793: LD_VAR 0 1
85797: PPUSH
85798: LD_EXP 135
85802: PUSH
85803: LD_VAR 0 1
85807: ARRAY
85808: PPUSH
85809: LD_VAR 0 2
85813: PPUSH
85814: CALL_OW 3
85818: PPUSH
85819: CALL_OW 1
85823: ST_TO_ADDR
// end ; end ;
85824: GO 85468
85826: POP
85827: POP
// end ;
85828: GO 85339
85830: POP
85831: POP
// end ;
85832: PPOPN 4
85834: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
85835: LD_INT 0
85837: PPUSH
85838: PPUSH
85839: PPUSH
85840: PPUSH
// result := false ;
85841: LD_ADDR_VAR 0 4
85845: PUSH
85846: LD_INT 0
85848: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85849: LD_VAR 0 1
85853: PPUSH
85854: CALL_OW 264
85858: PUSH
85859: LD_INT 81
85861: EQUAL
85862: NOT
85863: IFFALSE 85867
// exit ;
85865: GO 86237
// side := GetSide ( unit ) ;
85867: LD_ADDR_VAR 0 6
85871: PUSH
85872: LD_VAR 0 1
85876: PPUSH
85877: CALL_OW 255
85881: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
85882: LD_ADDR_VAR 0 5
85886: PUSH
85887: LD_EXP 134
85891: PPUSH
85892: LD_VAR 0 1
85896: PPUSH
85897: CALL 26975 0 2
85901: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85902: LD_EXP 135
85906: PUSH
85907: LD_VAR 0 5
85911: ARRAY
85912: PUSH
85913: LD_EXP 136
85917: GREATEREQUAL
85918: IFFALSE 85922
// exit ;
85920: GO 86237
// ComMoveXY ( unit , x , y ) ;
85922: LD_VAR 0 1
85926: PPUSH
85927: LD_VAR 0 2
85931: PPUSH
85932: LD_VAR 0 3
85936: PPUSH
85937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85941: LD_INT 35
85943: PPUSH
85944: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85948: LD_VAR 0 1
85952: PPUSH
85953: LD_VAR 0 2
85957: PPUSH
85958: LD_VAR 0 3
85962: PPUSH
85963: CALL 59031 0 3
85967: NOT
85968: IFFALSE 85981
85970: PUSH
85971: LD_VAR 0 1
85975: PPUSH
85976: CALL_OW 314
85980: AND
85981: IFFALSE 85985
// exit ;
85983: GO 86237
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85985: LD_VAR 0 2
85989: PPUSH
85990: LD_VAR 0 3
85994: PPUSH
85995: CALL_OW 428
85999: PUSH
86000: LD_VAR 0 1
86004: EQUAL
86005: IFFALSE 86019
86007: PUSH
86008: LD_VAR 0 1
86012: PPUSH
86013: CALL_OW 314
86017: NOT
86018: AND
86019: IFFALSE 85941
// if MineAtPos ( x , y ) then
86021: LD_VAR 0 2
86025: PPUSH
86026: LD_VAR 0 3
86030: PPUSH
86031: CALL_OW 458
86035: IFFALSE 86039
// exit ;
86037: GO 86237
// if your_side = side then
86039: LD_OWVAR 2
86043: PUSH
86044: LD_VAR 0 6
86048: EQUAL
86049: IFFALSE 86068
// PlaySoundXY ( x , y , PlantMine ) ;
86051: LD_VAR 0 2
86055: PPUSH
86056: LD_VAR 0 3
86060: PPUSH
86061: LD_STRING PlantMine
86063: PPUSH
86064: CALL_OW 366
// repeat wait ( 1 ) ;
86068: LD_INT 1
86070: PPUSH
86071: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
86075: LD_VAR 0 2
86079: PPUSH
86080: LD_VAR 0 3
86084: PPUSH
86085: LD_VAR 0 6
86089: PPUSH
86090: LD_INT 0
86092: PPUSH
86093: CALL_OW 454
86097: IFFALSE 86068
// if MineAtPos ( x , y ) then
86099: LD_VAR 0 2
86103: PPUSH
86104: LD_VAR 0 3
86108: PPUSH
86109: CALL_OW 458
86113: IFFALSE 86229
// begin for i in minerMinesList [ index ] do
86115: LD_ADDR_VAR 0 7
86119: PUSH
86120: LD_EXP 135
86124: PUSH
86125: LD_VAR 0 5
86129: ARRAY
86130: PUSH
86131: FOR_IN
86132: IFFALSE 86174
// if i [ 1 ] = x and i [ 2 ] = y then
86134: LD_VAR 0 7
86138: PUSH
86139: LD_INT 1
86141: ARRAY
86142: PUSH
86143: LD_VAR 0 2
86147: EQUAL
86148: IFFALSE 86166
86150: PUSH
86151: LD_VAR 0 7
86155: PUSH
86156: LD_INT 2
86158: ARRAY
86159: PUSH
86160: LD_VAR 0 3
86164: EQUAL
86165: AND
86166: IFFALSE 86172
// exit ;
86168: POP
86169: POP
86170: GO 86237
86172: GO 86131
86174: POP
86175: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86176: LD_ADDR_EXP 135
86180: PUSH
86181: LD_EXP 135
86185: PPUSH
86186: LD_VAR 0 5
86190: PUSH
86191: LD_EXP 135
86195: PUSH
86196: LD_VAR 0 5
86200: ARRAY
86201: PUSH
86202: LD_INT 1
86204: PLUS
86205: PUSH
86206: EMPTY
86207: LIST
86208: LIST
86209: PPUSH
86210: LD_VAR 0 2
86214: PUSH
86215: LD_VAR 0 3
86219: PUSH
86220: EMPTY
86221: LIST
86222: LIST
86223: PPUSH
86224: CALL 27192 0 3
86228: ST_TO_ADDR
// end ; result := true ;
86229: LD_ADDR_VAR 0 4
86233: PUSH
86234: LD_INT 1
86236: ST_TO_ADDR
// end ;
86237: LD_VAR 0 4
86241: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86242: LD_INT 0
86244: PPUSH
86245: PPUSH
86246: PPUSH
// if not unit in minersList then
86247: LD_VAR 0 1
86251: PUSH
86252: LD_EXP 134
86256: IN
86257: NOT
86258: IFFALSE 86262
// exit ;
86260: GO 86469
// index := GetElementIndex ( minersList , unit ) ;
86262: LD_ADDR_VAR 0 6
86266: PUSH
86267: LD_EXP 134
86271: PPUSH
86272: LD_VAR 0 1
86276: PPUSH
86277: CALL 26975 0 2
86281: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86282: LD_ADDR_VAR 0 5
86286: PUSH
86287: DOUBLE
86288: LD_EXP 135
86292: PUSH
86293: LD_VAR 0 6
86297: ARRAY
86298: INC
86299: ST_TO_ADDR
86300: LD_INT 1
86302: PUSH
86303: FOR_DOWNTO
86304: IFFALSE 86467
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
86306: LD_EXP 135
86310: PUSH
86311: LD_VAR 0 6
86315: ARRAY
86316: PUSH
86317: LD_VAR 0 5
86321: ARRAY
86322: PUSH
86323: LD_INT 1
86325: ARRAY
86326: PPUSH
86327: LD_EXP 135
86331: PUSH
86332: LD_VAR 0 6
86336: ARRAY
86337: PUSH
86338: LD_VAR 0 5
86342: ARRAY
86343: PUSH
86344: LD_INT 2
86346: ARRAY
86347: PPUSH
86348: LD_VAR 0 2
86352: PPUSH
86353: LD_VAR 0 3
86357: PPUSH
86358: CALL_OW 298
86362: PUSH
86363: LD_INT 6
86365: LESS
86366: IFFALSE 86465
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86368: LD_EXP 135
86372: PUSH
86373: LD_VAR 0 6
86377: ARRAY
86378: PUSH
86379: LD_VAR 0 5
86383: ARRAY
86384: PUSH
86385: LD_INT 1
86387: ARRAY
86388: PPUSH
86389: LD_EXP 135
86393: PUSH
86394: LD_VAR 0 6
86398: ARRAY
86399: PUSH
86400: LD_VAR 0 5
86404: ARRAY
86405: PUSH
86406: LD_INT 2
86408: ARRAY
86409: PPUSH
86410: LD_VAR 0 1
86414: PPUSH
86415: CALL_OW 255
86419: PPUSH
86420: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86424: LD_ADDR_EXP 135
86428: PUSH
86429: LD_EXP 135
86433: PPUSH
86434: LD_VAR 0 6
86438: PPUSH
86439: LD_EXP 135
86443: PUSH
86444: LD_VAR 0 6
86448: ARRAY
86449: PPUSH
86450: LD_VAR 0 5
86454: PPUSH
86455: CALL_OW 3
86459: PPUSH
86460: CALL_OW 1
86464: ST_TO_ADDR
// end ; end ;
86465: GO 86303
86467: POP
86468: POP
// end ;
86469: LD_VAR 0 4
86473: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86474: LD_INT 0
86476: PPUSH
86477: PPUSH
86478: PPUSH
86479: PPUSH
86480: PPUSH
86481: PPUSH
86482: PPUSH
86483: PPUSH
86484: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86485: LD_VAR 0 1
86489: PPUSH
86490: CALL_OW 264
86494: PUSH
86495: LD_INT 81
86497: EQUAL
86498: NOT
86499: IFTRUE 86514
86501: PUSH
86502: LD_VAR 0 1
86506: PUSH
86507: LD_EXP 134
86511: IN
86512: NOT
86513: OR
86514: IFFALSE 86518
// exit ;
86516: GO 86844
// index := GetElementIndex ( minersList , unit ) ;
86518: LD_ADDR_VAR 0 6
86522: PUSH
86523: LD_EXP 134
86527: PPUSH
86528: LD_VAR 0 1
86532: PPUSH
86533: CALL 26975 0 2
86537: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86538: LD_ADDR_VAR 0 8
86542: PUSH
86543: LD_EXP 136
86547: PUSH
86548: LD_EXP 135
86552: PUSH
86553: LD_VAR 0 6
86557: ARRAY
86558: MINUS
86559: ST_TO_ADDR
// if not minesFreeAmount then
86560: LD_VAR 0 8
86564: NOT
86565: IFFALSE 86569
// exit ;
86567: GO 86844
// tmp := [ ] ;
86569: LD_ADDR_VAR 0 7
86573: PUSH
86574: EMPTY
86575: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86576: LD_ADDR_VAR 0 5
86580: PUSH
86581: DOUBLE
86582: LD_INT 1
86584: DEC
86585: ST_TO_ADDR
86586: LD_VAR 0 8
86590: PUSH
86591: FOR_TO
86592: IFFALSE 86791
// begin _d := rand ( 0 , 5 ) ;
86594: LD_ADDR_VAR 0 11
86598: PUSH
86599: LD_INT 0
86601: PPUSH
86602: LD_INT 5
86604: PPUSH
86605: CALL_OW 12
86609: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86610: LD_ADDR_VAR 0 12
86614: PUSH
86615: LD_INT 2
86617: PPUSH
86618: LD_INT 6
86620: PPUSH
86621: CALL_OW 12
86625: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86626: LD_ADDR_VAR 0 9
86630: PUSH
86631: LD_VAR 0 2
86635: PPUSH
86636: LD_VAR 0 11
86640: PPUSH
86641: LD_VAR 0 12
86645: PPUSH
86646: CALL_OW 272
86650: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86651: LD_ADDR_VAR 0 10
86655: PUSH
86656: LD_VAR 0 3
86660: PPUSH
86661: LD_VAR 0 11
86665: PPUSH
86666: LD_VAR 0 12
86670: PPUSH
86671: CALL_OW 273
86675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86676: LD_VAR 0 9
86680: PPUSH
86681: LD_VAR 0 10
86685: PPUSH
86686: CALL_OW 488
86690: IFFALSE 86714
86692: PUSH
86693: LD_VAR 0 9
86697: PUSH
86698: LD_VAR 0 10
86702: PUSH
86703: EMPTY
86704: LIST
86705: LIST
86706: PUSH
86707: LD_VAR 0 7
86711: IN
86712: NOT
86713: AND
86714: IFFALSE 86733
86716: PUSH
86717: LD_VAR 0 9
86721: PPUSH
86722: LD_VAR 0 10
86726: PPUSH
86727: CALL_OW 458
86731: NOT
86732: AND
86733: IFFALSE 86775
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86735: LD_ADDR_VAR 0 7
86739: PUSH
86740: LD_VAR 0 7
86744: PPUSH
86745: LD_VAR 0 7
86749: PUSH
86750: LD_INT 1
86752: PLUS
86753: PPUSH
86754: LD_VAR 0 9
86758: PUSH
86759: LD_VAR 0 10
86763: PUSH
86764: EMPTY
86765: LIST
86766: LIST
86767: PPUSH
86768: CALL_OW 1
86772: ST_TO_ADDR
86773: GO 86789
// i := i - 1 ;
86775: LD_ADDR_VAR 0 5
86779: PUSH
86780: LD_VAR 0 5
86784: PUSH
86785: LD_INT 1
86787: MINUS
86788: ST_TO_ADDR
// end ;
86789: GO 86591
86791: POP
86792: POP
// for i in tmp do
86793: LD_ADDR_VAR 0 5
86797: PUSH
86798: LD_VAR 0 7
86802: PUSH
86803: FOR_IN
86804: IFFALSE 86842
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86806: LD_VAR 0 1
86810: PPUSH
86811: LD_VAR 0 5
86815: PUSH
86816: LD_INT 1
86818: ARRAY
86819: PPUSH
86820: LD_VAR 0 5
86824: PUSH
86825: LD_INT 2
86827: ARRAY
86828: PPUSH
86829: CALL 85835 0 3
86833: NOT
86834: IFFALSE 86840
// exit ;
86836: POP
86837: POP
86838: GO 86844
86840: GO 86803
86842: POP
86843: POP
// end ;
86844: LD_VAR 0 4
86848: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
86849: LD_INT 0
86851: PPUSH
86852: PPUSH
86853: PPUSH
86854: PPUSH
86855: PPUSH
86856: PPUSH
86857: PPUSH
86858: PPUSH
86859: PPUSH
// if GetClass ( unit ) <> class_sniper then
86860: LD_VAR 0 1
86864: PPUSH
86865: CALL_OW 257
86869: PUSH
86870: LD_INT 5
86872: NONEQUAL
86873: IFFALSE 86877
// exit ;
86875: GO 87347
// dist := 8 ;
86877: LD_ADDR_VAR 0 5
86881: PUSH
86882: LD_INT 8
86884: ST_TO_ADDR
// viewRange := 12 ;
86885: LD_ADDR_VAR 0 8
86889: PUSH
86890: LD_INT 12
86892: ST_TO_ADDR
// side := GetSide ( unit ) ;
86893: LD_ADDR_VAR 0 6
86897: PUSH
86898: LD_VAR 0 1
86902: PPUSH
86903: CALL_OW 255
86907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86908: LD_INT 61
86910: PPUSH
86911: LD_VAR 0 6
86915: PPUSH
86916: CALL_OW 321
86920: PUSH
86921: LD_INT 2
86923: EQUAL
86924: IFFALSE 86934
// viewRange := 16 ;
86926: LD_ADDR_VAR 0 8
86930: PUSH
86931: LD_INT 16
86933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86934: LD_VAR 0 1
86938: PPUSH
86939: LD_VAR 0 2
86943: PPUSH
86944: LD_VAR 0 3
86948: PPUSH
86949: CALL_OW 297
86953: PUSH
86954: LD_VAR 0 5
86958: GREATER
86959: IFFALSE 87038
// begin ComMoveXY ( unit , x , y ) ;
86961: LD_VAR 0 1
86965: PPUSH
86966: LD_VAR 0 2
86970: PPUSH
86971: LD_VAR 0 3
86975: PPUSH
86976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86980: LD_INT 35
86982: PPUSH
86983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86987: LD_VAR 0 1
86991: PPUSH
86992: LD_VAR 0 2
86996: PPUSH
86997: LD_VAR 0 3
87001: PPUSH
87002: CALL 59031 0 3
87006: NOT
87007: IFFALSE 87011
// exit ;
87009: GO 87347
// until GetDistUnitXY ( unit , x , y ) < dist ;
87011: LD_VAR 0 1
87015: PPUSH
87016: LD_VAR 0 2
87020: PPUSH
87021: LD_VAR 0 3
87025: PPUSH
87026: CALL_OW 297
87030: PUSH
87031: LD_VAR 0 5
87035: LESS
87036: IFFALSE 86980
// end ; ComTurnXY ( unit , x , y ) ;
87038: LD_VAR 0 1
87042: PPUSH
87043: LD_VAR 0 2
87047: PPUSH
87048: LD_VAR 0 3
87052: PPUSH
87053: CALL_OW 118
// repeat if Multiplayer then
87057: LD_OWVAR 4
87061: IFFALSE 87072
// wait ( 35 ) else
87063: LD_INT 35
87065: PPUSH
87066: CALL_OW 67
87070: GO 87079
// wait ( 5 ) ;
87072: LD_INT 5
87074: PPUSH
87075: CALL_OW 67
// _d := GetDir ( unit ) ;
87079: LD_ADDR_VAR 0 11
87083: PUSH
87084: LD_VAR 0 1
87088: PPUSH
87089: CALL_OW 254
87093: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
87094: LD_ADDR_VAR 0 7
87098: PUSH
87099: LD_VAR 0 1
87103: PPUSH
87104: CALL_OW 250
87108: PPUSH
87109: LD_VAR 0 1
87113: PPUSH
87114: CALL_OW 251
87118: PPUSH
87119: LD_VAR 0 2
87123: PPUSH
87124: LD_VAR 0 3
87128: PPUSH
87129: CALL 61667 0 4
87133: ST_TO_ADDR
// until dir = _d ;
87134: LD_VAR 0 7
87138: PUSH
87139: LD_VAR 0 11
87143: EQUAL
87144: IFFALSE 87057
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
87146: LD_ADDR_VAR 0 9
87150: PUSH
87151: LD_VAR 0 1
87155: PPUSH
87156: CALL_OW 250
87160: PPUSH
87161: LD_VAR 0 7
87165: PPUSH
87166: LD_VAR 0 5
87170: PPUSH
87171: CALL_OW 272
87175: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
87176: LD_ADDR_VAR 0 10
87180: PUSH
87181: LD_VAR 0 1
87185: PPUSH
87186: CALL_OW 251
87190: PPUSH
87191: LD_VAR 0 7
87195: PPUSH
87196: LD_VAR 0 5
87200: PPUSH
87201: CALL_OW 273
87205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87206: LD_VAR 0 9
87210: PPUSH
87211: LD_VAR 0 10
87215: PPUSH
87216: CALL_OW 488
87220: NOT
87221: IFFALSE 87225
// exit ;
87223: GO 87347
// ComAnimCustom ( unit , 1 ) ;
87225: LD_VAR 0 1
87229: PPUSH
87230: LD_INT 1
87232: PPUSH
87233: CALL_OW 592
// p := 0 ;
87237: LD_ADDR_VAR 0 12
87241: PUSH
87242: LD_INT 0
87244: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87245: LD_VAR 0 9
87249: PPUSH
87250: LD_VAR 0 10
87254: PPUSH
87255: LD_VAR 0 6
87259: PPUSH
87260: LD_VAR 0 8
87264: PPUSH
87265: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
87269: LD_INT 35
87271: PPUSH
87272: CALL_OW 67
// p := Inc ( p ) ;
87276: LD_ADDR_VAR 0 12
87280: PUSH
87281: LD_VAR 0 12
87285: PPUSH
87286: CALL 61623 0 1
87290: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
87291: LD_VAR 0 12
87295: PUSH
87296: LD_INT 3
87298: EQUAL
87299: IFTRUE 87313
87301: PUSH
87302: LD_VAR 0 1
87306: PPUSH
87307: CALL_OW 302
87311: NOT
87312: OR
87313: IFTRUE 87326
87315: PUSH
87316: LD_VAR 0 1
87320: PPUSH
87321: CALL_OW 301
87325: OR
87326: IFFALSE 87269
// RemoveSeeing ( _x , _y , side ) ;
87328: LD_VAR 0 9
87332: PPUSH
87333: LD_VAR 0 10
87337: PPUSH
87338: LD_VAR 0 6
87342: PPUSH
87343: CALL_OW 331
// end ;
87347: LD_VAR 0 4
87351: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
87352: LD_INT 0
87354: PPUSH
87355: PPUSH
87356: PPUSH
87357: PPUSH
87358: PPUSH
87359: PPUSH
87360: PPUSH
87361: PPUSH
87362: PPUSH
87363: PPUSH
87364: PPUSH
// if not unit then
87365: LD_VAR 0 1
87369: NOT
87370: IFFALSE 87374
// exit ;
87372: GO 87645
// side := GetSide ( unit ) ;
87374: LD_ADDR_VAR 0 3
87378: PUSH
87379: LD_VAR 0 1
87383: PPUSH
87384: CALL_OW 255
87388: ST_TO_ADDR
// x := GetX ( unit ) ;
87389: LD_ADDR_VAR 0 5
87393: PUSH
87394: LD_VAR 0 1
87398: PPUSH
87399: CALL_OW 250
87403: ST_TO_ADDR
// y := GetY ( unit ) ;
87404: LD_ADDR_VAR 0 6
87408: PUSH
87409: LD_VAR 0 1
87413: PPUSH
87414: CALL_OW 251
87418: ST_TO_ADDR
// r := 8 ;
87419: LD_ADDR_VAR 0 4
87423: PUSH
87424: LD_INT 8
87426: ST_TO_ADDR
// if x - r < 0 then
87427: LD_VAR 0 5
87431: PUSH
87432: LD_VAR 0 4
87436: MINUS
87437: PUSH
87438: LD_INT 0
87440: LESS
87441: IFFALSE 87453
// min_x := 0 else
87443: LD_ADDR_VAR 0 7
87447: PUSH
87448: LD_INT 0
87450: ST_TO_ADDR
87451: GO 87469
// min_x := x - r ;
87453: LD_ADDR_VAR 0 7
87457: PUSH
87458: LD_VAR 0 5
87462: PUSH
87463: LD_VAR 0 4
87467: MINUS
87468: ST_TO_ADDR
// if y - r < 0 then
87469: LD_VAR 0 6
87473: PUSH
87474: LD_VAR 0 4
87478: MINUS
87479: PUSH
87480: LD_INT 0
87482: LESS
87483: IFFALSE 87495
// min_y := 0 else
87485: LD_ADDR_VAR 0 8
87489: PUSH
87490: LD_INT 0
87492: ST_TO_ADDR
87493: GO 87511
// min_y := y - r ;
87495: LD_ADDR_VAR 0 8
87499: PUSH
87500: LD_VAR 0 6
87504: PUSH
87505: LD_VAR 0 4
87509: MINUS
87510: ST_TO_ADDR
// max_x := x + r ;
87511: LD_ADDR_VAR 0 9
87515: PUSH
87516: LD_VAR 0 5
87520: PUSH
87521: LD_VAR 0 4
87525: PLUS
87526: ST_TO_ADDR
// max_y := y + r ;
87527: LD_ADDR_VAR 0 10
87531: PUSH
87532: LD_VAR 0 6
87536: PUSH
87537: LD_VAR 0 4
87541: PLUS
87542: ST_TO_ADDR
// for _x = min_x to max_x do
87543: LD_ADDR_VAR 0 11
87547: PUSH
87548: DOUBLE
87549: LD_VAR 0 7
87553: DEC
87554: ST_TO_ADDR
87555: LD_VAR 0 9
87559: PUSH
87560: FOR_TO
87561: IFFALSE 87643
// for _y = min_y to max_y do
87563: LD_ADDR_VAR 0 12
87567: PUSH
87568: DOUBLE
87569: LD_VAR 0 8
87573: DEC
87574: ST_TO_ADDR
87575: LD_VAR 0 10
87579: PUSH
87580: FOR_TO
87581: IFFALSE 87639
// begin if not ValidHex ( _x , _y ) then
87583: LD_VAR 0 11
87587: PPUSH
87588: LD_VAR 0 12
87592: PPUSH
87593: CALL_OW 488
87597: NOT
87598: IFFALSE 87602
// continue ;
87600: GO 87580
// if MineAtPos ( _x , _y ) then
87602: LD_VAR 0 11
87606: PPUSH
87607: LD_VAR 0 12
87611: PPUSH
87612: CALL_OW 458
87616: IFFALSE 87637
// ViewMineAtPos ( _x , _y , side ) ;
87618: LD_VAR 0 11
87622: PPUSH
87623: LD_VAR 0 12
87627: PPUSH
87628: LD_VAR 0 3
87632: PPUSH
87633: CALL_OW 457
// end ;
87637: GO 87580
87639: POP
87640: POP
87641: GO 87560
87643: POP
87644: POP
// end ;
87645: LD_VAR 0 2
87649: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
87650: LD_INT 0
87652: PPUSH
87653: PPUSH
87654: PPUSH
87655: PPUSH
87656: PPUSH
87657: PPUSH
87658: PPUSH
// if not units then
87659: LD_VAR 0 1
87663: NOT
87664: IFFALSE 87668
// exit ;
87666: GO 88132
// scaners := [ ] ;
87668: LD_ADDR_VAR 0 6
87672: PUSH
87673: EMPTY
87674: ST_TO_ADDR
// for i in units do
87675: LD_ADDR_VAR 0 3
87679: PUSH
87680: LD_VAR 0 1
87684: PUSH
87685: FOR_IN
87686: IFFALSE 87843
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
87688: LD_VAR 0 3
87692: PPUSH
87693: CALL_OW 264
87697: PUSH
87698: LD_INT 11
87700: NONEQUAL
87701: IFTRUE 87715
87703: PUSH
87704: LD_VAR 0 3
87708: PPUSH
87709: CALL_OW 302
87713: NOT
87714: OR
87715: IFTRUE 87732
87717: PUSH
87718: LD_VAR 0 3
87722: PPUSH
87723: CALL_OW 110
87727: PUSH
87728: LD_INT 502
87730: EQUAL
87731: OR
87732: IFFALSE 87736
// continue ;
87734: GO 87685
// ComStop ( i ) ;
87736: LD_VAR 0 3
87740: PPUSH
87741: CALL_OW 141
// x := GetX ( i ) ;
87745: LD_ADDR_VAR 0 4
87749: PUSH
87750: LD_VAR 0 3
87754: PPUSH
87755: CALL_OW 250
87759: ST_TO_ADDR
// y := GetY ( i ) ;
87760: LD_ADDR_VAR 0 5
87764: PUSH
87765: LD_VAR 0 3
87769: PPUSH
87770: CALL_OW 251
87774: ST_TO_ADDR
// if GetSide ( i ) = your_side then
87775: LD_VAR 0 3
87779: PPUSH
87780: CALL_OW 255
87784: PUSH
87785: LD_OWVAR 2
87789: EQUAL
87790: IFFALSE 87809
// PlaySoundXY ( x , y , mineDetector ) ;
87792: LD_VAR 0 4
87796: PPUSH
87797: LD_VAR 0 5
87801: PPUSH
87802: LD_STRING mineDetector
87804: PPUSH
87805: CALL_OW 366
// scaners := Join ( scaners , i ) ;
87809: LD_ADDR_VAR 0 6
87813: PUSH
87814: LD_VAR 0 6
87818: PPUSH
87819: LD_VAR 0 3
87823: PPUSH
87824: CALL 60250 0 2
87828: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
87829: LD_VAR 0 3
87833: PPUSH
87834: LD_INT 502
87836: PPUSH
87837: CALL_OW 109
// end ;
87841: GO 87685
87843: POP
87844: POP
// if not scaners then
87845: LD_VAR 0 6
87849: NOT
87850: IFFALSE 87854
// exit ;
87852: GO 88132
// wait ( 3 ) ;
87854: LD_INT 3
87856: PPUSH
87857: CALL_OW 67
// timer := 6 ;
87861: LD_ADDR_VAR 0 7
87865: PUSH
87866: LD_INT 6
87868: ST_TO_ADDR
// repeat for i in scaners do
87869: LD_ADDR_VAR 0 3
87873: PUSH
87874: LD_VAR 0 6
87878: PUSH
87879: FOR_IN
87880: IFFALSE 88030
// begin side := GetSide ( i ) ;
87882: LD_ADDR_VAR 0 8
87886: PUSH
87887: LD_VAR 0 3
87891: PPUSH
87892: CALL_OW 255
87896: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
87897: LD_VAR 0 3
87901: PPUSH
87902: CALL_OW 302
87906: NOT
87907: IFTRUE 87920
87909: PUSH
87910: LD_VAR 0 3
87914: PPUSH
87915: CALL_OW 314
87919: OR
87920: IFTRUE 87951
87922: PUSH
87923: LD_VAR 0 3
87927: PPUSH
87928: CALL_OW 263
87932: PUSH
87933: LD_INT 1
87935: EQUAL
87936: IFFALSE 87950
87938: PUSH
87939: LD_VAR 0 3
87943: PPUSH
87944: CALL_OW 311
87948: NOT
87949: AND
87950: OR
87951: IFFALSE 87995
// begin SetUnitDisplayNumber ( i , 0 ) ;
87953: LD_VAR 0 3
87957: PPUSH
87958: LD_INT 0
87960: PPUSH
87961: CALL_OW 505
// SetTag ( i , 0 ) ;
87965: LD_VAR 0 3
87969: PPUSH
87970: LD_INT 0
87972: PPUSH
87973: CALL_OW 109
// scaners := scaners diff i ;
87977: LD_ADDR_VAR 0 6
87981: PUSH
87982: LD_VAR 0 6
87986: PUSH
87987: LD_VAR 0 3
87991: DIFF
87992: ST_TO_ADDR
// continue ;
87993: GO 87879
// end ; if side in [ your_side , 9 ] then
87995: LD_VAR 0 8
87999: PUSH
88000: LD_OWVAR 2
88004: PUSH
88005: LD_INT 9
88007: PUSH
88008: EMPTY
88009: LIST
88010: LIST
88011: IN
88012: IFFALSE 88028
// SetUnitDisplayNumber ( i , timer ) ;
88014: LD_VAR 0 3
88018: PPUSH
88019: LD_VAR 0 7
88023: PPUSH
88024: CALL_OW 505
// end ;
88028: GO 87879
88030: POP
88031: POP
// if not scaners then
88032: LD_VAR 0 6
88036: NOT
88037: IFFALSE 88041
// exit ;
88039: GO 88132
// timer := Dec ( timer ) ;
88041: LD_ADDR_VAR 0 7
88045: PUSH
88046: LD_VAR 0 7
88050: PPUSH
88051: CALL 61645 0 1
88055: ST_TO_ADDR
// wait ( 0 0$1 ) ;
88056: LD_INT 35
88058: PPUSH
88059: CALL_OW 67
// until timer = 0 ;
88063: LD_VAR 0 7
88067: PUSH
88068: LD_INT 0
88070: EQUAL
88071: IFFALSE 87869
// if not scaners then
88073: LD_VAR 0 6
88077: NOT
88078: IFFALSE 88082
// exit ;
88080: GO 88132
// for i in scaners do
88082: LD_ADDR_VAR 0 3
88086: PUSH
88087: LD_VAR 0 6
88091: PUSH
88092: FOR_IN
88093: IFFALSE 88130
// begin SetUnitDisplayNumber ( i , 0 ) ;
88095: LD_VAR 0 3
88099: PPUSH
88100: LD_INT 0
88102: PPUSH
88103: CALL_OW 505
// SetTag ( i , 0 ) ;
88107: LD_VAR 0 3
88111: PPUSH
88112: LD_INT 0
88114: PPUSH
88115: CALL_OW 109
// RevealDetectorMine ( i ) ;
88119: LD_VAR 0 3
88123: PPUSH
88124: CALL 87352 0 1
// end ;
88128: GO 88092
88130: POP
88131: POP
// end ;
88132: LD_VAR 0 2
88136: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
88137: LD_INT 0
88139: PPUSH
// if p1 = mine_detector_mode then
88140: LD_VAR 0 2
88144: PUSH
88145: LD_INT 103
88147: EQUAL
88148: IFFALSE 88159
// DetectMine ( units ) ;
88150: LD_VAR 0 1
88154: PPUSH
88155: CALL 87650 0 1
// end ; end_of_file
88159: LD_VAR 0 7
88163: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88164: LD_VAR 0 1
88168: PUSH
88169: LD_INT 200
88171: DOUBLE
88172: GREATEREQUAL
88173: IFFALSE 88181
88175: LD_INT 299
88177: DOUBLE
88178: LESSEQUAL
88179: IFTRUE 88183
88181: GO 88215
88183: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88184: LD_VAR 0 1
88188: PPUSH
88189: LD_VAR 0 2
88193: PPUSH
88194: LD_VAR 0 3
88198: PPUSH
88199: LD_VAR 0 4
88203: PPUSH
88204: LD_VAR 0 5
88208: PPUSH
88209: CALL 82440 0 5
88213: GO 88292
88215: LD_INT 300
88217: DOUBLE
88218: GREATEREQUAL
88219: IFFALSE 88227
88221: LD_INT 399
88223: DOUBLE
88224: LESSEQUAL
88225: IFTRUE 88229
88227: GO 88291
88229: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88230: LD_VAR 0 1
88234: PPUSH
88235: LD_VAR 0 2
88239: PPUSH
88240: LD_VAR 0 3
88244: PPUSH
88245: LD_VAR 0 4
88249: PPUSH
88250: LD_VAR 0 5
88254: PPUSH
88255: LD_VAR 0 6
88259: PPUSH
88260: LD_VAR 0 7
88264: PPUSH
88265: LD_VAR 0 8
88269: PPUSH
88270: LD_VAR 0 9
88274: PPUSH
88275: LD_VAR 0 10
88279: PPUSH
88280: LD_VAR 0 11
88284: PPUSH
88285: CALL 78243 0 11
88289: GO 88292
88291: POP
// end ;
88292: PPOPN 11
88294: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88295: LD_VAR 0 1
88299: PPUSH
88300: LD_VAR 0 2
88304: PPUSH
88305: LD_VAR 0 3
88309: PPUSH
88310: LD_VAR 0 4
88314: PPUSH
88315: LD_VAR 0 5
88319: PPUSH
88320: CALL 81740 0 5
// end ; end_of_file
88324: PPOPN 5
88326: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
88327: LD_VAR 0 1
88331: PPUSH
88332: LD_VAR 0 2
88336: PPUSH
88337: LD_VAR 0 3
88341: PPUSH
88342: LD_VAR 0 4
88346: PPUSH
88347: LD_VAR 0 5
88351: PPUSH
88352: LD_VAR 0 6
88356: PPUSH
88357: CALL 65783 0 6
// end ;
88361: PPOPN 6
88363: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
88364: LD_INT 0
88366: PPUSH
// begin if not units then
88367: LD_VAR 0 1
88371: NOT
88372: IFFALSE 88376
// exit ;
88374: GO 88410
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
88376: LD_VAR 0 1
88380: PPUSH
88381: LD_VAR 0 2
88385: PPUSH
88386: LD_VAR 0 3
88390: PPUSH
88391: LD_VAR 0 4
88395: PPUSH
88396: LD_VAR 0 5
88400: PPUSH
88401: LD_VAR 0 6
88405: PPUSH
88406: CALL 88137 0 6
// end ;
88410: PPOPN 7
88412: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
88413: CALL 65663 0 0
// end ;
88417: PPOPN 1
88419: END
