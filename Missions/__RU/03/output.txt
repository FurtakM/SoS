// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 47190 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 3394 0 0
// PrepareRussians ;
  60: CALL 311 0 0
// MissionIntro ;
  64: CALL 7589 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; export KirovCurrentAttacker ; export techList ; export startTheAttack ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := false ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 95
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// startTheAttack := false ;
 104: LD_ADDR_EXP 45
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// KirovCurrentAttacker := 1 ;
 112: LD_ADDR_EXP 43
 116: PUSH
 117: LD_INT 1
 119: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 120: LD_ADDR_EXP 34
 124: PUSH
 125: LD_INT 1
 127: PUSH
 128: LD_INT 2
 130: PUSH
 131: LD_INT 3
 133: PUSH
 134: LD_INT 4
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_OWVAR 67
 147: ARRAY
 148: ST_TO_ADDR
// timeToPrepareAttack := [ 20 20$0 , 17 17$0 , 15 15$0 , 12 12$30 ] [ Difficulty ] ;
 149: LD_ADDR_EXP 98
 153: PUSH
 154: LD_INT 42000
 156: PUSH
 157: LD_INT 35700
 159: PUSH
 160: LD_INT 31500
 162: PUSH
 163: LD_INT 26250
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 99
 182: PUSH
 183: LD_INT 168000
 185: PUSH
 186: LD_INT 147000
 188: PUSH
 189: LD_INT 126000
 191: PUSH
 192: LD_INT 105000
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: PUSH
 201: LD_OWVAR 67
 205: ARRAY
 206: ST_TO_ADDR
// convoyTime := [ 10 10$00 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
 207: LD_ADDR_EXP 97
 211: PUSH
 212: LD_INT 21000
 214: PUSH
 215: LD_INT 31500
 217: PUSH
 218: LD_INT 42000
 220: PUSH
 221: LD_INT 52500
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 230: LD_ADDR_EXP 42
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: LD_INT 3
 240: PUSH
 241: LD_INT 4
 243: PUSH
 244: LD_INT 5
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: ST_TO_ADDR
// techList := [ 46 , 47 , 48 , 49 , 51 , 81 , 82 , 83 , 84 , 85 ] ;
 259: LD_ADDR_EXP 44
 263: PUSH
 264: LD_INT 46
 266: PUSH
 267: LD_INT 47
 269: PUSH
 270: LD_INT 48
 272: PUSH
 273: LD_INT 49
 275: PUSH
 276: LD_INT 51
 278: PUSH
 279: LD_INT 81
 281: PUSH
 282: LD_INT 82
 284: PUSH
 285: LD_INT 83
 287: PUSH
 288: LD_INT 84
 290: PUSH
 291: LD_INT 85
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: ST_TO_ADDR
// end ; end_of_file
 306: LD_VAR 0 1
 310: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop , kirovBunkersArray ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs , extraKirovCrew , solsKirov ; export function PrepareRussians ; var un ; begin
 311: LD_INT 0
 313: PPUSH
 314: PPUSH
// PrepareHeroes ;
 315: CALL 332 0 0
// PrepareBeriaBase ;
 319: CALL 1035 0 0
// PrepareKirovBase ;
 323: CALL 1482 0 0
// end ;
 327: LD_VAR 0 1
 331: RET
// function PrepareHeroes ; var un ; begin
 332: LD_INT 0
 334: PPUSH
 335: PPUSH
// uc_side := 6 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 6
 343: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 344: LD_ADDR_EXP 54
 348: PUSH
 349: LD_STRING 02_burlakTeam
 351: PPUSH
 352: CALL_OW 31
 356: ST_TO_ADDR
// uc_side := 3 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 3
 364: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 365: LD_ADDR_EXP 46
 369: PUSH
 370: LD_STRING Burlak
 372: PPUSH
 373: LD_EXP 3
 377: NOT
 378: PPUSH
 379: LD_EXP 4
 383: PPUSH
 384: CALL 13719 0 3
 388: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 389: LD_ADDR_EXP 47
 393: PUSH
 394: LD_STRING Gnyevko
 396: PPUSH
 397: LD_EXP 3
 401: NOT
 402: PPUSH
 403: LD_EXP 4
 407: PPUSH
 408: CALL 13719 0 3
 412: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 413: LD_ADDR_EXP 49
 417: PUSH
 418: LD_STRING Kovalyuk
 420: PPUSH
 421: LD_EXP 3
 425: NOT
 426: PPUSH
 427: LD_EXP 4
 431: PPUSH
 432: CALL 13719 0 3
 436: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 437: LD_ADDR_EXP 48
 441: PUSH
 442: LD_STRING Kirilenkova
 444: PPUSH
 445: LD_EXP 3
 449: NOT
 450: PPUSH
 451: LD_EXP 4
 455: PPUSH
 456: CALL 13719 0 3
 460: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 461: LD_ADDR_EXP 50
 465: PUSH
 466: LD_STRING Belkov
 468: PPUSH
 469: LD_EXP 3
 473: NOT
 474: PPUSH
 475: LD_EXP 4
 479: PPUSH
 480: CALL 13719 0 3
 484: ST_TO_ADDR
// uc_side := 6 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 6
 492: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 493: LD_ADDR_EXP 58
 497: PUSH
 498: LD_STRING Kurin
 500: PPUSH
 501: CALL_OW 25
 505: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 506: LD_ADDR_EXP 59
 510: PUSH
 511: LD_STRING Popov
 513: PPUSH
 514: CALL_OW 25
 518: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 519: LD_ADDR_EXP 68
 523: PUSH
 524: LD_STRING Grishko
 526: PPUSH
 527: CALL_OW 25
 531: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 532: LD_ADDR_EXP 69
 536: PUSH
 537: LD_STRING Gaydar
 539: PPUSH
 540: CALL_OW 25
 544: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 545: LD_ADDR_EXP 70
 549: PUSH
 550: LD_STRING Bukov
 552: PPUSH
 553: CALL_OW 25
 557: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 558: LD_ADDR_EXP 52
 562: PUSH
 563: LD_STRING Benko
 565: PPUSH
 566: LD_EXP 3
 570: NOT
 571: PPUSH
 572: LD_EXP 4
 576: PPUSH
 577: CALL 13719 0 3
 581: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 582: LD_ADDR_EXP 53
 586: PUSH
 587: LD_STRING Kuklajs
 589: PPUSH
 590: LD_EXP 3
 594: NOT
 595: PPUSH
 596: LD_EXP 4
 600: PPUSH
 601: CALL 13719 0 3
 605: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 606: LD_EXP 46
 610: PUSH
 611: LD_EXP 47
 615: PUSH
 616: LD_EXP 49
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: LIST
 625: PPUSH
 626: LD_INT 3
 628: PPUSH
 629: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 633: LD_EXP 48
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 645: LD_EXP 58
 649: PPUSH
 650: LD_INT 153
 652: PPUSH
 653: LD_INT 103
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 48
// AddComHold ( Kurin ) ;
 663: LD_EXP 58
 667: PPUSH
 668: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 672: LD_EXP 58
 676: PPUSH
 677: LD_INT 155
 679: PPUSH
 680: LD_INT 106
 682: PPUSH
 683: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 687: LD_EXP 59
 691: PPUSH
 692: LD_INT 131
 694: PPUSH
 695: LD_INT 49
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 48
// AddComHold ( Popov ) ;
 705: LD_EXP 59
 709: PPUSH
 710: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 714: LD_EXP 59
 718: PPUSH
 719: LD_INT 131
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 729: LD_EXP 69
 733: PPUSH
 734: LD_INT 91
 736: PPUSH
 737: LD_INT 15
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 48
// AddComHold ( Gaydar ) ;
 747: LD_EXP 69
 751: PPUSH
 752: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 756: LD_EXP 69
 760: PPUSH
 761: LD_INT 131
 763: PPUSH
 764: LD_INT 31
 766: PPUSH
 767: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 771: LD_EXP 70
 775: PPUSH
 776: LD_INT 86
 778: PPUSH
 779: LD_INT 17
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: CALL_OW 48
// AddComHold ( Bukov ) ;
 789: LD_EXP 70
 793: PPUSH
 794: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 798: LD_EXP 70
 802: PPUSH
 803: LD_INT 94
 805: PPUSH
 806: LD_INT 32
 808: PPUSH
 809: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 813: LD_EXP 50
 817: PPUSH
 818: LD_INT 155
 820: PPUSH
 821: LD_INT 106
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 48
// AddComHold ( Belkov ) ;
 831: LD_EXP 50
 835: PPUSH
 836: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 840: LD_EXP 50
 844: PPUSH
 845: LD_EXP 58
 849: PPUSH
 850: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 854: LD_EXP 46
 858: PPUSH
 859: LD_INT 154
 861: PPUSH
 862: LD_INT 106
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 48
// AddComHold ( Burlak ) ;
 872: LD_EXP 46
 876: PPUSH
 877: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 881: LD_EXP 46
 885: PPUSH
 886: LD_EXP 58
 890: PPUSH
 891: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 895: LD_ADDR_EXP 73
 899: PUSH
 900: LD_EXP 47
 904: PUSH
 905: LD_EXP 49
 909: PUSH
 910: LD_EXP 48
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: ST_TO_ADDR
// for un in otherBeriaUnits do
 920: LD_ADDR_VAR 0 2
 924: PUSH
 925: LD_EXP 54
 929: PUSH
 930: FOR_IN
 931: IFFALSE 973
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 933: LD_VAR 0 2
 937: PPUSH
 938: LD_INT 4
 940: PPUSH
 941: LD_INT 0
 943: PPUSH
 944: CALL_OW 49
// AddComHold ( un ) ;
 948: LD_VAR 0 2
 952: PPUSH
 953: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_EXP 58
 966: PPUSH
 967: CALL_OW 179
// end ;
 971: GO 930
 973: POP
 974: POP
// for un in BurlakTeam do
 975: LD_ADDR_VAR 0 2
 979: PUSH
 980: LD_EXP 73
 984: PUSH
 985: FOR_IN
 986: IFFALSE 1028
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 988: LD_VAR 0 2
 992: PPUSH
 993: LD_INT 4
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL_OW 49
// AddComHold ( un ) ;
1003: LD_VAR 0 2
1007: PPUSH
1008: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
1012: LD_VAR 0 2
1016: PPUSH
1017: LD_EXP 58
1021: PPUSH
1022: CALL_OW 179
// end ;
1026: GO 985
1028: POP
1029: POP
// end ;
1030: LD_VAR 0 1
1034: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
1035: LD_INT 0
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
1041: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
1042: LD_ADDR_EXP 55
1046: PUSH
1047: LD_STRING 02_Beria
1049: PPUSH
1050: EMPTY
1051: PPUSH
1052: CALL_OW 30
1056: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
1057: LD_ADDR_EXP 57
1061: PUSH
1062: LD_STRING 02_VehiclesCount
1064: PPUSH
1065: EMPTY
1066: PPUSH
1067: CALL_OW 30
1071: ST_TO_ADDR
// uc_side := 3 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 3
1079: ST_TO_ADDR
// uc_nation := 3 ;
1080: LD_ADDR_OWVAR 21
1084: PUSH
1085: LD_INT 3
1087: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1088: LD_ADDR_OWVAR 37
1092: PUSH
1093: LD_INT 21
1095: ST_TO_ADDR
// vc_control = control_manual ;
1096: LD_ADDR_OWVAR 38
1100: PUSH
1101: LD_INT 1
1103: ST_TO_ADDR
// vc_engine = engine_combustion ;
1104: LD_ADDR_OWVAR 39
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1112: LD_ADDR_OWVAR 40
1116: PUSH
1117: LD_INT 42
1119: ST_TO_ADDR
// for i := 1 to beriaBase do
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: DOUBLE
1126: LD_INT 1
1128: DEC
1129: ST_TO_ADDR
1130: LD_EXP 55
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1295
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1138: LD_ADDR_OWVAR 42
1142: PUSH
1143: LD_EXP 55
1147: PUSH
1148: LD_VAR 0 2
1152: ARRAY
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1158: LD_ADDR_OWVAR 43
1162: PUSH
1163: LD_EXP 55
1167: PUSH
1168: LD_VAR 0 2
1172: ARRAY
1173: PUSH
1174: LD_INT 2
1176: ARRAY
1177: ST_TO_ADDR
// if bc_type = b_lab then
1178: LD_OWVAR 42
1182: PUSH
1183: LD_INT 6
1185: EQUAL
1186: IFFALSE 1204
// begin bc_kind1 := b_lab_basic ;
1188: LD_ADDR_OWVAR 44
1192: PUSH
1193: LD_INT 9
1195: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1196: LD_ADDR_OWVAR 45
1200: PUSH
1201: LD_INT 9
1203: ST_TO_ADDR
// end ; if beriaBase [ i ] [ 4 ] < 70 then
1204: LD_EXP 55
1208: PUSH
1209: LD_VAR 0 2
1213: ARRAY
1214: PUSH
1215: LD_INT 4
1217: ARRAY
1218: PUSH
1219: LD_INT 70
1221: LESS
1222: IFFALSE 1232
// uc_nation := 1 ;
1224: LD_ADDR_OWVAR 21
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1232: LD_EXP 55
1236: PUSH
1237: LD_VAR 0 2
1241: ARRAY
1242: PUSH
1243: LD_INT 3
1245: ARRAY
1246: PUSH
1247: LD_INT 46
1249: PLUS
1250: PPUSH
1251: LD_EXP 55
1255: PUSH
1256: LD_VAR 0 2
1260: ARRAY
1261: PUSH
1262: LD_INT 4
1264: ARRAY
1265: PPUSH
1266: LD_EXP 55
1270: PUSH
1271: LD_VAR 0 2
1275: ARRAY
1276: PUSH
1277: LD_INT 5
1279: ARRAY
1280: PPUSH
1281: CALL_OW 47
// uc_nation := 3 ;
1285: LD_ADDR_OWVAR 21
1289: PUSH
1290: LD_INT 3
1292: ST_TO_ADDR
// end ;
1293: GO 1135
1295: POP
1296: POP
// for i := 1 to beriaVehs do
1297: LD_ADDR_VAR 0 2
1301: PUSH
1302: DOUBLE
1303: LD_INT 1
1305: DEC
1306: ST_TO_ADDR
1307: LD_EXP 57
1311: PUSH
1312: FOR_TO
1313: IFFALSE 1385
// begin uc_side := 6 ;
1315: LD_ADDR_OWVAR 20
1319: PUSH
1320: LD_INT 6
1322: ST_TO_ADDR
// vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1323: LD_ADDR_OWVAR 41
1327: PUSH
1328: LD_INT 20
1330: PUSH
1331: LD_INT 35
1333: PUSH
1334: LD_INT 50
1336: PUSH
1337: LD_INT 80
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 4
1351: PPUSH
1352: CALL_OW 12
1356: ARRAY
1357: ST_TO_ADDR
// veh = CreateVehicle ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// PlaceUnitArea ( veh , VehKirovArea , false ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 17
1375: PPUSH
1376: LD_INT 0
1378: PPUSH
1379: CALL_OW 49
// end ;
1383: GO 1312
1385: POP
1386: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1387: LD_ADDR_VAR 0 5
1391: PUSH
1392: LD_INT 22
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 0
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: PUSH
1421: LD_INT 1
1423: ARRAY
1424: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1425: LD_VAR 0 5
1429: PPUSH
1430: LD_STRING beria
1432: PPUSH
1433: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , 1 , 100 ) ;
1437: LD_VAR 0 5
1441: PPUSH
1442: CALL_OW 274
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: LD_INT 100
1452: PPUSH
1453: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , 2 , 20 ) ;
1457: LD_VAR 0 5
1461: PPUSH
1462: CALL_OW 274
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: LD_INT 20
1472: PPUSH
1473: CALL_OW 277
// end ;
1477: LD_VAR 0 1
1481: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1482: LD_INT 0
1484: PPUSH
1485: PPUSH
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1492: LD_ADDR_EXP 61
1496: PUSH
1497: LD_STRING 02_Kirov
1499: PPUSH
1500: EMPTY
1501: PPUSH
1502: CALL_OW 30
1506: ST_TO_ADDR
// uc_side := 6 ;
1507: LD_ADDR_OWVAR 20
1511: PUSH
1512: LD_INT 6
1514: ST_TO_ADDR
// uc_nation := 3 ;
1515: LD_ADDR_OWVAR 21
1519: PUSH
1520: LD_INT 3
1522: ST_TO_ADDR
// kirovBunkersArray := [ [ b_breastwork , 146 , 106 , 1 ] , [ b_breastwork , 175 , 123 , 5 ] , [ b_breastwork , 179 , 118 , 4 ] , [ b_breastwork , 144 , 99 , 1 ] ] ;
1523: LD_ADDR_EXP 67
1527: PUSH
1528: LD_INT 31
1530: PUSH
1531: LD_INT 146
1533: PUSH
1534: LD_INT 106
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 31
1548: PUSH
1549: LD_INT 175
1551: PUSH
1552: LD_INT 123
1554: PUSH
1555: LD_INT 5
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 31
1566: PUSH
1567: LD_INT 179
1569: PUSH
1570: LD_INT 118
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 31
1584: PUSH
1585: LD_INT 144
1587: PUSH
1588: LD_INT 99
1590: PUSH
1591: LD_INT 1
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: ST_TO_ADDR
// for i := 1 to kirovBunkersArray do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_EXP 67
1620: PUSH
1621: FOR_TO
1622: IFFALSE 1702
// PrepareBuilding ( 6 , 3 , 5 , kirovBunkersArray [ i ] [ 1 ] , kirovBunkersArray [ i ] [ 2 ] , kirovBunkersArray [ i ] [ 3 ] , kirovBunkersArray [ i ] [ 4 ] , false ) ;
1624: LD_INT 6
1626: PPUSH
1627: LD_INT 3
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: LD_EXP 67
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 1
1646: ARRAY
1647: PPUSH
1648: LD_EXP 67
1652: PUSH
1653: LD_VAR 0 2
1657: ARRAY
1658: PUSH
1659: LD_INT 2
1661: ARRAY
1662: PPUSH
1663: LD_EXP 67
1667: PUSH
1668: LD_VAR 0 2
1672: ARRAY
1673: PUSH
1674: LD_INT 3
1676: ARRAY
1677: PPUSH
1678: LD_EXP 67
1682: PUSH
1683: LD_VAR 0 2
1687: ARRAY
1688: PUSH
1689: LD_INT 4
1691: ARRAY
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL 54247 0 8
1700: GO 1621
1702: POP
1703: POP
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1704: LD_ADDR_EXP 60
1708: PUSH
1709: LD_STRING 02_kirovTeam
1711: PPUSH
1712: CALL_OW 31
1716: ST_TO_ADDR
// for i := 1 to kirovBase do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: DOUBLE
1723: LD_INT 1
1725: DEC
1726: ST_TO_ADDR
1727: LD_EXP 61
1731: PUSH
1732: FOR_TO
1733: IFFALSE 1882
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1735: LD_ADDR_OWVAR 42
1739: PUSH
1740: LD_EXP 61
1744: PUSH
1745: LD_VAR 0 2
1749: ARRAY
1750: PUSH
1751: LD_INT 1
1753: ARRAY
1754: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1755: LD_ADDR_OWVAR 43
1759: PUSH
1760: LD_EXP 61
1764: PUSH
1765: LD_VAR 0 2
1769: ARRAY
1770: PUSH
1771: LD_INT 2
1773: ARRAY
1774: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1775: LD_ADDR_VAR 0 6
1779: PUSH
1780: LD_EXP 61
1784: PUSH
1785: LD_VAR 0 2
1789: ARRAY
1790: PUSH
1791: LD_INT 3
1793: ARRAY
1794: PUSH
1795: LD_INT 46
1797: PLUS
1798: ST_TO_ADDR
// if x < 140 then
1799: LD_VAR 0 6
1803: PUSH
1804: LD_INT 140
1806: LESS
1807: IFFALSE 1819
// uc_side := 3 else
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 3
1816: ST_TO_ADDR
1817: GO 1827
// uc_side := 6 ;
1819: LD_ADDR_OWVAR 20
1823: PUSH
1824: LD_INT 6
1826: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1827: LD_EXP 61
1831: PUSH
1832: LD_VAR 0 2
1836: ARRAY
1837: PUSH
1838: LD_INT 3
1840: ARRAY
1841: PUSH
1842: LD_INT 46
1844: PLUS
1845: PPUSH
1846: LD_EXP 61
1850: PUSH
1851: LD_VAR 0 2
1855: ARRAY
1856: PUSH
1857: LD_INT 4
1859: ARRAY
1860: PPUSH
1861: LD_EXP 61
1865: PUSH
1866: LD_VAR 0 2
1870: ARRAY
1871: PUSH
1872: LD_INT 5
1874: ARRAY
1875: PPUSH
1876: CALL_OW 47
// end ;
1880: GO 1732
1882: POP
1883: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1884: LD_ADDR_EXP 62
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 6
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 0
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: PUSH
1918: LD_INT 1
1920: ARRAY
1921: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1922: LD_EXP 62
1926: PPUSH
1927: LD_STRING kirov
1929: PPUSH
1930: CALL_OW 500
// for i := 1 to 2 do
1934: LD_ADDR_VAR 0 2
1938: PUSH
1939: DOUBLE
1940: LD_INT 1
1942: DEC
1943: ST_TO_ADDR
1944: LD_INT 2
1946: PUSH
1947: FOR_TO
1948: IFFALSE 1974
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1950: LD_EXP 62
1954: PPUSH
1955: CALL_OW 274
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: LD_INT 500
1967: PPUSH
1968: CALL_OW 277
1972: GO 1947
1974: POP
1975: POP
// for i := 1 to 4 do
1976: LD_ADDR_VAR 0 2
1980: PUSH
1981: DOUBLE
1982: LD_INT 1
1984: DEC
1985: ST_TO_ADDR
1986: LD_INT 4
1988: PUSH
1989: FOR_TO
1990: IFFALSE 2048
// begin hc_name :=  ;
1992: LD_ADDR_OWVAR 26
1996: PUSH
1997: LD_STRING 
1999: ST_TO_ADDR
// hc_gallery :=  ;
2000: LD_ADDR_OWVAR 33
2004: PUSH
2005: LD_STRING 
2007: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2008: LD_INT 0
2010: PPUSH
2011: LD_EXP 42
2015: PPUSH
2016: CALL_OW 381
// un = CreateHuman ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 44
2029: ST_TO_ADDR
// extraKirovCrew = extraKirovCrew ^ un ;
2030: LD_ADDR_EXP 75
2034: PUSH
2035: LD_EXP 75
2039: PUSH
2040: LD_VAR 0 3
2044: ADD
2045: ST_TO_ADDR
// end ;
2046: GO 1989
2048: POP
2049: POP
// tmp := otherKirovUnits union extraKirovCrew ;
2050: LD_ADDR_VAR 0 4
2054: PUSH
2055: LD_EXP 60
2059: PUSH
2060: LD_EXP 75
2064: UNION
2065: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
2066: LD_ADDR_VAR 0 5
2070: PUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 30
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
2118: LD_ADDR_VAR 0 7
2122: PUSH
2123: LD_VAR 0 5
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
2132: LD_VAR 0 4
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_VAR 0 7
2145: PPUSH
2146: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: LD_VAR 0 4
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL_OW 3
2167: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
2168: LD_VAR 0 7
2172: PPUSH
2173: CALL_OW 313
2177: PUSH
2178: LD_INT 3
2180: EQUAL
2181: IFFALSE 2201
// buildings := Delete ( buildings , 1 ) ;
2183: LD_ADDR_VAR 0 5
2187: PUSH
2188: LD_VAR 0 5
2192: PPUSH
2193: LD_INT 1
2195: PPUSH
2196: CALL_OW 3
2200: ST_TO_ADDR
// until not buildings or not tmp ;
2201: LD_VAR 0 5
2205: NOT
2206: PUSH
2207: LD_VAR 0 4
2211: NOT
2212: OR
2213: IFFALSE 2118
// if tmp then
2215: LD_VAR 0 4
2219: IFFALSE 2259
// begin for i in tmp do
2221: LD_ADDR_VAR 0 2
2225: PUSH
2226: LD_VAR 0 4
2230: PUSH
2231: FOR_IN
2232: IFFALSE 2257
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
2234: LD_VAR 0 2
2238: PPUSH
2239: LD_INT 164
2241: PPUSH
2242: LD_INT 109
2244: PPUSH
2245: LD_INT 4
2247: PPUSH
2248: LD_INT 0
2250: PPUSH
2251: CALL_OW 50
2255: GO 2231
2257: POP
2258: POP
// end ; end ;
2259: LD_VAR 0 1
2263: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray , kirovBunkers ; begin
2264: LD_INT 0
2266: PPUSH
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
// kirovBuildingArray := [ [ b_bunker , 144 , 99 , 1 ] , [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 32
2278: PUSH
2279: LD_INT 144
2281: PUSH
2282: LD_INT 99
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 32
2296: PUSH
2297: LD_INT 146
2299: PUSH
2300: LD_INT 106
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 32
2314: PUSH
2315: LD_INT 175
2317: PUSH
2318: LD_INT 123
2320: PUSH
2321: LD_INT 5
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 32
2332: PUSH
2333: LD_INT 179
2335: PUSH
2336: LD_INT 118
2338: PUSH
2339: LD_INT 4
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_INT 32
2350: PUSH
2351: LD_INT 170
2353: PUSH
2354: LD_INT 101
2356: PUSH
2357: LD_INT 3
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 32
2368: PUSH
2369: LD_INT 172
2371: PUSH
2372: LD_INT 104
2374: PUSH
2375: LD_INT 4
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_INT 26
2386: PUSH
2387: LD_INT 159
2389: PUSH
2390: LD_INT 96
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
2411: LD_ADDR_EXP 74
2415: PUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 6
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: LD_INT 21
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 25
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PPUSH
2451: CALL_OW 69
2455: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2456: LD_ADDR_EXP 64
2460: PUSH
2461: LD_INT 22
2463: PUSH
2464: LD_INT 6
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 21
2473: PUSH
2474: LD_INT 3
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 30
2483: PUSH
2484: LD_INT 6
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PPUSH
2496: CALL_OW 69
2500: PUSH
2501: LD_INT 1
2503: ARRAY
2504: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2505: LD_ADDR_EXP 65
2509: PUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 21
2522: PUSH
2523: LD_INT 3
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 30
2532: PUSH
2533: LD_INT 4
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: PPUSH
2545: CALL_OW 69
2549: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2550: LD_ADDR_EXP 66
2554: PUSH
2555: LD_INT 22
2557: PUSH
2558: LD_INT 6
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 21
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 30
2577: PUSH
2578: LD_INT 2
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: PPUSH
2590: CALL_OW 69
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2599: LD_ADDR_VAR 0 3
2603: PUSH
2604: LD_INT 22
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 21
2616: PUSH
2617: LD_INT 1
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 25
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2653: LD_VAR 0 3
2657: PPUSH
2658: LD_EXP 66
2662: PPUSH
2663: CALL_OW 180
// wait ( 0 0$1 ) ;
2667: LD_INT 35
2669: PPUSH
2670: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2674: LD_ADDR_VAR 0 3
2678: PUSH
2679: LD_INT 22
2681: PUSH
2682: LD_INT 6
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 25
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PPUSH
2714: CALL_OW 69
2718: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_EXP 64
2728: PPUSH
2729: CALL_OW 180
// kirovBunkers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) ;
2733: LD_ADDR_VAR 0 5
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 6
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 21
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 30
2760: PUSH
2761: LD_INT 31
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: PPUSH
2773: CALL_OW 69
2777: ST_TO_ADDR
// for i in kirovBunkersArray do
2778: LD_ADDR_VAR 0 2
2782: PUSH
2783: LD_EXP 67
2787: PUSH
2788: FOR_IN
2789: IFFALSE 2870
// begin RemoveUnit ( kirovBunkers [ 1 ] ) ;
2791: LD_VAR 0 5
2795: PUSH
2796: LD_INT 1
2798: ARRAY
2799: PPUSH
2800: CALL_OW 64
// kirovBunkers := Delete ( kirovBunkers , 1 ) ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_INT 1
2816: PPUSH
2817: CALL_OW 3
2821: ST_TO_ADDR
// PrepareBuilding ( 6 , 3 , 5 , b_bunker , i [ 2 ] , i [ 3 ] , i [ 4 ] , true ) ;
2822: LD_INT 6
2824: PPUSH
2825: LD_INT 3
2827: PPUSH
2828: LD_INT 5
2830: PPUSH
2831: LD_INT 32
2833: PPUSH
2834: LD_VAR 0 2
2838: PUSH
2839: LD_INT 2
2841: ARRAY
2842: PPUSH
2843: LD_VAR 0 2
2847: PUSH
2848: LD_INT 3
2850: ARRAY
2851: PPUSH
2852: LD_VAR 0 2
2856: PUSH
2857: LD_INT 4
2859: ARRAY
2860: PPUSH
2861: LD_INT 1
2863: PPUSH
2864: CALL 54247 0 8
// end ;
2868: GO 2788
2870: POP
2871: POP
// for i in kirovBuildingArray do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: LD_VAR 0 4
2881: PUSH
2882: FOR_IN
2883: IFFALSE 2932
// begin AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2885: LD_EXP 74
2889: PPUSH
2890: LD_VAR 0 2
2894: PUSH
2895: LD_INT 1
2897: ARRAY
2898: PPUSH
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PPUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PPUSH
2917: LD_VAR 0 2
2921: PUSH
2922: LD_INT 4
2924: ARRAY
2925: PPUSH
2926: CALL_OW 205
// end ;
2930: GO 2882
2932: POP
2933: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop , ] ;
2934: LD_ADDR_EXP 2
2938: PUSH
2939: LD_EXP 64
2943: PUSH
2944: LD_EXP 65
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PUSH
2953: LD_EXP 65
2957: PUSH
2958: LD_INT 2
2960: ARRAY
2961: PUSH
2962: LD_EXP 62
2966: PUSH
2967: LD_EXP 66
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: ST_TO_ADDR
// end ;
2979: LD_VAR 0 1
2983: RET
// export function PrepareScholtze ; begin
2984: LD_INT 0
2986: PPUSH
// uc_side := 5 ;
2987: LD_ADDR_OWVAR 20
2991: PUSH
2992: LD_INT 5
2994: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2995: LD_ADDR_EXP 71
2999: PUSH
3000: LD_STRING Scholtze
3002: PPUSH
3003: CALL_OW 25
3007: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
3008: LD_ADDR_EXP 72
3012: PUSH
3013: LD_STRING Scholtze
3015: PPUSH
3016: CALL_OW 25
3020: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
3021: LD_EXP 71
3025: PPUSH
3026: LD_INT 12
3028: PPUSH
3029: LD_INT 1
3031: PPUSH
3032: CALL_OW 49
// end ;
3036: LD_VAR 0 1
3040: RET
// export function KirovAttackOmicron ; begin
3041: LD_INT 0
3043: PPUSH
// if KirovCurrentAttacker = Length ( kirovAttackVehicles ) then
3044: LD_EXP 43
3048: PUSH
3049: LD_EXP 100
3053: PPUSH
3054: CALL 54225 0 1
3058: EQUAL
3059: IFFALSE 3069
// KirovCurrentAttacker = 1 ;
3061: LD_ADDR_EXP 43
3065: PUSH
3066: LD_INT 1
3068: ST_TO_ADDR
// AgressiveMove ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ [ 34 , 38 ] ] ) ;
3069: LD_EXP 100
3073: PUSH
3074: LD_EXP 43
3078: ARRAY
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 38
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: EMPTY
3091: LIST
3092: PPUSH
3093: CALL 53104 0 2
// end ; end_of_file
3097: LD_VAR 0 1
3101: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits , omiBunerArray , omiBreastworkArray ; export amConvoyGroups , amFreeSols ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
// amIntroUnits = [ ] ;
3108: LD_ADDR_EXP 80
3112: PUSH
3113: EMPTY
3114: ST_TO_ADDR
// uc_side = 1 ;
3115: LD_ADDR_OWVAR 20
3119: PUSH
3120: LD_INT 1
3122: ST_TO_ADDR
// uc_nation = nation_american ;
3123: LD_ADDR_OWVAR 21
3127: PUSH
3128: LD_INT 1
3130: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
3131: LD_ADDR_OWVAR 37
3135: PUSH
3136: LD_INT 3
3138: ST_TO_ADDR
// vc_control = control_manual ;
3139: LD_ADDR_OWVAR 38
3143: PUSH
3144: LD_INT 1
3146: ST_TO_ADDR
// vc_engine = engine_combustion ;
3147: LD_ADDR_OWVAR 39
3151: PUSH
3152: LD_INT 1
3154: ST_TO_ADDR
// vc_weapon = us_light_gun ;
3155: LD_ADDR_OWVAR 40
3159: PUSH
3160: LD_INT 3
3162: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3163: LD_ADDR_OWVAR 41
3167: PUSH
3168: LD_INT 100
3170: ST_TO_ADDR
// veh = CreateVehicle ;
3171: LD_ADDR_VAR 0 3
3175: PUSH
3176: CALL_OW 45
3180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3181: LD_VAR 0 3
3185: PPUSH
3186: LD_INT 4
3188: PPUSH
3189: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
3193: LD_ADDR_EXP 80
3197: PUSH
3198: LD_EXP 80
3202: PUSH
3203: LD_VAR 0 3
3207: ADD
3208: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
3209: LD_VAR 0 3
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 49
// for i := 1 to 3 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 3
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3359
// begin hc_name :=  ;
3240: LD_ADDR_OWVAR 26
3244: PUSH
3245: LD_STRING 
3247: ST_TO_ADDR
// hc_gallery :=  ;
3248: LD_ADDR_OWVAR 33
3252: PUSH
3253: LD_STRING 
3255: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3256: LD_INT 0
3258: PPUSH
3259: LD_EXP 42
3263: PPUSH
3264: CALL_OW 381
// human = CreateHuman ;
3268: LD_ADDR_VAR 0 4
3272: PUSH
3273: CALL_OW 44
3277: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
3278: LD_ADDR_EXP 80
3282: PUSH
3283: LD_EXP 80
3287: PUSH
3288: LD_VAR 0 4
3292: ADD
3293: ST_TO_ADDR
// if i < 3 then
3294: LD_VAR 0 2
3298: PUSH
3299: LD_INT 3
3301: LESS
3302: IFFALSE 3321
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
3304: LD_VAR 0 4
3308: PPUSH
3309: LD_INT 7
3311: PPUSH
3312: LD_INT 0
3314: PPUSH
3315: CALL_OW 49
3319: GO 3357
// begin PrepareMechanic ( false , enemySkillLevel ) ;
3321: LD_INT 0
3323: PPUSH
3324: LD_EXP 42
3328: PPUSH
3329: CALL_OW 383
// human = CreateHuman ;
3333: LD_ADDR_VAR 0 4
3337: PUSH
3338: CALL_OW 44
3342: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
3343: LD_VAR 0 4
3347: PPUSH
3348: LD_VAR 0 3
3352: PPUSH
3353: CALL_OW 52
// end ; end ;
3357: GO 3237
3359: POP
3360: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
3361: LD_INT 120
3363: PPUSH
3364: LD_INT 36
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
3374: LD_EXP 80
3378: PPUSH
3379: LD_INT 26
3381: PPUSH
3382: LD_INT 34
3384: PPUSH
3385: CALL_OW 111
// end ;
3389: LD_VAR 0 1
3393: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
3394: LD_INT 0
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
3400: PPUSH
3401: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 0 , 0 , 0 , 0 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 2 , 3 , 4 , 5 ] [ Difficulty ] , [ 0 , 1 , 1 , 1 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 0 , 1 , 2 , 1 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] ] , [ [ 1 , 2 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 2 , 3 , 4 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 2 , 2 , 2 , 3 ] [ Difficulty ] , [ 2 , 2 , 2 , 3 ] [ Difficulty ] , [ 2 , 2 , 2 , 3 ] [ Difficulty ] ] ] ;
3402: LD_ADDR_EXP 83
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 2
3412: PUSH
3413: LD_INT 3
3415: PUSH
3416: LD_INT 4
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: PUSH
3425: LD_OWVAR 67
3429: ARRAY
3430: PUSH
3431: LD_INT 0
3433: PUSH
3434: LD_INT 0
3436: PUSH
3437: LD_INT 0
3439: PUSH
3440: LD_INT 0
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_OWVAR 67
3453: ARRAY
3454: PUSH
3455: LD_INT 0
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: LD_INT 1
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_OWVAR 67
3477: ARRAY
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_OWVAR 67
3501: ARRAY
3502: PUSH
3503: LD_INT 0
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: LD_INT 1
3511: PUSH
3512: LD_INT 2
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_OWVAR 67
3525: ARRAY
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: LD_INT 5
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: LD_OWVAR 67
3556: ARRAY
3557: PUSH
3558: LD_INT 0
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: LD_INT 1
3566: PUSH
3567: LD_INT 1
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_OWVAR 67
3580: ARRAY
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: LD_INT 0
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: LD_OWVAR 67
3604: ARRAY
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 1
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_OWVAR 67
3628: ARRAY
3629: PUSH
3630: LD_INT 0
3632: PUSH
3633: LD_INT 0
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: LD_INT 1
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_OWVAR 67
3652: ARRAY
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 1
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_INT 2
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_OWVAR 67
3683: ARRAY
3684: PUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: PUSH
3703: LD_OWVAR 67
3707: ARRAY
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: LD_INT 1
3714: PUSH
3715: LD_INT 1
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: LD_OWVAR 67
3731: ARRAY
3732: PUSH
3733: LD_INT 1
3735: PUSH
3736: LD_INT 1
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_OWVAR 67
3755: ARRAY
3756: PUSH
3757: LD_INT 1
3759: PUSH
3760: LD_INT 1
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 2
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: LD_INT 4
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: PUSH
3806: LD_OWVAR 67
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: LD_INT 1
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: LD_OWVAR 67
3834: ARRAY
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: LD_INT 2
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_OWVAR 67
3858: ARRAY
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: LD_OWVAR 67
3882: ARRAY
3883: PUSH
3884: LD_INT 2
3886: PUSH
3887: LD_INT 2
3889: PUSH
3890: LD_INT 2
3892: PUSH
3893: LD_INT 3
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_OWVAR 67
3906: ARRAY
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 15 , 23 , 1 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3921: LD_ADDR_VAR 0 6
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: LD_INT 20
3931: PUSH
3932: LD_INT 33
3934: PUSH
3935: LD_INT 2
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 29
3946: PUSH
3947: LD_INT 38
3949: PUSH
3950: LD_INT 30
3952: PUSH
3953: LD_INT 5
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 5
3964: PUSH
3965: LD_INT 34
3967: PUSH
3968: LD_INT 25
3970: PUSH
3971: LD_INT 4
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PUSH
3980: LD_INT 5
3982: PUSH
3983: LD_INT 35
3985: PUSH
3986: LD_INT 45
3988: PUSH
3989: LD_INT 4
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 6
4000: PUSH
4001: LD_INT 15
4003: PUSH
4004: LD_INT 23
4006: PUSH
4007: LD_INT 1
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 27
4018: PUSH
4019: LD_INT 7
4021: PUSH
4022: LD_INT 8
4024: PUSH
4025: LD_INT 1
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 27
4036: PUSH
4037: LD_INT 10
4039: PUSH
4040: LD_INT 8
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 27
4054: PUSH
4055: LD_INT 13
4057: PUSH
4058: LD_INT 8
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: PUSH
4070: LD_INT 26
4072: PUSH
4073: LD_INT 23
4075: PUSH
4076: LD_INT 42
4078: PUSH
4079: LD_INT 4
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: LD_INT 13
4093: PUSH
4094: LD_INT 14
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 19
4108: PUSH
4109: LD_INT 10
4111: PUSH
4112: LD_INT 11
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 17
4126: PUSH
4127: LD_INT 9
4129: PUSH
4130: LD_INT 14
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 16
4144: PUSH
4145: LD_INT 13
4147: PUSH
4148: LD_INT 17
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: ST_TO_ADDR
// omiBunerArray := [ [ b_bunker , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] ] ;
4175: LD_ADDR_EXP 81
4179: PUSH
4180: LD_INT 32
4182: PUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: LD_INT 5
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 32
4200: PUSH
4201: LD_INT 37
4203: PUSH
4204: LD_INT 35
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 32
4218: PUSH
4219: LD_INT 42
4221: PUSH
4222: LD_INT 45
4224: PUSH
4225: LD_INT 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 32
4236: PUSH
4237: LD_INT 29
4239: PUSH
4240: LD_INT 17
4242: PUSH
4243: LD_INT 4
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 32
4254: PUSH
4255: LD_INT 30
4257: PUSH
4258: LD_INT 53
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 42
4275: PUSH
4276: LD_INT 56
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 32
4290: PUSH
4291: LD_INT 30
4293: PUSH
4294: LD_INT 20
4296: PUSH
4297: LD_INT 4
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: ST_TO_ADDR
// omiBreastworkArray := [ [ b_breastwork , 25 , 8 , 5 ] , [ b_breastwork , 37 , 35 , 4 ] , [ b_breastwork , 42 , 45 , 4 ] , [ b_breastwork , 29 , 17 , 4 ] , [ b_breastwork , 30 , 53 , 0 ] , [ b_breastwork , 42 , 56 , 4 ] , [ b_breastwork , 30 , 20 , 4 ] ] ;
4315: LD_ADDR_EXP 82
4319: PUSH
4320: LD_INT 31
4322: PUSH
4323: LD_INT 25
4325: PUSH
4326: LD_INT 8
4328: PUSH
4329: LD_INT 5
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 31
4340: PUSH
4341: LD_INT 37
4343: PUSH
4344: LD_INT 35
4346: PUSH
4347: LD_INT 4
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: LD_INT 31
4358: PUSH
4359: LD_INT 42
4361: PUSH
4362: LD_INT 45
4364: PUSH
4365: LD_INT 4
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 31
4376: PUSH
4377: LD_INT 29
4379: PUSH
4380: LD_INT 17
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_INT 31
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 53
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 31
4412: PUSH
4413: LD_INT 42
4415: PUSH
4416: LD_INT 56
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 20
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// omicronSquad := [ ] ;
4455: LD_ADDR_EXP 77
4459: PUSH
4460: EMPTY
4461: ST_TO_ADDR
// for i in omiBuildingArray do
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_VAR 0 6
4471: PUSH
4472: FOR_IN
4473: IFFALSE 4529
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 1
4480: PPUSH
4481: LD_INT 5
4483: PPUSH
4484: LD_VAR 0 2
4488: PUSH
4489: LD_INT 1
4491: ARRAY
4492: PPUSH
4493: LD_VAR 0 2
4497: PUSH
4498: LD_INT 2
4500: ARRAY
4501: PPUSH
4502: LD_VAR 0 2
4506: PUSH
4507: LD_INT 3
4509: ARRAY
4510: PPUSH
4511: LD_VAR 0 2
4515: PUSH
4516: LD_INT 4
4518: ARRAY
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL 54247 0 8
4527: GO 4472
4529: POP
4530: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4531: LD_ADDR_EXP 79
4535: PUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 30
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
4569: LD_EXP 79
4573: PPUSH
4574: LD_STRING omikron
4576: PPUSH
4577: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4581: LD_ADDR_EXP 86
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 30
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PPUSH
4610: CALL_OW 69
4614: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
4615: LD_ADDR_EXP 85
4619: PUSH
4620: LD_INT 22
4622: PUSH
4623: LD_INT 1
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 30
4632: PUSH
4633: LD_INT 6
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 69
4648: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4649: LD_ADDR_EXP 87
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 1
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 30
4666: PUSH
4667: LD_INT 3
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PPUSH
4678: CALL_OW 69
4682: PUSH
4683: LD_INT 1
4685: ARRAY
4686: ST_TO_ADDR
// end ;
4687: LD_VAR 0 1
4691: RET
// export function UpgradeOmicron ; var i , un , amBunkers ; begin
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// for i := 1 to 2 do
4698: LD_ADDR_VAR 0 2
4702: PUSH
4703: DOUBLE
4704: LD_INT 1
4706: DEC
4707: ST_TO_ADDR
4708: LD_INT 2
4710: PUSH
4711: FOR_TO
4712: IFFALSE 4738
// SetResourceType ( GetBase ( omikronDepot ) , i , 100 ) ;
4714: LD_EXP 79
4718: PPUSH
4719: CALL_OW 274
4723: PPUSH
4724: LD_VAR 0 2
4728: PPUSH
4729: LD_INT 100
4731: PPUSH
4732: CALL_OW 277
4736: GO 4711
4738: POP
4739: POP
// uc_side := 1 ;
4740: LD_ADDR_OWVAR 20
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// uc_nation := 1 ;
4748: LD_ADDR_OWVAR 21
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// amBunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
4756: LD_ADDR_VAR 0 4
4760: PUSH
4761: LD_INT 22
4763: PUSH
4764: LD_INT 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 30
4773: PUSH
4774: LD_INT 31
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// PrepareBuilding ( 1 , 1 , 5 , omiBunerArray [ 1 ] [ 1 ] , omiBunerArray [ 1 ] [ 2 ] , omiBunerArray [ 1 ] [ 3 ] , omiBunerArray [ 1 ] [ 4 ] , false ) ;
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 1
4795: PPUSH
4796: LD_INT 5
4798: PPUSH
4799: LD_EXP 81
4803: PUSH
4804: LD_INT 1
4806: ARRAY
4807: PUSH
4808: LD_INT 1
4810: ARRAY
4811: PPUSH
4812: LD_EXP 81
4816: PUSH
4817: LD_INT 1
4819: ARRAY
4820: PUSH
4821: LD_INT 2
4823: ARRAY
4824: PPUSH
4825: LD_EXP 81
4829: PUSH
4830: LD_INT 1
4832: ARRAY
4833: PUSH
4834: LD_INT 3
4836: ARRAY
4837: PPUSH
4838: LD_EXP 81
4842: PUSH
4843: LD_INT 1
4845: ARRAY
4846: PUSH
4847: LD_INT 4
4849: ARRAY
4850: PPUSH
4851: LD_INT 0
4853: PPUSH
4854: CALL 54247 0 8
// omiBunerArray := Delete ( omiBunerArray , 1 ) ;
4858: LD_ADDR_EXP 81
4862: PUSH
4863: LD_EXP 81
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: CALL_OW 3
4875: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: LD_INT 30
4896: PUSH
4897: LD_INT 32
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 30
4906: PUSH
4907: LD_INT 31
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: PUSH
4928: FOR_IN
4929: IFFALSE 5048
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: LD_INT 3
4939: PUSH
4940: LD_INT 4
4942: PUSH
4943: LD_INT 5
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: PUSH
4951: LD_OWVAR 67
4955: ARRAY
4956: PPUSH
4957: CALL_OW 380
// un := CreateHuman ;
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4971: LD_ADDR_EXP 77
4975: PUSH
4976: LD_EXP 77
4980: PUSH
4981: LD_VAR 0 3
4985: UNION
4986: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4987: LD_VAR 0 3
4991: PPUSH
4992: LD_VAR 0 2
4996: PPUSH
4997: CALL_OW 254
5001: PUSH
5002: LD_INT 3
5004: MINUS
5005: PPUSH
5006: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PPUSH
5020: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
5024: LD_VAR 0 2
5028: PPUSH
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 8
5036: PPUSH
5037: CALL 23823 0 2
5041: PPUSH
5042: CALL_OW 431
// end ;
5046: GO 4928
5048: POP
5049: POP
// end ;
5050: LD_VAR 0 1
5054: RET
// export function InitOmicronDef ; var i , un ; begin
5055: LD_INT 0
5057: PPUSH
5058: PPUSH
5059: PPUSH
// for i in omiBreastworkArray do
5060: LD_ADDR_VAR 0 2
5064: PUSH
5065: LD_EXP 82
5069: PUSH
5070: FOR_IN
5071: IFFALSE 5127
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
5073: LD_INT 1
5075: PPUSH
5076: LD_INT 1
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: LD_VAR 0 2
5095: PUSH
5096: LD_INT 2
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 2
5104: PUSH
5105: LD_INT 3
5107: ARRAY
5108: PPUSH
5109: LD_VAR 0 2
5113: PUSH
5114: LD_INT 4
5116: ARRAY
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: CALL 54247 0 8
5125: GO 5070
5127: POP
5128: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_INT 22
5136: PUSH
5137: LD_INT 1
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 30
5146: PUSH
5147: LD_INT 31
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PPUSH
5158: CALL_OW 69
5162: PUSH
5163: FOR_IN
5164: IFFALSE 5261
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: LD_INT 3
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 5
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: LD_OWVAR 67
5190: ARRAY
5191: PPUSH
5192: CALL_OW 380
// un := CreateHuman ;
5196: LD_ADDR_VAR 0 3
5200: PUSH
5201: CALL_OW 44
5205: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5206: LD_ADDR_EXP 77
5210: PUSH
5211: LD_EXP 77
5215: PUSH
5216: LD_VAR 0 3
5220: UNION
5221: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
5222: LD_VAR 0 3
5226: PPUSH
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 254
5236: PUSH
5237: LD_INT 3
5239: MINUS
5240: PPUSH
5241: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5245: LD_VAR 0 3
5249: PPUSH
5250: LD_VAR 0 2
5254: PPUSH
5255: CALL_OW 52
// end ;
5259: GO 5163
5261: POP
5262: POP
// end ;
5263: LD_VAR 0 1
5267: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
// uc_side := 1 ;
5280: LD_ADDR_OWVAR 20
5284: PUSH
5285: LD_INT 1
5287: ST_TO_ADDR
// uc_nation := 1 ;
5288: LD_ADDR_OWVAR 21
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// hc_name :=  ;
5296: LD_ADDR_OWVAR 26
5300: PUSH
5301: LD_STRING 
5303: ST_TO_ADDR
// hc_gallery :=  ;
5304: LD_ADDR_OWVAR 33
5308: PUSH
5309: LD_STRING 
5311: ST_TO_ADDR
// amFreeSols := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_outside ] ] ) ;
5312: LD_ADDR_EXP 84
5316: PUSH
5317: LD_INT 22
5319: PUSH
5320: LD_INT 1
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PUSH
5327: LD_INT 21
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: PUSH
5337: LD_INT 25
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 56
5349: PUSH
5350: EMPTY
5351: LIST
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: PPUSH
5359: CALL_OW 69
5363: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5364: LD_ADDR_VAR 0 8
5368: PUSH
5369: DOUBLE
5370: LD_INT 1
5372: DEC
5373: ST_TO_ADDR
5374: LD_VAR 0 1
5378: PUSH
5379: FOR_TO
5380: IFFALSE 5455
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5382: LD_INT 0
5384: PPUSH
5385: LD_EXP 42
5389: PPUSH
5390: CALL_OW 381
// un = CreateHuman ;
5394: LD_ADDR_VAR 0 9
5398: PUSH
5399: CALL_OW 44
5403: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5404: LD_ADDR_EXP 89
5408: PUSH
5409: LD_EXP 89
5413: PUSH
5414: LD_VAR 0 9
5418: ADD
5419: ST_TO_ADDR
// sols := sols ^ un ;
5420: LD_ADDR_VAR 0 12
5424: PUSH
5425: LD_VAR 0 12
5429: PUSH
5430: LD_VAR 0 9
5434: ADD
5435: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5436: LD_VAR 0 9
5440: PPUSH
5441: LD_VAR 0 6
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// end ;
5453: GO 5379
5455: POP
5456: POP
// for i := 1 to engsAmount do
5457: LD_ADDR_VAR 0 8
5461: PUSH
5462: DOUBLE
5463: LD_INT 1
5465: DEC
5466: ST_TO_ADDR
5467: LD_VAR 0 2
5471: PUSH
5472: FOR_TO
5473: IFFALSE 5548
// begin PrepareEngineer ( false , enemySkillLevel ) ;
5475: LD_INT 0
5477: PPUSH
5478: LD_EXP 42
5482: PPUSH
5483: CALL_OW 382
// un = CreateHuman ;
5487: LD_ADDR_VAR 0 9
5491: PUSH
5492: CALL_OW 44
5496: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5497: LD_ADDR_EXP 89
5501: PUSH
5502: LD_EXP 89
5506: PUSH
5507: LD_VAR 0 9
5511: ADD
5512: ST_TO_ADDR
// engs := engs ^ un ;
5513: LD_ADDR_VAR 0 13
5517: PUSH
5518: LD_VAR 0 13
5522: PUSH
5523: LD_VAR 0 9
5527: ADD
5528: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5529: LD_VAR 0 9
5533: PPUSH
5534: LD_VAR 0 6
5538: PPUSH
5539: LD_INT 0
5541: PPUSH
5542: CALL_OW 49
// end ;
5546: GO 5472
5548: POP
5549: POP
// for i := 1 to mechsAmount do
5550: LD_ADDR_VAR 0 8
5554: PUSH
5555: DOUBLE
5556: LD_INT 1
5558: DEC
5559: ST_TO_ADDR
5560: LD_VAR 0 3
5564: PUSH
5565: FOR_TO
5566: IFFALSE 5641
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5568: LD_INT 0
5570: PPUSH
5571: LD_EXP 42
5575: PPUSH
5576: CALL_OW 383
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 9
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5590: LD_ADDR_EXP 89
5594: PUSH
5595: LD_EXP 89
5599: PUSH
5600: LD_VAR 0 9
5604: ADD
5605: ST_TO_ADDR
// mechs := mechs ^ un ;
5606: LD_ADDR_VAR 0 14
5610: PUSH
5611: LD_VAR 0 14
5615: PUSH
5616: LD_VAR 0 9
5620: ADD
5621: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5622: LD_VAR 0 9
5626: PPUSH
5627: LD_VAR 0 6
5631: PPUSH
5632: LD_INT 0
5634: PPUSH
5635: CALL_OW 49
// end ;
5639: GO 5565
5641: POP
5642: POP
// for i := 1 to scientistsAmount do
5643: LD_ADDR_VAR 0 8
5647: PUSH
5648: DOUBLE
5649: LD_INT 1
5651: DEC
5652: ST_TO_ADDR
5653: LD_VAR 0 4
5657: PUSH
5658: FOR_TO
5659: IFFALSE 5734
// begin PrepareScientist ( false , enemySkillLevel ) ;
5661: LD_INT 0
5663: PPUSH
5664: LD_EXP 42
5668: PPUSH
5669: CALL_OW 384
// un = CreateHuman ;
5673: LD_ADDR_VAR 0 9
5677: PUSH
5678: CALL_OW 44
5682: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5683: LD_ADDR_EXP 89
5687: PUSH
5688: LD_EXP 89
5692: PUSH
5693: LD_VAR 0 9
5697: ADD
5698: ST_TO_ADDR
// scis := scis ^ un ;
5699: LD_ADDR_VAR 0 15
5703: PUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 9
5713: ADD
5714: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5715: LD_VAR 0 9
5719: PPUSH
5720: LD_VAR 0 6
5724: PPUSH
5725: LD_INT 0
5727: PPUSH
5728: CALL_OW 49
// end ;
5732: GO 5658
5734: POP
5735: POP
// for i := 1 to vehiclesAmount do
5736: LD_ADDR_VAR 0 8
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_VAR 0 5
5750: PUSH
5751: FOR_TO
5752: IFFALSE 5934
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5754: LD_ADDR_OWVAR 40
5758: PUSH
5759: LD_INT 2
5761: PUSH
5762: LD_INT 4
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_INT 3
5778: PPUSH
5779: CALL_OW 12
5783: ARRAY
5784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5785: LD_ADDR_OWVAR 37
5789: PUSH
5790: LD_INT 3
5792: ST_TO_ADDR
// vc_control = control_manual ;
5793: LD_ADDR_OWVAR 38
5797: PUSH
5798: LD_INT 1
5800: ST_TO_ADDR
// vc_engine = engine_combustion ;
5801: LD_ADDR_OWVAR 39
5805: PUSH
5806: LD_INT 1
5808: ST_TO_ADDR
// veh = CreateVehicle ;
5809: LD_ADDR_VAR 0 10
5813: PUSH
5814: CALL_OW 45
5818: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
5819: LD_ADDR_EXP 89
5823: PUSH
5824: LD_EXP 89
5828: PUSH
5829: LD_VAR 0 10
5833: ADD
5834: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5835: LD_VAR 0 10
5839: PPUSH
5840: LD_VAR 0 6
5844: PPUSH
5845: LD_INT 0
5847: PPUSH
5848: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
5852: LD_INT 0
5854: PPUSH
5855: LD_EXP 42
5859: PPUSH
5860: CALL_OW 383
// un = CreateHuman ;
5864: LD_ADDR_VAR 0 9
5868: PUSH
5869: CALL_OW 44
5873: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
5874: LD_ADDR_EXP 89
5878: PUSH
5879: LD_EXP 89
5883: PUSH
5884: LD_VAR 0 9
5888: ADD
5889: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
5890: LD_ADDR_EXP 88
5894: PUSH
5895: LD_EXP 88
5899: PUSH
5900: LD_VAR 0 10
5904: ADD
5905: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5906: LD_VAR 0 9
5910: PPUSH
5911: LD_VAR 0 10
5915: PPUSH
5916: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5920: LD_VAR 0 10
5924: PPUSH
5925: LD_INT 100
5927: PPUSH
5928: CALL_OW 240
// end ;
5932: GO 5751
5934: POP
5935: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5936: LD_EXP 89
5940: PPUSH
5941: LD_INT 25
5943: PPUSH
5944: LD_INT 31
5946: PPUSH
5947: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5951: LD_EXP 88
5955: PPUSH
5956: LD_INT 95
5958: PUSH
5959: LD_INT 44
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: PPUSH
5969: CALL 53104 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5973: LD_VAR 0 12
5977: PPUSH
5978: LD_EXP 86
5982: PUSH
5983: LD_INT 1
5985: ARRAY
5986: PUSH
5987: LD_EXP 86
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 1
6002: PPUSH
6003: LD_INT 2
6005: PPUSH
6006: CALL_OW 12
6010: ARRAY
6011: PPUSH
6012: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
6016: LD_VAR 0 13
6020: PPUSH
6021: LD_EXP 79
6025: PPUSH
6026: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
6030: LD_VAR 0 14
6034: PPUSH
6035: LD_EXP 87
6039: PPUSH
6040: CALL_OW 180
// AddComEnterUnit ( scis , amLabs [ 1 ] ) ;
6044: LD_VAR 0 15
6048: PPUSH
6049: LD_EXP 85
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: CALL_OW 180
// amConvoyTroops :=  ;
6062: LD_ADDR_EXP 89
6066: PUSH
6067: LD_STRING 
6069: ST_TO_ADDR
// sols :=  ;
6070: LD_ADDR_VAR 0 12
6074: PUSH
6075: LD_STRING 
6077: ST_TO_ADDR
// engs :=  ;
6078: LD_ADDR_VAR 0 13
6082: PUSH
6083: LD_STRING 
6085: ST_TO_ADDR
// mechs :=  ;
6086: LD_ADDR_VAR 0 14
6090: PUSH
6091: LD_STRING 
6093: ST_TO_ADDR
// scis :=  ;
6094: LD_ADDR_VAR 0 15
6098: PUSH
6099: LD_STRING 
6101: ST_TO_ADDR
// end ;
6102: LD_VAR 0 7
6106: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
6107: LD_INT 0
6109: PPUSH
6110: PPUSH
// for i := 1 to amVehs do
6111: LD_ADDR_VAR 0 2
6115: PUSH
6116: DOUBLE
6117: LD_INT 1
6119: DEC
6120: ST_TO_ADDR
6121: LD_EXP 88
6125: PUSH
6126: FOR_TO
6127: IFFALSE 6170
// begin if GetType ( i ) = unit_vehicle then
6129: LD_VAR 0 2
6133: PPUSH
6134: CALL_OW 247
6138: PUSH
6139: LD_INT 2
6141: EQUAL
6142: IFFALSE 6156
// SetFuel ( i , 100 ) ;
6144: LD_VAR 0 2
6148: PPUSH
6149: LD_INT 100
6151: PPUSH
6152: CALL_OW 240
// SetLives ( i , 1000 ) ;
6156: LD_VAR 0 2
6160: PPUSH
6161: LD_INT 1000
6163: PPUSH
6164: CALL_OW 234
// end ;
6168: GO 6126
6170: POP
6171: POP
// for i := 1 to amIntroUnits do
6172: LD_ADDR_VAR 0 2
6176: PUSH
6177: DOUBLE
6178: LD_INT 1
6180: DEC
6181: ST_TO_ADDR
6182: LD_EXP 80
6186: PUSH
6187: FOR_TO
6188: IFFALSE 6231
// begin if GetType ( i ) = unit_vehicle then
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL_OW 247
6199: PUSH
6200: LD_INT 2
6202: EQUAL
6203: IFFALSE 6217
// SetFuel ( i , 100 ) ;
6205: LD_VAR 0 2
6209: PPUSH
6210: LD_INT 100
6212: PPUSH
6213: CALL_OW 240
// SetLives ( i , 1000 ) ;
6217: LD_VAR 0 2
6221: PPUSH
6222: LD_INT 1000
6224: PPUSH
6225: CALL_OW 234
// end ;
6229: GO 6187
6231: POP
6232: POP
// for i := 1 to amFreeSols do
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_EXP 84
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6265
// begin SetLives ( i , 1000 ) ;
6251: LD_VAR 0 2
6255: PPUSH
6256: LD_INT 1000
6258: PPUSH
6259: CALL_OW 234
// end ;
6263: GO 6248
6265: POP
6266: POP
// AgressiveMove ( amFreeSols , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
6267: LD_EXP 84
6271: PPUSH
6272: LD_INT 65
6274: PUSH
6275: LD_INT 91
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 116
6284: PUSH
6285: LD_INT 97
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL 53104 0 2
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
6300: LD_EXP 80
6304: PPUSH
6305: LD_INT 65
6307: PUSH
6308: LD_INT 91
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 116
6317: PUSH
6318: LD_INT 97
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL 53104 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
6333: LD_EXP 88
6337: PPUSH
6338: LD_INT 65
6340: PUSH
6341: LD_INT 91
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 109
6350: PUSH
6351: LD_INT 97
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL 53104 0 2
// end ; end_of_file end_of_file
6366: LD_VAR 0 1
6370: RET
// export labT1 ; on ResearchComplete ( lab , res ) do begin if res = 85 then
6371: LD_VAR 0 2
6375: PUSH
6376: LD_INT 85
6378: EQUAL
6379: IFFALSE 6396
// SetSpecResearch ( kirovLab , 100 , false ) ;
6381: LD_EXP 64
6385: PPUSH
6386: LD_INT 100
6388: PPUSH
6389: LD_INT 0
6391: PPUSH
6392: CALL_OW 486
// end ;
6396: PPOPN 2
6398: END
// on UpgradeStarted ( un , from , toB , from1 , to1 , from2 , to2 ) do begin if GetSide ( un ) = 6 then
6399: LD_VAR 0 1
6403: PPUSH
6404: CALL_OW 255
6408: PUSH
6409: LD_INT 6
6411: EQUAL
6412: IFFALSE 6428
// AddComRepairBuilding ( kirovEngs , un ) ;
6414: LD_EXP 74
6418: PPUSH
6419: LD_VAR 0 1
6423: PPUSH
6424: CALL_OW 190
// end ;
6428: PPOPN 7
6430: END
// on EnterBuilding ( building , un ) do var i ;
6431: LD_INT 0
6433: PPUSH
// begin if GetSide ( un ) = 1 and building = amBarracks [ 1 ] or building = amBarracks [ 2 ] then
6434: LD_VAR 0 2
6438: PPUSH
6439: CALL_OW 255
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: PUSH
6448: LD_VAR 0 1
6452: PUSH
6453: LD_EXP 86
6457: PUSH
6458: LD_INT 1
6460: ARRAY
6461: EQUAL
6462: AND
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: LD_EXP 86
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: EQUAL
6478: OR
6479: IFFALSE 6485
// begin UpgradeOmicron ;
6481: CALL 4692 0 0
// end ; if building = kirovLab and labT1 then
6485: LD_VAR 0 1
6489: PUSH
6490: LD_EXP 64
6494: EQUAL
6495: PUSH
6496: LD_EXP 90
6500: AND
6501: IFFALSE 6534
// begin for i in techList do
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_EXP 44
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6532
// AddComResearch ( kirovLab , i ) ;
6516: LD_EXP 64
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: CALL_OW 184
6530: GO 6513
6532: POP
6533: POP
// end ; end ;
6534: PPOPN 3
6536: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
6537: LD_VAR 0 2
6541: PPUSH
6542: CALL_OW 255
6546: PUSH
6547: LD_INT 3
6549: EQUAL
6550: IFFALSE 6560
// counterEnable := true ;
6552: LD_ADDR_EXP 94
6556: PUSH
6557: LD_INT 1
6559: ST_TO_ADDR
// end ;
6560: PPOPN 2
6562: END
// on BuildingComplete ( building ) do var un , i , bunkers , kaganReady ;
6563: LD_INT 0
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
6569: LD_VAR 0 1
6573: PPUSH
6574: CALL_OW 255
6578: PUSH
6579: LD_INT 6
6581: EQUAL
6582: PUSH
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 266
6592: PUSH
6593: LD_INT 32
6595: EQUAL
6596: PUSH
6597: LD_VAR 0 1
6601: PPUSH
6602: CALL_OW 266
6606: PUSH
6607: LD_INT 4
6609: EQUAL
6610: OR
6611: AND
6612: IFFALSE 6708
// begin for un in solsKirov do
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_EXP 76
6623: PUSH
6624: FOR_IN
6625: IFFALSE 6676
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
6627: LD_VAR 0 2
6631: PPUSH
6632: CALL_OW 310
6636: PPUSH
6637: CALL_OW 266
6641: PUSH
6642: LD_INT 32
6644: EQUAL
6645: IFFALSE 6649
// continue ;
6647: GO 6624
// ComExit ( un ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: CALL 50896 0 1
// AddComEnterUnit ( un , building ) ;
6658: LD_VAR 0 2
6662: PPUSH
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 180
// break ;
6672: GO 6676
// end ;
6674: GO 6624
6676: POP
6677: POP
// if labT1 = false then
6678: LD_EXP 90
6682: PUSH
6683: LD_INT 0
6685: EQUAL
6686: IFFALSE 6708
// begin labT1 = true ;
6688: LD_ADDR_EXP 90
6692: PUSH
6693: LD_INT 1
6695: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
6696: LD_EXP 64
6700: PPUSH
6701: LD_INT 10
6703: PPUSH
6704: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and kaganReady = false then
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 255
6717: PUSH
6718: LD_INT 3
6720: EQUAL
6721: PUSH
6722: LD_VAR 0 1
6726: PPUSH
6727: CALL_OW 266
6731: PUSH
6732: LD_INT 0
6734: EQUAL
6735: AND
6736: PUSH
6737: LD_VAR 0 5
6741: PUSH
6742: LD_INT 0
6744: EQUAL
6745: AND
6746: IFFALSE 6768
// begin SetBName ( building , kagan ) ;
6748: LD_VAR 0 1
6752: PPUSH
6753: LD_STRING kagan
6755: PPUSH
6756: CALL_OW 500
// kaganReady = true ;
6760: LD_ADDR_VAR 0 5
6764: PUSH
6765: LD_INT 1
6767: ST_TO_ADDR
// end ; end ;
6768: PPOPN 5
6770: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
6771: LD_VAR 0 1
6775: PUSH
6776: LD_EXP 46
6780: EQUAL
6781: IFFALSE 6790
// YouLost ( Burlak ) ;
6783: LD_STRING Burlak
6785: PPUSH
6786: CALL_OW 104
// if un = beriaDepot then
6790: LD_VAR 0 1
6794: PUSH
6795: LD_EXP 56
6799: EQUAL
6800: IFFALSE 6809
// YouLost ( Omicron ) ;
6802: LD_STRING Omicron
6804: PPUSH
6805: CALL_OW 104
// end ;
6809: PPOPN 1
6811: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers , extraBunkers ;
6812: LD_INT 0
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
// begin if GetSide ( building ) = 3 and dialog_workshop = false then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 255
6829: PUSH
6830: LD_INT 3
6832: EQUAL
6833: PUSH
6834: LD_EXP 16
6838: PUSH
6839: LD_INT 0
6841: EQUAL
6842: AND
6843: IFFALSE 7280
// begin dialog_workshop = true ;
6845: LD_ADDR_EXP 16
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
6853: LD_INT 22
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 30
6865: PUSH
6866: LD_INT 26
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 69
6881: NOT
6882: IFFALSE 7271
// begin CenterNowOnUnits ( building ) ;
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 87
// DialogueOn ;
6893: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
6897: LD_EXP 46
6901: PPUSH
6902: LD_STRING D3aa-Bur-1
6904: PPUSH
6905: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
6909: LD_EXP 71
6913: PPUSH
6914: CALL_OW 302
6918: PUSH
6919: LD_EXP 71
6923: PPUSH
6924: CALL_OW 255
6928: PUSH
6929: LD_INT 3
6931: EQUAL
6932: AND
6933: IFFALSE 6949
// Say ( Scholtze , D3aa-Sch-1 ) else
6935: LD_EXP 71
6939: PPUSH
6940: LD_STRING D3aa-Sch-1
6942: PPUSH
6943: CALL_OW 88
6947: GO 7255
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6949: LD_ADDR_VAR 0 5
6953: PUSH
6954: LD_INT 22
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 21
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 26
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 50
6996: PUSH
6997: EMPTY
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: PUSH
7012: LD_EXP 46
7016: PUSH
7017: LD_EXP 47
7021: PUSH
7022: LD_EXP 49
7026: PUSH
7027: LD_EXP 50
7031: PUSH
7032: LD_EXP 51
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: DIFF
7044: ST_TO_ADDR
// if maleSci then
7045: LD_VAR 0 5
7049: IFFALSE 7069
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
7051: LD_VAR 0 5
7055: PUSH
7056: LD_INT 1
7058: ARRAY
7059: PPUSH
7060: LD_STRING D3aa-Sci1-1
7062: PPUSH
7063: CALL_OW 88
7067: GO 7255
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
7069: LD_ADDR_VAR 0 6
7073: PUSH
7074: LD_INT 22
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 26
7096: PUSH
7097: LD_INT 1
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 50
7106: PUSH
7107: EMPTY
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PPUSH
7116: CALL_OW 69
7120: PUSH
7121: LD_EXP 46
7125: PUSH
7126: LD_EXP 47
7130: PUSH
7131: LD_EXP 49
7135: PUSH
7136: LD_EXP 50
7140: PUSH
7141: LD_EXP 51
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: DIFF
7153: ST_TO_ADDR
// if maleOthers then
7154: LD_VAR 0 6
7158: IFFALSE 7178
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
7160: LD_VAR 0 6
7164: PUSH
7165: LD_INT 1
7167: ARRAY
7168: PPUSH
7169: LD_STRING D3aa-Sci1-1
7171: PPUSH
7172: CALL_OW 88
7176: GO 7255
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
7178: LD_ADDR_VAR 0 6
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_INT 3
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 1
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 26
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 50
7215: PUSH
7216: EMPTY
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 69
7229: PUSH
7230: LD_EXP 46
7234: PUSH
7235: EMPTY
7236: LIST
7237: DIFF
7238: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
7239: LD_VAR 0 6
7243: PUSH
7244: LD_INT 1
7246: ARRAY
7247: PPUSH
7248: LD_STRING D3aa-Sci1-1
7250: PPUSH
7251: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
7255: LD_EXP 46
7259: PPUSH
7260: LD_STRING D3aa-Bur-2
7262: PPUSH
7263: CALL_OW 88
// DialogueOff ;
7267: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
7271: LD_STRING M3
7273: PPUSH
7274: CALL_OW 337
// exit ;
7278: GO 7536
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 255
7289: PUSH
7290: LD_INT 6
7292: EQUAL
7293: PUSH
7294: LD_EXP 2
7298: PPUSH
7299: CALL 54225 0 1
7303: PUSH
7304: LD_INT 0
7306: GREATER
7307: AND
7308: IFFALSE 7398
// begin if comArray [ 1 ] = kirovLab then
7310: LD_EXP 2
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PUSH
7319: LD_EXP 64
7323: EQUAL
7324: IFFALSE 7344
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
7326: LD_EXP 2
7330: PUSH
7331: LD_INT 1
7333: ARRAY
7334: PPUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 207
7342: GO 7357
// AddComUpgrade ( comArray [ 1 ] ) ;
7344: LD_EXP 2
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
7357: LD_ADDR_EXP 2
7361: PUSH
7362: LD_EXP 2
7366: PUSH
7367: LD_EXP 2
7371: PUSH
7372: LD_INT 1
7374: ARRAY
7375: DIFF
7376: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7377: LD_INT 35
7379: PPUSH
7380: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
7384: LD_EXP 74
7388: PPUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL 21676 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
7398: LD_VAR 0 1
7402: PPUSH
7403: CALL_OW 255
7407: PUSH
7408: LD_INT 6
7410: EQUAL
7411: PUSH
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 266
7421: PUSH
7422: LD_INT 3
7424: EQUAL
7425: AND
7426: PUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 266
7436: PUSH
7437: LD_INT 2
7439: EQUAL
7440: OR
7441: IFFALSE 7536
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 22
7450: PUSH
7451: LD_INT 6
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 32
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: ST_TO_ADDR
// for i in un do
7488: LD_ADDR_VAR 0 2
7492: PUSH
7493: LD_VAR 0 3
7497: PUSH
7498: FOR_IN
7499: IFFALSE 7534
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
7501: LD_VAR 0 2
7505: PPUSH
7506: LD_INT 42
7508: PUSH
7509: LD_INT 43
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 1
7518: PPUSH
7519: LD_INT 2
7521: PPUSH
7522: CALL_OW 12
7526: ARRAY
7527: PPUSH
7528: CALL_OW 208
7532: GO 7498
7534: POP
7535: POP
// end ; end ;
7536: PPOPN 7
7538: END
// on BuildingStarted ( building , hum ) do var un , i ;
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
// begin if GetSide ( building ) = 6 then
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 255
7552: PUSH
7553: LD_INT 6
7555: EQUAL
7556: IFFALSE 7586
// begin AddComComplete ( kirovEngs , building ) ;
7558: LD_EXP 74
7562: PPUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL 21676 0 2
// AddComRepairBuilding ( kirovEngs , un ) ;
7572: LD_EXP 74
7576: PPUSH
7577: LD_VAR 0 3
7581: PPUSH
7582: CALL_OW 190
// end ; end ; end_of_file
7586: PPOPN 4
7588: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople , minmax , tmp ; begin
7589: LD_INT 0
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
// if not debug then
7597: LD_EXP 3
7601: NOT
7602: IFFALSE 7608
// InGameOn ;
7604: CALL_OW 8
// RevealFogArea ( 3 , RevealMapPartArea ) ;
7608: LD_INT 3
7610: PPUSH
7611: LD_INT 5
7613: PPUSH
7614: CALL_OW 332
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7618: LD_EXP 46
7622: PUSH
7623: LD_EXP 58
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 87
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
7636: LD_ADDR_EXP 93
7640: PUSH
7641: LD_STRING D3a-RSol1-1
7643: PUSH
7644: LD_STRING D3b-RSol1-1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: ST_TO_ADDR
// if not Belkov then
7651: LD_EXP 50
7655: NOT
7656: IFFALSE 7732
// begin Say ( Kurin , D1a-Kur-1 ) ;
7658: LD_EXP 58
7662: PPUSH
7663: LD_STRING D1a-Kur-1
7665: PPUSH
7666: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
7670: LD_EXP 46
7674: PPUSH
7675: LD_STRING D1a-Bur-1
7677: PPUSH
7678: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
7682: LD_EXP 58
7686: PPUSH
7687: LD_STRING D1a-Kur-2
7689: PPUSH
7690: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
7694: LD_EXP 58
7698: PPUSH
7699: LD_STRING D1a-Kur-2a
7701: PPUSH
7702: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
7706: LD_EXP 58
7710: PPUSH
7711: LD_STRING D1a-Kur-2b
7713: PPUSH
7714: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
7718: LD_EXP 46
7722: PPUSH
7723: LD_STRING D1a-Bur-2
7725: PPUSH
7726: CALL_OW 88
// end else
7730: GO 7768
// begin Say ( Kurin , D1b-Kur-1 ) ;
7732: LD_EXP 58
7736: PPUSH
7737: LD_STRING D1b-Kur-1
7739: PPUSH
7740: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
7744: LD_EXP 50
7748: PPUSH
7749: LD_STRING D1b-Bel-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
7756: LD_EXP 58
7760: PPUSH
7761: LD_STRING D1b-Kur-2
7763: PPUSH
7764: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
7768: LD_EXP 58
7772: PPUSH
7773: LD_STRING D2-Kur-1
7775: PPUSH
7776: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
7780: LD_EXP 46
7784: PPUSH
7785: LD_STRING D2-Bur-1
7787: PPUSH
7788: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
7792: LD_EXP 58
7796: PPUSH
7797: LD_STRING D2-Kur-2
7799: PPUSH
7800: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
7804: LD_EXP 46
7808: PPUSH
7809: LD_STRING D2-Bur-2
7811: PPUSH
7812: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
7816: LD_EXP 58
7820: PPUSH
7821: LD_STRING D2-Kur-3
7823: PPUSH
7824: CALL_OW 88
// PrepareAmericansMissionIntro ;
7828: CALL 3102 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 6
7837: PPUSH
7838: LD_INT 1
7840: PPUSH
7841: LD_INT 1
7843: PPUSH
7844: CALL_OW 80
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
7848: LD_EXP 59
7852: PUSH
7853: LD_EXP 69
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 87
// wait ( 0 0$3 ) ;
7866: LD_INT 105
7868: PPUSH
7869: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
7873: LD_EXP 59
7877: PPUSH
7878: LD_STRING D2-Pop-3
7880: PPUSH
7881: CALL_OW 94
// wait ( 0 0$0.3 ) ;
7885: LD_INT 10
7887: PPUSH
7888: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7892: LD_EXP 46
7896: PUSH
7897: LD_EXP 58
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
7910: LD_EXP 58
7914: PPUSH
7915: LD_STRING D2-Kur-4
7917: PPUSH
7918: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7922: LD_EXP 46
7926: PPUSH
7927: LD_STRING D2-Bur-4
7929: PPUSH
7930: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
7934: LD_EXP 58
7938: PPUSH
7939: LD_STRING D2-Kur-5
7941: PPUSH
7942: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
7946: LD_EXP 46
7950: PPUSH
7951: LD_STRING D2-Bur-5
7953: PPUSH
7954: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
7958: LD_EXP 58
7962: PPUSH
7963: LD_STRING D2-Kur-6
7965: PPUSH
7966: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7970: LD_EXP 46
7974: PPUSH
7975: LD_STRING D2-Bur-4
7977: PPUSH
7978: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
7982: LD_ADDR_EXP 92
7986: PUSH
7987: LD_EXP 60
7991: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
7992: LD_ADDR_EXP 92
7996: PUSH
7997: LD_EXP 92
8001: PUSH
8002: LD_EXP 54
8006: ADD
8007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
8008: LD_ADDR_VAR 0 6
8012: PUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 1
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: ST_TO_ADDR
// minmax := 8 - Length ( tmp ) ;
8042: LD_ADDR_VAR 0 5
8046: PUSH
8047: LD_INT 8
8049: PUSH
8050: LD_VAR 0 6
8054: PPUSH
8055: CALL 54225 0 1
8059: MINUS
8060: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , minmax , minmax , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_STRING text
8068: PPUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 5
8078: PPUSH
8079: LD_INT -5
8081: PUSH
8082: LD_EXP 46
8086: PUSH
8087: LD_EXP 47
8091: PUSH
8092: LD_EXP 49
8096: PUSH
8097: LD_EXP 48
8101: PUSH
8102: LD_EXP 50
8106: PUSH
8107: LD_INT -6
8109: PUSH
8110: LD_INT -2
8112: PUSH
8113: LD_INT -3
8115: PUSH
8116: LD_INT -5
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 92
8135: ADD
8136: PUSH
8137: LD_INT -6
8139: PUSH
8140: LD_INT -4
8142: PUSH
8143: LD_EXP 58
8147: PUSH
8148: LD_EXP 59
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: ADD
8159: PPUSH
8160: LD_INT 1
8162: PUSH
8163: LD_INT 3
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 42
8196: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
8197: LD_EXP 92
8201: PPUSH
8202: LD_INT 6
8204: PPUSH
8205: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
8209: LD_VAR 0 4
8213: PPUSH
8214: LD_INT 3
8216: PPUSH
8217: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
8221: LD_EXP 59
8225: PPUSH
8226: LD_INT 135
8228: PPUSH
8229: LD_INT 67
8231: PPUSH
8232: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
8236: LD_EXP 69
8240: PPUSH
8241: LD_INT 209
8243: PPUSH
8244: LD_INT 164
8246: PPUSH
8247: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
8251: LD_ADDR_EXP 65
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_INT 6
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 30
8268: PUSH
8269: LD_INT 4
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 69
8284: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
8285: LD_ADDR_EXP 92
8289: PUSH
8290: LD_EXP 92
8294: PUSH
8295: LD_VAR 0 4
8299: DIFF
8300: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
8301: LD_EXP 92
8305: PUSH
8306: LD_INT 1
8308: ARRAY
8309: PPUSH
8310: LD_INT 2
8312: PPUSH
8313: CALL_OW 336
// for i := 2 to 3 do
8317: LD_ADDR_VAR 0 2
8321: PUSH
8322: DOUBLE
8323: LD_INT 2
8325: DEC
8326: ST_TO_ADDR
8327: LD_INT 3
8329: PUSH
8330: FOR_TO
8331: IFFALSE 8353
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
8333: LD_EXP 92
8337: PUSH
8338: LD_VAR 0 2
8342: ARRAY
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: CALL_OW 336
8351: GO 8330
8353: POP
8354: POP
// for un in selectedPeople do
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_VAR 0 4
8364: PUSH
8365: FOR_IN
8366: IFFALSE 8379
// ComExitBuilding ( un ) ;
8368: LD_VAR 0 3
8372: PPUSH
8373: CALL_OW 122
8377: GO 8365
8379: POP
8380: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
8381: LD_ADDR_EXP 91
8385: PUSH
8386: LD_VAR 0 4
8390: PUSH
8391: LD_EXP 46
8395: PUSH
8396: LD_EXP 47
8400: PUSH
8401: LD_EXP 49
8405: PUSH
8406: LD_EXP 50
8410: PUSH
8411: LD_EXP 48
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: UNION
8423: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
8424: LD_EXP 91
8428: PPUSH
8429: LD_INT 113
8431: PPUSH
8432: LD_INT 97
8434: PPUSH
8435: CALL_OW 171
// solsKirov := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
8439: LD_ADDR_EXP 76
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_INT 6
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 1
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 69
8483: ST_TO_ADDR
// solsKirov := solsKirov diff [ Kurin , Bukov , Gaydar , Popov ] ;
8484: LD_ADDR_EXP 76
8488: PUSH
8489: LD_EXP 76
8493: PUSH
8494: LD_EXP 58
8498: PUSH
8499: LD_EXP 70
8503: PUSH
8504: LD_EXP 69
8508: PUSH
8509: LD_EXP 59
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: DIFF
8520: ST_TO_ADDR
// for un in kirovBaseUnits do
8521: LD_ADDR_VAR 0 3
8525: PUSH
8526: LD_EXP 92
8530: PUSH
8531: FOR_IN
8532: IFFALSE 8569
// begin if IsInUnit ( un ) = 0 then
8534: LD_VAR 0 3
8538: PPUSH
8539: CALL_OW 310
8543: PUSH
8544: LD_INT 0
8546: EQUAL
8547: IFFALSE 8567
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
8549: LD_VAR 0 3
8553: PPUSH
8554: LD_EXP 65
8558: PUSH
8559: LD_INT 1
8561: ARRAY
8562: PPUSH
8563: CALL_OW 120
// end ;
8567: GO 8531
8569: POP
8570: POP
// ChangeMissionObjectives ( M1 ) ;
8571: LD_STRING M1
8573: PPUSH
8574: CALL_OW 337
// Query ( QReadyInfo ) ;
8578: LD_STRING QReadyInfo
8580: PPUSH
8581: CALL_OW 97
// SaveForQuickRestart ;
8585: CALL_OW 22
// wait ( 0 0$8 ) ;
8589: LD_INT 280
8591: PPUSH
8592: CALL_OW 67
// InGameOff ;
8596: CALL_OW 9
// spawnCrates := true ;
8600: LD_ADDR_EXP 13
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// for un in kirovBaseUnits do
8608: LD_ADDR_VAR 0 3
8612: PUSH
8613: LD_EXP 92
8617: PUSH
8618: FOR_IN
8619: IFFALSE 8672
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
8621: LD_VAR 0 3
8625: PPUSH
8626: CALL_OW 310
8630: PUSH
8631: LD_INT 0
8633: EQUAL
8634: PUSH
8635: LD_VAR 0 3
8639: PPUSH
8640: CALL_OW 257
8644: PUSH
8645: LD_INT 2
8647: EQUAL
8648: NOT
8649: AND
8650: IFFALSE 8670
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
8652: LD_VAR 0 3
8656: PPUSH
8657: LD_EXP 65
8661: PUSH
8662: LD_INT 2
8664: ARRAY
8665: PPUSH
8666: CALL_OW 120
// end ;
8670: GO 8618
8672: POP
8673: POP
// UpgradeKirovBase ;
8674: CALL 2264 0 0
// end ;
8678: LD_VAR 0 1
8682: RET
// every 0 0$1 do
8683: GO 8685
8685: DISABLE
// begin timeToArabAttack = timeToArabAttack - 0 0$01 ;
8686: LD_ADDR_EXP 99
8690: PUSH
8691: LD_EXP 99
8695: PUSH
8696: LD_INT 35
8698: MINUS
8699: ST_TO_ADDR
// end ;
8700: END
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
8701: LD_EXP 94
8705: IFFALSE 9089
8707: GO 8709
8709: DISABLE
8710: LD_INT 0
8712: PPUSH
8713: PPUSH
8714: PPUSH
// begin enable ;
8715: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 3
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 21
8733: PUSH
8734: LD_INT 2
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 3
8743: PUSH
8744: LD_INT 34
8746: PUSH
8747: LD_INT 51
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: PPUSH
8763: CALL_OW 69
8767: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
8768: LD_ADDR_VAR 0 2
8772: PUSH
8773: LD_INT 22
8775: PUSH
8776: LD_INT 3
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 21
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 69
8801: PUSH
8802: LD_EXP 34
8806: PLUS
8807: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
8808: LD_ADDR_EXP 96
8812: PUSH
8813: LD_EXP 96
8817: PUSH
8818: LD_INT 35
8820: PLUS
8821: ST_TO_ADDR
// VehNeeded = hum - veh ;
8822: LD_ADDR_EXP 39
8826: PUSH
8827: LD_VAR 0 2
8831: PUSH
8832: LD_VAR 0 1
8836: MINUS
8837: ST_TO_ADDR
// if VehNeeded < 0 then
8838: LD_EXP 39
8842: PUSH
8843: LD_INT 0
8845: LESS
8846: IFFALSE 8858
// enoughVehsForKirov = true else
8848: LD_ADDR_EXP 101
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
8856: GO 8866
// enoughVehsForKirov = false ;
8858: LD_ADDR_EXP 101
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// case counterIndex of 1 :
8866: LD_EXP 95
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8962
8879: POP
// begin if VehNeeded <= 0 then
8880: LD_EXP 39
8884: PUSH
8885: LD_INT 0
8887: LESSEQUAL
8888: IFFALSE 8916
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
8890: LD_ADDR_OWVAR 47
8894: PUSH
8895: LD_STRING #Ru03-5a
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: LD_STRING #Ru03-4
8903: PUSH
8904: LD_EXP 98
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: ADD
8913: ST_TO_ADDR
8914: GO 8946
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
8916: LD_ADDR_OWVAR 47
8920: PUSH
8921: LD_STRING #Ru03-5
8923: PUSH
8924: LD_EXP 39
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_STRING #Ru03-4
8935: PUSH
8936: LD_EXP 98
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: ADD
8945: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
8946: LD_ADDR_EXP 98
8950: PUSH
8951: LD_EXP 98
8955: PUSH
8956: LD_INT 35
8958: MINUS
8959: ST_TO_ADDR
// end ; 2 :
8960: GO 9089
8962: LD_INT 2
8964: DOUBLE
8965: EQUAL
8966: IFTRUE 8970
8968: GO 9004
8970: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
8971: LD_ADDR_OWVAR 47
8975: PUSH
8976: LD_STRING #Ru03-1
8978: PUSH
8979: LD_EXP 23
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
8988: LD_ADDR_EXP 23
8992: PUSH
8993: LD_EXP 23
8997: PUSH
8998: LD_INT 35
9000: MINUS
9001: ST_TO_ADDR
// end ; 3 :
9002: GO 9089
9004: LD_INT 3
9006: DOUBLE
9007: EQUAL
9008: IFTRUE 9012
9010: GO 9046
9012: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
9013: LD_ADDR_OWVAR 47
9017: PUSH
9018: LD_STRING #Ru03-2
9020: PUSH
9021: LD_EXP 23
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
9030: LD_ADDR_EXP 23
9034: PUSH
9035: LD_EXP 23
9039: PUSH
9040: LD_INT 35
9042: MINUS
9043: ST_TO_ADDR
// end ; 4 :
9044: GO 9089
9046: LD_INT 4
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9088
9054: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
9055: LD_ADDR_OWVAR 47
9059: PUSH
9060: LD_STRING #Ru03-3
9062: PUSH
9063: LD_EXP 22
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
9072: LD_ADDR_EXP 22
9076: PUSH
9077: LD_EXP 22
9081: PUSH
9082: LD_INT 35
9084: MINUS
9085: ST_TO_ADDR
// end ; end ;
9086: GO 9089
9088: POP
// end ;
9089: PPOPN 3
9091: END
// every 0 0$1 do
9092: GO 9094
9094: DISABLE
// begin enable ;
9095: ENABLE
// if tick = convoyTime [ 1 ] then
9096: LD_OWVAR 1
9100: PUSH
9101: LD_EXP 97
9105: PUSH
9106: LD_INT 1
9108: ARRAY
9109: EQUAL
9110: IFFALSE 9369
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
9112: LD_EXP 70
9116: PPUSH
9117: LD_EXP 93
9121: PUSH
9122: LD_INT 1
9124: ARRAY
9125: PPUSH
9126: CALL_OW 94
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
9130: LD_EXP 83
9134: PUSH
9135: LD_INT 1
9137: ARRAY
9138: PUSH
9139: LD_INT 1
9141: ARRAY
9142: PPUSH
9143: LD_EXP 83
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PUSH
9152: LD_INT 2
9154: ARRAY
9155: PPUSH
9156: LD_EXP 83
9160: PUSH
9161: LD_INT 1
9163: ARRAY
9164: PUSH
9165: LD_INT 3
9167: ARRAY
9168: PPUSH
9169: LD_EXP 83
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PUSH
9178: LD_INT 4
9180: ARRAY
9181: PPUSH
9182: LD_EXP 83
9186: PUSH
9187: LD_INT 1
9189: ARRAY
9190: PUSH
9191: LD_INT 5
9193: ARRAY
9194: PPUSH
9195: LD_INT 6
9197: PPUSH
9198: CALL 5268 0 6
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
9202: LD_EXP 93
9206: PUSH
9207: LD_INT 1
9209: ARRAY
9210: PUSH
9211: LD_STRING D3a-RSol1-1
9213: EQUAL
9214: IFFALSE 9318
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
9216: LD_EXP 46
9220: PPUSH
9221: LD_STRING D3a-Bur-1
9223: PPUSH
9224: CALL_OW 94
// if IsOk ( Gnyevko ) then
9228: LD_EXP 47
9232: PPUSH
9233: CALL_OW 302
9237: IFFALSE 9251
// Say ( Gnyevko , D3b-Gny-1 ) ;
9239: LD_EXP 47
9243: PPUSH
9244: LD_STRING D3b-Gny-1
9246: PPUSH
9247: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
9251: LD_EXP 46
9255: PPUSH
9256: LD_STRING D3b-Bur-1
9258: PPUSH
9259: CALL_OW 88
// if IsOK ( Kovalyuk ) then
9263: LD_EXP 49
9267: PPUSH
9268: CALL_OW 302
9272: IFFALSE 9286
// Say ( Kovalyuk , D3b-Kov-1 ) ;
9274: LD_EXP 49
9278: PPUSH
9279: LD_STRING D3b-Kov-1
9281: PPUSH
9282: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
9286: LD_EXP 70
9290: PPUSH
9291: LD_STRING D3b-Rsol1-2
9293: PPUSH
9294: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
9298: LD_ADDR_EXP 93
9302: PUSH
9303: LD_EXP 93
9307: PUSH
9308: LD_EXP 93
9312: PUSH
9313: LD_INT 1
9315: ARRAY
9316: DIFF
9317: ST_TO_ADDR
// end ; PrepareAttackOnRus ( ) ;
9318: CALL 6107 0 0
// wait ( 0 0$1 ) ;
9322: LD_INT 35
9324: PPUSH
9325: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
9329: LD_ADDR_EXP 83
9333: PUSH
9334: LD_EXP 83
9338: PUSH
9339: LD_EXP 83
9343: PUSH
9344: LD_INT 1
9346: ARRAY
9347: DIFF
9348: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
9349: LD_ADDR_EXP 97
9353: PUSH
9354: LD_EXP 97
9358: PUSH
9359: LD_EXP 97
9363: PUSH
9364: LD_INT 1
9366: ARRAY
9367: DIFF
9368: ST_TO_ADDR
// end ; end ;
9369: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
9370: LD_INT 78
9372: PPUSH
9373: LD_INT 112
9375: PPUSH
9376: LD_INT 3
9378: PPUSH
9379: CALL_OW 440
9383: IFFALSE 9437
9385: GO 9387
9387: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
9388: LD_INT 78
9390: PPUSH
9391: LD_INT 112
9393: PPUSH
9394: CALL_OW 84
// DialogueOn ;
9398: CALL_OW 6
// SayRadio ( Burlak , D2a-Bur-1 ) ;
9402: LD_EXP 46
9406: PPUSH
9407: LD_STRING D2a-Bur-1
9409: PPUSH
9410: CALL_OW 94
// SayRadio ( Kurin , D2a-Kur-1 ) ;
9414: LD_EXP 58
9418: PPUSH
9419: LD_STRING D2a-Kur-1
9421: PPUSH
9422: CALL_OW 94
// DialogueOff ;
9426: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9430: LD_STRING M2
9432: PPUSH
9433: CALL_OW 337
// end ;
9437: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
9438: LD_EXP 88
9442: PPUSH
9443: LD_INT 3
9445: PUSH
9446: LD_INT 24
9448: PUSH
9449: LD_INT 700
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 72
9464: PUSH
9465: LD_EXP 80
9469: PPUSH
9470: LD_INT 3
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 700
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: OR
9492: IFFALSE 9739
9494: GO 9496
9496: DISABLE
9497: LD_INT 0
9499: PPUSH
// begin enable ;
9500: ENABLE
// for i := 1 to amVehs do
9501: LD_ADDR_VAR 0 1
9505: PUSH
9506: DOUBLE
9507: LD_INT 1
9509: DEC
9510: ST_TO_ADDR
9511: LD_EXP 88
9515: PUSH
9516: FOR_TO
9517: IFFALSE 9560
// begin if GetLives ( amVehs [ i ] ) <= 700 then
9519: LD_EXP 88
9523: PUSH
9524: LD_VAR 0 1
9528: ARRAY
9529: PPUSH
9530: CALL_OW 256
9534: PUSH
9535: LD_INT 700
9537: LESSEQUAL
9538: IFFALSE 9558
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
9540: LD_EXP 88
9544: PUSH
9545: LD_VAR 0 1
9549: ARRAY
9550: PPUSH
9551: LD_INT 10
9553: PPUSH
9554: CALL_OW 113
// end ;
9558: GO 9516
9560: POP
9561: POP
// for i := 1 to amIntroUnits and GetLives ( i ) <= 700 do
9562: LD_ADDR_VAR 0 1
9566: PUSH
9567: DOUBLE
9568: LD_INT 1
9570: DEC
9571: ST_TO_ADDR
9572: LD_EXP 80
9576: PUSH
9577: LD_VAR 0 1
9581: PPUSH
9582: CALL_OW 256
9586: PUSH
9587: LD_INT 700
9589: LESSEQUAL
9590: AND
9591: PUSH
9592: FOR_TO
9593: IFFALSE 9636
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
9595: LD_EXP 80
9599: PUSH
9600: LD_VAR 0 1
9604: ARRAY
9605: PPUSH
9606: CALL_OW 256
9610: PUSH
9611: LD_INT 700
9613: LESSEQUAL
9614: IFFALSE 9634
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
9616: LD_EXP 80
9620: PUSH
9621: LD_VAR 0 1
9625: ARRAY
9626: PPUSH
9627: LD_INT 10
9629: PPUSH
9630: CALL_OW 113
// end ;
9634: GO 9592
9636: POP
9637: POP
// for i in amIntroUnits do
9638: LD_ADDR_VAR 0 1
9642: PUSH
9643: LD_EXP 80
9647: PUSH
9648: FOR_IN
9649: IFFALSE 9694
// begin if IsInArea ( i , amRetreatArea ) and GetLives ( i ) <= 700 then
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 10
9658: PPUSH
9659: CALL_OW 308
9663: PUSH
9664: LD_VAR 0 1
9668: PPUSH
9669: CALL_OW 256
9673: PUSH
9674: LD_INT 700
9676: LESSEQUAL
9677: AND
9678: IFFALSE 9692
// SetLives ( i , 1000 ) ;
9680: LD_VAR 0 1
9684: PPUSH
9685: LD_INT 1000
9687: PPUSH
9688: CALL_OW 234
// end ;
9692: GO 9648
9694: POP
9695: POP
// for i in amVehs do
9696: LD_ADDR_VAR 0 1
9700: PUSH
9701: LD_EXP 88
9705: PUSH
9706: FOR_IN
9707: IFFALSE 9737
// begin if IsInArea ( i , amRetreatArea ) then
9709: LD_VAR 0 1
9713: PPUSH
9714: LD_INT 10
9716: PPUSH
9717: CALL_OW 308
9721: IFFALSE 9735
// SetLives ( i , 1000 ) ;
9723: LD_VAR 0 1
9727: PPUSH
9728: LD_INT 1000
9730: PPUSH
9731: CALL_OW 234
// end ;
9735: GO 9706
9737: POP
9738: POP
// end ;
9739: PPOPN 1
9741: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
9742: LD_EXP 18
9746: NOT
9747: IFFALSE 9955
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
// begin enable ;
9755: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
9756: LD_ADDR_VAR 0 1
9760: PUSH
9761: LD_INT 22
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 21
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 23
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 2
9793: PUSH
9794: LD_INT 31
9796: PUSH
9797: LD_INT 21
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 31
9806: PUSH
9807: LD_INT 23
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 69
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9953
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 48
9840: PPUSH
9841: LD_INT 81
9843: PPUSH
9844: CALL_OW 297
9848: PUSH
9849: LD_INT 7
9851: LESS
9852: IFFALSE 9951
// begin dialog_track = true ;
9854: LD_ADDR_EXP 18
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
9862: LD_INT 48
9864: PPUSH
9865: LD_INT 81
9867: PPUSH
9868: CALL_OW 86
// DialogueOn ;
9872: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9876: LD_EXP 46
9880: PPUSH
9881: LD_STRING D5a-Bur-1
9883: PPUSH
9884: CALL_OW 88
// DialogueOff ;
9888: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
9892: LD_INT 82
9894: PPUSH
9895: LD_INT 3
9897: PPUSH
9898: CALL_OW 321
9902: PUSH
9903: LD_INT 0
9905: EQUAL
9906: IFFALSE 9921
// SetTech ( 82 , 3 , state_enabled ) ;
9908: LD_INT 82
9910: PPUSH
9911: LD_INT 3
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
9921: LD_INT 84
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
9934: LD_INT 16
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 324
// exit ;
9947: POP
9948: POP
9949: GO 9955
// end ;
9951: GO 9830
9953: POP
9954: POP
// end ;
9955: PPOPN 1
9957: END
// every 5 5$30 do
9958: GO 9960
9960: DISABLE
// begin PrepareScholtze ;
9961: CALL 2984 0 0
// wait ( 0 0$2 ) ;
9965: LD_INT 70
9967: PPUSH
9968: CALL_OW 67
// DialogueOn ;
9972: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
9976: LD_EXP 72
9980: PPUSH
9981: LD_STRING D4-Sch-1
9983: PPUSH
9984: CALL 54353 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
9988: LD_EXP 46
9992: PPUSH
9993: LD_STRING D4-Bur-1
9995: PPUSH
9996: CALL_OW 94
// DialogueOff ;
10000: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
10004: LD_STRING M4
10006: PPUSH
10007: CALL_OW 337
// ComHold ( Scholtze ) ;
10011: LD_EXP 71
10015: PPUSH
10016: CALL_OW 140
// scholtzeSpawned = true ;
10020: LD_ADDR_EXP 14
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// end ;
10028: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
10029: LD_INT 3
10031: PPUSH
10032: LD_EXP 71
10036: PPUSH
10037: CALL_OW 292
10041: PUSH
10042: LD_EXP 14
10046: AND
10047: PUSH
10048: LD_EXP 15
10052: NOT
10053: AND
10054: IFFALSE 10220
10056: GO 10058
10058: DISABLE
// begin scholtzeSaved = true ;
10059: LD_ADDR_EXP 15
10063: PUSH
10064: LD_INT 1
10066: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
10067: LD_EXP 71
10071: PPUSH
10072: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
10076: LD_EXP 71
10080: PPUSH
10081: LD_INT 3
10083: PPUSH
10084: CALL_OW 235
// DialogueOn ;
10088: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
10092: LD_EXP 71
10096: PPUSH
10097: LD_STRING D4a-Sch-1
10099: PPUSH
10100: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
10104: LD_EXP 46
10108: PPUSH
10109: LD_STRING D4a-Bur-1
10111: PPUSH
10112: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
10116: LD_EXP 71
10120: PPUSH
10121: LD_STRING D4a-Sch-2
10123: PPUSH
10124: CALL_OW 88
// DialogueOff ;
10128: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
10132: LD_STRING MScholtzeOut
10134: PPUSH
10135: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
10139: LD_INT 49
10141: PPUSH
10142: LD_INT 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
10152: LD_INT 51
10154: PPUSH
10155: LD_INT 3
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
10165: LD_INT 82
10167: PPUSH
10168: LD_INT 3
10170: PPUSH
10171: CALL_OW 321
10175: PUSH
10176: LD_INT 0
10178: EQUAL
10179: IFFALSE 10194
// SetTech ( 82 , 3 , state_enabled ) ;
10181: LD_INT 82
10183: PPUSH
10184: LD_INT 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
10194: LD_INT 83
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
10207: LD_INT 19
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 324
// end ;
10220: END
// every 5 5$0 trigger scholtzeSpawned and not scholtzeSaved do
10221: LD_EXP 14
10225: PUSH
10226: LD_EXP 15
10230: NOT
10231: AND
10232: IFFALSE 10317
10234: GO 10236
10236: DISABLE
// begin DialogueOn ;
10237: CALL_OW 6
// SayNoFaceRadio ( Scholtze , D4b-Sch-1 ) ;
10241: LD_EXP 71
10245: PPUSH
10246: LD_STRING D4b-Sch-1
10248: PPUSH
10249: CALL 54353 0 2
// SayRadioNoFace ( Scholtze2 , D4b-Sol1-1 ) ;
10253: LD_EXP 72
10257: PPUSH
10258: LD_STRING D4b-Sol1-1
10260: PPUSH
10261: CALL_OW 586
// SayRadioNoFace ( Scholtze2 , D4b-Sol2-1 ) ;
10265: LD_EXP 72
10269: PPUSH
10270: LD_STRING D4b-Sol2-1
10272: PPUSH
10273: CALL_OW 586
// SayNoFaceRadio ( Scholtze , D4b-Sch-2 ) ;
10277: LD_EXP 71
10281: PPUSH
10282: LD_STRING D4b-Sch-2
10284: PPUSH
10285: CALL 54353 0 2
// Say ( Burlak , D4b-Bur-2 ) ;
10289: LD_EXP 46
10293: PPUSH
10294: LD_STRING D4b-Bur-2
10296: PPUSH
10297: CALL_OW 88
// DialogueOff ;
10301: CALL_OW 7
// SetLives ( Scholtze , 0 ) ;
10305: LD_EXP 71
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 234
// end ;
10317: END
// every 0 0$30 trigger spawnCrates do
10318: LD_EXP 13
10322: IFFALSE 10349
10324: GO 10326
10326: DISABLE
// begin enable ;
10327: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesSpawn , true ) ;
10328: LD_INT 3
10330: PPUSH
10331: LD_INT 5
10333: PPUSH
10334: CALL_OW 12
10338: PPUSH
10339: LD_INT 15
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 55
// end ;
10349: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
10350: LD_EXP 27
10354: NOT
10355: IFFALSE 10650
10357: GO 10359
10359: DISABLE
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
// begin enable ;
10369: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
10370: LD_ADDR_VAR 0 2
10374: PUSH
10375: LD_INT 8
10377: PPUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 2
10390: PUSH
10391: LD_INT 21
10393: PUSH
10394: LD_INT 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 21
10403: PUSH
10404: LD_INT 2
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 21
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 70
10435: PUSH
10436: FOR_IN
10437: IFFALSE 10648
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
10439: LD_VAR 0 2
10443: PPUSH
10444: LD_INT 22
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 21
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 2
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 69
10490: PPUSH
10491: LD_VAR 0 2
10495: PPUSH
10496: CALL_OW 74
10500: PPUSH
10501: CALL_OW 296
10505: PUSH
10506: LD_INT 17
10508: LESS
10509: IFFALSE 10646
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
10511: LD_INT 22
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 2
10523: PUSH
10524: LD_INT 21
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 2
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 69
10557: PPUSH
10558: LD_VAR 0 2
10562: PPUSH
10563: CALL_OW 74
10567: PPUSH
10568: LD_INT 114
10570: PPUSH
10571: LD_INT 98
10573: PPUSH
10574: CALL_OW 111
// if not dialog_stop then
10578: LD_EXP 19
10582: NOT
10583: IFFALSE 10646
// begin dialog_stop = true ;
10585: LD_ADDR_EXP 19
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// if not IsOK ( Gnyevko ) then
10593: LD_EXP 47
10597: PPUSH
10598: CALL_OW 302
10602: NOT
10603: IFFALSE 10619
// SayRadio ( Kurin , D11-Kur-1 ) else
10605: LD_EXP 58
10609: PPUSH
10610: LD_STRING D11-Kur-1
10612: PPUSH
10613: CALL_OW 94
10617: GO 10631
// Say ( Gnyevko , D11-Gny-1 ) ;
10619: LD_EXP 47
10623: PPUSH
10624: LD_STRING D11-Gny-1
10626: PPUSH
10627: CALL_OW 88
// wait ( 0 0$5 ) ;
10631: LD_INT 175
10633: PPUSH
10634: CALL_OW 67
// dialog_stop = false ;
10638: LD_ADDR_EXP 19
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// end ; end ;
10646: GO 10436
10648: POP
10649: POP
// end ;
10650: PPOPN 7
10652: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and tick > 0 0$10 do var unit ;
10653: LD_INT 3
10655: PPUSH
10656: LD_INT 13
10658: PPUSH
10659: CALL_OW 294
10663: PUSH
10664: LD_INT 6
10666: GREATEREQUAL
10667: PUSH
10668: LD_OWVAR 1
10672: PUSH
10673: LD_INT 350
10675: GREATER
10676: AND
10677: IFFALSE 10848
10679: GO 10681
10681: DISABLE
10682: LD_INT 0
10684: PPUSH
// begin enable ;
10685: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10686: LD_ADDR_VAR 0 1
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_INT 3
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 2
10703: PUSH
10704: LD_INT 21
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 21
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: PUSH
10738: FOR_IN
10739: IFFALSE 10846
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
10741: LD_VAR 0 1
10745: PPUSH
10746: LD_INT 13
10748: PPUSH
10749: CALL_OW 308
10753: PUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: LD_INT 21
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 72
10773: PUSH
10774: LD_VAR 0 1
10778: PPUSH
10779: CALL_OW 313
10783: OR
10784: AND
10785: IFFALSE 10844
// begin ComMoveXY ( unit , 120 , 98 ) ;
10787: LD_VAR 0 1
10791: PPUSH
10792: LD_INT 120
10794: PPUSH
10795: LD_INT 98
10797: PPUSH
10798: CALL_OW 111
// if not dialog_stop then
10802: LD_EXP 19
10806: NOT
10807: IFFALSE 10844
// begin dialog_stop = true ;
10809: LD_ADDR_EXP 19
10813: PUSH
10814: LD_INT 1
10816: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
10817: LD_EXP 58
10821: PPUSH
10822: LD_STRING D12-Kur-1
10824: PPUSH
10825: CALL_OW 88
// wait ( 0 0$5 ) ;
10829: LD_INT 175
10831: PPUSH
10832: CALL_OW 67
// dialog_stop = false ;
10836: LD_ADDR_EXP 19
10840: PUSH
10841: LD_INT 0
10843: ST_TO_ADDR
// end ; end ;
10844: GO 10738
10846: POP
10847: POP
// end ;
10848: PPOPN 1
10850: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
10851: LD_EXP 58
10855: PPUSH
10856: CALL_OW 306
10860: IFFALSE 11084
10862: GO 10864
10864: DISABLE
// begin if true then
10865: LD_INT 1
10867: IFFALSE 11083
// begin case Query ( QReadyToAttack ) of 1 :
10869: LD_STRING QReadyToAttack
10871: PPUSH
10872: CALL_OW 97
10876: PUSH
10877: LD_INT 1
10879: DOUBLE
10880: EQUAL
10881: IFTRUE 10885
10883: GO 10963
10885: POP
// begin DeselectUnits ( Kurin ) ;
10886: LD_EXP 58
10890: PPUSH
10891: CALL_OW 491
// SelectUnits ( Burlak ) ;
10895: LD_EXP 46
10899: PPUSH
10900: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
10904: LD_EXP 46
10908: PPUSH
10909: LD_STRING D6a-Bur-1
10911: PPUSH
10912: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
10916: LD_EXP 58
10920: PPUSH
10921: LD_STRING D6a-Kur-1
10923: PPUSH
10924: CALL_OW 94
// meetNearOmicronBase = true ;
10928: LD_ADDR_EXP 27
10932: PUSH
10933: LD_INT 1
10935: ST_TO_ADDR
// kurinCheckVehicles = true ;
10936: LD_ADDR_EXP 26
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// counterEnable := true ;
10944: LD_ADDR_EXP 94
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10952: LD_ADDR_EXP 23
10956: PUSH
10957: LD_INT 4200
10959: ST_TO_ADDR
// disable ;
10960: DISABLE
// end ; 2 :
10961: GO 11083
10963: LD_INT 2
10965: DOUBLE
10966: EQUAL
10967: IFTRUE 10971
10969: GO 11053
10971: POP
// begin DeselectUnits ( Kurin ) ;
10972: LD_EXP 58
10976: PPUSH
10977: CALL_OW 491
// SelectUnits ( Burlak ) ;
10981: LD_EXP 46
10985: PPUSH
10986: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
10990: LD_EXP 46
10994: PPUSH
10995: LD_STRING D6b-Bur-1
10997: PPUSH
10998: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
11002: LD_EXP 58
11006: PPUSH
11007: LD_STRING D6b-Kur-1
11009: PPUSH
11010: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
11014: LD_EXP 46
11018: PPUSH
11019: LD_STRING D6b-Bur-2
11021: PPUSH
11022: CALL_OW 88
// counterEnable := true ;
11026: LD_ADDR_EXP 94
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
11034: LD_ADDR_EXP 23
11038: PUSH
11039: LD_INT 4200
11041: ST_TO_ADDR
// meetNearOmicronBase = true ;
11042: LD_ADDR_EXP 27
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// disable ;
11050: DISABLE
// end ; 3 :
11051: GO 11083
11053: LD_INT 3
11055: DOUBLE
11056: EQUAL
11057: IFTRUE 11061
11059: GO 11082
11061: POP
// begin DeselectUnits ( Kurin ) ;
11062: LD_EXP 58
11066: PPUSH
11067: CALL_OW 491
// SelectUnits ( Burlak ) ;
11071: LD_EXP 46
11075: PPUSH
11076: CALL_OW 490
// end ; end ;
11080: GO 11083
11082: POP
// end ; enable ;
11083: ENABLE
// end ;
11084: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
11085: LD_EXP 98
11089: PUSH
11090: LD_INT 35
11092: LESS
11093: IFFALSE 11329
11095: GO 11097
11097: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
11098: LD_EXP 58
11102: PPUSH
11103: CALL_OW 87
// InGameOn ;
11107: CALL_OW 8
// DialogueOn ;
11111: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
11115: LD_EXP 58
11119: PPUSH
11120: LD_STRING D5-Kur-1
11122: PPUSH
11123: CALL_OW 94
// case Query ( QVehicles ) of 1 :
11127: LD_STRING QVehicles
11129: PPUSH
11130: CALL_OW 97
11134: PUSH
11135: LD_INT 1
11137: DOUBLE
11138: EQUAL
11139: IFTRUE 11143
11141: GO 11194
11143: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
11144: LD_EXP 46
11148: PPUSH
11149: LD_STRING D6a-Bur-1
11151: PPUSH
11152: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
11156: LD_EXP 58
11160: PPUSH
11161: LD_STRING D6a-Kur-1
11163: PPUSH
11164: CALL_OW 94
// meetNearOmicronBase = true ;
11168: LD_ADDR_EXP 27
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// kurinCheckVehicles = true ;
11176: LD_ADDR_EXP 26
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
11184: LD_ADDR_EXP 23
11188: PUSH
11189: LD_INT 4200
11191: ST_TO_ADDR
// end ; 2 :
11192: GO 11321
11194: LD_INT 2
11196: DOUBLE
11197: EQUAL
11198: IFTRUE 11202
11200: GO 11249
11202: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
11203: LD_EXP 46
11207: PPUSH
11208: LD_STRING D6b-Bur-1
11210: PPUSH
11211: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
11215: LD_EXP 58
11219: PPUSH
11220: LD_STRING D6b-Kur-1
11222: PPUSH
11223: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
11227: LD_EXP 46
11231: PPUSH
11232: LD_STRING D6b-Bur-2
11234: PPUSH
11235: CALL_OW 94
// meetNearOmicronBase = true ;
11239: LD_ADDR_EXP 27
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// end ; 3 :
11247: GO 11321
11249: LD_INT 3
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11320
11257: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
11258: LD_EXP 46
11262: PPUSH
11263: LD_STRING D6c-Bur-1
11265: PPUSH
11266: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
11270: LD_EXP 58
11274: PPUSH
11275: LD_STRING D6c-Kur-1
11277: PPUSH
11278: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
11282: LD_EXP 46
11286: PPUSH
11287: LD_STRING D6c-Bur-2
11289: PPUSH
11290: CALL_OW 94
// kurinGiveMoreTime = true ;
11294: LD_ADDR_EXP 21
11298: PUSH
11299: LD_INT 1
11301: ST_TO_ADDR
// kurinOpinion = 0 ;
11302: LD_ADDR_EXP 10
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// counterIndex = 4 ;
11310: LD_ADDR_EXP 95
11314: PUSH
11315: LD_INT 4
11317: ST_TO_ADDR
// end ; end ;
11318: GO 11321
11320: POP
// InGameOff ;
11321: CALL_OW 9
// DialogueOff ;
11325: CALL_OW 7
// end ;
11329: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
11330: LD_EXP 22
11334: PUSH
11335: LD_INT 35
11337: LESS
11338: PUSH
11339: LD_EXP 21
11343: AND
11344: IFFALSE 11385
11346: GO 11348
11348: DISABLE
// begin DialogueOn ;
11349: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
11353: LD_EXP 58
11357: PPUSH
11358: LD_STRING D6c-Kur-2
11360: PPUSH
11361: CALL_OW 94
// DialogueOff ;
11365: CALL_OW 7
// timeToArrive = 2 2$00 ;
11369: LD_ADDR_EXP 23
11373: PUSH
11374: LD_INT 4200
11376: ST_TO_ADDR
// meetNearOmicronBase = true ;
11377: LD_ADDR_EXP 27
11381: PUSH
11382: LD_INT 1
11384: ST_TO_ADDR
// end ;
11385: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
11386: LD_EXP 27
11390: IFFALSE 11898
11392: GO 11394
11394: DISABLE
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
// begin mechs = [ ] ;
11404: LD_ADDR_VAR 0 3
11408: PUSH
11409: EMPTY
11410: ST_TO_ADDR
// vehs = [ ] ;
11411: LD_ADDR_VAR 0 4
11415: PUSH
11416: EMPTY
11417: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
11418: LD_ADDR_VAR 0 7
11422: PUSH
11423: LD_INT 22
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 2
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 23
11445: PUSH
11446: LD_INT 3
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 3
11455: PUSH
11456: LD_INT 34
11458: PUSH
11459: LD_INT 51
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_INT 22
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 21
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: MINUS
11510: ST_TO_ADDR
// haveVehs = 0 ;
11511: LD_ADDR_VAR 0 5
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// for i := 1 to freeVehs do
11519: LD_ADDR_VAR 0 1
11523: PUSH
11524: DOUBLE
11525: LD_INT 1
11527: DEC
11528: ST_TO_ADDR
11529: LD_VAR 0 7
11533: PUSH
11534: FOR_TO
11535: IFFALSE 11622
// begin uc_side = 6 ;
11537: LD_ADDR_OWVAR 20
11541: PUSH
11542: LD_INT 6
11544: ST_TO_ADDR
// uc_nation = 3 ;
11545: LD_ADDR_OWVAR 21
11549: PUSH
11550: LD_INT 3
11552: ST_TO_ADDR
// PrepareMechanic ( false , 2 ) ;
11553: LD_INT 0
11555: PPUSH
11556: LD_INT 2
11558: PPUSH
11559: CALL_OW 383
// mech = CreateHuman ;
11563: LD_ADDR_VAR 0 2
11567: PUSH
11568: CALL_OW 44
11572: ST_TO_ADDR
// mechs = mechs ^ mech ;
11573: LD_ADDR_VAR 0 3
11577: PUSH
11578: LD_VAR 0 3
11582: PUSH
11583: LD_VAR 0 2
11587: ADD
11588: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
11589: LD_VAR 0 2
11593: PPUSH
11594: LD_INT 4
11596: PPUSH
11597: LD_INT 0
11599: PPUSH
11600: CALL_OW 49
// ComExitBuilding ( mech ) ;
11604: LD_VAR 0 2
11608: PPUSH
11609: CALL_OW 122
// wait ( 0 0$1 ) ;
11613: LD_INT 35
11615: PPUSH
11616: CALL_OW 67
// end ;
11620: GO 11534
11622: POP
11623: POP
// if enoughVehsForKirov and freeVehs > 0 then
11624: LD_EXP 101
11628: PUSH
11629: LD_VAR 0 7
11633: PUSH
11634: LD_INT 0
11636: GREATER
11637: AND
11638: IFFALSE 11851
// begin vehs = FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
11640: LD_ADDR_VAR 0 4
11644: PUSH
11645: LD_INT 21
11647: PUSH
11648: LD_INT 2
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 23
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 3
11667: PUSH
11668: LD_INT 34
11670: PUSH
11671: LD_INT 51
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 59
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// for i := 1 to freeVehs do
11706: LD_ADDR_VAR 0 1
11710: PUSH
11711: DOUBLE
11712: LD_INT 1
11714: DEC
11715: ST_TO_ADDR
11716: LD_VAR 0 7
11720: PUSH
11721: FOR_TO
11722: IFFALSE 11748
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
11724: LD_ADDR_EXP 100
11728: PUSH
11729: LD_EXP 100
11733: PUSH
11734: LD_VAR 0 4
11738: PUSH
11739: LD_VAR 0 1
11743: ARRAY
11744: ADD
11745: ST_TO_ADDR
11746: GO 11721
11748: POP
11749: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
11750: LD_EXP 100
11754: PPUSH
11755: LD_INT 6
11757: PPUSH
11758: CALL_OW 235
// produceMoreVehicles = true ;
11762: LD_ADDR_EXP 24
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// for i := 1 to freeVehs do
11770: LD_ADDR_VAR 0 1
11774: PUSH
11775: DOUBLE
11776: LD_INT 1
11778: DEC
11779: ST_TO_ADDR
11780: LD_VAR 0 7
11784: PUSH
11785: FOR_TO
11786: IFFALSE 11816
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
11788: LD_VAR 0 3
11792: PUSH
11793: LD_VAR 0 1
11797: ARRAY
11798: PPUSH
11799: LD_EXP 100
11803: PUSH
11804: LD_VAR 0 1
11808: ARRAY
11809: PPUSH
11810: CALL_OW 180
11814: GO 11785
11816: POP
11817: POP
// if kurinCheckVehicles and produceMoreVehicles and not kurinOpinion = 0 then
11818: LD_EXP 26
11822: PUSH
11823: LD_EXP 24
11827: AND
11828: PUSH
11829: LD_EXP 10
11833: PUSH
11834: LD_INT 0
11836: EQUAL
11837: NOT
11838: AND
11839: IFFALSE 11849
// kurinOpinion = 1 ;
11841: LD_ADDR_EXP 10
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// end else
11849: GO 11898
// begin if kurinCheckVehicles = false and produceMoreVehicles = false then
11851: LD_EXP 26
11855: PUSH
11856: LD_INT 0
11858: EQUAL
11859: PUSH
11860: LD_EXP 24
11864: PUSH
11865: LD_INT 0
11867: EQUAL
11868: AND
11869: IFFALSE 11898
// begin DialogueOn ;
11871: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
11875: LD_EXP 58
11879: PPUSH
11880: LD_STRING D6d-Kur-1
11882: PPUSH
11883: CALL_OW 94
// DialogueOff ;
11887: CALL_OW 7
// YouLost ( Vehicles ) ;
11891: LD_STRING Vehicles
11893: PPUSH
11894: CALL_OW 104
// end ; end ; end ;
11898: PPOPN 7
11900: END
// every 0 0$1 trigger meetNearOmicronBase do var i ;
11901: LD_EXP 27
11905: IFFALSE 12048
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
// begin spawnCrates = false ;
11913: LD_ADDR_EXP 13
11917: PUSH
11918: LD_INT 0
11920: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11921: LD_INT 6
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: LD_INT 2
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
11937: LD_INT 0
11939: PPUSH
11940: LD_INT 3
11942: PPUSH
11943: LD_INT 0
11945: PPUSH
11946: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
11950: LD_STRING M3a
11952: PPUSH
11953: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
11957: LD_STRING M5
11959: PPUSH
11960: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
11964: LD_INT 14
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 424
// for i := 1 to kirovAttackVehicles do
11974: LD_ADDR_VAR 0 1
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_EXP 100
11988: PUSH
11989: FOR_TO
11990: IFFALSE 12015
// ComMoveXY ( kirovAttackVehicles [ i ] , 75 , 38 ) ;
11992: LD_EXP 100
11996: PUSH
11997: LD_VAR 0 1
12001: ARRAY
12002: PPUSH
12003: LD_INT 75
12005: PPUSH
12006: LD_INT 38
12008: PPUSH
12009: CALL_OW 111
12013: GO 11989
12015: POP
12016: POP
// counterIndex = 2 ;
12017: LD_ADDR_EXP 95
12021: PUSH
12022: LD_INT 2
12024: ST_TO_ADDR
// if not kurinOpinion = 0 then
12025: LD_EXP 10
12029: PUSH
12030: LD_INT 0
12032: EQUAL
12033: NOT
12034: IFFALSE 12044
// kurinOpinion = 1 ;
12036: LD_ADDR_EXP 10
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// InitOmicronDef ;
12044: CALL 5055 0 0
// end ;
12048: PPOPN 1
12050: END
// every 0 0$1 trigger ( timeToArrive <= 0 and counterIndex = 2 ) do
12051: LD_EXP 23
12055: PUSH
12056: LD_INT 0
12058: LESSEQUAL
12059: PUSH
12060: LD_EXP 95
12064: PUSH
12065: LD_INT 2
12067: EQUAL
12068: AND
12069: IFFALSE 12118
12071: GO 12073
12073: DISABLE
// begin DialogueOn ;
12074: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
12078: LD_EXP 58
12082: PPUSH
12083: LD_STRING D7a-Kur-1
12085: PPUSH
12086: CALL_OW 94
// DialogueOff ;
12090: CALL_OW 7
// counterIndex = 3 ;
12094: LD_ADDR_EXP 95
12098: PUSH
12099: LD_INT 3
12101: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
12102: LD_ADDR_EXP 23
12106: PUSH
12107: LD_INT 4200
12109: ST_TO_ADDR
// kurinOpinion = 0 ;
12110: LD_ADDR_EXP 10
12114: PUSH
12115: LD_INT 0
12117: ST_TO_ADDR
// end ;
12118: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
12119: LD_EXP 23
12123: PUSH
12124: LD_INT 35
12126: LESS
12127: PUSH
12128: LD_EXP 95
12132: PUSH
12133: LD_INT 3
12135: EQUAL
12136: AND
12137: IFFALSE 12149
12139: GO 12141
12141: DISABLE
// YouLost ( Delay ) ;
12142: LD_STRING Delay
12144: PPUSH
12145: CALL_OW 104
12149: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
12150: LD_EXP 27
12154: PUSH
12155: LD_INT 14
12157: PPUSH
12158: LD_INT 22
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 71
12186: PUSH
12187: LD_INT 0
12189: EQUAL
12190: AND
12191: IFFALSE 12280
12193: GO 12195
12195: DISABLE
// begin counterEnable = false ;
12196: LD_ADDR_EXP 94
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// startTheAttack = true ;
12204: LD_ADDR_EXP 45
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// Display_strings = [ ] ;
12212: LD_ADDR_OWVAR 47
12216: PUSH
12217: EMPTY
12218: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
12219: LD_INT 14
12221: PPUSH
12222: LD_INT 0
12224: PPUSH
12225: CALL_OW 424
// canExitBattlefield = false ;
12229: LD_ADDR_EXP 32
12233: PUSH
12234: LD_INT 0
12236: ST_TO_ADDR
// DialogueOn ;
12237: CALL_OW 6
// SayRadio ( Burlak , D7-Bur-1 ) ;
12241: LD_EXP 46
12245: PPUSH
12246: LD_STRING D7-Bur-1
12248: PPUSH
12249: CALL_OW 94
// SayRadio ( Kurin , D7-Kur-1 ) ;
12253: LD_EXP 58
12257: PPUSH
12258: LD_STRING D7-Kur-1
12260: PPUSH
12261: CALL_OW 94
// DialogueOff ;
12265: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
12269: LD_STRING M5a
12271: PPUSH
12272: CALL_OW 337
// KirovAttackOmicron ;
12276: CALL 3041 0 0
// end ;
12280: END
// export omicronNotDestroyed ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 and startTheAttack do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 21
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: PUSH
12310: LD_INT 5
12312: LESS
12313: PUSH
12314: LD_EXP 45
12318: AND
12319: IFFALSE 13062
12321: GO 12323
12323: DISABLE
12324: LD_INT 0
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
// begin omicronSurrender = true ;
12335: LD_ADDR_EXP 31
12339: PUSH
12340: LD_INT 1
12342: ST_TO_ADDR
// canExitBattlefield = true ;
12343: LD_ADDR_EXP 32
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// endCutscene = true ;
12351: LD_ADDR_EXP 38
12355: PUSH
12356: LD_INT 1
12358: ST_TO_ADDR
// if timeToArabAttack = 0 and not IsDead ( omikronDepot ) then
12359: LD_EXP 99
12363: PUSH
12364: LD_INT 0
12366: EQUAL
12367: PUSH
12368: LD_EXP 79
12372: PPUSH
12373: CALL_OW 301
12377: NOT
12378: AND
12379: IFFALSE 12391
// omicronNotDestroyed = true else
12381: LD_ADDR_EXP 102
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
12389: GO 12399
// omicronNotDestroyed = false ;
12391: LD_ADDR_EXP 102
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: LD_INT 0
12410: PPUSH
12411: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
12415: LD_INT 2
12417: PPUSH
12418: LD_INT 3
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
12431: LD_EXP 46
12435: PPUSH
12436: CALL_OW 87
// SayRadioNoFace ( Scholtze2 , D8-Sol1-1 ) ;
12440: LD_EXP 72
12444: PPUSH
12445: LD_STRING D8-Sol1-1
12447: PPUSH
12448: CALL_OW 586
// if IsOk ( Kovalyuk ) then
12452: LD_EXP 49
12456: PPUSH
12457: CALL_OW 302
12461: IFFALSE 12475
// Say ( Kovalyuk , D8-Kov-1 ) ;
12463: LD_EXP 49
12467: PPUSH
12468: LD_STRING D8-Kov-1
12470: PPUSH
12471: CALL_OW 88
// SayRadio ( Bukov , D8-RSol1-1 ) ;
12475: LD_EXP 70
12479: PPUSH
12480: LD_STRING D8-RSol1-1
12482: PPUSH
12483: CALL_OW 94
// if IsOk ( Gnyevko ) then
12487: LD_EXP 47
12491: PPUSH
12492: CALL_OW 302
12496: IFFALSE 12510
// Say ( Gnyevko , D8-Gny-1 ) ;
12498: LD_EXP 47
12502: PPUSH
12503: LD_STRING D8-Gny-1
12505: PPUSH
12506: CALL_OW 88
// tmpRu = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov ] ;
12510: LD_ADDR_VAR 0 3
12514: PUSH
12515: LD_INT 22
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 21
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 26
12537: PUSH
12538: LD_INT 1
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: PPUSH
12550: CALL_OW 69
12554: PUSH
12555: LD_EXP 46
12559: PUSH
12560: LD_EXP 47
12564: PUSH
12565: LD_EXP 49
12569: PUSH
12570: LD_EXP 50
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: DIFF
12581: ST_TO_ADDR
// Say ( tmpRu [ 1 ] , D8-RSol2-1 ) ;
12582: LD_VAR 0 3
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_STRING D8-RSol2-1
12593: PPUSH
12594: CALL_OW 88
// DialogueOff ;
12598: CALL_OW 7
// music_nat = nation_arabian ;
12602: LD_ADDR_OWVAR 71
12606: PUSH
12607: LD_INT 2
12609: ST_TO_ADDR
// music_class = music_combat ;
12610: LD_ADDR_OWVAR 72
12614: PUSH
12615: LD_INT 1
12617: ST_TO_ADDR
// game_speed = 4 ;
12618: LD_ADDR_OWVAR 65
12622: PUSH
12623: LD_INT 4
12625: ST_TO_ADDR
// DialogueOn ;
12626: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
12630: LD_EXP 68
12634: PPUSH
12635: LD_STRING D9-Gri-1
12637: PPUSH
12638: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12642: LD_EXP 58
12646: PPUSH
12647: LD_STRING D9-Kur-1
12649: PPUSH
12650: CALL_OW 94
// DialogueOff ;
12654: CALL_OW 7
// CenterOnXY ( 162 , 107 ) ;
12658: LD_INT 162
12660: PPUSH
12661: LD_INT 107
12663: PPUSH
12664: CALL_OW 84
// wait ( 2 2$0 ) ;
12668: LD_INT 4200
12670: PPUSH
12671: CALL_OW 67
// DialogueOn ;
12675: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
12679: LD_EXP 68
12683: PPUSH
12684: LD_STRING D9-Gri-2
12686: PPUSH
12687: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12691: LD_EXP 58
12695: PPUSH
12696: LD_STRING D9-Kur-2
12698: PPUSH
12699: CALL_OW 94
// wait ( 1 1$0 ) ;
12703: LD_INT 2100
12705: PPUSH
12706: CALL_OW 67
// SayRadio ( Grishko , D9-Gri-3 ) ;
12710: LD_EXP 68
12714: PPUSH
12715: LD_STRING D9-Gri-3
12717: PPUSH
12718: CALL_OW 94
// DialogueOff ;
12722: CALL_OW 7
// CenterNowOnUnits ( Kurin ) ;
12726: LD_EXP 58
12730: PPUSH
12731: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
12735: LD_EXP 58
12739: PPUSH
12740: LD_STRING D9-Kur-3
12742: PPUSH
12743: CALL_OW 94
// DialogueOn ;
12747: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
12751: LD_EXP 58
12755: PPUSH
12756: LD_STRING D9a-Kur-1
12758: PPUSH
12759: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
12763: LD_EXP 46
12767: PPUSH
12768: LD_STRING D9a-Bur-1
12770: PPUSH
12771: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
12775: LD_EXP 58
12779: PPUSH
12780: LD_STRING D9a-Kur-2
12782: PPUSH
12783: CALL_OW 94
// DialogueOff ;
12787: CALL_OW 7
// wait ( 0 0$1 ) ;
12791: LD_INT 35
12793: PPUSH
12794: CALL_OW 67
// ComMoveUnit ( Popov , Burlak ) ;
12798: LD_EXP 59
12802: PPUSH
12803: LD_EXP 46
12807: PPUSH
12808: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12812: LD_INT 35
12814: PPUSH
12815: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
12819: LD_EXP 46
12823: PPUSH
12824: LD_EXP 59
12828: PPUSH
12829: CALL_OW 296
12833: PUSH
12834: LD_INT 8
12836: LESS
12837: PUSH
12838: LD_EXP 46
12842: PPUSH
12843: CALL_OW 310
12847: PUSH
12848: LD_INT 8
12850: LESS
12851: PUSH
12852: LD_EXP 46
12856: PPUSH
12857: CALL_OW 310
12861: AND
12862: OR
12863: IFFALSE 12812
// if IsInUnit ( Burlak ) then
12865: LD_EXP 46
12869: PPUSH
12870: CALL_OW 310
12874: IFFALSE 12892
// begin ComExitVehicle ( Burlak ) ;
12876: LD_EXP 46
12880: PPUSH
12881: CALL_OW 121
// wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
12892: LD_EXP 46
12896: PUSH
12897: LD_EXP 59
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PPUSH
12906: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
12910: LD_EXP 46
12914: PPUSH
12915: LD_EXP 59
12919: PPUSH
12920: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
12924: LD_EXP 59
12928: PPUSH
12929: LD_EXP 46
12933: PPUSH
12934: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
12938: LD_EXP 46
12942: PPUSH
12943: LD_STRING D10a-Bur-1
12945: PPUSH
12946: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
12950: LD_EXP 59
12954: PPUSH
12955: LD_STRING D10a-Pop-1
12957: PPUSH
12958: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
12962: LD_EXP 46
12966: PPUSH
12967: LD_STRING D10a-Bur-2
12969: PPUSH
12970: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
12974: LD_EXP 59
12978: PPUSH
12979: LD_STRING D10a-Pop-2
12981: PPUSH
12982: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
12986: LD_EXP 46
12990: PPUSH
12991: LD_STRING D10a-Bur-3
12993: PPUSH
12994: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
12998: LD_EXP 59
13002: PPUSH
13003: LD_STRING D10a-Pop-3
13005: PPUSH
13006: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
13010: LD_EXP 46
13014: PPUSH
13015: LD_STRING D10a-Bur-4
13017: PPUSH
13018: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
13022: LD_EXP 59
13026: PPUSH
13027: LD_STRING D10a-Pop-4
13029: PPUSH
13030: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
13034: LD_EXP 46
13038: PPUSH
13039: LD_STRING D10a-Bur-5
13041: PPUSH
13042: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
13046: LD_EXP 59
13050: PPUSH
13051: LD_STRING D10a-Pop-5
13053: PPUSH
13054: CALL_OW 88
// EndMission ;
13058: CALL 13065 0 0
// end ;
13062: PPOPN 9
13064: END
// export function EndMission ; begin
13065: LD_INT 0
13067: PPUSH
// if enoughVehsForKirov then
13068: LD_EXP 101
13072: IFFALSE 13086
// AddMedal ( Surplus , 1 ) else
13074: LD_STRING Surplus
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 101
13084: GO 13116
// if produceOnlyForYou then
13086: LD_EXP 25
13090: IFFALSE 13105
// AddMedal ( Surplus , - 1 ) else
13092: LD_STRING Surplus
13094: PPUSH
13095: LD_INT 1
13097: NEG
13098: PPUSH
13099: CALL_OW 101
13103: GO 13116
// AddMedal ( Surplus , - 2 ) ;
13105: LD_STRING Surplus
13107: PPUSH
13108: LD_INT 2
13110: NEG
13111: PPUSH
13112: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
13116: LD_EXP 15
13120: PUSH
13121: LD_EXP 71
13125: PPUSH
13126: CALL_OW 302
13130: AND
13131: IFFALSE 13145
// AddMedal ( Scholtze , 1 ) else
13133: LD_STRING Scholtze
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 101
13143: GO 13156
// AddMedal ( Scholtze , - 1 ) ;
13145: LD_STRING Scholtze
13147: PPUSH
13148: LD_INT 1
13150: NEG
13151: PPUSH
13152: CALL_OW 101
// if omicronNotDestroyed = false then
13156: LD_EXP 102
13160: PUSH
13161: LD_INT 0
13163: EQUAL
13164: IFFALSE 13178
// AddMedal ( OmiRun , 1 ) else
13166: LD_STRING OmiRun
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 101
13176: GO 13189
// AddMedal ( OmiRun , - 1 ) ;
13178: LD_STRING OmiRun
13180: PPUSH
13181: LD_INT 1
13183: NEG
13184: PPUSH
13185: CALL_OW 101
// GiveMedals ( Main ) ;
13189: LD_STRING Main
13191: PPUSH
13192: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
13196: LD_INT 22
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 23
13208: PUSH
13209: LD_INT 3
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 21
13218: PUSH
13219: LD_INT 1
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PPUSH
13231: CALL_OW 69
13235: PPUSH
13236: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
13240: LD_EXP 46
13244: PPUSH
13245: LD_EXP 5
13249: PUSH
13250: LD_STRING Burlak
13252: STR
13253: PPUSH
13254: CALL_OW 38
// if IsLive ( Gnyevko ) then
13258: LD_EXP 47
13262: PPUSH
13263: CALL_OW 300
13267: IFFALSE 13287
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
13269: LD_EXP 47
13273: PPUSH
13274: LD_EXP 5
13278: PUSH
13279: LD_STRING Gnyevko
13281: STR
13282: PPUSH
13283: CALL_OW 38
// if IsLive ( Kovalyuk ) then
13287: LD_EXP 49
13291: PPUSH
13292: CALL_OW 300
13296: IFFALSE 13316
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
13298: LD_EXP 49
13302: PPUSH
13303: LD_EXP 5
13307: PUSH
13308: LD_STRING Kovalyuk
13310: STR
13311: PPUSH
13312: CALL_OW 38
// if IsLive ( Belkov ) then
13316: LD_EXP 50
13320: PPUSH
13321: CALL_OW 300
13325: IFFALSE 13345
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
13327: LD_EXP 50
13331: PPUSH
13332: LD_EXP 5
13336: PUSH
13337: LD_STRING Belkov
13339: STR
13340: PPUSH
13341: CALL_OW 38
// if IsLive ( Kirilenkova ) then
13345: LD_EXP 48
13349: PPUSH
13350: CALL_OW 300
13354: IFFALSE 13374
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
13356: LD_EXP 48
13360: PPUSH
13361: LD_EXP 5
13365: PUSH
13366: LD_STRING Kirilenkova
13368: STR
13369: PPUSH
13370: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
13374: LD_INT 22
13376: PUSH
13377: LD_INT 3
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 23
13386: PUSH
13387: LD_INT 3
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 21
13396: PUSH
13397: LD_INT 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: PUSH
13414: LD_EXP 46
13418: PUSH
13419: LD_EXP 47
13423: PUSH
13424: LD_EXP 49
13428: PUSH
13429: LD_EXP 50
13433: PUSH
13434: LD_EXP 48
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: DIFF
13446: PPUSH
13447: LD_EXP 5
13451: PUSH
13452: LD_STRING burlakTeam
13454: STR
13455: PPUSH
13456: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin ] ) , currentMissionPrefix & kirovTeam ) ;
13460: LD_INT 22
13462: PUSH
13463: LD_INT 6
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 23
13472: PUSH
13473: LD_INT 3
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 21
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 69
13499: PUSH
13500: LD_EXP 58
13504: PUSH
13505: EMPTY
13506: LIST
13507: DIFF
13508: PPUSH
13509: LD_EXP 5
13513: PUSH
13514: LD_STRING kirovTeam
13516: STR
13517: PPUSH
13518: CALL_OW 38
// SaveVariable ( kurinOpinion , 03_KurinOpinion ) ;
13522: LD_EXP 10
13526: PPUSH
13527: LD_STRING 03_KurinOpinion
13529: PPUSH
13530: CALL_OW 39
// YouWin ;
13534: CALL_OW 103
// end ; end_of_file
13538: LD_VAR 0 1
13542: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
13543: LD_INT 0
13545: PPUSH
// ar_miner := 81 ;
13546: LD_ADDR_EXP 110
13550: PUSH
13551: LD_INT 81
13553: ST_TO_ADDR
// ar_crane := 88 ;
13554: LD_ADDR_EXP 109
13558: PUSH
13559: LD_INT 88
13561: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13562: LD_ADDR_EXP 104
13566: PUSH
13567: LD_INT 89
13569: ST_TO_ADDR
// us_hack := 99 ;
13570: LD_ADDR_EXP 105
13574: PUSH
13575: LD_INT 99
13577: ST_TO_ADDR
// us_artillery := 97 ;
13578: LD_ADDR_EXP 106
13582: PUSH
13583: LD_INT 97
13585: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13586: LD_ADDR_EXP 107
13590: PUSH
13591: LD_INT 91
13593: ST_TO_ADDR
// ar_mortar := 92 ;
13594: LD_ADDR_EXP 108
13598: PUSH
13599: LD_INT 92
13601: ST_TO_ADDR
// ru_flamethrower := 93 ;
13602: LD_ADDR_EXP 111
13606: PUSH
13607: LD_INT 93
13609: ST_TO_ADDR
// ru_radar := 98 ;
13610: LD_ADDR_EXP 103
13614: PUSH
13615: LD_INT 98
13617: ST_TO_ADDR
// tech_Artillery := 80 ;
13618: LD_ADDR_EXP 112
13622: PUSH
13623: LD_INT 80
13625: ST_TO_ADDR
// tech_RadMat := 81 ;
13626: LD_ADDR_EXP 113
13630: PUSH
13631: LD_INT 81
13633: ST_TO_ADDR
// tech_BasicTools := 82 ;
13634: LD_ADDR_EXP 114
13638: PUSH
13639: LD_INT 82
13641: ST_TO_ADDR
// tech_Cargo := 83 ;
13642: LD_ADDR_EXP 115
13646: PUSH
13647: LD_INT 83
13649: ST_TO_ADDR
// tech_Track := 84 ;
13650: LD_ADDR_EXP 116
13654: PUSH
13655: LD_INT 84
13657: ST_TO_ADDR
// tech_Crane := 85 ;
13658: LD_ADDR_EXP 117
13662: PUSH
13663: LD_INT 85
13665: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13666: LD_ADDR_EXP 118
13670: PUSH
13671: LD_INT 86
13673: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13674: LD_ADDR_EXP 119
13678: PUSH
13679: LD_INT 87
13681: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13682: LD_ADDR_EXP 120
13686: PUSH
13687: LD_INT 88
13689: ST_TO_ADDR
// class_mastodont := 31 ;
13690: LD_ADDR_EXP 121
13694: PUSH
13695: LD_INT 31
13697: ST_TO_ADDR
// class_horse := 21 ;
13698: LD_ADDR_EXP 122
13702: PUSH
13703: LD_INT 21
13705: ST_TO_ADDR
// end ;
13706: LD_VAR 0 1
13710: RET
// every 1 do
13711: GO 13713
13713: DISABLE
// InitGlobalVariables ; end_of_file
13714: CALL 13543 0 0
13718: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13719: LD_INT 0
13721: PPUSH
13722: PPUSH
// if exist_mode then
13723: LD_VAR 0 2
13727: IFFALSE 13752
// unit := CreateCharacter ( prefix & ident ) else
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: LD_VAR 0 3
13738: PUSH
13739: LD_VAR 0 1
13743: STR
13744: PPUSH
13745: CALL_OW 34
13749: ST_TO_ADDR
13750: GO 13767
// unit := NewCharacter ( ident ) ;
13752: LD_ADDR_VAR 0 5
13756: PUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 25
13766: ST_TO_ADDR
// result := unit ;
13767: LD_ADDR_VAR 0 4
13771: PUSH
13772: LD_VAR 0 5
13776: ST_TO_ADDR
// end ;
13777: LD_VAR 0 4
13781: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13782: LD_INT 0
13784: PPUSH
13785: PPUSH
// if not side or not nation then
13786: LD_VAR 0 1
13790: NOT
13791: PUSH
13792: LD_VAR 0 2
13796: NOT
13797: OR
13798: IFFALSE 13802
// exit ;
13800: GO 14570
// case nation of nation_american :
13802: LD_VAR 0 2
13806: PUSH
13807: LD_INT 1
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 14029
13815: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13816: LD_ADDR_VAR 0 4
13820: PUSH
13821: LD_INT 35
13823: PUSH
13824: LD_INT 45
13826: PUSH
13827: LD_INT 46
13829: PUSH
13830: LD_INT 47
13832: PUSH
13833: LD_INT 82
13835: PUSH
13836: LD_INT 83
13838: PUSH
13839: LD_INT 84
13841: PUSH
13842: LD_INT 85
13844: PUSH
13845: LD_INT 86
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 6
13856: PUSH
13857: LD_INT 15
13859: PUSH
13860: LD_INT 16
13862: PUSH
13863: LD_INT 7
13865: PUSH
13866: LD_INT 12
13868: PUSH
13869: LD_INT 13
13871: PUSH
13872: LD_INT 10
13874: PUSH
13875: LD_INT 14
13877: PUSH
13878: LD_INT 20
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 22
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 32
13892: PUSH
13893: LD_INT 27
13895: PUSH
13896: LD_INT 36
13898: PUSH
13899: LD_INT 69
13901: PUSH
13902: LD_INT 39
13904: PUSH
13905: LD_INT 34
13907: PUSH
13908: LD_INT 40
13910: PUSH
13911: LD_INT 48
13913: PUSH
13914: LD_INT 49
13916: PUSH
13917: LD_INT 50
13919: PUSH
13920: LD_INT 51
13922: PUSH
13923: LD_INT 52
13925: PUSH
13926: LD_INT 53
13928: PUSH
13929: LD_INT 54
13931: PUSH
13932: LD_INT 55
13934: PUSH
13935: LD_INT 56
13937: PUSH
13938: LD_INT 57
13940: PUSH
13941: LD_INT 58
13943: PUSH
13944: LD_INT 59
13946: PUSH
13947: LD_INT 60
13949: PUSH
13950: LD_INT 61
13952: PUSH
13953: LD_INT 62
13955: PUSH
13956: LD_INT 80
13958: PUSH
13959: LD_INT 82
13961: PUSH
13962: LD_INT 83
13964: PUSH
13965: LD_INT 84
13967: PUSH
13968: LD_INT 85
13970: PUSH
13971: LD_INT 86
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: ST_TO_ADDR
14027: GO 14494
14029: LD_INT 2
14031: DOUBLE
14032: EQUAL
14033: IFTRUE 14037
14035: GO 14263
14037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14038: LD_ADDR_VAR 0 4
14042: PUSH
14043: LD_INT 35
14045: PUSH
14046: LD_INT 45
14048: PUSH
14049: LD_INT 46
14051: PUSH
14052: LD_INT 47
14054: PUSH
14055: LD_INT 82
14057: PUSH
14058: LD_INT 83
14060: PUSH
14061: LD_INT 84
14063: PUSH
14064: LD_INT 85
14066: PUSH
14067: LD_INT 87
14069: PUSH
14070: LD_INT 70
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 11
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: LD_INT 4
14084: PUSH
14085: LD_INT 5
14087: PUSH
14088: LD_INT 6
14090: PUSH
14091: LD_INT 15
14093: PUSH
14094: LD_INT 18
14096: PUSH
14097: LD_INT 7
14099: PUSH
14100: LD_INT 17
14102: PUSH
14103: LD_INT 8
14105: PUSH
14106: LD_INT 20
14108: PUSH
14109: LD_INT 21
14111: PUSH
14112: LD_INT 22
14114: PUSH
14115: LD_INT 72
14117: PUSH
14118: LD_INT 26
14120: PUSH
14121: LD_INT 69
14123: PUSH
14124: LD_INT 39
14126: PUSH
14127: LD_INT 40
14129: PUSH
14130: LD_INT 41
14132: PUSH
14133: LD_INT 42
14135: PUSH
14136: LD_INT 43
14138: PUSH
14139: LD_INT 48
14141: PUSH
14142: LD_INT 49
14144: PUSH
14145: LD_INT 50
14147: PUSH
14148: LD_INT 51
14150: PUSH
14151: LD_INT 52
14153: PUSH
14154: LD_INT 53
14156: PUSH
14157: LD_INT 54
14159: PUSH
14160: LD_INT 55
14162: PUSH
14163: LD_INT 56
14165: PUSH
14166: LD_INT 60
14168: PUSH
14169: LD_INT 61
14171: PUSH
14172: LD_INT 62
14174: PUSH
14175: LD_INT 66
14177: PUSH
14178: LD_INT 67
14180: PUSH
14181: LD_INT 68
14183: PUSH
14184: LD_INT 81
14186: PUSH
14187: LD_INT 82
14189: PUSH
14190: LD_INT 83
14192: PUSH
14193: LD_INT 84
14195: PUSH
14196: LD_INT 85
14198: PUSH
14199: LD_INT 87
14201: PUSH
14202: LD_INT 88
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: ST_TO_ADDR
14261: GO 14494
14263: LD_INT 3
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14493
14271: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14272: LD_ADDR_VAR 0 4
14276: PUSH
14277: LD_INT 46
14279: PUSH
14280: LD_INT 47
14282: PUSH
14283: LD_INT 1
14285: PUSH
14286: LD_INT 2
14288: PUSH
14289: LD_INT 82
14291: PUSH
14292: LD_INT 83
14294: PUSH
14295: LD_INT 84
14297: PUSH
14298: LD_INT 85
14300: PUSH
14301: LD_INT 86
14303: PUSH
14304: LD_INT 11
14306: PUSH
14307: LD_INT 9
14309: PUSH
14310: LD_INT 20
14312: PUSH
14313: LD_INT 19
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 24
14321: PUSH
14322: LD_INT 22
14324: PUSH
14325: LD_INT 25
14327: PUSH
14328: LD_INT 28
14330: PUSH
14331: LD_INT 29
14333: PUSH
14334: LD_INT 30
14336: PUSH
14337: LD_INT 31
14339: PUSH
14340: LD_INT 37
14342: PUSH
14343: LD_INT 38
14345: PUSH
14346: LD_INT 32
14348: PUSH
14349: LD_INT 27
14351: PUSH
14352: LD_INT 33
14354: PUSH
14355: LD_INT 69
14357: PUSH
14358: LD_INT 39
14360: PUSH
14361: LD_INT 34
14363: PUSH
14364: LD_INT 40
14366: PUSH
14367: LD_INT 71
14369: PUSH
14370: LD_INT 23
14372: PUSH
14373: LD_INT 44
14375: PUSH
14376: LD_INT 48
14378: PUSH
14379: LD_INT 49
14381: PUSH
14382: LD_INT 50
14384: PUSH
14385: LD_INT 51
14387: PUSH
14388: LD_INT 52
14390: PUSH
14391: LD_INT 53
14393: PUSH
14394: LD_INT 54
14396: PUSH
14397: LD_INT 55
14399: PUSH
14400: LD_INT 56
14402: PUSH
14403: LD_INT 57
14405: PUSH
14406: LD_INT 58
14408: PUSH
14409: LD_INT 59
14411: PUSH
14412: LD_INT 63
14414: PUSH
14415: LD_INT 64
14417: PUSH
14418: LD_INT 65
14420: PUSH
14421: LD_INT 82
14423: PUSH
14424: LD_INT 83
14426: PUSH
14427: LD_INT 84
14429: PUSH
14430: LD_INT 85
14432: PUSH
14433: LD_INT 86
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 14494
14493: POP
// if state > - 1 and state < 3 then
14494: LD_VAR 0 3
14498: PUSH
14499: LD_INT 1
14501: NEG
14502: GREATER
14503: PUSH
14504: LD_VAR 0 3
14508: PUSH
14509: LD_INT 3
14511: LESS
14512: AND
14513: IFFALSE 14570
// for i in result do
14515: LD_ADDR_VAR 0 5
14519: PUSH
14520: LD_VAR 0 4
14524: PUSH
14525: FOR_IN
14526: IFFALSE 14568
// if GetTech ( i , side ) <> state then
14528: LD_VAR 0 5
14532: PPUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 321
14542: PUSH
14543: LD_VAR 0 3
14547: NONEQUAL
14548: IFFALSE 14566
// result := result diff i ;
14550: LD_ADDR_VAR 0 4
14554: PUSH
14555: LD_VAR 0 4
14559: PUSH
14560: LD_VAR 0 5
14564: DIFF
14565: ST_TO_ADDR
14566: GO 14525
14568: POP
14569: POP
// end ;
14570: LD_VAR 0 4
14574: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
14579: PPUSH
// result := true ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14588: LD_ADDR_VAR 0 5
14592: PUSH
14593: LD_VAR 0 2
14597: PPUSH
14598: CALL_OW 480
14602: ST_TO_ADDR
// if not tmp then
14603: LD_VAR 0 5
14607: NOT
14608: IFFALSE 14612
// exit ;
14610: GO 14661
// for i in tmp do
14612: LD_ADDR_VAR 0 4
14616: PUSH
14617: LD_VAR 0 5
14621: PUSH
14622: FOR_IN
14623: IFFALSE 14659
// if GetTech ( i , side ) <> state_researched then
14625: LD_VAR 0 4
14629: PPUSH
14630: LD_VAR 0 1
14634: PPUSH
14635: CALL_OW 321
14639: PUSH
14640: LD_INT 2
14642: NONEQUAL
14643: IFFALSE 14657
// begin result := false ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// exit ;
14653: POP
14654: POP
14655: GO 14661
// end ;
14657: GO 14622
14659: POP
14660: POP
// end ;
14661: LD_VAR 0 3
14665: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
14671: PPUSH
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14681: LD_VAR 0 1
14685: NOT
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 257
14696: PUSH
14697: LD_INT 9
14699: NONEQUAL
14700: OR
14701: IFFALSE 14705
// exit ;
14703: GO 15278
// side := GetSide ( unit ) ;
14705: LD_ADDR_VAR 0 9
14709: PUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 255
14719: ST_TO_ADDR
// tech_space := tech_spacanom ;
14720: LD_ADDR_VAR 0 12
14724: PUSH
14725: LD_INT 29
14727: ST_TO_ADDR
// tech_time := tech_taurad ;
14728: LD_ADDR_VAR 0 13
14732: PUSH
14733: LD_INT 28
14735: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14736: LD_ADDR_VAR 0 11
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 310
14750: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14751: LD_VAR 0 11
14755: PPUSH
14756: CALL_OW 247
14760: PUSH
14761: LD_INT 2
14763: EQUAL
14764: IFFALSE 14768
// exit ;
14766: GO 15278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14768: LD_ADDR_VAR 0 8
14772: PUSH
14773: LD_INT 81
14775: PUSH
14776: LD_VAR 0 9
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 21
14790: PUSH
14791: LD_INT 3
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: ST_TO_ADDR
// if not tmp then
14811: LD_VAR 0 8
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 15278
// if in_unit then
14820: LD_VAR 0 11
14824: IFFALSE 14848
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14826: LD_ADDR_VAR 0 10
14830: PUSH
14831: LD_VAR 0 8
14835: PPUSH
14836: LD_VAR 0 11
14840: PPUSH
14841: CALL_OW 74
14845: ST_TO_ADDR
14846: GO 14868
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14848: LD_ADDR_VAR 0 10
14852: PUSH
14853: LD_VAR 0 8
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 74
14867: ST_TO_ADDR
// if not enemy then
14868: LD_VAR 0 10
14872: NOT
14873: IFFALSE 14877
// exit ;
14875: GO 15278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14877: LD_VAR 0 11
14881: PUSH
14882: LD_VAR 0 11
14886: PPUSH
14887: LD_VAR 0 10
14891: PPUSH
14892: CALL_OW 296
14896: PUSH
14897: LD_INT 13
14899: GREATER
14900: AND
14901: PUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: LD_VAR 0 10
14911: PPUSH
14912: CALL_OW 296
14916: PUSH
14917: LD_INT 12
14919: GREATER
14920: OR
14921: IFFALSE 14925
// exit ;
14923: GO 15278
// missile := [ 1 ] ;
14925: LD_ADDR_VAR 0 14
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: EMPTY
14934: LIST
14935: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14936: LD_VAR 0 9
14940: PPUSH
14941: LD_VAR 0 12
14945: PPUSH
14946: CALL_OW 325
14950: IFFALSE 14979
// missile := Replace ( missile , missile + 1 , 2 ) ;
14952: LD_ADDR_VAR 0 14
14956: PUSH
14957: LD_VAR 0 14
14961: PPUSH
14962: LD_VAR 0 14
14966: PUSH
14967: LD_INT 1
14969: PLUS
14970: PPUSH
14971: LD_INT 2
14973: PPUSH
14974: CALL_OW 1
14978: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14979: LD_VAR 0 9
14983: PPUSH
14984: LD_VAR 0 13
14988: PPUSH
14989: CALL_OW 325
14993: PUSH
14994: LD_VAR 0 10
14998: PPUSH
14999: CALL_OW 255
15003: PPUSH
15004: LD_VAR 0 13
15008: PPUSH
15009: CALL_OW 325
15013: NOT
15014: AND
15015: IFFALSE 15044
// missile := Replace ( missile , missile + 1 , 3 ) ;
15017: LD_ADDR_VAR 0 14
15021: PUSH
15022: LD_VAR 0 14
15026: PPUSH
15027: LD_VAR 0 14
15031: PUSH
15032: LD_INT 1
15034: PLUS
15035: PPUSH
15036: LD_INT 3
15038: PPUSH
15039: CALL_OW 1
15043: ST_TO_ADDR
// if missile < 2 then
15044: LD_VAR 0 14
15048: PUSH
15049: LD_INT 2
15051: LESS
15052: IFFALSE 15056
// exit ;
15054: GO 15278
// x := GetX ( enemy ) ;
15056: LD_ADDR_VAR 0 4
15060: PUSH
15061: LD_VAR 0 10
15065: PPUSH
15066: CALL_OW 250
15070: ST_TO_ADDR
// y := GetY ( enemy ) ;
15071: LD_ADDR_VAR 0 5
15075: PUSH
15076: LD_VAR 0 10
15080: PPUSH
15081: CALL_OW 251
15085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15086: LD_ADDR_VAR 0 6
15090: PUSH
15091: LD_VAR 0 4
15095: PUSH
15096: LD_INT 1
15098: NEG
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 12
15107: PLUS
15108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15109: LD_ADDR_VAR 0 7
15113: PUSH
15114: LD_VAR 0 5
15118: PUSH
15119: LD_INT 1
15121: NEG
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 12
15130: PLUS
15131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15132: LD_VAR 0 6
15136: PPUSH
15137: LD_VAR 0 7
15141: PPUSH
15142: CALL_OW 488
15146: NOT
15147: IFFALSE 15169
// begin _x := x ;
15149: LD_ADDR_VAR 0 6
15153: PUSH
15154: LD_VAR 0 4
15158: ST_TO_ADDR
// _y := y ;
15159: LD_ADDR_VAR 0 7
15163: PUSH
15164: LD_VAR 0 5
15168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_INT 1
15176: PPUSH
15177: LD_VAR 0 14
15181: PPUSH
15182: CALL_OW 12
15186: ST_TO_ADDR
// case i of 1 :
15187: LD_VAR 0 3
15191: PUSH
15192: LD_INT 1
15194: DOUBLE
15195: EQUAL
15196: IFTRUE 15200
15198: GO 15217
15200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_VAR 0 10
15210: PPUSH
15211: CALL_OW 115
15215: GO 15278
15217: LD_INT 2
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15247
15225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15226: LD_VAR 0 1
15230: PPUSH
15231: LD_VAR 0 6
15235: PPUSH
15236: LD_VAR 0 7
15240: PPUSH
15241: CALL_OW 153
15245: GO 15278
15247: LD_INT 3
15249: DOUBLE
15250: EQUAL
15251: IFTRUE 15255
15253: GO 15277
15255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_VAR 0 6
15265: PPUSH
15266: LD_VAR 0 7
15270: PPUSH
15271: CALL_OW 154
15275: GO 15278
15277: POP
// end ;
15278: LD_VAR 0 2
15282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15283: LD_INT 0
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
// if not unit or not building then
15291: LD_VAR 0 1
15295: NOT
15296: PUSH
15297: LD_VAR 0 2
15301: NOT
15302: OR
15303: IFFALSE 15307
// exit ;
15305: GO 15465
// x := GetX ( building ) ;
15307: LD_ADDR_VAR 0 5
15311: PUSH
15312: LD_VAR 0 2
15316: PPUSH
15317: CALL_OW 250
15321: ST_TO_ADDR
// y := GetY ( building ) ;
15322: LD_ADDR_VAR 0 6
15326: PUSH
15327: LD_VAR 0 2
15331: PPUSH
15332: CALL_OW 251
15336: ST_TO_ADDR
// for i = 0 to 5 do
15337: LD_ADDR_VAR 0 4
15341: PUSH
15342: DOUBLE
15343: LD_INT 0
15345: DEC
15346: ST_TO_ADDR
15347: LD_INT 5
15349: PUSH
15350: FOR_TO
15351: IFFALSE 15463
// begin _x := ShiftX ( x , i , 3 ) ;
15353: LD_ADDR_VAR 0 7
15357: PUSH
15358: LD_VAR 0 5
15362: PPUSH
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 3
15370: PPUSH
15371: CALL_OW 272
15375: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15376: LD_ADDR_VAR 0 8
15380: PUSH
15381: LD_VAR 0 6
15385: PPUSH
15386: LD_VAR 0 4
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: CALL_OW 273
15398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15399: LD_VAR 0 7
15403: PPUSH
15404: LD_VAR 0 8
15408: PPUSH
15409: CALL_OW 488
15413: NOT
15414: IFFALSE 15418
// continue ;
15416: GO 15350
// if HexInfo ( _x , _y ) = 0 then
15418: LD_VAR 0 7
15422: PPUSH
15423: LD_VAR 0 8
15427: PPUSH
15428: CALL_OW 428
15432: PUSH
15433: LD_INT 0
15435: EQUAL
15436: IFFALSE 15461
// begin ComMoveXY ( unit , _x , _y ) ;
15438: LD_VAR 0 1
15442: PPUSH
15443: LD_VAR 0 7
15447: PPUSH
15448: LD_VAR 0 8
15452: PPUSH
15453: CALL_OW 111
// exit ;
15457: POP
15458: POP
15459: GO 15465
// end ; end ;
15461: GO 15350
15463: POP
15464: POP
// end ;
15465: LD_VAR 0 3
15469: RET
// export function ScanBase ( side , base_area ) ; begin
15470: LD_INT 0
15472: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_INT 81
15485: PUSH
15486: LD_VAR 0 1
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 70
15499: ST_TO_ADDR
// end ;
15500: LD_VAR 0 3
15504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15505: LD_INT 0
15507: PPUSH
15508: PPUSH
15509: PPUSH
15510: PPUSH
// result := false ;
15511: LD_ADDR_VAR 0 2
15515: PUSH
15516: LD_INT 0
15518: ST_TO_ADDR
// side := GetSide ( unit ) ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 255
15533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15534: LD_ADDR_VAR 0 4
15538: PUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 248
15548: ST_TO_ADDR
// case nat of 1 :
15549: LD_VAR 0 4
15553: PUSH
15554: LD_INT 1
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15573
15562: POP
// tech := tech_lassight ; 2 :
15563: LD_ADDR_VAR 0 5
15567: PUSH
15568: LD_INT 12
15570: ST_TO_ADDR
15571: GO 15612
15573: LD_INT 2
15575: DOUBLE
15576: EQUAL
15577: IFTRUE 15581
15579: GO 15592
15581: POP
// tech := tech_mortar ; 3 :
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_INT 41
15589: ST_TO_ADDR
15590: GO 15612
15592: LD_INT 3
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15611
15600: POP
// tech := tech_bazooka ; end ;
15601: LD_ADDR_VAR 0 5
15605: PUSH
15606: LD_INT 44
15608: ST_TO_ADDR
15609: GO 15612
15611: POP
// if Researched ( side , tech ) then
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_VAR 0 5
15621: PPUSH
15622: CALL_OW 325
15626: IFFALSE 15653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_INT 5
15635: PUSH
15636: LD_INT 8
15638: PUSH
15639: LD_INT 9
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: LD_VAR 0 4
15651: ARRAY
15652: ST_TO_ADDR
// end ;
15653: LD_VAR 0 2
15657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15658: LD_INT 0
15660: PPUSH
15661: PPUSH
15662: PPUSH
// if not mines then
15663: LD_VAR 0 2
15667: NOT
15668: IFFALSE 15672
// exit ;
15670: GO 15816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15672: LD_ADDR_VAR 0 5
15676: PUSH
15677: LD_INT 81
15679: PUSH
15680: LD_VAR 0 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 69
15714: ST_TO_ADDR
// for i in mines do
15715: LD_ADDR_VAR 0 4
15719: PUSH
15720: LD_VAR 0 2
15724: PUSH
15725: FOR_IN
15726: IFFALSE 15814
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15728: LD_VAR 0 4
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: LD_VAR 0 4
15741: PUSH
15742: LD_INT 2
15744: ARRAY
15745: PPUSH
15746: CALL_OW 458
15750: NOT
15751: IFFALSE 15755
// continue ;
15753: GO 15725
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15755: LD_VAR 0 4
15759: PUSH
15760: LD_INT 1
15762: ARRAY
15763: PPUSH
15764: LD_VAR 0 4
15768: PUSH
15769: LD_INT 2
15771: ARRAY
15772: PPUSH
15773: CALL_OW 428
15777: PUSH
15778: LD_VAR 0 5
15782: IN
15783: IFFALSE 15812
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15785: LD_VAR 0 4
15789: PUSH
15790: LD_INT 1
15792: ARRAY
15793: PPUSH
15794: LD_VAR 0 4
15798: PUSH
15799: LD_INT 2
15801: ARRAY
15802: PPUSH
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 456
// end ;
15812: GO 15725
15814: POP
15815: POP
// end ;
15816: LD_VAR 0 3
15820: RET
// export function Count ( array ) ; var i ; begin
15821: LD_INT 0
15823: PPUSH
15824: PPUSH
// result := 0 ;
15825: LD_ADDR_VAR 0 2
15829: PUSH
15830: LD_INT 0
15832: ST_TO_ADDR
// for i in array do
15833: LD_ADDR_VAR 0 3
15837: PUSH
15838: LD_VAR 0 1
15842: PUSH
15843: FOR_IN
15844: IFFALSE 15868
// if i then
15846: LD_VAR 0 3
15850: IFFALSE 15866
// result := result + 1 ;
15852: LD_ADDR_VAR 0 2
15856: PUSH
15857: LD_VAR 0 2
15861: PUSH
15862: LD_INT 1
15864: PLUS
15865: ST_TO_ADDR
15866: GO 15843
15868: POP
15869: POP
// end ;
15870: LD_VAR 0 2
15874: RET
// export function IsEmpty ( building ) ; begin
15875: LD_INT 0
15877: PPUSH
// if not building then
15878: LD_VAR 0 1
15882: NOT
15883: IFFALSE 15887
// exit ;
15885: GO 15930
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15887: LD_ADDR_VAR 0 2
15891: PUSH
15892: LD_VAR 0 1
15896: PUSH
15897: LD_INT 22
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 255
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 58
15916: PUSH
15917: EMPTY
15918: LIST
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PPUSH
15924: CALL_OW 69
15928: IN
15929: ST_TO_ADDR
// end ;
15930: LD_VAR 0 2
15934: RET
// export function IsNotFull ( building ) ; begin
15935: LD_INT 0
15937: PPUSH
// if not building then
15938: LD_VAR 0 1
15942: NOT
15943: IFFALSE 15947
// exit ;
15945: GO 15966
// result := UnitsInside ( building ) < 6 ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 313
15961: PUSH
15962: LD_INT 6
15964: LESS
15965: ST_TO_ADDR
// end ;
15966: LD_VAR 0 2
15970: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15971: LD_INT 0
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
// tmp := [ ] ;
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: EMPTY
15983: ST_TO_ADDR
// list := [ ] ;
15984: LD_ADDR_VAR 0 5
15988: PUSH
15989: EMPTY
15990: ST_TO_ADDR
// for i = 16 to 25 do
15991: LD_ADDR_VAR 0 4
15995: PUSH
15996: DOUBLE
15997: LD_INT 16
15999: DEC
16000: ST_TO_ADDR
16001: LD_INT 25
16003: PUSH
16004: FOR_TO
16005: IFFALSE 16078
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 255
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 91
16036: PUSH
16037: LD_VAR 0 1
16041: PUSH
16042: LD_INT 6
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_VAR 0 4
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: PPUSH
16070: CALL_OW 69
16074: ADD
16075: ST_TO_ADDR
16076: GO 16004
16078: POP
16079: POP
// for i = 1 to tmp do
16080: LD_ADDR_VAR 0 4
16084: PUSH
16085: DOUBLE
16086: LD_INT 1
16088: DEC
16089: ST_TO_ADDR
16090: LD_VAR 0 3
16094: PUSH
16095: FOR_TO
16096: IFFALSE 16184
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16098: LD_ADDR_VAR 0 5
16102: PUSH
16103: LD_VAR 0 5
16107: PUSH
16108: LD_VAR 0 3
16112: PUSH
16113: LD_VAR 0 4
16117: ARRAY
16118: PPUSH
16119: CALL_OW 266
16123: PUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_VAR 0 4
16133: ARRAY
16134: PPUSH
16135: CALL_OW 250
16139: PUSH
16140: LD_VAR 0 3
16144: PUSH
16145: LD_VAR 0 4
16149: ARRAY
16150: PPUSH
16151: CALL_OW 251
16155: PUSH
16156: LD_VAR 0 3
16160: PUSH
16161: LD_VAR 0 4
16165: ARRAY
16166: PPUSH
16167: CALL_OW 254
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: ADD
16181: ST_TO_ADDR
16182: GO 16095
16184: POP
16185: POP
// result := list ;
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_VAR 0 5
16195: ST_TO_ADDR
// end ;
16196: LD_VAR 0 2
16200: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
// if not factory then
16210: LD_VAR 0 1
16214: NOT
16215: IFFALSE 16219
// exit ;
16217: GO 16812
// if control = control_apeman then
16219: LD_VAR 0 4
16223: PUSH
16224: LD_INT 5
16226: EQUAL
16227: IFFALSE 16336
// begin tmp := UnitsInside ( factory ) ;
16229: LD_ADDR_VAR 0 8
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 313
16243: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16244: LD_VAR 0 8
16248: PPUSH
16249: LD_INT 25
16251: PUSH
16252: LD_INT 12
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 72
16263: NOT
16264: IFFALSE 16274
// control := control_manual ;
16266: LD_ADDR_VAR 0 4
16270: PUSH
16271: LD_INT 1
16273: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16274: LD_ADDR_VAR 0 8
16278: PUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL 15971 0 1
16288: ST_TO_ADDR
// if tmp then
16289: LD_VAR 0 8
16293: IFFALSE 16336
// begin for i in tmp do
16295: LD_ADDR_VAR 0 7
16299: PUSH
16300: LD_VAR 0 8
16304: PUSH
16305: FOR_IN
16306: IFFALSE 16334
// if i [ 1 ] = b_ext_radio then
16308: LD_VAR 0 7
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PUSH
16317: LD_INT 22
16319: EQUAL
16320: IFFALSE 16332
// begin control := control_remote ;
16322: LD_ADDR_VAR 0 4
16326: PUSH
16327: LD_INT 2
16329: ST_TO_ADDR
// break ;
16330: GO 16334
// end ;
16332: GO 16305
16334: POP
16335: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16336: LD_VAR 0 1
16340: PPUSH
16341: LD_VAR 0 2
16345: PPUSH
16346: LD_VAR 0 3
16350: PPUSH
16351: LD_VAR 0 4
16355: PPUSH
16356: LD_VAR 0 5
16360: PPUSH
16361: CALL_OW 448
16365: IFFALSE 16400
// begin result := [ chassis , engine , control , weapon ] ;
16367: LD_ADDR_VAR 0 6
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: LD_VAR 0 3
16381: PUSH
16382: LD_VAR 0 4
16386: PUSH
16387: LD_VAR 0 5
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: ST_TO_ADDR
// exit ;
16398: GO 16812
// end ; _chassis := AvailableChassisList ( factory ) ;
16400: LD_ADDR_VAR 0 9
16404: PUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 475
16414: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16415: LD_ADDR_VAR 0 11
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 476
16429: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16430: LD_ADDR_VAR 0 12
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 477
16444: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16445: LD_ADDR_VAR 0 10
16449: PUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 478
16459: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16460: LD_VAR 0 9
16464: NOT
16465: PUSH
16466: LD_VAR 0 11
16470: NOT
16471: OR
16472: PUSH
16473: LD_VAR 0 12
16477: NOT
16478: OR
16479: PUSH
16480: LD_VAR 0 10
16484: NOT
16485: OR
16486: IFFALSE 16521
// begin result := [ chassis , engine , control , weapon ] ;
16488: LD_ADDR_VAR 0 6
16492: PUSH
16493: LD_VAR 0 2
16497: PUSH
16498: LD_VAR 0 3
16502: PUSH
16503: LD_VAR 0 4
16507: PUSH
16508: LD_VAR 0 5
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: ST_TO_ADDR
// exit ;
16519: GO 16812
// end ; if not chassis in _chassis then
16521: LD_VAR 0 2
16525: PUSH
16526: LD_VAR 0 9
16530: IN
16531: NOT
16532: IFFALSE 16558
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16534: LD_ADDR_VAR 0 2
16538: PUSH
16539: LD_VAR 0 9
16543: PUSH
16544: LD_INT 1
16546: PPUSH
16547: LD_VAR 0 9
16551: PPUSH
16552: CALL_OW 12
16556: ARRAY
16557: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16558: LD_VAR 0 2
16562: PPUSH
16563: LD_VAR 0 3
16567: PPUSH
16568: CALL 16817 0 2
16572: NOT
16573: IFFALSE 16632
// repeat engine := _engine [ 1 ] ;
16575: LD_ADDR_VAR 0 3
16579: PUSH
16580: LD_VAR 0 11
16584: PUSH
16585: LD_INT 1
16587: ARRAY
16588: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16589: LD_ADDR_VAR 0 11
16593: PUSH
16594: LD_VAR 0 11
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 3
16606: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16607: LD_VAR 0 2
16611: PPUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: CALL 16817 0 2
16621: PUSH
16622: LD_VAR 0 11
16626: PUSH
16627: EMPTY
16628: EQUAL
16629: OR
16630: IFFALSE 16575
// if not control in _control then
16632: LD_VAR 0 4
16636: PUSH
16637: LD_VAR 0 12
16641: IN
16642: NOT
16643: IFFALSE 16669
// control := _control [ rand ( 1 , _control ) ] ;
16645: LD_ADDR_VAR 0 4
16649: PUSH
16650: LD_VAR 0 12
16654: PUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_VAR 0 12
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16669: LD_VAR 0 2
16673: PPUSH
16674: LD_VAR 0 5
16678: PPUSH
16679: CALL 17037 0 2
16683: NOT
16684: IFFALSE 16743
// repeat weapon := _weapon [ 1 ] ;
16686: LD_ADDR_VAR 0 5
16690: PUSH
16691: LD_VAR 0 10
16695: PUSH
16696: LD_INT 1
16698: ARRAY
16699: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16700: LD_ADDR_VAR 0 10
16704: PUSH
16705: LD_VAR 0 10
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 3
16717: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16718: LD_VAR 0 2
16722: PPUSH
16723: LD_VAR 0 5
16727: PPUSH
16728: CALL 17037 0 2
16732: PUSH
16733: LD_VAR 0 10
16737: PUSH
16738: EMPTY
16739: EQUAL
16740: OR
16741: IFFALSE 16686
// result := [ ] ;
16743: LD_ADDR_VAR 0 6
16747: PUSH
16748: EMPTY
16749: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_VAR 0 2
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: LD_VAR 0 4
16769: PPUSH
16770: LD_VAR 0 5
16774: PPUSH
16775: CALL_OW 448
16779: IFFALSE 16812
// result := [ chassis , engine , control , weapon ] ;
16781: LD_ADDR_VAR 0 6
16785: PUSH
16786: LD_VAR 0 2
16790: PUSH
16791: LD_VAR 0 3
16795: PUSH
16796: LD_VAR 0 4
16800: PUSH
16801: LD_VAR 0 5
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: ST_TO_ADDR
// end ;
16812: LD_VAR 0 6
16816: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16817: LD_INT 0
16819: PPUSH
// if not chassis or not engine then
16820: LD_VAR 0 1
16824: NOT
16825: PUSH
16826: LD_VAR 0 2
16830: NOT
16831: OR
16832: IFFALSE 16836
// exit ;
16834: GO 17032
// case engine of engine_solar :
16836: LD_VAR 0 2
16840: PUSH
16841: LD_INT 2
16843: DOUBLE
16844: EQUAL
16845: IFTRUE 16849
16847: GO 16887
16849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_INT 11
16857: PUSH
16858: LD_INT 12
16860: PUSH
16861: LD_INT 13
16863: PUSH
16864: LD_INT 14
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 3
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
16885: GO 17016
16887: LD_INT 1
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16957
16895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16896: LD_ADDR_VAR 0 3
16900: PUSH
16901: LD_INT 11
16903: PUSH
16904: LD_INT 12
16906: PUSH
16907: LD_INT 13
16909: PUSH
16910: LD_INT 14
16912: PUSH
16913: LD_INT 1
16915: PUSH
16916: LD_INT 2
16918: PUSH
16919: LD_INT 3
16921: PUSH
16922: LD_INT 4
16924: PUSH
16925: LD_INT 5
16927: PUSH
16928: LD_INT 21
16930: PUSH
16931: LD_INT 23
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_INT 24
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: ST_TO_ADDR
16955: GO 17016
16957: LD_INT 3
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 17015
16965: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: LD_INT 13
16973: PUSH
16974: LD_INT 14
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 4
16985: PUSH
16986: LD_INT 5
16988: PUSH
16989: LD_INT 21
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_INT 23
16997: PUSH
16998: LD_INT 24
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: ST_TO_ADDR
17013: GO 17016
17015: POP
// result := ( chassis in result ) ;
17016: LD_ADDR_VAR 0 3
17020: PUSH
17021: LD_VAR 0 1
17025: PUSH
17026: LD_VAR 0 3
17030: IN
17031: ST_TO_ADDR
// end ;
17032: LD_VAR 0 3
17036: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17037: LD_INT 0
17039: PPUSH
// if not chassis or not weapon then
17040: LD_VAR 0 1
17044: NOT
17045: PUSH
17046: LD_VAR 0 2
17050: NOT
17051: OR
17052: IFFALSE 17056
// exit ;
17054: GO 18118
// case weapon of us_machine_gun :
17056: LD_VAR 0 2
17060: PUSH
17061: LD_INT 2
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17099
17069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: LD_INT 3
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: LD_INT 5
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: ST_TO_ADDR
17097: GO 18102
17099: LD_INT 3
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17137
17107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: LD_INT 2
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: LD_INT 4
17124: PUSH
17125: LD_INT 5
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
17135: GO 18102
17137: LD_INT 11
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17175
17145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17146: LD_ADDR_VAR 0 3
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: LD_INT 4
17162: PUSH
17163: LD_INT 5
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: ST_TO_ADDR
17173: GO 18102
17175: LD_INT 4
17177: DOUBLE
17178: EQUAL
17179: IFTRUE 17183
17181: GO 17209
17183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17184: LD_ADDR_VAR 0 3
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: LD_INT 4
17197: PUSH
17198: LD_INT 5
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: ST_TO_ADDR
17207: GO 18102
17209: LD_INT 5
17211: DOUBLE
17212: EQUAL
17213: IFTRUE 17217
17215: GO 17243
17217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: LD_INT 4
17231: PUSH
17232: LD_INT 5
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: ST_TO_ADDR
17241: GO 18102
17243: LD_INT 9
17245: DOUBLE
17246: EQUAL
17247: IFTRUE 17251
17249: GO 17277
17251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17252: LD_ADDR_VAR 0 3
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: LD_INT 3
17262: PUSH
17263: LD_INT 4
17265: PUSH
17266: LD_INT 5
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: ST_TO_ADDR
17275: GO 18102
17277: LD_INT 7
17279: DOUBLE
17280: EQUAL
17281: IFTRUE 17285
17283: GO 17311
17285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17286: LD_ADDR_VAR 0 3
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 4
17299: PUSH
17300: LD_INT 5
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: ST_TO_ADDR
17309: GO 18102
17311: LD_INT 12
17313: DOUBLE
17314: EQUAL
17315: IFTRUE 17319
17317: GO 17345
17319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 4
17333: PUSH
17334: LD_INT 5
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: ST_TO_ADDR
17343: GO 18102
17345: LD_INT 13
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17379
17353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17354: LD_ADDR_VAR 0 3
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: ST_TO_ADDR
17377: GO 18102
17379: LD_INT 14
17381: DOUBLE
17382: EQUAL
17383: IFTRUE 17387
17385: GO 17405
17387: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_INT 4
17395: PUSH
17396: LD_INT 5
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: ST_TO_ADDR
17403: GO 18102
17405: LD_INT 6
17407: DOUBLE
17408: EQUAL
17409: IFTRUE 17413
17411: GO 17431
17413: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_INT 4
17421: PUSH
17422: LD_INT 5
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: ST_TO_ADDR
17429: GO 18102
17431: LD_INT 10
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17457
17439: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17440: LD_ADDR_VAR 0 3
17444: PUSH
17445: LD_INT 4
17447: PUSH
17448: LD_INT 5
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: ST_TO_ADDR
17455: GO 18102
17457: LD_INT 22
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17491
17465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_INT 11
17473: PUSH
17474: LD_INT 12
17476: PUSH
17477: LD_INT 13
17479: PUSH
17480: LD_INT 14
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: ST_TO_ADDR
17489: GO 18102
17491: LD_INT 23
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17525
17499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17500: LD_ADDR_VAR 0 3
17504: PUSH
17505: LD_INT 11
17507: PUSH
17508: LD_INT 12
17510: PUSH
17511: LD_INT 13
17513: PUSH
17514: LD_INT 14
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: ST_TO_ADDR
17523: GO 18102
17525: LD_INT 24
17527: DOUBLE
17528: EQUAL
17529: IFTRUE 17533
17531: GO 17559
17533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17534: LD_ADDR_VAR 0 3
17538: PUSH
17539: LD_INT 11
17541: PUSH
17542: LD_INT 12
17544: PUSH
17545: LD_INT 13
17547: PUSH
17548: LD_INT 14
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
17557: GO 18102
17559: LD_INT 30
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17593
17567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_INT 11
17575: PUSH
17576: LD_INT 12
17578: PUSH
17579: LD_INT 13
17581: PUSH
17582: LD_INT 14
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: ST_TO_ADDR
17591: GO 18102
17593: LD_INT 25
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17619
17601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: LD_INT 13
17609: PUSH
17610: LD_INT 14
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: ST_TO_ADDR
17617: GO 18102
17619: LD_INT 27
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17645
17627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: LD_INT 13
17635: PUSH
17636: LD_INT 14
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: ST_TO_ADDR
17643: GO 18102
17645: LD_EXP 108
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17655
17653: GO 17681
17655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17656: LD_ADDR_VAR 0 3
17660: PUSH
17661: LD_INT 11
17663: PUSH
17664: LD_INT 12
17666: PUSH
17667: LD_INT 13
17669: PUSH
17670: LD_INT 14
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: ST_TO_ADDR
17679: GO 18102
17681: LD_INT 28
17683: DOUBLE
17684: EQUAL
17685: IFTRUE 17689
17687: GO 17707
17689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17690: LD_ADDR_VAR 0 3
17694: PUSH
17695: LD_INT 13
17697: PUSH
17698: LD_INT 14
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: ST_TO_ADDR
17705: GO 18102
17707: LD_INT 29
17709: DOUBLE
17710: EQUAL
17711: IFTRUE 17715
17713: GO 17733
17715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_INT 13
17723: PUSH
17724: LD_INT 14
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: ST_TO_ADDR
17731: GO 18102
17733: LD_INT 31
17735: DOUBLE
17736: EQUAL
17737: IFTRUE 17741
17739: GO 17759
17741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17742: LD_ADDR_VAR 0 3
17746: PUSH
17747: LD_INT 13
17749: PUSH
17750: LD_INT 14
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: ST_TO_ADDR
17757: GO 18102
17759: LD_INT 26
17761: DOUBLE
17762: EQUAL
17763: IFTRUE 17767
17765: GO 17785
17767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: LD_INT 13
17775: PUSH
17776: LD_INT 14
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: ST_TO_ADDR
17783: GO 18102
17785: LD_INT 42
17787: DOUBLE
17788: EQUAL
17789: IFTRUE 17793
17791: GO 17819
17793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_INT 21
17801: PUSH
17802: LD_INT 22
17804: PUSH
17805: LD_INT 23
17807: PUSH
17808: LD_INT 24
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: ST_TO_ADDR
17817: GO 18102
17819: LD_INT 43
17821: DOUBLE
17822: EQUAL
17823: IFTRUE 17827
17825: GO 17853
17827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17828: LD_ADDR_VAR 0 3
17832: PUSH
17833: LD_INT 21
17835: PUSH
17836: LD_INT 22
17838: PUSH
17839: LD_INT 23
17841: PUSH
17842: LD_INT 24
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: ST_TO_ADDR
17851: GO 18102
17853: LD_INT 44
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17887
17861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17862: LD_ADDR_VAR 0 3
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_INT 23
17875: PUSH
17876: LD_INT 24
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: ST_TO_ADDR
17885: GO 18102
17887: LD_INT 45
17889: DOUBLE
17890: EQUAL
17891: IFTRUE 17895
17893: GO 17921
17895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17896: LD_ADDR_VAR 0 3
17900: PUSH
17901: LD_INT 21
17903: PUSH
17904: LD_INT 22
17906: PUSH
17907: LD_INT 23
17909: PUSH
17910: LD_INT 24
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: ST_TO_ADDR
17919: GO 18102
17921: LD_INT 49
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17929
17927: GO 17955
17929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 22
17940: PUSH
17941: LD_INT 23
17943: PUSH
17944: LD_INT 24
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: ST_TO_ADDR
17953: GO 18102
17955: LD_INT 51
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17989
17963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 21
17971: PUSH
17972: LD_INT 22
17974: PUSH
17975: LD_INT 23
17977: PUSH
17978: LD_INT 24
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: ST_TO_ADDR
17987: GO 18102
17989: LD_INT 52
17991: DOUBLE
17992: EQUAL
17993: IFTRUE 17997
17995: GO 18023
17997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_INT 21
18005: PUSH
18006: LD_INT 22
18008: PUSH
18009: LD_INT 23
18011: PUSH
18012: LD_INT 24
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: ST_TO_ADDR
18021: GO 18102
18023: LD_INT 53
18025: DOUBLE
18026: EQUAL
18027: IFTRUE 18031
18029: GO 18049
18031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: LD_INT 23
18039: PUSH
18040: LD_INT 24
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: ST_TO_ADDR
18047: GO 18102
18049: LD_INT 46
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18075
18057: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18058: LD_ADDR_VAR 0 3
18062: PUSH
18063: LD_INT 23
18065: PUSH
18066: LD_INT 24
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: ST_TO_ADDR
18073: GO 18102
18075: LD_INT 47
18077: DOUBLE
18078: EQUAL
18079: IFTRUE 18083
18081: GO 18101
18083: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_INT 23
18091: PUSH
18092: LD_INT 24
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: ST_TO_ADDR
18099: GO 18102
18101: POP
// result := ( chassis in result ) ;
18102: LD_ADDR_VAR 0 3
18106: PUSH
18107: LD_VAR 0 1
18111: PUSH
18112: LD_VAR 0 3
18116: IN
18117: ST_TO_ADDR
// end ;
18118: LD_VAR 0 3
18122: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
18129: PPUSH
18130: PPUSH
18131: PPUSH
// result := array ;
18132: LD_ADDR_VAR 0 5
18136: PUSH
18137: LD_VAR 0 1
18141: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18142: LD_VAR 0 1
18146: NOT
18147: PUSH
18148: LD_VAR 0 2
18152: NOT
18153: OR
18154: PUSH
18155: LD_VAR 0 3
18159: NOT
18160: OR
18161: PUSH
18162: LD_VAR 0 2
18166: PUSH
18167: LD_VAR 0 1
18171: GREATER
18172: OR
18173: PUSH
18174: LD_VAR 0 3
18178: PUSH
18179: LD_VAR 0 1
18183: GREATER
18184: OR
18185: IFFALSE 18189
// exit ;
18187: GO 18485
// if direction then
18189: LD_VAR 0 4
18193: IFFALSE 18257
// begin d := 1 ;
18195: LD_ADDR_VAR 0 9
18199: PUSH
18200: LD_INT 1
18202: ST_TO_ADDR
// if i_from > i_to then
18203: LD_VAR 0 2
18207: PUSH
18208: LD_VAR 0 3
18212: GREATER
18213: IFFALSE 18239
// length := ( array - i_from ) + i_to else
18215: LD_ADDR_VAR 0 11
18219: PUSH
18220: LD_VAR 0 1
18224: PUSH
18225: LD_VAR 0 2
18229: MINUS
18230: PUSH
18231: LD_VAR 0 3
18235: PLUS
18236: ST_TO_ADDR
18237: GO 18255
// length := i_to - i_from ;
18239: LD_ADDR_VAR 0 11
18243: PUSH
18244: LD_VAR 0 3
18248: PUSH
18249: LD_VAR 0 2
18253: MINUS
18254: ST_TO_ADDR
// end else
18255: GO 18318
// begin d := - 1 ;
18257: LD_ADDR_VAR 0 9
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: ST_TO_ADDR
// if i_from > i_to then
18266: LD_VAR 0 2
18270: PUSH
18271: LD_VAR 0 3
18275: GREATER
18276: IFFALSE 18296
// length := i_from - i_to else
18278: LD_ADDR_VAR 0 11
18282: PUSH
18283: LD_VAR 0 2
18287: PUSH
18288: LD_VAR 0 3
18292: MINUS
18293: ST_TO_ADDR
18294: GO 18318
// length := ( array - i_to ) + i_from ;
18296: LD_ADDR_VAR 0 11
18300: PUSH
18301: LD_VAR 0 1
18305: PUSH
18306: LD_VAR 0 3
18310: MINUS
18311: PUSH
18312: LD_VAR 0 2
18316: PLUS
18317: ST_TO_ADDR
// end ; if not length then
18318: LD_VAR 0 11
18322: NOT
18323: IFFALSE 18327
// exit ;
18325: GO 18485
// tmp := array ;
18327: LD_ADDR_VAR 0 10
18331: PUSH
18332: LD_VAR 0 1
18336: ST_TO_ADDR
// for i = 1 to length do
18337: LD_ADDR_VAR 0 6
18341: PUSH
18342: DOUBLE
18343: LD_INT 1
18345: DEC
18346: ST_TO_ADDR
18347: LD_VAR 0 11
18351: PUSH
18352: FOR_TO
18353: IFFALSE 18473
// begin for j = 1 to array do
18355: LD_ADDR_VAR 0 7
18359: PUSH
18360: DOUBLE
18361: LD_INT 1
18363: DEC
18364: ST_TO_ADDR
18365: LD_VAR 0 1
18369: PUSH
18370: FOR_TO
18371: IFFALSE 18459
// begin k := j + d ;
18373: LD_ADDR_VAR 0 8
18377: PUSH
18378: LD_VAR 0 7
18382: PUSH
18383: LD_VAR 0 9
18387: PLUS
18388: ST_TO_ADDR
// if k > array then
18389: LD_VAR 0 8
18393: PUSH
18394: LD_VAR 0 1
18398: GREATER
18399: IFFALSE 18409
// k := 1 ;
18401: LD_ADDR_VAR 0 8
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if not k then
18409: LD_VAR 0 8
18413: NOT
18414: IFFALSE 18426
// k := array ;
18416: LD_ADDR_VAR 0 8
18420: PUSH
18421: LD_VAR 0 1
18425: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18426: LD_ADDR_VAR 0 10
18430: PUSH
18431: LD_VAR 0 10
18435: PPUSH
18436: LD_VAR 0 8
18440: PPUSH
18441: LD_VAR 0 1
18445: PUSH
18446: LD_VAR 0 7
18450: ARRAY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// end ;
18457: GO 18370
18459: POP
18460: POP
// array := tmp ;
18461: LD_ADDR_VAR 0 1
18465: PUSH
18466: LD_VAR 0 10
18470: ST_TO_ADDR
// end ;
18471: GO 18352
18473: POP
18474: POP
// result := array ;
18475: LD_ADDR_VAR 0 5
18479: PUSH
18480: LD_VAR 0 1
18484: ST_TO_ADDR
// end ;
18485: LD_VAR 0 5
18489: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18490: LD_INT 0
18492: PPUSH
18493: PPUSH
// result := 0 ;
18494: LD_ADDR_VAR 0 3
18498: PUSH
18499: LD_INT 0
18501: ST_TO_ADDR
// if not array or not value in array then
18502: LD_VAR 0 1
18506: NOT
18507: PUSH
18508: LD_VAR 0 2
18512: PUSH
18513: LD_VAR 0 1
18517: IN
18518: NOT
18519: OR
18520: IFFALSE 18524
// exit ;
18522: GO 18578
// for i = 1 to array do
18524: LD_ADDR_VAR 0 4
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_VAR 0 1
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18576
// if value = array [ i ] then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 1
18551: PUSH
18552: LD_VAR 0 4
18556: ARRAY
18557: EQUAL
18558: IFFALSE 18574
// begin result := i ;
18560: LD_ADDR_VAR 0 3
18564: PUSH
18565: LD_VAR 0 4
18569: ST_TO_ADDR
// exit ;
18570: POP
18571: POP
18572: GO 18578
// end ;
18574: GO 18539
18576: POP
18577: POP
// end ;
18578: LD_VAR 0 3
18582: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18583: LD_INT 0
18585: PPUSH
// vc_chassis := chassis ;
18586: LD_ADDR_OWVAR 37
18590: PUSH
18591: LD_VAR 0 1
18595: ST_TO_ADDR
// vc_engine := engine ;
18596: LD_ADDR_OWVAR 39
18600: PUSH
18601: LD_VAR 0 2
18605: ST_TO_ADDR
// vc_control := control ;
18606: LD_ADDR_OWVAR 38
18610: PUSH
18611: LD_VAR 0 3
18615: ST_TO_ADDR
// vc_weapon := weapon ;
18616: LD_ADDR_OWVAR 40
18620: PUSH
18621: LD_VAR 0 4
18625: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18626: LD_ADDR_OWVAR 41
18630: PUSH
18631: LD_VAR 0 5
18635: ST_TO_ADDR
// end ;
18636: LD_VAR 0 6
18640: RET
// export function WantPlant ( unit ) ; var task ; begin
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
// result := false ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 0
18652: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL_OW 437
18667: ST_TO_ADDR
// if task then
18668: LD_VAR 0 3
18672: IFFALSE 18700
// if task [ 1 ] [ 1 ] = p then
18674: LD_VAR 0 3
18678: PUSH
18679: LD_INT 1
18681: ARRAY
18682: PUSH
18683: LD_INT 1
18685: ARRAY
18686: PUSH
18687: LD_STRING p
18689: EQUAL
18690: IFFALSE 18700
// result := true ;
18692: LD_ADDR_VAR 0 2
18696: PUSH
18697: LD_INT 1
18699: ST_TO_ADDR
// end ;
18700: LD_VAR 0 2
18704: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18705: LD_INT 0
18707: PPUSH
18708: PPUSH
18709: PPUSH
18710: PPUSH
// if pos < 1 then
18711: LD_VAR 0 2
18715: PUSH
18716: LD_INT 1
18718: LESS
18719: IFFALSE 18723
// exit ;
18721: GO 19026
// if pos = 1 then
18723: LD_VAR 0 2
18727: PUSH
18728: LD_INT 1
18730: EQUAL
18731: IFFALSE 18764
// result := Replace ( arr , pos [ 1 ] , value ) else
18733: LD_ADDR_VAR 0 4
18737: PUSH
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_VAR 0 2
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: PPUSH
18752: LD_VAR 0 3
18756: PPUSH
18757: CALL_OW 1
18761: ST_TO_ADDR
18762: GO 19026
// begin tmp := arr ;
18764: LD_ADDR_VAR 0 6
18768: PUSH
18769: LD_VAR 0 1
18773: ST_TO_ADDR
// s_arr := [ tmp ] ;
18774: LD_ADDR_VAR 0 7
18778: PUSH
18779: LD_VAR 0 6
18783: PUSH
18784: EMPTY
18785: LIST
18786: ST_TO_ADDR
// for i = 1 to pos - 1 do
18787: LD_ADDR_VAR 0 5
18791: PUSH
18792: DOUBLE
18793: LD_INT 1
18795: DEC
18796: ST_TO_ADDR
18797: LD_VAR 0 2
18801: PUSH
18802: LD_INT 1
18804: MINUS
18805: PUSH
18806: FOR_TO
18807: IFFALSE 18852
// begin tmp := tmp [ pos [ i ] ] ;
18809: LD_ADDR_VAR 0 6
18813: PUSH
18814: LD_VAR 0 6
18818: PUSH
18819: LD_VAR 0 2
18823: PUSH
18824: LD_VAR 0 5
18828: ARRAY
18829: ARRAY
18830: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18831: LD_ADDR_VAR 0 7
18835: PUSH
18836: LD_VAR 0 7
18840: PUSH
18841: LD_VAR 0 6
18845: PUSH
18846: EMPTY
18847: LIST
18848: ADD
18849: ST_TO_ADDR
// end ;
18850: GO 18806
18852: POP
18853: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18854: LD_ADDR_VAR 0 6
18858: PUSH
18859: LD_VAR 0 6
18863: PPUSH
18864: LD_VAR 0 2
18868: PUSH
18869: LD_VAR 0 2
18873: ARRAY
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: CALL_OW 1
18884: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18885: LD_ADDR_VAR 0 7
18889: PUSH
18890: LD_VAR 0 7
18894: PPUSH
18895: LD_VAR 0 7
18899: PPUSH
18900: LD_VAR 0 6
18904: PPUSH
18905: CALL_OW 1
18909: ST_TO_ADDR
// for i = s_arr downto 2 do
18910: LD_ADDR_VAR 0 5
18914: PUSH
18915: DOUBLE
18916: LD_VAR 0 7
18920: INC
18921: ST_TO_ADDR
18922: LD_INT 2
18924: PUSH
18925: FOR_DOWNTO
18926: IFFALSE 19010
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18928: LD_ADDR_VAR 0 6
18932: PUSH
18933: LD_VAR 0 7
18937: PUSH
18938: LD_VAR 0 5
18942: PUSH
18943: LD_INT 1
18945: MINUS
18946: ARRAY
18947: PPUSH
18948: LD_VAR 0 2
18952: PUSH
18953: LD_VAR 0 5
18957: PUSH
18958: LD_INT 1
18960: MINUS
18961: ARRAY
18962: PPUSH
18963: LD_VAR 0 7
18967: PUSH
18968: LD_VAR 0 5
18972: ARRAY
18973: PPUSH
18974: CALL_OW 1
18978: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18979: LD_ADDR_VAR 0 7
18983: PUSH
18984: LD_VAR 0 7
18988: PPUSH
18989: LD_VAR 0 5
18993: PUSH
18994: LD_INT 1
18996: MINUS
18997: PPUSH
18998: LD_VAR 0 6
19002: PPUSH
19003: CALL_OW 1
19007: ST_TO_ADDR
// end ;
19008: GO 18925
19010: POP
19011: POP
// result := s_arr [ 1 ] ;
19012: LD_ADDR_VAR 0 4
19016: PUSH
19017: LD_VAR 0 7
19021: PUSH
19022: LD_INT 1
19024: ARRAY
19025: ST_TO_ADDR
// end ; end ;
19026: LD_VAR 0 4
19030: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19031: LD_INT 0
19033: PPUSH
19034: PPUSH
// if not list then
19035: LD_VAR 0 1
19039: NOT
19040: IFFALSE 19044
// exit ;
19042: GO 19135
// i := list [ pos1 ] ;
19044: LD_ADDR_VAR 0 5
19048: PUSH
19049: LD_VAR 0 1
19053: PUSH
19054: LD_VAR 0 2
19058: ARRAY
19059: ST_TO_ADDR
// if not i then
19060: LD_VAR 0 5
19064: NOT
19065: IFFALSE 19069
// exit ;
19067: GO 19135
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_VAR 0 2
19083: PPUSH
19084: LD_VAR 0 1
19088: PUSH
19089: LD_VAR 0 3
19093: ARRAY
19094: PPUSH
19095: CALL_OW 1
19099: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19100: LD_ADDR_VAR 0 1
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: LD_VAR 0 3
19114: PPUSH
19115: LD_VAR 0 5
19119: PPUSH
19120: CALL_OW 1
19124: ST_TO_ADDR
// result := list ;
19125: LD_ADDR_VAR 0 4
19129: PUSH
19130: LD_VAR 0 1
19134: ST_TO_ADDR
// end ;
19135: LD_VAR 0 4
19139: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19140: LD_INT 0
19142: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19143: LD_ADDR_VAR 0 5
19147: PUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 250
19157: PPUSH
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 251
19167: PPUSH
19168: LD_VAR 0 2
19172: PPUSH
19173: LD_VAR 0 3
19177: PPUSH
19178: LD_VAR 0 4
19182: PPUSH
19183: CALL 19193 0 5
19187: ST_TO_ADDR
// end ;
19188: LD_VAR 0 5
19192: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19193: LD_INT 0
19195: PPUSH
19196: PPUSH
19197: PPUSH
19198: PPUSH
// if not list then
19199: LD_VAR 0 3
19203: NOT
19204: IFFALSE 19208
// exit ;
19206: GO 19596
// result := [ ] ;
19208: LD_ADDR_VAR 0 6
19212: PUSH
19213: EMPTY
19214: ST_TO_ADDR
// for i in list do
19215: LD_ADDR_VAR 0 7
19219: PUSH
19220: LD_VAR 0 3
19224: PUSH
19225: FOR_IN
19226: IFFALSE 19428
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19228: LD_ADDR_VAR 0 9
19232: PUSH
19233: LD_VAR 0 7
19237: PPUSH
19238: LD_VAR 0 1
19242: PPUSH
19243: LD_VAR 0 2
19247: PPUSH
19248: CALL_OW 297
19252: ST_TO_ADDR
// if not result then
19253: LD_VAR 0 6
19257: NOT
19258: IFFALSE 19284
// result := [ [ i , tmp ] ] else
19260: LD_ADDR_VAR 0 6
19264: PUSH
19265: LD_VAR 0 7
19269: PUSH
19270: LD_VAR 0 9
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: ST_TO_ADDR
19282: GO 19426
// begin if result [ result ] [ 2 ] < tmp then
19284: LD_VAR 0 6
19288: PUSH
19289: LD_VAR 0 6
19293: ARRAY
19294: PUSH
19295: LD_INT 2
19297: ARRAY
19298: PUSH
19299: LD_VAR 0 9
19303: LESS
19304: IFFALSE 19346
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19306: LD_ADDR_VAR 0 6
19310: PUSH
19311: LD_VAR 0 6
19315: PPUSH
19316: LD_VAR 0 6
19320: PUSH
19321: LD_INT 1
19323: PLUS
19324: PPUSH
19325: LD_VAR 0 7
19329: PUSH
19330: LD_VAR 0 9
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL_OW 2
19343: ST_TO_ADDR
19344: GO 19426
// for j = 1 to result do
19346: LD_ADDR_VAR 0 8
19350: PUSH
19351: DOUBLE
19352: LD_INT 1
19354: DEC
19355: ST_TO_ADDR
19356: LD_VAR 0 6
19360: PUSH
19361: FOR_TO
19362: IFFALSE 19424
// begin if tmp < result [ j ] [ 2 ] then
19364: LD_VAR 0 9
19368: PUSH
19369: LD_VAR 0 6
19373: PUSH
19374: LD_VAR 0 8
19378: ARRAY
19379: PUSH
19380: LD_INT 2
19382: ARRAY
19383: LESS
19384: IFFALSE 19422
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19386: LD_ADDR_VAR 0 6
19390: PUSH
19391: LD_VAR 0 6
19395: PPUSH
19396: LD_VAR 0 8
19400: PPUSH
19401: LD_VAR 0 7
19405: PUSH
19406: LD_VAR 0 9
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 2
19419: ST_TO_ADDR
// break ;
19420: GO 19424
// end ; end ;
19422: GO 19361
19424: POP
19425: POP
// end ; end ;
19426: GO 19225
19428: POP
19429: POP
// if result and not asc then
19430: LD_VAR 0 6
19434: PUSH
19435: LD_VAR 0 4
19439: NOT
19440: AND
19441: IFFALSE 19516
// begin tmp := result ;
19443: LD_ADDR_VAR 0 9
19447: PUSH
19448: LD_VAR 0 6
19452: ST_TO_ADDR
// for i = tmp downto 1 do
19453: LD_ADDR_VAR 0 7
19457: PUSH
19458: DOUBLE
19459: LD_VAR 0 9
19463: INC
19464: ST_TO_ADDR
19465: LD_INT 1
19467: PUSH
19468: FOR_DOWNTO
19469: IFFALSE 19514
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19471: LD_ADDR_VAR 0 6
19475: PUSH
19476: LD_VAR 0 6
19480: PPUSH
19481: LD_VAR 0 9
19485: PUSH
19486: LD_VAR 0 7
19490: MINUS
19491: PUSH
19492: LD_INT 1
19494: PLUS
19495: PPUSH
19496: LD_VAR 0 9
19500: PUSH
19501: LD_VAR 0 7
19505: ARRAY
19506: PPUSH
19507: CALL_OW 1
19511: ST_TO_ADDR
19512: GO 19468
19514: POP
19515: POP
// end ; tmp := [ ] ;
19516: LD_ADDR_VAR 0 9
19520: PUSH
19521: EMPTY
19522: ST_TO_ADDR
// if mode then
19523: LD_VAR 0 5
19527: IFFALSE 19596
// begin for i = 1 to result do
19529: LD_ADDR_VAR 0 7
19533: PUSH
19534: DOUBLE
19535: LD_INT 1
19537: DEC
19538: ST_TO_ADDR
19539: LD_VAR 0 6
19543: PUSH
19544: FOR_TO
19545: IFFALSE 19584
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19547: LD_ADDR_VAR 0 9
19551: PUSH
19552: LD_VAR 0 9
19556: PPUSH
19557: LD_VAR 0 7
19561: PPUSH
19562: LD_VAR 0 6
19566: PUSH
19567: LD_VAR 0 7
19571: ARRAY
19572: PUSH
19573: LD_INT 1
19575: ARRAY
19576: PPUSH
19577: CALL_OW 1
19581: ST_TO_ADDR
19582: GO 19544
19584: POP
19585: POP
// result := tmp ;
19586: LD_ADDR_VAR 0 6
19590: PUSH
19591: LD_VAR 0 9
19595: ST_TO_ADDR
// end ; end ;
19596: LD_VAR 0 6
19600: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19601: LD_INT 0
19603: PPUSH
19604: PPUSH
19605: PPUSH
19606: PPUSH
19607: PPUSH
19608: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19609: LD_ADDR_VAR 0 5
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: ST_TO_ADDR
// if not x or not y then
19631: LD_VAR 0 2
19635: NOT
19636: PUSH
19637: LD_VAR 0 3
19641: NOT
19642: OR
19643: IFFALSE 19647
// exit ;
19645: GO 21299
// if not range then
19647: LD_VAR 0 4
19651: NOT
19652: IFFALSE 19662
// range := 10 ;
19654: LD_ADDR_VAR 0 4
19658: PUSH
19659: LD_INT 10
19661: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19662: LD_ADDR_VAR 0 8
19666: PUSH
19667: LD_INT 81
19669: PUSH
19670: LD_VAR 0 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 92
19681: PUSH
19682: LD_VAR 0 2
19686: PUSH
19687: LD_VAR 0 3
19691: PUSH
19692: LD_VAR 0 4
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: PPUSH
19725: CALL_OW 69
19729: ST_TO_ADDR
// if not tmp then
19730: LD_VAR 0 8
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 21299
// for i in tmp do
19739: LD_ADDR_VAR 0 6
19743: PUSH
19744: LD_VAR 0 8
19748: PUSH
19749: FOR_IN
19750: IFFALSE 21274
// begin points := [ 0 , 0 , 0 ] ;
19752: LD_ADDR_VAR 0 9
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: ST_TO_ADDR
// bpoints := 1 ;
19771: LD_ADDR_VAR 0 10
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19779: LD_VAR 0 6
19783: PPUSH
19784: CALL_OW 247
19788: PUSH
19789: LD_INT 1
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 20375
19797: POP
// begin if GetClass ( i ) = 1 then
19798: LD_VAR 0 6
19802: PPUSH
19803: CALL_OW 257
19807: PUSH
19808: LD_INT 1
19810: EQUAL
19811: IFFALSE 19832
// points := [ 10 , 5 , 3 ] ;
19813: LD_ADDR_VAR 0 9
19817: PUSH
19818: LD_INT 10
19820: PUSH
19821: LD_INT 5
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19832: LD_VAR 0 6
19836: PPUSH
19837: CALL_OW 257
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: LD_INT 4
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: IN
19856: IFFALSE 19877
// points := [ 3 , 2 , 1 ] ;
19858: LD_ADDR_VAR 0 9
19862: PUSH
19863: LD_INT 3
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19877: LD_VAR 0 6
19881: PPUSH
19882: CALL_OW 257
19886: PUSH
19887: LD_INT 5
19889: EQUAL
19890: IFFALSE 19911
// points := [ 130 , 5 , 2 ] ;
19892: LD_ADDR_VAR 0 9
19896: PUSH
19897: LD_INT 130
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19911: LD_VAR 0 6
19915: PPUSH
19916: CALL_OW 257
19920: PUSH
19921: LD_INT 8
19923: EQUAL
19924: IFFALSE 19945
// points := [ 35 , 35 , 30 ] ;
19926: LD_ADDR_VAR 0 9
19930: PUSH
19931: LD_INT 35
19933: PUSH
19934: LD_INT 35
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19945: LD_VAR 0 6
19949: PPUSH
19950: CALL_OW 257
19954: PUSH
19955: LD_INT 9
19957: EQUAL
19958: IFFALSE 19979
// points := [ 20 , 55 , 40 ] ;
19960: LD_ADDR_VAR 0 9
19964: PUSH
19965: LD_INT 20
19967: PUSH
19968: LD_INT 55
19970: PUSH
19971: LD_INT 40
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19979: LD_VAR 0 6
19983: PPUSH
19984: CALL_OW 257
19988: PUSH
19989: LD_INT 12
19991: PUSH
19992: LD_INT 16
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: IN
19999: IFFALSE 20020
// points := [ 5 , 3 , 2 ] ;
20001: LD_ADDR_VAR 0 9
20005: PUSH
20006: LD_INT 5
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20020: LD_VAR 0 6
20024: PPUSH
20025: CALL_OW 257
20029: PUSH
20030: LD_INT 17
20032: EQUAL
20033: IFFALSE 20054
// points := [ 100 , 50 , 75 ] ;
20035: LD_ADDR_VAR 0 9
20039: PUSH
20040: LD_INT 100
20042: PUSH
20043: LD_INT 50
20045: PUSH
20046: LD_INT 75
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20054: LD_VAR 0 6
20058: PPUSH
20059: CALL_OW 257
20063: PUSH
20064: LD_INT 15
20066: EQUAL
20067: IFFALSE 20088
// points := [ 10 , 5 , 3 ] ;
20069: LD_ADDR_VAR 0 9
20073: PUSH
20074: LD_INT 10
20076: PUSH
20077: LD_INT 5
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20088: LD_VAR 0 6
20092: PPUSH
20093: CALL_OW 257
20097: PUSH
20098: LD_INT 14
20100: EQUAL
20101: IFFALSE 20122
// points := [ 10 , 0 , 0 ] ;
20103: LD_ADDR_VAR 0 9
20107: PUSH
20108: LD_INT 10
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20122: LD_VAR 0 6
20126: PPUSH
20127: CALL_OW 257
20131: PUSH
20132: LD_INT 11
20134: EQUAL
20135: IFFALSE 20156
// points := [ 30 , 10 , 5 ] ;
20137: LD_ADDR_VAR 0 9
20141: PUSH
20142: LD_INT 30
20144: PUSH
20145: LD_INT 10
20147: PUSH
20148: LD_INT 5
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20156: LD_VAR 0 1
20160: PPUSH
20161: LD_INT 5
20163: PPUSH
20164: CALL_OW 321
20168: PUSH
20169: LD_INT 2
20171: EQUAL
20172: IFFALSE 20189
// bpoints := bpoints * 1.8 ;
20174: LD_ADDR_VAR 0 10
20178: PUSH
20179: LD_VAR 0 10
20183: PUSH
20184: LD_REAL  1.80000000000000E+0000
20187: MUL
20188: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20189: LD_VAR 0 6
20193: PPUSH
20194: CALL_OW 257
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: LD_INT 4
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: IN
20217: PUSH
20218: LD_VAR 0 1
20222: PPUSH
20223: LD_INT 51
20225: PPUSH
20226: CALL_OW 321
20230: PUSH
20231: LD_INT 2
20233: EQUAL
20234: AND
20235: IFFALSE 20252
// bpoints := bpoints * 1.2 ;
20237: LD_ADDR_VAR 0 10
20241: PUSH
20242: LD_VAR 0 10
20246: PUSH
20247: LD_REAL  1.20000000000000E+0000
20250: MUL
20251: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20252: LD_VAR 0 6
20256: PPUSH
20257: CALL_OW 257
20261: PUSH
20262: LD_INT 5
20264: PUSH
20265: LD_INT 7
20267: PUSH
20268: LD_INT 9
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: IN
20276: PUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: LD_INT 52
20284: PPUSH
20285: CALL_OW 321
20289: PUSH
20290: LD_INT 2
20292: EQUAL
20293: AND
20294: IFFALSE 20311
// bpoints := bpoints * 1.5 ;
20296: LD_ADDR_VAR 0 10
20300: PUSH
20301: LD_VAR 0 10
20305: PUSH
20306: LD_REAL  1.50000000000000E+0000
20309: MUL
20310: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20311: LD_VAR 0 1
20315: PPUSH
20316: LD_INT 66
20318: PPUSH
20319: CALL_OW 321
20323: PUSH
20324: LD_INT 2
20326: EQUAL
20327: IFFALSE 20344
// bpoints := bpoints * 1.1 ;
20329: LD_ADDR_VAR 0 10
20333: PUSH
20334: LD_VAR 0 10
20338: PUSH
20339: LD_REAL  1.10000000000000E+0000
20342: MUL
20343: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20344: LD_ADDR_VAR 0 10
20348: PUSH
20349: LD_VAR 0 10
20353: PUSH
20354: LD_VAR 0 6
20358: PPUSH
20359: LD_INT 1
20361: PPUSH
20362: CALL_OW 259
20366: PUSH
20367: LD_REAL  1.15000000000000E+0000
20370: MUL
20371: MUL
20372: ST_TO_ADDR
// end ; unit_vehicle :
20373: GO 21203
20375: LD_INT 2
20377: DOUBLE
20378: EQUAL
20379: IFTRUE 20383
20381: GO 21191
20383: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20384: LD_VAR 0 6
20388: PPUSH
20389: CALL_OW 264
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: LD_INT 42
20399: PUSH
20400: LD_INT 24
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: IN
20408: IFFALSE 20429
// points := [ 25 , 5 , 3 ] ;
20410: LD_ADDR_VAR 0 9
20414: PUSH
20415: LD_INT 25
20417: PUSH
20418: LD_INT 5
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20429: LD_VAR 0 6
20433: PPUSH
20434: CALL_OW 264
20438: PUSH
20439: LD_INT 4
20441: PUSH
20442: LD_INT 43
20444: PUSH
20445: LD_INT 25
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: IN
20453: IFFALSE 20474
// points := [ 40 , 15 , 5 ] ;
20455: LD_ADDR_VAR 0 9
20459: PUSH
20460: LD_INT 40
20462: PUSH
20463: LD_INT 15
20465: PUSH
20466: LD_INT 5
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20474: LD_VAR 0 6
20478: PPUSH
20479: CALL_OW 264
20483: PUSH
20484: LD_INT 3
20486: PUSH
20487: LD_INT 23
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: IN
20494: IFFALSE 20515
// points := [ 7 , 25 , 8 ] ;
20496: LD_ADDR_VAR 0 9
20500: PUSH
20501: LD_INT 7
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20515: LD_VAR 0 6
20519: PPUSH
20520: CALL_OW 264
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: LD_INT 27
20530: PUSH
20531: LD_INT 44
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: IN
20539: IFFALSE 20560
// points := [ 14 , 50 , 16 ] ;
20541: LD_ADDR_VAR 0 9
20545: PUSH
20546: LD_INT 14
20548: PUSH
20549: LD_INT 50
20551: PUSH
20552: LD_INT 16
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20560: LD_VAR 0 6
20564: PPUSH
20565: CALL_OW 264
20569: PUSH
20570: LD_INT 6
20572: PUSH
20573: LD_INT 46
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: IN
20580: IFFALSE 20601
// points := [ 32 , 120 , 70 ] ;
20582: LD_ADDR_VAR 0 9
20586: PUSH
20587: LD_INT 32
20589: PUSH
20590: LD_INT 120
20592: PUSH
20593: LD_INT 70
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20601: LD_VAR 0 6
20605: PPUSH
20606: CALL_OW 264
20610: PUSH
20611: LD_INT 7
20613: PUSH
20614: LD_INT 28
20616: PUSH
20617: LD_INT 45
20619: PUSH
20620: LD_EXP 108
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: IN
20631: IFFALSE 20652
// points := [ 35 , 20 , 45 ] ;
20633: LD_ADDR_VAR 0 9
20637: PUSH
20638: LD_INT 35
20640: PUSH
20641: LD_INT 20
20643: PUSH
20644: LD_INT 45
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20652: LD_VAR 0 6
20656: PPUSH
20657: CALL_OW 264
20661: PUSH
20662: LD_INT 47
20664: PUSH
20665: EMPTY
20666: LIST
20667: IN
20668: IFFALSE 20689
// points := [ 67 , 45 , 75 ] ;
20670: LD_ADDR_VAR 0 9
20674: PUSH
20675: LD_INT 67
20677: PUSH
20678: LD_INT 45
20680: PUSH
20681: LD_INT 75
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20689: LD_VAR 0 6
20693: PPUSH
20694: CALL_OW 264
20698: PUSH
20699: LD_INT 26
20701: PUSH
20702: EMPTY
20703: LIST
20704: IN
20705: IFFALSE 20726
// points := [ 120 , 30 , 80 ] ;
20707: LD_ADDR_VAR 0 9
20711: PUSH
20712: LD_INT 120
20714: PUSH
20715: LD_INT 30
20717: PUSH
20718: LD_INT 80
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20726: LD_VAR 0 6
20730: PPUSH
20731: CALL_OW 264
20735: PUSH
20736: LD_INT 22
20738: PUSH
20739: EMPTY
20740: LIST
20741: IN
20742: IFFALSE 20763
// points := [ 40 , 1 , 1 ] ;
20744: LD_ADDR_VAR 0 9
20748: PUSH
20749: LD_INT 40
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: LIST
20762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20763: LD_VAR 0 6
20767: PPUSH
20768: CALL_OW 264
20772: PUSH
20773: LD_INT 29
20775: PUSH
20776: EMPTY
20777: LIST
20778: IN
20779: IFFALSE 20800
// points := [ 70 , 200 , 400 ] ;
20781: LD_ADDR_VAR 0 9
20785: PUSH
20786: LD_INT 70
20788: PUSH
20789: LD_INT 200
20791: PUSH
20792: LD_INT 400
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20800: LD_VAR 0 6
20804: PPUSH
20805: CALL_OW 264
20809: PUSH
20810: LD_INT 14
20812: PUSH
20813: LD_INT 53
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: IN
20820: IFFALSE 20841
// points := [ 40 , 10 , 20 ] ;
20822: LD_ADDR_VAR 0 9
20826: PUSH
20827: LD_INT 40
20829: PUSH
20830: LD_INT 10
20832: PUSH
20833: LD_INT 20
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20841: LD_VAR 0 6
20845: PPUSH
20846: CALL_OW 264
20850: PUSH
20851: LD_INT 9
20853: PUSH
20854: EMPTY
20855: LIST
20856: IN
20857: IFFALSE 20878
// points := [ 5 , 70 , 20 ] ;
20859: LD_ADDR_VAR 0 9
20863: PUSH
20864: LD_INT 5
20866: PUSH
20867: LD_INT 70
20869: PUSH
20870: LD_INT 20
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20878: LD_VAR 0 6
20882: PPUSH
20883: CALL_OW 264
20887: PUSH
20888: LD_INT 10
20890: PUSH
20891: EMPTY
20892: LIST
20893: IN
20894: IFFALSE 20915
// points := [ 35 , 110 , 70 ] ;
20896: LD_ADDR_VAR 0 9
20900: PUSH
20901: LD_INT 35
20903: PUSH
20904: LD_INT 110
20906: PUSH
20907: LD_INT 70
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20915: LD_VAR 0 6
20919: PPUSH
20920: CALL_OW 265
20924: PUSH
20925: LD_INT 25
20927: EQUAL
20928: IFFALSE 20949
// points := [ 80 , 65 , 100 ] ;
20930: LD_ADDR_VAR 0 9
20934: PUSH
20935: LD_INT 80
20937: PUSH
20938: LD_INT 65
20940: PUSH
20941: LD_INT 100
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20949: LD_VAR 0 6
20953: PPUSH
20954: CALL_OW 263
20958: PUSH
20959: LD_INT 1
20961: EQUAL
20962: IFFALSE 20997
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20964: LD_ADDR_VAR 0 10
20968: PUSH
20969: LD_VAR 0 10
20973: PUSH
20974: LD_VAR 0 6
20978: PPUSH
20979: CALL_OW 311
20983: PPUSH
20984: LD_INT 3
20986: PPUSH
20987: CALL_OW 259
20991: PUSH
20992: LD_INT 4
20994: MUL
20995: MUL
20996: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20997: LD_VAR 0 6
21001: PPUSH
21002: CALL_OW 263
21006: PUSH
21007: LD_INT 2
21009: EQUAL
21010: IFFALSE 21061
// begin j := IsControledBy ( i ) ;
21012: LD_ADDR_VAR 0 7
21016: PUSH
21017: LD_VAR 0 6
21021: PPUSH
21022: CALL_OW 312
21026: ST_TO_ADDR
// if j then
21027: LD_VAR 0 7
21031: IFFALSE 21061
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21033: LD_ADDR_VAR 0 10
21037: PUSH
21038: LD_VAR 0 10
21042: PUSH
21043: LD_VAR 0 7
21047: PPUSH
21048: LD_INT 3
21050: PPUSH
21051: CALL_OW 259
21055: PUSH
21056: LD_INT 3
21058: MUL
21059: MUL
21060: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21061: LD_VAR 0 6
21065: PPUSH
21066: CALL_OW 264
21070: PUSH
21071: LD_INT 5
21073: PUSH
21074: LD_INT 6
21076: PUSH
21077: LD_INT 46
21079: PUSH
21080: LD_INT 44
21082: PUSH
21083: LD_INT 47
21085: PUSH
21086: LD_INT 45
21088: PUSH
21089: LD_INT 28
21091: PUSH
21092: LD_INT 7
21094: PUSH
21095: LD_INT 27
21097: PUSH
21098: LD_INT 29
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: IN
21113: PUSH
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_INT 52
21121: PPUSH
21122: CALL_OW 321
21126: PUSH
21127: LD_INT 2
21129: EQUAL
21130: AND
21131: IFFALSE 21148
// bpoints := bpoints * 1.2 ;
21133: LD_ADDR_VAR 0 10
21137: PUSH
21138: LD_VAR 0 10
21142: PUSH
21143: LD_REAL  1.20000000000000E+0000
21146: MUL
21147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21148: LD_VAR 0 6
21152: PPUSH
21153: CALL_OW 264
21157: PUSH
21158: LD_INT 6
21160: PUSH
21161: LD_INT 46
21163: PUSH
21164: LD_INT 47
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: IN
21172: IFFALSE 21189
// bpoints := bpoints * 1.2 ;
21174: LD_ADDR_VAR 0 10
21178: PUSH
21179: LD_VAR 0 10
21183: PUSH
21184: LD_REAL  1.20000000000000E+0000
21187: MUL
21188: ST_TO_ADDR
// end ; unit_building :
21189: GO 21203
21191: LD_INT 3
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21202
21199: POP
// ; end ;
21200: GO 21203
21202: POP
// for j = 1 to 3 do
21203: LD_ADDR_VAR 0 7
21207: PUSH
21208: DOUBLE
21209: LD_INT 1
21211: DEC
21212: ST_TO_ADDR
21213: LD_INT 3
21215: PUSH
21216: FOR_TO
21217: IFFALSE 21270
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21219: LD_ADDR_VAR 0 5
21223: PUSH
21224: LD_VAR 0 5
21228: PPUSH
21229: LD_VAR 0 7
21233: PPUSH
21234: LD_VAR 0 5
21238: PUSH
21239: LD_VAR 0 7
21243: ARRAY
21244: PUSH
21245: LD_VAR 0 9
21249: PUSH
21250: LD_VAR 0 7
21254: ARRAY
21255: PUSH
21256: LD_VAR 0 10
21260: MUL
21261: PLUS
21262: PPUSH
21263: CALL_OW 1
21267: ST_TO_ADDR
21268: GO 21216
21270: POP
21271: POP
// end ;
21272: GO 19749
21274: POP
21275: POP
// result := Replace ( result , 4 , tmp ) ;
21276: LD_ADDR_VAR 0 5
21280: PUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: LD_INT 4
21288: PPUSH
21289: LD_VAR 0 8
21293: PPUSH
21294: CALL_OW 1
21298: ST_TO_ADDR
// end ;
21299: LD_VAR 0 5
21303: RET
// export function DangerAtRange ( unit , range ) ; begin
21304: LD_INT 0
21306: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_VAR 0 1
21316: PPUSH
21317: CALL_OW 255
21321: PPUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 250
21331: PPUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL_OW 251
21341: PPUSH
21342: LD_VAR 0 2
21346: PPUSH
21347: CALL 19601 0 4
21351: ST_TO_ADDR
// end ;
21352: LD_VAR 0 3
21356: RET
// export function DangerInArea ( side , area ) ; begin
21357: LD_INT 0
21359: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21360: LD_ADDR_VAR 0 3
21364: PUSH
21365: LD_VAR 0 2
21369: PPUSH
21370: LD_INT 81
21372: PUSH
21373: LD_VAR 0 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 70
21386: ST_TO_ADDR
// end ;
21387: LD_VAR 0 3
21391: RET
// export function IsExtension ( b ) ; begin
21392: LD_INT 0
21394: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_VAR 0 1
21404: PUSH
21405: LD_INT 23
21407: PUSH
21408: LD_INT 20
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_INT 17
21416: PUSH
21417: LD_INT 24
21419: PUSH
21420: LD_INT 21
21422: PUSH
21423: LD_INT 19
21425: PUSH
21426: LD_INT 16
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 18
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: IN
21447: ST_TO_ADDR
// end ;
21448: LD_VAR 0 2
21452: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
21457: PPUSH
// result := [ ] ;
21458: LD_ADDR_VAR 0 4
21462: PUSH
21463: EMPTY
21464: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21465: LD_ADDR_VAR 0 5
21469: PUSH
21470: LD_VAR 0 2
21474: PPUSH
21475: LD_INT 21
21477: PUSH
21478: LD_INT 3
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 70
21489: ST_TO_ADDR
// if not tmp then
21490: LD_VAR 0 5
21494: NOT
21495: IFFALSE 21499
// exit ;
21497: GO 21563
// if checkLink then
21499: LD_VAR 0 3
21503: IFFALSE 21553
// begin for i in tmp do
21505: LD_ADDR_VAR 0 6
21509: PUSH
21510: LD_VAR 0 5
21514: PUSH
21515: FOR_IN
21516: IFFALSE 21551
// if GetBase ( i ) <> base then
21518: LD_VAR 0 6
21522: PPUSH
21523: CALL_OW 274
21527: PUSH
21528: LD_VAR 0 1
21532: NONEQUAL
21533: IFFALSE 21549
// ComLinkToBase ( base , i ) ;
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_VAR 0 6
21544: PPUSH
21545: CALL_OW 169
21549: GO 21515
21551: POP
21552: POP
// end ; result := tmp ;
21553: LD_ADDR_VAR 0 4
21557: PUSH
21558: LD_VAR 0 5
21562: ST_TO_ADDR
// end ;
21563: LD_VAR 0 4
21567: RET
// export function ComComplete ( units , b ) ; var i ; begin
21568: LD_INT 0
21570: PPUSH
21571: PPUSH
// if not units then
21572: LD_VAR 0 1
21576: NOT
21577: IFFALSE 21581
// exit ;
21579: GO 21671
// for i in units do
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: LD_VAR 0 1
21590: PUSH
21591: FOR_IN
21592: IFFALSE 21669
// if BuildingStatus ( b ) = bs_build then
21594: LD_VAR 0 2
21598: PPUSH
21599: CALL_OW 461
21603: PUSH
21604: LD_INT 1
21606: EQUAL
21607: IFFALSE 21667
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21609: LD_VAR 0 4
21613: PPUSH
21614: LD_STRING h
21616: PUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: CALL_OW 250
21626: PUSH
21627: LD_VAR 0 2
21631: PPUSH
21632: CALL_OW 251
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: PPUSH
21663: CALL_OW 446
21667: GO 21591
21669: POP
21670: POP
// end ;
21671: LD_VAR 0 3
21675: RET
// export function AddComComplete ( units , b ) ; var i ; begin
21676: LD_INT 0
21678: PPUSH
21679: PPUSH
// if not units then
21680: LD_VAR 0 1
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21779
// for i in units do
21689: LD_ADDR_VAR 0 4
21693: PUSH
21694: LD_VAR 0 1
21698: PUSH
21699: FOR_IN
21700: IFFALSE 21777
// if BuildingStatus ( b ) = bs_build then
21702: LD_VAR 0 2
21706: PPUSH
21707: CALL_OW 461
21711: PUSH
21712: LD_INT 1
21714: EQUAL
21715: IFFALSE 21775
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21717: LD_VAR 0 4
21721: PPUSH
21722: LD_STRING h
21724: PUSH
21725: LD_VAR 0 2
21729: PPUSH
21730: CALL_OW 250
21734: PUSH
21735: LD_VAR 0 2
21739: PPUSH
21740: CALL_OW 251
21744: PUSH
21745: LD_VAR 0 2
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: PPUSH
21771: CALL_OW 447
21775: GO 21699
21777: POP
21778: POP
// end ;
21779: LD_VAR 0 3
21783: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21784: LD_INT 0
21786: PPUSH
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
21791: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21792: LD_VAR 0 1
21796: NOT
21797: PUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 263
21807: PUSH
21808: LD_INT 2
21810: NONEQUAL
21811: OR
21812: IFFALSE 21816
// exit ;
21814: GO 22132
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21816: LD_ADDR_VAR 0 6
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_VAR 0 1
21828: PPUSH
21829: CALL_OW 255
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 30
21843: PUSH
21844: LD_INT 36
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 34
21853: PUSH
21854: LD_INT 31
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PPUSH
21870: CALL_OW 69
21874: ST_TO_ADDR
// if not tmp then
21875: LD_VAR 0 6
21879: NOT
21880: IFFALSE 21884
// exit ;
21882: GO 22132
// result := [ ] ;
21884: LD_ADDR_VAR 0 2
21888: PUSH
21889: EMPTY
21890: ST_TO_ADDR
// for i in tmp do
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: LD_VAR 0 6
21900: PUSH
21901: FOR_IN
21902: IFFALSE 21973
// begin t := UnitsInside ( i ) ;
21904: LD_ADDR_VAR 0 4
21908: PUSH
21909: LD_VAR 0 3
21913: PPUSH
21914: CALL_OW 313
21918: ST_TO_ADDR
// if t then
21919: LD_VAR 0 4
21923: IFFALSE 21971
// for j in t do
21925: LD_ADDR_VAR 0 7
21929: PUSH
21930: LD_VAR 0 4
21934: PUSH
21935: FOR_IN
21936: IFFALSE 21969
// result := Replace ( result , result + 1 , j ) ;
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: LD_VAR 0 2
21952: PUSH
21953: LD_INT 1
21955: PLUS
21956: PPUSH
21957: LD_VAR 0 7
21961: PPUSH
21962: CALL_OW 1
21966: ST_TO_ADDR
21967: GO 21935
21969: POP
21970: POP
// end ;
21971: GO 21901
21973: POP
21974: POP
// if not result then
21975: LD_VAR 0 2
21979: NOT
21980: IFFALSE 21984
// exit ;
21982: GO 22132
// mech := result [ 1 ] ;
21984: LD_ADDR_VAR 0 5
21988: PUSH
21989: LD_VAR 0 2
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: ST_TO_ADDR
// if result > 1 then
21998: LD_VAR 0 2
22002: PUSH
22003: LD_INT 1
22005: GREATER
22006: IFFALSE 22118
// begin for i = 2 to result do
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: DOUBLE
22014: LD_INT 2
22016: DEC
22017: ST_TO_ADDR
22018: LD_VAR 0 2
22022: PUSH
22023: FOR_TO
22024: IFFALSE 22116
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22026: LD_ADDR_VAR 0 4
22030: PUSH
22031: LD_VAR 0 2
22035: PUSH
22036: LD_VAR 0 3
22040: ARRAY
22041: PPUSH
22042: LD_INT 3
22044: PPUSH
22045: CALL_OW 259
22049: PUSH
22050: LD_VAR 0 2
22054: PUSH
22055: LD_VAR 0 3
22059: ARRAY
22060: PPUSH
22061: CALL_OW 432
22065: MINUS
22066: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22067: LD_VAR 0 4
22071: PUSH
22072: LD_VAR 0 5
22076: PPUSH
22077: LD_INT 3
22079: PPUSH
22080: CALL_OW 259
22084: PUSH
22085: LD_VAR 0 5
22089: PPUSH
22090: CALL_OW 432
22094: MINUS
22095: GREATEREQUAL
22096: IFFALSE 22114
// mech := result [ i ] ;
22098: LD_ADDR_VAR 0 5
22102: PUSH
22103: LD_VAR 0 2
22107: PUSH
22108: LD_VAR 0 3
22112: ARRAY
22113: ST_TO_ADDR
// end ;
22114: GO 22023
22116: POP
22117: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22118: LD_VAR 0 1
22122: PPUSH
22123: LD_VAR 0 5
22127: PPUSH
22128: CALL_OW 135
// end ;
22132: LD_VAR 0 2
22136: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22137: LD_INT 0
22139: PPUSH
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
22144: PPUSH
22145: PPUSH
22146: PPUSH
22147: PPUSH
22148: PPUSH
22149: PPUSH
22150: PPUSH
22151: PPUSH
// result := [ ] ;
22152: LD_ADDR_VAR 0 7
22156: PUSH
22157: EMPTY
22158: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 266
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: IN
22179: NOT
22180: IFFALSE 22184
// exit ;
22182: GO 23818
// if name then
22184: LD_VAR 0 3
22188: IFFALSE 22204
// SetBName ( base_dep , name ) ;
22190: LD_VAR 0 1
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL_OW 500
// base := GetBase ( base_dep ) ;
22204: LD_ADDR_VAR 0 15
22208: PUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 274
22218: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22219: LD_ADDR_VAR 0 16
22223: PUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 255
22233: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22234: LD_ADDR_VAR 0 17
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 248
22248: ST_TO_ADDR
// if sources then
22249: LD_VAR 0 5
22253: IFFALSE 22300
// for i = 1 to 3 do
22255: LD_ADDR_VAR 0 8
22259: PUSH
22260: DOUBLE
22261: LD_INT 1
22263: DEC
22264: ST_TO_ADDR
22265: LD_INT 3
22267: PUSH
22268: FOR_TO
22269: IFFALSE 22298
// AddResourceType ( base , i , sources [ i ] ) ;
22271: LD_VAR 0 15
22275: PPUSH
22276: LD_VAR 0 8
22280: PPUSH
22281: LD_VAR 0 5
22285: PUSH
22286: LD_VAR 0 8
22290: ARRAY
22291: PPUSH
22292: CALL_OW 276
22296: GO 22268
22298: POP
22299: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22300: LD_ADDR_VAR 0 18
22304: PUSH
22305: LD_VAR 0 15
22309: PPUSH
22310: LD_VAR 0 2
22314: PPUSH
22315: LD_INT 1
22317: PPUSH
22318: CALL 21453 0 3
22322: ST_TO_ADDR
// InitHc ;
22323: CALL_OW 19
// InitUc ;
22327: CALL_OW 18
// uc_side := side ;
22331: LD_ADDR_OWVAR 20
22335: PUSH
22336: LD_VAR 0 16
22340: ST_TO_ADDR
// uc_nation := nation ;
22341: LD_ADDR_OWVAR 21
22345: PUSH
22346: LD_VAR 0 17
22350: ST_TO_ADDR
// if buildings then
22351: LD_VAR 0 18
22355: IFFALSE 23677
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22357: LD_ADDR_VAR 0 19
22361: PUSH
22362: LD_VAR 0 18
22366: PPUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 30
22372: PUSH
22373: LD_INT 29
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 30
22382: PUSH
22383: LD_INT 30
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PPUSH
22395: CALL_OW 72
22399: ST_TO_ADDR
// if tmp then
22400: LD_VAR 0 19
22404: IFFALSE 22452
// for i in tmp do
22406: LD_ADDR_VAR 0 8
22410: PUSH
22411: LD_VAR 0 19
22415: PUSH
22416: FOR_IN
22417: IFFALSE 22450
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22419: LD_VAR 0 8
22423: PPUSH
22424: CALL_OW 250
22428: PPUSH
22429: LD_VAR 0 8
22433: PPUSH
22434: CALL_OW 251
22438: PPUSH
22439: LD_VAR 0 16
22443: PPUSH
22444: CALL_OW 441
22448: GO 22416
22450: POP
22451: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22452: LD_VAR 0 18
22456: PPUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 32
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 30
22472: PUSH
22473: LD_INT 33
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 72
22489: IFFALSE 22577
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22491: LD_ADDR_VAR 0 8
22495: PUSH
22496: LD_VAR 0 18
22500: PPUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 30
22506: PUSH
22507: LD_INT 32
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 30
22516: PUSH
22517: LD_INT 33
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 72
22533: PUSH
22534: FOR_IN
22535: IFFALSE 22575
// begin if not GetBWeapon ( i ) then
22537: LD_VAR 0 8
22541: PPUSH
22542: CALL_OW 269
22546: NOT
22547: IFFALSE 22573
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22549: LD_VAR 0 8
22553: PPUSH
22554: LD_VAR 0 8
22558: PPUSH
22559: LD_VAR 0 2
22563: PPUSH
22564: CALL 23823 0 2
22568: PPUSH
22569: CALL_OW 431
// end ;
22573: GO 22534
22575: POP
22576: POP
// end ; for i = 1 to personel do
22577: LD_ADDR_VAR 0 8
22581: PUSH
22582: DOUBLE
22583: LD_INT 1
22585: DEC
22586: ST_TO_ADDR
22587: LD_VAR 0 6
22591: PUSH
22592: FOR_TO
22593: IFFALSE 23657
// begin if i > 4 then
22595: LD_VAR 0 8
22599: PUSH
22600: LD_INT 4
22602: GREATER
22603: IFFALSE 22607
// break ;
22605: GO 23657
// case i of 1 :
22607: LD_VAR 0 8
22611: PUSH
22612: LD_INT 1
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22700
22620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22621: LD_ADDR_VAR 0 12
22625: PUSH
22626: LD_VAR 0 18
22630: PPUSH
22631: LD_INT 22
22633: PUSH
22634: LD_VAR 0 16
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 58
22645: PUSH
22646: EMPTY
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 30
22654: PUSH
22655: LD_INT 32
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 30
22664: PUSH
22665: LD_INT 4
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 30
22674: PUSH
22675: LD_INT 5
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: PPUSH
22693: CALL_OW 72
22697: ST_TO_ADDR
22698: GO 22922
22700: LD_INT 2
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22770
22708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22709: LD_ADDR_VAR 0 12
22713: PUSH
22714: LD_VAR 0 18
22718: PPUSH
22719: LD_INT 22
22721: PUSH
22722: LD_VAR 0 16
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 30
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 72
22767: ST_TO_ADDR
22768: GO 22922
22770: LD_INT 3
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22840
22778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22779: LD_ADDR_VAR 0 12
22783: PUSH
22784: LD_VAR 0 18
22788: PPUSH
22789: LD_INT 22
22791: PUSH
22792: LD_VAR 0 16
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 30
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 72
22837: ST_TO_ADDR
22838: GO 22922
22840: LD_INT 4
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22921
22848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22849: LD_ADDR_VAR 0 12
22853: PUSH
22854: LD_VAR 0 18
22858: PPUSH
22859: LD_INT 22
22861: PUSH
22862: LD_VAR 0 16
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: LD_INT 30
22876: PUSH
22877: LD_INT 6
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 30
22886: PUSH
22887: LD_INT 7
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 30
22896: PUSH
22897: LD_INT 8
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 72
22918: ST_TO_ADDR
22919: GO 22922
22921: POP
// if i = 1 then
22922: LD_VAR 0 8
22926: PUSH
22927: LD_INT 1
22929: EQUAL
22930: IFFALSE 23041
// begin tmp := [ ] ;
22932: LD_ADDR_VAR 0 19
22936: PUSH
22937: EMPTY
22938: ST_TO_ADDR
// for j in f do
22939: LD_ADDR_VAR 0 9
22943: PUSH
22944: LD_VAR 0 12
22948: PUSH
22949: FOR_IN
22950: IFFALSE 23023
// if GetBType ( j ) = b_bunker then
22952: LD_VAR 0 9
22956: PPUSH
22957: CALL_OW 266
22961: PUSH
22962: LD_INT 32
22964: EQUAL
22965: IFFALSE 22992
// tmp := Insert ( tmp , 1 , j ) else
22967: LD_ADDR_VAR 0 19
22971: PUSH
22972: LD_VAR 0 19
22976: PPUSH
22977: LD_INT 1
22979: PPUSH
22980: LD_VAR 0 9
22984: PPUSH
22985: CALL_OW 2
22989: ST_TO_ADDR
22990: GO 23021
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22992: LD_ADDR_VAR 0 19
22996: PUSH
22997: LD_VAR 0 19
23001: PPUSH
23002: LD_VAR 0 19
23006: PUSH
23007: LD_INT 1
23009: PLUS
23010: PPUSH
23011: LD_VAR 0 9
23015: PPUSH
23016: CALL_OW 2
23020: ST_TO_ADDR
23021: GO 22949
23023: POP
23024: POP
// if tmp then
23025: LD_VAR 0 19
23029: IFFALSE 23041
// f := tmp ;
23031: LD_ADDR_VAR 0 12
23035: PUSH
23036: LD_VAR 0 19
23040: ST_TO_ADDR
// end ; x := personel [ i ] ;
23041: LD_ADDR_VAR 0 13
23045: PUSH
23046: LD_VAR 0 6
23050: PUSH
23051: LD_VAR 0 8
23055: ARRAY
23056: ST_TO_ADDR
// if x = - 1 then
23057: LD_VAR 0 13
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: EQUAL
23066: IFFALSE 23275
// begin for j in f do
23068: LD_ADDR_VAR 0 9
23072: PUSH
23073: LD_VAR 0 12
23077: PUSH
23078: FOR_IN
23079: IFFALSE 23271
// repeat InitHc ;
23081: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23085: LD_VAR 0 9
23089: PPUSH
23090: CALL_OW 266
23094: PUSH
23095: LD_INT 5
23097: EQUAL
23098: IFFALSE 23168
// begin if UnitsInside ( j ) < 3 then
23100: LD_VAR 0 9
23104: PPUSH
23105: CALL_OW 313
23109: PUSH
23110: LD_INT 3
23112: LESS
23113: IFFALSE 23149
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23115: LD_INT 0
23117: PPUSH
23118: LD_INT 5
23120: PUSH
23121: LD_INT 8
23123: PUSH
23124: LD_INT 9
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: LD_VAR 0 17
23136: ARRAY
23137: PPUSH
23138: LD_VAR 0 4
23142: PPUSH
23143: CALL_OW 380
23147: GO 23166
// PrepareHuman ( false , i , skill ) ;
23149: LD_INT 0
23151: PPUSH
23152: LD_VAR 0 8
23156: PPUSH
23157: LD_VAR 0 4
23161: PPUSH
23162: CALL_OW 380
// end else
23166: GO 23185
// PrepareHuman ( false , i , skill ) ;
23168: LD_INT 0
23170: PPUSH
23171: LD_VAR 0 8
23175: PPUSH
23176: LD_VAR 0 4
23180: PPUSH
23181: CALL_OW 380
// un := CreateHuman ;
23185: LD_ADDR_VAR 0 14
23189: PUSH
23190: CALL_OW 44
23194: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23195: LD_ADDR_VAR 0 7
23199: PUSH
23200: LD_VAR 0 7
23204: PPUSH
23205: LD_INT 1
23207: PPUSH
23208: LD_VAR 0 14
23212: PPUSH
23213: CALL_OW 2
23217: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23218: LD_VAR 0 14
23222: PPUSH
23223: LD_VAR 0 9
23227: PPUSH
23228: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23232: LD_VAR 0 9
23236: PPUSH
23237: CALL_OW 313
23241: PUSH
23242: LD_INT 6
23244: EQUAL
23245: PUSH
23246: LD_VAR 0 9
23250: PPUSH
23251: CALL_OW 266
23255: PUSH
23256: LD_INT 32
23258: PUSH
23259: LD_INT 31
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: IN
23266: OR
23267: IFFALSE 23081
23269: GO 23078
23271: POP
23272: POP
// end else
23273: GO 23655
// for j = 1 to x do
23275: LD_ADDR_VAR 0 9
23279: PUSH
23280: DOUBLE
23281: LD_INT 1
23283: DEC
23284: ST_TO_ADDR
23285: LD_VAR 0 13
23289: PUSH
23290: FOR_TO
23291: IFFALSE 23653
// begin InitHc ;
23293: CALL_OW 19
// if not f then
23297: LD_VAR 0 12
23301: NOT
23302: IFFALSE 23391
// begin PrepareHuman ( false , i , skill ) ;
23304: LD_INT 0
23306: PPUSH
23307: LD_VAR 0 8
23311: PPUSH
23312: LD_VAR 0 4
23316: PPUSH
23317: CALL_OW 380
// un := CreateHuman ;
23321: LD_ADDR_VAR 0 14
23325: PUSH
23326: CALL_OW 44
23330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23331: LD_ADDR_VAR 0 7
23335: PUSH
23336: LD_VAR 0 7
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: LD_VAR 0 14
23348: PPUSH
23349: CALL_OW 2
23353: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23354: LD_VAR 0 14
23358: PPUSH
23359: LD_VAR 0 1
23363: PPUSH
23364: CALL_OW 250
23368: PPUSH
23369: LD_VAR 0 1
23373: PPUSH
23374: CALL_OW 251
23378: PPUSH
23379: LD_INT 10
23381: PPUSH
23382: LD_INT 0
23384: PPUSH
23385: CALL_OW 50
// continue ;
23389: GO 23290
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23391: LD_VAR 0 12
23395: PUSH
23396: LD_INT 1
23398: ARRAY
23399: PPUSH
23400: CALL_OW 313
23404: PUSH
23405: LD_VAR 0 12
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: CALL_OW 266
23418: PUSH
23419: LD_INT 32
23421: PUSH
23422: LD_INT 31
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: IN
23429: AND
23430: PUSH
23431: LD_VAR 0 12
23435: PUSH
23436: LD_INT 1
23438: ARRAY
23439: PPUSH
23440: CALL_OW 313
23444: PUSH
23445: LD_INT 6
23447: EQUAL
23448: OR
23449: IFFALSE 23469
// f := Delete ( f , 1 ) ;
23451: LD_ADDR_VAR 0 12
23455: PUSH
23456: LD_VAR 0 12
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 3
23468: ST_TO_ADDR
// if not f then
23469: LD_VAR 0 12
23473: NOT
23474: IFFALSE 23492
// begin x := x + 2 ;
23476: LD_ADDR_VAR 0 13
23480: PUSH
23481: LD_VAR 0 13
23485: PUSH
23486: LD_INT 2
23488: PLUS
23489: ST_TO_ADDR
// continue ;
23490: GO 23290
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23492: LD_VAR 0 12
23496: PUSH
23497: LD_INT 1
23499: ARRAY
23500: PPUSH
23501: CALL_OW 266
23505: PUSH
23506: LD_INT 5
23508: EQUAL
23509: IFFALSE 23583
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23511: LD_VAR 0 12
23515: PUSH
23516: LD_INT 1
23518: ARRAY
23519: PPUSH
23520: CALL_OW 313
23524: PUSH
23525: LD_INT 3
23527: LESS
23528: IFFALSE 23564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23530: LD_INT 0
23532: PPUSH
23533: LD_INT 5
23535: PUSH
23536: LD_INT 8
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: LD_VAR 0 17
23551: ARRAY
23552: PPUSH
23553: LD_VAR 0 4
23557: PPUSH
23558: CALL_OW 380
23562: GO 23581
// PrepareHuman ( false , i , skill ) ;
23564: LD_INT 0
23566: PPUSH
23567: LD_VAR 0 8
23571: PPUSH
23572: LD_VAR 0 4
23576: PPUSH
23577: CALL_OW 380
// end else
23581: GO 23600
// PrepareHuman ( false , i , skill ) ;
23583: LD_INT 0
23585: PPUSH
23586: LD_VAR 0 8
23590: PPUSH
23591: LD_VAR 0 4
23595: PPUSH
23596: CALL_OW 380
// un := CreateHuman ;
23600: LD_ADDR_VAR 0 14
23604: PUSH
23605: CALL_OW 44
23609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23610: LD_ADDR_VAR 0 7
23614: PUSH
23615: LD_VAR 0 7
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: LD_VAR 0 14
23627: PPUSH
23628: CALL_OW 2
23632: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23633: LD_VAR 0 14
23637: PPUSH
23638: LD_VAR 0 12
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: CALL_OW 52
// end ;
23651: GO 23290
23653: POP
23654: POP
// end ;
23655: GO 22592
23657: POP
23658: POP
// result := result ^ buildings ;
23659: LD_ADDR_VAR 0 7
23663: PUSH
23664: LD_VAR 0 7
23668: PUSH
23669: LD_VAR 0 18
23673: ADD
23674: ST_TO_ADDR
// end else
23675: GO 23818
// begin for i = 1 to personel do
23677: LD_ADDR_VAR 0 8
23681: PUSH
23682: DOUBLE
23683: LD_INT 1
23685: DEC
23686: ST_TO_ADDR
23687: LD_VAR 0 6
23691: PUSH
23692: FOR_TO
23693: IFFALSE 23816
// begin if i > 4 then
23695: LD_VAR 0 8
23699: PUSH
23700: LD_INT 4
23702: GREATER
23703: IFFALSE 23707
// break ;
23705: GO 23816
// x := personel [ i ] ;
23707: LD_ADDR_VAR 0 13
23711: PUSH
23712: LD_VAR 0 6
23716: PUSH
23717: LD_VAR 0 8
23721: ARRAY
23722: ST_TO_ADDR
// if x = - 1 then
23723: LD_VAR 0 13
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: EQUAL
23732: IFFALSE 23736
// continue ;
23734: GO 23692
// PrepareHuman ( false , i , skill ) ;
23736: LD_INT 0
23738: PPUSH
23739: LD_VAR 0 8
23743: PPUSH
23744: LD_VAR 0 4
23748: PPUSH
23749: CALL_OW 380
// un := CreateHuman ;
23753: LD_ADDR_VAR 0 14
23757: PUSH
23758: CALL_OW 44
23762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23763: LD_VAR 0 14
23767: PPUSH
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 250
23777: PPUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL_OW 251
23787: PPUSH
23788: LD_INT 10
23790: PPUSH
23791: LD_INT 0
23793: PPUSH
23794: CALL_OW 50
// result := result ^ un ;
23798: LD_ADDR_VAR 0 7
23802: PUSH
23803: LD_VAR 0 7
23807: PUSH
23808: LD_VAR 0 14
23812: ADD
23813: ST_TO_ADDR
// end ;
23814: GO 23692
23816: POP
23817: POP
// end ; end ;
23818: LD_VAR 0 7
23822: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23823: LD_INT 0
23825: PPUSH
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
23836: PPUSH
23837: PPUSH
23838: PPUSH
23839: PPUSH
23840: PPUSH
// result := false ;
23841: LD_ADDR_VAR 0 3
23845: PUSH
23846: LD_INT 0
23848: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23849: LD_VAR 0 1
23853: NOT
23854: PUSH
23855: LD_VAR 0 1
23859: PPUSH
23860: CALL_OW 266
23864: PUSH
23865: LD_INT 32
23867: PUSH
23868: LD_INT 33
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: IN
23875: NOT
23876: OR
23877: IFFALSE 23881
// exit ;
23879: GO 24990
// nat := GetNation ( tower ) ;
23881: LD_ADDR_VAR 0 12
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 248
23895: ST_TO_ADDR
// side := GetSide ( tower ) ;
23896: LD_ADDR_VAR 0 16
23900: PUSH
23901: LD_VAR 0 1
23905: PPUSH
23906: CALL_OW 255
23910: ST_TO_ADDR
// x := GetX ( tower ) ;
23911: LD_ADDR_VAR 0 10
23915: PUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 250
23925: ST_TO_ADDR
// y := GetY ( tower ) ;
23926: LD_ADDR_VAR 0 11
23930: PUSH
23931: LD_VAR 0 1
23935: PPUSH
23936: CALL_OW 251
23940: ST_TO_ADDR
// if not x or not y then
23941: LD_VAR 0 10
23945: NOT
23946: PUSH
23947: LD_VAR 0 11
23951: NOT
23952: OR
23953: IFFALSE 23957
// exit ;
23955: GO 24990
// weapon := 0 ;
23957: LD_ADDR_VAR 0 18
23961: PUSH
23962: LD_INT 0
23964: ST_TO_ADDR
// fac_list := [ ] ;
23965: LD_ADDR_VAR 0 17
23969: PUSH
23970: EMPTY
23971: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23972: LD_ADDR_VAR 0 6
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 274
23986: PPUSH
23987: LD_VAR 0 2
23991: PPUSH
23992: LD_INT 0
23994: PPUSH
23995: CALL 21453 0 3
23999: PPUSH
24000: LD_INT 30
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PPUSH
24010: CALL_OW 72
24014: ST_TO_ADDR
// if not factories then
24015: LD_VAR 0 6
24019: NOT
24020: IFFALSE 24024
// exit ;
24022: GO 24990
// for i in factories do
24024: LD_ADDR_VAR 0 8
24028: PUSH
24029: LD_VAR 0 6
24033: PUSH
24034: FOR_IN
24035: IFFALSE 24060
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24037: LD_ADDR_VAR 0 17
24041: PUSH
24042: LD_VAR 0 17
24046: PUSH
24047: LD_VAR 0 8
24051: PPUSH
24052: CALL_OW 478
24056: UNION
24057: ST_TO_ADDR
24058: GO 24034
24060: POP
24061: POP
// if not fac_list then
24062: LD_VAR 0 17
24066: NOT
24067: IFFALSE 24071
// exit ;
24069: GO 24990
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_INT 4
24078: PUSH
24079: LD_INT 5
24081: PUSH
24082: LD_INT 9
24084: PUSH
24085: LD_INT 10
24087: PUSH
24088: LD_INT 6
24090: PUSH
24091: LD_INT 7
24093: PUSH
24094: LD_INT 11
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 27
24108: PUSH
24109: LD_INT 28
24111: PUSH
24112: LD_INT 26
24114: PUSH
24115: LD_INT 30
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 43
24126: PUSH
24127: LD_INT 44
24129: PUSH
24130: LD_INT 46
24132: PUSH
24133: LD_INT 45
24135: PUSH
24136: LD_INT 47
24138: PUSH
24139: LD_INT 49
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: PUSH
24155: LD_VAR 0 12
24159: ARRAY
24160: ST_TO_ADDR
// list := list isect fac_list ;
24161: LD_ADDR_VAR 0 5
24165: PUSH
24166: LD_VAR 0 5
24170: PUSH
24171: LD_VAR 0 17
24175: ISECT
24176: ST_TO_ADDR
// if not list then
24177: LD_VAR 0 5
24181: NOT
24182: IFFALSE 24186
// exit ;
24184: GO 24990
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24186: LD_VAR 0 12
24190: PUSH
24191: LD_INT 3
24193: EQUAL
24194: PUSH
24195: LD_INT 49
24197: PUSH
24198: LD_VAR 0 5
24202: IN
24203: AND
24204: PUSH
24205: LD_INT 31
24207: PPUSH
24208: LD_VAR 0 16
24212: PPUSH
24213: CALL_OW 321
24217: PUSH
24218: LD_INT 2
24220: EQUAL
24221: AND
24222: IFFALSE 24282
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24224: LD_INT 22
24226: PUSH
24227: LD_VAR 0 16
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 35
24238: PUSH
24239: LD_INT 49
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 91
24248: PUSH
24249: LD_VAR 0 1
24253: PUSH
24254: LD_INT 10
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: PPUSH
24267: CALL_OW 69
24271: NOT
24272: IFFALSE 24282
// weapon := ru_time_lapser ;
24274: LD_ADDR_VAR 0 18
24278: PUSH
24279: LD_INT 49
24281: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24282: LD_VAR 0 12
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: IN
24297: PUSH
24298: LD_INT 11
24300: PUSH
24301: LD_VAR 0 5
24305: IN
24306: PUSH
24307: LD_INT 30
24309: PUSH
24310: LD_VAR 0 5
24314: IN
24315: OR
24316: AND
24317: PUSH
24318: LD_INT 6
24320: PPUSH
24321: LD_VAR 0 16
24325: PPUSH
24326: CALL_OW 321
24330: PUSH
24331: LD_INT 2
24333: EQUAL
24334: AND
24335: IFFALSE 24500
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24337: LD_INT 22
24339: PUSH
24340: LD_VAR 0 16
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 35
24354: PUSH
24355: LD_INT 11
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 35
24364: PUSH
24365: LD_INT 30
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 91
24379: PUSH
24380: LD_VAR 0 1
24384: PUSH
24385: LD_INT 18
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 69
24402: NOT
24403: PUSH
24404: LD_INT 22
24406: PUSH
24407: LD_VAR 0 16
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 30
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 30
24431: PUSH
24432: LD_INT 33
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 91
24446: PUSH
24447: LD_VAR 0 1
24451: PUSH
24452: LD_INT 12
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: PUSH
24473: LD_INT 2
24475: GREATER
24476: AND
24477: IFFALSE 24500
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24479: LD_ADDR_VAR 0 18
24483: PUSH
24484: LD_INT 11
24486: PUSH
24487: LD_INT 30
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_VAR 0 12
24498: ARRAY
24499: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24500: LD_VAR 0 18
24504: NOT
24505: PUSH
24506: LD_INT 40
24508: PPUSH
24509: LD_VAR 0 16
24513: PPUSH
24514: CALL_OW 321
24518: PUSH
24519: LD_INT 2
24521: EQUAL
24522: AND
24523: PUSH
24524: LD_INT 7
24526: PUSH
24527: LD_VAR 0 5
24531: IN
24532: PUSH
24533: LD_INT 28
24535: PUSH
24536: LD_VAR 0 5
24540: IN
24541: OR
24542: PUSH
24543: LD_INT 45
24545: PUSH
24546: LD_VAR 0 5
24550: IN
24551: OR
24552: AND
24553: IFFALSE 24807
// begin hex := GetHexInfo ( x , y ) ;
24555: LD_ADDR_VAR 0 4
24559: PUSH
24560: LD_VAR 0 10
24564: PPUSH
24565: LD_VAR 0 11
24569: PPUSH
24570: CALL_OW 546
24574: ST_TO_ADDR
// if hex [ 1 ] then
24575: LD_VAR 0 4
24579: PUSH
24580: LD_INT 1
24582: ARRAY
24583: IFFALSE 24587
// exit ;
24585: GO 24990
// height := hex [ 2 ] ;
24587: LD_ADDR_VAR 0 15
24591: PUSH
24592: LD_VAR 0 4
24596: PUSH
24597: LD_INT 2
24599: ARRAY
24600: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24601: LD_ADDR_VAR 0 14
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: LD_INT 5
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: ST_TO_ADDR
// for i in tmp do
24624: LD_ADDR_VAR 0 8
24628: PUSH
24629: LD_VAR 0 14
24633: PUSH
24634: FOR_IN
24635: IFFALSE 24805
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24637: LD_ADDR_VAR 0 9
24641: PUSH
24642: LD_VAR 0 10
24646: PPUSH
24647: LD_VAR 0 8
24651: PPUSH
24652: LD_INT 5
24654: PPUSH
24655: CALL_OW 272
24659: PUSH
24660: LD_VAR 0 11
24664: PPUSH
24665: LD_VAR 0 8
24669: PPUSH
24670: LD_INT 5
24672: PPUSH
24673: CALL_OW 273
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24682: LD_VAR 0 9
24686: PUSH
24687: LD_INT 1
24689: ARRAY
24690: PPUSH
24691: LD_VAR 0 9
24695: PUSH
24696: LD_INT 2
24698: ARRAY
24699: PPUSH
24700: CALL_OW 488
24704: IFFALSE 24803
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24706: LD_ADDR_VAR 0 4
24710: PUSH
24711: LD_VAR 0 9
24715: PUSH
24716: LD_INT 1
24718: ARRAY
24719: PPUSH
24720: LD_VAR 0 9
24724: PUSH
24725: LD_INT 2
24727: ARRAY
24728: PPUSH
24729: CALL_OW 546
24733: ST_TO_ADDR
// if hex [ 1 ] then
24734: LD_VAR 0 4
24738: PUSH
24739: LD_INT 1
24741: ARRAY
24742: IFFALSE 24746
// continue ;
24744: GO 24634
// h := hex [ 2 ] ;
24746: LD_ADDR_VAR 0 13
24750: PUSH
24751: LD_VAR 0 4
24755: PUSH
24756: LD_INT 2
24758: ARRAY
24759: ST_TO_ADDR
// if h + 7 < height then
24760: LD_VAR 0 13
24764: PUSH
24765: LD_INT 7
24767: PLUS
24768: PUSH
24769: LD_VAR 0 15
24773: LESS
24774: IFFALSE 24803
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24776: LD_ADDR_VAR 0 18
24780: PUSH
24781: LD_INT 7
24783: PUSH
24784: LD_INT 28
24786: PUSH
24787: LD_INT 45
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: PUSH
24795: LD_VAR 0 12
24799: ARRAY
24800: ST_TO_ADDR
// break ;
24801: GO 24805
// end ; end ; end ;
24803: GO 24634
24805: POP
24806: POP
// end ; if not weapon then
24807: LD_VAR 0 18
24811: NOT
24812: IFFALSE 24872
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24814: LD_ADDR_VAR 0 5
24818: PUSH
24819: LD_VAR 0 5
24823: PUSH
24824: LD_INT 11
24826: PUSH
24827: LD_INT 30
24829: PUSH
24830: LD_INT 49
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: DIFF
24838: ST_TO_ADDR
// if not list then
24839: LD_VAR 0 5
24843: NOT
24844: IFFALSE 24848
// exit ;
24846: GO 24990
// weapon := list [ rand ( 1 , list ) ] ;
24848: LD_ADDR_VAR 0 18
24852: PUSH
24853: LD_VAR 0 5
24857: PUSH
24858: LD_INT 1
24860: PPUSH
24861: LD_VAR 0 5
24865: PPUSH
24866: CALL_OW 12
24870: ARRAY
24871: ST_TO_ADDR
// end ; if weapon then
24872: LD_VAR 0 18
24876: IFFALSE 24990
// begin tmp := CostOfWeapon ( weapon ) ;
24878: LD_ADDR_VAR 0 14
24882: PUSH
24883: LD_VAR 0 18
24887: PPUSH
24888: CALL_OW 451
24892: ST_TO_ADDR
// j := GetBase ( tower ) ;
24893: LD_ADDR_VAR 0 9
24897: PUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 274
24907: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24908: LD_VAR 0 9
24912: PPUSH
24913: LD_INT 1
24915: PPUSH
24916: CALL_OW 275
24920: PUSH
24921: LD_VAR 0 14
24925: PUSH
24926: LD_INT 1
24928: ARRAY
24929: GREATEREQUAL
24930: PUSH
24931: LD_VAR 0 9
24935: PPUSH
24936: LD_INT 2
24938: PPUSH
24939: CALL_OW 275
24943: PUSH
24944: LD_VAR 0 14
24948: PUSH
24949: LD_INT 2
24951: ARRAY
24952: GREATEREQUAL
24953: AND
24954: PUSH
24955: LD_VAR 0 9
24959: PPUSH
24960: LD_INT 3
24962: PPUSH
24963: CALL_OW 275
24967: PUSH
24968: LD_VAR 0 14
24972: PUSH
24973: LD_INT 3
24975: ARRAY
24976: GREATEREQUAL
24977: AND
24978: IFFALSE 24990
// result := weapon ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_VAR 0 18
24989: ST_TO_ADDR
// end ; end ;
24990: LD_VAR 0 3
24994: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
// result := true ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 1
25006: ST_TO_ADDR
// if array1 = array2 then
25007: LD_VAR 0 1
25011: PUSH
25012: LD_VAR 0 2
25016: EQUAL
25017: IFFALSE 25077
// begin for i = 1 to array1 do
25019: LD_ADDR_VAR 0 4
25023: PUSH
25024: DOUBLE
25025: LD_INT 1
25027: DEC
25028: ST_TO_ADDR
25029: LD_VAR 0 1
25033: PUSH
25034: FOR_TO
25035: IFFALSE 25073
// if array1 [ i ] <> array2 [ i ] then
25037: LD_VAR 0 1
25041: PUSH
25042: LD_VAR 0 4
25046: ARRAY
25047: PUSH
25048: LD_VAR 0 2
25052: PUSH
25053: LD_VAR 0 4
25057: ARRAY
25058: NONEQUAL
25059: IFFALSE 25071
// begin result := false ;
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// break ;
25069: GO 25073
// end ;
25071: GO 25034
25073: POP
25074: POP
// end else
25075: GO 25085
// result := false ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 0
25084: ST_TO_ADDR
// end ;
25085: LD_VAR 0 3
25089: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25090: LD_INT 0
25092: PPUSH
25093: PPUSH
// if not array1 or not array2 then
25094: LD_VAR 0 1
25098: NOT
25099: PUSH
25100: LD_VAR 0 2
25104: NOT
25105: OR
25106: IFFALSE 25110
// exit ;
25108: GO 25174
// result := true ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_INT 1
25117: ST_TO_ADDR
// for i = 1 to array1 do
25118: LD_ADDR_VAR 0 4
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_VAR 0 1
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25172
// if array1 [ i ] <> array2 [ i ] then
25136: LD_VAR 0 1
25140: PUSH
25141: LD_VAR 0 4
25145: ARRAY
25146: PUSH
25147: LD_VAR 0 2
25151: PUSH
25152: LD_VAR 0 4
25156: ARRAY
25157: NONEQUAL
25158: IFFALSE 25170
// begin result := false ;
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 0
25167: ST_TO_ADDR
// break ;
25168: GO 25172
// end ;
25170: GO 25133
25172: POP
25173: POP
// end ;
25174: LD_VAR 0 3
25178: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
25183: PPUSH
// pom := GetBase ( fac ) ;
25184: LD_ADDR_VAR 0 5
25188: PUSH
25189: LD_VAR 0 1
25193: PPUSH
25194: CALL_OW 274
25198: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25199: LD_ADDR_VAR 0 4
25203: PUSH
25204: LD_VAR 0 2
25208: PUSH
25209: LD_INT 1
25211: ARRAY
25212: PPUSH
25213: LD_VAR 0 2
25217: PUSH
25218: LD_INT 2
25220: ARRAY
25221: PPUSH
25222: LD_VAR 0 2
25226: PUSH
25227: LD_INT 3
25229: ARRAY
25230: PPUSH
25231: LD_VAR 0 2
25235: PUSH
25236: LD_INT 4
25238: ARRAY
25239: PPUSH
25240: CALL_OW 449
25244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_VAR 0 5
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 275
25262: PUSH
25263: LD_VAR 0 4
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: GREATEREQUAL
25272: PUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_INT 2
25280: PPUSH
25281: CALL_OW 275
25285: PUSH
25286: LD_VAR 0 4
25290: PUSH
25291: LD_INT 2
25293: ARRAY
25294: GREATEREQUAL
25295: AND
25296: PUSH
25297: LD_VAR 0 5
25301: PPUSH
25302: LD_INT 3
25304: PPUSH
25305: CALL_OW 275
25309: PUSH
25310: LD_VAR 0 4
25314: PUSH
25315: LD_INT 3
25317: ARRAY
25318: GREATEREQUAL
25319: AND
25320: ST_TO_ADDR
// end ;
25321: LD_VAR 0 3
25325: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
// pom := GetBase ( building ) ;
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 274
25346: ST_TO_ADDR
// if not pom then
25347: LD_VAR 0 3
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25526
// btype := GetBType ( building ) ;
25356: LD_ADDR_VAR 0 5
25360: PUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: CALL_OW 266
25370: ST_TO_ADDR
// if btype = b_armoury then
25371: LD_VAR 0 5
25375: PUSH
25376: LD_INT 4
25378: EQUAL
25379: IFFALSE 25389
// btype := b_barracks ;
25381: LD_ADDR_VAR 0 5
25385: PUSH
25386: LD_INT 5
25388: ST_TO_ADDR
// if btype = b_depot then
25389: LD_VAR 0 5
25393: PUSH
25394: LD_INT 0
25396: EQUAL
25397: IFFALSE 25407
// btype := b_warehouse ;
25399: LD_ADDR_VAR 0 5
25403: PUSH
25404: LD_INT 1
25406: ST_TO_ADDR
// if btype = b_workshop then
25407: LD_VAR 0 5
25411: PUSH
25412: LD_INT 2
25414: EQUAL
25415: IFFALSE 25425
// btype := b_factory ;
25417: LD_ADDR_VAR 0 5
25421: PUSH
25422: LD_INT 3
25424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25425: LD_ADDR_VAR 0 4
25429: PUSH
25430: LD_VAR 0 5
25434: PPUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 248
25444: PPUSH
25445: CALL_OW 450
25449: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25450: LD_ADDR_VAR 0 2
25454: PUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: CALL_OW 275
25467: PUSH
25468: LD_VAR 0 4
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: GREATEREQUAL
25477: PUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: LD_INT 2
25485: PPUSH
25486: CALL_OW 275
25490: PUSH
25491: LD_VAR 0 4
25495: PUSH
25496: LD_INT 2
25498: ARRAY
25499: GREATEREQUAL
25500: AND
25501: PUSH
25502: LD_VAR 0 3
25506: PPUSH
25507: LD_INT 3
25509: PPUSH
25510: CALL_OW 275
25514: PUSH
25515: LD_VAR 0 4
25519: PUSH
25520: LD_INT 3
25522: ARRAY
25523: GREATEREQUAL
25524: AND
25525: ST_TO_ADDR
// end ;
25526: LD_VAR 0 2
25530: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25531: LD_INT 0
25533: PPUSH
25534: PPUSH
25535: PPUSH
// pom := GetBase ( building ) ;
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 274
25550: ST_TO_ADDR
// if not pom then
25551: LD_VAR 0 4
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 25661
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25560: LD_ADDR_VAR 0 5
25564: PUSH
25565: LD_VAR 0 2
25569: PPUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 248
25579: PPUSH
25580: CALL_OW 450
25584: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25585: LD_ADDR_VAR 0 3
25589: PUSH
25590: LD_VAR 0 4
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: CALL_OW 275
25602: PUSH
25603: LD_VAR 0 5
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: GREATEREQUAL
25612: PUSH
25613: LD_VAR 0 4
25617: PPUSH
25618: LD_INT 2
25620: PPUSH
25621: CALL_OW 275
25625: PUSH
25626: LD_VAR 0 5
25630: PUSH
25631: LD_INT 2
25633: ARRAY
25634: GREATEREQUAL
25635: AND
25636: PUSH
25637: LD_VAR 0 4
25641: PPUSH
25642: LD_INT 3
25644: PPUSH
25645: CALL_OW 275
25649: PUSH
25650: LD_VAR 0 5
25654: PUSH
25655: LD_INT 3
25657: ARRAY
25658: GREATEREQUAL
25659: AND
25660: ST_TO_ADDR
// end ;
25661: LD_VAR 0 3
25665: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
25677: PPUSH
25678: PPUSH
// result := false ;
25679: LD_ADDR_VAR 0 8
25683: PUSH
25684: LD_INT 0
25686: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25687: LD_VAR 0 5
25691: NOT
25692: PUSH
25693: LD_VAR 0 1
25697: NOT
25698: OR
25699: PUSH
25700: LD_VAR 0 2
25704: NOT
25705: OR
25706: PUSH
25707: LD_VAR 0 3
25711: NOT
25712: OR
25713: IFFALSE 25717
// exit ;
25715: GO 26531
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25717: LD_ADDR_VAR 0 14
25721: PUSH
25722: LD_VAR 0 1
25726: PPUSH
25727: LD_VAR 0 2
25731: PPUSH
25732: LD_VAR 0 3
25736: PPUSH
25737: LD_VAR 0 4
25741: PPUSH
25742: LD_VAR 0 5
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: PPUSH
25751: CALL_OW 248
25755: PPUSH
25756: LD_INT 0
25758: PPUSH
25759: CALL 27768 0 6
25763: ST_TO_ADDR
// if not hexes then
25764: LD_VAR 0 14
25768: NOT
25769: IFFALSE 25773
// exit ;
25771: GO 26531
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25773: LD_ADDR_VAR 0 17
25777: PUSH
25778: LD_VAR 0 5
25782: PPUSH
25783: LD_INT 22
25785: PUSH
25786: LD_VAR 0 13
25790: PPUSH
25791: CALL_OW 255
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 30
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 72
25836: ST_TO_ADDR
// for i = 1 to hexes do
25837: LD_ADDR_VAR 0 9
25841: PUSH
25842: DOUBLE
25843: LD_INT 1
25845: DEC
25846: ST_TO_ADDR
25847: LD_VAR 0 14
25851: PUSH
25852: FOR_TO
25853: IFFALSE 26529
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25855: LD_ADDR_VAR 0 13
25859: PUSH
25860: LD_VAR 0 14
25864: PUSH
25865: LD_VAR 0 9
25869: ARRAY
25870: PUSH
25871: LD_INT 1
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 14
25879: PUSH
25880: LD_VAR 0 9
25884: ARRAY
25885: PUSH
25886: LD_INT 2
25888: ARRAY
25889: PPUSH
25890: CALL_OW 428
25894: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25895: LD_VAR 0 14
25899: PUSH
25900: LD_VAR 0 9
25904: ARRAY
25905: PUSH
25906: LD_INT 1
25908: ARRAY
25909: PPUSH
25910: LD_VAR 0 14
25914: PUSH
25915: LD_VAR 0 9
25919: ARRAY
25920: PUSH
25921: LD_INT 2
25923: ARRAY
25924: PPUSH
25925: CALL_OW 351
25929: PUSH
25930: LD_VAR 0 14
25934: PUSH
25935: LD_VAR 0 9
25939: ARRAY
25940: PUSH
25941: LD_INT 1
25943: ARRAY
25944: PPUSH
25945: LD_VAR 0 14
25949: PUSH
25950: LD_VAR 0 9
25954: ARRAY
25955: PUSH
25956: LD_INT 2
25958: ARRAY
25959: PPUSH
25960: CALL_OW 488
25964: NOT
25965: OR
25966: PUSH
25967: LD_VAR 0 13
25971: PPUSH
25972: CALL_OW 247
25976: PUSH
25977: LD_INT 3
25979: EQUAL
25980: OR
25981: IFFALSE 25987
// exit ;
25983: POP
25984: POP
25985: GO 26531
// if not tmp then
25987: LD_VAR 0 13
25991: NOT
25992: IFFALSE 25996
// continue ;
25994: GO 25852
// result := true ;
25996: LD_ADDR_VAR 0 8
26000: PUSH
26001: LD_INT 1
26003: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26004: LD_VAR 0 6
26008: PUSH
26009: LD_VAR 0 13
26013: PPUSH
26014: CALL_OW 247
26018: PUSH
26019: LD_INT 2
26021: EQUAL
26022: AND
26023: PUSH
26024: LD_VAR 0 13
26028: PPUSH
26029: CALL_OW 263
26033: PUSH
26034: LD_INT 1
26036: EQUAL
26037: AND
26038: IFFALSE 26202
// begin if IsDrivenBy ( tmp ) then
26040: LD_VAR 0 13
26044: PPUSH
26045: CALL_OW 311
26049: IFFALSE 26053
// continue ;
26051: GO 25852
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26053: LD_VAR 0 6
26057: PPUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 60
26063: PUSH
26064: EMPTY
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: LD_INT 55
26076: PUSH
26077: EMPTY
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PPUSH
26088: CALL_OW 72
26092: IFFALSE 26200
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26094: LD_ADDR_VAR 0 18
26098: PUSH
26099: LD_VAR 0 6
26103: PPUSH
26104: LD_INT 3
26106: PUSH
26107: LD_INT 60
26109: PUSH
26110: EMPTY
26111: LIST
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 55
26122: PUSH
26123: EMPTY
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL_OW 72
26138: PUSH
26139: LD_INT 1
26141: ARRAY
26142: ST_TO_ADDR
// if IsInUnit ( driver ) then
26143: LD_VAR 0 18
26147: PPUSH
26148: CALL_OW 310
26152: IFFALSE 26163
// ComExit ( driver ) ;
26154: LD_VAR 0 18
26158: PPUSH
26159: CALL 50896 0 1
// AddComEnterUnit ( driver , tmp ) ;
26163: LD_VAR 0 18
26167: PPUSH
26168: LD_VAR 0 13
26172: PPUSH
26173: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26177: LD_VAR 0 18
26181: PPUSH
26182: LD_VAR 0 7
26186: PPUSH
26187: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26191: LD_VAR 0 18
26195: PPUSH
26196: CALL_OW 181
// end ; continue ;
26200: GO 25852
// end ; if not cleaners or not tmp in cleaners then
26202: LD_VAR 0 6
26206: NOT
26207: PUSH
26208: LD_VAR 0 13
26212: PUSH
26213: LD_VAR 0 6
26217: IN
26218: NOT
26219: OR
26220: IFFALSE 26527
// begin if dep then
26222: LD_VAR 0 17
26226: IFFALSE 26362
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26228: LD_ADDR_VAR 0 16
26232: PUSH
26233: LD_VAR 0 17
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PPUSH
26242: CALL_OW 250
26246: PPUSH
26247: LD_VAR 0 17
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: PPUSH
26256: CALL_OW 254
26260: PPUSH
26261: LD_INT 5
26263: PPUSH
26264: CALL_OW 272
26268: PUSH
26269: LD_VAR 0 17
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: PPUSH
26278: CALL_OW 251
26282: PPUSH
26283: LD_VAR 0 17
26287: PUSH
26288: LD_INT 1
26290: ARRAY
26291: PPUSH
26292: CALL_OW 254
26296: PPUSH
26297: LD_INT 5
26299: PPUSH
26300: CALL_OW 273
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26309: LD_VAR 0 16
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PPUSH
26318: LD_VAR 0 16
26322: PUSH
26323: LD_INT 2
26325: ARRAY
26326: PPUSH
26327: CALL_OW 488
26331: IFFALSE 26362
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26333: LD_VAR 0 13
26337: PPUSH
26338: LD_VAR 0 16
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PPUSH
26347: LD_VAR 0 16
26351: PUSH
26352: LD_INT 2
26354: ARRAY
26355: PPUSH
26356: CALL_OW 111
// continue ;
26360: GO 25852
// end ; end ; r := GetDir ( tmp ) ;
26362: LD_ADDR_VAR 0 15
26366: PUSH
26367: LD_VAR 0 13
26371: PPUSH
26372: CALL_OW 254
26376: ST_TO_ADDR
// if r = 5 then
26377: LD_VAR 0 15
26381: PUSH
26382: LD_INT 5
26384: EQUAL
26385: IFFALSE 26395
// r := 0 ;
26387: LD_ADDR_VAR 0 15
26391: PUSH
26392: LD_INT 0
26394: ST_TO_ADDR
// for j = r to 5 do
26395: LD_ADDR_VAR 0 10
26399: PUSH
26400: DOUBLE
26401: LD_VAR 0 15
26405: DEC
26406: ST_TO_ADDR
26407: LD_INT 5
26409: PUSH
26410: FOR_TO
26411: IFFALSE 26525
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26413: LD_ADDR_VAR 0 11
26417: PUSH
26418: LD_VAR 0 13
26422: PPUSH
26423: CALL_OW 250
26427: PPUSH
26428: LD_VAR 0 10
26432: PPUSH
26433: LD_INT 2
26435: PPUSH
26436: CALL_OW 272
26440: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26441: LD_ADDR_VAR 0 12
26445: PUSH
26446: LD_VAR 0 13
26450: PPUSH
26451: CALL_OW 251
26455: PPUSH
26456: LD_VAR 0 10
26460: PPUSH
26461: LD_INT 2
26463: PPUSH
26464: CALL_OW 273
26468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26469: LD_VAR 0 11
26473: PPUSH
26474: LD_VAR 0 12
26478: PPUSH
26479: CALL_OW 488
26483: PUSH
26484: LD_VAR 0 11
26488: PPUSH
26489: LD_VAR 0 12
26493: PPUSH
26494: CALL_OW 428
26498: NOT
26499: AND
26500: IFFALSE 26523
// begin ComMoveXY ( tmp , _x , _y ) ;
26502: LD_VAR 0 13
26506: PPUSH
26507: LD_VAR 0 11
26511: PPUSH
26512: LD_VAR 0 12
26516: PPUSH
26517: CALL_OW 111
// break ;
26521: GO 26525
// end ; end ;
26523: GO 26410
26525: POP
26526: POP
// end ; end ;
26527: GO 25852
26529: POP
26530: POP
// end ;
26531: LD_VAR 0 8
26535: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26536: LD_INT 0
26538: PPUSH
// result := true ;
26539: LD_ADDR_VAR 0 3
26543: PUSH
26544: LD_INT 1
26546: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26547: LD_VAR 0 2
26551: PUSH
26552: LD_INT 24
26554: DOUBLE
26555: EQUAL
26556: IFTRUE 26566
26558: LD_INT 33
26560: DOUBLE
26561: EQUAL
26562: IFTRUE 26566
26564: GO 26591
26566: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26567: LD_ADDR_VAR 0 3
26571: PUSH
26572: LD_INT 32
26574: PPUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 321
26584: PUSH
26585: LD_INT 2
26587: EQUAL
26588: ST_TO_ADDR
26589: GO 26911
26591: LD_INT 20
26593: DOUBLE
26594: EQUAL
26595: IFTRUE 26599
26597: GO 26624
26599: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_INT 6
26607: PPUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 321
26617: PUSH
26618: LD_INT 2
26620: EQUAL
26621: ST_TO_ADDR
26622: GO 26911
26624: LD_INT 22
26626: DOUBLE
26627: EQUAL
26628: IFTRUE 26638
26630: LD_INT 36
26632: DOUBLE
26633: EQUAL
26634: IFTRUE 26638
26636: GO 26663
26638: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26639: LD_ADDR_VAR 0 3
26643: PUSH
26644: LD_INT 15
26646: PPUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 321
26656: PUSH
26657: LD_INT 2
26659: EQUAL
26660: ST_TO_ADDR
26661: GO 26911
26663: LD_INT 30
26665: DOUBLE
26666: EQUAL
26667: IFTRUE 26671
26669: GO 26696
26671: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26672: LD_ADDR_VAR 0 3
26676: PUSH
26677: LD_INT 20
26679: PPUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 321
26689: PUSH
26690: LD_INT 2
26692: EQUAL
26693: ST_TO_ADDR
26694: GO 26911
26696: LD_INT 28
26698: DOUBLE
26699: EQUAL
26700: IFTRUE 26710
26702: LD_INT 21
26704: DOUBLE
26705: EQUAL
26706: IFTRUE 26710
26708: GO 26735
26710: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26711: LD_ADDR_VAR 0 3
26715: PUSH
26716: LD_INT 21
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 321
26728: PUSH
26729: LD_INT 2
26731: EQUAL
26732: ST_TO_ADDR
26733: GO 26911
26735: LD_INT 16
26737: DOUBLE
26738: EQUAL
26739: IFTRUE 26743
26741: GO 26770
26743: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26744: LD_ADDR_VAR 0 3
26748: PUSH
26749: LD_EXP 116
26753: PPUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 321
26763: PUSH
26764: LD_INT 2
26766: EQUAL
26767: ST_TO_ADDR
26768: GO 26911
26770: LD_INT 19
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26784
26776: LD_INT 23
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26811
26784: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_EXP 115
26794: PPUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 321
26804: PUSH
26805: LD_INT 2
26807: EQUAL
26808: ST_TO_ADDR
26809: GO 26911
26811: LD_INT 17
26813: DOUBLE
26814: EQUAL
26815: IFTRUE 26819
26817: GO 26844
26819: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26820: LD_ADDR_VAR 0 3
26824: PUSH
26825: LD_INT 39
26827: PPUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 321
26837: PUSH
26838: LD_INT 2
26840: EQUAL
26841: ST_TO_ADDR
26842: GO 26911
26844: LD_INT 18
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26852
26850: GO 26877
26852: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26853: LD_ADDR_VAR 0 3
26857: PUSH
26858: LD_INT 40
26860: PPUSH
26861: LD_VAR 0 1
26865: PPUSH
26866: CALL_OW 321
26870: PUSH
26871: LD_INT 2
26873: EQUAL
26874: ST_TO_ADDR
26875: GO 26911
26877: LD_INT 27
26879: DOUBLE
26880: EQUAL
26881: IFTRUE 26885
26883: GO 26910
26885: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26886: LD_ADDR_VAR 0 3
26890: PUSH
26891: LD_INT 35
26893: PPUSH
26894: LD_VAR 0 1
26898: PPUSH
26899: CALL_OW 321
26903: PUSH
26904: LD_INT 2
26906: EQUAL
26907: ST_TO_ADDR
26908: GO 26911
26910: POP
// end ;
26911: LD_VAR 0 3
26915: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26916: LD_INT 0
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
// result := false ;
26929: LD_ADDR_VAR 0 6
26933: PUSH
26934: LD_INT 0
26936: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26937: LD_VAR 0 1
26941: NOT
26942: PUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 266
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: IN
26963: NOT
26964: OR
26965: PUSH
26966: LD_VAR 0 2
26970: NOT
26971: OR
26972: PUSH
26973: LD_VAR 0 5
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: LD_INT 4
26992: PUSH
26993: LD_INT 5
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: IN
27004: NOT
27005: OR
27006: PUSH
27007: LD_VAR 0 3
27011: PPUSH
27012: LD_VAR 0 4
27016: PPUSH
27017: CALL_OW 488
27021: NOT
27022: OR
27023: IFFALSE 27027
// exit ;
27025: GO 27763
// side := GetSide ( depot ) ;
27027: LD_ADDR_VAR 0 9
27031: PUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL_OW 255
27041: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27042: LD_VAR 0 9
27046: PPUSH
27047: LD_VAR 0 2
27051: PPUSH
27052: CALL 26536 0 2
27056: NOT
27057: IFFALSE 27061
// exit ;
27059: GO 27763
// pom := GetBase ( depot ) ;
27061: LD_ADDR_VAR 0 10
27065: PUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 274
27075: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27076: LD_ADDR_VAR 0 11
27080: PUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 248
27095: PPUSH
27096: CALL_OW 450
27100: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27101: LD_VAR 0 10
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 275
27113: PUSH
27114: LD_VAR 0 11
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: GREATEREQUAL
27123: PUSH
27124: LD_VAR 0 10
27128: PPUSH
27129: LD_INT 2
27131: PPUSH
27132: CALL_OW 275
27136: PUSH
27137: LD_VAR 0 11
27141: PUSH
27142: LD_INT 2
27144: ARRAY
27145: GREATEREQUAL
27146: AND
27147: PUSH
27148: LD_VAR 0 10
27152: PPUSH
27153: LD_INT 3
27155: PPUSH
27156: CALL_OW 275
27160: PUSH
27161: LD_VAR 0 11
27165: PUSH
27166: LD_INT 3
27168: ARRAY
27169: GREATEREQUAL
27170: AND
27171: NOT
27172: IFFALSE 27176
// exit ;
27174: GO 27763
// if GetBType ( depot ) = b_depot then
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 266
27185: PUSH
27186: LD_INT 0
27188: EQUAL
27189: IFFALSE 27201
// dist := 28 else
27191: LD_ADDR_VAR 0 14
27195: PUSH
27196: LD_INT 28
27198: ST_TO_ADDR
27199: GO 27209
// dist := 36 ;
27201: LD_ADDR_VAR 0 14
27205: PUSH
27206: LD_INT 36
27208: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27209: LD_VAR 0 1
27213: PPUSH
27214: LD_VAR 0 3
27218: PPUSH
27219: LD_VAR 0 4
27223: PPUSH
27224: CALL_OW 297
27228: PUSH
27229: LD_VAR 0 14
27233: GREATER
27234: IFFALSE 27238
// exit ;
27236: GO 27763
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27238: LD_ADDR_VAR 0 12
27242: PUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_VAR 0 3
27252: PPUSH
27253: LD_VAR 0 4
27257: PPUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 248
27272: PPUSH
27273: LD_INT 0
27275: PPUSH
27276: CALL 27768 0 6
27280: ST_TO_ADDR
// if not hexes then
27281: LD_VAR 0 12
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27763
// hex := GetHexInfo ( x , y ) ;
27290: LD_ADDR_VAR 0 15
27294: PUSH
27295: LD_VAR 0 3
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: CALL_OW 546
27309: ST_TO_ADDR
// if hex [ 1 ] then
27310: LD_VAR 0 15
27314: PUSH
27315: LD_INT 1
27317: ARRAY
27318: IFFALSE 27322
// exit ;
27320: GO 27763
// height := hex [ 2 ] ;
27322: LD_ADDR_VAR 0 13
27326: PUSH
27327: LD_VAR 0 15
27331: PUSH
27332: LD_INT 2
27334: ARRAY
27335: ST_TO_ADDR
// for i = 1 to hexes do
27336: LD_ADDR_VAR 0 7
27340: PUSH
27341: DOUBLE
27342: LD_INT 1
27344: DEC
27345: ST_TO_ADDR
27346: LD_VAR 0 12
27350: PUSH
27351: FOR_TO
27352: IFFALSE 27682
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27354: LD_VAR 0 12
27358: PUSH
27359: LD_VAR 0 7
27363: ARRAY
27364: PUSH
27365: LD_INT 1
27367: ARRAY
27368: PPUSH
27369: LD_VAR 0 12
27373: PUSH
27374: LD_VAR 0 7
27378: ARRAY
27379: PUSH
27380: LD_INT 2
27382: ARRAY
27383: PPUSH
27384: CALL_OW 488
27388: NOT
27389: PUSH
27390: LD_VAR 0 12
27394: PUSH
27395: LD_VAR 0 7
27399: ARRAY
27400: PUSH
27401: LD_INT 1
27403: ARRAY
27404: PPUSH
27405: LD_VAR 0 12
27409: PUSH
27410: LD_VAR 0 7
27414: ARRAY
27415: PUSH
27416: LD_INT 2
27418: ARRAY
27419: PPUSH
27420: CALL_OW 428
27424: PUSH
27425: LD_INT 0
27427: GREATER
27428: OR
27429: PUSH
27430: LD_VAR 0 12
27434: PUSH
27435: LD_VAR 0 7
27439: ARRAY
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: PPUSH
27445: LD_VAR 0 12
27449: PUSH
27450: LD_VAR 0 7
27454: ARRAY
27455: PUSH
27456: LD_INT 2
27458: ARRAY
27459: PPUSH
27460: CALL_OW 351
27464: OR
27465: IFFALSE 27471
// exit ;
27467: POP
27468: POP
27469: GO 27763
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27471: LD_ADDR_VAR 0 8
27475: PUSH
27476: LD_VAR 0 12
27480: PUSH
27481: LD_VAR 0 7
27485: ARRAY
27486: PUSH
27487: LD_INT 1
27489: ARRAY
27490: PPUSH
27491: LD_VAR 0 12
27495: PUSH
27496: LD_VAR 0 7
27500: ARRAY
27501: PUSH
27502: LD_INT 2
27504: ARRAY
27505: PPUSH
27506: CALL_OW 546
27510: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27511: LD_VAR 0 8
27515: PUSH
27516: LD_INT 1
27518: ARRAY
27519: PUSH
27520: LD_VAR 0 8
27524: PUSH
27525: LD_INT 2
27527: ARRAY
27528: PUSH
27529: LD_VAR 0 13
27533: PUSH
27534: LD_INT 2
27536: PLUS
27537: GREATER
27538: OR
27539: PUSH
27540: LD_VAR 0 8
27544: PUSH
27545: LD_INT 2
27547: ARRAY
27548: PUSH
27549: LD_VAR 0 13
27553: PUSH
27554: LD_INT 2
27556: MINUS
27557: LESS
27558: OR
27559: PUSH
27560: LD_VAR 0 8
27564: PUSH
27565: LD_INT 3
27567: ARRAY
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 8
27574: PUSH
27575: LD_INT 9
27577: PUSH
27578: LD_INT 10
27580: PUSH
27581: LD_INT 11
27583: PUSH
27584: LD_INT 12
27586: PUSH
27587: LD_INT 13
27589: PUSH
27590: LD_INT 16
27592: PUSH
27593: LD_INT 17
27595: PUSH
27596: LD_INT 18
27598: PUSH
27599: LD_INT 19
27601: PUSH
27602: LD_INT 20
27604: PUSH
27605: LD_INT 21
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: IN
27623: NOT
27624: OR
27625: PUSH
27626: LD_VAR 0 8
27630: PUSH
27631: LD_INT 5
27633: ARRAY
27634: NOT
27635: OR
27636: PUSH
27637: LD_VAR 0 8
27641: PUSH
27642: LD_INT 6
27644: ARRAY
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: LD_INT 7
27654: PUSH
27655: LD_INT 9
27657: PUSH
27658: LD_INT 10
27660: PUSH
27661: LD_INT 11
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: IN
27672: NOT
27673: OR
27674: IFFALSE 27680
// exit ;
27676: POP
27677: POP
27678: GO 27763
// end ;
27680: GO 27351
27682: POP
27683: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27684: LD_VAR 0 9
27688: PPUSH
27689: LD_VAR 0 3
27693: PPUSH
27694: LD_VAR 0 4
27698: PPUSH
27699: LD_INT 20
27701: PPUSH
27702: CALL 19601 0 4
27706: PUSH
27707: LD_INT 4
27709: ARRAY
27710: IFFALSE 27714
// exit ;
27712: GO 27763
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27714: LD_VAR 0 2
27718: PUSH
27719: LD_INT 29
27721: PUSH
27722: LD_INT 30
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: IN
27729: PUSH
27730: LD_VAR 0 3
27734: PPUSH
27735: LD_VAR 0 4
27739: PPUSH
27740: LD_VAR 0 9
27744: PPUSH
27745: CALL_OW 440
27749: NOT
27750: AND
27751: IFFALSE 27755
// exit ;
27753: GO 27763
// result := true ;
27755: LD_ADDR_VAR 0 6
27759: PUSH
27760: LD_INT 1
27762: ST_TO_ADDR
// end ;
27763: LD_VAR 0 6
27767: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27768: LD_INT 0
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
27777: PPUSH
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
27789: PPUSH
27790: PPUSH
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
27804: PPUSH
27805: PPUSH
27806: PPUSH
27807: PPUSH
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
27826: PPUSH
27827: PPUSH
// result = [ ] ;
27828: LD_ADDR_VAR 0 7
27832: PUSH
27833: EMPTY
27834: ST_TO_ADDR
// temp_list = [ ] ;
27835: LD_ADDR_VAR 0 9
27839: PUSH
27840: EMPTY
27841: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27842: LD_VAR 0 4
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: IN
27873: NOT
27874: PUSH
27875: LD_VAR 0 1
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: IN
27890: PUSH
27891: LD_VAR 0 5
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: IN
27910: NOT
27911: AND
27912: OR
27913: IFFALSE 27917
// exit ;
27915: GO 46308
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27917: LD_VAR 0 1
27921: PUSH
27922: LD_INT 6
27924: PUSH
27925: LD_INT 7
27927: PUSH
27928: LD_INT 8
27930: PUSH
27931: LD_INT 13
27933: PUSH
27934: LD_INT 12
27936: PUSH
27937: LD_INT 15
27939: PUSH
27940: LD_INT 11
27942: PUSH
27943: LD_INT 14
27945: PUSH
27946: LD_INT 10
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: IN
27960: IFFALSE 27970
// btype = b_lab ;
27962: LD_ADDR_VAR 0 1
27966: PUSH
27967: LD_INT 6
27969: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27970: LD_VAR 0 6
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: LIST
27988: IN
27989: NOT
27990: PUSH
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 6
28010: PUSH
28011: LD_INT 36
28013: PUSH
28014: LD_INT 4
28016: PUSH
28017: LD_INT 5
28019: PUSH
28020: LD_INT 31
28022: PUSH
28023: LD_INT 32
28025: PUSH
28026: LD_INT 33
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: IN
28042: NOT
28043: PUSH
28044: LD_VAR 0 6
28048: PUSH
28049: LD_INT 1
28051: EQUAL
28052: AND
28053: OR
28054: PUSH
28055: LD_VAR 0 1
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: IN
28070: NOT
28071: PUSH
28072: LD_VAR 0 6
28076: PUSH
28077: LD_INT 2
28079: EQUAL
28080: AND
28081: OR
28082: IFFALSE 28092
// mode = 0 ;
28084: LD_ADDR_VAR 0 6
28088: PUSH
28089: LD_INT 0
28091: ST_TO_ADDR
// case mode of 0 :
28092: LD_VAR 0 6
28096: PUSH
28097: LD_INT 0
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 39558
28105: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28106: LD_ADDR_VAR 0 11
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 3
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28299: LD_ADDR_VAR 0 12
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 3
28456: NEG
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 3
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28495: LD_ADDR_VAR 0 13
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 2
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: LD_INT 3
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 3
28654: NEG
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 3
28666: NEG
28667: PUSH
28668: LD_INT 3
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28694: LD_ADDR_VAR 0 14
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 3
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: LD_INT 3
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 2
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28890: LD_ADDR_VAR 0 15
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 2
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29083: LD_ADDR_VAR 0 16
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 3
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29276: LD_ADDR_VAR 0 17
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 2
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29506: LD_ADDR_VAR 0 18
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: LD_INT 2
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29736: LD_ADDR_VAR 0 19
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 2
29935: NEG
29936: PUSH
29937: LD_INT 2
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29966: LD_ADDR_VAR 0 20
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30196: LD_ADDR_VAR 0 21
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30426: LD_ADDR_VAR 0 22
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30656: LD_ADDR_VAR 0 23
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 2
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30936: LD_ADDR_VAR 0 24
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 2
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31212: LD_ADDR_VAR 0 25
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31486: LD_ADDR_VAR 0 26
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31762: LD_ADDR_VAR 0 27
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: NEG
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: NEG
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32042: LD_ADDR_VAR 0 28
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 3
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 3
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32324: LD_ADDR_VAR 0 29
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 3
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32603: LD_ADDR_VAR 0 30
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 3
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32881: LD_ADDR_VAR 0 31
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: LD_INT 2
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33159: LD_ADDR_VAR 0 32
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 3
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33437: LD_ADDR_VAR 0 33
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 3
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 3
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 3
33681: NEG
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33716: LD_ADDR_VAR 0 34
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 3
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33996: LD_ADDR_VAR 0 35
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34108: LD_ADDR_VAR 0 36
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34220: LD_ADDR_VAR 0 37
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34332: LD_ADDR_VAR 0 38
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34444: LD_ADDR_VAR 0 39
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 2
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34556: LD_ADDR_VAR 0 40
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34668: LD_ADDR_VAR 0 41
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 3
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 3
34942: NEG
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 3
34953: NEG
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35018: LD_ADDR_VAR 0 42
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 3
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 3
35264: PUSH
35265: LD_INT 3
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: LD_INT 3
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: NEG
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 3
35327: NEG
35328: PUSH
35329: LD_INT 3
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35368: LD_ADDR_VAR 0 43
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 3
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 3
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 3
35675: NEG
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35716: LD_ADDR_VAR 0 44
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: NEG
35907: PUSH
35908: LD_INT 3
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 3
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 3
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: PUSH
35970: LD_INT 3
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 3
35990: NEG
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 3
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 3
36013: NEG
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 3
36025: NEG
36026: PUSH
36027: LD_INT 3
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36066: LD_ADDR_VAR 0 45
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 3
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 3
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 3
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 2
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 3
36363: NEG
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 3
36375: NEG
36376: PUSH
36377: LD_INT 3
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36416: LD_ADDR_VAR 0 46
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 3
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 3
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36764: LD_ADDR_VAR 0 47
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36915: LD_ADDR_VAR 0 48
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37062: LD_ADDR_VAR 0 49
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37206: LD_ADDR_VAR 0 50
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37350: LD_ADDR_VAR 0 51
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37497: LD_ADDR_VAR 0 52
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: NEG
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37648: LD_ADDR_VAR 0 53
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37878: LD_ADDR_VAR 0 54
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38108: LD_ADDR_VAR 0 55
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38338: LD_ADDR_VAR 0 56
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38568: LD_ADDR_VAR 0 57
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38798: LD_ADDR_VAR 0 58
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39028: LD_ADDR_VAR 0 59
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39116: LD_ADDR_VAR 0 60
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39204: LD_ADDR_VAR 0 61
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39292: LD_ADDR_VAR 0 62
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39380: LD_ADDR_VAR 0 63
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39468: LD_ADDR_VAR 0 64
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: ST_TO_ADDR
// end ; 1 :
39556: GO 45453
39558: LD_INT 1
39560: DOUBLE
39561: EQUAL
39562: IFTRUE 39566
39564: GO 42189
39566: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39567: LD_ADDR_VAR 0 11
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39611: LD_ADDR_VAR 0 12
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39652: LD_ADDR_VAR 0 13
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 3
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39692: LD_ADDR_VAR 0 14
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39733: LD_ADDR_VAR 0 15
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39777: LD_ADDR_VAR 0 16
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 3
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39823: LD_ADDR_VAR 0 17
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 3
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39867: LD_ADDR_VAR 0 18
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39908: LD_ADDR_VAR 0 19
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39948: LD_ADDR_VAR 0 20
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39989: LD_ADDR_VAR 0 21
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 3
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40033: LD_ADDR_VAR 0 22
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 3
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40079: LD_ADDR_VAR 0 23
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 4
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40123: LD_ADDR_VAR 0 24
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 4
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40164: LD_ADDR_VAR 0 25
40168: PUSH
40169: LD_INT 3
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 4
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: PUSH
40192: LD_INT 4
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40204: LD_ADDR_VAR 0 26
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 4
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40245: LD_ADDR_VAR 0 27
40249: PUSH
40250: LD_INT 3
40252: NEG
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40289: LD_ADDR_VAR 0 28
40293: PUSH
40294: LD_INT 3
40296: NEG
40297: PUSH
40298: LD_INT 3
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 3
40308: NEG
40309: PUSH
40310: LD_INT 4
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 4
40320: NEG
40321: PUSH
40322: LD_INT 3
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40335: LD_ADDR_VAR 0 29
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 3
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 4
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 4
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 3
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 5
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 5
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: LD_INT 4
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 6
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 6
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 5
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40490: LD_ADDR_VAR 0 30
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 3
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 4
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 4
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 5
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 5
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 6
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 6
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40633: LD_ADDR_VAR 0 31
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 3
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 4
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 4
40680: PUSH
40681: LD_INT 4
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: LD_INT 4
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 5
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 5
40710: PUSH
40711: LD_INT 5
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 4
40720: PUSH
40721: LD_INT 5
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 6
40730: PUSH
40731: LD_INT 5
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 6
40740: PUSH
40741: LD_INT 6
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 5
40750: PUSH
40751: LD_INT 6
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40772: LD_ADDR_VAR 0 32
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 3
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 4
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 4
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 5
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 5
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 4
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 6
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 6
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 5
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40915: LD_ADDR_VAR 0 33
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 3
40944: NEG
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 4
40967: NEG
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 4
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 4
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 5
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 5
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 5
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 6
41035: NEG
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 6
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41070: LD_ADDR_VAR 0 34
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 3
41089: NEG
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: NEG
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: NEG
41114: PUSH
41115: LD_INT 4
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 4
41125: NEG
41126: PUSH
41127: LD_INT 3
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: NEG
41138: PUSH
41139: LD_INT 4
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 4
41149: NEG
41150: PUSH
41151: LD_INT 5
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 5
41161: NEG
41162: PUSH
41163: LD_INT 4
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 5
41173: NEG
41174: PUSH
41175: LD_INT 5
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 5
41185: NEG
41186: PUSH
41187: LD_INT 6
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 6
41197: NEG
41198: PUSH
41199: LD_INT 5
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 6
41209: NEG
41210: PUSH
41211: LD_INT 6
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41233: LD_ADDR_VAR 0 41
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41277: LD_ADDR_VAR 0 42
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 3
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41318: LD_ADDR_VAR 0 43
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41358: LD_ADDR_VAR 0 44
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41399: LD_ADDR_VAR 0 45
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41443: LD_ADDR_VAR 0 46
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: NEG
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41489: LD_ADDR_VAR 0 47
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 3
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41522: LD_ADDR_VAR 0 48
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41553: LD_ADDR_VAR 0 49
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41582: LD_ADDR_VAR 0 50
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 3
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41611: LD_ADDR_VAR 0 51
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41642: LD_ADDR_VAR 0 52
41646: PUSH
41647: LD_INT 3
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41675: LD_ADDR_VAR 0 53
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 3
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41719: LD_ADDR_VAR 0 54
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41760: LD_ADDR_VAR 0 55
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 3
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41800: LD_ADDR_VAR 0 56
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41841: LD_ADDR_VAR 0 57
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41885: LD_ADDR_VAR 0 58
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: LD_INT 3
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: LD_INT 3
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41931: LD_ADDR_VAR 0 59
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: LIST
41974: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41975: LD_ADDR_VAR 0 60
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42016: LD_ADDR_VAR 0 61
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42056: LD_ADDR_VAR 0 62
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42097: LD_ADDR_VAR 0 63
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42141: LD_ADDR_VAR 0 64
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: ST_TO_ADDR
// end ; 2 :
42187: GO 45453
42189: LD_INT 2
42191: DOUBLE
42192: EQUAL
42193: IFTRUE 42197
42195: GO 45452
42197: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42198: LD_ADDR_VAR 0 29
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 4
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 5
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 5
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 4
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 5
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 4
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 4
42328: PUSH
42329: LD_INT 4
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 3
42338: PUSH
42339: LD_INT 4
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 3
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 4
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 4
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 4
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 5
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 5
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 5
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 4
42537: NEG
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 4
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 4
42560: NEG
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 4
42583: NEG
42584: PUSH
42585: LD_INT 4
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 4
42595: NEG
42596: PUSH
42597: LD_INT 5
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: LD_INT 4
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: NEG
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 4
42631: NEG
42632: PUSH
42633: LD_INT 3
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 5
42643: NEG
42644: PUSH
42645: LD_INT 4
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 5
42655: NEG
42656: PUSH
42657: LD_INT 5
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: LD_INT 5
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 5
42679: NEG
42680: PUSH
42681: LD_INT 3
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42736: LD_ADDR_VAR 0 30
42740: PUSH
42741: LD_INT 4
42743: PUSH
42744: LD_INT 4
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 4
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: LD_INT 4
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 5
42773: PUSH
42774: LD_INT 5
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: LD_INT 5
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 4
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 5
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 5
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 4
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 4
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 4
42926: NEG
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 4
42937: NEG
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: NEG
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 4
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 5
42982: NEG
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 5
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 5
43005: NEG
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 3
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: LD_INT 4
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 3
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 4
43088: NEG
43089: PUSH
43090: LD_INT 3
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 4
43100: NEG
43101: PUSH
43102: LD_INT 4
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 4
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 4
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 4
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 5
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 4
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 3
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: LD_INT 4
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: LD_INT 5
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 5
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43283: LD_ADDR_VAR 0 31
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 4
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 4
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 5
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 5
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 4
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 5
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 3
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 4
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 4
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 4
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 4
43485: NEG
43486: PUSH
43487: LD_INT 4
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 4
43497: NEG
43498: PUSH
43499: LD_INT 5
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: LD_INT 4
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 4
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 5
43545: NEG
43546: PUSH
43547: LD_INT 4
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 5
43557: NEG
43558: PUSH
43559: LD_INT 5
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 3
43569: NEG
43570: PUSH
43571: LD_INT 5
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 5
43581: NEG
43582: PUSH
43583: LD_INT 3
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 4
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 3
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 4
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 4
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 4
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 4
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 5
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 5
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 4
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 5
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43833: LD_ADDR_VAR 0 32
43837: PUSH
43838: LD_INT 4
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 4
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 4
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 5
43896: NEG
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 5
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 5
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 3
43931: NEG
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 3
43942: NEG
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: LD_INT 4
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 4
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 4
44014: NEG
44015: PUSH
44016: LD_INT 4
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 4
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 4
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 4
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 5
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 4
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 3
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 3
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 4
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 5
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 5
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 4
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 4
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 4
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: PUSH
44246: LD_INT 4
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 4
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: PUSH
44266: LD_INT 4
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 5
44275: PUSH
44276: LD_INT 5
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 4
44285: PUSH
44286: LD_INT 5
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 5
44315: PUSH
44316: LD_INT 3
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 5
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44380: LD_ADDR_VAR 0 33
44384: PUSH
44385: LD_INT 4
44387: NEG
44388: PUSH
44389: LD_INT 4
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 4
44399: NEG
44400: PUSH
44401: LD_INT 5
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: LD_INT 4
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 4
44435: NEG
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 5
44447: NEG
44448: PUSH
44449: LD_INT 4
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 5
44459: NEG
44460: PUSH
44461: LD_INT 5
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 5
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 5
44483: NEG
44484: PUSH
44485: LD_INT 3
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 4
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 4
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 4
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 4
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 4
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 5
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 5
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 4
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 5
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: LD_INT 3
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 4
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 4
44720: PUSH
44721: LD_INT 4
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 4
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 4
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 5
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 5
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 4
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: LD_INT 5
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44918: LD_ADDR_VAR 0 34
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 4
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 5
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 4
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 4
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 5
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 5
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 4
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 4
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 4
45120: PUSH
45121: LD_INT 4
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 5
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 5
45150: PUSH
45151: LD_INT 5
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 4
45160: PUSH
45161: LD_INT 5
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: LD_INT 4
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 5
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 5
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 3
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 4
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 4
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 3
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 4
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 4
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 4
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 5
45359: NEG
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 5
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 5
45382: NEG
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// end ; end ;
45450: GO 45453
45452: POP
// case btype of b_depot , b_warehouse :
45453: LD_VAR 0 1
45457: PUSH
45458: LD_INT 0
45460: DOUBLE
45461: EQUAL
45462: IFTRUE 45472
45464: LD_INT 1
45466: DOUBLE
45467: EQUAL
45468: IFTRUE 45472
45470: GO 45673
45472: POP
// case nation of nation_american :
45473: LD_VAR 0 5
45477: PUSH
45478: LD_INT 1
45480: DOUBLE
45481: EQUAL
45482: IFTRUE 45486
45484: GO 45542
45486: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45487: LD_ADDR_VAR 0 9
45491: PUSH
45492: LD_VAR 0 11
45496: PUSH
45497: LD_VAR 0 12
45501: PUSH
45502: LD_VAR 0 13
45506: PUSH
45507: LD_VAR 0 14
45511: PUSH
45512: LD_VAR 0 15
45516: PUSH
45517: LD_VAR 0 16
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: LD_VAR 0 4
45534: PUSH
45535: LD_INT 1
45537: PLUS
45538: ARRAY
45539: ST_TO_ADDR
45540: GO 45671
45542: LD_INT 2
45544: DOUBLE
45545: EQUAL
45546: IFTRUE 45550
45548: GO 45606
45550: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45551: LD_ADDR_VAR 0 9
45555: PUSH
45556: LD_VAR 0 17
45560: PUSH
45561: LD_VAR 0 18
45565: PUSH
45566: LD_VAR 0 19
45570: PUSH
45571: LD_VAR 0 20
45575: PUSH
45576: LD_VAR 0 21
45580: PUSH
45581: LD_VAR 0 22
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: PUSH
45594: LD_VAR 0 4
45598: PUSH
45599: LD_INT 1
45601: PLUS
45602: ARRAY
45603: ST_TO_ADDR
45604: GO 45671
45606: LD_INT 3
45608: DOUBLE
45609: EQUAL
45610: IFTRUE 45614
45612: GO 45670
45614: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45615: LD_ADDR_VAR 0 9
45619: PUSH
45620: LD_VAR 0 23
45624: PUSH
45625: LD_VAR 0 24
45629: PUSH
45630: LD_VAR 0 25
45634: PUSH
45635: LD_VAR 0 26
45639: PUSH
45640: LD_VAR 0 27
45644: PUSH
45645: LD_VAR 0 28
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: PUSH
45658: LD_VAR 0 4
45662: PUSH
45663: LD_INT 1
45665: PLUS
45666: ARRAY
45667: ST_TO_ADDR
45668: GO 45671
45670: POP
45671: GO 46226
45673: LD_INT 2
45675: DOUBLE
45676: EQUAL
45677: IFTRUE 45687
45679: LD_INT 3
45681: DOUBLE
45682: EQUAL
45683: IFTRUE 45687
45685: GO 45743
45687: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45688: LD_ADDR_VAR 0 9
45692: PUSH
45693: LD_VAR 0 29
45697: PUSH
45698: LD_VAR 0 30
45702: PUSH
45703: LD_VAR 0 31
45707: PUSH
45708: LD_VAR 0 32
45712: PUSH
45713: LD_VAR 0 33
45717: PUSH
45718: LD_VAR 0 34
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: PUSH
45731: LD_VAR 0 4
45735: PUSH
45736: LD_INT 1
45738: PLUS
45739: ARRAY
45740: ST_TO_ADDR
45741: GO 46226
45743: LD_INT 16
45745: DOUBLE
45746: EQUAL
45747: IFTRUE 45805
45749: LD_INT 17
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45805
45755: LD_INT 18
45757: DOUBLE
45758: EQUAL
45759: IFTRUE 45805
45761: LD_INT 19
45763: DOUBLE
45764: EQUAL
45765: IFTRUE 45805
45767: LD_INT 22
45769: DOUBLE
45770: EQUAL
45771: IFTRUE 45805
45773: LD_INT 20
45775: DOUBLE
45776: EQUAL
45777: IFTRUE 45805
45779: LD_INT 21
45781: DOUBLE
45782: EQUAL
45783: IFTRUE 45805
45785: LD_INT 23
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45805
45791: LD_INT 24
45793: DOUBLE
45794: EQUAL
45795: IFTRUE 45805
45797: LD_INT 25
45799: DOUBLE
45800: EQUAL
45801: IFTRUE 45805
45803: GO 45861
45805: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45806: LD_ADDR_VAR 0 9
45810: PUSH
45811: LD_VAR 0 35
45815: PUSH
45816: LD_VAR 0 36
45820: PUSH
45821: LD_VAR 0 37
45825: PUSH
45826: LD_VAR 0 38
45830: PUSH
45831: LD_VAR 0 39
45835: PUSH
45836: LD_VAR 0 40
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: PUSH
45849: LD_VAR 0 4
45853: PUSH
45854: LD_INT 1
45856: PLUS
45857: ARRAY
45858: ST_TO_ADDR
45859: GO 46226
45861: LD_INT 6
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45917
45867: LD_INT 7
45869: DOUBLE
45870: EQUAL
45871: IFTRUE 45917
45873: LD_INT 8
45875: DOUBLE
45876: EQUAL
45877: IFTRUE 45917
45879: LD_INT 13
45881: DOUBLE
45882: EQUAL
45883: IFTRUE 45917
45885: LD_INT 12
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45917
45891: LD_INT 15
45893: DOUBLE
45894: EQUAL
45895: IFTRUE 45917
45897: LD_INT 11
45899: DOUBLE
45900: EQUAL
45901: IFTRUE 45917
45903: LD_INT 14
45905: DOUBLE
45906: EQUAL
45907: IFTRUE 45917
45909: LD_INT 10
45911: DOUBLE
45912: EQUAL
45913: IFTRUE 45917
45915: GO 45973
45917: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45918: LD_ADDR_VAR 0 9
45922: PUSH
45923: LD_VAR 0 41
45927: PUSH
45928: LD_VAR 0 42
45932: PUSH
45933: LD_VAR 0 43
45937: PUSH
45938: LD_VAR 0 44
45942: PUSH
45943: LD_VAR 0 45
45947: PUSH
45948: LD_VAR 0 46
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: PUSH
45961: LD_VAR 0 4
45965: PUSH
45966: LD_INT 1
45968: PLUS
45969: ARRAY
45970: ST_TO_ADDR
45971: GO 46226
45973: LD_INT 36
45975: DOUBLE
45976: EQUAL
45977: IFTRUE 45981
45979: GO 46037
45981: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45982: LD_ADDR_VAR 0 9
45986: PUSH
45987: LD_VAR 0 47
45991: PUSH
45992: LD_VAR 0 48
45996: PUSH
45997: LD_VAR 0 49
46001: PUSH
46002: LD_VAR 0 50
46006: PUSH
46007: LD_VAR 0 51
46011: PUSH
46012: LD_VAR 0 52
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: PUSH
46025: LD_VAR 0 4
46029: PUSH
46030: LD_INT 1
46032: PLUS
46033: ARRAY
46034: ST_TO_ADDR
46035: GO 46226
46037: LD_INT 4
46039: DOUBLE
46040: EQUAL
46041: IFTRUE 46063
46043: LD_INT 5
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46063
46049: LD_INT 34
46051: DOUBLE
46052: EQUAL
46053: IFTRUE 46063
46055: LD_INT 37
46057: DOUBLE
46058: EQUAL
46059: IFTRUE 46063
46061: GO 46119
46063: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46064: LD_ADDR_VAR 0 9
46068: PUSH
46069: LD_VAR 0 53
46073: PUSH
46074: LD_VAR 0 54
46078: PUSH
46079: LD_VAR 0 55
46083: PUSH
46084: LD_VAR 0 56
46088: PUSH
46089: LD_VAR 0 57
46093: PUSH
46094: LD_VAR 0 58
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: PUSH
46107: LD_VAR 0 4
46111: PUSH
46112: LD_INT 1
46114: PLUS
46115: ARRAY
46116: ST_TO_ADDR
46117: GO 46226
46119: LD_INT 31
46121: DOUBLE
46122: EQUAL
46123: IFTRUE 46169
46125: LD_INT 32
46127: DOUBLE
46128: EQUAL
46129: IFTRUE 46169
46131: LD_INT 33
46133: DOUBLE
46134: EQUAL
46135: IFTRUE 46169
46137: LD_INT 27
46139: DOUBLE
46140: EQUAL
46141: IFTRUE 46169
46143: LD_INT 26
46145: DOUBLE
46146: EQUAL
46147: IFTRUE 46169
46149: LD_INT 28
46151: DOUBLE
46152: EQUAL
46153: IFTRUE 46169
46155: LD_INT 29
46157: DOUBLE
46158: EQUAL
46159: IFTRUE 46169
46161: LD_INT 30
46163: DOUBLE
46164: EQUAL
46165: IFTRUE 46169
46167: GO 46225
46169: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46170: LD_ADDR_VAR 0 9
46174: PUSH
46175: LD_VAR 0 59
46179: PUSH
46180: LD_VAR 0 60
46184: PUSH
46185: LD_VAR 0 61
46189: PUSH
46190: LD_VAR 0 62
46194: PUSH
46195: LD_VAR 0 63
46199: PUSH
46200: LD_VAR 0 64
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: PUSH
46213: LD_VAR 0 4
46217: PUSH
46218: LD_INT 1
46220: PLUS
46221: ARRAY
46222: ST_TO_ADDR
46223: GO 46226
46225: POP
// temp_list2 = [ ] ;
46226: LD_ADDR_VAR 0 10
46230: PUSH
46231: EMPTY
46232: ST_TO_ADDR
// for i in temp_list do
46233: LD_ADDR_VAR 0 8
46237: PUSH
46238: LD_VAR 0 9
46242: PUSH
46243: FOR_IN
46244: IFFALSE 46296
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46246: LD_ADDR_VAR 0 10
46250: PUSH
46251: LD_VAR 0 10
46255: PUSH
46256: LD_VAR 0 8
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PUSH
46265: LD_VAR 0 2
46269: PLUS
46270: PUSH
46271: LD_VAR 0 8
46275: PUSH
46276: LD_INT 2
46278: ARRAY
46279: PUSH
46280: LD_VAR 0 3
46284: PLUS
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: ADD
46293: ST_TO_ADDR
46294: GO 46243
46296: POP
46297: POP
// result = temp_list2 ;
46298: LD_ADDR_VAR 0 7
46302: PUSH
46303: LD_VAR 0 10
46307: ST_TO_ADDR
// end ;
46308: LD_VAR 0 7
46312: RET
// export function EnemyInRange ( unit , dist ) ; begin
46313: LD_INT 0
46315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46316: LD_ADDR_VAR 0 3
46320: PUSH
46321: LD_VAR 0 1
46325: PPUSH
46326: CALL_OW 255
46330: PPUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 250
46340: PPUSH
46341: LD_VAR 0 1
46345: PPUSH
46346: CALL_OW 251
46350: PPUSH
46351: LD_VAR 0 2
46355: PPUSH
46356: CALL 19601 0 4
46360: PUSH
46361: LD_INT 4
46363: ARRAY
46364: ST_TO_ADDR
// end ;
46365: LD_VAR 0 3
46369: RET
// export function PlayerSeeMe ( unit ) ; begin
46370: LD_INT 0
46372: PPUSH
// result := See ( your_side , unit ) ;
46373: LD_ADDR_VAR 0 2
46377: PUSH
46378: LD_OWVAR 2
46382: PPUSH
46383: LD_VAR 0 1
46387: PPUSH
46388: CALL_OW 292
46392: ST_TO_ADDR
// end ;
46393: LD_VAR 0 2
46397: RET
// export function ReverseDir ( unit ) ; begin
46398: LD_INT 0
46400: PPUSH
// if not unit then
46401: LD_VAR 0 1
46405: NOT
46406: IFFALSE 46410
// exit ;
46408: GO 46433
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46410: LD_ADDR_VAR 0 2
46414: PUSH
46415: LD_VAR 0 1
46419: PPUSH
46420: CALL_OW 254
46424: PUSH
46425: LD_INT 3
46427: PLUS
46428: PUSH
46429: LD_INT 6
46431: MOD
46432: ST_TO_ADDR
// end ;
46433: LD_VAR 0 2
46437: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46438: LD_INT 0
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
// if not hexes then
46445: LD_VAR 0 2
46449: NOT
46450: IFFALSE 46454
// exit ;
46452: GO 46602
// dist := 9999 ;
46454: LD_ADDR_VAR 0 5
46458: PUSH
46459: LD_INT 9999
46461: ST_TO_ADDR
// for i = 1 to hexes do
46462: LD_ADDR_VAR 0 4
46466: PUSH
46467: DOUBLE
46468: LD_INT 1
46470: DEC
46471: ST_TO_ADDR
46472: LD_VAR 0 2
46476: PUSH
46477: FOR_TO
46478: IFFALSE 46590
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46480: LD_VAR 0 1
46484: PPUSH
46485: LD_VAR 0 2
46489: PUSH
46490: LD_VAR 0 4
46494: ARRAY
46495: PUSH
46496: LD_INT 1
46498: ARRAY
46499: PPUSH
46500: LD_VAR 0 2
46504: PUSH
46505: LD_VAR 0 4
46509: ARRAY
46510: PUSH
46511: LD_INT 2
46513: ARRAY
46514: PPUSH
46515: CALL_OW 297
46519: PUSH
46520: LD_VAR 0 5
46524: LESS
46525: IFFALSE 46588
// begin hex := hexes [ i ] ;
46527: LD_ADDR_VAR 0 7
46531: PUSH
46532: LD_VAR 0 2
46536: PUSH
46537: LD_VAR 0 4
46541: ARRAY
46542: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46543: LD_ADDR_VAR 0 5
46547: PUSH
46548: LD_VAR 0 1
46552: PPUSH
46553: LD_VAR 0 2
46557: PUSH
46558: LD_VAR 0 4
46562: ARRAY
46563: PUSH
46564: LD_INT 1
46566: ARRAY
46567: PPUSH
46568: LD_VAR 0 2
46572: PUSH
46573: LD_VAR 0 4
46577: ARRAY
46578: PUSH
46579: LD_INT 2
46581: ARRAY
46582: PPUSH
46583: CALL_OW 297
46587: ST_TO_ADDR
// end ; end ;
46588: GO 46477
46590: POP
46591: POP
// result := hex ;
46592: LD_ADDR_VAR 0 3
46596: PUSH
46597: LD_VAR 0 7
46601: ST_TO_ADDR
// end ;
46602: LD_VAR 0 3
46606: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46607: LD_INT 0
46609: PPUSH
46610: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46611: LD_VAR 0 1
46615: NOT
46616: PUSH
46617: LD_VAR 0 1
46621: PUSH
46622: LD_INT 21
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 23
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PPUSH
46646: CALL_OW 69
46650: IN
46651: NOT
46652: OR
46653: IFFALSE 46657
// exit ;
46655: GO 46704
// for i = 1 to 3 do
46657: LD_ADDR_VAR 0 3
46661: PUSH
46662: DOUBLE
46663: LD_INT 1
46665: DEC
46666: ST_TO_ADDR
46667: LD_INT 3
46669: PUSH
46670: FOR_TO
46671: IFFALSE 46702
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL_OW 250
46682: PPUSH
46683: LD_VAR 0 1
46687: PPUSH
46688: CALL_OW 251
46692: PPUSH
46693: LD_INT 1
46695: PPUSH
46696: CALL_OW 453
46700: GO 46670
46702: POP
46703: POP
// end ;
46704: LD_VAR 0 2
46708: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46709: LD_INT 0
46711: PPUSH
46712: PPUSH
46713: PPUSH
46714: PPUSH
46715: PPUSH
46716: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46717: LD_VAR 0 1
46721: NOT
46722: PUSH
46723: LD_VAR 0 2
46727: NOT
46728: OR
46729: PUSH
46730: LD_VAR 0 1
46734: PPUSH
46735: CALL_OW 314
46739: OR
46740: IFFALSE 46744
// exit ;
46742: GO 47185
// x := GetX ( enemy_unit ) ;
46744: LD_ADDR_VAR 0 7
46748: PUSH
46749: LD_VAR 0 2
46753: PPUSH
46754: CALL_OW 250
46758: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46759: LD_ADDR_VAR 0 8
46763: PUSH
46764: LD_VAR 0 2
46768: PPUSH
46769: CALL_OW 251
46773: ST_TO_ADDR
// if not x or not y then
46774: LD_VAR 0 7
46778: NOT
46779: PUSH
46780: LD_VAR 0 8
46784: NOT
46785: OR
46786: IFFALSE 46790
// exit ;
46788: GO 47185
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46790: LD_ADDR_VAR 0 6
46794: PUSH
46795: LD_VAR 0 7
46799: PPUSH
46800: LD_INT 0
46802: PPUSH
46803: LD_INT 4
46805: PPUSH
46806: CALL_OW 272
46810: PUSH
46811: LD_VAR 0 8
46815: PPUSH
46816: LD_INT 0
46818: PPUSH
46819: LD_INT 4
46821: PPUSH
46822: CALL_OW 273
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_VAR 0 7
46835: PPUSH
46836: LD_INT 1
46838: PPUSH
46839: LD_INT 4
46841: PPUSH
46842: CALL_OW 272
46846: PUSH
46847: LD_VAR 0 8
46851: PPUSH
46852: LD_INT 1
46854: PPUSH
46855: LD_INT 4
46857: PPUSH
46858: CALL_OW 273
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_VAR 0 7
46871: PPUSH
46872: LD_INT 2
46874: PPUSH
46875: LD_INT 4
46877: PPUSH
46878: CALL_OW 272
46882: PUSH
46883: LD_VAR 0 8
46887: PPUSH
46888: LD_INT 2
46890: PPUSH
46891: LD_INT 4
46893: PPUSH
46894: CALL_OW 273
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_VAR 0 7
46907: PPUSH
46908: LD_INT 3
46910: PPUSH
46911: LD_INT 4
46913: PPUSH
46914: CALL_OW 272
46918: PUSH
46919: LD_VAR 0 8
46923: PPUSH
46924: LD_INT 3
46926: PPUSH
46927: LD_INT 4
46929: PPUSH
46930: CALL_OW 273
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_VAR 0 7
46943: PPUSH
46944: LD_INT 4
46946: PPUSH
46947: LD_INT 4
46949: PPUSH
46950: CALL_OW 272
46954: PUSH
46955: LD_VAR 0 8
46959: PPUSH
46960: LD_INT 4
46962: PPUSH
46963: LD_INT 4
46965: PPUSH
46966: CALL_OW 273
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_VAR 0 7
46979: PPUSH
46980: LD_INT 5
46982: PPUSH
46983: LD_INT 4
46985: PPUSH
46986: CALL_OW 272
46990: PUSH
46991: LD_VAR 0 8
46995: PPUSH
46996: LD_INT 5
46998: PPUSH
46999: LD_INT 4
47001: PPUSH
47002: CALL_OW 273
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: ST_TO_ADDR
// for i = tmp downto 1 do
47019: LD_ADDR_VAR 0 4
47023: PUSH
47024: DOUBLE
47025: LD_VAR 0 6
47029: INC
47030: ST_TO_ADDR
47031: LD_INT 1
47033: PUSH
47034: FOR_DOWNTO
47035: IFFALSE 47136
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47037: LD_VAR 0 6
47041: PUSH
47042: LD_VAR 0 4
47046: ARRAY
47047: PUSH
47048: LD_INT 1
47050: ARRAY
47051: PPUSH
47052: LD_VAR 0 6
47056: PUSH
47057: LD_VAR 0 4
47061: ARRAY
47062: PUSH
47063: LD_INT 2
47065: ARRAY
47066: PPUSH
47067: CALL_OW 488
47071: NOT
47072: PUSH
47073: LD_VAR 0 6
47077: PUSH
47078: LD_VAR 0 4
47082: ARRAY
47083: PUSH
47084: LD_INT 1
47086: ARRAY
47087: PPUSH
47088: LD_VAR 0 6
47092: PUSH
47093: LD_VAR 0 4
47097: ARRAY
47098: PUSH
47099: LD_INT 2
47101: ARRAY
47102: PPUSH
47103: CALL_OW 428
47107: PUSH
47108: LD_INT 0
47110: NONEQUAL
47111: OR
47112: IFFALSE 47134
// tmp := Delete ( tmp , i ) ;
47114: LD_ADDR_VAR 0 6
47118: PUSH
47119: LD_VAR 0 6
47123: PPUSH
47124: LD_VAR 0 4
47128: PPUSH
47129: CALL_OW 3
47133: ST_TO_ADDR
47134: GO 47034
47136: POP
47137: POP
// j := GetClosestHex ( unit , tmp ) ;
47138: LD_ADDR_VAR 0 5
47142: PUSH
47143: LD_VAR 0 1
47147: PPUSH
47148: LD_VAR 0 6
47152: PPUSH
47153: CALL 46438 0 2
47157: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47158: LD_VAR 0 1
47162: PPUSH
47163: LD_VAR 0 5
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: PPUSH
47172: LD_VAR 0 5
47176: PUSH
47177: LD_INT 2
47179: ARRAY
47180: PPUSH
47181: CALL_OW 111
// end ;
47185: LD_VAR 0 3
47189: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47190: LD_INT 0
47192: PPUSH
47193: PPUSH
47194: PPUSH
// uc_side = 0 ;
47195: LD_ADDR_OWVAR 20
47199: PUSH
47200: LD_INT 0
47202: ST_TO_ADDR
// uc_nation = 0 ;
47203: LD_ADDR_OWVAR 21
47207: PUSH
47208: LD_INT 0
47210: ST_TO_ADDR
// InitHc_All ( ) ;
47211: CALL_OW 584
// InitVc ;
47215: CALL_OW 20
// if mastodonts then
47219: LD_VAR 0 6
47223: IFFALSE 47290
// for i = 1 to mastodonts do
47225: LD_ADDR_VAR 0 11
47229: PUSH
47230: DOUBLE
47231: LD_INT 1
47233: DEC
47234: ST_TO_ADDR
47235: LD_VAR 0 6
47239: PUSH
47240: FOR_TO
47241: IFFALSE 47288
// begin vc_chassis := 31 ;
47243: LD_ADDR_OWVAR 37
47247: PUSH
47248: LD_INT 31
47250: ST_TO_ADDR
// vc_control := control_rider ;
47251: LD_ADDR_OWVAR 38
47255: PUSH
47256: LD_INT 4
47258: ST_TO_ADDR
// animal := CreateVehicle ;
47259: LD_ADDR_VAR 0 12
47263: PUSH
47264: CALL_OW 45
47268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47269: LD_VAR 0 12
47273: PPUSH
47274: LD_VAR 0 8
47278: PPUSH
47279: LD_INT 0
47281: PPUSH
47282: CALL 49425 0 3
// end ;
47286: GO 47240
47288: POP
47289: POP
// if horses then
47290: LD_VAR 0 5
47294: IFFALSE 47361
// for i = 1 to horses do
47296: LD_ADDR_VAR 0 11
47300: PUSH
47301: DOUBLE
47302: LD_INT 1
47304: DEC
47305: ST_TO_ADDR
47306: LD_VAR 0 5
47310: PUSH
47311: FOR_TO
47312: IFFALSE 47359
// begin hc_class := 21 ;
47314: LD_ADDR_OWVAR 28
47318: PUSH
47319: LD_INT 21
47321: ST_TO_ADDR
// hc_gallery :=  ;
47322: LD_ADDR_OWVAR 33
47326: PUSH
47327: LD_STRING 
47329: ST_TO_ADDR
// animal := CreateHuman ;
47330: LD_ADDR_VAR 0 12
47334: PUSH
47335: CALL_OW 44
47339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47340: LD_VAR 0 12
47344: PPUSH
47345: LD_VAR 0 8
47349: PPUSH
47350: LD_INT 0
47352: PPUSH
47353: CALL 49425 0 3
// end ;
47357: GO 47311
47359: POP
47360: POP
// if birds then
47361: LD_VAR 0 1
47365: IFFALSE 47432
// for i = 1 to birds do
47367: LD_ADDR_VAR 0 11
47371: PUSH
47372: DOUBLE
47373: LD_INT 1
47375: DEC
47376: ST_TO_ADDR
47377: LD_VAR 0 1
47381: PUSH
47382: FOR_TO
47383: IFFALSE 47430
// begin hc_class = 18 ;
47385: LD_ADDR_OWVAR 28
47389: PUSH
47390: LD_INT 18
47392: ST_TO_ADDR
// hc_gallery =  ;
47393: LD_ADDR_OWVAR 33
47397: PUSH
47398: LD_STRING 
47400: ST_TO_ADDR
// animal := CreateHuman ;
47401: LD_ADDR_VAR 0 12
47405: PUSH
47406: CALL_OW 44
47410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47411: LD_VAR 0 12
47415: PPUSH
47416: LD_VAR 0 8
47420: PPUSH
47421: LD_INT 0
47423: PPUSH
47424: CALL 49425 0 3
// end ;
47428: GO 47382
47430: POP
47431: POP
// if tigers then
47432: LD_VAR 0 2
47436: IFFALSE 47520
// for i = 1 to tigers do
47438: LD_ADDR_VAR 0 11
47442: PUSH
47443: DOUBLE
47444: LD_INT 1
47446: DEC
47447: ST_TO_ADDR
47448: LD_VAR 0 2
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47518
// begin hc_class = class_tiger ;
47456: LD_ADDR_OWVAR 28
47460: PUSH
47461: LD_INT 14
47463: ST_TO_ADDR
// hc_gallery =  ;
47464: LD_ADDR_OWVAR 33
47468: PUSH
47469: LD_STRING 
47471: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47472: LD_ADDR_OWVAR 35
47476: PUSH
47477: LD_INT 7
47479: NEG
47480: PPUSH
47481: LD_INT 7
47483: PPUSH
47484: CALL_OW 12
47488: ST_TO_ADDR
// animal := CreateHuman ;
47489: LD_ADDR_VAR 0 12
47493: PUSH
47494: CALL_OW 44
47498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47499: LD_VAR 0 12
47503: PPUSH
47504: LD_VAR 0 8
47508: PPUSH
47509: LD_INT 0
47511: PPUSH
47512: CALL 49425 0 3
// end ;
47516: GO 47453
47518: POP
47519: POP
// if apemans then
47520: LD_VAR 0 3
47524: IFFALSE 47647
// for i = 1 to apemans do
47526: LD_ADDR_VAR 0 11
47530: PUSH
47531: DOUBLE
47532: LD_INT 1
47534: DEC
47535: ST_TO_ADDR
47536: LD_VAR 0 3
47540: PUSH
47541: FOR_TO
47542: IFFALSE 47645
// begin hc_class = class_apeman ;
47544: LD_ADDR_OWVAR 28
47548: PUSH
47549: LD_INT 12
47551: ST_TO_ADDR
// hc_gallery =  ;
47552: LD_ADDR_OWVAR 33
47556: PUSH
47557: LD_STRING 
47559: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47560: LD_ADDR_OWVAR 35
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PPUSH
47569: LD_INT 2
47571: PPUSH
47572: CALL_OW 12
47576: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47577: LD_ADDR_OWVAR 31
47581: PUSH
47582: LD_INT 1
47584: PPUSH
47585: LD_INT 3
47587: PPUSH
47588: CALL_OW 12
47592: PUSH
47593: LD_INT 1
47595: PPUSH
47596: LD_INT 3
47598: PPUSH
47599: CALL_OW 12
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
// animal := CreateHuman ;
47616: LD_ADDR_VAR 0 12
47620: PUSH
47621: CALL_OW 44
47625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47626: LD_VAR 0 12
47630: PPUSH
47631: LD_VAR 0 8
47635: PPUSH
47636: LD_INT 0
47638: PPUSH
47639: CALL 49425 0 3
// end ;
47643: GO 47541
47645: POP
47646: POP
// if enchidnas then
47647: LD_VAR 0 4
47651: IFFALSE 47718
// for i = 1 to enchidnas do
47653: LD_ADDR_VAR 0 11
47657: PUSH
47658: DOUBLE
47659: LD_INT 1
47661: DEC
47662: ST_TO_ADDR
47663: LD_VAR 0 4
47667: PUSH
47668: FOR_TO
47669: IFFALSE 47716
// begin hc_class = 13 ;
47671: LD_ADDR_OWVAR 28
47675: PUSH
47676: LD_INT 13
47678: ST_TO_ADDR
// hc_gallery =  ;
47679: LD_ADDR_OWVAR 33
47683: PUSH
47684: LD_STRING 
47686: ST_TO_ADDR
// animal := CreateHuman ;
47687: LD_ADDR_VAR 0 12
47691: PUSH
47692: CALL_OW 44
47696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47697: LD_VAR 0 12
47701: PPUSH
47702: LD_VAR 0 8
47706: PPUSH
47707: LD_INT 0
47709: PPUSH
47710: CALL 49425 0 3
// end ;
47714: GO 47668
47716: POP
47717: POP
// if fishes then
47718: LD_VAR 0 7
47722: IFFALSE 47789
// for i = 1 to fishes do
47724: LD_ADDR_VAR 0 11
47728: PUSH
47729: DOUBLE
47730: LD_INT 1
47732: DEC
47733: ST_TO_ADDR
47734: LD_VAR 0 7
47738: PUSH
47739: FOR_TO
47740: IFFALSE 47787
// begin hc_class = 20 ;
47742: LD_ADDR_OWVAR 28
47746: PUSH
47747: LD_INT 20
47749: ST_TO_ADDR
// hc_gallery =  ;
47750: LD_ADDR_OWVAR 33
47754: PUSH
47755: LD_STRING 
47757: ST_TO_ADDR
// animal := CreateHuman ;
47758: LD_ADDR_VAR 0 12
47762: PUSH
47763: CALL_OW 44
47767: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47768: LD_VAR 0 12
47772: PPUSH
47773: LD_VAR 0 9
47777: PPUSH
47778: LD_INT 0
47780: PPUSH
47781: CALL 49425 0 3
// end ;
47785: GO 47739
47787: POP
47788: POP
// end ;
47789: LD_VAR 0 10
47793: RET
// export function WantHeal ( sci , unit ) ; begin
47794: LD_INT 0
47796: PPUSH
// if GetTaskList ( sci ) > 0 then
47797: LD_VAR 0 1
47801: PPUSH
47802: CALL_OW 437
47806: PUSH
47807: LD_INT 0
47809: GREATER
47810: IFFALSE 47880
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47812: LD_VAR 0 1
47816: PPUSH
47817: CALL_OW 437
47821: PUSH
47822: LD_INT 1
47824: ARRAY
47825: PUSH
47826: LD_INT 1
47828: ARRAY
47829: PUSH
47830: LD_STRING l
47832: EQUAL
47833: PUSH
47834: LD_VAR 0 1
47838: PPUSH
47839: CALL_OW 437
47843: PUSH
47844: LD_INT 1
47846: ARRAY
47847: PUSH
47848: LD_INT 4
47850: ARRAY
47851: PUSH
47852: LD_VAR 0 2
47856: EQUAL
47857: AND
47858: IFFALSE 47870
// result := true else
47860: LD_ADDR_VAR 0 3
47864: PUSH
47865: LD_INT 1
47867: ST_TO_ADDR
47868: GO 47878
// result := false ;
47870: LD_ADDR_VAR 0 3
47874: PUSH
47875: LD_INT 0
47877: ST_TO_ADDR
// end else
47878: GO 47888
// result := false ;
47880: LD_ADDR_VAR 0 3
47884: PUSH
47885: LD_INT 0
47887: ST_TO_ADDR
// end ;
47888: LD_VAR 0 3
47892: RET
// export function HealTarget ( sci ) ; begin
47893: LD_INT 0
47895: PPUSH
// if not sci then
47896: LD_VAR 0 1
47900: NOT
47901: IFFALSE 47905
// exit ;
47903: GO 47970
// result := 0 ;
47905: LD_ADDR_VAR 0 2
47909: PUSH
47910: LD_INT 0
47912: ST_TO_ADDR
// if GetTaskList ( sci ) then
47913: LD_VAR 0 1
47917: PPUSH
47918: CALL_OW 437
47922: IFFALSE 47970
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47924: LD_VAR 0 1
47928: PPUSH
47929: CALL_OW 437
47933: PUSH
47934: LD_INT 1
47936: ARRAY
47937: PUSH
47938: LD_INT 1
47940: ARRAY
47941: PUSH
47942: LD_STRING l
47944: EQUAL
47945: IFFALSE 47970
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 437
47961: PUSH
47962: LD_INT 1
47964: ARRAY
47965: PUSH
47966: LD_INT 4
47968: ARRAY
47969: ST_TO_ADDR
// end ;
47970: LD_VAR 0 2
47974: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47975: LD_INT 0
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
// if not base_units then
47981: LD_VAR 0 1
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48077
// result := false ;
47990: LD_ADDR_VAR 0 2
47994: PUSH
47995: LD_INT 0
47997: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47998: LD_ADDR_VAR 0 5
48002: PUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: LD_INT 21
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PPUSH
48018: CALL_OW 72
48022: ST_TO_ADDR
// if not tmp then
48023: LD_VAR 0 5
48027: NOT
48028: IFFALSE 48032
// exit ;
48030: GO 48077
// for i in tmp do
48032: LD_ADDR_VAR 0 3
48036: PUSH
48037: LD_VAR 0 5
48041: PUSH
48042: FOR_IN
48043: IFFALSE 48075
// begin result := EnemyInRange ( i , 22 ) ;
48045: LD_ADDR_VAR 0 2
48049: PUSH
48050: LD_VAR 0 3
48054: PPUSH
48055: LD_INT 22
48057: PPUSH
48058: CALL 46313 0 2
48062: ST_TO_ADDR
// if result then
48063: LD_VAR 0 2
48067: IFFALSE 48073
// exit ;
48069: POP
48070: POP
48071: GO 48077
// end ;
48073: GO 48042
48075: POP
48076: POP
// end ;
48077: LD_VAR 0 2
48081: RET
// export function FilterByTag ( units , tag ) ; begin
48082: LD_INT 0
48084: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
48085: LD_ADDR_VAR 0 3
48089: PUSH
48090: LD_VAR 0 1
48094: PPUSH
48095: LD_INT 120
48097: PUSH
48098: LD_VAR 0 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PPUSH
48107: CALL_OW 72
48111: ST_TO_ADDR
// end ;
48112: LD_VAR 0 3
48116: RET
// export function IsDriver ( un ) ; begin
48117: LD_INT 0
48119: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48120: LD_ADDR_VAR 0 2
48124: PUSH
48125: LD_VAR 0 1
48129: PUSH
48130: LD_INT 55
48132: PUSH
48133: EMPTY
48134: LIST
48135: PPUSH
48136: CALL_OW 69
48140: IN
48141: ST_TO_ADDR
// end ;
48142: LD_VAR 0 2
48146: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48147: LD_INT 0
48149: PPUSH
48150: PPUSH
// list := [ ] ;
48151: LD_ADDR_VAR 0 5
48155: PUSH
48156: EMPTY
48157: ST_TO_ADDR
// case d of 0 :
48158: LD_VAR 0 3
48162: PUSH
48163: LD_INT 0
48165: DOUBLE
48166: EQUAL
48167: IFTRUE 48171
48169: GO 48304
48171: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48172: LD_ADDR_VAR 0 5
48176: PUSH
48177: LD_VAR 0 1
48181: PUSH
48182: LD_INT 4
48184: MINUS
48185: PUSH
48186: LD_VAR 0 2
48190: PUSH
48191: LD_INT 4
48193: MINUS
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: PUSH
48203: LD_VAR 0 1
48207: PUSH
48208: LD_INT 3
48210: MINUS
48211: PUSH
48212: LD_VAR 0 2
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: PUSH
48225: LD_VAR 0 1
48229: PUSH
48230: LD_INT 4
48232: PLUS
48233: PUSH
48234: LD_VAR 0 2
48238: PUSH
48239: LD_INT 4
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: PUSH
48247: LD_VAR 0 1
48251: PUSH
48252: LD_INT 3
48254: PLUS
48255: PUSH
48256: LD_VAR 0 2
48260: PUSH
48261: LD_INT 3
48263: PLUS
48264: PUSH
48265: LD_INT 5
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: PUSH
48273: LD_VAR 0 1
48277: PUSH
48278: LD_VAR 0 2
48282: PUSH
48283: LD_INT 4
48285: PLUS
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// end ; 1 :
48302: GO 49002
48304: LD_INT 1
48306: DOUBLE
48307: EQUAL
48308: IFTRUE 48312
48310: GO 48445
48312: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48313: LD_ADDR_VAR 0 5
48317: PUSH
48318: LD_VAR 0 1
48322: PUSH
48323: LD_VAR 0 2
48327: PUSH
48328: LD_INT 4
48330: MINUS
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: PUSH
48340: LD_VAR 0 1
48344: PUSH
48345: LD_INT 3
48347: MINUS
48348: PUSH
48349: LD_VAR 0 2
48353: PUSH
48354: LD_INT 3
48356: MINUS
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: PUSH
48366: LD_VAR 0 1
48370: PUSH
48371: LD_INT 4
48373: MINUS
48374: PUSH
48375: LD_VAR 0 2
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: PUSH
48388: LD_VAR 0 1
48392: PUSH
48393: LD_VAR 0 2
48397: PUSH
48398: LD_INT 3
48400: PLUS
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: LD_VAR 0 1
48414: PUSH
48415: LD_INT 4
48417: PLUS
48418: PUSH
48419: LD_VAR 0 2
48423: PUSH
48424: LD_INT 4
48426: PLUS
48427: PUSH
48428: LD_INT 5
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// end ; 2 :
48443: GO 49002
48445: LD_INT 2
48447: DOUBLE
48448: EQUAL
48449: IFTRUE 48453
48451: GO 48582
48453: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48454: LD_ADDR_VAR 0 5
48458: PUSH
48459: LD_VAR 0 1
48463: PUSH
48464: LD_VAR 0 2
48468: PUSH
48469: LD_INT 3
48471: MINUS
48472: PUSH
48473: LD_INT 3
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: PUSH
48481: LD_VAR 0 1
48485: PUSH
48486: LD_INT 4
48488: PLUS
48489: PUSH
48490: LD_VAR 0 2
48494: PUSH
48495: LD_INT 4
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: PUSH
48503: LD_VAR 0 1
48507: PUSH
48508: LD_VAR 0 2
48512: PUSH
48513: LD_INT 4
48515: PLUS
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: PUSH
48525: LD_VAR 0 1
48529: PUSH
48530: LD_INT 3
48532: MINUS
48533: PUSH
48534: LD_VAR 0 2
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: PUSH
48547: LD_VAR 0 1
48551: PUSH
48552: LD_INT 4
48554: MINUS
48555: PUSH
48556: LD_VAR 0 2
48560: PUSH
48561: LD_INT 4
48563: MINUS
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// end ; 3 :
48580: GO 49002
48582: LD_INT 3
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48590
48588: GO 48723
48590: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48591: LD_ADDR_VAR 0 5
48595: PUSH
48596: LD_VAR 0 1
48600: PUSH
48601: LD_INT 3
48603: PLUS
48604: PUSH
48605: LD_VAR 0 2
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: PUSH
48618: LD_VAR 0 1
48622: PUSH
48623: LD_INT 4
48625: PLUS
48626: PUSH
48627: LD_VAR 0 2
48631: PUSH
48632: LD_INT 4
48634: PLUS
48635: PUSH
48636: LD_INT 5
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: PUSH
48644: LD_VAR 0 1
48648: PUSH
48649: LD_INT 4
48651: MINUS
48652: PUSH
48653: LD_VAR 0 2
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: PUSH
48666: LD_VAR 0 1
48670: PUSH
48671: LD_VAR 0 2
48675: PUSH
48676: LD_INT 4
48678: MINUS
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: PUSH
48688: LD_VAR 0 1
48692: PUSH
48693: LD_INT 3
48695: MINUS
48696: PUSH
48697: LD_VAR 0 2
48701: PUSH
48702: LD_INT 3
48704: MINUS
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// end ; 4 :
48721: GO 49002
48723: LD_INT 4
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48731
48729: GO 48864
48731: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48732: LD_ADDR_VAR 0 5
48736: PUSH
48737: LD_VAR 0 1
48741: PUSH
48742: LD_VAR 0 2
48746: PUSH
48747: LD_INT 4
48749: PLUS
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: PUSH
48759: LD_VAR 0 1
48763: PUSH
48764: LD_INT 3
48766: PLUS
48767: PUSH
48768: LD_VAR 0 2
48772: PUSH
48773: LD_INT 3
48775: PLUS
48776: PUSH
48777: LD_INT 5
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: PUSH
48785: LD_VAR 0 1
48789: PUSH
48790: LD_INT 4
48792: PLUS
48793: PUSH
48794: LD_VAR 0 2
48798: PUSH
48799: LD_INT 4
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: PUSH
48807: LD_VAR 0 1
48811: PUSH
48812: LD_VAR 0 2
48816: PUSH
48817: LD_INT 3
48819: MINUS
48820: PUSH
48821: LD_INT 3
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: PUSH
48829: LD_VAR 0 1
48833: PUSH
48834: LD_INT 4
48836: MINUS
48837: PUSH
48838: LD_VAR 0 2
48842: PUSH
48843: LD_INT 4
48845: MINUS
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// end ; 5 :
48862: GO 49002
48864: LD_INT 5
48866: DOUBLE
48867: EQUAL
48868: IFTRUE 48872
48870: GO 49001
48872: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48873: LD_ADDR_VAR 0 5
48877: PUSH
48878: LD_VAR 0 1
48882: PUSH
48883: LD_INT 4
48885: MINUS
48886: PUSH
48887: LD_VAR 0 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: PUSH
48900: LD_VAR 0 1
48904: PUSH
48905: LD_VAR 0 2
48909: PUSH
48910: LD_INT 4
48912: MINUS
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: PUSH
48922: LD_VAR 0 1
48926: PUSH
48927: LD_INT 4
48929: PLUS
48930: PUSH
48931: LD_VAR 0 2
48935: PUSH
48936: LD_INT 4
48938: PLUS
48939: PUSH
48940: LD_INT 5
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: LIST
48947: PUSH
48948: LD_VAR 0 1
48952: PUSH
48953: LD_INT 3
48955: PLUS
48956: PUSH
48957: LD_VAR 0 2
48961: PUSH
48962: LD_INT 4
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: PUSH
48970: LD_VAR 0 1
48974: PUSH
48975: LD_VAR 0 2
48979: PUSH
48980: LD_INT 3
48982: PLUS
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// end ; end ;
48999: GO 49002
49001: POP
// result := list ;
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: LD_VAR 0 5
49011: ST_TO_ADDR
// end ;
49012: LD_VAR 0 4
49016: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49017: LD_INT 0
49019: PPUSH
49020: PPUSH
49021: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49022: LD_VAR 0 1
49026: NOT
49027: PUSH
49028: LD_VAR 0 2
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 4
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: IN
49051: NOT
49052: OR
49053: IFFALSE 49057
// exit ;
49055: GO 49149
// tmp := [ ] ;
49057: LD_ADDR_VAR 0 5
49061: PUSH
49062: EMPTY
49063: ST_TO_ADDR
// for i in units do
49064: LD_ADDR_VAR 0 4
49068: PUSH
49069: LD_VAR 0 1
49073: PUSH
49074: FOR_IN
49075: IFFALSE 49118
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
49077: LD_ADDR_VAR 0 5
49081: PUSH
49082: LD_VAR 0 5
49086: PPUSH
49087: LD_VAR 0 5
49091: PUSH
49092: LD_INT 1
49094: PLUS
49095: PPUSH
49096: LD_VAR 0 4
49100: PPUSH
49101: LD_VAR 0 2
49105: PPUSH
49106: CALL_OW 259
49110: PPUSH
49111: CALL_OW 2
49115: ST_TO_ADDR
49116: GO 49074
49118: POP
49119: POP
// if not tmp then
49120: LD_VAR 0 5
49124: NOT
49125: IFFALSE 49129
// exit ;
49127: GO 49149
// result := SortListByListDesc ( units , tmp ) ;
49129: LD_ADDR_VAR 0 3
49133: PUSH
49134: LD_VAR 0 1
49138: PPUSH
49139: LD_VAR 0 5
49143: PPUSH
49144: CALL_OW 77
49148: ST_TO_ADDR
// end ;
49149: LD_VAR 0 3
49153: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49154: LD_INT 0
49156: PPUSH
49157: PPUSH
49158: PPUSH
// result := false ;
49159: LD_ADDR_VAR 0 3
49163: PUSH
49164: LD_INT 0
49166: ST_TO_ADDR
// x := GetX ( building ) ;
49167: LD_ADDR_VAR 0 4
49171: PUSH
49172: LD_VAR 0 2
49176: PPUSH
49177: CALL_OW 250
49181: ST_TO_ADDR
// y := GetY ( building ) ;
49182: LD_ADDR_VAR 0 5
49186: PUSH
49187: LD_VAR 0 2
49191: PPUSH
49192: CALL_OW 251
49196: ST_TO_ADDR
// if not building or not x or not y then
49197: LD_VAR 0 2
49201: NOT
49202: PUSH
49203: LD_VAR 0 4
49207: NOT
49208: OR
49209: PUSH
49210: LD_VAR 0 5
49214: NOT
49215: OR
49216: IFFALSE 49220
// exit ;
49218: GO 49312
// if GetTaskList ( unit ) then
49220: LD_VAR 0 1
49224: PPUSH
49225: CALL_OW 437
49229: IFFALSE 49312
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49231: LD_STRING e
49233: PUSH
49234: LD_VAR 0 1
49238: PPUSH
49239: CALL_OW 437
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: EQUAL
49252: PUSH
49253: LD_VAR 0 4
49257: PUSH
49258: LD_VAR 0 1
49262: PPUSH
49263: CALL_OW 437
49267: PUSH
49268: LD_INT 1
49270: ARRAY
49271: PUSH
49272: LD_INT 2
49274: ARRAY
49275: EQUAL
49276: AND
49277: PUSH
49278: LD_VAR 0 5
49282: PUSH
49283: LD_VAR 0 1
49287: PPUSH
49288: CALL_OW 437
49292: PUSH
49293: LD_INT 1
49295: ARRAY
49296: PUSH
49297: LD_INT 3
49299: ARRAY
49300: EQUAL
49301: AND
49302: IFFALSE 49312
// result := true end ;
49304: LD_ADDR_VAR 0 3
49308: PUSH
49309: LD_INT 1
49311: ST_TO_ADDR
// end ;
49312: LD_VAR 0 3
49316: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49317: LD_INT 0
49319: PPUSH
// result := false ;
49320: LD_ADDR_VAR 0 4
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// if GetTaskList ( unit ) then
49328: LD_VAR 0 1
49332: PPUSH
49333: CALL_OW 437
49337: IFFALSE 49420
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49339: LD_STRING M
49341: PUSH
49342: LD_VAR 0 1
49346: PPUSH
49347: CALL_OW 437
49351: PUSH
49352: LD_INT 1
49354: ARRAY
49355: PUSH
49356: LD_INT 1
49358: ARRAY
49359: EQUAL
49360: PUSH
49361: LD_VAR 0 2
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 437
49375: PUSH
49376: LD_INT 1
49378: ARRAY
49379: PUSH
49380: LD_INT 2
49382: ARRAY
49383: EQUAL
49384: AND
49385: PUSH
49386: LD_VAR 0 3
49390: PUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 437
49400: PUSH
49401: LD_INT 1
49403: ARRAY
49404: PUSH
49405: LD_INT 3
49407: ARRAY
49408: EQUAL
49409: AND
49410: IFFALSE 49420
// result := true ;
49412: LD_ADDR_VAR 0 4
49416: PUSH
49417: LD_INT 1
49419: ST_TO_ADDR
// end ; end ;
49420: LD_VAR 0 4
49424: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49425: LD_INT 0
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
// if not unit or not area then
49431: LD_VAR 0 1
49435: NOT
49436: PUSH
49437: LD_VAR 0 2
49441: NOT
49442: OR
49443: IFFALSE 49447
// exit ;
49445: GO 49611
// tmp := AreaToList ( area , i ) ;
49447: LD_ADDR_VAR 0 6
49451: PUSH
49452: LD_VAR 0 2
49456: PPUSH
49457: LD_VAR 0 5
49461: PPUSH
49462: CALL_OW 517
49466: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49467: LD_ADDR_VAR 0 5
49471: PUSH
49472: DOUBLE
49473: LD_INT 1
49475: DEC
49476: ST_TO_ADDR
49477: LD_VAR 0 6
49481: PUSH
49482: LD_INT 1
49484: ARRAY
49485: PUSH
49486: FOR_TO
49487: IFFALSE 49609
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49489: LD_ADDR_VAR 0 7
49493: PUSH
49494: LD_VAR 0 6
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PUSH
49503: LD_VAR 0 5
49507: ARRAY
49508: PUSH
49509: LD_VAR 0 6
49513: PUSH
49514: LD_INT 2
49516: ARRAY
49517: PUSH
49518: LD_VAR 0 5
49522: ARRAY
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49528: LD_VAR 0 7
49532: PUSH
49533: LD_INT 1
49535: ARRAY
49536: PPUSH
49537: LD_VAR 0 7
49541: PUSH
49542: LD_INT 2
49544: ARRAY
49545: PPUSH
49546: CALL_OW 428
49550: PUSH
49551: LD_INT 0
49553: EQUAL
49554: IFFALSE 49607
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49556: LD_VAR 0 1
49560: PPUSH
49561: LD_VAR 0 7
49565: PUSH
49566: LD_INT 1
49568: ARRAY
49569: PPUSH
49570: LD_VAR 0 7
49574: PUSH
49575: LD_INT 2
49577: ARRAY
49578: PPUSH
49579: LD_VAR 0 3
49583: PPUSH
49584: CALL_OW 48
// result := IsPlaced ( unit ) ;
49588: LD_ADDR_VAR 0 4
49592: PUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 305
49602: ST_TO_ADDR
// exit ;
49603: POP
49604: POP
49605: GO 49611
// end ; end ;
49607: GO 49486
49609: POP
49610: POP
// end ;
49611: LD_VAR 0 4
49615: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49616: LD_INT 0
49618: PPUSH
49619: PPUSH
49620: PPUSH
// if not side or side > 8 then
49621: LD_VAR 0 1
49625: NOT
49626: PUSH
49627: LD_VAR 0 1
49631: PUSH
49632: LD_INT 8
49634: GREATER
49635: OR
49636: IFFALSE 49640
// exit ;
49638: GO 49827
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49640: LD_ADDR_VAR 0 4
49644: PUSH
49645: LD_INT 22
49647: PUSH
49648: LD_VAR 0 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 21
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PPUSH
49671: CALL_OW 69
49675: ST_TO_ADDR
// if not tmp then
49676: LD_VAR 0 4
49680: NOT
49681: IFFALSE 49685
// exit ;
49683: GO 49827
// enable_addtolog := true ;
49685: LD_ADDR_OWVAR 81
49689: PUSH
49690: LD_INT 1
49692: ST_TO_ADDR
// AddToLog ( [ ) ;
49693: LD_STRING [
49695: PPUSH
49696: CALL_OW 561
// for i in tmp do
49700: LD_ADDR_VAR 0 3
49704: PUSH
49705: LD_VAR 0 4
49709: PUSH
49710: FOR_IN
49711: IFFALSE 49818
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49713: LD_STRING [
49715: PUSH
49716: LD_VAR 0 3
49720: PPUSH
49721: CALL_OW 266
49725: STR
49726: PUSH
49727: LD_STRING , 
49729: STR
49730: PUSH
49731: LD_VAR 0 3
49735: PPUSH
49736: CALL_OW 250
49740: STR
49741: PUSH
49742: LD_STRING , 
49744: STR
49745: PUSH
49746: LD_VAR 0 3
49750: PPUSH
49751: CALL_OW 251
49755: STR
49756: PUSH
49757: LD_STRING , 
49759: STR
49760: PUSH
49761: LD_VAR 0 3
49765: PPUSH
49766: CALL_OW 254
49770: STR
49771: PUSH
49772: LD_STRING , 
49774: STR
49775: PUSH
49776: LD_VAR 0 3
49780: PPUSH
49781: LD_INT 1
49783: PPUSH
49784: CALL_OW 268
49788: STR
49789: PUSH
49790: LD_STRING , 
49792: STR
49793: PUSH
49794: LD_VAR 0 3
49798: PPUSH
49799: LD_INT 2
49801: PPUSH
49802: CALL_OW 268
49806: STR
49807: PUSH
49808: LD_STRING ],
49810: STR
49811: PPUSH
49812: CALL_OW 561
// end ;
49816: GO 49710
49818: POP
49819: POP
// AddToLog ( ]; ) ;
49820: LD_STRING ];
49822: PPUSH
49823: CALL_OW 561
// end ;
49827: LD_VAR 0 2
49831: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49832: LD_INT 0
49834: PPUSH
49835: PPUSH
49836: PPUSH
49837: PPUSH
49838: PPUSH
// if not area or not rate or not max then
49839: LD_VAR 0 1
49843: NOT
49844: PUSH
49845: LD_VAR 0 2
49849: NOT
49850: OR
49851: PUSH
49852: LD_VAR 0 4
49856: NOT
49857: OR
49858: IFFALSE 49862
// exit ;
49860: GO 50051
// while 1 do
49862: LD_INT 1
49864: IFFALSE 50051
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49866: LD_ADDR_VAR 0 9
49870: PUSH
49871: LD_VAR 0 1
49875: PPUSH
49876: LD_INT 1
49878: PPUSH
49879: CALL_OW 287
49883: PUSH
49884: LD_INT 10
49886: MUL
49887: ST_TO_ADDR
// r := rate / 10 ;
49888: LD_ADDR_VAR 0 7
49892: PUSH
49893: LD_VAR 0 2
49897: PUSH
49898: LD_INT 10
49900: DIVREAL
49901: ST_TO_ADDR
// time := 1 1$00 ;
49902: LD_ADDR_VAR 0 8
49906: PUSH
49907: LD_INT 2100
49909: ST_TO_ADDR
// if amount < min then
49910: LD_VAR 0 9
49914: PUSH
49915: LD_VAR 0 3
49919: LESS
49920: IFFALSE 49938
// r := r * 2 else
49922: LD_ADDR_VAR 0 7
49926: PUSH
49927: LD_VAR 0 7
49931: PUSH
49932: LD_INT 2
49934: MUL
49935: ST_TO_ADDR
49936: GO 49964
// if amount > max then
49938: LD_VAR 0 9
49942: PUSH
49943: LD_VAR 0 4
49947: GREATER
49948: IFFALSE 49964
// r := r / 2 ;
49950: LD_ADDR_VAR 0 7
49954: PUSH
49955: LD_VAR 0 7
49959: PUSH
49960: LD_INT 2
49962: DIVREAL
49963: ST_TO_ADDR
// time := time / r ;
49964: LD_ADDR_VAR 0 8
49968: PUSH
49969: LD_VAR 0 8
49973: PUSH
49974: LD_VAR 0 7
49978: DIVREAL
49979: ST_TO_ADDR
// if time < 0 then
49980: LD_VAR 0 8
49984: PUSH
49985: LD_INT 0
49987: LESS
49988: IFFALSE 50005
// time := time * - 1 ;
49990: LD_ADDR_VAR 0 8
49994: PUSH
49995: LD_VAR 0 8
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: MUL
50004: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
50005: LD_VAR 0 8
50009: PUSH
50010: LD_INT 35
50012: PPUSH
50013: LD_INT 875
50015: PPUSH
50016: CALL_OW 12
50020: PLUS
50021: PPUSH
50022: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50026: LD_INT 1
50028: PPUSH
50029: LD_INT 5
50031: PPUSH
50032: CALL_OW 12
50036: PPUSH
50037: LD_VAR 0 1
50041: PPUSH
50042: LD_INT 1
50044: PPUSH
50045: CALL_OW 55
// end ;
50049: GO 49862
// end ;
50051: LD_VAR 0 5
50055: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50056: LD_INT 0
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
// if not turrets or not factories then
50066: LD_VAR 0 1
50070: NOT
50071: PUSH
50072: LD_VAR 0 2
50076: NOT
50077: OR
50078: IFFALSE 50082
// exit ;
50080: GO 50389
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50082: LD_ADDR_VAR 0 10
50086: PUSH
50087: LD_INT 5
50089: PUSH
50090: LD_INT 6
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 4
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: LD_INT 5
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 24
50124: PUSH
50125: LD_INT 25
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 23
50134: PUSH
50135: LD_INT 27
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 42
50148: PUSH
50149: LD_INT 43
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 44
50158: PUSH
50159: LD_INT 46
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 45
50168: PUSH
50169: LD_INT 47
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
// result := [ ] ;
50186: LD_ADDR_VAR 0 3
50190: PUSH
50191: EMPTY
50192: ST_TO_ADDR
// for i in turrets do
50193: LD_ADDR_VAR 0 4
50197: PUSH
50198: LD_VAR 0 1
50202: PUSH
50203: FOR_IN
50204: IFFALSE 50387
// begin nat := GetNation ( i ) ;
50206: LD_ADDR_VAR 0 7
50210: PUSH
50211: LD_VAR 0 4
50215: PPUSH
50216: CALL_OW 248
50220: ST_TO_ADDR
// weapon := 0 ;
50221: LD_ADDR_VAR 0 8
50225: PUSH
50226: LD_INT 0
50228: ST_TO_ADDR
// if not nat then
50229: LD_VAR 0 7
50233: NOT
50234: IFFALSE 50238
// continue ;
50236: GO 50203
// for j in list [ nat ] do
50238: LD_ADDR_VAR 0 5
50242: PUSH
50243: LD_VAR 0 10
50247: PUSH
50248: LD_VAR 0 7
50252: ARRAY
50253: PUSH
50254: FOR_IN
50255: IFFALSE 50296
// if GetBWeapon ( i ) = j [ 1 ] then
50257: LD_VAR 0 4
50261: PPUSH
50262: CALL_OW 269
50266: PUSH
50267: LD_VAR 0 5
50271: PUSH
50272: LD_INT 1
50274: ARRAY
50275: EQUAL
50276: IFFALSE 50294
// begin weapon := j [ 2 ] ;
50278: LD_ADDR_VAR 0 8
50282: PUSH
50283: LD_VAR 0 5
50287: PUSH
50288: LD_INT 2
50290: ARRAY
50291: ST_TO_ADDR
// break ;
50292: GO 50296
// end ;
50294: GO 50254
50296: POP
50297: POP
// if not weapon then
50298: LD_VAR 0 8
50302: NOT
50303: IFFALSE 50307
// continue ;
50305: GO 50203
// for k in factories do
50307: LD_ADDR_VAR 0 6
50311: PUSH
50312: LD_VAR 0 2
50316: PUSH
50317: FOR_IN
50318: IFFALSE 50383
// begin weapons := AvailableWeaponList ( k ) ;
50320: LD_ADDR_VAR 0 9
50324: PUSH
50325: LD_VAR 0 6
50329: PPUSH
50330: CALL_OW 478
50334: ST_TO_ADDR
// if not weapons then
50335: LD_VAR 0 9
50339: NOT
50340: IFFALSE 50344
// continue ;
50342: GO 50317
// if weapon in weapons then
50344: LD_VAR 0 8
50348: PUSH
50349: LD_VAR 0 9
50353: IN
50354: IFFALSE 50381
// begin result := [ i , weapon ] ;
50356: LD_ADDR_VAR 0 3
50360: PUSH
50361: LD_VAR 0 4
50365: PUSH
50366: LD_VAR 0 8
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// exit ;
50375: POP
50376: POP
50377: POP
50378: POP
50379: GO 50389
// end ; end ;
50381: GO 50317
50383: POP
50384: POP
// end ;
50385: GO 50203
50387: POP
50388: POP
// end ;
50389: LD_VAR 0 3
50393: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50394: LD_INT 0
50396: PPUSH
// if not side or side > 8 then
50397: LD_VAR 0 3
50401: NOT
50402: PUSH
50403: LD_VAR 0 3
50407: PUSH
50408: LD_INT 8
50410: GREATER
50411: OR
50412: IFFALSE 50416
// exit ;
50414: GO 50475
// if not range then
50416: LD_VAR 0 4
50420: NOT
50421: IFFALSE 50432
// range := - 12 ;
50423: LD_ADDR_VAR 0 4
50427: PUSH
50428: LD_INT 12
50430: NEG
50431: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50432: LD_VAR 0 1
50436: PPUSH
50437: LD_VAR 0 2
50441: PPUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: LD_VAR 0 4
50451: PPUSH
50452: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50456: LD_VAR 0 1
50460: PPUSH
50461: LD_VAR 0 2
50465: PPUSH
50466: LD_VAR 0 3
50470: PPUSH
50471: CALL_OW 331
// end ;
50475: LD_VAR 0 5
50479: RET
// export function Video ( mode ) ; begin
50480: LD_INT 0
50482: PPUSH
// ingame_video = mode ;
50483: LD_ADDR_OWVAR 52
50487: PUSH
50488: LD_VAR 0 1
50492: ST_TO_ADDR
// interface_hidden = mode ;
50493: LD_ADDR_OWVAR 54
50497: PUSH
50498: LD_VAR 0 1
50502: ST_TO_ADDR
// end ;
50503: LD_VAR 0 2
50507: RET
// export function Join ( array , element ) ; begin
50508: LD_INT 0
50510: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50511: LD_ADDR_VAR 0 3
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: LD_VAR 0 1
50525: PUSH
50526: LD_INT 1
50528: PLUS
50529: PPUSH
50530: LD_VAR 0 2
50534: PPUSH
50535: CALL_OW 1
50539: ST_TO_ADDR
// end ;
50540: LD_VAR 0 3
50544: RET
// export function JoinUnion ( array , element ) ; begin
50545: LD_INT 0
50547: PPUSH
// result := array union element ;
50548: LD_ADDR_VAR 0 3
50552: PUSH
50553: LD_VAR 0 1
50557: PUSH
50558: LD_VAR 0 2
50562: UNION
50563: ST_TO_ADDR
// end ;
50564: LD_VAR 0 3
50568: RET
// export function GetBehemoths ( side ) ; begin
50569: LD_INT 0
50571: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50572: LD_ADDR_VAR 0 2
50576: PUSH
50577: LD_INT 22
50579: PUSH
50580: LD_VAR 0 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 31
50591: PUSH
50592: LD_INT 25
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PPUSH
50603: CALL_OW 69
50607: ST_TO_ADDR
// end ;
50608: LD_VAR 0 2
50612: RET
// export function Shuffle ( array ) ; var i , index ; begin
50613: LD_INT 0
50615: PPUSH
50616: PPUSH
50617: PPUSH
// result := [ ] ;
50618: LD_ADDR_VAR 0 2
50622: PUSH
50623: EMPTY
50624: ST_TO_ADDR
// if not array then
50625: LD_VAR 0 1
50629: NOT
50630: IFFALSE 50634
// exit ;
50632: GO 50733
// Randomize ;
50634: CALL_OW 10
// for i = array downto 1 do
50638: LD_ADDR_VAR 0 3
50642: PUSH
50643: DOUBLE
50644: LD_VAR 0 1
50648: INC
50649: ST_TO_ADDR
50650: LD_INT 1
50652: PUSH
50653: FOR_DOWNTO
50654: IFFALSE 50731
// begin index := rand ( 1 , array ) ;
50656: LD_ADDR_VAR 0 4
50660: PUSH
50661: LD_INT 1
50663: PPUSH
50664: LD_VAR 0 1
50668: PPUSH
50669: CALL_OW 12
50673: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50674: LD_ADDR_VAR 0 2
50678: PUSH
50679: LD_VAR 0 2
50683: PPUSH
50684: LD_VAR 0 2
50688: PUSH
50689: LD_INT 1
50691: PLUS
50692: PPUSH
50693: LD_VAR 0 1
50697: PUSH
50698: LD_VAR 0 4
50702: ARRAY
50703: PPUSH
50704: CALL_OW 2
50708: ST_TO_ADDR
// array := Delete ( array , index ) ;
50709: LD_ADDR_VAR 0 1
50713: PUSH
50714: LD_VAR 0 1
50718: PPUSH
50719: LD_VAR 0 4
50723: PPUSH
50724: CALL_OW 3
50728: ST_TO_ADDR
// end ;
50729: GO 50653
50731: POP
50732: POP
// end ;
50733: LD_VAR 0 2
50737: RET
// export function GetBaseMaterials ( base ) ; begin
50738: LD_INT 0
50740: PPUSH
// result := [ 0 , 0 , 0 ] ;
50741: LD_ADDR_VAR 0 2
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// if not base then
50760: LD_VAR 0 1
50764: NOT
50765: IFFALSE 50769
// exit ;
50767: GO 50818
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50769: LD_ADDR_VAR 0 2
50773: PUSH
50774: LD_VAR 0 1
50778: PPUSH
50779: LD_INT 1
50781: PPUSH
50782: CALL_OW 275
50786: PUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: LD_INT 2
50794: PPUSH
50795: CALL_OW 275
50799: PUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: LD_INT 3
50807: PPUSH
50808: CALL_OW 275
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 2
50822: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50823: LD_INT 0
50825: PPUSH
50826: PPUSH
// result := array ;
50827: LD_ADDR_VAR 0 3
50831: PUSH
50832: LD_VAR 0 1
50836: ST_TO_ADDR
// if size > 0 then
50837: LD_VAR 0 2
50841: PUSH
50842: LD_INT 0
50844: GREATER
50845: IFFALSE 50891
// for i := array downto size do
50847: LD_ADDR_VAR 0 4
50851: PUSH
50852: DOUBLE
50853: LD_VAR 0 1
50857: INC
50858: ST_TO_ADDR
50859: LD_VAR 0 2
50863: PUSH
50864: FOR_DOWNTO
50865: IFFALSE 50889
// result := Delete ( result , result ) ;
50867: LD_ADDR_VAR 0 3
50871: PUSH
50872: LD_VAR 0 3
50876: PPUSH
50877: LD_VAR 0 3
50881: PPUSH
50882: CALL_OW 3
50886: ST_TO_ADDR
50887: GO 50864
50889: POP
50890: POP
// end ;
50891: LD_VAR 0 3
50895: RET
// export function ComExit ( unit ) ; var tmp ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
// if not IsInUnit ( unit ) then
50900: LD_VAR 0 1
50904: PPUSH
50905: CALL_OW 310
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 50974
// tmp := IsInUnit ( unit ) ;
50914: LD_ADDR_VAR 0 3
50918: PUSH
50919: LD_VAR 0 1
50923: PPUSH
50924: CALL_OW 310
50928: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50929: LD_VAR 0 3
50933: PPUSH
50934: CALL_OW 247
50938: PUSH
50939: LD_INT 2
50941: EQUAL
50942: IFFALSE 50955
// ComExitVehicle ( unit ) else
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 121
50953: GO 50964
// ComExitBuilding ( unit ) ;
50955: LD_VAR 0 1
50959: PPUSH
50960: CALL_OW 122
// result := tmp ;
50964: LD_ADDR_VAR 0 2
50968: PUSH
50969: LD_VAR 0 3
50973: ST_TO_ADDR
// end ;
50974: LD_VAR 0 2
50978: RET
// export function ComExitAll ( units ) ; var i ; begin
50979: LD_INT 0
50981: PPUSH
50982: PPUSH
// if not units then
50983: LD_VAR 0 1
50987: NOT
50988: IFFALSE 50992
// exit ;
50990: GO 51018
// for i in units do
50992: LD_ADDR_VAR 0 3
50996: PUSH
50997: LD_VAR 0 1
51001: PUSH
51002: FOR_IN
51003: IFFALSE 51016
// ComExit ( i ) ;
51005: LD_VAR 0 3
51009: PPUSH
51010: CALL 50896 0 1
51014: GO 51002
51016: POP
51017: POP
// end ;
51018: LD_VAR 0 2
51022: RET
// export function ResetHc ; begin
51023: LD_INT 0
51025: PPUSH
// InitHc ;
51026: CALL_OW 19
// hc_importance := 0 ;
51030: LD_ADDR_OWVAR 32
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// end ;
51038: LD_VAR 0 1
51042: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
51043: LD_INT 0
51045: PPUSH
51046: PPUSH
51047: PPUSH
// _x := ( x1 + x2 ) div 2 ;
51048: LD_ADDR_VAR 0 6
51052: PUSH
51053: LD_VAR 0 1
51057: PUSH
51058: LD_VAR 0 3
51062: PLUS
51063: PUSH
51064: LD_INT 2
51066: DIV
51067: ST_TO_ADDR
// if _x < 0 then
51068: LD_VAR 0 6
51072: PUSH
51073: LD_INT 0
51075: LESS
51076: IFFALSE 51093
// _x := _x * - 1 ;
51078: LD_ADDR_VAR 0 6
51082: PUSH
51083: LD_VAR 0 6
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: MUL
51092: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
51093: LD_ADDR_VAR 0 7
51097: PUSH
51098: LD_VAR 0 2
51102: PUSH
51103: LD_VAR 0 4
51107: PLUS
51108: PUSH
51109: LD_INT 2
51111: DIV
51112: ST_TO_ADDR
// if _y < 0 then
51113: LD_VAR 0 7
51117: PUSH
51118: LD_INT 0
51120: LESS
51121: IFFALSE 51138
// _y := _y * - 1 ;
51123: LD_ADDR_VAR 0 7
51127: PUSH
51128: LD_VAR 0 7
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: MUL
51137: ST_TO_ADDR
// result := [ _x , _y ] ;
51138: LD_ADDR_VAR 0 5
51142: PUSH
51143: LD_VAR 0 6
51147: PUSH
51148: LD_VAR 0 7
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// end ;
51157: LD_VAR 0 5
51161: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51162: LD_INT 0
51164: PPUSH
51165: PPUSH
51166: PPUSH
51167: PPUSH
// task := GetTaskList ( unit ) ;
51168: LD_ADDR_VAR 0 7
51172: PUSH
51173: LD_VAR 0 1
51177: PPUSH
51178: CALL_OW 437
51182: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51183: LD_VAR 0 7
51187: NOT
51188: PUSH
51189: LD_VAR 0 1
51193: PPUSH
51194: LD_VAR 0 2
51198: PPUSH
51199: CALL_OW 308
51203: NOT
51204: AND
51205: IFFALSE 51209
// exit ;
51207: GO 51327
// if IsInArea ( unit , area ) then
51209: LD_VAR 0 1
51213: PPUSH
51214: LD_VAR 0 2
51218: PPUSH
51219: CALL_OW 308
51223: IFFALSE 51241
// begin ComMoveToArea ( unit , goAway ) ;
51225: LD_VAR 0 1
51229: PPUSH
51230: LD_VAR 0 3
51234: PPUSH
51235: CALL_OW 113
// exit ;
51239: GO 51327
// end ; if task [ 1 ] [ 1 ] <> M then
51241: LD_VAR 0 7
51245: PUSH
51246: LD_INT 1
51248: ARRAY
51249: PUSH
51250: LD_INT 1
51252: ARRAY
51253: PUSH
51254: LD_STRING M
51256: NONEQUAL
51257: IFFALSE 51261
// exit ;
51259: GO 51327
// x := task [ 1 ] [ 2 ] ;
51261: LD_ADDR_VAR 0 5
51265: PUSH
51266: LD_VAR 0 7
51270: PUSH
51271: LD_INT 1
51273: ARRAY
51274: PUSH
51275: LD_INT 2
51277: ARRAY
51278: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51279: LD_ADDR_VAR 0 6
51283: PUSH
51284: LD_VAR 0 7
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PUSH
51293: LD_INT 3
51295: ARRAY
51296: ST_TO_ADDR
// if InArea ( x , y , area ) then
51297: LD_VAR 0 5
51301: PPUSH
51302: LD_VAR 0 6
51306: PPUSH
51307: LD_VAR 0 2
51311: PPUSH
51312: CALL_OW 309
51316: IFFALSE 51327
// ComStop ( unit ) ;
51318: LD_VAR 0 1
51322: PPUSH
51323: CALL_OW 141
// end ;
51327: LD_VAR 0 4
51331: RET
// export function Abs ( value ) ; begin
51332: LD_INT 0
51334: PPUSH
// result := value ;
51335: LD_ADDR_VAR 0 2
51339: PUSH
51340: LD_VAR 0 1
51344: ST_TO_ADDR
// if value < 0 then
51345: LD_VAR 0 1
51349: PUSH
51350: LD_INT 0
51352: LESS
51353: IFFALSE 51370
// result := value * - 1 ;
51355: LD_ADDR_VAR 0 2
51359: PUSH
51360: LD_VAR 0 1
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: MUL
51369: ST_TO_ADDR
// end ;
51370: LD_VAR 0 2
51374: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51375: LD_INT 0
51377: PPUSH
51378: PPUSH
51379: PPUSH
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
// if not unit or not building then
51385: LD_VAR 0 1
51389: NOT
51390: PUSH
51391: LD_VAR 0 2
51395: NOT
51396: OR
51397: IFFALSE 51401
// exit ;
51399: GO 51627
// x := GetX ( building ) ;
51401: LD_ADDR_VAR 0 4
51405: PUSH
51406: LD_VAR 0 2
51410: PPUSH
51411: CALL_OW 250
51415: ST_TO_ADDR
// y := GetY ( building ) ;
51416: LD_ADDR_VAR 0 6
51420: PUSH
51421: LD_VAR 0 2
51425: PPUSH
51426: CALL_OW 251
51430: ST_TO_ADDR
// d := GetDir ( building ) ;
51431: LD_ADDR_VAR 0 8
51435: PUSH
51436: LD_VAR 0 2
51440: PPUSH
51441: CALL_OW 254
51445: ST_TO_ADDR
// r := 4 ;
51446: LD_ADDR_VAR 0 9
51450: PUSH
51451: LD_INT 4
51453: ST_TO_ADDR
// for i := 1 to 5 do
51454: LD_ADDR_VAR 0 10
51458: PUSH
51459: DOUBLE
51460: LD_INT 1
51462: DEC
51463: ST_TO_ADDR
51464: LD_INT 5
51466: PUSH
51467: FOR_TO
51468: IFFALSE 51625
// begin _x := ShiftX ( x , d , r + i ) ;
51470: LD_ADDR_VAR 0 5
51474: PUSH
51475: LD_VAR 0 4
51479: PPUSH
51480: LD_VAR 0 8
51484: PPUSH
51485: LD_VAR 0 9
51489: PUSH
51490: LD_VAR 0 10
51494: PLUS
51495: PPUSH
51496: CALL_OW 272
51500: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51501: LD_ADDR_VAR 0 7
51505: PUSH
51506: LD_VAR 0 6
51510: PPUSH
51511: LD_VAR 0 8
51515: PPUSH
51516: LD_VAR 0 9
51520: PUSH
51521: LD_VAR 0 10
51525: PLUS
51526: PPUSH
51527: CALL_OW 273
51531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51532: LD_VAR 0 5
51536: PPUSH
51537: LD_VAR 0 7
51541: PPUSH
51542: CALL_OW 488
51546: PUSH
51547: LD_VAR 0 5
51551: PPUSH
51552: LD_VAR 0 7
51556: PPUSH
51557: CALL_OW 428
51561: PPUSH
51562: CALL_OW 247
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: IN
51577: NOT
51578: AND
51579: IFFALSE 51623
// begin ComMoveXY ( unit , _x , _y ) ;
51581: LD_VAR 0 1
51585: PPUSH
51586: LD_VAR 0 5
51590: PPUSH
51591: LD_VAR 0 7
51595: PPUSH
51596: CALL_OW 111
// result := [ _x , _y ] ;
51600: LD_ADDR_VAR 0 3
51604: PUSH
51605: LD_VAR 0 5
51609: PUSH
51610: LD_VAR 0 7
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// exit ;
51619: POP
51620: POP
51621: GO 51627
// end ; end ;
51623: GO 51467
51625: POP
51626: POP
// end ;
51627: LD_VAR 0 3
51631: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51632: LD_INT 0
51634: PPUSH
51635: PPUSH
51636: PPUSH
// result := 0 ;
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51645: LD_VAR 0 1
51649: PUSH
51650: LD_INT 0
51652: LESS
51653: PUSH
51654: LD_VAR 0 1
51658: PUSH
51659: LD_INT 8
51661: GREATER
51662: OR
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_INT 0
51671: LESS
51672: OR
51673: PUSH
51674: LD_VAR 0 2
51678: PUSH
51679: LD_INT 8
51681: GREATER
51682: OR
51683: IFFALSE 51687
// exit ;
51685: GO 51762
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51687: LD_ADDR_VAR 0 4
51691: PUSH
51692: LD_INT 22
51694: PUSH
51695: LD_VAR 0 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PPUSH
51704: CALL_OW 69
51708: PUSH
51709: FOR_IN
51710: IFFALSE 51760
// begin un := UnitShoot ( i ) ;
51712: LD_ADDR_VAR 0 5
51716: PUSH
51717: LD_VAR 0 4
51721: PPUSH
51722: CALL_OW 504
51726: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51727: LD_VAR 0 5
51731: PPUSH
51732: CALL_OW 255
51736: PUSH
51737: LD_VAR 0 1
51741: EQUAL
51742: IFFALSE 51758
// begin result := un ;
51744: LD_ADDR_VAR 0 3
51748: PUSH
51749: LD_VAR 0 5
51753: ST_TO_ADDR
// exit ;
51754: POP
51755: POP
51756: GO 51762
// end ; end ;
51758: GO 51709
51760: POP
51761: POP
// end ;
51762: LD_VAR 0 3
51766: RET
// export function GetCargoBay ( units ) ; begin
51767: LD_INT 0
51769: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51770: LD_ADDR_VAR 0 2
51774: PUSH
51775: LD_VAR 0 1
51779: PPUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 34
51785: PUSH
51786: LD_INT 12
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 34
51795: PUSH
51796: LD_INT 51
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 34
51805: PUSH
51806: LD_INT 32
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 34
51815: PUSH
51816: LD_EXP 104
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: PPUSH
51832: CALL_OW 72
51836: ST_TO_ADDR
// end ;
51837: LD_VAR 0 2
51841: RET
// export function Negate ( value ) ; begin
51842: LD_INT 0
51844: PPUSH
// result := not value ;
51845: LD_ADDR_VAR 0 2
51849: PUSH
51850: LD_VAR 0 1
51854: NOT
51855: ST_TO_ADDR
// end ;
51856: LD_VAR 0 2
51860: RET
// export function Inc ( value ) ; begin
51861: LD_INT 0
51863: PPUSH
// result := value + 1 ;
51864: LD_ADDR_VAR 0 2
51868: PUSH
51869: LD_VAR 0 1
51873: PUSH
51874: LD_INT 1
51876: PLUS
51877: ST_TO_ADDR
// end ;
51878: LD_VAR 0 2
51882: RET
// export function Dec ( value ) ; begin
51883: LD_INT 0
51885: PPUSH
// result := value - 1 ;
51886: LD_ADDR_VAR 0 2
51890: PUSH
51891: LD_VAR 0 1
51895: PUSH
51896: LD_INT 1
51898: MINUS
51899: ST_TO_ADDR
// end ;
51900: LD_VAR 0 2
51904: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51905: LD_INT 0
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51915: LD_VAR 0 1
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: CALL_OW 488
51929: NOT
51930: PUSH
51931: LD_VAR 0 3
51935: PPUSH
51936: LD_VAR 0 4
51940: PPUSH
51941: CALL_OW 488
51945: NOT
51946: OR
51947: IFFALSE 51960
// begin result := - 1 ;
51949: LD_ADDR_VAR 0 5
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: ST_TO_ADDR
// exit ;
51958: GO 52195
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51960: LD_ADDR_VAR 0 12
51964: PUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: LD_VAR 0 2
51974: PPUSH
51975: LD_VAR 0 3
51979: PPUSH
51980: LD_VAR 0 4
51984: PPUSH
51985: CALL 51043 0 4
51989: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51990: LD_ADDR_VAR 0 11
51994: PUSH
51995: LD_VAR 0 1
51999: PPUSH
52000: LD_VAR 0 2
52004: PPUSH
52005: LD_VAR 0 12
52009: PUSH
52010: LD_INT 1
52012: ARRAY
52013: PPUSH
52014: LD_VAR 0 12
52018: PUSH
52019: LD_INT 2
52021: ARRAY
52022: PPUSH
52023: CALL_OW 298
52027: ST_TO_ADDR
// distance := 9999 ;
52028: LD_ADDR_VAR 0 10
52032: PUSH
52033: LD_INT 9999
52035: ST_TO_ADDR
// for i := 0 to 5 do
52036: LD_ADDR_VAR 0 6
52040: PUSH
52041: DOUBLE
52042: LD_INT 0
52044: DEC
52045: ST_TO_ADDR
52046: LD_INT 5
52048: PUSH
52049: FOR_TO
52050: IFFALSE 52193
// begin _x := ShiftX ( x1 , i , centerDist ) ;
52052: LD_ADDR_VAR 0 7
52056: PUSH
52057: LD_VAR 0 1
52061: PPUSH
52062: LD_VAR 0 6
52066: PPUSH
52067: LD_VAR 0 11
52071: PPUSH
52072: CALL_OW 272
52076: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
52077: LD_ADDR_VAR 0 8
52081: PUSH
52082: LD_VAR 0 2
52086: PPUSH
52087: LD_VAR 0 6
52091: PPUSH
52092: LD_VAR 0 11
52096: PPUSH
52097: CALL_OW 273
52101: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52102: LD_VAR 0 7
52106: PPUSH
52107: LD_VAR 0 8
52111: PPUSH
52112: CALL_OW 488
52116: NOT
52117: IFFALSE 52121
// continue ;
52119: GO 52049
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
52121: LD_ADDR_VAR 0 9
52125: PUSH
52126: LD_VAR 0 12
52130: PUSH
52131: LD_INT 1
52133: ARRAY
52134: PPUSH
52135: LD_VAR 0 12
52139: PUSH
52140: LD_INT 2
52142: ARRAY
52143: PPUSH
52144: LD_VAR 0 7
52148: PPUSH
52149: LD_VAR 0 8
52153: PPUSH
52154: CALL_OW 298
52158: ST_TO_ADDR
// if tmp < distance then
52159: LD_VAR 0 9
52163: PUSH
52164: LD_VAR 0 10
52168: LESS
52169: IFFALSE 52191
// begin result := i ;
52171: LD_ADDR_VAR 0 5
52175: PUSH
52176: LD_VAR 0 6
52180: ST_TO_ADDR
// distance := tmp ;
52181: LD_ADDR_VAR 0 10
52185: PUSH
52186: LD_VAR 0 9
52190: ST_TO_ADDR
// end ; end ;
52191: GO 52049
52193: POP
52194: POP
// end ;
52195: LD_VAR 0 5
52199: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
// if not driver or not IsInUnit ( driver ) then
52204: LD_VAR 0 1
52208: NOT
52209: PUSH
52210: LD_VAR 0 1
52214: PPUSH
52215: CALL_OW 310
52219: NOT
52220: OR
52221: IFFALSE 52225
// exit ;
52223: GO 52315
// vehicle := IsInUnit ( driver ) ;
52225: LD_ADDR_VAR 0 3
52229: PUSH
52230: LD_VAR 0 1
52234: PPUSH
52235: CALL_OW 310
52239: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52240: LD_VAR 0 1
52244: PPUSH
52245: LD_STRING \
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: PUSH
52275: LD_STRING E
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_VAR 0 3
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PPUSH
52311: CALL_OW 446
// end ;
52315: LD_VAR 0 2
52319: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52320: LD_INT 0
52322: PPUSH
52323: PPUSH
// if not driver or not IsInUnit ( driver ) then
52324: LD_VAR 0 1
52328: NOT
52329: PUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: CALL_OW 310
52339: NOT
52340: OR
52341: IFFALSE 52345
// exit ;
52343: GO 52435
// vehicle := IsInUnit ( driver ) ;
52345: LD_ADDR_VAR 0 3
52349: PUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL_OW 310
52359: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52360: LD_VAR 0 1
52364: PPUSH
52365: LD_STRING \
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: PUSH
52395: LD_STRING E
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_VAR 0 3
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PPUSH
52431: CALL_OW 447
// end ;
52435: LD_VAR 0 2
52439: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52440: LD_INT 0
52442: PPUSH
52443: PPUSH
52444: PPUSH
// tmp := [ ] ;
52445: LD_ADDR_VAR 0 5
52449: PUSH
52450: EMPTY
52451: ST_TO_ADDR
// for i in units do
52452: LD_ADDR_VAR 0 4
52456: PUSH
52457: LD_VAR 0 1
52461: PUSH
52462: FOR_IN
52463: IFFALSE 52501
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52465: LD_ADDR_VAR 0 5
52469: PUSH
52470: LD_VAR 0 5
52474: PPUSH
52475: LD_VAR 0 5
52479: PUSH
52480: LD_INT 1
52482: PLUS
52483: PPUSH
52484: LD_VAR 0 4
52488: PPUSH
52489: CALL_OW 256
52493: PPUSH
52494: CALL_OW 2
52498: ST_TO_ADDR
52499: GO 52462
52501: POP
52502: POP
// if not tmp then
52503: LD_VAR 0 5
52507: NOT
52508: IFFALSE 52512
// exit ;
52510: GO 52560
// if asc then
52512: LD_VAR 0 2
52516: IFFALSE 52540
// result := SortListByListAsc ( units , tmp ) else
52518: LD_ADDR_VAR 0 3
52522: PUSH
52523: LD_VAR 0 1
52527: PPUSH
52528: LD_VAR 0 5
52532: PPUSH
52533: CALL_OW 76
52537: ST_TO_ADDR
52538: GO 52560
// result := SortListByListDesc ( units , tmp ) ;
52540: LD_ADDR_VAR 0 3
52544: PUSH
52545: LD_VAR 0 1
52549: PPUSH
52550: LD_VAR 0 5
52554: PPUSH
52555: CALL_OW 77
52559: ST_TO_ADDR
// end ;
52560: LD_VAR 0 3
52564: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
52565: LD_INT 0
52567: PPUSH
52568: PPUSH
// task := GetTaskList ( mech ) ;
52569: LD_ADDR_VAR 0 4
52573: PUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 437
52583: ST_TO_ADDR
// if not task then
52584: LD_VAR 0 4
52588: NOT
52589: IFFALSE 52593
// exit ;
52591: GO 52635
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52593: LD_ADDR_VAR 0 3
52597: PUSH
52598: LD_VAR 0 4
52602: PUSH
52603: LD_INT 1
52605: ARRAY
52606: PUSH
52607: LD_INT 1
52609: ARRAY
52610: PUSH
52611: LD_STRING r
52613: EQUAL
52614: PUSH
52615: LD_VAR 0 4
52619: PUSH
52620: LD_INT 1
52622: ARRAY
52623: PUSH
52624: LD_INT 4
52626: ARRAY
52627: PUSH
52628: LD_VAR 0 2
52632: EQUAL
52633: AND
52634: ST_TO_ADDR
// end ;
52635: LD_VAR 0 3
52639: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52640: LD_INT 0
52642: PPUSH
// SetDir ( unit , d ) ;
52643: LD_VAR 0 1
52647: PPUSH
52648: LD_VAR 0 4
52652: PPUSH
52653: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52657: LD_VAR 0 1
52661: PPUSH
52662: LD_VAR 0 2
52666: PPUSH
52667: LD_VAR 0 3
52671: PPUSH
52672: LD_VAR 0 5
52676: PPUSH
52677: CALL_OW 48
// end ;
52681: LD_VAR 0 6
52685: RET
// export function ToNaturalNumber ( number ) ; begin
52686: LD_INT 0
52688: PPUSH
// result := number div 1 ;
52689: LD_ADDR_VAR 0 2
52693: PUSH
52694: LD_VAR 0 1
52698: PUSH
52699: LD_INT 1
52701: DIV
52702: ST_TO_ADDR
// if number < 0 then
52703: LD_VAR 0 1
52707: PUSH
52708: LD_INT 0
52710: LESS
52711: IFFALSE 52721
// result := 0 ;
52713: LD_ADDR_VAR 0 2
52717: PUSH
52718: LD_INT 0
52720: ST_TO_ADDR
// end ;
52721: LD_VAR 0 2
52725: RET
// export function SortByClass ( units , class ) ; var un ; begin
52726: LD_INT 0
52728: PPUSH
52729: PPUSH
// if not units or not class then
52730: LD_VAR 0 1
52734: NOT
52735: PUSH
52736: LD_VAR 0 2
52740: NOT
52741: OR
52742: IFFALSE 52746
// exit ;
52744: GO 52841
// result := [ ] ;
52746: LD_ADDR_VAR 0 3
52750: PUSH
52751: EMPTY
52752: ST_TO_ADDR
// for un in units do
52753: LD_ADDR_VAR 0 4
52757: PUSH
52758: LD_VAR 0 1
52762: PUSH
52763: FOR_IN
52764: IFFALSE 52839
// if GetClass ( un ) = class then
52766: LD_VAR 0 4
52770: PPUSH
52771: CALL_OW 257
52775: PUSH
52776: LD_VAR 0 2
52780: EQUAL
52781: IFFALSE 52808
// result := Insert ( result , 1 , un ) else
52783: LD_ADDR_VAR 0 3
52787: PUSH
52788: LD_VAR 0 3
52792: PPUSH
52793: LD_INT 1
52795: PPUSH
52796: LD_VAR 0 4
52800: PPUSH
52801: CALL_OW 2
52805: ST_TO_ADDR
52806: GO 52837
// result := Replace ( result , result + 1 , un ) ;
52808: LD_ADDR_VAR 0 3
52812: PUSH
52813: LD_VAR 0 3
52817: PPUSH
52818: LD_VAR 0 3
52822: PUSH
52823: LD_INT 1
52825: PLUS
52826: PPUSH
52827: LD_VAR 0 4
52831: PPUSH
52832: CALL_OW 1
52836: ST_TO_ADDR
52837: GO 52763
52839: POP
52840: POP
// end ;
52841: LD_VAR 0 3
52845: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52846: LD_INT 0
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
// result := [ ] ;
52855: LD_ADDR_VAR 0 4
52859: PUSH
52860: EMPTY
52861: ST_TO_ADDR
// if x - r < 0 then
52862: LD_VAR 0 1
52866: PUSH
52867: LD_VAR 0 3
52871: MINUS
52872: PUSH
52873: LD_INT 0
52875: LESS
52876: IFFALSE 52888
// min_x := 0 else
52878: LD_ADDR_VAR 0 8
52882: PUSH
52883: LD_INT 0
52885: ST_TO_ADDR
52886: GO 52904
// min_x := x - r ;
52888: LD_ADDR_VAR 0 8
52892: PUSH
52893: LD_VAR 0 1
52897: PUSH
52898: LD_VAR 0 3
52902: MINUS
52903: ST_TO_ADDR
// if y - r < 0 then
52904: LD_VAR 0 2
52908: PUSH
52909: LD_VAR 0 3
52913: MINUS
52914: PUSH
52915: LD_INT 0
52917: LESS
52918: IFFALSE 52930
// min_y := 0 else
52920: LD_ADDR_VAR 0 7
52924: PUSH
52925: LD_INT 0
52927: ST_TO_ADDR
52928: GO 52946
// min_y := y - r ;
52930: LD_ADDR_VAR 0 7
52934: PUSH
52935: LD_VAR 0 2
52939: PUSH
52940: LD_VAR 0 3
52944: MINUS
52945: ST_TO_ADDR
// max_x := x + r ;
52946: LD_ADDR_VAR 0 9
52950: PUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_VAR 0 3
52960: PLUS
52961: ST_TO_ADDR
// max_y := y + r ;
52962: LD_ADDR_VAR 0 10
52966: PUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_VAR 0 3
52976: PLUS
52977: ST_TO_ADDR
// for _x = min_x to max_x do
52978: LD_ADDR_VAR 0 5
52982: PUSH
52983: DOUBLE
52984: LD_VAR 0 8
52988: DEC
52989: ST_TO_ADDR
52990: LD_VAR 0 9
52994: PUSH
52995: FOR_TO
52996: IFFALSE 53097
// for _y = min_y to max_y do
52998: LD_ADDR_VAR 0 6
53002: PUSH
53003: DOUBLE
53004: LD_VAR 0 7
53008: DEC
53009: ST_TO_ADDR
53010: LD_VAR 0 10
53014: PUSH
53015: FOR_TO
53016: IFFALSE 53093
// begin if not ValidHex ( _x , _y ) then
53018: LD_VAR 0 5
53022: PPUSH
53023: LD_VAR 0 6
53027: PPUSH
53028: CALL_OW 488
53032: NOT
53033: IFFALSE 53037
// continue ;
53035: GO 53015
// if GetResourceTypeXY ( _x , _y ) then
53037: LD_VAR 0 5
53041: PPUSH
53042: LD_VAR 0 6
53046: PPUSH
53047: CALL_OW 283
53051: IFFALSE 53091
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53053: LD_ADDR_VAR 0 4
53057: PUSH
53058: LD_VAR 0 4
53062: PPUSH
53063: LD_VAR 0 4
53067: PUSH
53068: LD_INT 1
53070: PLUS
53071: PPUSH
53072: LD_VAR 0 5
53076: PUSH
53077: LD_VAR 0 6
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PPUSH
53086: CALL_OW 1
53090: ST_TO_ADDR
// end ;
53091: GO 53015
53093: POP
53094: POP
53095: GO 52995
53097: POP
53098: POP
// end ;
53099: LD_VAR 0 4
53103: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53104: LD_INT 0
53106: PPUSH
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
// if not units then
53114: LD_VAR 0 1
53118: NOT
53119: IFFALSE 53123
// exit ;
53121: GO 53634
// result := UnitFilter ( units , [ f_ok ] ) ;
53123: LD_ADDR_VAR 0 3
53127: PUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: LD_INT 50
53135: PUSH
53136: EMPTY
53137: LIST
53138: PPUSH
53139: CALL_OW 72
53143: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
53144: LD_ADDR_VAR 0 8
53148: PUSH
53149: LD_VAR 0 1
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PPUSH
53158: CALL_OW 255
53162: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
53163: LD_ADDR_VAR 0 10
53167: PUSH
53168: LD_INT 29
53170: PUSH
53171: LD_EXP 107
53175: PUSH
53176: LD_INT 49
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// if not result then
53184: LD_VAR 0 3
53188: NOT
53189: IFFALSE 53193
// exit ;
53191: GO 53634
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53193: LD_ADDR_VAR 0 5
53197: PUSH
53198: LD_INT 81
53200: PUSH
53201: LD_VAR 0 8
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PPUSH
53210: CALL_OW 69
53214: ST_TO_ADDR
// for i in result do
53215: LD_ADDR_VAR 0 4
53219: PUSH
53220: LD_VAR 0 3
53224: PUSH
53225: FOR_IN
53226: IFFALSE 53632
// begin tag := GetTag ( i ) + 1 ;
53228: LD_ADDR_VAR 0 9
53232: PUSH
53233: LD_VAR 0 4
53237: PPUSH
53238: CALL_OW 110
53242: PUSH
53243: LD_INT 1
53245: PLUS
53246: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
53247: LD_ADDR_VAR 0 7
53251: PUSH
53252: LD_VAR 0 4
53256: PPUSH
53257: CALL_OW 250
53261: PPUSH
53262: LD_VAR 0 4
53266: PPUSH
53267: CALL_OW 251
53271: PPUSH
53272: LD_INT 6
53274: PPUSH
53275: CALL 52846 0 3
53279: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
53280: LD_VAR 0 7
53284: PUSH
53285: LD_VAR 0 4
53289: PPUSH
53290: CALL_OW 264
53294: PUSH
53295: LD_VAR 0 10
53299: IN
53300: NOT
53301: AND
53302: IFFALSE 53341
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
53304: LD_VAR 0 4
53308: PPUSH
53309: LD_VAR 0 7
53313: PUSH
53314: LD_INT 1
53316: ARRAY
53317: PUSH
53318: LD_INT 1
53320: ARRAY
53321: PPUSH
53322: LD_VAR 0 7
53326: PUSH
53327: LD_INT 1
53329: ARRAY
53330: PUSH
53331: LD_INT 2
53333: ARRAY
53334: PPUSH
53335: CALL_OW 116
53339: GO 53630
// if path > tag then
53341: LD_VAR 0 2
53345: PUSH
53346: LD_VAR 0 9
53350: GREATER
53351: IFFALSE 53559
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
53353: LD_ADDR_VAR 0 6
53357: PUSH
53358: LD_VAR 0 5
53362: PPUSH
53363: LD_INT 91
53365: PUSH
53366: LD_VAR 0 4
53370: PUSH
53371: LD_INT 12
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: PPUSH
53379: CALL_OW 72
53383: ST_TO_ADDR
// if nearEnemy then
53384: LD_VAR 0 6
53388: IFFALSE 53457
// begin if GetWeapon ( i ) = ru_time_lapser then
53390: LD_VAR 0 4
53394: PPUSH
53395: CALL_OW 264
53399: PUSH
53400: LD_INT 49
53402: EQUAL
53403: IFFALSE 53431
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
53405: LD_VAR 0 4
53409: PPUSH
53410: LD_VAR 0 6
53414: PPUSH
53415: LD_VAR 0 4
53419: PPUSH
53420: CALL_OW 74
53424: PPUSH
53425: CALL_OW 112
53429: GO 53455
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
53431: LD_VAR 0 4
53435: PPUSH
53436: LD_VAR 0 6
53440: PPUSH
53441: LD_VAR 0 4
53445: PPUSH
53446: CALL_OW 74
53450: PPUSH
53451: CALL_OW 115
// end else
53455: GO 53557
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
53457: LD_VAR 0 4
53461: PPUSH
53462: LD_VAR 0 2
53466: PUSH
53467: LD_VAR 0 9
53471: ARRAY
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PPUSH
53477: LD_VAR 0 2
53481: PUSH
53482: LD_VAR 0 9
53486: ARRAY
53487: PUSH
53488: LD_INT 2
53490: ARRAY
53491: PPUSH
53492: CALL_OW 297
53496: PUSH
53497: LD_INT 6
53499: GREATER
53500: IFFALSE 53543
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53502: LD_VAR 0 4
53506: PPUSH
53507: LD_VAR 0 2
53511: PUSH
53512: LD_VAR 0 9
53516: ARRAY
53517: PUSH
53518: LD_INT 1
53520: ARRAY
53521: PPUSH
53522: LD_VAR 0 2
53526: PUSH
53527: LD_VAR 0 9
53531: ARRAY
53532: PUSH
53533: LD_INT 2
53535: ARRAY
53536: PPUSH
53537: CALL_OW 114
53541: GO 53557
// SetTag ( i , tag ) ;
53543: LD_VAR 0 4
53547: PPUSH
53548: LD_VAR 0 9
53552: PPUSH
53553: CALL_OW 109
// end else
53557: GO 53630
// if enemy then
53559: LD_VAR 0 5
53563: IFFALSE 53630
// begin if GetWeapon ( i ) = ru_time_lapser then
53565: LD_VAR 0 4
53569: PPUSH
53570: CALL_OW 264
53574: PUSH
53575: LD_INT 49
53577: EQUAL
53578: IFFALSE 53606
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53580: LD_VAR 0 4
53584: PPUSH
53585: LD_VAR 0 5
53589: PPUSH
53590: LD_VAR 0 4
53594: PPUSH
53595: CALL_OW 74
53599: PPUSH
53600: CALL_OW 112
53604: GO 53630
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53606: LD_VAR 0 4
53610: PPUSH
53611: LD_VAR 0 5
53615: PPUSH
53616: LD_VAR 0 4
53620: PPUSH
53621: CALL_OW 74
53625: PPUSH
53626: CALL_OW 115
// end ; end ;
53630: GO 53225
53632: POP
53633: POP
// end ;
53634: LD_VAR 0 3
53638: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53639: LD_INT 0
53641: PPUSH
53642: PPUSH
53643: PPUSH
// if not unit or IsInUnit ( unit ) then
53644: LD_VAR 0 1
53648: NOT
53649: PUSH
53650: LD_VAR 0 1
53654: PPUSH
53655: CALL_OW 310
53659: OR
53660: IFFALSE 53664
// exit ;
53662: GO 53755
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53664: LD_ADDR_VAR 0 4
53668: PUSH
53669: LD_VAR 0 1
53673: PPUSH
53674: CALL_OW 250
53678: PPUSH
53679: LD_VAR 0 2
53683: PPUSH
53684: LD_INT 1
53686: PPUSH
53687: CALL_OW 272
53691: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53692: LD_ADDR_VAR 0 5
53696: PUSH
53697: LD_VAR 0 1
53701: PPUSH
53702: CALL_OW 251
53706: PPUSH
53707: LD_VAR 0 2
53711: PPUSH
53712: LD_INT 1
53714: PPUSH
53715: CALL_OW 273
53719: ST_TO_ADDR
// if ValidHex ( x , y ) then
53720: LD_VAR 0 4
53724: PPUSH
53725: LD_VAR 0 5
53729: PPUSH
53730: CALL_OW 488
53734: IFFALSE 53755
// ComTurnXY ( unit , x , y ) ;
53736: LD_VAR 0 1
53740: PPUSH
53741: LD_VAR 0 4
53745: PPUSH
53746: LD_VAR 0 5
53750: PPUSH
53751: CALL_OW 118
// end ;
53755: LD_VAR 0 3
53759: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53760: LD_INT 0
53762: PPUSH
53763: PPUSH
// result := false ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_INT 0
53771: ST_TO_ADDR
// if not units then
53772: LD_VAR 0 2
53776: NOT
53777: IFFALSE 53781
// exit ;
53779: GO 53826
// for i in units do
53781: LD_ADDR_VAR 0 4
53785: PUSH
53786: LD_VAR 0 2
53790: PUSH
53791: FOR_IN
53792: IFFALSE 53824
// if See ( side , i ) then
53794: LD_VAR 0 1
53798: PPUSH
53799: LD_VAR 0 4
53803: PPUSH
53804: CALL_OW 292
53808: IFFALSE 53822
// begin result := true ;
53810: LD_ADDR_VAR 0 3
53814: PUSH
53815: LD_INT 1
53817: ST_TO_ADDR
// exit ;
53818: POP
53819: POP
53820: GO 53826
// end ;
53822: GO 53791
53824: POP
53825: POP
// end ;
53826: LD_VAR 0 3
53830: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53831: LD_INT 0
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
// if not unit or not points then
53837: LD_VAR 0 1
53841: NOT
53842: PUSH
53843: LD_VAR 0 2
53847: NOT
53848: OR
53849: IFFALSE 53853
// exit ;
53851: GO 53943
// dist := 99999 ;
53853: LD_ADDR_VAR 0 5
53857: PUSH
53858: LD_INT 99999
53860: ST_TO_ADDR
// for i in points do
53861: LD_ADDR_VAR 0 4
53865: PUSH
53866: LD_VAR 0 2
53870: PUSH
53871: FOR_IN
53872: IFFALSE 53941
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53874: LD_ADDR_VAR 0 6
53878: PUSH
53879: LD_VAR 0 1
53883: PPUSH
53884: LD_VAR 0 4
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PPUSH
53893: LD_VAR 0 4
53897: PUSH
53898: LD_INT 2
53900: ARRAY
53901: PPUSH
53902: CALL_OW 297
53906: ST_TO_ADDR
// if tmpDist < dist then
53907: LD_VAR 0 6
53911: PUSH
53912: LD_VAR 0 5
53916: LESS
53917: IFFALSE 53939
// begin result := i ;
53919: LD_ADDR_VAR 0 3
53923: PUSH
53924: LD_VAR 0 4
53928: ST_TO_ADDR
// dist := tmpDist ;
53929: LD_ADDR_VAR 0 5
53933: PUSH
53934: LD_VAR 0 6
53938: ST_TO_ADDR
// end ; end ;
53939: GO 53871
53941: POP
53942: POP
// end ;
53943: LD_VAR 0 3
53947: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53948: LD_INT 0
53950: PPUSH
// uc_side := side ;
53951: LD_ADDR_OWVAR 20
53955: PUSH
53956: LD_VAR 0 1
53960: ST_TO_ADDR
// uc_nation := 3 ;
53961: LD_ADDR_OWVAR 21
53965: PUSH
53966: LD_INT 3
53968: ST_TO_ADDR
// vc_chassis := 25 ;
53969: LD_ADDR_OWVAR 37
53973: PUSH
53974: LD_INT 25
53976: ST_TO_ADDR
// vc_engine := engine_siberite ;
53977: LD_ADDR_OWVAR 39
53981: PUSH
53982: LD_INT 3
53984: ST_TO_ADDR
// vc_control := control_computer ;
53985: LD_ADDR_OWVAR 38
53989: PUSH
53990: LD_INT 3
53992: ST_TO_ADDR
// vc_weapon := 59 ;
53993: LD_ADDR_OWVAR 40
53997: PUSH
53998: LD_INT 59
54000: ST_TO_ADDR
// result := CreateVehicle ;
54001: LD_ADDR_VAR 0 5
54005: PUSH
54006: CALL_OW 45
54010: ST_TO_ADDR
// SetDir ( result , d ) ;
54011: LD_VAR 0 5
54015: PPUSH
54016: LD_VAR 0 4
54020: PPUSH
54021: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54025: LD_VAR 0 5
54029: PPUSH
54030: LD_VAR 0 2
54034: PPUSH
54035: LD_VAR 0 3
54039: PPUSH
54040: LD_INT 0
54042: PPUSH
54043: CALL_OW 48
// end ;
54047: LD_VAR 0 5
54051: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54052: LD_INT 0
54054: PPUSH
54055: PPUSH
54056: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54057: LD_ADDR_VAR 0 2
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54080: LD_VAR 0 1
54084: NOT
54085: PUSH
54086: LD_VAR 0 1
54090: PPUSH
54091: CALL_OW 264
54095: PUSH
54096: LD_INT 12
54098: PUSH
54099: LD_INT 51
54101: PUSH
54102: LD_INT 32
54104: PUSH
54105: LD_EXP 104
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: IN
54116: NOT
54117: OR
54118: IFFALSE 54122
// exit ;
54120: GO 54220
// for i := 1 to 3 do
54122: LD_ADDR_VAR 0 3
54126: PUSH
54127: DOUBLE
54128: LD_INT 1
54130: DEC
54131: ST_TO_ADDR
54132: LD_INT 3
54134: PUSH
54135: FOR_TO
54136: IFFALSE 54218
// begin tmp := GetCargo ( cargo , i ) ;
54138: LD_ADDR_VAR 0 4
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: LD_VAR 0 3
54152: PPUSH
54153: CALL_OW 289
54157: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
54158: LD_ADDR_VAR 0 2
54162: PUSH
54163: LD_VAR 0 2
54167: PPUSH
54168: LD_VAR 0 3
54172: PPUSH
54173: LD_VAR 0 4
54177: PPUSH
54178: CALL_OW 1
54182: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
54183: LD_ADDR_VAR 0 2
54187: PUSH
54188: LD_VAR 0 2
54192: PPUSH
54193: LD_INT 4
54195: PPUSH
54196: LD_VAR 0 2
54200: PUSH
54201: LD_INT 4
54203: ARRAY
54204: PUSH
54205: LD_VAR 0 4
54209: PLUS
54210: PPUSH
54211: CALL_OW 1
54215: ST_TO_ADDR
// end ;
54216: GO 54135
54218: POP
54219: POP
// end ;
54220: LD_VAR 0 2
54224: RET
// export function Length ( array ) ; begin
54225: LD_INT 0
54227: PPUSH
// result := array + 0 ;
54228: LD_ADDR_VAR 0 2
54232: PUSH
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 0
54240: PLUS
54241: ST_TO_ADDR
// end ;
54242: LD_VAR 0 2
54246: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
54247: LD_INT 0
54249: PPUSH
// uc_side := side ;
54250: LD_ADDR_OWVAR 20
54254: PUSH
54255: LD_VAR 0 1
54259: ST_TO_ADDR
// uc_nation := nation ;
54260: LD_ADDR_OWVAR 21
54264: PUSH
54265: LD_VAR 0 2
54269: ST_TO_ADDR
// bc_level := level ;
54270: LD_ADDR_OWVAR 43
54274: PUSH
54275: LD_VAR 0 3
54279: ST_TO_ADDR
// bc_type := typ ;
54280: LD_ADDR_OWVAR 42
54284: PUSH
54285: LD_VAR 0 4
54289: ST_TO_ADDR
// bc_kind1 := - 1 ;
54290: LD_ADDR_OWVAR 44
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: ST_TO_ADDR
// bc_kind2 := - 1 ;
54299: LD_ADDR_OWVAR 45
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54308: LD_ADDR_VAR 0 9
54312: PUSH
54313: LD_VAR 0 5
54317: PPUSH
54318: LD_VAR 0 6
54322: PPUSH
54323: LD_VAR 0 7
54327: PPUSH
54328: CALL_OW 47
54332: ST_TO_ADDR
// if isInBuildingStage then
54333: LD_VAR 0 8
54337: IFFALSE 54348
// SetBuildingStage ( result ) ;
54339: LD_VAR 0 9
54343: PPUSH
54344: CALL_OW 593
// end ;
54348: LD_VAR 0 9
54352: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
54353: LD_INT 0
54355: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
54356: LD_VAR 0 1
54360: PPUSH
54361: LD_VAR 0 2
54365: PPUSH
54366: LD_INT 0
54368: PPUSH
54369: LD_INT 1
54371: PPUSH
54372: LD_INT 1
54374: PPUSH
54375: LD_INT 0
54377: PPUSH
54378: CALL_OW 587
// end ; end_of_file
54382: LD_VAR 0 3
54386: RET
// every 0 0$1 do
54387: GO 54389
54389: DISABLE
// begin enable ;
54390: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
54391: LD_STRING updateTimer(
54393: PUSH
54394: LD_OWVAR 1
54398: STR
54399: PUSH
54400: LD_STRING );
54402: STR
54403: PPUSH
54404: CALL_OW 559
// end ;
54408: END
// export function SOS_MapStart ( ) ; begin
54409: LD_INT 0
54411: PPUSH
// if streamModeActive then
54412: LD_EXP 123
54416: IFFALSE 54425
// DefineStreamItems ( true ) ;
54418: LD_INT 1
54420: PPUSH
54421: CALL 56075 0 1
// UpdateFactoryWaypoints ( ) ;
54425: CALL 69659 0 0
// end ;
54429: LD_VAR 0 1
54433: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54434: LD_INT 0
54436: PPUSH
// if p2 = 100 then
54437: LD_VAR 0 2
54441: PUSH
54442: LD_INT 100
54444: EQUAL
54445: IFFALSE 55448
// begin if not StreamModeActive then
54447: LD_EXP 123
54451: NOT
54452: IFFALSE 54462
// StreamModeActive := true ;
54454: LD_ADDR_EXP 123
54458: PUSH
54459: LD_INT 1
54461: ST_TO_ADDR
// if p3 = 0 then
54462: LD_VAR 0 3
54466: PUSH
54467: LD_INT 0
54469: EQUAL
54470: IFFALSE 54476
// InitStreamMode ;
54472: CALL 55611 0 0
// if p3 = 1 then
54476: LD_VAR 0 3
54480: PUSH
54481: LD_INT 1
54483: EQUAL
54484: IFFALSE 54494
// sRocket := true ;
54486: LD_ADDR_EXP 128
54490: PUSH
54491: LD_INT 1
54493: ST_TO_ADDR
// if p3 = 2 then
54494: LD_VAR 0 3
54498: PUSH
54499: LD_INT 2
54501: EQUAL
54502: IFFALSE 54512
// sSpeed := true ;
54504: LD_ADDR_EXP 127
54508: PUSH
54509: LD_INT 1
54511: ST_TO_ADDR
// if p3 = 3 then
54512: LD_VAR 0 3
54516: PUSH
54517: LD_INT 3
54519: EQUAL
54520: IFFALSE 54530
// sEngine := true ;
54522: LD_ADDR_EXP 129
54526: PUSH
54527: LD_INT 1
54529: ST_TO_ADDR
// if p3 = 4 then
54530: LD_VAR 0 3
54534: PUSH
54535: LD_INT 4
54537: EQUAL
54538: IFFALSE 54548
// sSpec := true ;
54540: LD_ADDR_EXP 126
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// if p3 = 5 then
54548: LD_VAR 0 3
54552: PUSH
54553: LD_INT 5
54555: EQUAL
54556: IFFALSE 54566
// sLevel := true ;
54558: LD_ADDR_EXP 130
54562: PUSH
54563: LD_INT 1
54565: ST_TO_ADDR
// if p3 = 6 then
54566: LD_VAR 0 3
54570: PUSH
54571: LD_INT 6
54573: EQUAL
54574: IFFALSE 54584
// sArmoury := true ;
54576: LD_ADDR_EXP 131
54580: PUSH
54581: LD_INT 1
54583: ST_TO_ADDR
// if p3 = 7 then
54584: LD_VAR 0 3
54588: PUSH
54589: LD_INT 7
54591: EQUAL
54592: IFFALSE 54602
// sRadar := true ;
54594: LD_ADDR_EXP 132
54598: PUSH
54599: LD_INT 1
54601: ST_TO_ADDR
// if p3 = 8 then
54602: LD_VAR 0 3
54606: PUSH
54607: LD_INT 8
54609: EQUAL
54610: IFFALSE 54620
// sBunker := true ;
54612: LD_ADDR_EXP 133
54616: PUSH
54617: LD_INT 1
54619: ST_TO_ADDR
// if p3 = 9 then
54620: LD_VAR 0 3
54624: PUSH
54625: LD_INT 9
54627: EQUAL
54628: IFFALSE 54638
// sHack := true ;
54630: LD_ADDR_EXP 134
54634: PUSH
54635: LD_INT 1
54637: ST_TO_ADDR
// if p3 = 10 then
54638: LD_VAR 0 3
54642: PUSH
54643: LD_INT 10
54645: EQUAL
54646: IFFALSE 54656
// sFire := true ;
54648: LD_ADDR_EXP 135
54652: PUSH
54653: LD_INT 1
54655: ST_TO_ADDR
// if p3 = 11 then
54656: LD_VAR 0 3
54660: PUSH
54661: LD_INT 11
54663: EQUAL
54664: IFFALSE 54674
// sRefresh := true ;
54666: LD_ADDR_EXP 136
54670: PUSH
54671: LD_INT 1
54673: ST_TO_ADDR
// if p3 = 12 then
54674: LD_VAR 0 3
54678: PUSH
54679: LD_INT 12
54681: EQUAL
54682: IFFALSE 54692
// sExp := true ;
54684: LD_ADDR_EXP 137
54688: PUSH
54689: LD_INT 1
54691: ST_TO_ADDR
// if p3 = 13 then
54692: LD_VAR 0 3
54696: PUSH
54697: LD_INT 13
54699: EQUAL
54700: IFFALSE 54710
// sDepot := true ;
54702: LD_ADDR_EXP 138
54706: PUSH
54707: LD_INT 1
54709: ST_TO_ADDR
// if p3 = 14 then
54710: LD_VAR 0 3
54714: PUSH
54715: LD_INT 14
54717: EQUAL
54718: IFFALSE 54728
// sFlag := true ;
54720: LD_ADDR_EXP 139
54724: PUSH
54725: LD_INT 1
54727: ST_TO_ADDR
// if p3 = 15 then
54728: LD_VAR 0 3
54732: PUSH
54733: LD_INT 15
54735: EQUAL
54736: IFFALSE 54746
// sKamikadze := true ;
54738: LD_ADDR_EXP 147
54742: PUSH
54743: LD_INT 1
54745: ST_TO_ADDR
// if p3 = 16 then
54746: LD_VAR 0 3
54750: PUSH
54751: LD_INT 16
54753: EQUAL
54754: IFFALSE 54764
// sTroll := true ;
54756: LD_ADDR_EXP 148
54760: PUSH
54761: LD_INT 1
54763: ST_TO_ADDR
// if p3 = 17 then
54764: LD_VAR 0 3
54768: PUSH
54769: LD_INT 17
54771: EQUAL
54772: IFFALSE 54782
// sSlow := true ;
54774: LD_ADDR_EXP 149
54778: PUSH
54779: LD_INT 1
54781: ST_TO_ADDR
// if p3 = 18 then
54782: LD_VAR 0 3
54786: PUSH
54787: LD_INT 18
54789: EQUAL
54790: IFFALSE 54800
// sLack := true ;
54792: LD_ADDR_EXP 150
54796: PUSH
54797: LD_INT 1
54799: ST_TO_ADDR
// if p3 = 19 then
54800: LD_VAR 0 3
54804: PUSH
54805: LD_INT 19
54807: EQUAL
54808: IFFALSE 54818
// sTank := true ;
54810: LD_ADDR_EXP 152
54814: PUSH
54815: LD_INT 1
54817: ST_TO_ADDR
// if p3 = 20 then
54818: LD_VAR 0 3
54822: PUSH
54823: LD_INT 20
54825: EQUAL
54826: IFFALSE 54836
// sRemote := true ;
54828: LD_ADDR_EXP 153
54832: PUSH
54833: LD_INT 1
54835: ST_TO_ADDR
// if p3 = 21 then
54836: LD_VAR 0 3
54840: PUSH
54841: LD_INT 21
54843: EQUAL
54844: IFFALSE 54854
// sPowell := true ;
54846: LD_ADDR_EXP 154
54850: PUSH
54851: LD_INT 1
54853: ST_TO_ADDR
// if p3 = 22 then
54854: LD_VAR 0 3
54858: PUSH
54859: LD_INT 22
54861: EQUAL
54862: IFFALSE 54872
// sTeleport := true ;
54864: LD_ADDR_EXP 157
54868: PUSH
54869: LD_INT 1
54871: ST_TO_ADDR
// if p3 = 23 then
54872: LD_VAR 0 3
54876: PUSH
54877: LD_INT 23
54879: EQUAL
54880: IFFALSE 54890
// sOilTower := true ;
54882: LD_ADDR_EXP 159
54886: PUSH
54887: LD_INT 1
54889: ST_TO_ADDR
// if p3 = 24 then
54890: LD_VAR 0 3
54894: PUSH
54895: LD_INT 24
54897: EQUAL
54898: IFFALSE 54908
// sShovel := true ;
54900: LD_ADDR_EXP 160
54904: PUSH
54905: LD_INT 1
54907: ST_TO_ADDR
// if p3 = 25 then
54908: LD_VAR 0 3
54912: PUSH
54913: LD_INT 25
54915: EQUAL
54916: IFFALSE 54926
// sSheik := true ;
54918: LD_ADDR_EXP 161
54922: PUSH
54923: LD_INT 1
54925: ST_TO_ADDR
// if p3 = 26 then
54926: LD_VAR 0 3
54930: PUSH
54931: LD_INT 26
54933: EQUAL
54934: IFFALSE 54944
// sEarthquake := true ;
54936: LD_ADDR_EXP 163
54940: PUSH
54941: LD_INT 1
54943: ST_TO_ADDR
// if p3 = 27 then
54944: LD_VAR 0 3
54948: PUSH
54949: LD_INT 27
54951: EQUAL
54952: IFFALSE 54962
// sAI := true ;
54954: LD_ADDR_EXP 164
54958: PUSH
54959: LD_INT 1
54961: ST_TO_ADDR
// if p3 = 28 then
54962: LD_VAR 0 3
54966: PUSH
54967: LD_INT 28
54969: EQUAL
54970: IFFALSE 54980
// sCargo := true ;
54972: LD_ADDR_EXP 167
54976: PUSH
54977: LD_INT 1
54979: ST_TO_ADDR
// if p3 = 29 then
54980: LD_VAR 0 3
54984: PUSH
54985: LD_INT 29
54987: EQUAL
54988: IFFALSE 54998
// sDLaser := true ;
54990: LD_ADDR_EXP 168
54994: PUSH
54995: LD_INT 1
54997: ST_TO_ADDR
// if p3 = 30 then
54998: LD_VAR 0 3
55002: PUSH
55003: LD_INT 30
55005: EQUAL
55006: IFFALSE 55016
// sExchange := true ;
55008: LD_ADDR_EXP 169
55012: PUSH
55013: LD_INT 1
55015: ST_TO_ADDR
// if p3 = 31 then
55016: LD_VAR 0 3
55020: PUSH
55021: LD_INT 31
55023: EQUAL
55024: IFFALSE 55034
// sFac := true ;
55026: LD_ADDR_EXP 170
55030: PUSH
55031: LD_INT 1
55033: ST_TO_ADDR
// if p3 = 32 then
55034: LD_VAR 0 3
55038: PUSH
55039: LD_INT 32
55041: EQUAL
55042: IFFALSE 55052
// sPower := true ;
55044: LD_ADDR_EXP 171
55048: PUSH
55049: LD_INT 1
55051: ST_TO_ADDR
// if p3 = 33 then
55052: LD_VAR 0 3
55056: PUSH
55057: LD_INT 33
55059: EQUAL
55060: IFFALSE 55070
// sRandom := true ;
55062: LD_ADDR_EXP 172
55066: PUSH
55067: LD_INT 1
55069: ST_TO_ADDR
// if p3 = 34 then
55070: LD_VAR 0 3
55074: PUSH
55075: LD_INT 34
55077: EQUAL
55078: IFFALSE 55088
// sShield := true ;
55080: LD_ADDR_EXP 173
55084: PUSH
55085: LD_INT 1
55087: ST_TO_ADDR
// if p3 = 35 then
55088: LD_VAR 0 3
55092: PUSH
55093: LD_INT 35
55095: EQUAL
55096: IFFALSE 55106
// sTime := true ;
55098: LD_ADDR_EXP 174
55102: PUSH
55103: LD_INT 1
55105: ST_TO_ADDR
// if p3 = 36 then
55106: LD_VAR 0 3
55110: PUSH
55111: LD_INT 36
55113: EQUAL
55114: IFFALSE 55124
// sTools := true ;
55116: LD_ADDR_EXP 175
55120: PUSH
55121: LD_INT 1
55123: ST_TO_ADDR
// if p3 = 101 then
55124: LD_VAR 0 3
55128: PUSH
55129: LD_INT 101
55131: EQUAL
55132: IFFALSE 55142
// sSold := true ;
55134: LD_ADDR_EXP 140
55138: PUSH
55139: LD_INT 1
55141: ST_TO_ADDR
// if p3 = 102 then
55142: LD_VAR 0 3
55146: PUSH
55147: LD_INT 102
55149: EQUAL
55150: IFFALSE 55160
// sDiff := true ;
55152: LD_ADDR_EXP 141
55156: PUSH
55157: LD_INT 1
55159: ST_TO_ADDR
// if p3 = 103 then
55160: LD_VAR 0 3
55164: PUSH
55165: LD_INT 103
55167: EQUAL
55168: IFFALSE 55178
// sFog := true ;
55170: LD_ADDR_EXP 144
55174: PUSH
55175: LD_INT 1
55177: ST_TO_ADDR
// if p3 = 104 then
55178: LD_VAR 0 3
55182: PUSH
55183: LD_INT 104
55185: EQUAL
55186: IFFALSE 55196
// sReset := true ;
55188: LD_ADDR_EXP 145
55192: PUSH
55193: LD_INT 1
55195: ST_TO_ADDR
// if p3 = 105 then
55196: LD_VAR 0 3
55200: PUSH
55201: LD_INT 105
55203: EQUAL
55204: IFFALSE 55214
// sSun := true ;
55206: LD_ADDR_EXP 146
55210: PUSH
55211: LD_INT 1
55213: ST_TO_ADDR
// if p3 = 106 then
55214: LD_VAR 0 3
55218: PUSH
55219: LD_INT 106
55221: EQUAL
55222: IFFALSE 55232
// sTiger := true ;
55224: LD_ADDR_EXP 142
55228: PUSH
55229: LD_INT 1
55231: ST_TO_ADDR
// if p3 = 107 then
55232: LD_VAR 0 3
55236: PUSH
55237: LD_INT 107
55239: EQUAL
55240: IFFALSE 55250
// sBomb := true ;
55242: LD_ADDR_EXP 143
55246: PUSH
55247: LD_INT 1
55249: ST_TO_ADDR
// if p3 = 108 then
55250: LD_VAR 0 3
55254: PUSH
55255: LD_INT 108
55257: EQUAL
55258: IFFALSE 55268
// sWound := true ;
55260: LD_ADDR_EXP 151
55264: PUSH
55265: LD_INT 1
55267: ST_TO_ADDR
// if p3 = 109 then
55268: LD_VAR 0 3
55272: PUSH
55273: LD_INT 109
55275: EQUAL
55276: IFFALSE 55286
// sBetray := true ;
55278: LD_ADDR_EXP 155
55282: PUSH
55283: LD_INT 1
55285: ST_TO_ADDR
// if p3 = 110 then
55286: LD_VAR 0 3
55290: PUSH
55291: LD_INT 110
55293: EQUAL
55294: IFFALSE 55304
// sContamin := true ;
55296: LD_ADDR_EXP 156
55300: PUSH
55301: LD_INT 1
55303: ST_TO_ADDR
// if p3 = 111 then
55304: LD_VAR 0 3
55308: PUSH
55309: LD_INT 111
55311: EQUAL
55312: IFFALSE 55322
// sOil := true ;
55314: LD_ADDR_EXP 158
55318: PUSH
55319: LD_INT 1
55321: ST_TO_ADDR
// if p3 = 112 then
55322: LD_VAR 0 3
55326: PUSH
55327: LD_INT 112
55329: EQUAL
55330: IFFALSE 55340
// sStu := true ;
55332: LD_ADDR_EXP 162
55336: PUSH
55337: LD_INT 1
55339: ST_TO_ADDR
// if p3 = 113 then
55340: LD_VAR 0 3
55344: PUSH
55345: LD_INT 113
55347: EQUAL
55348: IFFALSE 55358
// sBazooka := true ;
55350: LD_ADDR_EXP 165
55354: PUSH
55355: LD_INT 1
55357: ST_TO_ADDR
// if p3 = 114 then
55358: LD_VAR 0 3
55362: PUSH
55363: LD_INT 114
55365: EQUAL
55366: IFFALSE 55376
// sMortar := true ;
55368: LD_ADDR_EXP 166
55372: PUSH
55373: LD_INT 1
55375: ST_TO_ADDR
// if p3 = 115 then
55376: LD_VAR 0 3
55380: PUSH
55381: LD_INT 115
55383: EQUAL
55384: IFFALSE 55394
// sRanger := true ;
55386: LD_ADDR_EXP 176
55390: PUSH
55391: LD_INT 1
55393: ST_TO_ADDR
// if p3 = 116 then
55394: LD_VAR 0 3
55398: PUSH
55399: LD_INT 116
55401: EQUAL
55402: IFFALSE 55412
// sComputer := true ;
55404: LD_ADDR_EXP 177
55408: PUSH
55409: LD_INT 1
55411: ST_TO_ADDR
// if p3 = 117 then
55412: LD_VAR 0 3
55416: PUSH
55417: LD_INT 117
55419: EQUAL
55420: IFFALSE 55430
// s30 := true ;
55422: LD_ADDR_EXP 178
55426: PUSH
55427: LD_INT 1
55429: ST_TO_ADDR
// if p3 = 118 then
55430: LD_VAR 0 3
55434: PUSH
55435: LD_INT 118
55437: EQUAL
55438: IFFALSE 55448
// s60 := true ;
55440: LD_ADDR_EXP 179
55444: PUSH
55445: LD_INT 1
55447: ST_TO_ADDR
// end ; if p2 = 101 then
55448: LD_VAR 0 2
55452: PUSH
55453: LD_INT 101
55455: EQUAL
55456: IFFALSE 55584
// begin case p3 of 1 :
55458: LD_VAR 0 3
55462: PUSH
55463: LD_INT 1
55465: DOUBLE
55466: EQUAL
55467: IFTRUE 55471
55469: GO 55478
55471: POP
// hHackUnlimitedResources ; 2 :
55472: CALL 67682 0 0
55476: GO 55584
55478: LD_INT 2
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55486
55484: GO 55493
55486: POP
// hHackSetLevel10 ; 3 :
55487: CALL 67815 0 0
55491: GO 55584
55493: LD_INT 3
55495: DOUBLE
55496: EQUAL
55497: IFTRUE 55501
55499: GO 55508
55501: POP
// hHackSetLevel10YourUnits ; 4 :
55502: CALL 67900 0 0
55506: GO 55584
55508: LD_INT 4
55510: DOUBLE
55511: EQUAL
55512: IFTRUE 55516
55514: GO 55523
55516: POP
// hHackInvincible ; 5 :
55517: CALL 68348 0 0
55521: GO 55584
55523: LD_INT 5
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55531
55529: GO 55538
55531: POP
// hHackInvisible ; 6 :
55532: CALL 68459 0 0
55536: GO 55584
55538: LD_INT 6
55540: DOUBLE
55541: EQUAL
55542: IFTRUE 55546
55544: GO 55553
55546: POP
// hHackChangeYourSide ; 7 :
55547: CALL 68516 0 0
55551: GO 55584
55553: LD_INT 7
55555: DOUBLE
55556: EQUAL
55557: IFTRUE 55561
55559: GO 55568
55561: POP
// hHackChangeUnitSide ; 8 :
55562: CALL 68558 0 0
55566: GO 55584
55568: LD_INT 8
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55576
55574: GO 55583
55576: POP
// hHackFog ; end ;
55577: CALL 68659 0 0
55581: GO 55584
55583: POP
// end ; end ;
55584: LD_VAR 0 7
55588: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
55589: GO 55591
55591: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
55592: LD_STRING initStreamRollete();
55594: PPUSH
55595: CALL_OW 559
// InitStreamMode ;
55599: CALL 55611 0 0
// DefineStreamItems ( false ) ;
55603: LD_INT 0
55605: PPUSH
55606: CALL 56075 0 1
// end ;
55610: END
// function InitStreamMode ; begin
55611: LD_INT 0
55613: PPUSH
// streamModeActive := false ;
55614: LD_ADDR_EXP 123
55618: PUSH
55619: LD_INT 0
55621: ST_TO_ADDR
// normalCounter := 36 ;
55622: LD_ADDR_EXP 124
55626: PUSH
55627: LD_INT 36
55629: ST_TO_ADDR
// hardcoreCounter := 18 ;
55630: LD_ADDR_EXP 125
55634: PUSH
55635: LD_INT 18
55637: ST_TO_ADDR
// sRocket := false ;
55638: LD_ADDR_EXP 128
55642: PUSH
55643: LD_INT 0
55645: ST_TO_ADDR
// sSpeed := false ;
55646: LD_ADDR_EXP 127
55650: PUSH
55651: LD_INT 0
55653: ST_TO_ADDR
// sEngine := false ;
55654: LD_ADDR_EXP 129
55658: PUSH
55659: LD_INT 0
55661: ST_TO_ADDR
// sSpec := false ;
55662: LD_ADDR_EXP 126
55666: PUSH
55667: LD_INT 0
55669: ST_TO_ADDR
// sLevel := false ;
55670: LD_ADDR_EXP 130
55674: PUSH
55675: LD_INT 0
55677: ST_TO_ADDR
// sArmoury := false ;
55678: LD_ADDR_EXP 131
55682: PUSH
55683: LD_INT 0
55685: ST_TO_ADDR
// sRadar := false ;
55686: LD_ADDR_EXP 132
55690: PUSH
55691: LD_INT 0
55693: ST_TO_ADDR
// sBunker := false ;
55694: LD_ADDR_EXP 133
55698: PUSH
55699: LD_INT 0
55701: ST_TO_ADDR
// sHack := false ;
55702: LD_ADDR_EXP 134
55706: PUSH
55707: LD_INT 0
55709: ST_TO_ADDR
// sFire := false ;
55710: LD_ADDR_EXP 135
55714: PUSH
55715: LD_INT 0
55717: ST_TO_ADDR
// sRefresh := false ;
55718: LD_ADDR_EXP 136
55722: PUSH
55723: LD_INT 0
55725: ST_TO_ADDR
// sExp := false ;
55726: LD_ADDR_EXP 137
55730: PUSH
55731: LD_INT 0
55733: ST_TO_ADDR
// sDepot := false ;
55734: LD_ADDR_EXP 138
55738: PUSH
55739: LD_INT 0
55741: ST_TO_ADDR
// sFlag := false ;
55742: LD_ADDR_EXP 139
55746: PUSH
55747: LD_INT 0
55749: ST_TO_ADDR
// sKamikadze := false ;
55750: LD_ADDR_EXP 147
55754: PUSH
55755: LD_INT 0
55757: ST_TO_ADDR
// sTroll := false ;
55758: LD_ADDR_EXP 148
55762: PUSH
55763: LD_INT 0
55765: ST_TO_ADDR
// sSlow := false ;
55766: LD_ADDR_EXP 149
55770: PUSH
55771: LD_INT 0
55773: ST_TO_ADDR
// sLack := false ;
55774: LD_ADDR_EXP 150
55778: PUSH
55779: LD_INT 0
55781: ST_TO_ADDR
// sTank := false ;
55782: LD_ADDR_EXP 152
55786: PUSH
55787: LD_INT 0
55789: ST_TO_ADDR
// sRemote := false ;
55790: LD_ADDR_EXP 153
55794: PUSH
55795: LD_INT 0
55797: ST_TO_ADDR
// sPowell := false ;
55798: LD_ADDR_EXP 154
55802: PUSH
55803: LD_INT 0
55805: ST_TO_ADDR
// sTeleport := false ;
55806: LD_ADDR_EXP 157
55810: PUSH
55811: LD_INT 0
55813: ST_TO_ADDR
// sOilTower := false ;
55814: LD_ADDR_EXP 159
55818: PUSH
55819: LD_INT 0
55821: ST_TO_ADDR
// sShovel := false ;
55822: LD_ADDR_EXP 160
55826: PUSH
55827: LD_INT 0
55829: ST_TO_ADDR
// sSheik := false ;
55830: LD_ADDR_EXP 161
55834: PUSH
55835: LD_INT 0
55837: ST_TO_ADDR
// sEarthquake := false ;
55838: LD_ADDR_EXP 163
55842: PUSH
55843: LD_INT 0
55845: ST_TO_ADDR
// sAI := false ;
55846: LD_ADDR_EXP 164
55850: PUSH
55851: LD_INT 0
55853: ST_TO_ADDR
// sCargo := false ;
55854: LD_ADDR_EXP 167
55858: PUSH
55859: LD_INT 0
55861: ST_TO_ADDR
// sDLaser := false ;
55862: LD_ADDR_EXP 168
55866: PUSH
55867: LD_INT 0
55869: ST_TO_ADDR
// sExchange := false ;
55870: LD_ADDR_EXP 169
55874: PUSH
55875: LD_INT 0
55877: ST_TO_ADDR
// sFac := false ;
55878: LD_ADDR_EXP 170
55882: PUSH
55883: LD_INT 0
55885: ST_TO_ADDR
// sPower := false ;
55886: LD_ADDR_EXP 171
55890: PUSH
55891: LD_INT 0
55893: ST_TO_ADDR
// sRandom := false ;
55894: LD_ADDR_EXP 172
55898: PUSH
55899: LD_INT 0
55901: ST_TO_ADDR
// sShield := false ;
55902: LD_ADDR_EXP 173
55906: PUSH
55907: LD_INT 0
55909: ST_TO_ADDR
// sTime := false ;
55910: LD_ADDR_EXP 174
55914: PUSH
55915: LD_INT 0
55917: ST_TO_ADDR
// sTools := false ;
55918: LD_ADDR_EXP 175
55922: PUSH
55923: LD_INT 0
55925: ST_TO_ADDR
// sSold := false ;
55926: LD_ADDR_EXP 140
55930: PUSH
55931: LD_INT 0
55933: ST_TO_ADDR
// sDiff := false ;
55934: LD_ADDR_EXP 141
55938: PUSH
55939: LD_INT 0
55941: ST_TO_ADDR
// sFog := false ;
55942: LD_ADDR_EXP 144
55946: PUSH
55947: LD_INT 0
55949: ST_TO_ADDR
// sReset := false ;
55950: LD_ADDR_EXP 145
55954: PUSH
55955: LD_INT 0
55957: ST_TO_ADDR
// sSun := false ;
55958: LD_ADDR_EXP 146
55962: PUSH
55963: LD_INT 0
55965: ST_TO_ADDR
// sTiger := false ;
55966: LD_ADDR_EXP 142
55970: PUSH
55971: LD_INT 0
55973: ST_TO_ADDR
// sBomb := false ;
55974: LD_ADDR_EXP 143
55978: PUSH
55979: LD_INT 0
55981: ST_TO_ADDR
// sWound := false ;
55982: LD_ADDR_EXP 151
55986: PUSH
55987: LD_INT 0
55989: ST_TO_ADDR
// sBetray := false ;
55990: LD_ADDR_EXP 155
55994: PUSH
55995: LD_INT 0
55997: ST_TO_ADDR
// sContamin := false ;
55998: LD_ADDR_EXP 156
56002: PUSH
56003: LD_INT 0
56005: ST_TO_ADDR
// sOil := false ;
56006: LD_ADDR_EXP 158
56010: PUSH
56011: LD_INT 0
56013: ST_TO_ADDR
// sStu := false ;
56014: LD_ADDR_EXP 162
56018: PUSH
56019: LD_INT 0
56021: ST_TO_ADDR
// sBazooka := false ;
56022: LD_ADDR_EXP 165
56026: PUSH
56027: LD_INT 0
56029: ST_TO_ADDR
// sMortar := false ;
56030: LD_ADDR_EXP 166
56034: PUSH
56035: LD_INT 0
56037: ST_TO_ADDR
// sRanger := false ;
56038: LD_ADDR_EXP 176
56042: PUSH
56043: LD_INT 0
56045: ST_TO_ADDR
// sComputer := false ;
56046: LD_ADDR_EXP 177
56050: PUSH
56051: LD_INT 0
56053: ST_TO_ADDR
// s30 := false ;
56054: LD_ADDR_EXP 178
56058: PUSH
56059: LD_INT 0
56061: ST_TO_ADDR
// s60 := false ;
56062: LD_ADDR_EXP 179
56066: PUSH
56067: LD_INT 0
56069: ST_TO_ADDR
// end ;
56070: LD_VAR 0 1
56074: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
56075: LD_INT 0
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
56083: PPUSH
// result := [ ] ;
56084: LD_ADDR_VAR 0 2
56088: PUSH
56089: EMPTY
56090: ST_TO_ADDR
// if campaign_id = 1 then
56091: LD_OWVAR 69
56095: PUSH
56096: LD_INT 1
56098: EQUAL
56099: IFFALSE 59265
// begin case mission_number of 1 :
56101: LD_OWVAR 70
56105: PUSH
56106: LD_INT 1
56108: DOUBLE
56109: EQUAL
56110: IFTRUE 56114
56112: GO 56190
56114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
56115: LD_ADDR_VAR 0 2
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: LD_INT 11
56128: PUSH
56129: LD_INT 12
56131: PUSH
56132: LD_INT 15
56134: PUSH
56135: LD_INT 16
56137: PUSH
56138: LD_INT 22
56140: PUSH
56141: LD_INT 23
56143: PUSH
56144: LD_INT 26
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 101
56160: PUSH
56161: LD_INT 102
56163: PUSH
56164: LD_INT 106
56166: PUSH
56167: LD_INT 116
56169: PUSH
56170: LD_INT 117
56172: PUSH
56173: LD_INT 118
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: ST_TO_ADDR
56188: GO 59263
56190: LD_INT 2
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 56282
56198: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
56199: LD_ADDR_VAR 0 2
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 4
56209: PUSH
56210: LD_INT 11
56212: PUSH
56213: LD_INT 12
56215: PUSH
56216: LD_INT 15
56218: PUSH
56219: LD_INT 16
56221: PUSH
56222: LD_INT 22
56224: PUSH
56225: LD_INT 23
56227: PUSH
56228: LD_INT 26
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 101
56244: PUSH
56245: LD_INT 102
56247: PUSH
56248: LD_INT 105
56250: PUSH
56251: LD_INT 106
56253: PUSH
56254: LD_INT 108
56256: PUSH
56257: LD_INT 116
56259: PUSH
56260: LD_INT 117
56262: PUSH
56263: LD_INT 118
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: ST_TO_ADDR
56280: GO 59263
56282: LD_INT 3
56284: DOUBLE
56285: EQUAL
56286: IFTRUE 56290
56288: GO 56378
56290: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: LD_INT 5
56304: PUSH
56305: LD_INT 11
56307: PUSH
56308: LD_INT 12
56310: PUSH
56311: LD_INT 15
56313: PUSH
56314: LD_INT 16
56316: PUSH
56317: LD_INT 22
56319: PUSH
56320: LD_INT 26
56322: PUSH
56323: LD_INT 36
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 101
56340: PUSH
56341: LD_INT 102
56343: PUSH
56344: LD_INT 105
56346: PUSH
56347: LD_INT 106
56349: PUSH
56350: LD_INT 108
56352: PUSH
56353: LD_INT 116
56355: PUSH
56356: LD_INT 117
56358: PUSH
56359: LD_INT 118
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: ST_TO_ADDR
56376: GO 59263
56378: LD_INT 4
56380: DOUBLE
56381: EQUAL
56382: IFTRUE 56386
56384: GO 56482
56386: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
56387: LD_ADDR_VAR 0 2
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: LD_INT 5
56400: PUSH
56401: LD_INT 8
56403: PUSH
56404: LD_INT 11
56406: PUSH
56407: LD_INT 12
56409: PUSH
56410: LD_INT 15
56412: PUSH
56413: LD_INT 16
56415: PUSH
56416: LD_INT 22
56418: PUSH
56419: LD_INT 23
56421: PUSH
56422: LD_INT 26
56424: PUSH
56425: LD_INT 36
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 101
56444: PUSH
56445: LD_INT 102
56447: PUSH
56448: LD_INT 105
56450: PUSH
56451: LD_INT 106
56453: PUSH
56454: LD_INT 108
56456: PUSH
56457: LD_INT 116
56459: PUSH
56460: LD_INT 117
56462: PUSH
56463: LD_INT 118
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: ST_TO_ADDR
56480: GO 59263
56482: LD_INT 5
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56490
56488: GO 56602
56490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
56491: LD_ADDR_VAR 0 2
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: LD_INT 6
56507: PUSH
56508: LD_INT 8
56510: PUSH
56511: LD_INT 11
56513: PUSH
56514: LD_INT 12
56516: PUSH
56517: LD_INT 15
56519: PUSH
56520: LD_INT 16
56522: PUSH
56523: LD_INT 22
56525: PUSH
56526: LD_INT 23
56528: PUSH
56529: LD_INT 25
56531: PUSH
56532: LD_INT 26
56534: PUSH
56535: LD_INT 36
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 101
56556: PUSH
56557: LD_INT 102
56559: PUSH
56560: LD_INT 105
56562: PUSH
56563: LD_INT 106
56565: PUSH
56566: LD_INT 108
56568: PUSH
56569: LD_INT 109
56571: PUSH
56572: LD_INT 112
56574: PUSH
56575: LD_INT 116
56577: PUSH
56578: LD_INT 117
56580: PUSH
56581: LD_INT 118
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: ST_TO_ADDR
56600: GO 59263
56602: LD_INT 6
56604: DOUBLE
56605: EQUAL
56606: IFTRUE 56610
56608: GO 56742
56610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
56611: LD_ADDR_VAR 0 2
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: LD_INT 6
56627: PUSH
56628: LD_INT 8
56630: PUSH
56631: LD_INT 11
56633: PUSH
56634: LD_INT 12
56636: PUSH
56637: LD_INT 15
56639: PUSH
56640: LD_INT 16
56642: PUSH
56643: LD_INT 20
56645: PUSH
56646: LD_INT 21
56648: PUSH
56649: LD_INT 22
56651: PUSH
56652: LD_INT 23
56654: PUSH
56655: LD_INT 25
56657: PUSH
56658: LD_INT 26
56660: PUSH
56661: LD_INT 30
56663: PUSH
56664: LD_INT 31
56666: PUSH
56667: LD_INT 32
56669: PUSH
56670: LD_INT 36
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 101
56696: PUSH
56697: LD_INT 102
56699: PUSH
56700: LD_INT 105
56702: PUSH
56703: LD_INT 106
56705: PUSH
56706: LD_INT 108
56708: PUSH
56709: LD_INT 109
56711: PUSH
56712: LD_INT 112
56714: PUSH
56715: LD_INT 116
56717: PUSH
56718: LD_INT 117
56720: PUSH
56721: LD_INT 118
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: ST_TO_ADDR
56740: GO 59263
56742: LD_INT 7
56744: DOUBLE
56745: EQUAL
56746: IFTRUE 56750
56748: GO 56862
56750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56751: LD_ADDR_VAR 0 2
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 4
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: LD_INT 7
56767: PUSH
56768: LD_INT 11
56770: PUSH
56771: LD_INT 12
56773: PUSH
56774: LD_INT 15
56776: PUSH
56777: LD_INT 16
56779: PUSH
56780: LD_INT 20
56782: PUSH
56783: LD_INT 21
56785: PUSH
56786: LD_INT 22
56788: PUSH
56789: LD_INT 23
56791: PUSH
56792: LD_INT 25
56794: PUSH
56795: LD_INT 26
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 101
56816: PUSH
56817: LD_INT 102
56819: PUSH
56820: LD_INT 103
56822: PUSH
56823: LD_INT 105
56825: PUSH
56826: LD_INT 106
56828: PUSH
56829: LD_INT 108
56831: PUSH
56832: LD_INT 112
56834: PUSH
56835: LD_INT 116
56837: PUSH
56838: LD_INT 117
56840: PUSH
56841: LD_INT 118
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: ST_TO_ADDR
56860: GO 59263
56862: LD_INT 8
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56870
56868: GO 57010
56870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56871: LD_ADDR_VAR 0 2
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: LD_INT 5
56884: PUSH
56885: LD_INT 6
56887: PUSH
56888: LD_INT 7
56890: PUSH
56891: LD_INT 8
56893: PUSH
56894: LD_INT 11
56896: PUSH
56897: LD_INT 12
56899: PUSH
56900: LD_INT 15
56902: PUSH
56903: LD_INT 16
56905: PUSH
56906: LD_INT 20
56908: PUSH
56909: LD_INT 21
56911: PUSH
56912: LD_INT 22
56914: PUSH
56915: LD_INT 23
56917: PUSH
56918: LD_INT 25
56920: PUSH
56921: LD_INT 26
56923: PUSH
56924: LD_INT 30
56926: PUSH
56927: LD_INT 31
56929: PUSH
56930: LD_INT 32
56932: PUSH
56933: LD_INT 36
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 101
56960: PUSH
56961: LD_INT 102
56963: PUSH
56964: LD_INT 103
56966: PUSH
56967: LD_INT 105
56969: PUSH
56970: LD_INT 106
56972: PUSH
56973: LD_INT 108
56975: PUSH
56976: LD_INT 109
56978: PUSH
56979: LD_INT 112
56981: PUSH
56982: LD_INT 116
56984: PUSH
56985: LD_INT 117
56987: PUSH
56988: LD_INT 118
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: ST_TO_ADDR
57008: GO 59263
57010: LD_INT 9
57012: DOUBLE
57013: EQUAL
57014: IFTRUE 57018
57016: GO 57166
57018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
57019: LD_ADDR_VAR 0 2
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: LD_INT 5
57032: PUSH
57033: LD_INT 6
57035: PUSH
57036: LD_INT 7
57038: PUSH
57039: LD_INT 8
57041: PUSH
57042: LD_INT 11
57044: PUSH
57045: LD_INT 12
57047: PUSH
57048: LD_INT 15
57050: PUSH
57051: LD_INT 16
57053: PUSH
57054: LD_INT 20
57056: PUSH
57057: LD_INT 21
57059: PUSH
57060: LD_INT 22
57062: PUSH
57063: LD_INT 23
57065: PUSH
57066: LD_INT 25
57068: PUSH
57069: LD_INT 26
57071: PUSH
57072: LD_INT 28
57074: PUSH
57075: LD_INT 30
57077: PUSH
57078: LD_INT 31
57080: PUSH
57081: LD_INT 32
57083: PUSH
57084: LD_INT 36
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 101
57112: PUSH
57113: LD_INT 102
57115: PUSH
57116: LD_INT 103
57118: PUSH
57119: LD_INT 105
57121: PUSH
57122: LD_INT 106
57124: PUSH
57125: LD_INT 108
57127: PUSH
57128: LD_INT 109
57130: PUSH
57131: LD_INT 112
57133: PUSH
57134: LD_INT 114
57136: PUSH
57137: LD_INT 116
57139: PUSH
57140: LD_INT 117
57142: PUSH
57143: LD_INT 118
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: ST_TO_ADDR
57164: GO 59263
57166: LD_INT 10
57168: DOUBLE
57169: EQUAL
57170: IFTRUE 57174
57172: GO 57370
57174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
57175: LD_ADDR_VAR 0 2
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: LD_INT 5
57188: PUSH
57189: LD_INT 6
57191: PUSH
57192: LD_INT 7
57194: PUSH
57195: LD_INT 8
57197: PUSH
57198: LD_INT 9
57200: PUSH
57201: LD_INT 10
57203: PUSH
57204: LD_INT 11
57206: PUSH
57207: LD_INT 12
57209: PUSH
57210: LD_INT 13
57212: PUSH
57213: LD_INT 14
57215: PUSH
57216: LD_INT 15
57218: PUSH
57219: LD_INT 16
57221: PUSH
57222: LD_INT 17
57224: PUSH
57225: LD_INT 18
57227: PUSH
57228: LD_INT 19
57230: PUSH
57231: LD_INT 20
57233: PUSH
57234: LD_INT 21
57236: PUSH
57237: LD_INT 22
57239: PUSH
57240: LD_INT 23
57242: PUSH
57243: LD_INT 24
57245: PUSH
57246: LD_INT 25
57248: PUSH
57249: LD_INT 26
57251: PUSH
57252: LD_INT 28
57254: PUSH
57255: LD_INT 30
57257: PUSH
57258: LD_INT 31
57260: PUSH
57261: LD_INT 32
57263: PUSH
57264: LD_INT 36
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 101
57300: PUSH
57301: LD_INT 102
57303: PUSH
57304: LD_INT 103
57306: PUSH
57307: LD_INT 104
57309: PUSH
57310: LD_INT 105
57312: PUSH
57313: LD_INT 106
57315: PUSH
57316: LD_INT 107
57318: PUSH
57319: LD_INT 108
57321: PUSH
57322: LD_INT 109
57324: PUSH
57325: LD_INT 110
57327: PUSH
57328: LD_INT 111
57330: PUSH
57331: LD_INT 112
57333: PUSH
57334: LD_INT 114
57336: PUSH
57337: LD_INT 116
57339: PUSH
57340: LD_INT 117
57342: PUSH
57343: LD_INT 118
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: ST_TO_ADDR
57368: GO 59263
57370: LD_INT 11
57372: DOUBLE
57373: EQUAL
57374: IFTRUE 57378
57376: GO 57582
57378: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
57379: LD_ADDR_VAR 0 2
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 4
57392: PUSH
57393: LD_INT 5
57395: PUSH
57396: LD_INT 6
57398: PUSH
57399: LD_INT 7
57401: PUSH
57402: LD_INT 8
57404: PUSH
57405: LD_INT 9
57407: PUSH
57408: LD_INT 10
57410: PUSH
57411: LD_INT 11
57413: PUSH
57414: LD_INT 12
57416: PUSH
57417: LD_INT 13
57419: PUSH
57420: LD_INT 14
57422: PUSH
57423: LD_INT 15
57425: PUSH
57426: LD_INT 16
57428: PUSH
57429: LD_INT 17
57431: PUSH
57432: LD_INT 18
57434: PUSH
57435: LD_INT 19
57437: PUSH
57438: LD_INT 20
57440: PUSH
57441: LD_INT 21
57443: PUSH
57444: LD_INT 22
57446: PUSH
57447: LD_INT 23
57449: PUSH
57450: LD_INT 24
57452: PUSH
57453: LD_INT 25
57455: PUSH
57456: LD_INT 26
57458: PUSH
57459: LD_INT 28
57461: PUSH
57462: LD_INT 30
57464: PUSH
57465: LD_INT 31
57467: PUSH
57468: LD_INT 32
57470: PUSH
57471: LD_INT 34
57473: PUSH
57474: LD_INT 36
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 101
57512: PUSH
57513: LD_INT 102
57515: PUSH
57516: LD_INT 103
57518: PUSH
57519: LD_INT 104
57521: PUSH
57522: LD_INT 105
57524: PUSH
57525: LD_INT 106
57527: PUSH
57528: LD_INT 107
57530: PUSH
57531: LD_INT 108
57533: PUSH
57534: LD_INT 109
57536: PUSH
57537: LD_INT 110
57539: PUSH
57540: LD_INT 111
57542: PUSH
57543: LD_INT 112
57545: PUSH
57546: LD_INT 114
57548: PUSH
57549: LD_INT 116
57551: PUSH
57552: LD_INT 117
57554: PUSH
57555: LD_INT 118
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: ST_TO_ADDR
57580: GO 59263
57582: LD_INT 12
57584: DOUBLE
57585: EQUAL
57586: IFTRUE 57590
57588: GO 57810
57590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
57591: LD_ADDR_VAR 0 2
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: LD_INT 5
57610: PUSH
57611: LD_INT 6
57613: PUSH
57614: LD_INT 7
57616: PUSH
57617: LD_INT 8
57619: PUSH
57620: LD_INT 9
57622: PUSH
57623: LD_INT 10
57625: PUSH
57626: LD_INT 11
57628: PUSH
57629: LD_INT 12
57631: PUSH
57632: LD_INT 13
57634: PUSH
57635: LD_INT 14
57637: PUSH
57638: LD_INT 15
57640: PUSH
57641: LD_INT 16
57643: PUSH
57644: LD_INT 17
57646: PUSH
57647: LD_INT 18
57649: PUSH
57650: LD_INT 19
57652: PUSH
57653: LD_INT 20
57655: PUSH
57656: LD_INT 21
57658: PUSH
57659: LD_INT 22
57661: PUSH
57662: LD_INT 23
57664: PUSH
57665: LD_INT 24
57667: PUSH
57668: LD_INT 25
57670: PUSH
57671: LD_INT 26
57673: PUSH
57674: LD_INT 27
57676: PUSH
57677: LD_INT 28
57679: PUSH
57680: LD_INT 30
57682: PUSH
57683: LD_INT 31
57685: PUSH
57686: LD_INT 32
57688: PUSH
57689: LD_INT 33
57691: PUSH
57692: LD_INT 34
57694: PUSH
57695: LD_INT 36
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 101
57736: PUSH
57737: LD_INT 102
57739: PUSH
57740: LD_INT 103
57742: PUSH
57743: LD_INT 104
57745: PUSH
57746: LD_INT 105
57748: PUSH
57749: LD_INT 106
57751: PUSH
57752: LD_INT 107
57754: PUSH
57755: LD_INT 108
57757: PUSH
57758: LD_INT 109
57760: PUSH
57761: LD_INT 110
57763: PUSH
57764: LD_INT 111
57766: PUSH
57767: LD_INT 112
57769: PUSH
57770: LD_INT 113
57772: PUSH
57773: LD_INT 114
57775: PUSH
57776: LD_INT 116
57778: PUSH
57779: LD_INT 117
57781: PUSH
57782: LD_INT 118
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: ST_TO_ADDR
57808: GO 59263
57810: LD_INT 13
57812: DOUBLE
57813: EQUAL
57814: IFTRUE 57818
57816: GO 58026
57818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57819: LD_ADDR_VAR 0 2
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: LD_INT 4
57835: PUSH
57836: LD_INT 5
57838: PUSH
57839: LD_INT 8
57841: PUSH
57842: LD_INT 9
57844: PUSH
57845: LD_INT 10
57847: PUSH
57848: LD_INT 11
57850: PUSH
57851: LD_INT 12
57853: PUSH
57854: LD_INT 14
57856: PUSH
57857: LD_INT 15
57859: PUSH
57860: LD_INT 16
57862: PUSH
57863: LD_INT 17
57865: PUSH
57866: LD_INT 18
57868: PUSH
57869: LD_INT 19
57871: PUSH
57872: LD_INT 20
57874: PUSH
57875: LD_INT 21
57877: PUSH
57878: LD_INT 22
57880: PUSH
57881: LD_INT 23
57883: PUSH
57884: LD_INT 24
57886: PUSH
57887: LD_INT 25
57889: PUSH
57890: LD_INT 26
57892: PUSH
57893: LD_INT 27
57895: PUSH
57896: LD_INT 28
57898: PUSH
57899: LD_INT 30
57901: PUSH
57902: LD_INT 31
57904: PUSH
57905: LD_INT 32
57907: PUSH
57908: LD_INT 33
57910: PUSH
57911: LD_INT 34
57913: PUSH
57914: LD_INT 36
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 101
57952: PUSH
57953: LD_INT 102
57955: PUSH
57956: LD_INT 103
57958: PUSH
57959: LD_INT 104
57961: PUSH
57962: LD_INT 105
57964: PUSH
57965: LD_INT 106
57967: PUSH
57968: LD_INT 107
57970: PUSH
57971: LD_INT 108
57973: PUSH
57974: LD_INT 109
57976: PUSH
57977: LD_INT 110
57979: PUSH
57980: LD_INT 111
57982: PUSH
57983: LD_INT 112
57985: PUSH
57986: LD_INT 113
57988: PUSH
57989: LD_INT 114
57991: PUSH
57992: LD_INT 116
57994: PUSH
57995: LD_INT 117
57997: PUSH
57998: LD_INT 118
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: ST_TO_ADDR
58024: GO 59263
58026: LD_INT 14
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58034
58032: GO 58258
58034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
58035: LD_ADDR_VAR 0 2
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: LD_INT 4
58051: PUSH
58052: LD_INT 5
58054: PUSH
58055: LD_INT 6
58057: PUSH
58058: LD_INT 7
58060: PUSH
58061: LD_INT 8
58063: PUSH
58064: LD_INT 9
58066: PUSH
58067: LD_INT 10
58069: PUSH
58070: LD_INT 11
58072: PUSH
58073: LD_INT 12
58075: PUSH
58076: LD_INT 13
58078: PUSH
58079: LD_INT 14
58081: PUSH
58082: LD_INT 15
58084: PUSH
58085: LD_INT 16
58087: PUSH
58088: LD_INT 17
58090: PUSH
58091: LD_INT 18
58093: PUSH
58094: LD_INT 19
58096: PUSH
58097: LD_INT 20
58099: PUSH
58100: LD_INT 21
58102: PUSH
58103: LD_INT 22
58105: PUSH
58106: LD_INT 23
58108: PUSH
58109: LD_INT 24
58111: PUSH
58112: LD_INT 25
58114: PUSH
58115: LD_INT 26
58117: PUSH
58118: LD_INT 27
58120: PUSH
58121: LD_INT 28
58123: PUSH
58124: LD_INT 29
58126: PUSH
58127: LD_INT 30
58129: PUSH
58130: LD_INT 31
58132: PUSH
58133: LD_INT 32
58135: PUSH
58136: LD_INT 33
58138: PUSH
58139: LD_INT 34
58141: PUSH
58142: LD_INT 36
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 101
58184: PUSH
58185: LD_INT 102
58187: PUSH
58188: LD_INT 103
58190: PUSH
58191: LD_INT 104
58193: PUSH
58194: LD_INT 105
58196: PUSH
58197: LD_INT 106
58199: PUSH
58200: LD_INT 107
58202: PUSH
58203: LD_INT 108
58205: PUSH
58206: LD_INT 109
58208: PUSH
58209: LD_INT 110
58211: PUSH
58212: LD_INT 111
58214: PUSH
58215: LD_INT 112
58217: PUSH
58218: LD_INT 113
58220: PUSH
58221: LD_INT 114
58223: PUSH
58224: LD_INT 116
58226: PUSH
58227: LD_INT 117
58229: PUSH
58230: LD_INT 118
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: ST_TO_ADDR
58256: GO 59263
58258: LD_INT 15
58260: DOUBLE
58261: EQUAL
58262: IFTRUE 58266
58264: GO 58490
58266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
58267: LD_ADDR_VAR 0 2
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: LD_INT 4
58283: PUSH
58284: LD_INT 5
58286: PUSH
58287: LD_INT 6
58289: PUSH
58290: LD_INT 7
58292: PUSH
58293: LD_INT 8
58295: PUSH
58296: LD_INT 9
58298: PUSH
58299: LD_INT 10
58301: PUSH
58302: LD_INT 11
58304: PUSH
58305: LD_INT 12
58307: PUSH
58308: LD_INT 13
58310: PUSH
58311: LD_INT 14
58313: PUSH
58314: LD_INT 15
58316: PUSH
58317: LD_INT 16
58319: PUSH
58320: LD_INT 17
58322: PUSH
58323: LD_INT 18
58325: PUSH
58326: LD_INT 19
58328: PUSH
58329: LD_INT 20
58331: PUSH
58332: LD_INT 21
58334: PUSH
58335: LD_INT 22
58337: PUSH
58338: LD_INT 23
58340: PUSH
58341: LD_INT 24
58343: PUSH
58344: LD_INT 25
58346: PUSH
58347: LD_INT 26
58349: PUSH
58350: LD_INT 27
58352: PUSH
58353: LD_INT 28
58355: PUSH
58356: LD_INT 29
58358: PUSH
58359: LD_INT 30
58361: PUSH
58362: LD_INT 31
58364: PUSH
58365: LD_INT 32
58367: PUSH
58368: LD_INT 33
58370: PUSH
58371: LD_INT 34
58373: PUSH
58374: LD_INT 36
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 101
58416: PUSH
58417: LD_INT 102
58419: PUSH
58420: LD_INT 103
58422: PUSH
58423: LD_INT 104
58425: PUSH
58426: LD_INT 105
58428: PUSH
58429: LD_INT 106
58431: PUSH
58432: LD_INT 107
58434: PUSH
58435: LD_INT 108
58437: PUSH
58438: LD_INT 109
58440: PUSH
58441: LD_INT 110
58443: PUSH
58444: LD_INT 111
58446: PUSH
58447: LD_INT 112
58449: PUSH
58450: LD_INT 113
58452: PUSH
58453: LD_INT 114
58455: PUSH
58456: LD_INT 116
58458: PUSH
58459: LD_INT 117
58461: PUSH
58462: LD_INT 118
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: ST_TO_ADDR
58488: GO 59263
58490: LD_INT 16
58492: DOUBLE
58493: EQUAL
58494: IFTRUE 58498
58496: GO 58634
58498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
58499: LD_ADDR_VAR 0 2
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 5
58512: PUSH
58513: LD_INT 7
58515: PUSH
58516: LD_INT 11
58518: PUSH
58519: LD_INT 12
58521: PUSH
58522: LD_INT 15
58524: PUSH
58525: LD_INT 16
58527: PUSH
58528: LD_INT 20
58530: PUSH
58531: LD_INT 21
58533: PUSH
58534: LD_INT 22
58536: PUSH
58537: LD_INT 23
58539: PUSH
58540: LD_INT 25
58542: PUSH
58543: LD_INT 26
58545: PUSH
58546: LD_INT 30
58548: PUSH
58549: LD_INT 31
58551: PUSH
58552: LD_INT 32
58554: PUSH
58555: LD_INT 33
58557: PUSH
58558: LD_INT 34
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 101
58584: PUSH
58585: LD_INT 102
58587: PUSH
58588: LD_INT 103
58590: PUSH
58591: LD_INT 106
58593: PUSH
58594: LD_INT 108
58596: PUSH
58597: LD_INT 112
58599: PUSH
58600: LD_INT 113
58602: PUSH
58603: LD_INT 114
58605: PUSH
58606: LD_INT 116
58608: PUSH
58609: LD_INT 117
58611: PUSH
58612: LD_INT 118
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: ST_TO_ADDR
58632: GO 59263
58634: LD_INT 17
58636: DOUBLE
58637: EQUAL
58638: IFTRUE 58642
58640: GO 58866
58642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
58643: LD_ADDR_VAR 0 2
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 5
58662: PUSH
58663: LD_INT 6
58665: PUSH
58666: LD_INT 7
58668: PUSH
58669: LD_INT 8
58671: PUSH
58672: LD_INT 9
58674: PUSH
58675: LD_INT 10
58677: PUSH
58678: LD_INT 11
58680: PUSH
58681: LD_INT 12
58683: PUSH
58684: LD_INT 13
58686: PUSH
58687: LD_INT 14
58689: PUSH
58690: LD_INT 15
58692: PUSH
58693: LD_INT 16
58695: PUSH
58696: LD_INT 17
58698: PUSH
58699: LD_INT 18
58701: PUSH
58702: LD_INT 19
58704: PUSH
58705: LD_INT 20
58707: PUSH
58708: LD_INT 21
58710: PUSH
58711: LD_INT 22
58713: PUSH
58714: LD_INT 23
58716: PUSH
58717: LD_INT 24
58719: PUSH
58720: LD_INT 25
58722: PUSH
58723: LD_INT 26
58725: PUSH
58726: LD_INT 27
58728: PUSH
58729: LD_INT 28
58731: PUSH
58732: LD_INT 29
58734: PUSH
58735: LD_INT 30
58737: PUSH
58738: LD_INT 31
58740: PUSH
58741: LD_INT 32
58743: PUSH
58744: LD_INT 33
58746: PUSH
58747: LD_INT 34
58749: PUSH
58750: LD_INT 36
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 101
58792: PUSH
58793: LD_INT 102
58795: PUSH
58796: LD_INT 103
58798: PUSH
58799: LD_INT 104
58801: PUSH
58802: LD_INT 105
58804: PUSH
58805: LD_INT 106
58807: PUSH
58808: LD_INT 107
58810: PUSH
58811: LD_INT 108
58813: PUSH
58814: LD_INT 109
58816: PUSH
58817: LD_INT 110
58819: PUSH
58820: LD_INT 111
58822: PUSH
58823: LD_INT 112
58825: PUSH
58826: LD_INT 113
58828: PUSH
58829: LD_INT 114
58831: PUSH
58832: LD_INT 116
58834: PUSH
58835: LD_INT 117
58837: PUSH
58838: LD_INT 118
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: ST_TO_ADDR
58864: GO 59263
58866: LD_INT 18
58868: DOUBLE
58869: EQUAL
58870: IFTRUE 58874
58872: GO 59022
58874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58875: LD_ADDR_VAR 0 2
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: LD_INT 7
58891: PUSH
58892: LD_INT 11
58894: PUSH
58895: LD_INT 12
58897: PUSH
58898: LD_INT 15
58900: PUSH
58901: LD_INT 16
58903: PUSH
58904: LD_INT 20
58906: PUSH
58907: LD_INT 21
58909: PUSH
58910: LD_INT 22
58912: PUSH
58913: LD_INT 23
58915: PUSH
58916: LD_INT 25
58918: PUSH
58919: LD_INT 26
58921: PUSH
58922: LD_INT 30
58924: PUSH
58925: LD_INT 31
58927: PUSH
58928: LD_INT 32
58930: PUSH
58931: LD_INT 33
58933: PUSH
58934: LD_INT 34
58936: PUSH
58937: LD_INT 35
58939: PUSH
58940: LD_INT 36
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 101
58968: PUSH
58969: LD_INT 102
58971: PUSH
58972: LD_INT 103
58974: PUSH
58975: LD_INT 106
58977: PUSH
58978: LD_INT 108
58980: PUSH
58981: LD_INT 112
58983: PUSH
58984: LD_INT 113
58986: PUSH
58987: LD_INT 114
58989: PUSH
58990: LD_INT 115
58992: PUSH
58993: LD_INT 116
58995: PUSH
58996: LD_INT 117
58998: PUSH
58999: LD_INT 118
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: ST_TO_ADDR
59020: GO 59263
59022: LD_INT 19
59024: DOUBLE
59025: EQUAL
59026: IFTRUE 59030
59028: GO 59262
59030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
59031: LD_ADDR_VAR 0 2
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 6
59053: PUSH
59054: LD_INT 7
59056: PUSH
59057: LD_INT 8
59059: PUSH
59060: LD_INT 9
59062: PUSH
59063: LD_INT 10
59065: PUSH
59066: LD_INT 11
59068: PUSH
59069: LD_INT 12
59071: PUSH
59072: LD_INT 13
59074: PUSH
59075: LD_INT 14
59077: PUSH
59078: LD_INT 15
59080: PUSH
59081: LD_INT 16
59083: PUSH
59084: LD_INT 17
59086: PUSH
59087: LD_INT 18
59089: PUSH
59090: LD_INT 19
59092: PUSH
59093: LD_INT 20
59095: PUSH
59096: LD_INT 21
59098: PUSH
59099: LD_INT 22
59101: PUSH
59102: LD_INT 23
59104: PUSH
59105: LD_INT 24
59107: PUSH
59108: LD_INT 25
59110: PUSH
59111: LD_INT 26
59113: PUSH
59114: LD_INT 27
59116: PUSH
59117: LD_INT 28
59119: PUSH
59120: LD_INT 29
59122: PUSH
59123: LD_INT 30
59125: PUSH
59126: LD_INT 31
59128: PUSH
59129: LD_INT 32
59131: PUSH
59132: LD_INT 33
59134: PUSH
59135: LD_INT 34
59137: PUSH
59138: LD_INT 35
59140: PUSH
59141: LD_INT 36
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 101
59184: PUSH
59185: LD_INT 102
59187: PUSH
59188: LD_INT 103
59190: PUSH
59191: LD_INT 104
59193: PUSH
59194: LD_INT 105
59196: PUSH
59197: LD_INT 106
59199: PUSH
59200: LD_INT 107
59202: PUSH
59203: LD_INT 108
59205: PUSH
59206: LD_INT 109
59208: PUSH
59209: LD_INT 110
59211: PUSH
59212: LD_INT 111
59214: PUSH
59215: LD_INT 112
59217: PUSH
59218: LD_INT 113
59220: PUSH
59221: LD_INT 114
59223: PUSH
59224: LD_INT 115
59226: PUSH
59227: LD_INT 116
59229: PUSH
59230: LD_INT 117
59232: PUSH
59233: LD_INT 118
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: ST_TO_ADDR
59260: GO 59263
59262: POP
// end else
59263: GO 59494
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
59265: LD_ADDR_VAR 0 2
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: LD_INT 6
59287: PUSH
59288: LD_INT 7
59290: PUSH
59291: LD_INT 8
59293: PUSH
59294: LD_INT 9
59296: PUSH
59297: LD_INT 10
59299: PUSH
59300: LD_INT 11
59302: PUSH
59303: LD_INT 12
59305: PUSH
59306: LD_INT 13
59308: PUSH
59309: LD_INT 14
59311: PUSH
59312: LD_INT 15
59314: PUSH
59315: LD_INT 16
59317: PUSH
59318: LD_INT 17
59320: PUSH
59321: LD_INT 18
59323: PUSH
59324: LD_INT 19
59326: PUSH
59327: LD_INT 20
59329: PUSH
59330: LD_INT 21
59332: PUSH
59333: LD_INT 22
59335: PUSH
59336: LD_INT 23
59338: PUSH
59339: LD_INT 24
59341: PUSH
59342: LD_INT 25
59344: PUSH
59345: LD_INT 26
59347: PUSH
59348: LD_INT 27
59350: PUSH
59351: LD_INT 28
59353: PUSH
59354: LD_INT 29
59356: PUSH
59357: LD_INT 30
59359: PUSH
59360: LD_INT 31
59362: PUSH
59363: LD_INT 32
59365: PUSH
59366: LD_INT 33
59368: PUSH
59369: LD_INT 34
59371: PUSH
59372: LD_INT 35
59374: PUSH
59375: LD_INT 36
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 101
59418: PUSH
59419: LD_INT 102
59421: PUSH
59422: LD_INT 103
59424: PUSH
59425: LD_INT 104
59427: PUSH
59428: LD_INT 105
59430: PUSH
59431: LD_INT 106
59433: PUSH
59434: LD_INT 107
59436: PUSH
59437: LD_INT 108
59439: PUSH
59440: LD_INT 109
59442: PUSH
59443: LD_INT 110
59445: PUSH
59446: LD_INT 111
59448: PUSH
59449: LD_INT 112
59451: PUSH
59452: LD_INT 113
59454: PUSH
59455: LD_INT 114
59457: PUSH
59458: LD_INT 115
59460: PUSH
59461: LD_INT 116
59463: PUSH
59464: LD_INT 117
59466: PUSH
59467: LD_INT 118
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// if result then
59494: LD_VAR 0 2
59498: IFFALSE 60284
// begin normal :=  ;
59500: LD_ADDR_VAR 0 5
59504: PUSH
59505: LD_STRING 
59507: ST_TO_ADDR
// hardcore :=  ;
59508: LD_ADDR_VAR 0 6
59512: PUSH
59513: LD_STRING 
59515: ST_TO_ADDR
// active :=  ;
59516: LD_ADDR_VAR 0 7
59520: PUSH
59521: LD_STRING 
59523: ST_TO_ADDR
// for i = 1 to normalCounter do
59524: LD_ADDR_VAR 0 8
59528: PUSH
59529: DOUBLE
59530: LD_INT 1
59532: DEC
59533: ST_TO_ADDR
59534: LD_EXP 124
59538: PUSH
59539: FOR_TO
59540: IFFALSE 59641
// begin tmp := 0 ;
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: LD_STRING 0
59549: ST_TO_ADDR
// if result [ 1 ] then
59550: LD_VAR 0 2
59554: PUSH
59555: LD_INT 1
59557: ARRAY
59558: IFFALSE 59623
// if result [ 1 ] [ 1 ] = i then
59560: LD_VAR 0 2
59564: PUSH
59565: LD_INT 1
59567: ARRAY
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PUSH
59573: LD_VAR 0 8
59577: EQUAL
59578: IFFALSE 59623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_VAR 0 2
59589: PPUSH
59590: LD_INT 1
59592: PPUSH
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 1
59600: ARRAY
59601: PPUSH
59602: LD_INT 1
59604: PPUSH
59605: CALL_OW 3
59609: PPUSH
59610: CALL_OW 1
59614: ST_TO_ADDR
// tmp := 1 ;
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: LD_STRING 1
59622: ST_TO_ADDR
// end ; normal := normal & tmp ;
59623: LD_ADDR_VAR 0 5
59627: PUSH
59628: LD_VAR 0 5
59632: PUSH
59633: LD_VAR 0 3
59637: STR
59638: ST_TO_ADDR
// end ;
59639: GO 59539
59641: POP
59642: POP
// for i = 1 to hardcoreCounter do
59643: LD_ADDR_VAR 0 8
59647: PUSH
59648: DOUBLE
59649: LD_INT 1
59651: DEC
59652: ST_TO_ADDR
59653: LD_EXP 125
59657: PUSH
59658: FOR_TO
59659: IFFALSE 59764
// begin tmp := 0 ;
59661: LD_ADDR_VAR 0 3
59665: PUSH
59666: LD_STRING 0
59668: ST_TO_ADDR
// if result [ 2 ] then
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 2
59676: ARRAY
59677: IFFALSE 59746
// if result [ 2 ] [ 1 ] = 100 + i then
59679: LD_VAR 0 2
59683: PUSH
59684: LD_INT 2
59686: ARRAY
59687: PUSH
59688: LD_INT 1
59690: ARRAY
59691: PUSH
59692: LD_INT 100
59694: PUSH
59695: LD_VAR 0 8
59699: PLUS
59700: EQUAL
59701: IFFALSE 59746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
59703: LD_ADDR_VAR 0 2
59707: PUSH
59708: LD_VAR 0 2
59712: PPUSH
59713: LD_INT 2
59715: PPUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 2
59723: ARRAY
59724: PPUSH
59725: LD_INT 1
59727: PPUSH
59728: CALL_OW 3
59732: PPUSH
59733: CALL_OW 1
59737: ST_TO_ADDR
// tmp := 1 ;
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_STRING 1
59745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59746: LD_ADDR_VAR 0 6
59750: PUSH
59751: LD_VAR 0 6
59755: PUSH
59756: LD_VAR 0 3
59760: STR
59761: ST_TO_ADDR
// end ;
59762: GO 59658
59764: POP
59765: POP
// if isGameLoad then
59766: LD_VAR 0 1
59770: IFFALSE 60245
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59772: LD_ADDR_VAR 0 4
59776: PUSH
59777: LD_EXP 128
59781: PUSH
59782: LD_EXP 127
59786: PUSH
59787: LD_EXP 129
59791: PUSH
59792: LD_EXP 126
59796: PUSH
59797: LD_EXP 130
59801: PUSH
59802: LD_EXP 131
59806: PUSH
59807: LD_EXP 132
59811: PUSH
59812: LD_EXP 133
59816: PUSH
59817: LD_EXP 134
59821: PUSH
59822: LD_EXP 135
59826: PUSH
59827: LD_EXP 136
59831: PUSH
59832: LD_EXP 137
59836: PUSH
59837: LD_EXP 138
59841: PUSH
59842: LD_EXP 139
59846: PUSH
59847: LD_EXP 147
59851: PUSH
59852: LD_EXP 148
59856: PUSH
59857: LD_EXP 149
59861: PUSH
59862: LD_EXP 150
59866: PUSH
59867: LD_EXP 152
59871: PUSH
59872: LD_EXP 153
59876: PUSH
59877: LD_EXP 154
59881: PUSH
59882: LD_EXP 157
59886: PUSH
59887: LD_EXP 159
59891: PUSH
59892: LD_EXP 160
59896: PUSH
59897: LD_EXP 161
59901: PUSH
59902: LD_EXP 163
59906: PUSH
59907: LD_EXP 164
59911: PUSH
59912: LD_EXP 167
59916: PUSH
59917: LD_EXP 168
59921: PUSH
59922: LD_EXP 169
59926: PUSH
59927: LD_EXP 170
59931: PUSH
59932: LD_EXP 171
59936: PUSH
59937: LD_EXP 172
59941: PUSH
59942: LD_EXP 173
59946: PUSH
59947: LD_EXP 174
59951: PUSH
59952: LD_EXP 175
59956: PUSH
59957: LD_EXP 140
59961: PUSH
59962: LD_EXP 141
59966: PUSH
59967: LD_EXP 144
59971: PUSH
59972: LD_EXP 145
59976: PUSH
59977: LD_EXP 146
59981: PUSH
59982: LD_EXP 142
59986: PUSH
59987: LD_EXP 143
59991: PUSH
59992: LD_EXP 151
59996: PUSH
59997: LD_EXP 155
60001: PUSH
60002: LD_EXP 156
60006: PUSH
60007: LD_EXP 158
60011: PUSH
60012: LD_EXP 162
60016: PUSH
60017: LD_EXP 165
60021: PUSH
60022: LD_EXP 166
60026: PUSH
60027: LD_EXP 176
60031: PUSH
60032: LD_EXP 177
60036: PUSH
60037: LD_EXP 178
60041: PUSH
60042: LD_EXP 179
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// tmp :=  ;
60103: LD_ADDR_VAR 0 3
60107: PUSH
60108: LD_STRING 
60110: ST_TO_ADDR
// for i = 1 to normalCounter do
60111: LD_ADDR_VAR 0 8
60115: PUSH
60116: DOUBLE
60117: LD_INT 1
60119: DEC
60120: ST_TO_ADDR
60121: LD_EXP 124
60125: PUSH
60126: FOR_TO
60127: IFFALSE 60163
// begin if flags [ i ] then
60129: LD_VAR 0 4
60133: PUSH
60134: LD_VAR 0 8
60138: ARRAY
60139: IFFALSE 60161
// tmp := tmp & i & ; ;
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: LD_VAR 0 3
60150: PUSH
60151: LD_VAR 0 8
60155: STR
60156: PUSH
60157: LD_STRING ;
60159: STR
60160: ST_TO_ADDR
// end ;
60161: GO 60126
60163: POP
60164: POP
// for i = 1 to hardcoreCounter do
60165: LD_ADDR_VAR 0 8
60169: PUSH
60170: DOUBLE
60171: LD_INT 1
60173: DEC
60174: ST_TO_ADDR
60175: LD_EXP 125
60179: PUSH
60180: FOR_TO
60181: IFFALSE 60227
// begin if flags [ normalCounter + i ] then
60183: LD_VAR 0 4
60187: PUSH
60188: LD_EXP 124
60192: PUSH
60193: LD_VAR 0 8
60197: PLUS
60198: ARRAY
60199: IFFALSE 60225
// tmp := tmp & ( 100 + i ) & ; ;
60201: LD_ADDR_VAR 0 3
60205: PUSH
60206: LD_VAR 0 3
60210: PUSH
60211: LD_INT 100
60213: PUSH
60214: LD_VAR 0 8
60218: PLUS
60219: STR
60220: PUSH
60221: LD_STRING ;
60223: STR
60224: ST_TO_ADDR
// end ;
60225: GO 60180
60227: POP
60228: POP
// if tmp then
60229: LD_VAR 0 3
60233: IFFALSE 60245
// active := tmp ;
60235: LD_ADDR_VAR 0 7
60239: PUSH
60240: LD_VAR 0 3
60244: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
60245: LD_STRING getStreamItemsFromMission("
60247: PUSH
60248: LD_VAR 0 5
60252: STR
60253: PUSH
60254: LD_STRING ","
60256: STR
60257: PUSH
60258: LD_VAR 0 6
60262: STR
60263: PUSH
60264: LD_STRING ","
60266: STR
60267: PUSH
60268: LD_VAR 0 7
60272: STR
60273: PUSH
60274: LD_STRING ")
60276: STR
60277: PPUSH
60278: CALL_OW 559
// end else
60282: GO 60291
// ToLua ( getStreamItemsFromMission("","","") ) ;
60284: LD_STRING getStreamItemsFromMission("","","")
60286: PPUSH
60287: CALL_OW 559
// end ;
60291: LD_VAR 0 2
60295: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
60296: LD_EXP 123
60300: PUSH
60301: LD_EXP 128
60305: AND
60306: IFFALSE 60430
60308: GO 60310
60310: DISABLE
60311: LD_INT 0
60313: PPUSH
60314: PPUSH
// begin enable ;
60315: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
60316: LD_ADDR_VAR 0 2
60320: PUSH
60321: LD_INT 22
60323: PUSH
60324: LD_OWVAR 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 34
60338: PUSH
60339: LD_INT 7
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 34
60348: PUSH
60349: LD_INT 45
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 34
60358: PUSH
60359: LD_INT 28
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 34
60368: PUSH
60369: LD_INT 47
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PPUSH
60387: CALL_OW 69
60391: ST_TO_ADDR
// if not tmp then
60392: LD_VAR 0 2
60396: NOT
60397: IFFALSE 60401
// exit ;
60399: GO 60430
// for i in tmp do
60401: LD_ADDR_VAR 0 1
60405: PUSH
60406: LD_VAR 0 2
60410: PUSH
60411: FOR_IN
60412: IFFALSE 60428
// begin SetLives ( i , 0 ) ;
60414: LD_VAR 0 1
60418: PPUSH
60419: LD_INT 0
60421: PPUSH
60422: CALL_OW 234
// end ;
60426: GO 60411
60428: POP
60429: POP
// end ;
60430: PPOPN 2
60432: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
60433: LD_EXP 123
60437: PUSH
60438: LD_EXP 129
60442: AND
60443: IFFALSE 60527
60445: GO 60447
60447: DISABLE
60448: LD_INT 0
60450: PPUSH
60451: PPUSH
// begin enable ;
60452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
60453: LD_ADDR_VAR 0 2
60457: PUSH
60458: LD_INT 22
60460: PUSH
60461: LD_OWVAR 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 32
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PPUSH
60484: CALL_OW 69
60488: ST_TO_ADDR
// if not tmp then
60489: LD_VAR 0 2
60493: NOT
60494: IFFALSE 60498
// exit ;
60496: GO 60527
// for i in tmp do
60498: LD_ADDR_VAR 0 1
60502: PUSH
60503: LD_VAR 0 2
60507: PUSH
60508: FOR_IN
60509: IFFALSE 60525
// begin SetLives ( i , 0 ) ;
60511: LD_VAR 0 1
60515: PPUSH
60516: LD_INT 0
60518: PPUSH
60519: CALL_OW 234
// end ;
60523: GO 60508
60525: POP
60526: POP
// end ;
60527: PPOPN 2
60529: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
60530: LD_EXP 123
60534: PUSH
60535: LD_EXP 126
60539: AND
60540: IFFALSE 60633
60542: GO 60544
60544: DISABLE
60545: LD_INT 0
60547: PPUSH
// begin enable ;
60548: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
60549: LD_ADDR_VAR 0 1
60553: PUSH
60554: LD_INT 22
60556: PUSH
60557: LD_OWVAR 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 25
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 25
60581: PUSH
60582: LD_INT 9
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 25
60591: PUSH
60592: LD_INT 8
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PPUSH
60609: CALL_OW 69
60613: PUSH
60614: FOR_IN
60615: IFFALSE 60631
// begin SetClass ( i , 1 ) ;
60617: LD_VAR 0 1
60621: PPUSH
60622: LD_INT 1
60624: PPUSH
60625: CALL_OW 336
// end ;
60629: GO 60614
60631: POP
60632: POP
// end ;
60633: PPOPN 1
60635: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
60636: LD_EXP 123
60640: PUSH
60641: LD_EXP 127
60645: AND
60646: PUSH
60647: LD_OWVAR 65
60651: PUSH
60652: LD_INT 7
60654: LESS
60655: AND
60656: IFFALSE 60670
60658: GO 60660
60660: DISABLE
// begin enable ;
60661: ENABLE
// game_speed := 7 ;
60662: LD_ADDR_OWVAR 65
60666: PUSH
60667: LD_INT 7
60669: ST_TO_ADDR
// end ;
60670: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
60671: LD_EXP 123
60675: PUSH
60676: LD_EXP 130
60680: AND
60681: IFFALSE 60883
60683: GO 60685
60685: DISABLE
60686: LD_INT 0
60688: PPUSH
60689: PPUSH
60690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60691: LD_ADDR_VAR 0 3
60695: PUSH
60696: LD_INT 81
60698: PUSH
60699: LD_OWVAR 2
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 21
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PPUSH
60722: CALL_OW 69
60726: ST_TO_ADDR
// if not tmp then
60727: LD_VAR 0 3
60731: NOT
60732: IFFALSE 60736
// exit ;
60734: GO 60883
// if tmp > 5 then
60736: LD_VAR 0 3
60740: PUSH
60741: LD_INT 5
60743: GREATER
60744: IFFALSE 60756
// k := 5 else
60746: LD_ADDR_VAR 0 2
60750: PUSH
60751: LD_INT 5
60753: ST_TO_ADDR
60754: GO 60766
// k := tmp ;
60756: LD_ADDR_VAR 0 2
60760: PUSH
60761: LD_VAR 0 3
60765: ST_TO_ADDR
// for i := 1 to k do
60766: LD_ADDR_VAR 0 1
60770: PUSH
60771: DOUBLE
60772: LD_INT 1
60774: DEC
60775: ST_TO_ADDR
60776: LD_VAR 0 2
60780: PUSH
60781: FOR_TO
60782: IFFALSE 60881
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60784: LD_VAR 0 3
60788: PUSH
60789: LD_VAR 0 1
60793: ARRAY
60794: PPUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_INT 4
60802: MOD
60803: PUSH
60804: LD_INT 1
60806: PLUS
60807: PPUSH
60808: CALL_OW 259
60812: PUSH
60813: LD_INT 10
60815: LESS
60816: IFFALSE 60879
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60818: LD_VAR 0 3
60822: PUSH
60823: LD_VAR 0 1
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 4
60836: MOD
60837: PUSH
60838: LD_INT 1
60840: PLUS
60841: PPUSH
60842: LD_VAR 0 3
60846: PUSH
60847: LD_VAR 0 1
60851: ARRAY
60852: PPUSH
60853: LD_VAR 0 1
60857: PUSH
60858: LD_INT 4
60860: MOD
60861: PUSH
60862: LD_INT 1
60864: PLUS
60865: PPUSH
60866: CALL_OW 259
60870: PUSH
60871: LD_INT 1
60873: PLUS
60874: PPUSH
60875: CALL_OW 237
60879: GO 60781
60881: POP
60882: POP
// end ;
60883: PPOPN 3
60885: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60886: LD_EXP 123
60890: PUSH
60891: LD_EXP 131
60895: AND
60896: IFFALSE 60916
60898: GO 60900
60900: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60901: LD_INT 4
60903: PPUSH
60904: LD_OWVAR 2
60908: PPUSH
60909: LD_INT 0
60911: PPUSH
60912: CALL_OW 324
60916: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60917: LD_EXP 123
60921: PUSH
60922: LD_EXP 160
60926: AND
60927: IFFALSE 60947
60929: GO 60931
60931: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60932: LD_INT 19
60934: PPUSH
60935: LD_OWVAR 2
60939: PPUSH
60940: LD_INT 0
60942: PPUSH
60943: CALL_OW 324
60947: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60948: LD_EXP 123
60952: PUSH
60953: LD_EXP 132
60957: AND
60958: IFFALSE 61060
60960: GO 60962
60962: DISABLE
60963: LD_INT 0
60965: PPUSH
60966: PPUSH
// begin enable ;
60967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60968: LD_ADDR_VAR 0 2
60972: PUSH
60973: LD_INT 22
60975: PUSH
60976: LD_OWVAR 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 34
60990: PUSH
60991: LD_INT 11
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 34
61000: PUSH
61001: LD_INT 30
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PPUSH
61017: CALL_OW 69
61021: ST_TO_ADDR
// if not tmp then
61022: LD_VAR 0 2
61026: NOT
61027: IFFALSE 61031
// exit ;
61029: GO 61060
// for i in tmp do
61031: LD_ADDR_VAR 0 1
61035: PUSH
61036: LD_VAR 0 2
61040: PUSH
61041: FOR_IN
61042: IFFALSE 61058
// begin SetLives ( i , 0 ) ;
61044: LD_VAR 0 1
61048: PPUSH
61049: LD_INT 0
61051: PPUSH
61052: CALL_OW 234
// end ;
61056: GO 61041
61058: POP
61059: POP
// end ;
61060: PPOPN 2
61062: END
// every 0 0$1 trigger StreamModeActive and sBunker do
61063: LD_EXP 123
61067: PUSH
61068: LD_EXP 133
61072: AND
61073: IFFALSE 61093
61075: GO 61077
61077: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
61078: LD_INT 32
61080: PPUSH
61081: LD_OWVAR 2
61085: PPUSH
61086: LD_INT 0
61088: PPUSH
61089: CALL_OW 324
61093: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
61094: LD_EXP 123
61098: PUSH
61099: LD_EXP 134
61103: AND
61104: IFFALSE 61285
61106: GO 61108
61108: DISABLE
61109: LD_INT 0
61111: PPUSH
61112: PPUSH
61113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
61114: LD_ADDR_VAR 0 2
61118: PUSH
61119: LD_INT 22
61121: PUSH
61122: LD_OWVAR 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 33
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PPUSH
61145: CALL_OW 69
61149: ST_TO_ADDR
// if not tmp then
61150: LD_VAR 0 2
61154: NOT
61155: IFFALSE 61159
// exit ;
61157: GO 61285
// side := 0 ;
61159: LD_ADDR_VAR 0 3
61163: PUSH
61164: LD_INT 0
61166: ST_TO_ADDR
// for i := 1 to 8 do
61167: LD_ADDR_VAR 0 1
61171: PUSH
61172: DOUBLE
61173: LD_INT 1
61175: DEC
61176: ST_TO_ADDR
61177: LD_INT 8
61179: PUSH
61180: FOR_TO
61181: IFFALSE 61229
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
61183: LD_OWVAR 2
61187: PUSH
61188: LD_VAR 0 1
61192: NONEQUAL
61193: PUSH
61194: LD_OWVAR 2
61198: PPUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: CALL_OW 81
61208: PUSH
61209: LD_INT 2
61211: EQUAL
61212: AND
61213: IFFALSE 61227
// begin side := i ;
61215: LD_ADDR_VAR 0 3
61219: PUSH
61220: LD_VAR 0 1
61224: ST_TO_ADDR
// break ;
61225: GO 61229
// end ;
61227: GO 61180
61229: POP
61230: POP
// if not side then
61231: LD_VAR 0 3
61235: NOT
61236: IFFALSE 61240
// exit ;
61238: GO 61285
// for i := 1 to tmp do
61240: LD_ADDR_VAR 0 1
61244: PUSH
61245: DOUBLE
61246: LD_INT 1
61248: DEC
61249: ST_TO_ADDR
61250: LD_VAR 0 2
61254: PUSH
61255: FOR_TO
61256: IFFALSE 61283
// if Prob ( 60 ) then
61258: LD_INT 60
61260: PPUSH
61261: CALL_OW 13
61265: IFFALSE 61281
// SetSide ( i , side ) ;
61267: LD_VAR 0 1
61271: PPUSH
61272: LD_VAR 0 3
61276: PPUSH
61277: CALL_OW 235
61281: GO 61255
61283: POP
61284: POP
// end ;
61285: PPOPN 3
61287: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
61288: LD_EXP 123
61292: PUSH
61293: LD_EXP 136
61297: AND
61298: IFFALSE 61417
61300: GO 61302
61302: DISABLE
61303: LD_INT 0
61305: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
61306: LD_ADDR_VAR 0 1
61310: PUSH
61311: LD_INT 22
61313: PUSH
61314: LD_OWVAR 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 21
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: PUSH
61336: LD_INT 23
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: PPUSH
61355: CALL_OW 69
61359: PUSH
61360: FOR_IN
61361: IFFALSE 61415
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
61363: LD_VAR 0 1
61367: PPUSH
61368: CALL_OW 257
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: IN
61391: IFFALSE 61413
// SetClass ( un , rand ( 1 , 4 ) ) ;
61393: LD_VAR 0 1
61397: PPUSH
61398: LD_INT 1
61400: PPUSH
61401: LD_INT 4
61403: PPUSH
61404: CALL_OW 12
61408: PPUSH
61409: CALL_OW 336
61413: GO 61360
61415: POP
61416: POP
// end ;
61417: PPOPN 1
61419: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
61420: LD_EXP 123
61424: PUSH
61425: LD_EXP 135
61429: AND
61430: IFFALSE 61509
61432: GO 61434
61434: DISABLE
61435: LD_INT 0
61437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61438: LD_ADDR_VAR 0 1
61442: PUSH
61443: LD_INT 22
61445: PUSH
61446: LD_OWVAR 2
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 21
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PPUSH
61469: CALL_OW 69
61473: ST_TO_ADDR
// if not tmp then
61474: LD_VAR 0 1
61478: NOT
61479: IFFALSE 61483
// exit ;
61481: GO 61509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
61483: LD_VAR 0 1
61487: PUSH
61488: LD_INT 1
61490: PPUSH
61491: LD_VAR 0 1
61495: PPUSH
61496: CALL_OW 12
61500: ARRAY
61501: PPUSH
61502: LD_INT 100
61504: PPUSH
61505: CALL_OW 234
// end ;
61509: PPOPN 1
61511: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
61512: LD_EXP 123
61516: PUSH
61517: LD_EXP 137
61521: AND
61522: IFFALSE 61620
61524: GO 61526
61526: DISABLE
61527: LD_INT 0
61529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61530: LD_ADDR_VAR 0 1
61534: PUSH
61535: LD_INT 22
61537: PUSH
61538: LD_OWVAR 2
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 21
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PPUSH
61561: CALL_OW 69
61565: ST_TO_ADDR
// if not tmp then
61566: LD_VAR 0 1
61570: NOT
61571: IFFALSE 61575
// exit ;
61573: GO 61620
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
61575: LD_VAR 0 1
61579: PUSH
61580: LD_INT 1
61582: PPUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: CALL_OW 12
61592: ARRAY
61593: PPUSH
61594: LD_INT 1
61596: PPUSH
61597: LD_INT 4
61599: PPUSH
61600: CALL_OW 12
61604: PPUSH
61605: LD_INT 3000
61607: PPUSH
61608: LD_INT 9000
61610: PPUSH
61611: CALL_OW 12
61615: PPUSH
61616: CALL_OW 492
// end ;
61620: PPOPN 1
61622: END
// every 0 0$1 trigger StreamModeActive and sDepot do
61623: LD_EXP 123
61627: PUSH
61628: LD_EXP 138
61632: AND
61633: IFFALSE 61653
61635: GO 61637
61637: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
61638: LD_INT 1
61640: PPUSH
61641: LD_OWVAR 2
61645: PPUSH
61646: LD_INT 0
61648: PPUSH
61649: CALL_OW 324
61653: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
61654: LD_EXP 123
61658: PUSH
61659: LD_EXP 139
61663: AND
61664: IFFALSE 61747
61666: GO 61668
61668: DISABLE
61669: LD_INT 0
61671: PPUSH
61672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61673: LD_ADDR_VAR 0 2
61677: PUSH
61678: LD_INT 22
61680: PUSH
61681: LD_OWVAR 2
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 21
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PPUSH
61704: CALL_OW 69
61708: ST_TO_ADDR
// if not tmp then
61709: LD_VAR 0 2
61713: NOT
61714: IFFALSE 61718
// exit ;
61716: GO 61747
// for i in tmp do
61718: LD_ADDR_VAR 0 1
61722: PUSH
61723: LD_VAR 0 2
61727: PUSH
61728: FOR_IN
61729: IFFALSE 61745
// SetBLevel ( i , 10 ) ;
61731: LD_VAR 0 1
61735: PPUSH
61736: LD_INT 10
61738: PPUSH
61739: CALL_OW 241
61743: GO 61728
61745: POP
61746: POP
// end ;
61747: PPOPN 2
61749: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61750: LD_EXP 123
61754: PUSH
61755: LD_EXP 140
61759: AND
61760: IFFALSE 61871
61762: GO 61764
61764: DISABLE
61765: LD_INT 0
61767: PPUSH
61768: PPUSH
61769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61770: LD_ADDR_VAR 0 3
61774: PUSH
61775: LD_INT 22
61777: PUSH
61778: LD_OWVAR 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 25
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PPUSH
61801: CALL_OW 69
61805: ST_TO_ADDR
// if not tmp then
61806: LD_VAR 0 3
61810: NOT
61811: IFFALSE 61815
// exit ;
61813: GO 61871
// un := tmp [ rand ( 1 , tmp ) ] ;
61815: LD_ADDR_VAR 0 2
61819: PUSH
61820: LD_VAR 0 3
61824: PUSH
61825: LD_INT 1
61827: PPUSH
61828: LD_VAR 0 3
61832: PPUSH
61833: CALL_OW 12
61837: ARRAY
61838: ST_TO_ADDR
// if Crawls ( un ) then
61839: LD_VAR 0 2
61843: PPUSH
61844: CALL_OW 318
61848: IFFALSE 61859
// ComWalk ( un ) ;
61850: LD_VAR 0 2
61854: PPUSH
61855: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61859: LD_VAR 0 2
61863: PPUSH
61864: LD_INT 5
61866: PPUSH
61867: CALL_OW 336
// end ;
61871: PPOPN 3
61873: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61874: LD_EXP 123
61878: PUSH
61879: LD_EXP 141
61883: AND
61884: PUSH
61885: LD_OWVAR 67
61889: PUSH
61890: LD_INT 4
61892: LESS
61893: AND
61894: IFFALSE 61913
61896: GO 61898
61898: DISABLE
// begin Difficulty := Difficulty + 1 ;
61899: LD_ADDR_OWVAR 67
61903: PUSH
61904: LD_OWVAR 67
61908: PUSH
61909: LD_INT 1
61911: PLUS
61912: ST_TO_ADDR
// end ;
61913: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61914: LD_EXP 123
61918: PUSH
61919: LD_EXP 142
61923: AND
61924: IFFALSE 62027
61926: GO 61928
61928: DISABLE
61929: LD_INT 0
61931: PPUSH
// begin for i := 1 to 5 do
61932: LD_ADDR_VAR 0 1
61936: PUSH
61937: DOUBLE
61938: LD_INT 1
61940: DEC
61941: ST_TO_ADDR
61942: LD_INT 5
61944: PUSH
61945: FOR_TO
61946: IFFALSE 62025
// begin uc_nation := nation_nature ;
61948: LD_ADDR_OWVAR 21
61952: PUSH
61953: LD_INT 0
61955: ST_TO_ADDR
// uc_side := 0 ;
61956: LD_ADDR_OWVAR 20
61960: PUSH
61961: LD_INT 0
61963: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61964: LD_ADDR_OWVAR 29
61968: PUSH
61969: LD_INT 12
61971: PUSH
61972: LD_INT 12
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// hc_agressivity := 20 ;
61979: LD_ADDR_OWVAR 35
61983: PUSH
61984: LD_INT 20
61986: ST_TO_ADDR
// hc_class := class_tiger ;
61987: LD_ADDR_OWVAR 28
61991: PUSH
61992: LD_INT 14
61994: ST_TO_ADDR
// hc_gallery :=  ;
61995: LD_ADDR_OWVAR 33
61999: PUSH
62000: LD_STRING 
62002: ST_TO_ADDR
// hc_name :=  ;
62003: LD_ADDR_OWVAR 26
62007: PUSH
62008: LD_STRING 
62010: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
62011: CALL_OW 44
62015: PPUSH
62016: LD_INT 0
62018: PPUSH
62019: CALL_OW 51
// end ;
62023: GO 61945
62025: POP
62026: POP
// end ;
62027: PPOPN 1
62029: END
// every 0 0$1 trigger StreamModeActive and sBomb do
62030: LD_EXP 123
62034: PUSH
62035: LD_EXP 143
62039: AND
62040: IFFALSE 62049
62042: GO 62044
62044: DISABLE
// StreamSibBomb ;
62045: CALL 62050 0 0
62049: END
// export function StreamSibBomb ; var i , x , y ; begin
62050: LD_INT 0
62052: PPUSH
62053: PPUSH
62054: PPUSH
62055: PPUSH
// result := false ;
62056: LD_ADDR_VAR 0 1
62060: PUSH
62061: LD_INT 0
62063: ST_TO_ADDR
// for i := 1 to 16 do
62064: LD_ADDR_VAR 0 2
62068: PUSH
62069: DOUBLE
62070: LD_INT 1
62072: DEC
62073: ST_TO_ADDR
62074: LD_INT 16
62076: PUSH
62077: FOR_TO
62078: IFFALSE 62277
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
62080: LD_ADDR_VAR 0 3
62084: PUSH
62085: LD_INT 10
62087: PUSH
62088: LD_INT 20
62090: PUSH
62091: LD_INT 30
62093: PUSH
62094: LD_INT 40
62096: PUSH
62097: LD_INT 50
62099: PUSH
62100: LD_INT 60
62102: PUSH
62103: LD_INT 70
62105: PUSH
62106: LD_INT 80
62108: PUSH
62109: LD_INT 90
62111: PUSH
62112: LD_INT 100
62114: PUSH
62115: LD_INT 110
62117: PUSH
62118: LD_INT 120
62120: PUSH
62121: LD_INT 130
62123: PUSH
62124: LD_INT 140
62126: PUSH
62127: LD_INT 150
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PPUSH
62150: LD_INT 15
62152: PPUSH
62153: CALL_OW 12
62157: ARRAY
62158: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
62159: LD_ADDR_VAR 0 4
62163: PUSH
62164: LD_INT 10
62166: PUSH
62167: LD_INT 20
62169: PUSH
62170: LD_INT 30
62172: PUSH
62173: LD_INT 40
62175: PUSH
62176: LD_INT 50
62178: PUSH
62179: LD_INT 60
62181: PUSH
62182: LD_INT 70
62184: PUSH
62185: LD_INT 80
62187: PUSH
62188: LD_INT 90
62190: PUSH
62191: LD_INT 100
62193: PUSH
62194: LD_INT 110
62196: PUSH
62197: LD_INT 120
62199: PUSH
62200: LD_INT 130
62202: PUSH
62203: LD_INT 140
62205: PUSH
62206: LD_INT 150
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PPUSH
62229: LD_INT 15
62231: PPUSH
62232: CALL_OW 12
62236: ARRAY
62237: ST_TO_ADDR
// if ValidHex ( x , y ) then
62238: LD_VAR 0 3
62242: PPUSH
62243: LD_VAR 0 4
62247: PPUSH
62248: CALL_OW 488
62252: IFFALSE 62275
// begin result := [ x , y ] ;
62254: LD_ADDR_VAR 0 1
62258: PUSH
62259: LD_VAR 0 3
62263: PUSH
62264: LD_VAR 0 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// break ;
62273: GO 62277
// end ; end ;
62275: GO 62077
62277: POP
62278: POP
// if result then
62279: LD_VAR 0 1
62283: IFFALSE 62343
// begin ToLua ( playSibBomb() ) ;
62285: LD_STRING playSibBomb()
62287: PPUSH
62288: CALL_OW 559
// wait ( 0 0$14 ) ;
62292: LD_INT 490
62294: PPUSH
62295: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
62299: LD_VAR 0 1
62303: PUSH
62304: LD_INT 1
62306: ARRAY
62307: PPUSH
62308: LD_VAR 0 1
62312: PUSH
62313: LD_INT 2
62315: ARRAY
62316: PPUSH
62317: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
62321: LD_VAR 0 1
62325: PUSH
62326: LD_INT 1
62328: ARRAY
62329: PPUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_INT 2
62337: ARRAY
62338: PPUSH
62339: CALL_OW 429
// end ; end ;
62343: LD_VAR 0 1
62347: RET
// every 0 0$1 trigger StreamModeActive and sReset do
62348: LD_EXP 123
62352: PUSH
62353: LD_EXP 145
62357: AND
62358: IFFALSE 62370
62360: GO 62362
62362: DISABLE
// YouLost (  ) ;
62363: LD_STRING 
62365: PPUSH
62366: CALL_OW 104
62370: END
// every 0 0$1 trigger StreamModeActive and sFog do
62371: LD_EXP 123
62375: PUSH
62376: LD_EXP 144
62380: AND
62381: IFFALSE 62395
62383: GO 62385
62385: DISABLE
// FogOff ( your_side ) ;
62386: LD_OWVAR 2
62390: PPUSH
62391: CALL_OW 344
62395: END
// every 0 0$1 trigger StreamModeActive and sSun do
62396: LD_EXP 123
62400: PUSH
62401: LD_EXP 146
62405: AND
62406: IFFALSE 62434
62408: GO 62410
62410: DISABLE
// begin solar_recharge_percent := 0 ;
62411: LD_ADDR_OWVAR 79
62415: PUSH
62416: LD_INT 0
62418: ST_TO_ADDR
// wait ( 5 5$00 ) ;
62419: LD_INT 10500
62421: PPUSH
62422: CALL_OW 67
// solar_recharge_percent := 100 ;
62426: LD_ADDR_OWVAR 79
62430: PUSH
62431: LD_INT 100
62433: ST_TO_ADDR
// end ;
62434: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
62435: LD_EXP 123
62439: PUSH
62440: LD_EXP 147
62444: AND
62445: IFFALSE 62684
62447: GO 62449
62449: DISABLE
62450: LD_INT 0
62452: PPUSH
62453: PPUSH
62454: PPUSH
// begin tmp := [ ] ;
62455: LD_ADDR_VAR 0 3
62459: PUSH
62460: EMPTY
62461: ST_TO_ADDR
// for i := 1 to 6 do
62462: LD_ADDR_VAR 0 1
62466: PUSH
62467: DOUBLE
62468: LD_INT 1
62470: DEC
62471: ST_TO_ADDR
62472: LD_INT 6
62474: PUSH
62475: FOR_TO
62476: IFFALSE 62581
// begin uc_nation := nation_nature ;
62478: LD_ADDR_OWVAR 21
62482: PUSH
62483: LD_INT 0
62485: ST_TO_ADDR
// uc_side := 0 ;
62486: LD_ADDR_OWVAR 20
62490: PUSH
62491: LD_INT 0
62493: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62494: LD_ADDR_OWVAR 29
62498: PUSH
62499: LD_INT 12
62501: PUSH
62502: LD_INT 12
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: ST_TO_ADDR
// hc_agressivity := 20 ;
62509: LD_ADDR_OWVAR 35
62513: PUSH
62514: LD_INT 20
62516: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
62517: LD_ADDR_OWVAR 28
62521: PUSH
62522: LD_INT 17
62524: ST_TO_ADDR
// hc_gallery :=  ;
62525: LD_ADDR_OWVAR 33
62529: PUSH
62530: LD_STRING 
62532: ST_TO_ADDR
// hc_name :=  ;
62533: LD_ADDR_OWVAR 26
62537: PUSH
62538: LD_STRING 
62540: ST_TO_ADDR
// un := CreateHuman ;
62541: LD_ADDR_VAR 0 2
62545: PUSH
62546: CALL_OW 44
62550: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
62551: LD_VAR 0 2
62555: PPUSH
62556: LD_INT 1
62558: PPUSH
62559: CALL_OW 51
// tmp := tmp ^ un ;
62563: LD_ADDR_VAR 0 3
62567: PUSH
62568: LD_VAR 0 3
62572: PUSH
62573: LD_VAR 0 2
62577: ADD
62578: ST_TO_ADDR
// end ;
62579: GO 62475
62581: POP
62582: POP
// repeat wait ( 0 0$1 ) ;
62583: LD_INT 35
62585: PPUSH
62586: CALL_OW 67
// for un in tmp do
62590: LD_ADDR_VAR 0 2
62594: PUSH
62595: LD_VAR 0 3
62599: PUSH
62600: FOR_IN
62601: IFFALSE 62675
// begin if IsDead ( un ) then
62603: LD_VAR 0 2
62607: PPUSH
62608: CALL_OW 301
62612: IFFALSE 62632
// begin tmp := tmp diff un ;
62614: LD_ADDR_VAR 0 3
62618: PUSH
62619: LD_VAR 0 3
62623: PUSH
62624: LD_VAR 0 2
62628: DIFF
62629: ST_TO_ADDR
// continue ;
62630: GO 62600
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
62632: LD_VAR 0 2
62636: PPUSH
62637: LD_INT 3
62639: PUSH
62640: LD_INT 22
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PPUSH
62654: CALL_OW 69
62658: PPUSH
62659: LD_VAR 0 2
62663: PPUSH
62664: CALL_OW 74
62668: PPUSH
62669: CALL_OW 115
// end ;
62673: GO 62600
62675: POP
62676: POP
// until not tmp ;
62677: LD_VAR 0 3
62681: NOT
62682: IFFALSE 62583
// end ;
62684: PPOPN 3
62686: END
// every 0 0$1 trigger StreamModeActive and sTroll do
62687: LD_EXP 123
62691: PUSH
62692: LD_EXP 148
62696: AND
62697: IFFALSE 62751
62699: GO 62701
62701: DISABLE
// begin ToLua ( displayTroll(); ) ;
62702: LD_STRING displayTroll();
62704: PPUSH
62705: CALL_OW 559
// wait ( 3 3$00 ) ;
62709: LD_INT 6300
62711: PPUSH
62712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62716: LD_STRING hideTroll();
62718: PPUSH
62719: CALL_OW 559
// wait ( 1 1$00 ) ;
62723: LD_INT 2100
62725: PPUSH
62726: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62730: LD_STRING displayTroll();
62732: PPUSH
62733: CALL_OW 559
// wait ( 1 1$00 ) ;
62737: LD_INT 2100
62739: PPUSH
62740: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62744: LD_STRING hideTroll();
62746: PPUSH
62747: CALL_OW 559
// end ;
62751: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62752: LD_EXP 123
62756: PUSH
62757: LD_EXP 149
62761: AND
62762: IFFALSE 62825
62764: GO 62766
62766: DISABLE
62767: LD_INT 0
62769: PPUSH
// begin p := 0 ;
62770: LD_ADDR_VAR 0 1
62774: PUSH
62775: LD_INT 0
62777: ST_TO_ADDR
// repeat game_speed := 1 ;
62778: LD_ADDR_OWVAR 65
62782: PUSH
62783: LD_INT 1
62785: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62786: LD_INT 35
62788: PPUSH
62789: CALL_OW 67
// p := p + 1 ;
62793: LD_ADDR_VAR 0 1
62797: PUSH
62798: LD_VAR 0 1
62802: PUSH
62803: LD_INT 1
62805: PLUS
62806: ST_TO_ADDR
// until p >= 60 ;
62807: LD_VAR 0 1
62811: PUSH
62812: LD_INT 60
62814: GREATEREQUAL
62815: IFFALSE 62778
// game_speed := 4 ;
62817: LD_ADDR_OWVAR 65
62821: PUSH
62822: LD_INT 4
62824: ST_TO_ADDR
// end ;
62825: PPOPN 1
62827: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62828: LD_EXP 123
62832: PUSH
62833: LD_EXP 150
62837: AND
62838: IFFALSE 62984
62840: GO 62842
62842: DISABLE
62843: LD_INT 0
62845: PPUSH
62846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62847: LD_ADDR_VAR 0 1
62851: PUSH
62852: LD_INT 22
62854: PUSH
62855: LD_OWVAR 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: LD_INT 30
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 30
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PPUSH
62896: CALL_OW 69
62900: ST_TO_ADDR
// if not depot then
62901: LD_VAR 0 1
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62984
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_VAR 0 1
62919: PUSH
62920: LD_INT 1
62922: PPUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: CALL_OW 12
62932: ARRAY
62933: PPUSH
62934: CALL_OW 274
62938: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62939: LD_VAR 0 2
62943: PPUSH
62944: LD_INT 1
62946: PPUSH
62947: LD_INT 0
62949: PPUSH
62950: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62954: LD_VAR 0 2
62958: PPUSH
62959: LD_INT 2
62961: PPUSH
62962: LD_INT 0
62964: PPUSH
62965: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62969: LD_VAR 0 2
62973: PPUSH
62974: LD_INT 3
62976: PPUSH
62977: LD_INT 0
62979: PPUSH
62980: CALL_OW 277
// end ;
62984: PPOPN 2
62986: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62987: LD_EXP 123
62991: PUSH
62992: LD_EXP 151
62996: AND
62997: IFFALSE 63094
62999: GO 63001
63001: DISABLE
63002: LD_INT 0
63004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63005: LD_ADDR_VAR 0 1
63009: PUSH
63010: LD_INT 22
63012: PUSH
63013: LD_OWVAR 2
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 21
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: LD_INT 23
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: PPUSH
63054: CALL_OW 69
63058: ST_TO_ADDR
// if not tmp then
63059: LD_VAR 0 1
63063: NOT
63064: IFFALSE 63068
// exit ;
63066: GO 63094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
63068: LD_VAR 0 1
63072: PUSH
63073: LD_INT 1
63075: PPUSH
63076: LD_VAR 0 1
63080: PPUSH
63081: CALL_OW 12
63085: ARRAY
63086: PPUSH
63087: LD_INT 200
63089: PPUSH
63090: CALL_OW 234
// end ;
63094: PPOPN 1
63096: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
63097: LD_EXP 123
63101: PUSH
63102: LD_EXP 152
63106: AND
63107: IFFALSE 63186
63109: GO 63111
63111: DISABLE
63112: LD_INT 0
63114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
63115: LD_ADDR_VAR 0 1
63119: PUSH
63120: LD_INT 22
63122: PUSH
63123: LD_OWVAR 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 21
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PPUSH
63146: CALL_OW 69
63150: ST_TO_ADDR
// if not tmp then
63151: LD_VAR 0 1
63155: NOT
63156: IFFALSE 63160
// exit ;
63158: GO 63186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
63160: LD_VAR 0 1
63164: PUSH
63165: LD_INT 1
63167: PPUSH
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 12
63177: ARRAY
63178: PPUSH
63179: LD_INT 60
63181: PPUSH
63182: CALL_OW 234
// end ;
63186: PPOPN 1
63188: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
63189: LD_EXP 123
63193: PUSH
63194: LD_EXP 153
63198: AND
63199: IFFALSE 63298
63201: GO 63203
63203: DISABLE
63204: LD_INT 0
63206: PPUSH
63207: PPUSH
// begin enable ;
63208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
63209: LD_ADDR_VAR 0 1
63213: PUSH
63214: LD_INT 22
63216: PUSH
63217: LD_OWVAR 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 61
63228: PUSH
63229: EMPTY
63230: LIST
63231: PUSH
63232: LD_INT 33
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 69
63251: ST_TO_ADDR
// if not tmp then
63252: LD_VAR 0 1
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63298
// for i in tmp do
63261: LD_ADDR_VAR 0 2
63265: PUSH
63266: LD_VAR 0 1
63270: PUSH
63271: FOR_IN
63272: IFFALSE 63296
// if IsControledBy ( i ) then
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 312
63283: IFFALSE 63294
// ComUnlink ( i ) ;
63285: LD_VAR 0 2
63289: PPUSH
63290: CALL_OW 136
63294: GO 63271
63296: POP
63297: POP
// end ;
63298: PPOPN 2
63300: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
63301: LD_EXP 123
63305: PUSH
63306: LD_EXP 154
63310: AND
63311: IFFALSE 63451
63313: GO 63315
63315: DISABLE
63316: LD_INT 0
63318: PPUSH
63319: PPUSH
// begin ToLua ( displayPowell(); ) ;
63320: LD_STRING displayPowell();
63322: PPUSH
63323: CALL_OW 559
// uc_side := 0 ;
63327: LD_ADDR_OWVAR 20
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// uc_nation := 2 ;
63335: LD_ADDR_OWVAR 21
63339: PUSH
63340: LD_INT 2
63342: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
63343: LD_ADDR_OWVAR 37
63347: PUSH
63348: LD_INT 14
63350: ST_TO_ADDR
// vc_engine := engine_siberite ;
63351: LD_ADDR_OWVAR 39
63355: PUSH
63356: LD_INT 3
63358: ST_TO_ADDR
// vc_control := control_apeman ;
63359: LD_ADDR_OWVAR 38
63363: PUSH
63364: LD_INT 5
63366: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
63367: LD_ADDR_OWVAR 40
63371: PUSH
63372: LD_INT 29
63374: ST_TO_ADDR
// un := CreateVehicle ;
63375: LD_ADDR_VAR 0 2
63379: PUSH
63380: CALL_OW 45
63384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63385: LD_VAR 0 2
63389: PPUSH
63390: LD_INT 1
63392: PPUSH
63393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63397: LD_INT 35
63399: PPUSH
63400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63404: LD_VAR 0 2
63408: PPUSH
63409: LD_INT 22
63411: PUSH
63412: LD_OWVAR 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PPUSH
63421: CALL_OW 69
63425: PPUSH
63426: LD_VAR 0 2
63430: PPUSH
63431: CALL_OW 74
63435: PPUSH
63436: CALL_OW 115
// until IsDead ( un ) ;
63440: LD_VAR 0 2
63444: PPUSH
63445: CALL_OW 301
63449: IFFALSE 63397
// end ;
63451: PPOPN 2
63453: END
// every 0 0$1 trigger StreamModeActive and sStu do
63454: LD_EXP 123
63458: PUSH
63459: LD_EXP 162
63463: AND
63464: IFFALSE 63480
63466: GO 63468
63468: DISABLE
// begin ToLua ( displayStucuk(); ) ;
63469: LD_STRING displayStucuk();
63471: PPUSH
63472: CALL_OW 559
// ResetFog ;
63476: CALL_OW 335
// end ;
63480: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
63481: LD_EXP 123
63485: PUSH
63486: LD_EXP 155
63490: AND
63491: IFFALSE 63632
63493: GO 63495
63495: DISABLE
63496: LD_INT 0
63498: PPUSH
63499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63500: LD_ADDR_VAR 0 2
63504: PUSH
63505: LD_INT 22
63507: PUSH
63508: LD_OWVAR 2
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 21
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PPUSH
63531: CALL_OW 69
63535: ST_TO_ADDR
// if not tmp then
63536: LD_VAR 0 2
63540: NOT
63541: IFFALSE 63545
// exit ;
63543: GO 63632
// un := tmp [ rand ( 1 , tmp ) ] ;
63545: LD_ADDR_VAR 0 1
63549: PUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_INT 1
63557: PPUSH
63558: LD_VAR 0 2
63562: PPUSH
63563: CALL_OW 12
63567: ARRAY
63568: ST_TO_ADDR
// SetSide ( un , 0 ) ;
63569: LD_VAR 0 1
63573: PPUSH
63574: LD_INT 0
63576: PPUSH
63577: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
63581: LD_VAR 0 1
63585: PPUSH
63586: LD_OWVAR 3
63590: PUSH
63591: LD_VAR 0 1
63595: DIFF
63596: PPUSH
63597: LD_VAR 0 1
63601: PPUSH
63602: CALL_OW 74
63606: PPUSH
63607: CALL_OW 115
// wait ( 0 0$20 ) ;
63611: LD_INT 700
63613: PPUSH
63614: CALL_OW 67
// SetSide ( un , your_side ) ;
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_OWVAR 2
63627: PPUSH
63628: CALL_OW 235
// end ;
63632: PPOPN 2
63634: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
63635: LD_EXP 123
63639: PUSH
63640: LD_EXP 156
63644: AND
63645: IFFALSE 63751
63647: GO 63649
63649: DISABLE
63650: LD_INT 0
63652: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63653: LD_ADDR_VAR 0 1
63657: PUSH
63658: LD_INT 22
63660: PUSH
63661: LD_OWVAR 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: LD_INT 30
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 30
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PPUSH
63702: CALL_OW 69
63706: ST_TO_ADDR
// if not depot then
63707: LD_VAR 0 1
63711: NOT
63712: IFFALSE 63716
// exit ;
63714: GO 63751
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63716: LD_VAR 0 1
63720: PUSH
63721: LD_INT 1
63723: ARRAY
63724: PPUSH
63725: CALL_OW 250
63729: PPUSH
63730: LD_VAR 0 1
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PPUSH
63739: CALL_OW 251
63743: PPUSH
63744: LD_INT 70
63746: PPUSH
63747: CALL_OW 495
// end ;
63751: PPOPN 1
63753: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63754: LD_EXP 123
63758: PUSH
63759: LD_EXP 157
63763: AND
63764: IFFALSE 63975
63766: GO 63768
63768: DISABLE
63769: LD_INT 0
63771: PPUSH
63772: PPUSH
63773: PPUSH
63774: PPUSH
63775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: LD_INT 22
63783: PUSH
63784: LD_OWVAR 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 21
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PPUSH
63807: CALL_OW 69
63811: ST_TO_ADDR
// if not tmp then
63812: LD_VAR 0 5
63816: NOT
63817: IFFALSE 63821
// exit ;
63819: GO 63975
// for i in tmp do
63821: LD_ADDR_VAR 0 1
63825: PUSH
63826: LD_VAR 0 5
63830: PUSH
63831: FOR_IN
63832: IFFALSE 63973
// begin d := rand ( 0 , 5 ) ;
63834: LD_ADDR_VAR 0 4
63838: PUSH
63839: LD_INT 0
63841: PPUSH
63842: LD_INT 5
63844: PPUSH
63845: CALL_OW 12
63849: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63850: LD_ADDR_VAR 0 2
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 250
63864: PPUSH
63865: LD_VAR 0 4
63869: PPUSH
63870: LD_INT 3
63872: PPUSH
63873: LD_INT 12
63875: PPUSH
63876: CALL_OW 12
63880: PPUSH
63881: CALL_OW 272
63885: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63886: LD_ADDR_VAR 0 3
63890: PUSH
63891: LD_VAR 0 1
63895: PPUSH
63896: CALL_OW 251
63900: PPUSH
63901: LD_VAR 0 4
63905: PPUSH
63906: LD_INT 3
63908: PPUSH
63909: LD_INT 12
63911: PPUSH
63912: CALL_OW 12
63916: PPUSH
63917: CALL_OW 273
63921: ST_TO_ADDR
// if ValidHex ( x , y ) then
63922: LD_VAR 0 2
63926: PPUSH
63927: LD_VAR 0 3
63931: PPUSH
63932: CALL_OW 488
63936: IFFALSE 63971
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63938: LD_VAR 0 1
63942: PPUSH
63943: LD_VAR 0 2
63947: PPUSH
63948: LD_VAR 0 3
63952: PPUSH
63953: LD_INT 3
63955: PPUSH
63956: LD_INT 6
63958: PPUSH
63959: CALL_OW 12
63963: PPUSH
63964: LD_INT 1
63966: PPUSH
63967: CALL_OW 483
// end ;
63971: GO 63831
63973: POP
63974: POP
// end ;
63975: PPOPN 5
63977: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63978: LD_EXP 123
63982: PUSH
63983: LD_EXP 158
63987: AND
63988: IFFALSE 64082
63990: GO 63992
63992: DISABLE
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63997: LD_ADDR_VAR 0 2
64001: PUSH
64002: LD_INT 22
64004: PUSH
64005: LD_OWVAR 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 32
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 21
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: LIST
64038: PPUSH
64039: CALL_OW 69
64043: ST_TO_ADDR
// if not tmp then
64044: LD_VAR 0 2
64048: NOT
64049: IFFALSE 64053
// exit ;
64051: GO 64082
// for i in tmp do
64053: LD_ADDR_VAR 0 1
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: FOR_IN
64064: IFFALSE 64080
// SetFuel ( i , 0 ) ;
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_INT 0
64073: PPUSH
64074: CALL_OW 240
64078: GO 64063
64080: POP
64081: POP
// end ;
64082: PPOPN 2
64084: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
64085: LD_EXP 123
64089: PUSH
64090: LD_EXP 159
64094: AND
64095: IFFALSE 64161
64097: GO 64099
64099: DISABLE
64100: LD_INT 0
64102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64103: LD_ADDR_VAR 0 1
64107: PUSH
64108: LD_INT 22
64110: PUSH
64111: LD_OWVAR 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 30
64122: PUSH
64123: LD_INT 29
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PPUSH
64134: CALL_OW 69
64138: ST_TO_ADDR
// if not tmp then
64139: LD_VAR 0 1
64143: NOT
64144: IFFALSE 64148
// exit ;
64146: GO 64161
// DestroyUnit ( tmp [ 1 ] ) ;
64148: LD_VAR 0 1
64152: PUSH
64153: LD_INT 1
64155: ARRAY
64156: PPUSH
64157: CALL_OW 65
// end ;
64161: PPOPN 1
64163: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
64164: LD_EXP 123
64168: PUSH
64169: LD_EXP 161
64173: AND
64174: IFFALSE 64303
64176: GO 64178
64178: DISABLE
64179: LD_INT 0
64181: PPUSH
// begin uc_side := 0 ;
64182: LD_ADDR_OWVAR 20
64186: PUSH
64187: LD_INT 0
64189: ST_TO_ADDR
// uc_nation := nation_arabian ;
64190: LD_ADDR_OWVAR 21
64194: PUSH
64195: LD_INT 2
64197: ST_TO_ADDR
// hc_gallery :=  ;
64198: LD_ADDR_OWVAR 33
64202: PUSH
64203: LD_STRING 
64205: ST_TO_ADDR
// hc_name :=  ;
64206: LD_ADDR_OWVAR 26
64210: PUSH
64211: LD_STRING 
64213: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
64214: LD_INT 1
64216: PPUSH
64217: LD_INT 11
64219: PPUSH
64220: LD_INT 10
64222: PPUSH
64223: CALL_OW 380
// un := CreateHuman ;
64227: LD_ADDR_VAR 0 1
64231: PUSH
64232: CALL_OW 44
64236: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64237: LD_VAR 0 1
64241: PPUSH
64242: LD_INT 1
64244: PPUSH
64245: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64249: LD_INT 35
64251: PPUSH
64252: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64256: LD_VAR 0 1
64260: PPUSH
64261: LD_INT 22
64263: PUSH
64264: LD_OWVAR 2
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PPUSH
64273: CALL_OW 69
64277: PPUSH
64278: LD_VAR 0 1
64282: PPUSH
64283: CALL_OW 74
64287: PPUSH
64288: CALL_OW 115
// until IsDead ( un ) ;
64292: LD_VAR 0 1
64296: PPUSH
64297: CALL_OW 301
64301: IFFALSE 64249
// end ;
64303: PPOPN 1
64305: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
64306: LD_EXP 123
64310: PUSH
64311: LD_EXP 163
64315: AND
64316: IFFALSE 64328
64318: GO 64320
64320: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
64321: LD_STRING earthquake(getX(game), 0, 32)
64323: PPUSH
64324: CALL_OW 559
64328: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
64329: LD_EXP 123
64333: PUSH
64334: LD_EXP 164
64338: AND
64339: IFFALSE 64430
64341: GO 64343
64343: DISABLE
64344: LD_INT 0
64346: PPUSH
// begin enable ;
64347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
64348: LD_ADDR_VAR 0 1
64352: PUSH
64353: LD_INT 22
64355: PUSH
64356: LD_OWVAR 2
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 21
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 33
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: PPUSH
64390: CALL_OW 69
64394: ST_TO_ADDR
// if not tmp then
64395: LD_VAR 0 1
64399: NOT
64400: IFFALSE 64404
// exit ;
64402: GO 64430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64404: LD_VAR 0 1
64408: PUSH
64409: LD_INT 1
64411: PPUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 12
64421: ARRAY
64422: PPUSH
64423: LD_INT 1
64425: PPUSH
64426: CALL_OW 234
// end ;
64430: PPOPN 1
64432: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
64433: LD_EXP 123
64437: PUSH
64438: LD_EXP 165
64442: AND
64443: IFFALSE 64584
64445: GO 64447
64447: DISABLE
64448: LD_INT 0
64450: PPUSH
64451: PPUSH
64452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64453: LD_ADDR_VAR 0 3
64457: PUSH
64458: LD_INT 22
64460: PUSH
64461: LD_OWVAR 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 25
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PPUSH
64484: CALL_OW 69
64488: ST_TO_ADDR
// if not tmp then
64489: LD_VAR 0 3
64493: NOT
64494: IFFALSE 64498
// exit ;
64496: GO 64584
// un := tmp [ rand ( 1 , tmp ) ] ;
64498: LD_ADDR_VAR 0 2
64502: PUSH
64503: LD_VAR 0 3
64507: PUSH
64508: LD_INT 1
64510: PPUSH
64511: LD_VAR 0 3
64515: PPUSH
64516: CALL_OW 12
64520: ARRAY
64521: ST_TO_ADDR
// if Crawls ( un ) then
64522: LD_VAR 0 2
64526: PPUSH
64527: CALL_OW 318
64531: IFFALSE 64542
// ComWalk ( un ) ;
64533: LD_VAR 0 2
64537: PPUSH
64538: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
64542: LD_VAR 0 2
64546: PPUSH
64547: LD_INT 9
64549: PPUSH
64550: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
64554: LD_INT 28
64556: PPUSH
64557: LD_OWVAR 2
64561: PPUSH
64562: LD_INT 2
64564: PPUSH
64565: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
64569: LD_INT 29
64571: PPUSH
64572: LD_OWVAR 2
64576: PPUSH
64577: LD_INT 2
64579: PPUSH
64580: CALL_OW 322
// end ;
64584: PPOPN 3
64586: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
64587: LD_EXP 123
64591: PUSH
64592: LD_EXP 166
64596: AND
64597: IFFALSE 64708
64599: GO 64601
64601: DISABLE
64602: LD_INT 0
64604: PPUSH
64605: PPUSH
64606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64607: LD_ADDR_VAR 0 3
64611: PUSH
64612: LD_INT 22
64614: PUSH
64615: LD_OWVAR 2
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 25
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PPUSH
64638: CALL_OW 69
64642: ST_TO_ADDR
// if not tmp then
64643: LD_VAR 0 3
64647: NOT
64648: IFFALSE 64652
// exit ;
64650: GO 64708
// un := tmp [ rand ( 1 , tmp ) ] ;
64652: LD_ADDR_VAR 0 2
64656: PUSH
64657: LD_VAR 0 3
64661: PUSH
64662: LD_INT 1
64664: PPUSH
64665: LD_VAR 0 3
64669: PPUSH
64670: CALL_OW 12
64674: ARRAY
64675: ST_TO_ADDR
// if Crawls ( un ) then
64676: LD_VAR 0 2
64680: PPUSH
64681: CALL_OW 318
64685: IFFALSE 64696
// ComWalk ( un ) ;
64687: LD_VAR 0 2
64691: PPUSH
64692: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64696: LD_VAR 0 2
64700: PPUSH
64701: LD_INT 8
64703: PPUSH
64704: CALL_OW 336
// end ;
64708: PPOPN 3
64710: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
64711: LD_EXP 123
64715: PUSH
64716: LD_EXP 167
64720: AND
64721: IFFALSE 64865
64723: GO 64725
64725: DISABLE
64726: LD_INT 0
64728: PPUSH
64729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64730: LD_ADDR_VAR 0 2
64734: PUSH
64735: LD_INT 22
64737: PUSH
64738: LD_OWVAR 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 21
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 34
64762: PUSH
64763: LD_INT 12
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 34
64772: PUSH
64773: LD_INT 51
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 34
64782: PUSH
64783: LD_INT 32
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: PPUSH
64801: CALL_OW 69
64805: ST_TO_ADDR
// if not tmp then
64806: LD_VAR 0 2
64810: NOT
64811: IFFALSE 64815
// exit ;
64813: GO 64865
// for i in tmp do
64815: LD_ADDR_VAR 0 1
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: FOR_IN
64826: IFFALSE 64863
// if GetCargo ( i , mat_artifact ) = 0 then
64828: LD_VAR 0 1
64832: PPUSH
64833: LD_INT 4
64835: PPUSH
64836: CALL_OW 289
64840: PUSH
64841: LD_INT 0
64843: EQUAL
64844: IFFALSE 64861
// SetCargo ( i , mat_siberit , 100 ) ;
64846: LD_VAR 0 1
64850: PPUSH
64851: LD_INT 3
64853: PPUSH
64854: LD_INT 100
64856: PPUSH
64857: CALL_OW 290
64861: GO 64825
64863: POP
64864: POP
// end ;
64865: PPOPN 2
64867: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64868: LD_EXP 123
64872: PUSH
64873: LD_EXP 168
64877: AND
64878: IFFALSE 65061
64880: GO 64882
64882: DISABLE
64883: LD_INT 0
64885: PPUSH
64886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64887: LD_ADDR_VAR 0 2
64891: PUSH
64892: LD_INT 22
64894: PUSH
64895: LD_OWVAR 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PPUSH
64904: CALL_OW 69
64908: ST_TO_ADDR
// if not tmp then
64909: LD_VAR 0 2
64913: NOT
64914: IFFALSE 64918
// exit ;
64916: GO 65061
// for i := 1 to 2 do
64918: LD_ADDR_VAR 0 1
64922: PUSH
64923: DOUBLE
64924: LD_INT 1
64926: DEC
64927: ST_TO_ADDR
64928: LD_INT 2
64930: PUSH
64931: FOR_TO
64932: IFFALSE 65059
// begin uc_side := your_side ;
64934: LD_ADDR_OWVAR 20
64938: PUSH
64939: LD_OWVAR 2
64943: ST_TO_ADDR
// uc_nation := nation_american ;
64944: LD_ADDR_OWVAR 21
64948: PUSH
64949: LD_INT 1
64951: ST_TO_ADDR
// vc_chassis := us_morphling ;
64952: LD_ADDR_OWVAR 37
64956: PUSH
64957: LD_INT 5
64959: ST_TO_ADDR
// vc_engine := engine_siberite ;
64960: LD_ADDR_OWVAR 39
64964: PUSH
64965: LD_INT 3
64967: ST_TO_ADDR
// vc_control := control_computer ;
64968: LD_ADDR_OWVAR 38
64972: PUSH
64973: LD_INT 3
64975: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64976: LD_ADDR_OWVAR 40
64980: PUSH
64981: LD_INT 10
64983: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64984: LD_VAR 0 2
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PPUSH
64993: CALL_OW 310
64997: NOT
64998: IFFALSE 65045
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
65000: CALL_OW 45
65004: PPUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_INT 1
65012: ARRAY
65013: PPUSH
65014: CALL_OW 250
65018: PPUSH
65019: LD_VAR 0 2
65023: PUSH
65024: LD_INT 1
65026: ARRAY
65027: PPUSH
65028: CALL_OW 251
65032: PPUSH
65033: LD_INT 12
65035: PPUSH
65036: LD_INT 1
65038: PPUSH
65039: CALL_OW 50
65043: GO 65057
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
65045: CALL_OW 45
65049: PPUSH
65050: LD_INT 1
65052: PPUSH
65053: CALL_OW 51
// end ;
65057: GO 64931
65059: POP
65060: POP
// end ;
65061: PPOPN 2
65063: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
65064: LD_EXP 123
65068: PUSH
65069: LD_EXP 169
65073: AND
65074: IFFALSE 65296
65076: GO 65078
65078: DISABLE
65079: LD_INT 0
65081: PPUSH
65082: PPUSH
65083: PPUSH
65084: PPUSH
65085: PPUSH
65086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65087: LD_ADDR_VAR 0 6
65091: PUSH
65092: LD_INT 22
65094: PUSH
65095: LD_OWVAR 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 21
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: LD_INT 23
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: PPUSH
65136: CALL_OW 69
65140: ST_TO_ADDR
// if not tmp then
65141: LD_VAR 0 6
65145: NOT
65146: IFFALSE 65150
// exit ;
65148: GO 65296
// s1 := rand ( 1 , 4 ) ;
65150: LD_ADDR_VAR 0 2
65154: PUSH
65155: LD_INT 1
65157: PPUSH
65158: LD_INT 4
65160: PPUSH
65161: CALL_OW 12
65165: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
65166: LD_ADDR_VAR 0 4
65170: PUSH
65171: LD_VAR 0 6
65175: PUSH
65176: LD_INT 1
65178: ARRAY
65179: PPUSH
65180: LD_VAR 0 2
65184: PPUSH
65185: CALL_OW 259
65189: ST_TO_ADDR
// if s1 = 1 then
65190: LD_VAR 0 2
65194: PUSH
65195: LD_INT 1
65197: EQUAL
65198: IFFALSE 65218
// s2 := rand ( 2 , 4 ) else
65200: LD_ADDR_VAR 0 3
65204: PUSH
65205: LD_INT 2
65207: PPUSH
65208: LD_INT 4
65210: PPUSH
65211: CALL_OW 12
65215: ST_TO_ADDR
65216: GO 65226
// s2 := 1 ;
65218: LD_ADDR_VAR 0 3
65222: PUSH
65223: LD_INT 1
65225: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
65226: LD_ADDR_VAR 0 5
65230: PUSH
65231: LD_VAR 0 6
65235: PUSH
65236: LD_INT 1
65238: ARRAY
65239: PPUSH
65240: LD_VAR 0 3
65244: PPUSH
65245: CALL_OW 259
65249: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
65250: LD_VAR 0 6
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PPUSH
65259: LD_VAR 0 2
65263: PPUSH
65264: LD_VAR 0 5
65268: PPUSH
65269: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
65273: LD_VAR 0 6
65277: PUSH
65278: LD_INT 1
65280: ARRAY
65281: PPUSH
65282: LD_VAR 0 3
65286: PPUSH
65287: LD_VAR 0 4
65291: PPUSH
65292: CALL_OW 237
// end ;
65296: PPOPN 6
65298: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
65299: LD_EXP 123
65303: PUSH
65304: LD_EXP 170
65308: AND
65309: IFFALSE 65388
65311: GO 65313
65313: DISABLE
65314: LD_INT 0
65316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
65317: LD_ADDR_VAR 0 1
65321: PUSH
65322: LD_INT 22
65324: PUSH
65325: LD_OWVAR 2
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 30
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PPUSH
65348: CALL_OW 69
65352: ST_TO_ADDR
// if not tmp then
65353: LD_VAR 0 1
65357: NOT
65358: IFFALSE 65362
// exit ;
65360: GO 65388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65362: LD_VAR 0 1
65366: PUSH
65367: LD_INT 1
65369: PPUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 12
65379: ARRAY
65380: PPUSH
65381: LD_INT 1
65383: PPUSH
65384: CALL_OW 234
// end ;
65388: PPOPN 1
65390: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
65391: LD_EXP 123
65395: PUSH
65396: LD_EXP 171
65400: AND
65401: IFFALSE 65513
65403: GO 65405
65405: DISABLE
65406: LD_INT 0
65408: PPUSH
65409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: LD_INT 22
65417: PUSH
65418: LD_OWVAR 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: LD_INT 30
65432: PUSH
65433: LD_INT 27
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 30
65442: PUSH
65443: LD_INT 26
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 30
65452: PUSH
65453: LD_INT 28
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PPUSH
65470: CALL_OW 69
65474: ST_TO_ADDR
// if not tmp then
65475: LD_VAR 0 2
65479: NOT
65480: IFFALSE 65484
// exit ;
65482: GO 65513
// for i in tmp do
65484: LD_ADDR_VAR 0 1
65488: PUSH
65489: LD_VAR 0 2
65493: PUSH
65494: FOR_IN
65495: IFFALSE 65511
// SetLives ( i , 1 ) ;
65497: LD_VAR 0 1
65501: PPUSH
65502: LD_INT 1
65504: PPUSH
65505: CALL_OW 234
65509: GO 65494
65511: POP
65512: POP
// end ;
65513: PPOPN 2
65515: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
65516: LD_EXP 123
65520: PUSH
65521: LD_EXP 172
65525: AND
65526: IFFALSE 65813
65528: GO 65530
65530: DISABLE
65531: LD_INT 0
65533: PPUSH
65534: PPUSH
65535: PPUSH
// begin i := rand ( 1 , 7 ) ;
65536: LD_ADDR_VAR 0 1
65540: PUSH
65541: LD_INT 1
65543: PPUSH
65544: LD_INT 7
65546: PPUSH
65547: CALL_OW 12
65551: ST_TO_ADDR
// case i of 1 :
65552: LD_VAR 0 1
65556: PUSH
65557: LD_INT 1
65559: DOUBLE
65560: EQUAL
65561: IFTRUE 65565
65563: GO 65575
65565: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
65566: LD_STRING earthquake(getX(game), 0, 32)
65568: PPUSH
65569: CALL_OW 559
65573: GO 65813
65575: LD_INT 2
65577: DOUBLE
65578: EQUAL
65579: IFTRUE 65583
65581: GO 65597
65583: POP
// begin ToLua ( displayStucuk(); ) ;
65584: LD_STRING displayStucuk();
65586: PPUSH
65587: CALL_OW 559
// ResetFog ;
65591: CALL_OW 335
// end ; 3 :
65595: GO 65813
65597: LD_INT 3
65599: DOUBLE
65600: EQUAL
65601: IFTRUE 65605
65603: GO 65709
65605: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65606: LD_ADDR_VAR 0 2
65610: PUSH
65611: LD_INT 22
65613: PUSH
65614: LD_OWVAR 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 25
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PPUSH
65637: CALL_OW 69
65641: ST_TO_ADDR
// if not tmp then
65642: LD_VAR 0 2
65646: NOT
65647: IFFALSE 65651
// exit ;
65649: GO 65813
// un := tmp [ rand ( 1 , tmp ) ] ;
65651: LD_ADDR_VAR 0 3
65655: PUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_INT 1
65663: PPUSH
65664: LD_VAR 0 2
65668: PPUSH
65669: CALL_OW 12
65673: ARRAY
65674: ST_TO_ADDR
// if Crawls ( un ) then
65675: LD_VAR 0 3
65679: PPUSH
65680: CALL_OW 318
65684: IFFALSE 65695
// ComWalk ( un ) ;
65686: LD_VAR 0 3
65690: PPUSH
65691: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65695: LD_VAR 0 3
65699: PPUSH
65700: LD_INT 8
65702: PPUSH
65703: CALL_OW 336
// end ; 4 :
65707: GO 65813
65709: LD_INT 4
65711: DOUBLE
65712: EQUAL
65713: IFTRUE 65717
65715: GO 65791
65717: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65718: LD_ADDR_VAR 0 2
65722: PUSH
65723: LD_INT 22
65725: PUSH
65726: LD_OWVAR 2
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 30
65737: PUSH
65738: LD_INT 29
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PPUSH
65749: CALL_OW 69
65753: ST_TO_ADDR
// if not tmp then
65754: LD_VAR 0 2
65758: NOT
65759: IFFALSE 65763
// exit ;
65761: GO 65813
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65763: LD_VAR 0 2
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PPUSH
65772: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65776: LD_VAR 0 2
65780: PUSH
65781: LD_INT 1
65783: ARRAY
65784: PPUSH
65785: CALL_OW 65
// end ; 5 .. 7 :
65789: GO 65813
65791: LD_INT 5
65793: DOUBLE
65794: GREATEREQUAL
65795: IFFALSE 65803
65797: LD_INT 7
65799: DOUBLE
65800: LESSEQUAL
65801: IFTRUE 65805
65803: GO 65812
65805: POP
// StreamSibBomb ; end ;
65806: CALL 62050 0 0
65810: GO 65813
65812: POP
// end ;
65813: PPOPN 3
65815: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65816: LD_EXP 123
65820: PUSH
65821: LD_EXP 173
65825: AND
65826: IFFALSE 65982
65828: GO 65830
65830: DISABLE
65831: LD_INT 0
65833: PPUSH
65834: PPUSH
65835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65836: LD_ADDR_VAR 0 2
65840: PUSH
65841: LD_INT 81
65843: PUSH
65844: LD_OWVAR 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: LD_INT 21
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 21
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: LIST
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PPUSH
65885: CALL_OW 69
65889: ST_TO_ADDR
// if not tmp then
65890: LD_VAR 0 2
65894: NOT
65895: IFFALSE 65899
// exit ;
65897: GO 65982
// p := 0 ;
65899: LD_ADDR_VAR 0 3
65903: PUSH
65904: LD_INT 0
65906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65907: LD_INT 35
65909: PPUSH
65910: CALL_OW 67
// p := p + 1 ;
65914: LD_ADDR_VAR 0 3
65918: PUSH
65919: LD_VAR 0 3
65923: PUSH
65924: LD_INT 1
65926: PLUS
65927: ST_TO_ADDR
// for i in tmp do
65928: LD_ADDR_VAR 0 1
65932: PUSH
65933: LD_VAR 0 2
65937: PUSH
65938: FOR_IN
65939: IFFALSE 65970
// if GetLives ( i ) < 1000 then
65941: LD_VAR 0 1
65945: PPUSH
65946: CALL_OW 256
65950: PUSH
65951: LD_INT 1000
65953: LESS
65954: IFFALSE 65968
// SetLives ( i , 1000 ) ;
65956: LD_VAR 0 1
65960: PPUSH
65961: LD_INT 1000
65963: PPUSH
65964: CALL_OW 234
65968: GO 65938
65970: POP
65971: POP
// until p > 20 ;
65972: LD_VAR 0 3
65976: PUSH
65977: LD_INT 20
65979: GREATER
65980: IFFALSE 65907
// end ;
65982: PPOPN 3
65984: END
// every 0 0$1 trigger StreamModeActive and sTime do
65985: LD_EXP 123
65989: PUSH
65990: LD_EXP 174
65994: AND
65995: IFFALSE 66030
65997: GO 65999
65999: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
66000: LD_INT 28
66002: PPUSH
66003: LD_OWVAR 2
66007: PPUSH
66008: LD_INT 2
66010: PPUSH
66011: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
66015: LD_INT 30
66017: PPUSH
66018: LD_OWVAR 2
66022: PPUSH
66023: LD_INT 2
66025: PPUSH
66026: CALL_OW 322
// end ;
66030: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
66031: LD_EXP 123
66035: PUSH
66036: LD_EXP 175
66040: AND
66041: IFFALSE 66162
66043: GO 66045
66045: DISABLE
66046: LD_INT 0
66048: PPUSH
66049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66050: LD_ADDR_VAR 0 2
66054: PUSH
66055: LD_INT 22
66057: PUSH
66058: LD_OWVAR 2
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 21
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: PUSH
66080: LD_INT 23
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: PPUSH
66099: CALL_OW 69
66103: ST_TO_ADDR
// if not tmp then
66104: LD_VAR 0 2
66108: NOT
66109: IFFALSE 66113
// exit ;
66111: GO 66162
// for i in tmp do
66113: LD_ADDR_VAR 0 1
66117: PUSH
66118: LD_VAR 0 2
66122: PUSH
66123: FOR_IN
66124: IFFALSE 66160
// begin if Crawls ( i ) then
66126: LD_VAR 0 1
66130: PPUSH
66131: CALL_OW 318
66135: IFFALSE 66146
// ComWalk ( i ) ;
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 138
// SetClass ( i , 2 ) ;
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_INT 2
66153: PPUSH
66154: CALL_OW 336
// end ;
66158: GO 66123
66160: POP
66161: POP
// end ;
66162: PPOPN 2
66164: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
66165: LD_EXP 123
66169: PUSH
66170: LD_EXP 176
66174: AND
66175: IFFALSE 66463
66177: GO 66179
66179: DISABLE
66180: LD_INT 0
66182: PPUSH
66183: PPUSH
66184: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
66185: LD_OWVAR 2
66189: PPUSH
66190: LD_INT 9
66192: PPUSH
66193: LD_INT 1
66195: PPUSH
66196: LD_INT 1
66198: PPUSH
66199: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
66203: LD_INT 9
66205: PPUSH
66206: LD_OWVAR 2
66210: PPUSH
66211: CALL_OW 343
// uc_side := 9 ;
66215: LD_ADDR_OWVAR 20
66219: PUSH
66220: LD_INT 9
66222: ST_TO_ADDR
// uc_nation := 2 ;
66223: LD_ADDR_OWVAR 21
66227: PUSH
66228: LD_INT 2
66230: ST_TO_ADDR
// hc_name := Dark Warrior ;
66231: LD_ADDR_OWVAR 26
66235: PUSH
66236: LD_STRING Dark Warrior
66238: ST_TO_ADDR
// hc_gallery :=  ;
66239: LD_ADDR_OWVAR 33
66243: PUSH
66244: LD_STRING 
66246: ST_TO_ADDR
// hc_noskilllimit := true ;
66247: LD_ADDR_OWVAR 76
66251: PUSH
66252: LD_INT 1
66254: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
66255: LD_ADDR_OWVAR 31
66259: PUSH
66260: LD_INT 30
66262: PUSH
66263: LD_INT 30
66265: PUSH
66266: LD_INT 30
66268: PUSH
66269: LD_INT 30
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// un := CreateHuman ;
66278: LD_ADDR_VAR 0 3
66282: PUSH
66283: CALL_OW 44
66287: ST_TO_ADDR
// hc_noskilllimit := false ;
66288: LD_ADDR_OWVAR 76
66292: PUSH
66293: LD_INT 0
66295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66296: LD_VAR 0 3
66300: PPUSH
66301: LD_INT 1
66303: PPUSH
66304: CALL_OW 51
// ToLua ( playRanger() ) ;
66308: LD_STRING playRanger()
66310: PPUSH
66311: CALL_OW 559
// p := 0 ;
66315: LD_ADDR_VAR 0 2
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
66323: LD_INT 35
66325: PPUSH
66326: CALL_OW 67
// p := p + 1 ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 1
66342: PLUS
66343: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
66344: LD_VAR 0 3
66348: PPUSH
66349: CALL_OW 256
66353: PUSH
66354: LD_INT 1000
66356: LESS
66357: IFFALSE 66371
// SetLives ( un , 1000 ) ;
66359: LD_VAR 0 3
66363: PPUSH
66364: LD_INT 1000
66366: PPUSH
66367: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
66371: LD_VAR 0 3
66375: PPUSH
66376: LD_INT 81
66378: PUSH
66379: LD_OWVAR 2
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 91
66390: PUSH
66391: LD_VAR 0 3
66395: PUSH
66396: LD_INT 30
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: LIST
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PPUSH
66408: CALL_OW 69
66412: PPUSH
66413: LD_VAR 0 3
66417: PPUSH
66418: CALL_OW 74
66422: PPUSH
66423: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
66427: LD_VAR 0 2
66431: PUSH
66432: LD_INT 80
66434: GREATER
66435: PUSH
66436: LD_VAR 0 3
66440: PPUSH
66441: CALL_OW 301
66445: OR
66446: IFFALSE 66323
// if un then
66448: LD_VAR 0 3
66452: IFFALSE 66463
// RemoveUnit ( un ) ;
66454: LD_VAR 0 3
66458: PPUSH
66459: CALL_OW 64
// end ;
66463: PPOPN 3
66465: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
66466: LD_EXP 177
66470: IFFALSE 66586
66472: GO 66474
66474: DISABLE
66475: LD_INT 0
66477: PPUSH
66478: PPUSH
66479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66480: LD_ADDR_VAR 0 2
66484: PUSH
66485: LD_INT 81
66487: PUSH
66488: LD_OWVAR 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 21
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PPUSH
66511: CALL_OW 69
66515: ST_TO_ADDR
// ToLua ( playComputer() ) ;
66516: LD_STRING playComputer()
66518: PPUSH
66519: CALL_OW 559
// if not tmp then
66523: LD_VAR 0 2
66527: NOT
66528: IFFALSE 66532
// exit ;
66530: GO 66586
// for i in tmp do
66532: LD_ADDR_VAR 0 1
66536: PUSH
66537: LD_VAR 0 2
66541: PUSH
66542: FOR_IN
66543: IFFALSE 66584
// for j := 1 to 4 do
66545: LD_ADDR_VAR 0 3
66549: PUSH
66550: DOUBLE
66551: LD_INT 1
66553: DEC
66554: ST_TO_ADDR
66555: LD_INT 4
66557: PUSH
66558: FOR_TO
66559: IFFALSE 66580
// SetSkill ( i , j , 10 ) ;
66561: LD_VAR 0 1
66565: PPUSH
66566: LD_VAR 0 3
66570: PPUSH
66571: LD_INT 10
66573: PPUSH
66574: CALL_OW 237
66578: GO 66558
66580: POP
66581: POP
66582: GO 66542
66584: POP
66585: POP
// end ;
66586: PPOPN 3
66588: END
// every 0 0$1 trigger s30 do var i , tmp ;
66589: LD_EXP 178
66593: IFFALSE 66662
66595: GO 66597
66597: DISABLE
66598: LD_INT 0
66600: PPUSH
66601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66602: LD_ADDR_VAR 0 2
66606: PUSH
66607: LD_INT 22
66609: PUSH
66610: LD_OWVAR 2
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PPUSH
66619: CALL_OW 69
66623: ST_TO_ADDR
// if not tmp then
66624: LD_VAR 0 2
66628: NOT
66629: IFFALSE 66633
// exit ;
66631: GO 66662
// for i in tmp do
66633: LD_ADDR_VAR 0 1
66637: PUSH
66638: LD_VAR 0 2
66642: PUSH
66643: FOR_IN
66644: IFFALSE 66660
// SetLives ( i , 300 ) ;
66646: LD_VAR 0 1
66650: PPUSH
66651: LD_INT 300
66653: PPUSH
66654: CALL_OW 234
66658: GO 66643
66660: POP
66661: POP
// end ;
66662: PPOPN 2
66664: END
// every 0 0$1 trigger s60 do var i , tmp ;
66665: LD_EXP 179
66669: IFFALSE 66738
66671: GO 66673
66673: DISABLE
66674: LD_INT 0
66676: PPUSH
66677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66678: LD_ADDR_VAR 0 2
66682: PUSH
66683: LD_INT 22
66685: PUSH
66686: LD_OWVAR 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PPUSH
66695: CALL_OW 69
66699: ST_TO_ADDR
// if not tmp then
66700: LD_VAR 0 2
66704: NOT
66705: IFFALSE 66709
// exit ;
66707: GO 66738
// for i in tmp do
66709: LD_ADDR_VAR 0 1
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: FOR_IN
66720: IFFALSE 66736
// SetLives ( i , 600 ) ;
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_INT 600
66729: PPUSH
66730: CALL_OW 234
66734: GO 66719
66736: POP
66737: POP
// end ;
66738: PPOPN 2
66740: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66741: LD_INT 0
66743: PPUSH
// case cmd of 301 :
66744: LD_VAR 0 1
66748: PUSH
66749: LD_INT 301
66751: DOUBLE
66752: EQUAL
66753: IFTRUE 66757
66755: GO 66789
66757: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66758: LD_VAR 0 6
66762: PPUSH
66763: LD_VAR 0 7
66767: PPUSH
66768: LD_VAR 0 8
66772: PPUSH
66773: LD_VAR 0 4
66777: PPUSH
66778: LD_VAR 0 5
66782: PPUSH
66783: CALL 67990 0 5
66787: GO 66910
66789: LD_INT 302
66791: DOUBLE
66792: EQUAL
66793: IFTRUE 66797
66795: GO 66834
66797: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66798: LD_VAR 0 6
66802: PPUSH
66803: LD_VAR 0 7
66807: PPUSH
66808: LD_VAR 0 8
66812: PPUSH
66813: LD_VAR 0 9
66817: PPUSH
66818: LD_VAR 0 4
66822: PPUSH
66823: LD_VAR 0 5
66827: PPUSH
66828: CALL 68081 0 6
66832: GO 66910
66834: LD_INT 303
66836: DOUBLE
66837: EQUAL
66838: IFTRUE 66842
66840: GO 66879
66842: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66843: LD_VAR 0 6
66847: PPUSH
66848: LD_VAR 0 7
66852: PPUSH
66853: LD_VAR 0 8
66857: PPUSH
66858: LD_VAR 0 9
66862: PPUSH
66863: LD_VAR 0 4
66867: PPUSH
66868: LD_VAR 0 5
66872: PPUSH
66873: CALL 66915 0 6
66877: GO 66910
66879: LD_INT 304
66881: DOUBLE
66882: EQUAL
66883: IFTRUE 66887
66885: GO 66909
66887: POP
// hHackTeleport ( unit , x , y ) ; end ;
66888: LD_VAR 0 2
66892: PPUSH
66893: LD_VAR 0 4
66897: PPUSH
66898: LD_VAR 0 5
66902: PPUSH
66903: CALL 68674 0 3
66907: GO 66910
66909: POP
// end ;
66910: LD_VAR 0 12
66914: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66915: LD_INT 0
66917: PPUSH
66918: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66919: LD_VAR 0 1
66923: PUSH
66924: LD_INT 1
66926: LESS
66927: PUSH
66928: LD_VAR 0 1
66932: PUSH
66933: LD_INT 3
66935: GREATER
66936: OR
66937: PUSH
66938: LD_VAR 0 5
66942: PPUSH
66943: LD_VAR 0 6
66947: PPUSH
66948: CALL_OW 428
66952: OR
66953: IFFALSE 66957
// exit ;
66955: GO 67677
// uc_side := your_side ;
66957: LD_ADDR_OWVAR 20
66961: PUSH
66962: LD_OWVAR 2
66966: ST_TO_ADDR
// uc_nation := nation ;
66967: LD_ADDR_OWVAR 21
66971: PUSH
66972: LD_VAR 0 1
66976: ST_TO_ADDR
// bc_level = 1 ;
66977: LD_ADDR_OWVAR 43
66981: PUSH
66982: LD_INT 1
66984: ST_TO_ADDR
// case btype of 1 :
66985: LD_VAR 0 2
66989: PUSH
66990: LD_INT 1
66992: DOUBLE
66993: EQUAL
66994: IFTRUE 66998
66996: GO 67009
66998: POP
// bc_type := b_depot ; 2 :
66999: LD_ADDR_OWVAR 42
67003: PUSH
67004: LD_INT 0
67006: ST_TO_ADDR
67007: GO 67621
67009: LD_INT 2
67011: DOUBLE
67012: EQUAL
67013: IFTRUE 67017
67015: GO 67028
67017: POP
// bc_type := b_warehouse ; 3 :
67018: LD_ADDR_OWVAR 42
67022: PUSH
67023: LD_INT 1
67025: ST_TO_ADDR
67026: GO 67621
67028: LD_INT 3
67030: DOUBLE
67031: EQUAL
67032: IFTRUE 67036
67034: GO 67047
67036: POP
// bc_type := b_lab ; 4 .. 9 :
67037: LD_ADDR_OWVAR 42
67041: PUSH
67042: LD_INT 6
67044: ST_TO_ADDR
67045: GO 67621
67047: LD_INT 4
67049: DOUBLE
67050: GREATEREQUAL
67051: IFFALSE 67059
67053: LD_INT 9
67055: DOUBLE
67056: LESSEQUAL
67057: IFTRUE 67061
67059: GO 67113
67061: POP
// begin bc_type := b_lab_half ;
67062: LD_ADDR_OWVAR 42
67066: PUSH
67067: LD_INT 7
67069: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
67070: LD_ADDR_OWVAR 44
67074: PUSH
67075: LD_INT 10
67077: PUSH
67078: LD_INT 11
67080: PUSH
67081: LD_INT 12
67083: PUSH
67084: LD_INT 15
67086: PUSH
67087: LD_INT 14
67089: PUSH
67090: LD_INT 13
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: PUSH
67101: LD_VAR 0 2
67105: PUSH
67106: LD_INT 3
67108: MINUS
67109: ARRAY
67110: ST_TO_ADDR
// end ; 10 .. 13 :
67111: GO 67621
67113: LD_INT 10
67115: DOUBLE
67116: GREATEREQUAL
67117: IFFALSE 67125
67119: LD_INT 13
67121: DOUBLE
67122: LESSEQUAL
67123: IFTRUE 67127
67125: GO 67204
67127: POP
// begin bc_type := b_lab_full ;
67128: LD_ADDR_OWVAR 42
67132: PUSH
67133: LD_INT 8
67135: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
67136: LD_ADDR_OWVAR 44
67140: PUSH
67141: LD_INT 10
67143: PUSH
67144: LD_INT 12
67146: PUSH
67147: LD_INT 14
67149: PUSH
67150: LD_INT 13
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: PUSH
67159: LD_VAR 0 2
67163: PUSH
67164: LD_INT 9
67166: MINUS
67167: ARRAY
67168: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
67169: LD_ADDR_OWVAR 45
67173: PUSH
67174: LD_INT 11
67176: PUSH
67177: LD_INT 15
67179: PUSH
67180: LD_INT 12
67182: PUSH
67183: LD_INT 15
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: PUSH
67192: LD_VAR 0 2
67196: PUSH
67197: LD_INT 9
67199: MINUS
67200: ARRAY
67201: ST_TO_ADDR
// end ; 14 :
67202: GO 67621
67204: LD_INT 14
67206: DOUBLE
67207: EQUAL
67208: IFTRUE 67212
67210: GO 67223
67212: POP
// bc_type := b_workshop ; 15 :
67213: LD_ADDR_OWVAR 42
67217: PUSH
67218: LD_INT 2
67220: ST_TO_ADDR
67221: GO 67621
67223: LD_INT 15
67225: DOUBLE
67226: EQUAL
67227: IFTRUE 67231
67229: GO 67242
67231: POP
// bc_type := b_factory ; 16 :
67232: LD_ADDR_OWVAR 42
67236: PUSH
67237: LD_INT 3
67239: ST_TO_ADDR
67240: GO 67621
67242: LD_INT 16
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67250
67248: GO 67261
67250: POP
// bc_type := b_ext_gun ; 17 :
67251: LD_ADDR_OWVAR 42
67255: PUSH
67256: LD_INT 17
67258: ST_TO_ADDR
67259: GO 67621
67261: LD_INT 17
67263: DOUBLE
67264: EQUAL
67265: IFTRUE 67269
67267: GO 67297
67269: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
67270: LD_ADDR_OWVAR 42
67274: PUSH
67275: LD_INT 19
67277: PUSH
67278: LD_INT 23
67280: PUSH
67281: LD_INT 19
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: PUSH
67289: LD_VAR 0 1
67293: ARRAY
67294: ST_TO_ADDR
67295: GO 67621
67297: LD_INT 18
67299: DOUBLE
67300: EQUAL
67301: IFTRUE 67305
67303: GO 67316
67305: POP
// bc_type := b_ext_radar ; 19 :
67306: LD_ADDR_OWVAR 42
67310: PUSH
67311: LD_INT 20
67313: ST_TO_ADDR
67314: GO 67621
67316: LD_INT 19
67318: DOUBLE
67319: EQUAL
67320: IFTRUE 67324
67322: GO 67335
67324: POP
// bc_type := b_ext_radio ; 20 :
67325: LD_ADDR_OWVAR 42
67329: PUSH
67330: LD_INT 22
67332: ST_TO_ADDR
67333: GO 67621
67335: LD_INT 20
67337: DOUBLE
67338: EQUAL
67339: IFTRUE 67343
67341: GO 67354
67343: POP
// bc_type := b_ext_siberium ; 21 :
67344: LD_ADDR_OWVAR 42
67348: PUSH
67349: LD_INT 21
67351: ST_TO_ADDR
67352: GO 67621
67354: LD_INT 21
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67362
67360: GO 67373
67362: POP
// bc_type := b_ext_computer ; 22 :
67363: LD_ADDR_OWVAR 42
67367: PUSH
67368: LD_INT 24
67370: ST_TO_ADDR
67371: GO 67621
67373: LD_INT 22
67375: DOUBLE
67376: EQUAL
67377: IFTRUE 67381
67379: GO 67392
67381: POP
// bc_type := b_ext_track ; 23 :
67382: LD_ADDR_OWVAR 42
67386: PUSH
67387: LD_INT 16
67389: ST_TO_ADDR
67390: GO 67621
67392: LD_INT 23
67394: DOUBLE
67395: EQUAL
67396: IFTRUE 67400
67398: GO 67411
67400: POP
// bc_type := b_ext_laser ; 24 :
67401: LD_ADDR_OWVAR 42
67405: PUSH
67406: LD_INT 25
67408: ST_TO_ADDR
67409: GO 67621
67411: LD_INT 24
67413: DOUBLE
67414: EQUAL
67415: IFTRUE 67419
67417: GO 67430
67419: POP
// bc_type := b_control_tower ; 25 :
67420: LD_ADDR_OWVAR 42
67424: PUSH
67425: LD_INT 36
67427: ST_TO_ADDR
67428: GO 67621
67430: LD_INT 25
67432: DOUBLE
67433: EQUAL
67434: IFTRUE 67438
67436: GO 67449
67438: POP
// bc_type := b_breastwork ; 26 :
67439: LD_ADDR_OWVAR 42
67443: PUSH
67444: LD_INT 31
67446: ST_TO_ADDR
67447: GO 67621
67449: LD_INT 26
67451: DOUBLE
67452: EQUAL
67453: IFTRUE 67457
67455: GO 67468
67457: POP
// bc_type := b_bunker ; 27 :
67458: LD_ADDR_OWVAR 42
67462: PUSH
67463: LD_INT 32
67465: ST_TO_ADDR
67466: GO 67621
67468: LD_INT 27
67470: DOUBLE
67471: EQUAL
67472: IFTRUE 67476
67474: GO 67487
67476: POP
// bc_type := b_turret ; 28 :
67477: LD_ADDR_OWVAR 42
67481: PUSH
67482: LD_INT 33
67484: ST_TO_ADDR
67485: GO 67621
67487: LD_INT 28
67489: DOUBLE
67490: EQUAL
67491: IFTRUE 67495
67493: GO 67506
67495: POP
// bc_type := b_armoury ; 29 :
67496: LD_ADDR_OWVAR 42
67500: PUSH
67501: LD_INT 4
67503: ST_TO_ADDR
67504: GO 67621
67506: LD_INT 29
67508: DOUBLE
67509: EQUAL
67510: IFTRUE 67514
67512: GO 67525
67514: POP
// bc_type := b_barracks ; 30 :
67515: LD_ADDR_OWVAR 42
67519: PUSH
67520: LD_INT 5
67522: ST_TO_ADDR
67523: GO 67621
67525: LD_INT 30
67527: DOUBLE
67528: EQUAL
67529: IFTRUE 67533
67531: GO 67544
67533: POP
// bc_type := b_solar_power ; 31 :
67534: LD_ADDR_OWVAR 42
67538: PUSH
67539: LD_INT 27
67541: ST_TO_ADDR
67542: GO 67621
67544: LD_INT 31
67546: DOUBLE
67547: EQUAL
67548: IFTRUE 67552
67550: GO 67563
67552: POP
// bc_type := b_oil_power ; 32 :
67553: LD_ADDR_OWVAR 42
67557: PUSH
67558: LD_INT 26
67560: ST_TO_ADDR
67561: GO 67621
67563: LD_INT 32
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67571
67569: GO 67582
67571: POP
// bc_type := b_siberite_power ; 33 :
67572: LD_ADDR_OWVAR 42
67576: PUSH
67577: LD_INT 28
67579: ST_TO_ADDR
67580: GO 67621
67582: LD_INT 33
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67590
67588: GO 67601
67590: POP
// bc_type := b_oil_mine ; 34 :
67591: LD_ADDR_OWVAR 42
67595: PUSH
67596: LD_INT 29
67598: ST_TO_ADDR
67599: GO 67621
67601: LD_INT 34
67603: DOUBLE
67604: EQUAL
67605: IFTRUE 67609
67607: GO 67620
67609: POP
// bc_type := b_siberite_mine ; end ;
67610: LD_ADDR_OWVAR 42
67614: PUSH
67615: LD_INT 30
67617: ST_TO_ADDR
67618: GO 67621
67620: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
67621: LD_ADDR_VAR 0 8
67625: PUSH
67626: LD_VAR 0 5
67630: PPUSH
67631: LD_VAR 0 6
67635: PPUSH
67636: LD_VAR 0 3
67640: PPUSH
67641: CALL_OW 47
67645: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
67646: LD_OWVAR 42
67650: PUSH
67651: LD_INT 32
67653: PUSH
67654: LD_INT 33
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: IN
67661: IFFALSE 67677
// PlaceWeaponTurret ( b , weapon ) ;
67663: LD_VAR 0 8
67667: PPUSH
67668: LD_VAR 0 4
67672: PPUSH
67673: CALL_OW 431
// end ;
67677: LD_VAR 0 7
67681: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
67682: LD_INT 0
67684: PPUSH
67685: PPUSH
67686: PPUSH
67687: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67688: LD_ADDR_VAR 0 4
67692: PUSH
67693: LD_INT 22
67695: PUSH
67696: LD_OWVAR 2
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: LD_INT 30
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 30
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PPUSH
67737: CALL_OW 69
67741: ST_TO_ADDR
// if not tmp then
67742: LD_VAR 0 4
67746: NOT
67747: IFFALSE 67751
// exit ;
67749: GO 67810
// for i in tmp do
67751: LD_ADDR_VAR 0 2
67755: PUSH
67756: LD_VAR 0 4
67760: PUSH
67761: FOR_IN
67762: IFFALSE 67808
// for j = 1 to 3 do
67764: LD_ADDR_VAR 0 3
67768: PUSH
67769: DOUBLE
67770: LD_INT 1
67772: DEC
67773: ST_TO_ADDR
67774: LD_INT 3
67776: PUSH
67777: FOR_TO
67778: IFFALSE 67804
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67780: LD_VAR 0 2
67784: PPUSH
67785: CALL_OW 274
67789: PPUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: LD_INT 99999
67797: PPUSH
67798: CALL_OW 277
67802: GO 67777
67804: POP
67805: POP
67806: GO 67761
67808: POP
67809: POP
// end ;
67810: LD_VAR 0 1
67814: RET
// export function hHackSetLevel10 ; var i , j ; begin
67815: LD_INT 0
67817: PPUSH
67818: PPUSH
67819: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67820: LD_ADDR_VAR 0 2
67824: PUSH
67825: LD_INT 21
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PPUSH
67835: CALL_OW 69
67839: PUSH
67840: FOR_IN
67841: IFFALSE 67893
// if IsSelected ( i ) then
67843: LD_VAR 0 2
67847: PPUSH
67848: CALL_OW 306
67852: IFFALSE 67891
// begin for j := 1 to 4 do
67854: LD_ADDR_VAR 0 3
67858: PUSH
67859: DOUBLE
67860: LD_INT 1
67862: DEC
67863: ST_TO_ADDR
67864: LD_INT 4
67866: PUSH
67867: FOR_TO
67868: IFFALSE 67889
// SetSkill ( i , j , 10 ) ;
67870: LD_VAR 0 2
67874: PPUSH
67875: LD_VAR 0 3
67879: PPUSH
67880: LD_INT 10
67882: PPUSH
67883: CALL_OW 237
67887: GO 67867
67889: POP
67890: POP
// end ;
67891: GO 67840
67893: POP
67894: POP
// end ;
67895: LD_VAR 0 1
67899: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67900: LD_INT 0
67902: PPUSH
67903: PPUSH
67904: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67905: LD_ADDR_VAR 0 2
67909: PUSH
67910: LD_INT 22
67912: PUSH
67913: LD_OWVAR 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 21
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PPUSH
67936: CALL_OW 69
67940: PUSH
67941: FOR_IN
67942: IFFALSE 67983
// begin for j := 1 to 4 do
67944: LD_ADDR_VAR 0 3
67948: PUSH
67949: DOUBLE
67950: LD_INT 1
67952: DEC
67953: ST_TO_ADDR
67954: LD_INT 4
67956: PUSH
67957: FOR_TO
67958: IFFALSE 67979
// SetSkill ( i , j , 10 ) ;
67960: LD_VAR 0 2
67964: PPUSH
67965: LD_VAR 0 3
67969: PPUSH
67970: LD_INT 10
67972: PPUSH
67973: CALL_OW 237
67977: GO 67957
67979: POP
67980: POP
// end ;
67981: GO 67941
67983: POP
67984: POP
// end ;
67985: LD_VAR 0 1
67989: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67990: LD_INT 0
67992: PPUSH
// uc_side := your_side ;
67993: LD_ADDR_OWVAR 20
67997: PUSH
67998: LD_OWVAR 2
68002: ST_TO_ADDR
// uc_nation := nation ;
68003: LD_ADDR_OWVAR 21
68007: PUSH
68008: LD_VAR 0 1
68012: ST_TO_ADDR
// InitHc ;
68013: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
68017: LD_INT 0
68019: PPUSH
68020: LD_VAR 0 2
68024: PPUSH
68025: LD_VAR 0 3
68029: PPUSH
68030: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
68034: LD_VAR 0 4
68038: PPUSH
68039: LD_VAR 0 5
68043: PPUSH
68044: CALL_OW 428
68048: PUSH
68049: LD_INT 0
68051: EQUAL
68052: IFFALSE 68076
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
68054: CALL_OW 44
68058: PPUSH
68059: LD_VAR 0 4
68063: PPUSH
68064: LD_VAR 0 5
68068: PPUSH
68069: LD_INT 1
68071: PPUSH
68072: CALL_OW 48
// end ;
68076: LD_VAR 0 6
68080: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
68081: LD_INT 0
68083: PPUSH
68084: PPUSH
// uc_side := your_side ;
68085: LD_ADDR_OWVAR 20
68089: PUSH
68090: LD_OWVAR 2
68094: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 2
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: LD_INT 4
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: IN
68122: IFFALSE 68134
// uc_nation := nation_american else
68124: LD_ADDR_OWVAR 21
68128: PUSH
68129: LD_INT 1
68131: ST_TO_ADDR
68132: GO 68177
// if chassis in [ 11 , 12 , 13 , 14 ] then
68134: LD_VAR 0 1
68138: PUSH
68139: LD_INT 11
68141: PUSH
68142: LD_INT 12
68144: PUSH
68145: LD_INT 13
68147: PUSH
68148: LD_INT 14
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: IN
68157: IFFALSE 68169
// uc_nation := nation_arabian else
68159: LD_ADDR_OWVAR 21
68163: PUSH
68164: LD_INT 2
68166: ST_TO_ADDR
68167: GO 68177
// uc_nation := nation_russian ;
68169: LD_ADDR_OWVAR 21
68173: PUSH
68174: LD_INT 3
68176: ST_TO_ADDR
// vc_chassis := chassis ;
68177: LD_ADDR_OWVAR 37
68181: PUSH
68182: LD_VAR 0 1
68186: ST_TO_ADDR
// vc_engine := engine ;
68187: LD_ADDR_OWVAR 39
68191: PUSH
68192: LD_VAR 0 2
68196: ST_TO_ADDR
// vc_control := control ;
68197: LD_ADDR_OWVAR 38
68201: PUSH
68202: LD_VAR 0 3
68206: ST_TO_ADDR
// vc_weapon := weapon ;
68207: LD_ADDR_OWVAR 40
68211: PUSH
68212: LD_VAR 0 4
68216: ST_TO_ADDR
// un := CreateVehicle ;
68217: LD_ADDR_VAR 0 8
68221: PUSH
68222: CALL_OW 45
68226: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
68227: LD_VAR 0 8
68231: PPUSH
68232: LD_INT 0
68234: PPUSH
68235: LD_INT 5
68237: PPUSH
68238: CALL_OW 12
68242: PPUSH
68243: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
68247: LD_VAR 0 8
68251: PPUSH
68252: LD_VAR 0 5
68256: PPUSH
68257: LD_VAR 0 6
68261: PPUSH
68262: LD_INT 1
68264: PPUSH
68265: CALL_OW 48
// end ;
68269: LD_VAR 0 7
68273: RET
// export hInvincible ; every 1 do
68274: GO 68276
68276: DISABLE
// hInvincible := [ ] ;
68277: LD_ADDR_EXP 180
68281: PUSH
68282: EMPTY
68283: ST_TO_ADDR
68284: END
// every 10 do var i ;
68285: GO 68287
68287: DISABLE
68288: LD_INT 0
68290: PPUSH
// begin enable ;
68291: ENABLE
// if not hInvincible then
68292: LD_EXP 180
68296: NOT
68297: IFFALSE 68301
// exit ;
68299: GO 68345
// for i in hInvincible do
68301: LD_ADDR_VAR 0 1
68305: PUSH
68306: LD_EXP 180
68310: PUSH
68311: FOR_IN
68312: IFFALSE 68343
// if GetLives ( i ) < 1000 then
68314: LD_VAR 0 1
68318: PPUSH
68319: CALL_OW 256
68323: PUSH
68324: LD_INT 1000
68326: LESS
68327: IFFALSE 68341
// SetLives ( i , 1000 ) ;
68329: LD_VAR 0 1
68333: PPUSH
68334: LD_INT 1000
68336: PPUSH
68337: CALL_OW 234
68341: GO 68311
68343: POP
68344: POP
// end ;
68345: PPOPN 1
68347: END
// export function hHackInvincible ; var i ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
68352: LD_ADDR_VAR 0 2
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: LD_INT 21
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 21
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: LIST
68384: PPUSH
68385: CALL_OW 69
68389: PUSH
68390: FOR_IN
68391: IFFALSE 68452
// if IsSelected ( i ) then
68393: LD_VAR 0 2
68397: PPUSH
68398: CALL_OW 306
68402: IFFALSE 68450
// begin if i in hInvincible then
68404: LD_VAR 0 2
68408: PUSH
68409: LD_EXP 180
68413: IN
68414: IFFALSE 68434
// hInvincible := hInvincible diff i else
68416: LD_ADDR_EXP 180
68420: PUSH
68421: LD_EXP 180
68425: PUSH
68426: LD_VAR 0 2
68430: DIFF
68431: ST_TO_ADDR
68432: GO 68450
// hInvincible := hInvincible union i ;
68434: LD_ADDR_EXP 180
68438: PUSH
68439: LD_EXP 180
68443: PUSH
68444: LD_VAR 0 2
68448: UNION
68449: ST_TO_ADDR
// end ;
68450: GO 68390
68452: POP
68453: POP
// end ;
68454: LD_VAR 0 1
68458: RET
// export function hHackInvisible ; var i , j ; begin
68459: LD_INT 0
68461: PPUSH
68462: PPUSH
68463: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68464: LD_ADDR_VAR 0 2
68468: PUSH
68469: LD_INT 21
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PPUSH
68479: CALL_OW 69
68483: PUSH
68484: FOR_IN
68485: IFFALSE 68509
// if IsSelected ( i ) then
68487: LD_VAR 0 2
68491: PPUSH
68492: CALL_OW 306
68496: IFFALSE 68507
// ComForceInvisible ( i ) ;
68498: LD_VAR 0 2
68502: PPUSH
68503: CALL_OW 496
68507: GO 68484
68509: POP
68510: POP
// end ;
68511: LD_VAR 0 1
68515: RET
// export function hHackChangeYourSide ; begin
68516: LD_INT 0
68518: PPUSH
// if your_side = 8 then
68519: LD_OWVAR 2
68523: PUSH
68524: LD_INT 8
68526: EQUAL
68527: IFFALSE 68539
// your_side := 0 else
68529: LD_ADDR_OWVAR 2
68533: PUSH
68534: LD_INT 0
68536: ST_TO_ADDR
68537: GO 68553
// your_side := your_side + 1 ;
68539: LD_ADDR_OWVAR 2
68543: PUSH
68544: LD_OWVAR 2
68548: PUSH
68549: LD_INT 1
68551: PLUS
68552: ST_TO_ADDR
// end ;
68553: LD_VAR 0 1
68557: RET
// export function hHackChangeUnitSide ; var i , j ; begin
68558: LD_INT 0
68560: PPUSH
68561: PPUSH
68562: PPUSH
// for i in all_units do
68563: LD_ADDR_VAR 0 2
68567: PUSH
68568: LD_OWVAR 3
68572: PUSH
68573: FOR_IN
68574: IFFALSE 68652
// if IsSelected ( i ) then
68576: LD_VAR 0 2
68580: PPUSH
68581: CALL_OW 306
68585: IFFALSE 68650
// begin j := GetSide ( i ) ;
68587: LD_ADDR_VAR 0 3
68591: PUSH
68592: LD_VAR 0 2
68596: PPUSH
68597: CALL_OW 255
68601: ST_TO_ADDR
// if j = 8 then
68602: LD_VAR 0 3
68606: PUSH
68607: LD_INT 8
68609: EQUAL
68610: IFFALSE 68622
// j := 0 else
68612: LD_ADDR_VAR 0 3
68616: PUSH
68617: LD_INT 0
68619: ST_TO_ADDR
68620: GO 68636
// j := j + 1 ;
68622: LD_ADDR_VAR 0 3
68626: PUSH
68627: LD_VAR 0 3
68631: PUSH
68632: LD_INT 1
68634: PLUS
68635: ST_TO_ADDR
// SetSide ( i , j ) ;
68636: LD_VAR 0 2
68640: PPUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: CALL_OW 235
// end ;
68650: GO 68573
68652: POP
68653: POP
// end ;
68654: LD_VAR 0 1
68658: RET
// export function hHackFog ; begin
68659: LD_INT 0
68661: PPUSH
// FogOff ( true ) ;
68662: LD_INT 1
68664: PPUSH
68665: CALL_OW 344
// end ;
68669: LD_VAR 0 1
68673: RET
// export function hHackTeleport ( unit , x , y ) ; begin
68674: LD_INT 0
68676: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
68677: LD_VAR 0 1
68681: PPUSH
68682: LD_VAR 0 2
68686: PPUSH
68687: LD_VAR 0 3
68691: PPUSH
68692: LD_INT 1
68694: PPUSH
68695: LD_INT 1
68697: PPUSH
68698: CALL_OW 483
// CenterOnXY ( x , y ) ;
68702: LD_VAR 0 2
68706: PPUSH
68707: LD_VAR 0 3
68711: PPUSH
68712: CALL_OW 84
// end ; end_of_file
68716: LD_VAR 0 4
68720: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
68721: LD_INT 0
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
68727: LD_VAR 0 1
68731: PPUSH
68732: CALL_OW 264
68736: PUSH
68737: LD_EXP 107
68741: EQUAL
68742: IFFALSE 68814
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68744: LD_INT 68
68746: PPUSH
68747: LD_VAR 0 1
68751: PPUSH
68752: CALL_OW 255
68756: PPUSH
68757: CALL_OW 321
68761: PUSH
68762: LD_INT 2
68764: EQUAL
68765: IFFALSE 68777
// eff := 70 else
68767: LD_ADDR_VAR 0 4
68771: PUSH
68772: LD_INT 70
68774: ST_TO_ADDR
68775: GO 68785
// eff := 30 ;
68777: LD_ADDR_VAR 0 4
68781: PUSH
68782: LD_INT 30
68784: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68785: LD_VAR 0 1
68789: PPUSH
68790: CALL_OW 250
68794: PPUSH
68795: LD_VAR 0 1
68799: PPUSH
68800: CALL_OW 251
68804: PPUSH
68805: LD_VAR 0 4
68809: PPUSH
68810: CALL_OW 495
// end ; end ;
68814: LD_VAR 0 2
68818: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
68819: LD_INT 0
68821: PPUSH
// end ;
68822: LD_VAR 0 4
68826: RET
// export function SOS_Command ( cmd ) ; begin
68827: LD_INT 0
68829: PPUSH
// end ;
68830: LD_VAR 0 2
68834: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
68835: LD_INT 0
68837: PPUSH
// end ;
68838: LD_VAR 0 6
68842: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
68843: LD_INT 0
68845: PPUSH
68846: PPUSH
// if not vehicle or not factory then
68847: LD_VAR 0 1
68851: NOT
68852: PUSH
68853: LD_VAR 0 2
68857: NOT
68858: OR
68859: IFFALSE 68863
// exit ;
68861: GO 69094
// if factoryWaypoints >= factory then
68863: LD_EXP 181
68867: PUSH
68868: LD_VAR 0 2
68872: GREATEREQUAL
68873: IFFALSE 69094
// if factoryWaypoints [ factory ] then
68875: LD_EXP 181
68879: PUSH
68880: LD_VAR 0 2
68884: ARRAY
68885: IFFALSE 69094
// begin if GetControl ( vehicle ) = control_manual then
68887: LD_VAR 0 1
68891: PPUSH
68892: CALL_OW 263
68896: PUSH
68897: LD_INT 1
68899: EQUAL
68900: IFFALSE 68981
// begin driver := IsDrivenBy ( vehicle ) ;
68902: LD_ADDR_VAR 0 4
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: CALL_OW 311
68916: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68917: LD_VAR 0 4
68921: PPUSH
68922: LD_EXP 181
68926: PUSH
68927: LD_VAR 0 2
68931: ARRAY
68932: PUSH
68933: LD_INT 3
68935: ARRAY
68936: PPUSH
68937: LD_EXP 181
68941: PUSH
68942: LD_VAR 0 2
68946: ARRAY
68947: PUSH
68948: LD_INT 4
68950: ARRAY
68951: PPUSH
68952: CALL_OW 171
// AddComExitVehicle ( driver ) ;
68956: LD_VAR 0 4
68960: PPUSH
68961: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68965: LD_VAR 0 4
68969: PPUSH
68970: LD_VAR 0 2
68974: PPUSH
68975: CALL_OW 180
// end else
68979: GO 69094
// if GetControl ( vehicle ) = control_remote then
68981: LD_VAR 0 1
68985: PPUSH
68986: CALL_OW 263
68990: PUSH
68991: LD_INT 2
68993: EQUAL
68994: IFFALSE 69055
// begin wait ( 0 0$2 ) ;
68996: LD_INT 70
68998: PPUSH
68999: CALL_OW 67
// if Connect ( vehicle ) then
69003: LD_VAR 0 1
69007: PPUSH
69008: CALL 21784 0 1
69012: IFFALSE 69053
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_EXP 181
69023: PUSH
69024: LD_VAR 0 2
69028: ARRAY
69029: PUSH
69030: LD_INT 3
69032: ARRAY
69033: PPUSH
69034: LD_EXP 181
69038: PUSH
69039: LD_VAR 0 2
69043: ARRAY
69044: PUSH
69045: LD_INT 4
69047: ARRAY
69048: PPUSH
69049: CALL_OW 171
// end else
69053: GO 69094
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_EXP 181
69064: PUSH
69065: LD_VAR 0 2
69069: ARRAY
69070: PUSH
69071: LD_INT 3
69073: ARRAY
69074: PPUSH
69075: LD_EXP 181
69079: PUSH
69080: LD_VAR 0 2
69084: ARRAY
69085: PUSH
69086: LD_INT 4
69088: ARRAY
69089: PPUSH
69090: CALL_OW 171
// end ; end ;
69094: LD_VAR 0 3
69098: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69099: LD_INT 0
69101: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69102: LD_VAR 0 1
69106: PUSH
69107: LD_INT 250
69109: EQUAL
69110: PUSH
69111: LD_VAR 0 2
69115: PPUSH
69116: CALL_OW 264
69120: PUSH
69121: LD_EXP 110
69125: EQUAL
69126: AND
69127: IFFALSE 69148
// MinerPlaceMine ( unit , x , y ) ;
69129: LD_VAR 0 2
69133: PPUSH
69134: LD_VAR 0 4
69138: PPUSH
69139: LD_VAR 0 5
69143: PPUSH
69144: CALL 71876 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69148: LD_VAR 0 1
69152: PUSH
69153: LD_INT 251
69155: EQUAL
69156: PUSH
69157: LD_VAR 0 2
69161: PPUSH
69162: CALL_OW 264
69166: PUSH
69167: LD_EXP 110
69171: EQUAL
69172: AND
69173: IFFALSE 69194
// MinerDetonateMine ( unit , x , y ) ;
69175: LD_VAR 0 2
69179: PPUSH
69180: LD_VAR 0 4
69184: PPUSH
69185: LD_VAR 0 5
69189: PPUSH
69190: CALL 72153 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69194: LD_VAR 0 1
69198: PUSH
69199: LD_INT 252
69201: EQUAL
69202: PUSH
69203: LD_VAR 0 2
69207: PPUSH
69208: CALL_OW 264
69212: PUSH
69213: LD_EXP 110
69217: EQUAL
69218: AND
69219: IFFALSE 69240
// MinerCreateMinefield ( unit , x , y ) ;
69221: LD_VAR 0 2
69225: PPUSH
69226: LD_VAR 0 4
69230: PPUSH
69231: LD_VAR 0 5
69235: PPUSH
69236: CALL 72570 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69240: LD_VAR 0 1
69244: PUSH
69245: LD_INT 253
69247: EQUAL
69248: PUSH
69249: LD_VAR 0 2
69253: PPUSH
69254: CALL_OW 257
69258: PUSH
69259: LD_INT 5
69261: EQUAL
69262: AND
69263: IFFALSE 69284
// ComBinocular ( unit , x , y ) ;
69265: LD_VAR 0 2
69269: PPUSH
69270: LD_VAR 0 4
69274: PPUSH
69275: LD_VAR 0 5
69279: PPUSH
69280: CALL 72941 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
69284: LD_VAR 0 1
69288: PUSH
69289: LD_INT 254
69291: EQUAL
69292: PUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: CALL_OW 264
69302: PUSH
69303: LD_EXP 105
69307: EQUAL
69308: AND
69309: PUSH
69310: LD_VAR 0 3
69314: PPUSH
69315: CALL_OW 263
69319: PUSH
69320: LD_INT 3
69322: EQUAL
69323: AND
69324: IFFALSE 69340
// HackDestroyVehicle ( unit , selectedUnit ) ;
69326: LD_VAR 0 2
69330: PPUSH
69331: LD_VAR 0 3
69335: PPUSH
69336: CALL 71236 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
69340: LD_VAR 0 1
69344: PUSH
69345: LD_INT 255
69347: EQUAL
69348: PUSH
69349: LD_VAR 0 2
69353: PPUSH
69354: CALL_OW 264
69358: PUSH
69359: LD_INT 14
69361: PUSH
69362: LD_INT 53
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: IN
69369: AND
69370: PUSH
69371: LD_VAR 0 4
69375: PPUSH
69376: LD_VAR 0 5
69380: PPUSH
69381: CALL_OW 488
69385: AND
69386: IFFALSE 69410
// CutTreeXYR ( unit , x , y , 12 ) ;
69388: LD_VAR 0 2
69392: PPUSH
69393: LD_VAR 0 4
69397: PPUSH
69398: LD_VAR 0 5
69402: PPUSH
69403: LD_INT 12
69405: PPUSH
69406: CALL 69802 0 4
// if cmd = 256 then
69410: LD_VAR 0 1
69414: PUSH
69415: LD_INT 256
69417: EQUAL
69418: IFFALSE 69439
// SetFactoryWaypoint ( unit , x , y ) ;
69420: LD_VAR 0 2
69424: PPUSH
69425: LD_VAR 0 4
69429: PPUSH
69430: LD_VAR 0 5
69434: PPUSH
69435: CALL 69444 0 3
// end ;
69439: LD_VAR 0 6
69443: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
69444: LD_INT 0
69446: PPUSH
69447: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
69448: LD_VAR 0 1
69452: NOT
69453: PUSH
69454: LD_VAR 0 2
69458: PPUSH
69459: LD_VAR 0 3
69463: PPUSH
69464: CALL_OW 488
69468: NOT
69469: OR
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: CALL_OW 266
69480: PUSH
69481: LD_INT 3
69483: NONEQUAL
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 247
69494: PUSH
69495: LD_INT 1
69497: EQUAL
69498: NOT
69499: AND
69500: OR
69501: IFFALSE 69505
// exit ;
69503: GO 69654
// if GetType ( factory ) = unit_human then
69505: LD_VAR 0 1
69509: PPUSH
69510: CALL_OW 247
69514: PUSH
69515: LD_INT 1
69517: EQUAL
69518: IFFALSE 69535
// factory := IsInUnit ( factory ) ;
69520: LD_ADDR_VAR 0 1
69524: PUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL_OW 310
69534: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
69535: LD_VAR 0 1
69539: PPUSH
69540: CALL_OW 266
69544: PUSH
69545: LD_INT 3
69547: NONEQUAL
69548: IFFALSE 69552
// exit ;
69550: GO 69654
// if HexInfo ( x , y ) = factory then
69552: LD_VAR 0 2
69556: PPUSH
69557: LD_VAR 0 3
69561: PPUSH
69562: CALL_OW 428
69566: PUSH
69567: LD_VAR 0 1
69571: EQUAL
69572: IFFALSE 69599
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
69574: LD_ADDR_EXP 181
69578: PUSH
69579: LD_EXP 181
69583: PPUSH
69584: LD_VAR 0 1
69588: PPUSH
69589: LD_INT 0
69591: PPUSH
69592: CALL_OW 1
69596: ST_TO_ADDR
69597: GO 69650
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
69599: LD_ADDR_EXP 181
69603: PUSH
69604: LD_EXP 181
69608: PPUSH
69609: LD_VAR 0 1
69613: PPUSH
69614: LD_VAR 0 1
69618: PPUSH
69619: CALL_OW 255
69623: PUSH
69624: LD_VAR 0 1
69628: PUSH
69629: LD_VAR 0 2
69633: PUSH
69634: LD_VAR 0 3
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: PPUSH
69645: CALL_OW 1
69649: ST_TO_ADDR
// UpdateFactoryWaypoints ;
69650: CALL 69659 0 0
// end ;
69654: LD_VAR 0 4
69658: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
69659: LD_INT 0
69661: PPUSH
69662: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
69663: LD_STRING resetFactoryWaypoint();
69665: PPUSH
69666: CALL_OW 559
// if factoryWaypoints then
69670: LD_EXP 181
69674: IFFALSE 69797
// begin for i := 1 to factoryWaypoints do
69676: LD_ADDR_VAR 0 2
69680: PUSH
69681: DOUBLE
69682: LD_INT 1
69684: DEC
69685: ST_TO_ADDR
69686: LD_EXP 181
69690: PUSH
69691: FOR_TO
69692: IFFALSE 69795
// if factoryWaypoints [ i ] then
69694: LD_EXP 181
69698: PUSH
69699: LD_VAR 0 2
69703: ARRAY
69704: IFFALSE 69793
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
69706: LD_STRING setFactoryWaypointXY(
69708: PUSH
69709: LD_EXP 181
69713: PUSH
69714: LD_VAR 0 2
69718: ARRAY
69719: PUSH
69720: LD_INT 1
69722: ARRAY
69723: STR
69724: PUSH
69725: LD_STRING ,
69727: STR
69728: PUSH
69729: LD_EXP 181
69733: PUSH
69734: LD_VAR 0 2
69738: ARRAY
69739: PUSH
69740: LD_INT 2
69742: ARRAY
69743: STR
69744: PUSH
69745: LD_STRING ,
69747: STR
69748: PUSH
69749: LD_EXP 181
69753: PUSH
69754: LD_VAR 0 2
69758: ARRAY
69759: PUSH
69760: LD_INT 3
69762: ARRAY
69763: STR
69764: PUSH
69765: LD_STRING ,
69767: STR
69768: PUSH
69769: LD_EXP 181
69773: PUSH
69774: LD_VAR 0 2
69778: ARRAY
69779: PUSH
69780: LD_INT 4
69782: ARRAY
69783: STR
69784: PUSH
69785: LD_STRING )
69787: STR
69788: PPUSH
69789: CALL_OW 559
69793: GO 69691
69795: POP
69796: POP
// end ; end ;
69797: LD_VAR 0 1
69801: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
69802: LD_INT 0
69804: PPUSH
69805: PPUSH
69806: PPUSH
69807: PPUSH
69808: PPUSH
69809: PPUSH
69810: PPUSH
69811: PPUSH
69812: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
69813: LD_VAR 0 1
69817: NOT
69818: PUSH
69819: LD_VAR 0 2
69823: PPUSH
69824: LD_VAR 0 3
69828: PPUSH
69829: CALL_OW 488
69833: NOT
69834: OR
69835: PUSH
69836: LD_VAR 0 4
69840: NOT
69841: OR
69842: IFFALSE 69846
// exit ;
69844: GO 70186
// list := [ ] ;
69846: LD_ADDR_VAR 0 13
69850: PUSH
69851: EMPTY
69852: ST_TO_ADDR
// if x - r < 0 then
69853: LD_VAR 0 2
69857: PUSH
69858: LD_VAR 0 4
69862: MINUS
69863: PUSH
69864: LD_INT 0
69866: LESS
69867: IFFALSE 69879
// min_x := 0 else
69869: LD_ADDR_VAR 0 7
69873: PUSH
69874: LD_INT 0
69876: ST_TO_ADDR
69877: GO 69895
// min_x := x - r ;
69879: LD_ADDR_VAR 0 7
69883: PUSH
69884: LD_VAR 0 2
69888: PUSH
69889: LD_VAR 0 4
69893: MINUS
69894: ST_TO_ADDR
// if y - r < 0 then
69895: LD_VAR 0 3
69899: PUSH
69900: LD_VAR 0 4
69904: MINUS
69905: PUSH
69906: LD_INT 0
69908: LESS
69909: IFFALSE 69921
// min_y := 0 else
69911: LD_ADDR_VAR 0 8
69915: PUSH
69916: LD_INT 0
69918: ST_TO_ADDR
69919: GO 69937
// min_y := y - r ;
69921: LD_ADDR_VAR 0 8
69925: PUSH
69926: LD_VAR 0 3
69930: PUSH
69931: LD_VAR 0 4
69935: MINUS
69936: ST_TO_ADDR
// max_x := x + r ;
69937: LD_ADDR_VAR 0 9
69941: PUSH
69942: LD_VAR 0 2
69946: PUSH
69947: LD_VAR 0 4
69951: PLUS
69952: ST_TO_ADDR
// max_y := y + r ;
69953: LD_ADDR_VAR 0 10
69957: PUSH
69958: LD_VAR 0 3
69962: PUSH
69963: LD_VAR 0 4
69967: PLUS
69968: ST_TO_ADDR
// for _x = min_x to max_x do
69969: LD_ADDR_VAR 0 11
69973: PUSH
69974: DOUBLE
69975: LD_VAR 0 7
69979: DEC
69980: ST_TO_ADDR
69981: LD_VAR 0 9
69985: PUSH
69986: FOR_TO
69987: IFFALSE 70104
// for _y = min_y to max_y do
69989: LD_ADDR_VAR 0 12
69993: PUSH
69994: DOUBLE
69995: LD_VAR 0 8
69999: DEC
70000: ST_TO_ADDR
70001: LD_VAR 0 10
70005: PUSH
70006: FOR_TO
70007: IFFALSE 70100
// begin if not ValidHex ( _x , _y ) then
70009: LD_VAR 0 11
70013: PPUSH
70014: LD_VAR 0 12
70018: PPUSH
70019: CALL_OW 488
70023: NOT
70024: IFFALSE 70028
// continue ;
70026: GO 70006
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70028: LD_VAR 0 11
70032: PPUSH
70033: LD_VAR 0 12
70037: PPUSH
70038: CALL_OW 351
70042: PUSH
70043: LD_VAR 0 11
70047: PPUSH
70048: LD_VAR 0 12
70052: PPUSH
70053: CALL_OW 554
70057: AND
70058: IFFALSE 70098
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70060: LD_ADDR_VAR 0 13
70064: PUSH
70065: LD_VAR 0 13
70069: PPUSH
70070: LD_VAR 0 13
70074: PUSH
70075: LD_INT 1
70077: PLUS
70078: PPUSH
70079: LD_VAR 0 11
70083: PUSH
70084: LD_VAR 0 12
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PPUSH
70093: CALL_OW 2
70097: ST_TO_ADDR
// end ;
70098: GO 70006
70100: POP
70101: POP
70102: GO 69986
70104: POP
70105: POP
// if not list then
70106: LD_VAR 0 13
70110: NOT
70111: IFFALSE 70115
// exit ;
70113: GO 70186
// for i in list do
70115: LD_ADDR_VAR 0 6
70119: PUSH
70120: LD_VAR 0 13
70124: PUSH
70125: FOR_IN
70126: IFFALSE 70184
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70128: LD_VAR 0 1
70132: PPUSH
70133: LD_STRING M
70135: PUSH
70136: LD_VAR 0 6
70140: PUSH
70141: LD_INT 1
70143: ARRAY
70144: PUSH
70145: LD_VAR 0 6
70149: PUSH
70150: LD_INT 2
70152: ARRAY
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: PUSH
70175: EMPTY
70176: LIST
70177: PPUSH
70178: CALL_OW 447
70182: GO 70125
70184: POP
70185: POP
// end ;
70186: LD_VAR 0 5
70190: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
70191: LD_EXP 182
70195: NOT
70196: IFFALSE 70246
70198: GO 70200
70200: DISABLE
// begin initHack := true ;
70201: LD_ADDR_EXP 182
70205: PUSH
70206: LD_INT 1
70208: ST_TO_ADDR
// hackTanks := [ ] ;
70209: LD_ADDR_EXP 183
70213: PUSH
70214: EMPTY
70215: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
70216: LD_ADDR_EXP 184
70220: PUSH
70221: EMPTY
70222: ST_TO_ADDR
// hackLimit := 3 ;
70223: LD_ADDR_EXP 185
70227: PUSH
70228: LD_INT 3
70230: ST_TO_ADDR
// hackDist := 12 ;
70231: LD_ADDR_EXP 186
70235: PUSH
70236: LD_INT 12
70238: ST_TO_ADDR
// hackCounter := [ ] ;
70239: LD_ADDR_EXP 187
70243: PUSH
70244: EMPTY
70245: ST_TO_ADDR
// end ;
70246: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
70247: LD_EXP 182
70251: PUSH
70252: LD_INT 34
70254: PUSH
70255: LD_EXP 105
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PPUSH
70264: CALL_OW 69
70268: AND
70269: IFFALSE 70524
70271: GO 70273
70273: DISABLE
70274: LD_INT 0
70276: PPUSH
70277: PPUSH
// begin enable ;
70278: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
70279: LD_ADDR_VAR 0 1
70283: PUSH
70284: LD_INT 34
70286: PUSH
70287: LD_EXP 105
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PPUSH
70296: CALL_OW 69
70300: PUSH
70301: FOR_IN
70302: IFFALSE 70522
// begin if not i in hackTanks then
70304: LD_VAR 0 1
70308: PUSH
70309: LD_EXP 183
70313: IN
70314: NOT
70315: IFFALSE 70398
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
70317: LD_ADDR_EXP 183
70321: PUSH
70322: LD_EXP 183
70326: PPUSH
70327: LD_EXP 183
70331: PUSH
70332: LD_INT 1
70334: PLUS
70335: PPUSH
70336: LD_VAR 0 1
70340: PPUSH
70341: CALL_OW 1
70345: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
70346: LD_ADDR_EXP 184
70350: PUSH
70351: LD_EXP 184
70355: PPUSH
70356: LD_EXP 184
70360: PUSH
70361: LD_INT 1
70363: PLUS
70364: PPUSH
70365: EMPTY
70366: PPUSH
70367: CALL_OW 1
70371: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
70372: LD_ADDR_EXP 187
70376: PUSH
70377: LD_EXP 187
70381: PPUSH
70382: LD_EXP 187
70386: PUSH
70387: LD_INT 1
70389: PLUS
70390: PPUSH
70391: EMPTY
70392: PPUSH
70393: CALL_OW 1
70397: ST_TO_ADDR
// end ; if not IsOk ( i ) then
70398: LD_VAR 0 1
70402: PPUSH
70403: CALL_OW 302
70407: NOT
70408: IFFALSE 70421
// begin HackUnlinkAll ( i ) ;
70410: LD_VAR 0 1
70414: PPUSH
70415: CALL 70527 0 1
// continue ;
70419: GO 70301
// end ; HackCheckCapturedStatus ( i ) ;
70421: LD_VAR 0 1
70425: PPUSH
70426: CALL 70970 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
70430: LD_ADDR_VAR 0 2
70434: PUSH
70435: LD_INT 81
70437: PUSH
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 255
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 33
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 91
70464: PUSH
70465: LD_VAR 0 1
70469: PUSH
70470: LD_EXP 186
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 50
70482: PUSH
70483: EMPTY
70484: LIST
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: PPUSH
70492: CALL_OW 69
70496: ST_TO_ADDR
// if not tmp then
70497: LD_VAR 0 2
70501: NOT
70502: IFFALSE 70506
// continue ;
70504: GO 70301
// HackLink ( i , tmp ) ;
70506: LD_VAR 0 1
70510: PPUSH
70511: LD_VAR 0 2
70515: PPUSH
70516: CALL 70663 0 2
// end ;
70520: GO 70301
70522: POP
70523: POP
// end ;
70524: PPOPN 2
70526: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70527: LD_INT 0
70529: PPUSH
70530: PPUSH
70531: PPUSH
// if not hack in hackTanks then
70532: LD_VAR 0 1
70536: PUSH
70537: LD_EXP 183
70541: IN
70542: NOT
70543: IFFALSE 70547
// exit ;
70545: GO 70658
// index := GetElementIndex ( hackTanks , hack ) ;
70547: LD_ADDR_VAR 0 4
70551: PUSH
70552: LD_EXP 183
70556: PPUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: CALL 18490 0 2
70566: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70567: LD_EXP 184
70571: PUSH
70572: LD_VAR 0 4
70576: ARRAY
70577: IFFALSE 70658
// begin for i in hackTanksCaptured [ index ] do
70579: LD_ADDR_VAR 0 3
70583: PUSH
70584: LD_EXP 184
70588: PUSH
70589: LD_VAR 0 4
70593: ARRAY
70594: PUSH
70595: FOR_IN
70596: IFFALSE 70622
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70598: LD_VAR 0 3
70602: PUSH
70603: LD_INT 1
70605: ARRAY
70606: PPUSH
70607: LD_VAR 0 3
70611: PUSH
70612: LD_INT 2
70614: ARRAY
70615: PPUSH
70616: CALL_OW 235
70620: GO 70595
70622: POP
70623: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70624: LD_ADDR_EXP 184
70628: PUSH
70629: LD_EXP 184
70633: PPUSH
70634: LD_VAR 0 4
70638: PPUSH
70639: EMPTY
70640: PPUSH
70641: CALL_OW 1
70645: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70646: LD_VAR 0 1
70650: PPUSH
70651: LD_INT 0
70653: PPUSH
70654: CALL_OW 505
// end ; end ;
70658: LD_VAR 0 2
70662: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70663: LD_INT 0
70665: PPUSH
70666: PPUSH
70667: PPUSH
// if not hack in hackTanks or not vehicles then
70668: LD_VAR 0 1
70672: PUSH
70673: LD_EXP 183
70677: IN
70678: NOT
70679: PUSH
70680: LD_VAR 0 2
70684: NOT
70685: OR
70686: IFFALSE 70690
// exit ;
70688: GO 70965
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70690: LD_ADDR_VAR 0 2
70694: PUSH
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_VAR 0 2
70704: PPUSH
70705: LD_INT 1
70707: PPUSH
70708: LD_INT 1
70710: PPUSH
70711: CALL 19140 0 4
70715: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_EXP 183
70725: PPUSH
70726: LD_VAR 0 1
70730: PPUSH
70731: CALL 18490 0 2
70735: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70736: LD_EXP 184
70740: PUSH
70741: LD_VAR 0 5
70745: ARRAY
70746: PUSH
70747: LD_EXP 185
70751: LESS
70752: IFFALSE 70941
// begin for i := 1 to vehicles do
70754: LD_ADDR_VAR 0 4
70758: PUSH
70759: DOUBLE
70760: LD_INT 1
70762: DEC
70763: ST_TO_ADDR
70764: LD_VAR 0 2
70768: PUSH
70769: FOR_TO
70770: IFFALSE 70939
// begin if hackTanksCaptured [ index ] = hackLimit then
70772: LD_EXP 184
70776: PUSH
70777: LD_VAR 0 5
70781: ARRAY
70782: PUSH
70783: LD_EXP 185
70787: EQUAL
70788: IFFALSE 70792
// break ;
70790: GO 70939
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70792: LD_ADDR_EXP 187
70796: PUSH
70797: LD_EXP 187
70801: PPUSH
70802: LD_VAR 0 5
70806: PPUSH
70807: LD_EXP 187
70811: PUSH
70812: LD_VAR 0 5
70816: ARRAY
70817: PUSH
70818: LD_INT 1
70820: PLUS
70821: PPUSH
70822: CALL_OW 1
70826: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70827: LD_ADDR_EXP 184
70831: PUSH
70832: LD_EXP 184
70836: PPUSH
70837: LD_VAR 0 5
70841: PUSH
70842: LD_EXP 184
70846: PUSH
70847: LD_VAR 0 5
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: PLUS
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PPUSH
70861: LD_VAR 0 2
70865: PUSH
70866: LD_VAR 0 4
70870: ARRAY
70871: PUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_VAR 0 4
70881: ARRAY
70882: PPUSH
70883: CALL_OW 255
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PPUSH
70892: CALL 18705 0 3
70896: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70897: LD_VAR 0 2
70901: PUSH
70902: LD_VAR 0 4
70906: ARRAY
70907: PPUSH
70908: LD_VAR 0 1
70912: PPUSH
70913: CALL_OW 255
70917: PPUSH
70918: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70922: LD_VAR 0 2
70926: PUSH
70927: LD_VAR 0 4
70931: ARRAY
70932: PPUSH
70933: CALL_OW 141
// end ;
70937: GO 70769
70939: POP
70940: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70941: LD_VAR 0 1
70945: PPUSH
70946: LD_EXP 184
70950: PUSH
70951: LD_VAR 0 5
70955: ARRAY
70956: PUSH
70957: LD_INT 0
70959: PLUS
70960: PPUSH
70961: CALL_OW 505
// end ;
70965: LD_VAR 0 3
70969: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70970: LD_INT 0
70972: PPUSH
70973: PPUSH
70974: PPUSH
70975: PPUSH
// if not hack in hackTanks then
70976: LD_VAR 0 1
70980: PUSH
70981: LD_EXP 183
70985: IN
70986: NOT
70987: IFFALSE 70991
// exit ;
70989: GO 71231
// index := GetElementIndex ( hackTanks , hack ) ;
70991: LD_ADDR_VAR 0 4
70995: PUSH
70996: LD_EXP 183
71000: PPUSH
71001: LD_VAR 0 1
71005: PPUSH
71006: CALL 18490 0 2
71010: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
71011: LD_ADDR_VAR 0 3
71015: PUSH
71016: DOUBLE
71017: LD_EXP 184
71021: PUSH
71022: LD_VAR 0 4
71026: ARRAY
71027: INC
71028: ST_TO_ADDR
71029: LD_INT 1
71031: PUSH
71032: FOR_DOWNTO
71033: IFFALSE 71205
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
71035: LD_ADDR_VAR 0 5
71039: PUSH
71040: LD_EXP 184
71044: PUSH
71045: LD_VAR 0 4
71049: ARRAY
71050: PUSH
71051: LD_VAR 0 3
71055: ARRAY
71056: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
71057: LD_VAR 0 5
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PPUSH
71066: CALL_OW 302
71070: NOT
71071: PUSH
71072: LD_VAR 0 5
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: PPUSH
71081: CALL_OW 255
71085: PUSH
71086: LD_VAR 0 1
71090: PPUSH
71091: CALL_OW 255
71095: NONEQUAL
71096: OR
71097: IFFALSE 71203
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
71099: LD_VAR 0 5
71103: PUSH
71104: LD_INT 1
71106: ARRAY
71107: PPUSH
71108: CALL_OW 305
71112: PUSH
71113: LD_VAR 0 5
71117: PUSH
71118: LD_INT 1
71120: ARRAY
71121: PPUSH
71122: CALL_OW 255
71126: PUSH
71127: LD_VAR 0 1
71131: PPUSH
71132: CALL_OW 255
71136: EQUAL
71137: AND
71138: IFFALSE 71162
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
71140: LD_VAR 0 5
71144: PUSH
71145: LD_INT 1
71147: ARRAY
71148: PPUSH
71149: LD_VAR 0 5
71153: PUSH
71154: LD_INT 2
71156: ARRAY
71157: PPUSH
71158: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
71162: LD_ADDR_EXP 184
71166: PUSH
71167: LD_EXP 184
71171: PPUSH
71172: LD_VAR 0 4
71176: PPUSH
71177: LD_EXP 184
71181: PUSH
71182: LD_VAR 0 4
71186: ARRAY
71187: PPUSH
71188: LD_VAR 0 3
71192: PPUSH
71193: CALL_OW 3
71197: PPUSH
71198: CALL_OW 1
71202: ST_TO_ADDR
// end ; end ;
71203: GO 71032
71205: POP
71206: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
71207: LD_VAR 0 1
71211: PPUSH
71212: LD_EXP 184
71216: PUSH
71217: LD_VAR 0 4
71221: ARRAY
71222: PUSH
71223: LD_INT 0
71225: PLUS
71226: PPUSH
71227: CALL_OW 505
// end ;
71231: LD_VAR 0 2
71235: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
71236: LD_INT 0
71238: PPUSH
71239: PPUSH
71240: PPUSH
71241: PPUSH
// if not hack in hackTanks then
71242: LD_VAR 0 1
71246: PUSH
71247: LD_EXP 183
71251: IN
71252: NOT
71253: IFFALSE 71257
// exit ;
71255: GO 71342
// index := GetElementIndex ( hackTanks , hack ) ;
71257: LD_ADDR_VAR 0 5
71261: PUSH
71262: LD_EXP 183
71266: PPUSH
71267: LD_VAR 0 1
71271: PPUSH
71272: CALL 18490 0 2
71276: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
71277: LD_ADDR_VAR 0 4
71281: PUSH
71282: DOUBLE
71283: LD_INT 1
71285: DEC
71286: ST_TO_ADDR
71287: LD_EXP 184
71291: PUSH
71292: LD_VAR 0 5
71296: ARRAY
71297: PUSH
71298: FOR_TO
71299: IFFALSE 71340
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
71301: LD_EXP 184
71305: PUSH
71306: LD_VAR 0 5
71310: ARRAY
71311: PUSH
71312: LD_VAR 0 4
71316: ARRAY
71317: PUSH
71318: LD_INT 1
71320: ARRAY
71321: PUSH
71322: LD_VAR 0 2
71326: EQUAL
71327: IFFALSE 71338
// KillUnit ( vehicle ) ;
71329: LD_VAR 0 2
71333: PPUSH
71334: CALL_OW 66
71338: GO 71298
71340: POP
71341: POP
// end ;
71342: LD_VAR 0 3
71346: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
71347: LD_EXP 188
71351: NOT
71352: IFFALSE 71387
71354: GO 71356
71356: DISABLE
// begin initMiner := true ;
71357: LD_ADDR_EXP 188
71361: PUSH
71362: LD_INT 1
71364: ST_TO_ADDR
// minersList := [ ] ;
71365: LD_ADDR_EXP 189
71369: PUSH
71370: EMPTY
71371: ST_TO_ADDR
// minerMinesList := [ ] ;
71372: LD_ADDR_EXP 190
71376: PUSH
71377: EMPTY
71378: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
71379: LD_ADDR_EXP 191
71383: PUSH
71384: LD_INT 5
71386: ST_TO_ADDR
// end ;
71387: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
71388: LD_EXP 188
71392: PUSH
71393: LD_INT 34
71395: PUSH
71396: LD_EXP 110
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PPUSH
71405: CALL_OW 69
71409: AND
71410: IFFALSE 71873
71412: GO 71414
71414: DISABLE
71415: LD_INT 0
71417: PPUSH
71418: PPUSH
71419: PPUSH
71420: PPUSH
// begin enable ;
71421: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
71422: LD_ADDR_VAR 0 1
71426: PUSH
71427: LD_INT 34
71429: PUSH
71430: LD_EXP 110
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PPUSH
71439: CALL_OW 69
71443: PUSH
71444: FOR_IN
71445: IFFALSE 71517
// begin if not i in minersList then
71447: LD_VAR 0 1
71451: PUSH
71452: LD_EXP 189
71456: IN
71457: NOT
71458: IFFALSE 71515
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
71460: LD_ADDR_EXP 189
71464: PUSH
71465: LD_EXP 189
71469: PPUSH
71470: LD_EXP 189
71474: PUSH
71475: LD_INT 1
71477: PLUS
71478: PPUSH
71479: LD_VAR 0 1
71483: PPUSH
71484: CALL_OW 1
71488: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
71489: LD_ADDR_EXP 190
71493: PUSH
71494: LD_EXP 190
71498: PPUSH
71499: LD_EXP 190
71503: PUSH
71504: LD_INT 1
71506: PLUS
71507: PPUSH
71508: EMPTY
71509: PPUSH
71510: CALL_OW 1
71514: ST_TO_ADDR
// end end ;
71515: GO 71444
71517: POP
71518: POP
// for i := minerMinesList downto 1 do
71519: LD_ADDR_VAR 0 1
71523: PUSH
71524: DOUBLE
71525: LD_EXP 190
71529: INC
71530: ST_TO_ADDR
71531: LD_INT 1
71533: PUSH
71534: FOR_DOWNTO
71535: IFFALSE 71871
// begin if IsLive ( minersList [ i ] ) then
71537: LD_EXP 189
71541: PUSH
71542: LD_VAR 0 1
71546: ARRAY
71547: PPUSH
71548: CALL_OW 300
71552: IFFALSE 71580
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71554: LD_EXP 189
71558: PUSH
71559: LD_VAR 0 1
71563: ARRAY
71564: PPUSH
71565: LD_EXP 190
71569: PUSH
71570: LD_VAR 0 1
71574: ARRAY
71575: PPUSH
71576: CALL_OW 505
// if not minerMinesList [ i ] then
71580: LD_EXP 190
71584: PUSH
71585: LD_VAR 0 1
71589: ARRAY
71590: NOT
71591: IFFALSE 71595
// continue ;
71593: GO 71534
// for j := minerMinesList [ i ] downto 1 do
71595: LD_ADDR_VAR 0 2
71599: PUSH
71600: DOUBLE
71601: LD_EXP 190
71605: PUSH
71606: LD_VAR 0 1
71610: ARRAY
71611: INC
71612: ST_TO_ADDR
71613: LD_INT 1
71615: PUSH
71616: FOR_DOWNTO
71617: IFFALSE 71867
// begin side := GetSide ( minersList [ i ] ) ;
71619: LD_ADDR_VAR 0 3
71623: PUSH
71624: LD_EXP 189
71628: PUSH
71629: LD_VAR 0 1
71633: ARRAY
71634: PPUSH
71635: CALL_OW 255
71639: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71640: LD_ADDR_VAR 0 4
71644: PUSH
71645: LD_EXP 190
71649: PUSH
71650: LD_VAR 0 1
71654: ARRAY
71655: PUSH
71656: LD_VAR 0 2
71660: ARRAY
71661: PUSH
71662: LD_INT 1
71664: ARRAY
71665: PPUSH
71666: LD_EXP 190
71670: PUSH
71671: LD_VAR 0 1
71675: ARRAY
71676: PUSH
71677: LD_VAR 0 2
71681: ARRAY
71682: PUSH
71683: LD_INT 2
71685: ARRAY
71686: PPUSH
71687: CALL_OW 428
71691: ST_TO_ADDR
// if not tmp then
71692: LD_VAR 0 4
71696: NOT
71697: IFFALSE 71701
// continue ;
71699: GO 71616
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71701: LD_VAR 0 4
71705: PUSH
71706: LD_INT 81
71708: PUSH
71709: LD_VAR 0 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PPUSH
71718: CALL_OW 69
71722: IN
71723: PUSH
71724: LD_EXP 190
71728: PUSH
71729: LD_VAR 0 1
71733: ARRAY
71734: PUSH
71735: LD_VAR 0 2
71739: ARRAY
71740: PUSH
71741: LD_INT 1
71743: ARRAY
71744: PPUSH
71745: LD_EXP 190
71749: PUSH
71750: LD_VAR 0 1
71754: ARRAY
71755: PUSH
71756: LD_VAR 0 2
71760: ARRAY
71761: PUSH
71762: LD_INT 2
71764: ARRAY
71765: PPUSH
71766: CALL_OW 458
71770: AND
71771: IFFALSE 71865
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71773: LD_EXP 190
71777: PUSH
71778: LD_VAR 0 1
71782: ARRAY
71783: PUSH
71784: LD_VAR 0 2
71788: ARRAY
71789: PUSH
71790: LD_INT 1
71792: ARRAY
71793: PPUSH
71794: LD_EXP 190
71798: PUSH
71799: LD_VAR 0 1
71803: ARRAY
71804: PUSH
71805: LD_VAR 0 2
71809: ARRAY
71810: PUSH
71811: LD_INT 2
71813: ARRAY
71814: PPUSH
71815: LD_VAR 0 3
71819: PPUSH
71820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71824: LD_ADDR_EXP 190
71828: PUSH
71829: LD_EXP 190
71833: PPUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_EXP 190
71843: PUSH
71844: LD_VAR 0 1
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 2
71854: PPUSH
71855: CALL_OW 3
71859: PPUSH
71860: CALL_OW 1
71864: ST_TO_ADDR
// end ; end ;
71865: GO 71616
71867: POP
71868: POP
// end ;
71869: GO 71534
71871: POP
71872: POP
// end ;
71873: PPOPN 4
71875: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71876: LD_INT 0
71878: PPUSH
71879: PPUSH
// result := false ;
71880: LD_ADDR_VAR 0 4
71884: PUSH
71885: LD_INT 0
71887: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71888: LD_VAR 0 1
71892: PPUSH
71893: CALL_OW 264
71897: PUSH
71898: LD_EXP 110
71902: EQUAL
71903: NOT
71904: IFFALSE 71908
// exit ;
71906: GO 72148
// index := GetElementIndex ( minersList , unit ) ;
71908: LD_ADDR_VAR 0 5
71912: PUSH
71913: LD_EXP 189
71917: PPUSH
71918: LD_VAR 0 1
71922: PPUSH
71923: CALL 18490 0 2
71927: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71928: LD_EXP 190
71932: PUSH
71933: LD_VAR 0 5
71937: ARRAY
71938: PUSH
71939: LD_EXP 191
71943: GREATEREQUAL
71944: IFFALSE 71948
// exit ;
71946: GO 72148
// ComMoveXY ( unit , x , y ) ;
71948: LD_VAR 0 1
71952: PPUSH
71953: LD_VAR 0 2
71957: PPUSH
71958: LD_VAR 0 3
71962: PPUSH
71963: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71967: LD_INT 35
71969: PPUSH
71970: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71974: LD_VAR 0 1
71978: PPUSH
71979: LD_VAR 0 2
71983: PPUSH
71984: LD_VAR 0 3
71988: PPUSH
71989: CALL 49317 0 3
71993: NOT
71994: PUSH
71995: LD_VAR 0 1
71999: PPUSH
72000: CALL_OW 314
72004: AND
72005: IFFALSE 72009
// exit ;
72007: GO 72148
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
72009: LD_VAR 0 2
72013: PPUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: CALL_OW 428
72023: PUSH
72024: LD_VAR 0 1
72028: EQUAL
72029: PUSH
72030: LD_VAR 0 1
72034: PPUSH
72035: CALL_OW 314
72039: NOT
72040: AND
72041: IFFALSE 71967
// PlaySoundXY ( x , y , PlantMine ) ;
72043: LD_VAR 0 2
72047: PPUSH
72048: LD_VAR 0 3
72052: PPUSH
72053: LD_STRING PlantMine
72055: PPUSH
72056: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
72060: LD_VAR 0 2
72064: PPUSH
72065: LD_VAR 0 3
72069: PPUSH
72070: LD_VAR 0 1
72074: PPUSH
72075: CALL_OW 255
72079: PPUSH
72080: LD_INT 0
72082: PPUSH
72083: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
72087: LD_ADDR_EXP 190
72091: PUSH
72092: LD_EXP 190
72096: PPUSH
72097: LD_VAR 0 5
72101: PUSH
72102: LD_EXP 190
72106: PUSH
72107: LD_VAR 0 5
72111: ARRAY
72112: PUSH
72113: LD_INT 1
72115: PLUS
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PPUSH
72121: LD_VAR 0 2
72125: PUSH
72126: LD_VAR 0 3
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PPUSH
72135: CALL 18705 0 3
72139: ST_TO_ADDR
// result := true ;
72140: LD_ADDR_VAR 0 4
72144: PUSH
72145: LD_INT 1
72147: ST_TO_ADDR
// end ;
72148: LD_VAR 0 4
72152: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
72153: LD_INT 0
72155: PPUSH
72156: PPUSH
72157: PPUSH
// if not unit in minersList then
72158: LD_VAR 0 1
72162: PUSH
72163: LD_EXP 189
72167: IN
72168: NOT
72169: IFFALSE 72173
// exit ;
72171: GO 72565
// index := GetElementIndex ( minersList , unit ) ;
72173: LD_ADDR_VAR 0 6
72177: PUSH
72178: LD_EXP 189
72182: PPUSH
72183: LD_VAR 0 1
72187: PPUSH
72188: CALL 18490 0 2
72192: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
72193: LD_ADDR_VAR 0 5
72197: PUSH
72198: DOUBLE
72199: LD_EXP 190
72203: PUSH
72204: LD_VAR 0 6
72208: ARRAY
72209: INC
72210: ST_TO_ADDR
72211: LD_INT 1
72213: PUSH
72214: FOR_DOWNTO
72215: IFFALSE 72376
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
72217: LD_EXP 190
72221: PUSH
72222: LD_VAR 0 6
72226: ARRAY
72227: PUSH
72228: LD_VAR 0 5
72232: ARRAY
72233: PUSH
72234: LD_INT 1
72236: ARRAY
72237: PUSH
72238: LD_VAR 0 2
72242: EQUAL
72243: PUSH
72244: LD_EXP 190
72248: PUSH
72249: LD_VAR 0 6
72253: ARRAY
72254: PUSH
72255: LD_VAR 0 5
72259: ARRAY
72260: PUSH
72261: LD_INT 2
72263: ARRAY
72264: PUSH
72265: LD_VAR 0 3
72269: EQUAL
72270: AND
72271: IFFALSE 72374
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
72273: LD_EXP 190
72277: PUSH
72278: LD_VAR 0 6
72282: ARRAY
72283: PUSH
72284: LD_VAR 0 5
72288: ARRAY
72289: PUSH
72290: LD_INT 1
72292: ARRAY
72293: PPUSH
72294: LD_EXP 190
72298: PUSH
72299: LD_VAR 0 6
72303: ARRAY
72304: PUSH
72305: LD_VAR 0 5
72309: ARRAY
72310: PUSH
72311: LD_INT 2
72313: ARRAY
72314: PPUSH
72315: LD_VAR 0 1
72319: PPUSH
72320: CALL_OW 255
72324: PPUSH
72325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72329: LD_ADDR_EXP 190
72333: PUSH
72334: LD_EXP 190
72338: PPUSH
72339: LD_VAR 0 6
72343: PPUSH
72344: LD_EXP 190
72348: PUSH
72349: LD_VAR 0 6
72353: ARRAY
72354: PPUSH
72355: LD_VAR 0 5
72359: PPUSH
72360: CALL_OW 3
72364: PPUSH
72365: CALL_OW 1
72369: ST_TO_ADDR
// exit ;
72370: POP
72371: POP
72372: GO 72565
// end ; end ;
72374: GO 72214
72376: POP
72377: POP
// for i := minerMinesList [ index ] downto 1 do
72378: LD_ADDR_VAR 0 5
72382: PUSH
72383: DOUBLE
72384: LD_EXP 190
72388: PUSH
72389: LD_VAR 0 6
72393: ARRAY
72394: INC
72395: ST_TO_ADDR
72396: LD_INT 1
72398: PUSH
72399: FOR_DOWNTO
72400: IFFALSE 72563
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
72402: LD_EXP 190
72406: PUSH
72407: LD_VAR 0 6
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 5
72417: ARRAY
72418: PUSH
72419: LD_INT 1
72421: ARRAY
72422: PPUSH
72423: LD_EXP 190
72427: PUSH
72428: LD_VAR 0 6
72432: ARRAY
72433: PUSH
72434: LD_VAR 0 5
72438: ARRAY
72439: PUSH
72440: LD_INT 2
72442: ARRAY
72443: PPUSH
72444: LD_VAR 0 2
72448: PPUSH
72449: LD_VAR 0 3
72453: PPUSH
72454: CALL_OW 298
72458: PUSH
72459: LD_INT 6
72461: LESS
72462: IFFALSE 72561
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
72464: LD_EXP 190
72468: PUSH
72469: LD_VAR 0 6
72473: ARRAY
72474: PUSH
72475: LD_VAR 0 5
72479: ARRAY
72480: PUSH
72481: LD_INT 1
72483: ARRAY
72484: PPUSH
72485: LD_EXP 190
72489: PUSH
72490: LD_VAR 0 6
72494: ARRAY
72495: PUSH
72496: LD_VAR 0 5
72500: ARRAY
72501: PUSH
72502: LD_INT 2
72504: ARRAY
72505: PPUSH
72506: LD_VAR 0 1
72510: PPUSH
72511: CALL_OW 255
72515: PPUSH
72516: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72520: LD_ADDR_EXP 190
72524: PUSH
72525: LD_EXP 190
72529: PPUSH
72530: LD_VAR 0 6
72534: PPUSH
72535: LD_EXP 190
72539: PUSH
72540: LD_VAR 0 6
72544: ARRAY
72545: PPUSH
72546: LD_VAR 0 5
72550: PPUSH
72551: CALL_OW 3
72555: PPUSH
72556: CALL_OW 1
72560: ST_TO_ADDR
// end ; end ;
72561: GO 72399
72563: POP
72564: POP
// end ;
72565: LD_VAR 0 4
72569: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72570: LD_INT 0
72572: PPUSH
72573: PPUSH
72574: PPUSH
72575: PPUSH
72576: PPUSH
72577: PPUSH
72578: PPUSH
72579: PPUSH
72580: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72581: LD_VAR 0 1
72585: PPUSH
72586: CALL_OW 264
72590: PUSH
72591: LD_EXP 110
72595: EQUAL
72596: NOT
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_EXP 189
72607: IN
72608: NOT
72609: OR
72610: IFFALSE 72614
// exit ;
72612: GO 72936
// index := GetElementIndex ( minersList , unit ) ;
72614: LD_ADDR_VAR 0 6
72618: PUSH
72619: LD_EXP 189
72623: PPUSH
72624: LD_VAR 0 1
72628: PPUSH
72629: CALL 18490 0 2
72633: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72634: LD_ADDR_VAR 0 8
72638: PUSH
72639: LD_EXP 191
72643: PUSH
72644: LD_EXP 190
72648: PUSH
72649: LD_VAR 0 6
72653: ARRAY
72654: MINUS
72655: ST_TO_ADDR
// if not minesFreeAmount then
72656: LD_VAR 0 8
72660: NOT
72661: IFFALSE 72665
// exit ;
72663: GO 72936
// tmp := [ ] ;
72665: LD_ADDR_VAR 0 7
72669: PUSH
72670: EMPTY
72671: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72672: LD_ADDR_VAR 0 5
72676: PUSH
72677: DOUBLE
72678: LD_INT 1
72680: DEC
72681: ST_TO_ADDR
72682: LD_VAR 0 8
72686: PUSH
72687: FOR_TO
72688: IFFALSE 72883
// begin _d := rand ( 0 , 5 ) ;
72690: LD_ADDR_VAR 0 11
72694: PUSH
72695: LD_INT 0
72697: PPUSH
72698: LD_INT 5
72700: PPUSH
72701: CALL_OW 12
72705: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72706: LD_ADDR_VAR 0 12
72710: PUSH
72711: LD_INT 2
72713: PPUSH
72714: LD_INT 6
72716: PPUSH
72717: CALL_OW 12
72721: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72722: LD_ADDR_VAR 0 9
72726: PUSH
72727: LD_VAR 0 2
72731: PPUSH
72732: LD_VAR 0 11
72736: PPUSH
72737: LD_VAR 0 12
72741: PPUSH
72742: CALL_OW 272
72746: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72747: LD_ADDR_VAR 0 10
72751: PUSH
72752: LD_VAR 0 3
72756: PPUSH
72757: LD_VAR 0 11
72761: PPUSH
72762: LD_VAR 0 12
72766: PPUSH
72767: CALL_OW 273
72771: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72772: LD_VAR 0 9
72776: PPUSH
72777: LD_VAR 0 10
72781: PPUSH
72782: CALL_OW 488
72786: PUSH
72787: LD_VAR 0 9
72791: PUSH
72792: LD_VAR 0 10
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_VAR 0 7
72805: IN
72806: NOT
72807: AND
72808: PUSH
72809: LD_VAR 0 9
72813: PPUSH
72814: LD_VAR 0 10
72818: PPUSH
72819: CALL_OW 458
72823: NOT
72824: AND
72825: IFFALSE 72867
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72827: LD_ADDR_VAR 0 7
72831: PUSH
72832: LD_VAR 0 7
72836: PPUSH
72837: LD_VAR 0 7
72841: PUSH
72842: LD_INT 1
72844: PLUS
72845: PPUSH
72846: LD_VAR 0 9
72850: PUSH
72851: LD_VAR 0 10
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PPUSH
72860: CALL_OW 1
72864: ST_TO_ADDR
72865: GO 72881
// i := i - 1 ;
72867: LD_ADDR_VAR 0 5
72871: PUSH
72872: LD_VAR 0 5
72876: PUSH
72877: LD_INT 1
72879: MINUS
72880: ST_TO_ADDR
// end ;
72881: GO 72687
72883: POP
72884: POP
// for i in tmp do
72885: LD_ADDR_VAR 0 5
72889: PUSH
72890: LD_VAR 0 7
72894: PUSH
72895: FOR_IN
72896: IFFALSE 72934
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72898: LD_VAR 0 1
72902: PPUSH
72903: LD_VAR 0 5
72907: PUSH
72908: LD_INT 1
72910: ARRAY
72911: PPUSH
72912: LD_VAR 0 5
72916: PUSH
72917: LD_INT 2
72919: ARRAY
72920: PPUSH
72921: CALL 71876 0 3
72925: NOT
72926: IFFALSE 72932
// exit ;
72928: POP
72929: POP
72930: GO 72936
72932: GO 72895
72934: POP
72935: POP
// end ;
72936: LD_VAR 0 4
72940: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
72941: LD_INT 0
72943: PPUSH
72944: PPUSH
72945: PPUSH
72946: PPUSH
72947: PPUSH
72948: PPUSH
72949: PPUSH
// if not GetClass ( unit ) = class_sniper then
72950: LD_VAR 0 1
72954: PPUSH
72955: CALL_OW 257
72959: PUSH
72960: LD_INT 5
72962: EQUAL
72963: NOT
72964: IFFALSE 72968
// exit ;
72966: GO 73356
// dist := 8 ;
72968: LD_ADDR_VAR 0 5
72972: PUSH
72973: LD_INT 8
72975: ST_TO_ADDR
// viewRange := 12 ;
72976: LD_ADDR_VAR 0 7
72980: PUSH
72981: LD_INT 12
72983: ST_TO_ADDR
// side := GetSide ( unit ) ;
72984: LD_ADDR_VAR 0 6
72988: PUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 255
72998: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72999: LD_INT 61
73001: PPUSH
73002: LD_VAR 0 6
73006: PPUSH
73007: CALL_OW 321
73011: PUSH
73012: LD_INT 2
73014: EQUAL
73015: IFFALSE 73025
// viewRange := 16 ;
73017: LD_ADDR_VAR 0 7
73021: PUSH
73022: LD_INT 16
73024: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
73025: LD_VAR 0 1
73029: PPUSH
73030: LD_VAR 0 2
73034: PPUSH
73035: LD_VAR 0 3
73039: PPUSH
73040: CALL_OW 297
73044: PUSH
73045: LD_VAR 0 5
73049: GREATER
73050: IFFALSE 73129
// begin ComMoveXY ( unit , x , y ) ;
73052: LD_VAR 0 1
73056: PPUSH
73057: LD_VAR 0 2
73061: PPUSH
73062: LD_VAR 0 3
73066: PPUSH
73067: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73071: LD_INT 35
73073: PPUSH
73074: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
73078: LD_VAR 0 1
73082: PPUSH
73083: LD_VAR 0 2
73087: PPUSH
73088: LD_VAR 0 3
73092: PPUSH
73093: CALL 49317 0 3
73097: NOT
73098: IFFALSE 73102
// exit ;
73100: GO 73356
// until GetDistUnitXY ( unit , x , y ) < dist ;
73102: LD_VAR 0 1
73106: PPUSH
73107: LD_VAR 0 2
73111: PPUSH
73112: LD_VAR 0 3
73116: PPUSH
73117: CALL_OW 297
73121: PUSH
73122: LD_VAR 0 5
73126: LESS
73127: IFFALSE 73071
// end ; ComTurnXY ( unit , x , y ) ;
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_VAR 0 2
73138: PPUSH
73139: LD_VAR 0 3
73143: PPUSH
73144: CALL_OW 118
// wait ( 5 ) ;
73148: LD_INT 5
73150: PPUSH
73151: CALL_OW 67
// _d := GetDir ( unit ) ;
73155: LD_ADDR_VAR 0 10
73159: PUSH
73160: LD_VAR 0 1
73164: PPUSH
73165: CALL_OW 254
73169: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
73170: LD_ADDR_VAR 0 8
73174: PUSH
73175: LD_VAR 0 1
73179: PPUSH
73180: CALL_OW 250
73184: PPUSH
73185: LD_VAR 0 10
73189: PPUSH
73190: LD_VAR 0 5
73194: PPUSH
73195: CALL_OW 272
73199: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
73200: LD_ADDR_VAR 0 9
73204: PUSH
73205: LD_VAR 0 1
73209: PPUSH
73210: CALL_OW 251
73214: PPUSH
73215: LD_VAR 0 10
73219: PPUSH
73220: LD_VAR 0 5
73224: PPUSH
73225: CALL_OW 273
73229: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73230: LD_VAR 0 8
73234: PPUSH
73235: LD_VAR 0 9
73239: PPUSH
73240: CALL_OW 488
73244: NOT
73245: IFFALSE 73249
// exit ;
73247: GO 73356
// ComAnimCustom ( unit , 1 ) ;
73249: LD_VAR 0 1
73253: PPUSH
73254: LD_INT 1
73256: PPUSH
73257: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
73261: LD_VAR 0 8
73265: PPUSH
73266: LD_VAR 0 9
73270: PPUSH
73271: LD_VAR 0 6
73275: PPUSH
73276: LD_VAR 0 7
73280: PPUSH
73281: CALL_OW 330
// repeat wait ( 1 ) ;
73285: LD_INT 1
73287: PPUSH
73288: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
73292: LD_VAR 0 1
73296: PPUSH
73297: CALL_OW 316
73301: PUSH
73302: LD_VAR 0 1
73306: PPUSH
73307: CALL_OW 314
73311: OR
73312: PUSH
73313: LD_VAR 0 1
73317: PPUSH
73318: CALL_OW 302
73322: NOT
73323: OR
73324: PUSH
73325: LD_VAR 0 1
73329: PPUSH
73330: CALL_OW 301
73334: OR
73335: IFFALSE 73285
// RemoveSeeing ( _x , _y , side ) ;
73337: LD_VAR 0 8
73341: PPUSH
73342: LD_VAR 0 9
73346: PPUSH
73347: LD_VAR 0 6
73351: PPUSH
73352: CALL_OW 331
// end ; end_of_file
73356: LD_VAR 0 4
73360: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73361: LD_VAR 0 1
73365: PUSH
73366: LD_INT 200
73368: DOUBLE
73369: GREATEREQUAL
73370: IFFALSE 73378
73372: LD_INT 299
73374: DOUBLE
73375: LESSEQUAL
73376: IFTRUE 73380
73378: GO 73412
73380: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73381: LD_VAR 0 1
73385: PPUSH
73386: LD_VAR 0 2
73390: PPUSH
73391: LD_VAR 0 3
73395: PPUSH
73396: LD_VAR 0 4
73400: PPUSH
73401: LD_VAR 0 5
73405: PPUSH
73406: CALL 69099 0 5
73410: GO 73489
73412: LD_INT 300
73414: DOUBLE
73415: GREATEREQUAL
73416: IFFALSE 73424
73418: LD_INT 399
73420: DOUBLE
73421: LESSEQUAL
73422: IFTRUE 73426
73424: GO 73488
73426: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73427: LD_VAR 0 1
73431: PPUSH
73432: LD_VAR 0 2
73436: PPUSH
73437: LD_VAR 0 3
73441: PPUSH
73442: LD_VAR 0 4
73446: PPUSH
73447: LD_VAR 0 5
73451: PPUSH
73452: LD_VAR 0 6
73456: PPUSH
73457: LD_VAR 0 7
73461: PPUSH
73462: LD_VAR 0 8
73466: PPUSH
73467: LD_VAR 0 9
73471: PPUSH
73472: LD_VAR 0 10
73476: PPUSH
73477: LD_VAR 0 11
73481: PPUSH
73482: CALL 66741 0 11
73486: GO 73489
73488: POP
// end ;
73489: PPOPN 11
73491: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73492: LD_VAR 0 1
73496: PPUSH
73497: LD_VAR 0 2
73501: PPUSH
73502: LD_VAR 0 3
73506: PPUSH
73507: LD_VAR 0 4
73511: PPUSH
73512: LD_VAR 0 5
73516: PPUSH
73517: CALL 68835 0 5
// end ;
73521: PPOPN 5
73523: END
