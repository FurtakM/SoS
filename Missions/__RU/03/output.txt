// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 42986 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2743 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 6362 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 85
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 34
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 88
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 89
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 42
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1312 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 51
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 43
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 3
 291: NOT
 292: PPUSH
 293: LD_EXP 4
 297: PPUSH
 298: CALL 9515 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 44
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 3
 315: NOT
 316: PPUSH
 317: LD_EXP 4
 321: PPUSH
 322: CALL 9515 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 46
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 3
 339: NOT
 340: PPUSH
 341: LD_EXP 4
 345: PPUSH
 346: CALL 9515 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 45
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 3
 363: NOT
 364: PPUSH
 365: LD_EXP 4
 369: PPUSH
 370: CALL 9515 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 47
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 3
 387: NOT
 388: PPUSH
 389: LD_EXP 4
 393: PPUSH
 394: CALL 9515 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 49
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 3
 411: NOT
 412: PPUSH
 413: LD_EXP 4
 417: PPUSH
 418: CALL 9515 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 50
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 3
 435: NOT
 436: PPUSH
 437: LD_EXP 4
 441: PPUSH
 442: CALL 9515 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 55
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 56
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 64
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 65
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 66
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 43
 524: PUSH
 525: LD_EXP 44
 529: PUSH
 530: LD_EXP 46
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 45
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 55
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 55
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 55
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 56
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 56
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 56
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 65
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 65
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 65
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 66
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 66
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 66
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 47
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 47
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 47
 758: PPUSH
 759: LD_EXP 55
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 43
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 43
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 43
 799: PPUSH
 800: LD_EXP 55
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 69
 813: PUSH
 814: LD_EXP 44
 818: PUSH
 819: LD_EXP 46
 823: PUSH
 824: LD_EXP 45
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 51
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 55
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 69
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 55
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_STRING 02_Beria
 963: PPUSH
 964: EMPTY
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 971: LD_ADDR_EXP 54
 975: PUSH
 976: LD_STRING 02_VehiclesCount
 978: PPUSH
 979: EMPTY
 980: PPUSH
 981: CALL_OW 30
 985: ST_TO_ADDR
// uc_side := 3 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// uc_nation := 3 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1002: LD_ADDR_OWVAR 37
1006: PUSH
1007: LD_INT 21
1009: ST_TO_ADDR
// vc_control = control_manual ;
1010: LD_ADDR_OWVAR 38
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// vc_engine = engine_combustion ;
1018: LD_ADDR_OWVAR 39
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1026: LD_ADDR_OWVAR 40
1030: PUSH
1031: LD_INT 42
1033: ST_TO_ADDR
// for i := 1 to beriaBase do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 52
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1173
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1052: LD_ADDR_OWVAR 42
1056: PUSH
1057: LD_EXP 52
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1072: LD_ADDR_OWVAR 43
1076: PUSH
1077: LD_EXP 52
1081: PUSH
1082: LD_VAR 0 2
1086: ARRAY
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: ST_TO_ADDR
// if bc_type = b_lab then
1092: LD_OWVAR 42
1096: PUSH
1097: LD_INT 6
1099: EQUAL
1100: IFFALSE 1118
// begin bc_kind1 := b_lab_basic ;
1102: LD_ADDR_OWVAR 44
1106: PUSH
1107: LD_INT 9
1109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1110: LD_ADDR_OWVAR 45
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1118: LD_EXP 52
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 3
1131: ARRAY
1132: PUSH
1133: LD_INT 46
1135: PLUS
1136: PPUSH
1137: LD_EXP 52
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 4
1150: ARRAY
1151: PPUSH
1152: LD_EXP 52
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 5
1165: ARRAY
1166: PPUSH
1167: CALL_OW 47
// end ;
1171: GO 1049
1173: POP
1174: POP
// for i := 1 to beriaVehs do
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_EXP 54
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1255
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_INT 20
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ARRAY
1227: ST_TO_ADDR
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1238: LD_VAR 0 3
1242: PPUSH
1243: LD_INT 11
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ;
1253: GO 1190
1255: POP
1256: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 30
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 1
1293: ARRAY
1294: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_STRING beria
1302: PPUSH
1303: CALL_OW 500
// end ;
1307: LD_VAR 0 1
1311: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1322: LD_ADDR_EXP 58
1326: PUSH
1327: LD_STRING 02_Kirov
1329: PPUSH
1330: EMPTY
1331: PPUSH
1332: CALL_OW 30
1336: ST_TO_ADDR
// uc_side := 6 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 6
1344: ST_TO_ADDR
// uc_nation := 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1353: LD_ADDR_EXP 57
1357: PUSH
1358: LD_STRING 02_kirovTeam
1360: PPUSH
1361: CALL_OW 31
1365: ST_TO_ADDR
// for i := 1 to kirovBase do
1366: LD_ADDR_VAR 0 2
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 58
1380: PUSH
1381: FOR_TO
1382: IFFALSE 1531
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1384: LD_ADDR_OWVAR 42
1388: PUSH
1389: LD_EXP 58
1393: PUSH
1394: LD_VAR 0 2
1398: ARRAY
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1404: LD_ADDR_OWVAR 43
1408: PUSH
1409: LD_EXP 58
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 2
1422: ARRAY
1423: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1424: LD_ADDR_VAR 0 6
1428: PUSH
1429: LD_EXP 58
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 3
1442: ARRAY
1443: PUSH
1444: LD_INT 46
1446: PLUS
1447: ST_TO_ADDR
// if x < 140 then
1448: LD_VAR 0 6
1452: PUSH
1453: LD_INT 140
1455: LESS
1456: IFFALSE 1468
// uc_side := 3 else
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 3
1465: ST_TO_ADDR
1466: GO 1476
// uc_side := 6 ;
1468: LD_ADDR_OWVAR 20
1472: PUSH
1473: LD_INT 6
1475: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1476: LD_EXP 58
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PUSH
1487: LD_INT 3
1489: ARRAY
1490: PUSH
1491: LD_INT 46
1493: PLUS
1494: PPUSH
1495: LD_EXP 58
1499: PUSH
1500: LD_VAR 0 2
1504: ARRAY
1505: PUSH
1506: LD_INT 4
1508: ARRAY
1509: PPUSH
1510: LD_EXP 58
1514: PUSH
1515: LD_VAR 0 2
1519: ARRAY
1520: PUSH
1521: LD_INT 5
1523: ARRAY
1524: PPUSH
1525: CALL_OW 47
// end ;
1529: GO 1381
1531: POP
1532: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1533: LD_ADDR_EXP 59
1537: PUSH
1538: LD_INT 22
1540: PUSH
1541: LD_INT 6
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PUSH
1567: LD_INT 1
1569: ARRAY
1570: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1571: LD_EXP 59
1575: PPUSH
1576: LD_STRING kirov
1578: PPUSH
1579: CALL_OW 500
// for i := 1 to 2 do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_INT 2
1595: PUSH
1596: FOR_TO
1597: IFFALSE 1623
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1599: LD_EXP 59
1603: PPUSH
1604: CALL_OW 274
1608: PPUSH
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 500
1616: PPUSH
1617: CALL_OW 277
1621: GO 1596
1623: POP
1624: POP
// tmp := otherKirovUnits ;
1625: LD_ADDR_VAR 0 4
1629: PUSH
1630: LD_EXP 57
1634: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1635: LD_ADDR_VAR 0 5
1639: PUSH
1640: LD_INT 22
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 30
1665: PUSH
1666: LD_INT 31
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1687: LD_ADDR_VAR 0 7
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_INT 1
1699: ARRAY
1700: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1701: LD_VAR 0 4
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 7
1714: PPUSH
1715: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1719: LD_ADDR_VAR 0 4
1723: PUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: CALL_OW 3
1736: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1737: LD_VAR 0 7
1741: PPUSH
1742: CALL_OW 313
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: IFFALSE 1770
// buildings := Delete ( buildings , 1 ) ;
1752: LD_ADDR_VAR 0 5
1756: PUSH
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: CALL_OW 3
1769: ST_TO_ADDR
// until not buildings or not tmp ;
1770: LD_VAR 0 5
1774: NOT
1775: PUSH
1776: LD_VAR 0 4
1780: NOT
1781: OR
1782: IFFALSE 1687
// if tmp then
1784: LD_VAR 0 4
1788: IFFALSE 1828
// begin for i in tmp do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_VAR 0 4
1799: PUSH
1800: FOR_IN
1801: IFFALSE 1826
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 164
1810: PPUSH
1811: LD_INT 109
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 50
1824: GO 1800
1826: POP
1827: POP
// end ; end ;
1828: LD_VAR 0 1
1832: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
1837: PPUSH
1838: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 32
1846: PUSH
1847: LD_INT 146
1849: PUSH
1850: LD_INT 106
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 32
1864: PUSH
1865: LD_INT 175
1867: PUSH
1868: LD_INT 123
1870: PUSH
1871: LD_INT 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 32
1882: PUSH
1883: LD_INT 170
1885: PUSH
1886: LD_INT 101
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 32
1900: PUSH
1901: LD_INT 172
1903: PUSH
1904: LD_INT 104
1906: PUSH
1907: LD_INT 4
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 32
1918: PUSH
1919: LD_INT 179
1921: PUSH
1922: LD_INT 118
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 26
1936: PUSH
1937: LD_INT 159
1939: PUSH
1940: LD_INT 96
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1960: LD_ADDR_EXP 70
1964: PUSH
1965: LD_INT 22
1967: PUSH
1968: LD_INT 6
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 25
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2005: LD_ADDR_EXP 61
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 3
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 6
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2054: LD_ADDR_EXP 62
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 6
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 30
2081: PUSH
2082: LD_INT 4
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2099: LD_ADDR_EXP 63
2103: PUSH
2104: LD_INT 22
2106: PUSH
2107: LD_INT 6
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 21
2116: PUSH
2117: LD_INT 3
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 2
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2148: LD_ADDR_VAR 0 3
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 6
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 21
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 25
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PPUSH
2188: CALL_OW 69
2192: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2193: LD_VAR 0 3
2197: PPUSH
2198: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_EXP 63
2211: PPUSH
2212: CALL_OW 180
// wait ( 0 0$1 ) ;
2216: LD_INT 35
2218: PPUSH
2219: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2223: LD_ADDR_VAR 0 3
2227: PUSH
2228: LD_INT 22
2230: PUSH
2231: LD_INT 6
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 25
2250: PUSH
2251: LD_INT 4
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 61
2277: PPUSH
2278: CALL_OW 180
// for i in kirovBuildingArray do
2282: LD_ADDR_VAR 0 2
2286: PUSH
2287: LD_VAR 0 4
2291: PUSH
2292: FOR_IN
2293: IFFALSE 2342
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2295: LD_EXP 70
2299: PPUSH
2300: LD_VAR 0 2
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PPUSH
2309: LD_VAR 0 2
2313: PUSH
2314: LD_INT 2
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 2
2322: PUSH
2323: LD_INT 3
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_INT 4
2334: ARRAY
2335: PPUSH
2336: CALL_OW 205
2340: GO 2292
2342: POP
2343: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2344: LD_ADDR_EXP 2
2348: PUSH
2349: LD_EXP 61
2353: PUSH
2354: LD_EXP 62
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PUSH
2363: LD_EXP 62
2367: PUSH
2368: LD_INT 2
2370: ARRAY
2371: PUSH
2372: LD_EXP 59
2376: PUSH
2377: LD_EXP 63
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: ST_TO_ADDR
// end ;
2389: LD_VAR 0 1
2393: RET
// export function PrepareScholtze ; begin
2394: LD_INT 0
2396: PPUSH
// uc_side := 5 ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_INT 5
2404: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2405: LD_ADDR_EXP 67
2409: PUSH
2410: LD_STRING Scholtze
2412: PPUSH
2413: CALL_OW 25
2417: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2418: LD_ADDR_EXP 68
2422: PUSH
2423: LD_STRING Scholtze
2425: PPUSH
2426: CALL_OW 25
2430: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2431: LD_EXP 67
2435: PPUSH
2436: LD_INT 12
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 49
// end ; end_of_file
2446: LD_VAR 0 1
2450: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
// amIntroUnits = [ ] ;
2457: LD_ADDR_EXP 74
2461: PUSH
2462: EMPTY
2463: ST_TO_ADDR
// uc_side = 1 ;
2464: LD_ADDR_OWVAR 20
2468: PUSH
2469: LD_INT 1
2471: ST_TO_ADDR
// uc_nation = nation_american ;
2472: LD_ADDR_OWVAR 21
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2480: LD_ADDR_OWVAR 37
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// vc_control = control_manual ;
2488: LD_ADDR_OWVAR 38
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// vc_engine = engine_combustion ;
2496: LD_ADDR_OWVAR 39
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2504: LD_ADDR_OWVAR 40
2508: PUSH
2509: LD_INT 3
2511: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2512: LD_ADDR_OWVAR 41
2516: PUSH
2517: LD_INT 100
2519: ST_TO_ADDR
// veh = CreateVehicle ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: CALL_OW 45
2529: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2530: LD_VAR 0 3
2534: PPUSH
2535: LD_INT 4
2537: PPUSH
2538: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2542: LD_ADDR_EXP 74
2546: PUSH
2547: LD_EXP 74
2551: PUSH
2552: LD_VAR 0 3
2556: ADD
2557: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 7
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 49
// for i := 1 to 3 do
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: DOUBLE
2579: LD_INT 1
2581: DEC
2582: ST_TO_ADDR
2583: LD_INT 3
2585: PUSH
2586: FOR_TO
2587: IFFALSE 2708
// begin hc_name :=  ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING 
2596: ST_TO_ADDR
// hc_gallery :=  ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING 
2604: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2605: LD_INT 0
2607: PPUSH
2608: LD_EXP 42
2612: PPUSH
2613: CALL_OW 381
// human = CreateHuman ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2627: LD_ADDR_EXP 74
2631: PUSH
2632: LD_EXP 74
2636: PUSH
2637: LD_VAR 0 4
2641: ADD
2642: ST_TO_ADDR
// if i < 3 then
2643: LD_VAR 0 2
2647: PUSH
2648: LD_INT 3
2650: LESS
2651: IFFALSE 2670
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2653: LD_VAR 0 4
2657: PPUSH
2658: LD_INT 7
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
2668: GO 2706
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_EXP 42
2677: PPUSH
2678: CALL_OW 383
// human = CreateHuman ;
2682: LD_ADDR_VAR 0 4
2686: PUSH
2687: CALL_OW 44
2691: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2692: LD_VAR 0 4
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: CALL_OW 52
// end ; end ;
2706: GO 2586
2708: POP
2709: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2710: LD_INT 120
2712: PPUSH
2713: LD_INT 36
2715: PPUSH
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2723: LD_EXP 74
2727: PPUSH
2728: LD_INT 26
2730: PPUSH
2731: LD_INT 34
2733: PPUSH
2734: CALL_OW 111
// end ;
2738: LD_VAR 0 1
2742: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2751: LD_ADDR_EXP 75
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 5
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_OWVAR 67
2778: ARRAY
2779: PUSH
2780: LD_INT 0
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: LD_INT 1
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 2
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: LD_OWVAR 67
2826: ARRAY
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: LD_INT 2
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: LD_INT 1
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: LD_OWVAR 67
2874: ARRAY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 3
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: LD_INT 5
2891: PUSH
2892: LD_INT 6
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_OWVAR 67
2905: ARRAY
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 1
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_OWVAR 67
2929: ARRAY
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_OWVAR 67
2953: ARRAY
2954: PUSH
2955: LD_INT 1
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: LD_INT 2
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_OWVAR 67
3001: ARRAY
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 1
3012: PUSH
3013: LD_INT 2
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 4
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: PUSH
3028: LD_OWVAR 67
3032: ARRAY
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: PUSH
3052: LD_OWVAR 67
3056: ARRAY
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_OWVAR 67
3080: ARRAY
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 2
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_OWVAR 67
3104: ARRAY
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: LD_INT 1
3114: PUSH
3115: LD_INT 2
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: PUSH
3124: LD_OWVAR 67
3128: ARRAY
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 4
3142: PUSH
3143: LD_INT 6
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 2
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_OWVAR 67
3183: ARRAY
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 3
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 3
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: LD_OWVAR 67
3231: ARRAY
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: LD_INT 1
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: LD_OWVAR 67
3255: ARRAY
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3270: LD_ADDR_VAR 0 6
3274: PUSH
3275: LD_INT 1
3277: PUSH
3278: LD_INT 20
3280: PUSH
3281: LD_INT 33
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 29
3295: PUSH
3296: LD_INT 38
3298: PUSH
3299: LD_INT 30
3301: PUSH
3302: LD_INT 5
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 34
3316: PUSH
3317: LD_INT 25
3319: PUSH
3320: LD_INT 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 5
3331: PUSH
3332: LD_INT 35
3334: PUSH
3335: LD_INT 45
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 6
3349: PUSH
3350: LD_INT 27
3352: PUSH
3353: LD_INT 27
3355: PUSH
3356: LD_INT 3
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 6
3367: PUSH
3368: LD_INT 15
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 31
3385: PUSH
3386: LD_INT 25
3388: PUSH
3389: LD_INT 8
3391: PUSH
3392: LD_INT 5
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 32
3403: PUSH
3404: LD_INT 37
3406: PUSH
3407: LD_INT 35
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: LD_INT 32
3421: PUSH
3422: LD_INT 42
3424: PUSH
3425: LD_INT 45
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 32
3439: PUSH
3440: LD_INT 29
3442: PUSH
3443: LD_INT 17
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 32
3457: PUSH
3458: LD_INT 30
3460: PUSH
3461: LD_INT 53
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 32
3475: PUSH
3476: LD_INT 42
3478: PUSH
3479: LD_INT 56
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 32
3493: PUSH
3494: LD_INT 30
3496: PUSH
3497: LD_INT 20
3499: PUSH
3500: LD_INT 4
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 27
3511: PUSH
3512: LD_INT 7
3514: PUSH
3515: LD_INT 8
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 27
3529: PUSH
3530: LD_INT 10
3532: PUSH
3533: LD_INT 8
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 27
3547: PUSH
3548: LD_INT 13
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 26
3565: PUSH
3566: LD_INT 23
3568: PUSH
3569: LD_INT 42
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: LD_INT 13
3586: PUSH
3587: LD_INT 14
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 19
3601: PUSH
3602: LD_INT 10
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 17
3619: PUSH
3620: LD_INT 9
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 16
3637: PUSH
3638: LD_INT 13
3640: PUSH
3641: LD_INT 17
3643: PUSH
3644: LD_INT 0
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// for i in omiBuildingArray do
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: LD_VAR 0 6
3685: PUSH
3686: FOR_IN
3687: IFFALSE 3743
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3689: LD_INT 1
3691: PPUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_INT 5
3697: PPUSH
3698: LD_VAR 0 2
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_VAR 0 2
3711: PUSH
3712: LD_INT 2
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 2
3720: PUSH
3721: LD_INT 3
3723: ARRAY
3724: PPUSH
3725: LD_VAR 0 2
3729: PUSH
3730: LD_INT 4
3732: ARRAY
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL 50043 0 8
3741: GO 3686
3743: POP
3744: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3745: LD_ADDR_EXP 73
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 30
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3783: LD_EXP 73
3787: PPUSH
3788: LD_STRING omikron
3790: PPUSH
3791: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3795: LD_ADDR_EXP 77
3799: PUSH
3800: LD_INT 22
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 30
3812: PUSH
3813: LD_INT 5
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3829: LD_ADDR_EXP 76
3833: PUSH
3834: LD_INT 22
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 30
3846: PUSH
3847: LD_INT 6
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3863: LD_ADDR_EXP 78
3867: PUSH
3868: LD_INT 22
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 30
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 69
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: ST_TO_ADDR
// for i := 1 to 2 do
3901: LD_ADDR_VAR 0 2
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3941
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3917: LD_EXP 73
3921: PPUSH
3922: CALL_OW 274
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 500
3934: PPUSH
3935: CALL_OW 277
3939: GO 3914
3941: POP
3942: POP
// uc_side := 1 ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_INT 1
3950: ST_TO_ADDR
// uc_nation := 1 ;
3951: LD_ADDR_OWVAR 21
3955: PUSH
3956: LD_INT 1
3958: ST_TO_ADDR
// omicronSquad := [ ] ;
3959: LD_ADDR_EXP 71
3963: PUSH
3964: EMPTY
3965: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: LD_INT 22
3973: PUSH
3974: LD_INT 1
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: LD_INT 30
3986: PUSH
3987: LD_INT 32
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 30
3996: PUSH
3997: LD_INT 31
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: PUSH
4018: FOR_IN
4019: IFFALSE 4138
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 3
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: PUSH
4041: LD_OWVAR 67
4045: ARRAY
4046: PPUSH
4047: CALL_OW 380
// un := CreateHuman ;
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: CALL_OW 44
4060: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4061: LD_ADDR_EXP 71
4065: PUSH
4066: LD_EXP 71
4070: PUSH
4071: LD_VAR 0 3
4075: UNION
4076: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4077: LD_VAR 0 3
4081: PPUSH
4082: LD_VAR 0 2
4086: PPUSH
4087: CALL_OW 254
4091: PUSH
4092: LD_INT 3
4094: MINUS
4095: PPUSH
4096: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4100: LD_VAR 0 3
4104: PPUSH
4105: LD_VAR 0 2
4109: PPUSH
4110: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4114: LD_VAR 0 2
4118: PPUSH
4119: LD_VAR 0 2
4123: PPUSH
4124: LD_INT 8
4126: PPUSH
4127: CALL 19619 0 2
4131: PPUSH
4132: CALL_OW 431
// end ;
4136: GO 4018
4138: POP
4139: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4228
// begin PrepareHuman ( false , 2 , 2 ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 2
4178: PPUSH
4179: LD_INT 2
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4196: LD_ADDR_EXP 71
4200: PUSH
4201: LD_EXP 71
4205: PUSH
4206: LD_VAR 0 3
4210: UNION
4211: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4212: LD_VAR 0 3
4216: PPUSH
4217: LD_EXP 73
4221: PPUSH
4222: CALL_OW 52
// end ;
4226: GO 4170
4228: POP
4229: POP
// for i := 1 to 2 do
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: DOUBLE
4236: LD_INT 1
4238: DEC
4239: ST_TO_ADDR
4240: LD_INT 2
4242: PUSH
4243: FOR_TO
4244: IFFALSE 4410
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4246: LD_INT 2
4248: PUSH
4249: LD_INT 3
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_VAR 0 2
4260: ARRAY
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_VAR 0 2
4282: ARRAY
4283: PPUSH
4284: LD_INT 100
4286: PPUSH
4287: CALL 14379 0 5
// veh := CreateVehicle ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: CALL_OW 45
4300: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 28
4308: PPUSH
4309: LD_INT 37
4311: PPUSH
4312: LD_INT 6
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 3
4327: PPUSH
4328: LD_INT 2
4330: PPUSH
4331: CALL_OW 380
// un := CreateHuman ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: CALL_OW 44
4344: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4345: LD_ADDR_EXP 71
4349: PUSH
4350: LD_EXP 71
4354: PUSH
4355: LD_VAR 0 3
4359: UNION
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_VAR 0 5
4370: PPUSH
4371: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4375: LD_VAR 0 3
4379: PPUSH
4380: LD_VAR 0 3
4384: PPUSH
4385: CALL_OW 250
4389: PUSH
4390: LD_INT 3
4392: PLUS
4393: PPUSH
4394: LD_VAR 0 3
4398: PPUSH
4399: CALL_OW 251
4403: PPUSH
4404: CALL_OW 111
// end ;
4408: GO 4243
4410: POP
4411: POP
// end ;
4412: LD_VAR 0 1
4416: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4417: LD_INT 0
4419: PPUSH
4420: PPUSH
4421: PPUSH
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
// uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// hc_name :=  ;
4445: LD_ADDR_OWVAR 26
4449: PUSH
4450: LD_STRING 
4452: ST_TO_ADDR
// hc_gallery :=  ;
4453: LD_ADDR_OWVAR 33
4457: PUSH
4458: LD_STRING 
4460: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4461: LD_ADDR_VAR 0 8
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_VAR 0 1
4475: PUSH
4476: FOR_TO
4477: IFFALSE 4552
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4479: LD_INT 0
4481: PPUSH
4482: LD_EXP 42
4486: PPUSH
4487: CALL_OW 381
// un = CreateHuman ;
4491: LD_ADDR_VAR 0 9
4495: PUSH
4496: CALL_OW 44
4500: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4501: LD_ADDR_EXP 80
4505: PUSH
4506: LD_EXP 80
4510: PUSH
4511: LD_VAR 0 9
4515: ADD
4516: ST_TO_ADDR
// sols := sols ^ un ;
4517: LD_ADDR_VAR 0 12
4521: PUSH
4522: LD_VAR 0 12
4526: PUSH
4527: LD_VAR 0 9
4531: ADD
4532: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4533: LD_VAR 0 9
4537: PPUSH
4538: LD_VAR 0 6
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: CALL_OW 49
// end ;
4550: GO 4476
4552: POP
4553: POP
// for i := 1 to engsAmount do
4554: LD_ADDR_VAR 0 8
4558: PUSH
4559: DOUBLE
4560: LD_INT 1
4562: DEC
4563: ST_TO_ADDR
4564: LD_VAR 0 2
4568: PUSH
4569: FOR_TO
4570: IFFALSE 4645
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_EXP 42
4579: PPUSH
4580: CALL_OW 382
// un = CreateHuman ;
4584: LD_ADDR_VAR 0 9
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4594: LD_ADDR_EXP 80
4598: PUSH
4599: LD_EXP 80
4603: PUSH
4604: LD_VAR 0 9
4608: ADD
4609: ST_TO_ADDR
// engs := engs ^ un ;
4610: LD_ADDR_VAR 0 13
4614: PUSH
4615: LD_VAR 0 13
4619: PUSH
4620: LD_VAR 0 9
4624: ADD
4625: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4626: LD_VAR 0 9
4630: PPUSH
4631: LD_VAR 0 6
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: CALL_OW 49
// end ;
4643: GO 4569
4645: POP
4646: POP
// for i := 1 to mechsAmount do
4647: LD_ADDR_VAR 0 8
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_VAR 0 3
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4738
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4665: LD_INT 0
4667: PPUSH
4668: LD_EXP 42
4672: PPUSH
4673: CALL_OW 383
// un = CreateHuman ;
4677: LD_ADDR_VAR 0 9
4681: PUSH
4682: CALL_OW 44
4686: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4687: LD_ADDR_EXP 80
4691: PUSH
4692: LD_EXP 80
4696: PUSH
4697: LD_VAR 0 9
4701: ADD
4702: ST_TO_ADDR
// mechs := mechs ^ un ;
4703: LD_ADDR_VAR 0 14
4707: PUSH
4708: LD_VAR 0 14
4712: PUSH
4713: LD_VAR 0 9
4717: ADD
4718: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4719: LD_VAR 0 9
4723: PPUSH
4724: LD_VAR 0 6
4728: PPUSH
4729: LD_INT 0
4731: PPUSH
4732: CALL_OW 49
// end ;
4736: GO 4662
4738: POP
4739: POP
// for i := 1 to scientistsAmount do
4740: LD_ADDR_VAR 0 8
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_VAR 0 4
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4831
// begin PrepareScientist ( false , enemySkillLevel ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_EXP 42
4765: PPUSH
4766: CALL_OW 384
// un = CreateHuman ;
4770: LD_ADDR_VAR 0 9
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4780: LD_ADDR_EXP 80
4784: PUSH
4785: LD_EXP 80
4789: PUSH
4790: LD_VAR 0 9
4794: ADD
4795: ST_TO_ADDR
// scis := scis ^ un ;
4796: LD_ADDR_VAR 0 15
4800: PUSH
4801: LD_VAR 0 15
4805: PUSH
4806: LD_VAR 0 9
4810: ADD
4811: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4812: LD_VAR 0 9
4816: PPUSH
4817: LD_VAR 0 6
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// end ;
4829: GO 4755
4831: POP
4832: POP
// for i := 1 to vehiclesAmount do
4833: LD_ADDR_VAR 0 8
4837: PUSH
4838: DOUBLE
4839: LD_INT 1
4841: DEC
4842: ST_TO_ADDR
4843: LD_VAR 0 5
4847: PUSH
4848: FOR_TO
4849: IFFALSE 5031
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4851: LD_ADDR_OWVAR 40
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 1
4872: PPUSH
4873: LD_INT 3
4875: PPUSH
4876: CALL_OW 12
4880: ARRAY
4881: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4882: LD_ADDR_OWVAR 37
4886: PUSH
4887: LD_INT 3
4889: ST_TO_ADDR
// vc_control = control_manual ;
4890: LD_ADDR_OWVAR 38
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// vc_engine = engine_combustion ;
4898: LD_ADDR_OWVAR 39
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// veh = CreateVehicle ;
4906: LD_ADDR_VAR 0 10
4910: PUSH
4911: CALL_OW 45
4915: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
4916: LD_ADDR_EXP 80
4920: PUSH
4921: LD_EXP 80
4925: PUSH
4926: LD_VAR 0 10
4930: ADD
4931: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4932: LD_VAR 0 10
4936: PPUSH
4937: LD_VAR 0 6
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4949: LD_INT 0
4951: PPUSH
4952: LD_EXP 42
4956: PPUSH
4957: CALL_OW 383
// un = CreateHuman ;
4961: LD_ADDR_VAR 0 9
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
4971: LD_ADDR_EXP 80
4975: PUSH
4976: LD_EXP 80
4980: PUSH
4981: LD_VAR 0 9
4985: ADD
4986: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
4987: LD_ADDR_EXP 79
4991: PUSH
4992: LD_EXP 79
4996: PUSH
4997: LD_VAR 0 10
5001: ADD
5002: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5003: LD_VAR 0 9
5007: PPUSH
5008: LD_VAR 0 10
5012: PPUSH
5013: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5017: LD_VAR 0 10
5021: PPUSH
5022: LD_INT 100
5024: PPUSH
5025: CALL_OW 240
// end ;
5029: GO 4848
5031: POP
5032: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5033: LD_EXP 80
5037: PPUSH
5038: LD_INT 25
5040: PPUSH
5041: LD_INT 31
5043: PPUSH
5044: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5048: LD_EXP 79
5052: PPUSH
5053: LD_INT 95
5055: PUSH
5056: LD_INT 44
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: PPUSH
5066: CALL 48900 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5070: LD_VAR 0 12
5074: PPUSH
5075: LD_EXP 77
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_EXP 77
5088: PUSH
5089: LD_INT 2
5091: ARRAY
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 2
5102: PPUSH
5103: CALL_OW 12
5107: ARRAY
5108: PPUSH
5109: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5113: LD_VAR 0 13
5117: PPUSH
5118: LD_EXP 73
5122: PPUSH
5123: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5127: LD_VAR 0 14
5131: PPUSH
5132: LD_EXP 78
5136: PPUSH
5137: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5141: LD_VAR 0 15
5145: PPUSH
5146: LD_EXP 76
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PUSH
5155: LD_EXP 76
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 1
5170: PPUSH
5171: LD_INT 2
5173: PPUSH
5174: CALL_OW 12
5178: ARRAY
5179: PPUSH
5180: CALL_OW 180
// amConvoyTroops :=  ;
5184: LD_ADDR_EXP 80
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// sols :=  ;
5192: LD_ADDR_VAR 0 12
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// engs :=  ;
5200: LD_ADDR_VAR 0 13
5204: PUSH
5205: LD_STRING 
5207: ST_TO_ADDR
// mechs :=  ;
5208: LD_ADDR_VAR 0 14
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// scis :=  ;
5216: LD_ADDR_VAR 0 15
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 7
5228: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5229: LD_INT 0
5231: PPUSH
5232: PPUSH
// for i := 1 to amVehs do
5233: LD_ADDR_VAR 0 2
5237: PUSH
5238: DOUBLE
5239: LD_INT 1
5241: DEC
5242: ST_TO_ADDR
5243: LD_EXP 79
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5292
// begin if GetType ( i ) = unit_vehicle then
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 247
5260: PUSH
5261: LD_INT 2
5263: EQUAL
5264: IFFALSE 5278
// SetFuel ( i , 100 ) ;
5266: LD_VAR 0 2
5270: PPUSH
5271: LD_INT 100
5273: PPUSH
5274: CALL_OW 240
// SetLives ( i , 100 ) ;
5278: LD_VAR 0 2
5282: PPUSH
5283: LD_INT 100
5285: PPUSH
5286: CALL_OW 234
// end ;
5290: GO 5248
5292: POP
5293: POP
// for i := 1 to amIntroUnits do
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_EXP 74
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5353
// begin if GetType ( i ) = unit_vehicle then
5312: LD_VAR 0 2
5316: PPUSH
5317: CALL_OW 247
5321: PUSH
5322: LD_INT 2
5324: EQUAL
5325: IFFALSE 5339
// SetFuel ( i , 100 ) ;
5327: LD_VAR 0 2
5331: PPUSH
5332: LD_INT 100
5334: PPUSH
5335: CALL_OW 240
// SetLives ( i , 100 ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 100
5346: PPUSH
5347: CALL_OW 234
// end ;
5351: GO 5309
5353: POP
5354: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5355: LD_EXP 74
5359: PPUSH
5360: LD_INT 65
5362: PUSH
5363: LD_INT 91
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 97
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL 48900 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5388: LD_EXP 79
5392: PPUSH
5393: LD_INT 65
5395: PUSH
5396: LD_INT 91
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 109
5405: PUSH
5406: LD_INT 97
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL 48900 0 2
// end ; end_of_file end_of_file
5421: LD_VAR 0 1
5425: RET
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 ;
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 255
5442: PUSH
5443: LD_INT 6
5445: EQUAL
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 266
5456: PUSH
5457: LD_INT 32
5459: EQUAL
5460: PUSH
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 266
5470: PUSH
5471: LD_INT 4
5473: EQUAL
5474: OR
5475: AND
5476: IFFALSE 5624
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 6
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 21
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 25
5505: PUSH
5506: LD_INT 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 54
5515: PUSH
5516: EMPTY
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: ST_TO_ADDR
// for un in sols do
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: LD_VAR 0 5
5539: PUSH
5540: FOR_IN
5541: IFFALSE 5592
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 310
5552: PPUSH
5553: CALL_OW 266
5557: PUSH
5558: LD_INT 32
5560: EQUAL
5561: IFFALSE 5565
// continue ;
5563: GO 5540
// ComExit ( un ) ;
5565: LD_VAR 0 2
5569: PPUSH
5570: CALL 46692 0 1
// AddComEnterUnit ( un , building ) ;
5574: LD_VAR 0 2
5578: PPUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 180
// break ;
5588: GO 5592
// end ;
5590: GO 5540
5592: POP
5593: POP
// if labT1 = false then
5594: LD_VAR 0 6
5598: PUSH
5599: LD_INT 0
5601: EQUAL
5602: IFFALSE 5624
// begin labT1 = true ;
5604: LD_ADDR_VAR 0 6
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5612: LD_EXP 61
5616: PPUSH
5617: LD_INT 10
5619: PPUSH
5620: CALL_OW 207
// end ; end ; end ;
5624: PPOPN 6
5626: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers ;
5627: LD_INT 0
5629: PPUSH
5630: PPUSH
5631: PPUSH
5632: PPUSH
5633: PPUSH
// begin if GetSide ( building ) = 3 then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 255
5643: PUSH
5644: LD_INT 3
5646: EQUAL
5647: IFFALSE 6082
// begin dialog_workshop = true ;
5649: LD_ADDR_EXP 16
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
5657: LD_INT 22
5659: PUSH
5660: LD_INT 3
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 30
5669: PUSH
5670: LD_INT 26
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PPUSH
5681: CALL_OW 69
5685: NOT
5686: IFFALSE 6075
// begin CenterNowOnUnits ( building ) ;
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 87
// DialogueOn ;
5697: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
5701: LD_EXP 43
5705: PPUSH
5706: LD_STRING D3aa-Bur-1
5708: PPUSH
5709: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
5713: LD_EXP 67
5717: PPUSH
5718: CALL_OW 302
5722: PUSH
5723: LD_EXP 67
5727: PPUSH
5728: CALL_OW 255
5732: PUSH
5733: LD_INT 3
5735: EQUAL
5736: AND
5737: IFFALSE 5753
// Say ( Scholtze , D3aa-Sch-1 ) else
5739: LD_EXP 67
5743: PPUSH
5744: LD_STRING D3aa-Sch-1
5746: PPUSH
5747: CALL_OW 88
5751: GO 6059
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5753: LD_ADDR_VAR 0 5
5757: PUSH
5758: LD_INT 22
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 21
5770: PUSH
5771: LD_INT 1
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 25
5780: PUSH
5781: LD_INT 4
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 26
5790: PUSH
5791: LD_INT 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 50
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PPUSH
5811: CALL_OW 69
5815: PUSH
5816: LD_EXP 43
5820: PUSH
5821: LD_EXP 44
5825: PUSH
5826: LD_EXP 46
5830: PUSH
5831: LD_EXP 47
5835: PUSH
5836: LD_EXP 48
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: DIFF
5848: ST_TO_ADDR
// if maleSci then
5849: LD_VAR 0 5
5853: IFFALSE 5873
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
5855: LD_VAR 0 5
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: PPUSH
5864: LD_STRING D3aa-Sci1-1
5866: PPUSH
5867: CALL_OW 88
5871: GO 6059
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 3
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 26
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: LD_INT 50
5910: PUSH
5911: EMPTY
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_EXP 43
5929: PUSH
5930: LD_EXP 44
5934: PUSH
5935: LD_EXP 46
5939: PUSH
5940: LD_EXP 47
5944: PUSH
5945: LD_EXP 48
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if maleOthers then
5958: LD_VAR 0 6
5962: IFFALSE 5982
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
5964: LD_VAR 0 6
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_STRING D3aa-Sci1-1
5975: PPUSH
5976: CALL_OW 88
5980: GO 6059
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 26
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: LD_EXP 43
6038: PUSH
6039: EMPTY
6040: LIST
6041: DIFF
6042: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6043: LD_VAR 0 6
6047: PUSH
6048: LD_INT 1
6050: ARRAY
6051: PPUSH
6052: LD_STRING D3aa-Sci1-1
6054: PPUSH
6055: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6059: LD_EXP 43
6063: PPUSH
6064: LD_STRING D3aa-Bur-2
6066: PPUSH
6067: CALL_OW 88
// DialogueOff ;
6071: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6075: LD_STRING M3
6077: PPUSH
6078: CALL_OW 337
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 255
6091: PUSH
6092: LD_INT 6
6094: EQUAL
6095: PUSH
6096: LD_EXP 2
6100: PPUSH
6101: CALL 50021 0 1
6105: PUSH
6106: LD_INT 0
6108: GREATER
6109: AND
6110: IFFALSE 6200
// begin if comArray [ 1 ] = kirovLab then
6112: LD_EXP 2
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PUSH
6121: LD_EXP 61
6125: EQUAL
6126: IFFALSE 6146
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6128: LD_EXP 2
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: LD_INT 10
6139: PPUSH
6140: CALL_OW 207
6144: GO 6159
// AddComUpgrade ( comArray [ 1 ] ) ;
6146: LD_EXP 2
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6159: LD_ADDR_EXP 2
6163: PUSH
6164: LD_EXP 2
6168: PUSH
6169: LD_EXP 2
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: DIFF
6178: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6179: LD_INT 35
6181: PPUSH
6182: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6186: LD_EXP 70
6190: PPUSH
6191: LD_VAR 0 1
6195: PPUSH
6196: CALL 17472 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 255
6209: PUSH
6210: LD_INT 6
6212: EQUAL
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_INT 3
6226: EQUAL
6227: AND
6228: PUSH
6229: LD_VAR 0 1
6233: PPUSH
6234: CALL_OW 266
6238: PUSH
6239: LD_INT 2
6241: EQUAL
6242: OR
6243: IFFALSE 6338
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6245: LD_ADDR_VAR 0 3
6249: PUSH
6250: LD_INT 22
6252: PUSH
6253: LD_INT 6
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 21
6262: PUSH
6263: LD_INT 3
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 30
6272: PUSH
6273: LD_INT 32
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// for i in un do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 3
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6336
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: LD_INT 42
6310: PUSH
6311: LD_INT 43
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 1
6320: PPUSH
6321: LD_INT 2
6323: PPUSH
6324: CALL_OW 12
6328: ARRAY
6329: PPUSH
6330: CALL_OW 208
6334: GO 6300
6336: POP
6337: POP
// end ; end ;
6338: PPOPN 6
6340: END
// on BuildingStarted ( building , hum ) do var un , i ;
6341: LD_INT 0
6343: PPUSH
6344: PPUSH
// begin AddComComplete ( kirovEngs , building ) ;
6345: LD_EXP 70
6349: PPUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL 17472 0 2
// end ; end_of_file
6359: PPOPN 4
6361: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export function MissionIntro ; var i , un , selectedPeople ; begin
6362: LD_INT 0
6364: PPUSH
6365: PPUSH
6366: PPUSH
6367: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6368: LD_EXP 43
6372: PUSH
6373: LD_EXP 55
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
6386: LD_ADDR_EXP 87
6390: PUSH
6391: LD_INT 350
6393: PUSH
6394: LD_INT 31500
6396: PUSH
6397: LD_INT 42000
6399: PUSH
6400: LD_INT 52500
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
6409: LD_ADDR_EXP 83
6413: PUSH
6414: LD_STRING D3a-RSol1-1
6416: PUSH
6417: LD_STRING D3b-RSol1-1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: ST_TO_ADDR
// if not Belkov then
6424: LD_EXP 47
6428: NOT
6429: IFFALSE 6505
// begin Say ( Kurin , D1a-Kur-1 ) ;
6431: LD_EXP 55
6435: PPUSH
6436: LD_STRING D1a-Kur-1
6438: PPUSH
6439: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
6443: LD_EXP 43
6447: PPUSH
6448: LD_STRING D1a-Bur-1
6450: PPUSH
6451: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6455: LD_EXP 55
6459: PPUSH
6460: LD_STRING D1a-Kur-2
6462: PPUSH
6463: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6467: LD_EXP 55
6471: PPUSH
6472: LD_STRING D1a-Kur-2a
6474: PPUSH
6475: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6479: LD_EXP 55
6483: PPUSH
6484: LD_STRING D1a-Kur-2b
6486: PPUSH
6487: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6491: LD_EXP 43
6495: PPUSH
6496: LD_STRING D1a-Bur-2
6498: PPUSH
6499: CALL_OW 88
// end else
6503: GO 6541
// begin Say ( Kurin , D1b-Kur-1 ) ;
6505: LD_EXP 55
6509: PPUSH
6510: LD_STRING D1b-Kur-1
6512: PPUSH
6513: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6517: LD_EXP 47
6521: PPUSH
6522: LD_STRING D1b-Bel-1
6524: PPUSH
6525: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6529: LD_EXP 55
6533: PPUSH
6534: LD_STRING D1b-Kur-2
6536: PPUSH
6537: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6541: LD_EXP 55
6545: PPUSH
6546: LD_STRING D2-Kur-1
6548: PPUSH
6549: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6553: LD_EXP 43
6557: PPUSH
6558: LD_STRING D2-Bur-1
6560: PPUSH
6561: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6565: LD_EXP 55
6569: PPUSH
6570: LD_STRING D2-Kur-2
6572: PPUSH
6573: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6577: LD_EXP 43
6581: PPUSH
6582: LD_STRING D2-Bur-2
6584: PPUSH
6585: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6589: LD_EXP 55
6593: PPUSH
6594: LD_STRING D2-Kur-3
6596: PPUSH
6597: CALL_OW 88
// PrepareAmericansMissionIntro ;
6601: CALL 2451 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6605: LD_INT 1
6607: PPUSH
6608: LD_INT 6
6610: PPUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 1
6616: PPUSH
6617: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6621: LD_INT 3
6623: PPUSH
6624: LD_INT 5
6626: PPUSH
6627: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6631: LD_EXP 56
6635: PUSH
6636: LD_EXP 65
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 87
// wait ( 0 0$3 ) ;
6649: LD_INT 105
6651: PPUSH
6652: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6656: LD_EXP 56
6660: PPUSH
6661: LD_STRING D2-Pop-3
6663: PPUSH
6664: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6668: LD_INT 10
6670: PPUSH
6671: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6675: LD_EXP 43
6679: PUSH
6680: LD_EXP 55
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PPUSH
6689: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6693: LD_EXP 55
6697: PPUSH
6698: LD_STRING D2-Kur-4
6700: PPUSH
6701: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6705: LD_EXP 43
6709: PPUSH
6710: LD_STRING D2-Bur-4
6712: PPUSH
6713: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
6717: LD_EXP 55
6721: PPUSH
6722: LD_STRING D2-Kur-5
6724: PPUSH
6725: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
6729: LD_EXP 43
6733: PPUSH
6734: LD_STRING D2-Bur-5
6736: PPUSH
6737: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
6741: LD_EXP 55
6745: PPUSH
6746: LD_STRING D2-Kur-6
6748: PPUSH
6749: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6753: LD_EXP 43
6757: PPUSH
6758: LD_STRING D2-Bur-4
6760: PPUSH
6761: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
6765: LD_ADDR_EXP 82
6769: PUSH
6770: LD_EXP 57
6774: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
6775: LD_ADDR_EXP 82
6779: PUSH
6780: LD_EXP 82
6784: PUSH
6785: LD_EXP 51
6789: ADD
6790: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
6791: LD_ADDR_VAR 0 4
6795: PUSH
6796: LD_STRING text
6798: PPUSH
6799: LD_INT 6
6801: PPUSH
6802: LD_INT 6
6804: PPUSH
6805: LD_INT -5
6807: PUSH
6808: LD_EXP 43
6812: PUSH
6813: LD_EXP 44
6817: PUSH
6818: LD_EXP 46
6822: PUSH
6823: LD_EXP 45
6827: PUSH
6828: LD_EXP 47
6832: PUSH
6833: LD_INT -6
6835: PUSH
6836: LD_INT -2
6838: PUSH
6839: LD_INT -3
6841: PUSH
6842: LD_INT -5
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: LD_EXP 82
6861: ADD
6862: PUSH
6863: LD_INT -6
6865: PUSH
6866: LD_INT -4
6868: PUSH
6869: LD_EXP 55
6873: PUSH
6874: LD_EXP 56
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: ADD
6885: PPUSH
6886: LD_INT 1
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 2
6894: PUSH
6895: LD_INT 1
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 4
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 42
6922: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
6923: LD_EXP 82
6927: PPUSH
6928: LD_INT 6
6930: PPUSH
6931: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 3
6942: PPUSH
6943: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
6947: LD_EXP 56
6951: PPUSH
6952: LD_INT 135
6954: PPUSH
6955: LD_INT 67
6957: PPUSH
6958: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
6962: LD_EXP 65
6966: PPUSH
6967: LD_INT 209
6969: PPUSH
6970: LD_INT 164
6972: PPUSH
6973: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
6977: LD_ADDR_EXP 62
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PPUSH
7006: CALL_OW 69
7010: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7011: LD_ADDR_EXP 82
7015: PUSH
7016: LD_EXP 82
7020: PUSH
7021: LD_VAR 0 4
7025: DIFF
7026: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7027: LD_EXP 82
7031: PUSH
7032: LD_INT 1
7034: ARRAY
7035: PPUSH
7036: LD_INT 2
7038: PPUSH
7039: CALL_OW 336
// for i := 2 to 3 do
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: DOUBLE
7049: LD_INT 2
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 3
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7079
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7059: LD_EXP 82
7063: PUSH
7064: LD_VAR 0 2
7068: ARRAY
7069: PPUSH
7070: LD_INT 3
7072: PPUSH
7073: CALL_OW 336
7077: GO 7056
7079: POP
7080: POP
// for un in selectedPeople do
7081: LD_ADDR_VAR 0 3
7085: PUSH
7086: LD_VAR 0 4
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7105
// ComExitBuilding ( un ) ;
7094: LD_VAR 0 3
7098: PPUSH
7099: CALL_OW 122
7103: GO 7091
7105: POP
7106: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7107: LD_ADDR_EXP 81
7111: PUSH
7112: LD_VAR 0 4
7116: PUSH
7117: LD_EXP 43
7121: PUSH
7122: LD_EXP 44
7126: PUSH
7127: LD_EXP 46
7131: PUSH
7132: LD_EXP 47
7136: PUSH
7137: LD_EXP 45
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: UNION
7149: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7150: LD_EXP 81
7154: PPUSH
7155: LD_INT 113
7157: PPUSH
7158: LD_INT 97
7160: PPUSH
7161: CALL_OW 171
// for un in kirovBaseUnits do
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_EXP 82
7174: PUSH
7175: FOR_IN
7176: IFFALSE 7213
// begin if IsInUnit ( un ) = 0 then
7178: LD_VAR 0 3
7182: PPUSH
7183: CALL_OW 310
7187: PUSH
7188: LD_INT 0
7190: EQUAL
7191: IFFALSE 7211
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_EXP 62
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: PPUSH
7207: CALL_OW 120
// end ;
7211: GO 7175
7213: POP
7214: POP
// ChangeMissionObjectives ( M1 ) ;
7215: LD_STRING M1
7217: PPUSH
7218: CALL_OW 337
// Query ( QReadyInfo ) ;
7222: LD_STRING QReadyInfo
7224: PPUSH
7225: CALL_OW 97
// counterEnable := true ;
7229: LD_ADDR_EXP 84
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// SaveForQuickRestart ;
7237: CALL_OW 22
// wait ( 0 0$5 ) ;
7241: LD_INT 175
7243: PPUSH
7244: CALL_OW 67
// for un in kirovBaseUnits do
7248: LD_ADDR_VAR 0 3
7252: PUSH
7253: LD_EXP 82
7257: PUSH
7258: FOR_IN
7259: IFFALSE 7312
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 310
7270: PUSH
7271: LD_INT 0
7273: EQUAL
7274: PUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 257
7284: PUSH
7285: LD_INT 2
7287: EQUAL
7288: NOT
7289: AND
7290: IFFALSE 7310
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7292: LD_VAR 0 3
7296: PPUSH
7297: LD_EXP 62
7301: PUSH
7302: LD_INT 2
7304: ARRAY
7305: PPUSH
7306: CALL_OW 120
// end ;
7310: GO 7258
7312: POP
7313: POP
// UpgradeKirovBase ;
7314: CALL 1833 0 0
// end ;
7318: LD_VAR 0 1
7322: RET
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7323: LD_EXP 84
7327: IFFALSE 7970
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin enable ;
7337: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: LD_INT 22
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 21
7355: PUSH
7356: LD_INT 2
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 3
7365: PUSH
7366: LD_INT 34
7368: PUSH
7369: LD_INT 51
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
7390: LD_ADDR_VAR 0 2
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: PUSH
7424: LD_EXP 34
7428: PLUS
7429: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
7430: LD_ADDR_EXP 86
7434: PUSH
7435: LD_EXP 86
7439: PUSH
7440: LD_INT 35
7442: PLUS
7443: ST_TO_ADDR
// VehNeeded = hum - veh ;
7444: LD_ADDR_EXP 39
7448: PUSH
7449: LD_VAR 0 2
7453: PUSH
7454: LD_VAR 0 1
7458: MINUS
7459: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
7460: LD_ADDR_EXP 89
7464: PUSH
7465: LD_EXP 89
7469: PUSH
7470: LD_INT 35
7472: MINUS
7473: ST_TO_ADDR
// case counterIndex of 1 :
7474: LD_EXP 85
7478: PUSH
7479: LD_INT 1
7481: DOUBLE
7482: EQUAL
7483: IFTRUE 7487
7485: GO 7570
7487: POP
// begin if VehNeeded <= 0 then
7488: LD_EXP 39
7492: PUSH
7493: LD_INT 0
7495: LESSEQUAL
7496: IFFALSE 7524
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7498: LD_ADDR_OWVAR 47
7502: PUSH
7503: LD_STRING #Ru03-5a
7505: PUSH
7506: EMPTY
7507: LIST
7508: PUSH
7509: LD_STRING #Ru03-4
7511: PUSH
7512: LD_EXP 88
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: ADD
7521: ST_TO_ADDR
7522: GO 7554
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7524: LD_ADDR_OWVAR 47
7528: PUSH
7529: LD_STRING #Ru03-5
7531: PUSH
7532: LD_EXP 39
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_STRING #Ru03-4
7543: PUSH
7544: LD_EXP 88
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ADD
7553: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7554: LD_ADDR_EXP 88
7558: PUSH
7559: LD_EXP 88
7563: PUSH
7564: LD_INT 35
7566: MINUS
7567: ST_TO_ADDR
// end ; 2 :
7568: GO 7697
7570: LD_INT 2
7572: DOUBLE
7573: EQUAL
7574: IFTRUE 7578
7576: GO 7612
7578: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7579: LD_ADDR_OWVAR 47
7583: PUSH
7584: LD_STRING #Ru03-1
7586: PUSH
7587: LD_EXP 23
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7596: LD_ADDR_EXP 23
7600: PUSH
7601: LD_EXP 23
7605: PUSH
7606: LD_INT 35
7608: MINUS
7609: ST_TO_ADDR
// end ; 3 :
7610: GO 7697
7612: LD_INT 3
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7654
7620: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7621: LD_ADDR_OWVAR 47
7625: PUSH
7626: LD_STRING #Ru03-2
7628: PUSH
7629: LD_EXP 23
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7638: LD_ADDR_EXP 23
7642: PUSH
7643: LD_EXP 23
7647: PUSH
7648: LD_INT 35
7650: MINUS
7651: ST_TO_ADDR
// end ; 4 :
7652: GO 7697
7654: LD_INT 4
7656: DOUBLE
7657: EQUAL
7658: IFTRUE 7662
7660: GO 7696
7662: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7663: LD_ADDR_OWVAR 47
7667: PUSH
7668: LD_STRING #Ru03-3
7670: PUSH
7671: LD_EXP 22
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
7680: LD_ADDR_EXP 22
7684: PUSH
7685: LD_EXP 22
7689: PUSH
7690: LD_INT 35
7692: MINUS
7693: ST_TO_ADDR
// end ; end ;
7694: GO 7697
7696: POP
// if ticks = convoyTime [ 1 ] then
7697: LD_EXP 86
7701: PUSH
7702: LD_EXP 87
7706: PUSH
7707: LD_INT 1
7709: ARRAY
7710: EQUAL
7711: IFFALSE 7970
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
7713: LD_EXP 66
7717: PPUSH
7718: LD_EXP 83
7722: PUSH
7723: LD_INT 1
7725: ARRAY
7726: PPUSH
7727: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
7731: LD_EXP 83
7735: PUSH
7736: LD_INT 1
7738: ARRAY
7739: PUSH
7740: LD_STRING D3a-RSol1-1
7742: EQUAL
7743: IFFALSE 7847
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
7745: LD_EXP 43
7749: PPUSH
7750: LD_STRING D3a-Bur-1
7752: PPUSH
7753: CALL_OW 94
// if IsOk ( Gnyevko ) then
7757: LD_EXP 44
7761: PPUSH
7762: CALL_OW 302
7766: IFFALSE 7780
// Say ( Gnyevko , D3b-Gny-1 ) ;
7768: LD_EXP 44
7772: PPUSH
7773: LD_STRING D3b-Gny-1
7775: PPUSH
7776: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
7780: LD_EXP 43
7784: PPUSH
7785: LD_STRING D3b-Bur-1
7787: PPUSH
7788: CALL_OW 88
// if IsOK ( Kovalyuk ) then
7792: LD_EXP 46
7796: PPUSH
7797: CALL_OW 302
7801: IFFALSE 7815
// Say ( Kovalyuk , D3b-Kov-1 ) ;
7803: LD_EXP 46
7807: PPUSH
7808: LD_STRING D3b-Kov-1
7810: PPUSH
7811: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
7815: LD_EXP 66
7819: PPUSH
7820: LD_STRING D3b-Rsol1-2
7822: PPUSH
7823: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
7827: LD_ADDR_EXP 83
7831: PUSH
7832: LD_EXP 83
7836: PUSH
7837: LD_EXP 83
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: DIFF
7846: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
7847: LD_EXP 75
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: LD_EXP 75
7864: PUSH
7865: LD_INT 1
7867: ARRAY
7868: PUSH
7869: LD_INT 2
7871: ARRAY
7872: PPUSH
7873: LD_EXP 75
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PUSH
7882: LD_INT 3
7884: ARRAY
7885: PPUSH
7886: LD_EXP 75
7890: PUSH
7891: LD_INT 1
7893: ARRAY
7894: PUSH
7895: LD_INT 4
7897: ARRAY
7898: PPUSH
7899: LD_EXP 75
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PUSH
7908: LD_INT 5
7910: ARRAY
7911: PPUSH
7912: LD_INT 6
7914: PPUSH
7915: CALL 4417 0 6
// PrepareAttackOnRus ( ) ;
7919: CALL 5229 0 0
// wait ( 0 0$1 ) ;
7923: LD_INT 35
7925: PPUSH
7926: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
7930: LD_ADDR_EXP 75
7934: PUSH
7935: LD_EXP 75
7939: PUSH
7940: LD_EXP 75
7944: PUSH
7945: LD_INT 1
7947: ARRAY
7948: DIFF
7949: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
7950: LD_ADDR_EXP 87
7954: PUSH
7955: LD_EXP 87
7959: PUSH
7960: LD_EXP 87
7964: PUSH
7965: LD_INT 1
7967: ARRAY
7968: DIFF
7969: ST_TO_ADDR
// end ; end ;
7970: PPOPN 3
7972: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
7973: LD_EXP 79
7977: PPUSH
7978: LD_INT 3
7980: PUSH
7981: LD_INT 24
7983: PUSH
7984: LD_INT 700
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PPUSH
7995: CALL_OW 72
7999: PUSH
8000: LD_EXP 74
8004: PPUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 24
8010: PUSH
8011: LD_INT 700
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PPUSH
8022: CALL_OW 72
8026: OR
8027: IFFALSE 8158
8029: GO 8031
8031: DISABLE
8032: LD_INT 0
8034: PPUSH
// begin enable ;
8035: ENABLE
// for i := 1 to amVehs do
8036: LD_ADDR_VAR 0 1
8040: PUSH
8041: DOUBLE
8042: LD_INT 1
8044: DEC
8045: ST_TO_ADDR
8046: LD_EXP 79
8050: PUSH
8051: FOR_TO
8052: IFFALSE 8095
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8054: LD_EXP 79
8058: PUSH
8059: LD_VAR 0 1
8063: ARRAY
8064: PPUSH
8065: CALL_OW 256
8069: PUSH
8070: LD_INT 700
8072: LESSEQUAL
8073: IFFALSE 8093
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8075: LD_EXP 79
8079: PUSH
8080: LD_VAR 0 1
8084: ARRAY
8085: PPUSH
8086: LD_INT 10
8088: PPUSH
8089: CALL_OW 113
// end ;
8093: GO 8051
8095: POP
8096: POP
// for i := 1 to amIntroUnits do
8097: LD_ADDR_VAR 0 1
8101: PUSH
8102: DOUBLE
8103: LD_INT 1
8105: DEC
8106: ST_TO_ADDR
8107: LD_EXP 74
8111: PUSH
8112: FOR_TO
8113: IFFALSE 8156
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8115: LD_EXP 74
8119: PUSH
8120: LD_VAR 0 1
8124: ARRAY
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 700
8133: LESSEQUAL
8134: IFFALSE 8154
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8136: LD_EXP 74
8140: PUSH
8141: LD_VAR 0 1
8145: ARRAY
8146: PPUSH
8147: LD_INT 10
8149: PPUSH
8150: CALL_OW 113
// end ;
8154: GO 8112
8156: POP
8157: POP
// end ;
8158: PPOPN 1
8160: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
8161: LD_EXP 18
8165: NOT
8166: IFFALSE 8374
8168: GO 8170
8170: DISABLE
8171: LD_INT 0
8173: PPUSH
// begin enable ;
8174: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_INT 3
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 21
8192: PUSH
8193: LD_INT 2
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 23
8202: PUSH
8203: LD_INT 3
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 2
8212: PUSH
8213: LD_INT 31
8215: PUSH
8216: LD_INT 21
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 31
8225: PUSH
8226: LD_INT 23
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: PUSH
8249: FOR_IN
8250: IFFALSE 8372
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_INT 48
8259: PPUSH
8260: LD_INT 81
8262: PPUSH
8263: CALL_OW 297
8267: PUSH
8268: LD_INT 7
8270: LESS
8271: IFFALSE 8370
// begin dialog_track = true ;
8273: LD_ADDR_EXP 18
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
8281: LD_INT 48
8283: PPUSH
8284: LD_INT 81
8286: PPUSH
8287: CALL_OW 86
// DialogueOn ;
8291: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8295: LD_EXP 43
8299: PPUSH
8300: LD_STRING D5a-Bur-1
8302: PPUSH
8303: CALL_OW 88
// DialogueOff ;
8307: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
8311: LD_INT 82
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 321
8321: PUSH
8322: LD_INT 0
8324: EQUAL
8325: IFFALSE 8340
// SetTech ( 82 , 3 , state_enabled ) ;
8327: LD_INT 82
8329: PPUSH
8330: LD_INT 3
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
8340: LD_INT 84
8342: PPUSH
8343: LD_INT 3
8345: PPUSH
8346: LD_INT 1
8348: PPUSH
8349: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
8353: LD_INT 16
8355: PPUSH
8356: LD_INT 3
8358: PPUSH
8359: LD_INT 1
8361: PPUSH
8362: CALL_OW 324
// exit ;
8366: POP
8367: POP
8368: GO 8374
// end ;
8370: GO 8249
8372: POP
8373: POP
// end ;
8374: PPOPN 1
8376: END
// every 5 5$30 do
8377: GO 8379
8379: DISABLE
// begin PrepareScholtze ;
8380: CALL 2394 0 0
// wait ( 0 0$2 ) ;
8384: LD_INT 70
8386: PPUSH
8387: CALL_OW 67
// DialogueOn ;
8391: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
8395: LD_EXP 68
8399: PPUSH
8400: LD_STRING D4-Sch-1
8402: PPUSH
8403: CALL 50149 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
8407: LD_EXP 43
8411: PPUSH
8412: LD_STRING D4-Bur-1
8414: PPUSH
8415: CALL_OW 94
// DialogueOff ;
8419: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
8423: LD_STRING M4
8425: PPUSH
8426: CALL_OW 337
// ComHold ( Scholtze ) ;
8430: LD_EXP 67
8434: PPUSH
8435: CALL_OW 140
// scholtzeSpawned = true ;
8439: LD_ADDR_EXP 14
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// end ;
8447: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
8448: LD_INT 3
8450: PPUSH
8451: LD_EXP 67
8455: PPUSH
8456: CALL_OW 292
8460: PUSH
8461: LD_EXP 14
8465: AND
8466: PUSH
8467: LD_EXP 15
8471: NOT
8472: AND
8473: IFFALSE 8639
8475: GO 8477
8477: DISABLE
// begin scholtzeSaved = true ;
8478: LD_ADDR_EXP 15
8482: PUSH
8483: LD_INT 1
8485: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
8486: LD_EXP 67
8490: PPUSH
8491: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
8495: LD_EXP 67
8499: PPUSH
8500: LD_INT 3
8502: PPUSH
8503: CALL_OW 235
// DialogueOn ;
8507: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
8511: LD_EXP 67
8515: PPUSH
8516: LD_STRING D4a-Sch-1
8518: PPUSH
8519: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
8523: LD_EXP 43
8527: PPUSH
8528: LD_STRING D4a-Bur-1
8530: PPUSH
8531: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
8535: LD_EXP 67
8539: PPUSH
8540: LD_STRING D4a-Sch-2
8542: PPUSH
8543: CALL_OW 88
// DialogueOff ;
8547: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
8551: LD_STRING MScholtzeOut
8553: PPUSH
8554: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
8558: LD_INT 49
8560: PPUSH
8561: LD_INT 3
8563: PPUSH
8564: LD_INT 1
8566: PPUSH
8567: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
8571: LD_INT 51
8573: PPUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 1
8579: PPUSH
8580: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
8584: LD_INT 82
8586: PPUSH
8587: LD_INT 3
8589: PPUSH
8590: CALL_OW 321
8594: PUSH
8595: LD_INT 0
8597: EQUAL
8598: IFFALSE 8613
// SetTech ( 82 , 3 , state_enabled ) ;
8600: LD_INT 82
8602: PPUSH
8603: LD_INT 3
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
8613: LD_INT 83
8615: PPUSH
8616: LD_INT 3
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
8626: LD_INT 19
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: CALL_OW 324
// end ;
8639: END
// every 0 0$30 do
8640: GO 8642
8642: DISABLE
// begin enable ;
8643: ENABLE
// CreateCratesAnywhere ( rand ( 3 , 5 ) , true ) ;
8644: LD_INT 3
8646: PPUSH
8647: LD_INT 5
8649: PPUSH
8650: CALL_OW 12
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 57
// end ;
8662: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
8663: LD_EXP 27
8667: NOT
8668: IFFALSE 8940
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
8683: LD_ADDR_VAR 0 2
8687: PUSH
8688: LD_INT 8
8690: PPUSH
8691: LD_INT 22
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 2
8703: PUSH
8704: LD_INT 21
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_INT 21
8716: PUSH
8717: LD_INT 2
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 70
8748: PUSH
8749: FOR_IN
8750: IFFALSE 8938
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
8752: LD_VAR 0 2
8756: PPUSH
8757: LD_INT 22
8759: PUSH
8760: LD_INT 3
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 21
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 21
8782: PUSH
8783: LD_INT 2
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 69
8803: PPUSH
8804: LD_VAR 0 2
8808: PPUSH
8809: CALL_OW 74
8813: PPUSH
8814: CALL_OW 296
8818: PUSH
8819: LD_INT 17
8821: LESS
8822: IFFALSE 8936
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
8824: LD_INT 22
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 2
8836: PUSH
8837: LD_INT 21
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 21
8849: PUSH
8850: LD_INT 2
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 69
8870: PPUSH
8871: LD_VAR 0 2
8875: PPUSH
8876: CALL_OW 74
8880: PPUSH
8881: LD_INT 114
8883: PPUSH
8884: LD_INT 98
8886: PPUSH
8887: CALL_OW 111
// if not dialog_stop then
8891: LD_EXP 19
8895: NOT
8896: IFFALSE 8936
// begin if not IsOK ( Gnyevko ) then
8898: LD_EXP 44
8902: PPUSH
8903: CALL_OW 302
8907: NOT
8908: IFFALSE 8924
// SayRadio ( Kurin , D11-Kur-1 ) else
8910: LD_EXP 55
8914: PPUSH
8915: LD_STRING D11-Kur-1
8917: PPUSH
8918: CALL_OW 94
8922: GO 8936
// Say ( Gnyevko , D11-Gny-1 ) ;
8924: LD_EXP 44
8928: PPUSH
8929: LD_STRING D11-Gny-1
8931: PPUSH
8932: CALL_OW 88
// end ; end ;
8936: GO 8749
8938: POP
8939: POP
// end ;
8940: PPOPN 7
8942: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
8943: LD_INT 3
8945: PPUSH
8946: LD_INT 13
8948: PPUSH
8949: CALL_OW 294
8953: PUSH
8954: LD_INT 6
8956: GREATEREQUAL
8957: PUSH
8958: LD_EXP 84
8962: AND
8963: IFFALSE 9134
8965: GO 8967
8967: DISABLE
8968: LD_INT 0
8970: PPUSH
// begin enable ;
8971: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 1
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 21
9002: PUSH
9003: LD_INT 2
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: PUSH
9024: FOR_IN
9025: IFFALSE 9132
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
9027: LD_VAR 0 1
9031: PPUSH
9032: LD_INT 13
9034: PPUSH
9035: CALL_OW 308
9039: PUSH
9040: LD_VAR 0 1
9044: PPUSH
9045: LD_INT 21
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 72
9059: PUSH
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 313
9069: OR
9070: AND
9071: IFFALSE 9130
// begin ComMoveXY ( unit , 120 , 98 ) ;
9073: LD_VAR 0 1
9077: PPUSH
9078: LD_INT 120
9080: PPUSH
9081: LD_INT 98
9083: PPUSH
9084: CALL_OW 111
// if not dialog_stop then
9088: LD_EXP 19
9092: NOT
9093: IFFALSE 9130
// begin dialog_stop = true ;
9095: LD_ADDR_EXP 19
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
9103: LD_EXP 55
9107: PPUSH
9108: LD_STRING D12-Kur-1
9110: PPUSH
9111: CALL_OW 88
// wait ( 0 0$5 ) ;
9115: LD_INT 175
9117: PPUSH
9118: CALL_OW 67
// dialog_stop = false ;
9122: LD_ADDR_EXP 19
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// end ; end ;
9130: GO 9024
9132: POP
9133: POP
// end ;
9134: PPOPN 1
9136: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
9137: LD_EXP 55
9141: PPUSH
9142: CALL_OW 306
9146: IFFALSE 9338
9148: GO 9150
9150: DISABLE
// begin if true then
9151: LD_INT 1
9153: IFFALSE 9337
// begin case Query ( QReadyToAttack ) of 1 :
9155: LD_STRING QReadyToAttack
9157: PPUSH
9158: CALL_OW 97
9162: PUSH
9163: LD_INT 1
9165: DOUBLE
9166: EQUAL
9167: IFTRUE 9171
9169: GO 9233
9171: POP
// begin DeselectUnits ( Kurin ) ;
9172: LD_EXP 55
9176: PPUSH
9177: CALL_OW 491
// SelectUnits ( Burlak ) ;
9181: LD_EXP 43
9185: PPUSH
9186: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
9190: LD_EXP 43
9194: PPUSH
9195: LD_STRING D6a-Bur-1
9197: PPUSH
9198: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9202: LD_EXP 55
9206: PPUSH
9207: LD_STRING D6a-Kur-1
9209: PPUSH
9210: CALL_OW 94
// meetNearOmicronBase = true ;
9214: LD_ADDR_EXP 27
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// kurinCheckVehicles = true ;
9222: LD_ADDR_EXP 26
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// disable ;
9230: DISABLE
// end ; 2 :
9231: GO 9337
9233: LD_INT 2
9235: DOUBLE
9236: EQUAL
9237: IFTRUE 9241
9239: GO 9307
9241: POP
// begin DeselectUnits ( Kurin ) ;
9242: LD_EXP 55
9246: PPUSH
9247: CALL_OW 491
// SelectUnits ( Burlak ) ;
9251: LD_EXP 43
9255: PPUSH
9256: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
9260: LD_EXP 43
9264: PPUSH
9265: LD_STRING D6b-Bur-1
9267: PPUSH
9268: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
9272: LD_EXP 55
9276: PPUSH
9277: LD_STRING D6b-Kur-1
9279: PPUSH
9280: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
9284: LD_EXP 43
9288: PPUSH
9289: LD_STRING D6b-Bur-2
9291: PPUSH
9292: CALL_OW 88
// meetNearOmicronBase = true ;
9296: LD_ADDR_EXP 27
9300: PUSH
9301: LD_INT 1
9303: ST_TO_ADDR
// disable ;
9304: DISABLE
// end ; 3 :
9305: GO 9337
9307: LD_INT 3
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9315
9313: GO 9336
9315: POP
// begin DeselectUnits ( Kurin ) ;
9316: LD_EXP 55
9320: PPUSH
9321: CALL_OW 491
// SelectUnits ( Burlak ) ;
9325: LD_EXP 43
9329: PPUSH
9330: CALL_OW 490
// end ; end ;
9334: GO 9337
9336: POP
// end ; enable ;
9337: ENABLE
// end ; end_of_file
9338: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9339: LD_INT 0
9341: PPUSH
// ar_miner := 81 ;
9342: LD_ADDR_EXP 97
9346: PUSH
9347: LD_INT 81
9349: ST_TO_ADDR
// ar_crane := 88 ;
9350: LD_ADDR_EXP 96
9354: PUSH
9355: LD_INT 88
9357: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9358: LD_ADDR_EXP 91
9362: PUSH
9363: LD_INT 89
9365: ST_TO_ADDR
// us_hack := 99 ;
9366: LD_ADDR_EXP 92
9370: PUSH
9371: LD_INT 99
9373: ST_TO_ADDR
// us_artillery := 97 ;
9374: LD_ADDR_EXP 93
9378: PUSH
9379: LD_INT 97
9381: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9382: LD_ADDR_EXP 94
9386: PUSH
9387: LD_INT 91
9389: ST_TO_ADDR
// ar_mortar := 92 ;
9390: LD_ADDR_EXP 95
9394: PUSH
9395: LD_INT 92
9397: ST_TO_ADDR
// ru_flamethrower := 93 ;
9398: LD_ADDR_EXP 98
9402: PUSH
9403: LD_INT 93
9405: ST_TO_ADDR
// ru_radar := 98 ;
9406: LD_ADDR_EXP 90
9410: PUSH
9411: LD_INT 98
9413: ST_TO_ADDR
// tech_Artillery := 80 ;
9414: LD_ADDR_EXP 99
9418: PUSH
9419: LD_INT 80
9421: ST_TO_ADDR
// tech_RadMat := 81 ;
9422: LD_ADDR_EXP 100
9426: PUSH
9427: LD_INT 81
9429: ST_TO_ADDR
// tech_BasicTools := 82 ;
9430: LD_ADDR_EXP 101
9434: PUSH
9435: LD_INT 82
9437: ST_TO_ADDR
// tech_Cargo := 83 ;
9438: LD_ADDR_EXP 102
9442: PUSH
9443: LD_INT 83
9445: ST_TO_ADDR
// tech_Track := 84 ;
9446: LD_ADDR_EXP 103
9450: PUSH
9451: LD_INT 84
9453: ST_TO_ADDR
// tech_Crane := 85 ;
9454: LD_ADDR_EXP 104
9458: PUSH
9459: LD_INT 85
9461: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9462: LD_ADDR_EXP 105
9466: PUSH
9467: LD_INT 86
9469: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9470: LD_ADDR_EXP 106
9474: PUSH
9475: LD_INT 87
9477: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9478: LD_ADDR_EXP 107
9482: PUSH
9483: LD_INT 88
9485: ST_TO_ADDR
// class_mastodont := 31 ;
9486: LD_ADDR_EXP 108
9490: PUSH
9491: LD_INT 31
9493: ST_TO_ADDR
// class_horse := 21 ;
9494: LD_ADDR_EXP 109
9498: PUSH
9499: LD_INT 21
9501: ST_TO_ADDR
// end ;
9502: LD_VAR 0 1
9506: RET
// every 1 do
9507: GO 9509
9509: DISABLE
// InitGlobalVariables ; end_of_file
9510: CALL 9339 0 0
9514: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9515: LD_INT 0
9517: PPUSH
9518: PPUSH
// if exist_mode then
9519: LD_VAR 0 2
9523: IFFALSE 9548
// unit := CreateCharacter ( prefix & ident ) else
9525: LD_ADDR_VAR 0 5
9529: PUSH
9530: LD_VAR 0 3
9534: PUSH
9535: LD_VAR 0 1
9539: STR
9540: PPUSH
9541: CALL_OW 34
9545: ST_TO_ADDR
9546: GO 9563
// unit := NewCharacter ( ident ) ;
9548: LD_ADDR_VAR 0 5
9552: PUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 25
9562: ST_TO_ADDR
// result := unit ;
9563: LD_ADDR_VAR 0 4
9567: PUSH
9568: LD_VAR 0 5
9572: ST_TO_ADDR
// end ;
9573: LD_VAR 0 4
9577: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
// if not side or not nation then
9582: LD_VAR 0 1
9586: NOT
9587: PUSH
9588: LD_VAR 0 2
9592: NOT
9593: OR
9594: IFFALSE 9598
// exit ;
9596: GO 10366
// case nation of nation_american :
9598: LD_VAR 0 2
9602: PUSH
9603: LD_INT 1
9605: DOUBLE
9606: EQUAL
9607: IFTRUE 9611
9609: GO 9825
9611: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9612: LD_ADDR_VAR 0 4
9616: PUSH
9617: LD_INT 35
9619: PUSH
9620: LD_INT 45
9622: PUSH
9623: LD_INT 46
9625: PUSH
9626: LD_INT 47
9628: PUSH
9629: LD_INT 82
9631: PUSH
9632: LD_INT 83
9634: PUSH
9635: LD_INT 84
9637: PUSH
9638: LD_INT 85
9640: PUSH
9641: LD_INT 86
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: LD_INT 2
9649: PUSH
9650: LD_INT 6
9652: PUSH
9653: LD_INT 15
9655: PUSH
9656: LD_INT 16
9658: PUSH
9659: LD_INT 7
9661: PUSH
9662: LD_INT 12
9664: PUSH
9665: LD_INT 13
9667: PUSH
9668: LD_INT 10
9670: PUSH
9671: LD_INT 14
9673: PUSH
9674: LD_INT 20
9676: PUSH
9677: LD_INT 21
9679: PUSH
9680: LD_INT 22
9682: PUSH
9683: LD_INT 25
9685: PUSH
9686: LD_INT 32
9688: PUSH
9689: LD_INT 27
9691: PUSH
9692: LD_INT 36
9694: PUSH
9695: LD_INT 69
9697: PUSH
9698: LD_INT 39
9700: PUSH
9701: LD_INT 34
9703: PUSH
9704: LD_INT 40
9706: PUSH
9707: LD_INT 48
9709: PUSH
9710: LD_INT 49
9712: PUSH
9713: LD_INT 50
9715: PUSH
9716: LD_INT 51
9718: PUSH
9719: LD_INT 52
9721: PUSH
9722: LD_INT 53
9724: PUSH
9725: LD_INT 54
9727: PUSH
9728: LD_INT 55
9730: PUSH
9731: LD_INT 56
9733: PUSH
9734: LD_INT 57
9736: PUSH
9737: LD_INT 58
9739: PUSH
9740: LD_INT 59
9742: PUSH
9743: LD_INT 60
9745: PUSH
9746: LD_INT 61
9748: PUSH
9749: LD_INT 62
9751: PUSH
9752: LD_INT 80
9754: PUSH
9755: LD_INT 82
9757: PUSH
9758: LD_INT 83
9760: PUSH
9761: LD_INT 84
9763: PUSH
9764: LD_INT 85
9766: PUSH
9767: LD_INT 86
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: ST_TO_ADDR
9823: GO 10290
9825: LD_INT 2
9827: DOUBLE
9828: EQUAL
9829: IFTRUE 9833
9831: GO 10059
9833: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9834: LD_ADDR_VAR 0 4
9838: PUSH
9839: LD_INT 35
9841: PUSH
9842: LD_INT 45
9844: PUSH
9845: LD_INT 46
9847: PUSH
9848: LD_INT 47
9850: PUSH
9851: LD_INT 82
9853: PUSH
9854: LD_INT 83
9856: PUSH
9857: LD_INT 84
9859: PUSH
9860: LD_INT 85
9862: PUSH
9863: LD_INT 87
9865: PUSH
9866: LD_INT 70
9868: PUSH
9869: LD_INT 1
9871: PUSH
9872: LD_INT 11
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: LD_INT 6
9886: PUSH
9887: LD_INT 15
9889: PUSH
9890: LD_INT 18
9892: PUSH
9893: LD_INT 7
9895: PUSH
9896: LD_INT 17
9898: PUSH
9899: LD_INT 8
9901: PUSH
9902: LD_INT 20
9904: PUSH
9905: LD_INT 21
9907: PUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 72
9913: PUSH
9914: LD_INT 26
9916: PUSH
9917: LD_INT 69
9919: PUSH
9920: LD_INT 39
9922: PUSH
9923: LD_INT 40
9925: PUSH
9926: LD_INT 41
9928: PUSH
9929: LD_INT 42
9931: PUSH
9932: LD_INT 43
9934: PUSH
9935: LD_INT 48
9937: PUSH
9938: LD_INT 49
9940: PUSH
9941: LD_INT 50
9943: PUSH
9944: LD_INT 51
9946: PUSH
9947: LD_INT 52
9949: PUSH
9950: LD_INT 53
9952: PUSH
9953: LD_INT 54
9955: PUSH
9956: LD_INT 55
9958: PUSH
9959: LD_INT 56
9961: PUSH
9962: LD_INT 60
9964: PUSH
9965: LD_INT 61
9967: PUSH
9968: LD_INT 62
9970: PUSH
9971: LD_INT 66
9973: PUSH
9974: LD_INT 67
9976: PUSH
9977: LD_INT 68
9979: PUSH
9980: LD_INT 81
9982: PUSH
9983: LD_INT 82
9985: PUSH
9986: LD_INT 83
9988: PUSH
9989: LD_INT 84
9991: PUSH
9992: LD_INT 85
9994: PUSH
9995: LD_INT 87
9997: PUSH
9998: LD_INT 88
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: ST_TO_ADDR
10057: GO 10290
10059: LD_INT 3
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10289
10067: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10068: LD_ADDR_VAR 0 4
10072: PUSH
10073: LD_INT 46
10075: PUSH
10076: LD_INT 47
10078: PUSH
10079: LD_INT 1
10081: PUSH
10082: LD_INT 2
10084: PUSH
10085: LD_INT 82
10087: PUSH
10088: LD_INT 83
10090: PUSH
10091: LD_INT 84
10093: PUSH
10094: LD_INT 85
10096: PUSH
10097: LD_INT 86
10099: PUSH
10100: LD_INT 11
10102: PUSH
10103: LD_INT 9
10105: PUSH
10106: LD_INT 20
10108: PUSH
10109: LD_INT 19
10111: PUSH
10112: LD_INT 21
10114: PUSH
10115: LD_INT 24
10117: PUSH
10118: LD_INT 22
10120: PUSH
10121: LD_INT 25
10123: PUSH
10124: LD_INT 28
10126: PUSH
10127: LD_INT 29
10129: PUSH
10130: LD_INT 30
10132: PUSH
10133: LD_INT 31
10135: PUSH
10136: LD_INT 37
10138: PUSH
10139: LD_INT 38
10141: PUSH
10142: LD_INT 32
10144: PUSH
10145: LD_INT 27
10147: PUSH
10148: LD_INT 33
10150: PUSH
10151: LD_INT 69
10153: PUSH
10154: LD_INT 39
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 40
10162: PUSH
10163: LD_INT 71
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: LD_INT 44
10171: PUSH
10172: LD_INT 48
10174: PUSH
10175: LD_INT 49
10177: PUSH
10178: LD_INT 50
10180: PUSH
10181: LD_INT 51
10183: PUSH
10184: LD_INT 52
10186: PUSH
10187: LD_INT 53
10189: PUSH
10190: LD_INT 54
10192: PUSH
10193: LD_INT 55
10195: PUSH
10196: LD_INT 56
10198: PUSH
10199: LD_INT 57
10201: PUSH
10202: LD_INT 58
10204: PUSH
10205: LD_INT 59
10207: PUSH
10208: LD_INT 63
10210: PUSH
10211: LD_INT 64
10213: PUSH
10214: LD_INT 65
10216: PUSH
10217: LD_INT 82
10219: PUSH
10220: LD_INT 83
10222: PUSH
10223: LD_INT 84
10225: PUSH
10226: LD_INT 85
10228: PUSH
10229: LD_INT 86
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: ST_TO_ADDR
10287: GO 10290
10289: POP
// if state > - 1 and state < 3 then
10290: LD_VAR 0 3
10294: PUSH
10295: LD_INT 1
10297: NEG
10298: GREATER
10299: PUSH
10300: LD_VAR 0 3
10304: PUSH
10305: LD_INT 3
10307: LESS
10308: AND
10309: IFFALSE 10366
// for i in result do
10311: LD_ADDR_VAR 0 5
10315: PUSH
10316: LD_VAR 0 4
10320: PUSH
10321: FOR_IN
10322: IFFALSE 10364
// if GetTech ( i , side ) <> state then
10324: LD_VAR 0 5
10328: PPUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 321
10338: PUSH
10339: LD_VAR 0 3
10343: NONEQUAL
10344: IFFALSE 10362
// result := result diff i ;
10346: LD_ADDR_VAR 0 4
10350: PUSH
10351: LD_VAR 0 4
10355: PUSH
10356: LD_VAR 0 5
10360: DIFF
10361: ST_TO_ADDR
10362: GO 10321
10364: POP
10365: POP
// end ;
10366: LD_VAR 0 4
10370: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10371: LD_INT 0
10373: PPUSH
10374: PPUSH
10375: PPUSH
// result := true ;
10376: LD_ADDR_VAR 0 3
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 480
10398: ST_TO_ADDR
// if not tmp then
10399: LD_VAR 0 5
10403: NOT
10404: IFFALSE 10408
// exit ;
10406: GO 10457
// for i in tmp do
10408: LD_ADDR_VAR 0 4
10412: PUSH
10413: LD_VAR 0 5
10417: PUSH
10418: FOR_IN
10419: IFFALSE 10455
// if GetTech ( i , side ) <> state_researched then
10421: LD_VAR 0 4
10425: PPUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 321
10435: PUSH
10436: LD_INT 2
10438: NONEQUAL
10439: IFFALSE 10453
// begin result := false ;
10441: LD_ADDR_VAR 0 3
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
// exit ;
10449: POP
10450: POP
10451: GO 10457
// end ;
10453: GO 10418
10455: POP
10456: POP
// end ;
10457: LD_VAR 0 3
10461: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
10466: PPUSH
10467: PPUSH
10468: PPUSH
10469: PPUSH
10470: PPUSH
10471: PPUSH
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10477: LD_VAR 0 1
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 257
10492: PUSH
10493: LD_INT 9
10495: NONEQUAL
10496: OR
10497: IFFALSE 10501
// exit ;
10499: GO 11074
// side := GetSide ( unit ) ;
10501: LD_ADDR_VAR 0 9
10505: PUSH
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL_OW 255
10515: ST_TO_ADDR
// tech_space := tech_spacanom ;
10516: LD_ADDR_VAR 0 12
10520: PUSH
10521: LD_INT 29
10523: ST_TO_ADDR
// tech_time := tech_taurad ;
10524: LD_ADDR_VAR 0 13
10528: PUSH
10529: LD_INT 28
10531: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10532: LD_ADDR_VAR 0 11
10536: PUSH
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 310
10546: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10547: LD_VAR 0 11
10551: PPUSH
10552: CALL_OW 247
10556: PUSH
10557: LD_INT 2
10559: EQUAL
10560: IFFALSE 10564
// exit ;
10562: GO 11074
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10564: LD_ADDR_VAR 0 8
10568: PUSH
10569: LD_INT 81
10571: PUSH
10572: LD_VAR 0 9
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 3
10583: PUSH
10584: LD_INT 21
10586: PUSH
10587: LD_INT 3
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: ST_TO_ADDR
// if not tmp then
10607: LD_VAR 0 8
10611: NOT
10612: IFFALSE 10616
// exit ;
10614: GO 11074
// if in_unit then
10616: LD_VAR 0 11
10620: IFFALSE 10644
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10622: LD_ADDR_VAR 0 10
10626: PUSH
10627: LD_VAR 0 8
10631: PPUSH
10632: LD_VAR 0 11
10636: PPUSH
10637: CALL_OW 74
10641: ST_TO_ADDR
10642: GO 10664
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10644: LD_ADDR_VAR 0 10
10648: PUSH
10649: LD_VAR 0 8
10653: PPUSH
10654: LD_VAR 0 1
10658: PPUSH
10659: CALL_OW 74
10663: ST_TO_ADDR
// if not enemy then
10664: LD_VAR 0 10
10668: NOT
10669: IFFALSE 10673
// exit ;
10671: GO 11074
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10673: LD_VAR 0 11
10677: PUSH
10678: LD_VAR 0 11
10682: PPUSH
10683: LD_VAR 0 10
10687: PPUSH
10688: CALL_OW 296
10692: PUSH
10693: LD_INT 13
10695: GREATER
10696: AND
10697: PUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_VAR 0 10
10707: PPUSH
10708: CALL_OW 296
10712: PUSH
10713: LD_INT 12
10715: GREATER
10716: OR
10717: IFFALSE 10721
// exit ;
10719: GO 11074
// missile := [ 1 ] ;
10721: LD_ADDR_VAR 0 14
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10732: LD_VAR 0 9
10736: PPUSH
10737: LD_VAR 0 12
10741: PPUSH
10742: CALL_OW 325
10746: IFFALSE 10775
// missile := Replace ( missile , missile + 1 , 2 ) ;
10748: LD_ADDR_VAR 0 14
10752: PUSH
10753: LD_VAR 0 14
10757: PPUSH
10758: LD_VAR 0 14
10762: PUSH
10763: LD_INT 1
10765: PLUS
10766: PPUSH
10767: LD_INT 2
10769: PPUSH
10770: CALL_OW 1
10774: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10775: LD_VAR 0 9
10779: PPUSH
10780: LD_VAR 0 13
10784: PPUSH
10785: CALL_OW 325
10789: PUSH
10790: LD_VAR 0 10
10794: PPUSH
10795: CALL_OW 255
10799: PPUSH
10800: LD_VAR 0 13
10804: PPUSH
10805: CALL_OW 325
10809: NOT
10810: AND
10811: IFFALSE 10840
// missile := Replace ( missile , missile + 1 , 3 ) ;
10813: LD_ADDR_VAR 0 14
10817: PUSH
10818: LD_VAR 0 14
10822: PPUSH
10823: LD_VAR 0 14
10827: PUSH
10828: LD_INT 1
10830: PLUS
10831: PPUSH
10832: LD_INT 3
10834: PPUSH
10835: CALL_OW 1
10839: ST_TO_ADDR
// if missile < 2 then
10840: LD_VAR 0 14
10844: PUSH
10845: LD_INT 2
10847: LESS
10848: IFFALSE 10852
// exit ;
10850: GO 11074
// x := GetX ( enemy ) ;
10852: LD_ADDR_VAR 0 4
10856: PUSH
10857: LD_VAR 0 10
10861: PPUSH
10862: CALL_OW 250
10866: ST_TO_ADDR
// y := GetY ( enemy ) ;
10867: LD_ADDR_VAR 0 5
10871: PUSH
10872: LD_VAR 0 10
10876: PPUSH
10877: CALL_OW 251
10881: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10882: LD_ADDR_VAR 0 6
10886: PUSH
10887: LD_VAR 0 4
10891: PUSH
10892: LD_INT 1
10894: NEG
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 12
10903: PLUS
10904: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10905: LD_ADDR_VAR 0 7
10909: PUSH
10910: LD_VAR 0 5
10914: PUSH
10915: LD_INT 1
10917: NEG
10918: PPUSH
10919: LD_INT 1
10921: PPUSH
10922: CALL_OW 12
10926: PLUS
10927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10928: LD_VAR 0 6
10932: PPUSH
10933: LD_VAR 0 7
10937: PPUSH
10938: CALL_OW 488
10942: NOT
10943: IFFALSE 10965
// begin _x := x ;
10945: LD_ADDR_VAR 0 6
10949: PUSH
10950: LD_VAR 0 4
10954: ST_TO_ADDR
// _y := y ;
10955: LD_ADDR_VAR 0 7
10959: PUSH
10960: LD_VAR 0 5
10964: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_INT 1
10972: PPUSH
10973: LD_VAR 0 14
10977: PPUSH
10978: CALL_OW 12
10982: ST_TO_ADDR
// case i of 1 :
10983: LD_VAR 0 3
10987: PUSH
10988: LD_INT 1
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11013
10996: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10997: LD_VAR 0 1
11001: PPUSH
11002: LD_VAR 0 10
11006: PPUSH
11007: CALL_OW 115
11011: GO 11074
11013: LD_INT 2
11015: DOUBLE
11016: EQUAL
11017: IFTRUE 11021
11019: GO 11043
11021: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11022: LD_VAR 0 1
11026: PPUSH
11027: LD_VAR 0 6
11031: PPUSH
11032: LD_VAR 0 7
11036: PPUSH
11037: CALL_OW 153
11041: GO 11074
11043: LD_INT 3
11045: DOUBLE
11046: EQUAL
11047: IFTRUE 11051
11049: GO 11073
11051: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11052: LD_VAR 0 1
11056: PPUSH
11057: LD_VAR 0 6
11061: PPUSH
11062: LD_VAR 0 7
11066: PPUSH
11067: CALL_OW 154
11071: GO 11074
11073: POP
// end ;
11074: LD_VAR 0 2
11078: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11079: LD_INT 0
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
11086: PPUSH
// if not unit or not building then
11087: LD_VAR 0 1
11091: NOT
11092: PUSH
11093: LD_VAR 0 2
11097: NOT
11098: OR
11099: IFFALSE 11103
// exit ;
11101: GO 11261
// x := GetX ( building ) ;
11103: LD_ADDR_VAR 0 5
11107: PUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 250
11117: ST_TO_ADDR
// y := GetY ( building ) ;
11118: LD_ADDR_VAR 0 6
11122: PUSH
11123: LD_VAR 0 2
11127: PPUSH
11128: CALL_OW 251
11132: ST_TO_ADDR
// for i = 0 to 5 do
11133: LD_ADDR_VAR 0 4
11137: PUSH
11138: DOUBLE
11139: LD_INT 0
11141: DEC
11142: ST_TO_ADDR
11143: LD_INT 5
11145: PUSH
11146: FOR_TO
11147: IFFALSE 11259
// begin _x := ShiftX ( x , i , 3 ) ;
11149: LD_ADDR_VAR 0 7
11153: PUSH
11154: LD_VAR 0 5
11158: PPUSH
11159: LD_VAR 0 4
11163: PPUSH
11164: LD_INT 3
11166: PPUSH
11167: CALL_OW 272
11171: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11172: LD_ADDR_VAR 0 8
11176: PUSH
11177: LD_VAR 0 6
11181: PPUSH
11182: LD_VAR 0 4
11186: PPUSH
11187: LD_INT 3
11189: PPUSH
11190: CALL_OW 273
11194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11195: LD_VAR 0 7
11199: PPUSH
11200: LD_VAR 0 8
11204: PPUSH
11205: CALL_OW 488
11209: NOT
11210: IFFALSE 11214
// continue ;
11212: GO 11146
// if HexInfo ( _x , _y ) = 0 then
11214: LD_VAR 0 7
11218: PPUSH
11219: LD_VAR 0 8
11223: PPUSH
11224: CALL_OW 428
11228: PUSH
11229: LD_INT 0
11231: EQUAL
11232: IFFALSE 11257
// begin ComMoveXY ( unit , _x , _y ) ;
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_VAR 0 7
11243: PPUSH
11244: LD_VAR 0 8
11248: PPUSH
11249: CALL_OW 111
// exit ;
11253: POP
11254: POP
11255: GO 11261
// end ; end ;
11257: GO 11146
11259: POP
11260: POP
// end ;
11261: LD_VAR 0 3
11265: RET
// export function ScanBase ( side , base_area ) ; begin
11266: LD_INT 0
11268: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11269: LD_ADDR_VAR 0 3
11273: PUSH
11274: LD_VAR 0 2
11278: PPUSH
11279: LD_INT 81
11281: PUSH
11282: LD_VAR 0 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PPUSH
11291: CALL_OW 70
11295: ST_TO_ADDR
// end ;
11296: LD_VAR 0 3
11300: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11301: LD_INT 0
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// result := false ;
11307: LD_ADDR_VAR 0 2
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// side := GetSide ( unit ) ;
11315: LD_ADDR_VAR 0 3
11319: PUSH
11320: LD_VAR 0 1
11324: PPUSH
11325: CALL_OW 255
11329: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11330: LD_ADDR_VAR 0 4
11334: PUSH
11335: LD_VAR 0 1
11339: PPUSH
11340: CALL_OW 248
11344: ST_TO_ADDR
// case nat of 1 :
11345: LD_VAR 0 4
11349: PUSH
11350: LD_INT 1
11352: DOUBLE
11353: EQUAL
11354: IFTRUE 11358
11356: GO 11369
11358: POP
// tech := tech_lassight ; 2 :
11359: LD_ADDR_VAR 0 5
11363: PUSH
11364: LD_INT 12
11366: ST_TO_ADDR
11367: GO 11408
11369: LD_INT 2
11371: DOUBLE
11372: EQUAL
11373: IFTRUE 11377
11375: GO 11388
11377: POP
// tech := tech_mortar ; 3 :
11378: LD_ADDR_VAR 0 5
11382: PUSH
11383: LD_INT 41
11385: ST_TO_ADDR
11386: GO 11408
11388: LD_INT 3
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11407
11396: POP
// tech := tech_bazooka ; end ;
11397: LD_ADDR_VAR 0 5
11401: PUSH
11402: LD_INT 44
11404: ST_TO_ADDR
11405: GO 11408
11407: POP
// if Researched ( side , tech ) then
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_VAR 0 5
11417: PPUSH
11418: CALL_OW 325
11422: IFFALSE 11449
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11424: LD_ADDR_VAR 0 2
11428: PUSH
11429: LD_INT 5
11431: PUSH
11432: LD_INT 8
11434: PUSH
11435: LD_INT 9
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: LD_VAR 0 4
11447: ARRAY
11448: ST_TO_ADDR
// end ;
11449: LD_VAR 0 2
11453: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11454: LD_INT 0
11456: PPUSH
11457: PPUSH
11458: PPUSH
// if not mines then
11459: LD_VAR 0 2
11463: NOT
11464: IFFALSE 11468
// exit ;
11466: GO 11612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11468: LD_ADDR_VAR 0 5
11472: PUSH
11473: LD_INT 81
11475: PUSH
11476: LD_VAR 0 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: LD_INT 21
11490: PUSH
11491: LD_INT 3
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PPUSH
11506: CALL_OW 69
11510: ST_TO_ADDR
// for i in mines do
11511: LD_ADDR_VAR 0 4
11515: PUSH
11516: LD_VAR 0 2
11520: PUSH
11521: FOR_IN
11522: IFFALSE 11610
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11524: LD_VAR 0 4
11528: PUSH
11529: LD_INT 1
11531: ARRAY
11532: PPUSH
11533: LD_VAR 0 4
11537: PUSH
11538: LD_INT 2
11540: ARRAY
11541: PPUSH
11542: CALL_OW 458
11546: NOT
11547: IFFALSE 11551
// continue ;
11549: GO 11521
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11551: LD_VAR 0 4
11555: PUSH
11556: LD_INT 1
11558: ARRAY
11559: PPUSH
11560: LD_VAR 0 4
11564: PUSH
11565: LD_INT 2
11567: ARRAY
11568: PPUSH
11569: CALL_OW 428
11573: PUSH
11574: LD_VAR 0 5
11578: IN
11579: IFFALSE 11608
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11581: LD_VAR 0 4
11585: PUSH
11586: LD_INT 1
11588: ARRAY
11589: PPUSH
11590: LD_VAR 0 4
11594: PUSH
11595: LD_INT 2
11597: ARRAY
11598: PPUSH
11599: LD_VAR 0 1
11603: PPUSH
11604: CALL_OW 456
// end ;
11608: GO 11521
11610: POP
11611: POP
// end ;
11612: LD_VAR 0 3
11616: RET
// export function Count ( array ) ; var i ; begin
11617: LD_INT 0
11619: PPUSH
11620: PPUSH
// result := 0 ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// for i in array do
11629: LD_ADDR_VAR 0 3
11633: PUSH
11634: LD_VAR 0 1
11638: PUSH
11639: FOR_IN
11640: IFFALSE 11664
// if i then
11642: LD_VAR 0 3
11646: IFFALSE 11662
// result := result + 1 ;
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_VAR 0 2
11657: PUSH
11658: LD_INT 1
11660: PLUS
11661: ST_TO_ADDR
11662: GO 11639
11664: POP
11665: POP
// end ;
11666: LD_VAR 0 2
11670: RET
// export function IsEmpty ( building ) ; begin
11671: LD_INT 0
11673: PPUSH
// if not building then
11674: LD_VAR 0 1
11678: NOT
11679: IFFALSE 11683
// exit ;
11681: GO 11726
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_VAR 0 1
11692: PUSH
11693: LD_INT 22
11695: PUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 255
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 58
11712: PUSH
11713: EMPTY
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: IN
11725: ST_TO_ADDR
// end ;
11726: LD_VAR 0 2
11730: RET
// export function IsNotFull ( building ) ; begin
11731: LD_INT 0
11733: PPUSH
// if not building then
11734: LD_VAR 0 1
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11762
// result := UnitsInside ( building ) < 6 ;
11743: LD_ADDR_VAR 0 2
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 313
11757: PUSH
11758: LD_INT 6
11760: LESS
11761: ST_TO_ADDR
// end ;
11762: LD_VAR 0 2
11766: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11767: LD_INT 0
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
// tmp := [ ] ;
11773: LD_ADDR_VAR 0 3
11777: PUSH
11778: EMPTY
11779: ST_TO_ADDR
// list := [ ] ;
11780: LD_ADDR_VAR 0 5
11784: PUSH
11785: EMPTY
11786: ST_TO_ADDR
// for i = 16 to 25 do
11787: LD_ADDR_VAR 0 4
11791: PUSH
11792: DOUBLE
11793: LD_INT 16
11795: DEC
11796: ST_TO_ADDR
11797: LD_INT 25
11799: PUSH
11800: FOR_TO
11801: IFFALSE 11874
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11803: LD_ADDR_VAR 0 3
11807: PUSH
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 255
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 91
11832: PUSH
11833: LD_VAR 0 1
11837: PUSH
11838: LD_INT 6
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_VAR 0 4
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: PPUSH
11866: CALL_OW 69
11870: ADD
11871: ST_TO_ADDR
11872: GO 11800
11874: POP
11875: POP
// for i = 1 to tmp do
11876: LD_ADDR_VAR 0 4
11880: PUSH
11881: DOUBLE
11882: LD_INT 1
11884: DEC
11885: ST_TO_ADDR
11886: LD_VAR 0 3
11890: PUSH
11891: FOR_TO
11892: IFFALSE 11980
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11894: LD_ADDR_VAR 0 5
11898: PUSH
11899: LD_VAR 0 5
11903: PUSH
11904: LD_VAR 0 3
11908: PUSH
11909: LD_VAR 0 4
11913: ARRAY
11914: PPUSH
11915: CALL_OW 266
11919: PUSH
11920: LD_VAR 0 3
11924: PUSH
11925: LD_VAR 0 4
11929: ARRAY
11930: PPUSH
11931: CALL_OW 250
11935: PUSH
11936: LD_VAR 0 3
11940: PUSH
11941: LD_VAR 0 4
11945: ARRAY
11946: PPUSH
11947: CALL_OW 251
11951: PUSH
11952: LD_VAR 0 3
11956: PUSH
11957: LD_VAR 0 4
11961: ARRAY
11962: PPUSH
11963: CALL_OW 254
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: ADD
11977: ST_TO_ADDR
11978: GO 11891
11980: POP
11981: POP
// result := list ;
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_VAR 0 5
11991: ST_TO_ADDR
// end ;
11992: LD_VAR 0 2
11996: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11997: LD_INT 0
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
// if not factory then
12006: LD_VAR 0 1
12010: NOT
12011: IFFALSE 12015
// exit ;
12013: GO 12608
// if control = control_apeman then
12015: LD_VAR 0 4
12019: PUSH
12020: LD_INT 5
12022: EQUAL
12023: IFFALSE 12132
// begin tmp := UnitsInside ( factory ) ;
12025: LD_ADDR_VAR 0 8
12029: PUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 313
12039: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12040: LD_VAR 0 8
12044: PPUSH
12045: LD_INT 25
12047: PUSH
12048: LD_INT 12
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PPUSH
12055: CALL_OW 72
12059: NOT
12060: IFFALSE 12070
// control := control_manual ;
12062: LD_ADDR_VAR 0 4
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12070: LD_ADDR_VAR 0 8
12074: PUSH
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL 11767 0 1
12084: ST_TO_ADDR
// if tmp then
12085: LD_VAR 0 8
12089: IFFALSE 12132
// begin for i in tmp do
12091: LD_ADDR_VAR 0 7
12095: PUSH
12096: LD_VAR 0 8
12100: PUSH
12101: FOR_IN
12102: IFFALSE 12130
// if i [ 1 ] = b_ext_radio then
12104: LD_VAR 0 7
12108: PUSH
12109: LD_INT 1
12111: ARRAY
12112: PUSH
12113: LD_INT 22
12115: EQUAL
12116: IFFALSE 12128
// begin control := control_remote ;
12118: LD_ADDR_VAR 0 4
12122: PUSH
12123: LD_INT 2
12125: ST_TO_ADDR
// break ;
12126: GO 12130
// end ;
12128: GO 12101
12130: POP
12131: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12132: LD_VAR 0 1
12136: PPUSH
12137: LD_VAR 0 2
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_VAR 0 4
12151: PPUSH
12152: LD_VAR 0 5
12156: PPUSH
12157: CALL_OW 448
12161: IFFALSE 12196
// begin result := [ chassis , engine , control , weapon ] ;
12163: LD_ADDR_VAR 0 6
12167: PUSH
12168: LD_VAR 0 2
12172: PUSH
12173: LD_VAR 0 3
12177: PUSH
12178: LD_VAR 0 4
12182: PUSH
12183: LD_VAR 0 5
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: ST_TO_ADDR
// exit ;
12194: GO 12608
// end ; _chassis := AvailableChassisList ( factory ) ;
12196: LD_ADDR_VAR 0 9
12200: PUSH
12201: LD_VAR 0 1
12205: PPUSH
12206: CALL_OW 475
12210: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12211: LD_ADDR_VAR 0 11
12215: PUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 476
12225: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12226: LD_ADDR_VAR 0 12
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 477
12240: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12241: LD_ADDR_VAR 0 10
12245: PUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 478
12255: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12256: LD_VAR 0 9
12260: NOT
12261: PUSH
12262: LD_VAR 0 11
12266: NOT
12267: OR
12268: PUSH
12269: LD_VAR 0 12
12273: NOT
12274: OR
12275: PUSH
12276: LD_VAR 0 10
12280: NOT
12281: OR
12282: IFFALSE 12317
// begin result := [ chassis , engine , control , weapon ] ;
12284: LD_ADDR_VAR 0 6
12288: PUSH
12289: LD_VAR 0 2
12293: PUSH
12294: LD_VAR 0 3
12298: PUSH
12299: LD_VAR 0 4
12303: PUSH
12304: LD_VAR 0 5
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: ST_TO_ADDR
// exit ;
12315: GO 12608
// end ; if not chassis in _chassis then
12317: LD_VAR 0 2
12321: PUSH
12322: LD_VAR 0 9
12326: IN
12327: NOT
12328: IFFALSE 12354
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12330: LD_ADDR_VAR 0 2
12334: PUSH
12335: LD_VAR 0 9
12339: PUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_VAR 0 9
12347: PPUSH
12348: CALL_OW 12
12352: ARRAY
12353: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12354: LD_VAR 0 2
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: CALL 12613 0 2
12368: NOT
12369: IFFALSE 12428
// repeat engine := _engine [ 1 ] ;
12371: LD_ADDR_VAR 0 3
12375: PUSH
12376: LD_VAR 0 11
12380: PUSH
12381: LD_INT 1
12383: ARRAY
12384: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12385: LD_ADDR_VAR 0 11
12389: PUSH
12390: LD_VAR 0 11
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 3
12402: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12403: LD_VAR 0 2
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: CALL 12613 0 2
12417: PUSH
12418: LD_VAR 0 11
12422: PUSH
12423: EMPTY
12424: EQUAL
12425: OR
12426: IFFALSE 12371
// if not control in _control then
12428: LD_VAR 0 4
12432: PUSH
12433: LD_VAR 0 12
12437: IN
12438: NOT
12439: IFFALSE 12465
// control := _control [ rand ( 1 , _control ) ] ;
12441: LD_ADDR_VAR 0 4
12445: PUSH
12446: LD_VAR 0 12
12450: PUSH
12451: LD_INT 1
12453: PPUSH
12454: LD_VAR 0 12
12458: PPUSH
12459: CALL_OW 12
12463: ARRAY
12464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12465: LD_VAR 0 2
12469: PPUSH
12470: LD_VAR 0 5
12474: PPUSH
12475: CALL 12833 0 2
12479: NOT
12480: IFFALSE 12539
// repeat weapon := _weapon [ 1 ] ;
12482: LD_ADDR_VAR 0 5
12486: PUSH
12487: LD_VAR 0 10
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12496: LD_ADDR_VAR 0 10
12500: PUSH
12501: LD_VAR 0 10
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 3
12513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12514: LD_VAR 0 2
12518: PPUSH
12519: LD_VAR 0 5
12523: PPUSH
12524: CALL 12833 0 2
12528: PUSH
12529: LD_VAR 0 10
12533: PUSH
12534: EMPTY
12535: EQUAL
12536: OR
12537: IFFALSE 12482
// result := [ ] ;
12539: LD_ADDR_VAR 0 6
12543: PUSH
12544: EMPTY
12545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12546: LD_VAR 0 1
12550: PPUSH
12551: LD_VAR 0 2
12555: PPUSH
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_VAR 0 4
12565: PPUSH
12566: LD_VAR 0 5
12570: PPUSH
12571: CALL_OW 448
12575: IFFALSE 12608
// result := [ chassis , engine , control , weapon ] ;
12577: LD_ADDR_VAR 0 6
12581: PUSH
12582: LD_VAR 0 2
12586: PUSH
12587: LD_VAR 0 3
12591: PUSH
12592: LD_VAR 0 4
12596: PUSH
12597: LD_VAR 0 5
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 6
12612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12613: LD_INT 0
12615: PPUSH
// if not chassis or not engine then
12616: LD_VAR 0 1
12620: NOT
12621: PUSH
12622: LD_VAR 0 2
12626: NOT
12627: OR
12628: IFFALSE 12632
// exit ;
12630: GO 12828
// case engine of engine_solar :
12632: LD_VAR 0 2
12636: PUSH
12637: LD_INT 2
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12683
12645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 11
12653: PUSH
12654: LD_INT 12
12656: PUSH
12657: LD_INT 13
12659: PUSH
12660: LD_INT 14
12662: PUSH
12663: LD_INT 1
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: ST_TO_ADDR
12681: GO 12812
12683: LD_INT 1
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12753
12691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_INT 11
12699: PUSH
12700: LD_INT 12
12702: PUSH
12703: LD_INT 13
12705: PUSH
12706: LD_INT 14
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: LD_INT 4
12720: PUSH
12721: LD_INT 5
12723: PUSH
12724: LD_INT 21
12726: PUSH
12727: LD_INT 23
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 24
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: ST_TO_ADDR
12751: GO 12812
12753: LD_INT 3
12755: DOUBLE
12756: EQUAL
12757: IFTRUE 12761
12759: GO 12811
12761: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12762: LD_ADDR_VAR 0 3
12766: PUSH
12767: LD_INT 13
12769: PUSH
12770: LD_INT 14
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: LD_INT 4
12781: PUSH
12782: LD_INT 5
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 22
12790: PUSH
12791: LD_INT 23
12793: PUSH
12794: LD_INT 24
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
12809: GO 12812
12811: POP
// result := ( chassis in result ) ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_VAR 0 1
12821: PUSH
12822: LD_VAR 0 3
12826: IN
12827: ST_TO_ADDR
// end ;
12828: LD_VAR 0 3
12832: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12833: LD_INT 0
12835: PPUSH
// if not chassis or not weapon then
12836: LD_VAR 0 1
12840: NOT
12841: PUSH
12842: LD_VAR 0 2
12846: NOT
12847: OR
12848: IFFALSE 12852
// exit ;
12850: GO 13914
// case weapon of us_machine_gun :
12852: LD_VAR 0 2
12856: PUSH
12857: LD_INT 2
12859: DOUBLE
12860: EQUAL
12861: IFTRUE 12865
12863: GO 12895
12865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12866: LD_ADDR_VAR 0 3
12870: PUSH
12871: LD_INT 1
12873: PUSH
12874: LD_INT 2
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: LD_INT 4
12882: PUSH
12883: LD_INT 5
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: ST_TO_ADDR
12893: GO 13898
12895: LD_INT 3
12897: DOUBLE
12898: EQUAL
12899: IFTRUE 12903
12901: GO 12933
12903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12904: LD_ADDR_VAR 0 3
12908: PUSH
12909: LD_INT 1
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 3
12917: PUSH
12918: LD_INT 4
12920: PUSH
12921: LD_INT 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: ST_TO_ADDR
12931: GO 13898
12933: LD_INT 11
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 12971
12941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12942: LD_ADDR_VAR 0 3
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: LD_INT 4
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: ST_TO_ADDR
12969: GO 13898
12971: LD_INT 4
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 13005
12979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12980: LD_ADDR_VAR 0 3
12984: PUSH
12985: LD_INT 2
12987: PUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: LD_INT 5
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: ST_TO_ADDR
13003: GO 13898
13005: LD_INT 5
13007: DOUBLE
13008: EQUAL
13009: IFTRUE 13013
13011: GO 13039
13013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: LD_INT 5
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: ST_TO_ADDR
13037: GO 13898
13039: LD_INT 9
13041: DOUBLE
13042: EQUAL
13043: IFTRUE 13047
13045: GO 13073
13047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13048: LD_ADDR_VAR 0 3
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 3
13058: PUSH
13059: LD_INT 4
13061: PUSH
13062: LD_INT 5
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: ST_TO_ADDR
13071: GO 13898
13073: LD_INT 7
13075: DOUBLE
13076: EQUAL
13077: IFTRUE 13081
13079: GO 13107
13081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_INT 2
13089: PUSH
13090: LD_INT 3
13092: PUSH
13093: LD_INT 4
13095: PUSH
13096: LD_INT 5
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: ST_TO_ADDR
13105: GO 13898
13107: LD_INT 12
13109: DOUBLE
13110: EQUAL
13111: IFTRUE 13115
13113: GO 13141
13115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13116: LD_ADDR_VAR 0 3
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: LD_INT 4
13129: PUSH
13130: LD_INT 5
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 13898
13141: LD_INT 13
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13175
13149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13150: LD_ADDR_VAR 0 3
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: LD_INT 4
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: ST_TO_ADDR
13173: GO 13898
13175: LD_INT 14
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13201
13183: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13184: LD_ADDR_VAR 0 3
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: ST_TO_ADDR
13199: GO 13898
13201: LD_INT 6
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13227
13209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13210: LD_ADDR_VAR 0 3
13214: PUSH
13215: LD_INT 4
13217: PUSH
13218: LD_INT 5
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: ST_TO_ADDR
13225: GO 13898
13227: LD_INT 10
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 13253
13235: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13236: LD_ADDR_VAR 0 3
13240: PUSH
13241: LD_INT 4
13243: PUSH
13244: LD_INT 5
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: ST_TO_ADDR
13251: GO 13898
13253: LD_INT 22
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13287
13261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 13
13275: PUSH
13276: LD_INT 14
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: ST_TO_ADDR
13285: GO 13898
13287: LD_INT 23
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13321
13295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13296: LD_ADDR_VAR 0 3
13300: PUSH
13301: LD_INT 11
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 13
13309: PUSH
13310: LD_INT 14
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: ST_TO_ADDR
13319: GO 13898
13321: LD_INT 24
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13355
13329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13330: LD_ADDR_VAR 0 3
13334: PUSH
13335: LD_INT 11
13337: PUSH
13338: LD_INT 12
13340: PUSH
13341: LD_INT 13
13343: PUSH
13344: LD_INT 14
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: ST_TO_ADDR
13353: GO 13898
13355: LD_INT 30
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13389
13363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13364: LD_ADDR_VAR 0 3
13368: PUSH
13369: LD_INT 11
13371: PUSH
13372: LD_INT 12
13374: PUSH
13375: LD_INT 13
13377: PUSH
13378: LD_INT 14
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: ST_TO_ADDR
13387: GO 13898
13389: LD_INT 25
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13397
13395: GO 13415
13397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13398: LD_ADDR_VAR 0 3
13402: PUSH
13403: LD_INT 13
13405: PUSH
13406: LD_INT 14
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: ST_TO_ADDR
13413: GO 13898
13415: LD_INT 27
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13441
13423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: LD_INT 13
13431: PUSH
13432: LD_INT 14
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: ST_TO_ADDR
13439: GO 13898
13441: LD_EXP 95
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13477
13451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13452: LD_ADDR_VAR 0 3
13456: PUSH
13457: LD_INT 11
13459: PUSH
13460: LD_INT 12
13462: PUSH
13463: LD_INT 13
13465: PUSH
13466: LD_INT 14
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: ST_TO_ADDR
13475: GO 13898
13477: LD_INT 28
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13503
13485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 13
13493: PUSH
13494: LD_INT 14
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: ST_TO_ADDR
13501: GO 13898
13503: LD_INT 29
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13529
13511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13512: LD_ADDR_VAR 0 3
13516: PUSH
13517: LD_INT 13
13519: PUSH
13520: LD_INT 14
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: ST_TO_ADDR
13527: GO 13898
13529: LD_INT 31
13531: DOUBLE
13532: EQUAL
13533: IFTRUE 13537
13535: GO 13555
13537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: LD_INT 13
13545: PUSH
13546: LD_INT 14
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: ST_TO_ADDR
13553: GO 13898
13555: LD_INT 26
13557: DOUBLE
13558: EQUAL
13559: IFTRUE 13563
13561: GO 13581
13563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13564: LD_ADDR_VAR 0 3
13568: PUSH
13569: LD_INT 13
13571: PUSH
13572: LD_INT 14
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: ST_TO_ADDR
13579: GO 13898
13581: LD_INT 42
13583: DOUBLE
13584: EQUAL
13585: IFTRUE 13589
13587: GO 13615
13589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_INT 21
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 23
13603: PUSH
13604: LD_INT 24
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: ST_TO_ADDR
13613: GO 13898
13615: LD_INT 43
13617: DOUBLE
13618: EQUAL
13619: IFTRUE 13623
13621: GO 13649
13623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13624: LD_ADDR_VAR 0 3
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_INT 23
13637: PUSH
13638: LD_INT 24
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: ST_TO_ADDR
13647: GO 13898
13649: LD_INT 44
13651: DOUBLE
13652: EQUAL
13653: IFTRUE 13657
13655: GO 13683
13657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: LD_INT 21
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_INT 23
13671: PUSH
13672: LD_INT 24
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: ST_TO_ADDR
13681: GO 13898
13683: LD_INT 45
13685: DOUBLE
13686: EQUAL
13687: IFTRUE 13691
13689: GO 13717
13691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13692: LD_ADDR_VAR 0 3
13696: PUSH
13697: LD_INT 21
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_INT 23
13705: PUSH
13706: LD_INT 24
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: ST_TO_ADDR
13715: GO 13898
13717: LD_INT 49
13719: DOUBLE
13720: EQUAL
13721: IFTRUE 13725
13723: GO 13751
13725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_INT 21
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_INT 23
13739: PUSH
13740: LD_INT 24
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
13749: GO 13898
13751: LD_INT 51
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13785
13759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13760: LD_ADDR_VAR 0 3
13764: PUSH
13765: LD_INT 21
13767: PUSH
13768: LD_INT 22
13770: PUSH
13771: LD_INT 23
13773: PUSH
13774: LD_INT 24
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: ST_TO_ADDR
13783: GO 13898
13785: LD_INT 52
13787: DOUBLE
13788: EQUAL
13789: IFTRUE 13793
13791: GO 13819
13793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13794: LD_ADDR_VAR 0 3
13798: PUSH
13799: LD_INT 21
13801: PUSH
13802: LD_INT 22
13804: PUSH
13805: LD_INT 23
13807: PUSH
13808: LD_INT 24
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: ST_TO_ADDR
13817: GO 13898
13819: LD_INT 53
13821: DOUBLE
13822: EQUAL
13823: IFTRUE 13827
13825: GO 13845
13827: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13828: LD_ADDR_VAR 0 3
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 24
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: ST_TO_ADDR
13843: GO 13898
13845: LD_INT 46
13847: DOUBLE
13848: EQUAL
13849: IFTRUE 13853
13851: GO 13871
13853: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: LD_INT 23
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: ST_TO_ADDR
13869: GO 13898
13871: LD_INT 47
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13897
13879: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13880: LD_ADDR_VAR 0 3
13884: PUSH
13885: LD_INT 23
13887: PUSH
13888: LD_INT 24
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: ST_TO_ADDR
13895: GO 13898
13897: POP
// result := ( chassis in result ) ;
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_VAR 0 1
13907: PUSH
13908: LD_VAR 0 3
13912: IN
13913: ST_TO_ADDR
// end ;
13914: LD_VAR 0 3
13918: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
13926: PPUSH
13927: PPUSH
// result := array ;
13928: LD_ADDR_VAR 0 5
13932: PUSH
13933: LD_VAR 0 1
13937: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13938: LD_VAR 0 1
13942: NOT
13943: PUSH
13944: LD_VAR 0 2
13948: NOT
13949: OR
13950: PUSH
13951: LD_VAR 0 3
13955: NOT
13956: OR
13957: PUSH
13958: LD_VAR 0 2
13962: PUSH
13963: LD_VAR 0 1
13967: GREATER
13968: OR
13969: PUSH
13970: LD_VAR 0 3
13974: PUSH
13975: LD_VAR 0 1
13979: GREATER
13980: OR
13981: IFFALSE 13985
// exit ;
13983: GO 14281
// if direction then
13985: LD_VAR 0 4
13989: IFFALSE 14053
// begin d := 1 ;
13991: LD_ADDR_VAR 0 9
13995: PUSH
13996: LD_INT 1
13998: ST_TO_ADDR
// if i_from > i_to then
13999: LD_VAR 0 2
14003: PUSH
14004: LD_VAR 0 3
14008: GREATER
14009: IFFALSE 14035
// length := ( array - i_from ) + i_to else
14011: LD_ADDR_VAR 0 11
14015: PUSH
14016: LD_VAR 0 1
14020: PUSH
14021: LD_VAR 0 2
14025: MINUS
14026: PUSH
14027: LD_VAR 0 3
14031: PLUS
14032: ST_TO_ADDR
14033: GO 14051
// length := i_to - i_from ;
14035: LD_ADDR_VAR 0 11
14039: PUSH
14040: LD_VAR 0 3
14044: PUSH
14045: LD_VAR 0 2
14049: MINUS
14050: ST_TO_ADDR
// end else
14051: GO 14114
// begin d := - 1 ;
14053: LD_ADDR_VAR 0 9
14057: PUSH
14058: LD_INT 1
14060: NEG
14061: ST_TO_ADDR
// if i_from > i_to then
14062: LD_VAR 0 2
14066: PUSH
14067: LD_VAR 0 3
14071: GREATER
14072: IFFALSE 14092
// length := i_from - i_to else
14074: LD_ADDR_VAR 0 11
14078: PUSH
14079: LD_VAR 0 2
14083: PUSH
14084: LD_VAR 0 3
14088: MINUS
14089: ST_TO_ADDR
14090: GO 14114
// length := ( array - i_to ) + i_from ;
14092: LD_ADDR_VAR 0 11
14096: PUSH
14097: LD_VAR 0 1
14101: PUSH
14102: LD_VAR 0 3
14106: MINUS
14107: PUSH
14108: LD_VAR 0 2
14112: PLUS
14113: ST_TO_ADDR
// end ; if not length then
14114: LD_VAR 0 11
14118: NOT
14119: IFFALSE 14123
// exit ;
14121: GO 14281
// tmp := array ;
14123: LD_ADDR_VAR 0 10
14127: PUSH
14128: LD_VAR 0 1
14132: ST_TO_ADDR
// for i = 1 to length do
14133: LD_ADDR_VAR 0 6
14137: PUSH
14138: DOUBLE
14139: LD_INT 1
14141: DEC
14142: ST_TO_ADDR
14143: LD_VAR 0 11
14147: PUSH
14148: FOR_TO
14149: IFFALSE 14269
// begin for j = 1 to array do
14151: LD_ADDR_VAR 0 7
14155: PUSH
14156: DOUBLE
14157: LD_INT 1
14159: DEC
14160: ST_TO_ADDR
14161: LD_VAR 0 1
14165: PUSH
14166: FOR_TO
14167: IFFALSE 14255
// begin k := j + d ;
14169: LD_ADDR_VAR 0 8
14173: PUSH
14174: LD_VAR 0 7
14178: PUSH
14179: LD_VAR 0 9
14183: PLUS
14184: ST_TO_ADDR
// if k > array then
14185: LD_VAR 0 8
14189: PUSH
14190: LD_VAR 0 1
14194: GREATER
14195: IFFALSE 14205
// k := 1 ;
14197: LD_ADDR_VAR 0 8
14201: PUSH
14202: LD_INT 1
14204: ST_TO_ADDR
// if not k then
14205: LD_VAR 0 8
14209: NOT
14210: IFFALSE 14222
// k := array ;
14212: LD_ADDR_VAR 0 8
14216: PUSH
14217: LD_VAR 0 1
14221: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14222: LD_ADDR_VAR 0 10
14226: PUSH
14227: LD_VAR 0 10
14231: PPUSH
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_VAR 0 7
14246: ARRAY
14247: PPUSH
14248: CALL_OW 1
14252: ST_TO_ADDR
// end ;
14253: GO 14166
14255: POP
14256: POP
// array := tmp ;
14257: LD_ADDR_VAR 0 1
14261: PUSH
14262: LD_VAR 0 10
14266: ST_TO_ADDR
// end ;
14267: GO 14148
14269: POP
14270: POP
// result := array ;
14271: LD_ADDR_VAR 0 5
14275: PUSH
14276: LD_VAR 0 1
14280: ST_TO_ADDR
// end ;
14281: LD_VAR 0 5
14285: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14286: LD_INT 0
14288: PPUSH
14289: PPUSH
// result := 0 ;
14290: LD_ADDR_VAR 0 3
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// if not array or not value in array then
14298: LD_VAR 0 1
14302: NOT
14303: PUSH
14304: LD_VAR 0 2
14308: PUSH
14309: LD_VAR 0 1
14313: IN
14314: NOT
14315: OR
14316: IFFALSE 14320
// exit ;
14318: GO 14374
// for i = 1 to array do
14320: LD_ADDR_VAR 0 4
14324: PUSH
14325: DOUBLE
14326: LD_INT 1
14328: DEC
14329: ST_TO_ADDR
14330: LD_VAR 0 1
14334: PUSH
14335: FOR_TO
14336: IFFALSE 14372
// if value = array [ i ] then
14338: LD_VAR 0 2
14342: PUSH
14343: LD_VAR 0 1
14347: PUSH
14348: LD_VAR 0 4
14352: ARRAY
14353: EQUAL
14354: IFFALSE 14370
// begin result := i ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_VAR 0 4
14365: ST_TO_ADDR
// exit ;
14366: POP
14367: POP
14368: GO 14374
// end ;
14370: GO 14335
14372: POP
14373: POP
// end ;
14374: LD_VAR 0 3
14378: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14379: LD_INT 0
14381: PPUSH
// vc_chassis := chassis ;
14382: LD_ADDR_OWVAR 37
14386: PUSH
14387: LD_VAR 0 1
14391: ST_TO_ADDR
// vc_engine := engine ;
14392: LD_ADDR_OWVAR 39
14396: PUSH
14397: LD_VAR 0 2
14401: ST_TO_ADDR
// vc_control := control ;
14402: LD_ADDR_OWVAR 38
14406: PUSH
14407: LD_VAR 0 3
14411: ST_TO_ADDR
// vc_weapon := weapon ;
14412: LD_ADDR_OWVAR 40
14416: PUSH
14417: LD_VAR 0 4
14421: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14422: LD_ADDR_OWVAR 41
14426: PUSH
14427: LD_VAR 0 5
14431: ST_TO_ADDR
// end ;
14432: LD_VAR 0 6
14436: RET
// export function WantPlant ( unit ) ; var task ; begin
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
// result := false ;
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 437
14463: ST_TO_ADDR
// if task then
14464: LD_VAR 0 3
14468: IFFALSE 14496
// if task [ 1 ] [ 1 ] = p then
14470: LD_VAR 0 3
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PUSH
14479: LD_INT 1
14481: ARRAY
14482: PUSH
14483: LD_STRING p
14485: EQUAL
14486: IFFALSE 14496
// result := true ;
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_INT 1
14495: ST_TO_ADDR
// end ;
14496: LD_VAR 0 2
14500: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
// if pos < 1 then
14507: LD_VAR 0 2
14511: PUSH
14512: LD_INT 1
14514: LESS
14515: IFFALSE 14519
// exit ;
14517: GO 14822
// if pos = 1 then
14519: LD_VAR 0 2
14523: PUSH
14524: LD_INT 1
14526: EQUAL
14527: IFFALSE 14560
// result := Replace ( arr , pos [ 1 ] , value ) else
14529: LD_ADDR_VAR 0 4
14533: PUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_VAR 0 2
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: CALL_OW 1
14557: ST_TO_ADDR
14558: GO 14822
// begin tmp := arr ;
14560: LD_ADDR_VAR 0 6
14564: PUSH
14565: LD_VAR 0 1
14569: ST_TO_ADDR
// s_arr := [ tmp ] ;
14570: LD_ADDR_VAR 0 7
14574: PUSH
14575: LD_VAR 0 6
14579: PUSH
14580: EMPTY
14581: LIST
14582: ST_TO_ADDR
// for i = 1 to pos - 1 do
14583: LD_ADDR_VAR 0 5
14587: PUSH
14588: DOUBLE
14589: LD_INT 1
14591: DEC
14592: ST_TO_ADDR
14593: LD_VAR 0 2
14597: PUSH
14598: LD_INT 1
14600: MINUS
14601: PUSH
14602: FOR_TO
14603: IFFALSE 14648
// begin tmp := tmp [ pos [ i ] ] ;
14605: LD_ADDR_VAR 0 6
14609: PUSH
14610: LD_VAR 0 6
14614: PUSH
14615: LD_VAR 0 2
14619: PUSH
14620: LD_VAR 0 5
14624: ARRAY
14625: ARRAY
14626: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14627: LD_ADDR_VAR 0 7
14631: PUSH
14632: LD_VAR 0 7
14636: PUSH
14637: LD_VAR 0 6
14641: PUSH
14642: EMPTY
14643: LIST
14644: ADD
14645: ST_TO_ADDR
// end ;
14646: GO 14602
14648: POP
14649: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14650: LD_ADDR_VAR 0 6
14654: PUSH
14655: LD_VAR 0 6
14659: PPUSH
14660: LD_VAR 0 2
14664: PUSH
14665: LD_VAR 0 2
14669: ARRAY
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: CALL_OW 1
14680: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14681: LD_ADDR_VAR 0 7
14685: PUSH
14686: LD_VAR 0 7
14690: PPUSH
14691: LD_VAR 0 7
14695: PPUSH
14696: LD_VAR 0 6
14700: PPUSH
14701: CALL_OW 1
14705: ST_TO_ADDR
// for i = s_arr downto 2 do
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: DOUBLE
14712: LD_VAR 0 7
14716: INC
14717: ST_TO_ADDR
14718: LD_INT 2
14720: PUSH
14721: FOR_DOWNTO
14722: IFFALSE 14806
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14724: LD_ADDR_VAR 0 6
14728: PUSH
14729: LD_VAR 0 7
14733: PUSH
14734: LD_VAR 0 5
14738: PUSH
14739: LD_INT 1
14741: MINUS
14742: ARRAY
14743: PPUSH
14744: LD_VAR 0 2
14748: PUSH
14749: LD_VAR 0 5
14753: PUSH
14754: LD_INT 1
14756: MINUS
14757: ARRAY
14758: PPUSH
14759: LD_VAR 0 7
14763: PUSH
14764: LD_VAR 0 5
14768: ARRAY
14769: PPUSH
14770: CALL_OW 1
14774: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14775: LD_ADDR_VAR 0 7
14779: PUSH
14780: LD_VAR 0 7
14784: PPUSH
14785: LD_VAR 0 5
14789: PUSH
14790: LD_INT 1
14792: MINUS
14793: PPUSH
14794: LD_VAR 0 6
14798: PPUSH
14799: CALL_OW 1
14803: ST_TO_ADDR
// end ;
14804: GO 14721
14806: POP
14807: POP
// result := s_arr [ 1 ] ;
14808: LD_ADDR_VAR 0 4
14812: PUSH
14813: LD_VAR 0 7
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: ST_TO_ADDR
// end ; end ;
14822: LD_VAR 0 4
14826: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
// if not list then
14831: LD_VAR 0 1
14835: NOT
14836: IFFALSE 14840
// exit ;
14838: GO 14931
// i := list [ pos1 ] ;
14840: LD_ADDR_VAR 0 5
14844: PUSH
14845: LD_VAR 0 1
14849: PUSH
14850: LD_VAR 0 2
14854: ARRAY
14855: ST_TO_ADDR
// if not i then
14856: LD_VAR 0 5
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 14931
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14865: LD_ADDR_VAR 0 1
14869: PUSH
14870: LD_VAR 0 1
14874: PPUSH
14875: LD_VAR 0 2
14879: PPUSH
14880: LD_VAR 0 1
14884: PUSH
14885: LD_VAR 0 3
14889: ARRAY
14890: PPUSH
14891: CALL_OW 1
14895: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14896: LD_ADDR_VAR 0 1
14900: PUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: LD_VAR 0 3
14910: PPUSH
14911: LD_VAR 0 5
14915: PPUSH
14916: CALL_OW 1
14920: ST_TO_ADDR
// result := list ;
14921: LD_ADDR_VAR 0 4
14925: PUSH
14926: LD_VAR 0 1
14930: ST_TO_ADDR
// end ;
14931: LD_VAR 0 4
14935: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14936: LD_INT 0
14938: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14939: LD_ADDR_VAR 0 5
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 250
14953: PPUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 251
14963: PPUSH
14964: LD_VAR 0 2
14968: PPUSH
14969: LD_VAR 0 3
14973: PPUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: CALL 14989 0 5
14983: ST_TO_ADDR
// end ;
14984: LD_VAR 0 5
14988: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14989: LD_INT 0
14991: PPUSH
14992: PPUSH
14993: PPUSH
14994: PPUSH
// if not list then
14995: LD_VAR 0 3
14999: NOT
15000: IFFALSE 15004
// exit ;
15002: GO 15392
// result := [ ] ;
15004: LD_ADDR_VAR 0 6
15008: PUSH
15009: EMPTY
15010: ST_TO_ADDR
// for i in list do
15011: LD_ADDR_VAR 0 7
15015: PUSH
15016: LD_VAR 0 3
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15224
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15024: LD_ADDR_VAR 0 9
15028: PUSH
15029: LD_VAR 0 7
15033: PPUSH
15034: LD_VAR 0 1
15038: PPUSH
15039: LD_VAR 0 2
15043: PPUSH
15044: CALL_OW 297
15048: ST_TO_ADDR
// if not result then
15049: LD_VAR 0 6
15053: NOT
15054: IFFALSE 15080
// result := [ [ i , tmp ] ] else
15056: LD_ADDR_VAR 0 6
15060: PUSH
15061: LD_VAR 0 7
15065: PUSH
15066: LD_VAR 0 9
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: ST_TO_ADDR
15078: GO 15222
// begin if result [ result ] [ 2 ] < tmp then
15080: LD_VAR 0 6
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PUSH
15095: LD_VAR 0 9
15099: LESS
15100: IFFALSE 15142
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15102: LD_ADDR_VAR 0 6
15106: PUSH
15107: LD_VAR 0 6
15111: PPUSH
15112: LD_VAR 0 6
15116: PUSH
15117: LD_INT 1
15119: PLUS
15120: PPUSH
15121: LD_VAR 0 7
15125: PUSH
15126: LD_VAR 0 9
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 2
15139: ST_TO_ADDR
15140: GO 15222
// for j = 1 to result do
15142: LD_ADDR_VAR 0 8
15146: PUSH
15147: DOUBLE
15148: LD_INT 1
15150: DEC
15151: ST_TO_ADDR
15152: LD_VAR 0 6
15156: PUSH
15157: FOR_TO
15158: IFFALSE 15220
// begin if tmp < result [ j ] [ 2 ] then
15160: LD_VAR 0 9
15164: PUSH
15165: LD_VAR 0 6
15169: PUSH
15170: LD_VAR 0 8
15174: ARRAY
15175: PUSH
15176: LD_INT 2
15178: ARRAY
15179: LESS
15180: IFFALSE 15218
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 6
15191: PPUSH
15192: LD_VAR 0 8
15196: PPUSH
15197: LD_VAR 0 7
15201: PUSH
15202: LD_VAR 0 9
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 2
15215: ST_TO_ADDR
// break ;
15216: GO 15220
// end ; end ;
15218: GO 15157
15220: POP
15221: POP
// end ; end ;
15222: GO 15021
15224: POP
15225: POP
// if result and not asc then
15226: LD_VAR 0 6
15230: PUSH
15231: LD_VAR 0 4
15235: NOT
15236: AND
15237: IFFALSE 15312
// begin tmp := result ;
15239: LD_ADDR_VAR 0 9
15243: PUSH
15244: LD_VAR 0 6
15248: ST_TO_ADDR
// for i = tmp downto 1 do
15249: LD_ADDR_VAR 0 7
15253: PUSH
15254: DOUBLE
15255: LD_VAR 0 9
15259: INC
15260: ST_TO_ADDR
15261: LD_INT 1
15263: PUSH
15264: FOR_DOWNTO
15265: IFFALSE 15310
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15267: LD_ADDR_VAR 0 6
15271: PUSH
15272: LD_VAR 0 6
15276: PPUSH
15277: LD_VAR 0 9
15281: PUSH
15282: LD_VAR 0 7
15286: MINUS
15287: PUSH
15288: LD_INT 1
15290: PLUS
15291: PPUSH
15292: LD_VAR 0 9
15296: PUSH
15297: LD_VAR 0 7
15301: ARRAY
15302: PPUSH
15303: CALL_OW 1
15307: ST_TO_ADDR
15308: GO 15264
15310: POP
15311: POP
// end ; tmp := [ ] ;
15312: LD_ADDR_VAR 0 9
15316: PUSH
15317: EMPTY
15318: ST_TO_ADDR
// if mode then
15319: LD_VAR 0 5
15323: IFFALSE 15392
// begin for i = 1 to result do
15325: LD_ADDR_VAR 0 7
15329: PUSH
15330: DOUBLE
15331: LD_INT 1
15333: DEC
15334: ST_TO_ADDR
15335: LD_VAR 0 6
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15380
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15343: LD_ADDR_VAR 0 9
15347: PUSH
15348: LD_VAR 0 9
15352: PPUSH
15353: LD_VAR 0 7
15357: PPUSH
15358: LD_VAR 0 6
15362: PUSH
15363: LD_VAR 0 7
15367: ARRAY
15368: PUSH
15369: LD_INT 1
15371: ARRAY
15372: PPUSH
15373: CALL_OW 1
15377: ST_TO_ADDR
15378: GO 15340
15380: POP
15381: POP
// result := tmp ;
15382: LD_ADDR_VAR 0 6
15386: PUSH
15387: LD_VAR 0 9
15391: ST_TO_ADDR
// end ; end ;
15392: LD_VAR 0 6
15396: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15405: LD_ADDR_VAR 0 5
15409: PUSH
15410: LD_INT 0
15412: PUSH
15413: LD_INT 0
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: EMPTY
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: ST_TO_ADDR
// if not x or not y then
15427: LD_VAR 0 2
15431: NOT
15432: PUSH
15433: LD_VAR 0 3
15437: NOT
15438: OR
15439: IFFALSE 15443
// exit ;
15441: GO 17095
// if not range then
15443: LD_VAR 0 4
15447: NOT
15448: IFFALSE 15458
// range := 10 ;
15450: LD_ADDR_VAR 0 4
15454: PUSH
15455: LD_INT 10
15457: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15458: LD_ADDR_VAR 0 8
15462: PUSH
15463: LD_INT 81
15465: PUSH
15466: LD_VAR 0 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 92
15477: PUSH
15478: LD_VAR 0 2
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_VAR 0 4
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 3
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: ST_TO_ADDR
// if not tmp then
15526: LD_VAR 0 8
15530: NOT
15531: IFFALSE 15535
// exit ;
15533: GO 17095
// for i in tmp do
15535: LD_ADDR_VAR 0 6
15539: PUSH
15540: LD_VAR 0 8
15544: PUSH
15545: FOR_IN
15546: IFFALSE 17070
// begin points := [ 0 , 0 , 0 ] ;
15548: LD_ADDR_VAR 0 9
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: LD_INT 0
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: ST_TO_ADDR
// bpoints := 1 ;
15567: LD_ADDR_VAR 0 10
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15575: LD_VAR 0 6
15579: PPUSH
15580: CALL_OW 247
15584: PUSH
15585: LD_INT 1
15587: DOUBLE
15588: EQUAL
15589: IFTRUE 15593
15591: GO 16171
15593: POP
// begin if GetClass ( i ) = 1 then
15594: LD_VAR 0 6
15598: PPUSH
15599: CALL_OW 257
15603: PUSH
15604: LD_INT 1
15606: EQUAL
15607: IFFALSE 15628
// points := [ 10 , 5 , 3 ] ;
15609: LD_ADDR_VAR 0 9
15613: PUSH
15614: LD_INT 10
15616: PUSH
15617: LD_INT 5
15619: PUSH
15620: LD_INT 3
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15628: LD_VAR 0 6
15632: PPUSH
15633: CALL_OW 257
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 3
15643: PUSH
15644: LD_INT 4
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: IN
15652: IFFALSE 15673
// points := [ 3 , 2 , 1 ] ;
15654: LD_ADDR_VAR 0 9
15658: PUSH
15659: LD_INT 3
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 1
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15673: LD_VAR 0 6
15677: PPUSH
15678: CALL_OW 257
15682: PUSH
15683: LD_INT 5
15685: EQUAL
15686: IFFALSE 15707
// points := [ 130 , 5 , 2 ] ;
15688: LD_ADDR_VAR 0 9
15692: PUSH
15693: LD_INT 130
15695: PUSH
15696: LD_INT 5
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15707: LD_VAR 0 6
15711: PPUSH
15712: CALL_OW 257
15716: PUSH
15717: LD_INT 8
15719: EQUAL
15720: IFFALSE 15741
// points := [ 35 , 35 , 30 ] ;
15722: LD_ADDR_VAR 0 9
15726: PUSH
15727: LD_INT 35
15729: PUSH
15730: LD_INT 35
15732: PUSH
15733: LD_INT 30
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15741: LD_VAR 0 6
15745: PPUSH
15746: CALL_OW 257
15750: PUSH
15751: LD_INT 9
15753: EQUAL
15754: IFFALSE 15775
// points := [ 20 , 55 , 40 ] ;
15756: LD_ADDR_VAR 0 9
15760: PUSH
15761: LD_INT 20
15763: PUSH
15764: LD_INT 55
15766: PUSH
15767: LD_INT 40
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15775: LD_VAR 0 6
15779: PPUSH
15780: CALL_OW 257
15784: PUSH
15785: LD_INT 12
15787: PUSH
15788: LD_INT 16
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: IN
15795: IFFALSE 15816
// points := [ 5 , 3 , 2 ] ;
15797: LD_ADDR_VAR 0 9
15801: PUSH
15802: LD_INT 5
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15816: LD_VAR 0 6
15820: PPUSH
15821: CALL_OW 257
15825: PUSH
15826: LD_INT 17
15828: EQUAL
15829: IFFALSE 15850
// points := [ 100 , 50 , 75 ] ;
15831: LD_ADDR_VAR 0 9
15835: PUSH
15836: LD_INT 100
15838: PUSH
15839: LD_INT 50
15841: PUSH
15842: LD_INT 75
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15850: LD_VAR 0 6
15854: PPUSH
15855: CALL_OW 257
15859: PUSH
15860: LD_INT 15
15862: EQUAL
15863: IFFALSE 15884
// points := [ 10 , 5 , 3 ] ;
15865: LD_ADDR_VAR 0 9
15869: PUSH
15870: LD_INT 10
15872: PUSH
15873: LD_INT 5
15875: PUSH
15876: LD_INT 3
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15884: LD_VAR 0 6
15888: PPUSH
15889: CALL_OW 257
15893: PUSH
15894: LD_INT 14
15896: EQUAL
15897: IFFALSE 15918
// points := [ 10 , 0 , 0 ] ;
15899: LD_ADDR_VAR 0 9
15903: PUSH
15904: LD_INT 10
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 0
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15918: LD_VAR 0 6
15922: PPUSH
15923: CALL_OW 257
15927: PUSH
15928: LD_INT 11
15930: EQUAL
15931: IFFALSE 15952
// points := [ 30 , 10 , 5 ] ;
15933: LD_ADDR_VAR 0 9
15937: PUSH
15938: LD_INT 30
15940: PUSH
15941: LD_INT 10
15943: PUSH
15944: LD_INT 5
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_INT 5
15959: PPUSH
15960: CALL_OW 321
15964: PUSH
15965: LD_INT 2
15967: EQUAL
15968: IFFALSE 15985
// bpoints := bpoints * 1.8 ;
15970: LD_ADDR_VAR 0 10
15974: PUSH
15975: LD_VAR 0 10
15979: PUSH
15980: LD_REAL  1.80000000000000E+0000
15983: MUL
15984: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15985: LD_VAR 0 6
15989: PPUSH
15990: CALL_OW 257
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 3
16003: PUSH
16004: LD_INT 4
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: IN
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_INT 51
16021: PPUSH
16022: CALL_OW 321
16026: PUSH
16027: LD_INT 2
16029: EQUAL
16030: AND
16031: IFFALSE 16048
// bpoints := bpoints * 1.2 ;
16033: LD_ADDR_VAR 0 10
16037: PUSH
16038: LD_VAR 0 10
16042: PUSH
16043: LD_REAL  1.20000000000000E+0000
16046: MUL
16047: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16048: LD_VAR 0 6
16052: PPUSH
16053: CALL_OW 257
16057: PUSH
16058: LD_INT 5
16060: PUSH
16061: LD_INT 7
16063: PUSH
16064: LD_INT 9
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: LIST
16071: IN
16072: PUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_INT 52
16080: PPUSH
16081: CALL_OW 321
16085: PUSH
16086: LD_INT 2
16088: EQUAL
16089: AND
16090: IFFALSE 16107
// bpoints := bpoints * 1.5 ;
16092: LD_ADDR_VAR 0 10
16096: PUSH
16097: LD_VAR 0 10
16101: PUSH
16102: LD_REAL  1.50000000000000E+0000
16105: MUL
16106: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16107: LD_VAR 0 1
16111: PPUSH
16112: LD_INT 66
16114: PPUSH
16115: CALL_OW 321
16119: PUSH
16120: LD_INT 2
16122: EQUAL
16123: IFFALSE 16140
// bpoints := bpoints * 1.1 ;
16125: LD_ADDR_VAR 0 10
16129: PUSH
16130: LD_VAR 0 10
16134: PUSH
16135: LD_REAL  1.10000000000000E+0000
16138: MUL
16139: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16140: LD_ADDR_VAR 0 10
16144: PUSH
16145: LD_VAR 0 10
16149: PUSH
16150: LD_VAR 0 6
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: CALL_OW 259
16162: PUSH
16163: LD_REAL  1.15000000000000E+0000
16166: MUL
16167: MUL
16168: ST_TO_ADDR
// end ; unit_vehicle :
16169: GO 16999
16171: LD_INT 2
16173: DOUBLE
16174: EQUAL
16175: IFTRUE 16179
16177: GO 16987
16179: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16180: LD_VAR 0 6
16184: PPUSH
16185: CALL_OW 264
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: LD_INT 42
16195: PUSH
16196: LD_INT 24
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: IN
16204: IFFALSE 16225
// points := [ 25 , 5 , 3 ] ;
16206: LD_ADDR_VAR 0 9
16210: PUSH
16211: LD_INT 25
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: LD_INT 3
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16225: LD_VAR 0 6
16229: PPUSH
16230: CALL_OW 264
16234: PUSH
16235: LD_INT 4
16237: PUSH
16238: LD_INT 43
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: IN
16249: IFFALSE 16270
// points := [ 40 , 15 , 5 ] ;
16251: LD_ADDR_VAR 0 9
16255: PUSH
16256: LD_INT 40
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 5
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16270: LD_VAR 0 6
16274: PPUSH
16275: CALL_OW 264
16279: PUSH
16280: LD_INT 3
16282: PUSH
16283: LD_INT 23
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: IN
16290: IFFALSE 16311
// points := [ 7 , 25 , 8 ] ;
16292: LD_ADDR_VAR 0 9
16296: PUSH
16297: LD_INT 7
16299: PUSH
16300: LD_INT 25
16302: PUSH
16303: LD_INT 8
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16311: LD_VAR 0 6
16315: PPUSH
16316: CALL_OW 264
16320: PUSH
16321: LD_INT 5
16323: PUSH
16324: LD_INT 27
16326: PUSH
16327: LD_INT 44
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: IN
16335: IFFALSE 16356
// points := [ 14 , 50 , 16 ] ;
16337: LD_ADDR_VAR 0 9
16341: PUSH
16342: LD_INT 14
16344: PUSH
16345: LD_INT 50
16347: PUSH
16348: LD_INT 16
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16356: LD_VAR 0 6
16360: PPUSH
16361: CALL_OW 264
16365: PUSH
16366: LD_INT 6
16368: PUSH
16369: LD_INT 46
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: IN
16376: IFFALSE 16397
// points := [ 32 , 120 , 70 ] ;
16378: LD_ADDR_VAR 0 9
16382: PUSH
16383: LD_INT 32
16385: PUSH
16386: LD_INT 120
16388: PUSH
16389: LD_INT 70
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16397: LD_VAR 0 6
16401: PPUSH
16402: CALL_OW 264
16406: PUSH
16407: LD_INT 7
16409: PUSH
16410: LD_INT 28
16412: PUSH
16413: LD_INT 45
16415: PUSH
16416: LD_EXP 95
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: IN
16427: IFFALSE 16448
// points := [ 35 , 20 , 45 ] ;
16429: LD_ADDR_VAR 0 9
16433: PUSH
16434: LD_INT 35
16436: PUSH
16437: LD_INT 20
16439: PUSH
16440: LD_INT 45
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16448: LD_VAR 0 6
16452: PPUSH
16453: CALL_OW 264
16457: PUSH
16458: LD_INT 47
16460: PUSH
16461: EMPTY
16462: LIST
16463: IN
16464: IFFALSE 16485
// points := [ 67 , 45 , 75 ] ;
16466: LD_ADDR_VAR 0 9
16470: PUSH
16471: LD_INT 67
16473: PUSH
16474: LD_INT 45
16476: PUSH
16477: LD_INT 75
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16485: LD_VAR 0 6
16489: PPUSH
16490: CALL_OW 264
16494: PUSH
16495: LD_INT 26
16497: PUSH
16498: EMPTY
16499: LIST
16500: IN
16501: IFFALSE 16522
// points := [ 120 , 30 , 80 ] ;
16503: LD_ADDR_VAR 0 9
16507: PUSH
16508: LD_INT 120
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 80
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16522: LD_VAR 0 6
16526: PPUSH
16527: CALL_OW 264
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: EMPTY
16536: LIST
16537: IN
16538: IFFALSE 16559
// points := [ 40 , 1 , 1 ] ;
16540: LD_ADDR_VAR 0 9
16544: PUSH
16545: LD_INT 40
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16559: LD_VAR 0 6
16563: PPUSH
16564: CALL_OW 264
16568: PUSH
16569: LD_INT 29
16571: PUSH
16572: EMPTY
16573: LIST
16574: IN
16575: IFFALSE 16596
// points := [ 70 , 200 , 400 ] ;
16577: LD_ADDR_VAR 0 9
16581: PUSH
16582: LD_INT 70
16584: PUSH
16585: LD_INT 200
16587: PUSH
16588: LD_INT 400
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16596: LD_VAR 0 6
16600: PPUSH
16601: CALL_OW 264
16605: PUSH
16606: LD_INT 14
16608: PUSH
16609: LD_INT 53
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: IN
16616: IFFALSE 16637
// points := [ 40 , 10 , 20 ] ;
16618: LD_ADDR_VAR 0 9
16622: PUSH
16623: LD_INT 40
16625: PUSH
16626: LD_INT 10
16628: PUSH
16629: LD_INT 20
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16637: LD_VAR 0 6
16641: PPUSH
16642: CALL_OW 264
16646: PUSH
16647: LD_INT 9
16649: PUSH
16650: EMPTY
16651: LIST
16652: IN
16653: IFFALSE 16674
// points := [ 5 , 70 , 20 ] ;
16655: LD_ADDR_VAR 0 9
16659: PUSH
16660: LD_INT 5
16662: PUSH
16663: LD_INT 70
16665: PUSH
16666: LD_INT 20
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16674: LD_VAR 0 6
16678: PPUSH
16679: CALL_OW 264
16683: PUSH
16684: LD_INT 10
16686: PUSH
16687: EMPTY
16688: LIST
16689: IN
16690: IFFALSE 16711
// points := [ 35 , 110 , 70 ] ;
16692: LD_ADDR_VAR 0 9
16696: PUSH
16697: LD_INT 35
16699: PUSH
16700: LD_INT 110
16702: PUSH
16703: LD_INT 70
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16711: LD_VAR 0 6
16715: PPUSH
16716: CALL_OW 265
16720: PUSH
16721: LD_INT 25
16723: EQUAL
16724: IFFALSE 16745
// points := [ 80 , 65 , 100 ] ;
16726: LD_ADDR_VAR 0 9
16730: PUSH
16731: LD_INT 80
16733: PUSH
16734: LD_INT 65
16736: PUSH
16737: LD_INT 100
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16745: LD_VAR 0 6
16749: PPUSH
16750: CALL_OW 263
16754: PUSH
16755: LD_INT 1
16757: EQUAL
16758: IFFALSE 16793
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16760: LD_ADDR_VAR 0 10
16764: PUSH
16765: LD_VAR 0 10
16769: PUSH
16770: LD_VAR 0 6
16774: PPUSH
16775: CALL_OW 311
16779: PPUSH
16780: LD_INT 3
16782: PPUSH
16783: CALL_OW 259
16787: PUSH
16788: LD_INT 4
16790: MUL
16791: MUL
16792: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16793: LD_VAR 0 6
16797: PPUSH
16798: CALL_OW 263
16802: PUSH
16803: LD_INT 2
16805: EQUAL
16806: IFFALSE 16857
// begin j := IsControledBy ( i ) ;
16808: LD_ADDR_VAR 0 7
16812: PUSH
16813: LD_VAR 0 6
16817: PPUSH
16818: CALL_OW 312
16822: ST_TO_ADDR
// if j then
16823: LD_VAR 0 7
16827: IFFALSE 16857
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16829: LD_ADDR_VAR 0 10
16833: PUSH
16834: LD_VAR 0 10
16838: PUSH
16839: LD_VAR 0 7
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 259
16851: PUSH
16852: LD_INT 3
16854: MUL
16855: MUL
16856: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16857: LD_VAR 0 6
16861: PPUSH
16862: CALL_OW 264
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: LD_INT 6
16872: PUSH
16873: LD_INT 46
16875: PUSH
16876: LD_INT 44
16878: PUSH
16879: LD_INT 47
16881: PUSH
16882: LD_INT 45
16884: PUSH
16885: LD_INT 28
16887: PUSH
16888: LD_INT 7
16890: PUSH
16891: LD_INT 27
16893: PUSH
16894: LD_INT 29
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: IN
16909: PUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: LD_INT 52
16917: PPUSH
16918: CALL_OW 321
16922: PUSH
16923: LD_INT 2
16925: EQUAL
16926: AND
16927: IFFALSE 16944
// bpoints := bpoints * 1.2 ;
16929: LD_ADDR_VAR 0 10
16933: PUSH
16934: LD_VAR 0 10
16938: PUSH
16939: LD_REAL  1.20000000000000E+0000
16942: MUL
16943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16944: LD_VAR 0 6
16948: PPUSH
16949: CALL_OW 264
16953: PUSH
16954: LD_INT 6
16956: PUSH
16957: LD_INT 46
16959: PUSH
16960: LD_INT 47
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: IN
16968: IFFALSE 16985
// bpoints := bpoints * 1.2 ;
16970: LD_ADDR_VAR 0 10
16974: PUSH
16975: LD_VAR 0 10
16979: PUSH
16980: LD_REAL  1.20000000000000E+0000
16983: MUL
16984: ST_TO_ADDR
// end ; unit_building :
16985: GO 16999
16987: LD_INT 3
16989: DOUBLE
16990: EQUAL
16991: IFTRUE 16995
16993: GO 16998
16995: POP
// ; end ;
16996: GO 16999
16998: POP
// for j = 1 to 3 do
16999: LD_ADDR_VAR 0 7
17003: PUSH
17004: DOUBLE
17005: LD_INT 1
17007: DEC
17008: ST_TO_ADDR
17009: LD_INT 3
17011: PUSH
17012: FOR_TO
17013: IFFALSE 17066
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17015: LD_ADDR_VAR 0 5
17019: PUSH
17020: LD_VAR 0 5
17024: PPUSH
17025: LD_VAR 0 7
17029: PPUSH
17030: LD_VAR 0 5
17034: PUSH
17035: LD_VAR 0 7
17039: ARRAY
17040: PUSH
17041: LD_VAR 0 9
17045: PUSH
17046: LD_VAR 0 7
17050: ARRAY
17051: PUSH
17052: LD_VAR 0 10
17056: MUL
17057: PLUS
17058: PPUSH
17059: CALL_OW 1
17063: ST_TO_ADDR
17064: GO 17012
17066: POP
17067: POP
// end ;
17068: GO 15545
17070: POP
17071: POP
// result := Replace ( result , 4 , tmp ) ;
17072: LD_ADDR_VAR 0 5
17076: PUSH
17077: LD_VAR 0 5
17081: PPUSH
17082: LD_INT 4
17084: PPUSH
17085: LD_VAR 0 8
17089: PPUSH
17090: CALL_OW 1
17094: ST_TO_ADDR
// end ;
17095: LD_VAR 0 5
17099: RET
// export function DangerAtRange ( unit , range ) ; begin
17100: LD_INT 0
17102: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 255
17117: PPUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL_OW 250
17127: PPUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 251
17137: PPUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: CALL 15397 0 4
17147: ST_TO_ADDR
// end ;
17148: LD_VAR 0 3
17152: RET
// export function DangerInArea ( side , area ) ; begin
17153: LD_INT 0
17155: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: LD_VAR 0 2
17165: PPUSH
17166: LD_INT 81
17168: PUSH
17169: LD_VAR 0 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 70
17182: ST_TO_ADDR
// end ;
17183: LD_VAR 0 3
17187: RET
// export function IsExtension ( b ) ; begin
17188: LD_INT 0
17190: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_VAR 0 1
17200: PUSH
17201: LD_INT 23
17203: PUSH
17204: LD_INT 20
17206: PUSH
17207: LD_INT 22
17209: PUSH
17210: LD_INT 17
17212: PUSH
17213: LD_INT 24
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 19
17221: PUSH
17222: LD_INT 16
17224: PUSH
17225: LD_INT 25
17227: PUSH
17228: LD_INT 18
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: IN
17243: ST_TO_ADDR
// end ;
17244: LD_VAR 0 2
17248: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
17253: PPUSH
// result := [ ] ;
17254: LD_ADDR_VAR 0 4
17258: PUSH
17259: EMPTY
17260: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17261: LD_ADDR_VAR 0 5
17265: PUSH
17266: LD_VAR 0 2
17270: PPUSH
17271: LD_INT 21
17273: PUSH
17274: LD_INT 3
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 70
17285: ST_TO_ADDR
// if not tmp then
17286: LD_VAR 0 5
17290: NOT
17291: IFFALSE 17295
// exit ;
17293: GO 17359
// if checkLink then
17295: LD_VAR 0 3
17299: IFFALSE 17349
// begin for i in tmp do
17301: LD_ADDR_VAR 0 6
17305: PUSH
17306: LD_VAR 0 5
17310: PUSH
17311: FOR_IN
17312: IFFALSE 17347
// if GetBase ( i ) <> base then
17314: LD_VAR 0 6
17318: PPUSH
17319: CALL_OW 274
17323: PUSH
17324: LD_VAR 0 1
17328: NONEQUAL
17329: IFFALSE 17345
// ComLinkToBase ( base , i ) ;
17331: LD_VAR 0 1
17335: PPUSH
17336: LD_VAR 0 6
17340: PPUSH
17341: CALL_OW 169
17345: GO 17311
17347: POP
17348: POP
// end ; result := tmp ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_VAR 0 5
17358: ST_TO_ADDR
// end ;
17359: LD_VAR 0 4
17363: RET
// export function ComComplete ( units , b ) ; var i ; begin
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
// if not units then
17368: LD_VAR 0 1
17372: NOT
17373: IFFALSE 17377
// exit ;
17375: GO 17467
// for i in units do
17377: LD_ADDR_VAR 0 4
17381: PUSH
17382: LD_VAR 0 1
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17465
// if BuildingStatus ( b ) = bs_build then
17390: LD_VAR 0 2
17394: PPUSH
17395: CALL_OW 461
17399: PUSH
17400: LD_INT 1
17402: EQUAL
17403: IFFALSE 17463
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17405: LD_VAR 0 4
17409: PPUSH
17410: LD_STRING h
17412: PUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: CALL_OW 250
17422: PUSH
17423: LD_VAR 0 2
17427: PPUSH
17428: CALL_OW 251
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: LD_INT 0
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: PPUSH
17459: CALL_OW 446
17463: GO 17387
17465: POP
17466: POP
// end ;
17467: LD_VAR 0 3
17471: RET
// export function AddComComplete ( units , b ) ; var i ; begin
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
// if not units then
17476: LD_VAR 0 1
17480: NOT
17481: IFFALSE 17485
// exit ;
17483: GO 17575
// for i in units do
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_VAR 0 1
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17573
// if BuildingStatus ( b ) = bs_build then
17498: LD_VAR 0 2
17502: PPUSH
17503: CALL_OW 461
17507: PUSH
17508: LD_INT 1
17510: EQUAL
17511: IFFALSE 17571
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_STRING h
17520: PUSH
17521: LD_VAR 0 2
17525: PPUSH
17526: CALL_OW 250
17530: PUSH
17531: LD_VAR 0 2
17535: PPUSH
17536: CALL_OW 251
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: PPUSH
17567: CALL_OW 447
17571: GO 17495
17573: POP
17574: POP
// end ;
17575: LD_VAR 0 3
17579: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17580: LD_INT 0
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17588: LD_VAR 0 1
17592: NOT
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 263
17603: PUSH
17604: LD_INT 2
17606: NONEQUAL
17607: OR
17608: IFFALSE 17612
// exit ;
17610: GO 17928
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17612: LD_ADDR_VAR 0 6
17616: PUSH
17617: LD_INT 22
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 255
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: LD_INT 30
17639: PUSH
17640: LD_INT 36
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 34
17649: PUSH
17650: LD_INT 31
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// if not tmp then
17671: LD_VAR 0 6
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 17928
// result := [ ] ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: EMPTY
17686: ST_TO_ADDR
// for i in tmp do
17687: LD_ADDR_VAR 0 3
17691: PUSH
17692: LD_VAR 0 6
17696: PUSH
17697: FOR_IN
17698: IFFALSE 17769
// begin t := UnitsInside ( i ) ;
17700: LD_ADDR_VAR 0 4
17704: PUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: CALL_OW 313
17714: ST_TO_ADDR
// if t then
17715: LD_VAR 0 4
17719: IFFALSE 17767
// for j in t do
17721: LD_ADDR_VAR 0 7
17725: PUSH
17726: LD_VAR 0 4
17730: PUSH
17731: FOR_IN
17732: IFFALSE 17765
// result := Replace ( result , result + 1 , j ) ;
17734: LD_ADDR_VAR 0 2
17738: PUSH
17739: LD_VAR 0 2
17743: PPUSH
17744: LD_VAR 0 2
17748: PUSH
17749: LD_INT 1
17751: PLUS
17752: PPUSH
17753: LD_VAR 0 7
17757: PPUSH
17758: CALL_OW 1
17762: ST_TO_ADDR
17763: GO 17731
17765: POP
17766: POP
// end ;
17767: GO 17697
17769: POP
17770: POP
// if not result then
17771: LD_VAR 0 2
17775: NOT
17776: IFFALSE 17780
// exit ;
17778: GO 17928
// mech := result [ 1 ] ;
17780: LD_ADDR_VAR 0 5
17784: PUSH
17785: LD_VAR 0 2
17789: PUSH
17790: LD_INT 1
17792: ARRAY
17793: ST_TO_ADDR
// if result > 1 then
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 1
17801: GREATER
17802: IFFALSE 17914
// begin for i = 2 to result do
17804: LD_ADDR_VAR 0 3
17808: PUSH
17809: DOUBLE
17810: LD_INT 2
17812: DEC
17813: ST_TO_ADDR
17814: LD_VAR 0 2
17818: PUSH
17819: FOR_TO
17820: IFFALSE 17912
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: LD_VAR 0 2
17831: PUSH
17832: LD_VAR 0 3
17836: ARRAY
17837: PPUSH
17838: LD_INT 3
17840: PPUSH
17841: CALL_OW 259
17845: PUSH
17846: LD_VAR 0 2
17850: PUSH
17851: LD_VAR 0 3
17855: ARRAY
17856: PPUSH
17857: CALL_OW 432
17861: MINUS
17862: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17863: LD_VAR 0 4
17867: PUSH
17868: LD_VAR 0 5
17872: PPUSH
17873: LD_INT 3
17875: PPUSH
17876: CALL_OW 259
17880: PUSH
17881: LD_VAR 0 5
17885: PPUSH
17886: CALL_OW 432
17890: MINUS
17891: GREATEREQUAL
17892: IFFALSE 17910
// mech := result [ i ] ;
17894: LD_ADDR_VAR 0 5
17898: PUSH
17899: LD_VAR 0 2
17903: PUSH
17904: LD_VAR 0 3
17908: ARRAY
17909: ST_TO_ADDR
// end ;
17910: GO 17819
17912: POP
17913: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17914: LD_VAR 0 1
17918: PPUSH
17919: LD_VAR 0 5
17923: PPUSH
17924: CALL_OW 135
// end ;
17928: LD_VAR 0 2
17932: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
17943: PPUSH
17944: PPUSH
17945: PPUSH
17946: PPUSH
17947: PPUSH
// result := [ ] ;
17948: LD_ADDR_VAR 0 7
17952: PUSH
17953: EMPTY
17954: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 266
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: IN
17975: NOT
17976: IFFALSE 17980
// exit ;
17978: GO 19614
// if name then
17980: LD_VAR 0 3
17984: IFFALSE 18000
// SetBName ( base_dep , name ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: CALL_OW 500
// base := GetBase ( base_dep ) ;
18000: LD_ADDR_VAR 0 15
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 274
18014: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18015: LD_ADDR_VAR 0 16
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 255
18029: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18030: LD_ADDR_VAR 0 17
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 248
18044: ST_TO_ADDR
// if sources then
18045: LD_VAR 0 5
18049: IFFALSE 18096
// for i = 1 to 3 do
18051: LD_ADDR_VAR 0 8
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_INT 3
18063: PUSH
18064: FOR_TO
18065: IFFALSE 18094
// AddResourceType ( base , i , sources [ i ] ) ;
18067: LD_VAR 0 15
18071: PPUSH
18072: LD_VAR 0 8
18076: PPUSH
18077: LD_VAR 0 5
18081: PUSH
18082: LD_VAR 0 8
18086: ARRAY
18087: PPUSH
18088: CALL_OW 276
18092: GO 18064
18094: POP
18095: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18096: LD_ADDR_VAR 0 18
18100: PUSH
18101: LD_VAR 0 15
18105: PPUSH
18106: LD_VAR 0 2
18110: PPUSH
18111: LD_INT 1
18113: PPUSH
18114: CALL 17249 0 3
18118: ST_TO_ADDR
// InitHc ;
18119: CALL_OW 19
// InitUc ;
18123: CALL_OW 18
// uc_side := side ;
18127: LD_ADDR_OWVAR 20
18131: PUSH
18132: LD_VAR 0 16
18136: ST_TO_ADDR
// uc_nation := nation ;
18137: LD_ADDR_OWVAR 21
18141: PUSH
18142: LD_VAR 0 17
18146: ST_TO_ADDR
// if buildings then
18147: LD_VAR 0 18
18151: IFFALSE 19473
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18153: LD_ADDR_VAR 0 19
18157: PUSH
18158: LD_VAR 0 18
18162: PPUSH
18163: LD_INT 2
18165: PUSH
18166: LD_INT 30
18168: PUSH
18169: LD_INT 29
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 30
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 72
18195: ST_TO_ADDR
// if tmp then
18196: LD_VAR 0 19
18200: IFFALSE 18248
// for i in tmp do
18202: LD_ADDR_VAR 0 8
18206: PUSH
18207: LD_VAR 0 19
18211: PUSH
18212: FOR_IN
18213: IFFALSE 18246
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18215: LD_VAR 0 8
18219: PPUSH
18220: CALL_OW 250
18224: PPUSH
18225: LD_VAR 0 8
18229: PPUSH
18230: CALL_OW 251
18234: PPUSH
18235: LD_VAR 0 16
18239: PPUSH
18240: CALL_OW 441
18244: GO 18212
18246: POP
18247: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18248: LD_VAR 0 18
18252: PPUSH
18253: LD_INT 2
18255: PUSH
18256: LD_INT 30
18258: PUSH
18259: LD_INT 32
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 30
18268: PUSH
18269: LD_INT 33
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 72
18285: IFFALSE 18373
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18287: LD_ADDR_VAR 0 8
18291: PUSH
18292: LD_VAR 0 18
18296: PPUSH
18297: LD_INT 2
18299: PUSH
18300: LD_INT 30
18302: PUSH
18303: LD_INT 32
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 30
18312: PUSH
18313: LD_INT 33
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: PPUSH
18325: CALL_OW 72
18329: PUSH
18330: FOR_IN
18331: IFFALSE 18371
// begin if not GetBWeapon ( i ) then
18333: LD_VAR 0 8
18337: PPUSH
18338: CALL_OW 269
18342: NOT
18343: IFFALSE 18369
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18345: LD_VAR 0 8
18349: PPUSH
18350: LD_VAR 0 8
18354: PPUSH
18355: LD_VAR 0 2
18359: PPUSH
18360: CALL 19619 0 2
18364: PPUSH
18365: CALL_OW 431
// end ;
18369: GO 18330
18371: POP
18372: POP
// end ; for i = 1 to personel do
18373: LD_ADDR_VAR 0 8
18377: PUSH
18378: DOUBLE
18379: LD_INT 1
18381: DEC
18382: ST_TO_ADDR
18383: LD_VAR 0 6
18387: PUSH
18388: FOR_TO
18389: IFFALSE 19453
// begin if i > 4 then
18391: LD_VAR 0 8
18395: PUSH
18396: LD_INT 4
18398: GREATER
18399: IFFALSE 18403
// break ;
18401: GO 19453
// case i of 1 :
18403: LD_VAR 0 8
18407: PUSH
18408: LD_INT 1
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18496
18416: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18417: LD_ADDR_VAR 0 12
18421: PUSH
18422: LD_VAR 0 18
18426: PPUSH
18427: LD_INT 22
18429: PUSH
18430: LD_VAR 0 16
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 58
18441: PUSH
18442: EMPTY
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 30
18450: PUSH
18451: LD_INT 32
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 30
18460: PUSH
18461: LD_INT 4
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 30
18470: PUSH
18471: LD_INT 5
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 72
18493: ST_TO_ADDR
18494: GO 18718
18496: LD_INT 2
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18566
18504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18505: LD_ADDR_VAR 0 12
18509: PUSH
18510: LD_VAR 0 18
18514: PPUSH
18515: LD_INT 22
18517: PUSH
18518: LD_VAR 0 16
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 30
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 30
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 72
18563: ST_TO_ADDR
18564: GO 18718
18566: LD_INT 3
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18636
18574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18575: LD_ADDR_VAR 0 12
18579: PUSH
18580: LD_VAR 0 18
18584: PPUSH
18585: LD_INT 22
18587: PUSH
18588: LD_VAR 0 16
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 2
18599: PUSH
18600: LD_INT 30
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 30
18612: PUSH
18613: LD_INT 3
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PPUSH
18629: CALL_OW 72
18633: ST_TO_ADDR
18634: GO 18718
18636: LD_INT 4
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18717
18644: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18645: LD_ADDR_VAR 0 12
18649: PUSH
18650: LD_VAR 0 18
18654: PPUSH
18655: LD_INT 22
18657: PUSH
18658: LD_VAR 0 16
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 6
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 7
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 8
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PPUSH
18710: CALL_OW 72
18714: ST_TO_ADDR
18715: GO 18718
18717: POP
// if i = 1 then
18718: LD_VAR 0 8
18722: PUSH
18723: LD_INT 1
18725: EQUAL
18726: IFFALSE 18837
// begin tmp := [ ] ;
18728: LD_ADDR_VAR 0 19
18732: PUSH
18733: EMPTY
18734: ST_TO_ADDR
// for j in f do
18735: LD_ADDR_VAR 0 9
18739: PUSH
18740: LD_VAR 0 12
18744: PUSH
18745: FOR_IN
18746: IFFALSE 18819
// if GetBType ( j ) = b_bunker then
18748: LD_VAR 0 9
18752: PPUSH
18753: CALL_OW 266
18757: PUSH
18758: LD_INT 32
18760: EQUAL
18761: IFFALSE 18788
// tmp := Insert ( tmp , 1 , j ) else
18763: LD_ADDR_VAR 0 19
18767: PUSH
18768: LD_VAR 0 19
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_VAR 0 9
18780: PPUSH
18781: CALL_OW 2
18785: ST_TO_ADDR
18786: GO 18817
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18788: LD_ADDR_VAR 0 19
18792: PUSH
18793: LD_VAR 0 19
18797: PPUSH
18798: LD_VAR 0 19
18802: PUSH
18803: LD_INT 1
18805: PLUS
18806: PPUSH
18807: LD_VAR 0 9
18811: PPUSH
18812: CALL_OW 2
18816: ST_TO_ADDR
18817: GO 18745
18819: POP
18820: POP
// if tmp then
18821: LD_VAR 0 19
18825: IFFALSE 18837
// f := tmp ;
18827: LD_ADDR_VAR 0 12
18831: PUSH
18832: LD_VAR 0 19
18836: ST_TO_ADDR
// end ; x := personel [ i ] ;
18837: LD_ADDR_VAR 0 13
18841: PUSH
18842: LD_VAR 0 6
18846: PUSH
18847: LD_VAR 0 8
18851: ARRAY
18852: ST_TO_ADDR
// if x = - 1 then
18853: LD_VAR 0 13
18857: PUSH
18858: LD_INT 1
18860: NEG
18861: EQUAL
18862: IFFALSE 19071
// begin for j in f do
18864: LD_ADDR_VAR 0 9
18868: PUSH
18869: LD_VAR 0 12
18873: PUSH
18874: FOR_IN
18875: IFFALSE 19067
// repeat InitHc ;
18877: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18881: LD_VAR 0 9
18885: PPUSH
18886: CALL_OW 266
18890: PUSH
18891: LD_INT 5
18893: EQUAL
18894: IFFALSE 18964
// begin if UnitsInside ( j ) < 3 then
18896: LD_VAR 0 9
18900: PPUSH
18901: CALL_OW 313
18905: PUSH
18906: LD_INT 3
18908: LESS
18909: IFFALSE 18945
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18911: LD_INT 0
18913: PPUSH
18914: LD_INT 5
18916: PUSH
18917: LD_INT 8
18919: PUSH
18920: LD_INT 9
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_VAR 0 17
18932: ARRAY
18933: PPUSH
18934: LD_VAR 0 4
18938: PPUSH
18939: CALL_OW 380
18943: GO 18962
// PrepareHuman ( false , i , skill ) ;
18945: LD_INT 0
18947: PPUSH
18948: LD_VAR 0 8
18952: PPUSH
18953: LD_VAR 0 4
18957: PPUSH
18958: CALL_OW 380
// end else
18962: GO 18981
// PrepareHuman ( false , i , skill ) ;
18964: LD_INT 0
18966: PPUSH
18967: LD_VAR 0 8
18971: PPUSH
18972: LD_VAR 0 4
18976: PPUSH
18977: CALL_OW 380
// un := CreateHuman ;
18981: LD_ADDR_VAR 0 14
18985: PUSH
18986: CALL_OW 44
18990: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18991: LD_ADDR_VAR 0 7
18995: PUSH
18996: LD_VAR 0 7
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: LD_VAR 0 14
19008: PPUSH
19009: CALL_OW 2
19013: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19014: LD_VAR 0 14
19018: PPUSH
19019: LD_VAR 0 9
19023: PPUSH
19024: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19028: LD_VAR 0 9
19032: PPUSH
19033: CALL_OW 313
19037: PUSH
19038: LD_INT 6
19040: EQUAL
19041: PUSH
19042: LD_VAR 0 9
19046: PPUSH
19047: CALL_OW 266
19051: PUSH
19052: LD_INT 32
19054: PUSH
19055: LD_INT 31
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: IN
19062: OR
19063: IFFALSE 18877
19065: GO 18874
19067: POP
19068: POP
// end else
19069: GO 19451
// for j = 1 to x do
19071: LD_ADDR_VAR 0 9
19075: PUSH
19076: DOUBLE
19077: LD_INT 1
19079: DEC
19080: ST_TO_ADDR
19081: LD_VAR 0 13
19085: PUSH
19086: FOR_TO
19087: IFFALSE 19449
// begin InitHc ;
19089: CALL_OW 19
// if not f then
19093: LD_VAR 0 12
19097: NOT
19098: IFFALSE 19187
// begin PrepareHuman ( false , i , skill ) ;
19100: LD_INT 0
19102: PPUSH
19103: LD_VAR 0 8
19107: PPUSH
19108: LD_VAR 0 4
19112: PPUSH
19113: CALL_OW 380
// un := CreateHuman ;
19117: LD_ADDR_VAR 0 14
19121: PUSH
19122: CALL_OW 44
19126: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19127: LD_ADDR_VAR 0 7
19131: PUSH
19132: LD_VAR 0 7
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: LD_VAR 0 14
19144: PPUSH
19145: CALL_OW 2
19149: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19150: LD_VAR 0 14
19154: PPUSH
19155: LD_VAR 0 1
19159: PPUSH
19160: CALL_OW 250
19164: PPUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 251
19174: PPUSH
19175: LD_INT 10
19177: PPUSH
19178: LD_INT 0
19180: PPUSH
19181: CALL_OW 50
// continue ;
19185: GO 19086
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19187: LD_VAR 0 12
19191: PUSH
19192: LD_INT 1
19194: ARRAY
19195: PPUSH
19196: CALL_OW 313
19200: PUSH
19201: LD_VAR 0 12
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 266
19214: PUSH
19215: LD_INT 32
19217: PUSH
19218: LD_INT 31
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: IN
19225: AND
19226: PUSH
19227: LD_VAR 0 12
19231: PUSH
19232: LD_INT 1
19234: ARRAY
19235: PPUSH
19236: CALL_OW 313
19240: PUSH
19241: LD_INT 6
19243: EQUAL
19244: OR
19245: IFFALSE 19265
// f := Delete ( f , 1 ) ;
19247: LD_ADDR_VAR 0 12
19251: PUSH
19252: LD_VAR 0 12
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 3
19264: ST_TO_ADDR
// if not f then
19265: LD_VAR 0 12
19269: NOT
19270: IFFALSE 19288
// begin x := x + 2 ;
19272: LD_ADDR_VAR 0 13
19276: PUSH
19277: LD_VAR 0 13
19281: PUSH
19282: LD_INT 2
19284: PLUS
19285: ST_TO_ADDR
// continue ;
19286: GO 19086
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19288: LD_VAR 0 12
19292: PUSH
19293: LD_INT 1
19295: ARRAY
19296: PPUSH
19297: CALL_OW 266
19301: PUSH
19302: LD_INT 5
19304: EQUAL
19305: IFFALSE 19379
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19307: LD_VAR 0 12
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PPUSH
19316: CALL_OW 313
19320: PUSH
19321: LD_INT 3
19323: LESS
19324: IFFALSE 19360
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19326: LD_INT 0
19328: PPUSH
19329: LD_INT 5
19331: PUSH
19332: LD_INT 8
19334: PUSH
19335: LD_INT 9
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: PUSH
19343: LD_VAR 0 17
19347: ARRAY
19348: PPUSH
19349: LD_VAR 0 4
19353: PPUSH
19354: CALL_OW 380
19358: GO 19377
// PrepareHuman ( false , i , skill ) ;
19360: LD_INT 0
19362: PPUSH
19363: LD_VAR 0 8
19367: PPUSH
19368: LD_VAR 0 4
19372: PPUSH
19373: CALL_OW 380
// end else
19377: GO 19396
// PrepareHuman ( false , i , skill ) ;
19379: LD_INT 0
19381: PPUSH
19382: LD_VAR 0 8
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: CALL_OW 380
// un := CreateHuman ;
19396: LD_ADDR_VAR 0 14
19400: PUSH
19401: CALL_OW 44
19405: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19406: LD_ADDR_VAR 0 7
19410: PUSH
19411: LD_VAR 0 7
19415: PPUSH
19416: LD_INT 1
19418: PPUSH
19419: LD_VAR 0 14
19423: PPUSH
19424: CALL_OW 2
19428: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19429: LD_VAR 0 14
19433: PPUSH
19434: LD_VAR 0 12
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: PPUSH
19443: CALL_OW 52
// end ;
19447: GO 19086
19449: POP
19450: POP
// end ;
19451: GO 18388
19453: POP
19454: POP
// result := result ^ buildings ;
19455: LD_ADDR_VAR 0 7
19459: PUSH
19460: LD_VAR 0 7
19464: PUSH
19465: LD_VAR 0 18
19469: ADD
19470: ST_TO_ADDR
// end else
19471: GO 19614
// begin for i = 1 to personel do
19473: LD_ADDR_VAR 0 8
19477: PUSH
19478: DOUBLE
19479: LD_INT 1
19481: DEC
19482: ST_TO_ADDR
19483: LD_VAR 0 6
19487: PUSH
19488: FOR_TO
19489: IFFALSE 19612
// begin if i > 4 then
19491: LD_VAR 0 8
19495: PUSH
19496: LD_INT 4
19498: GREATER
19499: IFFALSE 19503
// break ;
19501: GO 19612
// x := personel [ i ] ;
19503: LD_ADDR_VAR 0 13
19507: PUSH
19508: LD_VAR 0 6
19512: PUSH
19513: LD_VAR 0 8
19517: ARRAY
19518: ST_TO_ADDR
// if x = - 1 then
19519: LD_VAR 0 13
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: EQUAL
19528: IFFALSE 19532
// continue ;
19530: GO 19488
// PrepareHuman ( false , i , skill ) ;
19532: LD_INT 0
19534: PPUSH
19535: LD_VAR 0 8
19539: PPUSH
19540: LD_VAR 0 4
19544: PPUSH
19545: CALL_OW 380
// un := CreateHuman ;
19549: LD_ADDR_VAR 0 14
19553: PUSH
19554: CALL_OW 44
19558: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19559: LD_VAR 0 14
19563: PPUSH
19564: LD_VAR 0 1
19568: PPUSH
19569: CALL_OW 250
19573: PPUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 251
19583: PPUSH
19584: LD_INT 10
19586: PPUSH
19587: LD_INT 0
19589: PPUSH
19590: CALL_OW 50
// result := result ^ un ;
19594: LD_ADDR_VAR 0 7
19598: PUSH
19599: LD_VAR 0 7
19603: PUSH
19604: LD_VAR 0 14
19608: ADD
19609: ST_TO_ADDR
// end ;
19610: GO 19488
19612: POP
19613: POP
// end ; end ;
19614: LD_VAR 0 7
19618: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
19624: PPUSH
19625: PPUSH
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
19635: PPUSH
19636: PPUSH
// result := false ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_INT 0
19644: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19645: LD_VAR 0 1
19649: NOT
19650: PUSH
19651: LD_VAR 0 1
19655: PPUSH
19656: CALL_OW 266
19660: PUSH
19661: LD_INT 32
19663: PUSH
19664: LD_INT 33
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: IN
19671: NOT
19672: OR
19673: IFFALSE 19677
// exit ;
19675: GO 20786
// nat := GetNation ( tower ) ;
19677: LD_ADDR_VAR 0 12
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 248
19691: ST_TO_ADDR
// side := GetSide ( tower ) ;
19692: LD_ADDR_VAR 0 16
19696: PUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: CALL_OW 255
19706: ST_TO_ADDR
// x := GetX ( tower ) ;
19707: LD_ADDR_VAR 0 10
19711: PUSH
19712: LD_VAR 0 1
19716: PPUSH
19717: CALL_OW 250
19721: ST_TO_ADDR
// y := GetY ( tower ) ;
19722: LD_ADDR_VAR 0 11
19726: PUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 251
19736: ST_TO_ADDR
// if not x or not y then
19737: LD_VAR 0 10
19741: NOT
19742: PUSH
19743: LD_VAR 0 11
19747: NOT
19748: OR
19749: IFFALSE 19753
// exit ;
19751: GO 20786
// weapon := 0 ;
19753: LD_ADDR_VAR 0 18
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// fac_list := [ ] ;
19761: LD_ADDR_VAR 0 17
19765: PUSH
19766: EMPTY
19767: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19768: LD_ADDR_VAR 0 6
19772: PUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 274
19782: PPUSH
19783: LD_VAR 0 2
19787: PPUSH
19788: LD_INT 0
19790: PPUSH
19791: CALL 17249 0 3
19795: PPUSH
19796: LD_INT 30
19798: PUSH
19799: LD_INT 3
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 72
19810: ST_TO_ADDR
// if not factories then
19811: LD_VAR 0 6
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 20786
// for i in factories do
19820: LD_ADDR_VAR 0 8
19824: PUSH
19825: LD_VAR 0 6
19829: PUSH
19830: FOR_IN
19831: IFFALSE 19856
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19833: LD_ADDR_VAR 0 17
19837: PUSH
19838: LD_VAR 0 17
19842: PUSH
19843: LD_VAR 0 8
19847: PPUSH
19848: CALL_OW 478
19852: UNION
19853: ST_TO_ADDR
19854: GO 19830
19856: POP
19857: POP
// if not fac_list then
19858: LD_VAR 0 17
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 20786
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19867: LD_ADDR_VAR 0 5
19871: PUSH
19872: LD_INT 4
19874: PUSH
19875: LD_INT 5
19877: PUSH
19878: LD_INT 9
19880: PUSH
19881: LD_INT 10
19883: PUSH
19884: LD_INT 6
19886: PUSH
19887: LD_INT 7
19889: PUSH
19890: LD_INT 11
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 27
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: LD_INT 26
19910: PUSH
19911: LD_INT 30
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 43
19922: PUSH
19923: LD_INT 44
19925: PUSH
19926: LD_INT 46
19928: PUSH
19929: LD_INT 45
19931: PUSH
19932: LD_INT 47
19934: PUSH
19935: LD_INT 49
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: LD_VAR 0 12
19955: ARRAY
19956: ST_TO_ADDR
// list := list isect fac_list ;
19957: LD_ADDR_VAR 0 5
19961: PUSH
19962: LD_VAR 0 5
19966: PUSH
19967: LD_VAR 0 17
19971: ISECT
19972: ST_TO_ADDR
// if not list then
19973: LD_VAR 0 5
19977: NOT
19978: IFFALSE 19982
// exit ;
19980: GO 20786
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19982: LD_VAR 0 12
19986: PUSH
19987: LD_INT 3
19989: EQUAL
19990: PUSH
19991: LD_INT 49
19993: PUSH
19994: LD_VAR 0 5
19998: IN
19999: AND
20000: PUSH
20001: LD_INT 31
20003: PPUSH
20004: LD_VAR 0 16
20008: PPUSH
20009: CALL_OW 321
20013: PUSH
20014: LD_INT 2
20016: EQUAL
20017: AND
20018: IFFALSE 20078
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20020: LD_INT 22
20022: PUSH
20023: LD_VAR 0 16
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 35
20034: PUSH
20035: LD_INT 49
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 91
20044: PUSH
20045: LD_VAR 0 1
20049: PUSH
20050: LD_INT 10
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: NOT
20068: IFFALSE 20078
// weapon := ru_time_lapser ;
20070: LD_ADDR_VAR 0 18
20074: PUSH
20075: LD_INT 49
20077: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20078: LD_VAR 0 12
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: IN
20093: PUSH
20094: LD_INT 11
20096: PUSH
20097: LD_VAR 0 5
20101: IN
20102: PUSH
20103: LD_INT 30
20105: PUSH
20106: LD_VAR 0 5
20110: IN
20111: OR
20112: AND
20113: PUSH
20114: LD_INT 6
20116: PPUSH
20117: LD_VAR 0 16
20121: PPUSH
20122: CALL_OW 321
20126: PUSH
20127: LD_INT 2
20129: EQUAL
20130: AND
20131: IFFALSE 20296
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20133: LD_INT 22
20135: PUSH
20136: LD_VAR 0 16
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: LD_INT 35
20150: PUSH
20151: LD_INT 11
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 35
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 91
20175: PUSH
20176: LD_VAR 0 1
20180: PUSH
20181: LD_INT 18
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: NOT
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_VAR 0 16
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 30
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 30
20227: PUSH
20228: LD_INT 33
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 91
20242: PUSH
20243: LD_VAR 0 1
20247: PUSH
20248: LD_INT 12
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: PPUSH
20264: CALL_OW 69
20268: PUSH
20269: LD_INT 2
20271: GREATER
20272: AND
20273: IFFALSE 20296
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20275: LD_ADDR_VAR 0 18
20279: PUSH
20280: LD_INT 11
20282: PUSH
20283: LD_INT 30
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_VAR 0 12
20294: ARRAY
20295: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20296: LD_VAR 0 18
20300: NOT
20301: PUSH
20302: LD_INT 40
20304: PPUSH
20305: LD_VAR 0 16
20309: PPUSH
20310: CALL_OW 321
20314: PUSH
20315: LD_INT 2
20317: EQUAL
20318: AND
20319: PUSH
20320: LD_INT 7
20322: PUSH
20323: LD_VAR 0 5
20327: IN
20328: PUSH
20329: LD_INT 28
20331: PUSH
20332: LD_VAR 0 5
20336: IN
20337: OR
20338: PUSH
20339: LD_INT 45
20341: PUSH
20342: LD_VAR 0 5
20346: IN
20347: OR
20348: AND
20349: IFFALSE 20603
// begin hex := GetHexInfo ( x , y ) ;
20351: LD_ADDR_VAR 0 4
20355: PUSH
20356: LD_VAR 0 10
20360: PPUSH
20361: LD_VAR 0 11
20365: PPUSH
20366: CALL_OW 546
20370: ST_TO_ADDR
// if hex [ 1 ] then
20371: LD_VAR 0 4
20375: PUSH
20376: LD_INT 1
20378: ARRAY
20379: IFFALSE 20383
// exit ;
20381: GO 20786
// height := hex [ 2 ] ;
20383: LD_ADDR_VAR 0 15
20387: PUSH
20388: LD_VAR 0 4
20392: PUSH
20393: LD_INT 2
20395: ARRAY
20396: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20397: LD_ADDR_VAR 0 14
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: LD_INT 5
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: ST_TO_ADDR
// for i in tmp do
20420: LD_ADDR_VAR 0 8
20424: PUSH
20425: LD_VAR 0 14
20429: PUSH
20430: FOR_IN
20431: IFFALSE 20601
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20433: LD_ADDR_VAR 0 9
20437: PUSH
20438: LD_VAR 0 10
20442: PPUSH
20443: LD_VAR 0 8
20447: PPUSH
20448: LD_INT 5
20450: PPUSH
20451: CALL_OW 272
20455: PUSH
20456: LD_VAR 0 11
20460: PPUSH
20461: LD_VAR 0 8
20465: PPUSH
20466: LD_INT 5
20468: PPUSH
20469: CALL_OW 273
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20478: LD_VAR 0 9
20482: PUSH
20483: LD_INT 1
20485: ARRAY
20486: PPUSH
20487: LD_VAR 0 9
20491: PUSH
20492: LD_INT 2
20494: ARRAY
20495: PPUSH
20496: CALL_OW 488
20500: IFFALSE 20599
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20502: LD_ADDR_VAR 0 4
20506: PUSH
20507: LD_VAR 0 9
20511: PUSH
20512: LD_INT 1
20514: ARRAY
20515: PPUSH
20516: LD_VAR 0 9
20520: PUSH
20521: LD_INT 2
20523: ARRAY
20524: PPUSH
20525: CALL_OW 546
20529: ST_TO_ADDR
// if hex [ 1 ] then
20530: LD_VAR 0 4
20534: PUSH
20535: LD_INT 1
20537: ARRAY
20538: IFFALSE 20542
// continue ;
20540: GO 20430
// h := hex [ 2 ] ;
20542: LD_ADDR_VAR 0 13
20546: PUSH
20547: LD_VAR 0 4
20551: PUSH
20552: LD_INT 2
20554: ARRAY
20555: ST_TO_ADDR
// if h + 7 < height then
20556: LD_VAR 0 13
20560: PUSH
20561: LD_INT 7
20563: PLUS
20564: PUSH
20565: LD_VAR 0 15
20569: LESS
20570: IFFALSE 20599
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20572: LD_ADDR_VAR 0 18
20576: PUSH
20577: LD_INT 7
20579: PUSH
20580: LD_INT 28
20582: PUSH
20583: LD_INT 45
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: LD_VAR 0 12
20595: ARRAY
20596: ST_TO_ADDR
// break ;
20597: GO 20601
// end ; end ; end ;
20599: GO 20430
20601: POP
20602: POP
// end ; if not weapon then
20603: LD_VAR 0 18
20607: NOT
20608: IFFALSE 20668
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20610: LD_ADDR_VAR 0 5
20614: PUSH
20615: LD_VAR 0 5
20619: PUSH
20620: LD_INT 11
20622: PUSH
20623: LD_INT 30
20625: PUSH
20626: LD_INT 49
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: DIFF
20634: ST_TO_ADDR
// if not list then
20635: LD_VAR 0 5
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 20786
// weapon := list [ rand ( 1 , list ) ] ;
20644: LD_ADDR_VAR 0 18
20648: PUSH
20649: LD_VAR 0 5
20653: PUSH
20654: LD_INT 1
20656: PPUSH
20657: LD_VAR 0 5
20661: PPUSH
20662: CALL_OW 12
20666: ARRAY
20667: ST_TO_ADDR
// end ; if weapon then
20668: LD_VAR 0 18
20672: IFFALSE 20786
// begin tmp := CostOfWeapon ( weapon ) ;
20674: LD_ADDR_VAR 0 14
20678: PUSH
20679: LD_VAR 0 18
20683: PPUSH
20684: CALL_OW 451
20688: ST_TO_ADDR
// j := GetBase ( tower ) ;
20689: LD_ADDR_VAR 0 9
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 274
20703: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20704: LD_VAR 0 9
20708: PPUSH
20709: LD_INT 1
20711: PPUSH
20712: CALL_OW 275
20716: PUSH
20717: LD_VAR 0 14
20721: PUSH
20722: LD_INT 1
20724: ARRAY
20725: GREATEREQUAL
20726: PUSH
20727: LD_VAR 0 9
20731: PPUSH
20732: LD_INT 2
20734: PPUSH
20735: CALL_OW 275
20739: PUSH
20740: LD_VAR 0 14
20744: PUSH
20745: LD_INT 2
20747: ARRAY
20748: GREATEREQUAL
20749: AND
20750: PUSH
20751: LD_VAR 0 9
20755: PPUSH
20756: LD_INT 3
20758: PPUSH
20759: CALL_OW 275
20763: PUSH
20764: LD_VAR 0 14
20768: PUSH
20769: LD_INT 3
20771: ARRAY
20772: GREATEREQUAL
20773: AND
20774: IFFALSE 20786
// result := weapon ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_VAR 0 18
20785: ST_TO_ADDR
// end ; end ;
20786: LD_VAR 0 3
20790: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20791: LD_INT 0
20793: PPUSH
20794: PPUSH
// result := true ;
20795: LD_ADDR_VAR 0 3
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if array1 = array2 then
20803: LD_VAR 0 1
20807: PUSH
20808: LD_VAR 0 2
20812: EQUAL
20813: IFFALSE 20873
// begin for i = 1 to array1 do
20815: LD_ADDR_VAR 0 4
20819: PUSH
20820: DOUBLE
20821: LD_INT 1
20823: DEC
20824: ST_TO_ADDR
20825: LD_VAR 0 1
20829: PUSH
20830: FOR_TO
20831: IFFALSE 20869
// if array1 [ i ] <> array2 [ i ] then
20833: LD_VAR 0 1
20837: PUSH
20838: LD_VAR 0 4
20842: ARRAY
20843: PUSH
20844: LD_VAR 0 2
20848: PUSH
20849: LD_VAR 0 4
20853: ARRAY
20854: NONEQUAL
20855: IFFALSE 20867
// begin result := false ;
20857: LD_ADDR_VAR 0 3
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// break ;
20865: GO 20869
// end ;
20867: GO 20830
20869: POP
20870: POP
// end else
20871: GO 20881
// result := false ;
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// end ;
20881: LD_VAR 0 3
20885: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20886: LD_INT 0
20888: PPUSH
20889: PPUSH
// if not array1 or not array2 then
20890: LD_VAR 0 1
20894: NOT
20895: PUSH
20896: LD_VAR 0 2
20900: NOT
20901: OR
20902: IFFALSE 20906
// exit ;
20904: GO 20970
// result := true ;
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// for i = 1 to array1 do
20914: LD_ADDR_VAR 0 4
20918: PUSH
20919: DOUBLE
20920: LD_INT 1
20922: DEC
20923: ST_TO_ADDR
20924: LD_VAR 0 1
20928: PUSH
20929: FOR_TO
20930: IFFALSE 20968
// if array1 [ i ] <> array2 [ i ] then
20932: LD_VAR 0 1
20936: PUSH
20937: LD_VAR 0 4
20941: ARRAY
20942: PUSH
20943: LD_VAR 0 2
20947: PUSH
20948: LD_VAR 0 4
20952: ARRAY
20953: NONEQUAL
20954: IFFALSE 20966
// begin result := false ;
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// break ;
20964: GO 20968
// end ;
20966: GO 20929
20968: POP
20969: POP
// end ;
20970: LD_VAR 0 3
20974: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20975: LD_INT 0
20977: PPUSH
20978: PPUSH
20979: PPUSH
// pom := GetBase ( fac ) ;
20980: LD_ADDR_VAR 0 5
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 274
20994: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20995: LD_ADDR_VAR 0 4
20999: PUSH
21000: LD_VAR 0 2
21004: PUSH
21005: LD_INT 1
21007: ARRAY
21008: PPUSH
21009: LD_VAR 0 2
21013: PUSH
21014: LD_INT 2
21016: ARRAY
21017: PPUSH
21018: LD_VAR 0 2
21022: PUSH
21023: LD_INT 3
21025: ARRAY
21026: PPUSH
21027: LD_VAR 0 2
21031: PUSH
21032: LD_INT 4
21034: ARRAY
21035: PPUSH
21036: CALL_OW 449
21040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21041: LD_ADDR_VAR 0 3
21045: PUSH
21046: LD_VAR 0 5
21050: PPUSH
21051: LD_INT 1
21053: PPUSH
21054: CALL_OW 275
21058: PUSH
21059: LD_VAR 0 4
21063: PUSH
21064: LD_INT 1
21066: ARRAY
21067: GREATEREQUAL
21068: PUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: LD_INT 2
21076: PPUSH
21077: CALL_OW 275
21081: PUSH
21082: LD_VAR 0 4
21086: PUSH
21087: LD_INT 2
21089: ARRAY
21090: GREATEREQUAL
21091: AND
21092: PUSH
21093: LD_VAR 0 5
21097: PPUSH
21098: LD_INT 3
21100: PPUSH
21101: CALL_OW 275
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: LD_INT 3
21113: ARRAY
21114: GREATEREQUAL
21115: AND
21116: ST_TO_ADDR
// end ;
21117: LD_VAR 0 3
21121: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
// pom := GetBase ( building ) ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 274
21142: ST_TO_ADDR
// if not pom then
21143: LD_VAR 0 3
21147: NOT
21148: IFFALSE 21152
// exit ;
21150: GO 21322
// btype := GetBType ( building ) ;
21152: LD_ADDR_VAR 0 5
21156: PUSH
21157: LD_VAR 0 1
21161: PPUSH
21162: CALL_OW 266
21166: ST_TO_ADDR
// if btype = b_armoury then
21167: LD_VAR 0 5
21171: PUSH
21172: LD_INT 4
21174: EQUAL
21175: IFFALSE 21185
// btype := b_barracks ;
21177: LD_ADDR_VAR 0 5
21181: PUSH
21182: LD_INT 5
21184: ST_TO_ADDR
// if btype = b_depot then
21185: LD_VAR 0 5
21189: PUSH
21190: LD_INT 0
21192: EQUAL
21193: IFFALSE 21203
// btype := b_warehouse ;
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_INT 1
21202: ST_TO_ADDR
// if btype = b_workshop then
21203: LD_VAR 0 5
21207: PUSH
21208: LD_INT 2
21210: EQUAL
21211: IFFALSE 21221
// btype := b_factory ;
21213: LD_ADDR_VAR 0 5
21217: PUSH
21218: LD_INT 3
21220: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21221: LD_ADDR_VAR 0 4
21225: PUSH
21226: LD_VAR 0 5
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 248
21240: PPUSH
21241: CALL_OW 450
21245: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: LD_VAR 0 3
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 275
21263: PUSH
21264: LD_VAR 0 4
21268: PUSH
21269: LD_INT 1
21271: ARRAY
21272: GREATEREQUAL
21273: PUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: LD_INT 2
21281: PPUSH
21282: CALL_OW 275
21286: PUSH
21287: LD_VAR 0 4
21291: PUSH
21292: LD_INT 2
21294: ARRAY
21295: GREATEREQUAL
21296: AND
21297: PUSH
21298: LD_VAR 0 3
21302: PPUSH
21303: LD_INT 3
21305: PPUSH
21306: CALL_OW 275
21310: PUSH
21311: LD_VAR 0 4
21315: PUSH
21316: LD_INT 3
21318: ARRAY
21319: GREATEREQUAL
21320: AND
21321: ST_TO_ADDR
// end ;
21322: LD_VAR 0 2
21326: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
21331: PPUSH
// pom := GetBase ( building ) ;
21332: LD_ADDR_VAR 0 4
21336: PUSH
21337: LD_VAR 0 1
21341: PPUSH
21342: CALL_OW 274
21346: ST_TO_ADDR
// if not pom then
21347: LD_VAR 0 4
21351: NOT
21352: IFFALSE 21356
// exit ;
21354: GO 21457
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21356: LD_ADDR_VAR 0 5
21360: PUSH
21361: LD_VAR 0 2
21365: PPUSH
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 248
21375: PPUSH
21376: CALL_OW 450
21380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21381: LD_ADDR_VAR 0 3
21385: PUSH
21386: LD_VAR 0 4
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 275
21398: PUSH
21399: LD_VAR 0 5
21403: PUSH
21404: LD_INT 1
21406: ARRAY
21407: GREATEREQUAL
21408: PUSH
21409: LD_VAR 0 4
21413: PPUSH
21414: LD_INT 2
21416: PPUSH
21417: CALL_OW 275
21421: PUSH
21422: LD_VAR 0 5
21426: PUSH
21427: LD_INT 2
21429: ARRAY
21430: GREATEREQUAL
21431: AND
21432: PUSH
21433: LD_VAR 0 4
21437: PPUSH
21438: LD_INT 3
21440: PPUSH
21441: CALL_OW 275
21445: PUSH
21446: LD_VAR 0 5
21450: PUSH
21451: LD_INT 3
21453: ARRAY
21454: GREATEREQUAL
21455: AND
21456: ST_TO_ADDR
// end ;
21457: LD_VAR 0 3
21461: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21462: LD_INT 0
21464: PPUSH
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
21469: PPUSH
21470: PPUSH
21471: PPUSH
21472: PPUSH
21473: PPUSH
21474: PPUSH
// result := false ;
21475: LD_ADDR_VAR 0 8
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21483: LD_VAR 0 5
21487: NOT
21488: PUSH
21489: LD_VAR 0 1
21493: NOT
21494: OR
21495: PUSH
21496: LD_VAR 0 2
21500: NOT
21501: OR
21502: PUSH
21503: LD_VAR 0 3
21507: NOT
21508: OR
21509: IFFALSE 21513
// exit ;
21511: GO 22327
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21513: LD_ADDR_VAR 0 14
21517: PUSH
21518: LD_VAR 0 1
21522: PPUSH
21523: LD_VAR 0 2
21527: PPUSH
21528: LD_VAR 0 3
21532: PPUSH
21533: LD_VAR 0 4
21537: PPUSH
21538: LD_VAR 0 5
21542: PUSH
21543: LD_INT 1
21545: ARRAY
21546: PPUSH
21547: CALL_OW 248
21551: PPUSH
21552: LD_INT 0
21554: PPUSH
21555: CALL 23564 0 6
21559: ST_TO_ADDR
// if not hexes then
21560: LD_VAR 0 14
21564: NOT
21565: IFFALSE 21569
// exit ;
21567: GO 22327
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21569: LD_ADDR_VAR 0 17
21573: PUSH
21574: LD_VAR 0 5
21578: PPUSH
21579: LD_INT 22
21581: PUSH
21582: LD_VAR 0 13
21586: PPUSH
21587: CALL_OW 255
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 30
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 72
21632: ST_TO_ADDR
// for i = 1 to hexes do
21633: LD_ADDR_VAR 0 9
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_VAR 0 14
21647: PUSH
21648: FOR_TO
21649: IFFALSE 22325
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21651: LD_ADDR_VAR 0 13
21655: PUSH
21656: LD_VAR 0 14
21660: PUSH
21661: LD_VAR 0 9
21665: ARRAY
21666: PUSH
21667: LD_INT 1
21669: ARRAY
21670: PPUSH
21671: LD_VAR 0 14
21675: PUSH
21676: LD_VAR 0 9
21680: ARRAY
21681: PUSH
21682: LD_INT 2
21684: ARRAY
21685: PPUSH
21686: CALL_OW 428
21690: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21691: LD_VAR 0 14
21695: PUSH
21696: LD_VAR 0 9
21700: ARRAY
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PPUSH
21706: LD_VAR 0 14
21710: PUSH
21711: LD_VAR 0 9
21715: ARRAY
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: PPUSH
21721: CALL_OW 351
21725: PUSH
21726: LD_VAR 0 14
21730: PUSH
21731: LD_VAR 0 9
21735: ARRAY
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: LD_VAR 0 14
21745: PUSH
21746: LD_VAR 0 9
21750: ARRAY
21751: PUSH
21752: LD_INT 2
21754: ARRAY
21755: PPUSH
21756: CALL_OW 488
21760: NOT
21761: OR
21762: PUSH
21763: LD_VAR 0 13
21767: PPUSH
21768: CALL_OW 247
21772: PUSH
21773: LD_INT 3
21775: EQUAL
21776: OR
21777: IFFALSE 21783
// exit ;
21779: POP
21780: POP
21781: GO 22327
// if not tmp then
21783: LD_VAR 0 13
21787: NOT
21788: IFFALSE 21792
// continue ;
21790: GO 21648
// result := true ;
21792: LD_ADDR_VAR 0 8
21796: PUSH
21797: LD_INT 1
21799: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21800: LD_VAR 0 6
21804: PUSH
21805: LD_VAR 0 13
21809: PPUSH
21810: CALL_OW 247
21814: PUSH
21815: LD_INT 2
21817: EQUAL
21818: AND
21819: PUSH
21820: LD_VAR 0 13
21824: PPUSH
21825: CALL_OW 263
21829: PUSH
21830: LD_INT 1
21832: EQUAL
21833: AND
21834: IFFALSE 21998
// begin if IsDrivenBy ( tmp ) then
21836: LD_VAR 0 13
21840: PPUSH
21841: CALL_OW 311
21845: IFFALSE 21849
// continue ;
21847: GO 21648
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21849: LD_VAR 0 6
21853: PPUSH
21854: LD_INT 3
21856: PUSH
21857: LD_INT 60
21859: PUSH
21860: EMPTY
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: PUSH
21870: LD_INT 55
21872: PUSH
21873: EMPTY
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 72
21888: IFFALSE 21996
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21890: LD_ADDR_VAR 0 18
21894: PUSH
21895: LD_VAR 0 6
21899: PPUSH
21900: LD_INT 3
21902: PUSH
21903: LD_INT 60
21905: PUSH
21906: EMPTY
21907: LIST
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 55
21918: PUSH
21919: EMPTY
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PPUSH
21930: CALL_OW 72
21934: PUSH
21935: LD_INT 1
21937: ARRAY
21938: ST_TO_ADDR
// if IsInUnit ( driver ) then
21939: LD_VAR 0 18
21943: PPUSH
21944: CALL_OW 310
21948: IFFALSE 21959
// ComExit ( driver ) ;
21950: LD_VAR 0 18
21954: PPUSH
21955: CALL 46692 0 1
// AddComEnterUnit ( driver , tmp ) ;
21959: LD_VAR 0 18
21963: PPUSH
21964: LD_VAR 0 13
21968: PPUSH
21969: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21973: LD_VAR 0 18
21977: PPUSH
21978: LD_VAR 0 7
21982: PPUSH
21983: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21987: LD_VAR 0 18
21991: PPUSH
21992: CALL_OW 181
// end ; continue ;
21996: GO 21648
// end ; if not cleaners or not tmp in cleaners then
21998: LD_VAR 0 6
22002: NOT
22003: PUSH
22004: LD_VAR 0 13
22008: PUSH
22009: LD_VAR 0 6
22013: IN
22014: NOT
22015: OR
22016: IFFALSE 22323
// begin if dep then
22018: LD_VAR 0 17
22022: IFFALSE 22158
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22024: LD_ADDR_VAR 0 16
22028: PUSH
22029: LD_VAR 0 17
22033: PUSH
22034: LD_INT 1
22036: ARRAY
22037: PPUSH
22038: CALL_OW 250
22042: PPUSH
22043: LD_VAR 0 17
22047: PUSH
22048: LD_INT 1
22050: ARRAY
22051: PPUSH
22052: CALL_OW 254
22056: PPUSH
22057: LD_INT 5
22059: PPUSH
22060: CALL_OW 272
22064: PUSH
22065: LD_VAR 0 17
22069: PUSH
22070: LD_INT 1
22072: ARRAY
22073: PPUSH
22074: CALL_OW 251
22078: PPUSH
22079: LD_VAR 0 17
22083: PUSH
22084: LD_INT 1
22086: ARRAY
22087: PPUSH
22088: CALL_OW 254
22092: PPUSH
22093: LD_INT 5
22095: PPUSH
22096: CALL_OW 273
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22105: LD_VAR 0 16
22109: PUSH
22110: LD_INT 1
22112: ARRAY
22113: PPUSH
22114: LD_VAR 0 16
22118: PUSH
22119: LD_INT 2
22121: ARRAY
22122: PPUSH
22123: CALL_OW 488
22127: IFFALSE 22158
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22129: LD_VAR 0 13
22133: PPUSH
22134: LD_VAR 0 16
22138: PUSH
22139: LD_INT 1
22141: ARRAY
22142: PPUSH
22143: LD_VAR 0 16
22147: PUSH
22148: LD_INT 2
22150: ARRAY
22151: PPUSH
22152: CALL_OW 111
// continue ;
22156: GO 21648
// end ; end ; r := GetDir ( tmp ) ;
22158: LD_ADDR_VAR 0 15
22162: PUSH
22163: LD_VAR 0 13
22167: PPUSH
22168: CALL_OW 254
22172: ST_TO_ADDR
// if r = 5 then
22173: LD_VAR 0 15
22177: PUSH
22178: LD_INT 5
22180: EQUAL
22181: IFFALSE 22191
// r := 0 ;
22183: LD_ADDR_VAR 0 15
22187: PUSH
22188: LD_INT 0
22190: ST_TO_ADDR
// for j = r to 5 do
22191: LD_ADDR_VAR 0 10
22195: PUSH
22196: DOUBLE
22197: LD_VAR 0 15
22201: DEC
22202: ST_TO_ADDR
22203: LD_INT 5
22205: PUSH
22206: FOR_TO
22207: IFFALSE 22321
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22209: LD_ADDR_VAR 0 11
22213: PUSH
22214: LD_VAR 0 13
22218: PPUSH
22219: CALL_OW 250
22223: PPUSH
22224: LD_VAR 0 10
22228: PPUSH
22229: LD_INT 2
22231: PPUSH
22232: CALL_OW 272
22236: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22237: LD_ADDR_VAR 0 12
22241: PUSH
22242: LD_VAR 0 13
22246: PPUSH
22247: CALL_OW 251
22251: PPUSH
22252: LD_VAR 0 10
22256: PPUSH
22257: LD_INT 2
22259: PPUSH
22260: CALL_OW 273
22264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22265: LD_VAR 0 11
22269: PPUSH
22270: LD_VAR 0 12
22274: PPUSH
22275: CALL_OW 488
22279: PUSH
22280: LD_VAR 0 11
22284: PPUSH
22285: LD_VAR 0 12
22289: PPUSH
22290: CALL_OW 428
22294: NOT
22295: AND
22296: IFFALSE 22319
// begin ComMoveXY ( tmp , _x , _y ) ;
22298: LD_VAR 0 13
22302: PPUSH
22303: LD_VAR 0 11
22307: PPUSH
22308: LD_VAR 0 12
22312: PPUSH
22313: CALL_OW 111
// break ;
22317: GO 22321
// end ; end ;
22319: GO 22206
22321: POP
22322: POP
// end ; end ;
22323: GO 21648
22325: POP
22326: POP
// end ;
22327: LD_VAR 0 8
22331: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22332: LD_INT 0
22334: PPUSH
// result := true ;
22335: LD_ADDR_VAR 0 3
22339: PUSH
22340: LD_INT 1
22342: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22343: LD_VAR 0 2
22347: PUSH
22348: LD_INT 24
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22362
22354: LD_INT 33
22356: DOUBLE
22357: EQUAL
22358: IFTRUE 22362
22360: GO 22387
22362: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_INT 32
22370: PPUSH
22371: LD_VAR 0 1
22375: PPUSH
22376: CALL_OW 321
22380: PUSH
22381: LD_INT 2
22383: EQUAL
22384: ST_TO_ADDR
22385: GO 22707
22387: LD_INT 20
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22420
22395: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_INT 6
22403: PPUSH
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 321
22413: PUSH
22414: LD_INT 2
22416: EQUAL
22417: ST_TO_ADDR
22418: GO 22707
22420: LD_INT 22
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22434
22426: LD_INT 36
22428: DOUBLE
22429: EQUAL
22430: IFTRUE 22434
22432: GO 22459
22434: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_INT 15
22442: PPUSH
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 321
22452: PUSH
22453: LD_INT 2
22455: EQUAL
22456: ST_TO_ADDR
22457: GO 22707
22459: LD_INT 30
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 22492
22467: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22468: LD_ADDR_VAR 0 3
22472: PUSH
22473: LD_INT 20
22475: PPUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 321
22485: PUSH
22486: LD_INT 2
22488: EQUAL
22489: ST_TO_ADDR
22490: GO 22707
22492: LD_INT 28
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22506
22498: LD_INT 21
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22531
22506: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22507: LD_ADDR_VAR 0 3
22511: PUSH
22512: LD_INT 21
22514: PPUSH
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL_OW 321
22524: PUSH
22525: LD_INT 2
22527: EQUAL
22528: ST_TO_ADDR
22529: GO 22707
22531: LD_INT 16
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22566
22539: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_EXP 103
22549: PPUSH
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 321
22559: PUSH
22560: LD_INT 2
22562: EQUAL
22563: ST_TO_ADDR
22564: GO 22707
22566: LD_INT 19
22568: DOUBLE
22569: EQUAL
22570: IFTRUE 22580
22572: LD_INT 23
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22607
22580: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22581: LD_ADDR_VAR 0 3
22585: PUSH
22586: LD_EXP 102
22590: PPUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 321
22600: PUSH
22601: LD_INT 2
22603: EQUAL
22604: ST_TO_ADDR
22605: GO 22707
22607: LD_INT 17
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22640
22615: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22616: LD_ADDR_VAR 0 3
22620: PUSH
22621: LD_INT 39
22623: PPUSH
22624: LD_VAR 0 1
22628: PPUSH
22629: CALL_OW 321
22633: PUSH
22634: LD_INT 2
22636: EQUAL
22637: ST_TO_ADDR
22638: GO 22707
22640: LD_INT 18
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22673
22648: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22649: LD_ADDR_VAR 0 3
22653: PUSH
22654: LD_INT 40
22656: PPUSH
22657: LD_VAR 0 1
22661: PPUSH
22662: CALL_OW 321
22666: PUSH
22667: LD_INT 2
22669: EQUAL
22670: ST_TO_ADDR
22671: GO 22707
22673: LD_INT 27
22675: DOUBLE
22676: EQUAL
22677: IFTRUE 22681
22679: GO 22706
22681: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_INT 35
22689: PPUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: CALL_OW 321
22699: PUSH
22700: LD_INT 2
22702: EQUAL
22703: ST_TO_ADDR
22704: GO 22707
22706: POP
// end ;
22707: LD_VAR 0 3
22711: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
22717: PPUSH
22718: PPUSH
22719: PPUSH
22720: PPUSH
22721: PPUSH
22722: PPUSH
22723: PPUSH
22724: PPUSH
// result := false ;
22725: LD_ADDR_VAR 0 6
22729: PUSH
22730: LD_INT 0
22732: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22733: LD_VAR 0 1
22737: NOT
22738: PUSH
22739: LD_VAR 0 1
22743: PPUSH
22744: CALL_OW 266
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: IN
22759: NOT
22760: OR
22761: PUSH
22762: LD_VAR 0 2
22766: NOT
22767: OR
22768: PUSH
22769: LD_VAR 0 5
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 4
22788: PUSH
22789: LD_INT 5
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: IN
22800: NOT
22801: OR
22802: PUSH
22803: LD_VAR 0 3
22807: PPUSH
22808: LD_VAR 0 4
22812: PPUSH
22813: CALL_OW 488
22817: NOT
22818: OR
22819: IFFALSE 22823
// exit ;
22821: GO 23559
// side := GetSide ( depot ) ;
22823: LD_ADDR_VAR 0 9
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 255
22837: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22838: LD_VAR 0 9
22842: PPUSH
22843: LD_VAR 0 2
22847: PPUSH
22848: CALL 22332 0 2
22852: NOT
22853: IFFALSE 22857
// exit ;
22855: GO 23559
// pom := GetBase ( depot ) ;
22857: LD_ADDR_VAR 0 10
22861: PUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 274
22871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22872: LD_ADDR_VAR 0 11
22876: PUSH
22877: LD_VAR 0 2
22881: PPUSH
22882: LD_VAR 0 1
22886: PPUSH
22887: CALL_OW 248
22891: PPUSH
22892: CALL_OW 450
22896: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22897: LD_VAR 0 10
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 275
22909: PUSH
22910: LD_VAR 0 11
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: GREATEREQUAL
22919: PUSH
22920: LD_VAR 0 10
22924: PPUSH
22925: LD_INT 2
22927: PPUSH
22928: CALL_OW 275
22932: PUSH
22933: LD_VAR 0 11
22937: PUSH
22938: LD_INT 2
22940: ARRAY
22941: GREATEREQUAL
22942: AND
22943: PUSH
22944: LD_VAR 0 10
22948: PPUSH
22949: LD_INT 3
22951: PPUSH
22952: CALL_OW 275
22956: PUSH
22957: LD_VAR 0 11
22961: PUSH
22962: LD_INT 3
22964: ARRAY
22965: GREATEREQUAL
22966: AND
22967: NOT
22968: IFFALSE 22972
// exit ;
22970: GO 23559
// if GetBType ( depot ) = b_depot then
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 266
22981: PUSH
22982: LD_INT 0
22984: EQUAL
22985: IFFALSE 22997
// dist := 28 else
22987: LD_ADDR_VAR 0 14
22991: PUSH
22992: LD_INT 28
22994: ST_TO_ADDR
22995: GO 23005
// dist := 36 ;
22997: LD_ADDR_VAR 0 14
23001: PUSH
23002: LD_INT 36
23004: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_VAR 0 3
23014: PPUSH
23015: LD_VAR 0 4
23019: PPUSH
23020: CALL_OW 297
23024: PUSH
23025: LD_VAR 0 14
23029: GREATER
23030: IFFALSE 23034
// exit ;
23032: GO 23559
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23034: LD_ADDR_VAR 0 12
23038: PUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: LD_VAR 0 5
23058: PPUSH
23059: LD_VAR 0 1
23063: PPUSH
23064: CALL_OW 248
23068: PPUSH
23069: LD_INT 0
23071: PPUSH
23072: CALL 23564 0 6
23076: ST_TO_ADDR
// if not hexes then
23077: LD_VAR 0 12
23081: NOT
23082: IFFALSE 23086
// exit ;
23084: GO 23559
// hex := GetHexInfo ( x , y ) ;
23086: LD_ADDR_VAR 0 15
23090: PUSH
23091: LD_VAR 0 3
23095: PPUSH
23096: LD_VAR 0 4
23100: PPUSH
23101: CALL_OW 546
23105: ST_TO_ADDR
// if hex [ 1 ] then
23106: LD_VAR 0 15
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: IFFALSE 23118
// exit ;
23116: GO 23559
// height := hex [ 2 ] ;
23118: LD_ADDR_VAR 0 13
23122: PUSH
23123: LD_VAR 0 15
23127: PUSH
23128: LD_INT 2
23130: ARRAY
23131: ST_TO_ADDR
// for i = 1 to hexes do
23132: LD_ADDR_VAR 0 7
23136: PUSH
23137: DOUBLE
23138: LD_INT 1
23140: DEC
23141: ST_TO_ADDR
23142: LD_VAR 0 12
23146: PUSH
23147: FOR_TO
23148: IFFALSE 23478
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23150: LD_VAR 0 12
23154: PUSH
23155: LD_VAR 0 7
23159: ARRAY
23160: PUSH
23161: LD_INT 1
23163: ARRAY
23164: PPUSH
23165: LD_VAR 0 12
23169: PUSH
23170: LD_VAR 0 7
23174: ARRAY
23175: PUSH
23176: LD_INT 2
23178: ARRAY
23179: PPUSH
23180: CALL_OW 488
23184: NOT
23185: PUSH
23186: LD_VAR 0 12
23190: PUSH
23191: LD_VAR 0 7
23195: ARRAY
23196: PUSH
23197: LD_INT 1
23199: ARRAY
23200: PPUSH
23201: LD_VAR 0 12
23205: PUSH
23206: LD_VAR 0 7
23210: ARRAY
23211: PUSH
23212: LD_INT 2
23214: ARRAY
23215: PPUSH
23216: CALL_OW 428
23220: PUSH
23221: LD_INT 0
23223: GREATER
23224: OR
23225: PUSH
23226: LD_VAR 0 12
23230: PUSH
23231: LD_VAR 0 7
23235: ARRAY
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 12
23245: PUSH
23246: LD_VAR 0 7
23250: ARRAY
23251: PUSH
23252: LD_INT 2
23254: ARRAY
23255: PPUSH
23256: CALL_OW 351
23260: OR
23261: IFFALSE 23267
// exit ;
23263: POP
23264: POP
23265: GO 23559
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23267: LD_ADDR_VAR 0 8
23271: PUSH
23272: LD_VAR 0 12
23276: PUSH
23277: LD_VAR 0 7
23281: ARRAY
23282: PUSH
23283: LD_INT 1
23285: ARRAY
23286: PPUSH
23287: LD_VAR 0 12
23291: PUSH
23292: LD_VAR 0 7
23296: ARRAY
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 546
23306: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23307: LD_VAR 0 8
23311: PUSH
23312: LD_INT 1
23314: ARRAY
23315: PUSH
23316: LD_VAR 0 8
23320: PUSH
23321: LD_INT 2
23323: ARRAY
23324: PUSH
23325: LD_VAR 0 13
23329: PUSH
23330: LD_INT 2
23332: PLUS
23333: GREATER
23334: OR
23335: PUSH
23336: LD_VAR 0 8
23340: PUSH
23341: LD_INT 2
23343: ARRAY
23344: PUSH
23345: LD_VAR 0 13
23349: PUSH
23350: LD_INT 2
23352: MINUS
23353: LESS
23354: OR
23355: PUSH
23356: LD_VAR 0 8
23360: PUSH
23361: LD_INT 3
23363: ARRAY
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 8
23370: PUSH
23371: LD_INT 9
23373: PUSH
23374: LD_INT 10
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 16
23388: PUSH
23389: LD_INT 17
23391: PUSH
23392: LD_INT 18
23394: PUSH
23395: LD_INT 19
23397: PUSH
23398: LD_INT 20
23400: PUSH
23401: LD_INT 21
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: IN
23419: NOT
23420: OR
23421: PUSH
23422: LD_VAR 0 8
23426: PUSH
23427: LD_INT 5
23429: ARRAY
23430: NOT
23431: OR
23432: PUSH
23433: LD_VAR 0 8
23437: PUSH
23438: LD_INT 6
23440: ARRAY
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 7
23450: PUSH
23451: LD_INT 9
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 11
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: IN
23468: NOT
23469: OR
23470: IFFALSE 23476
// exit ;
23472: POP
23473: POP
23474: GO 23559
// end ;
23476: GO 23147
23478: POP
23479: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23480: LD_VAR 0 9
23484: PPUSH
23485: LD_VAR 0 3
23489: PPUSH
23490: LD_VAR 0 4
23494: PPUSH
23495: LD_INT 20
23497: PPUSH
23498: CALL 15397 0 4
23502: PUSH
23503: LD_INT 4
23505: ARRAY
23506: IFFALSE 23510
// exit ;
23508: GO 23559
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23510: LD_VAR 0 2
23514: PUSH
23515: LD_INT 29
23517: PUSH
23518: LD_INT 30
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: IN
23525: PUSH
23526: LD_VAR 0 3
23530: PPUSH
23531: LD_VAR 0 4
23535: PPUSH
23536: LD_VAR 0 9
23540: PPUSH
23541: CALL_OW 440
23545: NOT
23546: AND
23547: IFFALSE 23551
// exit ;
23549: GO 23559
// result := true ;
23551: LD_ADDR_VAR 0 6
23555: PUSH
23556: LD_INT 1
23558: ST_TO_ADDR
// end ;
23559: LD_VAR 0 6
23563: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23564: LD_INT 0
23566: PPUSH
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
23571: PPUSH
23572: PPUSH
23573: PPUSH
23574: PPUSH
23575: PPUSH
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
23589: PPUSH
23590: PPUSH
23591: PPUSH
23592: PPUSH
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
// result = [ ] ;
23624: LD_ADDR_VAR 0 7
23628: PUSH
23629: EMPTY
23630: ST_TO_ADDR
// temp_list = [ ] ;
23631: LD_ADDR_VAR 0 9
23635: PUSH
23636: EMPTY
23637: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23638: LD_VAR 0 4
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: LD_INT 3
23654: PUSH
23655: LD_INT 4
23657: PUSH
23658: LD_INT 5
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: IN
23669: NOT
23670: PUSH
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: IN
23686: PUSH
23687: LD_VAR 0 5
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 3
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: IN
23706: NOT
23707: AND
23708: OR
23709: IFFALSE 23713
// exit ;
23711: GO 42104
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23713: LD_VAR 0 1
23717: PUSH
23718: LD_INT 6
23720: PUSH
23721: LD_INT 7
23723: PUSH
23724: LD_INT 8
23726: PUSH
23727: LD_INT 13
23729: PUSH
23730: LD_INT 12
23732: PUSH
23733: LD_INT 15
23735: PUSH
23736: LD_INT 11
23738: PUSH
23739: LD_INT 14
23741: PUSH
23742: LD_INT 10
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: IN
23756: IFFALSE 23766
// btype = b_lab ;
23758: LD_ADDR_VAR 0 1
23762: PUSH
23763: LD_INT 6
23765: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23766: LD_VAR 0 6
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: IN
23785: NOT
23786: PUSH
23787: LD_VAR 0 1
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: LD_INT 6
23806: PUSH
23807: LD_INT 36
23809: PUSH
23810: LD_INT 4
23812: PUSH
23813: LD_INT 5
23815: PUSH
23816: LD_INT 31
23818: PUSH
23819: LD_INT 32
23821: PUSH
23822: LD_INT 33
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: IN
23838: NOT
23839: PUSH
23840: LD_VAR 0 6
23844: PUSH
23845: LD_INT 1
23847: EQUAL
23848: AND
23849: OR
23850: PUSH
23851: LD_VAR 0 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: IN
23866: NOT
23867: PUSH
23868: LD_VAR 0 6
23872: PUSH
23873: LD_INT 2
23875: EQUAL
23876: AND
23877: OR
23878: IFFALSE 23888
// mode = 0 ;
23880: LD_ADDR_VAR 0 6
23884: PUSH
23885: LD_INT 0
23887: ST_TO_ADDR
// case mode of 0 :
23888: LD_VAR 0 6
23892: PUSH
23893: LD_INT 0
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 35354
23901: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23902: LD_ADDR_VAR 0 11
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: LD_INT 2
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 3
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 3
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24095: LD_ADDR_VAR 0 12
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 2
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: NEG
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 2
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 3
24252: NEG
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24291: LD_ADDR_VAR 0 13
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 3
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 3
24450: NEG
24451: PUSH
24452: LD_INT 2
24454: NEG
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 3
24462: NEG
24463: PUSH
24464: LD_INT 3
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24490: LD_ADDR_VAR 0 14
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 3
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 3
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24686: LD_ADDR_VAR 0 15
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 2
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24879: LD_ADDR_VAR 0 16
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: NEG
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: LD_INT 2
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 3
25036: PUSH
25037: LD_INT 3
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25072: LD_ADDR_VAR 0 17
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 2
25259: NEG
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25302: LD_ADDR_VAR 0 18
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 2
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 2
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25532: LD_ADDR_VAR 0 19
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25762: LD_ADDR_VAR 0 20
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25992: LD_ADDR_VAR 0 21
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26222: LD_ADDR_VAR 0 22
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 1
26242: NEG
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: NEG
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: NEG
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26452: LD_ADDR_VAR 0 23
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: LD_INT 2
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: LD_INT 2
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: LD_INT 3
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26732: LD_ADDR_VAR 0 24
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: NEG
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 2
26931: NEG
26932: PUSH
26933: LD_INT 2
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 3
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27008: LD_ADDR_VAR 0 25
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 2
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: NEG
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 3
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27282: LD_ADDR_VAR 0 26
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 2
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27558: LD_ADDR_VAR 0 27
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: NEG
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 3
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27838: LD_ADDR_VAR 0 28
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 3
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: LD_INT 3
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28120: LD_ADDR_VAR 0 29
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 2
28298: NEG
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 3
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 3
28364: NEG
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28399: LD_ADDR_VAR 0 30
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 2
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: NEG
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: LD_INT 3
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 3
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 3
28642: NEG
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28677: LD_ADDR_VAR 0 31
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: LD_INT 2
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 2
28866: NEG
28867: PUSH
28868: LD_INT 3
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 3
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 3
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28955: LD_ADDR_VAR 0 32
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 3
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 2
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 3
29198: NEG
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29233: LD_ADDR_VAR 0 33
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: NEG
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 1
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: NEG
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29512: LD_ADDR_VAR 0 34
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: NEG
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 2
29691: NEG
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 3
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29792: LD_ADDR_VAR 0 35
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29904: LD_ADDR_VAR 0 36
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: NEG
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30016: LD_ADDR_VAR 0 37
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30128: LD_ADDR_VAR 0 38
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30240: LD_ADDR_VAR 0 39
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 2
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30352: LD_ADDR_VAR 0 40
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30464: LD_ADDR_VAR 0 41
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 3
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 3
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30814: LD_ADDR_VAR 0 42
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 3
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31164: LD_ADDR_VAR 0 43
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31512: LD_ADDR_VAR 0 44
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31862: LD_ADDR_VAR 0 45
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: LD_INT 3
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32212: LD_ADDR_VAR 0 46
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32560: LD_ADDR_VAR 0 47
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 2
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32711: LD_ADDR_VAR 0 48
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32858: LD_ADDR_VAR 0 49
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33002: LD_ADDR_VAR 0 50
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33146: LD_ADDR_VAR 0 51
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33293: LD_ADDR_VAR 0 52
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33444: LD_ADDR_VAR 0 53
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33674: LD_ADDR_VAR 0 54
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33904: LD_ADDR_VAR 0 55
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34134: LD_ADDR_VAR 0 56
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: NEG
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34364: LD_ADDR_VAR 0 57
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34594: LD_ADDR_VAR 0 58
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 2
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34824: LD_ADDR_VAR 0 59
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34912: LD_ADDR_VAR 0 60
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35000: LD_ADDR_VAR 0 61
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35088: LD_ADDR_VAR 0 62
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35176: LD_ADDR_VAR 0 63
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35264: LD_ADDR_VAR 0 64
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: ST_TO_ADDR
// end ; 1 :
35352: GO 41249
35354: LD_INT 1
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 37985
35362: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35363: LD_ADDR_VAR 0 11
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 3
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35407: LD_ADDR_VAR 0 12
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 3
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35448: LD_ADDR_VAR 0 13
35452: PUSH
35453: LD_INT 3
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35488: LD_ADDR_VAR 0 14
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35529: LD_ADDR_VAR 0 15
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 3
35547: NEG
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35573: LD_ADDR_VAR 0 16
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: NEG
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 3
35604: NEG
35605: PUSH
35606: LD_INT 3
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35619: LD_ADDR_VAR 0 17
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 3
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35663: LD_ADDR_VAR 0 18
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35704: LD_ADDR_VAR 0 19
35708: PUSH
35709: LD_INT 3
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: LD_INT 3
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35744: LD_ADDR_VAR 0 20
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 3
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35785: LD_ADDR_VAR 0 21
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 3
35803: NEG
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 3
35814: NEG
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35829: LD_ADDR_VAR 0 22
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: LD_INT 3
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 3
35848: NEG
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 3
35860: NEG
35861: PUSH
35862: LD_INT 3
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35875: LD_ADDR_VAR 0 23
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 4
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 3
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35919: LD_ADDR_VAR 0 24
35923: PUSH
35924: LD_INT 3
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 4
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35960: LD_ADDR_VAR 0 25
35964: PUSH
35965: LD_INT 3
35967: PUSH
35968: LD_INT 3
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 4
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 3
35987: PUSH
35988: LD_INT 4
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36000: LD_ADDR_VAR 0 26
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 3
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 4
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: LD_INT 3
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36041: LD_ADDR_VAR 0 27
36045: PUSH
36046: LD_INT 3
36048: NEG
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 3
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 4
36070: NEG
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36085: LD_ADDR_VAR 0 28
36089: PUSH
36090: LD_INT 3
36092: NEG
36093: PUSH
36094: LD_INT 3
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: NEG
36105: PUSH
36106: LD_INT 4
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 4
36116: NEG
36117: PUSH
36118: LD_INT 3
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36131: LD_ADDR_VAR 0 29
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: LD_INT 3
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 2
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 4
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 4
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 3
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 5
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 5
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 4
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 6
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 6
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 5
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36286: LD_ADDR_VAR 0 30
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 3
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 4
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 4
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 5
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 6
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 6
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36429: LD_ADDR_VAR 0 31
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 4
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 4
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 4
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 5
36496: PUSH
36497: LD_INT 4
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 4
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 6
36526: PUSH
36527: LD_INT 5
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 6
36536: PUSH
36537: LD_INT 6
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 5
36546: PUSH
36547: LD_INT 6
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36568: LD_ADDR_VAR 0 32
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 4
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 5
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 5
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 4
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: LD_INT 6
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 6
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 5
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36711: LD_ADDR_VAR 0 33
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: NEG
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 4
36763: NEG
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 4
36774: NEG
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 4
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 5
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 5
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 5
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 6
36831: NEG
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 6
36842: NEG
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36866: LD_ADDR_VAR 0 34
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 3
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 3
36885: NEG
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 3
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: NEG
36910: PUSH
36911: LD_INT 4
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 4
36921: NEG
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 4
36933: NEG
36934: PUSH
36935: LD_INT 4
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 4
36945: NEG
36946: PUSH
36947: LD_INT 5
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 5
36957: NEG
36958: PUSH
36959: LD_INT 4
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 5
36969: NEG
36970: PUSH
36971: LD_INT 5
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 5
36981: NEG
36982: PUSH
36983: LD_INT 6
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 6
36993: NEG
36994: PUSH
36995: LD_INT 5
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 6
37005: NEG
37006: PUSH
37007: LD_INT 6
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37029: LD_ADDR_VAR 0 41
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: LD_INT 2
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37073: LD_ADDR_VAR 0 42
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 3
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37114: LD_ADDR_VAR 0 43
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37154: LD_ADDR_VAR 0 44
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 3
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37195: LD_ADDR_VAR 0 45
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37239: LD_ADDR_VAR 0 46
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 2
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: LD_INT 3
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: NEG
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37285: LD_ADDR_VAR 0 47
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: LD_INT 3
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37318: LD_ADDR_VAR 0 48
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37349: LD_ADDR_VAR 0 49
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37378: LD_ADDR_VAR 0 50
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 3
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 3
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37407: LD_ADDR_VAR 0 51
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: LD_INT 2
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37438: LD_ADDR_VAR 0 52
37442: PUSH
37443: LD_INT 3
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 3
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37471: LD_ADDR_VAR 0 53
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 3
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37515: LD_ADDR_VAR 0 54
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 3
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37556: LD_ADDR_VAR 0 55
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 3
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37596: LD_ADDR_VAR 0 56
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37637: LD_ADDR_VAR 0 57
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: NEG
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37681: LD_ADDR_VAR 0 58
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: LD_INT 3
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: NEG
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 3
37712: NEG
37713: PUSH
37714: LD_INT 3
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37727: LD_ADDR_VAR 0 59
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37771: LD_ADDR_VAR 0 60
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37812: LD_ADDR_VAR 0 61
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37852: LD_ADDR_VAR 0 62
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37893: LD_ADDR_VAR 0 63
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37937: LD_ADDR_VAR 0 64
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// end ; 2 :
37983: GO 41249
37985: LD_INT 2
37987: DOUBLE
37988: EQUAL
37989: IFTRUE 37993
37991: GO 41248
37993: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37994: LD_ADDR_VAR 0 29
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 5
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 5
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 4
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 5
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 3
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 4
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 4
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 4
38164: PUSH
38165: LD_INT 2
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 4
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 4
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 4
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 5
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 5
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 4
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 5
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 3
38277: NEG
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 4
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 4
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 4
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 4
38379: NEG
38380: PUSH
38381: LD_INT 4
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 4
38391: NEG
38392: PUSH
38393: LD_INT 5
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: NEG
38404: PUSH
38405: LD_INT 4
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 4
38427: NEG
38428: PUSH
38429: LD_INT 3
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 5
38439: NEG
38440: PUSH
38441: LD_INT 4
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 5
38451: NEG
38452: PUSH
38453: LD_INT 5
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: LD_INT 5
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 5
38475: NEG
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38532: LD_ADDR_VAR 0 30
38536: PUSH
38537: LD_INT 4
38539: PUSH
38540: LD_INT 4
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 4
38549: PUSH
38550: LD_INT 3
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 5
38559: PUSH
38560: LD_INT 4
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 5
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 4
38579: PUSH
38580: LD_INT 5
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 4
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 5
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 5
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 4
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 4
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: LD_INT 4
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 4
38722: NEG
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 4
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 3
38745: NEG
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 4
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 5
38778: NEG
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 5
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 5
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: NEG
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: NEG
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: NEG
38837: PUSH
38838: LD_INT 4
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 3
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 3
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 4
38884: NEG
38885: PUSH
38886: LD_INT 3
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 4
38896: NEG
38897: PUSH
38898: LD_INT 4
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 4
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 4
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 4
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 5
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 4
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 3
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 3
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 4
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 5
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: LD_INT 5
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39079: LD_ADDR_VAR 0 31
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 4
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: LD_INT 5
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 5
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 4
39235: NEG
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 4
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 4
39258: NEG
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 4
39281: NEG
39282: PUSH
39283: LD_INT 4
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 4
39293: NEG
39294: PUSH
39295: LD_INT 5
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: LD_INT 4
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 4
39329: NEG
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 5
39341: NEG
39342: PUSH
39343: LD_INT 4
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 5
39353: NEG
39354: PUSH
39355: LD_INT 5
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 3
39365: NEG
39366: PUSH
39367: LD_INT 5
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 5
39377: NEG
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 4
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: LD_INT 3
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 4
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 4
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 4
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 4
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 5
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 5
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 4
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 5
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39629: LD_ADDR_VAR 0 32
39633: PUSH
39634: LD_INT 4
39636: NEG
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 4
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: NEG
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: NEG
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 4
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 5
39692: NEG
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 5
39703: NEG
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 5
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 3
39727: NEG
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 3
39738: NEG
39739: PUSH
39740: LD_INT 3
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: LD_INT 4
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 3
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 4
39798: NEG
39799: PUSH
39800: LD_INT 3
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 4
39810: NEG
39811: PUSH
39812: LD_INT 4
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 4
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 4
39834: NEG
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 4
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 5
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 4
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 3
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 4
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 5
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 3
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 5
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 4
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 4
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: LD_INT 4
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 4
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 5
40061: PUSH
40062: LD_INT 4
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 5
40071: PUSH
40072: LD_INT 5
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 4
40081: PUSH
40082: LD_INT 5
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 3
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 5
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: LD_INT 5
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40176: LD_ADDR_VAR 0 33
40180: PUSH
40181: LD_INT 4
40183: NEG
40184: PUSH
40185: LD_INT 4
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 4
40195: NEG
40196: PUSH
40197: LD_INT 5
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: NEG
40208: PUSH
40209: LD_INT 4
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 4
40231: NEG
40232: PUSH
40233: LD_INT 3
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 5
40243: NEG
40244: PUSH
40245: LD_INT 4
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 5
40255: NEG
40256: PUSH
40257: LD_INT 5
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 5
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 5
40279: NEG
40280: PUSH
40281: LD_INT 3
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 3
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 4
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 3
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 4
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 4
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 4
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 4
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 5
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 4
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 5
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 4
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 4
40516: PUSH
40517: LD_INT 4
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 4
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 4
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 4
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 5
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 5
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 4
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 3
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 5
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40714: LD_ADDR_VAR 0 34
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 4
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 5
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: LD_INT 4
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 3
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 4
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 5
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 3
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 5
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 4
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 4
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 4
40916: PUSH
40917: LD_INT 4
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 5
40936: PUSH
40937: LD_INT 4
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 5
40946: PUSH
40947: LD_INT 5
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 4
40956: PUSH
40957: LD_INT 5
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: LD_INT 4
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: LD_INT 3
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 5
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 5
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 3
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 4
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 4
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 4
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 4
41099: NEG
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 4
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 4
41144: NEG
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 5
41155: NEG
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 5
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 5
41178: NEG
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: ST_TO_ADDR
// end ; end ;
41246: GO 41249
41248: POP
// case btype of b_depot , b_warehouse :
41249: LD_VAR 0 1
41253: PUSH
41254: LD_INT 0
41256: DOUBLE
41257: EQUAL
41258: IFTRUE 41268
41260: LD_INT 1
41262: DOUBLE
41263: EQUAL
41264: IFTRUE 41268
41266: GO 41469
41268: POP
// case nation of nation_american :
41269: LD_VAR 0 5
41273: PUSH
41274: LD_INT 1
41276: DOUBLE
41277: EQUAL
41278: IFTRUE 41282
41280: GO 41338
41282: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: LD_VAR 0 11
41292: PUSH
41293: LD_VAR 0 12
41297: PUSH
41298: LD_VAR 0 13
41302: PUSH
41303: LD_VAR 0 14
41307: PUSH
41308: LD_VAR 0 15
41312: PUSH
41313: LD_VAR 0 16
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: PUSH
41326: LD_VAR 0 4
41330: PUSH
41331: LD_INT 1
41333: PLUS
41334: ARRAY
41335: ST_TO_ADDR
41336: GO 41467
41338: LD_INT 2
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41346
41344: GO 41402
41346: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: LD_VAR 0 17
41356: PUSH
41357: LD_VAR 0 18
41361: PUSH
41362: LD_VAR 0 19
41366: PUSH
41367: LD_VAR 0 20
41371: PUSH
41372: LD_VAR 0 21
41376: PUSH
41377: LD_VAR 0 22
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: PUSH
41390: LD_VAR 0 4
41394: PUSH
41395: LD_INT 1
41397: PLUS
41398: ARRAY
41399: ST_TO_ADDR
41400: GO 41467
41402: LD_INT 3
41404: DOUBLE
41405: EQUAL
41406: IFTRUE 41410
41408: GO 41466
41410: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41411: LD_ADDR_VAR 0 9
41415: PUSH
41416: LD_VAR 0 23
41420: PUSH
41421: LD_VAR 0 24
41425: PUSH
41426: LD_VAR 0 25
41430: PUSH
41431: LD_VAR 0 26
41435: PUSH
41436: LD_VAR 0 27
41440: PUSH
41441: LD_VAR 0 28
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: PUSH
41454: LD_VAR 0 4
41458: PUSH
41459: LD_INT 1
41461: PLUS
41462: ARRAY
41463: ST_TO_ADDR
41464: GO 41467
41466: POP
41467: GO 42022
41469: LD_INT 2
41471: DOUBLE
41472: EQUAL
41473: IFTRUE 41483
41475: LD_INT 3
41477: DOUBLE
41478: EQUAL
41479: IFTRUE 41483
41481: GO 41539
41483: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41484: LD_ADDR_VAR 0 9
41488: PUSH
41489: LD_VAR 0 29
41493: PUSH
41494: LD_VAR 0 30
41498: PUSH
41499: LD_VAR 0 31
41503: PUSH
41504: LD_VAR 0 32
41508: PUSH
41509: LD_VAR 0 33
41513: PUSH
41514: LD_VAR 0 34
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: PUSH
41527: LD_VAR 0 4
41531: PUSH
41532: LD_INT 1
41534: PLUS
41535: ARRAY
41536: ST_TO_ADDR
41537: GO 42022
41539: LD_INT 16
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41601
41545: LD_INT 17
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41601
41551: LD_INT 18
41553: DOUBLE
41554: EQUAL
41555: IFTRUE 41601
41557: LD_INT 19
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41601
41563: LD_INT 22
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41601
41569: LD_INT 20
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41601
41575: LD_INT 21
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41601
41581: LD_INT 23
41583: DOUBLE
41584: EQUAL
41585: IFTRUE 41601
41587: LD_INT 24
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41601
41593: LD_INT 25
41595: DOUBLE
41596: EQUAL
41597: IFTRUE 41601
41599: GO 41657
41601: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41602: LD_ADDR_VAR 0 9
41606: PUSH
41607: LD_VAR 0 35
41611: PUSH
41612: LD_VAR 0 36
41616: PUSH
41617: LD_VAR 0 37
41621: PUSH
41622: LD_VAR 0 38
41626: PUSH
41627: LD_VAR 0 39
41631: PUSH
41632: LD_VAR 0 40
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: PUSH
41645: LD_VAR 0 4
41649: PUSH
41650: LD_INT 1
41652: PLUS
41653: ARRAY
41654: ST_TO_ADDR
41655: GO 42022
41657: LD_INT 6
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41713
41663: LD_INT 7
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41713
41669: LD_INT 8
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41713
41675: LD_INT 13
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41713
41681: LD_INT 12
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41713
41687: LD_INT 15
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41713
41693: LD_INT 11
41695: DOUBLE
41696: EQUAL
41697: IFTRUE 41713
41699: LD_INT 14
41701: DOUBLE
41702: EQUAL
41703: IFTRUE 41713
41705: LD_INT 10
41707: DOUBLE
41708: EQUAL
41709: IFTRUE 41713
41711: GO 41769
41713: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41714: LD_ADDR_VAR 0 9
41718: PUSH
41719: LD_VAR 0 41
41723: PUSH
41724: LD_VAR 0 42
41728: PUSH
41729: LD_VAR 0 43
41733: PUSH
41734: LD_VAR 0 44
41738: PUSH
41739: LD_VAR 0 45
41743: PUSH
41744: LD_VAR 0 46
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: PUSH
41757: LD_VAR 0 4
41761: PUSH
41762: LD_INT 1
41764: PLUS
41765: ARRAY
41766: ST_TO_ADDR
41767: GO 42022
41769: LD_INT 36
41771: DOUBLE
41772: EQUAL
41773: IFTRUE 41777
41775: GO 41833
41777: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41778: LD_ADDR_VAR 0 9
41782: PUSH
41783: LD_VAR 0 47
41787: PUSH
41788: LD_VAR 0 48
41792: PUSH
41793: LD_VAR 0 49
41797: PUSH
41798: LD_VAR 0 50
41802: PUSH
41803: LD_VAR 0 51
41807: PUSH
41808: LD_VAR 0 52
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: PUSH
41821: LD_VAR 0 4
41825: PUSH
41826: LD_INT 1
41828: PLUS
41829: ARRAY
41830: ST_TO_ADDR
41831: GO 42022
41833: LD_INT 4
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41859
41839: LD_INT 5
41841: DOUBLE
41842: EQUAL
41843: IFTRUE 41859
41845: LD_INT 34
41847: DOUBLE
41848: EQUAL
41849: IFTRUE 41859
41851: LD_INT 37
41853: DOUBLE
41854: EQUAL
41855: IFTRUE 41859
41857: GO 41915
41859: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41860: LD_ADDR_VAR 0 9
41864: PUSH
41865: LD_VAR 0 53
41869: PUSH
41870: LD_VAR 0 54
41874: PUSH
41875: LD_VAR 0 55
41879: PUSH
41880: LD_VAR 0 56
41884: PUSH
41885: LD_VAR 0 57
41889: PUSH
41890: LD_VAR 0 58
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: PUSH
41903: LD_VAR 0 4
41907: PUSH
41908: LD_INT 1
41910: PLUS
41911: ARRAY
41912: ST_TO_ADDR
41913: GO 42022
41915: LD_INT 31
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41965
41921: LD_INT 32
41923: DOUBLE
41924: EQUAL
41925: IFTRUE 41965
41927: LD_INT 33
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41965
41933: LD_INT 27
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41965
41939: LD_INT 26
41941: DOUBLE
41942: EQUAL
41943: IFTRUE 41965
41945: LD_INT 28
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41965
41951: LD_INT 29
41953: DOUBLE
41954: EQUAL
41955: IFTRUE 41965
41957: LD_INT 30
41959: DOUBLE
41960: EQUAL
41961: IFTRUE 41965
41963: GO 42021
41965: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41966: LD_ADDR_VAR 0 9
41970: PUSH
41971: LD_VAR 0 59
41975: PUSH
41976: LD_VAR 0 60
41980: PUSH
41981: LD_VAR 0 61
41985: PUSH
41986: LD_VAR 0 62
41990: PUSH
41991: LD_VAR 0 63
41995: PUSH
41996: LD_VAR 0 64
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: PUSH
42009: LD_VAR 0 4
42013: PUSH
42014: LD_INT 1
42016: PLUS
42017: ARRAY
42018: ST_TO_ADDR
42019: GO 42022
42021: POP
// temp_list2 = [ ] ;
42022: LD_ADDR_VAR 0 10
42026: PUSH
42027: EMPTY
42028: ST_TO_ADDR
// for i in temp_list do
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: LD_VAR 0 9
42038: PUSH
42039: FOR_IN
42040: IFFALSE 42092
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42042: LD_ADDR_VAR 0 10
42046: PUSH
42047: LD_VAR 0 10
42051: PUSH
42052: LD_VAR 0 8
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PUSH
42061: LD_VAR 0 2
42065: PLUS
42066: PUSH
42067: LD_VAR 0 8
42071: PUSH
42072: LD_INT 2
42074: ARRAY
42075: PUSH
42076: LD_VAR 0 3
42080: PLUS
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: ADD
42089: ST_TO_ADDR
42090: GO 42039
42092: POP
42093: POP
// result = temp_list2 ;
42094: LD_ADDR_VAR 0 7
42098: PUSH
42099: LD_VAR 0 10
42103: ST_TO_ADDR
// end ;
42104: LD_VAR 0 7
42108: RET
// export function EnemyInRange ( unit , dist ) ; begin
42109: LD_INT 0
42111: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: CALL_OW 255
42126: PPUSH
42127: LD_VAR 0 1
42131: PPUSH
42132: CALL_OW 250
42136: PPUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 251
42146: PPUSH
42147: LD_VAR 0 2
42151: PPUSH
42152: CALL 15397 0 4
42156: PUSH
42157: LD_INT 4
42159: ARRAY
42160: ST_TO_ADDR
// end ;
42161: LD_VAR 0 3
42165: RET
// export function PlayerSeeMe ( unit ) ; begin
42166: LD_INT 0
42168: PPUSH
// result := See ( your_side , unit ) ;
42169: LD_ADDR_VAR 0 2
42173: PUSH
42174: LD_OWVAR 2
42178: PPUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 292
42188: ST_TO_ADDR
// end ;
42189: LD_VAR 0 2
42193: RET
// export function ReverseDir ( unit ) ; begin
42194: LD_INT 0
42196: PPUSH
// if not unit then
42197: LD_VAR 0 1
42201: NOT
42202: IFFALSE 42206
// exit ;
42204: GO 42229
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42206: LD_ADDR_VAR 0 2
42210: PUSH
42211: LD_VAR 0 1
42215: PPUSH
42216: CALL_OW 254
42220: PUSH
42221: LD_INT 3
42223: PLUS
42224: PUSH
42225: LD_INT 6
42227: MOD
42228: ST_TO_ADDR
// end ;
42229: LD_VAR 0 2
42233: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42234: LD_INT 0
42236: PPUSH
42237: PPUSH
42238: PPUSH
42239: PPUSH
42240: PPUSH
// if not hexes then
42241: LD_VAR 0 2
42245: NOT
42246: IFFALSE 42250
// exit ;
42248: GO 42398
// dist := 9999 ;
42250: LD_ADDR_VAR 0 5
42254: PUSH
42255: LD_INT 9999
42257: ST_TO_ADDR
// for i = 1 to hexes do
42258: LD_ADDR_VAR 0 4
42262: PUSH
42263: DOUBLE
42264: LD_INT 1
42266: DEC
42267: ST_TO_ADDR
42268: LD_VAR 0 2
42272: PUSH
42273: FOR_TO
42274: IFFALSE 42386
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42276: LD_VAR 0 1
42280: PPUSH
42281: LD_VAR 0 2
42285: PUSH
42286: LD_VAR 0 4
42290: ARRAY
42291: PUSH
42292: LD_INT 1
42294: ARRAY
42295: PPUSH
42296: LD_VAR 0 2
42300: PUSH
42301: LD_VAR 0 4
42305: ARRAY
42306: PUSH
42307: LD_INT 2
42309: ARRAY
42310: PPUSH
42311: CALL_OW 297
42315: PUSH
42316: LD_VAR 0 5
42320: LESS
42321: IFFALSE 42384
// begin hex := hexes [ i ] ;
42323: LD_ADDR_VAR 0 7
42327: PUSH
42328: LD_VAR 0 2
42332: PUSH
42333: LD_VAR 0 4
42337: ARRAY
42338: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42339: LD_ADDR_VAR 0 5
42343: PUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: LD_VAR 0 2
42353: PUSH
42354: LD_VAR 0 4
42358: ARRAY
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: PPUSH
42364: LD_VAR 0 2
42368: PUSH
42369: LD_VAR 0 4
42373: ARRAY
42374: PUSH
42375: LD_INT 2
42377: ARRAY
42378: PPUSH
42379: CALL_OW 297
42383: ST_TO_ADDR
// end ; end ;
42384: GO 42273
42386: POP
42387: POP
// result := hex ;
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_VAR 0 7
42397: ST_TO_ADDR
// end ;
42398: LD_VAR 0 3
42402: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42403: LD_INT 0
42405: PPUSH
42406: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42407: LD_VAR 0 1
42411: NOT
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_INT 21
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 23
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PPUSH
42442: CALL_OW 69
42446: IN
42447: NOT
42448: OR
42449: IFFALSE 42453
// exit ;
42451: GO 42500
// for i = 1 to 3 do
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: DOUBLE
42459: LD_INT 1
42461: DEC
42462: ST_TO_ADDR
42463: LD_INT 3
42465: PUSH
42466: FOR_TO
42467: IFFALSE 42498
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42469: LD_VAR 0 1
42473: PPUSH
42474: CALL_OW 250
42478: PPUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 251
42488: PPUSH
42489: LD_INT 1
42491: PPUSH
42492: CALL_OW 453
42496: GO 42466
42498: POP
42499: POP
// end ;
42500: LD_VAR 0 2
42504: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42505: LD_INT 0
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42513: LD_VAR 0 1
42517: NOT
42518: PUSH
42519: LD_VAR 0 2
42523: NOT
42524: OR
42525: PUSH
42526: LD_VAR 0 1
42530: PPUSH
42531: CALL_OW 314
42535: OR
42536: IFFALSE 42540
// exit ;
42538: GO 42981
// x := GetX ( enemy_unit ) ;
42540: LD_ADDR_VAR 0 7
42544: PUSH
42545: LD_VAR 0 2
42549: PPUSH
42550: CALL_OW 250
42554: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42555: LD_ADDR_VAR 0 8
42559: PUSH
42560: LD_VAR 0 2
42564: PPUSH
42565: CALL_OW 251
42569: ST_TO_ADDR
// if not x or not y then
42570: LD_VAR 0 7
42574: NOT
42575: PUSH
42576: LD_VAR 0 8
42580: NOT
42581: OR
42582: IFFALSE 42586
// exit ;
42584: GO 42981
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42586: LD_ADDR_VAR 0 6
42590: PUSH
42591: LD_VAR 0 7
42595: PPUSH
42596: LD_INT 0
42598: PPUSH
42599: LD_INT 4
42601: PPUSH
42602: CALL_OW 272
42606: PUSH
42607: LD_VAR 0 8
42611: PPUSH
42612: LD_INT 0
42614: PPUSH
42615: LD_INT 4
42617: PPUSH
42618: CALL_OW 273
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_VAR 0 7
42631: PPUSH
42632: LD_INT 1
42634: PPUSH
42635: LD_INT 4
42637: PPUSH
42638: CALL_OW 272
42642: PUSH
42643: LD_VAR 0 8
42647: PPUSH
42648: LD_INT 1
42650: PPUSH
42651: LD_INT 4
42653: PPUSH
42654: CALL_OW 273
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_VAR 0 7
42667: PPUSH
42668: LD_INT 2
42670: PPUSH
42671: LD_INT 4
42673: PPUSH
42674: CALL_OW 272
42678: PUSH
42679: LD_VAR 0 8
42683: PPUSH
42684: LD_INT 2
42686: PPUSH
42687: LD_INT 4
42689: PPUSH
42690: CALL_OW 273
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_VAR 0 7
42703: PPUSH
42704: LD_INT 3
42706: PPUSH
42707: LD_INT 4
42709: PPUSH
42710: CALL_OW 272
42714: PUSH
42715: LD_VAR 0 8
42719: PPUSH
42720: LD_INT 3
42722: PPUSH
42723: LD_INT 4
42725: PPUSH
42726: CALL_OW 273
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_VAR 0 7
42739: PPUSH
42740: LD_INT 4
42742: PPUSH
42743: LD_INT 4
42745: PPUSH
42746: CALL_OW 272
42750: PUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: LD_INT 4
42758: PPUSH
42759: LD_INT 4
42761: PPUSH
42762: CALL_OW 273
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_VAR 0 7
42775: PPUSH
42776: LD_INT 5
42778: PPUSH
42779: LD_INT 4
42781: PPUSH
42782: CALL_OW 272
42786: PUSH
42787: LD_VAR 0 8
42791: PPUSH
42792: LD_INT 5
42794: PPUSH
42795: LD_INT 4
42797: PPUSH
42798: CALL_OW 273
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
// for i = tmp downto 1 do
42815: LD_ADDR_VAR 0 4
42819: PUSH
42820: DOUBLE
42821: LD_VAR 0 6
42825: INC
42826: ST_TO_ADDR
42827: LD_INT 1
42829: PUSH
42830: FOR_DOWNTO
42831: IFFALSE 42932
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42833: LD_VAR 0 6
42837: PUSH
42838: LD_VAR 0 4
42842: ARRAY
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PPUSH
42848: LD_VAR 0 6
42852: PUSH
42853: LD_VAR 0 4
42857: ARRAY
42858: PUSH
42859: LD_INT 2
42861: ARRAY
42862: PPUSH
42863: CALL_OW 488
42867: NOT
42868: PUSH
42869: LD_VAR 0 6
42873: PUSH
42874: LD_VAR 0 4
42878: ARRAY
42879: PUSH
42880: LD_INT 1
42882: ARRAY
42883: PPUSH
42884: LD_VAR 0 6
42888: PUSH
42889: LD_VAR 0 4
42893: ARRAY
42894: PUSH
42895: LD_INT 2
42897: ARRAY
42898: PPUSH
42899: CALL_OW 428
42903: PUSH
42904: LD_INT 0
42906: NONEQUAL
42907: OR
42908: IFFALSE 42930
// tmp := Delete ( tmp , i ) ;
42910: LD_ADDR_VAR 0 6
42914: PUSH
42915: LD_VAR 0 6
42919: PPUSH
42920: LD_VAR 0 4
42924: PPUSH
42925: CALL_OW 3
42929: ST_TO_ADDR
42930: GO 42830
42932: POP
42933: POP
// j := GetClosestHex ( unit , tmp ) ;
42934: LD_ADDR_VAR 0 5
42938: PUSH
42939: LD_VAR 0 1
42943: PPUSH
42944: LD_VAR 0 6
42948: PPUSH
42949: CALL 42234 0 2
42953: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42954: LD_VAR 0 1
42958: PPUSH
42959: LD_VAR 0 5
42963: PUSH
42964: LD_INT 1
42966: ARRAY
42967: PPUSH
42968: LD_VAR 0 5
42972: PUSH
42973: LD_INT 2
42975: ARRAY
42976: PPUSH
42977: CALL_OW 111
// end ;
42981: LD_VAR 0 3
42985: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42986: LD_INT 0
42988: PPUSH
42989: PPUSH
42990: PPUSH
// uc_side = 0 ;
42991: LD_ADDR_OWVAR 20
42995: PUSH
42996: LD_INT 0
42998: ST_TO_ADDR
// uc_nation = 0 ;
42999: LD_ADDR_OWVAR 21
43003: PUSH
43004: LD_INT 0
43006: ST_TO_ADDR
// InitHc_All ( ) ;
43007: CALL_OW 584
// InitVc ;
43011: CALL_OW 20
// if mastodonts then
43015: LD_VAR 0 6
43019: IFFALSE 43086
// for i = 1 to mastodonts do
43021: LD_ADDR_VAR 0 11
43025: PUSH
43026: DOUBLE
43027: LD_INT 1
43029: DEC
43030: ST_TO_ADDR
43031: LD_VAR 0 6
43035: PUSH
43036: FOR_TO
43037: IFFALSE 43084
// begin vc_chassis := 31 ;
43039: LD_ADDR_OWVAR 37
43043: PUSH
43044: LD_INT 31
43046: ST_TO_ADDR
// vc_control := control_rider ;
43047: LD_ADDR_OWVAR 38
43051: PUSH
43052: LD_INT 4
43054: ST_TO_ADDR
// animal := CreateVehicle ;
43055: LD_ADDR_VAR 0 12
43059: PUSH
43060: CALL_OW 45
43064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43065: LD_VAR 0 12
43069: PPUSH
43070: LD_VAR 0 8
43074: PPUSH
43075: LD_INT 0
43077: PPUSH
43078: CALL 45221 0 3
// end ;
43082: GO 43036
43084: POP
43085: POP
// if horses then
43086: LD_VAR 0 5
43090: IFFALSE 43157
// for i = 1 to horses do
43092: LD_ADDR_VAR 0 11
43096: PUSH
43097: DOUBLE
43098: LD_INT 1
43100: DEC
43101: ST_TO_ADDR
43102: LD_VAR 0 5
43106: PUSH
43107: FOR_TO
43108: IFFALSE 43155
// begin hc_class := 21 ;
43110: LD_ADDR_OWVAR 28
43114: PUSH
43115: LD_INT 21
43117: ST_TO_ADDR
// hc_gallery :=  ;
43118: LD_ADDR_OWVAR 33
43122: PUSH
43123: LD_STRING 
43125: ST_TO_ADDR
// animal := CreateHuman ;
43126: LD_ADDR_VAR 0 12
43130: PUSH
43131: CALL_OW 44
43135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43136: LD_VAR 0 12
43140: PPUSH
43141: LD_VAR 0 8
43145: PPUSH
43146: LD_INT 0
43148: PPUSH
43149: CALL 45221 0 3
// end ;
43153: GO 43107
43155: POP
43156: POP
// if birds then
43157: LD_VAR 0 1
43161: IFFALSE 43228
// for i = 1 to birds do
43163: LD_ADDR_VAR 0 11
43167: PUSH
43168: DOUBLE
43169: LD_INT 1
43171: DEC
43172: ST_TO_ADDR
43173: LD_VAR 0 1
43177: PUSH
43178: FOR_TO
43179: IFFALSE 43226
// begin hc_class = 18 ;
43181: LD_ADDR_OWVAR 28
43185: PUSH
43186: LD_INT 18
43188: ST_TO_ADDR
// hc_gallery =  ;
43189: LD_ADDR_OWVAR 33
43193: PUSH
43194: LD_STRING 
43196: ST_TO_ADDR
// animal := CreateHuman ;
43197: LD_ADDR_VAR 0 12
43201: PUSH
43202: CALL_OW 44
43206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43207: LD_VAR 0 12
43211: PPUSH
43212: LD_VAR 0 8
43216: PPUSH
43217: LD_INT 0
43219: PPUSH
43220: CALL 45221 0 3
// end ;
43224: GO 43178
43226: POP
43227: POP
// if tigers then
43228: LD_VAR 0 2
43232: IFFALSE 43316
// for i = 1 to tigers do
43234: LD_ADDR_VAR 0 11
43238: PUSH
43239: DOUBLE
43240: LD_INT 1
43242: DEC
43243: ST_TO_ADDR
43244: LD_VAR 0 2
43248: PUSH
43249: FOR_TO
43250: IFFALSE 43314
// begin hc_class = class_tiger ;
43252: LD_ADDR_OWVAR 28
43256: PUSH
43257: LD_INT 14
43259: ST_TO_ADDR
// hc_gallery =  ;
43260: LD_ADDR_OWVAR 33
43264: PUSH
43265: LD_STRING 
43267: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43268: LD_ADDR_OWVAR 35
43272: PUSH
43273: LD_INT 7
43275: NEG
43276: PPUSH
43277: LD_INT 7
43279: PPUSH
43280: CALL_OW 12
43284: ST_TO_ADDR
// animal := CreateHuman ;
43285: LD_ADDR_VAR 0 12
43289: PUSH
43290: CALL_OW 44
43294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43295: LD_VAR 0 12
43299: PPUSH
43300: LD_VAR 0 8
43304: PPUSH
43305: LD_INT 0
43307: PPUSH
43308: CALL 45221 0 3
// end ;
43312: GO 43249
43314: POP
43315: POP
// if apemans then
43316: LD_VAR 0 3
43320: IFFALSE 43443
// for i = 1 to apemans do
43322: LD_ADDR_VAR 0 11
43326: PUSH
43327: DOUBLE
43328: LD_INT 1
43330: DEC
43331: ST_TO_ADDR
43332: LD_VAR 0 3
43336: PUSH
43337: FOR_TO
43338: IFFALSE 43441
// begin hc_class = class_apeman ;
43340: LD_ADDR_OWVAR 28
43344: PUSH
43345: LD_INT 12
43347: ST_TO_ADDR
// hc_gallery =  ;
43348: LD_ADDR_OWVAR 33
43352: PUSH
43353: LD_STRING 
43355: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43356: LD_ADDR_OWVAR 35
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PPUSH
43365: LD_INT 2
43367: PPUSH
43368: CALL_OW 12
43372: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43373: LD_ADDR_OWVAR 31
43377: PUSH
43378: LD_INT 1
43380: PPUSH
43381: LD_INT 3
43383: PPUSH
43384: CALL_OW 12
43388: PUSH
43389: LD_INT 1
43391: PPUSH
43392: LD_INT 3
43394: PPUSH
43395: CALL_OW 12
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
// animal := CreateHuman ;
43412: LD_ADDR_VAR 0 12
43416: PUSH
43417: CALL_OW 44
43421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43422: LD_VAR 0 12
43426: PPUSH
43427: LD_VAR 0 8
43431: PPUSH
43432: LD_INT 0
43434: PPUSH
43435: CALL 45221 0 3
// end ;
43439: GO 43337
43441: POP
43442: POP
// if enchidnas then
43443: LD_VAR 0 4
43447: IFFALSE 43514
// for i = 1 to enchidnas do
43449: LD_ADDR_VAR 0 11
43453: PUSH
43454: DOUBLE
43455: LD_INT 1
43457: DEC
43458: ST_TO_ADDR
43459: LD_VAR 0 4
43463: PUSH
43464: FOR_TO
43465: IFFALSE 43512
// begin hc_class = 13 ;
43467: LD_ADDR_OWVAR 28
43471: PUSH
43472: LD_INT 13
43474: ST_TO_ADDR
// hc_gallery =  ;
43475: LD_ADDR_OWVAR 33
43479: PUSH
43480: LD_STRING 
43482: ST_TO_ADDR
// animal := CreateHuman ;
43483: LD_ADDR_VAR 0 12
43487: PUSH
43488: CALL_OW 44
43492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43493: LD_VAR 0 12
43497: PPUSH
43498: LD_VAR 0 8
43502: PPUSH
43503: LD_INT 0
43505: PPUSH
43506: CALL 45221 0 3
// end ;
43510: GO 43464
43512: POP
43513: POP
// if fishes then
43514: LD_VAR 0 7
43518: IFFALSE 43585
// for i = 1 to fishes do
43520: LD_ADDR_VAR 0 11
43524: PUSH
43525: DOUBLE
43526: LD_INT 1
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 7
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43583
// begin hc_class = 20 ;
43538: LD_ADDR_OWVAR 28
43542: PUSH
43543: LD_INT 20
43545: ST_TO_ADDR
// hc_gallery =  ;
43546: LD_ADDR_OWVAR 33
43550: PUSH
43551: LD_STRING 
43553: ST_TO_ADDR
// animal := CreateHuman ;
43554: LD_ADDR_VAR 0 12
43558: PUSH
43559: CALL_OW 44
43563: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43564: LD_VAR 0 12
43568: PPUSH
43569: LD_VAR 0 9
43573: PPUSH
43574: LD_INT 0
43576: PPUSH
43577: CALL 45221 0 3
// end ;
43581: GO 43535
43583: POP
43584: POP
// end ;
43585: LD_VAR 0 10
43589: RET
// export function WantHeal ( sci , unit ) ; begin
43590: LD_INT 0
43592: PPUSH
// if GetTaskList ( sci ) > 0 then
43593: LD_VAR 0 1
43597: PPUSH
43598: CALL_OW 437
43602: PUSH
43603: LD_INT 0
43605: GREATER
43606: IFFALSE 43676
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43608: LD_VAR 0 1
43612: PPUSH
43613: CALL_OW 437
43617: PUSH
43618: LD_INT 1
43620: ARRAY
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PUSH
43626: LD_STRING l
43628: EQUAL
43629: PUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 437
43639: PUSH
43640: LD_INT 1
43642: ARRAY
43643: PUSH
43644: LD_INT 4
43646: ARRAY
43647: PUSH
43648: LD_VAR 0 2
43652: EQUAL
43653: AND
43654: IFFALSE 43666
// result := true else
43656: LD_ADDR_VAR 0 3
43660: PUSH
43661: LD_INT 1
43663: ST_TO_ADDR
43664: GO 43674
// result := false ;
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_INT 0
43673: ST_TO_ADDR
// end else
43674: GO 43684
// result := false ;
43676: LD_ADDR_VAR 0 3
43680: PUSH
43681: LD_INT 0
43683: ST_TO_ADDR
// end ;
43684: LD_VAR 0 3
43688: RET
// export function HealTarget ( sci ) ; begin
43689: LD_INT 0
43691: PPUSH
// if not sci then
43692: LD_VAR 0 1
43696: NOT
43697: IFFALSE 43701
// exit ;
43699: GO 43766
// result := 0 ;
43701: LD_ADDR_VAR 0 2
43705: PUSH
43706: LD_INT 0
43708: ST_TO_ADDR
// if GetTaskList ( sci ) then
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 437
43718: IFFALSE 43766
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 437
43729: PUSH
43730: LD_INT 1
43732: ARRAY
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PUSH
43738: LD_STRING l
43740: EQUAL
43741: IFFALSE 43766
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43743: LD_ADDR_VAR 0 2
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 437
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: PUSH
43762: LD_INT 4
43764: ARRAY
43765: ST_TO_ADDR
// end ;
43766: LD_VAR 0 2
43770: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43771: LD_INT 0
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
// if not base_units then
43777: LD_VAR 0 1
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 43873
// result := false ;
43786: LD_ADDR_VAR 0 2
43790: PUSH
43791: LD_INT 0
43793: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43794: LD_ADDR_VAR 0 5
43798: PUSH
43799: LD_VAR 0 1
43803: PPUSH
43804: LD_INT 21
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PPUSH
43814: CALL_OW 72
43818: ST_TO_ADDR
// if not tmp then
43819: LD_VAR 0 5
43823: NOT
43824: IFFALSE 43828
// exit ;
43826: GO 43873
// for i in tmp do
43828: LD_ADDR_VAR 0 3
43832: PUSH
43833: LD_VAR 0 5
43837: PUSH
43838: FOR_IN
43839: IFFALSE 43871
// begin result := EnemyInRange ( i , 22 ) ;
43841: LD_ADDR_VAR 0 2
43845: PUSH
43846: LD_VAR 0 3
43850: PPUSH
43851: LD_INT 22
43853: PPUSH
43854: CALL 42109 0 2
43858: ST_TO_ADDR
// if result then
43859: LD_VAR 0 2
43863: IFFALSE 43869
// exit ;
43865: POP
43866: POP
43867: GO 43873
// end ;
43869: GO 43838
43871: POP
43872: POP
// end ;
43873: LD_VAR 0 2
43877: RET
// export function FilterByTag ( units , tag ) ; begin
43878: LD_INT 0
43880: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_VAR 0 1
43890: PPUSH
43891: LD_INT 120
43893: PUSH
43894: LD_VAR 0 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PPUSH
43903: CALL_OW 72
43907: ST_TO_ADDR
// end ;
43908: LD_VAR 0 3
43912: RET
// export function IsDriver ( un ) ; begin
43913: LD_INT 0
43915: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: LD_VAR 0 1
43925: PUSH
43926: LD_INT 55
43928: PUSH
43929: EMPTY
43930: LIST
43931: PPUSH
43932: CALL_OW 69
43936: IN
43937: ST_TO_ADDR
// end ;
43938: LD_VAR 0 2
43942: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43943: LD_INT 0
43945: PPUSH
43946: PPUSH
// list := [ ] ;
43947: LD_ADDR_VAR 0 5
43951: PUSH
43952: EMPTY
43953: ST_TO_ADDR
// case d of 0 :
43954: LD_VAR 0 3
43958: PUSH
43959: LD_INT 0
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 44100
43967: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43968: LD_ADDR_VAR 0 5
43972: PUSH
43973: LD_VAR 0 1
43977: PUSH
43978: LD_INT 4
43980: MINUS
43981: PUSH
43982: LD_VAR 0 2
43986: PUSH
43987: LD_INT 4
43989: MINUS
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: PUSH
43999: LD_VAR 0 1
44003: PUSH
44004: LD_INT 3
44006: MINUS
44007: PUSH
44008: LD_VAR 0 2
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: PUSH
44021: LD_VAR 0 1
44025: PUSH
44026: LD_INT 4
44028: PLUS
44029: PUSH
44030: LD_VAR 0 2
44034: PUSH
44035: LD_INT 4
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: PUSH
44043: LD_VAR 0 1
44047: PUSH
44048: LD_INT 3
44050: PLUS
44051: PUSH
44052: LD_VAR 0 2
44056: PUSH
44057: LD_INT 3
44059: PLUS
44060: PUSH
44061: LD_INT 5
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: PUSH
44069: LD_VAR 0 1
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: LD_INT 4
44081: PLUS
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// end ; 1 :
44098: GO 44798
44100: LD_INT 1
44102: DOUBLE
44103: EQUAL
44104: IFTRUE 44108
44106: GO 44241
44108: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44109: LD_ADDR_VAR 0 5
44113: PUSH
44114: LD_VAR 0 1
44118: PUSH
44119: LD_VAR 0 2
44123: PUSH
44124: LD_INT 4
44126: MINUS
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: PUSH
44136: LD_VAR 0 1
44140: PUSH
44141: LD_INT 3
44143: MINUS
44144: PUSH
44145: LD_VAR 0 2
44149: PUSH
44150: LD_INT 3
44152: MINUS
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: PUSH
44162: LD_VAR 0 1
44166: PUSH
44167: LD_INT 4
44169: MINUS
44170: PUSH
44171: LD_VAR 0 2
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: PUSH
44184: LD_VAR 0 1
44188: PUSH
44189: LD_VAR 0 2
44193: PUSH
44194: LD_INT 3
44196: PLUS
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_VAR 0 1
44210: PUSH
44211: LD_INT 4
44213: PLUS
44214: PUSH
44215: LD_VAR 0 2
44219: PUSH
44220: LD_INT 4
44222: PLUS
44223: PUSH
44224: LD_INT 5
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: ST_TO_ADDR
// end ; 2 :
44239: GO 44798
44241: LD_INT 2
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44249
44247: GO 44378
44249: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44250: LD_ADDR_VAR 0 5
44254: PUSH
44255: LD_VAR 0 1
44259: PUSH
44260: LD_VAR 0 2
44264: PUSH
44265: LD_INT 3
44267: MINUS
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_INT 4
44284: PLUS
44285: PUSH
44286: LD_VAR 0 2
44290: PUSH
44291: LD_INT 4
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_VAR 0 2
44308: PUSH
44309: LD_INT 4
44311: PLUS
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: PUSH
44321: LD_VAR 0 1
44325: PUSH
44326: LD_INT 3
44328: MINUS
44329: PUSH
44330: LD_VAR 0 2
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: LD_VAR 0 1
44347: PUSH
44348: LD_INT 4
44350: MINUS
44351: PUSH
44352: LD_VAR 0 2
44356: PUSH
44357: LD_INT 4
44359: MINUS
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: ST_TO_ADDR
// end ; 3 :
44376: GO 44798
44378: LD_INT 3
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44519
44386: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44387: LD_ADDR_VAR 0 5
44391: PUSH
44392: LD_VAR 0 1
44396: PUSH
44397: LD_INT 3
44399: PLUS
44400: PUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 4
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: PUSH
44414: LD_VAR 0 1
44418: PUSH
44419: LD_INT 4
44421: PLUS
44422: PUSH
44423: LD_VAR 0 2
44427: PUSH
44428: LD_INT 4
44430: PLUS
44431: PUSH
44432: LD_INT 5
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: PUSH
44440: LD_VAR 0 1
44444: PUSH
44445: LD_INT 4
44447: MINUS
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 2
44471: PUSH
44472: LD_INT 4
44474: MINUS
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: PUSH
44484: LD_VAR 0 1
44488: PUSH
44489: LD_INT 3
44491: MINUS
44492: PUSH
44493: LD_VAR 0 2
44497: PUSH
44498: LD_INT 3
44500: MINUS
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// end ; 4 :
44517: GO 44798
44519: LD_INT 4
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44660
44527: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 1
44537: PUSH
44538: LD_VAR 0 2
44542: PUSH
44543: LD_INT 4
44545: PLUS
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: PUSH
44555: LD_VAR 0 1
44559: PUSH
44560: LD_INT 3
44562: PLUS
44563: PUSH
44564: LD_VAR 0 2
44568: PUSH
44569: LD_INT 3
44571: PLUS
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: PUSH
44581: LD_VAR 0 1
44585: PUSH
44586: LD_INT 4
44588: PLUS
44589: PUSH
44590: LD_VAR 0 2
44594: PUSH
44595: LD_INT 4
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: PUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_VAR 0 2
44612: PUSH
44613: LD_INT 3
44615: MINUS
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: LD_INT 4
44632: MINUS
44633: PUSH
44634: LD_VAR 0 2
44638: PUSH
44639: LD_INT 4
44641: MINUS
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// end ; 5 :
44658: GO 44798
44660: LD_INT 5
44662: DOUBLE
44663: EQUAL
44664: IFTRUE 44668
44666: GO 44797
44668: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44669: LD_ADDR_VAR 0 5
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_INT 4
44681: MINUS
44682: PUSH
44683: LD_VAR 0 2
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: LD_VAR 0 1
44700: PUSH
44701: LD_VAR 0 2
44705: PUSH
44706: LD_INT 4
44708: MINUS
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: PUSH
44718: LD_VAR 0 1
44722: PUSH
44723: LD_INT 4
44725: PLUS
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_INT 4
44734: PLUS
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_INT 3
44751: PLUS
44752: PUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: PUSH
44766: LD_VAR 0 1
44770: PUSH
44771: LD_VAR 0 2
44775: PUSH
44776: LD_INT 3
44778: PLUS
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// end ; end ;
44795: GO 44798
44797: POP
// result := list ;
44798: LD_ADDR_VAR 0 4
44802: PUSH
44803: LD_VAR 0 5
44807: ST_TO_ADDR
// end ;
44808: LD_VAR 0 4
44812: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44813: LD_INT 0
44815: PPUSH
44816: PPUSH
44817: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44818: LD_VAR 0 1
44822: NOT
44823: PUSH
44824: LD_VAR 0 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: IN
44847: NOT
44848: OR
44849: IFFALSE 44853
// exit ;
44851: GO 44945
// tmp := [ ] ;
44853: LD_ADDR_VAR 0 5
44857: PUSH
44858: EMPTY
44859: ST_TO_ADDR
// for i in units do
44860: LD_ADDR_VAR 0 4
44864: PUSH
44865: LD_VAR 0 1
44869: PUSH
44870: FOR_IN
44871: IFFALSE 44914
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
44873: LD_ADDR_VAR 0 5
44877: PUSH
44878: LD_VAR 0 5
44882: PPUSH
44883: LD_VAR 0 5
44887: PUSH
44888: LD_INT 1
44890: PLUS
44891: PPUSH
44892: LD_VAR 0 4
44896: PPUSH
44897: LD_VAR 0 2
44901: PPUSH
44902: CALL_OW 259
44906: PPUSH
44907: CALL_OW 2
44911: ST_TO_ADDR
44912: GO 44870
44914: POP
44915: POP
// if not tmp then
44916: LD_VAR 0 5
44920: NOT
44921: IFFALSE 44925
// exit ;
44923: GO 44945
// result := SortListByListDesc ( units , tmp ) ;
44925: LD_ADDR_VAR 0 3
44929: PUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_VAR 0 5
44939: PPUSH
44940: CALL_OW 77
44944: ST_TO_ADDR
// end ;
44945: LD_VAR 0 3
44949: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44950: LD_INT 0
44952: PPUSH
44953: PPUSH
44954: PPUSH
// result := false ;
44955: LD_ADDR_VAR 0 3
44959: PUSH
44960: LD_INT 0
44962: ST_TO_ADDR
// x := GetX ( building ) ;
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: CALL_OW 250
44977: ST_TO_ADDR
// y := GetY ( building ) ;
44978: LD_ADDR_VAR 0 5
44982: PUSH
44983: LD_VAR 0 2
44987: PPUSH
44988: CALL_OW 251
44992: ST_TO_ADDR
// if not building or not x or not y then
44993: LD_VAR 0 2
44997: NOT
44998: PUSH
44999: LD_VAR 0 4
45003: NOT
45004: OR
45005: PUSH
45006: LD_VAR 0 5
45010: NOT
45011: OR
45012: IFFALSE 45016
// exit ;
45014: GO 45108
// if GetTaskList ( unit ) then
45016: LD_VAR 0 1
45020: PPUSH
45021: CALL_OW 437
45025: IFFALSE 45108
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45027: LD_STRING e
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 437
45039: PUSH
45040: LD_INT 1
45042: ARRAY
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: EQUAL
45048: PUSH
45049: LD_VAR 0 4
45053: PUSH
45054: LD_VAR 0 1
45058: PPUSH
45059: CALL_OW 437
45063: PUSH
45064: LD_INT 1
45066: ARRAY
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: EQUAL
45072: AND
45073: PUSH
45074: LD_VAR 0 5
45078: PUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 437
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PUSH
45093: LD_INT 3
45095: ARRAY
45096: EQUAL
45097: AND
45098: IFFALSE 45108
// result := true end ;
45100: LD_ADDR_VAR 0 3
45104: PUSH
45105: LD_INT 1
45107: ST_TO_ADDR
// end ;
45108: LD_VAR 0 3
45112: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45113: LD_INT 0
45115: PPUSH
// result := false ;
45116: LD_ADDR_VAR 0 4
45120: PUSH
45121: LD_INT 0
45123: ST_TO_ADDR
// if GetTaskList ( unit ) then
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 437
45133: IFFALSE 45216
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45135: LD_STRING M
45137: PUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 437
45147: PUSH
45148: LD_INT 1
45150: ARRAY
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: EQUAL
45156: PUSH
45157: LD_VAR 0 2
45161: PUSH
45162: LD_VAR 0 1
45166: PPUSH
45167: CALL_OW 437
45171: PUSH
45172: LD_INT 1
45174: ARRAY
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: EQUAL
45180: AND
45181: PUSH
45182: LD_VAR 0 3
45186: PUSH
45187: LD_VAR 0 1
45191: PPUSH
45192: CALL_OW 437
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: PUSH
45201: LD_INT 3
45203: ARRAY
45204: EQUAL
45205: AND
45206: IFFALSE 45216
// result := true ;
45208: LD_ADDR_VAR 0 4
45212: PUSH
45213: LD_INT 1
45215: ST_TO_ADDR
// end ; end ;
45216: LD_VAR 0 4
45220: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45221: LD_INT 0
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
// if not unit or not area then
45227: LD_VAR 0 1
45231: NOT
45232: PUSH
45233: LD_VAR 0 2
45237: NOT
45238: OR
45239: IFFALSE 45243
// exit ;
45241: GO 45407
// tmp := AreaToList ( area , i ) ;
45243: LD_ADDR_VAR 0 6
45247: PUSH
45248: LD_VAR 0 2
45252: PPUSH
45253: LD_VAR 0 5
45257: PPUSH
45258: CALL_OW 517
45262: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45263: LD_ADDR_VAR 0 5
45267: PUSH
45268: DOUBLE
45269: LD_INT 1
45271: DEC
45272: ST_TO_ADDR
45273: LD_VAR 0 6
45277: PUSH
45278: LD_INT 1
45280: ARRAY
45281: PUSH
45282: FOR_TO
45283: IFFALSE 45405
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45285: LD_ADDR_VAR 0 7
45289: PUSH
45290: LD_VAR 0 6
45294: PUSH
45295: LD_INT 1
45297: ARRAY
45298: PUSH
45299: LD_VAR 0 5
45303: ARRAY
45304: PUSH
45305: LD_VAR 0 6
45309: PUSH
45310: LD_INT 2
45312: ARRAY
45313: PUSH
45314: LD_VAR 0 5
45318: ARRAY
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45324: LD_VAR 0 7
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: LD_VAR 0 7
45337: PUSH
45338: LD_INT 2
45340: ARRAY
45341: PPUSH
45342: CALL_OW 428
45346: PUSH
45347: LD_INT 0
45349: EQUAL
45350: IFFALSE 45403
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45352: LD_VAR 0 1
45356: PPUSH
45357: LD_VAR 0 7
45361: PUSH
45362: LD_INT 1
45364: ARRAY
45365: PPUSH
45366: LD_VAR 0 7
45370: PUSH
45371: LD_INT 2
45373: ARRAY
45374: PPUSH
45375: LD_VAR 0 3
45379: PPUSH
45380: CALL_OW 48
// result := IsPlaced ( unit ) ;
45384: LD_ADDR_VAR 0 4
45388: PUSH
45389: LD_VAR 0 1
45393: PPUSH
45394: CALL_OW 305
45398: ST_TO_ADDR
// exit ;
45399: POP
45400: POP
45401: GO 45407
// end ; end ;
45403: GO 45282
45405: POP
45406: POP
// end ;
45407: LD_VAR 0 4
45411: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45412: LD_INT 0
45414: PPUSH
45415: PPUSH
45416: PPUSH
// if not side or side > 8 then
45417: LD_VAR 0 1
45421: NOT
45422: PUSH
45423: LD_VAR 0 1
45427: PUSH
45428: LD_INT 8
45430: GREATER
45431: OR
45432: IFFALSE 45436
// exit ;
45434: GO 45623
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45436: LD_ADDR_VAR 0 4
45440: PUSH
45441: LD_INT 22
45443: PUSH
45444: LD_VAR 0 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 21
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PPUSH
45467: CALL_OW 69
45471: ST_TO_ADDR
// if not tmp then
45472: LD_VAR 0 4
45476: NOT
45477: IFFALSE 45481
// exit ;
45479: GO 45623
// enable_addtolog := true ;
45481: LD_ADDR_OWVAR 81
45485: PUSH
45486: LD_INT 1
45488: ST_TO_ADDR
// AddToLog ( [ ) ;
45489: LD_STRING [
45491: PPUSH
45492: CALL_OW 561
// for i in tmp do
45496: LD_ADDR_VAR 0 3
45500: PUSH
45501: LD_VAR 0 4
45505: PUSH
45506: FOR_IN
45507: IFFALSE 45614
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45509: LD_STRING [
45511: PUSH
45512: LD_VAR 0 3
45516: PPUSH
45517: CALL_OW 266
45521: STR
45522: PUSH
45523: LD_STRING , 
45525: STR
45526: PUSH
45527: LD_VAR 0 3
45531: PPUSH
45532: CALL_OW 250
45536: STR
45537: PUSH
45538: LD_STRING , 
45540: STR
45541: PUSH
45542: LD_VAR 0 3
45546: PPUSH
45547: CALL_OW 251
45551: STR
45552: PUSH
45553: LD_STRING , 
45555: STR
45556: PUSH
45557: LD_VAR 0 3
45561: PPUSH
45562: CALL_OW 254
45566: STR
45567: PUSH
45568: LD_STRING , 
45570: STR
45571: PUSH
45572: LD_VAR 0 3
45576: PPUSH
45577: LD_INT 1
45579: PPUSH
45580: CALL_OW 268
45584: STR
45585: PUSH
45586: LD_STRING , 
45588: STR
45589: PUSH
45590: LD_VAR 0 3
45594: PPUSH
45595: LD_INT 2
45597: PPUSH
45598: CALL_OW 268
45602: STR
45603: PUSH
45604: LD_STRING ],
45606: STR
45607: PPUSH
45608: CALL_OW 561
// end ;
45612: GO 45506
45614: POP
45615: POP
// AddToLog ( ]; ) ;
45616: LD_STRING ];
45618: PPUSH
45619: CALL_OW 561
// end ;
45623: LD_VAR 0 2
45627: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45628: LD_INT 0
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
// if not area or not rate or not max then
45635: LD_VAR 0 1
45639: NOT
45640: PUSH
45641: LD_VAR 0 2
45645: NOT
45646: OR
45647: PUSH
45648: LD_VAR 0 4
45652: NOT
45653: OR
45654: IFFALSE 45658
// exit ;
45656: GO 45847
// while 1 do
45658: LD_INT 1
45660: IFFALSE 45847
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45662: LD_ADDR_VAR 0 9
45666: PUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: LD_INT 1
45674: PPUSH
45675: CALL_OW 287
45679: PUSH
45680: LD_INT 10
45682: MUL
45683: ST_TO_ADDR
// r := rate / 10 ;
45684: LD_ADDR_VAR 0 7
45688: PUSH
45689: LD_VAR 0 2
45693: PUSH
45694: LD_INT 10
45696: DIVREAL
45697: ST_TO_ADDR
// time := 1 1$00 ;
45698: LD_ADDR_VAR 0 8
45702: PUSH
45703: LD_INT 2100
45705: ST_TO_ADDR
// if amount < min then
45706: LD_VAR 0 9
45710: PUSH
45711: LD_VAR 0 3
45715: LESS
45716: IFFALSE 45734
// r := r * 2 else
45718: LD_ADDR_VAR 0 7
45722: PUSH
45723: LD_VAR 0 7
45727: PUSH
45728: LD_INT 2
45730: MUL
45731: ST_TO_ADDR
45732: GO 45760
// if amount > max then
45734: LD_VAR 0 9
45738: PUSH
45739: LD_VAR 0 4
45743: GREATER
45744: IFFALSE 45760
// r := r / 2 ;
45746: LD_ADDR_VAR 0 7
45750: PUSH
45751: LD_VAR 0 7
45755: PUSH
45756: LD_INT 2
45758: DIVREAL
45759: ST_TO_ADDR
// time := time / r ;
45760: LD_ADDR_VAR 0 8
45764: PUSH
45765: LD_VAR 0 8
45769: PUSH
45770: LD_VAR 0 7
45774: DIVREAL
45775: ST_TO_ADDR
// if time < 0 then
45776: LD_VAR 0 8
45780: PUSH
45781: LD_INT 0
45783: LESS
45784: IFFALSE 45801
// time := time * - 1 ;
45786: LD_ADDR_VAR 0 8
45790: PUSH
45791: LD_VAR 0 8
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: MUL
45800: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45801: LD_VAR 0 8
45805: PUSH
45806: LD_INT 35
45808: PPUSH
45809: LD_INT 875
45811: PPUSH
45812: CALL_OW 12
45816: PLUS
45817: PPUSH
45818: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45822: LD_INT 1
45824: PPUSH
45825: LD_INT 5
45827: PPUSH
45828: CALL_OW 12
45832: PPUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: LD_INT 1
45840: PPUSH
45841: CALL_OW 55
// end ;
45845: GO 45658
// end ;
45847: LD_VAR 0 5
45851: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45852: LD_INT 0
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
// if not turrets or not factories then
45862: LD_VAR 0 1
45866: NOT
45867: PUSH
45868: LD_VAR 0 2
45872: NOT
45873: OR
45874: IFFALSE 45878
// exit ;
45876: GO 46185
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45878: LD_ADDR_VAR 0 10
45882: PUSH
45883: LD_INT 5
45885: PUSH
45886: LD_INT 6
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 4
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 5
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 24
45920: PUSH
45921: LD_INT 25
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 23
45930: PUSH
45931: LD_INT 27
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 42
45944: PUSH
45945: LD_INT 43
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 44
45954: PUSH
45955: LD_INT 46
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 45
45964: PUSH
45965: LD_INT 47
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// result := [ ] ;
45982: LD_ADDR_VAR 0 3
45986: PUSH
45987: EMPTY
45988: ST_TO_ADDR
// for i in turrets do
45989: LD_ADDR_VAR 0 4
45993: PUSH
45994: LD_VAR 0 1
45998: PUSH
45999: FOR_IN
46000: IFFALSE 46183
// begin nat := GetNation ( i ) ;
46002: LD_ADDR_VAR 0 7
46006: PUSH
46007: LD_VAR 0 4
46011: PPUSH
46012: CALL_OW 248
46016: ST_TO_ADDR
// weapon := 0 ;
46017: LD_ADDR_VAR 0 8
46021: PUSH
46022: LD_INT 0
46024: ST_TO_ADDR
// if not nat then
46025: LD_VAR 0 7
46029: NOT
46030: IFFALSE 46034
// continue ;
46032: GO 45999
// for j in list [ nat ] do
46034: LD_ADDR_VAR 0 5
46038: PUSH
46039: LD_VAR 0 10
46043: PUSH
46044: LD_VAR 0 7
46048: ARRAY
46049: PUSH
46050: FOR_IN
46051: IFFALSE 46092
// if GetBWeapon ( i ) = j [ 1 ] then
46053: LD_VAR 0 4
46057: PPUSH
46058: CALL_OW 269
46062: PUSH
46063: LD_VAR 0 5
46067: PUSH
46068: LD_INT 1
46070: ARRAY
46071: EQUAL
46072: IFFALSE 46090
// begin weapon := j [ 2 ] ;
46074: LD_ADDR_VAR 0 8
46078: PUSH
46079: LD_VAR 0 5
46083: PUSH
46084: LD_INT 2
46086: ARRAY
46087: ST_TO_ADDR
// break ;
46088: GO 46092
// end ;
46090: GO 46050
46092: POP
46093: POP
// if not weapon then
46094: LD_VAR 0 8
46098: NOT
46099: IFFALSE 46103
// continue ;
46101: GO 45999
// for k in factories do
46103: LD_ADDR_VAR 0 6
46107: PUSH
46108: LD_VAR 0 2
46112: PUSH
46113: FOR_IN
46114: IFFALSE 46179
// begin weapons := AvailableWeaponList ( k ) ;
46116: LD_ADDR_VAR 0 9
46120: PUSH
46121: LD_VAR 0 6
46125: PPUSH
46126: CALL_OW 478
46130: ST_TO_ADDR
// if not weapons then
46131: LD_VAR 0 9
46135: NOT
46136: IFFALSE 46140
// continue ;
46138: GO 46113
// if weapon in weapons then
46140: LD_VAR 0 8
46144: PUSH
46145: LD_VAR 0 9
46149: IN
46150: IFFALSE 46177
// begin result := [ i , weapon ] ;
46152: LD_ADDR_VAR 0 3
46156: PUSH
46157: LD_VAR 0 4
46161: PUSH
46162: LD_VAR 0 8
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// exit ;
46171: POP
46172: POP
46173: POP
46174: POP
46175: GO 46185
// end ; end ;
46177: GO 46113
46179: POP
46180: POP
// end ;
46181: GO 45999
46183: POP
46184: POP
// end ;
46185: LD_VAR 0 3
46189: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46190: LD_INT 0
46192: PPUSH
// if not side or side > 8 then
46193: LD_VAR 0 3
46197: NOT
46198: PUSH
46199: LD_VAR 0 3
46203: PUSH
46204: LD_INT 8
46206: GREATER
46207: OR
46208: IFFALSE 46212
// exit ;
46210: GO 46271
// if not range then
46212: LD_VAR 0 4
46216: NOT
46217: IFFALSE 46228
// range := - 12 ;
46219: LD_ADDR_VAR 0 4
46223: PUSH
46224: LD_INT 12
46226: NEG
46227: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46228: LD_VAR 0 1
46232: PPUSH
46233: LD_VAR 0 2
46237: PPUSH
46238: LD_VAR 0 3
46242: PPUSH
46243: LD_VAR 0 4
46247: PPUSH
46248: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46252: LD_VAR 0 1
46256: PPUSH
46257: LD_VAR 0 2
46261: PPUSH
46262: LD_VAR 0 3
46266: PPUSH
46267: CALL_OW 331
// end ;
46271: LD_VAR 0 5
46275: RET
// export function Video ( mode ) ; begin
46276: LD_INT 0
46278: PPUSH
// ingame_video = mode ;
46279: LD_ADDR_OWVAR 52
46283: PUSH
46284: LD_VAR 0 1
46288: ST_TO_ADDR
// interface_hidden = mode ;
46289: LD_ADDR_OWVAR 54
46293: PUSH
46294: LD_VAR 0 1
46298: ST_TO_ADDR
// end ;
46299: LD_VAR 0 2
46303: RET
// export function Join ( array , element ) ; begin
46304: LD_INT 0
46306: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46307: LD_ADDR_VAR 0 3
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 1
46321: PUSH
46322: LD_INT 1
46324: PLUS
46325: PPUSH
46326: LD_VAR 0 2
46330: PPUSH
46331: CALL_OW 1
46335: ST_TO_ADDR
// end ;
46336: LD_VAR 0 3
46340: RET
// export function JoinUnion ( array , element ) ; begin
46341: LD_INT 0
46343: PPUSH
// result := array union element ;
46344: LD_ADDR_VAR 0 3
46348: PUSH
46349: LD_VAR 0 1
46353: PUSH
46354: LD_VAR 0 2
46358: UNION
46359: ST_TO_ADDR
// end ;
46360: LD_VAR 0 3
46364: RET
// export function GetBehemoths ( side ) ; begin
46365: LD_INT 0
46367: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46368: LD_ADDR_VAR 0 2
46372: PUSH
46373: LD_INT 22
46375: PUSH
46376: LD_VAR 0 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 31
46387: PUSH
46388: LD_INT 25
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PPUSH
46399: CALL_OW 69
46403: ST_TO_ADDR
// end ;
46404: LD_VAR 0 2
46408: RET
// export function Shuffle ( array ) ; var i , index ; begin
46409: LD_INT 0
46411: PPUSH
46412: PPUSH
46413: PPUSH
// result := [ ] ;
46414: LD_ADDR_VAR 0 2
46418: PUSH
46419: EMPTY
46420: ST_TO_ADDR
// if not array then
46421: LD_VAR 0 1
46425: NOT
46426: IFFALSE 46430
// exit ;
46428: GO 46529
// Randomize ;
46430: CALL_OW 10
// for i = array downto 1 do
46434: LD_ADDR_VAR 0 3
46438: PUSH
46439: DOUBLE
46440: LD_VAR 0 1
46444: INC
46445: ST_TO_ADDR
46446: LD_INT 1
46448: PUSH
46449: FOR_DOWNTO
46450: IFFALSE 46527
// begin index := rand ( 1 , array ) ;
46452: LD_ADDR_VAR 0 4
46456: PUSH
46457: LD_INT 1
46459: PPUSH
46460: LD_VAR 0 1
46464: PPUSH
46465: CALL_OW 12
46469: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46470: LD_ADDR_VAR 0 2
46474: PUSH
46475: LD_VAR 0 2
46479: PPUSH
46480: LD_VAR 0 2
46484: PUSH
46485: LD_INT 1
46487: PLUS
46488: PPUSH
46489: LD_VAR 0 1
46493: PUSH
46494: LD_VAR 0 4
46498: ARRAY
46499: PPUSH
46500: CALL_OW 2
46504: ST_TO_ADDR
// array := Delete ( array , index ) ;
46505: LD_ADDR_VAR 0 1
46509: PUSH
46510: LD_VAR 0 1
46514: PPUSH
46515: LD_VAR 0 4
46519: PPUSH
46520: CALL_OW 3
46524: ST_TO_ADDR
// end ;
46525: GO 46449
46527: POP
46528: POP
// end ;
46529: LD_VAR 0 2
46533: RET
// export function GetBaseMaterials ( base ) ; begin
46534: LD_INT 0
46536: PPUSH
// result := [ 0 , 0 , 0 ] ;
46537: LD_ADDR_VAR 0 2
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// if not base then
46556: LD_VAR 0 1
46560: NOT
46561: IFFALSE 46565
// exit ;
46563: GO 46614
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46565: LD_ADDR_VAR 0 2
46569: PUSH
46570: LD_VAR 0 1
46574: PPUSH
46575: LD_INT 1
46577: PPUSH
46578: CALL_OW 275
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: LD_INT 2
46590: PPUSH
46591: CALL_OW 275
46595: PUSH
46596: LD_VAR 0 1
46600: PPUSH
46601: LD_INT 3
46603: PPUSH
46604: CALL_OW 275
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// end ;
46614: LD_VAR 0 2
46618: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46619: LD_INT 0
46621: PPUSH
46622: PPUSH
// result := array ;
46623: LD_ADDR_VAR 0 3
46627: PUSH
46628: LD_VAR 0 1
46632: ST_TO_ADDR
// if size > 0 then
46633: LD_VAR 0 2
46637: PUSH
46638: LD_INT 0
46640: GREATER
46641: IFFALSE 46687
// for i := array downto size do
46643: LD_ADDR_VAR 0 4
46647: PUSH
46648: DOUBLE
46649: LD_VAR 0 1
46653: INC
46654: ST_TO_ADDR
46655: LD_VAR 0 2
46659: PUSH
46660: FOR_DOWNTO
46661: IFFALSE 46685
// result := Delete ( result , result ) ;
46663: LD_ADDR_VAR 0 3
46667: PUSH
46668: LD_VAR 0 3
46672: PPUSH
46673: LD_VAR 0 3
46677: PPUSH
46678: CALL_OW 3
46682: ST_TO_ADDR
46683: GO 46660
46685: POP
46686: POP
// end ;
46687: LD_VAR 0 3
46691: RET
// export function ComExit ( unit ) ; var tmp ; begin
46692: LD_INT 0
46694: PPUSH
46695: PPUSH
// if not IsInUnit ( unit ) then
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 310
46705: NOT
46706: IFFALSE 46710
// exit ;
46708: GO 46770
// tmp := IsInUnit ( unit ) ;
46710: LD_ADDR_VAR 0 3
46714: PUSH
46715: LD_VAR 0 1
46719: PPUSH
46720: CALL_OW 310
46724: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46725: LD_VAR 0 3
46729: PPUSH
46730: CALL_OW 247
46734: PUSH
46735: LD_INT 2
46737: EQUAL
46738: IFFALSE 46751
// ComExitVehicle ( unit ) else
46740: LD_VAR 0 1
46744: PPUSH
46745: CALL_OW 121
46749: GO 46760
// ComExitBuilding ( unit ) ;
46751: LD_VAR 0 1
46755: PPUSH
46756: CALL_OW 122
// result := tmp ;
46760: LD_ADDR_VAR 0 2
46764: PUSH
46765: LD_VAR 0 3
46769: ST_TO_ADDR
// end ;
46770: LD_VAR 0 2
46774: RET
// export function ComExitAll ( units ) ; var i ; begin
46775: LD_INT 0
46777: PPUSH
46778: PPUSH
// if not units then
46779: LD_VAR 0 1
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 46814
// for i in units do
46788: LD_ADDR_VAR 0 3
46792: PUSH
46793: LD_VAR 0 1
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46812
// ComExit ( i ) ;
46801: LD_VAR 0 3
46805: PPUSH
46806: CALL 46692 0 1
46810: GO 46798
46812: POP
46813: POP
// end ;
46814: LD_VAR 0 2
46818: RET
// export function ResetHc ; begin
46819: LD_INT 0
46821: PPUSH
// InitHc ;
46822: CALL_OW 19
// hc_importance := 0 ;
46826: LD_ADDR_OWVAR 32
46830: PUSH
46831: LD_INT 0
46833: ST_TO_ADDR
// end ;
46834: LD_VAR 0 1
46838: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46839: LD_INT 0
46841: PPUSH
46842: PPUSH
46843: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46844: LD_ADDR_VAR 0 6
46848: PUSH
46849: LD_VAR 0 1
46853: PUSH
46854: LD_VAR 0 3
46858: PLUS
46859: PUSH
46860: LD_INT 2
46862: DIV
46863: ST_TO_ADDR
// if _x < 0 then
46864: LD_VAR 0 6
46868: PUSH
46869: LD_INT 0
46871: LESS
46872: IFFALSE 46889
// _x := _x * - 1 ;
46874: LD_ADDR_VAR 0 6
46878: PUSH
46879: LD_VAR 0 6
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: MUL
46888: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46889: LD_ADDR_VAR 0 7
46893: PUSH
46894: LD_VAR 0 2
46898: PUSH
46899: LD_VAR 0 4
46903: PLUS
46904: PUSH
46905: LD_INT 2
46907: DIV
46908: ST_TO_ADDR
// if _y < 0 then
46909: LD_VAR 0 7
46913: PUSH
46914: LD_INT 0
46916: LESS
46917: IFFALSE 46934
// _y := _y * - 1 ;
46919: LD_ADDR_VAR 0 7
46923: PUSH
46924: LD_VAR 0 7
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: MUL
46933: ST_TO_ADDR
// result := [ _x , _y ] ;
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_VAR 0 6
46943: PUSH
46944: LD_VAR 0 7
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: ST_TO_ADDR
// end ;
46953: LD_VAR 0 5
46957: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46958: LD_INT 0
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
// task := GetTaskList ( unit ) ;
46964: LD_ADDR_VAR 0 7
46968: PUSH
46969: LD_VAR 0 1
46973: PPUSH
46974: CALL_OW 437
46978: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46979: LD_VAR 0 7
46983: NOT
46984: PUSH
46985: LD_VAR 0 1
46989: PPUSH
46990: LD_VAR 0 2
46994: PPUSH
46995: CALL_OW 308
46999: NOT
47000: AND
47001: IFFALSE 47005
// exit ;
47003: GO 47123
// if IsInArea ( unit , area ) then
47005: LD_VAR 0 1
47009: PPUSH
47010: LD_VAR 0 2
47014: PPUSH
47015: CALL_OW 308
47019: IFFALSE 47037
// begin ComMoveToArea ( unit , goAway ) ;
47021: LD_VAR 0 1
47025: PPUSH
47026: LD_VAR 0 3
47030: PPUSH
47031: CALL_OW 113
// exit ;
47035: GO 47123
// end ; if task [ 1 ] [ 1 ] <> M then
47037: LD_VAR 0 7
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: PUSH
47046: LD_INT 1
47048: ARRAY
47049: PUSH
47050: LD_STRING M
47052: NONEQUAL
47053: IFFALSE 47057
// exit ;
47055: GO 47123
// x := task [ 1 ] [ 2 ] ;
47057: LD_ADDR_VAR 0 5
47061: PUSH
47062: LD_VAR 0 7
47066: PUSH
47067: LD_INT 1
47069: ARRAY
47070: PUSH
47071: LD_INT 2
47073: ARRAY
47074: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47075: LD_ADDR_VAR 0 6
47079: PUSH
47080: LD_VAR 0 7
47084: PUSH
47085: LD_INT 1
47087: ARRAY
47088: PUSH
47089: LD_INT 3
47091: ARRAY
47092: ST_TO_ADDR
// if InArea ( x , y , area ) then
47093: LD_VAR 0 5
47097: PPUSH
47098: LD_VAR 0 6
47102: PPUSH
47103: LD_VAR 0 2
47107: PPUSH
47108: CALL_OW 309
47112: IFFALSE 47123
// ComStop ( unit ) ;
47114: LD_VAR 0 1
47118: PPUSH
47119: CALL_OW 141
// end ;
47123: LD_VAR 0 4
47127: RET
// export function Abs ( value ) ; begin
47128: LD_INT 0
47130: PPUSH
// result := value ;
47131: LD_ADDR_VAR 0 2
47135: PUSH
47136: LD_VAR 0 1
47140: ST_TO_ADDR
// if value < 0 then
47141: LD_VAR 0 1
47145: PUSH
47146: LD_INT 0
47148: LESS
47149: IFFALSE 47166
// result := value * - 1 ;
47151: LD_ADDR_VAR 0 2
47155: PUSH
47156: LD_VAR 0 1
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: MUL
47165: ST_TO_ADDR
// end ;
47166: LD_VAR 0 2
47170: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47171: LD_INT 0
47173: PPUSH
47174: PPUSH
47175: PPUSH
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
// if not unit or not building then
47181: LD_VAR 0 1
47185: NOT
47186: PUSH
47187: LD_VAR 0 2
47191: NOT
47192: OR
47193: IFFALSE 47197
// exit ;
47195: GO 47423
// x := GetX ( building ) ;
47197: LD_ADDR_VAR 0 4
47201: PUSH
47202: LD_VAR 0 2
47206: PPUSH
47207: CALL_OW 250
47211: ST_TO_ADDR
// y := GetY ( building ) ;
47212: LD_ADDR_VAR 0 6
47216: PUSH
47217: LD_VAR 0 2
47221: PPUSH
47222: CALL_OW 251
47226: ST_TO_ADDR
// d := GetDir ( building ) ;
47227: LD_ADDR_VAR 0 8
47231: PUSH
47232: LD_VAR 0 2
47236: PPUSH
47237: CALL_OW 254
47241: ST_TO_ADDR
// r := 4 ;
47242: LD_ADDR_VAR 0 9
47246: PUSH
47247: LD_INT 4
47249: ST_TO_ADDR
// for i := 1 to 5 do
47250: LD_ADDR_VAR 0 10
47254: PUSH
47255: DOUBLE
47256: LD_INT 1
47258: DEC
47259: ST_TO_ADDR
47260: LD_INT 5
47262: PUSH
47263: FOR_TO
47264: IFFALSE 47421
// begin _x := ShiftX ( x , d , r + i ) ;
47266: LD_ADDR_VAR 0 5
47270: PUSH
47271: LD_VAR 0 4
47275: PPUSH
47276: LD_VAR 0 8
47280: PPUSH
47281: LD_VAR 0 9
47285: PUSH
47286: LD_VAR 0 10
47290: PLUS
47291: PPUSH
47292: CALL_OW 272
47296: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47297: LD_ADDR_VAR 0 7
47301: PUSH
47302: LD_VAR 0 6
47306: PPUSH
47307: LD_VAR 0 8
47311: PPUSH
47312: LD_VAR 0 9
47316: PUSH
47317: LD_VAR 0 10
47321: PLUS
47322: PPUSH
47323: CALL_OW 273
47327: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47328: LD_VAR 0 5
47332: PPUSH
47333: LD_VAR 0 7
47337: PPUSH
47338: CALL_OW 488
47342: PUSH
47343: LD_VAR 0 5
47347: PPUSH
47348: LD_VAR 0 7
47352: PPUSH
47353: CALL_OW 428
47357: PPUSH
47358: CALL_OW 247
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: IN
47373: NOT
47374: AND
47375: IFFALSE 47419
// begin ComMoveXY ( unit , _x , _y ) ;
47377: LD_VAR 0 1
47381: PPUSH
47382: LD_VAR 0 5
47386: PPUSH
47387: LD_VAR 0 7
47391: PPUSH
47392: CALL_OW 111
// result := [ _x , _y ] ;
47396: LD_ADDR_VAR 0 3
47400: PUSH
47401: LD_VAR 0 5
47405: PUSH
47406: LD_VAR 0 7
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// exit ;
47415: POP
47416: POP
47417: GO 47423
// end ; end ;
47419: GO 47263
47421: POP
47422: POP
// end ;
47423: LD_VAR 0 3
47427: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47428: LD_INT 0
47430: PPUSH
47431: PPUSH
47432: PPUSH
// result := 0 ;
47433: LD_ADDR_VAR 0 3
47437: PUSH
47438: LD_INT 0
47440: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47441: LD_VAR 0 1
47445: PUSH
47446: LD_INT 0
47448: LESS
47449: PUSH
47450: LD_VAR 0 1
47454: PUSH
47455: LD_INT 8
47457: GREATER
47458: OR
47459: PUSH
47460: LD_VAR 0 2
47464: PUSH
47465: LD_INT 0
47467: LESS
47468: OR
47469: PUSH
47470: LD_VAR 0 2
47474: PUSH
47475: LD_INT 8
47477: GREATER
47478: OR
47479: IFFALSE 47483
// exit ;
47481: GO 47558
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47483: LD_ADDR_VAR 0 4
47487: PUSH
47488: LD_INT 22
47490: PUSH
47491: LD_VAR 0 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 69
47504: PUSH
47505: FOR_IN
47506: IFFALSE 47556
// begin un := UnitShoot ( i ) ;
47508: LD_ADDR_VAR 0 5
47512: PUSH
47513: LD_VAR 0 4
47517: PPUSH
47518: CALL_OW 504
47522: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47523: LD_VAR 0 5
47527: PPUSH
47528: CALL_OW 255
47532: PUSH
47533: LD_VAR 0 1
47537: EQUAL
47538: IFFALSE 47554
// begin result := un ;
47540: LD_ADDR_VAR 0 3
47544: PUSH
47545: LD_VAR 0 5
47549: ST_TO_ADDR
// exit ;
47550: POP
47551: POP
47552: GO 47558
// end ; end ;
47554: GO 47505
47556: POP
47557: POP
// end ;
47558: LD_VAR 0 3
47562: RET
// export function GetCargoBay ( units ) ; begin
47563: LD_INT 0
47565: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47566: LD_ADDR_VAR 0 2
47570: PUSH
47571: LD_VAR 0 1
47575: PPUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 34
47581: PUSH
47582: LD_INT 12
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 34
47591: PUSH
47592: LD_INT 51
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 34
47601: PUSH
47602: LD_INT 32
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 34
47611: PUSH
47612: LD_EXP 91
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: PPUSH
47628: CALL_OW 72
47632: ST_TO_ADDR
// end ;
47633: LD_VAR 0 2
47637: RET
// export function Negate ( value ) ; begin
47638: LD_INT 0
47640: PPUSH
// result := not value ;
47641: LD_ADDR_VAR 0 2
47645: PUSH
47646: LD_VAR 0 1
47650: NOT
47651: ST_TO_ADDR
// end ;
47652: LD_VAR 0 2
47656: RET
// export function Inc ( value ) ; begin
47657: LD_INT 0
47659: PPUSH
// result := value + 1 ;
47660: LD_ADDR_VAR 0 2
47664: PUSH
47665: LD_VAR 0 1
47669: PUSH
47670: LD_INT 1
47672: PLUS
47673: ST_TO_ADDR
// end ;
47674: LD_VAR 0 2
47678: RET
// export function Dec ( value ) ; begin
47679: LD_INT 0
47681: PPUSH
// result := value - 1 ;
47682: LD_ADDR_VAR 0 2
47686: PUSH
47687: LD_VAR 0 1
47691: PUSH
47692: LD_INT 1
47694: MINUS
47695: ST_TO_ADDR
// end ;
47696: LD_VAR 0 2
47700: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47701: LD_INT 0
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47711: LD_VAR 0 1
47715: PPUSH
47716: LD_VAR 0 2
47720: PPUSH
47721: CALL_OW 488
47725: NOT
47726: PUSH
47727: LD_VAR 0 3
47731: PPUSH
47732: LD_VAR 0 4
47736: PPUSH
47737: CALL_OW 488
47741: NOT
47742: OR
47743: IFFALSE 47756
// begin result := - 1 ;
47745: LD_ADDR_VAR 0 5
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: ST_TO_ADDR
// exit ;
47754: GO 47991
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47756: LD_ADDR_VAR 0 12
47760: PUSH
47761: LD_VAR 0 1
47765: PPUSH
47766: LD_VAR 0 2
47770: PPUSH
47771: LD_VAR 0 3
47775: PPUSH
47776: LD_VAR 0 4
47780: PPUSH
47781: CALL 46839 0 4
47785: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47786: LD_ADDR_VAR 0 11
47790: PUSH
47791: LD_VAR 0 1
47795: PPUSH
47796: LD_VAR 0 2
47800: PPUSH
47801: LD_VAR 0 12
47805: PUSH
47806: LD_INT 1
47808: ARRAY
47809: PPUSH
47810: LD_VAR 0 12
47814: PUSH
47815: LD_INT 2
47817: ARRAY
47818: PPUSH
47819: CALL_OW 298
47823: ST_TO_ADDR
// distance := 9999 ;
47824: LD_ADDR_VAR 0 10
47828: PUSH
47829: LD_INT 9999
47831: ST_TO_ADDR
// for i := 0 to 5 do
47832: LD_ADDR_VAR 0 6
47836: PUSH
47837: DOUBLE
47838: LD_INT 0
47840: DEC
47841: ST_TO_ADDR
47842: LD_INT 5
47844: PUSH
47845: FOR_TO
47846: IFFALSE 47989
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47848: LD_ADDR_VAR 0 7
47852: PUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: LD_VAR 0 6
47862: PPUSH
47863: LD_VAR 0 11
47867: PPUSH
47868: CALL_OW 272
47872: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47873: LD_ADDR_VAR 0 8
47877: PUSH
47878: LD_VAR 0 2
47882: PPUSH
47883: LD_VAR 0 6
47887: PPUSH
47888: LD_VAR 0 11
47892: PPUSH
47893: CALL_OW 273
47897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47898: LD_VAR 0 7
47902: PPUSH
47903: LD_VAR 0 8
47907: PPUSH
47908: CALL_OW 488
47912: NOT
47913: IFFALSE 47917
// continue ;
47915: GO 47845
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47917: LD_ADDR_VAR 0 9
47921: PUSH
47922: LD_VAR 0 12
47926: PUSH
47927: LD_INT 1
47929: ARRAY
47930: PPUSH
47931: LD_VAR 0 12
47935: PUSH
47936: LD_INT 2
47938: ARRAY
47939: PPUSH
47940: LD_VAR 0 7
47944: PPUSH
47945: LD_VAR 0 8
47949: PPUSH
47950: CALL_OW 298
47954: ST_TO_ADDR
// if tmp < distance then
47955: LD_VAR 0 9
47959: PUSH
47960: LD_VAR 0 10
47964: LESS
47965: IFFALSE 47987
// begin result := i ;
47967: LD_ADDR_VAR 0 5
47971: PUSH
47972: LD_VAR 0 6
47976: ST_TO_ADDR
// distance := tmp ;
47977: LD_ADDR_VAR 0 10
47981: PUSH
47982: LD_VAR 0 9
47986: ST_TO_ADDR
// end ; end ;
47987: GO 47845
47989: POP
47990: POP
// end ;
47991: LD_VAR 0 5
47995: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47996: LD_INT 0
47998: PPUSH
47999: PPUSH
// if not driver or not IsInUnit ( driver ) then
48000: LD_VAR 0 1
48004: NOT
48005: PUSH
48006: LD_VAR 0 1
48010: PPUSH
48011: CALL_OW 310
48015: NOT
48016: OR
48017: IFFALSE 48021
// exit ;
48019: GO 48111
// vehicle := IsInUnit ( driver ) ;
48021: LD_ADDR_VAR 0 3
48025: PUSH
48026: LD_VAR 0 1
48030: PPUSH
48031: CALL_OW 310
48035: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48036: LD_VAR 0 1
48040: PPUSH
48041: LD_STRING \
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: PUSH
48071: LD_STRING E
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_VAR 0 3
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PPUSH
48107: CALL_OW 446
// end ;
48111: LD_VAR 0 2
48115: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48116: LD_INT 0
48118: PPUSH
48119: PPUSH
// if not driver or not IsInUnit ( driver ) then
48120: LD_VAR 0 1
48124: NOT
48125: PUSH
48126: LD_VAR 0 1
48130: PPUSH
48131: CALL_OW 310
48135: NOT
48136: OR
48137: IFFALSE 48141
// exit ;
48139: GO 48231
// vehicle := IsInUnit ( driver ) ;
48141: LD_ADDR_VAR 0 3
48145: PUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 310
48155: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48156: LD_VAR 0 1
48160: PPUSH
48161: LD_STRING \
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: PUSH
48191: LD_STRING E
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_VAR 0 3
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PPUSH
48227: CALL_OW 447
// end ;
48231: LD_VAR 0 2
48235: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48236: LD_INT 0
48238: PPUSH
48239: PPUSH
48240: PPUSH
// tmp := [ ] ;
48241: LD_ADDR_VAR 0 5
48245: PUSH
48246: EMPTY
48247: ST_TO_ADDR
// for i in units do
48248: LD_ADDR_VAR 0 4
48252: PUSH
48253: LD_VAR 0 1
48257: PUSH
48258: FOR_IN
48259: IFFALSE 48297
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48261: LD_ADDR_VAR 0 5
48265: PUSH
48266: LD_VAR 0 5
48270: PPUSH
48271: LD_VAR 0 5
48275: PUSH
48276: LD_INT 1
48278: PLUS
48279: PPUSH
48280: LD_VAR 0 4
48284: PPUSH
48285: CALL_OW 256
48289: PPUSH
48290: CALL_OW 2
48294: ST_TO_ADDR
48295: GO 48258
48297: POP
48298: POP
// if not tmp then
48299: LD_VAR 0 5
48303: NOT
48304: IFFALSE 48308
// exit ;
48306: GO 48356
// if asc then
48308: LD_VAR 0 2
48312: IFFALSE 48336
// result := SortListByListAsc ( units , tmp ) else
48314: LD_ADDR_VAR 0 3
48318: PUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: LD_VAR 0 5
48328: PPUSH
48329: CALL_OW 76
48333: ST_TO_ADDR
48334: GO 48356
// result := SortListByListDesc ( units , tmp ) ;
48336: LD_ADDR_VAR 0 3
48340: PUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: LD_VAR 0 5
48350: PPUSH
48351: CALL_OW 77
48355: ST_TO_ADDR
// end ;
48356: LD_VAR 0 3
48360: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48361: LD_INT 0
48363: PPUSH
48364: PPUSH
// task := GetTaskList ( mech ) ;
48365: LD_ADDR_VAR 0 4
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 437
48379: ST_TO_ADDR
// if not task then
48380: LD_VAR 0 4
48384: NOT
48385: IFFALSE 48389
// exit ;
48387: GO 48431
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48389: LD_ADDR_VAR 0 3
48393: PUSH
48394: LD_VAR 0 4
48398: PUSH
48399: LD_INT 1
48401: ARRAY
48402: PUSH
48403: LD_INT 1
48405: ARRAY
48406: PUSH
48407: LD_STRING r
48409: EQUAL
48410: PUSH
48411: LD_VAR 0 4
48415: PUSH
48416: LD_INT 1
48418: ARRAY
48419: PUSH
48420: LD_INT 4
48422: ARRAY
48423: PUSH
48424: LD_VAR 0 2
48428: EQUAL
48429: AND
48430: ST_TO_ADDR
// end ;
48431: LD_VAR 0 3
48435: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48436: LD_INT 0
48438: PPUSH
// SetDir ( unit , d ) ;
48439: LD_VAR 0 1
48443: PPUSH
48444: LD_VAR 0 4
48448: PPUSH
48449: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48453: LD_VAR 0 1
48457: PPUSH
48458: LD_VAR 0 2
48462: PPUSH
48463: LD_VAR 0 3
48467: PPUSH
48468: LD_VAR 0 5
48472: PPUSH
48473: CALL_OW 48
// end ;
48477: LD_VAR 0 6
48481: RET
// export function ToNaturalNumber ( number ) ; begin
48482: LD_INT 0
48484: PPUSH
// result := number div 1 ;
48485: LD_ADDR_VAR 0 2
48489: PUSH
48490: LD_VAR 0 1
48494: PUSH
48495: LD_INT 1
48497: DIV
48498: ST_TO_ADDR
// if number < 0 then
48499: LD_VAR 0 1
48503: PUSH
48504: LD_INT 0
48506: LESS
48507: IFFALSE 48517
// result := 0 ;
48509: LD_ADDR_VAR 0 2
48513: PUSH
48514: LD_INT 0
48516: ST_TO_ADDR
// end ;
48517: LD_VAR 0 2
48521: RET
// export function SortByClass ( units , class ) ; var un ; begin
48522: LD_INT 0
48524: PPUSH
48525: PPUSH
// if not units or not class then
48526: LD_VAR 0 1
48530: NOT
48531: PUSH
48532: LD_VAR 0 2
48536: NOT
48537: OR
48538: IFFALSE 48542
// exit ;
48540: GO 48637
// result := [ ] ;
48542: LD_ADDR_VAR 0 3
48546: PUSH
48547: EMPTY
48548: ST_TO_ADDR
// for un in units do
48549: LD_ADDR_VAR 0 4
48553: PUSH
48554: LD_VAR 0 1
48558: PUSH
48559: FOR_IN
48560: IFFALSE 48635
// if GetClass ( un ) = class then
48562: LD_VAR 0 4
48566: PPUSH
48567: CALL_OW 257
48571: PUSH
48572: LD_VAR 0 2
48576: EQUAL
48577: IFFALSE 48604
// result := Insert ( result , 1 , un ) else
48579: LD_ADDR_VAR 0 3
48583: PUSH
48584: LD_VAR 0 3
48588: PPUSH
48589: LD_INT 1
48591: PPUSH
48592: LD_VAR 0 4
48596: PPUSH
48597: CALL_OW 2
48601: ST_TO_ADDR
48602: GO 48633
// result := Replace ( result , result + 1 , un ) ;
48604: LD_ADDR_VAR 0 3
48608: PUSH
48609: LD_VAR 0 3
48613: PPUSH
48614: LD_VAR 0 3
48618: PUSH
48619: LD_INT 1
48621: PLUS
48622: PPUSH
48623: LD_VAR 0 4
48627: PPUSH
48628: CALL_OW 1
48632: ST_TO_ADDR
48633: GO 48559
48635: POP
48636: POP
// end ;
48637: LD_VAR 0 3
48641: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48642: LD_INT 0
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
// result := [ ] ;
48651: LD_ADDR_VAR 0 4
48655: PUSH
48656: EMPTY
48657: ST_TO_ADDR
// if x - r < 0 then
48658: LD_VAR 0 1
48662: PUSH
48663: LD_VAR 0 3
48667: MINUS
48668: PUSH
48669: LD_INT 0
48671: LESS
48672: IFFALSE 48684
// min_x := 0 else
48674: LD_ADDR_VAR 0 8
48678: PUSH
48679: LD_INT 0
48681: ST_TO_ADDR
48682: GO 48700
// min_x := x - r ;
48684: LD_ADDR_VAR 0 8
48688: PUSH
48689: LD_VAR 0 1
48693: PUSH
48694: LD_VAR 0 3
48698: MINUS
48699: ST_TO_ADDR
// if y - r < 0 then
48700: LD_VAR 0 2
48704: PUSH
48705: LD_VAR 0 3
48709: MINUS
48710: PUSH
48711: LD_INT 0
48713: LESS
48714: IFFALSE 48726
// min_y := 0 else
48716: LD_ADDR_VAR 0 7
48720: PUSH
48721: LD_INT 0
48723: ST_TO_ADDR
48724: GO 48742
// min_y := y - r ;
48726: LD_ADDR_VAR 0 7
48730: PUSH
48731: LD_VAR 0 2
48735: PUSH
48736: LD_VAR 0 3
48740: MINUS
48741: ST_TO_ADDR
// max_x := x + r ;
48742: LD_ADDR_VAR 0 9
48746: PUSH
48747: LD_VAR 0 1
48751: PUSH
48752: LD_VAR 0 3
48756: PLUS
48757: ST_TO_ADDR
// max_y := y + r ;
48758: LD_ADDR_VAR 0 10
48762: PUSH
48763: LD_VAR 0 2
48767: PUSH
48768: LD_VAR 0 3
48772: PLUS
48773: ST_TO_ADDR
// for _x = min_x to max_x do
48774: LD_ADDR_VAR 0 5
48778: PUSH
48779: DOUBLE
48780: LD_VAR 0 8
48784: DEC
48785: ST_TO_ADDR
48786: LD_VAR 0 9
48790: PUSH
48791: FOR_TO
48792: IFFALSE 48893
// for _y = min_y to max_y do
48794: LD_ADDR_VAR 0 6
48798: PUSH
48799: DOUBLE
48800: LD_VAR 0 7
48804: DEC
48805: ST_TO_ADDR
48806: LD_VAR 0 10
48810: PUSH
48811: FOR_TO
48812: IFFALSE 48889
// begin if not ValidHex ( _x , _y ) then
48814: LD_VAR 0 5
48818: PPUSH
48819: LD_VAR 0 6
48823: PPUSH
48824: CALL_OW 488
48828: NOT
48829: IFFALSE 48833
// continue ;
48831: GO 48811
// if GetResourceTypeXY ( _x , _y ) then
48833: LD_VAR 0 5
48837: PPUSH
48838: LD_VAR 0 6
48842: PPUSH
48843: CALL_OW 283
48847: IFFALSE 48887
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48849: LD_ADDR_VAR 0 4
48853: PUSH
48854: LD_VAR 0 4
48858: PPUSH
48859: LD_VAR 0 4
48863: PUSH
48864: LD_INT 1
48866: PLUS
48867: PPUSH
48868: LD_VAR 0 5
48872: PUSH
48873: LD_VAR 0 6
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PPUSH
48882: CALL_OW 1
48886: ST_TO_ADDR
// end ;
48887: GO 48811
48889: POP
48890: POP
48891: GO 48791
48893: POP
48894: POP
// end ;
48895: LD_VAR 0 4
48899: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48900: LD_INT 0
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
// if not units then
48910: LD_VAR 0 1
48914: NOT
48915: IFFALSE 48919
// exit ;
48917: GO 49430
// result := UnitFilter ( units , [ f_ok ] ) ;
48919: LD_ADDR_VAR 0 3
48923: PUSH
48924: LD_VAR 0 1
48928: PPUSH
48929: LD_INT 50
48931: PUSH
48932: EMPTY
48933: LIST
48934: PPUSH
48935: CALL_OW 72
48939: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48940: LD_ADDR_VAR 0 8
48944: PUSH
48945: LD_VAR 0 1
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: PPUSH
48954: CALL_OW 255
48958: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48959: LD_ADDR_VAR 0 10
48963: PUSH
48964: LD_INT 29
48966: PUSH
48967: LD_EXP 94
48971: PUSH
48972: LD_INT 49
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: ST_TO_ADDR
// if not result then
48980: LD_VAR 0 3
48984: NOT
48985: IFFALSE 48989
// exit ;
48987: GO 49430
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48989: LD_ADDR_VAR 0 5
48993: PUSH
48994: LD_INT 81
48996: PUSH
48997: LD_VAR 0 8
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PPUSH
49006: CALL_OW 69
49010: ST_TO_ADDR
// for i in result do
49011: LD_ADDR_VAR 0 4
49015: PUSH
49016: LD_VAR 0 3
49020: PUSH
49021: FOR_IN
49022: IFFALSE 49428
// begin tag := GetTag ( i ) + 1 ;
49024: LD_ADDR_VAR 0 9
49028: PUSH
49029: LD_VAR 0 4
49033: PPUSH
49034: CALL_OW 110
49038: PUSH
49039: LD_INT 1
49041: PLUS
49042: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49043: LD_ADDR_VAR 0 7
49047: PUSH
49048: LD_VAR 0 4
49052: PPUSH
49053: CALL_OW 250
49057: PPUSH
49058: LD_VAR 0 4
49062: PPUSH
49063: CALL_OW 251
49067: PPUSH
49068: LD_INT 6
49070: PPUSH
49071: CALL 48642 0 3
49075: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49076: LD_VAR 0 7
49080: PUSH
49081: LD_VAR 0 4
49085: PPUSH
49086: CALL_OW 264
49090: PUSH
49091: LD_VAR 0 10
49095: IN
49096: NOT
49097: AND
49098: IFFALSE 49137
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49100: LD_VAR 0 4
49104: PPUSH
49105: LD_VAR 0 7
49109: PUSH
49110: LD_INT 1
49112: ARRAY
49113: PUSH
49114: LD_INT 1
49116: ARRAY
49117: PPUSH
49118: LD_VAR 0 7
49122: PUSH
49123: LD_INT 1
49125: ARRAY
49126: PUSH
49127: LD_INT 2
49129: ARRAY
49130: PPUSH
49131: CALL_OW 116
49135: GO 49426
// if path > tag then
49137: LD_VAR 0 2
49141: PUSH
49142: LD_VAR 0 9
49146: GREATER
49147: IFFALSE 49355
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
49149: LD_ADDR_VAR 0 6
49153: PUSH
49154: LD_VAR 0 5
49158: PPUSH
49159: LD_INT 91
49161: PUSH
49162: LD_VAR 0 4
49166: PUSH
49167: LD_INT 12
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: PPUSH
49175: CALL_OW 72
49179: ST_TO_ADDR
// if nearEnemy then
49180: LD_VAR 0 6
49184: IFFALSE 49253
// begin if GetWeapon ( i ) = ru_time_lapser then
49186: LD_VAR 0 4
49190: PPUSH
49191: CALL_OW 264
49195: PUSH
49196: LD_INT 49
49198: EQUAL
49199: IFFALSE 49227
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49201: LD_VAR 0 4
49205: PPUSH
49206: LD_VAR 0 6
49210: PPUSH
49211: LD_VAR 0 4
49215: PPUSH
49216: CALL_OW 74
49220: PPUSH
49221: CALL_OW 112
49225: GO 49251
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49227: LD_VAR 0 4
49231: PPUSH
49232: LD_VAR 0 6
49236: PPUSH
49237: LD_VAR 0 4
49241: PPUSH
49242: CALL_OW 74
49246: PPUSH
49247: CALL_OW 115
// end else
49251: GO 49353
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49253: LD_VAR 0 4
49257: PPUSH
49258: LD_VAR 0 2
49262: PUSH
49263: LD_VAR 0 9
49267: ARRAY
49268: PUSH
49269: LD_INT 1
49271: ARRAY
49272: PPUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_VAR 0 9
49282: ARRAY
49283: PUSH
49284: LD_INT 2
49286: ARRAY
49287: PPUSH
49288: CALL_OW 297
49292: PUSH
49293: LD_INT 6
49295: GREATER
49296: IFFALSE 49339
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49298: LD_VAR 0 4
49302: PPUSH
49303: LD_VAR 0 2
49307: PUSH
49308: LD_VAR 0 9
49312: ARRAY
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: PPUSH
49318: LD_VAR 0 2
49322: PUSH
49323: LD_VAR 0 9
49327: ARRAY
49328: PUSH
49329: LD_INT 2
49331: ARRAY
49332: PPUSH
49333: CALL_OW 114
49337: GO 49353
// SetTag ( i , tag ) ;
49339: LD_VAR 0 4
49343: PPUSH
49344: LD_VAR 0 9
49348: PPUSH
49349: CALL_OW 109
// end else
49353: GO 49426
// if enemy then
49355: LD_VAR 0 5
49359: IFFALSE 49426
// begin if GetWeapon ( i ) = ru_time_lapser then
49361: LD_VAR 0 4
49365: PPUSH
49366: CALL_OW 264
49370: PUSH
49371: LD_INT 49
49373: EQUAL
49374: IFFALSE 49402
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49376: LD_VAR 0 4
49380: PPUSH
49381: LD_VAR 0 5
49385: PPUSH
49386: LD_VAR 0 4
49390: PPUSH
49391: CALL_OW 74
49395: PPUSH
49396: CALL_OW 112
49400: GO 49426
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49402: LD_VAR 0 4
49406: PPUSH
49407: LD_VAR 0 5
49411: PPUSH
49412: LD_VAR 0 4
49416: PPUSH
49417: CALL_OW 74
49421: PPUSH
49422: CALL_OW 115
// end ; end ;
49426: GO 49021
49428: POP
49429: POP
// end ;
49430: LD_VAR 0 3
49434: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49435: LD_INT 0
49437: PPUSH
49438: PPUSH
49439: PPUSH
// if not unit or IsInUnit ( unit ) then
49440: LD_VAR 0 1
49444: NOT
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: CALL_OW 310
49455: OR
49456: IFFALSE 49460
// exit ;
49458: GO 49551
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49460: LD_ADDR_VAR 0 4
49464: PUSH
49465: LD_VAR 0 1
49469: PPUSH
49470: CALL_OW 250
49474: PPUSH
49475: LD_VAR 0 2
49479: PPUSH
49480: LD_INT 1
49482: PPUSH
49483: CALL_OW 272
49487: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49488: LD_ADDR_VAR 0 5
49492: PUSH
49493: LD_VAR 0 1
49497: PPUSH
49498: CALL_OW 251
49502: PPUSH
49503: LD_VAR 0 2
49507: PPUSH
49508: LD_INT 1
49510: PPUSH
49511: CALL_OW 273
49515: ST_TO_ADDR
// if ValidHex ( x , y ) then
49516: LD_VAR 0 4
49520: PPUSH
49521: LD_VAR 0 5
49525: PPUSH
49526: CALL_OW 488
49530: IFFALSE 49551
// ComTurnXY ( unit , x , y ) ;
49532: LD_VAR 0 1
49536: PPUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: LD_VAR 0 5
49546: PPUSH
49547: CALL_OW 118
// end ;
49551: LD_VAR 0 3
49555: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49556: LD_INT 0
49558: PPUSH
49559: PPUSH
// result := false ;
49560: LD_ADDR_VAR 0 3
49564: PUSH
49565: LD_INT 0
49567: ST_TO_ADDR
// if not units then
49568: LD_VAR 0 2
49572: NOT
49573: IFFALSE 49577
// exit ;
49575: GO 49622
// for i in units do
49577: LD_ADDR_VAR 0 4
49581: PUSH
49582: LD_VAR 0 2
49586: PUSH
49587: FOR_IN
49588: IFFALSE 49620
// if See ( side , i ) then
49590: LD_VAR 0 1
49594: PPUSH
49595: LD_VAR 0 4
49599: PPUSH
49600: CALL_OW 292
49604: IFFALSE 49618
// begin result := true ;
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_INT 1
49613: ST_TO_ADDR
// exit ;
49614: POP
49615: POP
49616: GO 49622
// end ;
49618: GO 49587
49620: POP
49621: POP
// end ;
49622: LD_VAR 0 3
49626: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49627: LD_INT 0
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
// if not unit or not points then
49633: LD_VAR 0 1
49637: NOT
49638: PUSH
49639: LD_VAR 0 2
49643: NOT
49644: OR
49645: IFFALSE 49649
// exit ;
49647: GO 49739
// dist := 99999 ;
49649: LD_ADDR_VAR 0 5
49653: PUSH
49654: LD_INT 99999
49656: ST_TO_ADDR
// for i in points do
49657: LD_ADDR_VAR 0 4
49661: PUSH
49662: LD_VAR 0 2
49666: PUSH
49667: FOR_IN
49668: IFFALSE 49737
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49670: LD_ADDR_VAR 0 6
49674: PUSH
49675: LD_VAR 0 1
49679: PPUSH
49680: LD_VAR 0 4
49684: PUSH
49685: LD_INT 1
49687: ARRAY
49688: PPUSH
49689: LD_VAR 0 4
49693: PUSH
49694: LD_INT 2
49696: ARRAY
49697: PPUSH
49698: CALL_OW 297
49702: ST_TO_ADDR
// if tmpDist < dist then
49703: LD_VAR 0 6
49707: PUSH
49708: LD_VAR 0 5
49712: LESS
49713: IFFALSE 49735
// begin result := i ;
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: LD_VAR 0 4
49724: ST_TO_ADDR
// dist := tmpDist ;
49725: LD_ADDR_VAR 0 5
49729: PUSH
49730: LD_VAR 0 6
49734: ST_TO_ADDR
// end ; end ;
49735: GO 49667
49737: POP
49738: POP
// end ;
49739: LD_VAR 0 3
49743: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49744: LD_INT 0
49746: PPUSH
// uc_side := side ;
49747: LD_ADDR_OWVAR 20
49751: PUSH
49752: LD_VAR 0 1
49756: ST_TO_ADDR
// uc_nation := 3 ;
49757: LD_ADDR_OWVAR 21
49761: PUSH
49762: LD_INT 3
49764: ST_TO_ADDR
// vc_chassis := 25 ;
49765: LD_ADDR_OWVAR 37
49769: PUSH
49770: LD_INT 25
49772: ST_TO_ADDR
// vc_engine := engine_siberite ;
49773: LD_ADDR_OWVAR 39
49777: PUSH
49778: LD_INT 3
49780: ST_TO_ADDR
// vc_control := control_computer ;
49781: LD_ADDR_OWVAR 38
49785: PUSH
49786: LD_INT 3
49788: ST_TO_ADDR
// vc_weapon := 59 ;
49789: LD_ADDR_OWVAR 40
49793: PUSH
49794: LD_INT 59
49796: ST_TO_ADDR
// result := CreateVehicle ;
49797: LD_ADDR_VAR 0 5
49801: PUSH
49802: CALL_OW 45
49806: ST_TO_ADDR
// SetDir ( result , d ) ;
49807: LD_VAR 0 5
49811: PPUSH
49812: LD_VAR 0 4
49816: PPUSH
49817: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49821: LD_VAR 0 5
49825: PPUSH
49826: LD_VAR 0 2
49830: PPUSH
49831: LD_VAR 0 3
49835: PPUSH
49836: LD_INT 0
49838: PPUSH
49839: CALL_OW 48
// end ;
49843: LD_VAR 0 5
49847: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49848: LD_INT 0
49850: PPUSH
49851: PPUSH
49852: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49853: LD_ADDR_VAR 0 2
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49876: LD_VAR 0 1
49880: NOT
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 264
49891: PUSH
49892: LD_INT 12
49894: PUSH
49895: LD_INT 51
49897: PUSH
49898: LD_INT 32
49900: PUSH
49901: LD_EXP 91
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: IN
49912: NOT
49913: OR
49914: IFFALSE 49918
// exit ;
49916: GO 50016
// for i := 1 to 3 do
49918: LD_ADDR_VAR 0 3
49922: PUSH
49923: DOUBLE
49924: LD_INT 1
49926: DEC
49927: ST_TO_ADDR
49928: LD_INT 3
49930: PUSH
49931: FOR_TO
49932: IFFALSE 50014
// begin tmp := GetCargo ( cargo , i ) ;
49934: LD_ADDR_VAR 0 4
49938: PUSH
49939: LD_VAR 0 1
49943: PPUSH
49944: LD_VAR 0 3
49948: PPUSH
49949: CALL_OW 289
49953: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49954: LD_ADDR_VAR 0 2
49958: PUSH
49959: LD_VAR 0 2
49963: PPUSH
49964: LD_VAR 0 3
49968: PPUSH
49969: LD_VAR 0 4
49973: PPUSH
49974: CALL_OW 1
49978: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49979: LD_ADDR_VAR 0 2
49983: PUSH
49984: LD_VAR 0 2
49988: PPUSH
49989: LD_INT 4
49991: PPUSH
49992: LD_VAR 0 2
49996: PUSH
49997: LD_INT 4
49999: ARRAY
50000: PUSH
50001: LD_VAR 0 4
50005: PLUS
50006: PPUSH
50007: CALL_OW 1
50011: ST_TO_ADDR
// end ;
50012: GO 49931
50014: POP
50015: POP
// end ;
50016: LD_VAR 0 2
50020: RET
// export function Length ( array ) ; begin
50021: LD_INT 0
50023: PPUSH
// result := array + 0 ;
50024: LD_ADDR_VAR 0 2
50028: PUSH
50029: LD_VAR 0 1
50033: PUSH
50034: LD_INT 0
50036: PLUS
50037: ST_TO_ADDR
// end ;
50038: LD_VAR 0 2
50042: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
50043: LD_INT 0
50045: PPUSH
// uc_side := side ;
50046: LD_ADDR_OWVAR 20
50050: PUSH
50051: LD_VAR 0 1
50055: ST_TO_ADDR
// uc_nation := nation ;
50056: LD_ADDR_OWVAR 21
50060: PUSH
50061: LD_VAR 0 2
50065: ST_TO_ADDR
// bc_level := level ;
50066: LD_ADDR_OWVAR 43
50070: PUSH
50071: LD_VAR 0 3
50075: ST_TO_ADDR
// bc_type := typ ;
50076: LD_ADDR_OWVAR 42
50080: PUSH
50081: LD_VAR 0 4
50085: ST_TO_ADDR
// bc_kind1 := - 1 ;
50086: LD_ADDR_OWVAR 44
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: ST_TO_ADDR
// bc_kind2 := - 1 ;
50095: LD_ADDR_OWVAR 45
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
50104: LD_ADDR_VAR 0 9
50108: PUSH
50109: LD_VAR 0 5
50113: PPUSH
50114: LD_VAR 0 6
50118: PPUSH
50119: LD_VAR 0 7
50123: PPUSH
50124: CALL_OW 47
50128: ST_TO_ADDR
// if isInBuildingStage then
50129: LD_VAR 0 8
50133: IFFALSE 50144
// SetBuildingStage ( result ) ;
50135: LD_VAR 0 9
50139: PPUSH
50140: CALL_OW 593
// end ;
50144: LD_VAR 0 9
50148: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
50149: LD_INT 0
50151: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
50152: LD_VAR 0 1
50156: PPUSH
50157: LD_VAR 0 2
50161: PPUSH
50162: LD_INT 0
50164: PPUSH
50165: LD_INT 1
50167: PPUSH
50168: LD_INT 1
50170: PPUSH
50171: LD_INT 0
50173: PPUSH
50174: CALL_OW 587
// end ; end_of_file
50178: LD_VAR 0 3
50182: RET
// every 0 0$1 do
50183: GO 50185
50185: DISABLE
// begin enable ;
50186: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50187: LD_STRING updateTimer(
50189: PUSH
50190: LD_OWVAR 1
50194: STR
50195: PUSH
50196: LD_STRING );
50198: STR
50199: PPUSH
50200: CALL_OW 559
// end ;
50204: END
// export function SOS_MapStart ( ) ; begin
50205: LD_INT 0
50207: PPUSH
// if streamModeActive then
50208: LD_EXP 110
50212: IFFALSE 50221
// DefineStreamItems ( true ) ;
50214: LD_INT 1
50216: PPUSH
50217: CALL 51871 0 1
// UpdateFactoryWaypoints ( ) ;
50221: CALL 65455 0 0
// end ;
50225: LD_VAR 0 1
50229: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50230: LD_INT 0
50232: PPUSH
// if p2 = 100 then
50233: LD_VAR 0 2
50237: PUSH
50238: LD_INT 100
50240: EQUAL
50241: IFFALSE 51244
// begin if not StreamModeActive then
50243: LD_EXP 110
50247: NOT
50248: IFFALSE 50258
// StreamModeActive := true ;
50250: LD_ADDR_EXP 110
50254: PUSH
50255: LD_INT 1
50257: ST_TO_ADDR
// if p3 = 0 then
50258: LD_VAR 0 3
50262: PUSH
50263: LD_INT 0
50265: EQUAL
50266: IFFALSE 50272
// InitStreamMode ;
50268: CALL 51407 0 0
// if p3 = 1 then
50272: LD_VAR 0 3
50276: PUSH
50277: LD_INT 1
50279: EQUAL
50280: IFFALSE 50290
// sRocket := true ;
50282: LD_ADDR_EXP 115
50286: PUSH
50287: LD_INT 1
50289: ST_TO_ADDR
// if p3 = 2 then
50290: LD_VAR 0 3
50294: PUSH
50295: LD_INT 2
50297: EQUAL
50298: IFFALSE 50308
// sSpeed := true ;
50300: LD_ADDR_EXP 114
50304: PUSH
50305: LD_INT 1
50307: ST_TO_ADDR
// if p3 = 3 then
50308: LD_VAR 0 3
50312: PUSH
50313: LD_INT 3
50315: EQUAL
50316: IFFALSE 50326
// sEngine := true ;
50318: LD_ADDR_EXP 116
50322: PUSH
50323: LD_INT 1
50325: ST_TO_ADDR
// if p3 = 4 then
50326: LD_VAR 0 3
50330: PUSH
50331: LD_INT 4
50333: EQUAL
50334: IFFALSE 50344
// sSpec := true ;
50336: LD_ADDR_EXP 113
50340: PUSH
50341: LD_INT 1
50343: ST_TO_ADDR
// if p3 = 5 then
50344: LD_VAR 0 3
50348: PUSH
50349: LD_INT 5
50351: EQUAL
50352: IFFALSE 50362
// sLevel := true ;
50354: LD_ADDR_EXP 117
50358: PUSH
50359: LD_INT 1
50361: ST_TO_ADDR
// if p3 = 6 then
50362: LD_VAR 0 3
50366: PUSH
50367: LD_INT 6
50369: EQUAL
50370: IFFALSE 50380
// sArmoury := true ;
50372: LD_ADDR_EXP 118
50376: PUSH
50377: LD_INT 1
50379: ST_TO_ADDR
// if p3 = 7 then
50380: LD_VAR 0 3
50384: PUSH
50385: LD_INT 7
50387: EQUAL
50388: IFFALSE 50398
// sRadar := true ;
50390: LD_ADDR_EXP 119
50394: PUSH
50395: LD_INT 1
50397: ST_TO_ADDR
// if p3 = 8 then
50398: LD_VAR 0 3
50402: PUSH
50403: LD_INT 8
50405: EQUAL
50406: IFFALSE 50416
// sBunker := true ;
50408: LD_ADDR_EXP 120
50412: PUSH
50413: LD_INT 1
50415: ST_TO_ADDR
// if p3 = 9 then
50416: LD_VAR 0 3
50420: PUSH
50421: LD_INT 9
50423: EQUAL
50424: IFFALSE 50434
// sHack := true ;
50426: LD_ADDR_EXP 121
50430: PUSH
50431: LD_INT 1
50433: ST_TO_ADDR
// if p3 = 10 then
50434: LD_VAR 0 3
50438: PUSH
50439: LD_INT 10
50441: EQUAL
50442: IFFALSE 50452
// sFire := true ;
50444: LD_ADDR_EXP 122
50448: PUSH
50449: LD_INT 1
50451: ST_TO_ADDR
// if p3 = 11 then
50452: LD_VAR 0 3
50456: PUSH
50457: LD_INT 11
50459: EQUAL
50460: IFFALSE 50470
// sRefresh := true ;
50462: LD_ADDR_EXP 123
50466: PUSH
50467: LD_INT 1
50469: ST_TO_ADDR
// if p3 = 12 then
50470: LD_VAR 0 3
50474: PUSH
50475: LD_INT 12
50477: EQUAL
50478: IFFALSE 50488
// sExp := true ;
50480: LD_ADDR_EXP 124
50484: PUSH
50485: LD_INT 1
50487: ST_TO_ADDR
// if p3 = 13 then
50488: LD_VAR 0 3
50492: PUSH
50493: LD_INT 13
50495: EQUAL
50496: IFFALSE 50506
// sDepot := true ;
50498: LD_ADDR_EXP 125
50502: PUSH
50503: LD_INT 1
50505: ST_TO_ADDR
// if p3 = 14 then
50506: LD_VAR 0 3
50510: PUSH
50511: LD_INT 14
50513: EQUAL
50514: IFFALSE 50524
// sFlag := true ;
50516: LD_ADDR_EXP 126
50520: PUSH
50521: LD_INT 1
50523: ST_TO_ADDR
// if p3 = 15 then
50524: LD_VAR 0 3
50528: PUSH
50529: LD_INT 15
50531: EQUAL
50532: IFFALSE 50542
// sKamikadze := true ;
50534: LD_ADDR_EXP 134
50538: PUSH
50539: LD_INT 1
50541: ST_TO_ADDR
// if p3 = 16 then
50542: LD_VAR 0 3
50546: PUSH
50547: LD_INT 16
50549: EQUAL
50550: IFFALSE 50560
// sTroll := true ;
50552: LD_ADDR_EXP 135
50556: PUSH
50557: LD_INT 1
50559: ST_TO_ADDR
// if p3 = 17 then
50560: LD_VAR 0 3
50564: PUSH
50565: LD_INT 17
50567: EQUAL
50568: IFFALSE 50578
// sSlow := true ;
50570: LD_ADDR_EXP 136
50574: PUSH
50575: LD_INT 1
50577: ST_TO_ADDR
// if p3 = 18 then
50578: LD_VAR 0 3
50582: PUSH
50583: LD_INT 18
50585: EQUAL
50586: IFFALSE 50596
// sLack := true ;
50588: LD_ADDR_EXP 137
50592: PUSH
50593: LD_INT 1
50595: ST_TO_ADDR
// if p3 = 19 then
50596: LD_VAR 0 3
50600: PUSH
50601: LD_INT 19
50603: EQUAL
50604: IFFALSE 50614
// sTank := true ;
50606: LD_ADDR_EXP 139
50610: PUSH
50611: LD_INT 1
50613: ST_TO_ADDR
// if p3 = 20 then
50614: LD_VAR 0 3
50618: PUSH
50619: LD_INT 20
50621: EQUAL
50622: IFFALSE 50632
// sRemote := true ;
50624: LD_ADDR_EXP 140
50628: PUSH
50629: LD_INT 1
50631: ST_TO_ADDR
// if p3 = 21 then
50632: LD_VAR 0 3
50636: PUSH
50637: LD_INT 21
50639: EQUAL
50640: IFFALSE 50650
// sPowell := true ;
50642: LD_ADDR_EXP 141
50646: PUSH
50647: LD_INT 1
50649: ST_TO_ADDR
// if p3 = 22 then
50650: LD_VAR 0 3
50654: PUSH
50655: LD_INT 22
50657: EQUAL
50658: IFFALSE 50668
// sTeleport := true ;
50660: LD_ADDR_EXP 144
50664: PUSH
50665: LD_INT 1
50667: ST_TO_ADDR
// if p3 = 23 then
50668: LD_VAR 0 3
50672: PUSH
50673: LD_INT 23
50675: EQUAL
50676: IFFALSE 50686
// sOilTower := true ;
50678: LD_ADDR_EXP 146
50682: PUSH
50683: LD_INT 1
50685: ST_TO_ADDR
// if p3 = 24 then
50686: LD_VAR 0 3
50690: PUSH
50691: LD_INT 24
50693: EQUAL
50694: IFFALSE 50704
// sShovel := true ;
50696: LD_ADDR_EXP 147
50700: PUSH
50701: LD_INT 1
50703: ST_TO_ADDR
// if p3 = 25 then
50704: LD_VAR 0 3
50708: PUSH
50709: LD_INT 25
50711: EQUAL
50712: IFFALSE 50722
// sSheik := true ;
50714: LD_ADDR_EXP 148
50718: PUSH
50719: LD_INT 1
50721: ST_TO_ADDR
// if p3 = 26 then
50722: LD_VAR 0 3
50726: PUSH
50727: LD_INT 26
50729: EQUAL
50730: IFFALSE 50740
// sEarthquake := true ;
50732: LD_ADDR_EXP 150
50736: PUSH
50737: LD_INT 1
50739: ST_TO_ADDR
// if p3 = 27 then
50740: LD_VAR 0 3
50744: PUSH
50745: LD_INT 27
50747: EQUAL
50748: IFFALSE 50758
// sAI := true ;
50750: LD_ADDR_EXP 151
50754: PUSH
50755: LD_INT 1
50757: ST_TO_ADDR
// if p3 = 28 then
50758: LD_VAR 0 3
50762: PUSH
50763: LD_INT 28
50765: EQUAL
50766: IFFALSE 50776
// sCargo := true ;
50768: LD_ADDR_EXP 154
50772: PUSH
50773: LD_INT 1
50775: ST_TO_ADDR
// if p3 = 29 then
50776: LD_VAR 0 3
50780: PUSH
50781: LD_INT 29
50783: EQUAL
50784: IFFALSE 50794
// sDLaser := true ;
50786: LD_ADDR_EXP 155
50790: PUSH
50791: LD_INT 1
50793: ST_TO_ADDR
// if p3 = 30 then
50794: LD_VAR 0 3
50798: PUSH
50799: LD_INT 30
50801: EQUAL
50802: IFFALSE 50812
// sExchange := true ;
50804: LD_ADDR_EXP 156
50808: PUSH
50809: LD_INT 1
50811: ST_TO_ADDR
// if p3 = 31 then
50812: LD_VAR 0 3
50816: PUSH
50817: LD_INT 31
50819: EQUAL
50820: IFFALSE 50830
// sFac := true ;
50822: LD_ADDR_EXP 157
50826: PUSH
50827: LD_INT 1
50829: ST_TO_ADDR
// if p3 = 32 then
50830: LD_VAR 0 3
50834: PUSH
50835: LD_INT 32
50837: EQUAL
50838: IFFALSE 50848
// sPower := true ;
50840: LD_ADDR_EXP 158
50844: PUSH
50845: LD_INT 1
50847: ST_TO_ADDR
// if p3 = 33 then
50848: LD_VAR 0 3
50852: PUSH
50853: LD_INT 33
50855: EQUAL
50856: IFFALSE 50866
// sRandom := true ;
50858: LD_ADDR_EXP 159
50862: PUSH
50863: LD_INT 1
50865: ST_TO_ADDR
// if p3 = 34 then
50866: LD_VAR 0 3
50870: PUSH
50871: LD_INT 34
50873: EQUAL
50874: IFFALSE 50884
// sShield := true ;
50876: LD_ADDR_EXP 160
50880: PUSH
50881: LD_INT 1
50883: ST_TO_ADDR
// if p3 = 35 then
50884: LD_VAR 0 3
50888: PUSH
50889: LD_INT 35
50891: EQUAL
50892: IFFALSE 50902
// sTime := true ;
50894: LD_ADDR_EXP 161
50898: PUSH
50899: LD_INT 1
50901: ST_TO_ADDR
// if p3 = 36 then
50902: LD_VAR 0 3
50906: PUSH
50907: LD_INT 36
50909: EQUAL
50910: IFFALSE 50920
// sTools := true ;
50912: LD_ADDR_EXP 162
50916: PUSH
50917: LD_INT 1
50919: ST_TO_ADDR
// if p3 = 101 then
50920: LD_VAR 0 3
50924: PUSH
50925: LD_INT 101
50927: EQUAL
50928: IFFALSE 50938
// sSold := true ;
50930: LD_ADDR_EXP 127
50934: PUSH
50935: LD_INT 1
50937: ST_TO_ADDR
// if p3 = 102 then
50938: LD_VAR 0 3
50942: PUSH
50943: LD_INT 102
50945: EQUAL
50946: IFFALSE 50956
// sDiff := true ;
50948: LD_ADDR_EXP 128
50952: PUSH
50953: LD_INT 1
50955: ST_TO_ADDR
// if p3 = 103 then
50956: LD_VAR 0 3
50960: PUSH
50961: LD_INT 103
50963: EQUAL
50964: IFFALSE 50974
// sFog := true ;
50966: LD_ADDR_EXP 131
50970: PUSH
50971: LD_INT 1
50973: ST_TO_ADDR
// if p3 = 104 then
50974: LD_VAR 0 3
50978: PUSH
50979: LD_INT 104
50981: EQUAL
50982: IFFALSE 50992
// sReset := true ;
50984: LD_ADDR_EXP 132
50988: PUSH
50989: LD_INT 1
50991: ST_TO_ADDR
// if p3 = 105 then
50992: LD_VAR 0 3
50996: PUSH
50997: LD_INT 105
50999: EQUAL
51000: IFFALSE 51010
// sSun := true ;
51002: LD_ADDR_EXP 133
51006: PUSH
51007: LD_INT 1
51009: ST_TO_ADDR
// if p3 = 106 then
51010: LD_VAR 0 3
51014: PUSH
51015: LD_INT 106
51017: EQUAL
51018: IFFALSE 51028
// sTiger := true ;
51020: LD_ADDR_EXP 129
51024: PUSH
51025: LD_INT 1
51027: ST_TO_ADDR
// if p3 = 107 then
51028: LD_VAR 0 3
51032: PUSH
51033: LD_INT 107
51035: EQUAL
51036: IFFALSE 51046
// sBomb := true ;
51038: LD_ADDR_EXP 130
51042: PUSH
51043: LD_INT 1
51045: ST_TO_ADDR
// if p3 = 108 then
51046: LD_VAR 0 3
51050: PUSH
51051: LD_INT 108
51053: EQUAL
51054: IFFALSE 51064
// sWound := true ;
51056: LD_ADDR_EXP 138
51060: PUSH
51061: LD_INT 1
51063: ST_TO_ADDR
// if p3 = 109 then
51064: LD_VAR 0 3
51068: PUSH
51069: LD_INT 109
51071: EQUAL
51072: IFFALSE 51082
// sBetray := true ;
51074: LD_ADDR_EXP 142
51078: PUSH
51079: LD_INT 1
51081: ST_TO_ADDR
// if p3 = 110 then
51082: LD_VAR 0 3
51086: PUSH
51087: LD_INT 110
51089: EQUAL
51090: IFFALSE 51100
// sContamin := true ;
51092: LD_ADDR_EXP 143
51096: PUSH
51097: LD_INT 1
51099: ST_TO_ADDR
// if p3 = 111 then
51100: LD_VAR 0 3
51104: PUSH
51105: LD_INT 111
51107: EQUAL
51108: IFFALSE 51118
// sOil := true ;
51110: LD_ADDR_EXP 145
51114: PUSH
51115: LD_INT 1
51117: ST_TO_ADDR
// if p3 = 112 then
51118: LD_VAR 0 3
51122: PUSH
51123: LD_INT 112
51125: EQUAL
51126: IFFALSE 51136
// sStu := true ;
51128: LD_ADDR_EXP 149
51132: PUSH
51133: LD_INT 1
51135: ST_TO_ADDR
// if p3 = 113 then
51136: LD_VAR 0 3
51140: PUSH
51141: LD_INT 113
51143: EQUAL
51144: IFFALSE 51154
// sBazooka := true ;
51146: LD_ADDR_EXP 152
51150: PUSH
51151: LD_INT 1
51153: ST_TO_ADDR
// if p3 = 114 then
51154: LD_VAR 0 3
51158: PUSH
51159: LD_INT 114
51161: EQUAL
51162: IFFALSE 51172
// sMortar := true ;
51164: LD_ADDR_EXP 153
51168: PUSH
51169: LD_INT 1
51171: ST_TO_ADDR
// if p3 = 115 then
51172: LD_VAR 0 3
51176: PUSH
51177: LD_INT 115
51179: EQUAL
51180: IFFALSE 51190
// sRanger := true ;
51182: LD_ADDR_EXP 163
51186: PUSH
51187: LD_INT 1
51189: ST_TO_ADDR
// if p3 = 116 then
51190: LD_VAR 0 3
51194: PUSH
51195: LD_INT 116
51197: EQUAL
51198: IFFALSE 51208
// sComputer := true ;
51200: LD_ADDR_EXP 164
51204: PUSH
51205: LD_INT 1
51207: ST_TO_ADDR
// if p3 = 117 then
51208: LD_VAR 0 3
51212: PUSH
51213: LD_INT 117
51215: EQUAL
51216: IFFALSE 51226
// s30 := true ;
51218: LD_ADDR_EXP 165
51222: PUSH
51223: LD_INT 1
51225: ST_TO_ADDR
// if p3 = 118 then
51226: LD_VAR 0 3
51230: PUSH
51231: LD_INT 118
51233: EQUAL
51234: IFFALSE 51244
// s60 := true ;
51236: LD_ADDR_EXP 166
51240: PUSH
51241: LD_INT 1
51243: ST_TO_ADDR
// end ; if p2 = 101 then
51244: LD_VAR 0 2
51248: PUSH
51249: LD_INT 101
51251: EQUAL
51252: IFFALSE 51380
// begin case p3 of 1 :
51254: LD_VAR 0 3
51258: PUSH
51259: LD_INT 1
51261: DOUBLE
51262: EQUAL
51263: IFTRUE 51267
51265: GO 51274
51267: POP
// hHackUnlimitedResources ; 2 :
51268: CALL 63478 0 0
51272: GO 51380
51274: LD_INT 2
51276: DOUBLE
51277: EQUAL
51278: IFTRUE 51282
51280: GO 51289
51282: POP
// hHackSetLevel10 ; 3 :
51283: CALL 63611 0 0
51287: GO 51380
51289: LD_INT 3
51291: DOUBLE
51292: EQUAL
51293: IFTRUE 51297
51295: GO 51304
51297: POP
// hHackSetLevel10YourUnits ; 4 :
51298: CALL 63696 0 0
51302: GO 51380
51304: LD_INT 4
51306: DOUBLE
51307: EQUAL
51308: IFTRUE 51312
51310: GO 51319
51312: POP
// hHackInvincible ; 5 :
51313: CALL 64144 0 0
51317: GO 51380
51319: LD_INT 5
51321: DOUBLE
51322: EQUAL
51323: IFTRUE 51327
51325: GO 51334
51327: POP
// hHackInvisible ; 6 :
51328: CALL 64255 0 0
51332: GO 51380
51334: LD_INT 6
51336: DOUBLE
51337: EQUAL
51338: IFTRUE 51342
51340: GO 51349
51342: POP
// hHackChangeYourSide ; 7 :
51343: CALL 64312 0 0
51347: GO 51380
51349: LD_INT 7
51351: DOUBLE
51352: EQUAL
51353: IFTRUE 51357
51355: GO 51364
51357: POP
// hHackChangeUnitSide ; 8 :
51358: CALL 64354 0 0
51362: GO 51380
51364: LD_INT 8
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51372
51370: GO 51379
51372: POP
// hHackFog ; end ;
51373: CALL 64455 0 0
51377: GO 51380
51379: POP
// end ; end ;
51380: LD_VAR 0 7
51384: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
51385: GO 51387
51387: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
51388: LD_STRING initStreamRollete();
51390: PPUSH
51391: CALL_OW 559
// InitStreamMode ;
51395: CALL 51407 0 0
// DefineStreamItems ( false ) ;
51399: LD_INT 0
51401: PPUSH
51402: CALL 51871 0 1
// end ;
51406: END
// function InitStreamMode ; begin
51407: LD_INT 0
51409: PPUSH
// streamModeActive := false ;
51410: LD_ADDR_EXP 110
51414: PUSH
51415: LD_INT 0
51417: ST_TO_ADDR
// normalCounter := 36 ;
51418: LD_ADDR_EXP 111
51422: PUSH
51423: LD_INT 36
51425: ST_TO_ADDR
// hardcoreCounter := 18 ;
51426: LD_ADDR_EXP 112
51430: PUSH
51431: LD_INT 18
51433: ST_TO_ADDR
// sRocket := false ;
51434: LD_ADDR_EXP 115
51438: PUSH
51439: LD_INT 0
51441: ST_TO_ADDR
// sSpeed := false ;
51442: LD_ADDR_EXP 114
51446: PUSH
51447: LD_INT 0
51449: ST_TO_ADDR
// sEngine := false ;
51450: LD_ADDR_EXP 116
51454: PUSH
51455: LD_INT 0
51457: ST_TO_ADDR
// sSpec := false ;
51458: LD_ADDR_EXP 113
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// sLevel := false ;
51466: LD_ADDR_EXP 117
51470: PUSH
51471: LD_INT 0
51473: ST_TO_ADDR
// sArmoury := false ;
51474: LD_ADDR_EXP 118
51478: PUSH
51479: LD_INT 0
51481: ST_TO_ADDR
// sRadar := false ;
51482: LD_ADDR_EXP 119
51486: PUSH
51487: LD_INT 0
51489: ST_TO_ADDR
// sBunker := false ;
51490: LD_ADDR_EXP 120
51494: PUSH
51495: LD_INT 0
51497: ST_TO_ADDR
// sHack := false ;
51498: LD_ADDR_EXP 121
51502: PUSH
51503: LD_INT 0
51505: ST_TO_ADDR
// sFire := false ;
51506: LD_ADDR_EXP 122
51510: PUSH
51511: LD_INT 0
51513: ST_TO_ADDR
// sRefresh := false ;
51514: LD_ADDR_EXP 123
51518: PUSH
51519: LD_INT 0
51521: ST_TO_ADDR
// sExp := false ;
51522: LD_ADDR_EXP 124
51526: PUSH
51527: LD_INT 0
51529: ST_TO_ADDR
// sDepot := false ;
51530: LD_ADDR_EXP 125
51534: PUSH
51535: LD_INT 0
51537: ST_TO_ADDR
// sFlag := false ;
51538: LD_ADDR_EXP 126
51542: PUSH
51543: LD_INT 0
51545: ST_TO_ADDR
// sKamikadze := false ;
51546: LD_ADDR_EXP 134
51550: PUSH
51551: LD_INT 0
51553: ST_TO_ADDR
// sTroll := false ;
51554: LD_ADDR_EXP 135
51558: PUSH
51559: LD_INT 0
51561: ST_TO_ADDR
// sSlow := false ;
51562: LD_ADDR_EXP 136
51566: PUSH
51567: LD_INT 0
51569: ST_TO_ADDR
// sLack := false ;
51570: LD_ADDR_EXP 137
51574: PUSH
51575: LD_INT 0
51577: ST_TO_ADDR
// sTank := false ;
51578: LD_ADDR_EXP 139
51582: PUSH
51583: LD_INT 0
51585: ST_TO_ADDR
// sRemote := false ;
51586: LD_ADDR_EXP 140
51590: PUSH
51591: LD_INT 0
51593: ST_TO_ADDR
// sPowell := false ;
51594: LD_ADDR_EXP 141
51598: PUSH
51599: LD_INT 0
51601: ST_TO_ADDR
// sTeleport := false ;
51602: LD_ADDR_EXP 144
51606: PUSH
51607: LD_INT 0
51609: ST_TO_ADDR
// sOilTower := false ;
51610: LD_ADDR_EXP 146
51614: PUSH
51615: LD_INT 0
51617: ST_TO_ADDR
// sShovel := false ;
51618: LD_ADDR_EXP 147
51622: PUSH
51623: LD_INT 0
51625: ST_TO_ADDR
// sSheik := false ;
51626: LD_ADDR_EXP 148
51630: PUSH
51631: LD_INT 0
51633: ST_TO_ADDR
// sEarthquake := false ;
51634: LD_ADDR_EXP 150
51638: PUSH
51639: LD_INT 0
51641: ST_TO_ADDR
// sAI := false ;
51642: LD_ADDR_EXP 151
51646: PUSH
51647: LD_INT 0
51649: ST_TO_ADDR
// sCargo := false ;
51650: LD_ADDR_EXP 154
51654: PUSH
51655: LD_INT 0
51657: ST_TO_ADDR
// sDLaser := false ;
51658: LD_ADDR_EXP 155
51662: PUSH
51663: LD_INT 0
51665: ST_TO_ADDR
// sExchange := false ;
51666: LD_ADDR_EXP 156
51670: PUSH
51671: LD_INT 0
51673: ST_TO_ADDR
// sFac := false ;
51674: LD_ADDR_EXP 157
51678: PUSH
51679: LD_INT 0
51681: ST_TO_ADDR
// sPower := false ;
51682: LD_ADDR_EXP 158
51686: PUSH
51687: LD_INT 0
51689: ST_TO_ADDR
// sRandom := false ;
51690: LD_ADDR_EXP 159
51694: PUSH
51695: LD_INT 0
51697: ST_TO_ADDR
// sShield := false ;
51698: LD_ADDR_EXP 160
51702: PUSH
51703: LD_INT 0
51705: ST_TO_ADDR
// sTime := false ;
51706: LD_ADDR_EXP 161
51710: PUSH
51711: LD_INT 0
51713: ST_TO_ADDR
// sTools := false ;
51714: LD_ADDR_EXP 162
51718: PUSH
51719: LD_INT 0
51721: ST_TO_ADDR
// sSold := false ;
51722: LD_ADDR_EXP 127
51726: PUSH
51727: LD_INT 0
51729: ST_TO_ADDR
// sDiff := false ;
51730: LD_ADDR_EXP 128
51734: PUSH
51735: LD_INT 0
51737: ST_TO_ADDR
// sFog := false ;
51738: LD_ADDR_EXP 131
51742: PUSH
51743: LD_INT 0
51745: ST_TO_ADDR
// sReset := false ;
51746: LD_ADDR_EXP 132
51750: PUSH
51751: LD_INT 0
51753: ST_TO_ADDR
// sSun := false ;
51754: LD_ADDR_EXP 133
51758: PUSH
51759: LD_INT 0
51761: ST_TO_ADDR
// sTiger := false ;
51762: LD_ADDR_EXP 129
51766: PUSH
51767: LD_INT 0
51769: ST_TO_ADDR
// sBomb := false ;
51770: LD_ADDR_EXP 130
51774: PUSH
51775: LD_INT 0
51777: ST_TO_ADDR
// sWound := false ;
51778: LD_ADDR_EXP 138
51782: PUSH
51783: LD_INT 0
51785: ST_TO_ADDR
// sBetray := false ;
51786: LD_ADDR_EXP 142
51790: PUSH
51791: LD_INT 0
51793: ST_TO_ADDR
// sContamin := false ;
51794: LD_ADDR_EXP 143
51798: PUSH
51799: LD_INT 0
51801: ST_TO_ADDR
// sOil := false ;
51802: LD_ADDR_EXP 145
51806: PUSH
51807: LD_INT 0
51809: ST_TO_ADDR
// sStu := false ;
51810: LD_ADDR_EXP 149
51814: PUSH
51815: LD_INT 0
51817: ST_TO_ADDR
// sBazooka := false ;
51818: LD_ADDR_EXP 152
51822: PUSH
51823: LD_INT 0
51825: ST_TO_ADDR
// sMortar := false ;
51826: LD_ADDR_EXP 153
51830: PUSH
51831: LD_INT 0
51833: ST_TO_ADDR
// sRanger := false ;
51834: LD_ADDR_EXP 163
51838: PUSH
51839: LD_INT 0
51841: ST_TO_ADDR
// sComputer := false ;
51842: LD_ADDR_EXP 164
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// s30 := false ;
51850: LD_ADDR_EXP 165
51854: PUSH
51855: LD_INT 0
51857: ST_TO_ADDR
// s60 := false ;
51858: LD_ADDR_EXP 166
51862: PUSH
51863: LD_INT 0
51865: ST_TO_ADDR
// end ;
51866: LD_VAR 0 1
51870: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51871: LD_INT 0
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
// result := [ ] ;
51880: LD_ADDR_VAR 0 2
51884: PUSH
51885: EMPTY
51886: ST_TO_ADDR
// if campaign_id = 1 then
51887: LD_OWVAR 69
51891: PUSH
51892: LD_INT 1
51894: EQUAL
51895: IFFALSE 55061
// begin case mission_number of 1 :
51897: LD_OWVAR 70
51901: PUSH
51902: LD_INT 1
51904: DOUBLE
51905: EQUAL
51906: IFTRUE 51910
51908: GO 51986
51910: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51911: LD_ADDR_VAR 0 2
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 11
51924: PUSH
51925: LD_INT 12
51927: PUSH
51928: LD_INT 15
51930: PUSH
51931: LD_INT 16
51933: PUSH
51934: LD_INT 22
51936: PUSH
51937: LD_INT 23
51939: PUSH
51940: LD_INT 26
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 101
51956: PUSH
51957: LD_INT 102
51959: PUSH
51960: LD_INT 106
51962: PUSH
51963: LD_INT 116
51965: PUSH
51966: LD_INT 117
51968: PUSH
51969: LD_INT 118
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: ST_TO_ADDR
51984: GO 55059
51986: LD_INT 2
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 51994
51992: GO 52078
51994: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51995: LD_ADDR_VAR 0 2
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 4
52005: PUSH
52006: LD_INT 11
52008: PUSH
52009: LD_INT 12
52011: PUSH
52012: LD_INT 15
52014: PUSH
52015: LD_INT 16
52017: PUSH
52018: LD_INT 22
52020: PUSH
52021: LD_INT 23
52023: PUSH
52024: LD_INT 26
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 101
52040: PUSH
52041: LD_INT 102
52043: PUSH
52044: LD_INT 105
52046: PUSH
52047: LD_INT 106
52049: PUSH
52050: LD_INT 108
52052: PUSH
52053: LD_INT 116
52055: PUSH
52056: LD_INT 117
52058: PUSH
52059: LD_INT 118
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: ST_TO_ADDR
52076: GO 55059
52078: LD_INT 3
52080: DOUBLE
52081: EQUAL
52082: IFTRUE 52086
52084: GO 52174
52086: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52087: LD_ADDR_VAR 0 2
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: LD_INT 5
52100: PUSH
52101: LD_INT 11
52103: PUSH
52104: LD_INT 12
52106: PUSH
52107: LD_INT 15
52109: PUSH
52110: LD_INT 16
52112: PUSH
52113: LD_INT 22
52115: PUSH
52116: LD_INT 26
52118: PUSH
52119: LD_INT 36
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 101
52136: PUSH
52137: LD_INT 102
52139: PUSH
52140: LD_INT 105
52142: PUSH
52143: LD_INT 106
52145: PUSH
52146: LD_INT 108
52148: PUSH
52149: LD_INT 116
52151: PUSH
52152: LD_INT 117
52154: PUSH
52155: LD_INT 118
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: ST_TO_ADDR
52172: GO 55059
52174: LD_INT 4
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 52278
52182: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52183: LD_ADDR_VAR 0 2
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: LD_INT 5
52196: PUSH
52197: LD_INT 8
52199: PUSH
52200: LD_INT 11
52202: PUSH
52203: LD_INT 12
52205: PUSH
52206: LD_INT 15
52208: PUSH
52209: LD_INT 16
52211: PUSH
52212: LD_INT 22
52214: PUSH
52215: LD_INT 23
52217: PUSH
52218: LD_INT 26
52220: PUSH
52221: LD_INT 36
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 101
52240: PUSH
52241: LD_INT 102
52243: PUSH
52244: LD_INT 105
52246: PUSH
52247: LD_INT 106
52249: PUSH
52250: LD_INT 108
52252: PUSH
52253: LD_INT 116
52255: PUSH
52256: LD_INT 117
52258: PUSH
52259: LD_INT 118
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: ST_TO_ADDR
52276: GO 55059
52278: LD_INT 5
52280: DOUBLE
52281: EQUAL
52282: IFTRUE 52286
52284: GO 52398
52286: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52287: LD_ADDR_VAR 0 2
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: LD_INT 5
52300: PUSH
52301: LD_INT 6
52303: PUSH
52304: LD_INT 8
52306: PUSH
52307: LD_INT 11
52309: PUSH
52310: LD_INT 12
52312: PUSH
52313: LD_INT 15
52315: PUSH
52316: LD_INT 16
52318: PUSH
52319: LD_INT 22
52321: PUSH
52322: LD_INT 23
52324: PUSH
52325: LD_INT 25
52327: PUSH
52328: LD_INT 26
52330: PUSH
52331: LD_INT 36
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 101
52352: PUSH
52353: LD_INT 102
52355: PUSH
52356: LD_INT 105
52358: PUSH
52359: LD_INT 106
52361: PUSH
52362: LD_INT 108
52364: PUSH
52365: LD_INT 109
52367: PUSH
52368: LD_INT 112
52370: PUSH
52371: LD_INT 116
52373: PUSH
52374: LD_INT 117
52376: PUSH
52377: LD_INT 118
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: ST_TO_ADDR
52396: GO 55059
52398: LD_INT 6
52400: DOUBLE
52401: EQUAL
52402: IFTRUE 52406
52404: GO 52538
52406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52407: LD_ADDR_VAR 0 2
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 4
52417: PUSH
52418: LD_INT 5
52420: PUSH
52421: LD_INT 6
52423: PUSH
52424: LD_INT 8
52426: PUSH
52427: LD_INT 11
52429: PUSH
52430: LD_INT 12
52432: PUSH
52433: LD_INT 15
52435: PUSH
52436: LD_INT 16
52438: PUSH
52439: LD_INT 20
52441: PUSH
52442: LD_INT 21
52444: PUSH
52445: LD_INT 22
52447: PUSH
52448: LD_INT 23
52450: PUSH
52451: LD_INT 25
52453: PUSH
52454: LD_INT 26
52456: PUSH
52457: LD_INT 30
52459: PUSH
52460: LD_INT 31
52462: PUSH
52463: LD_INT 32
52465: PUSH
52466: LD_INT 36
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 101
52492: PUSH
52493: LD_INT 102
52495: PUSH
52496: LD_INT 105
52498: PUSH
52499: LD_INT 106
52501: PUSH
52502: LD_INT 108
52504: PUSH
52505: LD_INT 109
52507: PUSH
52508: LD_INT 112
52510: PUSH
52511: LD_INT 116
52513: PUSH
52514: LD_INT 117
52516: PUSH
52517: LD_INT 118
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: ST_TO_ADDR
52536: GO 55059
52538: LD_INT 7
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52546
52544: GO 52658
52546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52547: LD_ADDR_VAR 0 2
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: LD_INT 5
52560: PUSH
52561: LD_INT 7
52563: PUSH
52564: LD_INT 11
52566: PUSH
52567: LD_INT 12
52569: PUSH
52570: LD_INT 15
52572: PUSH
52573: LD_INT 16
52575: PUSH
52576: LD_INT 20
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 22
52584: PUSH
52585: LD_INT 23
52587: PUSH
52588: LD_INT 25
52590: PUSH
52591: LD_INT 26
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 101
52612: PUSH
52613: LD_INT 102
52615: PUSH
52616: LD_INT 103
52618: PUSH
52619: LD_INT 105
52621: PUSH
52622: LD_INT 106
52624: PUSH
52625: LD_INT 108
52627: PUSH
52628: LD_INT 112
52630: PUSH
52631: LD_INT 116
52633: PUSH
52634: LD_INT 117
52636: PUSH
52637: LD_INT 118
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: ST_TO_ADDR
52656: GO 55059
52658: LD_INT 8
52660: DOUBLE
52661: EQUAL
52662: IFTRUE 52666
52664: GO 52806
52666: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52667: LD_ADDR_VAR 0 2
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 4
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: LD_INT 6
52683: PUSH
52684: LD_INT 7
52686: PUSH
52687: LD_INT 8
52689: PUSH
52690: LD_INT 11
52692: PUSH
52693: LD_INT 12
52695: PUSH
52696: LD_INT 15
52698: PUSH
52699: LD_INT 16
52701: PUSH
52702: LD_INT 20
52704: PUSH
52705: LD_INT 21
52707: PUSH
52708: LD_INT 22
52710: PUSH
52711: LD_INT 23
52713: PUSH
52714: LD_INT 25
52716: PUSH
52717: LD_INT 26
52719: PUSH
52720: LD_INT 30
52722: PUSH
52723: LD_INT 31
52725: PUSH
52726: LD_INT 32
52728: PUSH
52729: LD_INT 36
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 101
52756: PUSH
52757: LD_INT 102
52759: PUSH
52760: LD_INT 103
52762: PUSH
52763: LD_INT 105
52765: PUSH
52766: LD_INT 106
52768: PUSH
52769: LD_INT 108
52771: PUSH
52772: LD_INT 109
52774: PUSH
52775: LD_INT 112
52777: PUSH
52778: LD_INT 116
52780: PUSH
52781: LD_INT 117
52783: PUSH
52784: LD_INT 118
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: ST_TO_ADDR
52804: GO 55059
52806: LD_INT 9
52808: DOUBLE
52809: EQUAL
52810: IFTRUE 52814
52812: GO 52962
52814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52815: LD_ADDR_VAR 0 2
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: LD_INT 6
52831: PUSH
52832: LD_INT 7
52834: PUSH
52835: LD_INT 8
52837: PUSH
52838: LD_INT 11
52840: PUSH
52841: LD_INT 12
52843: PUSH
52844: LD_INT 15
52846: PUSH
52847: LD_INT 16
52849: PUSH
52850: LD_INT 20
52852: PUSH
52853: LD_INT 21
52855: PUSH
52856: LD_INT 22
52858: PUSH
52859: LD_INT 23
52861: PUSH
52862: LD_INT 25
52864: PUSH
52865: LD_INT 26
52867: PUSH
52868: LD_INT 28
52870: PUSH
52871: LD_INT 30
52873: PUSH
52874: LD_INT 31
52876: PUSH
52877: LD_INT 32
52879: PUSH
52880: LD_INT 36
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 101
52908: PUSH
52909: LD_INT 102
52911: PUSH
52912: LD_INT 103
52914: PUSH
52915: LD_INT 105
52917: PUSH
52918: LD_INT 106
52920: PUSH
52921: LD_INT 108
52923: PUSH
52924: LD_INT 109
52926: PUSH
52927: LD_INT 112
52929: PUSH
52930: LD_INT 114
52932: PUSH
52933: LD_INT 116
52935: PUSH
52936: LD_INT 117
52938: PUSH
52939: LD_INT 118
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: ST_TO_ADDR
52960: GO 55059
52962: LD_INT 10
52964: DOUBLE
52965: EQUAL
52966: IFTRUE 52970
52968: GO 53166
52970: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52971: LD_ADDR_VAR 0 2
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: LD_INT 5
52984: PUSH
52985: LD_INT 6
52987: PUSH
52988: LD_INT 7
52990: PUSH
52991: LD_INT 8
52993: PUSH
52994: LD_INT 9
52996: PUSH
52997: LD_INT 10
52999: PUSH
53000: LD_INT 11
53002: PUSH
53003: LD_INT 12
53005: PUSH
53006: LD_INT 13
53008: PUSH
53009: LD_INT 14
53011: PUSH
53012: LD_INT 15
53014: PUSH
53015: LD_INT 16
53017: PUSH
53018: LD_INT 17
53020: PUSH
53021: LD_INT 18
53023: PUSH
53024: LD_INT 19
53026: PUSH
53027: LD_INT 20
53029: PUSH
53030: LD_INT 21
53032: PUSH
53033: LD_INT 22
53035: PUSH
53036: LD_INT 23
53038: PUSH
53039: LD_INT 24
53041: PUSH
53042: LD_INT 25
53044: PUSH
53045: LD_INT 26
53047: PUSH
53048: LD_INT 28
53050: PUSH
53051: LD_INT 30
53053: PUSH
53054: LD_INT 31
53056: PUSH
53057: LD_INT 32
53059: PUSH
53060: LD_INT 36
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 101
53096: PUSH
53097: LD_INT 102
53099: PUSH
53100: LD_INT 103
53102: PUSH
53103: LD_INT 104
53105: PUSH
53106: LD_INT 105
53108: PUSH
53109: LD_INT 106
53111: PUSH
53112: LD_INT 107
53114: PUSH
53115: LD_INT 108
53117: PUSH
53118: LD_INT 109
53120: PUSH
53121: LD_INT 110
53123: PUSH
53124: LD_INT 111
53126: PUSH
53127: LD_INT 112
53129: PUSH
53130: LD_INT 114
53132: PUSH
53133: LD_INT 116
53135: PUSH
53136: LD_INT 117
53138: PUSH
53139: LD_INT 118
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: ST_TO_ADDR
53164: GO 55059
53166: LD_INT 11
53168: DOUBLE
53169: EQUAL
53170: IFTRUE 53174
53172: GO 53378
53174: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53175: LD_ADDR_VAR 0 2
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: LD_INT 4
53188: PUSH
53189: LD_INT 5
53191: PUSH
53192: LD_INT 6
53194: PUSH
53195: LD_INT 7
53197: PUSH
53198: LD_INT 8
53200: PUSH
53201: LD_INT 9
53203: PUSH
53204: LD_INT 10
53206: PUSH
53207: LD_INT 11
53209: PUSH
53210: LD_INT 12
53212: PUSH
53213: LD_INT 13
53215: PUSH
53216: LD_INT 14
53218: PUSH
53219: LD_INT 15
53221: PUSH
53222: LD_INT 16
53224: PUSH
53225: LD_INT 17
53227: PUSH
53228: LD_INT 18
53230: PUSH
53231: LD_INT 19
53233: PUSH
53234: LD_INT 20
53236: PUSH
53237: LD_INT 21
53239: PUSH
53240: LD_INT 22
53242: PUSH
53243: LD_INT 23
53245: PUSH
53246: LD_INT 24
53248: PUSH
53249: LD_INT 25
53251: PUSH
53252: LD_INT 26
53254: PUSH
53255: LD_INT 28
53257: PUSH
53258: LD_INT 30
53260: PUSH
53261: LD_INT 31
53263: PUSH
53264: LD_INT 32
53266: PUSH
53267: LD_INT 34
53269: PUSH
53270: LD_INT 36
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 101
53308: PUSH
53309: LD_INT 102
53311: PUSH
53312: LD_INT 103
53314: PUSH
53315: LD_INT 104
53317: PUSH
53318: LD_INT 105
53320: PUSH
53321: LD_INT 106
53323: PUSH
53324: LD_INT 107
53326: PUSH
53327: LD_INT 108
53329: PUSH
53330: LD_INT 109
53332: PUSH
53333: LD_INT 110
53335: PUSH
53336: LD_INT 111
53338: PUSH
53339: LD_INT 112
53341: PUSH
53342: LD_INT 114
53344: PUSH
53345: LD_INT 116
53347: PUSH
53348: LD_INT 117
53350: PUSH
53351: LD_INT 118
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: ST_TO_ADDR
53376: GO 55059
53378: LD_INT 12
53380: DOUBLE
53381: EQUAL
53382: IFTRUE 53386
53384: GO 53606
53386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53387: LD_ADDR_VAR 0 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 4
53403: PUSH
53404: LD_INT 5
53406: PUSH
53407: LD_INT 6
53409: PUSH
53410: LD_INT 7
53412: PUSH
53413: LD_INT 8
53415: PUSH
53416: LD_INT 9
53418: PUSH
53419: LD_INT 10
53421: PUSH
53422: LD_INT 11
53424: PUSH
53425: LD_INT 12
53427: PUSH
53428: LD_INT 13
53430: PUSH
53431: LD_INT 14
53433: PUSH
53434: LD_INT 15
53436: PUSH
53437: LD_INT 16
53439: PUSH
53440: LD_INT 17
53442: PUSH
53443: LD_INT 18
53445: PUSH
53446: LD_INT 19
53448: PUSH
53449: LD_INT 20
53451: PUSH
53452: LD_INT 21
53454: PUSH
53455: LD_INT 22
53457: PUSH
53458: LD_INT 23
53460: PUSH
53461: LD_INT 24
53463: PUSH
53464: LD_INT 25
53466: PUSH
53467: LD_INT 26
53469: PUSH
53470: LD_INT 27
53472: PUSH
53473: LD_INT 28
53475: PUSH
53476: LD_INT 30
53478: PUSH
53479: LD_INT 31
53481: PUSH
53482: LD_INT 32
53484: PUSH
53485: LD_INT 33
53487: PUSH
53488: LD_INT 34
53490: PUSH
53491: LD_INT 36
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 101
53532: PUSH
53533: LD_INT 102
53535: PUSH
53536: LD_INT 103
53538: PUSH
53539: LD_INT 104
53541: PUSH
53542: LD_INT 105
53544: PUSH
53545: LD_INT 106
53547: PUSH
53548: LD_INT 107
53550: PUSH
53551: LD_INT 108
53553: PUSH
53554: LD_INT 109
53556: PUSH
53557: LD_INT 110
53559: PUSH
53560: LD_INT 111
53562: PUSH
53563: LD_INT 112
53565: PUSH
53566: LD_INT 113
53568: PUSH
53569: LD_INT 114
53571: PUSH
53572: LD_INT 116
53574: PUSH
53575: LD_INT 117
53577: PUSH
53578: LD_INT 118
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: ST_TO_ADDR
53604: GO 55059
53606: LD_INT 13
53608: DOUBLE
53609: EQUAL
53610: IFTRUE 53614
53612: GO 53822
53614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53615: LD_ADDR_VAR 0 2
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: LD_INT 4
53631: PUSH
53632: LD_INT 5
53634: PUSH
53635: LD_INT 8
53637: PUSH
53638: LD_INT 9
53640: PUSH
53641: LD_INT 10
53643: PUSH
53644: LD_INT 11
53646: PUSH
53647: LD_INT 12
53649: PUSH
53650: LD_INT 14
53652: PUSH
53653: LD_INT 15
53655: PUSH
53656: LD_INT 16
53658: PUSH
53659: LD_INT 17
53661: PUSH
53662: LD_INT 18
53664: PUSH
53665: LD_INT 19
53667: PUSH
53668: LD_INT 20
53670: PUSH
53671: LD_INT 21
53673: PUSH
53674: LD_INT 22
53676: PUSH
53677: LD_INT 23
53679: PUSH
53680: LD_INT 24
53682: PUSH
53683: LD_INT 25
53685: PUSH
53686: LD_INT 26
53688: PUSH
53689: LD_INT 27
53691: PUSH
53692: LD_INT 28
53694: PUSH
53695: LD_INT 30
53697: PUSH
53698: LD_INT 31
53700: PUSH
53701: LD_INT 32
53703: PUSH
53704: LD_INT 33
53706: PUSH
53707: LD_INT 34
53709: PUSH
53710: LD_INT 36
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 101
53748: PUSH
53749: LD_INT 102
53751: PUSH
53752: LD_INT 103
53754: PUSH
53755: LD_INT 104
53757: PUSH
53758: LD_INT 105
53760: PUSH
53761: LD_INT 106
53763: PUSH
53764: LD_INT 107
53766: PUSH
53767: LD_INT 108
53769: PUSH
53770: LD_INT 109
53772: PUSH
53773: LD_INT 110
53775: PUSH
53776: LD_INT 111
53778: PUSH
53779: LD_INT 112
53781: PUSH
53782: LD_INT 113
53784: PUSH
53785: LD_INT 114
53787: PUSH
53788: LD_INT 116
53790: PUSH
53791: LD_INT 117
53793: PUSH
53794: LD_INT 118
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: ST_TO_ADDR
53820: GO 55059
53822: LD_INT 14
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53830
53828: GO 54054
53830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53831: LD_ADDR_VAR 0 2
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: LD_INT 5
53850: PUSH
53851: LD_INT 6
53853: PUSH
53854: LD_INT 7
53856: PUSH
53857: LD_INT 8
53859: PUSH
53860: LD_INT 9
53862: PUSH
53863: LD_INT 10
53865: PUSH
53866: LD_INT 11
53868: PUSH
53869: LD_INT 12
53871: PUSH
53872: LD_INT 13
53874: PUSH
53875: LD_INT 14
53877: PUSH
53878: LD_INT 15
53880: PUSH
53881: LD_INT 16
53883: PUSH
53884: LD_INT 17
53886: PUSH
53887: LD_INT 18
53889: PUSH
53890: LD_INT 19
53892: PUSH
53893: LD_INT 20
53895: PUSH
53896: LD_INT 21
53898: PUSH
53899: LD_INT 22
53901: PUSH
53902: LD_INT 23
53904: PUSH
53905: LD_INT 24
53907: PUSH
53908: LD_INT 25
53910: PUSH
53911: LD_INT 26
53913: PUSH
53914: LD_INT 27
53916: PUSH
53917: LD_INT 28
53919: PUSH
53920: LD_INT 29
53922: PUSH
53923: LD_INT 30
53925: PUSH
53926: LD_INT 31
53928: PUSH
53929: LD_INT 32
53931: PUSH
53932: LD_INT 33
53934: PUSH
53935: LD_INT 34
53937: PUSH
53938: LD_INT 36
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 101
53980: PUSH
53981: LD_INT 102
53983: PUSH
53984: LD_INT 103
53986: PUSH
53987: LD_INT 104
53989: PUSH
53990: LD_INT 105
53992: PUSH
53993: LD_INT 106
53995: PUSH
53996: LD_INT 107
53998: PUSH
53999: LD_INT 108
54001: PUSH
54002: LD_INT 109
54004: PUSH
54005: LD_INT 110
54007: PUSH
54008: LD_INT 111
54010: PUSH
54011: LD_INT 112
54013: PUSH
54014: LD_INT 113
54016: PUSH
54017: LD_INT 114
54019: PUSH
54020: LD_INT 116
54022: PUSH
54023: LD_INT 117
54025: PUSH
54026: LD_INT 118
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: ST_TO_ADDR
54052: GO 55059
54054: LD_INT 15
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54062
54060: GO 54286
54062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54063: LD_ADDR_VAR 0 2
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 4
54079: PUSH
54080: LD_INT 5
54082: PUSH
54083: LD_INT 6
54085: PUSH
54086: LD_INT 7
54088: PUSH
54089: LD_INT 8
54091: PUSH
54092: LD_INT 9
54094: PUSH
54095: LD_INT 10
54097: PUSH
54098: LD_INT 11
54100: PUSH
54101: LD_INT 12
54103: PUSH
54104: LD_INT 13
54106: PUSH
54107: LD_INT 14
54109: PUSH
54110: LD_INT 15
54112: PUSH
54113: LD_INT 16
54115: PUSH
54116: LD_INT 17
54118: PUSH
54119: LD_INT 18
54121: PUSH
54122: LD_INT 19
54124: PUSH
54125: LD_INT 20
54127: PUSH
54128: LD_INT 21
54130: PUSH
54131: LD_INT 22
54133: PUSH
54134: LD_INT 23
54136: PUSH
54137: LD_INT 24
54139: PUSH
54140: LD_INT 25
54142: PUSH
54143: LD_INT 26
54145: PUSH
54146: LD_INT 27
54148: PUSH
54149: LD_INT 28
54151: PUSH
54152: LD_INT 29
54154: PUSH
54155: LD_INT 30
54157: PUSH
54158: LD_INT 31
54160: PUSH
54161: LD_INT 32
54163: PUSH
54164: LD_INT 33
54166: PUSH
54167: LD_INT 34
54169: PUSH
54170: LD_INT 36
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 101
54212: PUSH
54213: LD_INT 102
54215: PUSH
54216: LD_INT 103
54218: PUSH
54219: LD_INT 104
54221: PUSH
54222: LD_INT 105
54224: PUSH
54225: LD_INT 106
54227: PUSH
54228: LD_INT 107
54230: PUSH
54231: LD_INT 108
54233: PUSH
54234: LD_INT 109
54236: PUSH
54237: LD_INT 110
54239: PUSH
54240: LD_INT 111
54242: PUSH
54243: LD_INT 112
54245: PUSH
54246: LD_INT 113
54248: PUSH
54249: LD_INT 114
54251: PUSH
54252: LD_INT 116
54254: PUSH
54255: LD_INT 117
54257: PUSH
54258: LD_INT 118
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: ST_TO_ADDR
54284: GO 55059
54286: LD_INT 16
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54294
54292: GO 54430
54294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54295: LD_ADDR_VAR 0 2
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 4
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: LD_INT 7
54311: PUSH
54312: LD_INT 11
54314: PUSH
54315: LD_INT 12
54317: PUSH
54318: LD_INT 15
54320: PUSH
54321: LD_INT 16
54323: PUSH
54324: LD_INT 20
54326: PUSH
54327: LD_INT 21
54329: PUSH
54330: LD_INT 22
54332: PUSH
54333: LD_INT 23
54335: PUSH
54336: LD_INT 25
54338: PUSH
54339: LD_INT 26
54341: PUSH
54342: LD_INT 30
54344: PUSH
54345: LD_INT 31
54347: PUSH
54348: LD_INT 32
54350: PUSH
54351: LD_INT 33
54353: PUSH
54354: LD_INT 34
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 101
54380: PUSH
54381: LD_INT 102
54383: PUSH
54384: LD_INT 103
54386: PUSH
54387: LD_INT 106
54389: PUSH
54390: LD_INT 108
54392: PUSH
54393: LD_INT 112
54395: PUSH
54396: LD_INT 113
54398: PUSH
54399: LD_INT 114
54401: PUSH
54402: LD_INT 116
54404: PUSH
54405: LD_INT 117
54407: PUSH
54408: LD_INT 118
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: ST_TO_ADDR
54428: GO 55059
54430: LD_INT 17
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54438
54436: GO 54662
54438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54439: LD_ADDR_VAR 0 2
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: LD_INT 6
54461: PUSH
54462: LD_INT 7
54464: PUSH
54465: LD_INT 8
54467: PUSH
54468: LD_INT 9
54470: PUSH
54471: LD_INT 10
54473: PUSH
54474: LD_INT 11
54476: PUSH
54477: LD_INT 12
54479: PUSH
54480: LD_INT 13
54482: PUSH
54483: LD_INT 14
54485: PUSH
54486: LD_INT 15
54488: PUSH
54489: LD_INT 16
54491: PUSH
54492: LD_INT 17
54494: PUSH
54495: LD_INT 18
54497: PUSH
54498: LD_INT 19
54500: PUSH
54501: LD_INT 20
54503: PUSH
54504: LD_INT 21
54506: PUSH
54507: LD_INT 22
54509: PUSH
54510: LD_INT 23
54512: PUSH
54513: LD_INT 24
54515: PUSH
54516: LD_INT 25
54518: PUSH
54519: LD_INT 26
54521: PUSH
54522: LD_INT 27
54524: PUSH
54525: LD_INT 28
54527: PUSH
54528: LD_INT 29
54530: PUSH
54531: LD_INT 30
54533: PUSH
54534: LD_INT 31
54536: PUSH
54537: LD_INT 32
54539: PUSH
54540: LD_INT 33
54542: PUSH
54543: LD_INT 34
54545: PUSH
54546: LD_INT 36
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 101
54588: PUSH
54589: LD_INT 102
54591: PUSH
54592: LD_INT 103
54594: PUSH
54595: LD_INT 104
54597: PUSH
54598: LD_INT 105
54600: PUSH
54601: LD_INT 106
54603: PUSH
54604: LD_INT 107
54606: PUSH
54607: LD_INT 108
54609: PUSH
54610: LD_INT 109
54612: PUSH
54613: LD_INT 110
54615: PUSH
54616: LD_INT 111
54618: PUSH
54619: LD_INT 112
54621: PUSH
54622: LD_INT 113
54624: PUSH
54625: LD_INT 114
54627: PUSH
54628: LD_INT 116
54630: PUSH
54631: LD_INT 117
54633: PUSH
54634: LD_INT 118
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: ST_TO_ADDR
54660: GO 55059
54662: LD_INT 18
54664: DOUBLE
54665: EQUAL
54666: IFTRUE 54670
54668: GO 54818
54670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54671: LD_ADDR_VAR 0 2
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: LD_INT 5
54684: PUSH
54685: LD_INT 7
54687: PUSH
54688: LD_INT 11
54690: PUSH
54691: LD_INT 12
54693: PUSH
54694: LD_INT 15
54696: PUSH
54697: LD_INT 16
54699: PUSH
54700: LD_INT 20
54702: PUSH
54703: LD_INT 21
54705: PUSH
54706: LD_INT 22
54708: PUSH
54709: LD_INT 23
54711: PUSH
54712: LD_INT 25
54714: PUSH
54715: LD_INT 26
54717: PUSH
54718: LD_INT 30
54720: PUSH
54721: LD_INT 31
54723: PUSH
54724: LD_INT 32
54726: PUSH
54727: LD_INT 33
54729: PUSH
54730: LD_INT 34
54732: PUSH
54733: LD_INT 35
54735: PUSH
54736: LD_INT 36
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 101
54764: PUSH
54765: LD_INT 102
54767: PUSH
54768: LD_INT 103
54770: PUSH
54771: LD_INT 106
54773: PUSH
54774: LD_INT 108
54776: PUSH
54777: LD_INT 112
54779: PUSH
54780: LD_INT 113
54782: PUSH
54783: LD_INT 114
54785: PUSH
54786: LD_INT 115
54788: PUSH
54789: LD_INT 116
54791: PUSH
54792: LD_INT 117
54794: PUSH
54795: LD_INT 118
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: ST_TO_ADDR
54816: GO 55059
54818: LD_INT 19
54820: DOUBLE
54821: EQUAL
54822: IFTRUE 54826
54824: GO 55058
54826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54827: LD_ADDR_VAR 0 2
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: LD_INT 6
54849: PUSH
54850: LD_INT 7
54852: PUSH
54853: LD_INT 8
54855: PUSH
54856: LD_INT 9
54858: PUSH
54859: LD_INT 10
54861: PUSH
54862: LD_INT 11
54864: PUSH
54865: LD_INT 12
54867: PUSH
54868: LD_INT 13
54870: PUSH
54871: LD_INT 14
54873: PUSH
54874: LD_INT 15
54876: PUSH
54877: LD_INT 16
54879: PUSH
54880: LD_INT 17
54882: PUSH
54883: LD_INT 18
54885: PUSH
54886: LD_INT 19
54888: PUSH
54889: LD_INT 20
54891: PUSH
54892: LD_INT 21
54894: PUSH
54895: LD_INT 22
54897: PUSH
54898: LD_INT 23
54900: PUSH
54901: LD_INT 24
54903: PUSH
54904: LD_INT 25
54906: PUSH
54907: LD_INT 26
54909: PUSH
54910: LD_INT 27
54912: PUSH
54913: LD_INT 28
54915: PUSH
54916: LD_INT 29
54918: PUSH
54919: LD_INT 30
54921: PUSH
54922: LD_INT 31
54924: PUSH
54925: LD_INT 32
54927: PUSH
54928: LD_INT 33
54930: PUSH
54931: LD_INT 34
54933: PUSH
54934: LD_INT 35
54936: PUSH
54937: LD_INT 36
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 101
54980: PUSH
54981: LD_INT 102
54983: PUSH
54984: LD_INT 103
54986: PUSH
54987: LD_INT 104
54989: PUSH
54990: LD_INT 105
54992: PUSH
54993: LD_INT 106
54995: PUSH
54996: LD_INT 107
54998: PUSH
54999: LD_INT 108
55001: PUSH
55002: LD_INT 109
55004: PUSH
55005: LD_INT 110
55007: PUSH
55008: LD_INT 111
55010: PUSH
55011: LD_INT 112
55013: PUSH
55014: LD_INT 113
55016: PUSH
55017: LD_INT 114
55019: PUSH
55020: LD_INT 115
55022: PUSH
55023: LD_INT 116
55025: PUSH
55026: LD_INT 117
55028: PUSH
55029: LD_INT 118
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: ST_TO_ADDR
55056: GO 55059
55058: POP
// end else
55059: GO 55290
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55061: LD_ADDR_VAR 0 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: LD_INT 6
55083: PUSH
55084: LD_INT 7
55086: PUSH
55087: LD_INT 8
55089: PUSH
55090: LD_INT 9
55092: PUSH
55093: LD_INT 10
55095: PUSH
55096: LD_INT 11
55098: PUSH
55099: LD_INT 12
55101: PUSH
55102: LD_INT 13
55104: PUSH
55105: LD_INT 14
55107: PUSH
55108: LD_INT 15
55110: PUSH
55111: LD_INT 16
55113: PUSH
55114: LD_INT 17
55116: PUSH
55117: LD_INT 18
55119: PUSH
55120: LD_INT 19
55122: PUSH
55123: LD_INT 20
55125: PUSH
55126: LD_INT 21
55128: PUSH
55129: LD_INT 22
55131: PUSH
55132: LD_INT 23
55134: PUSH
55135: LD_INT 24
55137: PUSH
55138: LD_INT 25
55140: PUSH
55141: LD_INT 26
55143: PUSH
55144: LD_INT 27
55146: PUSH
55147: LD_INT 28
55149: PUSH
55150: LD_INT 29
55152: PUSH
55153: LD_INT 30
55155: PUSH
55156: LD_INT 31
55158: PUSH
55159: LD_INT 32
55161: PUSH
55162: LD_INT 33
55164: PUSH
55165: LD_INT 34
55167: PUSH
55168: LD_INT 35
55170: PUSH
55171: LD_INT 36
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 101
55214: PUSH
55215: LD_INT 102
55217: PUSH
55218: LD_INT 103
55220: PUSH
55221: LD_INT 104
55223: PUSH
55224: LD_INT 105
55226: PUSH
55227: LD_INT 106
55229: PUSH
55230: LD_INT 107
55232: PUSH
55233: LD_INT 108
55235: PUSH
55236: LD_INT 109
55238: PUSH
55239: LD_INT 110
55241: PUSH
55242: LD_INT 111
55244: PUSH
55245: LD_INT 112
55247: PUSH
55248: LD_INT 113
55250: PUSH
55251: LD_INT 114
55253: PUSH
55254: LD_INT 115
55256: PUSH
55257: LD_INT 116
55259: PUSH
55260: LD_INT 117
55262: PUSH
55263: LD_INT 118
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: ST_TO_ADDR
// if result then
55290: LD_VAR 0 2
55294: IFFALSE 56080
// begin normal :=  ;
55296: LD_ADDR_VAR 0 5
55300: PUSH
55301: LD_STRING 
55303: ST_TO_ADDR
// hardcore :=  ;
55304: LD_ADDR_VAR 0 6
55308: PUSH
55309: LD_STRING 
55311: ST_TO_ADDR
// active :=  ;
55312: LD_ADDR_VAR 0 7
55316: PUSH
55317: LD_STRING 
55319: ST_TO_ADDR
// for i = 1 to normalCounter do
55320: LD_ADDR_VAR 0 8
55324: PUSH
55325: DOUBLE
55326: LD_INT 1
55328: DEC
55329: ST_TO_ADDR
55330: LD_EXP 111
55334: PUSH
55335: FOR_TO
55336: IFFALSE 55437
// begin tmp := 0 ;
55338: LD_ADDR_VAR 0 3
55342: PUSH
55343: LD_STRING 0
55345: ST_TO_ADDR
// if result [ 1 ] then
55346: LD_VAR 0 2
55350: PUSH
55351: LD_INT 1
55353: ARRAY
55354: IFFALSE 55419
// if result [ 1 ] [ 1 ] = i then
55356: LD_VAR 0 2
55360: PUSH
55361: LD_INT 1
55363: ARRAY
55364: PUSH
55365: LD_INT 1
55367: ARRAY
55368: PUSH
55369: LD_VAR 0 8
55373: EQUAL
55374: IFFALSE 55419
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55376: LD_ADDR_VAR 0 2
55380: PUSH
55381: LD_VAR 0 2
55385: PPUSH
55386: LD_INT 1
55388: PPUSH
55389: LD_VAR 0 2
55393: PUSH
55394: LD_INT 1
55396: ARRAY
55397: PPUSH
55398: LD_INT 1
55400: PPUSH
55401: CALL_OW 3
55405: PPUSH
55406: CALL_OW 1
55410: ST_TO_ADDR
// tmp := 1 ;
55411: LD_ADDR_VAR 0 3
55415: PUSH
55416: LD_STRING 1
55418: ST_TO_ADDR
// end ; normal := normal & tmp ;
55419: LD_ADDR_VAR 0 5
55423: PUSH
55424: LD_VAR 0 5
55428: PUSH
55429: LD_VAR 0 3
55433: STR
55434: ST_TO_ADDR
// end ;
55435: GO 55335
55437: POP
55438: POP
// for i = 1 to hardcoreCounter do
55439: LD_ADDR_VAR 0 8
55443: PUSH
55444: DOUBLE
55445: LD_INT 1
55447: DEC
55448: ST_TO_ADDR
55449: LD_EXP 112
55453: PUSH
55454: FOR_TO
55455: IFFALSE 55560
// begin tmp := 0 ;
55457: LD_ADDR_VAR 0 3
55461: PUSH
55462: LD_STRING 0
55464: ST_TO_ADDR
// if result [ 2 ] then
55465: LD_VAR 0 2
55469: PUSH
55470: LD_INT 2
55472: ARRAY
55473: IFFALSE 55542
// if result [ 2 ] [ 1 ] = 100 + i then
55475: LD_VAR 0 2
55479: PUSH
55480: LD_INT 2
55482: ARRAY
55483: PUSH
55484: LD_INT 1
55486: ARRAY
55487: PUSH
55488: LD_INT 100
55490: PUSH
55491: LD_VAR 0 8
55495: PLUS
55496: EQUAL
55497: IFFALSE 55542
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55499: LD_ADDR_VAR 0 2
55503: PUSH
55504: LD_VAR 0 2
55508: PPUSH
55509: LD_INT 2
55511: PPUSH
55512: LD_VAR 0 2
55516: PUSH
55517: LD_INT 2
55519: ARRAY
55520: PPUSH
55521: LD_INT 1
55523: PPUSH
55524: CALL_OW 3
55528: PPUSH
55529: CALL_OW 1
55533: ST_TO_ADDR
// tmp := 1 ;
55534: LD_ADDR_VAR 0 3
55538: PUSH
55539: LD_STRING 1
55541: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55542: LD_ADDR_VAR 0 6
55546: PUSH
55547: LD_VAR 0 6
55551: PUSH
55552: LD_VAR 0 3
55556: STR
55557: ST_TO_ADDR
// end ;
55558: GO 55454
55560: POP
55561: POP
// if isGameLoad then
55562: LD_VAR 0 1
55566: IFFALSE 56041
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55568: LD_ADDR_VAR 0 4
55572: PUSH
55573: LD_EXP 115
55577: PUSH
55578: LD_EXP 114
55582: PUSH
55583: LD_EXP 116
55587: PUSH
55588: LD_EXP 113
55592: PUSH
55593: LD_EXP 117
55597: PUSH
55598: LD_EXP 118
55602: PUSH
55603: LD_EXP 119
55607: PUSH
55608: LD_EXP 120
55612: PUSH
55613: LD_EXP 121
55617: PUSH
55618: LD_EXP 122
55622: PUSH
55623: LD_EXP 123
55627: PUSH
55628: LD_EXP 124
55632: PUSH
55633: LD_EXP 125
55637: PUSH
55638: LD_EXP 126
55642: PUSH
55643: LD_EXP 134
55647: PUSH
55648: LD_EXP 135
55652: PUSH
55653: LD_EXP 136
55657: PUSH
55658: LD_EXP 137
55662: PUSH
55663: LD_EXP 139
55667: PUSH
55668: LD_EXP 140
55672: PUSH
55673: LD_EXP 141
55677: PUSH
55678: LD_EXP 144
55682: PUSH
55683: LD_EXP 146
55687: PUSH
55688: LD_EXP 147
55692: PUSH
55693: LD_EXP 148
55697: PUSH
55698: LD_EXP 150
55702: PUSH
55703: LD_EXP 151
55707: PUSH
55708: LD_EXP 154
55712: PUSH
55713: LD_EXP 155
55717: PUSH
55718: LD_EXP 156
55722: PUSH
55723: LD_EXP 157
55727: PUSH
55728: LD_EXP 158
55732: PUSH
55733: LD_EXP 159
55737: PUSH
55738: LD_EXP 160
55742: PUSH
55743: LD_EXP 161
55747: PUSH
55748: LD_EXP 162
55752: PUSH
55753: LD_EXP 127
55757: PUSH
55758: LD_EXP 128
55762: PUSH
55763: LD_EXP 131
55767: PUSH
55768: LD_EXP 132
55772: PUSH
55773: LD_EXP 133
55777: PUSH
55778: LD_EXP 129
55782: PUSH
55783: LD_EXP 130
55787: PUSH
55788: LD_EXP 138
55792: PUSH
55793: LD_EXP 142
55797: PUSH
55798: LD_EXP 143
55802: PUSH
55803: LD_EXP 145
55807: PUSH
55808: LD_EXP 149
55812: PUSH
55813: LD_EXP 152
55817: PUSH
55818: LD_EXP 153
55822: PUSH
55823: LD_EXP 163
55827: PUSH
55828: LD_EXP 164
55832: PUSH
55833: LD_EXP 165
55837: PUSH
55838: LD_EXP 166
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// tmp :=  ;
55899: LD_ADDR_VAR 0 3
55903: PUSH
55904: LD_STRING 
55906: ST_TO_ADDR
// for i = 1 to normalCounter do
55907: LD_ADDR_VAR 0 8
55911: PUSH
55912: DOUBLE
55913: LD_INT 1
55915: DEC
55916: ST_TO_ADDR
55917: LD_EXP 111
55921: PUSH
55922: FOR_TO
55923: IFFALSE 55959
// begin if flags [ i ] then
55925: LD_VAR 0 4
55929: PUSH
55930: LD_VAR 0 8
55934: ARRAY
55935: IFFALSE 55957
// tmp := tmp & i & ; ;
55937: LD_ADDR_VAR 0 3
55941: PUSH
55942: LD_VAR 0 3
55946: PUSH
55947: LD_VAR 0 8
55951: STR
55952: PUSH
55953: LD_STRING ;
55955: STR
55956: ST_TO_ADDR
// end ;
55957: GO 55922
55959: POP
55960: POP
// for i = 1 to hardcoreCounter do
55961: LD_ADDR_VAR 0 8
55965: PUSH
55966: DOUBLE
55967: LD_INT 1
55969: DEC
55970: ST_TO_ADDR
55971: LD_EXP 112
55975: PUSH
55976: FOR_TO
55977: IFFALSE 56023
// begin if flags [ normalCounter + i ] then
55979: LD_VAR 0 4
55983: PUSH
55984: LD_EXP 111
55988: PUSH
55989: LD_VAR 0 8
55993: PLUS
55994: ARRAY
55995: IFFALSE 56021
// tmp := tmp & ( 100 + i ) & ; ;
55997: LD_ADDR_VAR 0 3
56001: PUSH
56002: LD_VAR 0 3
56006: PUSH
56007: LD_INT 100
56009: PUSH
56010: LD_VAR 0 8
56014: PLUS
56015: STR
56016: PUSH
56017: LD_STRING ;
56019: STR
56020: ST_TO_ADDR
// end ;
56021: GO 55976
56023: POP
56024: POP
// if tmp then
56025: LD_VAR 0 3
56029: IFFALSE 56041
// active := tmp ;
56031: LD_ADDR_VAR 0 7
56035: PUSH
56036: LD_VAR 0 3
56040: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56041: LD_STRING getStreamItemsFromMission("
56043: PUSH
56044: LD_VAR 0 5
56048: STR
56049: PUSH
56050: LD_STRING ","
56052: STR
56053: PUSH
56054: LD_VAR 0 6
56058: STR
56059: PUSH
56060: LD_STRING ","
56062: STR
56063: PUSH
56064: LD_VAR 0 7
56068: STR
56069: PUSH
56070: LD_STRING ")
56072: STR
56073: PPUSH
56074: CALL_OW 559
// end else
56078: GO 56087
// ToLua ( getStreamItemsFromMission("","","") ) ;
56080: LD_STRING getStreamItemsFromMission("","","")
56082: PPUSH
56083: CALL_OW 559
// end ;
56087: LD_VAR 0 2
56091: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56092: LD_EXP 110
56096: PUSH
56097: LD_EXP 115
56101: AND
56102: IFFALSE 56226
56104: GO 56106
56106: DISABLE
56107: LD_INT 0
56109: PPUSH
56110: PPUSH
// begin enable ;
56111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56112: LD_ADDR_VAR 0 2
56116: PUSH
56117: LD_INT 22
56119: PUSH
56120: LD_OWVAR 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 34
56134: PUSH
56135: LD_INT 7
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 34
56144: PUSH
56145: LD_INT 45
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 34
56154: PUSH
56155: LD_INT 28
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 34
56164: PUSH
56165: LD_INT 47
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PPUSH
56183: CALL_OW 69
56187: ST_TO_ADDR
// if not tmp then
56188: LD_VAR 0 2
56192: NOT
56193: IFFALSE 56197
// exit ;
56195: GO 56226
// for i in tmp do
56197: LD_ADDR_VAR 0 1
56201: PUSH
56202: LD_VAR 0 2
56206: PUSH
56207: FOR_IN
56208: IFFALSE 56224
// begin SetLives ( i , 0 ) ;
56210: LD_VAR 0 1
56214: PPUSH
56215: LD_INT 0
56217: PPUSH
56218: CALL_OW 234
// end ;
56222: GO 56207
56224: POP
56225: POP
// end ;
56226: PPOPN 2
56228: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56229: LD_EXP 110
56233: PUSH
56234: LD_EXP 116
56238: AND
56239: IFFALSE 56323
56241: GO 56243
56243: DISABLE
56244: LD_INT 0
56246: PPUSH
56247: PPUSH
// begin enable ;
56248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56249: LD_ADDR_VAR 0 2
56253: PUSH
56254: LD_INT 22
56256: PUSH
56257: LD_OWVAR 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 32
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PPUSH
56280: CALL_OW 69
56284: ST_TO_ADDR
// if not tmp then
56285: LD_VAR 0 2
56289: NOT
56290: IFFALSE 56294
// exit ;
56292: GO 56323
// for i in tmp do
56294: LD_ADDR_VAR 0 1
56298: PUSH
56299: LD_VAR 0 2
56303: PUSH
56304: FOR_IN
56305: IFFALSE 56321
// begin SetLives ( i , 0 ) ;
56307: LD_VAR 0 1
56311: PPUSH
56312: LD_INT 0
56314: PPUSH
56315: CALL_OW 234
// end ;
56319: GO 56304
56321: POP
56322: POP
// end ;
56323: PPOPN 2
56325: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56326: LD_EXP 110
56330: PUSH
56331: LD_EXP 113
56335: AND
56336: IFFALSE 56429
56338: GO 56340
56340: DISABLE
56341: LD_INT 0
56343: PPUSH
// begin enable ;
56344: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56345: LD_ADDR_VAR 0 1
56349: PUSH
56350: LD_INT 22
56352: PUSH
56353: LD_OWVAR 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 25
56367: PUSH
56368: LD_INT 5
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 25
56377: PUSH
56378: LD_INT 9
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 25
56387: PUSH
56388: LD_INT 8
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PPUSH
56405: CALL_OW 69
56409: PUSH
56410: FOR_IN
56411: IFFALSE 56427
// begin SetClass ( i , 1 ) ;
56413: LD_VAR 0 1
56417: PPUSH
56418: LD_INT 1
56420: PPUSH
56421: CALL_OW 336
// end ;
56425: GO 56410
56427: POP
56428: POP
// end ;
56429: PPOPN 1
56431: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56432: LD_EXP 110
56436: PUSH
56437: LD_EXP 114
56441: AND
56442: PUSH
56443: LD_OWVAR 65
56447: PUSH
56448: LD_INT 7
56450: LESS
56451: AND
56452: IFFALSE 56466
56454: GO 56456
56456: DISABLE
// begin enable ;
56457: ENABLE
// game_speed := 7 ;
56458: LD_ADDR_OWVAR 65
56462: PUSH
56463: LD_INT 7
56465: ST_TO_ADDR
// end ;
56466: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56467: LD_EXP 110
56471: PUSH
56472: LD_EXP 117
56476: AND
56477: IFFALSE 56679
56479: GO 56481
56481: DISABLE
56482: LD_INT 0
56484: PPUSH
56485: PPUSH
56486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56487: LD_ADDR_VAR 0 3
56491: PUSH
56492: LD_INT 81
56494: PUSH
56495: LD_OWVAR 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 21
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PPUSH
56518: CALL_OW 69
56522: ST_TO_ADDR
// if not tmp then
56523: LD_VAR 0 3
56527: NOT
56528: IFFALSE 56532
// exit ;
56530: GO 56679
// if tmp > 5 then
56532: LD_VAR 0 3
56536: PUSH
56537: LD_INT 5
56539: GREATER
56540: IFFALSE 56552
// k := 5 else
56542: LD_ADDR_VAR 0 2
56546: PUSH
56547: LD_INT 5
56549: ST_TO_ADDR
56550: GO 56562
// k := tmp ;
56552: LD_ADDR_VAR 0 2
56556: PUSH
56557: LD_VAR 0 3
56561: ST_TO_ADDR
// for i := 1 to k do
56562: LD_ADDR_VAR 0 1
56566: PUSH
56567: DOUBLE
56568: LD_INT 1
56570: DEC
56571: ST_TO_ADDR
56572: LD_VAR 0 2
56576: PUSH
56577: FOR_TO
56578: IFFALSE 56677
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56580: LD_VAR 0 3
56584: PUSH
56585: LD_VAR 0 1
56589: ARRAY
56590: PPUSH
56591: LD_VAR 0 1
56595: PUSH
56596: LD_INT 4
56598: MOD
56599: PUSH
56600: LD_INT 1
56602: PLUS
56603: PPUSH
56604: CALL_OW 259
56608: PUSH
56609: LD_INT 10
56611: LESS
56612: IFFALSE 56675
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56614: LD_VAR 0 3
56618: PUSH
56619: LD_VAR 0 1
56623: ARRAY
56624: PPUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_INT 4
56632: MOD
56633: PUSH
56634: LD_INT 1
56636: PLUS
56637: PPUSH
56638: LD_VAR 0 3
56642: PUSH
56643: LD_VAR 0 1
56647: ARRAY
56648: PPUSH
56649: LD_VAR 0 1
56653: PUSH
56654: LD_INT 4
56656: MOD
56657: PUSH
56658: LD_INT 1
56660: PLUS
56661: PPUSH
56662: CALL_OW 259
56666: PUSH
56667: LD_INT 1
56669: PLUS
56670: PPUSH
56671: CALL_OW 237
56675: GO 56577
56677: POP
56678: POP
// end ;
56679: PPOPN 3
56681: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56682: LD_EXP 110
56686: PUSH
56687: LD_EXP 118
56691: AND
56692: IFFALSE 56712
56694: GO 56696
56696: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56697: LD_INT 4
56699: PPUSH
56700: LD_OWVAR 2
56704: PPUSH
56705: LD_INT 0
56707: PPUSH
56708: CALL_OW 324
56712: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56713: LD_EXP 110
56717: PUSH
56718: LD_EXP 147
56722: AND
56723: IFFALSE 56743
56725: GO 56727
56727: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56728: LD_INT 19
56730: PPUSH
56731: LD_OWVAR 2
56735: PPUSH
56736: LD_INT 0
56738: PPUSH
56739: CALL_OW 324
56743: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56744: LD_EXP 110
56748: PUSH
56749: LD_EXP 119
56753: AND
56754: IFFALSE 56856
56756: GO 56758
56758: DISABLE
56759: LD_INT 0
56761: PPUSH
56762: PPUSH
// begin enable ;
56763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56764: LD_ADDR_VAR 0 2
56768: PUSH
56769: LD_INT 22
56771: PUSH
56772: LD_OWVAR 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 34
56786: PUSH
56787: LD_INT 11
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 34
56796: PUSH
56797: LD_INT 30
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PPUSH
56813: CALL_OW 69
56817: ST_TO_ADDR
// if not tmp then
56818: LD_VAR 0 2
56822: NOT
56823: IFFALSE 56827
// exit ;
56825: GO 56856
// for i in tmp do
56827: LD_ADDR_VAR 0 1
56831: PUSH
56832: LD_VAR 0 2
56836: PUSH
56837: FOR_IN
56838: IFFALSE 56854
// begin SetLives ( i , 0 ) ;
56840: LD_VAR 0 1
56844: PPUSH
56845: LD_INT 0
56847: PPUSH
56848: CALL_OW 234
// end ;
56852: GO 56837
56854: POP
56855: POP
// end ;
56856: PPOPN 2
56858: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56859: LD_EXP 110
56863: PUSH
56864: LD_EXP 120
56868: AND
56869: IFFALSE 56889
56871: GO 56873
56873: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56874: LD_INT 32
56876: PPUSH
56877: LD_OWVAR 2
56881: PPUSH
56882: LD_INT 0
56884: PPUSH
56885: CALL_OW 324
56889: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56890: LD_EXP 110
56894: PUSH
56895: LD_EXP 121
56899: AND
56900: IFFALSE 57081
56902: GO 56904
56904: DISABLE
56905: LD_INT 0
56907: PPUSH
56908: PPUSH
56909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56910: LD_ADDR_VAR 0 2
56914: PUSH
56915: LD_INT 22
56917: PUSH
56918: LD_OWVAR 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 33
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PPUSH
56941: CALL_OW 69
56945: ST_TO_ADDR
// if not tmp then
56946: LD_VAR 0 2
56950: NOT
56951: IFFALSE 56955
// exit ;
56953: GO 57081
// side := 0 ;
56955: LD_ADDR_VAR 0 3
56959: PUSH
56960: LD_INT 0
56962: ST_TO_ADDR
// for i := 1 to 8 do
56963: LD_ADDR_VAR 0 1
56967: PUSH
56968: DOUBLE
56969: LD_INT 1
56971: DEC
56972: ST_TO_ADDR
56973: LD_INT 8
56975: PUSH
56976: FOR_TO
56977: IFFALSE 57025
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56979: LD_OWVAR 2
56983: PUSH
56984: LD_VAR 0 1
56988: NONEQUAL
56989: PUSH
56990: LD_OWVAR 2
56994: PPUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: CALL_OW 81
57004: PUSH
57005: LD_INT 2
57007: EQUAL
57008: AND
57009: IFFALSE 57023
// begin side := i ;
57011: LD_ADDR_VAR 0 3
57015: PUSH
57016: LD_VAR 0 1
57020: ST_TO_ADDR
// break ;
57021: GO 57025
// end ;
57023: GO 56976
57025: POP
57026: POP
// if not side then
57027: LD_VAR 0 3
57031: NOT
57032: IFFALSE 57036
// exit ;
57034: GO 57081
// for i := 1 to tmp do
57036: LD_ADDR_VAR 0 1
57040: PUSH
57041: DOUBLE
57042: LD_INT 1
57044: DEC
57045: ST_TO_ADDR
57046: LD_VAR 0 2
57050: PUSH
57051: FOR_TO
57052: IFFALSE 57079
// if Prob ( 60 ) then
57054: LD_INT 60
57056: PPUSH
57057: CALL_OW 13
57061: IFFALSE 57077
// SetSide ( i , side ) ;
57063: LD_VAR 0 1
57067: PPUSH
57068: LD_VAR 0 3
57072: PPUSH
57073: CALL_OW 235
57077: GO 57051
57079: POP
57080: POP
// end ;
57081: PPOPN 3
57083: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57084: LD_EXP 110
57088: PUSH
57089: LD_EXP 123
57093: AND
57094: IFFALSE 57213
57096: GO 57098
57098: DISABLE
57099: LD_INT 0
57101: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57102: LD_ADDR_VAR 0 1
57106: PUSH
57107: LD_INT 22
57109: PUSH
57110: LD_OWVAR 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 21
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 23
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: PPUSH
57151: CALL_OW 69
57155: PUSH
57156: FOR_IN
57157: IFFALSE 57211
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57159: LD_VAR 0 1
57163: PPUSH
57164: CALL_OW 257
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: IN
57187: IFFALSE 57209
// SetClass ( un , rand ( 1 , 4 ) ) ;
57189: LD_VAR 0 1
57193: PPUSH
57194: LD_INT 1
57196: PPUSH
57197: LD_INT 4
57199: PPUSH
57200: CALL_OW 12
57204: PPUSH
57205: CALL_OW 336
57209: GO 57156
57211: POP
57212: POP
// end ;
57213: PPOPN 1
57215: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57216: LD_EXP 110
57220: PUSH
57221: LD_EXP 122
57225: AND
57226: IFFALSE 57305
57228: GO 57230
57230: DISABLE
57231: LD_INT 0
57233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57234: LD_ADDR_VAR 0 1
57238: PUSH
57239: LD_INT 22
57241: PUSH
57242: LD_OWVAR 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 21
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PPUSH
57265: CALL_OW 69
57269: ST_TO_ADDR
// if not tmp then
57270: LD_VAR 0 1
57274: NOT
57275: IFFALSE 57279
// exit ;
57277: GO 57305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57279: LD_VAR 0 1
57283: PUSH
57284: LD_INT 1
57286: PPUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: CALL_OW 12
57296: ARRAY
57297: PPUSH
57298: LD_INT 100
57300: PPUSH
57301: CALL_OW 234
// end ;
57305: PPOPN 1
57307: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57308: LD_EXP 110
57312: PUSH
57313: LD_EXP 124
57317: AND
57318: IFFALSE 57416
57320: GO 57322
57322: DISABLE
57323: LD_INT 0
57325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57326: LD_ADDR_VAR 0 1
57330: PUSH
57331: LD_INT 22
57333: PUSH
57334: LD_OWVAR 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 21
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PPUSH
57357: CALL_OW 69
57361: ST_TO_ADDR
// if not tmp then
57362: LD_VAR 0 1
57366: NOT
57367: IFFALSE 57371
// exit ;
57369: GO 57416
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57371: LD_VAR 0 1
57375: PUSH
57376: LD_INT 1
57378: PPUSH
57379: LD_VAR 0 1
57383: PPUSH
57384: CALL_OW 12
57388: ARRAY
57389: PPUSH
57390: LD_INT 1
57392: PPUSH
57393: LD_INT 4
57395: PPUSH
57396: CALL_OW 12
57400: PPUSH
57401: LD_INT 3000
57403: PPUSH
57404: LD_INT 9000
57406: PPUSH
57407: CALL_OW 12
57411: PPUSH
57412: CALL_OW 492
// end ;
57416: PPOPN 1
57418: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57419: LD_EXP 110
57423: PUSH
57424: LD_EXP 125
57428: AND
57429: IFFALSE 57449
57431: GO 57433
57433: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57434: LD_INT 1
57436: PPUSH
57437: LD_OWVAR 2
57441: PPUSH
57442: LD_INT 0
57444: PPUSH
57445: CALL_OW 324
57449: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57450: LD_EXP 110
57454: PUSH
57455: LD_EXP 126
57459: AND
57460: IFFALSE 57543
57462: GO 57464
57464: DISABLE
57465: LD_INT 0
57467: PPUSH
57468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57469: LD_ADDR_VAR 0 2
57473: PUSH
57474: LD_INT 22
57476: PUSH
57477: LD_OWVAR 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 21
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PPUSH
57500: CALL_OW 69
57504: ST_TO_ADDR
// if not tmp then
57505: LD_VAR 0 2
57509: NOT
57510: IFFALSE 57514
// exit ;
57512: GO 57543
// for i in tmp do
57514: LD_ADDR_VAR 0 1
57518: PUSH
57519: LD_VAR 0 2
57523: PUSH
57524: FOR_IN
57525: IFFALSE 57541
// SetBLevel ( i , 10 ) ;
57527: LD_VAR 0 1
57531: PPUSH
57532: LD_INT 10
57534: PPUSH
57535: CALL_OW 241
57539: GO 57524
57541: POP
57542: POP
// end ;
57543: PPOPN 2
57545: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57546: LD_EXP 110
57550: PUSH
57551: LD_EXP 127
57555: AND
57556: IFFALSE 57667
57558: GO 57560
57560: DISABLE
57561: LD_INT 0
57563: PPUSH
57564: PPUSH
57565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57566: LD_ADDR_VAR 0 3
57570: PUSH
57571: LD_INT 22
57573: PUSH
57574: LD_OWVAR 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 25
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PPUSH
57597: CALL_OW 69
57601: ST_TO_ADDR
// if not tmp then
57602: LD_VAR 0 3
57606: NOT
57607: IFFALSE 57611
// exit ;
57609: GO 57667
// un := tmp [ rand ( 1 , tmp ) ] ;
57611: LD_ADDR_VAR 0 2
57615: PUSH
57616: LD_VAR 0 3
57620: PUSH
57621: LD_INT 1
57623: PPUSH
57624: LD_VAR 0 3
57628: PPUSH
57629: CALL_OW 12
57633: ARRAY
57634: ST_TO_ADDR
// if Crawls ( un ) then
57635: LD_VAR 0 2
57639: PPUSH
57640: CALL_OW 318
57644: IFFALSE 57655
// ComWalk ( un ) ;
57646: LD_VAR 0 2
57650: PPUSH
57651: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57655: LD_VAR 0 2
57659: PPUSH
57660: LD_INT 5
57662: PPUSH
57663: CALL_OW 336
// end ;
57667: PPOPN 3
57669: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57670: LD_EXP 110
57674: PUSH
57675: LD_EXP 128
57679: AND
57680: PUSH
57681: LD_OWVAR 67
57685: PUSH
57686: LD_INT 4
57688: LESS
57689: AND
57690: IFFALSE 57709
57692: GO 57694
57694: DISABLE
// begin Difficulty := Difficulty + 1 ;
57695: LD_ADDR_OWVAR 67
57699: PUSH
57700: LD_OWVAR 67
57704: PUSH
57705: LD_INT 1
57707: PLUS
57708: ST_TO_ADDR
// end ;
57709: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57710: LD_EXP 110
57714: PUSH
57715: LD_EXP 129
57719: AND
57720: IFFALSE 57823
57722: GO 57724
57724: DISABLE
57725: LD_INT 0
57727: PPUSH
// begin for i := 1 to 5 do
57728: LD_ADDR_VAR 0 1
57732: PUSH
57733: DOUBLE
57734: LD_INT 1
57736: DEC
57737: ST_TO_ADDR
57738: LD_INT 5
57740: PUSH
57741: FOR_TO
57742: IFFALSE 57821
// begin uc_nation := nation_nature ;
57744: LD_ADDR_OWVAR 21
57748: PUSH
57749: LD_INT 0
57751: ST_TO_ADDR
// uc_side := 0 ;
57752: LD_ADDR_OWVAR 20
57756: PUSH
57757: LD_INT 0
57759: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57760: LD_ADDR_OWVAR 29
57764: PUSH
57765: LD_INT 12
57767: PUSH
57768: LD_INT 12
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: ST_TO_ADDR
// hc_agressivity := 20 ;
57775: LD_ADDR_OWVAR 35
57779: PUSH
57780: LD_INT 20
57782: ST_TO_ADDR
// hc_class := class_tiger ;
57783: LD_ADDR_OWVAR 28
57787: PUSH
57788: LD_INT 14
57790: ST_TO_ADDR
// hc_gallery :=  ;
57791: LD_ADDR_OWVAR 33
57795: PUSH
57796: LD_STRING 
57798: ST_TO_ADDR
// hc_name :=  ;
57799: LD_ADDR_OWVAR 26
57803: PUSH
57804: LD_STRING 
57806: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57807: CALL_OW 44
57811: PPUSH
57812: LD_INT 0
57814: PPUSH
57815: CALL_OW 51
// end ;
57819: GO 57741
57821: POP
57822: POP
// end ;
57823: PPOPN 1
57825: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57826: LD_EXP 110
57830: PUSH
57831: LD_EXP 130
57835: AND
57836: IFFALSE 57845
57838: GO 57840
57840: DISABLE
// StreamSibBomb ;
57841: CALL 57846 0 0
57845: END
// export function StreamSibBomb ; var i , x , y ; begin
57846: LD_INT 0
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
// result := false ;
57852: LD_ADDR_VAR 0 1
57856: PUSH
57857: LD_INT 0
57859: ST_TO_ADDR
// for i := 1 to 16 do
57860: LD_ADDR_VAR 0 2
57864: PUSH
57865: DOUBLE
57866: LD_INT 1
57868: DEC
57869: ST_TO_ADDR
57870: LD_INT 16
57872: PUSH
57873: FOR_TO
57874: IFFALSE 58073
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57876: LD_ADDR_VAR 0 3
57880: PUSH
57881: LD_INT 10
57883: PUSH
57884: LD_INT 20
57886: PUSH
57887: LD_INT 30
57889: PUSH
57890: LD_INT 40
57892: PUSH
57893: LD_INT 50
57895: PUSH
57896: LD_INT 60
57898: PUSH
57899: LD_INT 70
57901: PUSH
57902: LD_INT 80
57904: PUSH
57905: LD_INT 90
57907: PUSH
57908: LD_INT 100
57910: PUSH
57911: LD_INT 110
57913: PUSH
57914: LD_INT 120
57916: PUSH
57917: LD_INT 130
57919: PUSH
57920: LD_INT 140
57922: PUSH
57923: LD_INT 150
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PPUSH
57946: LD_INT 15
57948: PPUSH
57949: CALL_OW 12
57953: ARRAY
57954: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57955: LD_ADDR_VAR 0 4
57959: PUSH
57960: LD_INT 10
57962: PUSH
57963: LD_INT 20
57965: PUSH
57966: LD_INT 30
57968: PUSH
57969: LD_INT 40
57971: PUSH
57972: LD_INT 50
57974: PUSH
57975: LD_INT 60
57977: PUSH
57978: LD_INT 70
57980: PUSH
57981: LD_INT 80
57983: PUSH
57984: LD_INT 90
57986: PUSH
57987: LD_INT 100
57989: PUSH
57990: LD_INT 110
57992: PUSH
57993: LD_INT 120
57995: PUSH
57996: LD_INT 130
57998: PUSH
57999: LD_INT 140
58001: PUSH
58002: LD_INT 150
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PPUSH
58025: LD_INT 15
58027: PPUSH
58028: CALL_OW 12
58032: ARRAY
58033: ST_TO_ADDR
// if ValidHex ( x , y ) then
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_VAR 0 4
58043: PPUSH
58044: CALL_OW 488
58048: IFFALSE 58071
// begin result := [ x , y ] ;
58050: LD_ADDR_VAR 0 1
58054: PUSH
58055: LD_VAR 0 3
58059: PUSH
58060: LD_VAR 0 4
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// break ;
58069: GO 58073
// end ; end ;
58071: GO 57873
58073: POP
58074: POP
// if result then
58075: LD_VAR 0 1
58079: IFFALSE 58139
// begin ToLua ( playSibBomb() ) ;
58081: LD_STRING playSibBomb()
58083: PPUSH
58084: CALL_OW 559
// wait ( 0 0$14 ) ;
58088: LD_INT 490
58090: PPUSH
58091: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58095: LD_VAR 0 1
58099: PUSH
58100: LD_INT 1
58102: ARRAY
58103: PPUSH
58104: LD_VAR 0 1
58108: PUSH
58109: LD_INT 2
58111: ARRAY
58112: PPUSH
58113: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58117: LD_VAR 0 1
58121: PUSH
58122: LD_INT 1
58124: ARRAY
58125: PPUSH
58126: LD_VAR 0 1
58130: PUSH
58131: LD_INT 2
58133: ARRAY
58134: PPUSH
58135: CALL_OW 429
// end ; end ;
58139: LD_VAR 0 1
58143: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58144: LD_EXP 110
58148: PUSH
58149: LD_EXP 132
58153: AND
58154: IFFALSE 58166
58156: GO 58158
58158: DISABLE
// YouLost (  ) ;
58159: LD_STRING 
58161: PPUSH
58162: CALL_OW 104
58166: END
// every 0 0$1 trigger StreamModeActive and sFog do
58167: LD_EXP 110
58171: PUSH
58172: LD_EXP 131
58176: AND
58177: IFFALSE 58191
58179: GO 58181
58181: DISABLE
// FogOff ( your_side ) ;
58182: LD_OWVAR 2
58186: PPUSH
58187: CALL_OW 344
58191: END
// every 0 0$1 trigger StreamModeActive and sSun do
58192: LD_EXP 110
58196: PUSH
58197: LD_EXP 133
58201: AND
58202: IFFALSE 58230
58204: GO 58206
58206: DISABLE
// begin solar_recharge_percent := 0 ;
58207: LD_ADDR_OWVAR 79
58211: PUSH
58212: LD_INT 0
58214: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58215: LD_INT 10500
58217: PPUSH
58218: CALL_OW 67
// solar_recharge_percent := 100 ;
58222: LD_ADDR_OWVAR 79
58226: PUSH
58227: LD_INT 100
58229: ST_TO_ADDR
// end ;
58230: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58231: LD_EXP 110
58235: PUSH
58236: LD_EXP 134
58240: AND
58241: IFFALSE 58480
58243: GO 58245
58245: DISABLE
58246: LD_INT 0
58248: PPUSH
58249: PPUSH
58250: PPUSH
// begin tmp := [ ] ;
58251: LD_ADDR_VAR 0 3
58255: PUSH
58256: EMPTY
58257: ST_TO_ADDR
// for i := 1 to 6 do
58258: LD_ADDR_VAR 0 1
58262: PUSH
58263: DOUBLE
58264: LD_INT 1
58266: DEC
58267: ST_TO_ADDR
58268: LD_INT 6
58270: PUSH
58271: FOR_TO
58272: IFFALSE 58377
// begin uc_nation := nation_nature ;
58274: LD_ADDR_OWVAR 21
58278: PUSH
58279: LD_INT 0
58281: ST_TO_ADDR
// uc_side := 0 ;
58282: LD_ADDR_OWVAR 20
58286: PUSH
58287: LD_INT 0
58289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58290: LD_ADDR_OWVAR 29
58294: PUSH
58295: LD_INT 12
58297: PUSH
58298: LD_INT 12
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// hc_agressivity := 20 ;
58305: LD_ADDR_OWVAR 35
58309: PUSH
58310: LD_INT 20
58312: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58313: LD_ADDR_OWVAR 28
58317: PUSH
58318: LD_INT 17
58320: ST_TO_ADDR
// hc_gallery :=  ;
58321: LD_ADDR_OWVAR 33
58325: PUSH
58326: LD_STRING 
58328: ST_TO_ADDR
// hc_name :=  ;
58329: LD_ADDR_OWVAR 26
58333: PUSH
58334: LD_STRING 
58336: ST_TO_ADDR
// un := CreateHuman ;
58337: LD_ADDR_VAR 0 2
58341: PUSH
58342: CALL_OW 44
58346: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58347: LD_VAR 0 2
58351: PPUSH
58352: LD_INT 1
58354: PPUSH
58355: CALL_OW 51
// tmp := tmp ^ un ;
58359: LD_ADDR_VAR 0 3
58363: PUSH
58364: LD_VAR 0 3
58368: PUSH
58369: LD_VAR 0 2
58373: ADD
58374: ST_TO_ADDR
// end ;
58375: GO 58271
58377: POP
58378: POP
// repeat wait ( 0 0$1 ) ;
58379: LD_INT 35
58381: PPUSH
58382: CALL_OW 67
// for un in tmp do
58386: LD_ADDR_VAR 0 2
58390: PUSH
58391: LD_VAR 0 3
58395: PUSH
58396: FOR_IN
58397: IFFALSE 58471
// begin if IsDead ( un ) then
58399: LD_VAR 0 2
58403: PPUSH
58404: CALL_OW 301
58408: IFFALSE 58428
// begin tmp := tmp diff un ;
58410: LD_ADDR_VAR 0 3
58414: PUSH
58415: LD_VAR 0 3
58419: PUSH
58420: LD_VAR 0 2
58424: DIFF
58425: ST_TO_ADDR
// continue ;
58426: GO 58396
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58428: LD_VAR 0 2
58432: PPUSH
58433: LD_INT 3
58435: PUSH
58436: LD_INT 22
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PPUSH
58450: CALL_OW 69
58454: PPUSH
58455: LD_VAR 0 2
58459: PPUSH
58460: CALL_OW 74
58464: PPUSH
58465: CALL_OW 115
// end ;
58469: GO 58396
58471: POP
58472: POP
// until not tmp ;
58473: LD_VAR 0 3
58477: NOT
58478: IFFALSE 58379
// end ;
58480: PPOPN 3
58482: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58483: LD_EXP 110
58487: PUSH
58488: LD_EXP 135
58492: AND
58493: IFFALSE 58547
58495: GO 58497
58497: DISABLE
// begin ToLua ( displayTroll(); ) ;
58498: LD_STRING displayTroll();
58500: PPUSH
58501: CALL_OW 559
// wait ( 3 3$00 ) ;
58505: LD_INT 6300
58507: PPUSH
58508: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58512: LD_STRING hideTroll();
58514: PPUSH
58515: CALL_OW 559
// wait ( 1 1$00 ) ;
58519: LD_INT 2100
58521: PPUSH
58522: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58526: LD_STRING displayTroll();
58528: PPUSH
58529: CALL_OW 559
// wait ( 1 1$00 ) ;
58533: LD_INT 2100
58535: PPUSH
58536: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58540: LD_STRING hideTroll();
58542: PPUSH
58543: CALL_OW 559
// end ;
58547: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58548: LD_EXP 110
58552: PUSH
58553: LD_EXP 136
58557: AND
58558: IFFALSE 58621
58560: GO 58562
58562: DISABLE
58563: LD_INT 0
58565: PPUSH
// begin p := 0 ;
58566: LD_ADDR_VAR 0 1
58570: PUSH
58571: LD_INT 0
58573: ST_TO_ADDR
// repeat game_speed := 1 ;
58574: LD_ADDR_OWVAR 65
58578: PUSH
58579: LD_INT 1
58581: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58582: LD_INT 35
58584: PPUSH
58585: CALL_OW 67
// p := p + 1 ;
58589: LD_ADDR_VAR 0 1
58593: PUSH
58594: LD_VAR 0 1
58598: PUSH
58599: LD_INT 1
58601: PLUS
58602: ST_TO_ADDR
// until p >= 60 ;
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 60
58610: GREATEREQUAL
58611: IFFALSE 58574
// game_speed := 4 ;
58613: LD_ADDR_OWVAR 65
58617: PUSH
58618: LD_INT 4
58620: ST_TO_ADDR
// end ;
58621: PPOPN 1
58623: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58624: LD_EXP 110
58628: PUSH
58629: LD_EXP 137
58633: AND
58634: IFFALSE 58780
58636: GO 58638
58638: DISABLE
58639: LD_INT 0
58641: PPUSH
58642: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58643: LD_ADDR_VAR 0 1
58647: PUSH
58648: LD_INT 22
58650: PUSH
58651: LD_OWVAR 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 30
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 30
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PPUSH
58692: CALL_OW 69
58696: ST_TO_ADDR
// if not depot then
58697: LD_VAR 0 1
58701: NOT
58702: IFFALSE 58706
// exit ;
58704: GO 58780
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58706: LD_ADDR_VAR 0 2
58710: PUSH
58711: LD_VAR 0 1
58715: PUSH
58716: LD_INT 1
58718: PPUSH
58719: LD_VAR 0 1
58723: PPUSH
58724: CALL_OW 12
58728: ARRAY
58729: PPUSH
58730: CALL_OW 274
58734: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58735: LD_VAR 0 2
58739: PPUSH
58740: LD_INT 1
58742: PPUSH
58743: LD_INT 0
58745: PPUSH
58746: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58750: LD_VAR 0 2
58754: PPUSH
58755: LD_INT 2
58757: PPUSH
58758: LD_INT 0
58760: PPUSH
58761: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58765: LD_VAR 0 2
58769: PPUSH
58770: LD_INT 3
58772: PPUSH
58773: LD_INT 0
58775: PPUSH
58776: CALL_OW 277
// end ;
58780: PPOPN 2
58782: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58783: LD_EXP 110
58787: PUSH
58788: LD_EXP 138
58792: AND
58793: IFFALSE 58890
58795: GO 58797
58797: DISABLE
58798: LD_INT 0
58800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58801: LD_ADDR_VAR 0 1
58805: PUSH
58806: LD_INT 22
58808: PUSH
58809: LD_OWVAR 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 21
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 23
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: PPUSH
58850: CALL_OW 69
58854: ST_TO_ADDR
// if not tmp then
58855: LD_VAR 0 1
58859: NOT
58860: IFFALSE 58864
// exit ;
58862: GO 58890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58864: LD_VAR 0 1
58868: PUSH
58869: LD_INT 1
58871: PPUSH
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 12
58881: ARRAY
58882: PPUSH
58883: LD_INT 200
58885: PPUSH
58886: CALL_OW 234
// end ;
58890: PPOPN 1
58892: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58893: LD_EXP 110
58897: PUSH
58898: LD_EXP 139
58902: AND
58903: IFFALSE 58982
58905: GO 58907
58907: DISABLE
58908: LD_INT 0
58910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58911: LD_ADDR_VAR 0 1
58915: PUSH
58916: LD_INT 22
58918: PUSH
58919: LD_OWVAR 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 21
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PPUSH
58942: CALL_OW 69
58946: ST_TO_ADDR
// if not tmp then
58947: LD_VAR 0 1
58951: NOT
58952: IFFALSE 58956
// exit ;
58954: GO 58982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58956: LD_VAR 0 1
58960: PUSH
58961: LD_INT 1
58963: PPUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 12
58973: ARRAY
58974: PPUSH
58975: LD_INT 60
58977: PPUSH
58978: CALL_OW 234
// end ;
58982: PPOPN 1
58984: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58985: LD_EXP 110
58989: PUSH
58990: LD_EXP 140
58994: AND
58995: IFFALSE 59094
58997: GO 58999
58999: DISABLE
59000: LD_INT 0
59002: PPUSH
59003: PPUSH
// begin enable ;
59004: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59005: LD_ADDR_VAR 0 1
59009: PUSH
59010: LD_INT 22
59012: PUSH
59013: LD_OWVAR 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 61
59024: PUSH
59025: EMPTY
59026: LIST
59027: PUSH
59028: LD_INT 33
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: PPUSH
59043: CALL_OW 69
59047: ST_TO_ADDR
// if not tmp then
59048: LD_VAR 0 1
59052: NOT
59053: IFFALSE 59057
// exit ;
59055: GO 59094
// for i in tmp do
59057: LD_ADDR_VAR 0 2
59061: PUSH
59062: LD_VAR 0 1
59066: PUSH
59067: FOR_IN
59068: IFFALSE 59092
// if IsControledBy ( i ) then
59070: LD_VAR 0 2
59074: PPUSH
59075: CALL_OW 312
59079: IFFALSE 59090
// ComUnlink ( i ) ;
59081: LD_VAR 0 2
59085: PPUSH
59086: CALL_OW 136
59090: GO 59067
59092: POP
59093: POP
// end ;
59094: PPOPN 2
59096: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59097: LD_EXP 110
59101: PUSH
59102: LD_EXP 141
59106: AND
59107: IFFALSE 59247
59109: GO 59111
59111: DISABLE
59112: LD_INT 0
59114: PPUSH
59115: PPUSH
// begin ToLua ( displayPowell(); ) ;
59116: LD_STRING displayPowell();
59118: PPUSH
59119: CALL_OW 559
// uc_side := 0 ;
59123: LD_ADDR_OWVAR 20
59127: PUSH
59128: LD_INT 0
59130: ST_TO_ADDR
// uc_nation := 2 ;
59131: LD_ADDR_OWVAR 21
59135: PUSH
59136: LD_INT 2
59138: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59139: LD_ADDR_OWVAR 37
59143: PUSH
59144: LD_INT 14
59146: ST_TO_ADDR
// vc_engine := engine_siberite ;
59147: LD_ADDR_OWVAR 39
59151: PUSH
59152: LD_INT 3
59154: ST_TO_ADDR
// vc_control := control_apeman ;
59155: LD_ADDR_OWVAR 38
59159: PUSH
59160: LD_INT 5
59162: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59163: LD_ADDR_OWVAR 40
59167: PUSH
59168: LD_INT 29
59170: ST_TO_ADDR
// un := CreateVehicle ;
59171: LD_ADDR_VAR 0 2
59175: PUSH
59176: CALL_OW 45
59180: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59181: LD_VAR 0 2
59185: PPUSH
59186: LD_INT 1
59188: PPUSH
59189: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59193: LD_INT 35
59195: PPUSH
59196: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59200: LD_VAR 0 2
59204: PPUSH
59205: LD_INT 22
59207: PUSH
59208: LD_OWVAR 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PPUSH
59217: CALL_OW 69
59221: PPUSH
59222: LD_VAR 0 2
59226: PPUSH
59227: CALL_OW 74
59231: PPUSH
59232: CALL_OW 115
// until IsDead ( un ) ;
59236: LD_VAR 0 2
59240: PPUSH
59241: CALL_OW 301
59245: IFFALSE 59193
// end ;
59247: PPOPN 2
59249: END
// every 0 0$1 trigger StreamModeActive and sStu do
59250: LD_EXP 110
59254: PUSH
59255: LD_EXP 149
59259: AND
59260: IFFALSE 59276
59262: GO 59264
59264: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59265: LD_STRING displayStucuk();
59267: PPUSH
59268: CALL_OW 559
// ResetFog ;
59272: CALL_OW 335
// end ;
59276: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59277: LD_EXP 110
59281: PUSH
59282: LD_EXP 142
59286: AND
59287: IFFALSE 59428
59289: GO 59291
59291: DISABLE
59292: LD_INT 0
59294: PPUSH
59295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59296: LD_ADDR_VAR 0 2
59300: PUSH
59301: LD_INT 22
59303: PUSH
59304: LD_OWVAR 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 21
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PPUSH
59327: CALL_OW 69
59331: ST_TO_ADDR
// if not tmp then
59332: LD_VAR 0 2
59336: NOT
59337: IFFALSE 59341
// exit ;
59339: GO 59428
// un := tmp [ rand ( 1 , tmp ) ] ;
59341: LD_ADDR_VAR 0 1
59345: PUSH
59346: LD_VAR 0 2
59350: PUSH
59351: LD_INT 1
59353: PPUSH
59354: LD_VAR 0 2
59358: PPUSH
59359: CALL_OW 12
59363: ARRAY
59364: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59365: LD_VAR 0 1
59369: PPUSH
59370: LD_INT 0
59372: PPUSH
59373: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59377: LD_VAR 0 1
59381: PPUSH
59382: LD_OWVAR 3
59386: PUSH
59387: LD_VAR 0 1
59391: DIFF
59392: PPUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 74
59402: PPUSH
59403: CALL_OW 115
// wait ( 0 0$20 ) ;
59407: LD_INT 700
59409: PPUSH
59410: CALL_OW 67
// SetSide ( un , your_side ) ;
59414: LD_VAR 0 1
59418: PPUSH
59419: LD_OWVAR 2
59423: PPUSH
59424: CALL_OW 235
// end ;
59428: PPOPN 2
59430: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59431: LD_EXP 110
59435: PUSH
59436: LD_EXP 143
59440: AND
59441: IFFALSE 59547
59443: GO 59445
59445: DISABLE
59446: LD_INT 0
59448: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59449: LD_ADDR_VAR 0 1
59453: PUSH
59454: LD_INT 22
59456: PUSH
59457: LD_OWVAR 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 30
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 30
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PPUSH
59498: CALL_OW 69
59502: ST_TO_ADDR
// if not depot then
59503: LD_VAR 0 1
59507: NOT
59508: IFFALSE 59512
// exit ;
59510: GO 59547
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59512: LD_VAR 0 1
59516: PUSH
59517: LD_INT 1
59519: ARRAY
59520: PPUSH
59521: CALL_OW 250
59525: PPUSH
59526: LD_VAR 0 1
59530: PUSH
59531: LD_INT 1
59533: ARRAY
59534: PPUSH
59535: CALL_OW 251
59539: PPUSH
59540: LD_INT 70
59542: PPUSH
59543: CALL_OW 495
// end ;
59547: PPOPN 1
59549: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59550: LD_EXP 110
59554: PUSH
59555: LD_EXP 144
59559: AND
59560: IFFALSE 59771
59562: GO 59564
59564: DISABLE
59565: LD_INT 0
59567: PPUSH
59568: PPUSH
59569: PPUSH
59570: PPUSH
59571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59572: LD_ADDR_VAR 0 5
59576: PUSH
59577: LD_INT 22
59579: PUSH
59580: LD_OWVAR 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 21
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PPUSH
59603: CALL_OW 69
59607: ST_TO_ADDR
// if not tmp then
59608: LD_VAR 0 5
59612: NOT
59613: IFFALSE 59617
// exit ;
59615: GO 59771
// for i in tmp do
59617: LD_ADDR_VAR 0 1
59621: PUSH
59622: LD_VAR 0 5
59626: PUSH
59627: FOR_IN
59628: IFFALSE 59769
// begin d := rand ( 0 , 5 ) ;
59630: LD_ADDR_VAR 0 4
59634: PUSH
59635: LD_INT 0
59637: PPUSH
59638: LD_INT 5
59640: PPUSH
59641: CALL_OW 12
59645: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59646: LD_ADDR_VAR 0 2
59650: PUSH
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL_OW 250
59660: PPUSH
59661: LD_VAR 0 4
59665: PPUSH
59666: LD_INT 3
59668: PPUSH
59669: LD_INT 12
59671: PPUSH
59672: CALL_OW 12
59676: PPUSH
59677: CALL_OW 272
59681: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59682: LD_ADDR_VAR 0 3
59686: PUSH
59687: LD_VAR 0 1
59691: PPUSH
59692: CALL_OW 251
59696: PPUSH
59697: LD_VAR 0 4
59701: PPUSH
59702: LD_INT 3
59704: PPUSH
59705: LD_INT 12
59707: PPUSH
59708: CALL_OW 12
59712: PPUSH
59713: CALL_OW 273
59717: ST_TO_ADDR
// if ValidHex ( x , y ) then
59718: LD_VAR 0 2
59722: PPUSH
59723: LD_VAR 0 3
59727: PPUSH
59728: CALL_OW 488
59732: IFFALSE 59767
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59734: LD_VAR 0 1
59738: PPUSH
59739: LD_VAR 0 2
59743: PPUSH
59744: LD_VAR 0 3
59748: PPUSH
59749: LD_INT 3
59751: PPUSH
59752: LD_INT 6
59754: PPUSH
59755: CALL_OW 12
59759: PPUSH
59760: LD_INT 1
59762: PPUSH
59763: CALL_OW 483
// end ;
59767: GO 59627
59769: POP
59770: POP
// end ;
59771: PPOPN 5
59773: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59774: LD_EXP 110
59778: PUSH
59779: LD_EXP 145
59783: AND
59784: IFFALSE 59878
59786: GO 59788
59788: DISABLE
59789: LD_INT 0
59791: PPUSH
59792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59793: LD_ADDR_VAR 0 2
59797: PUSH
59798: LD_INT 22
59800: PUSH
59801: LD_OWVAR 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 32
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 21
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: PPUSH
59835: CALL_OW 69
59839: ST_TO_ADDR
// if not tmp then
59840: LD_VAR 0 2
59844: NOT
59845: IFFALSE 59849
// exit ;
59847: GO 59878
// for i in tmp do
59849: LD_ADDR_VAR 0 1
59853: PUSH
59854: LD_VAR 0 2
59858: PUSH
59859: FOR_IN
59860: IFFALSE 59876
// SetFuel ( i , 0 ) ;
59862: LD_VAR 0 1
59866: PPUSH
59867: LD_INT 0
59869: PPUSH
59870: CALL_OW 240
59874: GO 59859
59876: POP
59877: POP
// end ;
59878: PPOPN 2
59880: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59881: LD_EXP 110
59885: PUSH
59886: LD_EXP 146
59890: AND
59891: IFFALSE 59957
59893: GO 59895
59895: DISABLE
59896: LD_INT 0
59898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59899: LD_ADDR_VAR 0 1
59903: PUSH
59904: LD_INT 22
59906: PUSH
59907: LD_OWVAR 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 30
59918: PUSH
59919: LD_INT 29
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PPUSH
59930: CALL_OW 69
59934: ST_TO_ADDR
// if not tmp then
59935: LD_VAR 0 1
59939: NOT
59940: IFFALSE 59944
// exit ;
59942: GO 59957
// DestroyUnit ( tmp [ 1 ] ) ;
59944: LD_VAR 0 1
59948: PUSH
59949: LD_INT 1
59951: ARRAY
59952: PPUSH
59953: CALL_OW 65
// end ;
59957: PPOPN 1
59959: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59960: LD_EXP 110
59964: PUSH
59965: LD_EXP 148
59969: AND
59970: IFFALSE 60099
59972: GO 59974
59974: DISABLE
59975: LD_INT 0
59977: PPUSH
// begin uc_side := 0 ;
59978: LD_ADDR_OWVAR 20
59982: PUSH
59983: LD_INT 0
59985: ST_TO_ADDR
// uc_nation := nation_arabian ;
59986: LD_ADDR_OWVAR 21
59990: PUSH
59991: LD_INT 2
59993: ST_TO_ADDR
// hc_gallery :=  ;
59994: LD_ADDR_OWVAR 33
59998: PUSH
59999: LD_STRING 
60001: ST_TO_ADDR
// hc_name :=  ;
60002: LD_ADDR_OWVAR 26
60006: PUSH
60007: LD_STRING 
60009: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60010: LD_INT 1
60012: PPUSH
60013: LD_INT 11
60015: PPUSH
60016: LD_INT 10
60018: PPUSH
60019: CALL_OW 380
// un := CreateHuman ;
60023: LD_ADDR_VAR 0 1
60027: PUSH
60028: CALL_OW 44
60032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60033: LD_VAR 0 1
60037: PPUSH
60038: LD_INT 1
60040: PPUSH
60041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60045: LD_INT 35
60047: PPUSH
60048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60052: LD_VAR 0 1
60056: PPUSH
60057: LD_INT 22
60059: PUSH
60060: LD_OWVAR 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PPUSH
60069: CALL_OW 69
60073: PPUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: CALL_OW 74
60083: PPUSH
60084: CALL_OW 115
// until IsDead ( un ) ;
60088: LD_VAR 0 1
60092: PPUSH
60093: CALL_OW 301
60097: IFFALSE 60045
// end ;
60099: PPOPN 1
60101: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60102: LD_EXP 110
60106: PUSH
60107: LD_EXP 150
60111: AND
60112: IFFALSE 60124
60114: GO 60116
60116: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60117: LD_STRING earthquake(getX(game), 0, 32)
60119: PPUSH
60120: CALL_OW 559
60124: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60125: LD_EXP 110
60129: PUSH
60130: LD_EXP 151
60134: AND
60135: IFFALSE 60226
60137: GO 60139
60139: DISABLE
60140: LD_INT 0
60142: PPUSH
// begin enable ;
60143: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60144: LD_ADDR_VAR 0 1
60148: PUSH
60149: LD_INT 22
60151: PUSH
60152: LD_OWVAR 2
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 21
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 33
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: PPUSH
60186: CALL_OW 69
60190: ST_TO_ADDR
// if not tmp then
60191: LD_VAR 0 1
60195: NOT
60196: IFFALSE 60200
// exit ;
60198: GO 60226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60200: LD_VAR 0 1
60204: PUSH
60205: LD_INT 1
60207: PPUSH
60208: LD_VAR 0 1
60212: PPUSH
60213: CALL_OW 12
60217: ARRAY
60218: PPUSH
60219: LD_INT 1
60221: PPUSH
60222: CALL_OW 234
// end ;
60226: PPOPN 1
60228: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60229: LD_EXP 110
60233: PUSH
60234: LD_EXP 152
60238: AND
60239: IFFALSE 60380
60241: GO 60243
60243: DISABLE
60244: LD_INT 0
60246: PPUSH
60247: PPUSH
60248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60249: LD_ADDR_VAR 0 3
60253: PUSH
60254: LD_INT 22
60256: PUSH
60257: LD_OWVAR 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 25
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PPUSH
60280: CALL_OW 69
60284: ST_TO_ADDR
// if not tmp then
60285: LD_VAR 0 3
60289: NOT
60290: IFFALSE 60294
// exit ;
60292: GO 60380
// un := tmp [ rand ( 1 , tmp ) ] ;
60294: LD_ADDR_VAR 0 2
60298: PUSH
60299: LD_VAR 0 3
60303: PUSH
60304: LD_INT 1
60306: PPUSH
60307: LD_VAR 0 3
60311: PPUSH
60312: CALL_OW 12
60316: ARRAY
60317: ST_TO_ADDR
// if Crawls ( un ) then
60318: LD_VAR 0 2
60322: PPUSH
60323: CALL_OW 318
60327: IFFALSE 60338
// ComWalk ( un ) ;
60329: LD_VAR 0 2
60333: PPUSH
60334: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60338: LD_VAR 0 2
60342: PPUSH
60343: LD_INT 9
60345: PPUSH
60346: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60350: LD_INT 28
60352: PPUSH
60353: LD_OWVAR 2
60357: PPUSH
60358: LD_INT 2
60360: PPUSH
60361: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60365: LD_INT 29
60367: PPUSH
60368: LD_OWVAR 2
60372: PPUSH
60373: LD_INT 2
60375: PPUSH
60376: CALL_OW 322
// end ;
60380: PPOPN 3
60382: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60383: LD_EXP 110
60387: PUSH
60388: LD_EXP 153
60392: AND
60393: IFFALSE 60504
60395: GO 60397
60397: DISABLE
60398: LD_INT 0
60400: PPUSH
60401: PPUSH
60402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60403: LD_ADDR_VAR 0 3
60407: PUSH
60408: LD_INT 22
60410: PUSH
60411: LD_OWVAR 2
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 25
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PPUSH
60434: CALL_OW 69
60438: ST_TO_ADDR
// if not tmp then
60439: LD_VAR 0 3
60443: NOT
60444: IFFALSE 60448
// exit ;
60446: GO 60504
// un := tmp [ rand ( 1 , tmp ) ] ;
60448: LD_ADDR_VAR 0 2
60452: PUSH
60453: LD_VAR 0 3
60457: PUSH
60458: LD_INT 1
60460: PPUSH
60461: LD_VAR 0 3
60465: PPUSH
60466: CALL_OW 12
60470: ARRAY
60471: ST_TO_ADDR
// if Crawls ( un ) then
60472: LD_VAR 0 2
60476: PPUSH
60477: CALL_OW 318
60481: IFFALSE 60492
// ComWalk ( un ) ;
60483: LD_VAR 0 2
60487: PPUSH
60488: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_INT 8
60499: PPUSH
60500: CALL_OW 336
// end ;
60504: PPOPN 3
60506: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60507: LD_EXP 110
60511: PUSH
60512: LD_EXP 154
60516: AND
60517: IFFALSE 60661
60519: GO 60521
60521: DISABLE
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60526: LD_ADDR_VAR 0 2
60530: PUSH
60531: LD_INT 22
60533: PUSH
60534: LD_OWVAR 2
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 21
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 34
60558: PUSH
60559: LD_INT 12
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 34
60568: PUSH
60569: LD_INT 51
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 34
60578: PUSH
60579: LD_INT 32
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: PPUSH
60597: CALL_OW 69
60601: ST_TO_ADDR
// if not tmp then
60602: LD_VAR 0 2
60606: NOT
60607: IFFALSE 60611
// exit ;
60609: GO 60661
// for i in tmp do
60611: LD_ADDR_VAR 0 1
60615: PUSH
60616: LD_VAR 0 2
60620: PUSH
60621: FOR_IN
60622: IFFALSE 60659
// if GetCargo ( i , mat_artifact ) = 0 then
60624: LD_VAR 0 1
60628: PPUSH
60629: LD_INT 4
60631: PPUSH
60632: CALL_OW 289
60636: PUSH
60637: LD_INT 0
60639: EQUAL
60640: IFFALSE 60657
// SetCargo ( i , mat_siberit , 100 ) ;
60642: LD_VAR 0 1
60646: PPUSH
60647: LD_INT 3
60649: PPUSH
60650: LD_INT 100
60652: PPUSH
60653: CALL_OW 290
60657: GO 60621
60659: POP
60660: POP
// end ;
60661: PPOPN 2
60663: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60664: LD_EXP 110
60668: PUSH
60669: LD_EXP 155
60673: AND
60674: IFFALSE 60857
60676: GO 60678
60678: DISABLE
60679: LD_INT 0
60681: PPUSH
60682: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60683: LD_ADDR_VAR 0 2
60687: PUSH
60688: LD_INT 22
60690: PUSH
60691: LD_OWVAR 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PPUSH
60700: CALL_OW 69
60704: ST_TO_ADDR
// if not tmp then
60705: LD_VAR 0 2
60709: NOT
60710: IFFALSE 60714
// exit ;
60712: GO 60857
// for i := 1 to 2 do
60714: LD_ADDR_VAR 0 1
60718: PUSH
60719: DOUBLE
60720: LD_INT 1
60722: DEC
60723: ST_TO_ADDR
60724: LD_INT 2
60726: PUSH
60727: FOR_TO
60728: IFFALSE 60855
// begin uc_side := your_side ;
60730: LD_ADDR_OWVAR 20
60734: PUSH
60735: LD_OWVAR 2
60739: ST_TO_ADDR
// uc_nation := nation_american ;
60740: LD_ADDR_OWVAR 21
60744: PUSH
60745: LD_INT 1
60747: ST_TO_ADDR
// vc_chassis := us_morphling ;
60748: LD_ADDR_OWVAR 37
60752: PUSH
60753: LD_INT 5
60755: ST_TO_ADDR
// vc_engine := engine_siberite ;
60756: LD_ADDR_OWVAR 39
60760: PUSH
60761: LD_INT 3
60763: ST_TO_ADDR
// vc_control := control_computer ;
60764: LD_ADDR_OWVAR 38
60768: PUSH
60769: LD_INT 3
60771: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60772: LD_ADDR_OWVAR 40
60776: PUSH
60777: LD_INT 10
60779: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60780: LD_VAR 0 2
60784: PUSH
60785: LD_INT 1
60787: ARRAY
60788: PPUSH
60789: CALL_OW 310
60793: NOT
60794: IFFALSE 60841
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60796: CALL_OW 45
60800: PPUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PPUSH
60810: CALL_OW 250
60814: PPUSH
60815: LD_VAR 0 2
60819: PUSH
60820: LD_INT 1
60822: ARRAY
60823: PPUSH
60824: CALL_OW 251
60828: PPUSH
60829: LD_INT 12
60831: PPUSH
60832: LD_INT 1
60834: PPUSH
60835: CALL_OW 50
60839: GO 60853
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60841: CALL_OW 45
60845: PPUSH
60846: LD_INT 1
60848: PPUSH
60849: CALL_OW 51
// end ;
60853: GO 60727
60855: POP
60856: POP
// end ;
60857: PPOPN 2
60859: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60860: LD_EXP 110
60864: PUSH
60865: LD_EXP 156
60869: AND
60870: IFFALSE 61092
60872: GO 60874
60874: DISABLE
60875: LD_INT 0
60877: PPUSH
60878: PPUSH
60879: PPUSH
60880: PPUSH
60881: PPUSH
60882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60883: LD_ADDR_VAR 0 6
60887: PUSH
60888: LD_INT 22
60890: PUSH
60891: LD_OWVAR 2
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 21
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: LD_INT 23
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: PPUSH
60932: CALL_OW 69
60936: ST_TO_ADDR
// if not tmp then
60937: LD_VAR 0 6
60941: NOT
60942: IFFALSE 60946
// exit ;
60944: GO 61092
// s1 := rand ( 1 , 4 ) ;
60946: LD_ADDR_VAR 0 2
60950: PUSH
60951: LD_INT 1
60953: PPUSH
60954: LD_INT 4
60956: PPUSH
60957: CALL_OW 12
60961: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60962: LD_ADDR_VAR 0 4
60966: PUSH
60967: LD_VAR 0 6
60971: PUSH
60972: LD_INT 1
60974: ARRAY
60975: PPUSH
60976: LD_VAR 0 2
60980: PPUSH
60981: CALL_OW 259
60985: ST_TO_ADDR
// if s1 = 1 then
60986: LD_VAR 0 2
60990: PUSH
60991: LD_INT 1
60993: EQUAL
60994: IFFALSE 61014
// s2 := rand ( 2 , 4 ) else
60996: LD_ADDR_VAR 0 3
61000: PUSH
61001: LD_INT 2
61003: PPUSH
61004: LD_INT 4
61006: PPUSH
61007: CALL_OW 12
61011: ST_TO_ADDR
61012: GO 61022
// s2 := 1 ;
61014: LD_ADDR_VAR 0 3
61018: PUSH
61019: LD_INT 1
61021: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61022: LD_ADDR_VAR 0 5
61026: PUSH
61027: LD_VAR 0 6
61031: PUSH
61032: LD_INT 1
61034: ARRAY
61035: PPUSH
61036: LD_VAR 0 3
61040: PPUSH
61041: CALL_OW 259
61045: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61046: LD_VAR 0 6
61050: PUSH
61051: LD_INT 1
61053: ARRAY
61054: PPUSH
61055: LD_VAR 0 2
61059: PPUSH
61060: LD_VAR 0 5
61064: PPUSH
61065: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61069: LD_VAR 0 6
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: PPUSH
61078: LD_VAR 0 3
61082: PPUSH
61083: LD_VAR 0 4
61087: PPUSH
61088: CALL_OW 237
// end ;
61092: PPOPN 6
61094: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61095: LD_EXP 110
61099: PUSH
61100: LD_EXP 157
61104: AND
61105: IFFALSE 61184
61107: GO 61109
61109: DISABLE
61110: LD_INT 0
61112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61113: LD_ADDR_VAR 0 1
61117: PUSH
61118: LD_INT 22
61120: PUSH
61121: LD_OWVAR 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 30
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PPUSH
61144: CALL_OW 69
61148: ST_TO_ADDR
// if not tmp then
61149: LD_VAR 0 1
61153: NOT
61154: IFFALSE 61158
// exit ;
61156: GO 61184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61158: LD_VAR 0 1
61162: PUSH
61163: LD_INT 1
61165: PPUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 12
61175: ARRAY
61176: PPUSH
61177: LD_INT 1
61179: PPUSH
61180: CALL_OW 234
// end ;
61184: PPOPN 1
61186: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61187: LD_EXP 110
61191: PUSH
61192: LD_EXP 158
61196: AND
61197: IFFALSE 61309
61199: GO 61201
61201: DISABLE
61202: LD_INT 0
61204: PPUSH
61205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61206: LD_ADDR_VAR 0 2
61210: PUSH
61211: LD_INT 22
61213: PUSH
61214: LD_OWVAR 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 30
61228: PUSH
61229: LD_INT 27
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 30
61238: PUSH
61239: LD_INT 26
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 30
61248: PUSH
61249: LD_INT 28
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PPUSH
61266: CALL_OW 69
61270: ST_TO_ADDR
// if not tmp then
61271: LD_VAR 0 2
61275: NOT
61276: IFFALSE 61280
// exit ;
61278: GO 61309
// for i in tmp do
61280: LD_ADDR_VAR 0 1
61284: PUSH
61285: LD_VAR 0 2
61289: PUSH
61290: FOR_IN
61291: IFFALSE 61307
// SetLives ( i , 1 ) ;
61293: LD_VAR 0 1
61297: PPUSH
61298: LD_INT 1
61300: PPUSH
61301: CALL_OW 234
61305: GO 61290
61307: POP
61308: POP
// end ;
61309: PPOPN 2
61311: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61312: LD_EXP 110
61316: PUSH
61317: LD_EXP 159
61321: AND
61322: IFFALSE 61609
61324: GO 61326
61326: DISABLE
61327: LD_INT 0
61329: PPUSH
61330: PPUSH
61331: PPUSH
// begin i := rand ( 1 , 7 ) ;
61332: LD_ADDR_VAR 0 1
61336: PUSH
61337: LD_INT 1
61339: PPUSH
61340: LD_INT 7
61342: PPUSH
61343: CALL_OW 12
61347: ST_TO_ADDR
// case i of 1 :
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 1
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61361
61359: GO 61371
61361: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61362: LD_STRING earthquake(getX(game), 0, 32)
61364: PPUSH
61365: CALL_OW 559
61369: GO 61609
61371: LD_INT 2
61373: DOUBLE
61374: EQUAL
61375: IFTRUE 61379
61377: GO 61393
61379: POP
// begin ToLua ( displayStucuk(); ) ;
61380: LD_STRING displayStucuk();
61382: PPUSH
61383: CALL_OW 559
// ResetFog ;
61387: CALL_OW 335
// end ; 3 :
61391: GO 61609
61393: LD_INT 3
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61401
61399: GO 61505
61401: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61402: LD_ADDR_VAR 0 2
61406: PUSH
61407: LD_INT 22
61409: PUSH
61410: LD_OWVAR 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 25
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PPUSH
61433: CALL_OW 69
61437: ST_TO_ADDR
// if not tmp then
61438: LD_VAR 0 2
61442: NOT
61443: IFFALSE 61447
// exit ;
61445: GO 61609
// un := tmp [ rand ( 1 , tmp ) ] ;
61447: LD_ADDR_VAR 0 3
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_INT 1
61459: PPUSH
61460: LD_VAR 0 2
61464: PPUSH
61465: CALL_OW 12
61469: ARRAY
61470: ST_TO_ADDR
// if Crawls ( un ) then
61471: LD_VAR 0 3
61475: PPUSH
61476: CALL_OW 318
61480: IFFALSE 61491
// ComWalk ( un ) ;
61482: LD_VAR 0 3
61486: PPUSH
61487: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61491: LD_VAR 0 3
61495: PPUSH
61496: LD_INT 8
61498: PPUSH
61499: CALL_OW 336
// end ; 4 :
61503: GO 61609
61505: LD_INT 4
61507: DOUBLE
61508: EQUAL
61509: IFTRUE 61513
61511: GO 61587
61513: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61514: LD_ADDR_VAR 0 2
61518: PUSH
61519: LD_INT 22
61521: PUSH
61522: LD_OWVAR 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 30
61533: PUSH
61534: LD_INT 29
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PPUSH
61545: CALL_OW 69
61549: ST_TO_ADDR
// if not tmp then
61550: LD_VAR 0 2
61554: NOT
61555: IFFALSE 61559
// exit ;
61557: GO 61609
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61559: LD_VAR 0 2
61563: PUSH
61564: LD_INT 1
61566: ARRAY
61567: PPUSH
61568: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61572: LD_VAR 0 2
61576: PUSH
61577: LD_INT 1
61579: ARRAY
61580: PPUSH
61581: CALL_OW 65
// end ; 5 .. 7 :
61585: GO 61609
61587: LD_INT 5
61589: DOUBLE
61590: GREATEREQUAL
61591: IFFALSE 61599
61593: LD_INT 7
61595: DOUBLE
61596: LESSEQUAL
61597: IFTRUE 61601
61599: GO 61608
61601: POP
// StreamSibBomb ; end ;
61602: CALL 57846 0 0
61606: GO 61609
61608: POP
// end ;
61609: PPOPN 3
61611: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61612: LD_EXP 110
61616: PUSH
61617: LD_EXP 160
61621: AND
61622: IFFALSE 61778
61624: GO 61626
61626: DISABLE
61627: LD_INT 0
61629: PPUSH
61630: PPUSH
61631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61632: LD_ADDR_VAR 0 2
61636: PUSH
61637: LD_INT 81
61639: PUSH
61640: LD_OWVAR 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 21
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 21
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PPUSH
61681: CALL_OW 69
61685: ST_TO_ADDR
// if not tmp then
61686: LD_VAR 0 2
61690: NOT
61691: IFFALSE 61695
// exit ;
61693: GO 61778
// p := 0 ;
61695: LD_ADDR_VAR 0 3
61699: PUSH
61700: LD_INT 0
61702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61703: LD_INT 35
61705: PPUSH
61706: CALL_OW 67
// p := p + 1 ;
61710: LD_ADDR_VAR 0 3
61714: PUSH
61715: LD_VAR 0 3
61719: PUSH
61720: LD_INT 1
61722: PLUS
61723: ST_TO_ADDR
// for i in tmp do
61724: LD_ADDR_VAR 0 1
61728: PUSH
61729: LD_VAR 0 2
61733: PUSH
61734: FOR_IN
61735: IFFALSE 61766
// if GetLives ( i ) < 1000 then
61737: LD_VAR 0 1
61741: PPUSH
61742: CALL_OW 256
61746: PUSH
61747: LD_INT 1000
61749: LESS
61750: IFFALSE 61764
// SetLives ( i , 1000 ) ;
61752: LD_VAR 0 1
61756: PPUSH
61757: LD_INT 1000
61759: PPUSH
61760: CALL_OW 234
61764: GO 61734
61766: POP
61767: POP
// until p > 20 ;
61768: LD_VAR 0 3
61772: PUSH
61773: LD_INT 20
61775: GREATER
61776: IFFALSE 61703
// end ;
61778: PPOPN 3
61780: END
// every 0 0$1 trigger StreamModeActive and sTime do
61781: LD_EXP 110
61785: PUSH
61786: LD_EXP 161
61790: AND
61791: IFFALSE 61826
61793: GO 61795
61795: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61796: LD_INT 28
61798: PPUSH
61799: LD_OWVAR 2
61803: PPUSH
61804: LD_INT 2
61806: PPUSH
61807: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61811: LD_INT 30
61813: PPUSH
61814: LD_OWVAR 2
61818: PPUSH
61819: LD_INT 2
61821: PPUSH
61822: CALL_OW 322
// end ;
61826: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61827: LD_EXP 110
61831: PUSH
61832: LD_EXP 162
61836: AND
61837: IFFALSE 61958
61839: GO 61841
61841: DISABLE
61842: LD_INT 0
61844: PPUSH
61845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61846: LD_ADDR_VAR 0 2
61850: PUSH
61851: LD_INT 22
61853: PUSH
61854: LD_OWVAR 2
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 21
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 23
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: PPUSH
61895: CALL_OW 69
61899: ST_TO_ADDR
// if not tmp then
61900: LD_VAR 0 2
61904: NOT
61905: IFFALSE 61909
// exit ;
61907: GO 61958
// for i in tmp do
61909: LD_ADDR_VAR 0 1
61913: PUSH
61914: LD_VAR 0 2
61918: PUSH
61919: FOR_IN
61920: IFFALSE 61956
// begin if Crawls ( i ) then
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 318
61931: IFFALSE 61942
// ComWalk ( i ) ;
61933: LD_VAR 0 1
61937: PPUSH
61938: CALL_OW 138
// SetClass ( i , 2 ) ;
61942: LD_VAR 0 1
61946: PPUSH
61947: LD_INT 2
61949: PPUSH
61950: CALL_OW 336
// end ;
61954: GO 61919
61956: POP
61957: POP
// end ;
61958: PPOPN 2
61960: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61961: LD_EXP 110
61965: PUSH
61966: LD_EXP 163
61970: AND
61971: IFFALSE 62259
61973: GO 61975
61975: DISABLE
61976: LD_INT 0
61978: PPUSH
61979: PPUSH
61980: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61981: LD_OWVAR 2
61985: PPUSH
61986: LD_INT 9
61988: PPUSH
61989: LD_INT 1
61991: PPUSH
61992: LD_INT 1
61994: PPUSH
61995: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61999: LD_INT 9
62001: PPUSH
62002: LD_OWVAR 2
62006: PPUSH
62007: CALL_OW 343
// uc_side := 9 ;
62011: LD_ADDR_OWVAR 20
62015: PUSH
62016: LD_INT 9
62018: ST_TO_ADDR
// uc_nation := 2 ;
62019: LD_ADDR_OWVAR 21
62023: PUSH
62024: LD_INT 2
62026: ST_TO_ADDR
// hc_name := Dark Warrior ;
62027: LD_ADDR_OWVAR 26
62031: PUSH
62032: LD_STRING Dark Warrior
62034: ST_TO_ADDR
// hc_gallery :=  ;
62035: LD_ADDR_OWVAR 33
62039: PUSH
62040: LD_STRING 
62042: ST_TO_ADDR
// hc_noskilllimit := true ;
62043: LD_ADDR_OWVAR 76
62047: PUSH
62048: LD_INT 1
62050: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62051: LD_ADDR_OWVAR 31
62055: PUSH
62056: LD_INT 30
62058: PUSH
62059: LD_INT 30
62061: PUSH
62062: LD_INT 30
62064: PUSH
62065: LD_INT 30
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// un := CreateHuman ;
62074: LD_ADDR_VAR 0 3
62078: PUSH
62079: CALL_OW 44
62083: ST_TO_ADDR
// hc_noskilllimit := false ;
62084: LD_ADDR_OWVAR 76
62088: PUSH
62089: LD_INT 0
62091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62092: LD_VAR 0 3
62096: PPUSH
62097: LD_INT 1
62099: PPUSH
62100: CALL_OW 51
// ToLua ( playRanger() ) ;
62104: LD_STRING playRanger()
62106: PPUSH
62107: CALL_OW 559
// p := 0 ;
62111: LD_ADDR_VAR 0 2
62115: PUSH
62116: LD_INT 0
62118: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62119: LD_INT 35
62121: PPUSH
62122: CALL_OW 67
// p := p + 1 ;
62126: LD_ADDR_VAR 0 2
62130: PUSH
62131: LD_VAR 0 2
62135: PUSH
62136: LD_INT 1
62138: PLUS
62139: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62140: LD_VAR 0 3
62144: PPUSH
62145: CALL_OW 256
62149: PUSH
62150: LD_INT 1000
62152: LESS
62153: IFFALSE 62167
// SetLives ( un , 1000 ) ;
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_INT 1000
62162: PPUSH
62163: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62167: LD_VAR 0 3
62171: PPUSH
62172: LD_INT 81
62174: PUSH
62175: LD_OWVAR 2
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 91
62186: PUSH
62187: LD_VAR 0 3
62191: PUSH
62192: LD_INT 30
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PPUSH
62204: CALL_OW 69
62208: PPUSH
62209: LD_VAR 0 3
62213: PPUSH
62214: CALL_OW 74
62218: PPUSH
62219: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 80
62230: GREATER
62231: PUSH
62232: LD_VAR 0 3
62236: PPUSH
62237: CALL_OW 301
62241: OR
62242: IFFALSE 62119
// if un then
62244: LD_VAR 0 3
62248: IFFALSE 62259
// RemoveUnit ( un ) ;
62250: LD_VAR 0 3
62254: PPUSH
62255: CALL_OW 64
// end ;
62259: PPOPN 3
62261: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62262: LD_EXP 164
62266: IFFALSE 62382
62268: GO 62270
62270: DISABLE
62271: LD_INT 0
62273: PPUSH
62274: PPUSH
62275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62276: LD_ADDR_VAR 0 2
62280: PUSH
62281: LD_INT 81
62283: PUSH
62284: LD_OWVAR 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 21
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PPUSH
62307: CALL_OW 69
62311: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62312: LD_STRING playComputer()
62314: PPUSH
62315: CALL_OW 559
// if not tmp then
62319: LD_VAR 0 2
62323: NOT
62324: IFFALSE 62328
// exit ;
62326: GO 62382
// for i in tmp do
62328: LD_ADDR_VAR 0 1
62332: PUSH
62333: LD_VAR 0 2
62337: PUSH
62338: FOR_IN
62339: IFFALSE 62380
// for j := 1 to 4 do
62341: LD_ADDR_VAR 0 3
62345: PUSH
62346: DOUBLE
62347: LD_INT 1
62349: DEC
62350: ST_TO_ADDR
62351: LD_INT 4
62353: PUSH
62354: FOR_TO
62355: IFFALSE 62376
// SetSkill ( i , j , 10 ) ;
62357: LD_VAR 0 1
62361: PPUSH
62362: LD_VAR 0 3
62366: PPUSH
62367: LD_INT 10
62369: PPUSH
62370: CALL_OW 237
62374: GO 62354
62376: POP
62377: POP
62378: GO 62338
62380: POP
62381: POP
// end ;
62382: PPOPN 3
62384: END
// every 0 0$1 trigger s30 do var i , tmp ;
62385: LD_EXP 165
62389: IFFALSE 62458
62391: GO 62393
62393: DISABLE
62394: LD_INT 0
62396: PPUSH
62397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62398: LD_ADDR_VAR 0 2
62402: PUSH
62403: LD_INT 22
62405: PUSH
62406: LD_OWVAR 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PPUSH
62415: CALL_OW 69
62419: ST_TO_ADDR
// if not tmp then
62420: LD_VAR 0 2
62424: NOT
62425: IFFALSE 62429
// exit ;
62427: GO 62458
// for i in tmp do
62429: LD_ADDR_VAR 0 1
62433: PUSH
62434: LD_VAR 0 2
62438: PUSH
62439: FOR_IN
62440: IFFALSE 62456
// SetLives ( i , 300 ) ;
62442: LD_VAR 0 1
62446: PPUSH
62447: LD_INT 300
62449: PPUSH
62450: CALL_OW 234
62454: GO 62439
62456: POP
62457: POP
// end ;
62458: PPOPN 2
62460: END
// every 0 0$1 trigger s60 do var i , tmp ;
62461: LD_EXP 166
62465: IFFALSE 62534
62467: GO 62469
62469: DISABLE
62470: LD_INT 0
62472: PPUSH
62473: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62474: LD_ADDR_VAR 0 2
62478: PUSH
62479: LD_INT 22
62481: PUSH
62482: LD_OWVAR 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PPUSH
62491: CALL_OW 69
62495: ST_TO_ADDR
// if not tmp then
62496: LD_VAR 0 2
62500: NOT
62501: IFFALSE 62505
// exit ;
62503: GO 62534
// for i in tmp do
62505: LD_ADDR_VAR 0 1
62509: PUSH
62510: LD_VAR 0 2
62514: PUSH
62515: FOR_IN
62516: IFFALSE 62532
// SetLives ( i , 600 ) ;
62518: LD_VAR 0 1
62522: PPUSH
62523: LD_INT 600
62525: PPUSH
62526: CALL_OW 234
62530: GO 62515
62532: POP
62533: POP
// end ;
62534: PPOPN 2
62536: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62537: LD_INT 0
62539: PPUSH
// case cmd of 301 :
62540: LD_VAR 0 1
62544: PUSH
62545: LD_INT 301
62547: DOUBLE
62548: EQUAL
62549: IFTRUE 62553
62551: GO 62585
62553: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62554: LD_VAR 0 6
62558: PPUSH
62559: LD_VAR 0 7
62563: PPUSH
62564: LD_VAR 0 8
62568: PPUSH
62569: LD_VAR 0 4
62573: PPUSH
62574: LD_VAR 0 5
62578: PPUSH
62579: CALL 63786 0 5
62583: GO 62706
62585: LD_INT 302
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62593
62591: GO 62630
62593: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62594: LD_VAR 0 6
62598: PPUSH
62599: LD_VAR 0 7
62603: PPUSH
62604: LD_VAR 0 8
62608: PPUSH
62609: LD_VAR 0 9
62613: PPUSH
62614: LD_VAR 0 4
62618: PPUSH
62619: LD_VAR 0 5
62623: PPUSH
62624: CALL 63877 0 6
62628: GO 62706
62630: LD_INT 303
62632: DOUBLE
62633: EQUAL
62634: IFTRUE 62638
62636: GO 62675
62638: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62639: LD_VAR 0 6
62643: PPUSH
62644: LD_VAR 0 7
62648: PPUSH
62649: LD_VAR 0 8
62653: PPUSH
62654: LD_VAR 0 9
62658: PPUSH
62659: LD_VAR 0 4
62663: PPUSH
62664: LD_VAR 0 5
62668: PPUSH
62669: CALL 62711 0 6
62673: GO 62706
62675: LD_INT 304
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62683
62681: GO 62705
62683: POP
// hHackTeleport ( unit , x , y ) ; end ;
62684: LD_VAR 0 2
62688: PPUSH
62689: LD_VAR 0 4
62693: PPUSH
62694: LD_VAR 0 5
62698: PPUSH
62699: CALL 64470 0 3
62703: GO 62706
62705: POP
// end ;
62706: LD_VAR 0 12
62710: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62711: LD_INT 0
62713: PPUSH
62714: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62715: LD_VAR 0 1
62719: PUSH
62720: LD_INT 1
62722: LESS
62723: PUSH
62724: LD_VAR 0 1
62728: PUSH
62729: LD_INT 3
62731: GREATER
62732: OR
62733: PUSH
62734: LD_VAR 0 5
62738: PPUSH
62739: LD_VAR 0 6
62743: PPUSH
62744: CALL_OW 428
62748: OR
62749: IFFALSE 62753
// exit ;
62751: GO 63473
// uc_side := your_side ;
62753: LD_ADDR_OWVAR 20
62757: PUSH
62758: LD_OWVAR 2
62762: ST_TO_ADDR
// uc_nation := nation ;
62763: LD_ADDR_OWVAR 21
62767: PUSH
62768: LD_VAR 0 1
62772: ST_TO_ADDR
// bc_level = 1 ;
62773: LD_ADDR_OWVAR 43
62777: PUSH
62778: LD_INT 1
62780: ST_TO_ADDR
// case btype of 1 :
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 1
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62794
62792: GO 62805
62794: POP
// bc_type := b_depot ; 2 :
62795: LD_ADDR_OWVAR 42
62799: PUSH
62800: LD_INT 0
62802: ST_TO_ADDR
62803: GO 63417
62805: LD_INT 2
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62813
62811: GO 62824
62813: POP
// bc_type := b_warehouse ; 3 :
62814: LD_ADDR_OWVAR 42
62818: PUSH
62819: LD_INT 1
62821: ST_TO_ADDR
62822: GO 63417
62824: LD_INT 3
62826: DOUBLE
62827: EQUAL
62828: IFTRUE 62832
62830: GO 62843
62832: POP
// bc_type := b_lab ; 4 .. 9 :
62833: LD_ADDR_OWVAR 42
62837: PUSH
62838: LD_INT 6
62840: ST_TO_ADDR
62841: GO 63417
62843: LD_INT 4
62845: DOUBLE
62846: GREATEREQUAL
62847: IFFALSE 62855
62849: LD_INT 9
62851: DOUBLE
62852: LESSEQUAL
62853: IFTRUE 62857
62855: GO 62909
62857: POP
// begin bc_type := b_lab_half ;
62858: LD_ADDR_OWVAR 42
62862: PUSH
62863: LD_INT 7
62865: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62866: LD_ADDR_OWVAR 44
62870: PUSH
62871: LD_INT 10
62873: PUSH
62874: LD_INT 11
62876: PUSH
62877: LD_INT 12
62879: PUSH
62880: LD_INT 15
62882: PUSH
62883: LD_INT 14
62885: PUSH
62886: LD_INT 13
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 3
62904: MINUS
62905: ARRAY
62906: ST_TO_ADDR
// end ; 10 .. 13 :
62907: GO 63417
62909: LD_INT 10
62911: DOUBLE
62912: GREATEREQUAL
62913: IFFALSE 62921
62915: LD_INT 13
62917: DOUBLE
62918: LESSEQUAL
62919: IFTRUE 62923
62921: GO 63000
62923: POP
// begin bc_type := b_lab_full ;
62924: LD_ADDR_OWVAR 42
62928: PUSH
62929: LD_INT 8
62931: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62932: LD_ADDR_OWVAR 44
62936: PUSH
62937: LD_INT 10
62939: PUSH
62940: LD_INT 12
62942: PUSH
62943: LD_INT 14
62945: PUSH
62946: LD_INT 13
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 2
62959: PUSH
62960: LD_INT 9
62962: MINUS
62963: ARRAY
62964: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62965: LD_ADDR_OWVAR 45
62969: PUSH
62970: LD_INT 11
62972: PUSH
62973: LD_INT 15
62975: PUSH
62976: LD_INT 12
62978: PUSH
62979: LD_INT 15
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: PUSH
62988: LD_VAR 0 2
62992: PUSH
62993: LD_INT 9
62995: MINUS
62996: ARRAY
62997: ST_TO_ADDR
// end ; 14 :
62998: GO 63417
63000: LD_INT 14
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63008
63006: GO 63019
63008: POP
// bc_type := b_workshop ; 15 :
63009: LD_ADDR_OWVAR 42
63013: PUSH
63014: LD_INT 2
63016: ST_TO_ADDR
63017: GO 63417
63019: LD_INT 15
63021: DOUBLE
63022: EQUAL
63023: IFTRUE 63027
63025: GO 63038
63027: POP
// bc_type := b_factory ; 16 :
63028: LD_ADDR_OWVAR 42
63032: PUSH
63033: LD_INT 3
63035: ST_TO_ADDR
63036: GO 63417
63038: LD_INT 16
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63046
63044: GO 63057
63046: POP
// bc_type := b_ext_gun ; 17 :
63047: LD_ADDR_OWVAR 42
63051: PUSH
63052: LD_INT 17
63054: ST_TO_ADDR
63055: GO 63417
63057: LD_INT 17
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63065
63063: GO 63093
63065: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63066: LD_ADDR_OWVAR 42
63070: PUSH
63071: LD_INT 19
63073: PUSH
63074: LD_INT 23
63076: PUSH
63077: LD_INT 19
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 1
63089: ARRAY
63090: ST_TO_ADDR
63091: GO 63417
63093: LD_INT 18
63095: DOUBLE
63096: EQUAL
63097: IFTRUE 63101
63099: GO 63112
63101: POP
// bc_type := b_ext_radar ; 19 :
63102: LD_ADDR_OWVAR 42
63106: PUSH
63107: LD_INT 20
63109: ST_TO_ADDR
63110: GO 63417
63112: LD_INT 19
63114: DOUBLE
63115: EQUAL
63116: IFTRUE 63120
63118: GO 63131
63120: POP
// bc_type := b_ext_radio ; 20 :
63121: LD_ADDR_OWVAR 42
63125: PUSH
63126: LD_INT 22
63128: ST_TO_ADDR
63129: GO 63417
63131: LD_INT 20
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63139
63137: GO 63150
63139: POP
// bc_type := b_ext_siberium ; 21 :
63140: LD_ADDR_OWVAR 42
63144: PUSH
63145: LD_INT 21
63147: ST_TO_ADDR
63148: GO 63417
63150: LD_INT 21
63152: DOUBLE
63153: EQUAL
63154: IFTRUE 63158
63156: GO 63169
63158: POP
// bc_type := b_ext_computer ; 22 :
63159: LD_ADDR_OWVAR 42
63163: PUSH
63164: LD_INT 24
63166: ST_TO_ADDR
63167: GO 63417
63169: LD_INT 22
63171: DOUBLE
63172: EQUAL
63173: IFTRUE 63177
63175: GO 63188
63177: POP
// bc_type := b_ext_track ; 23 :
63178: LD_ADDR_OWVAR 42
63182: PUSH
63183: LD_INT 16
63185: ST_TO_ADDR
63186: GO 63417
63188: LD_INT 23
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63196
63194: GO 63207
63196: POP
// bc_type := b_ext_laser ; 24 :
63197: LD_ADDR_OWVAR 42
63201: PUSH
63202: LD_INT 25
63204: ST_TO_ADDR
63205: GO 63417
63207: LD_INT 24
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63226
63215: POP
// bc_type := b_control_tower ; 25 :
63216: LD_ADDR_OWVAR 42
63220: PUSH
63221: LD_INT 36
63223: ST_TO_ADDR
63224: GO 63417
63226: LD_INT 25
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63234
63232: GO 63245
63234: POP
// bc_type := b_breastwork ; 26 :
63235: LD_ADDR_OWVAR 42
63239: PUSH
63240: LD_INT 31
63242: ST_TO_ADDR
63243: GO 63417
63245: LD_INT 26
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63264
63253: POP
// bc_type := b_bunker ; 27 :
63254: LD_ADDR_OWVAR 42
63258: PUSH
63259: LD_INT 32
63261: ST_TO_ADDR
63262: GO 63417
63264: LD_INT 27
63266: DOUBLE
63267: EQUAL
63268: IFTRUE 63272
63270: GO 63283
63272: POP
// bc_type := b_turret ; 28 :
63273: LD_ADDR_OWVAR 42
63277: PUSH
63278: LD_INT 33
63280: ST_TO_ADDR
63281: GO 63417
63283: LD_INT 28
63285: DOUBLE
63286: EQUAL
63287: IFTRUE 63291
63289: GO 63302
63291: POP
// bc_type := b_armoury ; 29 :
63292: LD_ADDR_OWVAR 42
63296: PUSH
63297: LD_INT 4
63299: ST_TO_ADDR
63300: GO 63417
63302: LD_INT 29
63304: DOUBLE
63305: EQUAL
63306: IFTRUE 63310
63308: GO 63321
63310: POP
// bc_type := b_barracks ; 30 :
63311: LD_ADDR_OWVAR 42
63315: PUSH
63316: LD_INT 5
63318: ST_TO_ADDR
63319: GO 63417
63321: LD_INT 30
63323: DOUBLE
63324: EQUAL
63325: IFTRUE 63329
63327: GO 63340
63329: POP
// bc_type := b_solar_power ; 31 :
63330: LD_ADDR_OWVAR 42
63334: PUSH
63335: LD_INT 27
63337: ST_TO_ADDR
63338: GO 63417
63340: LD_INT 31
63342: DOUBLE
63343: EQUAL
63344: IFTRUE 63348
63346: GO 63359
63348: POP
// bc_type := b_oil_power ; 32 :
63349: LD_ADDR_OWVAR 42
63353: PUSH
63354: LD_INT 26
63356: ST_TO_ADDR
63357: GO 63417
63359: LD_INT 32
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63367
63365: GO 63378
63367: POP
// bc_type := b_siberite_power ; 33 :
63368: LD_ADDR_OWVAR 42
63372: PUSH
63373: LD_INT 28
63375: ST_TO_ADDR
63376: GO 63417
63378: LD_INT 33
63380: DOUBLE
63381: EQUAL
63382: IFTRUE 63386
63384: GO 63397
63386: POP
// bc_type := b_oil_mine ; 34 :
63387: LD_ADDR_OWVAR 42
63391: PUSH
63392: LD_INT 29
63394: ST_TO_ADDR
63395: GO 63417
63397: LD_INT 34
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63405
63403: GO 63416
63405: POP
// bc_type := b_siberite_mine ; end ;
63406: LD_ADDR_OWVAR 42
63410: PUSH
63411: LD_INT 30
63413: ST_TO_ADDR
63414: GO 63417
63416: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63417: LD_ADDR_VAR 0 8
63421: PUSH
63422: LD_VAR 0 5
63426: PPUSH
63427: LD_VAR 0 6
63431: PPUSH
63432: LD_VAR 0 3
63436: PPUSH
63437: CALL_OW 47
63441: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63442: LD_OWVAR 42
63446: PUSH
63447: LD_INT 32
63449: PUSH
63450: LD_INT 33
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: IN
63457: IFFALSE 63473
// PlaceWeaponTurret ( b , weapon ) ;
63459: LD_VAR 0 8
63463: PPUSH
63464: LD_VAR 0 4
63468: PPUSH
63469: CALL_OW 431
// end ;
63473: LD_VAR 0 7
63477: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
63482: PPUSH
63483: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63484: LD_ADDR_VAR 0 4
63488: PUSH
63489: LD_INT 22
63491: PUSH
63492: LD_OWVAR 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: LD_INT 30
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 30
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PPUSH
63533: CALL_OW 69
63537: ST_TO_ADDR
// if not tmp then
63538: LD_VAR 0 4
63542: NOT
63543: IFFALSE 63547
// exit ;
63545: GO 63606
// for i in tmp do
63547: LD_ADDR_VAR 0 2
63551: PUSH
63552: LD_VAR 0 4
63556: PUSH
63557: FOR_IN
63558: IFFALSE 63604
// for j = 1 to 3 do
63560: LD_ADDR_VAR 0 3
63564: PUSH
63565: DOUBLE
63566: LD_INT 1
63568: DEC
63569: ST_TO_ADDR
63570: LD_INT 3
63572: PUSH
63573: FOR_TO
63574: IFFALSE 63600
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63576: LD_VAR 0 2
63580: PPUSH
63581: CALL_OW 274
63585: PPUSH
63586: LD_VAR 0 3
63590: PPUSH
63591: LD_INT 99999
63593: PPUSH
63594: CALL_OW 277
63598: GO 63573
63600: POP
63601: POP
63602: GO 63557
63604: POP
63605: POP
// end ;
63606: LD_VAR 0 1
63610: RET
// export function hHackSetLevel10 ; var i , j ; begin
63611: LD_INT 0
63613: PPUSH
63614: PPUSH
63615: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63616: LD_ADDR_VAR 0 2
63620: PUSH
63621: LD_INT 21
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PPUSH
63631: CALL_OW 69
63635: PUSH
63636: FOR_IN
63637: IFFALSE 63689
// if IsSelected ( i ) then
63639: LD_VAR 0 2
63643: PPUSH
63644: CALL_OW 306
63648: IFFALSE 63687
// begin for j := 1 to 4 do
63650: LD_ADDR_VAR 0 3
63654: PUSH
63655: DOUBLE
63656: LD_INT 1
63658: DEC
63659: ST_TO_ADDR
63660: LD_INT 4
63662: PUSH
63663: FOR_TO
63664: IFFALSE 63685
// SetSkill ( i , j , 10 ) ;
63666: LD_VAR 0 2
63670: PPUSH
63671: LD_VAR 0 3
63675: PPUSH
63676: LD_INT 10
63678: PPUSH
63679: CALL_OW 237
63683: GO 63663
63685: POP
63686: POP
// end ;
63687: GO 63636
63689: POP
63690: POP
// end ;
63691: LD_VAR 0 1
63695: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63696: LD_INT 0
63698: PPUSH
63699: PPUSH
63700: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63701: LD_ADDR_VAR 0 2
63705: PUSH
63706: LD_INT 22
63708: PUSH
63709: LD_OWVAR 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 21
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PPUSH
63732: CALL_OW 69
63736: PUSH
63737: FOR_IN
63738: IFFALSE 63779
// begin for j := 1 to 4 do
63740: LD_ADDR_VAR 0 3
63744: PUSH
63745: DOUBLE
63746: LD_INT 1
63748: DEC
63749: ST_TO_ADDR
63750: LD_INT 4
63752: PUSH
63753: FOR_TO
63754: IFFALSE 63775
// SetSkill ( i , j , 10 ) ;
63756: LD_VAR 0 2
63760: PPUSH
63761: LD_VAR 0 3
63765: PPUSH
63766: LD_INT 10
63768: PPUSH
63769: CALL_OW 237
63773: GO 63753
63775: POP
63776: POP
// end ;
63777: GO 63737
63779: POP
63780: POP
// end ;
63781: LD_VAR 0 1
63785: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63786: LD_INT 0
63788: PPUSH
// uc_side := your_side ;
63789: LD_ADDR_OWVAR 20
63793: PUSH
63794: LD_OWVAR 2
63798: ST_TO_ADDR
// uc_nation := nation ;
63799: LD_ADDR_OWVAR 21
63803: PUSH
63804: LD_VAR 0 1
63808: ST_TO_ADDR
// InitHc ;
63809: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63813: LD_INT 0
63815: PPUSH
63816: LD_VAR 0 2
63820: PPUSH
63821: LD_VAR 0 3
63825: PPUSH
63826: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63830: LD_VAR 0 4
63834: PPUSH
63835: LD_VAR 0 5
63839: PPUSH
63840: CALL_OW 428
63844: PUSH
63845: LD_INT 0
63847: EQUAL
63848: IFFALSE 63872
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63850: CALL_OW 44
63854: PPUSH
63855: LD_VAR 0 4
63859: PPUSH
63860: LD_VAR 0 5
63864: PPUSH
63865: LD_INT 1
63867: PPUSH
63868: CALL_OW 48
// end ;
63872: LD_VAR 0 6
63876: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63877: LD_INT 0
63879: PPUSH
63880: PPUSH
// uc_side := your_side ;
63881: LD_ADDR_OWVAR 20
63885: PUSH
63886: LD_OWVAR 2
63890: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63891: LD_VAR 0 1
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: LD_INT 4
63907: PUSH
63908: LD_INT 5
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: IN
63918: IFFALSE 63930
// uc_nation := nation_american else
63920: LD_ADDR_OWVAR 21
63924: PUSH
63925: LD_INT 1
63927: ST_TO_ADDR
63928: GO 63973
// if chassis in [ 11 , 12 , 13 , 14 ] then
63930: LD_VAR 0 1
63934: PUSH
63935: LD_INT 11
63937: PUSH
63938: LD_INT 12
63940: PUSH
63941: LD_INT 13
63943: PUSH
63944: LD_INT 14
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: IN
63953: IFFALSE 63965
// uc_nation := nation_arabian else
63955: LD_ADDR_OWVAR 21
63959: PUSH
63960: LD_INT 2
63962: ST_TO_ADDR
63963: GO 63973
// uc_nation := nation_russian ;
63965: LD_ADDR_OWVAR 21
63969: PUSH
63970: LD_INT 3
63972: ST_TO_ADDR
// vc_chassis := chassis ;
63973: LD_ADDR_OWVAR 37
63977: PUSH
63978: LD_VAR 0 1
63982: ST_TO_ADDR
// vc_engine := engine ;
63983: LD_ADDR_OWVAR 39
63987: PUSH
63988: LD_VAR 0 2
63992: ST_TO_ADDR
// vc_control := control ;
63993: LD_ADDR_OWVAR 38
63997: PUSH
63998: LD_VAR 0 3
64002: ST_TO_ADDR
// vc_weapon := weapon ;
64003: LD_ADDR_OWVAR 40
64007: PUSH
64008: LD_VAR 0 4
64012: ST_TO_ADDR
// un := CreateVehicle ;
64013: LD_ADDR_VAR 0 8
64017: PUSH
64018: CALL_OW 45
64022: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64023: LD_VAR 0 8
64027: PPUSH
64028: LD_INT 0
64030: PPUSH
64031: LD_INT 5
64033: PPUSH
64034: CALL_OW 12
64038: PPUSH
64039: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64043: LD_VAR 0 8
64047: PPUSH
64048: LD_VAR 0 5
64052: PPUSH
64053: LD_VAR 0 6
64057: PPUSH
64058: LD_INT 1
64060: PPUSH
64061: CALL_OW 48
// end ;
64065: LD_VAR 0 7
64069: RET
// export hInvincible ; every 1 do
64070: GO 64072
64072: DISABLE
// hInvincible := [ ] ;
64073: LD_ADDR_EXP 167
64077: PUSH
64078: EMPTY
64079: ST_TO_ADDR
64080: END
// every 10 do var i ;
64081: GO 64083
64083: DISABLE
64084: LD_INT 0
64086: PPUSH
// begin enable ;
64087: ENABLE
// if not hInvincible then
64088: LD_EXP 167
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64141
// for i in hInvincible do
64097: LD_ADDR_VAR 0 1
64101: PUSH
64102: LD_EXP 167
64106: PUSH
64107: FOR_IN
64108: IFFALSE 64139
// if GetLives ( i ) < 1000 then
64110: LD_VAR 0 1
64114: PPUSH
64115: CALL_OW 256
64119: PUSH
64120: LD_INT 1000
64122: LESS
64123: IFFALSE 64137
// SetLives ( i , 1000 ) ;
64125: LD_VAR 0 1
64129: PPUSH
64130: LD_INT 1000
64132: PPUSH
64133: CALL_OW 234
64137: GO 64107
64139: POP
64140: POP
// end ;
64141: PPOPN 1
64143: END
// export function hHackInvincible ; var i ; begin
64144: LD_INT 0
64146: PPUSH
64147: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64148: LD_ADDR_VAR 0 2
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: LD_INT 21
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 21
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: PPUSH
64181: CALL_OW 69
64185: PUSH
64186: FOR_IN
64187: IFFALSE 64248
// if IsSelected ( i ) then
64189: LD_VAR 0 2
64193: PPUSH
64194: CALL_OW 306
64198: IFFALSE 64246
// begin if i in hInvincible then
64200: LD_VAR 0 2
64204: PUSH
64205: LD_EXP 167
64209: IN
64210: IFFALSE 64230
// hInvincible := hInvincible diff i else
64212: LD_ADDR_EXP 167
64216: PUSH
64217: LD_EXP 167
64221: PUSH
64222: LD_VAR 0 2
64226: DIFF
64227: ST_TO_ADDR
64228: GO 64246
// hInvincible := hInvincible union i ;
64230: LD_ADDR_EXP 167
64234: PUSH
64235: LD_EXP 167
64239: PUSH
64240: LD_VAR 0 2
64244: UNION
64245: ST_TO_ADDR
// end ;
64246: GO 64186
64248: POP
64249: POP
// end ;
64250: LD_VAR 0 1
64254: RET
// export function hHackInvisible ; var i , j ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
64259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64260: LD_ADDR_VAR 0 2
64264: PUSH
64265: LD_INT 21
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PPUSH
64275: CALL_OW 69
64279: PUSH
64280: FOR_IN
64281: IFFALSE 64305
// if IsSelected ( i ) then
64283: LD_VAR 0 2
64287: PPUSH
64288: CALL_OW 306
64292: IFFALSE 64303
// ComForceInvisible ( i ) ;
64294: LD_VAR 0 2
64298: PPUSH
64299: CALL_OW 496
64303: GO 64280
64305: POP
64306: POP
// end ;
64307: LD_VAR 0 1
64311: RET
// export function hHackChangeYourSide ; begin
64312: LD_INT 0
64314: PPUSH
// if your_side = 8 then
64315: LD_OWVAR 2
64319: PUSH
64320: LD_INT 8
64322: EQUAL
64323: IFFALSE 64335
// your_side := 0 else
64325: LD_ADDR_OWVAR 2
64329: PUSH
64330: LD_INT 0
64332: ST_TO_ADDR
64333: GO 64349
// your_side := your_side + 1 ;
64335: LD_ADDR_OWVAR 2
64339: PUSH
64340: LD_OWVAR 2
64344: PUSH
64345: LD_INT 1
64347: PLUS
64348: ST_TO_ADDR
// end ;
64349: LD_VAR 0 1
64353: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64354: LD_INT 0
64356: PPUSH
64357: PPUSH
64358: PPUSH
// for i in all_units do
64359: LD_ADDR_VAR 0 2
64363: PUSH
64364: LD_OWVAR 3
64368: PUSH
64369: FOR_IN
64370: IFFALSE 64448
// if IsSelected ( i ) then
64372: LD_VAR 0 2
64376: PPUSH
64377: CALL_OW 306
64381: IFFALSE 64446
// begin j := GetSide ( i ) ;
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 2
64392: PPUSH
64393: CALL_OW 255
64397: ST_TO_ADDR
// if j = 8 then
64398: LD_VAR 0 3
64402: PUSH
64403: LD_INT 8
64405: EQUAL
64406: IFFALSE 64418
// j := 0 else
64408: LD_ADDR_VAR 0 3
64412: PUSH
64413: LD_INT 0
64415: ST_TO_ADDR
64416: GO 64432
// j := j + 1 ;
64418: LD_ADDR_VAR 0 3
64422: PUSH
64423: LD_VAR 0 3
64427: PUSH
64428: LD_INT 1
64430: PLUS
64431: ST_TO_ADDR
// SetSide ( i , j ) ;
64432: LD_VAR 0 2
64436: PPUSH
64437: LD_VAR 0 3
64441: PPUSH
64442: CALL_OW 235
// end ;
64446: GO 64369
64448: POP
64449: POP
// end ;
64450: LD_VAR 0 1
64454: RET
// export function hHackFog ; begin
64455: LD_INT 0
64457: PPUSH
// FogOff ( true ) ;
64458: LD_INT 1
64460: PPUSH
64461: CALL_OW 344
// end ;
64465: LD_VAR 0 1
64469: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64470: LD_INT 0
64472: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64473: LD_VAR 0 1
64477: PPUSH
64478: LD_VAR 0 2
64482: PPUSH
64483: LD_VAR 0 3
64487: PPUSH
64488: LD_INT 1
64490: PPUSH
64491: LD_INT 1
64493: PPUSH
64494: CALL_OW 483
// CenterOnXY ( x , y ) ;
64498: LD_VAR 0 2
64502: PPUSH
64503: LD_VAR 0 3
64507: PPUSH
64508: CALL_OW 84
// end ; end_of_file
64512: LD_VAR 0 4
64516: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
64517: LD_INT 0
64519: PPUSH
64520: PPUSH
64521: PPUSH
64522: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
64523: LD_VAR 0 1
64527: PPUSH
64528: CALL_OW 264
64532: PUSH
64533: LD_EXP 94
64537: EQUAL
64538: IFFALSE 64610
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64540: LD_INT 68
64542: PPUSH
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 255
64552: PPUSH
64553: CALL_OW 321
64557: PUSH
64558: LD_INT 2
64560: EQUAL
64561: IFFALSE 64573
// eff := 70 else
64563: LD_ADDR_VAR 0 4
64567: PUSH
64568: LD_INT 70
64570: ST_TO_ADDR
64571: GO 64581
// eff := 30 ;
64573: LD_ADDR_VAR 0 4
64577: PUSH
64578: LD_INT 30
64580: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64581: LD_VAR 0 1
64585: PPUSH
64586: CALL_OW 250
64590: PPUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 251
64600: PPUSH
64601: LD_VAR 0 4
64605: PPUSH
64606: CALL_OW 495
// end ; end ;
64610: LD_VAR 0 2
64614: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64615: LD_INT 0
64617: PPUSH
// end ;
64618: LD_VAR 0 4
64622: RET
// export function SOS_Command ( cmd ) ; begin
64623: LD_INT 0
64625: PPUSH
// end ;
64626: LD_VAR 0 2
64630: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64631: LD_INT 0
64633: PPUSH
// end ;
64634: LD_VAR 0 6
64638: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64639: LD_INT 0
64641: PPUSH
64642: PPUSH
// if not vehicle or not factory then
64643: LD_VAR 0 1
64647: NOT
64648: PUSH
64649: LD_VAR 0 2
64653: NOT
64654: OR
64655: IFFALSE 64659
// exit ;
64657: GO 64890
// if factoryWaypoints >= factory then
64659: LD_EXP 168
64663: PUSH
64664: LD_VAR 0 2
64668: GREATEREQUAL
64669: IFFALSE 64890
// if factoryWaypoints [ factory ] then
64671: LD_EXP 168
64675: PUSH
64676: LD_VAR 0 2
64680: ARRAY
64681: IFFALSE 64890
// begin if GetControl ( vehicle ) = control_manual then
64683: LD_VAR 0 1
64687: PPUSH
64688: CALL_OW 263
64692: PUSH
64693: LD_INT 1
64695: EQUAL
64696: IFFALSE 64777
// begin driver := IsDrivenBy ( vehicle ) ;
64698: LD_ADDR_VAR 0 4
64702: PUSH
64703: LD_VAR 0 1
64707: PPUSH
64708: CALL_OW 311
64712: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64713: LD_VAR 0 4
64717: PPUSH
64718: LD_EXP 168
64722: PUSH
64723: LD_VAR 0 2
64727: ARRAY
64728: PUSH
64729: LD_INT 3
64731: ARRAY
64732: PPUSH
64733: LD_EXP 168
64737: PUSH
64738: LD_VAR 0 2
64742: ARRAY
64743: PUSH
64744: LD_INT 4
64746: ARRAY
64747: PPUSH
64748: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64752: LD_VAR 0 4
64756: PPUSH
64757: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64761: LD_VAR 0 4
64765: PPUSH
64766: LD_VAR 0 2
64770: PPUSH
64771: CALL_OW 180
// end else
64775: GO 64890
// if GetControl ( vehicle ) = control_remote then
64777: LD_VAR 0 1
64781: PPUSH
64782: CALL_OW 263
64786: PUSH
64787: LD_INT 2
64789: EQUAL
64790: IFFALSE 64851
// begin wait ( 0 0$2 ) ;
64792: LD_INT 70
64794: PPUSH
64795: CALL_OW 67
// if Connect ( vehicle ) then
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL 17580 0 1
64808: IFFALSE 64849
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64810: LD_VAR 0 1
64814: PPUSH
64815: LD_EXP 168
64819: PUSH
64820: LD_VAR 0 2
64824: ARRAY
64825: PUSH
64826: LD_INT 3
64828: ARRAY
64829: PPUSH
64830: LD_EXP 168
64834: PUSH
64835: LD_VAR 0 2
64839: ARRAY
64840: PUSH
64841: LD_INT 4
64843: ARRAY
64844: PPUSH
64845: CALL_OW 171
// end else
64849: GO 64890
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64851: LD_VAR 0 1
64855: PPUSH
64856: LD_EXP 168
64860: PUSH
64861: LD_VAR 0 2
64865: ARRAY
64866: PUSH
64867: LD_INT 3
64869: ARRAY
64870: PPUSH
64871: LD_EXP 168
64875: PUSH
64876: LD_VAR 0 2
64880: ARRAY
64881: PUSH
64882: LD_INT 4
64884: ARRAY
64885: PPUSH
64886: CALL_OW 171
// end ; end ;
64890: LD_VAR 0 3
64894: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64895: LD_INT 0
64897: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64898: LD_VAR 0 1
64902: PUSH
64903: LD_INT 250
64905: EQUAL
64906: PUSH
64907: LD_VAR 0 2
64911: PPUSH
64912: CALL_OW 264
64916: PUSH
64917: LD_EXP 97
64921: EQUAL
64922: AND
64923: IFFALSE 64944
// MinerPlaceMine ( unit , x , y ) ;
64925: LD_VAR 0 2
64929: PPUSH
64930: LD_VAR 0 4
64934: PPUSH
64935: LD_VAR 0 5
64939: PPUSH
64940: CALL 67672 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64944: LD_VAR 0 1
64948: PUSH
64949: LD_INT 251
64951: EQUAL
64952: PUSH
64953: LD_VAR 0 2
64957: PPUSH
64958: CALL_OW 264
64962: PUSH
64963: LD_EXP 97
64967: EQUAL
64968: AND
64969: IFFALSE 64990
// MinerDetonateMine ( unit , x , y ) ;
64971: LD_VAR 0 2
64975: PPUSH
64976: LD_VAR 0 4
64980: PPUSH
64981: LD_VAR 0 5
64985: PPUSH
64986: CALL 67949 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64990: LD_VAR 0 1
64994: PUSH
64995: LD_INT 252
64997: EQUAL
64998: PUSH
64999: LD_VAR 0 2
65003: PPUSH
65004: CALL_OW 264
65008: PUSH
65009: LD_EXP 97
65013: EQUAL
65014: AND
65015: IFFALSE 65036
// MinerCreateMinefield ( unit , x , y ) ;
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_VAR 0 4
65026: PPUSH
65027: LD_VAR 0 5
65031: PPUSH
65032: CALL 68366 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65036: LD_VAR 0 1
65040: PUSH
65041: LD_INT 253
65043: EQUAL
65044: PUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: CALL_OW 257
65054: PUSH
65055: LD_INT 5
65057: EQUAL
65058: AND
65059: IFFALSE 65080
// ComBinocular ( unit , x , y ) ;
65061: LD_VAR 0 2
65065: PPUSH
65066: LD_VAR 0 4
65070: PPUSH
65071: LD_VAR 0 5
65075: PPUSH
65076: CALL 68737 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65080: LD_VAR 0 1
65084: PUSH
65085: LD_INT 254
65087: EQUAL
65088: PUSH
65089: LD_VAR 0 2
65093: PPUSH
65094: CALL_OW 264
65098: PUSH
65099: LD_EXP 92
65103: EQUAL
65104: AND
65105: PUSH
65106: LD_VAR 0 3
65110: PPUSH
65111: CALL_OW 263
65115: PUSH
65116: LD_INT 3
65118: EQUAL
65119: AND
65120: IFFALSE 65136
// HackDestroyVehicle ( unit , selectedUnit ) ;
65122: LD_VAR 0 2
65126: PPUSH
65127: LD_VAR 0 3
65131: PPUSH
65132: CALL 67032 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65136: LD_VAR 0 1
65140: PUSH
65141: LD_INT 255
65143: EQUAL
65144: PUSH
65145: LD_VAR 0 2
65149: PPUSH
65150: CALL_OW 264
65154: PUSH
65155: LD_INT 14
65157: PUSH
65158: LD_INT 53
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: IN
65165: AND
65166: PUSH
65167: LD_VAR 0 4
65171: PPUSH
65172: LD_VAR 0 5
65176: PPUSH
65177: CALL_OW 488
65181: AND
65182: IFFALSE 65206
// CutTreeXYR ( unit , x , y , 12 ) ;
65184: LD_VAR 0 2
65188: PPUSH
65189: LD_VAR 0 4
65193: PPUSH
65194: LD_VAR 0 5
65198: PPUSH
65199: LD_INT 12
65201: PPUSH
65202: CALL 65598 0 4
// if cmd = 256 then
65206: LD_VAR 0 1
65210: PUSH
65211: LD_INT 256
65213: EQUAL
65214: IFFALSE 65235
// SetFactoryWaypoint ( unit , x , y ) ;
65216: LD_VAR 0 2
65220: PPUSH
65221: LD_VAR 0 4
65225: PPUSH
65226: LD_VAR 0 5
65230: PPUSH
65231: CALL 65240 0 3
// end ;
65235: LD_VAR 0 6
65239: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65240: LD_INT 0
65242: PPUSH
65243: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65244: LD_VAR 0 1
65248: NOT
65249: PUSH
65250: LD_VAR 0 2
65254: PPUSH
65255: LD_VAR 0 3
65259: PPUSH
65260: CALL_OW 488
65264: NOT
65265: OR
65266: PUSH
65267: LD_VAR 0 1
65271: PPUSH
65272: CALL_OW 266
65276: PUSH
65277: LD_INT 3
65279: NONEQUAL
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 247
65290: PUSH
65291: LD_INT 1
65293: EQUAL
65294: NOT
65295: AND
65296: OR
65297: IFFALSE 65301
// exit ;
65299: GO 65450
// if GetType ( factory ) = unit_human then
65301: LD_VAR 0 1
65305: PPUSH
65306: CALL_OW 247
65310: PUSH
65311: LD_INT 1
65313: EQUAL
65314: IFFALSE 65331
// factory := IsInUnit ( factory ) ;
65316: LD_ADDR_VAR 0 1
65320: PUSH
65321: LD_VAR 0 1
65325: PPUSH
65326: CALL_OW 310
65330: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 266
65340: PUSH
65341: LD_INT 3
65343: NONEQUAL
65344: IFFALSE 65348
// exit ;
65346: GO 65450
// if HexInfo ( x , y ) = factory then
65348: LD_VAR 0 2
65352: PPUSH
65353: LD_VAR 0 3
65357: PPUSH
65358: CALL_OW 428
65362: PUSH
65363: LD_VAR 0 1
65367: EQUAL
65368: IFFALSE 65395
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65370: LD_ADDR_EXP 168
65374: PUSH
65375: LD_EXP 168
65379: PPUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: LD_INT 0
65387: PPUSH
65388: CALL_OW 1
65392: ST_TO_ADDR
65393: GO 65446
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65395: LD_ADDR_EXP 168
65399: PUSH
65400: LD_EXP 168
65404: PPUSH
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_VAR 0 1
65414: PPUSH
65415: CALL_OW 255
65419: PUSH
65420: LD_VAR 0 1
65424: PUSH
65425: LD_VAR 0 2
65429: PUSH
65430: LD_VAR 0 3
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: PPUSH
65441: CALL_OW 1
65445: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65446: CALL 65455 0 0
// end ;
65450: LD_VAR 0 4
65454: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
65455: LD_INT 0
65457: PPUSH
65458: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65459: LD_STRING resetFactoryWaypoint();
65461: PPUSH
65462: CALL_OW 559
// if factoryWaypoints then
65466: LD_EXP 168
65470: IFFALSE 65593
// begin for i := 1 to factoryWaypoints do
65472: LD_ADDR_VAR 0 2
65476: PUSH
65477: DOUBLE
65478: LD_INT 1
65480: DEC
65481: ST_TO_ADDR
65482: LD_EXP 168
65486: PUSH
65487: FOR_TO
65488: IFFALSE 65591
// if factoryWaypoints [ i ] then
65490: LD_EXP 168
65494: PUSH
65495: LD_VAR 0 2
65499: ARRAY
65500: IFFALSE 65589
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
65502: LD_STRING setFactoryWaypointXY(
65504: PUSH
65505: LD_EXP 168
65509: PUSH
65510: LD_VAR 0 2
65514: ARRAY
65515: PUSH
65516: LD_INT 1
65518: ARRAY
65519: STR
65520: PUSH
65521: LD_STRING ,
65523: STR
65524: PUSH
65525: LD_EXP 168
65529: PUSH
65530: LD_VAR 0 2
65534: ARRAY
65535: PUSH
65536: LD_INT 2
65538: ARRAY
65539: STR
65540: PUSH
65541: LD_STRING ,
65543: STR
65544: PUSH
65545: LD_EXP 168
65549: PUSH
65550: LD_VAR 0 2
65554: ARRAY
65555: PUSH
65556: LD_INT 3
65558: ARRAY
65559: STR
65560: PUSH
65561: LD_STRING ,
65563: STR
65564: PUSH
65565: LD_EXP 168
65569: PUSH
65570: LD_VAR 0 2
65574: ARRAY
65575: PUSH
65576: LD_INT 4
65578: ARRAY
65579: STR
65580: PUSH
65581: LD_STRING )
65583: STR
65584: PPUSH
65585: CALL_OW 559
65589: GO 65487
65591: POP
65592: POP
// end ; end ;
65593: LD_VAR 0 1
65597: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
65602: PPUSH
65603: PPUSH
65604: PPUSH
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65609: LD_VAR 0 1
65613: NOT
65614: PUSH
65615: LD_VAR 0 2
65619: PPUSH
65620: LD_VAR 0 3
65624: PPUSH
65625: CALL_OW 488
65629: NOT
65630: OR
65631: PUSH
65632: LD_VAR 0 4
65636: NOT
65637: OR
65638: IFFALSE 65642
// exit ;
65640: GO 65982
// list := [ ] ;
65642: LD_ADDR_VAR 0 13
65646: PUSH
65647: EMPTY
65648: ST_TO_ADDR
// if x - r < 0 then
65649: LD_VAR 0 2
65653: PUSH
65654: LD_VAR 0 4
65658: MINUS
65659: PUSH
65660: LD_INT 0
65662: LESS
65663: IFFALSE 65675
// min_x := 0 else
65665: LD_ADDR_VAR 0 7
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
65673: GO 65691
// min_x := x - r ;
65675: LD_ADDR_VAR 0 7
65679: PUSH
65680: LD_VAR 0 2
65684: PUSH
65685: LD_VAR 0 4
65689: MINUS
65690: ST_TO_ADDR
// if y - r < 0 then
65691: LD_VAR 0 3
65695: PUSH
65696: LD_VAR 0 4
65700: MINUS
65701: PUSH
65702: LD_INT 0
65704: LESS
65705: IFFALSE 65717
// min_y := 0 else
65707: LD_ADDR_VAR 0 8
65711: PUSH
65712: LD_INT 0
65714: ST_TO_ADDR
65715: GO 65733
// min_y := y - r ;
65717: LD_ADDR_VAR 0 8
65721: PUSH
65722: LD_VAR 0 3
65726: PUSH
65727: LD_VAR 0 4
65731: MINUS
65732: ST_TO_ADDR
// max_x := x + r ;
65733: LD_ADDR_VAR 0 9
65737: PUSH
65738: LD_VAR 0 2
65742: PUSH
65743: LD_VAR 0 4
65747: PLUS
65748: ST_TO_ADDR
// max_y := y + r ;
65749: LD_ADDR_VAR 0 10
65753: PUSH
65754: LD_VAR 0 3
65758: PUSH
65759: LD_VAR 0 4
65763: PLUS
65764: ST_TO_ADDR
// for _x = min_x to max_x do
65765: LD_ADDR_VAR 0 11
65769: PUSH
65770: DOUBLE
65771: LD_VAR 0 7
65775: DEC
65776: ST_TO_ADDR
65777: LD_VAR 0 9
65781: PUSH
65782: FOR_TO
65783: IFFALSE 65900
// for _y = min_y to max_y do
65785: LD_ADDR_VAR 0 12
65789: PUSH
65790: DOUBLE
65791: LD_VAR 0 8
65795: DEC
65796: ST_TO_ADDR
65797: LD_VAR 0 10
65801: PUSH
65802: FOR_TO
65803: IFFALSE 65896
// begin if not ValidHex ( _x , _y ) then
65805: LD_VAR 0 11
65809: PPUSH
65810: LD_VAR 0 12
65814: PPUSH
65815: CALL_OW 488
65819: NOT
65820: IFFALSE 65824
// continue ;
65822: GO 65802
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65824: LD_VAR 0 11
65828: PPUSH
65829: LD_VAR 0 12
65833: PPUSH
65834: CALL_OW 351
65838: PUSH
65839: LD_VAR 0 11
65843: PPUSH
65844: LD_VAR 0 12
65848: PPUSH
65849: CALL_OW 554
65853: AND
65854: IFFALSE 65894
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65856: LD_ADDR_VAR 0 13
65860: PUSH
65861: LD_VAR 0 13
65865: PPUSH
65866: LD_VAR 0 13
65870: PUSH
65871: LD_INT 1
65873: PLUS
65874: PPUSH
65875: LD_VAR 0 11
65879: PUSH
65880: LD_VAR 0 12
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PPUSH
65889: CALL_OW 2
65893: ST_TO_ADDR
// end ;
65894: GO 65802
65896: POP
65897: POP
65898: GO 65782
65900: POP
65901: POP
// if not list then
65902: LD_VAR 0 13
65906: NOT
65907: IFFALSE 65911
// exit ;
65909: GO 65982
// for i in list do
65911: LD_ADDR_VAR 0 6
65915: PUSH
65916: LD_VAR 0 13
65920: PUSH
65921: FOR_IN
65922: IFFALSE 65980
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65924: LD_VAR 0 1
65928: PPUSH
65929: LD_STRING M
65931: PUSH
65932: LD_VAR 0 6
65936: PUSH
65937: LD_INT 1
65939: ARRAY
65940: PUSH
65941: LD_VAR 0 6
65945: PUSH
65946: LD_INT 2
65948: ARRAY
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: PPUSH
65974: CALL_OW 447
65978: GO 65921
65980: POP
65981: POP
// end ;
65982: LD_VAR 0 5
65986: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65987: LD_EXP 169
65991: NOT
65992: IFFALSE 66042
65994: GO 65996
65996: DISABLE
// begin initHack := true ;
65997: LD_ADDR_EXP 169
66001: PUSH
66002: LD_INT 1
66004: ST_TO_ADDR
// hackTanks := [ ] ;
66005: LD_ADDR_EXP 170
66009: PUSH
66010: EMPTY
66011: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66012: LD_ADDR_EXP 171
66016: PUSH
66017: EMPTY
66018: ST_TO_ADDR
// hackLimit := 3 ;
66019: LD_ADDR_EXP 172
66023: PUSH
66024: LD_INT 3
66026: ST_TO_ADDR
// hackDist := 12 ;
66027: LD_ADDR_EXP 173
66031: PUSH
66032: LD_INT 12
66034: ST_TO_ADDR
// hackCounter := [ ] ;
66035: LD_ADDR_EXP 174
66039: PUSH
66040: EMPTY
66041: ST_TO_ADDR
// end ;
66042: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66043: LD_EXP 169
66047: PUSH
66048: LD_INT 34
66050: PUSH
66051: LD_EXP 92
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PPUSH
66060: CALL_OW 69
66064: AND
66065: IFFALSE 66320
66067: GO 66069
66069: DISABLE
66070: LD_INT 0
66072: PPUSH
66073: PPUSH
// begin enable ;
66074: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66075: LD_ADDR_VAR 0 1
66079: PUSH
66080: LD_INT 34
66082: PUSH
66083: LD_EXP 92
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PPUSH
66092: CALL_OW 69
66096: PUSH
66097: FOR_IN
66098: IFFALSE 66318
// begin if not i in hackTanks then
66100: LD_VAR 0 1
66104: PUSH
66105: LD_EXP 170
66109: IN
66110: NOT
66111: IFFALSE 66194
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66113: LD_ADDR_EXP 170
66117: PUSH
66118: LD_EXP 170
66122: PPUSH
66123: LD_EXP 170
66127: PUSH
66128: LD_INT 1
66130: PLUS
66131: PPUSH
66132: LD_VAR 0 1
66136: PPUSH
66137: CALL_OW 1
66141: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66142: LD_ADDR_EXP 171
66146: PUSH
66147: LD_EXP 171
66151: PPUSH
66152: LD_EXP 171
66156: PUSH
66157: LD_INT 1
66159: PLUS
66160: PPUSH
66161: EMPTY
66162: PPUSH
66163: CALL_OW 1
66167: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66168: LD_ADDR_EXP 174
66172: PUSH
66173: LD_EXP 174
66177: PPUSH
66178: LD_EXP 174
66182: PUSH
66183: LD_INT 1
66185: PLUS
66186: PPUSH
66187: EMPTY
66188: PPUSH
66189: CALL_OW 1
66193: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66194: LD_VAR 0 1
66198: PPUSH
66199: CALL_OW 302
66203: NOT
66204: IFFALSE 66217
// begin HackUnlinkAll ( i ) ;
66206: LD_VAR 0 1
66210: PPUSH
66211: CALL 66323 0 1
// continue ;
66215: GO 66097
// end ; HackCheckCapturedStatus ( i ) ;
66217: LD_VAR 0 1
66221: PPUSH
66222: CALL 66766 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: LD_INT 81
66233: PUSH
66234: LD_VAR 0 1
66238: PPUSH
66239: CALL_OW 255
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 33
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 91
66260: PUSH
66261: LD_VAR 0 1
66265: PUSH
66266: LD_EXP 173
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 50
66278: PUSH
66279: EMPTY
66280: LIST
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: PPUSH
66288: CALL_OW 69
66292: ST_TO_ADDR
// if not tmp then
66293: LD_VAR 0 2
66297: NOT
66298: IFFALSE 66302
// continue ;
66300: GO 66097
// HackLink ( i , tmp ) ;
66302: LD_VAR 0 1
66306: PPUSH
66307: LD_VAR 0 2
66311: PPUSH
66312: CALL 66459 0 2
// end ;
66316: GO 66097
66318: POP
66319: POP
// end ;
66320: PPOPN 2
66322: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66323: LD_INT 0
66325: PPUSH
66326: PPUSH
66327: PPUSH
// if not hack in hackTanks then
66328: LD_VAR 0 1
66332: PUSH
66333: LD_EXP 170
66337: IN
66338: NOT
66339: IFFALSE 66343
// exit ;
66341: GO 66454
// index := GetElementIndex ( hackTanks , hack ) ;
66343: LD_ADDR_VAR 0 4
66347: PUSH
66348: LD_EXP 170
66352: PPUSH
66353: LD_VAR 0 1
66357: PPUSH
66358: CALL 14286 0 2
66362: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66363: LD_EXP 171
66367: PUSH
66368: LD_VAR 0 4
66372: ARRAY
66373: IFFALSE 66454
// begin for i in hackTanksCaptured [ index ] do
66375: LD_ADDR_VAR 0 3
66379: PUSH
66380: LD_EXP 171
66384: PUSH
66385: LD_VAR 0 4
66389: ARRAY
66390: PUSH
66391: FOR_IN
66392: IFFALSE 66418
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66394: LD_VAR 0 3
66398: PUSH
66399: LD_INT 1
66401: ARRAY
66402: PPUSH
66403: LD_VAR 0 3
66407: PUSH
66408: LD_INT 2
66410: ARRAY
66411: PPUSH
66412: CALL_OW 235
66416: GO 66391
66418: POP
66419: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66420: LD_ADDR_EXP 171
66424: PUSH
66425: LD_EXP 171
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: EMPTY
66436: PPUSH
66437: CALL_OW 1
66441: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66442: LD_VAR 0 1
66446: PPUSH
66447: LD_INT 0
66449: PPUSH
66450: CALL_OW 505
// end ; end ;
66454: LD_VAR 0 2
66458: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66459: LD_INT 0
66461: PPUSH
66462: PPUSH
66463: PPUSH
// if not hack in hackTanks or not vehicles then
66464: LD_VAR 0 1
66468: PUSH
66469: LD_EXP 170
66473: IN
66474: NOT
66475: PUSH
66476: LD_VAR 0 2
66480: NOT
66481: OR
66482: IFFALSE 66486
// exit ;
66484: GO 66761
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66486: LD_ADDR_VAR 0 2
66490: PUSH
66491: LD_VAR 0 1
66495: PPUSH
66496: LD_VAR 0 2
66500: PPUSH
66501: LD_INT 1
66503: PPUSH
66504: LD_INT 1
66506: PPUSH
66507: CALL 14936 0 4
66511: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66512: LD_ADDR_VAR 0 5
66516: PUSH
66517: LD_EXP 170
66521: PPUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL 14286 0 2
66531: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66532: LD_EXP 171
66536: PUSH
66537: LD_VAR 0 5
66541: ARRAY
66542: PUSH
66543: LD_EXP 172
66547: LESS
66548: IFFALSE 66737
// begin for i := 1 to vehicles do
66550: LD_ADDR_VAR 0 4
66554: PUSH
66555: DOUBLE
66556: LD_INT 1
66558: DEC
66559: ST_TO_ADDR
66560: LD_VAR 0 2
66564: PUSH
66565: FOR_TO
66566: IFFALSE 66735
// begin if hackTanksCaptured [ index ] = hackLimit then
66568: LD_EXP 171
66572: PUSH
66573: LD_VAR 0 5
66577: ARRAY
66578: PUSH
66579: LD_EXP 172
66583: EQUAL
66584: IFFALSE 66588
// break ;
66586: GO 66735
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66588: LD_ADDR_EXP 174
66592: PUSH
66593: LD_EXP 174
66597: PPUSH
66598: LD_VAR 0 5
66602: PPUSH
66603: LD_EXP 174
66607: PUSH
66608: LD_VAR 0 5
66612: ARRAY
66613: PUSH
66614: LD_INT 1
66616: PLUS
66617: PPUSH
66618: CALL_OW 1
66622: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66623: LD_ADDR_EXP 171
66627: PUSH
66628: LD_EXP 171
66632: PPUSH
66633: LD_VAR 0 5
66637: PUSH
66638: LD_EXP 171
66642: PUSH
66643: LD_VAR 0 5
66647: ARRAY
66648: PUSH
66649: LD_INT 1
66651: PLUS
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PPUSH
66657: LD_VAR 0 2
66661: PUSH
66662: LD_VAR 0 4
66666: ARRAY
66667: PUSH
66668: LD_VAR 0 2
66672: PUSH
66673: LD_VAR 0 4
66677: ARRAY
66678: PPUSH
66679: CALL_OW 255
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PPUSH
66688: CALL 14501 0 3
66692: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66693: LD_VAR 0 2
66697: PUSH
66698: LD_VAR 0 4
66702: ARRAY
66703: PPUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 255
66713: PPUSH
66714: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66718: LD_VAR 0 2
66722: PUSH
66723: LD_VAR 0 4
66727: ARRAY
66728: PPUSH
66729: CALL_OW 141
// end ;
66733: GO 66565
66735: POP
66736: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66737: LD_VAR 0 1
66741: PPUSH
66742: LD_EXP 171
66746: PUSH
66747: LD_VAR 0 5
66751: ARRAY
66752: PUSH
66753: LD_INT 0
66755: PLUS
66756: PPUSH
66757: CALL_OW 505
// end ;
66761: LD_VAR 0 3
66765: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66766: LD_INT 0
66768: PPUSH
66769: PPUSH
66770: PPUSH
66771: PPUSH
// if not hack in hackTanks then
66772: LD_VAR 0 1
66776: PUSH
66777: LD_EXP 170
66781: IN
66782: NOT
66783: IFFALSE 66787
// exit ;
66785: GO 67027
// index := GetElementIndex ( hackTanks , hack ) ;
66787: LD_ADDR_VAR 0 4
66791: PUSH
66792: LD_EXP 170
66796: PPUSH
66797: LD_VAR 0 1
66801: PPUSH
66802: CALL 14286 0 2
66806: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66807: LD_ADDR_VAR 0 3
66811: PUSH
66812: DOUBLE
66813: LD_EXP 171
66817: PUSH
66818: LD_VAR 0 4
66822: ARRAY
66823: INC
66824: ST_TO_ADDR
66825: LD_INT 1
66827: PUSH
66828: FOR_DOWNTO
66829: IFFALSE 67001
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66831: LD_ADDR_VAR 0 5
66835: PUSH
66836: LD_EXP 171
66840: PUSH
66841: LD_VAR 0 4
66845: ARRAY
66846: PUSH
66847: LD_VAR 0 3
66851: ARRAY
66852: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66853: LD_VAR 0 5
66857: PUSH
66858: LD_INT 1
66860: ARRAY
66861: PPUSH
66862: CALL_OW 302
66866: NOT
66867: PUSH
66868: LD_VAR 0 5
66872: PUSH
66873: LD_INT 1
66875: ARRAY
66876: PPUSH
66877: CALL_OW 255
66881: PUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: CALL_OW 255
66891: NONEQUAL
66892: OR
66893: IFFALSE 66999
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66895: LD_VAR 0 5
66899: PUSH
66900: LD_INT 1
66902: ARRAY
66903: PPUSH
66904: CALL_OW 305
66908: PUSH
66909: LD_VAR 0 5
66913: PUSH
66914: LD_INT 1
66916: ARRAY
66917: PPUSH
66918: CALL_OW 255
66922: PUSH
66923: LD_VAR 0 1
66927: PPUSH
66928: CALL_OW 255
66932: EQUAL
66933: AND
66934: IFFALSE 66958
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66936: LD_VAR 0 5
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PPUSH
66945: LD_VAR 0 5
66949: PUSH
66950: LD_INT 2
66952: ARRAY
66953: PPUSH
66954: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66958: LD_ADDR_EXP 171
66962: PUSH
66963: LD_EXP 171
66967: PPUSH
66968: LD_VAR 0 4
66972: PPUSH
66973: LD_EXP 171
66977: PUSH
66978: LD_VAR 0 4
66982: ARRAY
66983: PPUSH
66984: LD_VAR 0 3
66988: PPUSH
66989: CALL_OW 3
66993: PPUSH
66994: CALL_OW 1
66998: ST_TO_ADDR
// end ; end ;
66999: GO 66828
67001: POP
67002: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67003: LD_VAR 0 1
67007: PPUSH
67008: LD_EXP 171
67012: PUSH
67013: LD_VAR 0 4
67017: ARRAY
67018: PUSH
67019: LD_INT 0
67021: PLUS
67022: PPUSH
67023: CALL_OW 505
// end ;
67027: LD_VAR 0 2
67031: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67032: LD_INT 0
67034: PPUSH
67035: PPUSH
67036: PPUSH
67037: PPUSH
// if not hack in hackTanks then
67038: LD_VAR 0 1
67042: PUSH
67043: LD_EXP 170
67047: IN
67048: NOT
67049: IFFALSE 67053
// exit ;
67051: GO 67138
// index := GetElementIndex ( hackTanks , hack ) ;
67053: LD_ADDR_VAR 0 5
67057: PUSH
67058: LD_EXP 170
67062: PPUSH
67063: LD_VAR 0 1
67067: PPUSH
67068: CALL 14286 0 2
67072: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67073: LD_ADDR_VAR 0 4
67077: PUSH
67078: DOUBLE
67079: LD_INT 1
67081: DEC
67082: ST_TO_ADDR
67083: LD_EXP 171
67087: PUSH
67088: LD_VAR 0 5
67092: ARRAY
67093: PUSH
67094: FOR_TO
67095: IFFALSE 67136
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67097: LD_EXP 171
67101: PUSH
67102: LD_VAR 0 5
67106: ARRAY
67107: PUSH
67108: LD_VAR 0 4
67112: ARRAY
67113: PUSH
67114: LD_INT 1
67116: ARRAY
67117: PUSH
67118: LD_VAR 0 2
67122: EQUAL
67123: IFFALSE 67134
// KillUnit ( vehicle ) ;
67125: LD_VAR 0 2
67129: PPUSH
67130: CALL_OW 66
67134: GO 67094
67136: POP
67137: POP
// end ;
67138: LD_VAR 0 3
67142: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67143: LD_EXP 175
67147: NOT
67148: IFFALSE 67183
67150: GO 67152
67152: DISABLE
// begin initMiner := true ;
67153: LD_ADDR_EXP 175
67157: PUSH
67158: LD_INT 1
67160: ST_TO_ADDR
// minersList := [ ] ;
67161: LD_ADDR_EXP 176
67165: PUSH
67166: EMPTY
67167: ST_TO_ADDR
// minerMinesList := [ ] ;
67168: LD_ADDR_EXP 177
67172: PUSH
67173: EMPTY
67174: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67175: LD_ADDR_EXP 178
67179: PUSH
67180: LD_INT 5
67182: ST_TO_ADDR
// end ;
67183: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67184: LD_EXP 175
67188: PUSH
67189: LD_INT 34
67191: PUSH
67192: LD_EXP 97
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PPUSH
67201: CALL_OW 69
67205: AND
67206: IFFALSE 67669
67208: GO 67210
67210: DISABLE
67211: LD_INT 0
67213: PPUSH
67214: PPUSH
67215: PPUSH
67216: PPUSH
// begin enable ;
67217: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67218: LD_ADDR_VAR 0 1
67222: PUSH
67223: LD_INT 34
67225: PUSH
67226: LD_EXP 97
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PPUSH
67235: CALL_OW 69
67239: PUSH
67240: FOR_IN
67241: IFFALSE 67313
// begin if not i in minersList then
67243: LD_VAR 0 1
67247: PUSH
67248: LD_EXP 176
67252: IN
67253: NOT
67254: IFFALSE 67311
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67256: LD_ADDR_EXP 176
67260: PUSH
67261: LD_EXP 176
67265: PPUSH
67266: LD_EXP 176
67270: PUSH
67271: LD_INT 1
67273: PLUS
67274: PPUSH
67275: LD_VAR 0 1
67279: PPUSH
67280: CALL_OW 1
67284: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67285: LD_ADDR_EXP 177
67289: PUSH
67290: LD_EXP 177
67294: PPUSH
67295: LD_EXP 177
67299: PUSH
67300: LD_INT 1
67302: PLUS
67303: PPUSH
67304: EMPTY
67305: PPUSH
67306: CALL_OW 1
67310: ST_TO_ADDR
// end end ;
67311: GO 67240
67313: POP
67314: POP
// for i := minerMinesList downto 1 do
67315: LD_ADDR_VAR 0 1
67319: PUSH
67320: DOUBLE
67321: LD_EXP 177
67325: INC
67326: ST_TO_ADDR
67327: LD_INT 1
67329: PUSH
67330: FOR_DOWNTO
67331: IFFALSE 67667
// begin if IsLive ( minersList [ i ] ) then
67333: LD_EXP 176
67337: PUSH
67338: LD_VAR 0 1
67342: ARRAY
67343: PPUSH
67344: CALL_OW 300
67348: IFFALSE 67376
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67350: LD_EXP 176
67354: PUSH
67355: LD_VAR 0 1
67359: ARRAY
67360: PPUSH
67361: LD_EXP 177
67365: PUSH
67366: LD_VAR 0 1
67370: ARRAY
67371: PPUSH
67372: CALL_OW 505
// if not minerMinesList [ i ] then
67376: LD_EXP 177
67380: PUSH
67381: LD_VAR 0 1
67385: ARRAY
67386: NOT
67387: IFFALSE 67391
// continue ;
67389: GO 67330
// for j := minerMinesList [ i ] downto 1 do
67391: LD_ADDR_VAR 0 2
67395: PUSH
67396: DOUBLE
67397: LD_EXP 177
67401: PUSH
67402: LD_VAR 0 1
67406: ARRAY
67407: INC
67408: ST_TO_ADDR
67409: LD_INT 1
67411: PUSH
67412: FOR_DOWNTO
67413: IFFALSE 67663
// begin side := GetSide ( minersList [ i ] ) ;
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_EXP 176
67424: PUSH
67425: LD_VAR 0 1
67429: ARRAY
67430: PPUSH
67431: CALL_OW 255
67435: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_EXP 177
67445: PUSH
67446: LD_VAR 0 1
67450: ARRAY
67451: PUSH
67452: LD_VAR 0 2
67456: ARRAY
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: PPUSH
67462: LD_EXP 177
67466: PUSH
67467: LD_VAR 0 1
67471: ARRAY
67472: PUSH
67473: LD_VAR 0 2
67477: ARRAY
67478: PUSH
67479: LD_INT 2
67481: ARRAY
67482: PPUSH
67483: CALL_OW 428
67487: ST_TO_ADDR
// if not tmp then
67488: LD_VAR 0 4
67492: NOT
67493: IFFALSE 67497
// continue ;
67495: GO 67412
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67497: LD_VAR 0 4
67501: PUSH
67502: LD_INT 81
67504: PUSH
67505: LD_VAR 0 3
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PPUSH
67514: CALL_OW 69
67518: IN
67519: PUSH
67520: LD_EXP 177
67524: PUSH
67525: LD_VAR 0 1
67529: ARRAY
67530: PUSH
67531: LD_VAR 0 2
67535: ARRAY
67536: PUSH
67537: LD_INT 1
67539: ARRAY
67540: PPUSH
67541: LD_EXP 177
67545: PUSH
67546: LD_VAR 0 1
67550: ARRAY
67551: PUSH
67552: LD_VAR 0 2
67556: ARRAY
67557: PUSH
67558: LD_INT 2
67560: ARRAY
67561: PPUSH
67562: CALL_OW 458
67566: AND
67567: IFFALSE 67661
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67569: LD_EXP 177
67573: PUSH
67574: LD_VAR 0 1
67578: ARRAY
67579: PUSH
67580: LD_VAR 0 2
67584: ARRAY
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PPUSH
67590: LD_EXP 177
67594: PUSH
67595: LD_VAR 0 1
67599: ARRAY
67600: PUSH
67601: LD_VAR 0 2
67605: ARRAY
67606: PUSH
67607: LD_INT 2
67609: ARRAY
67610: PPUSH
67611: LD_VAR 0 3
67615: PPUSH
67616: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67620: LD_ADDR_EXP 177
67624: PUSH
67625: LD_EXP 177
67629: PPUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: LD_EXP 177
67639: PUSH
67640: LD_VAR 0 1
67644: ARRAY
67645: PPUSH
67646: LD_VAR 0 2
67650: PPUSH
67651: CALL_OW 3
67655: PPUSH
67656: CALL_OW 1
67660: ST_TO_ADDR
// end ; end ;
67661: GO 67412
67663: POP
67664: POP
// end ;
67665: GO 67330
67667: POP
67668: POP
// end ;
67669: PPOPN 4
67671: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67672: LD_INT 0
67674: PPUSH
67675: PPUSH
// result := false ;
67676: LD_ADDR_VAR 0 4
67680: PUSH
67681: LD_INT 0
67683: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67684: LD_VAR 0 1
67688: PPUSH
67689: CALL_OW 264
67693: PUSH
67694: LD_EXP 97
67698: EQUAL
67699: NOT
67700: IFFALSE 67704
// exit ;
67702: GO 67944
// index := GetElementIndex ( minersList , unit ) ;
67704: LD_ADDR_VAR 0 5
67708: PUSH
67709: LD_EXP 176
67713: PPUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL 14286 0 2
67723: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67724: LD_EXP 177
67728: PUSH
67729: LD_VAR 0 5
67733: ARRAY
67734: PUSH
67735: LD_EXP 178
67739: GREATEREQUAL
67740: IFFALSE 67744
// exit ;
67742: GO 67944
// ComMoveXY ( unit , x , y ) ;
67744: LD_VAR 0 1
67748: PPUSH
67749: LD_VAR 0 2
67753: PPUSH
67754: LD_VAR 0 3
67758: PPUSH
67759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67763: LD_INT 35
67765: PPUSH
67766: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67770: LD_VAR 0 1
67774: PPUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_VAR 0 3
67784: PPUSH
67785: CALL 45113 0 3
67789: NOT
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: CALL_OW 314
67800: AND
67801: IFFALSE 67805
// exit ;
67803: GO 67944
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67805: LD_VAR 0 2
67809: PPUSH
67810: LD_VAR 0 3
67814: PPUSH
67815: CALL_OW 428
67819: PUSH
67820: LD_VAR 0 1
67824: EQUAL
67825: PUSH
67826: LD_VAR 0 1
67830: PPUSH
67831: CALL_OW 314
67835: NOT
67836: AND
67837: IFFALSE 67763
// PlaySoundXY ( x , y , PlantMine ) ;
67839: LD_VAR 0 2
67843: PPUSH
67844: LD_VAR 0 3
67848: PPUSH
67849: LD_STRING PlantMine
67851: PPUSH
67852: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67856: LD_VAR 0 2
67860: PPUSH
67861: LD_VAR 0 3
67865: PPUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: CALL_OW 255
67875: PPUSH
67876: LD_INT 0
67878: PPUSH
67879: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67883: LD_ADDR_EXP 177
67887: PUSH
67888: LD_EXP 177
67892: PPUSH
67893: LD_VAR 0 5
67897: PUSH
67898: LD_EXP 177
67902: PUSH
67903: LD_VAR 0 5
67907: ARRAY
67908: PUSH
67909: LD_INT 1
67911: PLUS
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PPUSH
67917: LD_VAR 0 2
67921: PUSH
67922: LD_VAR 0 3
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PPUSH
67931: CALL 14501 0 3
67935: ST_TO_ADDR
// result := true ;
67936: LD_ADDR_VAR 0 4
67940: PUSH
67941: LD_INT 1
67943: ST_TO_ADDR
// end ;
67944: LD_VAR 0 4
67948: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67949: LD_INT 0
67951: PPUSH
67952: PPUSH
67953: PPUSH
// if not unit in minersList then
67954: LD_VAR 0 1
67958: PUSH
67959: LD_EXP 176
67963: IN
67964: NOT
67965: IFFALSE 67969
// exit ;
67967: GO 68361
// index := GetElementIndex ( minersList , unit ) ;
67969: LD_ADDR_VAR 0 6
67973: PUSH
67974: LD_EXP 176
67978: PPUSH
67979: LD_VAR 0 1
67983: PPUSH
67984: CALL 14286 0 2
67988: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67989: LD_ADDR_VAR 0 5
67993: PUSH
67994: DOUBLE
67995: LD_EXP 177
67999: PUSH
68000: LD_VAR 0 6
68004: ARRAY
68005: INC
68006: ST_TO_ADDR
68007: LD_INT 1
68009: PUSH
68010: FOR_DOWNTO
68011: IFFALSE 68172
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68013: LD_EXP 177
68017: PUSH
68018: LD_VAR 0 6
68022: ARRAY
68023: PUSH
68024: LD_VAR 0 5
68028: ARRAY
68029: PUSH
68030: LD_INT 1
68032: ARRAY
68033: PUSH
68034: LD_VAR 0 2
68038: EQUAL
68039: PUSH
68040: LD_EXP 177
68044: PUSH
68045: LD_VAR 0 6
68049: ARRAY
68050: PUSH
68051: LD_VAR 0 5
68055: ARRAY
68056: PUSH
68057: LD_INT 2
68059: ARRAY
68060: PUSH
68061: LD_VAR 0 3
68065: EQUAL
68066: AND
68067: IFFALSE 68170
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68069: LD_EXP 177
68073: PUSH
68074: LD_VAR 0 6
68078: ARRAY
68079: PUSH
68080: LD_VAR 0 5
68084: ARRAY
68085: PUSH
68086: LD_INT 1
68088: ARRAY
68089: PPUSH
68090: LD_EXP 177
68094: PUSH
68095: LD_VAR 0 6
68099: ARRAY
68100: PUSH
68101: LD_VAR 0 5
68105: ARRAY
68106: PUSH
68107: LD_INT 2
68109: ARRAY
68110: PPUSH
68111: LD_VAR 0 1
68115: PPUSH
68116: CALL_OW 255
68120: PPUSH
68121: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68125: LD_ADDR_EXP 177
68129: PUSH
68130: LD_EXP 177
68134: PPUSH
68135: LD_VAR 0 6
68139: PPUSH
68140: LD_EXP 177
68144: PUSH
68145: LD_VAR 0 6
68149: ARRAY
68150: PPUSH
68151: LD_VAR 0 5
68155: PPUSH
68156: CALL_OW 3
68160: PPUSH
68161: CALL_OW 1
68165: ST_TO_ADDR
// exit ;
68166: POP
68167: POP
68168: GO 68361
// end ; end ;
68170: GO 68010
68172: POP
68173: POP
// for i := minerMinesList [ index ] downto 1 do
68174: LD_ADDR_VAR 0 5
68178: PUSH
68179: DOUBLE
68180: LD_EXP 177
68184: PUSH
68185: LD_VAR 0 6
68189: ARRAY
68190: INC
68191: ST_TO_ADDR
68192: LD_INT 1
68194: PUSH
68195: FOR_DOWNTO
68196: IFFALSE 68359
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68198: LD_EXP 177
68202: PUSH
68203: LD_VAR 0 6
68207: ARRAY
68208: PUSH
68209: LD_VAR 0 5
68213: ARRAY
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: PPUSH
68219: LD_EXP 177
68223: PUSH
68224: LD_VAR 0 6
68228: ARRAY
68229: PUSH
68230: LD_VAR 0 5
68234: ARRAY
68235: PUSH
68236: LD_INT 2
68238: ARRAY
68239: PPUSH
68240: LD_VAR 0 2
68244: PPUSH
68245: LD_VAR 0 3
68249: PPUSH
68250: CALL_OW 298
68254: PUSH
68255: LD_INT 6
68257: LESS
68258: IFFALSE 68357
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68260: LD_EXP 177
68264: PUSH
68265: LD_VAR 0 6
68269: ARRAY
68270: PUSH
68271: LD_VAR 0 5
68275: ARRAY
68276: PUSH
68277: LD_INT 1
68279: ARRAY
68280: PPUSH
68281: LD_EXP 177
68285: PUSH
68286: LD_VAR 0 6
68290: ARRAY
68291: PUSH
68292: LD_VAR 0 5
68296: ARRAY
68297: PUSH
68298: LD_INT 2
68300: ARRAY
68301: PPUSH
68302: LD_VAR 0 1
68306: PPUSH
68307: CALL_OW 255
68311: PPUSH
68312: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68316: LD_ADDR_EXP 177
68320: PUSH
68321: LD_EXP 177
68325: PPUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: LD_EXP 177
68335: PUSH
68336: LD_VAR 0 6
68340: ARRAY
68341: PPUSH
68342: LD_VAR 0 5
68346: PPUSH
68347: CALL_OW 3
68351: PPUSH
68352: CALL_OW 1
68356: ST_TO_ADDR
// end ; end ;
68357: GO 68195
68359: POP
68360: POP
// end ;
68361: LD_VAR 0 4
68365: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
68370: PPUSH
68371: PPUSH
68372: PPUSH
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68377: LD_VAR 0 1
68381: PPUSH
68382: CALL_OW 264
68386: PUSH
68387: LD_EXP 97
68391: EQUAL
68392: NOT
68393: PUSH
68394: LD_VAR 0 1
68398: PUSH
68399: LD_EXP 176
68403: IN
68404: NOT
68405: OR
68406: IFFALSE 68410
// exit ;
68408: GO 68732
// index := GetElementIndex ( minersList , unit ) ;
68410: LD_ADDR_VAR 0 6
68414: PUSH
68415: LD_EXP 176
68419: PPUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL 14286 0 2
68429: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68430: LD_ADDR_VAR 0 8
68434: PUSH
68435: LD_EXP 178
68439: PUSH
68440: LD_EXP 177
68444: PUSH
68445: LD_VAR 0 6
68449: ARRAY
68450: MINUS
68451: ST_TO_ADDR
// if not minesFreeAmount then
68452: LD_VAR 0 8
68456: NOT
68457: IFFALSE 68461
// exit ;
68459: GO 68732
// tmp := [ ] ;
68461: LD_ADDR_VAR 0 7
68465: PUSH
68466: EMPTY
68467: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68468: LD_ADDR_VAR 0 5
68472: PUSH
68473: DOUBLE
68474: LD_INT 1
68476: DEC
68477: ST_TO_ADDR
68478: LD_VAR 0 8
68482: PUSH
68483: FOR_TO
68484: IFFALSE 68679
// begin _d := rand ( 0 , 5 ) ;
68486: LD_ADDR_VAR 0 11
68490: PUSH
68491: LD_INT 0
68493: PPUSH
68494: LD_INT 5
68496: PPUSH
68497: CALL_OW 12
68501: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68502: LD_ADDR_VAR 0 12
68506: PUSH
68507: LD_INT 2
68509: PPUSH
68510: LD_INT 6
68512: PPUSH
68513: CALL_OW 12
68517: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68518: LD_ADDR_VAR 0 9
68522: PUSH
68523: LD_VAR 0 2
68527: PPUSH
68528: LD_VAR 0 11
68532: PPUSH
68533: LD_VAR 0 12
68537: PPUSH
68538: CALL_OW 272
68542: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68543: LD_ADDR_VAR 0 10
68547: PUSH
68548: LD_VAR 0 3
68552: PPUSH
68553: LD_VAR 0 11
68557: PPUSH
68558: LD_VAR 0 12
68562: PPUSH
68563: CALL_OW 273
68567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68568: LD_VAR 0 9
68572: PPUSH
68573: LD_VAR 0 10
68577: PPUSH
68578: CALL_OW 488
68582: PUSH
68583: LD_VAR 0 9
68587: PUSH
68588: LD_VAR 0 10
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_VAR 0 7
68601: IN
68602: NOT
68603: AND
68604: PUSH
68605: LD_VAR 0 9
68609: PPUSH
68610: LD_VAR 0 10
68614: PPUSH
68615: CALL_OW 458
68619: NOT
68620: AND
68621: IFFALSE 68663
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68623: LD_ADDR_VAR 0 7
68627: PUSH
68628: LD_VAR 0 7
68632: PPUSH
68633: LD_VAR 0 7
68637: PUSH
68638: LD_INT 1
68640: PLUS
68641: PPUSH
68642: LD_VAR 0 9
68646: PUSH
68647: LD_VAR 0 10
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PPUSH
68656: CALL_OW 1
68660: ST_TO_ADDR
68661: GO 68677
// i := i - 1 ;
68663: LD_ADDR_VAR 0 5
68667: PUSH
68668: LD_VAR 0 5
68672: PUSH
68673: LD_INT 1
68675: MINUS
68676: ST_TO_ADDR
// end ;
68677: GO 68483
68679: POP
68680: POP
// for i in tmp do
68681: LD_ADDR_VAR 0 5
68685: PUSH
68686: LD_VAR 0 7
68690: PUSH
68691: FOR_IN
68692: IFFALSE 68730
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68694: LD_VAR 0 1
68698: PPUSH
68699: LD_VAR 0 5
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PPUSH
68708: LD_VAR 0 5
68712: PUSH
68713: LD_INT 2
68715: ARRAY
68716: PPUSH
68717: CALL 67672 0 3
68721: NOT
68722: IFFALSE 68728
// exit ;
68724: POP
68725: POP
68726: GO 68732
68728: GO 68691
68730: POP
68731: POP
// end ;
68732: LD_VAR 0 4
68736: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68737: LD_INT 0
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
68743: PPUSH
68744: PPUSH
68745: PPUSH
// if not GetClass ( unit ) = class_sniper then
68746: LD_VAR 0 1
68750: PPUSH
68751: CALL_OW 257
68755: PUSH
68756: LD_INT 5
68758: EQUAL
68759: NOT
68760: IFFALSE 68764
// exit ;
68762: GO 69152
// dist := 8 ;
68764: LD_ADDR_VAR 0 5
68768: PUSH
68769: LD_INT 8
68771: ST_TO_ADDR
// viewRange := 12 ;
68772: LD_ADDR_VAR 0 7
68776: PUSH
68777: LD_INT 12
68779: ST_TO_ADDR
// side := GetSide ( unit ) ;
68780: LD_ADDR_VAR 0 6
68784: PUSH
68785: LD_VAR 0 1
68789: PPUSH
68790: CALL_OW 255
68794: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68795: LD_INT 61
68797: PPUSH
68798: LD_VAR 0 6
68802: PPUSH
68803: CALL_OW 321
68807: PUSH
68808: LD_INT 2
68810: EQUAL
68811: IFFALSE 68821
// viewRange := 16 ;
68813: LD_ADDR_VAR 0 7
68817: PUSH
68818: LD_INT 16
68820: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68821: LD_VAR 0 1
68825: PPUSH
68826: LD_VAR 0 2
68830: PPUSH
68831: LD_VAR 0 3
68835: PPUSH
68836: CALL_OW 297
68840: PUSH
68841: LD_VAR 0 5
68845: GREATER
68846: IFFALSE 68925
// begin ComMoveXY ( unit , x , y ) ;
68848: LD_VAR 0 1
68852: PPUSH
68853: LD_VAR 0 2
68857: PPUSH
68858: LD_VAR 0 3
68862: PPUSH
68863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68867: LD_INT 35
68869: PPUSH
68870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68874: LD_VAR 0 1
68878: PPUSH
68879: LD_VAR 0 2
68883: PPUSH
68884: LD_VAR 0 3
68888: PPUSH
68889: CALL 45113 0 3
68893: NOT
68894: IFFALSE 68898
// exit ;
68896: GO 69152
// until GetDistUnitXY ( unit , x , y ) < dist ;
68898: LD_VAR 0 1
68902: PPUSH
68903: LD_VAR 0 2
68907: PPUSH
68908: LD_VAR 0 3
68912: PPUSH
68913: CALL_OW 297
68917: PUSH
68918: LD_VAR 0 5
68922: LESS
68923: IFFALSE 68867
// end ; ComTurnXY ( unit , x , y ) ;
68925: LD_VAR 0 1
68929: PPUSH
68930: LD_VAR 0 2
68934: PPUSH
68935: LD_VAR 0 3
68939: PPUSH
68940: CALL_OW 118
// wait ( 5 ) ;
68944: LD_INT 5
68946: PPUSH
68947: CALL_OW 67
// _d := GetDir ( unit ) ;
68951: LD_ADDR_VAR 0 10
68955: PUSH
68956: LD_VAR 0 1
68960: PPUSH
68961: CALL_OW 254
68965: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68966: LD_ADDR_VAR 0 8
68970: PUSH
68971: LD_VAR 0 1
68975: PPUSH
68976: CALL_OW 250
68980: PPUSH
68981: LD_VAR 0 10
68985: PPUSH
68986: LD_VAR 0 5
68990: PPUSH
68991: CALL_OW 272
68995: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68996: LD_ADDR_VAR 0 9
69000: PUSH
69001: LD_VAR 0 1
69005: PPUSH
69006: CALL_OW 251
69010: PPUSH
69011: LD_VAR 0 10
69015: PPUSH
69016: LD_VAR 0 5
69020: PPUSH
69021: CALL_OW 273
69025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69026: LD_VAR 0 8
69030: PPUSH
69031: LD_VAR 0 9
69035: PPUSH
69036: CALL_OW 488
69040: NOT
69041: IFFALSE 69045
// exit ;
69043: GO 69152
// ComAnimCustom ( unit , 1 ) ;
69045: LD_VAR 0 1
69049: PPUSH
69050: LD_INT 1
69052: PPUSH
69053: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69057: LD_VAR 0 8
69061: PPUSH
69062: LD_VAR 0 9
69066: PPUSH
69067: LD_VAR 0 6
69071: PPUSH
69072: LD_VAR 0 7
69076: PPUSH
69077: CALL_OW 330
// repeat wait ( 1 ) ;
69081: LD_INT 1
69083: PPUSH
69084: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69088: LD_VAR 0 1
69092: PPUSH
69093: CALL_OW 316
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: CALL_OW 314
69107: OR
69108: PUSH
69109: LD_VAR 0 1
69113: PPUSH
69114: CALL_OW 302
69118: NOT
69119: OR
69120: PUSH
69121: LD_VAR 0 1
69125: PPUSH
69126: CALL_OW 301
69130: OR
69131: IFFALSE 69081
// RemoveSeeing ( _x , _y , side ) ;
69133: LD_VAR 0 8
69137: PPUSH
69138: LD_VAR 0 9
69142: PPUSH
69143: LD_VAR 0 6
69147: PPUSH
69148: CALL_OW 331
// end ; end_of_file
69152: LD_VAR 0 4
69156: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69157: LD_VAR 0 1
69161: PUSH
69162: LD_INT 200
69164: DOUBLE
69165: GREATEREQUAL
69166: IFFALSE 69174
69168: LD_INT 299
69170: DOUBLE
69171: LESSEQUAL
69172: IFTRUE 69176
69174: GO 69208
69176: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69177: LD_VAR 0 1
69181: PPUSH
69182: LD_VAR 0 2
69186: PPUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: LD_VAR 0 4
69196: PPUSH
69197: LD_VAR 0 5
69201: PPUSH
69202: CALL 64895 0 5
69206: GO 69285
69208: LD_INT 300
69210: DOUBLE
69211: GREATEREQUAL
69212: IFFALSE 69220
69214: LD_INT 399
69216: DOUBLE
69217: LESSEQUAL
69218: IFTRUE 69222
69220: GO 69284
69222: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69223: LD_VAR 0 1
69227: PPUSH
69228: LD_VAR 0 2
69232: PPUSH
69233: LD_VAR 0 3
69237: PPUSH
69238: LD_VAR 0 4
69242: PPUSH
69243: LD_VAR 0 5
69247: PPUSH
69248: LD_VAR 0 6
69252: PPUSH
69253: LD_VAR 0 7
69257: PPUSH
69258: LD_VAR 0 8
69262: PPUSH
69263: LD_VAR 0 9
69267: PPUSH
69268: LD_VAR 0 10
69272: PPUSH
69273: LD_VAR 0 11
69277: PPUSH
69278: CALL 62537 0 11
69282: GO 69285
69284: POP
// end ;
69285: PPOPN 11
69287: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: LD_VAR 0 3
69302: PPUSH
69303: LD_VAR 0 4
69307: PPUSH
69308: LD_VAR 0 5
69312: PPUSH
69313: CALL 64631 0 5
// end ;
69317: PPOPN 5
69319: END
