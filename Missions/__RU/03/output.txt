// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 46190 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2852 0 0
// PrepareRussians ;
  60: CALL 233 0 0
// MissionIntro ;
  64: CALL 6575 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; export KirovCurrentAttacker ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 86
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KirovCurrentAttacker := 1 ;
 104: LD_ADDR_EXP 43
 108: PUSH
 109: LD_INT 1
 111: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 112: LD_ADDR_EXP 34
 116: PUSH
 117: LD_INT 1
 119: PUSH
 120: LD_INT 2
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 4
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: LIST
 133: LIST
 134: PUSH
 135: LD_OWVAR 67
 139: ARRAY
 140: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 141: LD_ADDR_EXP 89
 145: PUSH
 146: LD_INT 105000
 148: PUSH
 149: LD_INT 84000
 151: PUSH
 152: LD_INT 63000
 154: PUSH
 155: LD_INT 63000
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: PUSH
 164: LD_OWVAR 67
 168: ARRAY
 169: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 170: LD_ADDR_EXP 90
 174: PUSH
 175: LD_INT 168000
 177: PUSH
 178: LD_INT 147000
 180: PUSH
 181: LD_INT 126000
 183: PUSH
 184: LD_INT 105000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 199: LD_ADDR_EXP 42
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 3
 209: PUSH
 210: LD_INT 4
 212: PUSH
 213: LD_INT 5
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// PrepareHeroes ;
 237: CALL 254 0 0
// PrepareBeriaBase ;
 241: CALL 957 0 0
// PrepareKirovBase ;
 245: CALL 1360 0 0
// end ;
 249: LD_VAR 0 1
 253: RET
// function PrepareHeroes ; var un ; begin
 254: LD_INT 0
 256: PPUSH
 257: PPUSH
// uc_side := 6 ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_INT 6
 265: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 266: LD_ADDR_EXP 52
 270: PUSH
 271: LD_STRING 02_burlakTeam
 273: PPUSH
 274: CALL_OW 31
 278: ST_TO_ADDR
// uc_side := 3 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 287: LD_ADDR_EXP 44
 291: PUSH
 292: LD_STRING Burlak
 294: PPUSH
 295: LD_EXP 3
 299: NOT
 300: PPUSH
 301: LD_EXP 4
 305: PPUSH
 306: CALL 12719 0 3
 310: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 311: LD_ADDR_EXP 45
 315: PUSH
 316: LD_STRING Gnyevko
 318: PPUSH
 319: LD_EXP 3
 323: NOT
 324: PPUSH
 325: LD_EXP 4
 329: PPUSH
 330: CALL 12719 0 3
 334: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 335: LD_ADDR_EXP 47
 339: PUSH
 340: LD_STRING Kovalyuk
 342: PPUSH
 343: LD_EXP 3
 347: NOT
 348: PPUSH
 349: LD_EXP 4
 353: PPUSH
 354: CALL 12719 0 3
 358: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 359: LD_ADDR_EXP 46
 363: PUSH
 364: LD_STRING Kirilenkova
 366: PPUSH
 367: LD_EXP 3
 371: NOT
 372: PPUSH
 373: LD_EXP 4
 377: PPUSH
 378: CALL 12719 0 3
 382: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_STRING Belkov
 390: PPUSH
 391: LD_EXP 3
 395: NOT
 396: PPUSH
 397: LD_EXP 4
 401: PPUSH
 402: CALL 12719 0 3
 406: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 407: LD_ADDR_EXP 50
 411: PUSH
 412: LD_STRING Benko
 414: PPUSH
 415: LD_EXP 3
 419: NOT
 420: PPUSH
 421: LD_EXP 4
 425: PPUSH
 426: CALL 12719 0 3
 430: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 431: LD_ADDR_EXP 51
 435: PUSH
 436: LD_STRING Kuklajs
 438: PPUSH
 439: LD_EXP 3
 443: NOT
 444: PPUSH
 445: LD_EXP 4
 449: PPUSH
 450: CALL 12719 0 3
 454: ST_TO_ADDR
// uc_side := 6 ;
 455: LD_ADDR_OWVAR 20
 459: PUSH
 460: LD_INT 6
 462: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 463: LD_ADDR_EXP 56
 467: PUSH
 468: LD_STRING Kurin
 470: PPUSH
 471: CALL_OW 25
 475: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 476: LD_ADDR_EXP 57
 480: PUSH
 481: LD_STRING Popov
 483: PPUSH
 484: CALL_OW 25
 488: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 489: LD_ADDR_EXP 65
 493: PUSH
 494: LD_STRING Grishko
 496: PPUSH
 497: CALL_OW 25
 501: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 502: LD_ADDR_EXP 66
 506: PUSH
 507: LD_STRING Gaydar
 509: PPUSH
 510: CALL_OW 25
 514: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 515: LD_ADDR_EXP 67
 519: PUSH
 520: LD_STRING Bukov
 522: PPUSH
 523: CALL_OW 25
 527: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 528: LD_EXP 44
 532: PUSH
 533: LD_EXP 45
 537: PUSH
 538: LD_EXP 47
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 555: LD_EXP 46
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 567: LD_EXP 56
 571: PPUSH
 572: LD_INT 153
 574: PPUSH
 575: LD_INT 103
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: CALL_OW 48
// AddComHold ( Kurin ) ;
 585: LD_EXP 56
 589: PPUSH
 590: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 594: LD_EXP 56
 598: PPUSH
 599: LD_INT 155
 601: PPUSH
 602: LD_INT 106
 604: PPUSH
 605: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 609: LD_EXP 57
 613: PPUSH
 614: LD_INT 131
 616: PPUSH
 617: LD_INT 49
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 48
// AddComHold ( Popov ) ;
 627: LD_EXP 57
 631: PPUSH
 632: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 636: LD_EXP 57
 640: PPUSH
 641: LD_INT 131
 643: PPUSH
 644: LD_INT 31
 646: PPUSH
 647: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 651: LD_EXP 66
 655: PPUSH
 656: LD_INT 91
 658: PPUSH
 659: LD_INT 15
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 48
// AddComHold ( Gaydar ) ;
 669: LD_EXP 66
 673: PPUSH
 674: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 678: LD_EXP 66
 682: PPUSH
 683: LD_INT 131
 685: PPUSH
 686: LD_INT 31
 688: PPUSH
 689: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 693: LD_EXP 67
 697: PPUSH
 698: LD_INT 86
 700: PPUSH
 701: LD_INT 17
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 48
// AddComHold ( Bukov ) ;
 711: LD_EXP 67
 715: PPUSH
 716: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 720: LD_EXP 67
 724: PPUSH
 725: LD_INT 94
 727: PPUSH
 728: LD_INT 32
 730: PPUSH
 731: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 735: LD_EXP 48
 739: PPUSH
 740: LD_INT 155
 742: PPUSH
 743: LD_INT 106
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 48
// AddComHold ( Belkov ) ;
 753: LD_EXP 48
 757: PPUSH
 758: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 762: LD_EXP 48
 766: PPUSH
 767: LD_EXP 56
 771: PPUSH
 772: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 776: LD_EXP 44
 780: PPUSH
 781: LD_INT 154
 783: PPUSH
 784: LD_INT 106
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 48
// AddComHold ( Burlak ) ;
 794: LD_EXP 44
 798: PPUSH
 799: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 803: LD_EXP 44
 807: PPUSH
 808: LD_EXP 56
 812: PPUSH
 813: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 817: LD_ADDR_EXP 70
 821: PUSH
 822: LD_EXP 45
 826: PUSH
 827: LD_EXP 47
 831: PUSH
 832: LD_EXP 46
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// for un in otherBeriaUnits do
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 52
 851: PUSH
 852: FOR_IN
 853: IFFALSE 895
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 855: LD_VAR 0 2
 859: PPUSH
 860: LD_INT 4
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 49
// AddComHold ( un ) ;
 870: LD_VAR 0 2
 874: PPUSH
 875: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 879: LD_VAR 0 2
 883: PPUSH
 884: LD_EXP 56
 888: PPUSH
 889: CALL_OW 179
// end ;
 893: GO 852
 895: POP
 896: POP
// for un in BurlakTeam do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_EXP 70
 906: PUSH
 907: FOR_IN
 908: IFFALSE 950
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 910: LD_VAR 0 2
 914: PPUSH
 915: LD_INT 4
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 49
// AddComHold ( un ) ;
 925: LD_VAR 0 2
 929: PPUSH
 930: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_EXP 56
 943: PPUSH
 944: CALL_OW 179
// end ;
 948: GO 907
 950: POP
 951: POP
// end ;
 952: LD_VAR 0 1
 956: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 957: LD_INT 0
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 964: LD_ADDR_EXP 53
 968: PUSH
 969: LD_STRING 02_Beria
 971: PPUSH
 972: EMPTY
 973: PPUSH
 974: CALL_OW 30
 978: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 979: LD_ADDR_EXP 55
 983: PUSH
 984: LD_STRING 02_VehiclesCount
 986: PPUSH
 987: EMPTY
 988: PPUSH
 989: CALL_OW 30
 993: ST_TO_ADDR
// uc_side := 3 ;
 994: LD_ADDR_OWVAR 20
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// uc_nation := 3 ;
1002: LD_ADDR_OWVAR 21
1006: PUSH
1007: LD_INT 3
1009: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1010: LD_ADDR_OWVAR 37
1014: PUSH
1015: LD_INT 21
1017: ST_TO_ADDR
// vc_control = control_manual ;
1018: LD_ADDR_OWVAR 38
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_engine = engine_combustion ;
1026: LD_ADDR_OWVAR 39
1030: PUSH
1031: LD_INT 1
1033: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1034: LD_ADDR_OWVAR 40
1038: PUSH
1039: LD_INT 42
1041: ST_TO_ADDR
// for i := 1 to beriaBase do
1042: LD_ADDR_VAR 0 2
1046: PUSH
1047: DOUBLE
1048: LD_INT 1
1050: DEC
1051: ST_TO_ADDR
1052: LD_EXP 53
1056: PUSH
1057: FOR_TO
1058: IFFALSE 1181
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1060: LD_ADDR_OWVAR 42
1064: PUSH
1065: LD_EXP 53
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1080: LD_ADDR_OWVAR 43
1084: PUSH
1085: LD_EXP 53
1089: PUSH
1090: LD_VAR 0 2
1094: ARRAY
1095: PUSH
1096: LD_INT 2
1098: ARRAY
1099: ST_TO_ADDR
// if bc_type = b_lab then
1100: LD_OWVAR 42
1104: PUSH
1105: LD_INT 6
1107: EQUAL
1108: IFFALSE 1126
// begin bc_kind1 := b_lab_basic ;
1110: LD_ADDR_OWVAR 44
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1118: LD_ADDR_OWVAR 45
1122: PUSH
1123: LD_INT 9
1125: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1126: LD_EXP 53
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 3
1139: ARRAY
1140: PUSH
1141: LD_INT 46
1143: PLUS
1144: PPUSH
1145: LD_EXP 53
1149: PUSH
1150: LD_VAR 0 2
1154: ARRAY
1155: PUSH
1156: LD_INT 4
1158: ARRAY
1159: PPUSH
1160: LD_EXP 53
1164: PUSH
1165: LD_VAR 0 2
1169: ARRAY
1170: PUSH
1171: LD_INT 5
1173: ARRAY
1174: PPUSH
1175: CALL_OW 47
// end ;
1179: GO 1057
1181: POP
1182: POP
// for i := 1 to beriaVehs do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: DOUBLE
1189: LD_INT 1
1191: DEC
1192: ST_TO_ADDR
1193: LD_EXP 55
1197: PUSH
1198: FOR_TO
1199: IFFALSE 1263
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1201: LD_ADDR_OWVAR 41
1205: PUSH
1206: LD_INT 20
1208: PUSH
1209: LD_INT 35
1211: PUSH
1212: LD_INT 50
1214: PUSH
1215: LD_INT 80
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_INT 1
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: CALL_OW 12
1234: ARRAY
1235: ST_TO_ADDR
// veh = CreateVehicle ;
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: CALL_OW 45
1245: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_INT 11
1253: PPUSH
1254: LD_INT 0
1256: PPUSH
1257: CALL_OW 49
// end ;
1261: GO 1198
1263: POP
1264: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1265: LD_ADDR_VAR 0 5
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_INT 3
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 30
1282: PUSH
1283: LD_INT 0
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PPUSH
1294: CALL_OW 69
1298: PUSH
1299: LD_INT 1
1301: ARRAY
1302: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1303: LD_VAR 0 5
1307: PPUSH
1308: LD_STRING beria
1310: PPUSH
1311: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , 1 , 100 ) ;
1315: LD_VAR 0 5
1319: PPUSH
1320: CALL_OW 274
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: LD_INT 100
1330: PPUSH
1331: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , 2 , 20 ) ;
1335: LD_VAR 0 5
1339: PPUSH
1340: CALL_OW 274
1344: PPUSH
1345: LD_INT 2
1347: PPUSH
1348: LD_INT 20
1350: PPUSH
1351: CALL_OW 277
// end ;
1355: LD_VAR 0 1
1359: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1360: LD_INT 0
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1370: LD_ADDR_EXP 59
1374: PUSH
1375: LD_STRING 02_Kirov
1377: PPUSH
1378: EMPTY
1379: PPUSH
1380: CALL_OW 30
1384: ST_TO_ADDR
// uc_side := 6 ;
1385: LD_ADDR_OWVAR 20
1389: PUSH
1390: LD_INT 6
1392: ST_TO_ADDR
// uc_nation := 3 ;
1393: LD_ADDR_OWVAR 21
1397: PUSH
1398: LD_INT 3
1400: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1401: LD_ADDR_EXP 58
1405: PUSH
1406: LD_STRING 02_kirovTeam
1408: PPUSH
1409: CALL_OW 31
1413: ST_TO_ADDR
// for i := 1 to kirovBase do
1414: LD_ADDR_VAR 0 2
1418: PUSH
1419: DOUBLE
1420: LD_INT 1
1422: DEC
1423: ST_TO_ADDR
1424: LD_EXP 59
1428: PUSH
1429: FOR_TO
1430: IFFALSE 1579
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1432: LD_ADDR_OWVAR 42
1436: PUSH
1437: LD_EXP 59
1441: PUSH
1442: LD_VAR 0 2
1446: ARRAY
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1452: LD_ADDR_OWVAR 43
1456: PUSH
1457: LD_EXP 59
1461: PUSH
1462: LD_VAR 0 2
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1472: LD_ADDR_VAR 0 6
1476: PUSH
1477: LD_EXP 59
1481: PUSH
1482: LD_VAR 0 2
1486: ARRAY
1487: PUSH
1488: LD_INT 3
1490: ARRAY
1491: PUSH
1492: LD_INT 46
1494: PLUS
1495: ST_TO_ADDR
// if x < 140 then
1496: LD_VAR 0 6
1500: PUSH
1501: LD_INT 140
1503: LESS
1504: IFFALSE 1516
// uc_side := 3 else
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 3
1513: ST_TO_ADDR
1514: GO 1524
// uc_side := 6 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 6
1523: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1524: LD_EXP 59
1528: PUSH
1529: LD_VAR 0 2
1533: ARRAY
1534: PUSH
1535: LD_INT 3
1537: ARRAY
1538: PUSH
1539: LD_INT 46
1541: PLUS
1542: PPUSH
1543: LD_EXP 59
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: PPUSH
1558: LD_EXP 59
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 5
1571: ARRAY
1572: PPUSH
1573: CALL_OW 47
// end ;
1577: GO 1429
1579: POP
1580: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1581: LD_ADDR_EXP 60
1585: PUSH
1586: LD_INT 22
1588: PUSH
1589: LD_INT 6
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 30
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 69
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1619: LD_EXP 60
1623: PPUSH
1624: LD_STRING kirov
1626: PPUSH
1627: CALL_OW 500
// for i := 1 to 2 do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_INT 2
1643: PUSH
1644: FOR_TO
1645: IFFALSE 1671
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1647: LD_EXP 60
1651: PPUSH
1652: CALL_OW 274
1656: PPUSH
1657: LD_VAR 0 2
1661: PPUSH
1662: LD_INT 500
1664: PPUSH
1665: CALL_OW 277
1669: GO 1644
1671: POP
1672: POP
// tmp := otherKirovUnits ;
1673: LD_ADDR_VAR 0 4
1677: PUSH
1678: LD_EXP 58
1682: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1683: LD_ADDR_VAR 0 5
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 6
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 21
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 3
1710: PUSH
1711: LD_INT 30
1713: PUSH
1714: LD_INT 31
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PPUSH
1730: CALL_OW 69
1734: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1735: LD_ADDR_VAR 0 7
1739: PUSH
1740: LD_VAR 0 5
1744: PUSH
1745: LD_INT 1
1747: ARRAY
1748: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1749: LD_VAR 0 4
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_VAR 0 7
1762: PPUSH
1763: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_VAR 0 4
1776: PPUSH
1777: LD_INT 1
1779: PPUSH
1780: CALL_OW 3
1784: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1785: LD_VAR 0 7
1789: PPUSH
1790: CALL_OW 313
1794: PUSH
1795: LD_INT 3
1797: EQUAL
1798: IFFALSE 1818
// buildings := Delete ( buildings , 1 ) ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: LD_VAR 0 5
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: CALL_OW 3
1817: ST_TO_ADDR
// until not buildings or not tmp ;
1818: LD_VAR 0 5
1822: NOT
1823: PUSH
1824: LD_VAR 0 4
1828: NOT
1829: OR
1830: IFFALSE 1735
// if tmp then
1832: LD_VAR 0 4
1836: IFFALSE 1876
// begin for i in tmp do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: LD_VAR 0 4
1847: PUSH
1848: FOR_IN
1849: IFFALSE 1874
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1851: LD_VAR 0 2
1855: PPUSH
1856: LD_INT 164
1858: PPUSH
1859: LD_INT 109
1861: PPUSH
1862: LD_INT 4
1864: PPUSH
1865: LD_INT 0
1867: PPUSH
1868: CALL_OW 50
1872: GO 1848
1874: POP
1875: POP
// end ; end ;
1876: LD_VAR 0 1
1880: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1881: LD_INT 0
1883: PPUSH
1884: PPUSH
1885: PPUSH
1886: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1887: LD_ADDR_VAR 0 4
1891: PUSH
1892: LD_INT 32
1894: PUSH
1895: LD_INT 146
1897: PUSH
1898: LD_INT 106
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 32
1912: PUSH
1913: LD_INT 175
1915: PUSH
1916: LD_INT 123
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 32
1930: PUSH
1931: LD_INT 170
1933: PUSH
1934: LD_INT 101
1936: PUSH
1937: LD_INT 3
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 32
1948: PUSH
1949: LD_INT 172
1951: PUSH
1952: LD_INT 104
1954: PUSH
1955: LD_INT 4
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 32
1966: PUSH
1967: LD_INT 179
1969: PUSH
1970: LD_INT 118
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 26
1984: PUSH
1985: LD_INT 159
1987: PUSH
1988: LD_INT 96
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
2008: LD_ADDR_EXP 71
2012: PUSH
2013: LD_INT 22
2015: PUSH
2016: LD_INT 6
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 21
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 25
2035: PUSH
2036: LD_INT 2
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 69
2052: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2053: LD_ADDR_EXP 62
2057: PUSH
2058: LD_INT 22
2060: PUSH
2061: LD_INT 6
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 21
2070: PUSH
2071: LD_INT 3
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 30
2080: PUSH
2081: LD_INT 6
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PPUSH
2093: CALL_OW 69
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2102: LD_ADDR_EXP 63
2106: PUSH
2107: LD_INT 22
2109: PUSH
2110: LD_INT 6
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 21
2119: PUSH
2120: LD_INT 3
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 4
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 69
2146: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2147: LD_ADDR_EXP 64
2151: PUSH
2152: LD_INT 22
2154: PUSH
2155: LD_INT 6
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 21
2164: PUSH
2165: LD_INT 3
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PPUSH
2187: CALL_OW 69
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2196: LD_ADDR_VAR 0 3
2200: PUSH
2201: LD_INT 22
2203: PUSH
2204: LD_INT 6
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 21
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 25
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 69
2240: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2241: LD_VAR 0 3
2245: PPUSH
2246: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2250: LD_VAR 0 3
2254: PPUSH
2255: LD_EXP 64
2259: PPUSH
2260: CALL_OW 180
// wait ( 0 0$1 ) ;
2264: LD_INT 35
2266: PPUSH
2267: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 21
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 25
2298: PUSH
2299: LD_INT 4
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PPUSH
2311: CALL_OW 69
2315: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2316: LD_VAR 0 3
2320: PPUSH
2321: LD_EXP 62
2325: PPUSH
2326: CALL_OW 180
// for i in kirovBuildingArray do
2330: LD_ADDR_VAR 0 2
2334: PUSH
2335: LD_VAR 0 4
2339: PUSH
2340: FOR_IN
2341: IFFALSE 2390
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2343: LD_EXP 71
2347: PPUSH
2348: LD_VAR 0 2
2352: PUSH
2353: LD_INT 1
2355: ARRAY
2356: PPUSH
2357: LD_VAR 0 2
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_VAR 0 2
2370: PUSH
2371: LD_INT 3
2373: ARRAY
2374: PPUSH
2375: LD_VAR 0 2
2379: PUSH
2380: LD_INT 4
2382: ARRAY
2383: PPUSH
2384: CALL_OW 205
2388: GO 2340
2390: POP
2391: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2392: LD_ADDR_EXP 2
2396: PUSH
2397: LD_EXP 62
2401: PUSH
2402: LD_EXP 63
2406: PUSH
2407: LD_INT 1
2409: ARRAY
2410: PUSH
2411: LD_EXP 63
2415: PUSH
2416: LD_INT 2
2418: ARRAY
2419: PUSH
2420: LD_EXP 60
2424: PUSH
2425: LD_EXP 64
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: ST_TO_ADDR
// end ;
2437: LD_VAR 0 1
2441: RET
// export function PrepareScholtze ; begin
2442: LD_INT 0
2444: PPUSH
// uc_side := 5 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 5
2452: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2453: LD_ADDR_EXP 68
2457: PUSH
2458: LD_STRING Scholtze
2460: PPUSH
2461: CALL_OW 25
2465: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2466: LD_ADDR_EXP 69
2470: PUSH
2471: LD_STRING Scholtze
2473: PPUSH
2474: CALL_OW 25
2478: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2479: LD_EXP 68
2483: PPUSH
2484: LD_INT 12
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 49
// end ;
2494: LD_VAR 0 1
2498: RET
// export function KirovAttackOmicron ; begin
2499: LD_INT 0
2501: PPUSH
// if KirovCurrentAttacker = Length ( kirovAttackVehicles ) then
2502: LD_EXP 43
2506: PUSH
2507: LD_EXP 91
2511: PPUSH
2512: CALL 53225 0 1
2516: EQUAL
2517: IFFALSE 2527
// KirovCurrentAttacker = 1 ;
2519: LD_ADDR_EXP 43
2523: PUSH
2524: LD_INT 1
2526: ST_TO_ADDR
// AgressiveMove ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ [ 34 , 38 ] ] ) ;
2527: LD_EXP 91
2531: PUSH
2532: LD_EXP 43
2536: ARRAY
2537: PPUSH
2538: LD_INT 34
2540: PUSH
2541: LD_INT 38
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: EMPTY
2549: LIST
2550: PPUSH
2551: CALL 52104 0 2
// end ; end_of_file
2555: LD_VAR 0 1
2559: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2560: LD_INT 0
2562: PPUSH
2563: PPUSH
2564: PPUSH
2565: PPUSH
// amIntroUnits = [ ] ;
2566: LD_ADDR_EXP 75
2570: PUSH
2571: EMPTY
2572: ST_TO_ADDR
// uc_side = 1 ;
2573: LD_ADDR_OWVAR 20
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// uc_nation = nation_american ;
2581: LD_ADDR_OWVAR 21
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2589: LD_ADDR_OWVAR 37
2593: PUSH
2594: LD_INT 3
2596: ST_TO_ADDR
// vc_control = control_manual ;
2597: LD_ADDR_OWVAR 38
2601: PUSH
2602: LD_INT 1
2604: ST_TO_ADDR
// vc_engine = engine_combustion ;
2605: LD_ADDR_OWVAR 39
2609: PUSH
2610: LD_INT 1
2612: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2613: LD_ADDR_OWVAR 40
2617: PUSH
2618: LD_INT 3
2620: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2621: LD_ADDR_OWVAR 41
2625: PUSH
2626: LD_INT 100
2628: ST_TO_ADDR
// veh = CreateVehicle ;
2629: LD_ADDR_VAR 0 3
2633: PUSH
2634: CALL_OW 45
2638: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 4
2646: PPUSH
2647: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2651: LD_ADDR_EXP 75
2655: PUSH
2656: LD_EXP 75
2660: PUSH
2661: LD_VAR 0 3
2665: ADD
2666: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2667: LD_VAR 0 3
2671: PPUSH
2672: LD_INT 7
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 49
// for i := 1 to 3 do
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: DOUBLE
2688: LD_INT 1
2690: DEC
2691: ST_TO_ADDR
2692: LD_INT 3
2694: PUSH
2695: FOR_TO
2696: IFFALSE 2817
// begin hc_name :=  ;
2698: LD_ADDR_OWVAR 26
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2714: LD_INT 0
2716: PPUSH
2717: LD_EXP 42
2721: PPUSH
2722: CALL_OW 381
// human = CreateHuman ;
2726: LD_ADDR_VAR 0 4
2730: PUSH
2731: CALL_OW 44
2735: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2736: LD_ADDR_EXP 75
2740: PUSH
2741: LD_EXP 75
2745: PUSH
2746: LD_VAR 0 4
2750: ADD
2751: ST_TO_ADDR
// if i < 3 then
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 3
2759: LESS
2760: IFFALSE 2779
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2762: LD_VAR 0 4
2766: PPUSH
2767: LD_INT 7
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 49
2777: GO 2815
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_EXP 42
2786: PPUSH
2787: CALL_OW 383
// human = CreateHuman ;
2791: LD_ADDR_VAR 0 4
2795: PUSH
2796: CALL_OW 44
2800: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_VAR 0 3
2810: PPUSH
2811: CALL_OW 52
// end ; end ;
2815: GO 2695
2817: POP
2818: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2819: LD_INT 120
2821: PPUSH
2822: LD_INT 36
2824: PPUSH
2825: LD_INT 3
2827: PPUSH
2828: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2832: LD_EXP 75
2836: PPUSH
2837: LD_INT 26
2839: PPUSH
2840: LD_INT 34
2842: PPUSH
2843: CALL_OW 111
// end ;
2847: LD_VAR 0 1
2851: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2852: LD_INT 0
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2860: LD_ADDR_EXP 76
2864: PUSH
2865: LD_INT 1
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: PUSH
2883: LD_OWVAR 67
2887: ARRAY
2888: PUSH
2889: LD_INT 0
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: LD_INT 1
2897: PUSH
2898: LD_INT 1
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: PUSH
2907: LD_OWVAR 67
2911: ARRAY
2912: PUSH
2913: LD_INT 1
2915: PUSH
2916: LD_INT 1
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: LD_OWVAR 67
2935: ARRAY
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: LD_INT 1
2942: PUSH
2943: LD_INT 1
2945: PUSH
2946: LD_INT 2
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: PUSH
2955: LD_OWVAR 67
2959: ARRAY
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 2
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PUSH
2979: LD_OWVAR 67
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: LD_INT 5
3000: PUSH
3001: LD_INT 6
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_OWVAR 67
3014: ARRAY
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: LD_INT 1
3021: PUSH
3022: LD_INT 1
3024: PUSH
3025: LD_INT 2
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: PUSH
3034: LD_OWVAR 67
3038: ARRAY
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: LD_INT 2
3048: PUSH
3049: LD_INT 3
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: PUSH
3058: LD_OWVAR 67
3062: ARRAY
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 1
3069: PUSH
3070: LD_INT 2
3072: PUSH
3073: LD_INT 3
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_OWVAR 67
3086: ARRAY
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: LD_INT 3
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_OWVAR 67
3110: ARRAY
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: LD_INT 2
3124: PUSH
3125: LD_INT 3
3127: PUSH
3128: LD_INT 4
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_OWVAR 67
3141: ARRAY
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_OWVAR 67
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: PUSH
3185: LD_OWVAR 67
3189: ARRAY
3190: PUSH
3191: LD_INT 1
3193: PUSH
3194: LD_INT 1
3196: PUSH
3197: LD_INT 1
3199: PUSH
3200: LD_INT 2
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: LD_OWVAR 67
3213: ARRAY
3214: PUSH
3215: LD_INT 1
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: LD_INT 1
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: PUSH
3233: LD_OWVAR 67
3237: ARRAY
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: LD_INT 4
3251: PUSH
3252: LD_INT 6
3254: PUSH
3255: LD_INT 7
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: LD_OWVAR 67
3268: ARRAY
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 1
3275: PUSH
3276: LD_INT 1
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_OWVAR 67
3292: ARRAY
3293: PUSH
3294: LD_INT 1
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: LD_INT 2
3302: PUSH
3303: LD_INT 3
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: PUSH
3312: LD_OWVAR 67
3316: ARRAY
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 1
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: LD_INT 3
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_OWVAR 67
3340: ARRAY
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 3
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_OWVAR 67
3364: ARRAY
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3379: LD_ADDR_VAR 0 6
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 33
3392: PUSH
3393: LD_INT 2
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 29
3404: PUSH
3405: LD_INT 38
3407: PUSH
3408: LD_INT 30
3410: PUSH
3411: LD_INT 5
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: LD_INT 34
3425: PUSH
3426: LD_INT 25
3428: PUSH
3429: LD_INT 4
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 5
3440: PUSH
3441: LD_INT 35
3443: PUSH
3444: LD_INT 45
3446: PUSH
3447: LD_INT 4
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 6
3458: PUSH
3459: LD_INT 27
3461: PUSH
3462: LD_INT 27
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 6
3476: PUSH
3477: LD_INT 15
3479: PUSH
3480: LD_INT 23
3482: PUSH
3483: LD_INT 1
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 31
3494: PUSH
3495: LD_INT 25
3497: PUSH
3498: LD_INT 8
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 32
3512: PUSH
3513: LD_INT 37
3515: PUSH
3516: LD_INT 35
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 32
3530: PUSH
3531: LD_INT 42
3533: PUSH
3534: LD_INT 45
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 32
3548: PUSH
3549: LD_INT 29
3551: PUSH
3552: LD_INT 17
3554: PUSH
3555: LD_INT 4
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_INT 32
3566: PUSH
3567: LD_INT 30
3569: PUSH
3570: LD_INT 53
3572: PUSH
3573: LD_INT 0
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 32
3584: PUSH
3585: LD_INT 42
3587: PUSH
3588: LD_INT 56
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: LD_INT 32
3602: PUSH
3603: LD_INT 30
3605: PUSH
3606: LD_INT 20
3608: PUSH
3609: LD_INT 4
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 27
3620: PUSH
3621: LD_INT 7
3623: PUSH
3624: LD_INT 8
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: PUSH
3636: LD_INT 27
3638: PUSH
3639: LD_INT 10
3641: PUSH
3642: LD_INT 8
3644: PUSH
3645: LD_INT 1
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 27
3656: PUSH
3657: LD_INT 13
3659: PUSH
3660: LD_INT 8
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 26
3674: PUSH
3675: LD_INT 23
3677: PUSH
3678: LD_INT 42
3680: PUSH
3681: LD_INT 4
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 3
3692: PUSH
3693: LD_INT 13
3695: PUSH
3696: LD_INT 14
3698: PUSH
3699: LD_INT 1
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 19
3710: PUSH
3711: LD_INT 10
3713: PUSH
3714: LD_INT 11
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: PUSH
3726: LD_INT 17
3728: PUSH
3729: LD_INT 9
3731: PUSH
3732: LD_INT 14
3734: PUSH
3735: LD_INT 1
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 16
3746: PUSH
3747: LD_INT 13
3749: PUSH
3750: LD_INT 17
3752: PUSH
3753: LD_INT 0
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: ST_TO_ADDR
// for i in omiBuildingArray do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: LD_VAR 0 6
3794: PUSH
3795: FOR_IN
3796: IFFALSE 3852
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: LD_VAR 0 2
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: PPUSH
3816: LD_VAR 0 2
3820: PUSH
3821: LD_INT 2
3823: ARRAY
3824: PPUSH
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 3
3832: ARRAY
3833: PPUSH
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 4
3841: ARRAY
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL 53247 0 8
3850: GO 3795
3852: POP
3853: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3854: LD_ADDR_EXP 74
3858: PUSH
3859: LD_INT 22
3861: PUSH
3862: LD_INT 1
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 30
3871: PUSH
3872: LD_INT 1
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 69
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3892: LD_EXP 74
3896: PPUSH
3897: LD_STRING omikron
3899: PPUSH
3900: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3904: LD_ADDR_EXP 78
3908: PUSH
3909: LD_INT 22
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 30
3921: PUSH
3922: LD_INT 5
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PPUSH
3933: CALL_OW 69
3937: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3938: LD_ADDR_EXP 77
3942: PUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 1
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 30
3955: PUSH
3956: LD_INT 6
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PPUSH
3967: CALL_OW 69
3971: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3972: LD_ADDR_EXP 79
3976: PUSH
3977: LD_INT 22
3979: PUSH
3980: LD_INT 1
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PUSH
3987: LD_INT 30
3989: PUSH
3990: LD_INT 3
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PPUSH
4001: CALL_OW 69
4005: PUSH
4006: LD_INT 1
4008: ARRAY
4009: ST_TO_ADDR
// for i := 1 to 2 do
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 2
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4050
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
4026: LD_EXP 74
4030: PPUSH
4031: CALL_OW 274
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_INT 500
4043: PPUSH
4044: CALL_OW 277
4048: GO 4023
4050: POP
4051: POP
// uc_side := 1 ;
4052: LD_ADDR_OWVAR 20
4056: PUSH
4057: LD_INT 1
4059: ST_TO_ADDR
// uc_nation := 1 ;
4060: LD_ADDR_OWVAR 21
4064: PUSH
4065: LD_INT 1
4067: ST_TO_ADDR
// omicronSquad := [ ] ;
4068: LD_ADDR_EXP 72
4072: PUSH
4073: EMPTY
4074: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
4075: LD_ADDR_VAR 0 2
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 30
4095: PUSH
4096: LD_INT 32
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 30
4105: PUSH
4106: LD_INT 31
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: PUSH
4127: FOR_IN
4128: IFFALSE 4247
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PUSH
4139: LD_INT 4
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: LD_OWVAR 67
4154: ARRAY
4155: PPUSH
4156: CALL_OW 380
// un := CreateHuman ;
4160: LD_ADDR_VAR 0 3
4164: PUSH
4165: CALL_OW 44
4169: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4170: LD_ADDR_EXP 72
4174: PUSH
4175: LD_EXP 72
4179: PUSH
4180: LD_VAR 0 3
4184: UNION
4185: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4186: LD_VAR 0 3
4190: PPUSH
4191: LD_VAR 0 2
4195: PPUSH
4196: CALL_OW 254
4200: PUSH
4201: LD_INT 3
4203: MINUS
4204: PPUSH
4205: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4209: LD_VAR 0 3
4213: PPUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4223: LD_VAR 0 2
4227: PPUSH
4228: LD_VAR 0 2
4232: PPUSH
4233: LD_INT 8
4235: PPUSH
4236: CALL 22823 0 2
4240: PPUSH
4241: CALL_OW 431
// end ;
4245: GO 4127
4247: POP
4248: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4249: LD_ADDR_VAR 0 2
4253: PUSH
4254: DOUBLE
4255: LD_INT 1
4257: DEC
4258: ST_TO_ADDR
4259: LD_INT 3
4261: PUSH
4262: LD_INT 4
4264: PUSH
4265: LD_INT 5
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: LD_OWVAR 67
4277: ARRAY
4278: PUSH
4279: FOR_TO
4280: IFFALSE 4337
// begin PrepareHuman ( false , 2 , 2 ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: LD_INT 2
4290: PPUSH
4291: CALL_OW 380
// un := CreateHuman ;
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: CALL_OW 44
4304: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4305: LD_ADDR_EXP 72
4309: PUSH
4310: LD_EXP 72
4314: PUSH
4315: LD_VAR 0 3
4319: UNION
4320: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_EXP 74
4330: PPUSH
4331: CALL_OW 52
// end ;
4335: GO 4279
4337: POP
4338: POP
// for i := 1 to 2 do
4339: LD_ADDR_VAR 0 2
4343: PUSH
4344: DOUBLE
4345: LD_INT 1
4347: DEC
4348: ST_TO_ADDR
4349: LD_INT 2
4351: PUSH
4352: FOR_TO
4353: IFFALSE 4519
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4355: LD_INT 2
4357: PUSH
4358: LD_INT 3
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: LD_INT 1
4376: PPUSH
4377: LD_INT 3
4379: PUSH
4380: LD_INT 4
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PPUSH
4393: LD_INT 100
4395: PPUSH
4396: CALL 17583 0 5
// veh := CreateVehicle ;
4400: LD_ADDR_VAR 0 5
4404: PUSH
4405: CALL_OW 45
4409: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 28
4417: PPUSH
4418: LD_INT 37
4420: PPUSH
4421: LD_INT 6
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4431: LD_INT 0
4433: PPUSH
4434: LD_INT 3
4436: PPUSH
4437: LD_INT 2
4439: PPUSH
4440: CALL_OW 380
// un := CreateHuman ;
4444: LD_ADDR_VAR 0 3
4448: PUSH
4449: CALL_OW 44
4453: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4454: LD_ADDR_EXP 72
4458: PUSH
4459: LD_EXP 72
4463: PUSH
4464: LD_VAR 0 3
4468: UNION
4469: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_VAR 0 5
4479: PPUSH
4480: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4484: LD_VAR 0 3
4488: PPUSH
4489: LD_VAR 0 3
4493: PPUSH
4494: CALL_OW 250
4498: PUSH
4499: LD_INT 3
4501: PLUS
4502: PPUSH
4503: LD_VAR 0 3
4507: PPUSH
4508: CALL_OW 251
4512: PPUSH
4513: CALL_OW 111
// end ;
4517: GO 4352
4519: POP
4520: POP
// end ;
4521: LD_VAR 0 1
4525: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4526: LD_INT 0
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
// uc_side := 1 ;
4538: LD_ADDR_OWVAR 20
4542: PUSH
4543: LD_INT 1
4545: ST_TO_ADDR
// uc_nation := 1 ;
4546: LD_ADDR_OWVAR 21
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// hc_name :=  ;
4554: LD_ADDR_OWVAR 26
4558: PUSH
4559: LD_STRING 
4561: ST_TO_ADDR
// hc_gallery :=  ;
4562: LD_ADDR_OWVAR 33
4566: PUSH
4567: LD_STRING 
4569: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4570: LD_ADDR_VAR 0 8
4574: PUSH
4575: DOUBLE
4576: LD_INT 1
4578: DEC
4579: ST_TO_ADDR
4580: LD_VAR 0 1
4584: PUSH
4585: FOR_TO
4586: IFFALSE 4661
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4588: LD_INT 0
4590: PPUSH
4591: LD_EXP 42
4595: PPUSH
4596: CALL_OW 381
// un = CreateHuman ;
4600: LD_ADDR_VAR 0 9
4604: PUSH
4605: CALL_OW 44
4609: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4610: LD_ADDR_EXP 81
4614: PUSH
4615: LD_EXP 81
4619: PUSH
4620: LD_VAR 0 9
4624: ADD
4625: ST_TO_ADDR
// sols := sols ^ un ;
4626: LD_ADDR_VAR 0 12
4630: PUSH
4631: LD_VAR 0 12
4635: PUSH
4636: LD_VAR 0 9
4640: ADD
4641: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4642: LD_VAR 0 9
4646: PPUSH
4647: LD_VAR 0 6
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: CALL_OW 49
// end ;
4659: GO 4585
4661: POP
4662: POP
// for i := 1 to engsAmount do
4663: LD_ADDR_VAR 0 8
4667: PUSH
4668: DOUBLE
4669: LD_INT 1
4671: DEC
4672: ST_TO_ADDR
4673: LD_VAR 0 2
4677: PUSH
4678: FOR_TO
4679: IFFALSE 4754
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4681: LD_INT 0
4683: PPUSH
4684: LD_EXP 42
4688: PPUSH
4689: CALL_OW 382
// un = CreateHuman ;
4693: LD_ADDR_VAR 0 9
4697: PUSH
4698: CALL_OW 44
4702: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4703: LD_ADDR_EXP 81
4707: PUSH
4708: LD_EXP 81
4712: PUSH
4713: LD_VAR 0 9
4717: ADD
4718: ST_TO_ADDR
// engs := engs ^ un ;
4719: LD_ADDR_VAR 0 13
4723: PUSH
4724: LD_VAR 0 13
4728: PUSH
4729: LD_VAR 0 9
4733: ADD
4734: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4735: LD_VAR 0 9
4739: PPUSH
4740: LD_VAR 0 6
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 49
// end ;
4752: GO 4678
4754: POP
4755: POP
// for i := 1 to mechsAmount do
4756: LD_ADDR_VAR 0 8
4760: PUSH
4761: DOUBLE
4762: LD_INT 1
4764: DEC
4765: ST_TO_ADDR
4766: LD_VAR 0 3
4770: PUSH
4771: FOR_TO
4772: IFFALSE 4847
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4774: LD_INT 0
4776: PPUSH
4777: LD_EXP 42
4781: PPUSH
4782: CALL_OW 383
// un = CreateHuman ;
4786: LD_ADDR_VAR 0 9
4790: PUSH
4791: CALL_OW 44
4795: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4796: LD_ADDR_EXP 81
4800: PUSH
4801: LD_EXP 81
4805: PUSH
4806: LD_VAR 0 9
4810: ADD
4811: ST_TO_ADDR
// mechs := mechs ^ un ;
4812: LD_ADDR_VAR 0 14
4816: PUSH
4817: LD_VAR 0 14
4821: PUSH
4822: LD_VAR 0 9
4826: ADD
4827: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4828: LD_VAR 0 9
4832: PPUSH
4833: LD_VAR 0 6
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 49
// end ;
4845: GO 4771
4847: POP
4848: POP
// for i := 1 to scientistsAmount do
4849: LD_ADDR_VAR 0 8
4853: PUSH
4854: DOUBLE
4855: LD_INT 1
4857: DEC
4858: ST_TO_ADDR
4859: LD_VAR 0 4
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4940
// begin PrepareScientist ( false , enemySkillLevel ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_EXP 42
4874: PPUSH
4875: CALL_OW 384
// un = CreateHuman ;
4879: LD_ADDR_VAR 0 9
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4889: LD_ADDR_EXP 81
4893: PUSH
4894: LD_EXP 81
4898: PUSH
4899: LD_VAR 0 9
4903: ADD
4904: ST_TO_ADDR
// scis := scis ^ un ;
4905: LD_ADDR_VAR 0 15
4909: PUSH
4910: LD_VAR 0 15
4914: PUSH
4915: LD_VAR 0 9
4919: ADD
4920: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4921: LD_VAR 0 9
4925: PPUSH
4926: LD_VAR 0 6
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// end ;
4938: GO 4864
4940: POP
4941: POP
// for i := 1 to vehiclesAmount do
4942: LD_ADDR_VAR 0 8
4946: PUSH
4947: DOUBLE
4948: LD_INT 1
4950: DEC
4951: ST_TO_ADDR
4952: LD_VAR 0 5
4956: PUSH
4957: FOR_TO
4958: IFFALSE 5140
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4960: LD_ADDR_OWVAR 40
4964: PUSH
4965: LD_INT 2
4967: PUSH
4968: LD_INT 4
4970: PUSH
4971: LD_INT 3
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 1
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4991: LD_ADDR_OWVAR 37
4995: PUSH
4996: LD_INT 3
4998: ST_TO_ADDR
// vc_control = control_manual ;
4999: LD_ADDR_OWVAR 38
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// vc_engine = engine_combustion ;
5007: LD_ADDR_OWVAR 39
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// veh = CreateVehicle ;
5015: LD_ADDR_VAR 0 10
5019: PUSH
5020: CALL_OW 45
5024: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
5025: LD_ADDR_EXP 81
5029: PUSH
5030: LD_EXP 81
5034: PUSH
5035: LD_VAR 0 10
5039: ADD
5040: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5041: LD_VAR 0 10
5045: PPUSH
5046: LD_VAR 0 6
5050: PPUSH
5051: LD_INT 0
5053: PPUSH
5054: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
5058: LD_INT 0
5060: PPUSH
5061: LD_EXP 42
5065: PPUSH
5066: CALL_OW 383
// un = CreateHuman ;
5070: LD_ADDR_VAR 0 9
5074: PUSH
5075: CALL_OW 44
5079: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
5080: LD_ADDR_EXP 81
5084: PUSH
5085: LD_EXP 81
5089: PUSH
5090: LD_VAR 0 9
5094: ADD
5095: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
5096: LD_ADDR_EXP 80
5100: PUSH
5101: LD_EXP 80
5105: PUSH
5106: LD_VAR 0 10
5110: ADD
5111: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5112: LD_VAR 0 9
5116: PPUSH
5117: LD_VAR 0 10
5121: PPUSH
5122: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5126: LD_VAR 0 10
5130: PPUSH
5131: LD_INT 100
5133: PPUSH
5134: CALL_OW 240
// end ;
5138: GO 4957
5140: POP
5141: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5142: LD_EXP 81
5146: PPUSH
5147: LD_INT 25
5149: PPUSH
5150: LD_INT 31
5152: PPUSH
5153: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5157: LD_EXP 80
5161: PPUSH
5162: LD_INT 95
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: EMPTY
5173: LIST
5174: PPUSH
5175: CALL 52104 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5179: LD_VAR 0 12
5183: PPUSH
5184: LD_EXP 78
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PUSH
5193: LD_EXP 78
5197: PUSH
5198: LD_INT 2
5200: ARRAY
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 1
5208: PPUSH
5209: LD_INT 2
5211: PPUSH
5212: CALL_OW 12
5216: ARRAY
5217: PPUSH
5218: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5222: LD_VAR 0 13
5226: PPUSH
5227: LD_EXP 74
5231: PPUSH
5232: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5236: LD_VAR 0 14
5240: PPUSH
5241: LD_EXP 79
5245: PPUSH
5246: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5250: LD_VAR 0 15
5254: PPUSH
5255: LD_EXP 77
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: PUSH
5264: LD_EXP 77
5268: PUSH
5269: LD_INT 2
5271: ARRAY
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 1
5279: PPUSH
5280: LD_INT 2
5282: PPUSH
5283: CALL_OW 12
5287: ARRAY
5288: PPUSH
5289: CALL_OW 180
// amConvoyTroops :=  ;
5293: LD_ADDR_EXP 81
5297: PUSH
5298: LD_STRING 
5300: ST_TO_ADDR
// sols :=  ;
5301: LD_ADDR_VAR 0 12
5305: PUSH
5306: LD_STRING 
5308: ST_TO_ADDR
// engs :=  ;
5309: LD_ADDR_VAR 0 13
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// mechs :=  ;
5317: LD_ADDR_VAR 0 14
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// scis :=  ;
5325: LD_ADDR_VAR 0 15
5329: PUSH
5330: LD_STRING 
5332: ST_TO_ADDR
// end ;
5333: LD_VAR 0 7
5337: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
// for i := 1 to amVehs do
5342: LD_ADDR_VAR 0 2
5346: PUSH
5347: DOUBLE
5348: LD_INT 1
5350: DEC
5351: ST_TO_ADDR
5352: LD_EXP 80
5356: PUSH
5357: FOR_TO
5358: IFFALSE 5401
// begin if GetType ( i ) = unit_vehicle then
5360: LD_VAR 0 2
5364: PPUSH
5365: CALL_OW 247
5369: PUSH
5370: LD_INT 2
5372: EQUAL
5373: IFFALSE 5387
// SetFuel ( i , 100 ) ;
5375: LD_VAR 0 2
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 240
// SetLives ( i , 1000 ) ;
5387: LD_VAR 0 2
5391: PPUSH
5392: LD_INT 1000
5394: PPUSH
5395: CALL_OW 234
// end ;
5399: GO 5357
5401: POP
5402: POP
// for i := 1 to amIntroUnits do
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: DOUBLE
5409: LD_INT 1
5411: DEC
5412: ST_TO_ADDR
5413: LD_EXP 75
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5462
// begin if GetType ( i ) = unit_vehicle then
5421: LD_VAR 0 2
5425: PPUSH
5426: CALL_OW 247
5430: PUSH
5431: LD_INT 2
5433: EQUAL
5434: IFFALSE 5448
// SetFuel ( i , 100 ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 100
5443: PPUSH
5444: CALL_OW 240
// SetLives ( i , 1000 ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_INT 1000
5455: PPUSH
5456: CALL_OW 234
// end ;
5460: GO 5418
5462: POP
5463: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5464: LD_EXP 75
5468: PPUSH
5469: LD_INT 65
5471: PUSH
5472: LD_INT 91
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 116
5481: PUSH
5482: LD_INT 97
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL 52104 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5497: LD_EXP 80
5501: PPUSH
5502: LD_INT 65
5504: PUSH
5505: LD_INT 91
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 109
5514: PUSH
5515: LD_INT 97
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL 52104 0 2
// end ; end_of_file end_of_file
5530: LD_VAR 0 1
5534: RET
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 , kaganReady ;
5535: LD_INT 0
5537: PPUSH
5538: PPUSH
5539: PPUSH
5540: PPUSH
5541: PPUSH
5542: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5543: LD_VAR 0 1
5547: PPUSH
5548: CALL_OW 255
5552: PUSH
5553: LD_INT 6
5555: EQUAL
5556: PUSH
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 266
5566: PUSH
5567: LD_INT 32
5569: EQUAL
5570: PUSH
5571: LD_VAR 0 1
5575: PPUSH
5576: CALL_OW 266
5580: PUSH
5581: LD_INT 4
5583: EQUAL
5584: OR
5585: AND
5586: IFFALSE 5734
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 6
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 21
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 25
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 54
5625: PUSH
5626: EMPTY
5627: LIST
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: ST_TO_ADDR
// for un in sols do
5640: LD_ADDR_VAR 0 2
5644: PUSH
5645: LD_VAR 0 5
5649: PUSH
5650: FOR_IN
5651: IFFALSE 5702
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 310
5662: PPUSH
5663: CALL_OW 266
5667: PUSH
5668: LD_INT 32
5670: EQUAL
5671: IFFALSE 5675
// continue ;
5673: GO 5650
// ComExit ( un ) ;
5675: LD_VAR 0 2
5679: PPUSH
5680: CALL 49896 0 1
// AddComEnterUnit ( un , building ) ;
5684: LD_VAR 0 2
5688: PPUSH
5689: LD_VAR 0 1
5693: PPUSH
5694: CALL_OW 180
// break ;
5698: GO 5702
// end ;
5700: GO 5650
5702: POP
5703: POP
// if labT1 = false then
5704: LD_VAR 0 6
5708: PUSH
5709: LD_INT 0
5711: EQUAL
5712: IFFALSE 5734
// begin labT1 = true ;
5714: LD_ADDR_VAR 0 6
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5722: LD_EXP 62
5726: PPUSH
5727: LD_INT 10
5729: PPUSH
5730: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and kaganReady = false then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 255
5743: PUSH
5744: LD_INT 3
5746: EQUAL
5747: PUSH
5748: LD_VAR 0 1
5752: PPUSH
5753: CALL_OW 266
5757: PUSH
5758: LD_INT 0
5760: EQUAL
5761: AND
5762: PUSH
5763: LD_VAR 0 7
5767: PUSH
5768: LD_INT 0
5770: EQUAL
5771: AND
5772: IFFALSE 5794
// begin SetBName ( building , kagan ) ;
5774: LD_VAR 0 1
5778: PPUSH
5779: LD_STRING kagan
5781: PPUSH
5782: CALL_OW 500
// kaganReady = true ;
5786: LD_ADDR_VAR 0 7
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// end ; end ;
5794: PPOPN 7
5796: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
5797: LD_VAR 0 1
5801: PUSH
5802: LD_EXP 44
5806: EQUAL
5807: IFFALSE 5816
// YouLost ( Burlak ) ;
5809: LD_STRING Burlak
5811: PPUSH
5812: CALL_OW 104
// if un = beriaDepot then
5816: LD_VAR 0 1
5820: PUSH
5821: LD_EXP 54
5825: EQUAL
5826: IFFALSE 5835
// YouLost ( Omicron ) ;
5828: LD_STRING Omicron
5830: PPUSH
5831: CALL_OW 104
// end ;
5835: PPOPN 1
5837: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers ;
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
5843: PPUSH
5844: PPUSH
// begin if GetSide ( building ) = 3 then
5845: LD_VAR 0 1
5849: PPUSH
5850: CALL_OW 255
5854: PUSH
5855: LD_INT 3
5857: EQUAL
5858: IFFALSE 6295
// begin dialog_workshop = true ;
5860: LD_ADDR_EXP 16
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
5868: LD_INT 22
5870: PUSH
5871: LD_INT 3
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PUSH
5878: LD_INT 30
5880: PUSH
5881: LD_INT 26
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PPUSH
5892: CALL_OW 69
5896: NOT
5897: IFFALSE 6286
// begin CenterNowOnUnits ( building ) ;
5899: LD_VAR 0 1
5903: PPUSH
5904: CALL_OW 87
// DialogueOn ;
5908: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
5912: LD_EXP 44
5916: PPUSH
5917: LD_STRING D3aa-Bur-1
5919: PPUSH
5920: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
5924: LD_EXP 68
5928: PPUSH
5929: CALL_OW 302
5933: PUSH
5934: LD_EXP 68
5938: PPUSH
5939: CALL_OW 255
5943: PUSH
5944: LD_INT 3
5946: EQUAL
5947: AND
5948: IFFALSE 5964
// Say ( Scholtze , D3aa-Sch-1 ) else
5950: LD_EXP 68
5954: PPUSH
5955: LD_STRING D3aa-Sch-1
5957: PPUSH
5958: CALL_OW 88
5962: GO 6270
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5964: LD_ADDR_VAR 0 5
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 3
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 21
5981: PUSH
5982: LD_INT 1
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: LD_INT 25
5991: PUSH
5992: LD_INT 4
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PUSH
5999: LD_INT 26
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PUSH
6009: LD_INT 50
6011: PUSH
6012: EMPTY
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: PUSH
6027: LD_EXP 44
6031: PUSH
6032: LD_EXP 45
6036: PUSH
6037: LD_EXP 47
6041: PUSH
6042: LD_EXP 48
6046: PUSH
6047: LD_EXP 49
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: DIFF
6059: ST_TO_ADDR
// if maleSci then
6060: LD_VAR 0 5
6064: IFFALSE 6084
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
6066: LD_VAR 0 5
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D3aa-Sci1-1
6077: PPUSH
6078: CALL_OW 88
6082: GO 6270
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6084: LD_ADDR_VAR 0 6
6088: PUSH
6089: LD_INT 22
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 21
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 26
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 50
6121: PUSH
6122: EMPTY
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: PUSH
6136: LD_EXP 44
6140: PUSH
6141: LD_EXP 45
6145: PUSH
6146: LD_EXP 47
6150: PUSH
6151: LD_EXP 48
6155: PUSH
6156: LD_EXP 49
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: DIFF
6168: ST_TO_ADDR
// if maleOthers then
6169: LD_VAR 0 6
6173: IFFALSE 6193
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
6175: LD_VAR 0 6
6179: PUSH
6180: LD_INT 1
6182: ARRAY
6183: PPUSH
6184: LD_STRING D3aa-Sci1-1
6186: PPUSH
6187: CALL_OW 88
6191: GO 6270
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
6193: LD_ADDR_VAR 0 6
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_INT 3
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 21
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 26
6220: PUSH
6221: LD_INT 1
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 50
6230: PUSH
6231: EMPTY
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_EXP 44
6249: PUSH
6250: EMPTY
6251: LIST
6252: DIFF
6253: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6254: LD_VAR 0 6
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: PPUSH
6263: LD_STRING D3aa-Sci1-1
6265: PPUSH
6266: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6270: LD_EXP 44
6274: PPUSH
6275: LD_STRING D3aa-Bur-2
6277: PPUSH
6278: CALL_OW 88
// DialogueOff ;
6282: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6286: LD_STRING M3
6288: PPUSH
6289: CALL_OW 337
// exit ;
6293: GO 6551
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 255
6304: PUSH
6305: LD_INT 6
6307: EQUAL
6308: PUSH
6309: LD_EXP 2
6313: PPUSH
6314: CALL 53225 0 1
6318: PUSH
6319: LD_INT 0
6321: GREATER
6322: AND
6323: IFFALSE 6413
// begin if comArray [ 1 ] = kirovLab then
6325: LD_EXP 2
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PUSH
6334: LD_EXP 62
6338: EQUAL
6339: IFFALSE 6359
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6341: LD_EXP 2
6345: PUSH
6346: LD_INT 1
6348: ARRAY
6349: PPUSH
6350: LD_INT 10
6352: PPUSH
6353: CALL_OW 207
6357: GO 6372
// AddComUpgrade ( comArray [ 1 ] ) ;
6359: LD_EXP 2
6363: PUSH
6364: LD_INT 1
6366: ARRAY
6367: PPUSH
6368: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6372: LD_ADDR_EXP 2
6376: PUSH
6377: LD_EXP 2
6381: PUSH
6382: LD_EXP 2
6386: PUSH
6387: LD_INT 1
6389: ARRAY
6390: DIFF
6391: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6392: LD_INT 35
6394: PPUSH
6395: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6399: LD_EXP 71
6403: PPUSH
6404: LD_VAR 0 1
6408: PPUSH
6409: CALL 20676 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 6
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 266
6436: PUSH
6437: LD_INT 3
6439: EQUAL
6440: AND
6441: PUSH
6442: LD_VAR 0 1
6446: PPUSH
6447: CALL_OW 266
6451: PUSH
6452: LD_INT 2
6454: EQUAL
6455: OR
6456: IFFALSE 6551
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_INT 22
6465: PUSH
6466: LD_INT 6
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 21
6475: PUSH
6476: LD_INT 3
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 30
6485: PUSH
6486: LD_INT 32
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: PPUSH
6498: CALL_OW 69
6502: ST_TO_ADDR
// for i in un do
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_VAR 0 3
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6549
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_INT 42
6523: PUSH
6524: LD_INT 43
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: CALL_OW 208
6547: GO 6513
6549: POP
6550: POP
// end ; end ;
6551: PPOPN 6
6553: END
// on BuildingStarted ( building , hum ) do var un , i ;
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
// begin AddComComplete ( kirovEngs , building ) ;
6558: LD_EXP 71
6562: PPUSH
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL 20676 0 2
// end ; end_of_file
6572: PPOPN 4
6574: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
// InGameOn ;
6581: CALL_OW 8
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6585: LD_EXP 44
6589: PUSH
6590: LD_EXP 56
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
6603: LD_ADDR_EXP 88
6607: PUSH
6608: LD_INT 350
6610: PUSH
6611: LD_INT 31500
6613: PUSH
6614: LD_INT 42000
6616: PUSH
6617: LD_INT 52500
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
6626: LD_ADDR_EXP 84
6630: PUSH
6631: LD_STRING D3a-RSol1-1
6633: PUSH
6634: LD_STRING D3b-RSol1-1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: ST_TO_ADDR
// if not Belkov then
6641: LD_EXP 48
6645: NOT
6646: IFFALSE 6722
// begin Say ( Kurin , D1a-Kur-1 ) ;
6648: LD_EXP 56
6652: PPUSH
6653: LD_STRING D1a-Kur-1
6655: PPUSH
6656: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
6660: LD_EXP 44
6664: PPUSH
6665: LD_STRING D1a-Bur-1
6667: PPUSH
6668: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6672: LD_EXP 56
6676: PPUSH
6677: LD_STRING D1a-Kur-2
6679: PPUSH
6680: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6684: LD_EXP 56
6688: PPUSH
6689: LD_STRING D1a-Kur-2a
6691: PPUSH
6692: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6696: LD_EXP 56
6700: PPUSH
6701: LD_STRING D1a-Kur-2b
6703: PPUSH
6704: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6708: LD_EXP 44
6712: PPUSH
6713: LD_STRING D1a-Bur-2
6715: PPUSH
6716: CALL_OW 88
// end else
6720: GO 6758
// begin Say ( Kurin , D1b-Kur-1 ) ;
6722: LD_EXP 56
6726: PPUSH
6727: LD_STRING D1b-Kur-1
6729: PPUSH
6730: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6734: LD_EXP 48
6738: PPUSH
6739: LD_STRING D1b-Bel-1
6741: PPUSH
6742: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6746: LD_EXP 56
6750: PPUSH
6751: LD_STRING D1b-Kur-2
6753: PPUSH
6754: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6758: LD_EXP 56
6762: PPUSH
6763: LD_STRING D2-Kur-1
6765: PPUSH
6766: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6770: LD_EXP 44
6774: PPUSH
6775: LD_STRING D2-Bur-1
6777: PPUSH
6778: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6782: LD_EXP 56
6786: PPUSH
6787: LD_STRING D2-Kur-2
6789: PPUSH
6790: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6794: LD_EXP 44
6798: PPUSH
6799: LD_STRING D2-Bur-2
6801: PPUSH
6802: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6806: LD_EXP 56
6810: PPUSH
6811: LD_STRING D2-Kur-3
6813: PPUSH
6814: CALL_OW 88
// PrepareAmericansMissionIntro ;
6818: CALL 2560 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 6
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6838: LD_INT 3
6840: PPUSH
6841: LD_INT 5
6843: PPUSH
6844: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6848: LD_EXP 57
6852: PUSH
6853: LD_EXP 66
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 87
// wait ( 0 0$3 ) ;
6866: LD_INT 105
6868: PPUSH
6869: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6873: LD_EXP 57
6877: PPUSH
6878: LD_STRING D2-Pop-3
6880: PPUSH
6881: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6885: LD_INT 10
6887: PPUSH
6888: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6892: LD_EXP 44
6896: PUSH
6897: LD_EXP 56
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6910: LD_EXP 56
6914: PPUSH
6915: LD_STRING D2-Kur-4
6917: PPUSH
6918: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6922: LD_EXP 44
6926: PPUSH
6927: LD_STRING D2-Bur-4
6929: PPUSH
6930: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
6934: LD_EXP 56
6938: PPUSH
6939: LD_STRING D2-Kur-5
6941: PPUSH
6942: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
6946: LD_EXP 44
6950: PPUSH
6951: LD_STRING D2-Bur-5
6953: PPUSH
6954: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
6958: LD_EXP 56
6962: PPUSH
6963: LD_STRING D2-Kur-6
6965: PPUSH
6966: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6970: LD_EXP 44
6974: PPUSH
6975: LD_STRING D2-Bur-4
6977: PPUSH
6978: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
6982: LD_ADDR_EXP 83
6986: PUSH
6987: LD_EXP 58
6991: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
6992: LD_ADDR_EXP 83
6996: PUSH
6997: LD_EXP 83
7001: PUSH
7002: LD_EXP 52
7006: ADD
7007: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7008: LD_ADDR_VAR 0 4
7012: PUSH
7013: LD_STRING text
7015: PPUSH
7016: LD_INT 6
7018: PPUSH
7019: LD_INT 6
7021: PPUSH
7022: LD_INT -5
7024: PUSH
7025: LD_EXP 44
7029: PUSH
7030: LD_EXP 45
7034: PUSH
7035: LD_EXP 47
7039: PUSH
7040: LD_EXP 46
7044: PUSH
7045: LD_EXP 48
7049: PUSH
7050: LD_INT -6
7052: PUSH
7053: LD_INT -2
7055: PUSH
7056: LD_INT -3
7058: PUSH
7059: LD_INT -5
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_EXP 83
7078: ADD
7079: PUSH
7080: LD_INT -6
7082: PUSH
7083: LD_INT -4
7085: PUSH
7086: LD_EXP 56
7090: PUSH
7091: LD_EXP 57
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ADD
7102: PPUSH
7103: LD_INT 1
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_INT 1
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 4
7121: PUSH
7122: LD_INT 1
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 42
7139: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
7140: LD_EXP 83
7144: PPUSH
7145: LD_INT 6
7147: PPUSH
7148: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7152: LD_VAR 0 4
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
7164: LD_EXP 57
7168: PPUSH
7169: LD_INT 135
7171: PPUSH
7172: LD_INT 67
7174: PPUSH
7175: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
7179: LD_EXP 66
7183: PPUSH
7184: LD_INT 209
7186: PPUSH
7187: LD_INT 164
7189: PPUSH
7190: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
7194: LD_ADDR_EXP 63
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_INT 6
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 30
7211: PUSH
7212: LD_INT 4
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7228: LD_ADDR_EXP 83
7232: PUSH
7233: LD_EXP 83
7237: PUSH
7238: LD_VAR 0 4
7242: DIFF
7243: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7244: LD_EXP 83
7248: PUSH
7249: LD_INT 1
7251: ARRAY
7252: PPUSH
7253: LD_INT 2
7255: PPUSH
7256: CALL_OW 336
// for i := 2 to 3 do
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: DOUBLE
7266: LD_INT 2
7268: DEC
7269: ST_TO_ADDR
7270: LD_INT 3
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7296
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7276: LD_EXP 83
7280: PUSH
7281: LD_VAR 0 2
7285: ARRAY
7286: PPUSH
7287: LD_INT 3
7289: PPUSH
7290: CALL_OW 336
7294: GO 7273
7296: POP
7297: POP
// for un in selectedPeople do
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: FOR_IN
7309: IFFALSE 7322
// ComExitBuilding ( un ) ;
7311: LD_VAR 0 3
7315: PPUSH
7316: CALL_OW 122
7320: GO 7308
7322: POP
7323: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7324: LD_ADDR_EXP 82
7328: PUSH
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 44
7338: PUSH
7339: LD_EXP 45
7343: PUSH
7344: LD_EXP 47
7348: PUSH
7349: LD_EXP 48
7353: PUSH
7354: LD_EXP 46
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: UNION
7366: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7367: LD_EXP 82
7371: PPUSH
7372: LD_INT 113
7374: PPUSH
7375: LD_INT 97
7377: PPUSH
7378: CALL_OW 171
// for un in kirovBaseUnits do
7382: LD_ADDR_VAR 0 3
7386: PUSH
7387: LD_EXP 83
7391: PUSH
7392: FOR_IN
7393: IFFALSE 7430
// begin if IsInUnit ( un ) = 0 then
7395: LD_VAR 0 3
7399: PPUSH
7400: CALL_OW 310
7404: PUSH
7405: LD_INT 0
7407: EQUAL
7408: IFFALSE 7428
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_EXP 63
7419: PUSH
7420: LD_INT 1
7422: ARRAY
7423: PPUSH
7424: CALL_OW 120
// end ;
7428: GO 7392
7430: POP
7431: POP
// ChangeMissionObjectives ( M1 ) ;
7432: LD_STRING M1
7434: PPUSH
7435: CALL_OW 337
// Query ( QReadyInfo ) ;
7439: LD_STRING QReadyInfo
7441: PPUSH
7442: CALL_OW 97
// counterEnable := true ;
7446: LD_ADDR_EXP 85
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// SaveForQuickRestart ;
7454: CALL_OW 22
// wait ( 0 0$5 ) ;
7458: LD_INT 175
7460: PPUSH
7461: CALL_OW 67
// InGameOff ;
7465: CALL_OW 9
// spawnCrates := true ;
7469: LD_ADDR_EXP 13
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// for un in kirovBaseUnits do
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_EXP 83
7486: PUSH
7487: FOR_IN
7488: IFFALSE 7541
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7490: LD_VAR 0 3
7494: PPUSH
7495: CALL_OW 310
7499: PUSH
7500: LD_INT 0
7502: EQUAL
7503: PUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 257
7513: PUSH
7514: LD_INT 2
7516: EQUAL
7517: NOT
7518: AND
7519: IFFALSE 7539
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7521: LD_VAR 0 3
7525: PPUSH
7526: LD_EXP 63
7530: PUSH
7531: LD_INT 2
7533: ARRAY
7534: PPUSH
7535: CALL_OW 120
// end ;
7539: GO 7487
7541: POP
7542: POP
// UpgradeKirovBase ;
7543: CALL 1881 0 0
// end ;
7547: LD_VAR 0 1
7551: RET
// every 0 0$1 do
7552: GO 7554
7554: DISABLE
// begin timeToArabAttack = timeToArabAttack - 0 0$01 ;
7555: LD_ADDR_EXP 90
7559: PUSH
7560: LD_EXP 90
7564: PUSH
7565: LD_INT 35
7567: MINUS
7568: ST_TO_ADDR
// end ;
7569: END
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7570: LD_EXP 85
7574: IFFALSE 8231
7576: GO 7578
7578: DISABLE
7579: LD_INT 0
7581: PPUSH
7582: PPUSH
7583: PPUSH
// begin enable ;
7584: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: LD_INT 34
7615: PUSH
7616: LD_INT 51
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
7637: LD_ADDR_VAR 0 2
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_INT 3
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 21
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: PUSH
7671: LD_EXP 34
7675: PLUS
7676: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
7677: LD_ADDR_EXP 87
7681: PUSH
7682: LD_EXP 87
7686: PUSH
7687: LD_INT 35
7689: PLUS
7690: ST_TO_ADDR
// VehNeeded = hum - veh ;
7691: LD_ADDR_EXP 39
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_VAR 0 1
7705: MINUS
7706: ST_TO_ADDR
// if VehNeeded < 0 then
7707: LD_EXP 39
7711: PUSH
7712: LD_INT 0
7714: LESS
7715: IFFALSE 7727
// enoughVehsForKirov = true else
7717: LD_ADDR_EXP 92
7721: PUSH
7722: LD_INT 1
7724: ST_TO_ADDR
7725: GO 7735
// enoughVehsForKirov = false ;
7727: LD_ADDR_EXP 92
7731: PUSH
7732: LD_INT 0
7734: ST_TO_ADDR
// case counterIndex of 1 :
7735: LD_EXP 86
7739: PUSH
7740: LD_INT 1
7742: DOUBLE
7743: EQUAL
7744: IFTRUE 7748
7746: GO 7831
7748: POP
// begin if VehNeeded <= 0 then
7749: LD_EXP 39
7753: PUSH
7754: LD_INT 0
7756: LESSEQUAL
7757: IFFALSE 7785
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7759: LD_ADDR_OWVAR 47
7763: PUSH
7764: LD_STRING #Ru03-5a
7766: PUSH
7767: EMPTY
7768: LIST
7769: PUSH
7770: LD_STRING #Ru03-4
7772: PUSH
7773: LD_EXP 89
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: ADD
7782: ST_TO_ADDR
7783: GO 7815
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7785: LD_ADDR_OWVAR 47
7789: PUSH
7790: LD_STRING #Ru03-5
7792: PUSH
7793: LD_EXP 39
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_STRING #Ru03-4
7804: PUSH
7805: LD_EXP 89
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: ADD
7814: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7815: LD_ADDR_EXP 89
7819: PUSH
7820: LD_EXP 89
7824: PUSH
7825: LD_INT 35
7827: MINUS
7828: ST_TO_ADDR
// end ; 2 :
7829: GO 7958
7831: LD_INT 2
7833: DOUBLE
7834: EQUAL
7835: IFTRUE 7839
7837: GO 7873
7839: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7840: LD_ADDR_OWVAR 47
7844: PUSH
7845: LD_STRING #Ru03-1
7847: PUSH
7848: LD_EXP 23
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7857: LD_ADDR_EXP 23
7861: PUSH
7862: LD_EXP 23
7866: PUSH
7867: LD_INT 35
7869: MINUS
7870: ST_TO_ADDR
// end ; 3 :
7871: GO 7958
7873: LD_INT 3
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7915
7881: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7882: LD_ADDR_OWVAR 47
7886: PUSH
7887: LD_STRING #Ru03-2
7889: PUSH
7890: LD_EXP 23
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7899: LD_ADDR_EXP 23
7903: PUSH
7904: LD_EXP 23
7908: PUSH
7909: LD_INT 35
7911: MINUS
7912: ST_TO_ADDR
// end ; 4 :
7913: GO 7958
7915: LD_INT 4
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7957
7923: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7924: LD_ADDR_OWVAR 47
7928: PUSH
7929: LD_STRING #Ru03-3
7931: PUSH
7932: LD_EXP 22
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
7941: LD_ADDR_EXP 22
7945: PUSH
7946: LD_EXP 22
7950: PUSH
7951: LD_INT 35
7953: MINUS
7954: ST_TO_ADDR
// end ; end ;
7955: GO 7958
7957: POP
// if ticks = convoyTime [ 1 ] then
7958: LD_EXP 87
7962: PUSH
7963: LD_EXP 88
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: EQUAL
7972: IFFALSE 8231
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
7974: LD_EXP 67
7978: PPUSH
7979: LD_EXP 84
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
7992: LD_EXP 84
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_STRING D3a-RSol1-1
8003: EQUAL
8004: IFFALSE 8108
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
8006: LD_EXP 44
8010: PPUSH
8011: LD_STRING D3a-Bur-1
8013: PPUSH
8014: CALL_OW 94
// if IsOk ( Gnyevko ) then
8018: LD_EXP 45
8022: PPUSH
8023: CALL_OW 302
8027: IFFALSE 8041
// Say ( Gnyevko , D3b-Gny-1 ) ;
8029: LD_EXP 45
8033: PPUSH
8034: LD_STRING D3b-Gny-1
8036: PPUSH
8037: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
8041: LD_EXP 44
8045: PPUSH
8046: LD_STRING D3b-Bur-1
8048: PPUSH
8049: CALL_OW 88
// if IsOK ( Kovalyuk ) then
8053: LD_EXP 47
8057: PPUSH
8058: CALL_OW 302
8062: IFFALSE 8076
// Say ( Kovalyuk , D3b-Kov-1 ) ;
8064: LD_EXP 47
8068: PPUSH
8069: LD_STRING D3b-Kov-1
8071: PPUSH
8072: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
8076: LD_EXP 67
8080: PPUSH
8081: LD_STRING D3b-Rsol1-2
8083: PPUSH
8084: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
8088: LD_ADDR_EXP 84
8092: PUSH
8093: LD_EXP 84
8097: PUSH
8098: LD_EXP 84
8102: PUSH
8103: LD_INT 1
8105: ARRAY
8106: DIFF
8107: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
8108: LD_EXP 76
8112: PUSH
8113: LD_INT 1
8115: ARRAY
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PPUSH
8121: LD_EXP 76
8125: PUSH
8126: LD_INT 1
8128: ARRAY
8129: PUSH
8130: LD_INT 2
8132: ARRAY
8133: PPUSH
8134: LD_EXP 76
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PUSH
8143: LD_INT 3
8145: ARRAY
8146: PPUSH
8147: LD_EXP 76
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PUSH
8156: LD_INT 4
8158: ARRAY
8159: PPUSH
8160: LD_EXP 76
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PUSH
8169: LD_INT 5
8171: ARRAY
8172: PPUSH
8173: LD_INT 6
8175: PPUSH
8176: CALL 4526 0 6
// PrepareAttackOnRus ( ) ;
8180: CALL 5338 0 0
// wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
8191: LD_ADDR_EXP 76
8195: PUSH
8196: LD_EXP 76
8200: PUSH
8201: LD_EXP 76
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: DIFF
8210: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
8211: LD_ADDR_EXP 88
8215: PUSH
8216: LD_EXP 88
8220: PUSH
8221: LD_EXP 88
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: DIFF
8230: ST_TO_ADDR
// end ; end ;
8231: PPOPN 3
8233: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
8234: LD_INT 78
8236: PPUSH
8237: LD_INT 112
8239: PPUSH
8240: LD_INT 3
8242: PPUSH
8243: CALL_OW 440
8247: IFFALSE 8301
8249: GO 8251
8251: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
8252: LD_INT 78
8254: PPUSH
8255: LD_INT 112
8257: PPUSH
8258: CALL_OW 84
// DialogueOn ;
8262: CALL_OW 6
// SayRadio ( Burlak , D2a-Bur-1 ) ;
8266: LD_EXP 44
8270: PPUSH
8271: LD_STRING D2a-Bur-1
8273: PPUSH
8274: CALL_OW 94
// SayRadio ( Kurin , D2a-Kur-1 ) ;
8278: LD_EXP 56
8282: PPUSH
8283: LD_STRING D2a-Kur-1
8285: PPUSH
8286: CALL_OW 94
// DialogueOff ;
8290: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8294: LD_STRING M2
8296: PPUSH
8297: CALL_OW 337
// end ;
8301: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
8302: LD_EXP 80
8306: PPUSH
8307: LD_INT 3
8309: PUSH
8310: LD_INT 24
8312: PUSH
8313: LD_INT 700
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 72
8328: PUSH
8329: LD_EXP 75
8333: PPUSH
8334: LD_INT 3
8336: PUSH
8337: LD_INT 24
8339: PUSH
8340: LD_INT 700
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PPUSH
8351: CALL_OW 72
8355: OR
8356: IFFALSE 8603
8358: GO 8360
8360: DISABLE
8361: LD_INT 0
8363: PPUSH
// begin enable ;
8364: ENABLE
// for i := 1 to amVehs do
8365: LD_ADDR_VAR 0 1
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_EXP 80
8379: PUSH
8380: FOR_TO
8381: IFFALSE 8424
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8383: LD_EXP 80
8387: PUSH
8388: LD_VAR 0 1
8392: ARRAY
8393: PPUSH
8394: CALL_OW 256
8398: PUSH
8399: LD_INT 700
8401: LESSEQUAL
8402: IFFALSE 8422
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8404: LD_EXP 80
8408: PUSH
8409: LD_VAR 0 1
8413: ARRAY
8414: PPUSH
8415: LD_INT 10
8417: PPUSH
8418: CALL_OW 113
// end ;
8422: GO 8380
8424: POP
8425: POP
// for i := 1 to amIntroUnits and GetLives ( i ) <= 700 do
8426: LD_ADDR_VAR 0 1
8430: PUSH
8431: DOUBLE
8432: LD_INT 1
8434: DEC
8435: ST_TO_ADDR
8436: LD_EXP 75
8440: PUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 256
8450: PUSH
8451: LD_INT 700
8453: LESSEQUAL
8454: AND
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8500
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8459: LD_EXP 75
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 256
8474: PUSH
8475: LD_INT 700
8477: LESSEQUAL
8478: IFFALSE 8498
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8480: LD_EXP 75
8484: PUSH
8485: LD_VAR 0 1
8489: ARRAY
8490: PPUSH
8491: LD_INT 10
8493: PPUSH
8494: CALL_OW 113
// end ;
8498: GO 8456
8500: POP
8501: POP
// for i in amIntroUnits do
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: LD_EXP 75
8511: PUSH
8512: FOR_IN
8513: IFFALSE 8558
// begin if IsInArea ( i , amRetreatArea ) and GetLives ( i ) <= 700 then
8515: LD_VAR 0 1
8519: PPUSH
8520: LD_INT 10
8522: PPUSH
8523: CALL_OW 308
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 256
8537: PUSH
8538: LD_INT 700
8540: LESSEQUAL
8541: AND
8542: IFFALSE 8556
// SetLives ( i , 1000 ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 1000
8551: PPUSH
8552: CALL_OW 234
// end ;
8556: GO 8512
8558: POP
8559: POP
// for i in amVehs do
8560: LD_ADDR_VAR 0 1
8564: PUSH
8565: LD_EXP 80
8569: PUSH
8570: FOR_IN
8571: IFFALSE 8601
// begin if IsInArea ( i , amRetreatArea ) then
8573: LD_VAR 0 1
8577: PPUSH
8578: LD_INT 10
8580: PPUSH
8581: CALL_OW 308
8585: IFFALSE 8599
// SetLives ( i , 1000 ) ;
8587: LD_VAR 0 1
8591: PPUSH
8592: LD_INT 1000
8594: PPUSH
8595: CALL_OW 234
// end ;
8599: GO 8570
8601: POP
8602: POP
// end ;
8603: PPOPN 1
8605: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
8606: LD_EXP 18
8610: NOT
8611: IFFALSE 8819
8613: GO 8615
8615: DISABLE
8616: LD_INT 0
8618: PPUSH
// begin enable ;
8619: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
8620: LD_ADDR_VAR 0 1
8624: PUSH
8625: LD_INT 22
8627: PUSH
8628: LD_INT 3
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 21
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 3
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 31
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 31
8670: PUSH
8671: LD_INT 23
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 69
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8817
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 48
8704: PPUSH
8705: LD_INT 81
8707: PPUSH
8708: CALL_OW 297
8712: PUSH
8713: LD_INT 7
8715: LESS
8716: IFFALSE 8815
// begin dialog_track = true ;
8718: LD_ADDR_EXP 18
8722: PUSH
8723: LD_INT 1
8725: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
8726: LD_INT 48
8728: PPUSH
8729: LD_INT 81
8731: PPUSH
8732: CALL_OW 86
// DialogueOn ;
8736: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8740: LD_EXP 44
8744: PPUSH
8745: LD_STRING D5a-Bur-1
8747: PPUSH
8748: CALL_OW 88
// DialogueOff ;
8752: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
8756: LD_INT 82
8758: PPUSH
8759: LD_INT 3
8761: PPUSH
8762: CALL_OW 321
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: IFFALSE 8785
// SetTech ( 82 , 3 , state_enabled ) ;
8772: LD_INT 82
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
8785: LD_INT 84
8787: PPUSH
8788: LD_INT 3
8790: PPUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
8798: LD_INT 16
8800: PPUSH
8801: LD_INT 3
8803: PPUSH
8804: LD_INT 1
8806: PPUSH
8807: CALL_OW 324
// exit ;
8811: POP
8812: POP
8813: GO 8819
// end ;
8815: GO 8694
8817: POP
8818: POP
// end ;
8819: PPOPN 1
8821: END
// every 5 5$30 do
8822: GO 8824
8824: DISABLE
// begin PrepareScholtze ;
8825: CALL 2442 0 0
// wait ( 0 0$2 ) ;
8829: LD_INT 70
8831: PPUSH
8832: CALL_OW 67
// DialogueOn ;
8836: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
8840: LD_EXP 69
8844: PPUSH
8845: LD_STRING D4-Sch-1
8847: PPUSH
8848: CALL 53353 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
8852: LD_EXP 44
8856: PPUSH
8857: LD_STRING D4-Bur-1
8859: PPUSH
8860: CALL_OW 94
// DialogueOff ;
8864: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
8868: LD_STRING M4
8870: PPUSH
8871: CALL_OW 337
// ComHold ( Scholtze ) ;
8875: LD_EXP 68
8879: PPUSH
8880: CALL_OW 140
// scholtzeSpawned = true ;
8884: LD_ADDR_EXP 14
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// end ;
8892: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
8893: LD_INT 3
8895: PPUSH
8896: LD_EXP 68
8900: PPUSH
8901: CALL_OW 292
8905: PUSH
8906: LD_EXP 14
8910: AND
8911: PUSH
8912: LD_EXP 15
8916: NOT
8917: AND
8918: IFFALSE 9084
8920: GO 8922
8922: DISABLE
// begin scholtzeSaved = true ;
8923: LD_ADDR_EXP 15
8927: PUSH
8928: LD_INT 1
8930: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
8931: LD_EXP 68
8935: PPUSH
8936: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
8940: LD_EXP 68
8944: PPUSH
8945: LD_INT 3
8947: PPUSH
8948: CALL_OW 235
// DialogueOn ;
8952: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
8956: LD_EXP 68
8960: PPUSH
8961: LD_STRING D4a-Sch-1
8963: PPUSH
8964: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
8968: LD_EXP 44
8972: PPUSH
8973: LD_STRING D4a-Bur-1
8975: PPUSH
8976: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
8980: LD_EXP 68
8984: PPUSH
8985: LD_STRING D4a-Sch-2
8987: PPUSH
8988: CALL_OW 88
// DialogueOff ;
8992: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
8996: LD_STRING MScholtzeOut
8998: PPUSH
8999: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
9003: LD_INT 49
9005: PPUSH
9006: LD_INT 3
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
9016: LD_INT 51
9018: PPUSH
9019: LD_INT 3
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
9029: LD_INT 82
9031: PPUSH
9032: LD_INT 3
9034: PPUSH
9035: CALL_OW 321
9039: PUSH
9040: LD_INT 0
9042: EQUAL
9043: IFFALSE 9058
// SetTech ( 82 , 3 , state_enabled ) ;
9045: LD_INT 82
9047: PPUSH
9048: LD_INT 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
9058: LD_INT 83
9060: PPUSH
9061: LD_INT 3
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
9071: LD_INT 19
9073: PPUSH
9074: LD_INT 3
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 324
// end ;
9084: END
// every 5 5$0 trigger scholtzeSpawned and not scholtzeSaved do
9085: LD_EXP 14
9089: PUSH
9090: LD_EXP 15
9094: NOT
9095: AND
9096: IFFALSE 9181
9098: GO 9100
9100: DISABLE
// begin DialogueOn ;
9101: CALL_OW 6
// SayNoFaceRadio ( Scholtze , D4b-Sch-1 ) ;
9105: LD_EXP 68
9109: PPUSH
9110: LD_STRING D4b-Sch-1
9112: PPUSH
9113: CALL 53353 0 2
// SayRadioNoFace ( Scholtze2 , D4b-Sol1-1 ) ;
9117: LD_EXP 69
9121: PPUSH
9122: LD_STRING D4b-Sol1-1
9124: PPUSH
9125: CALL_OW 586
// SayRadioNoFace ( Scholtze2 , D4b-Sol2-1 ) ;
9129: LD_EXP 69
9133: PPUSH
9134: LD_STRING D4b-Sol2-1
9136: PPUSH
9137: CALL_OW 586
// SayNoFaceRadio ( Scholtze , D4b-Sch-2 ) ;
9141: LD_EXP 68
9145: PPUSH
9146: LD_STRING D4b-Sch-2
9148: PPUSH
9149: CALL 53353 0 2
// Say ( Burlak , D4b-Bur-2 ) ;
9153: LD_EXP 44
9157: PPUSH
9158: LD_STRING D4b-Bur-2
9160: PPUSH
9161: CALL_OW 88
// DialogueOff ;
9165: CALL_OW 7
// SetLives ( Scholtze , 0 ) ;
9169: LD_EXP 68
9173: PPUSH
9174: LD_INT 0
9176: PPUSH
9177: CALL_OW 234
// end ;
9181: END
// every 0 0$30 trigger spawnCrates do
9182: LD_EXP 13
9186: IFFALSE 9213
9188: GO 9190
9190: DISABLE
// begin enable ;
9191: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesSpawn , true ) ;
9192: LD_INT 3
9194: PPUSH
9195: LD_INT 5
9197: PPUSH
9198: CALL_OW 12
9202: PPUSH
9203: LD_INT 15
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: CALL_OW 55
// end ;
9213: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
9214: LD_EXP 27
9218: NOT
9219: IFFALSE 9514
9221: GO 9223
9223: DISABLE
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
// begin enable ;
9233: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_INT 8
9241: PPUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 21
9257: PUSH
9258: LD_INT 1
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 21
9267: PUSH
9268: LD_INT 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 21
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL_OW 70
9299: PUSH
9300: FOR_IN
9301: IFFALSE 9512
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 22
9310: PUSH
9311: LD_INT 3
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 1
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 21
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 69
9354: PPUSH
9355: LD_VAR 0 2
9359: PPUSH
9360: CALL_OW 74
9364: PPUSH
9365: CALL_OW 296
9369: PUSH
9370: LD_INT 17
9372: LESS
9373: IFFALSE 9510
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
9375: LD_INT 22
9377: PUSH
9378: LD_INT 3
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 2
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 1
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 2
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 69
9421: PPUSH
9422: LD_VAR 0 2
9426: PPUSH
9427: CALL_OW 74
9431: PPUSH
9432: LD_INT 114
9434: PPUSH
9435: LD_INT 98
9437: PPUSH
9438: CALL_OW 111
// if not dialog_stop then
9442: LD_EXP 19
9446: NOT
9447: IFFALSE 9510
// begin dialog_stop = true ;
9449: LD_ADDR_EXP 19
9453: PUSH
9454: LD_INT 1
9456: ST_TO_ADDR
// if not IsOK ( Gnyevko ) then
9457: LD_EXP 45
9461: PPUSH
9462: CALL_OW 302
9466: NOT
9467: IFFALSE 9483
// SayRadio ( Kurin , D11-Kur-1 ) else
9469: LD_EXP 56
9473: PPUSH
9474: LD_STRING D11-Kur-1
9476: PPUSH
9477: CALL_OW 94
9481: GO 9495
// Say ( Gnyevko , D11-Gny-1 ) ;
9483: LD_EXP 45
9487: PPUSH
9488: LD_STRING D11-Gny-1
9490: PPUSH
9491: CALL_OW 88
// wait ( 0 0$5 ) ;
9495: LD_INT 175
9497: PPUSH
9498: CALL_OW 67
// dialog_stop = false ;
9502: LD_ADDR_EXP 19
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// end ; end ;
9510: GO 9300
9512: POP
9513: POP
// end ;
9514: PPOPN 7
9516: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
9517: LD_INT 3
9519: PPUSH
9520: LD_INT 13
9522: PPUSH
9523: CALL_OW 294
9527: PUSH
9528: LD_INT 6
9530: GREATEREQUAL
9531: PUSH
9532: LD_EXP 85
9536: AND
9537: IFFALSE 9708
9539: GO 9541
9541: DISABLE
9542: LD_INT 0
9544: PPUSH
// begin enable ;
9545: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9546: LD_ADDR_VAR 0 1
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 3
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: LD_INT 21
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 21
9576: PUSH
9577: LD_INT 2
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9706
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
9601: LD_VAR 0 1
9605: PPUSH
9606: LD_INT 13
9608: PPUSH
9609: CALL_OW 308
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_INT 21
9621: PUSH
9622: LD_INT 1
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 72
9633: PUSH
9634: LD_VAR 0 1
9638: PPUSH
9639: CALL_OW 313
9643: OR
9644: AND
9645: IFFALSE 9704
// begin ComMoveXY ( unit , 120 , 98 ) ;
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 120
9654: PPUSH
9655: LD_INT 98
9657: PPUSH
9658: CALL_OW 111
// if not dialog_stop then
9662: LD_EXP 19
9666: NOT
9667: IFFALSE 9704
// begin dialog_stop = true ;
9669: LD_ADDR_EXP 19
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
9677: LD_EXP 56
9681: PPUSH
9682: LD_STRING D12-Kur-1
9684: PPUSH
9685: CALL_OW 88
// wait ( 0 0$5 ) ;
9689: LD_INT 175
9691: PPUSH
9692: CALL_OW 67
// dialog_stop = false ;
9696: LD_ADDR_EXP 19
9700: PUSH
9701: LD_INT 0
9703: ST_TO_ADDR
// end ; end ;
9704: GO 9598
9706: POP
9707: POP
// end ;
9708: PPOPN 1
9710: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
9711: LD_EXP 56
9715: PPUSH
9716: CALL_OW 306
9720: IFFALSE 9928
9722: GO 9724
9724: DISABLE
// begin if true then
9725: LD_INT 1
9727: IFFALSE 9927
// begin case Query ( QReadyToAttack ) of 1 :
9729: LD_STRING QReadyToAttack
9731: PPUSH
9732: CALL_OW 97
9736: PUSH
9737: LD_INT 1
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9815
9745: POP
// begin DeselectUnits ( Kurin ) ;
9746: LD_EXP 56
9750: PPUSH
9751: CALL_OW 491
// SelectUnits ( Burlak ) ;
9755: LD_EXP 44
9759: PPUSH
9760: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
9764: LD_EXP 44
9768: PPUSH
9769: LD_STRING D6a-Bur-1
9771: PPUSH
9772: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9776: LD_EXP 56
9780: PPUSH
9781: LD_STRING D6a-Kur-1
9783: PPUSH
9784: CALL_OW 94
// meetNearOmicronBase = true ;
9788: LD_ADDR_EXP 27
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// kurinCheckVehicles = true ;
9796: LD_ADDR_EXP 26
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
9804: LD_ADDR_EXP 23
9808: PUSH
9809: LD_INT 4200
9811: ST_TO_ADDR
// disable ;
9812: DISABLE
// end ; 2 :
9813: GO 9927
9815: LD_INT 2
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9897
9823: POP
// begin DeselectUnits ( Kurin ) ;
9824: LD_EXP 56
9828: PPUSH
9829: CALL_OW 491
// SelectUnits ( Burlak ) ;
9833: LD_EXP 44
9837: PPUSH
9838: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
9842: LD_EXP 44
9846: PPUSH
9847: LD_STRING D6b-Bur-1
9849: PPUSH
9850: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
9854: LD_EXP 56
9858: PPUSH
9859: LD_STRING D6b-Kur-1
9861: PPUSH
9862: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
9866: LD_EXP 44
9870: PPUSH
9871: LD_STRING D6b-Bur-2
9873: PPUSH
9874: CALL_OW 88
// timeToArrive = 2 2$00 ;
9878: LD_ADDR_EXP 23
9882: PUSH
9883: LD_INT 4200
9885: ST_TO_ADDR
// meetNearOmicronBase = true ;
9886: LD_ADDR_EXP 27
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// disable ;
9894: DISABLE
// end ; 3 :
9895: GO 9927
9897: LD_INT 3
9899: DOUBLE
9900: EQUAL
9901: IFTRUE 9905
9903: GO 9926
9905: POP
// begin DeselectUnits ( Kurin ) ;
9906: LD_EXP 56
9910: PPUSH
9911: CALL_OW 491
// SelectUnits ( Burlak ) ;
9915: LD_EXP 44
9919: PPUSH
9920: CALL_OW 490
// end ; end ;
9924: GO 9927
9926: POP
// end ; enable ;
9927: ENABLE
// end ;
9928: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
9929: LD_EXP 89
9933: PUSH
9934: LD_INT 35
9936: LESS
9937: IFFALSE 10173
9939: GO 9941
9941: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
9942: LD_EXP 56
9946: PPUSH
9947: CALL_OW 87
// InGameOn ;
9951: CALL_OW 8
// DialogueOn ;
9955: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
9959: LD_EXP 56
9963: PPUSH
9964: LD_STRING D5-Kur-1
9966: PPUSH
9967: CALL_OW 94
// case Query ( QVehicles ) of 1 :
9971: LD_STRING QVehicles
9973: PPUSH
9974: CALL_OW 97
9978: PUSH
9979: LD_INT 1
9981: DOUBLE
9982: EQUAL
9983: IFTRUE 9987
9985: GO 10038
9987: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
9988: LD_EXP 44
9992: PPUSH
9993: LD_STRING D6a-Bur-1
9995: PPUSH
9996: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
10000: LD_EXP 56
10004: PPUSH
10005: LD_STRING D6a-Kur-1
10007: PPUSH
10008: CALL_OW 94
// meetNearOmicronBase = true ;
10012: LD_ADDR_EXP 27
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// kurinCheckVehicles = true ;
10020: LD_ADDR_EXP 26
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 4200
10035: ST_TO_ADDR
// end ; 2 :
10036: GO 10165
10038: LD_INT 2
10040: DOUBLE
10041: EQUAL
10042: IFTRUE 10046
10044: GO 10093
10046: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
10047: LD_EXP 44
10051: PPUSH
10052: LD_STRING D6b-Bur-1
10054: PPUSH
10055: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
10059: LD_EXP 56
10063: PPUSH
10064: LD_STRING D6b-Kur-1
10066: PPUSH
10067: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
10071: LD_EXP 44
10075: PPUSH
10076: LD_STRING D6b-Bur-2
10078: PPUSH
10079: CALL_OW 94
// meetNearOmicronBase = true ;
10083: LD_ADDR_EXP 27
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// end ; 3 :
10091: GO 10165
10093: LD_INT 3
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10164
10101: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
10102: LD_EXP 44
10106: PPUSH
10107: LD_STRING D6c-Bur-1
10109: PPUSH
10110: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
10114: LD_EXP 56
10118: PPUSH
10119: LD_STRING D6c-Kur-1
10121: PPUSH
10122: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
10126: LD_EXP 44
10130: PPUSH
10131: LD_STRING D6c-Bur-2
10133: PPUSH
10134: CALL_OW 94
// kurinGiveMoreTime = true ;
10138: LD_ADDR_EXP 21
10142: PUSH
10143: LD_INT 1
10145: ST_TO_ADDR
// kurinOpinion = 0 ;
10146: LD_ADDR_EXP 10
10150: PUSH
10151: LD_INT 0
10153: ST_TO_ADDR
// counterIndex = 4 ;
10154: LD_ADDR_EXP 86
10158: PUSH
10159: LD_INT 4
10161: ST_TO_ADDR
// end ; end ;
10162: GO 10165
10164: POP
// InGameOff ;
10165: CALL_OW 9
// DialogueOff ;
10169: CALL_OW 7
// end ;
10173: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
10174: LD_EXP 22
10178: PUSH
10179: LD_INT 35
10181: LESS
10182: PUSH
10183: LD_EXP 21
10187: AND
10188: IFFALSE 10229
10190: GO 10192
10192: DISABLE
// begin DialogueOn ;
10193: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
10197: LD_EXP 56
10201: PPUSH
10202: LD_STRING D6c-Kur-2
10204: PPUSH
10205: CALL_OW 94
// DialogueOff ;
10209: CALL_OW 7
// timeToArrive = 2 2$00 ;
10213: LD_ADDR_EXP 23
10217: PUSH
10218: LD_INT 4200
10220: ST_TO_ADDR
// meetNearOmicronBase = true ;
10221: LD_ADDR_EXP 27
10225: PUSH
10226: LD_INT 1
10228: ST_TO_ADDR
// end ;
10229: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
10230: LD_EXP 27
10234: IFFALSE 10733
10236: GO 10238
10238: DISABLE
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
// begin mechs = [ ] ;
10248: LD_ADDR_VAR 0 3
10252: PUSH
10253: EMPTY
10254: ST_TO_ADDR
// vehs = [ ] ;
10255: LD_ADDR_VAR 0 4
10259: PUSH
10260: EMPTY
10261: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10262: LD_ADDR_VAR 0 7
10266: PUSH
10267: LD_INT 22
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 21
10279: PUSH
10280: LD_INT 2
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 23
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 3
10299: PUSH
10300: LD_INT 34
10302: PUSH
10303: LD_INT 51
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: PPUSH
10320: CALL_OW 69
10324: PUSH
10325: LD_INT 22
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 21
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: MINUS
10354: ST_TO_ADDR
// haveVehs = 0 ;
10355: LD_ADDR_VAR 0 5
10359: PUSH
10360: LD_INT 0
10362: ST_TO_ADDR
// uc_side = 6 ;
10363: LD_ADDR_OWVAR 20
10367: PUSH
10368: LD_INT 6
10370: ST_TO_ADDR
// uc_nation = 3 ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// for i := 1 to freeVehs do
10379: LD_ADDR_VAR 0 1
10383: PUSH
10384: DOUBLE
10385: LD_INT 1
10387: DEC
10388: ST_TO_ADDR
10389: LD_VAR 0 7
10393: PUSH
10394: FOR_TO
10395: IFFALSE 10466
// begin PrepareMechanic ( false , 2 ) ;
10397: LD_INT 0
10399: PPUSH
10400: LD_INT 2
10402: PPUSH
10403: CALL_OW 383
// mech = CreateHuman ;
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: CALL_OW 44
10416: ST_TO_ADDR
// mechs = mechs ^ mech ;
10417: LD_ADDR_VAR 0 3
10421: PUSH
10422: LD_VAR 0 3
10426: PUSH
10427: LD_VAR 0 2
10431: ADD
10432: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_INT 4
10440: PPUSH
10441: LD_INT 0
10443: PPUSH
10444: CALL_OW 49
// ComExitBuilding ( mech ) ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 122
// wait ( 0 0$1 ) ;
10457: LD_INT 35
10459: PPUSH
10460: CALL_OW 67
// end ;
10464: GO 10394
10466: POP
10467: POP
// if enoughVehsForKirov and freeVehs > 0 then
10468: LD_EXP 92
10472: PUSH
10473: LD_VAR 0 7
10477: PUSH
10478: LD_INT 0
10480: GREATER
10481: AND
10482: IFFALSE 10700
// begin vehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
10484: LD_ADDR_VAR 0 4
10488: PUSH
10489: LD_INT 22
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 21
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 23
10511: PUSH
10512: LD_INT 3
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 3
10521: PUSH
10522: LD_INT 34
10524: PUSH
10525: LD_INT 51
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 3
10538: PUSH
10539: LD_INT 59
10541: PUSH
10542: EMPTY
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: ST_TO_ADDR
// for i := 1 to freeVehs do
10561: LD_ADDR_VAR 0 1
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_VAR 0 7
10575: PUSH
10576: FOR_TO
10577: IFFALSE 10603
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
10579: LD_ADDR_EXP 91
10583: PUSH
10584: LD_EXP 91
10588: PUSH
10589: LD_VAR 0 4
10593: PUSH
10594: LD_VAR 0 1
10598: ARRAY
10599: ADD
10600: ST_TO_ADDR
10601: GO 10576
10603: POP
10604: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
10605: LD_EXP 91
10609: PPUSH
10610: LD_INT 6
10612: PPUSH
10613: CALL_OW 235
// produceMoreVehicles = true ;
10617: LD_ADDR_EXP 24
10621: PUSH
10622: LD_INT 1
10624: ST_TO_ADDR
// for i := 1 to freeVehs do
10625: LD_ADDR_VAR 0 1
10629: PUSH
10630: DOUBLE
10631: LD_INT 1
10633: DEC
10634: ST_TO_ADDR
10635: LD_VAR 0 7
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10671
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
10643: LD_VAR 0 3
10647: PUSH
10648: LD_VAR 0 1
10652: ARRAY
10653: PPUSH
10654: LD_EXP 91
10658: PUSH
10659: LD_VAR 0 1
10663: ARRAY
10664: PPUSH
10665: CALL_OW 180
10669: GO 10640
10671: POP
10672: POP
// if kurinCheckVehicles and not kurinOpinion = 0 then
10673: LD_EXP 26
10677: PUSH
10678: LD_EXP 10
10682: PUSH
10683: LD_INT 0
10685: EQUAL
10686: NOT
10687: AND
10688: IFFALSE 10698
// kurinOpinion = 1 ;
10690: LD_ADDR_EXP 10
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// end else
10698: GO 10733
// begin if kurinCheckVehicles then
10700: LD_EXP 26
10704: IFFALSE 10733
// begin DialogueOn ;
10706: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
10710: LD_EXP 56
10714: PPUSH
10715: LD_STRING D6d-Kur-1
10717: PPUSH
10718: CALL_OW 94
// DialogueOff ;
10722: CALL_OW 7
// YouLost ( Vehicles ) ;
10726: LD_STRING Vehicles
10728: PPUSH
10729: CALL_OW 104
// end ; end ; end ;
10733: PPOPN 7
10735: END
// every 0 0$1 trigger meetNearOmicronBase do var i ;
10736: LD_EXP 27
10740: IFFALSE 10879
10742: GO 10744
10744: DISABLE
10745: LD_INT 0
10747: PPUSH
// begin spawnCrates = false ;
10748: LD_ADDR_EXP 13
10752: PUSH
10753: LD_INT 0
10755: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
10756: LD_INT 6
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: LD_INT 2
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
10772: LD_INT 0
10774: PPUSH
10775: LD_INT 3
10777: PPUSH
10778: LD_INT 0
10780: PPUSH
10781: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
10785: LD_STRING M3a
10787: PPUSH
10788: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
10792: LD_STRING M5
10794: PPUSH
10795: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
10799: LD_INT 14
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 424
// for i := 1 to kirovAttackVehicles do
10809: LD_ADDR_VAR 0 1
10813: PUSH
10814: DOUBLE
10815: LD_INT 1
10817: DEC
10818: ST_TO_ADDR
10819: LD_EXP 91
10823: PUSH
10824: FOR_TO
10825: IFFALSE 10850
// ComMoveXY ( kirovAttackVehicles [ i ] , 75 , 38 ) ;
10827: LD_EXP 91
10831: PUSH
10832: LD_VAR 0 1
10836: ARRAY
10837: PPUSH
10838: LD_INT 75
10840: PPUSH
10841: LD_INT 38
10843: PPUSH
10844: CALL_OW 111
10848: GO 10824
10850: POP
10851: POP
// counterIndex = 2 ;
10852: LD_ADDR_EXP 86
10856: PUSH
10857: LD_INT 2
10859: ST_TO_ADDR
// if not kurinOpinion = 0 then
10860: LD_EXP 10
10864: PUSH
10865: LD_INT 0
10867: EQUAL
10868: NOT
10869: IFFALSE 10879
// kurinOpinion = 1 ;
10871: LD_ADDR_EXP 10
10875: PUSH
10876: LD_INT 1
10878: ST_TO_ADDR
// end ;
10879: PPOPN 1
10881: END
// every 0 0$1 trigger ( timeToArrive <= 0 and counterIndex = 2 ) do
10882: LD_EXP 23
10886: PUSH
10887: LD_INT 0
10889: LESSEQUAL
10890: PUSH
10891: LD_EXP 86
10895: PUSH
10896: LD_INT 2
10898: EQUAL
10899: AND
10900: IFFALSE 10949
10902: GO 10904
10904: DISABLE
// begin DialogueOn ;
10905: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
10909: LD_EXP 56
10913: PPUSH
10914: LD_STRING D7a-Kur-1
10916: PPUSH
10917: CALL_OW 94
// DialogueOff ;
10921: CALL_OW 7
// counterIndex = 3 ;
10925: LD_ADDR_EXP 86
10929: PUSH
10930: LD_INT 3
10932: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10933: LD_ADDR_EXP 23
10937: PUSH
10938: LD_INT 4200
10940: ST_TO_ADDR
// kurinOpinion = 0 ;
10941: LD_ADDR_EXP 10
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// end ;
10949: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
10950: LD_EXP 23
10954: PUSH
10955: LD_INT 35
10957: LESS
10958: PUSH
10959: LD_EXP 86
10963: PUSH
10964: LD_INT 3
10966: EQUAL
10967: AND
10968: IFFALSE 10980
10970: GO 10972
10972: DISABLE
// YouLost ( Delay ) ;
10973: LD_STRING Delay
10975: PPUSH
10976: CALL_OW 104
10980: END
// export startTheAttack ; every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10981: LD_EXP 27
10985: PUSH
10986: LD_INT 14
10988: PPUSH
10989: LD_INT 22
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 21
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 71
11017: PUSH
11018: LD_INT 0
11020: EQUAL
11021: AND
11022: IFFALSE 11111
11024: GO 11026
11026: DISABLE
// begin counterEnable = false ;
11027: LD_ADDR_EXP 85
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// startTheAttack = true ;
11035: LD_ADDR_EXP 93
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// Display_strings = [ ] ;
11043: LD_ADDR_OWVAR 47
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
11050: LD_INT 14
11052: PPUSH
11053: LD_INT 0
11055: PPUSH
11056: CALL_OW 424
// canExitBattlefield = false ;
11060: LD_ADDR_EXP 32
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// DialogueOn ;
11068: CALL_OW 6
// SayRadio ( Burlak , D7-Bur-1 ) ;
11072: LD_EXP 44
11076: PPUSH
11077: LD_STRING D7-Bur-1
11079: PPUSH
11080: CALL_OW 94
// SayRadio ( Kurin , D7-Kur-1 ) ;
11084: LD_EXP 56
11088: PPUSH
11089: LD_STRING D7-Kur-1
11091: PPUSH
11092: CALL_OW 94
// DialogueOff ;
11096: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
11100: LD_STRING M5a
11102: PPUSH
11103: CALL_OW 337
// KirovAttackOmicron ;
11107: CALL 2499 0 0
// end ;
11111: END
// every 0 0$1 trigger ( UnitFilter ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ f_not , [ f_lives , 700 ] ] ) and startTheAttack ) or not IsBusy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) do var i ;
11112: LD_EXP 91
11116: PUSH
11117: LD_EXP 43
11121: ARRAY
11122: PPUSH
11123: LD_INT 3
11125: PUSH
11126: LD_INT 24
11128: PUSH
11129: LD_INT 700
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 72
11144: PUSH
11145: LD_EXP 93
11149: AND
11150: PUSH
11151: LD_EXP 91
11155: PUSH
11156: LD_EXP 43
11160: ARRAY
11161: PPUSH
11162: CALL_OW 315
11166: NOT
11167: OR
11168: IFFALSE 11272
11170: GO 11172
11172: DISABLE
11173: LD_INT 0
11175: PPUSH
// begin enable ;
11176: ENABLE
// if GetLives ( kirovAttackVehicles [ KirovCurrentAttacker ] ) <= 700 then
11177: LD_EXP 91
11181: PUSH
11182: LD_EXP 43
11186: ARRAY
11187: PPUSH
11188: CALL_OW 256
11192: PUSH
11193: LD_INT 700
11195: LESSEQUAL
11196: IFFALSE 11272
// begin ComMoveToArea ( kirovAttackVehicles [ KirovCurrentAttacker ] , MeetAreaRetreat ) ;
11198: LD_EXP 91
11202: PUSH
11203: LD_EXP 43
11207: ARRAY
11208: PPUSH
11209: LD_INT 16
11211: PPUSH
11212: CALL_OW 113
// AddComRepairVehicleAndReturn ( IsDrivenBy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) ) ;
11216: LD_EXP 91
11220: PUSH
11221: LD_EXP 43
11225: ARRAY
11226: PPUSH
11227: CALL_OW 311
11231: PPUSH
11232: CALL 51320 0 1
// SetFuel ( kirovAttackVehicles [ KirovCurrentAttacker ] , 100 ) ;
11236: LD_EXP 91
11240: PUSH
11241: LD_EXP 43
11245: ARRAY
11246: PPUSH
11247: LD_INT 100
11249: PPUSH
11250: CALL_OW 240
// KirovCurrentAttacker = KirovCurrentAttacker + 1 ;
11254: LD_ADDR_EXP 43
11258: PUSH
11259: LD_EXP 43
11263: PUSH
11264: LD_INT 1
11266: PLUS
11267: ST_TO_ADDR
// KirovAttackOmicron ;
11268: CALL 2499 0 0
// end ; end ;
11272: PPOPN 1
11274: END
// export omicronNotDestroyed ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 or timeToArabAttack = ticks do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
11275: LD_INT 22
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 21
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: CALL_OW 69
11303: PUSH
11304: LD_INT 5
11306: LESS
11307: PUSH
11308: LD_EXP 90
11312: PUSH
11313: LD_EXP 87
11317: EQUAL
11318: OR
11319: IFFALSE 12062
11321: GO 11323
11323: DISABLE
11324: LD_INT 0
11326: PPUSH
11327: PPUSH
11328: PPUSH
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
11334: PPUSH
// begin omicronSurrender = true ;
11335: LD_ADDR_EXP 31
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// canExitBattlefield = true ;
11343: LD_ADDR_EXP 32
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// endCutscene = true ;
11351: LD_ADDR_EXP 38
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if timeToArabAttack = 0 and not IsDead ( omikronDepot ) then
11359: LD_EXP 90
11363: PUSH
11364: LD_INT 0
11366: EQUAL
11367: PUSH
11368: LD_EXP 74
11372: PPUSH
11373: CALL_OW 301
11377: NOT
11378: AND
11379: IFFALSE 11391
// omicronNotDestroyed = true else
11381: LD_ADDR_EXP 94
11385: PUSH
11386: LD_INT 1
11388: ST_TO_ADDR
11389: GO 11399
// omicronNotDestroyed = false ;
11391: LD_ADDR_EXP 94
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
11399: LD_INT 1
11401: PPUSH
11402: LD_INT 3
11404: PPUSH
11405: LD_INT 1
11407: PPUSH
11408: LD_INT 0
11410: PPUSH
11411: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
11415: LD_INT 2
11417: PPUSH
11418: LD_INT 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
11431: LD_EXP 44
11435: PPUSH
11436: CALL_OW 87
// SayRadioNoFace ( Scholtze2 , D8-Sol1-1 ) ;
11440: LD_EXP 69
11444: PPUSH
11445: LD_STRING D8-Sol1-1
11447: PPUSH
11448: CALL_OW 586
// if IsOk ( Kovalyuk ) then
11452: LD_EXP 47
11456: PPUSH
11457: CALL_OW 302
11461: IFFALSE 11475
// Say ( Kovalyuk , D8-Kov-1 ) ;
11463: LD_EXP 47
11467: PPUSH
11468: LD_STRING D8-Kov-1
11470: PPUSH
11471: CALL_OW 88
// SayRadio ( Bukov , D8-RSol1-1 ) ;
11475: LD_EXP 67
11479: PPUSH
11480: LD_STRING D8-RSol1-1
11482: PPUSH
11483: CALL_OW 94
// if IsOk ( Gnyevko ) then
11487: LD_EXP 45
11491: PPUSH
11492: CALL_OW 302
11496: IFFALSE 11510
// Say ( Gnyevko , D8-Gny-1 ) ;
11498: LD_EXP 45
11502: PPUSH
11503: LD_STRING D8-Gny-1
11505: PPUSH
11506: CALL_OW 88
// tmpRu = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov ] ;
11510: LD_ADDR_VAR 0 3
11514: PUSH
11515: LD_INT 22
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 26
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: PPUSH
11550: CALL_OW 69
11554: PUSH
11555: LD_EXP 44
11559: PUSH
11560: LD_EXP 45
11564: PUSH
11565: LD_EXP 47
11569: PUSH
11570: LD_EXP 48
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: DIFF
11581: ST_TO_ADDR
// Say ( tmpRu [ 1 ] , D8-RSol2-1 ) ;
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 1
11589: ARRAY
11590: PPUSH
11591: LD_STRING D8-RSol2-1
11593: PPUSH
11594: CALL_OW 88
// DialogueOff ;
11598: CALL_OW 7
// music_nat = nation_arabian ;
11602: LD_ADDR_OWVAR 71
11606: PUSH
11607: LD_INT 2
11609: ST_TO_ADDR
// music_class = music_combat ;
11610: LD_ADDR_OWVAR 72
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// game_speed = 4 ;
11618: LD_ADDR_OWVAR 65
11622: PUSH
11623: LD_INT 4
11625: ST_TO_ADDR
// DialogueOn ;
11626: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
11630: LD_EXP 65
11634: PPUSH
11635: LD_STRING D9-Gri-1
11637: PPUSH
11638: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11642: LD_EXP 56
11646: PPUSH
11647: LD_STRING D9-Kur-1
11649: PPUSH
11650: CALL_OW 94
// DialogueOff ;
11654: CALL_OW 7
// CenterOnXY ( 162 , 107 ) ;
11658: LD_INT 162
11660: PPUSH
11661: LD_INT 107
11663: PPUSH
11664: CALL_OW 84
// wait ( 2 2$0 ) ;
11668: LD_INT 4200
11670: PPUSH
11671: CALL_OW 67
// DialogueOn ;
11675: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
11679: LD_EXP 65
11683: PPUSH
11684: LD_STRING D9-Gri-2
11686: PPUSH
11687: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11691: LD_EXP 56
11695: PPUSH
11696: LD_STRING D9-Kur-2
11698: PPUSH
11699: CALL_OW 94
// wait ( 1 1$0 ) ;
11703: LD_INT 2100
11705: PPUSH
11706: CALL_OW 67
// SayRadio ( Grishko , D9-Gri-3 ) ;
11710: LD_EXP 65
11714: PPUSH
11715: LD_STRING D9-Gri-3
11717: PPUSH
11718: CALL_OW 94
// DialogueOff ;
11722: CALL_OW 7
// CenterNowOnUnits ( Kurin ) ;
11726: LD_EXP 56
11730: PPUSH
11731: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
11735: LD_EXP 56
11739: PPUSH
11740: LD_STRING D9-Kur-3
11742: PPUSH
11743: CALL_OW 94
// DialogueOn ;
11747: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11751: LD_EXP 56
11755: PPUSH
11756: LD_STRING D9a-Kur-1
11758: PPUSH
11759: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11763: LD_EXP 44
11767: PPUSH
11768: LD_STRING D9a-Bur-1
11770: PPUSH
11771: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11775: LD_EXP 56
11779: PPUSH
11780: LD_STRING D9a-Kur-2
11782: PPUSH
11783: CALL_OW 94
// DialogueOff ;
11787: CALL_OW 7
// wait ( 0 0$1 ) ;
11791: LD_INT 35
11793: PPUSH
11794: CALL_OW 67
// ComMoveUnit ( Popov , Burlak ) ;
11798: LD_EXP 57
11802: PPUSH
11803: LD_EXP 44
11807: PPUSH
11808: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11812: LD_INT 35
11814: PPUSH
11815: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
11819: LD_EXP 44
11823: PPUSH
11824: LD_EXP 57
11828: PPUSH
11829: CALL_OW 296
11833: PUSH
11834: LD_INT 8
11836: LESS
11837: PUSH
11838: LD_EXP 44
11842: PPUSH
11843: CALL_OW 310
11847: PUSH
11848: LD_INT 8
11850: LESS
11851: PUSH
11852: LD_EXP 44
11856: PPUSH
11857: CALL_OW 310
11861: AND
11862: OR
11863: IFFALSE 11812
// if IsInUnit ( Burlak ) then
11865: LD_EXP 44
11869: PPUSH
11870: CALL_OW 310
11874: IFFALSE 11892
// begin ComExitVehicle ( Burlak ) ;
11876: LD_EXP 44
11880: PPUSH
11881: CALL_OW 121
// wait ( 0 0$1 ) ;
11885: LD_INT 35
11887: PPUSH
11888: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
11892: LD_EXP 44
11896: PUSH
11897: LD_EXP 57
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
11910: LD_EXP 44
11914: PPUSH
11915: LD_EXP 57
11919: PPUSH
11920: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
11924: LD_EXP 57
11928: PPUSH
11929: LD_EXP 44
11933: PPUSH
11934: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
11938: LD_EXP 44
11942: PPUSH
11943: LD_STRING D10a-Bur-1
11945: PPUSH
11946: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
11950: LD_EXP 57
11954: PPUSH
11955: LD_STRING D10a-Pop-1
11957: PPUSH
11958: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
11962: LD_EXP 44
11966: PPUSH
11967: LD_STRING D10a-Bur-2
11969: PPUSH
11970: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
11974: LD_EXP 57
11978: PPUSH
11979: LD_STRING D10a-Pop-2
11981: PPUSH
11982: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
11986: LD_EXP 44
11990: PPUSH
11991: LD_STRING D10a-Bur-3
11993: PPUSH
11994: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
11998: LD_EXP 57
12002: PPUSH
12003: LD_STRING D10a-Pop-3
12005: PPUSH
12006: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
12010: LD_EXP 44
12014: PPUSH
12015: LD_STRING D10a-Bur-4
12017: PPUSH
12018: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
12022: LD_EXP 57
12026: PPUSH
12027: LD_STRING D10a-Pop-4
12029: PPUSH
12030: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
12034: LD_EXP 44
12038: PPUSH
12039: LD_STRING D10a-Bur-5
12041: PPUSH
12042: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
12046: LD_EXP 57
12050: PPUSH
12051: LD_STRING D10a-Pop-5
12053: PPUSH
12054: CALL_OW 88
// EndMission ;
12058: CALL 12065 0 0
// end ;
12062: PPOPN 9
12064: END
// export function EndMission ; begin
12065: LD_INT 0
12067: PPUSH
// if enoughVehsForKirov then
12068: LD_EXP 92
12072: IFFALSE 12086
// AddMedal ( Surplus , 1 ) else
12074: LD_STRING Surplus
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 101
12084: GO 12116
// if produceOnlyForYou then
12086: LD_EXP 25
12090: IFFALSE 12105
// AddMedal ( Surplus , - 1 ) else
12092: LD_STRING Surplus
12094: PPUSH
12095: LD_INT 1
12097: NEG
12098: PPUSH
12099: CALL_OW 101
12103: GO 12116
// AddMedal ( Surplus , - 2 ) ;
12105: LD_STRING Surplus
12107: PPUSH
12108: LD_INT 2
12110: NEG
12111: PPUSH
12112: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
12116: LD_EXP 15
12120: PUSH
12121: LD_EXP 68
12125: PPUSH
12126: CALL_OW 302
12130: AND
12131: IFFALSE 12145
// AddMedal ( Scholtze , 1 ) else
12133: LD_STRING Scholtze
12135: PPUSH
12136: LD_INT 1
12138: PPUSH
12139: CALL_OW 101
12143: GO 12156
// AddMedal ( Scholtze , - 1 ) ;
12145: LD_STRING Scholtze
12147: PPUSH
12148: LD_INT 1
12150: NEG
12151: PPUSH
12152: CALL_OW 101
// if omicronNotDestroyed = false then
12156: LD_EXP 94
12160: PUSH
12161: LD_INT 0
12163: EQUAL
12164: IFFALSE 12178
// AddMedal ( OmiRun , 1 ) else
12166: LD_STRING OmiRun
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 101
12176: GO 12189
// AddMedal ( OmiRun , - 1 ) ;
12178: LD_STRING OmiRun
12180: PPUSH
12181: LD_INT 1
12183: NEG
12184: PPUSH
12185: CALL_OW 101
// GiveMedals ( Main ) ;
12189: LD_STRING Main
12191: PPUSH
12192: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
12196: LD_INT 22
12198: PUSH
12199: LD_INT 3
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 23
12208: PUSH
12209: LD_INT 3
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 21
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 69
12235: PPUSH
12236: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
12240: LD_EXP 44
12244: PPUSH
12245: LD_EXP 5
12249: PUSH
12250: LD_STRING Burlak
12252: STR
12253: PPUSH
12254: CALL_OW 38
// if IsLive ( Gnyevko ) then
12258: LD_EXP 45
12262: PPUSH
12263: CALL_OW 300
12267: IFFALSE 12287
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
12269: LD_EXP 45
12273: PPUSH
12274: LD_EXP 5
12278: PUSH
12279: LD_STRING Gnyevko
12281: STR
12282: PPUSH
12283: CALL_OW 38
// if IsLive ( Kovalyuk ) then
12287: LD_EXP 47
12291: PPUSH
12292: CALL_OW 300
12296: IFFALSE 12316
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
12298: LD_EXP 47
12302: PPUSH
12303: LD_EXP 5
12307: PUSH
12308: LD_STRING Kovalyuk
12310: STR
12311: PPUSH
12312: CALL_OW 38
// if IsLive ( Belkov ) then
12316: LD_EXP 48
12320: PPUSH
12321: CALL_OW 300
12325: IFFALSE 12345
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
12327: LD_EXP 48
12331: PPUSH
12332: LD_EXP 5
12336: PUSH
12337: LD_STRING Belkov
12339: STR
12340: PPUSH
12341: CALL_OW 38
// if IsLive ( Kirilenkova ) then
12345: LD_EXP 46
12349: PPUSH
12350: CALL_OW 300
12354: IFFALSE 12374
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
12356: LD_EXP 46
12360: PPUSH
12361: LD_EXP 5
12365: PUSH
12366: LD_STRING Kirilenkova
12368: STR
12369: PPUSH
12370: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
12374: LD_INT 22
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 23
12386: PUSH
12387: LD_INT 3
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 1
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: PUSH
12414: LD_EXP 44
12418: PUSH
12419: LD_EXP 45
12423: PUSH
12424: LD_EXP 47
12428: PUSH
12429: LD_EXP 48
12433: PUSH
12434: LD_EXP 46
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: DIFF
12446: PPUSH
12447: LD_EXP 5
12451: PUSH
12452: LD_STRING burlakTeam
12454: STR
12455: PPUSH
12456: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin ] ) , currentMissionPrefix & kirovTeam ) ;
12460: LD_INT 22
12462: PUSH
12463: LD_INT 6
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 23
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 21
12482: PUSH
12483: LD_INT 1
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 69
12499: PUSH
12500: LD_EXP 56
12504: PUSH
12505: EMPTY
12506: LIST
12507: DIFF
12508: PPUSH
12509: LD_EXP 5
12513: PUSH
12514: LD_STRING kirovTeam
12516: STR
12517: PPUSH
12518: CALL_OW 38
// SaveVariable ( kurinOpinion , 03_KurinOpinion ) ;
12522: LD_EXP 10
12526: PPUSH
12527: LD_STRING 03_KurinOpinion
12529: PPUSH
12530: CALL_OW 39
// YouWin ;
12534: CALL_OW 103
// end ; end_of_file
12538: LD_VAR 0 1
12542: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12543: LD_INT 0
12545: PPUSH
// ar_miner := 81 ;
12546: LD_ADDR_EXP 102
12550: PUSH
12551: LD_INT 81
12553: ST_TO_ADDR
// ar_crane := 88 ;
12554: LD_ADDR_EXP 101
12558: PUSH
12559: LD_INT 88
12561: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12562: LD_ADDR_EXP 96
12566: PUSH
12567: LD_INT 89
12569: ST_TO_ADDR
// us_hack := 99 ;
12570: LD_ADDR_EXP 97
12574: PUSH
12575: LD_INT 99
12577: ST_TO_ADDR
// us_artillery := 97 ;
12578: LD_ADDR_EXP 98
12582: PUSH
12583: LD_INT 97
12585: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12586: LD_ADDR_EXP 99
12590: PUSH
12591: LD_INT 91
12593: ST_TO_ADDR
// ar_mortar := 92 ;
12594: LD_ADDR_EXP 100
12598: PUSH
12599: LD_INT 92
12601: ST_TO_ADDR
// ru_flamethrower := 93 ;
12602: LD_ADDR_EXP 103
12606: PUSH
12607: LD_INT 93
12609: ST_TO_ADDR
// ru_radar := 98 ;
12610: LD_ADDR_EXP 95
12614: PUSH
12615: LD_INT 98
12617: ST_TO_ADDR
// tech_Artillery := 80 ;
12618: LD_ADDR_EXP 104
12622: PUSH
12623: LD_INT 80
12625: ST_TO_ADDR
// tech_RadMat := 81 ;
12626: LD_ADDR_EXP 105
12630: PUSH
12631: LD_INT 81
12633: ST_TO_ADDR
// tech_BasicTools := 82 ;
12634: LD_ADDR_EXP 106
12638: PUSH
12639: LD_INT 82
12641: ST_TO_ADDR
// tech_Cargo := 83 ;
12642: LD_ADDR_EXP 107
12646: PUSH
12647: LD_INT 83
12649: ST_TO_ADDR
// tech_Track := 84 ;
12650: LD_ADDR_EXP 108
12654: PUSH
12655: LD_INT 84
12657: ST_TO_ADDR
// tech_Crane := 85 ;
12658: LD_ADDR_EXP 109
12662: PUSH
12663: LD_INT 85
12665: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12666: LD_ADDR_EXP 110
12670: PUSH
12671: LD_INT 86
12673: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12674: LD_ADDR_EXP 111
12678: PUSH
12679: LD_INT 87
12681: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12682: LD_ADDR_EXP 112
12686: PUSH
12687: LD_INT 88
12689: ST_TO_ADDR
// class_mastodont := 31 ;
12690: LD_ADDR_EXP 113
12694: PUSH
12695: LD_INT 31
12697: ST_TO_ADDR
// class_horse := 21 ;
12698: LD_ADDR_EXP 114
12702: PUSH
12703: LD_INT 21
12705: ST_TO_ADDR
// end ;
12706: LD_VAR 0 1
12710: RET
// every 1 do
12711: GO 12713
12713: DISABLE
// InitGlobalVariables ; end_of_file
12714: CALL 12543 0 0
12718: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12719: LD_INT 0
12721: PPUSH
12722: PPUSH
// if exist_mode then
12723: LD_VAR 0 2
12727: IFFALSE 12752
// unit := CreateCharacter ( prefix & ident ) else
12729: LD_ADDR_VAR 0 5
12733: PUSH
12734: LD_VAR 0 3
12738: PUSH
12739: LD_VAR 0 1
12743: STR
12744: PPUSH
12745: CALL_OW 34
12749: ST_TO_ADDR
12750: GO 12767
// unit := NewCharacter ( ident ) ;
12752: LD_ADDR_VAR 0 5
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 25
12766: ST_TO_ADDR
// result := unit ;
12767: LD_ADDR_VAR 0 4
12771: PUSH
12772: LD_VAR 0 5
12776: ST_TO_ADDR
// end ;
12777: LD_VAR 0 4
12781: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
// if not side or not nation then
12786: LD_VAR 0 1
12790: NOT
12791: PUSH
12792: LD_VAR 0 2
12796: NOT
12797: OR
12798: IFFALSE 12802
// exit ;
12800: GO 13570
// case nation of nation_american :
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 13029
12815: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12816: LD_ADDR_VAR 0 4
12820: PUSH
12821: LD_INT 35
12823: PUSH
12824: LD_INT 45
12826: PUSH
12827: LD_INT 46
12829: PUSH
12830: LD_INT 47
12832: PUSH
12833: LD_INT 82
12835: PUSH
12836: LD_INT 83
12838: PUSH
12839: LD_INT 84
12841: PUSH
12842: LD_INT 85
12844: PUSH
12845: LD_INT 86
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: LD_INT 6
12856: PUSH
12857: LD_INT 15
12859: PUSH
12860: LD_INT 16
12862: PUSH
12863: LD_INT 7
12865: PUSH
12866: LD_INT 12
12868: PUSH
12869: LD_INT 13
12871: PUSH
12872: LD_INT 10
12874: PUSH
12875: LD_INT 14
12877: PUSH
12878: LD_INT 20
12880: PUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 25
12889: PUSH
12890: LD_INT 32
12892: PUSH
12893: LD_INT 27
12895: PUSH
12896: LD_INT 36
12898: PUSH
12899: LD_INT 69
12901: PUSH
12902: LD_INT 39
12904: PUSH
12905: LD_INT 34
12907: PUSH
12908: LD_INT 40
12910: PUSH
12911: LD_INT 48
12913: PUSH
12914: LD_INT 49
12916: PUSH
12917: LD_INT 50
12919: PUSH
12920: LD_INT 51
12922: PUSH
12923: LD_INT 52
12925: PUSH
12926: LD_INT 53
12928: PUSH
12929: LD_INT 54
12931: PUSH
12932: LD_INT 55
12934: PUSH
12935: LD_INT 56
12937: PUSH
12938: LD_INT 57
12940: PUSH
12941: LD_INT 58
12943: PUSH
12944: LD_INT 59
12946: PUSH
12947: LD_INT 60
12949: PUSH
12950: LD_INT 61
12952: PUSH
12953: LD_INT 62
12955: PUSH
12956: LD_INT 80
12958: PUSH
12959: LD_INT 82
12961: PUSH
12962: LD_INT 83
12964: PUSH
12965: LD_INT 84
12967: PUSH
12968: LD_INT 85
12970: PUSH
12971: LD_INT 86
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: ST_TO_ADDR
13027: GO 13494
13029: LD_INT 2
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13263
13037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13038: LD_ADDR_VAR 0 4
13042: PUSH
13043: LD_INT 35
13045: PUSH
13046: LD_INT 45
13048: PUSH
13049: LD_INT 46
13051: PUSH
13052: LD_INT 47
13054: PUSH
13055: LD_INT 82
13057: PUSH
13058: LD_INT 83
13060: PUSH
13061: LD_INT 84
13063: PUSH
13064: LD_INT 85
13066: PUSH
13067: LD_INT 87
13069: PUSH
13070: LD_INT 70
13072: PUSH
13073: LD_INT 1
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 3
13081: PUSH
13082: LD_INT 4
13084: PUSH
13085: LD_INT 5
13087: PUSH
13088: LD_INT 6
13090: PUSH
13091: LD_INT 15
13093: PUSH
13094: LD_INT 18
13096: PUSH
13097: LD_INT 7
13099: PUSH
13100: LD_INT 17
13102: PUSH
13103: LD_INT 8
13105: PUSH
13106: LD_INT 20
13108: PUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 72
13117: PUSH
13118: LD_INT 26
13120: PUSH
13121: LD_INT 69
13123: PUSH
13124: LD_INT 39
13126: PUSH
13127: LD_INT 40
13129: PUSH
13130: LD_INT 41
13132: PUSH
13133: LD_INT 42
13135: PUSH
13136: LD_INT 43
13138: PUSH
13139: LD_INT 48
13141: PUSH
13142: LD_INT 49
13144: PUSH
13145: LD_INT 50
13147: PUSH
13148: LD_INT 51
13150: PUSH
13151: LD_INT 52
13153: PUSH
13154: LD_INT 53
13156: PUSH
13157: LD_INT 54
13159: PUSH
13160: LD_INT 55
13162: PUSH
13163: LD_INT 56
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 61
13171: PUSH
13172: LD_INT 62
13174: PUSH
13175: LD_INT 66
13177: PUSH
13178: LD_INT 67
13180: PUSH
13181: LD_INT 68
13183: PUSH
13184: LD_INT 81
13186: PUSH
13187: LD_INT 82
13189: PUSH
13190: LD_INT 83
13192: PUSH
13193: LD_INT 84
13195: PUSH
13196: LD_INT 85
13198: PUSH
13199: LD_INT 87
13201: PUSH
13202: LD_INT 88
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: ST_TO_ADDR
13261: GO 13494
13263: LD_INT 3
13265: DOUBLE
13266: EQUAL
13267: IFTRUE 13271
13269: GO 13493
13271: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13272: LD_ADDR_VAR 0 4
13276: PUSH
13277: LD_INT 46
13279: PUSH
13280: LD_INT 47
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: LD_INT 2
13288: PUSH
13289: LD_INT 82
13291: PUSH
13292: LD_INT 83
13294: PUSH
13295: LD_INT 84
13297: PUSH
13298: LD_INT 85
13300: PUSH
13301: LD_INT 86
13303: PUSH
13304: LD_INT 11
13306: PUSH
13307: LD_INT 9
13309: PUSH
13310: LD_INT 20
13312: PUSH
13313: LD_INT 19
13315: PUSH
13316: LD_INT 21
13318: PUSH
13319: LD_INT 24
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 25
13327: PUSH
13328: LD_INT 28
13330: PUSH
13331: LD_INT 29
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 31
13339: PUSH
13340: LD_INT 37
13342: PUSH
13343: LD_INT 38
13345: PUSH
13346: LD_INT 32
13348: PUSH
13349: LD_INT 27
13351: PUSH
13352: LD_INT 33
13354: PUSH
13355: LD_INT 69
13357: PUSH
13358: LD_INT 39
13360: PUSH
13361: LD_INT 34
13363: PUSH
13364: LD_INT 40
13366: PUSH
13367: LD_INT 71
13369: PUSH
13370: LD_INT 23
13372: PUSH
13373: LD_INT 44
13375: PUSH
13376: LD_INT 48
13378: PUSH
13379: LD_INT 49
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: LD_INT 51
13387: PUSH
13388: LD_INT 52
13390: PUSH
13391: LD_INT 53
13393: PUSH
13394: LD_INT 54
13396: PUSH
13397: LD_INT 55
13399: PUSH
13400: LD_INT 56
13402: PUSH
13403: LD_INT 57
13405: PUSH
13406: LD_INT 58
13408: PUSH
13409: LD_INT 59
13411: PUSH
13412: LD_INT 63
13414: PUSH
13415: LD_INT 64
13417: PUSH
13418: LD_INT 65
13420: PUSH
13421: LD_INT 82
13423: PUSH
13424: LD_INT 83
13426: PUSH
13427: LD_INT 84
13429: PUSH
13430: LD_INT 85
13432: PUSH
13433: LD_INT 86
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: ST_TO_ADDR
13491: GO 13494
13493: POP
// if state > - 1 and state < 3 then
13494: LD_VAR 0 3
13498: PUSH
13499: LD_INT 1
13501: NEG
13502: GREATER
13503: PUSH
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 3
13511: LESS
13512: AND
13513: IFFALSE 13570
// for i in result do
13515: LD_ADDR_VAR 0 5
13519: PUSH
13520: LD_VAR 0 4
13524: PUSH
13525: FOR_IN
13526: IFFALSE 13568
// if GetTech ( i , side ) <> state then
13528: LD_VAR 0 5
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 321
13542: PUSH
13543: LD_VAR 0 3
13547: NONEQUAL
13548: IFFALSE 13566
// result := result diff i ;
13550: LD_ADDR_VAR 0 4
13554: PUSH
13555: LD_VAR 0 4
13559: PUSH
13560: LD_VAR 0 5
13564: DIFF
13565: ST_TO_ADDR
13566: GO 13525
13568: POP
13569: POP
// end ;
13570: LD_VAR 0 4
13574: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
// result := true ;
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: LD_INT 1
13587: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13588: LD_ADDR_VAR 0 5
13592: PUSH
13593: LD_VAR 0 2
13597: PPUSH
13598: CALL_OW 480
13602: ST_TO_ADDR
// if not tmp then
13603: LD_VAR 0 5
13607: NOT
13608: IFFALSE 13612
// exit ;
13610: GO 13661
// for i in tmp do
13612: LD_ADDR_VAR 0 4
13616: PUSH
13617: LD_VAR 0 5
13621: PUSH
13622: FOR_IN
13623: IFFALSE 13659
// if GetTech ( i , side ) <> state_researched then
13625: LD_VAR 0 4
13629: PPUSH
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 321
13639: PUSH
13640: LD_INT 2
13642: NONEQUAL
13643: IFFALSE 13657
// begin result := false ;
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: LD_INT 0
13652: ST_TO_ADDR
// exit ;
13653: POP
13654: POP
13655: GO 13661
// end ;
13657: GO 13622
13659: POP
13660: POP
// end ;
13661: LD_VAR 0 3
13665: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
13670: PPUSH
13671: PPUSH
13672: PPUSH
13673: PPUSH
13674: PPUSH
13675: PPUSH
13676: PPUSH
13677: PPUSH
13678: PPUSH
13679: PPUSH
13680: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13681: LD_VAR 0 1
13685: NOT
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 257
13696: PUSH
13697: LD_INT 9
13699: NONEQUAL
13700: OR
13701: IFFALSE 13705
// exit ;
13703: GO 14278
// side := GetSide ( unit ) ;
13705: LD_ADDR_VAR 0 9
13709: PUSH
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 255
13719: ST_TO_ADDR
// tech_space := tech_spacanom ;
13720: LD_ADDR_VAR 0 12
13724: PUSH
13725: LD_INT 29
13727: ST_TO_ADDR
// tech_time := tech_taurad ;
13728: LD_ADDR_VAR 0 13
13732: PUSH
13733: LD_INT 28
13735: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13736: LD_ADDR_VAR 0 11
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 310
13750: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13751: LD_VAR 0 11
13755: PPUSH
13756: CALL_OW 247
13760: PUSH
13761: LD_INT 2
13763: EQUAL
13764: IFFALSE 13768
// exit ;
13766: GO 14278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13768: LD_ADDR_VAR 0 8
13772: PUSH
13773: LD_INT 81
13775: PUSH
13776: LD_VAR 0 9
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: LD_INT 21
13790: PUSH
13791: LD_INT 3
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: ST_TO_ADDR
// if not tmp then
13811: LD_VAR 0 8
13815: NOT
13816: IFFALSE 13820
// exit ;
13818: GO 14278
// if in_unit then
13820: LD_VAR 0 11
13824: IFFALSE 13848
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13826: LD_ADDR_VAR 0 10
13830: PUSH
13831: LD_VAR 0 8
13835: PPUSH
13836: LD_VAR 0 11
13840: PPUSH
13841: CALL_OW 74
13845: ST_TO_ADDR
13846: GO 13868
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13848: LD_ADDR_VAR 0 10
13852: PUSH
13853: LD_VAR 0 8
13857: PPUSH
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 74
13867: ST_TO_ADDR
// if not enemy then
13868: LD_VAR 0 10
13872: NOT
13873: IFFALSE 13877
// exit ;
13875: GO 14278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13877: LD_VAR 0 11
13881: PUSH
13882: LD_VAR 0 11
13886: PPUSH
13887: LD_VAR 0 10
13891: PPUSH
13892: CALL_OW 296
13896: PUSH
13897: LD_INT 13
13899: GREATER
13900: AND
13901: PUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: LD_VAR 0 10
13911: PPUSH
13912: CALL_OW 296
13916: PUSH
13917: LD_INT 12
13919: GREATER
13920: OR
13921: IFFALSE 13925
// exit ;
13923: GO 14278
// missile := [ 1 ] ;
13925: LD_ADDR_VAR 0 14
13929: PUSH
13930: LD_INT 1
13932: PUSH
13933: EMPTY
13934: LIST
13935: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13936: LD_VAR 0 9
13940: PPUSH
13941: LD_VAR 0 12
13945: PPUSH
13946: CALL_OW 325
13950: IFFALSE 13979
// missile := Replace ( missile , missile + 1 , 2 ) ;
13952: LD_ADDR_VAR 0 14
13956: PUSH
13957: LD_VAR 0 14
13961: PPUSH
13962: LD_VAR 0 14
13966: PUSH
13967: LD_INT 1
13969: PLUS
13970: PPUSH
13971: LD_INT 2
13973: PPUSH
13974: CALL_OW 1
13978: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13979: LD_VAR 0 9
13983: PPUSH
13984: LD_VAR 0 13
13988: PPUSH
13989: CALL_OW 325
13993: PUSH
13994: LD_VAR 0 10
13998: PPUSH
13999: CALL_OW 255
14003: PPUSH
14004: LD_VAR 0 13
14008: PPUSH
14009: CALL_OW 325
14013: NOT
14014: AND
14015: IFFALSE 14044
// missile := Replace ( missile , missile + 1 , 3 ) ;
14017: LD_ADDR_VAR 0 14
14021: PUSH
14022: LD_VAR 0 14
14026: PPUSH
14027: LD_VAR 0 14
14031: PUSH
14032: LD_INT 1
14034: PLUS
14035: PPUSH
14036: LD_INT 3
14038: PPUSH
14039: CALL_OW 1
14043: ST_TO_ADDR
// if missile < 2 then
14044: LD_VAR 0 14
14048: PUSH
14049: LD_INT 2
14051: LESS
14052: IFFALSE 14056
// exit ;
14054: GO 14278
// x := GetX ( enemy ) ;
14056: LD_ADDR_VAR 0 4
14060: PUSH
14061: LD_VAR 0 10
14065: PPUSH
14066: CALL_OW 250
14070: ST_TO_ADDR
// y := GetY ( enemy ) ;
14071: LD_ADDR_VAR 0 5
14075: PUSH
14076: LD_VAR 0 10
14080: PPUSH
14081: CALL_OW 251
14085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14086: LD_ADDR_VAR 0 6
14090: PUSH
14091: LD_VAR 0 4
14095: PUSH
14096: LD_INT 1
14098: NEG
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 12
14107: PLUS
14108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14109: LD_ADDR_VAR 0 7
14113: PUSH
14114: LD_VAR 0 5
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: PPUSH
14123: LD_INT 1
14125: PPUSH
14126: CALL_OW 12
14130: PLUS
14131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14132: LD_VAR 0 6
14136: PPUSH
14137: LD_VAR 0 7
14141: PPUSH
14142: CALL_OW 488
14146: NOT
14147: IFFALSE 14169
// begin _x := x ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_VAR 0 4
14158: ST_TO_ADDR
// _y := y ;
14159: LD_ADDR_VAR 0 7
14163: PUSH
14164: LD_VAR 0 5
14168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_INT 1
14176: PPUSH
14177: LD_VAR 0 14
14181: PPUSH
14182: CALL_OW 12
14186: ST_TO_ADDR
// case i of 1 :
14187: LD_VAR 0 3
14191: PUSH
14192: LD_INT 1
14194: DOUBLE
14195: EQUAL
14196: IFTRUE 14200
14198: GO 14217
14200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14201: LD_VAR 0 1
14205: PPUSH
14206: LD_VAR 0 10
14210: PPUSH
14211: CALL_OW 115
14215: GO 14278
14217: LD_INT 2
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14247
14225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_VAR 0 6
14235: PPUSH
14236: LD_VAR 0 7
14240: PPUSH
14241: CALL_OW 153
14245: GO 14278
14247: LD_INT 3
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14277
14255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_VAR 0 6
14265: PPUSH
14266: LD_VAR 0 7
14270: PPUSH
14271: CALL_OW 154
14275: GO 14278
14277: POP
// end ;
14278: LD_VAR 0 2
14282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
14287: PPUSH
14288: PPUSH
14289: PPUSH
14290: PPUSH
// if not unit or not building then
14291: LD_VAR 0 1
14295: NOT
14296: PUSH
14297: LD_VAR 0 2
14301: NOT
14302: OR
14303: IFFALSE 14307
// exit ;
14305: GO 14465
// x := GetX ( building ) ;
14307: LD_ADDR_VAR 0 5
14311: PUSH
14312: LD_VAR 0 2
14316: PPUSH
14317: CALL_OW 250
14321: ST_TO_ADDR
// y := GetY ( building ) ;
14322: LD_ADDR_VAR 0 6
14326: PUSH
14327: LD_VAR 0 2
14331: PPUSH
14332: CALL_OW 251
14336: ST_TO_ADDR
// for i = 0 to 5 do
14337: LD_ADDR_VAR 0 4
14341: PUSH
14342: DOUBLE
14343: LD_INT 0
14345: DEC
14346: ST_TO_ADDR
14347: LD_INT 5
14349: PUSH
14350: FOR_TO
14351: IFFALSE 14463
// begin _x := ShiftX ( x , i , 3 ) ;
14353: LD_ADDR_VAR 0 7
14357: PUSH
14358: LD_VAR 0 5
14362: PPUSH
14363: LD_VAR 0 4
14367: PPUSH
14368: LD_INT 3
14370: PPUSH
14371: CALL_OW 272
14375: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14376: LD_ADDR_VAR 0 8
14380: PUSH
14381: LD_VAR 0 6
14385: PPUSH
14386: LD_VAR 0 4
14390: PPUSH
14391: LD_INT 3
14393: PPUSH
14394: CALL_OW 273
14398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_VAR 0 8
14408: PPUSH
14409: CALL_OW 488
14413: NOT
14414: IFFALSE 14418
// continue ;
14416: GO 14350
// if HexInfo ( _x , _y ) = 0 then
14418: LD_VAR 0 7
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: CALL_OW 428
14432: PUSH
14433: LD_INT 0
14435: EQUAL
14436: IFFALSE 14461
// begin ComMoveXY ( unit , _x , _y ) ;
14438: LD_VAR 0 1
14442: PPUSH
14443: LD_VAR 0 7
14447: PPUSH
14448: LD_VAR 0 8
14452: PPUSH
14453: CALL_OW 111
// exit ;
14457: POP
14458: POP
14459: GO 14465
// end ; end ;
14461: GO 14350
14463: POP
14464: POP
// end ;
14465: LD_VAR 0 3
14469: RET
// export function ScanBase ( side , base_area ) ; begin
14470: LD_INT 0
14472: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: LD_VAR 0 2
14482: PPUSH
14483: LD_INT 81
14485: PUSH
14486: LD_VAR 0 1
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 70
14499: ST_TO_ADDR
// end ;
14500: LD_VAR 0 3
14504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
// result := false ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// side := GetSide ( unit ) ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 255
14533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14534: LD_ADDR_VAR 0 4
14538: PUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 248
14548: ST_TO_ADDR
// case nat of 1 :
14549: LD_VAR 0 4
14553: PUSH
14554: LD_INT 1
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14573
14562: POP
// tech := tech_lassight ; 2 :
14563: LD_ADDR_VAR 0 5
14567: PUSH
14568: LD_INT 12
14570: ST_TO_ADDR
14571: GO 14612
14573: LD_INT 2
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14592
14581: POP
// tech := tech_mortar ; 3 :
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 41
14589: ST_TO_ADDR
14590: GO 14612
14592: LD_INT 3
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14611
14600: POP
// tech := tech_bazooka ; end ;
14601: LD_ADDR_VAR 0 5
14605: PUSH
14606: LD_INT 44
14608: ST_TO_ADDR
14609: GO 14612
14611: POP
// if Researched ( side , tech ) then
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_VAR 0 5
14621: PPUSH
14622: CALL_OW 325
14626: IFFALSE 14653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 8
14638: PUSH
14639: LD_INT 9
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_VAR 0 4
14651: ARRAY
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 2
14657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
// if not mines then
14663: LD_VAR 0 2
14667: NOT
14668: IFFALSE 14672
// exit ;
14670: GO 14816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_INT 81
14679: PUSH
14680: LD_VAR 0 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 3
14691: PUSH
14692: LD_INT 21
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: ST_TO_ADDR
// for i in mines do
14715: LD_ADDR_VAR 0 4
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: FOR_IN
14726: IFFALSE 14814
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14728: LD_VAR 0 4
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: LD_VAR 0 4
14741: PUSH
14742: LD_INT 2
14744: ARRAY
14745: PPUSH
14746: CALL_OW 458
14750: NOT
14751: IFFALSE 14755
// continue ;
14753: GO 14725
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 1
14762: ARRAY
14763: PPUSH
14764: LD_VAR 0 4
14768: PUSH
14769: LD_INT 2
14771: ARRAY
14772: PPUSH
14773: CALL_OW 428
14777: PUSH
14778: LD_VAR 0 5
14782: IN
14783: IFFALSE 14812
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14785: LD_VAR 0 4
14789: PUSH
14790: LD_INT 1
14792: ARRAY
14793: PPUSH
14794: LD_VAR 0 4
14798: PUSH
14799: LD_INT 2
14801: ARRAY
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 456
// end ;
14812: GO 14725
14814: POP
14815: POP
// end ;
14816: LD_VAR 0 3
14820: RET
// export function Count ( array ) ; var i ; begin
14821: LD_INT 0
14823: PPUSH
14824: PPUSH
// result := 0 ;
14825: LD_ADDR_VAR 0 2
14829: PUSH
14830: LD_INT 0
14832: ST_TO_ADDR
// for i in array do
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_VAR 0 1
14842: PUSH
14843: FOR_IN
14844: IFFALSE 14868
// if i then
14846: LD_VAR 0 3
14850: IFFALSE 14866
// result := result + 1 ;
14852: LD_ADDR_VAR 0 2
14856: PUSH
14857: LD_VAR 0 2
14861: PUSH
14862: LD_INT 1
14864: PLUS
14865: ST_TO_ADDR
14866: GO 14843
14868: POP
14869: POP
// end ;
14870: LD_VAR 0 2
14874: RET
// export function IsEmpty ( building ) ; begin
14875: LD_INT 0
14877: PPUSH
// if not building then
14878: LD_VAR 0 1
14882: NOT
14883: IFFALSE 14887
// exit ;
14885: GO 14930
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_VAR 0 1
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 255
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 58
14916: PUSH
14917: EMPTY
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 69
14928: IN
14929: ST_TO_ADDR
// end ;
14930: LD_VAR 0 2
14934: RET
// export function IsNotFull ( building ) ; begin
14935: LD_INT 0
14937: PPUSH
// if not building then
14938: LD_VAR 0 1
14942: NOT
14943: IFFALSE 14947
// exit ;
14945: GO 14966
// result := UnitsInside ( building ) < 6 ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 313
14961: PUSH
14962: LD_INT 6
14964: LESS
14965: ST_TO_ADDR
// end ;
14966: LD_VAR 0 2
14970: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14971: LD_INT 0
14973: PPUSH
14974: PPUSH
14975: PPUSH
14976: PPUSH
// tmp := [ ] ;
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: EMPTY
14983: ST_TO_ADDR
// list := [ ] ;
14984: LD_ADDR_VAR 0 5
14988: PUSH
14989: EMPTY
14990: ST_TO_ADDR
// for i = 16 to 25 do
14991: LD_ADDR_VAR 0 4
14995: PUSH
14996: DOUBLE
14997: LD_INT 16
14999: DEC
15000: ST_TO_ADDR
15001: LD_INT 25
15003: PUSH
15004: FOR_TO
15005: IFFALSE 15078
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: LD_VAR 0 3
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 255
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 91
15036: PUSH
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 30
15052: PUSH
15053: LD_VAR 0 4
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: ADD
15075: ST_TO_ADDR
15076: GO 15004
15078: POP
15079: POP
// for i = 1 to tmp do
15080: LD_ADDR_VAR 0 4
15084: PUSH
15085: DOUBLE
15086: LD_INT 1
15088: DEC
15089: ST_TO_ADDR
15090: LD_VAR 0 3
15094: PUSH
15095: FOR_TO
15096: IFFALSE 15184
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 5
15107: PUSH
15108: LD_VAR 0 3
15112: PUSH
15113: LD_VAR 0 4
15117: ARRAY
15118: PPUSH
15119: CALL_OW 266
15123: PUSH
15124: LD_VAR 0 3
15128: PUSH
15129: LD_VAR 0 4
15133: ARRAY
15134: PPUSH
15135: CALL_OW 250
15139: PUSH
15140: LD_VAR 0 3
15144: PUSH
15145: LD_VAR 0 4
15149: ARRAY
15150: PPUSH
15151: CALL_OW 251
15155: PUSH
15156: LD_VAR 0 3
15160: PUSH
15161: LD_VAR 0 4
15165: ARRAY
15166: PPUSH
15167: CALL_OW 254
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: EMPTY
15179: LIST
15180: ADD
15181: ST_TO_ADDR
15182: GO 15095
15184: POP
15185: POP
// result := list ;
15186: LD_ADDR_VAR 0 2
15190: PUSH
15191: LD_VAR 0 5
15195: ST_TO_ADDR
// end ;
15196: LD_VAR 0 2
15200: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
15208: PPUSH
15209: PPUSH
// if not factory then
15210: LD_VAR 0 1
15214: NOT
15215: IFFALSE 15219
// exit ;
15217: GO 15812
// if control = control_apeman then
15219: LD_VAR 0 4
15223: PUSH
15224: LD_INT 5
15226: EQUAL
15227: IFFALSE 15336
// begin tmp := UnitsInside ( factory ) ;
15229: LD_ADDR_VAR 0 8
15233: PUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 313
15243: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15244: LD_VAR 0 8
15248: PPUSH
15249: LD_INT 25
15251: PUSH
15252: LD_INT 12
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL_OW 72
15263: NOT
15264: IFFALSE 15274
// control := control_manual ;
15266: LD_ADDR_VAR 0 4
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15274: LD_ADDR_VAR 0 8
15278: PUSH
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL 14971 0 1
15288: ST_TO_ADDR
// if tmp then
15289: LD_VAR 0 8
15293: IFFALSE 15336
// begin for i in tmp do
15295: LD_ADDR_VAR 0 7
15299: PUSH
15300: LD_VAR 0 8
15304: PUSH
15305: FOR_IN
15306: IFFALSE 15334
// if i [ 1 ] = b_ext_radio then
15308: LD_VAR 0 7
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PUSH
15317: LD_INT 22
15319: EQUAL
15320: IFFALSE 15332
// begin control := control_remote ;
15322: LD_ADDR_VAR 0 4
15326: PUSH
15327: LD_INT 2
15329: ST_TO_ADDR
// break ;
15330: GO 15334
// end ;
15332: GO 15305
15334: POP
15335: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_VAR 0 2
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: LD_VAR 0 4
15355: PPUSH
15356: LD_VAR 0 5
15360: PPUSH
15361: CALL_OW 448
15365: IFFALSE 15400
// begin result := [ chassis , engine , control , weapon ] ;
15367: LD_ADDR_VAR 0 6
15371: PUSH
15372: LD_VAR 0 2
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 4
15386: PUSH
15387: LD_VAR 0 5
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: ST_TO_ADDR
// exit ;
15398: GO 15812
// end ; _chassis := AvailableChassisList ( factory ) ;
15400: LD_ADDR_VAR 0 9
15404: PUSH
15405: LD_VAR 0 1
15409: PPUSH
15410: CALL_OW 475
15414: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15415: LD_ADDR_VAR 0 11
15419: PUSH
15420: LD_VAR 0 1
15424: PPUSH
15425: CALL_OW 476
15429: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15430: LD_ADDR_VAR 0 12
15434: PUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 477
15444: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15445: LD_ADDR_VAR 0 10
15449: PUSH
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 478
15459: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15460: LD_VAR 0 9
15464: NOT
15465: PUSH
15466: LD_VAR 0 11
15470: NOT
15471: OR
15472: PUSH
15473: LD_VAR 0 12
15477: NOT
15478: OR
15479: PUSH
15480: LD_VAR 0 10
15484: NOT
15485: OR
15486: IFFALSE 15521
// begin result := [ chassis , engine , control , weapon ] ;
15488: LD_ADDR_VAR 0 6
15492: PUSH
15493: LD_VAR 0 2
15497: PUSH
15498: LD_VAR 0 3
15502: PUSH
15503: LD_VAR 0 4
15507: PUSH
15508: LD_VAR 0 5
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: ST_TO_ADDR
// exit ;
15519: GO 15812
// end ; if not chassis in _chassis then
15521: LD_VAR 0 2
15525: PUSH
15526: LD_VAR 0 9
15530: IN
15531: NOT
15532: IFFALSE 15558
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15534: LD_ADDR_VAR 0 2
15538: PUSH
15539: LD_VAR 0 9
15543: PUSH
15544: LD_INT 1
15546: PPUSH
15547: LD_VAR 0 9
15551: PPUSH
15552: CALL_OW 12
15556: ARRAY
15557: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15558: LD_VAR 0 2
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: CALL 15817 0 2
15572: NOT
15573: IFFALSE 15632
// repeat engine := _engine [ 1 ] ;
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_VAR 0 11
15584: PUSH
15585: LD_INT 1
15587: ARRAY
15588: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15589: LD_ADDR_VAR 0 11
15593: PUSH
15594: LD_VAR 0 11
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: CALL_OW 3
15606: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15607: LD_VAR 0 2
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: CALL 15817 0 2
15621: PUSH
15622: LD_VAR 0 11
15626: PUSH
15627: EMPTY
15628: EQUAL
15629: OR
15630: IFFALSE 15575
// if not control in _control then
15632: LD_VAR 0 4
15636: PUSH
15637: LD_VAR 0 12
15641: IN
15642: NOT
15643: IFFALSE 15669
// control := _control [ rand ( 1 , _control ) ] ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_VAR 0 12
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_VAR 0 12
15662: PPUSH
15663: CALL_OW 12
15667: ARRAY
15668: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15669: LD_VAR 0 2
15673: PPUSH
15674: LD_VAR 0 5
15678: PPUSH
15679: CALL 16037 0 2
15683: NOT
15684: IFFALSE 15743
// repeat weapon := _weapon [ 1 ] ;
15686: LD_ADDR_VAR 0 5
15690: PUSH
15691: LD_VAR 0 10
15695: PUSH
15696: LD_INT 1
15698: ARRAY
15699: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15700: LD_ADDR_VAR 0 10
15704: PUSH
15705: LD_VAR 0 10
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 3
15717: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15718: LD_VAR 0 2
15722: PPUSH
15723: LD_VAR 0 5
15727: PPUSH
15728: CALL 16037 0 2
15732: PUSH
15733: LD_VAR 0 10
15737: PUSH
15738: EMPTY
15739: EQUAL
15740: OR
15741: IFFALSE 15686
// result := [ ] ;
15743: LD_ADDR_VAR 0 6
15747: PUSH
15748: EMPTY
15749: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15750: LD_VAR 0 1
15754: PPUSH
15755: LD_VAR 0 2
15759: PPUSH
15760: LD_VAR 0 3
15764: PPUSH
15765: LD_VAR 0 4
15769: PPUSH
15770: LD_VAR 0 5
15774: PPUSH
15775: CALL_OW 448
15779: IFFALSE 15812
// result := [ chassis , engine , control , weapon ] ;
15781: LD_ADDR_VAR 0 6
15785: PUSH
15786: LD_VAR 0 2
15790: PUSH
15791: LD_VAR 0 3
15795: PUSH
15796: LD_VAR 0 4
15800: PUSH
15801: LD_VAR 0 5
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: ST_TO_ADDR
// end ;
15812: LD_VAR 0 6
15816: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15817: LD_INT 0
15819: PPUSH
// if not chassis or not engine then
15820: LD_VAR 0 1
15824: NOT
15825: PUSH
15826: LD_VAR 0 2
15830: NOT
15831: OR
15832: IFFALSE 15836
// exit ;
15834: GO 16032
// case engine of engine_solar :
15836: LD_VAR 0 2
15840: PUSH
15841: LD_INT 2
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15887
15849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15850: LD_ADDR_VAR 0 3
15854: PUSH
15855: LD_INT 11
15857: PUSH
15858: LD_INT 12
15860: PUSH
15861: LD_INT 13
15863: PUSH
15864: LD_INT 14
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: LD_INT 3
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: ST_TO_ADDR
15885: GO 16016
15887: LD_INT 1
15889: DOUBLE
15890: EQUAL
15891: IFTRUE 15895
15893: GO 15957
15895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15896: LD_ADDR_VAR 0 3
15900: PUSH
15901: LD_INT 11
15903: PUSH
15904: LD_INT 12
15906: PUSH
15907: LD_INT 13
15909: PUSH
15910: LD_INT 14
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 3
15921: PUSH
15922: LD_INT 4
15924: PUSH
15925: LD_INT 5
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 23
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_INT 24
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: ST_TO_ADDR
15955: GO 16016
15957: LD_INT 3
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 16015
15965: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 13
15973: PUSH
15974: LD_INT 14
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 4
15985: PUSH
15986: LD_INT 5
15988: PUSH
15989: LD_INT 21
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_INT 23
15997: PUSH
15998: LD_INT 24
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: ST_TO_ADDR
16013: GO 16016
16015: POP
// result := ( chassis in result ) ;
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: LD_VAR 0 1
16025: PUSH
16026: LD_VAR 0 3
16030: IN
16031: ST_TO_ADDR
// end ;
16032: LD_VAR 0 3
16036: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16037: LD_INT 0
16039: PPUSH
// if not chassis or not weapon then
16040: LD_VAR 0 1
16044: NOT
16045: PUSH
16046: LD_VAR 0 2
16050: NOT
16051: OR
16052: IFFALSE 16056
// exit ;
16054: GO 17118
// case weapon of us_machine_gun :
16056: LD_VAR 0 2
16060: PUSH
16061: LD_INT 2
16063: DOUBLE
16064: EQUAL
16065: IFTRUE 16069
16067: GO 16099
16069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16070: LD_ADDR_VAR 0 3
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: LD_INT 4
16086: PUSH
16087: LD_INT 5
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: ST_TO_ADDR
16097: GO 17102
16099: LD_INT 3
16101: DOUBLE
16102: EQUAL
16103: IFTRUE 16107
16105: GO 16137
16107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 3
16121: PUSH
16122: LD_INT 4
16124: PUSH
16125: LD_INT 5
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: ST_TO_ADDR
16135: GO 17102
16137: LD_INT 11
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16175
16145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16146: LD_ADDR_VAR 0 3
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 3
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: LD_INT 5
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
16173: GO 17102
16175: LD_INT 4
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16209
16183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: LD_INT 3
16194: PUSH
16195: LD_INT 4
16197: PUSH
16198: LD_INT 5
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: ST_TO_ADDR
16207: GO 17102
16209: LD_INT 5
16211: DOUBLE
16212: EQUAL
16213: IFTRUE 16217
16215: GO 16243
16217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: LD_INT 2
16225: PUSH
16226: LD_INT 3
16228: PUSH
16229: LD_INT 4
16231: PUSH
16232: LD_INT 5
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: ST_TO_ADDR
16241: GO 17102
16243: LD_INT 9
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16277
16251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: LD_INT 3
16262: PUSH
16263: LD_INT 4
16265: PUSH
16266: LD_INT 5
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: ST_TO_ADDR
16275: GO 17102
16277: LD_INT 7
16279: DOUBLE
16280: EQUAL
16281: IFTRUE 16285
16283: GO 16311
16285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16286: LD_ADDR_VAR 0 3
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: LD_INT 5
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: ST_TO_ADDR
16309: GO 17102
16311: LD_INT 12
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 16345
16319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: LD_INT 4
16333: PUSH
16334: LD_INT 5
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: ST_TO_ADDR
16343: GO 17102
16345: LD_INT 13
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16379
16353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: LD_INT 3
16364: PUSH
16365: LD_INT 4
16367: PUSH
16368: LD_INT 5
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: ST_TO_ADDR
16377: GO 17102
16379: LD_INT 14
16381: DOUBLE
16382: EQUAL
16383: IFTRUE 16387
16385: GO 16405
16387: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16388: LD_ADDR_VAR 0 3
16392: PUSH
16393: LD_INT 4
16395: PUSH
16396: LD_INT 5
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: ST_TO_ADDR
16403: GO 17102
16405: LD_INT 6
16407: DOUBLE
16408: EQUAL
16409: IFTRUE 16413
16411: GO 16431
16413: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 4
16421: PUSH
16422: LD_INT 5
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: ST_TO_ADDR
16429: GO 17102
16431: LD_INT 10
16433: DOUBLE
16434: EQUAL
16435: IFTRUE 16439
16437: GO 16457
16439: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: LD_INT 4
16447: PUSH
16448: LD_INT 5
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: ST_TO_ADDR
16455: GO 17102
16457: LD_INT 22
16459: DOUBLE
16460: EQUAL
16461: IFTRUE 16465
16463: GO 16491
16465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: LD_INT 11
16473: PUSH
16474: LD_INT 12
16476: PUSH
16477: LD_INT 13
16479: PUSH
16480: LD_INT 14
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: ST_TO_ADDR
16489: GO 17102
16491: LD_INT 23
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16525
16499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_INT 11
16507: PUSH
16508: LD_INT 12
16510: PUSH
16511: LD_INT 13
16513: PUSH
16514: LD_INT 14
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
16523: GO 17102
16525: LD_INT 24
16527: DOUBLE
16528: EQUAL
16529: IFTRUE 16533
16531: GO 16559
16533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16534: LD_ADDR_VAR 0 3
16538: PUSH
16539: LD_INT 11
16541: PUSH
16542: LD_INT 12
16544: PUSH
16545: LD_INT 13
16547: PUSH
16548: LD_INT 14
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: ST_TO_ADDR
16557: GO 17102
16559: LD_INT 30
16561: DOUBLE
16562: EQUAL
16563: IFTRUE 16567
16565: GO 16593
16567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_INT 11
16575: PUSH
16576: LD_INT 12
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 14
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: ST_TO_ADDR
16591: GO 17102
16593: LD_INT 25
16595: DOUBLE
16596: EQUAL
16597: IFTRUE 16601
16599: GO 16619
16601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16602: LD_ADDR_VAR 0 3
16606: PUSH
16607: LD_INT 13
16609: PUSH
16610: LD_INT 14
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: ST_TO_ADDR
16617: GO 17102
16619: LD_INT 27
16621: DOUBLE
16622: EQUAL
16623: IFTRUE 16627
16625: GO 16645
16627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: LD_INT 13
16635: PUSH
16636: LD_INT 14
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: ST_TO_ADDR
16643: GO 17102
16645: LD_EXP 100
16649: DOUBLE
16650: EQUAL
16651: IFTRUE 16655
16653: GO 16681
16655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_INT 11
16663: PUSH
16664: LD_INT 12
16666: PUSH
16667: LD_INT 13
16669: PUSH
16670: LD_INT 14
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: ST_TO_ADDR
16679: GO 17102
16681: LD_INT 28
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16707
16689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_INT 13
16697: PUSH
16698: LD_INT 14
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: ST_TO_ADDR
16705: GO 17102
16707: LD_INT 29
16709: DOUBLE
16710: EQUAL
16711: IFTRUE 16715
16713: GO 16733
16715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16716: LD_ADDR_VAR 0 3
16720: PUSH
16721: LD_INT 13
16723: PUSH
16724: LD_INT 14
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: ST_TO_ADDR
16731: GO 17102
16733: LD_INT 31
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16759
16741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_INT 13
16749: PUSH
16750: LD_INT 14
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: ST_TO_ADDR
16757: GO 17102
16759: LD_INT 26
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16785
16767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16768: LD_ADDR_VAR 0 3
16772: PUSH
16773: LD_INT 13
16775: PUSH
16776: LD_INT 14
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: ST_TO_ADDR
16783: GO 17102
16785: LD_INT 42
16787: DOUBLE
16788: EQUAL
16789: IFTRUE 16793
16791: GO 16819
16793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16794: LD_ADDR_VAR 0 3
16798: PUSH
16799: LD_INT 21
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: LD_INT 24
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: ST_TO_ADDR
16817: GO 17102
16819: LD_INT 43
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16853
16827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16828: LD_ADDR_VAR 0 3
16832: PUSH
16833: LD_INT 21
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_INT 23
16841: PUSH
16842: LD_INT 24
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: ST_TO_ADDR
16851: GO 17102
16853: LD_INT 44
16855: DOUBLE
16856: EQUAL
16857: IFTRUE 16861
16859: GO 16887
16861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 22
16872: PUSH
16873: LD_INT 23
16875: PUSH
16876: LD_INT 24
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
16885: GO 17102
16887: LD_INT 45
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16921
16895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16896: LD_ADDR_VAR 0 3
16900: PUSH
16901: LD_INT 21
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 23
16909: PUSH
16910: LD_INT 24
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: ST_TO_ADDR
16919: GO 17102
16921: LD_INT 49
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16955
16929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16930: LD_ADDR_VAR 0 3
16934: PUSH
16935: LD_INT 21
16937: PUSH
16938: LD_INT 22
16940: PUSH
16941: LD_INT 23
16943: PUSH
16944: LD_INT 24
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: ST_TO_ADDR
16953: GO 17102
16955: LD_INT 51
16957: DOUBLE
16958: EQUAL
16959: IFTRUE 16963
16961: GO 16989
16963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 22
16974: PUSH
16975: LD_INT 23
16977: PUSH
16978: LD_INT 24
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: ST_TO_ADDR
16987: GO 17102
16989: LD_INT 52
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17023
16997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16998: LD_ADDR_VAR 0 3
17002: PUSH
17003: LD_INT 21
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_INT 23
17011: PUSH
17012: LD_INT 24
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: ST_TO_ADDR
17021: GO 17102
17023: LD_INT 53
17025: DOUBLE
17026: EQUAL
17027: IFTRUE 17031
17029: GO 17049
17031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 23
17039: PUSH
17040: LD_INT 24
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: ST_TO_ADDR
17047: GO 17102
17049: LD_INT 46
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17075
17057: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17058: LD_ADDR_VAR 0 3
17062: PUSH
17063: LD_INT 23
17065: PUSH
17066: LD_INT 24
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: ST_TO_ADDR
17073: GO 17102
17075: LD_INT 47
17077: DOUBLE
17078: EQUAL
17079: IFTRUE 17083
17081: GO 17101
17083: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17084: LD_ADDR_VAR 0 3
17088: PUSH
17089: LD_INT 23
17091: PUSH
17092: LD_INT 24
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: ST_TO_ADDR
17099: GO 17102
17101: POP
// result := ( chassis in result ) ;
17102: LD_ADDR_VAR 0 3
17106: PUSH
17107: LD_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: IN
17117: ST_TO_ADDR
// end ;
17118: LD_VAR 0 3
17122: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17123: LD_INT 0
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
// result := array ;
17132: LD_ADDR_VAR 0 5
17136: PUSH
17137: LD_VAR 0 1
17141: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17142: LD_VAR 0 1
17146: NOT
17147: PUSH
17148: LD_VAR 0 2
17152: NOT
17153: OR
17154: PUSH
17155: LD_VAR 0 3
17159: NOT
17160: OR
17161: PUSH
17162: LD_VAR 0 2
17166: PUSH
17167: LD_VAR 0 1
17171: GREATER
17172: OR
17173: PUSH
17174: LD_VAR 0 3
17178: PUSH
17179: LD_VAR 0 1
17183: GREATER
17184: OR
17185: IFFALSE 17189
// exit ;
17187: GO 17485
// if direction then
17189: LD_VAR 0 4
17193: IFFALSE 17257
// begin d := 1 ;
17195: LD_ADDR_VAR 0 9
17199: PUSH
17200: LD_INT 1
17202: ST_TO_ADDR
// if i_from > i_to then
17203: LD_VAR 0 2
17207: PUSH
17208: LD_VAR 0 3
17212: GREATER
17213: IFFALSE 17239
// length := ( array - i_from ) + i_to else
17215: LD_ADDR_VAR 0 11
17219: PUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_VAR 0 2
17229: MINUS
17230: PUSH
17231: LD_VAR 0 3
17235: PLUS
17236: ST_TO_ADDR
17237: GO 17255
// length := i_to - i_from ;
17239: LD_ADDR_VAR 0 11
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: LD_VAR 0 2
17253: MINUS
17254: ST_TO_ADDR
// end else
17255: GO 17318
// begin d := - 1 ;
17257: LD_ADDR_VAR 0 9
17261: PUSH
17262: LD_INT 1
17264: NEG
17265: ST_TO_ADDR
// if i_from > i_to then
17266: LD_VAR 0 2
17270: PUSH
17271: LD_VAR 0 3
17275: GREATER
17276: IFFALSE 17296
// length := i_from - i_to else
17278: LD_ADDR_VAR 0 11
17282: PUSH
17283: LD_VAR 0 2
17287: PUSH
17288: LD_VAR 0 3
17292: MINUS
17293: ST_TO_ADDR
17294: GO 17318
// length := ( array - i_to ) + i_from ;
17296: LD_ADDR_VAR 0 11
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_VAR 0 3
17310: MINUS
17311: PUSH
17312: LD_VAR 0 2
17316: PLUS
17317: ST_TO_ADDR
// end ; if not length then
17318: LD_VAR 0 11
17322: NOT
17323: IFFALSE 17327
// exit ;
17325: GO 17485
// tmp := array ;
17327: LD_ADDR_VAR 0 10
17331: PUSH
17332: LD_VAR 0 1
17336: ST_TO_ADDR
// for i = 1 to length do
17337: LD_ADDR_VAR 0 6
17341: PUSH
17342: DOUBLE
17343: LD_INT 1
17345: DEC
17346: ST_TO_ADDR
17347: LD_VAR 0 11
17351: PUSH
17352: FOR_TO
17353: IFFALSE 17473
// begin for j = 1 to array do
17355: LD_ADDR_VAR 0 7
17359: PUSH
17360: DOUBLE
17361: LD_INT 1
17363: DEC
17364: ST_TO_ADDR
17365: LD_VAR 0 1
17369: PUSH
17370: FOR_TO
17371: IFFALSE 17459
// begin k := j + d ;
17373: LD_ADDR_VAR 0 8
17377: PUSH
17378: LD_VAR 0 7
17382: PUSH
17383: LD_VAR 0 9
17387: PLUS
17388: ST_TO_ADDR
// if k > array then
17389: LD_VAR 0 8
17393: PUSH
17394: LD_VAR 0 1
17398: GREATER
17399: IFFALSE 17409
// k := 1 ;
17401: LD_ADDR_VAR 0 8
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// if not k then
17409: LD_VAR 0 8
17413: NOT
17414: IFFALSE 17426
// k := array ;
17416: LD_ADDR_VAR 0 8
17420: PUSH
17421: LD_VAR 0 1
17425: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17426: LD_ADDR_VAR 0 10
17430: PUSH
17431: LD_VAR 0 10
17435: PPUSH
17436: LD_VAR 0 8
17440: PPUSH
17441: LD_VAR 0 1
17445: PUSH
17446: LD_VAR 0 7
17450: ARRAY
17451: PPUSH
17452: CALL_OW 1
17456: ST_TO_ADDR
// end ;
17457: GO 17370
17459: POP
17460: POP
// array := tmp ;
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: LD_VAR 0 10
17470: ST_TO_ADDR
// end ;
17471: GO 17352
17473: POP
17474: POP
// result := array ;
17475: LD_ADDR_VAR 0 5
17479: PUSH
17480: LD_VAR 0 1
17484: ST_TO_ADDR
// end ;
17485: LD_VAR 0 5
17489: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// result := 0 ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// if not array or not value in array then
17502: LD_VAR 0 1
17506: NOT
17507: PUSH
17508: LD_VAR 0 2
17512: PUSH
17513: LD_VAR 0 1
17517: IN
17518: NOT
17519: OR
17520: IFFALSE 17524
// exit ;
17522: GO 17578
// for i = 1 to array do
17524: LD_ADDR_VAR 0 4
17528: PUSH
17529: DOUBLE
17530: LD_INT 1
17532: DEC
17533: ST_TO_ADDR
17534: LD_VAR 0 1
17538: PUSH
17539: FOR_TO
17540: IFFALSE 17576
// if value = array [ i ] then
17542: LD_VAR 0 2
17546: PUSH
17547: LD_VAR 0 1
17551: PUSH
17552: LD_VAR 0 4
17556: ARRAY
17557: EQUAL
17558: IFFALSE 17574
// begin result := i ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 4
17569: ST_TO_ADDR
// exit ;
17570: POP
17571: POP
17572: GO 17578
// end ;
17574: GO 17539
17576: POP
17577: POP
// end ;
17578: LD_VAR 0 3
17582: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17583: LD_INT 0
17585: PPUSH
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17626: LD_ADDR_OWVAR 41
17630: PUSH
17631: LD_VAR 0 5
17635: ST_TO_ADDR
// end ;
17636: LD_VAR 0 6
17640: RET
// export function WantPlant ( unit ) ; var task ; begin
17641: LD_INT 0
17643: PPUSH
17644: PPUSH
// result := false ;
17645: LD_ADDR_VAR 0 2
17649: PUSH
17650: LD_INT 0
17652: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 437
17667: ST_TO_ADDR
// if task then
17668: LD_VAR 0 3
17672: IFFALSE 17700
// if task [ 1 ] [ 1 ] = p then
17674: LD_VAR 0 3
17678: PUSH
17679: LD_INT 1
17681: ARRAY
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PUSH
17687: LD_STRING p
17689: EQUAL
17690: IFFALSE 17700
// result := true ;
17692: LD_ADDR_VAR 0 2
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// end ;
17700: LD_VAR 0 2
17704: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17705: LD_INT 0
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
// if pos < 1 then
17711: LD_VAR 0 2
17715: PUSH
17716: LD_INT 1
17718: LESS
17719: IFFALSE 17723
// exit ;
17721: GO 18026
// if pos = 1 then
17723: LD_VAR 0 2
17727: PUSH
17728: LD_INT 1
17730: EQUAL
17731: IFFALSE 17764
// result := Replace ( arr , pos [ 1 ] , value ) else
17733: LD_ADDR_VAR 0 4
17737: PUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 1
17750: ARRAY
17751: PPUSH
17752: LD_VAR 0 3
17756: PPUSH
17757: CALL_OW 1
17761: ST_TO_ADDR
17762: GO 18026
// begin tmp := arr ;
17764: LD_ADDR_VAR 0 6
17768: PUSH
17769: LD_VAR 0 1
17773: ST_TO_ADDR
// s_arr := [ tmp ] ;
17774: LD_ADDR_VAR 0 7
17778: PUSH
17779: LD_VAR 0 6
17783: PUSH
17784: EMPTY
17785: LIST
17786: ST_TO_ADDR
// for i = 1 to pos - 1 do
17787: LD_ADDR_VAR 0 5
17791: PUSH
17792: DOUBLE
17793: LD_INT 1
17795: DEC
17796: ST_TO_ADDR
17797: LD_VAR 0 2
17801: PUSH
17802: LD_INT 1
17804: MINUS
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17852
// begin tmp := tmp [ pos [ i ] ] ;
17809: LD_ADDR_VAR 0 6
17813: PUSH
17814: LD_VAR 0 6
17818: PUSH
17819: LD_VAR 0 2
17823: PUSH
17824: LD_VAR 0 5
17828: ARRAY
17829: ARRAY
17830: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17831: LD_ADDR_VAR 0 7
17835: PUSH
17836: LD_VAR 0 7
17840: PUSH
17841: LD_VAR 0 6
17845: PUSH
17846: EMPTY
17847: LIST
17848: ADD
17849: ST_TO_ADDR
// end ;
17850: GO 17806
17852: POP
17853: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17854: LD_ADDR_VAR 0 6
17858: PUSH
17859: LD_VAR 0 6
17863: PPUSH
17864: LD_VAR 0 2
17868: PUSH
17869: LD_VAR 0 2
17873: ARRAY
17874: PPUSH
17875: LD_VAR 0 3
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17885: LD_ADDR_VAR 0 7
17889: PUSH
17890: LD_VAR 0 7
17894: PPUSH
17895: LD_VAR 0 7
17899: PPUSH
17900: LD_VAR 0 6
17904: PPUSH
17905: CALL_OW 1
17909: ST_TO_ADDR
// for i = s_arr downto 2 do
17910: LD_ADDR_VAR 0 5
17914: PUSH
17915: DOUBLE
17916: LD_VAR 0 7
17920: INC
17921: ST_TO_ADDR
17922: LD_INT 2
17924: PUSH
17925: FOR_DOWNTO
17926: IFFALSE 18010
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17928: LD_ADDR_VAR 0 6
17932: PUSH
17933: LD_VAR 0 7
17937: PUSH
17938: LD_VAR 0 5
17942: PUSH
17943: LD_INT 1
17945: MINUS
17946: ARRAY
17947: PPUSH
17948: LD_VAR 0 2
17952: PUSH
17953: LD_VAR 0 5
17957: PUSH
17958: LD_INT 1
17960: MINUS
17961: ARRAY
17962: PPUSH
17963: LD_VAR 0 7
17967: PUSH
17968: LD_VAR 0 5
17972: ARRAY
17973: PPUSH
17974: CALL_OW 1
17978: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17979: LD_ADDR_VAR 0 7
17983: PUSH
17984: LD_VAR 0 7
17988: PPUSH
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 1
17996: MINUS
17997: PPUSH
17998: LD_VAR 0 6
18002: PPUSH
18003: CALL_OW 1
18007: ST_TO_ADDR
// end ;
18008: GO 17925
18010: POP
18011: POP
// result := s_arr [ 1 ] ;
18012: LD_ADDR_VAR 0 4
18016: PUSH
18017: LD_VAR 0 7
18021: PUSH
18022: LD_INT 1
18024: ARRAY
18025: ST_TO_ADDR
// end ; end ;
18026: LD_VAR 0 4
18030: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18031: LD_INT 0
18033: PPUSH
18034: PPUSH
// if not list then
18035: LD_VAR 0 1
18039: NOT
18040: IFFALSE 18044
// exit ;
18042: GO 18135
// i := list [ pos1 ] ;
18044: LD_ADDR_VAR 0 5
18048: PUSH
18049: LD_VAR 0 1
18053: PUSH
18054: LD_VAR 0 2
18058: ARRAY
18059: ST_TO_ADDR
// if not i then
18060: LD_VAR 0 5
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18135
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18069: LD_ADDR_VAR 0 1
18073: PUSH
18074: LD_VAR 0 1
18078: PPUSH
18079: LD_VAR 0 2
18083: PPUSH
18084: LD_VAR 0 1
18088: PUSH
18089: LD_VAR 0 3
18093: ARRAY
18094: PPUSH
18095: CALL_OW 1
18099: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_VAR 0 5
18119: PPUSH
18120: CALL_OW 1
18124: ST_TO_ADDR
// result := list ;
18125: LD_ADDR_VAR 0 4
18129: PUSH
18130: LD_VAR 0 1
18134: ST_TO_ADDR
// end ;
18135: LD_VAR 0 4
18139: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18140: LD_INT 0
18142: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18143: LD_ADDR_VAR 0 5
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 250
18157: PPUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 251
18167: PPUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_VAR 0 4
18182: PPUSH
18183: CALL 18193 0 5
18187: ST_TO_ADDR
// end ;
18188: LD_VAR 0 5
18192: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18193: LD_INT 0
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
// if not list then
18199: LD_VAR 0 3
18203: NOT
18204: IFFALSE 18208
// exit ;
18206: GO 18596
// result := [ ] ;
18208: LD_ADDR_VAR 0 6
18212: PUSH
18213: EMPTY
18214: ST_TO_ADDR
// for i in list do
18215: LD_ADDR_VAR 0 7
18219: PUSH
18220: LD_VAR 0 3
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18428
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18228: LD_ADDR_VAR 0 9
18232: PUSH
18233: LD_VAR 0 7
18237: PPUSH
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_VAR 0 2
18247: PPUSH
18248: CALL_OW 297
18252: ST_TO_ADDR
// if not result then
18253: LD_VAR 0 6
18257: NOT
18258: IFFALSE 18284
// result := [ [ i , tmp ] ] else
18260: LD_ADDR_VAR 0 6
18264: PUSH
18265: LD_VAR 0 7
18269: PUSH
18270: LD_VAR 0 9
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: EMPTY
18280: LIST
18281: ST_TO_ADDR
18282: GO 18426
// begin if result [ result ] [ 2 ] < tmp then
18284: LD_VAR 0 6
18288: PUSH
18289: LD_VAR 0 6
18293: ARRAY
18294: PUSH
18295: LD_INT 2
18297: ARRAY
18298: PUSH
18299: LD_VAR 0 9
18303: LESS
18304: IFFALSE 18346
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18306: LD_ADDR_VAR 0 6
18310: PUSH
18311: LD_VAR 0 6
18315: PPUSH
18316: LD_VAR 0 6
18320: PUSH
18321: LD_INT 1
18323: PLUS
18324: PPUSH
18325: LD_VAR 0 7
18329: PUSH
18330: LD_VAR 0 9
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 2
18343: ST_TO_ADDR
18344: GO 18426
// for j = 1 to result do
18346: LD_ADDR_VAR 0 8
18350: PUSH
18351: DOUBLE
18352: LD_INT 1
18354: DEC
18355: ST_TO_ADDR
18356: LD_VAR 0 6
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18424
// begin if tmp < result [ j ] [ 2 ] then
18364: LD_VAR 0 9
18368: PUSH
18369: LD_VAR 0 6
18373: PUSH
18374: LD_VAR 0 8
18378: ARRAY
18379: PUSH
18380: LD_INT 2
18382: ARRAY
18383: LESS
18384: IFFALSE 18422
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18386: LD_ADDR_VAR 0 6
18390: PUSH
18391: LD_VAR 0 6
18395: PPUSH
18396: LD_VAR 0 8
18400: PPUSH
18401: LD_VAR 0 7
18405: PUSH
18406: LD_VAR 0 9
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 2
18419: ST_TO_ADDR
// break ;
18420: GO 18424
// end ; end ;
18422: GO 18361
18424: POP
18425: POP
// end ; end ;
18426: GO 18225
18428: POP
18429: POP
// if result and not asc then
18430: LD_VAR 0 6
18434: PUSH
18435: LD_VAR 0 4
18439: NOT
18440: AND
18441: IFFALSE 18516
// begin tmp := result ;
18443: LD_ADDR_VAR 0 9
18447: PUSH
18448: LD_VAR 0 6
18452: ST_TO_ADDR
// for i = tmp downto 1 do
18453: LD_ADDR_VAR 0 7
18457: PUSH
18458: DOUBLE
18459: LD_VAR 0 9
18463: INC
18464: ST_TO_ADDR
18465: LD_INT 1
18467: PUSH
18468: FOR_DOWNTO
18469: IFFALSE 18514
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18471: LD_ADDR_VAR 0 6
18475: PUSH
18476: LD_VAR 0 6
18480: PPUSH
18481: LD_VAR 0 9
18485: PUSH
18486: LD_VAR 0 7
18490: MINUS
18491: PUSH
18492: LD_INT 1
18494: PLUS
18495: PPUSH
18496: LD_VAR 0 9
18500: PUSH
18501: LD_VAR 0 7
18505: ARRAY
18506: PPUSH
18507: CALL_OW 1
18511: ST_TO_ADDR
18512: GO 18468
18514: POP
18515: POP
// end ; tmp := [ ] ;
18516: LD_ADDR_VAR 0 9
18520: PUSH
18521: EMPTY
18522: ST_TO_ADDR
// if mode then
18523: LD_VAR 0 5
18527: IFFALSE 18596
// begin for i = 1 to result do
18529: LD_ADDR_VAR 0 7
18533: PUSH
18534: DOUBLE
18535: LD_INT 1
18537: DEC
18538: ST_TO_ADDR
18539: LD_VAR 0 6
18543: PUSH
18544: FOR_TO
18545: IFFALSE 18584
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18547: LD_ADDR_VAR 0 9
18551: PUSH
18552: LD_VAR 0 9
18556: PPUSH
18557: LD_VAR 0 7
18561: PPUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_VAR 0 7
18571: ARRAY
18572: PUSH
18573: LD_INT 1
18575: ARRAY
18576: PPUSH
18577: CALL_OW 1
18581: ST_TO_ADDR
18582: GO 18544
18584: POP
18585: POP
// result := tmp ;
18586: LD_ADDR_VAR 0 6
18590: PUSH
18591: LD_VAR 0 9
18595: ST_TO_ADDR
// end ; end ;
18596: LD_VAR 0 6
18600: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18609: LD_ADDR_VAR 0 5
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// if not x or not y then
18631: LD_VAR 0 2
18635: NOT
18636: PUSH
18637: LD_VAR 0 3
18641: NOT
18642: OR
18643: IFFALSE 18647
// exit ;
18645: GO 20299
// if not range then
18647: LD_VAR 0 4
18651: NOT
18652: IFFALSE 18662
// range := 10 ;
18654: LD_ADDR_VAR 0 4
18658: PUSH
18659: LD_INT 10
18661: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18662: LD_ADDR_VAR 0 8
18666: PUSH
18667: LD_INT 81
18669: PUSH
18670: LD_VAR 0 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 92
18681: PUSH
18682: LD_VAR 0 2
18686: PUSH
18687: LD_VAR 0 3
18691: PUSH
18692: LD_VAR 0 4
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 3
18705: PUSH
18706: LD_INT 21
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: PPUSH
18725: CALL_OW 69
18729: ST_TO_ADDR
// if not tmp then
18730: LD_VAR 0 8
18734: NOT
18735: IFFALSE 18739
// exit ;
18737: GO 20299
// for i in tmp do
18739: LD_ADDR_VAR 0 6
18743: PUSH
18744: LD_VAR 0 8
18748: PUSH
18749: FOR_IN
18750: IFFALSE 20274
// begin points := [ 0 , 0 , 0 ] ;
18752: LD_ADDR_VAR 0 9
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 0
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: ST_TO_ADDR
// bpoints := 1 ;
18771: LD_ADDR_VAR 0 10
18775: PUSH
18776: LD_INT 1
18778: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18779: LD_VAR 0 6
18783: PPUSH
18784: CALL_OW 247
18788: PUSH
18789: LD_INT 1
18791: DOUBLE
18792: EQUAL
18793: IFTRUE 18797
18795: GO 19375
18797: POP
// begin if GetClass ( i ) = 1 then
18798: LD_VAR 0 6
18802: PPUSH
18803: CALL_OW 257
18807: PUSH
18808: LD_INT 1
18810: EQUAL
18811: IFFALSE 18832
// points := [ 10 , 5 , 3 ] ;
18813: LD_ADDR_VAR 0 9
18817: PUSH
18818: LD_INT 10
18820: PUSH
18821: LD_INT 5
18823: PUSH
18824: LD_INT 3
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18832: LD_VAR 0 6
18836: PPUSH
18837: CALL_OW 257
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: LD_INT 4
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: IN
18856: IFFALSE 18877
// points := [ 3 , 2 , 1 ] ;
18858: LD_ADDR_VAR 0 9
18862: PUSH
18863: LD_INT 3
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18877: LD_VAR 0 6
18881: PPUSH
18882: CALL_OW 257
18886: PUSH
18887: LD_INT 5
18889: EQUAL
18890: IFFALSE 18911
// points := [ 130 , 5 , 2 ] ;
18892: LD_ADDR_VAR 0 9
18896: PUSH
18897: LD_INT 130
18899: PUSH
18900: LD_INT 5
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: LIST
18910: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18911: LD_VAR 0 6
18915: PPUSH
18916: CALL_OW 257
18920: PUSH
18921: LD_INT 8
18923: EQUAL
18924: IFFALSE 18945
// points := [ 35 , 35 , 30 ] ;
18926: LD_ADDR_VAR 0 9
18930: PUSH
18931: LD_INT 35
18933: PUSH
18934: LD_INT 35
18936: PUSH
18937: LD_INT 30
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: LIST
18944: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18945: LD_VAR 0 6
18949: PPUSH
18950: CALL_OW 257
18954: PUSH
18955: LD_INT 9
18957: EQUAL
18958: IFFALSE 18979
// points := [ 20 , 55 , 40 ] ;
18960: LD_ADDR_VAR 0 9
18964: PUSH
18965: LD_INT 20
18967: PUSH
18968: LD_INT 55
18970: PUSH
18971: LD_INT 40
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18979: LD_VAR 0 6
18983: PPUSH
18984: CALL_OW 257
18988: PUSH
18989: LD_INT 12
18991: PUSH
18992: LD_INT 16
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: IN
18999: IFFALSE 19020
// points := [ 5 , 3 , 2 ] ;
19001: LD_ADDR_VAR 0 9
19005: PUSH
19006: LD_INT 5
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: LD_INT 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19020: LD_VAR 0 6
19024: PPUSH
19025: CALL_OW 257
19029: PUSH
19030: LD_INT 17
19032: EQUAL
19033: IFFALSE 19054
// points := [ 100 , 50 , 75 ] ;
19035: LD_ADDR_VAR 0 9
19039: PUSH
19040: LD_INT 100
19042: PUSH
19043: LD_INT 50
19045: PUSH
19046: LD_INT 75
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19054: LD_VAR 0 6
19058: PPUSH
19059: CALL_OW 257
19063: PUSH
19064: LD_INT 15
19066: EQUAL
19067: IFFALSE 19088
// points := [ 10 , 5 , 3 ] ;
19069: LD_ADDR_VAR 0 9
19073: PUSH
19074: LD_INT 10
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19088: LD_VAR 0 6
19092: PPUSH
19093: CALL_OW 257
19097: PUSH
19098: LD_INT 14
19100: EQUAL
19101: IFFALSE 19122
// points := [ 10 , 0 , 0 ] ;
19103: LD_ADDR_VAR 0 9
19107: PUSH
19108: LD_INT 10
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19122: LD_VAR 0 6
19126: PPUSH
19127: CALL_OW 257
19131: PUSH
19132: LD_INT 11
19134: EQUAL
19135: IFFALSE 19156
// points := [ 30 , 10 , 5 ] ;
19137: LD_ADDR_VAR 0 9
19141: PUSH
19142: LD_INT 30
19144: PUSH
19145: LD_INT 10
19147: PUSH
19148: LD_INT 5
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19156: LD_VAR 0 1
19160: PPUSH
19161: LD_INT 5
19163: PPUSH
19164: CALL_OW 321
19168: PUSH
19169: LD_INT 2
19171: EQUAL
19172: IFFALSE 19189
// bpoints := bpoints * 1.8 ;
19174: LD_ADDR_VAR 0 10
19178: PUSH
19179: LD_VAR 0 10
19183: PUSH
19184: LD_REAL  1.80000000000000E+0000
19187: MUL
19188: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19189: LD_VAR 0 6
19193: PPUSH
19194: CALL_OW 257
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: IN
19217: PUSH
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_INT 51
19225: PPUSH
19226: CALL_OW 321
19230: PUSH
19231: LD_INT 2
19233: EQUAL
19234: AND
19235: IFFALSE 19252
// bpoints := bpoints * 1.2 ;
19237: LD_ADDR_VAR 0 10
19241: PUSH
19242: LD_VAR 0 10
19246: PUSH
19247: LD_REAL  1.20000000000000E+0000
19250: MUL
19251: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19252: LD_VAR 0 6
19256: PPUSH
19257: CALL_OW 257
19261: PUSH
19262: LD_INT 5
19264: PUSH
19265: LD_INT 7
19267: PUSH
19268: LD_INT 9
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: IN
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: LD_INT 52
19284: PPUSH
19285: CALL_OW 321
19289: PUSH
19290: LD_INT 2
19292: EQUAL
19293: AND
19294: IFFALSE 19311
// bpoints := bpoints * 1.5 ;
19296: LD_ADDR_VAR 0 10
19300: PUSH
19301: LD_VAR 0 10
19305: PUSH
19306: LD_REAL  1.50000000000000E+0000
19309: MUL
19310: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19311: LD_VAR 0 1
19315: PPUSH
19316: LD_INT 66
19318: PPUSH
19319: CALL_OW 321
19323: PUSH
19324: LD_INT 2
19326: EQUAL
19327: IFFALSE 19344
// bpoints := bpoints * 1.1 ;
19329: LD_ADDR_VAR 0 10
19333: PUSH
19334: LD_VAR 0 10
19338: PUSH
19339: LD_REAL  1.10000000000000E+0000
19342: MUL
19343: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19344: LD_ADDR_VAR 0 10
19348: PUSH
19349: LD_VAR 0 10
19353: PUSH
19354: LD_VAR 0 6
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 259
19366: PUSH
19367: LD_REAL  1.15000000000000E+0000
19370: MUL
19371: MUL
19372: ST_TO_ADDR
// end ; unit_vehicle :
19373: GO 20203
19375: LD_INT 2
19377: DOUBLE
19378: EQUAL
19379: IFTRUE 19383
19381: GO 20191
19383: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19384: LD_VAR 0 6
19388: PPUSH
19389: CALL_OW 264
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: LD_INT 42
19399: PUSH
19400: LD_INT 24
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: IN
19408: IFFALSE 19429
// points := [ 25 , 5 , 3 ] ;
19410: LD_ADDR_VAR 0 9
19414: PUSH
19415: LD_INT 25
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: LD_INT 3
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19429: LD_VAR 0 6
19433: PPUSH
19434: CALL_OW 264
19438: PUSH
19439: LD_INT 4
19441: PUSH
19442: LD_INT 43
19444: PUSH
19445: LD_INT 25
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: IN
19453: IFFALSE 19474
// points := [ 40 , 15 , 5 ] ;
19455: LD_ADDR_VAR 0 9
19459: PUSH
19460: LD_INT 40
19462: PUSH
19463: LD_INT 15
19465: PUSH
19466: LD_INT 5
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19474: LD_VAR 0 6
19478: PPUSH
19479: CALL_OW 264
19483: PUSH
19484: LD_INT 3
19486: PUSH
19487: LD_INT 23
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: IN
19494: IFFALSE 19515
// points := [ 7 , 25 , 8 ] ;
19496: LD_ADDR_VAR 0 9
19500: PUSH
19501: LD_INT 7
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 8
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19515: LD_VAR 0 6
19519: PPUSH
19520: CALL_OW 264
19524: PUSH
19525: LD_INT 5
19527: PUSH
19528: LD_INT 27
19530: PUSH
19531: LD_INT 44
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: IN
19539: IFFALSE 19560
// points := [ 14 , 50 , 16 ] ;
19541: LD_ADDR_VAR 0 9
19545: PUSH
19546: LD_INT 14
19548: PUSH
19549: LD_INT 50
19551: PUSH
19552: LD_INT 16
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19560: LD_VAR 0 6
19564: PPUSH
19565: CALL_OW 264
19569: PUSH
19570: LD_INT 6
19572: PUSH
19573: LD_INT 46
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: IN
19580: IFFALSE 19601
// points := [ 32 , 120 , 70 ] ;
19582: LD_ADDR_VAR 0 9
19586: PUSH
19587: LD_INT 32
19589: PUSH
19590: LD_INT 120
19592: PUSH
19593: LD_INT 70
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19601: LD_VAR 0 6
19605: PPUSH
19606: CALL_OW 264
19610: PUSH
19611: LD_INT 7
19613: PUSH
19614: LD_INT 28
19616: PUSH
19617: LD_INT 45
19619: PUSH
19620: LD_EXP 100
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: IN
19631: IFFALSE 19652
// points := [ 35 , 20 , 45 ] ;
19633: LD_ADDR_VAR 0 9
19637: PUSH
19638: LD_INT 35
19640: PUSH
19641: LD_INT 20
19643: PUSH
19644: LD_INT 45
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19652: LD_VAR 0 6
19656: PPUSH
19657: CALL_OW 264
19661: PUSH
19662: LD_INT 47
19664: PUSH
19665: EMPTY
19666: LIST
19667: IN
19668: IFFALSE 19689
// points := [ 67 , 45 , 75 ] ;
19670: LD_ADDR_VAR 0 9
19674: PUSH
19675: LD_INT 67
19677: PUSH
19678: LD_INT 45
19680: PUSH
19681: LD_INT 75
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19689: LD_VAR 0 6
19693: PPUSH
19694: CALL_OW 264
19698: PUSH
19699: LD_INT 26
19701: PUSH
19702: EMPTY
19703: LIST
19704: IN
19705: IFFALSE 19726
// points := [ 120 , 30 , 80 ] ;
19707: LD_ADDR_VAR 0 9
19711: PUSH
19712: LD_INT 120
19714: PUSH
19715: LD_INT 30
19717: PUSH
19718: LD_INT 80
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19726: LD_VAR 0 6
19730: PPUSH
19731: CALL_OW 264
19735: PUSH
19736: LD_INT 22
19738: PUSH
19739: EMPTY
19740: LIST
19741: IN
19742: IFFALSE 19763
// points := [ 40 , 1 , 1 ] ;
19744: LD_ADDR_VAR 0 9
19748: PUSH
19749: LD_INT 40
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19763: LD_VAR 0 6
19767: PPUSH
19768: CALL_OW 264
19772: PUSH
19773: LD_INT 29
19775: PUSH
19776: EMPTY
19777: LIST
19778: IN
19779: IFFALSE 19800
// points := [ 70 , 200 , 400 ] ;
19781: LD_ADDR_VAR 0 9
19785: PUSH
19786: LD_INT 70
19788: PUSH
19789: LD_INT 200
19791: PUSH
19792: LD_INT 400
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19800: LD_VAR 0 6
19804: PPUSH
19805: CALL_OW 264
19809: PUSH
19810: LD_INT 14
19812: PUSH
19813: LD_INT 53
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: IN
19820: IFFALSE 19841
// points := [ 40 , 10 , 20 ] ;
19822: LD_ADDR_VAR 0 9
19826: PUSH
19827: LD_INT 40
19829: PUSH
19830: LD_INT 10
19832: PUSH
19833: LD_INT 20
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19841: LD_VAR 0 6
19845: PPUSH
19846: CALL_OW 264
19850: PUSH
19851: LD_INT 9
19853: PUSH
19854: EMPTY
19855: LIST
19856: IN
19857: IFFALSE 19878
// points := [ 5 , 70 , 20 ] ;
19859: LD_ADDR_VAR 0 9
19863: PUSH
19864: LD_INT 5
19866: PUSH
19867: LD_INT 70
19869: PUSH
19870: LD_INT 20
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19878: LD_VAR 0 6
19882: PPUSH
19883: CALL_OW 264
19887: PUSH
19888: LD_INT 10
19890: PUSH
19891: EMPTY
19892: LIST
19893: IN
19894: IFFALSE 19915
// points := [ 35 , 110 , 70 ] ;
19896: LD_ADDR_VAR 0 9
19900: PUSH
19901: LD_INT 35
19903: PUSH
19904: LD_INT 110
19906: PUSH
19907: LD_INT 70
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19915: LD_VAR 0 6
19919: PPUSH
19920: CALL_OW 265
19924: PUSH
19925: LD_INT 25
19927: EQUAL
19928: IFFALSE 19949
// points := [ 80 , 65 , 100 ] ;
19930: LD_ADDR_VAR 0 9
19934: PUSH
19935: LD_INT 80
19937: PUSH
19938: LD_INT 65
19940: PUSH
19941: LD_INT 100
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19949: LD_VAR 0 6
19953: PPUSH
19954: CALL_OW 263
19958: PUSH
19959: LD_INT 1
19961: EQUAL
19962: IFFALSE 19997
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19964: LD_ADDR_VAR 0 10
19968: PUSH
19969: LD_VAR 0 10
19973: PUSH
19974: LD_VAR 0 6
19978: PPUSH
19979: CALL_OW 311
19983: PPUSH
19984: LD_INT 3
19986: PPUSH
19987: CALL_OW 259
19991: PUSH
19992: LD_INT 4
19994: MUL
19995: MUL
19996: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19997: LD_VAR 0 6
20001: PPUSH
20002: CALL_OW 263
20006: PUSH
20007: LD_INT 2
20009: EQUAL
20010: IFFALSE 20061
// begin j := IsControledBy ( i ) ;
20012: LD_ADDR_VAR 0 7
20016: PUSH
20017: LD_VAR 0 6
20021: PPUSH
20022: CALL_OW 312
20026: ST_TO_ADDR
// if j then
20027: LD_VAR 0 7
20031: IFFALSE 20061
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20033: LD_ADDR_VAR 0 10
20037: PUSH
20038: LD_VAR 0 10
20042: PUSH
20043: LD_VAR 0 7
20047: PPUSH
20048: LD_INT 3
20050: PPUSH
20051: CALL_OW 259
20055: PUSH
20056: LD_INT 3
20058: MUL
20059: MUL
20060: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20061: LD_VAR 0 6
20065: PPUSH
20066: CALL_OW 264
20070: PUSH
20071: LD_INT 5
20073: PUSH
20074: LD_INT 6
20076: PUSH
20077: LD_INT 46
20079: PUSH
20080: LD_INT 44
20082: PUSH
20083: LD_INT 47
20085: PUSH
20086: LD_INT 45
20088: PUSH
20089: LD_INT 28
20091: PUSH
20092: LD_INT 7
20094: PUSH
20095: LD_INT 27
20097: PUSH
20098: LD_INT 29
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: IN
20113: PUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: LD_INT 52
20121: PPUSH
20122: CALL_OW 321
20126: PUSH
20127: LD_INT 2
20129: EQUAL
20130: AND
20131: IFFALSE 20148
// bpoints := bpoints * 1.2 ;
20133: LD_ADDR_VAR 0 10
20137: PUSH
20138: LD_VAR 0 10
20142: PUSH
20143: LD_REAL  1.20000000000000E+0000
20146: MUL
20147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20148: LD_VAR 0 6
20152: PPUSH
20153: CALL_OW 264
20157: PUSH
20158: LD_INT 6
20160: PUSH
20161: LD_INT 46
20163: PUSH
20164: LD_INT 47
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: IN
20172: IFFALSE 20189
// bpoints := bpoints * 1.2 ;
20174: LD_ADDR_VAR 0 10
20178: PUSH
20179: LD_VAR 0 10
20183: PUSH
20184: LD_REAL  1.20000000000000E+0000
20187: MUL
20188: ST_TO_ADDR
// end ; unit_building :
20189: GO 20203
20191: LD_INT 3
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20202
20199: POP
// ; end ;
20200: GO 20203
20202: POP
// for j = 1 to 3 do
20203: LD_ADDR_VAR 0 7
20207: PUSH
20208: DOUBLE
20209: LD_INT 1
20211: DEC
20212: ST_TO_ADDR
20213: LD_INT 3
20215: PUSH
20216: FOR_TO
20217: IFFALSE 20270
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20219: LD_ADDR_VAR 0 5
20223: PUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_VAR 0 7
20233: PPUSH
20234: LD_VAR 0 5
20238: PUSH
20239: LD_VAR 0 7
20243: ARRAY
20244: PUSH
20245: LD_VAR 0 9
20249: PUSH
20250: LD_VAR 0 7
20254: ARRAY
20255: PUSH
20256: LD_VAR 0 10
20260: MUL
20261: PLUS
20262: PPUSH
20263: CALL_OW 1
20267: ST_TO_ADDR
20268: GO 20216
20270: POP
20271: POP
// end ;
20272: GO 18749
20274: POP
20275: POP
// result := Replace ( result , 4 , tmp ) ;
20276: LD_ADDR_VAR 0 5
20280: PUSH
20281: LD_VAR 0 5
20285: PPUSH
20286: LD_INT 4
20288: PPUSH
20289: LD_VAR 0 8
20293: PPUSH
20294: CALL_OW 1
20298: ST_TO_ADDR
// end ;
20299: LD_VAR 0 5
20303: RET
// export function DangerAtRange ( unit , range ) ; begin
20304: LD_INT 0
20306: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 255
20321: PPUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 250
20331: PPUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: CALL_OW 251
20341: PPUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL 18601 0 4
20351: ST_TO_ADDR
// end ;
20352: LD_VAR 0 3
20356: RET
// export function DangerInArea ( side , area ) ; begin
20357: LD_INT 0
20359: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_VAR 0 2
20369: PPUSH
20370: LD_INT 81
20372: PUSH
20373: LD_VAR 0 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL_OW 70
20386: ST_TO_ADDR
// end ;
20387: LD_VAR 0 3
20391: RET
// export function IsExtension ( b ) ; begin
20392: LD_INT 0
20394: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20395: LD_ADDR_VAR 0 2
20399: PUSH
20400: LD_VAR 0 1
20404: PUSH
20405: LD_INT 23
20407: PUSH
20408: LD_INT 20
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 17
20416: PUSH
20417: LD_INT 24
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 19
20425: PUSH
20426: LD_INT 16
20428: PUSH
20429: LD_INT 25
20431: PUSH
20432: LD_INT 18
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: IN
20447: ST_TO_ADDR
// end ;
20448: LD_VAR 0 2
20452: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20453: LD_INT 0
20455: PPUSH
20456: PPUSH
20457: PPUSH
// result := [ ] ;
20458: LD_ADDR_VAR 0 4
20462: PUSH
20463: EMPTY
20464: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20465: LD_ADDR_VAR 0 5
20469: PUSH
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_INT 21
20477: PUSH
20478: LD_INT 3
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PPUSH
20485: CALL_OW 70
20489: ST_TO_ADDR
// if not tmp then
20490: LD_VAR 0 5
20494: NOT
20495: IFFALSE 20499
// exit ;
20497: GO 20563
// if checkLink then
20499: LD_VAR 0 3
20503: IFFALSE 20553
// begin for i in tmp do
20505: LD_ADDR_VAR 0 6
20509: PUSH
20510: LD_VAR 0 5
20514: PUSH
20515: FOR_IN
20516: IFFALSE 20551
// if GetBase ( i ) <> base then
20518: LD_VAR 0 6
20522: PPUSH
20523: CALL_OW 274
20527: PUSH
20528: LD_VAR 0 1
20532: NONEQUAL
20533: IFFALSE 20549
// ComLinkToBase ( base , i ) ;
20535: LD_VAR 0 1
20539: PPUSH
20540: LD_VAR 0 6
20544: PPUSH
20545: CALL_OW 169
20549: GO 20515
20551: POP
20552: POP
// end ; result := tmp ;
20553: LD_ADDR_VAR 0 4
20557: PUSH
20558: LD_VAR 0 5
20562: ST_TO_ADDR
// end ;
20563: LD_VAR 0 4
20567: RET
// export function ComComplete ( units , b ) ; var i ; begin
20568: LD_INT 0
20570: PPUSH
20571: PPUSH
// if not units then
20572: LD_VAR 0 1
20576: NOT
20577: IFFALSE 20581
// exit ;
20579: GO 20671
// for i in units do
20581: LD_ADDR_VAR 0 4
20585: PUSH
20586: LD_VAR 0 1
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20669
// if BuildingStatus ( b ) = bs_build then
20594: LD_VAR 0 2
20598: PPUSH
20599: CALL_OW 461
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20667
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20609: LD_VAR 0 4
20613: PPUSH
20614: LD_STRING h
20616: PUSH
20617: LD_VAR 0 2
20621: PPUSH
20622: CALL_OW 250
20626: PUSH
20627: LD_VAR 0 2
20631: PPUSH
20632: CALL_OW 251
20636: PUSH
20637: LD_VAR 0 2
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: PPUSH
20663: CALL_OW 446
20667: GO 20591
20669: POP
20670: POP
// end ;
20671: LD_VAR 0 3
20675: RET
// export function AddComComplete ( units , b ) ; var i ; begin
20676: LD_INT 0
20678: PPUSH
20679: PPUSH
// if not units then
20680: LD_VAR 0 1
20684: NOT
20685: IFFALSE 20689
// exit ;
20687: GO 20779
// for i in units do
20689: LD_ADDR_VAR 0 4
20693: PUSH
20694: LD_VAR 0 1
20698: PUSH
20699: FOR_IN
20700: IFFALSE 20777
// if BuildingStatus ( b ) = bs_build then
20702: LD_VAR 0 2
20706: PPUSH
20707: CALL_OW 461
20711: PUSH
20712: LD_INT 1
20714: EQUAL
20715: IFFALSE 20775
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20717: LD_VAR 0 4
20721: PPUSH
20722: LD_STRING h
20724: PUSH
20725: LD_VAR 0 2
20729: PPUSH
20730: CALL_OW 250
20734: PUSH
20735: LD_VAR 0 2
20739: PPUSH
20740: CALL_OW 251
20744: PUSH
20745: LD_VAR 0 2
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: PPUSH
20771: CALL_OW 447
20775: GO 20699
20777: POP
20778: POP
// end ;
20779: LD_VAR 0 3
20783: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20792: LD_VAR 0 1
20796: NOT
20797: PUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 263
20807: PUSH
20808: LD_INT 2
20810: NONEQUAL
20811: OR
20812: IFFALSE 20816
// exit ;
20814: GO 21132
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20816: LD_ADDR_VAR 0 6
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 255
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 34
20853: PUSH
20854: LD_INT 31
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 69
20874: ST_TO_ADDR
// if not tmp then
20875: LD_VAR 0 6
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 21132
// result := [ ] ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// for i in tmp do
20891: LD_ADDR_VAR 0 3
20895: PUSH
20896: LD_VAR 0 6
20900: PUSH
20901: FOR_IN
20902: IFFALSE 20973
// begin t := UnitsInside ( i ) ;
20904: LD_ADDR_VAR 0 4
20908: PUSH
20909: LD_VAR 0 3
20913: PPUSH
20914: CALL_OW 313
20918: ST_TO_ADDR
// if t then
20919: LD_VAR 0 4
20923: IFFALSE 20971
// for j in t do
20925: LD_ADDR_VAR 0 7
20929: PUSH
20930: LD_VAR 0 4
20934: PUSH
20935: FOR_IN
20936: IFFALSE 20969
// result := Replace ( result , result + 1 , j ) ;
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_VAR 0 2
20947: PPUSH
20948: LD_VAR 0 2
20952: PUSH
20953: LD_INT 1
20955: PLUS
20956: PPUSH
20957: LD_VAR 0 7
20961: PPUSH
20962: CALL_OW 1
20966: ST_TO_ADDR
20967: GO 20935
20969: POP
20970: POP
// end ;
20971: GO 20901
20973: POP
20974: POP
// if not result then
20975: LD_VAR 0 2
20979: NOT
20980: IFFALSE 20984
// exit ;
20982: GO 21132
// mech := result [ 1 ] ;
20984: LD_ADDR_VAR 0 5
20988: PUSH
20989: LD_VAR 0 2
20993: PUSH
20994: LD_INT 1
20996: ARRAY
20997: ST_TO_ADDR
// if result > 1 then
20998: LD_VAR 0 2
21002: PUSH
21003: LD_INT 1
21005: GREATER
21006: IFFALSE 21118
// begin for i = 2 to result do
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: DOUBLE
21014: LD_INT 2
21016: DEC
21017: ST_TO_ADDR
21018: LD_VAR 0 2
21022: PUSH
21023: FOR_TO
21024: IFFALSE 21116
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21026: LD_ADDR_VAR 0 4
21030: PUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_VAR 0 3
21040: ARRAY
21041: PPUSH
21042: LD_INT 3
21044: PPUSH
21045: CALL_OW 259
21049: PUSH
21050: LD_VAR 0 2
21054: PUSH
21055: LD_VAR 0 3
21059: ARRAY
21060: PPUSH
21061: CALL_OW 432
21065: MINUS
21066: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21067: LD_VAR 0 4
21071: PUSH
21072: LD_VAR 0 5
21076: PPUSH
21077: LD_INT 3
21079: PPUSH
21080: CALL_OW 259
21084: PUSH
21085: LD_VAR 0 5
21089: PPUSH
21090: CALL_OW 432
21094: MINUS
21095: GREATEREQUAL
21096: IFFALSE 21114
// mech := result [ i ] ;
21098: LD_ADDR_VAR 0 5
21102: PUSH
21103: LD_VAR 0 2
21107: PUSH
21108: LD_VAR 0 3
21112: ARRAY
21113: ST_TO_ADDR
// end ;
21114: GO 21023
21116: POP
21117: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_VAR 0 5
21127: PPUSH
21128: CALL_OW 135
// end ;
21132: LD_VAR 0 2
21136: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
21148: PPUSH
21149: PPUSH
21150: PPUSH
21151: PPUSH
// result := [ ] ;
21152: LD_ADDR_VAR 0 7
21156: PUSH
21157: EMPTY
21158: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 266
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: IN
21179: NOT
21180: IFFALSE 21184
// exit ;
21182: GO 22818
// if name then
21184: LD_VAR 0 3
21188: IFFALSE 21204
// SetBName ( base_dep , name ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: LD_VAR 0 3
21199: PPUSH
21200: CALL_OW 500
// base := GetBase ( base_dep ) ;
21204: LD_ADDR_VAR 0 15
21208: PUSH
21209: LD_VAR 0 1
21213: PPUSH
21214: CALL_OW 274
21218: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21219: LD_ADDR_VAR 0 16
21223: PUSH
21224: LD_VAR 0 1
21228: PPUSH
21229: CALL_OW 255
21233: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21234: LD_ADDR_VAR 0 17
21238: PUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: CALL_OW 248
21248: ST_TO_ADDR
// if sources then
21249: LD_VAR 0 5
21253: IFFALSE 21300
// for i = 1 to 3 do
21255: LD_ADDR_VAR 0 8
21259: PUSH
21260: DOUBLE
21261: LD_INT 1
21263: DEC
21264: ST_TO_ADDR
21265: LD_INT 3
21267: PUSH
21268: FOR_TO
21269: IFFALSE 21298
// AddResourceType ( base , i , sources [ i ] ) ;
21271: LD_VAR 0 15
21275: PPUSH
21276: LD_VAR 0 8
21280: PPUSH
21281: LD_VAR 0 5
21285: PUSH
21286: LD_VAR 0 8
21290: ARRAY
21291: PPUSH
21292: CALL_OW 276
21296: GO 21268
21298: POP
21299: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21300: LD_ADDR_VAR 0 18
21304: PUSH
21305: LD_VAR 0 15
21309: PPUSH
21310: LD_VAR 0 2
21314: PPUSH
21315: LD_INT 1
21317: PPUSH
21318: CALL 20453 0 3
21322: ST_TO_ADDR
// InitHc ;
21323: CALL_OW 19
// InitUc ;
21327: CALL_OW 18
// uc_side := side ;
21331: LD_ADDR_OWVAR 20
21335: PUSH
21336: LD_VAR 0 16
21340: ST_TO_ADDR
// uc_nation := nation ;
21341: LD_ADDR_OWVAR 21
21345: PUSH
21346: LD_VAR 0 17
21350: ST_TO_ADDR
// if buildings then
21351: LD_VAR 0 18
21355: IFFALSE 22677
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21357: LD_ADDR_VAR 0 19
21361: PUSH
21362: LD_VAR 0 18
21366: PPUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 30
21372: PUSH
21373: LD_INT 29
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 30
21382: PUSH
21383: LD_INT 30
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 72
21399: ST_TO_ADDR
// if tmp then
21400: LD_VAR 0 19
21404: IFFALSE 21452
// for i in tmp do
21406: LD_ADDR_VAR 0 8
21410: PUSH
21411: LD_VAR 0 19
21415: PUSH
21416: FOR_IN
21417: IFFALSE 21450
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21419: LD_VAR 0 8
21423: PPUSH
21424: CALL_OW 250
21428: PPUSH
21429: LD_VAR 0 8
21433: PPUSH
21434: CALL_OW 251
21438: PPUSH
21439: LD_VAR 0 16
21443: PPUSH
21444: CALL_OW 441
21448: GO 21416
21450: POP
21451: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21452: LD_VAR 0 18
21456: PPUSH
21457: LD_INT 2
21459: PUSH
21460: LD_INT 30
21462: PUSH
21463: LD_INT 32
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 30
21472: PUSH
21473: LD_INT 33
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 72
21489: IFFALSE 21577
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21491: LD_ADDR_VAR 0 8
21495: PUSH
21496: LD_VAR 0 18
21500: PPUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 30
21506: PUSH
21507: LD_INT 32
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 30
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 72
21533: PUSH
21534: FOR_IN
21535: IFFALSE 21575
// begin if not GetBWeapon ( i ) then
21537: LD_VAR 0 8
21541: PPUSH
21542: CALL_OW 269
21546: NOT
21547: IFFALSE 21573
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21549: LD_VAR 0 8
21553: PPUSH
21554: LD_VAR 0 8
21558: PPUSH
21559: LD_VAR 0 2
21563: PPUSH
21564: CALL 22823 0 2
21568: PPUSH
21569: CALL_OW 431
// end ;
21573: GO 21534
21575: POP
21576: POP
// end ; for i = 1 to personel do
21577: LD_ADDR_VAR 0 8
21581: PUSH
21582: DOUBLE
21583: LD_INT 1
21585: DEC
21586: ST_TO_ADDR
21587: LD_VAR 0 6
21591: PUSH
21592: FOR_TO
21593: IFFALSE 22657
// begin if i > 4 then
21595: LD_VAR 0 8
21599: PUSH
21600: LD_INT 4
21602: GREATER
21603: IFFALSE 21607
// break ;
21605: GO 22657
// case i of 1 :
21607: LD_VAR 0 8
21611: PUSH
21612: LD_INT 1
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21700
21620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21621: LD_ADDR_VAR 0 12
21625: PUSH
21626: LD_VAR 0 18
21630: PPUSH
21631: LD_INT 22
21633: PUSH
21634: LD_VAR 0 16
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 58
21645: PUSH
21646: EMPTY
21647: LIST
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: LD_INT 30
21654: PUSH
21655: LD_INT 32
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 30
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 30
21674: PUSH
21675: LD_INT 5
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 72
21697: ST_TO_ADDR
21698: GO 21922
21700: LD_INT 2
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21770
21708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21709: LD_ADDR_VAR 0 12
21713: PUSH
21714: LD_VAR 0 18
21718: PPUSH
21719: LD_INT 22
21721: PUSH
21722: LD_VAR 0 16
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 30
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PPUSH
21763: CALL_OW 72
21767: ST_TO_ADDR
21768: GO 21922
21770: LD_INT 3
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21840
21778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21779: LD_ADDR_VAR 0 12
21783: PUSH
21784: LD_VAR 0 18
21788: PPUSH
21789: LD_INT 22
21791: PUSH
21792: LD_VAR 0 16
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 30
21816: PUSH
21817: LD_INT 3
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PPUSH
21833: CALL_OW 72
21837: ST_TO_ADDR
21838: GO 21922
21840: LD_INT 4
21842: DOUBLE
21843: EQUAL
21844: IFTRUE 21848
21846: GO 21921
21848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21849: LD_ADDR_VAR 0 12
21853: PUSH
21854: LD_VAR 0 18
21858: PPUSH
21859: LD_INT 22
21861: PUSH
21862: LD_VAR 0 16
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: LD_INT 30
21876: PUSH
21877: LD_INT 6
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 30
21886: PUSH
21887: LD_INT 7
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 30
21896: PUSH
21897: LD_INT 8
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 72
21918: ST_TO_ADDR
21919: GO 21922
21921: POP
// if i = 1 then
21922: LD_VAR 0 8
21926: PUSH
21927: LD_INT 1
21929: EQUAL
21930: IFFALSE 22041
// begin tmp := [ ] ;
21932: LD_ADDR_VAR 0 19
21936: PUSH
21937: EMPTY
21938: ST_TO_ADDR
// for j in f do
21939: LD_ADDR_VAR 0 9
21943: PUSH
21944: LD_VAR 0 12
21948: PUSH
21949: FOR_IN
21950: IFFALSE 22023
// if GetBType ( j ) = b_bunker then
21952: LD_VAR 0 9
21956: PPUSH
21957: CALL_OW 266
21961: PUSH
21962: LD_INT 32
21964: EQUAL
21965: IFFALSE 21992
// tmp := Insert ( tmp , 1 , j ) else
21967: LD_ADDR_VAR 0 19
21971: PUSH
21972: LD_VAR 0 19
21976: PPUSH
21977: LD_INT 1
21979: PPUSH
21980: LD_VAR 0 9
21984: PPUSH
21985: CALL_OW 2
21989: ST_TO_ADDR
21990: GO 22021
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21992: LD_ADDR_VAR 0 19
21996: PUSH
21997: LD_VAR 0 19
22001: PPUSH
22002: LD_VAR 0 19
22006: PUSH
22007: LD_INT 1
22009: PLUS
22010: PPUSH
22011: LD_VAR 0 9
22015: PPUSH
22016: CALL_OW 2
22020: ST_TO_ADDR
22021: GO 21949
22023: POP
22024: POP
// if tmp then
22025: LD_VAR 0 19
22029: IFFALSE 22041
// f := tmp ;
22031: LD_ADDR_VAR 0 12
22035: PUSH
22036: LD_VAR 0 19
22040: ST_TO_ADDR
// end ; x := personel [ i ] ;
22041: LD_ADDR_VAR 0 13
22045: PUSH
22046: LD_VAR 0 6
22050: PUSH
22051: LD_VAR 0 8
22055: ARRAY
22056: ST_TO_ADDR
// if x = - 1 then
22057: LD_VAR 0 13
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: EQUAL
22066: IFFALSE 22275
// begin for j in f do
22068: LD_ADDR_VAR 0 9
22072: PUSH
22073: LD_VAR 0 12
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22271
// repeat InitHc ;
22081: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22085: LD_VAR 0 9
22089: PPUSH
22090: CALL_OW 266
22094: PUSH
22095: LD_INT 5
22097: EQUAL
22098: IFFALSE 22168
// begin if UnitsInside ( j ) < 3 then
22100: LD_VAR 0 9
22104: PPUSH
22105: CALL_OW 313
22109: PUSH
22110: LD_INT 3
22112: LESS
22113: IFFALSE 22149
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22115: LD_INT 0
22117: PPUSH
22118: LD_INT 5
22120: PUSH
22121: LD_INT 8
22123: PUSH
22124: LD_INT 9
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: PUSH
22132: LD_VAR 0 17
22136: ARRAY
22137: PPUSH
22138: LD_VAR 0 4
22142: PPUSH
22143: CALL_OW 380
22147: GO 22166
// PrepareHuman ( false , i , skill ) ;
22149: LD_INT 0
22151: PPUSH
22152: LD_VAR 0 8
22156: PPUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: CALL_OW 380
// end else
22166: GO 22185
// PrepareHuman ( false , i , skill ) ;
22168: LD_INT 0
22170: PPUSH
22171: LD_VAR 0 8
22175: PPUSH
22176: LD_VAR 0 4
22180: PPUSH
22181: CALL_OW 380
// un := CreateHuman ;
22185: LD_ADDR_VAR 0 14
22189: PUSH
22190: CALL_OW 44
22194: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22195: LD_ADDR_VAR 0 7
22199: PUSH
22200: LD_VAR 0 7
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: LD_VAR 0 14
22212: PPUSH
22213: CALL_OW 2
22217: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22218: LD_VAR 0 14
22222: PPUSH
22223: LD_VAR 0 9
22227: PPUSH
22228: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22232: LD_VAR 0 9
22236: PPUSH
22237: CALL_OW 313
22241: PUSH
22242: LD_INT 6
22244: EQUAL
22245: PUSH
22246: LD_VAR 0 9
22250: PPUSH
22251: CALL_OW 266
22255: PUSH
22256: LD_INT 32
22258: PUSH
22259: LD_INT 31
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: IN
22266: OR
22267: IFFALSE 22081
22269: GO 22078
22271: POP
22272: POP
// end else
22273: GO 22655
// for j = 1 to x do
22275: LD_ADDR_VAR 0 9
22279: PUSH
22280: DOUBLE
22281: LD_INT 1
22283: DEC
22284: ST_TO_ADDR
22285: LD_VAR 0 13
22289: PUSH
22290: FOR_TO
22291: IFFALSE 22653
// begin InitHc ;
22293: CALL_OW 19
// if not f then
22297: LD_VAR 0 12
22301: NOT
22302: IFFALSE 22391
// begin PrepareHuman ( false , i , skill ) ;
22304: LD_INT 0
22306: PPUSH
22307: LD_VAR 0 8
22311: PPUSH
22312: LD_VAR 0 4
22316: PPUSH
22317: CALL_OW 380
// un := CreateHuman ;
22321: LD_ADDR_VAR 0 14
22325: PUSH
22326: CALL_OW 44
22330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22331: LD_ADDR_VAR 0 7
22335: PUSH
22336: LD_VAR 0 7
22340: PPUSH
22341: LD_INT 1
22343: PPUSH
22344: LD_VAR 0 14
22348: PPUSH
22349: CALL_OW 2
22353: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22354: LD_VAR 0 14
22358: PPUSH
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 250
22368: PPUSH
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 251
22378: PPUSH
22379: LD_INT 10
22381: PPUSH
22382: LD_INT 0
22384: PPUSH
22385: CALL_OW 50
// continue ;
22389: GO 22290
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22391: LD_VAR 0 12
22395: PUSH
22396: LD_INT 1
22398: ARRAY
22399: PPUSH
22400: CALL_OW 313
22404: PUSH
22405: LD_VAR 0 12
22409: PUSH
22410: LD_INT 1
22412: ARRAY
22413: PPUSH
22414: CALL_OW 266
22418: PUSH
22419: LD_INT 32
22421: PUSH
22422: LD_INT 31
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: IN
22429: AND
22430: PUSH
22431: LD_VAR 0 12
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: CALL_OW 313
22444: PUSH
22445: LD_INT 6
22447: EQUAL
22448: OR
22449: IFFALSE 22469
// f := Delete ( f , 1 ) ;
22451: LD_ADDR_VAR 0 12
22455: PUSH
22456: LD_VAR 0 12
22460: PPUSH
22461: LD_INT 1
22463: PPUSH
22464: CALL_OW 3
22468: ST_TO_ADDR
// if not f then
22469: LD_VAR 0 12
22473: NOT
22474: IFFALSE 22492
// begin x := x + 2 ;
22476: LD_ADDR_VAR 0 13
22480: PUSH
22481: LD_VAR 0 13
22485: PUSH
22486: LD_INT 2
22488: PLUS
22489: ST_TO_ADDR
// continue ;
22490: GO 22290
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22492: LD_VAR 0 12
22496: PUSH
22497: LD_INT 1
22499: ARRAY
22500: PPUSH
22501: CALL_OW 266
22505: PUSH
22506: LD_INT 5
22508: EQUAL
22509: IFFALSE 22583
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22511: LD_VAR 0 12
22515: PUSH
22516: LD_INT 1
22518: ARRAY
22519: PPUSH
22520: CALL_OW 313
22524: PUSH
22525: LD_INT 3
22527: LESS
22528: IFFALSE 22564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22530: LD_INT 0
22532: PPUSH
22533: LD_INT 5
22535: PUSH
22536: LD_INT 8
22538: PUSH
22539: LD_INT 9
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: LD_VAR 0 17
22551: ARRAY
22552: PPUSH
22553: LD_VAR 0 4
22557: PPUSH
22558: CALL_OW 380
22562: GO 22581
// PrepareHuman ( false , i , skill ) ;
22564: LD_INT 0
22566: PPUSH
22567: LD_VAR 0 8
22571: PPUSH
22572: LD_VAR 0 4
22576: PPUSH
22577: CALL_OW 380
// end else
22581: GO 22600
// PrepareHuman ( false , i , skill ) ;
22583: LD_INT 0
22585: PPUSH
22586: LD_VAR 0 8
22590: PPUSH
22591: LD_VAR 0 4
22595: PPUSH
22596: CALL_OW 380
// un := CreateHuman ;
22600: LD_ADDR_VAR 0 14
22604: PUSH
22605: CALL_OW 44
22609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22610: LD_ADDR_VAR 0 7
22614: PUSH
22615: LD_VAR 0 7
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: LD_VAR 0 14
22627: PPUSH
22628: CALL_OW 2
22632: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22633: LD_VAR 0 14
22637: PPUSH
22638: LD_VAR 0 12
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: CALL_OW 52
// end ;
22651: GO 22290
22653: POP
22654: POP
// end ;
22655: GO 21592
22657: POP
22658: POP
// result := result ^ buildings ;
22659: LD_ADDR_VAR 0 7
22663: PUSH
22664: LD_VAR 0 7
22668: PUSH
22669: LD_VAR 0 18
22673: ADD
22674: ST_TO_ADDR
// end else
22675: GO 22818
// begin for i = 1 to personel do
22677: LD_ADDR_VAR 0 8
22681: PUSH
22682: DOUBLE
22683: LD_INT 1
22685: DEC
22686: ST_TO_ADDR
22687: LD_VAR 0 6
22691: PUSH
22692: FOR_TO
22693: IFFALSE 22816
// begin if i > 4 then
22695: LD_VAR 0 8
22699: PUSH
22700: LD_INT 4
22702: GREATER
22703: IFFALSE 22707
// break ;
22705: GO 22816
// x := personel [ i ] ;
22707: LD_ADDR_VAR 0 13
22711: PUSH
22712: LD_VAR 0 6
22716: PUSH
22717: LD_VAR 0 8
22721: ARRAY
22722: ST_TO_ADDR
// if x = - 1 then
22723: LD_VAR 0 13
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: EQUAL
22732: IFFALSE 22736
// continue ;
22734: GO 22692
// PrepareHuman ( false , i , skill ) ;
22736: LD_INT 0
22738: PPUSH
22739: LD_VAR 0 8
22743: PPUSH
22744: LD_VAR 0 4
22748: PPUSH
22749: CALL_OW 380
// un := CreateHuman ;
22753: LD_ADDR_VAR 0 14
22757: PUSH
22758: CALL_OW 44
22762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22763: LD_VAR 0 14
22767: PPUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 250
22777: PPUSH
22778: LD_VAR 0 1
22782: PPUSH
22783: CALL_OW 251
22787: PPUSH
22788: LD_INT 10
22790: PPUSH
22791: LD_INT 0
22793: PPUSH
22794: CALL_OW 50
// result := result ^ un ;
22798: LD_ADDR_VAR 0 7
22802: PUSH
22803: LD_VAR 0 7
22807: PUSH
22808: LD_VAR 0 14
22812: ADD
22813: ST_TO_ADDR
// end ;
22814: GO 22692
22816: POP
22817: POP
// end ; end ;
22818: LD_VAR 0 7
22822: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22823: LD_INT 0
22825: PPUSH
22826: PPUSH
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
22831: PPUSH
22832: PPUSH
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
22840: PPUSH
// result := false ;
22841: LD_ADDR_VAR 0 3
22845: PUSH
22846: LD_INT 0
22848: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22849: LD_VAR 0 1
22853: NOT
22854: PUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 266
22864: PUSH
22865: LD_INT 32
22867: PUSH
22868: LD_INT 33
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: IN
22875: NOT
22876: OR
22877: IFFALSE 22881
// exit ;
22879: GO 23990
// nat := GetNation ( tower ) ;
22881: LD_ADDR_VAR 0 12
22885: PUSH
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 248
22895: ST_TO_ADDR
// side := GetSide ( tower ) ;
22896: LD_ADDR_VAR 0 16
22900: PUSH
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 255
22910: ST_TO_ADDR
// x := GetX ( tower ) ;
22911: LD_ADDR_VAR 0 10
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 250
22925: ST_TO_ADDR
// y := GetY ( tower ) ;
22926: LD_ADDR_VAR 0 11
22930: PUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 251
22940: ST_TO_ADDR
// if not x or not y then
22941: LD_VAR 0 10
22945: NOT
22946: PUSH
22947: LD_VAR 0 11
22951: NOT
22952: OR
22953: IFFALSE 22957
// exit ;
22955: GO 23990
// weapon := 0 ;
22957: LD_ADDR_VAR 0 18
22961: PUSH
22962: LD_INT 0
22964: ST_TO_ADDR
// fac_list := [ ] ;
22965: LD_ADDR_VAR 0 17
22969: PUSH
22970: EMPTY
22971: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22972: LD_ADDR_VAR 0 6
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 274
22986: PPUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: LD_INT 0
22994: PPUSH
22995: CALL 20453 0 3
22999: PPUSH
23000: LD_INT 30
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PPUSH
23010: CALL_OW 72
23014: ST_TO_ADDR
// if not factories then
23015: LD_VAR 0 6
23019: NOT
23020: IFFALSE 23024
// exit ;
23022: GO 23990
// for i in factories do
23024: LD_ADDR_VAR 0 8
23028: PUSH
23029: LD_VAR 0 6
23033: PUSH
23034: FOR_IN
23035: IFFALSE 23060
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23037: LD_ADDR_VAR 0 17
23041: PUSH
23042: LD_VAR 0 17
23046: PUSH
23047: LD_VAR 0 8
23051: PPUSH
23052: CALL_OW 478
23056: UNION
23057: ST_TO_ADDR
23058: GO 23034
23060: POP
23061: POP
// if not fac_list then
23062: LD_VAR 0 17
23066: NOT
23067: IFFALSE 23071
// exit ;
23069: GO 23990
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23071: LD_ADDR_VAR 0 5
23075: PUSH
23076: LD_INT 4
23078: PUSH
23079: LD_INT 5
23081: PUSH
23082: LD_INT 9
23084: PUSH
23085: LD_INT 10
23087: PUSH
23088: LD_INT 6
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 11
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 27
23108: PUSH
23109: LD_INT 28
23111: PUSH
23112: LD_INT 26
23114: PUSH
23115: LD_INT 30
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 43
23126: PUSH
23127: LD_INT 44
23129: PUSH
23130: LD_INT 46
23132: PUSH
23133: LD_INT 45
23135: PUSH
23136: LD_INT 47
23138: PUSH
23139: LD_INT 49
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_VAR 0 12
23159: ARRAY
23160: ST_TO_ADDR
// list := list isect fac_list ;
23161: LD_ADDR_VAR 0 5
23165: PUSH
23166: LD_VAR 0 5
23170: PUSH
23171: LD_VAR 0 17
23175: ISECT
23176: ST_TO_ADDR
// if not list then
23177: LD_VAR 0 5
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23990
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23186: LD_VAR 0 12
23190: PUSH
23191: LD_INT 3
23193: EQUAL
23194: PUSH
23195: LD_INT 49
23197: PUSH
23198: LD_VAR 0 5
23202: IN
23203: AND
23204: PUSH
23205: LD_INT 31
23207: PPUSH
23208: LD_VAR 0 16
23212: PPUSH
23213: CALL_OW 321
23217: PUSH
23218: LD_INT 2
23220: EQUAL
23221: AND
23222: IFFALSE 23282
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23224: LD_INT 22
23226: PUSH
23227: LD_VAR 0 16
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 35
23238: PUSH
23239: LD_INT 49
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 91
23248: PUSH
23249: LD_VAR 0 1
23253: PUSH
23254: LD_INT 10
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: PPUSH
23267: CALL_OW 69
23271: NOT
23272: IFFALSE 23282
// weapon := ru_time_lapser ;
23274: LD_ADDR_VAR 0 18
23278: PUSH
23279: LD_INT 49
23281: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23282: LD_VAR 0 12
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: IN
23297: PUSH
23298: LD_INT 11
23300: PUSH
23301: LD_VAR 0 5
23305: IN
23306: PUSH
23307: LD_INT 30
23309: PUSH
23310: LD_VAR 0 5
23314: IN
23315: OR
23316: AND
23317: PUSH
23318: LD_INT 6
23320: PPUSH
23321: LD_VAR 0 16
23325: PPUSH
23326: CALL_OW 321
23330: PUSH
23331: LD_INT 2
23333: EQUAL
23334: AND
23335: IFFALSE 23500
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23337: LD_INT 22
23339: PUSH
23340: LD_VAR 0 16
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 35
23354: PUSH
23355: LD_INT 11
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 35
23364: PUSH
23365: LD_INT 30
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 91
23379: PUSH
23380: LD_VAR 0 1
23384: PUSH
23385: LD_INT 18
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: PPUSH
23398: CALL_OW 69
23402: NOT
23403: PUSH
23404: LD_INT 22
23406: PUSH
23407: LD_VAR 0 16
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: LD_INT 30
23421: PUSH
23422: LD_INT 32
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 33
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 91
23446: PUSH
23447: LD_VAR 0 1
23451: PUSH
23452: LD_INT 12
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PUSH
23473: LD_INT 2
23475: GREATER
23476: AND
23477: IFFALSE 23500
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23479: LD_ADDR_VAR 0 18
23483: PUSH
23484: LD_INT 11
23486: PUSH
23487: LD_INT 30
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_VAR 0 12
23498: ARRAY
23499: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23500: LD_VAR 0 18
23504: NOT
23505: PUSH
23506: LD_INT 40
23508: PPUSH
23509: LD_VAR 0 16
23513: PPUSH
23514: CALL_OW 321
23518: PUSH
23519: LD_INT 2
23521: EQUAL
23522: AND
23523: PUSH
23524: LD_INT 7
23526: PUSH
23527: LD_VAR 0 5
23531: IN
23532: PUSH
23533: LD_INT 28
23535: PUSH
23536: LD_VAR 0 5
23540: IN
23541: OR
23542: PUSH
23543: LD_INT 45
23545: PUSH
23546: LD_VAR 0 5
23550: IN
23551: OR
23552: AND
23553: IFFALSE 23807
// begin hex := GetHexInfo ( x , y ) ;
23555: LD_ADDR_VAR 0 4
23559: PUSH
23560: LD_VAR 0 10
23564: PPUSH
23565: LD_VAR 0 11
23569: PPUSH
23570: CALL_OW 546
23574: ST_TO_ADDR
// if hex [ 1 ] then
23575: LD_VAR 0 4
23579: PUSH
23580: LD_INT 1
23582: ARRAY
23583: IFFALSE 23587
// exit ;
23585: GO 23990
// height := hex [ 2 ] ;
23587: LD_ADDR_VAR 0 15
23591: PUSH
23592: LD_VAR 0 4
23596: PUSH
23597: LD_INT 2
23599: ARRAY
23600: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23601: LD_ADDR_VAR 0 14
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 3
23614: PUSH
23615: LD_INT 5
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: ST_TO_ADDR
// for i in tmp do
23624: LD_ADDR_VAR 0 8
23628: PUSH
23629: LD_VAR 0 14
23633: PUSH
23634: FOR_IN
23635: IFFALSE 23805
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23637: LD_ADDR_VAR 0 9
23641: PUSH
23642: LD_VAR 0 10
23646: PPUSH
23647: LD_VAR 0 8
23651: PPUSH
23652: LD_INT 5
23654: PPUSH
23655: CALL_OW 272
23659: PUSH
23660: LD_VAR 0 11
23664: PPUSH
23665: LD_VAR 0 8
23669: PPUSH
23670: LD_INT 5
23672: PPUSH
23673: CALL_OW 273
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23682: LD_VAR 0 9
23686: PUSH
23687: LD_INT 1
23689: ARRAY
23690: PPUSH
23691: LD_VAR 0 9
23695: PUSH
23696: LD_INT 2
23698: ARRAY
23699: PPUSH
23700: CALL_OW 488
23704: IFFALSE 23803
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23706: LD_ADDR_VAR 0 4
23710: PUSH
23711: LD_VAR 0 9
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: PPUSH
23720: LD_VAR 0 9
23724: PUSH
23725: LD_INT 2
23727: ARRAY
23728: PPUSH
23729: CALL_OW 546
23733: ST_TO_ADDR
// if hex [ 1 ] then
23734: LD_VAR 0 4
23738: PUSH
23739: LD_INT 1
23741: ARRAY
23742: IFFALSE 23746
// continue ;
23744: GO 23634
// h := hex [ 2 ] ;
23746: LD_ADDR_VAR 0 13
23750: PUSH
23751: LD_VAR 0 4
23755: PUSH
23756: LD_INT 2
23758: ARRAY
23759: ST_TO_ADDR
// if h + 7 < height then
23760: LD_VAR 0 13
23764: PUSH
23765: LD_INT 7
23767: PLUS
23768: PUSH
23769: LD_VAR 0 15
23773: LESS
23774: IFFALSE 23803
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23776: LD_ADDR_VAR 0 18
23780: PUSH
23781: LD_INT 7
23783: PUSH
23784: LD_INT 28
23786: PUSH
23787: LD_INT 45
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: LIST
23794: PUSH
23795: LD_VAR 0 12
23799: ARRAY
23800: ST_TO_ADDR
// break ;
23801: GO 23805
// end ; end ; end ;
23803: GO 23634
23805: POP
23806: POP
// end ; if not weapon then
23807: LD_VAR 0 18
23811: NOT
23812: IFFALSE 23872
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23814: LD_ADDR_VAR 0 5
23818: PUSH
23819: LD_VAR 0 5
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 30
23829: PUSH
23830: LD_INT 49
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: DIFF
23838: ST_TO_ADDR
// if not list then
23839: LD_VAR 0 5
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23990
// weapon := list [ rand ( 1 , list ) ] ;
23848: LD_ADDR_VAR 0 18
23852: PUSH
23853: LD_VAR 0 5
23857: PUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_VAR 0 5
23865: PPUSH
23866: CALL_OW 12
23870: ARRAY
23871: ST_TO_ADDR
// end ; if weapon then
23872: LD_VAR 0 18
23876: IFFALSE 23990
// begin tmp := CostOfWeapon ( weapon ) ;
23878: LD_ADDR_VAR 0 14
23882: PUSH
23883: LD_VAR 0 18
23887: PPUSH
23888: CALL_OW 451
23892: ST_TO_ADDR
// j := GetBase ( tower ) ;
23893: LD_ADDR_VAR 0 9
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 274
23907: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23908: LD_VAR 0 9
23912: PPUSH
23913: LD_INT 1
23915: PPUSH
23916: CALL_OW 275
23920: PUSH
23921: LD_VAR 0 14
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: GREATEREQUAL
23930: PUSH
23931: LD_VAR 0 9
23935: PPUSH
23936: LD_INT 2
23938: PPUSH
23939: CALL_OW 275
23943: PUSH
23944: LD_VAR 0 14
23948: PUSH
23949: LD_INT 2
23951: ARRAY
23952: GREATEREQUAL
23953: AND
23954: PUSH
23955: LD_VAR 0 9
23959: PPUSH
23960: LD_INT 3
23962: PPUSH
23963: CALL_OW 275
23967: PUSH
23968: LD_VAR 0 14
23972: PUSH
23973: LD_INT 3
23975: ARRAY
23976: GREATEREQUAL
23977: AND
23978: IFFALSE 23990
// result := weapon ;
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_VAR 0 18
23989: ST_TO_ADDR
// end ; end ;
23990: LD_VAR 0 3
23994: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
// result := true ;
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: LD_INT 1
24006: ST_TO_ADDR
// if array1 = array2 then
24007: LD_VAR 0 1
24011: PUSH
24012: LD_VAR 0 2
24016: EQUAL
24017: IFFALSE 24077
// begin for i = 1 to array1 do
24019: LD_ADDR_VAR 0 4
24023: PUSH
24024: DOUBLE
24025: LD_INT 1
24027: DEC
24028: ST_TO_ADDR
24029: LD_VAR 0 1
24033: PUSH
24034: FOR_TO
24035: IFFALSE 24073
// if array1 [ i ] <> array2 [ i ] then
24037: LD_VAR 0 1
24041: PUSH
24042: LD_VAR 0 4
24046: ARRAY
24047: PUSH
24048: LD_VAR 0 2
24052: PUSH
24053: LD_VAR 0 4
24057: ARRAY
24058: NONEQUAL
24059: IFFALSE 24071
// begin result := false ;
24061: LD_ADDR_VAR 0 3
24065: PUSH
24066: LD_INT 0
24068: ST_TO_ADDR
// break ;
24069: GO 24073
// end ;
24071: GO 24034
24073: POP
24074: POP
// end else
24075: GO 24085
// result := false ;
24077: LD_ADDR_VAR 0 3
24081: PUSH
24082: LD_INT 0
24084: ST_TO_ADDR
// end ;
24085: LD_VAR 0 3
24089: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24090: LD_INT 0
24092: PPUSH
24093: PPUSH
// if not array1 or not array2 then
24094: LD_VAR 0 1
24098: NOT
24099: PUSH
24100: LD_VAR 0 2
24104: NOT
24105: OR
24106: IFFALSE 24110
// exit ;
24108: GO 24174
// result := true ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_INT 1
24117: ST_TO_ADDR
// for i = 1 to array1 do
24118: LD_ADDR_VAR 0 4
24122: PUSH
24123: DOUBLE
24124: LD_INT 1
24126: DEC
24127: ST_TO_ADDR
24128: LD_VAR 0 1
24132: PUSH
24133: FOR_TO
24134: IFFALSE 24172
// if array1 [ i ] <> array2 [ i ] then
24136: LD_VAR 0 1
24140: PUSH
24141: LD_VAR 0 4
24145: ARRAY
24146: PUSH
24147: LD_VAR 0 2
24151: PUSH
24152: LD_VAR 0 4
24156: ARRAY
24157: NONEQUAL
24158: IFFALSE 24170
// begin result := false ;
24160: LD_ADDR_VAR 0 3
24164: PUSH
24165: LD_INT 0
24167: ST_TO_ADDR
// break ;
24168: GO 24172
// end ;
24170: GO 24133
24172: POP
24173: POP
// end ;
24174: LD_VAR 0 3
24178: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24179: LD_INT 0
24181: PPUSH
24182: PPUSH
24183: PPUSH
// pom := GetBase ( fac ) ;
24184: LD_ADDR_VAR 0 5
24188: PUSH
24189: LD_VAR 0 1
24193: PPUSH
24194: CALL_OW 274
24198: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24199: LD_ADDR_VAR 0 4
24203: PUSH
24204: LD_VAR 0 2
24208: PUSH
24209: LD_INT 1
24211: ARRAY
24212: PPUSH
24213: LD_VAR 0 2
24217: PUSH
24218: LD_INT 2
24220: ARRAY
24221: PPUSH
24222: LD_VAR 0 2
24226: PUSH
24227: LD_INT 3
24229: ARRAY
24230: PPUSH
24231: LD_VAR 0 2
24235: PUSH
24236: LD_INT 4
24238: ARRAY
24239: PPUSH
24240: CALL_OW 449
24244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_VAR 0 5
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 275
24262: PUSH
24263: LD_VAR 0 4
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: GREATEREQUAL
24272: PUSH
24273: LD_VAR 0 5
24277: PPUSH
24278: LD_INT 2
24280: PPUSH
24281: CALL_OW 275
24285: PUSH
24286: LD_VAR 0 4
24290: PUSH
24291: LD_INT 2
24293: ARRAY
24294: GREATEREQUAL
24295: AND
24296: PUSH
24297: LD_VAR 0 5
24301: PPUSH
24302: LD_INT 3
24304: PPUSH
24305: CALL_OW 275
24309: PUSH
24310: LD_VAR 0 4
24314: PUSH
24315: LD_INT 3
24317: ARRAY
24318: GREATEREQUAL
24319: AND
24320: ST_TO_ADDR
// end ;
24321: LD_VAR 0 3
24325: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24326: LD_INT 0
24328: PPUSH
24329: PPUSH
24330: PPUSH
24331: PPUSH
// pom := GetBase ( building ) ;
24332: LD_ADDR_VAR 0 3
24336: PUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 274
24346: ST_TO_ADDR
// if not pom then
24347: LD_VAR 0 3
24351: NOT
24352: IFFALSE 24356
// exit ;
24354: GO 24526
// btype := GetBType ( building ) ;
24356: LD_ADDR_VAR 0 5
24360: PUSH
24361: LD_VAR 0 1
24365: PPUSH
24366: CALL_OW 266
24370: ST_TO_ADDR
// if btype = b_armoury then
24371: LD_VAR 0 5
24375: PUSH
24376: LD_INT 4
24378: EQUAL
24379: IFFALSE 24389
// btype := b_barracks ;
24381: LD_ADDR_VAR 0 5
24385: PUSH
24386: LD_INT 5
24388: ST_TO_ADDR
// if btype = b_depot then
24389: LD_VAR 0 5
24393: PUSH
24394: LD_INT 0
24396: EQUAL
24397: IFFALSE 24407
// btype := b_warehouse ;
24399: LD_ADDR_VAR 0 5
24403: PUSH
24404: LD_INT 1
24406: ST_TO_ADDR
// if btype = b_workshop then
24407: LD_VAR 0 5
24411: PUSH
24412: LD_INT 2
24414: EQUAL
24415: IFFALSE 24425
// btype := b_factory ;
24417: LD_ADDR_VAR 0 5
24421: PUSH
24422: LD_INT 3
24424: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_VAR 0 5
24434: PPUSH
24435: LD_VAR 0 1
24439: PPUSH
24440: CALL_OW 248
24444: PPUSH
24445: CALL_OW 450
24449: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: LD_VAR 0 3
24459: PPUSH
24460: LD_INT 1
24462: PPUSH
24463: CALL_OW 275
24467: PUSH
24468: LD_VAR 0 4
24472: PUSH
24473: LD_INT 1
24475: ARRAY
24476: GREATEREQUAL
24477: PUSH
24478: LD_VAR 0 3
24482: PPUSH
24483: LD_INT 2
24485: PPUSH
24486: CALL_OW 275
24490: PUSH
24491: LD_VAR 0 4
24495: PUSH
24496: LD_INT 2
24498: ARRAY
24499: GREATEREQUAL
24500: AND
24501: PUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: LD_INT 3
24509: PPUSH
24510: CALL_OW 275
24514: PUSH
24515: LD_VAR 0 4
24519: PUSH
24520: LD_INT 3
24522: ARRAY
24523: GREATEREQUAL
24524: AND
24525: ST_TO_ADDR
// end ;
24526: LD_VAR 0 2
24530: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
24535: PPUSH
// pom := GetBase ( building ) ;
24536: LD_ADDR_VAR 0 4
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 274
24550: ST_TO_ADDR
// if not pom then
24551: LD_VAR 0 4
24555: NOT
24556: IFFALSE 24560
// exit ;
24558: GO 24661
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24560: LD_ADDR_VAR 0 5
24564: PUSH
24565: LD_VAR 0 2
24569: PPUSH
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 248
24579: PPUSH
24580: CALL_OW 450
24584: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_VAR 0 4
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 275
24602: PUSH
24603: LD_VAR 0 5
24607: PUSH
24608: LD_INT 1
24610: ARRAY
24611: GREATEREQUAL
24612: PUSH
24613: LD_VAR 0 4
24617: PPUSH
24618: LD_INT 2
24620: PPUSH
24621: CALL_OW 275
24625: PUSH
24626: LD_VAR 0 5
24630: PUSH
24631: LD_INT 2
24633: ARRAY
24634: GREATEREQUAL
24635: AND
24636: PUSH
24637: LD_VAR 0 4
24641: PPUSH
24642: LD_INT 3
24644: PPUSH
24645: CALL_OW 275
24649: PUSH
24650: LD_VAR 0 5
24654: PUSH
24655: LD_INT 3
24657: ARRAY
24658: GREATEREQUAL
24659: AND
24660: ST_TO_ADDR
// end ;
24661: LD_VAR 0 3
24665: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
24678: PPUSH
// result := false ;
24679: LD_ADDR_VAR 0 8
24683: PUSH
24684: LD_INT 0
24686: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24687: LD_VAR 0 5
24691: NOT
24692: PUSH
24693: LD_VAR 0 1
24697: NOT
24698: OR
24699: PUSH
24700: LD_VAR 0 2
24704: NOT
24705: OR
24706: PUSH
24707: LD_VAR 0 3
24711: NOT
24712: OR
24713: IFFALSE 24717
// exit ;
24715: GO 25531
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24717: LD_ADDR_VAR 0 14
24721: PUSH
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_VAR 0 2
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: LD_VAR 0 4
24741: PPUSH
24742: LD_VAR 0 5
24746: PUSH
24747: LD_INT 1
24749: ARRAY
24750: PPUSH
24751: CALL_OW 248
24755: PPUSH
24756: LD_INT 0
24758: PPUSH
24759: CALL 26768 0 6
24763: ST_TO_ADDR
// if not hexes then
24764: LD_VAR 0 14
24768: NOT
24769: IFFALSE 24773
// exit ;
24771: GO 25531
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24773: LD_ADDR_VAR 0 17
24777: PUSH
24778: LD_VAR 0 5
24782: PPUSH
24783: LD_INT 22
24785: PUSH
24786: LD_VAR 0 13
24790: PPUSH
24791: CALL_OW 255
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 30
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 30
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 72
24836: ST_TO_ADDR
// for i = 1 to hexes do
24837: LD_ADDR_VAR 0 9
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_VAR 0 14
24851: PUSH
24852: FOR_TO
24853: IFFALSE 25529
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24855: LD_ADDR_VAR 0 13
24859: PUSH
24860: LD_VAR 0 14
24864: PUSH
24865: LD_VAR 0 9
24869: ARRAY
24870: PUSH
24871: LD_INT 1
24873: ARRAY
24874: PPUSH
24875: LD_VAR 0 14
24879: PUSH
24880: LD_VAR 0 9
24884: ARRAY
24885: PUSH
24886: LD_INT 2
24888: ARRAY
24889: PPUSH
24890: CALL_OW 428
24894: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24895: LD_VAR 0 14
24899: PUSH
24900: LD_VAR 0 9
24904: ARRAY
24905: PUSH
24906: LD_INT 1
24908: ARRAY
24909: PPUSH
24910: LD_VAR 0 14
24914: PUSH
24915: LD_VAR 0 9
24919: ARRAY
24920: PUSH
24921: LD_INT 2
24923: ARRAY
24924: PPUSH
24925: CALL_OW 351
24929: PUSH
24930: LD_VAR 0 14
24934: PUSH
24935: LD_VAR 0 9
24939: ARRAY
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: PPUSH
24945: LD_VAR 0 14
24949: PUSH
24950: LD_VAR 0 9
24954: ARRAY
24955: PUSH
24956: LD_INT 2
24958: ARRAY
24959: PPUSH
24960: CALL_OW 488
24964: NOT
24965: OR
24966: PUSH
24967: LD_VAR 0 13
24971: PPUSH
24972: CALL_OW 247
24976: PUSH
24977: LD_INT 3
24979: EQUAL
24980: OR
24981: IFFALSE 24987
// exit ;
24983: POP
24984: POP
24985: GO 25531
// if not tmp then
24987: LD_VAR 0 13
24991: NOT
24992: IFFALSE 24996
// continue ;
24994: GO 24852
// result := true ;
24996: LD_ADDR_VAR 0 8
25000: PUSH
25001: LD_INT 1
25003: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25004: LD_VAR 0 6
25008: PUSH
25009: LD_VAR 0 13
25013: PPUSH
25014: CALL_OW 247
25018: PUSH
25019: LD_INT 2
25021: EQUAL
25022: AND
25023: PUSH
25024: LD_VAR 0 13
25028: PPUSH
25029: CALL_OW 263
25033: PUSH
25034: LD_INT 1
25036: EQUAL
25037: AND
25038: IFFALSE 25202
// begin if IsDrivenBy ( tmp ) then
25040: LD_VAR 0 13
25044: PPUSH
25045: CALL_OW 311
25049: IFFALSE 25053
// continue ;
25051: GO 24852
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25053: LD_VAR 0 6
25057: PPUSH
25058: LD_INT 3
25060: PUSH
25061: LD_INT 60
25063: PUSH
25064: EMPTY
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 55
25076: PUSH
25077: EMPTY
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PPUSH
25088: CALL_OW 72
25092: IFFALSE 25200
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25094: LD_ADDR_VAR 0 18
25098: PUSH
25099: LD_VAR 0 6
25103: PPUSH
25104: LD_INT 3
25106: PUSH
25107: LD_INT 60
25109: PUSH
25110: EMPTY
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: LD_INT 55
25122: PUSH
25123: EMPTY
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PPUSH
25134: CALL_OW 72
25138: PUSH
25139: LD_INT 1
25141: ARRAY
25142: ST_TO_ADDR
// if IsInUnit ( driver ) then
25143: LD_VAR 0 18
25147: PPUSH
25148: CALL_OW 310
25152: IFFALSE 25163
// ComExit ( driver ) ;
25154: LD_VAR 0 18
25158: PPUSH
25159: CALL 49896 0 1
// AddComEnterUnit ( driver , tmp ) ;
25163: LD_VAR 0 18
25167: PPUSH
25168: LD_VAR 0 13
25172: PPUSH
25173: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25177: LD_VAR 0 18
25181: PPUSH
25182: LD_VAR 0 7
25186: PPUSH
25187: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25191: LD_VAR 0 18
25195: PPUSH
25196: CALL_OW 181
// end ; continue ;
25200: GO 24852
// end ; if not cleaners or not tmp in cleaners then
25202: LD_VAR 0 6
25206: NOT
25207: PUSH
25208: LD_VAR 0 13
25212: PUSH
25213: LD_VAR 0 6
25217: IN
25218: NOT
25219: OR
25220: IFFALSE 25527
// begin if dep then
25222: LD_VAR 0 17
25226: IFFALSE 25362
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25228: LD_ADDR_VAR 0 16
25232: PUSH
25233: LD_VAR 0 17
25237: PUSH
25238: LD_INT 1
25240: ARRAY
25241: PPUSH
25242: CALL_OW 250
25246: PPUSH
25247: LD_VAR 0 17
25251: PUSH
25252: LD_INT 1
25254: ARRAY
25255: PPUSH
25256: CALL_OW 254
25260: PPUSH
25261: LD_INT 5
25263: PPUSH
25264: CALL_OW 272
25268: PUSH
25269: LD_VAR 0 17
25273: PUSH
25274: LD_INT 1
25276: ARRAY
25277: PPUSH
25278: CALL_OW 251
25282: PPUSH
25283: LD_VAR 0 17
25287: PUSH
25288: LD_INT 1
25290: ARRAY
25291: PPUSH
25292: CALL_OW 254
25296: PPUSH
25297: LD_INT 5
25299: PPUSH
25300: CALL_OW 273
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25309: LD_VAR 0 16
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: PPUSH
25318: LD_VAR 0 16
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: PPUSH
25327: CALL_OW 488
25331: IFFALSE 25362
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25333: LD_VAR 0 13
25337: PPUSH
25338: LD_VAR 0 16
25342: PUSH
25343: LD_INT 1
25345: ARRAY
25346: PPUSH
25347: LD_VAR 0 16
25351: PUSH
25352: LD_INT 2
25354: ARRAY
25355: PPUSH
25356: CALL_OW 111
// continue ;
25360: GO 24852
// end ; end ; r := GetDir ( tmp ) ;
25362: LD_ADDR_VAR 0 15
25366: PUSH
25367: LD_VAR 0 13
25371: PPUSH
25372: CALL_OW 254
25376: ST_TO_ADDR
// if r = 5 then
25377: LD_VAR 0 15
25381: PUSH
25382: LD_INT 5
25384: EQUAL
25385: IFFALSE 25395
// r := 0 ;
25387: LD_ADDR_VAR 0 15
25391: PUSH
25392: LD_INT 0
25394: ST_TO_ADDR
// for j = r to 5 do
25395: LD_ADDR_VAR 0 10
25399: PUSH
25400: DOUBLE
25401: LD_VAR 0 15
25405: DEC
25406: ST_TO_ADDR
25407: LD_INT 5
25409: PUSH
25410: FOR_TO
25411: IFFALSE 25525
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25413: LD_ADDR_VAR 0 11
25417: PUSH
25418: LD_VAR 0 13
25422: PPUSH
25423: CALL_OW 250
25427: PPUSH
25428: LD_VAR 0 10
25432: PPUSH
25433: LD_INT 2
25435: PPUSH
25436: CALL_OW 272
25440: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25441: LD_ADDR_VAR 0 12
25445: PUSH
25446: LD_VAR 0 13
25450: PPUSH
25451: CALL_OW 251
25455: PPUSH
25456: LD_VAR 0 10
25460: PPUSH
25461: LD_INT 2
25463: PPUSH
25464: CALL_OW 273
25468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25469: LD_VAR 0 11
25473: PPUSH
25474: LD_VAR 0 12
25478: PPUSH
25479: CALL_OW 488
25483: PUSH
25484: LD_VAR 0 11
25488: PPUSH
25489: LD_VAR 0 12
25493: PPUSH
25494: CALL_OW 428
25498: NOT
25499: AND
25500: IFFALSE 25523
// begin ComMoveXY ( tmp , _x , _y ) ;
25502: LD_VAR 0 13
25506: PPUSH
25507: LD_VAR 0 11
25511: PPUSH
25512: LD_VAR 0 12
25516: PPUSH
25517: CALL_OW 111
// break ;
25521: GO 25525
// end ; end ;
25523: GO 25410
25525: POP
25526: POP
// end ; end ;
25527: GO 24852
25529: POP
25530: POP
// end ;
25531: LD_VAR 0 8
25535: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25536: LD_INT 0
25538: PPUSH
// result := true ;
25539: LD_ADDR_VAR 0 3
25543: PUSH
25544: LD_INT 1
25546: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25547: LD_VAR 0 2
25551: PUSH
25552: LD_INT 24
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25566
25558: LD_INT 33
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25591
25566: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 32
25574: PPUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 321
25584: PUSH
25585: LD_INT 2
25587: EQUAL
25588: ST_TO_ADDR
25589: GO 25911
25591: LD_INT 20
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25599
25597: GO 25624
25599: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25600: LD_ADDR_VAR 0 3
25604: PUSH
25605: LD_INT 6
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 321
25617: PUSH
25618: LD_INT 2
25620: EQUAL
25621: ST_TO_ADDR
25622: GO 25911
25624: LD_INT 22
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25638
25630: LD_INT 36
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25638
25636: GO 25663
25638: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25639: LD_ADDR_VAR 0 3
25643: PUSH
25644: LD_INT 15
25646: PPUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 321
25656: PUSH
25657: LD_INT 2
25659: EQUAL
25660: ST_TO_ADDR
25661: GO 25911
25663: LD_INT 30
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25696
25671: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 20
25679: PPUSH
25680: LD_VAR 0 1
25684: PPUSH
25685: CALL_OW 321
25689: PUSH
25690: LD_INT 2
25692: EQUAL
25693: ST_TO_ADDR
25694: GO 25911
25696: LD_INT 28
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25710
25702: LD_INT 21
25704: DOUBLE
25705: EQUAL
25706: IFTRUE 25710
25708: GO 25735
25710: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25711: LD_ADDR_VAR 0 3
25715: PUSH
25716: LD_INT 21
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 321
25728: PUSH
25729: LD_INT 2
25731: EQUAL
25732: ST_TO_ADDR
25733: GO 25911
25735: LD_INT 16
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25770
25743: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_EXP 108
25753: PPUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 321
25763: PUSH
25764: LD_INT 2
25766: EQUAL
25767: ST_TO_ADDR
25768: GO 25911
25770: LD_INT 19
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25784
25776: LD_INT 23
25778: DOUBLE
25779: EQUAL
25780: IFTRUE 25784
25782: GO 25811
25784: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25785: LD_ADDR_VAR 0 3
25789: PUSH
25790: LD_EXP 107
25794: PPUSH
25795: LD_VAR 0 1
25799: PPUSH
25800: CALL_OW 321
25804: PUSH
25805: LD_INT 2
25807: EQUAL
25808: ST_TO_ADDR
25809: GO 25911
25811: LD_INT 17
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25844
25819: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25820: LD_ADDR_VAR 0 3
25824: PUSH
25825: LD_INT 39
25827: PPUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: CALL_OW 321
25837: PUSH
25838: LD_INT 2
25840: EQUAL
25841: ST_TO_ADDR
25842: GO 25911
25844: LD_INT 18
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25877
25852: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_INT 40
25860: PPUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 321
25870: PUSH
25871: LD_INT 2
25873: EQUAL
25874: ST_TO_ADDR
25875: GO 25911
25877: LD_INT 27
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 25910
25885: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 35
25893: PPUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: CALL_OW 321
25903: PUSH
25904: LD_INT 2
25906: EQUAL
25907: ST_TO_ADDR
25908: GO 25911
25910: POP
// end ;
25911: LD_VAR 0 3
25915: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
// result := false ;
25929: LD_ADDR_VAR 0 6
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25937: LD_VAR 0 1
25941: NOT
25942: PUSH
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 266
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: IN
25963: NOT
25964: OR
25965: PUSH
25966: LD_VAR 0 2
25970: NOT
25971: OR
25972: PUSH
25973: LD_VAR 0 5
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: LD_INT 4
25992: PUSH
25993: LD_INT 5
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: IN
26004: NOT
26005: OR
26006: PUSH
26007: LD_VAR 0 3
26011: PPUSH
26012: LD_VAR 0 4
26016: PPUSH
26017: CALL_OW 488
26021: NOT
26022: OR
26023: IFFALSE 26027
// exit ;
26025: GO 26763
// side := GetSide ( depot ) ;
26027: LD_ADDR_VAR 0 9
26031: PUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL_OW 255
26041: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26042: LD_VAR 0 9
26046: PPUSH
26047: LD_VAR 0 2
26051: PPUSH
26052: CALL 25536 0 2
26056: NOT
26057: IFFALSE 26061
// exit ;
26059: GO 26763
// pom := GetBase ( depot ) ;
26061: LD_ADDR_VAR 0 10
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 274
26075: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26076: LD_ADDR_VAR 0 11
26080: PUSH
26081: LD_VAR 0 2
26085: PPUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 248
26095: PPUSH
26096: CALL_OW 450
26100: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26101: LD_VAR 0 10
26105: PPUSH
26106: LD_INT 1
26108: PPUSH
26109: CALL_OW 275
26113: PUSH
26114: LD_VAR 0 11
26118: PUSH
26119: LD_INT 1
26121: ARRAY
26122: GREATEREQUAL
26123: PUSH
26124: LD_VAR 0 10
26128: PPUSH
26129: LD_INT 2
26131: PPUSH
26132: CALL_OW 275
26136: PUSH
26137: LD_VAR 0 11
26141: PUSH
26142: LD_INT 2
26144: ARRAY
26145: GREATEREQUAL
26146: AND
26147: PUSH
26148: LD_VAR 0 10
26152: PPUSH
26153: LD_INT 3
26155: PPUSH
26156: CALL_OW 275
26160: PUSH
26161: LD_VAR 0 11
26165: PUSH
26166: LD_INT 3
26168: ARRAY
26169: GREATEREQUAL
26170: AND
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26763
// if GetBType ( depot ) = b_depot then
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 0
26188: EQUAL
26189: IFFALSE 26201
// dist := 28 else
26191: LD_ADDR_VAR 0 14
26195: PUSH
26196: LD_INT 28
26198: ST_TO_ADDR
26199: GO 26209
// dist := 36 ;
26201: LD_ADDR_VAR 0 14
26205: PUSH
26206: LD_INT 36
26208: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26209: LD_VAR 0 1
26213: PPUSH
26214: LD_VAR 0 3
26218: PPUSH
26219: LD_VAR 0 4
26223: PPUSH
26224: CALL_OW 297
26228: PUSH
26229: LD_VAR 0 14
26233: GREATER
26234: IFFALSE 26238
// exit ;
26236: GO 26763
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26238: LD_ADDR_VAR 0 12
26242: PUSH
26243: LD_VAR 0 2
26247: PPUSH
26248: LD_VAR 0 3
26252: PPUSH
26253: LD_VAR 0 4
26257: PPUSH
26258: LD_VAR 0 5
26262: PPUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 248
26272: PPUSH
26273: LD_INT 0
26275: PPUSH
26276: CALL 26768 0 6
26280: ST_TO_ADDR
// if not hexes then
26281: LD_VAR 0 12
26285: NOT
26286: IFFALSE 26290
// exit ;
26288: GO 26763
// hex := GetHexInfo ( x , y ) ;
26290: LD_ADDR_VAR 0 15
26294: PUSH
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: CALL_OW 546
26309: ST_TO_ADDR
// if hex [ 1 ] then
26310: LD_VAR 0 15
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: IFFALSE 26322
// exit ;
26320: GO 26763
// height := hex [ 2 ] ;
26322: LD_ADDR_VAR 0 13
26326: PUSH
26327: LD_VAR 0 15
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: ST_TO_ADDR
// for i = 1 to hexes do
26336: LD_ADDR_VAR 0 7
26340: PUSH
26341: DOUBLE
26342: LD_INT 1
26344: DEC
26345: ST_TO_ADDR
26346: LD_VAR 0 12
26350: PUSH
26351: FOR_TO
26352: IFFALSE 26682
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26354: LD_VAR 0 12
26358: PUSH
26359: LD_VAR 0 7
26363: ARRAY
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: LD_VAR 0 12
26373: PUSH
26374: LD_VAR 0 7
26378: ARRAY
26379: PUSH
26380: LD_INT 2
26382: ARRAY
26383: PPUSH
26384: CALL_OW 488
26388: NOT
26389: PUSH
26390: LD_VAR 0 12
26394: PUSH
26395: LD_VAR 0 7
26399: ARRAY
26400: PUSH
26401: LD_INT 1
26403: ARRAY
26404: PPUSH
26405: LD_VAR 0 12
26409: PUSH
26410: LD_VAR 0 7
26414: ARRAY
26415: PUSH
26416: LD_INT 2
26418: ARRAY
26419: PPUSH
26420: CALL_OW 428
26424: PUSH
26425: LD_INT 0
26427: GREATER
26428: OR
26429: PUSH
26430: LD_VAR 0 12
26434: PUSH
26435: LD_VAR 0 7
26439: ARRAY
26440: PUSH
26441: LD_INT 1
26443: ARRAY
26444: PPUSH
26445: LD_VAR 0 12
26449: PUSH
26450: LD_VAR 0 7
26454: ARRAY
26455: PUSH
26456: LD_INT 2
26458: ARRAY
26459: PPUSH
26460: CALL_OW 351
26464: OR
26465: IFFALSE 26471
// exit ;
26467: POP
26468: POP
26469: GO 26763
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26471: LD_ADDR_VAR 0 8
26475: PUSH
26476: LD_VAR 0 12
26480: PUSH
26481: LD_VAR 0 7
26485: ARRAY
26486: PUSH
26487: LD_INT 1
26489: ARRAY
26490: PPUSH
26491: LD_VAR 0 12
26495: PUSH
26496: LD_VAR 0 7
26500: ARRAY
26501: PUSH
26502: LD_INT 2
26504: ARRAY
26505: PPUSH
26506: CALL_OW 546
26510: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26511: LD_VAR 0 8
26515: PUSH
26516: LD_INT 1
26518: ARRAY
26519: PUSH
26520: LD_VAR 0 8
26524: PUSH
26525: LD_INT 2
26527: ARRAY
26528: PUSH
26529: LD_VAR 0 13
26533: PUSH
26534: LD_INT 2
26536: PLUS
26537: GREATER
26538: OR
26539: PUSH
26540: LD_VAR 0 8
26544: PUSH
26545: LD_INT 2
26547: ARRAY
26548: PUSH
26549: LD_VAR 0 13
26553: PUSH
26554: LD_INT 2
26556: MINUS
26557: LESS
26558: OR
26559: PUSH
26560: LD_VAR 0 8
26564: PUSH
26565: LD_INT 3
26567: ARRAY
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 8
26574: PUSH
26575: LD_INT 9
26577: PUSH
26578: LD_INT 10
26580: PUSH
26581: LD_INT 11
26583: PUSH
26584: LD_INT 12
26586: PUSH
26587: LD_INT 13
26589: PUSH
26590: LD_INT 16
26592: PUSH
26593: LD_INT 17
26595: PUSH
26596: LD_INT 18
26598: PUSH
26599: LD_INT 19
26601: PUSH
26602: LD_INT 20
26604: PUSH
26605: LD_INT 21
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: IN
26623: NOT
26624: OR
26625: PUSH
26626: LD_VAR 0 8
26630: PUSH
26631: LD_INT 5
26633: ARRAY
26634: NOT
26635: OR
26636: PUSH
26637: LD_VAR 0 8
26641: PUSH
26642: LD_INT 6
26644: ARRAY
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 7
26654: PUSH
26655: LD_INT 9
26657: PUSH
26658: LD_INT 10
26660: PUSH
26661: LD_INT 11
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: IN
26672: NOT
26673: OR
26674: IFFALSE 26680
// exit ;
26676: POP
26677: POP
26678: GO 26763
// end ;
26680: GO 26351
26682: POP
26683: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26684: LD_VAR 0 9
26688: PPUSH
26689: LD_VAR 0 3
26693: PPUSH
26694: LD_VAR 0 4
26698: PPUSH
26699: LD_INT 20
26701: PPUSH
26702: CALL 18601 0 4
26706: PUSH
26707: LD_INT 4
26709: ARRAY
26710: IFFALSE 26714
// exit ;
26712: GO 26763
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26714: LD_VAR 0 2
26718: PUSH
26719: LD_INT 29
26721: PUSH
26722: LD_INT 30
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: IN
26729: PUSH
26730: LD_VAR 0 3
26734: PPUSH
26735: LD_VAR 0 4
26739: PPUSH
26740: LD_VAR 0 9
26744: PPUSH
26745: CALL_OW 440
26749: NOT
26750: AND
26751: IFFALSE 26755
// exit ;
26753: GO 26763
// result := true ;
26755: LD_ADDR_VAR 0 6
26759: PUSH
26760: LD_INT 1
26762: ST_TO_ADDR
// end ;
26763: LD_VAR 0 6
26767: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26768: LD_INT 0
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
26820: PPUSH
26821: PPUSH
26822: PPUSH
26823: PPUSH
26824: PPUSH
26825: PPUSH
26826: PPUSH
26827: PPUSH
// result = [ ] ;
26828: LD_ADDR_VAR 0 7
26832: PUSH
26833: EMPTY
26834: ST_TO_ADDR
// temp_list = [ ] ;
26835: LD_ADDR_VAR 0 9
26839: PUSH
26840: EMPTY
26841: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26842: LD_VAR 0 4
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: LD_INT 5
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: IN
26873: NOT
26874: PUSH
26875: LD_VAR 0 1
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: IN
26890: PUSH
26891: LD_VAR 0 5
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: IN
26910: NOT
26911: AND
26912: OR
26913: IFFALSE 26917
// exit ;
26915: GO 45308
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26917: LD_VAR 0 1
26921: PUSH
26922: LD_INT 6
26924: PUSH
26925: LD_INT 7
26927: PUSH
26928: LD_INT 8
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 12
26936: PUSH
26937: LD_INT 15
26939: PUSH
26940: LD_INT 11
26942: PUSH
26943: LD_INT 14
26945: PUSH
26946: LD_INT 10
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: IN
26960: IFFALSE 26970
// btype = b_lab ;
26962: LD_ADDR_VAR 0 1
26966: PUSH
26967: LD_INT 6
26969: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26970: LD_VAR 0 6
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: IN
26989: NOT
26990: PUSH
26991: LD_VAR 0 1
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 6
27010: PUSH
27011: LD_INT 36
27013: PUSH
27014: LD_INT 4
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 31
27022: PUSH
27023: LD_INT 32
27025: PUSH
27026: LD_INT 33
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: IN
27042: NOT
27043: PUSH
27044: LD_VAR 0 6
27048: PUSH
27049: LD_INT 1
27051: EQUAL
27052: AND
27053: OR
27054: PUSH
27055: LD_VAR 0 1
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: LD_INT 3
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: IN
27070: NOT
27071: PUSH
27072: LD_VAR 0 6
27076: PUSH
27077: LD_INT 2
27079: EQUAL
27080: AND
27081: OR
27082: IFFALSE 27092
// mode = 0 ;
27084: LD_ADDR_VAR 0 6
27088: PUSH
27089: LD_INT 0
27091: ST_TO_ADDR
// case mode of 0 :
27092: LD_VAR 0 6
27096: PUSH
27097: LD_INT 0
27099: DOUBLE
27100: EQUAL
27101: IFTRUE 27105
27103: GO 38558
27105: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27106: LD_ADDR_VAR 0 11
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 2
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: LD_INT 2
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 3
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27299: LD_ADDR_VAR 0 12
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 3
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 3
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27495: LD_ADDR_VAR 0 13
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 2
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: LD_INT 3
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 3
27654: NEG
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: LD_INT 3
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27694: LD_ADDR_VAR 0 14
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 3
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 3
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27890: LD_ADDR_VAR 0 15
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28083: LD_ADDR_VAR 0 16
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28276: LD_ADDR_VAR 0 17
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 2
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 2
28452: NEG
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: LD_INT 2
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28506: LD_ADDR_VAR 0 18
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: NEG
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 2
28705: NEG
28706: PUSH
28707: LD_INT 2
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28736: LD_ADDR_VAR 0 19
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28966: LD_ADDR_VAR 0 20
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 2
29142: NEG
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 2
29153: NEG
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: LD_INT 2
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29196: LD_ADDR_VAR 0 21
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: NEG
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: NEG
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29426: LD_ADDR_VAR 0 22
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: LD_INT 1
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29656: LD_ADDR_VAR 0 23
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 3
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29936: LD_ADDR_VAR 0 24
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 2
30135: NEG
30136: PUSH
30137: LD_INT 2
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30212: LD_ADDR_VAR 0 25
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 2
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30486: LD_ADDR_VAR 0 26
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30762: LD_ADDR_VAR 0 27
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31042: LD_ADDR_VAR 0 28
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 2
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: LD_INT 3
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 3
31277: NEG
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31324: LD_ADDR_VAR 0 29
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: NEG
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 3
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31603: LD_ADDR_VAR 0 30
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 3
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: PUSH
31826: LD_INT 3
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31881: LD_ADDR_VAR 0 31
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: NEG
32071: PUSH
32072: LD_INT 3
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: LD_INT 2
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32159: LD_ADDR_VAR 0 32
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: PUSH
32382: LD_INT 3
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32437: LD_ADDR_VAR 0 33
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: NEG
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 3
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: LD_INT 2
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32716: LD_ADDR_VAR 0 34
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 3
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32996: LD_ADDR_VAR 0 35
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33108: LD_ADDR_VAR 0 36
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: LD_INT 2
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33220: LD_ADDR_VAR 0 37
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33332: LD_ADDR_VAR 0 38
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33444: LD_ADDR_VAR 0 39
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33556: LD_ADDR_VAR 0 40
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33668: LD_ADDR_VAR 0 41
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 3
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 3
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34018: LD_ADDR_VAR 0 42
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 2
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 3
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 3
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 3
34327: NEG
34328: PUSH
34329: LD_INT 3
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34368: LD_ADDR_VAR 0 43
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 2
34545: NEG
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 3
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 2
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 3
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 3
34664: NEG
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 3
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34716: LD_ADDR_VAR 0 44
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 3
34990: NEG
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 3
35001: NEG
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 3
35013: NEG
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: NEG
35026: PUSH
35027: LD_INT 3
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35066: LD_ADDR_VAR 0 45
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: LD_INT 3
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 3
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 2
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 3
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 3
35363: NEG
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 3
35375: NEG
35376: PUSH
35377: LD_INT 3
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35416: LD_ADDR_VAR 0 46
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: LD_INT 3
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 3
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 3
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 3
35723: NEG
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35764: LD_ADDR_VAR 0 47
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35915: LD_ADDR_VAR 0 48
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36062: LD_ADDR_VAR 0 49
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36206: LD_ADDR_VAR 0 50
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36350: LD_ADDR_VAR 0 51
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36497: LD_ADDR_VAR 0 52
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: NEG
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36648: LD_ADDR_VAR 0 53
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36878: LD_ADDR_VAR 0 54
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37108: LD_ADDR_VAR 0 55
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37338: LD_ADDR_VAR 0 56
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37568: LD_ADDR_VAR 0 57
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37798: LD_ADDR_VAR 0 58
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38028: LD_ADDR_VAR 0 59
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38116: LD_ADDR_VAR 0 60
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38204: LD_ADDR_VAR 0 61
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38292: LD_ADDR_VAR 0 62
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38380: LD_ADDR_VAR 0 63
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38468: LD_ADDR_VAR 0 64
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// end ; 1 :
38556: GO 44453
38558: LD_INT 1
38560: DOUBLE
38561: EQUAL
38562: IFTRUE 38566
38564: GO 41189
38566: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38567: LD_ADDR_VAR 0 11
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 3
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 3
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 2
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38611: LD_ADDR_VAR 0 12
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38652: LD_ADDR_VAR 0 13
38656: PUSH
38657: LD_INT 3
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38692: LD_ADDR_VAR 0 14
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38733: LD_ADDR_VAR 0 15
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38777: LD_ADDR_VAR 0 16
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 3
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 3
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 3
38808: NEG
38809: PUSH
38810: LD_INT 3
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38823: LD_ADDR_VAR 0 17
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 3
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38867: LD_ADDR_VAR 0 18
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 3
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38908: LD_ADDR_VAR 0 19
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 3
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38948: LD_ADDR_VAR 0 20
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38989: LD_ADDR_VAR 0 21
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 3
39007: NEG
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 3
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39033: LD_ADDR_VAR 0 22
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 3
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: LD_INT 3
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39079: LD_ADDR_VAR 0 23
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 3
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 4
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39123: LD_ADDR_VAR 0 24
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 4
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39164: LD_ADDR_VAR 0 25
39168: PUSH
39169: LD_INT 3
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 4
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39204: LD_ADDR_VAR 0 26
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 4
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39245: LD_ADDR_VAR 0 27
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 4
39274: NEG
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39289: LD_ADDR_VAR 0 28
39293: PUSH
39294: LD_INT 3
39296: NEG
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: LD_INT 4
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 4
39320: NEG
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39335: LD_ADDR_VAR 0 29
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 3
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 4
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 5
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 5
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 4
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 6
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 6
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 5
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39490: LD_ADDR_VAR 0 30
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 4
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 4
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 4
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 5
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 6
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 6
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39633: LD_ADDR_VAR 0 31
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 4
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 4
39680: PUSH
39681: LD_INT 4
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: LD_INT 4
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: LD_INT 4
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 5
39710: PUSH
39711: LD_INT 5
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 4
39720: PUSH
39721: LD_INT 5
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 6
39730: PUSH
39731: LD_INT 5
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 6
39740: PUSH
39741: LD_INT 6
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 5
39750: PUSH
39751: LD_INT 6
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39772: LD_ADDR_VAR 0 32
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 4
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 4
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 3
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 5
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 5
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 4
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 6
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 6
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 5
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39915: LD_ADDR_VAR 0 33
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 4
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 4
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 4
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 5
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 5
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 5
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 6
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 6
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40070: LD_ADDR_VAR 0 34
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 3
40101: NEG
40102: PUSH
40103: LD_INT 3
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 3
40113: NEG
40114: PUSH
40115: LD_INT 4
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 4
40125: NEG
40126: PUSH
40127: LD_INT 3
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 4
40137: NEG
40138: PUSH
40139: LD_INT 4
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 4
40149: NEG
40150: PUSH
40151: LD_INT 5
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 5
40161: NEG
40162: PUSH
40163: LD_INT 4
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 5
40173: NEG
40174: PUSH
40175: LD_INT 5
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 5
40185: NEG
40186: PUSH
40187: LD_INT 6
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 6
40197: NEG
40198: PUSH
40199: LD_INT 5
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 6
40209: NEG
40210: PUSH
40211: LD_INT 6
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40233: LD_ADDR_VAR 0 41
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 3
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40277: LD_ADDR_VAR 0 42
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40318: LD_ADDR_VAR 0 43
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40358: LD_ADDR_VAR 0 44
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40399: LD_ADDR_VAR 0 45
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 3
40428: NEG
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40443: LD_ADDR_VAR 0 46
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 3
40474: NEG
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40489: LD_ADDR_VAR 0 47
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40522: LD_ADDR_VAR 0 48
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40553: LD_ADDR_VAR 0 49
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40582: LD_ADDR_VAR 0 50
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40611: LD_ADDR_VAR 0 51
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40642: LD_ADDR_VAR 0 52
40646: PUSH
40647: LD_INT 3
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40675: LD_ADDR_VAR 0 53
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40719: LD_ADDR_VAR 0 54
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40760: LD_ADDR_VAR 0 55
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 3
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40800: LD_ADDR_VAR 0 56
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 3
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40841: LD_ADDR_VAR 0 57
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 3
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40885: LD_ADDR_VAR 0 58
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: LD_INT 3
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 3
40904: NEG
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 3
40916: NEG
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40931: LD_ADDR_VAR 0 59
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40975: LD_ADDR_VAR 0 60
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41016: LD_ADDR_VAR 0 61
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41056: LD_ADDR_VAR 0 62
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41097: LD_ADDR_VAR 0 63
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41141: LD_ADDR_VAR 0 64
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// end ; 2 :
41187: GO 44453
41189: LD_INT 2
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 44452
41197: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41198: LD_ADDR_VAR 0 29
41202: PUSH
41203: LD_INT 4
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 4
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 4
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 5
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 4
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 4
41328: PUSH
41329: LD_INT 4
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 3
41338: PUSH
41339: LD_INT 4
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 3
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 4
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 4
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 4
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 5
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: LD_INT 4
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 5
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 3
41481: NEG
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 4
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 4
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 4
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 4
41583: NEG
41584: PUSH
41585: LD_INT 4
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 4
41595: NEG
41596: PUSH
41597: LD_INT 5
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: LD_INT 4
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 3
41619: NEG
41620: PUSH
41621: LD_INT 3
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 4
41631: NEG
41632: PUSH
41633: LD_INT 3
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 5
41643: NEG
41644: PUSH
41645: LD_INT 4
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 5
41655: NEG
41656: PUSH
41657: LD_INT 5
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: NEG
41668: PUSH
41669: LD_INT 5
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 5
41679: NEG
41680: PUSH
41681: LD_INT 3
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41736: LD_ADDR_VAR 0 30
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 4
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 5
41763: PUSH
41764: LD_INT 4
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 5
41773: PUSH
41774: LD_INT 5
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 4
41783: PUSH
41784: LD_INT 5
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 4
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 5
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 4
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 4
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 4
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 4
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 5
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 5
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 5
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: NEG
42029: PUSH
42030: LD_INT 3
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: LD_INT 4
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 4
42088: NEG
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 4
42100: NEG
42101: PUSH
42102: LD_INT 4
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 4
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 4
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 4
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 5
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 4
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 4
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 5
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 3
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 5
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42283: LD_ADDR_VAR 0 31
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 4
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 5
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 4
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 5
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 3
42383: NEG
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 3
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 4
42439: NEG
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 4
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 4
42462: NEG
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 4
42485: NEG
42486: PUSH
42487: LD_INT 4
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 4
42497: NEG
42498: PUSH
42499: LD_INT 5
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: LD_INT 4
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 4
42533: NEG
42534: PUSH
42535: LD_INT 3
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 5
42545: NEG
42546: PUSH
42547: LD_INT 4
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 5
42557: NEG
42558: PUSH
42559: LD_INT 5
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 5
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 5
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 3
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 4
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 4
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 4
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 5
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 5
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 4
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42833: LD_ADDR_VAR 0 32
42837: PUSH
42838: LD_INT 4
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 4
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 4
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 5
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 5
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 5
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: LD_INT 4
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 4
43002: NEG
43003: PUSH
43004: LD_INT 3
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 4
43014: NEG
43015: PUSH
43016: LD_INT 4
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 4
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 4
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 4
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 5
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 4
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 4
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 5
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 5
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 4
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 4
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 4
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 4
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 5
43265: PUSH
43266: LD_INT 4
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: LD_INT 5
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 4
43285: PUSH
43286: LD_INT 5
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: LD_INT 4
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43380: LD_ADDR_VAR 0 33
43384: PUSH
43385: LD_INT 4
43387: NEG
43388: PUSH
43389: LD_INT 4
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 4
43399: NEG
43400: PUSH
43401: LD_INT 5
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: LD_INT 4
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 3
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 4
43435: NEG
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 5
43447: NEG
43448: PUSH
43449: LD_INT 4
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 5
43459: NEG
43460: PUSH
43461: LD_INT 5
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: LD_INT 5
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 5
43483: NEG
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 4
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 4
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 4
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 4
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 4
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 5
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 5
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 3
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 4
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: LD_INT 4
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 4
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 4
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 4
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 4
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 4
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 5
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43918: LD_ADDR_VAR 0 34
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 4
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 5
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 4
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 4
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 5
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 3
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 5
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 4
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 4
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 4
44120: PUSH
44121: LD_INT 4
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 4
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 5
44140: PUSH
44141: LD_INT 4
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 5
44150: PUSH
44151: LD_INT 5
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 4
44160: PUSH
44161: LD_INT 5
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: LD_INT 4
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 5
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 5
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 4
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 4
44303: NEG
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 4
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 4
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 5
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 5
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 5
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 3
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// end ; end ;
44450: GO 44453
44452: POP
// case btype of b_depot , b_warehouse :
44453: LD_VAR 0 1
44457: PUSH
44458: LD_INT 0
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44472
44464: LD_INT 1
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44673
44472: POP
// case nation of nation_american :
44473: LD_VAR 0 5
44477: PUSH
44478: LD_INT 1
44480: DOUBLE
44481: EQUAL
44482: IFTRUE 44486
44484: GO 44542
44486: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44487: LD_ADDR_VAR 0 9
44491: PUSH
44492: LD_VAR 0 11
44496: PUSH
44497: LD_VAR 0 12
44501: PUSH
44502: LD_VAR 0 13
44506: PUSH
44507: LD_VAR 0 14
44511: PUSH
44512: LD_VAR 0 15
44516: PUSH
44517: LD_VAR 0 16
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: PUSH
44530: LD_VAR 0 4
44534: PUSH
44535: LD_INT 1
44537: PLUS
44538: ARRAY
44539: ST_TO_ADDR
44540: GO 44671
44542: LD_INT 2
44544: DOUBLE
44545: EQUAL
44546: IFTRUE 44550
44548: GO 44606
44550: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44551: LD_ADDR_VAR 0 9
44555: PUSH
44556: LD_VAR 0 17
44560: PUSH
44561: LD_VAR 0 18
44565: PUSH
44566: LD_VAR 0 19
44570: PUSH
44571: LD_VAR 0 20
44575: PUSH
44576: LD_VAR 0 21
44580: PUSH
44581: LD_VAR 0 22
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: PUSH
44594: LD_VAR 0 4
44598: PUSH
44599: LD_INT 1
44601: PLUS
44602: ARRAY
44603: ST_TO_ADDR
44604: GO 44671
44606: LD_INT 3
44608: DOUBLE
44609: EQUAL
44610: IFTRUE 44614
44612: GO 44670
44614: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44615: LD_ADDR_VAR 0 9
44619: PUSH
44620: LD_VAR 0 23
44624: PUSH
44625: LD_VAR 0 24
44629: PUSH
44630: LD_VAR 0 25
44634: PUSH
44635: LD_VAR 0 26
44639: PUSH
44640: LD_VAR 0 27
44644: PUSH
44645: LD_VAR 0 28
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: PUSH
44658: LD_VAR 0 4
44662: PUSH
44663: LD_INT 1
44665: PLUS
44666: ARRAY
44667: ST_TO_ADDR
44668: GO 44671
44670: POP
44671: GO 45226
44673: LD_INT 2
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44687
44679: LD_INT 3
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44687
44685: GO 44743
44687: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44688: LD_ADDR_VAR 0 9
44692: PUSH
44693: LD_VAR 0 29
44697: PUSH
44698: LD_VAR 0 30
44702: PUSH
44703: LD_VAR 0 31
44707: PUSH
44708: LD_VAR 0 32
44712: PUSH
44713: LD_VAR 0 33
44717: PUSH
44718: LD_VAR 0 34
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: PUSH
44731: LD_VAR 0 4
44735: PUSH
44736: LD_INT 1
44738: PLUS
44739: ARRAY
44740: ST_TO_ADDR
44741: GO 45226
44743: LD_INT 16
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44805
44749: LD_INT 17
44751: DOUBLE
44752: EQUAL
44753: IFTRUE 44805
44755: LD_INT 18
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44805
44761: LD_INT 19
44763: DOUBLE
44764: EQUAL
44765: IFTRUE 44805
44767: LD_INT 22
44769: DOUBLE
44770: EQUAL
44771: IFTRUE 44805
44773: LD_INT 20
44775: DOUBLE
44776: EQUAL
44777: IFTRUE 44805
44779: LD_INT 21
44781: DOUBLE
44782: EQUAL
44783: IFTRUE 44805
44785: LD_INT 23
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44805
44791: LD_INT 24
44793: DOUBLE
44794: EQUAL
44795: IFTRUE 44805
44797: LD_INT 25
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44805
44803: GO 44861
44805: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44806: LD_ADDR_VAR 0 9
44810: PUSH
44811: LD_VAR 0 35
44815: PUSH
44816: LD_VAR 0 36
44820: PUSH
44821: LD_VAR 0 37
44825: PUSH
44826: LD_VAR 0 38
44830: PUSH
44831: LD_VAR 0 39
44835: PUSH
44836: LD_VAR 0 40
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: PUSH
44849: LD_VAR 0 4
44853: PUSH
44854: LD_INT 1
44856: PLUS
44857: ARRAY
44858: ST_TO_ADDR
44859: GO 45226
44861: LD_INT 6
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44917
44867: LD_INT 7
44869: DOUBLE
44870: EQUAL
44871: IFTRUE 44917
44873: LD_INT 8
44875: DOUBLE
44876: EQUAL
44877: IFTRUE 44917
44879: LD_INT 13
44881: DOUBLE
44882: EQUAL
44883: IFTRUE 44917
44885: LD_INT 12
44887: DOUBLE
44888: EQUAL
44889: IFTRUE 44917
44891: LD_INT 15
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44917
44897: LD_INT 11
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44917
44903: LD_INT 14
44905: DOUBLE
44906: EQUAL
44907: IFTRUE 44917
44909: LD_INT 10
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44917
44915: GO 44973
44917: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_VAR 0 41
44927: PUSH
44928: LD_VAR 0 42
44932: PUSH
44933: LD_VAR 0 43
44937: PUSH
44938: LD_VAR 0 44
44942: PUSH
44943: LD_VAR 0 45
44947: PUSH
44948: LD_VAR 0 46
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: PUSH
44961: LD_VAR 0 4
44965: PUSH
44966: LD_INT 1
44968: PLUS
44969: ARRAY
44970: ST_TO_ADDR
44971: GO 45226
44973: LD_INT 36
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44981
44979: GO 45037
44981: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44982: LD_ADDR_VAR 0 9
44986: PUSH
44987: LD_VAR 0 47
44991: PUSH
44992: LD_VAR 0 48
44996: PUSH
44997: LD_VAR 0 49
45001: PUSH
45002: LD_VAR 0 50
45006: PUSH
45007: LD_VAR 0 51
45011: PUSH
45012: LD_VAR 0 52
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: PUSH
45025: LD_VAR 0 4
45029: PUSH
45030: LD_INT 1
45032: PLUS
45033: ARRAY
45034: ST_TO_ADDR
45035: GO 45226
45037: LD_INT 4
45039: DOUBLE
45040: EQUAL
45041: IFTRUE 45063
45043: LD_INT 5
45045: DOUBLE
45046: EQUAL
45047: IFTRUE 45063
45049: LD_INT 34
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45063
45055: LD_INT 37
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45063
45061: GO 45119
45063: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: LD_VAR 0 53
45073: PUSH
45074: LD_VAR 0 54
45078: PUSH
45079: LD_VAR 0 55
45083: PUSH
45084: LD_VAR 0 56
45088: PUSH
45089: LD_VAR 0 57
45093: PUSH
45094: LD_VAR 0 58
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: LD_VAR 0 4
45111: PUSH
45112: LD_INT 1
45114: PLUS
45115: ARRAY
45116: ST_TO_ADDR
45117: GO 45226
45119: LD_INT 31
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45169
45125: LD_INT 32
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45169
45131: LD_INT 33
45133: DOUBLE
45134: EQUAL
45135: IFTRUE 45169
45137: LD_INT 27
45139: DOUBLE
45140: EQUAL
45141: IFTRUE 45169
45143: LD_INT 26
45145: DOUBLE
45146: EQUAL
45147: IFTRUE 45169
45149: LD_INT 28
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45169
45155: LD_INT 29
45157: DOUBLE
45158: EQUAL
45159: IFTRUE 45169
45161: LD_INT 30
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45225
45169: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45170: LD_ADDR_VAR 0 9
45174: PUSH
45175: LD_VAR 0 59
45179: PUSH
45180: LD_VAR 0 60
45184: PUSH
45185: LD_VAR 0 61
45189: PUSH
45190: LD_VAR 0 62
45194: PUSH
45195: LD_VAR 0 63
45199: PUSH
45200: LD_VAR 0 64
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: PUSH
45213: LD_VAR 0 4
45217: PUSH
45218: LD_INT 1
45220: PLUS
45221: ARRAY
45222: ST_TO_ADDR
45223: GO 45226
45225: POP
// temp_list2 = [ ] ;
45226: LD_ADDR_VAR 0 10
45230: PUSH
45231: EMPTY
45232: ST_TO_ADDR
// for i in temp_list do
45233: LD_ADDR_VAR 0 8
45237: PUSH
45238: LD_VAR 0 9
45242: PUSH
45243: FOR_IN
45244: IFFALSE 45296
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45246: LD_ADDR_VAR 0 10
45250: PUSH
45251: LD_VAR 0 10
45255: PUSH
45256: LD_VAR 0 8
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PUSH
45265: LD_VAR 0 2
45269: PLUS
45270: PUSH
45271: LD_VAR 0 8
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: PUSH
45280: LD_VAR 0 3
45284: PLUS
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: ADD
45293: ST_TO_ADDR
45294: GO 45243
45296: POP
45297: POP
// result = temp_list2 ;
45298: LD_ADDR_VAR 0 7
45302: PUSH
45303: LD_VAR 0 10
45307: ST_TO_ADDR
// end ;
45308: LD_VAR 0 7
45312: RET
// export function EnemyInRange ( unit , dist ) ; begin
45313: LD_INT 0
45315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45316: LD_ADDR_VAR 0 3
45320: PUSH
45321: LD_VAR 0 1
45325: PPUSH
45326: CALL_OW 255
45330: PPUSH
45331: LD_VAR 0 1
45335: PPUSH
45336: CALL_OW 250
45340: PPUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: CALL_OW 251
45350: PPUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: CALL 18601 0 4
45360: PUSH
45361: LD_INT 4
45363: ARRAY
45364: ST_TO_ADDR
// end ;
45365: LD_VAR 0 3
45369: RET
// export function PlayerSeeMe ( unit ) ; begin
45370: LD_INT 0
45372: PPUSH
// result := See ( your_side , unit ) ;
45373: LD_ADDR_VAR 0 2
45377: PUSH
45378: LD_OWVAR 2
45382: PPUSH
45383: LD_VAR 0 1
45387: PPUSH
45388: CALL_OW 292
45392: ST_TO_ADDR
// end ;
45393: LD_VAR 0 2
45397: RET
// export function ReverseDir ( unit ) ; begin
45398: LD_INT 0
45400: PPUSH
// if not unit then
45401: LD_VAR 0 1
45405: NOT
45406: IFFALSE 45410
// exit ;
45408: GO 45433
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45410: LD_ADDR_VAR 0 2
45414: PUSH
45415: LD_VAR 0 1
45419: PPUSH
45420: CALL_OW 254
45424: PUSH
45425: LD_INT 3
45427: PLUS
45428: PUSH
45429: LD_INT 6
45431: MOD
45432: ST_TO_ADDR
// end ;
45433: LD_VAR 0 2
45437: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45438: LD_INT 0
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
// if not hexes then
45445: LD_VAR 0 2
45449: NOT
45450: IFFALSE 45454
// exit ;
45452: GO 45602
// dist := 9999 ;
45454: LD_ADDR_VAR 0 5
45458: PUSH
45459: LD_INT 9999
45461: ST_TO_ADDR
// for i = 1 to hexes do
45462: LD_ADDR_VAR 0 4
45466: PUSH
45467: DOUBLE
45468: LD_INT 1
45470: DEC
45471: ST_TO_ADDR
45472: LD_VAR 0 2
45476: PUSH
45477: FOR_TO
45478: IFFALSE 45590
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45480: LD_VAR 0 1
45484: PPUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_VAR 0 4
45494: ARRAY
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PPUSH
45500: LD_VAR 0 2
45504: PUSH
45505: LD_VAR 0 4
45509: ARRAY
45510: PUSH
45511: LD_INT 2
45513: ARRAY
45514: PPUSH
45515: CALL_OW 297
45519: PUSH
45520: LD_VAR 0 5
45524: LESS
45525: IFFALSE 45588
// begin hex := hexes [ i ] ;
45527: LD_ADDR_VAR 0 7
45531: PUSH
45532: LD_VAR 0 2
45536: PUSH
45537: LD_VAR 0 4
45541: ARRAY
45542: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45543: LD_ADDR_VAR 0 5
45547: PUSH
45548: LD_VAR 0 1
45552: PPUSH
45553: LD_VAR 0 2
45557: PUSH
45558: LD_VAR 0 4
45562: ARRAY
45563: PUSH
45564: LD_INT 1
45566: ARRAY
45567: PPUSH
45568: LD_VAR 0 2
45572: PUSH
45573: LD_VAR 0 4
45577: ARRAY
45578: PUSH
45579: LD_INT 2
45581: ARRAY
45582: PPUSH
45583: CALL_OW 297
45587: ST_TO_ADDR
// end ; end ;
45588: GO 45477
45590: POP
45591: POP
// result := hex ;
45592: LD_ADDR_VAR 0 3
45596: PUSH
45597: LD_VAR 0 7
45601: ST_TO_ADDR
// end ;
45602: LD_VAR 0 3
45606: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45607: LD_INT 0
45609: PPUSH
45610: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45611: LD_VAR 0 1
45615: NOT
45616: PUSH
45617: LD_VAR 0 1
45621: PUSH
45622: LD_INT 21
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 23
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PPUSH
45646: CALL_OW 69
45650: IN
45651: NOT
45652: OR
45653: IFFALSE 45657
// exit ;
45655: GO 45704
// for i = 1 to 3 do
45657: LD_ADDR_VAR 0 3
45661: PUSH
45662: DOUBLE
45663: LD_INT 1
45665: DEC
45666: ST_TO_ADDR
45667: LD_INT 3
45669: PUSH
45670: FOR_TO
45671: IFFALSE 45702
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 250
45682: PPUSH
45683: LD_VAR 0 1
45687: PPUSH
45688: CALL_OW 251
45692: PPUSH
45693: LD_INT 1
45695: PPUSH
45696: CALL_OW 453
45700: GO 45670
45702: POP
45703: POP
// end ;
45704: LD_VAR 0 2
45708: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45709: LD_INT 0
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
45715: PPUSH
45716: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45717: LD_VAR 0 1
45721: NOT
45722: PUSH
45723: LD_VAR 0 2
45727: NOT
45728: OR
45729: PUSH
45730: LD_VAR 0 1
45734: PPUSH
45735: CALL_OW 314
45739: OR
45740: IFFALSE 45744
// exit ;
45742: GO 46185
// x := GetX ( enemy_unit ) ;
45744: LD_ADDR_VAR 0 7
45748: PUSH
45749: LD_VAR 0 2
45753: PPUSH
45754: CALL_OW 250
45758: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45759: LD_ADDR_VAR 0 8
45763: PUSH
45764: LD_VAR 0 2
45768: PPUSH
45769: CALL_OW 251
45773: ST_TO_ADDR
// if not x or not y then
45774: LD_VAR 0 7
45778: NOT
45779: PUSH
45780: LD_VAR 0 8
45784: NOT
45785: OR
45786: IFFALSE 45790
// exit ;
45788: GO 46185
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45790: LD_ADDR_VAR 0 6
45794: PUSH
45795: LD_VAR 0 7
45799: PPUSH
45800: LD_INT 0
45802: PPUSH
45803: LD_INT 4
45805: PPUSH
45806: CALL_OW 272
45810: PUSH
45811: LD_VAR 0 8
45815: PPUSH
45816: LD_INT 0
45818: PPUSH
45819: LD_INT 4
45821: PPUSH
45822: CALL_OW 273
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_VAR 0 7
45835: PPUSH
45836: LD_INT 1
45838: PPUSH
45839: LD_INT 4
45841: PPUSH
45842: CALL_OW 272
45846: PUSH
45847: LD_VAR 0 8
45851: PPUSH
45852: LD_INT 1
45854: PPUSH
45855: LD_INT 4
45857: PPUSH
45858: CALL_OW 273
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_VAR 0 7
45871: PPUSH
45872: LD_INT 2
45874: PPUSH
45875: LD_INT 4
45877: PPUSH
45878: CALL_OW 272
45882: PUSH
45883: LD_VAR 0 8
45887: PPUSH
45888: LD_INT 2
45890: PPUSH
45891: LD_INT 4
45893: PPUSH
45894: CALL_OW 273
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_VAR 0 7
45907: PPUSH
45908: LD_INT 3
45910: PPUSH
45911: LD_INT 4
45913: PPUSH
45914: CALL_OW 272
45918: PUSH
45919: LD_VAR 0 8
45923: PPUSH
45924: LD_INT 3
45926: PPUSH
45927: LD_INT 4
45929: PPUSH
45930: CALL_OW 273
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_VAR 0 7
45943: PPUSH
45944: LD_INT 4
45946: PPUSH
45947: LD_INT 4
45949: PPUSH
45950: CALL_OW 272
45954: PUSH
45955: LD_VAR 0 8
45959: PPUSH
45960: LD_INT 4
45962: PPUSH
45963: LD_INT 4
45965: PPUSH
45966: CALL_OW 273
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_VAR 0 7
45979: PPUSH
45980: LD_INT 5
45982: PPUSH
45983: LD_INT 4
45985: PPUSH
45986: CALL_OW 272
45990: PUSH
45991: LD_VAR 0 8
45995: PPUSH
45996: LD_INT 5
45998: PPUSH
45999: LD_INT 4
46001: PPUSH
46002: CALL_OW 273
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// for i = tmp downto 1 do
46019: LD_ADDR_VAR 0 4
46023: PUSH
46024: DOUBLE
46025: LD_VAR 0 6
46029: INC
46030: ST_TO_ADDR
46031: LD_INT 1
46033: PUSH
46034: FOR_DOWNTO
46035: IFFALSE 46136
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46037: LD_VAR 0 6
46041: PUSH
46042: LD_VAR 0 4
46046: ARRAY
46047: PUSH
46048: LD_INT 1
46050: ARRAY
46051: PPUSH
46052: LD_VAR 0 6
46056: PUSH
46057: LD_VAR 0 4
46061: ARRAY
46062: PUSH
46063: LD_INT 2
46065: ARRAY
46066: PPUSH
46067: CALL_OW 488
46071: NOT
46072: PUSH
46073: LD_VAR 0 6
46077: PUSH
46078: LD_VAR 0 4
46082: ARRAY
46083: PUSH
46084: LD_INT 1
46086: ARRAY
46087: PPUSH
46088: LD_VAR 0 6
46092: PUSH
46093: LD_VAR 0 4
46097: ARRAY
46098: PUSH
46099: LD_INT 2
46101: ARRAY
46102: PPUSH
46103: CALL_OW 428
46107: PUSH
46108: LD_INT 0
46110: NONEQUAL
46111: OR
46112: IFFALSE 46134
// tmp := Delete ( tmp , i ) ;
46114: LD_ADDR_VAR 0 6
46118: PUSH
46119: LD_VAR 0 6
46123: PPUSH
46124: LD_VAR 0 4
46128: PPUSH
46129: CALL_OW 3
46133: ST_TO_ADDR
46134: GO 46034
46136: POP
46137: POP
// j := GetClosestHex ( unit , tmp ) ;
46138: LD_ADDR_VAR 0 5
46142: PUSH
46143: LD_VAR 0 1
46147: PPUSH
46148: LD_VAR 0 6
46152: PPUSH
46153: CALL 45438 0 2
46157: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46158: LD_VAR 0 1
46162: PPUSH
46163: LD_VAR 0 5
46167: PUSH
46168: LD_INT 1
46170: ARRAY
46171: PPUSH
46172: LD_VAR 0 5
46176: PUSH
46177: LD_INT 2
46179: ARRAY
46180: PPUSH
46181: CALL_OW 111
// end ;
46185: LD_VAR 0 3
46189: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46190: LD_INT 0
46192: PPUSH
46193: PPUSH
46194: PPUSH
// uc_side = 0 ;
46195: LD_ADDR_OWVAR 20
46199: PUSH
46200: LD_INT 0
46202: ST_TO_ADDR
// uc_nation = 0 ;
46203: LD_ADDR_OWVAR 21
46207: PUSH
46208: LD_INT 0
46210: ST_TO_ADDR
// InitHc_All ( ) ;
46211: CALL_OW 584
// InitVc ;
46215: CALL_OW 20
// if mastodonts then
46219: LD_VAR 0 6
46223: IFFALSE 46290
// for i = 1 to mastodonts do
46225: LD_ADDR_VAR 0 11
46229: PUSH
46230: DOUBLE
46231: LD_INT 1
46233: DEC
46234: ST_TO_ADDR
46235: LD_VAR 0 6
46239: PUSH
46240: FOR_TO
46241: IFFALSE 46288
// begin vc_chassis := 31 ;
46243: LD_ADDR_OWVAR 37
46247: PUSH
46248: LD_INT 31
46250: ST_TO_ADDR
// vc_control := control_rider ;
46251: LD_ADDR_OWVAR 38
46255: PUSH
46256: LD_INT 4
46258: ST_TO_ADDR
// animal := CreateVehicle ;
46259: LD_ADDR_VAR 0 12
46263: PUSH
46264: CALL_OW 45
46268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46269: LD_VAR 0 12
46273: PPUSH
46274: LD_VAR 0 8
46278: PPUSH
46279: LD_INT 0
46281: PPUSH
46282: CALL 48425 0 3
// end ;
46286: GO 46240
46288: POP
46289: POP
// if horses then
46290: LD_VAR 0 5
46294: IFFALSE 46361
// for i = 1 to horses do
46296: LD_ADDR_VAR 0 11
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_VAR 0 5
46310: PUSH
46311: FOR_TO
46312: IFFALSE 46359
// begin hc_class := 21 ;
46314: LD_ADDR_OWVAR 28
46318: PUSH
46319: LD_INT 21
46321: ST_TO_ADDR
// hc_gallery :=  ;
46322: LD_ADDR_OWVAR 33
46326: PUSH
46327: LD_STRING 
46329: ST_TO_ADDR
// animal := CreateHuman ;
46330: LD_ADDR_VAR 0 12
46334: PUSH
46335: CALL_OW 44
46339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46340: LD_VAR 0 12
46344: PPUSH
46345: LD_VAR 0 8
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL 48425 0 3
// end ;
46357: GO 46311
46359: POP
46360: POP
// if birds then
46361: LD_VAR 0 1
46365: IFFALSE 46432
// for i = 1 to birds do
46367: LD_ADDR_VAR 0 11
46371: PUSH
46372: DOUBLE
46373: LD_INT 1
46375: DEC
46376: ST_TO_ADDR
46377: LD_VAR 0 1
46381: PUSH
46382: FOR_TO
46383: IFFALSE 46430
// begin hc_class = 18 ;
46385: LD_ADDR_OWVAR 28
46389: PUSH
46390: LD_INT 18
46392: ST_TO_ADDR
// hc_gallery =  ;
46393: LD_ADDR_OWVAR 33
46397: PUSH
46398: LD_STRING 
46400: ST_TO_ADDR
// animal := CreateHuman ;
46401: LD_ADDR_VAR 0 12
46405: PUSH
46406: CALL_OW 44
46410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46411: LD_VAR 0 12
46415: PPUSH
46416: LD_VAR 0 8
46420: PPUSH
46421: LD_INT 0
46423: PPUSH
46424: CALL 48425 0 3
// end ;
46428: GO 46382
46430: POP
46431: POP
// if tigers then
46432: LD_VAR 0 2
46436: IFFALSE 46520
// for i = 1 to tigers do
46438: LD_ADDR_VAR 0 11
46442: PUSH
46443: DOUBLE
46444: LD_INT 1
46446: DEC
46447: ST_TO_ADDR
46448: LD_VAR 0 2
46452: PUSH
46453: FOR_TO
46454: IFFALSE 46518
// begin hc_class = class_tiger ;
46456: LD_ADDR_OWVAR 28
46460: PUSH
46461: LD_INT 14
46463: ST_TO_ADDR
// hc_gallery =  ;
46464: LD_ADDR_OWVAR 33
46468: PUSH
46469: LD_STRING 
46471: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46472: LD_ADDR_OWVAR 35
46476: PUSH
46477: LD_INT 7
46479: NEG
46480: PPUSH
46481: LD_INT 7
46483: PPUSH
46484: CALL_OW 12
46488: ST_TO_ADDR
// animal := CreateHuman ;
46489: LD_ADDR_VAR 0 12
46493: PUSH
46494: CALL_OW 44
46498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46499: LD_VAR 0 12
46503: PPUSH
46504: LD_VAR 0 8
46508: PPUSH
46509: LD_INT 0
46511: PPUSH
46512: CALL 48425 0 3
// end ;
46516: GO 46453
46518: POP
46519: POP
// if apemans then
46520: LD_VAR 0 3
46524: IFFALSE 46647
// for i = 1 to apemans do
46526: LD_ADDR_VAR 0 11
46530: PUSH
46531: DOUBLE
46532: LD_INT 1
46534: DEC
46535: ST_TO_ADDR
46536: LD_VAR 0 3
46540: PUSH
46541: FOR_TO
46542: IFFALSE 46645
// begin hc_class = class_apeman ;
46544: LD_ADDR_OWVAR 28
46548: PUSH
46549: LD_INT 12
46551: ST_TO_ADDR
// hc_gallery =  ;
46552: LD_ADDR_OWVAR 33
46556: PUSH
46557: LD_STRING 
46559: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46560: LD_ADDR_OWVAR 35
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PPUSH
46569: LD_INT 2
46571: PPUSH
46572: CALL_OW 12
46576: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46577: LD_ADDR_OWVAR 31
46581: PUSH
46582: LD_INT 1
46584: PPUSH
46585: LD_INT 3
46587: PPUSH
46588: CALL_OW 12
46592: PUSH
46593: LD_INT 1
46595: PPUSH
46596: LD_INT 3
46598: PPUSH
46599: CALL_OW 12
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// animal := CreateHuman ;
46616: LD_ADDR_VAR 0 12
46620: PUSH
46621: CALL_OW 44
46625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46626: LD_VAR 0 12
46630: PPUSH
46631: LD_VAR 0 8
46635: PPUSH
46636: LD_INT 0
46638: PPUSH
46639: CALL 48425 0 3
// end ;
46643: GO 46541
46645: POP
46646: POP
// if enchidnas then
46647: LD_VAR 0 4
46651: IFFALSE 46718
// for i = 1 to enchidnas do
46653: LD_ADDR_VAR 0 11
46657: PUSH
46658: DOUBLE
46659: LD_INT 1
46661: DEC
46662: ST_TO_ADDR
46663: LD_VAR 0 4
46667: PUSH
46668: FOR_TO
46669: IFFALSE 46716
// begin hc_class = 13 ;
46671: LD_ADDR_OWVAR 28
46675: PUSH
46676: LD_INT 13
46678: ST_TO_ADDR
// hc_gallery =  ;
46679: LD_ADDR_OWVAR 33
46683: PUSH
46684: LD_STRING 
46686: ST_TO_ADDR
// animal := CreateHuman ;
46687: LD_ADDR_VAR 0 12
46691: PUSH
46692: CALL_OW 44
46696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46697: LD_VAR 0 12
46701: PPUSH
46702: LD_VAR 0 8
46706: PPUSH
46707: LD_INT 0
46709: PPUSH
46710: CALL 48425 0 3
// end ;
46714: GO 46668
46716: POP
46717: POP
// if fishes then
46718: LD_VAR 0 7
46722: IFFALSE 46789
// for i = 1 to fishes do
46724: LD_ADDR_VAR 0 11
46728: PUSH
46729: DOUBLE
46730: LD_INT 1
46732: DEC
46733: ST_TO_ADDR
46734: LD_VAR 0 7
46738: PUSH
46739: FOR_TO
46740: IFFALSE 46787
// begin hc_class = 20 ;
46742: LD_ADDR_OWVAR 28
46746: PUSH
46747: LD_INT 20
46749: ST_TO_ADDR
// hc_gallery =  ;
46750: LD_ADDR_OWVAR 33
46754: PUSH
46755: LD_STRING 
46757: ST_TO_ADDR
// animal := CreateHuman ;
46758: LD_ADDR_VAR 0 12
46762: PUSH
46763: CALL_OW 44
46767: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46768: LD_VAR 0 12
46772: PPUSH
46773: LD_VAR 0 9
46777: PPUSH
46778: LD_INT 0
46780: PPUSH
46781: CALL 48425 0 3
// end ;
46785: GO 46739
46787: POP
46788: POP
// end ;
46789: LD_VAR 0 10
46793: RET
// export function WantHeal ( sci , unit ) ; begin
46794: LD_INT 0
46796: PPUSH
// if GetTaskList ( sci ) > 0 then
46797: LD_VAR 0 1
46801: PPUSH
46802: CALL_OW 437
46806: PUSH
46807: LD_INT 0
46809: GREATER
46810: IFFALSE 46880
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46812: LD_VAR 0 1
46816: PPUSH
46817: CALL_OW 437
46821: PUSH
46822: LD_INT 1
46824: ARRAY
46825: PUSH
46826: LD_INT 1
46828: ARRAY
46829: PUSH
46830: LD_STRING l
46832: EQUAL
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 437
46843: PUSH
46844: LD_INT 1
46846: ARRAY
46847: PUSH
46848: LD_INT 4
46850: ARRAY
46851: PUSH
46852: LD_VAR 0 2
46856: EQUAL
46857: AND
46858: IFFALSE 46870
// result := true else
46860: LD_ADDR_VAR 0 3
46864: PUSH
46865: LD_INT 1
46867: ST_TO_ADDR
46868: GO 46878
// result := false ;
46870: LD_ADDR_VAR 0 3
46874: PUSH
46875: LD_INT 0
46877: ST_TO_ADDR
// end else
46878: GO 46888
// result := false ;
46880: LD_ADDR_VAR 0 3
46884: PUSH
46885: LD_INT 0
46887: ST_TO_ADDR
// end ;
46888: LD_VAR 0 3
46892: RET
// export function HealTarget ( sci ) ; begin
46893: LD_INT 0
46895: PPUSH
// if not sci then
46896: LD_VAR 0 1
46900: NOT
46901: IFFALSE 46905
// exit ;
46903: GO 46970
// result := 0 ;
46905: LD_ADDR_VAR 0 2
46909: PUSH
46910: LD_INT 0
46912: ST_TO_ADDR
// if GetTaskList ( sci ) then
46913: LD_VAR 0 1
46917: PPUSH
46918: CALL_OW 437
46922: IFFALSE 46970
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46924: LD_VAR 0 1
46928: PPUSH
46929: CALL_OW 437
46933: PUSH
46934: LD_INT 1
46936: ARRAY
46937: PUSH
46938: LD_INT 1
46940: ARRAY
46941: PUSH
46942: LD_STRING l
46944: EQUAL
46945: IFFALSE 46970
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46947: LD_ADDR_VAR 0 2
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 437
46961: PUSH
46962: LD_INT 1
46964: ARRAY
46965: PUSH
46966: LD_INT 4
46968: ARRAY
46969: ST_TO_ADDR
// end ;
46970: LD_VAR 0 2
46974: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46975: LD_INT 0
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
// if not base_units then
46981: LD_VAR 0 1
46985: NOT
46986: IFFALSE 46990
// exit ;
46988: GO 47077
// result := false ;
46990: LD_ADDR_VAR 0 2
46994: PUSH
46995: LD_INT 0
46997: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46998: LD_ADDR_VAR 0 5
47002: PUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: LD_INT 21
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PPUSH
47018: CALL_OW 72
47022: ST_TO_ADDR
// if not tmp then
47023: LD_VAR 0 5
47027: NOT
47028: IFFALSE 47032
// exit ;
47030: GO 47077
// for i in tmp do
47032: LD_ADDR_VAR 0 3
47036: PUSH
47037: LD_VAR 0 5
47041: PUSH
47042: FOR_IN
47043: IFFALSE 47075
// begin result := EnemyInRange ( i , 22 ) ;
47045: LD_ADDR_VAR 0 2
47049: PUSH
47050: LD_VAR 0 3
47054: PPUSH
47055: LD_INT 22
47057: PPUSH
47058: CALL 45313 0 2
47062: ST_TO_ADDR
// if result then
47063: LD_VAR 0 2
47067: IFFALSE 47073
// exit ;
47069: POP
47070: POP
47071: GO 47077
// end ;
47073: GO 47042
47075: POP
47076: POP
// end ;
47077: LD_VAR 0 2
47081: RET
// export function FilterByTag ( units , tag ) ; begin
47082: LD_INT 0
47084: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47085: LD_ADDR_VAR 0 3
47089: PUSH
47090: LD_VAR 0 1
47094: PPUSH
47095: LD_INT 120
47097: PUSH
47098: LD_VAR 0 2
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PPUSH
47107: CALL_OW 72
47111: ST_TO_ADDR
// end ;
47112: LD_VAR 0 3
47116: RET
// export function IsDriver ( un ) ; begin
47117: LD_INT 0
47119: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47120: LD_ADDR_VAR 0 2
47124: PUSH
47125: LD_VAR 0 1
47129: PUSH
47130: LD_INT 55
47132: PUSH
47133: EMPTY
47134: LIST
47135: PPUSH
47136: CALL_OW 69
47140: IN
47141: ST_TO_ADDR
// end ;
47142: LD_VAR 0 2
47146: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47147: LD_INT 0
47149: PPUSH
47150: PPUSH
// list := [ ] ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: EMPTY
47157: ST_TO_ADDR
// case d of 0 :
47158: LD_VAR 0 3
47162: PUSH
47163: LD_INT 0
47165: DOUBLE
47166: EQUAL
47167: IFTRUE 47171
47169: GO 47304
47171: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47172: LD_ADDR_VAR 0 5
47176: PUSH
47177: LD_VAR 0 1
47181: PUSH
47182: LD_INT 4
47184: MINUS
47185: PUSH
47186: LD_VAR 0 2
47190: PUSH
47191: LD_INT 4
47193: MINUS
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: PUSH
47203: LD_VAR 0 1
47207: PUSH
47208: LD_INT 3
47210: MINUS
47211: PUSH
47212: LD_VAR 0 2
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_VAR 0 1
47229: PUSH
47230: LD_INT 4
47232: PLUS
47233: PUSH
47234: LD_VAR 0 2
47238: PUSH
47239: LD_INT 4
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: PUSH
47247: LD_VAR 0 1
47251: PUSH
47252: LD_INT 3
47254: PLUS
47255: PUSH
47256: LD_VAR 0 2
47260: PUSH
47261: LD_INT 3
47263: PLUS
47264: PUSH
47265: LD_INT 5
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: PUSH
47273: LD_VAR 0 1
47277: PUSH
47278: LD_VAR 0 2
47282: PUSH
47283: LD_INT 4
47285: PLUS
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// end ; 1 :
47302: GO 48002
47304: LD_INT 1
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47312
47310: GO 47445
47312: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47313: LD_ADDR_VAR 0 5
47317: PUSH
47318: LD_VAR 0 1
47322: PUSH
47323: LD_VAR 0 2
47327: PUSH
47328: LD_INT 4
47330: MINUS
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: PUSH
47340: LD_VAR 0 1
47344: PUSH
47345: LD_INT 3
47347: MINUS
47348: PUSH
47349: LD_VAR 0 2
47353: PUSH
47354: LD_INT 3
47356: MINUS
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: LD_VAR 0 1
47370: PUSH
47371: LD_INT 4
47373: MINUS
47374: PUSH
47375: LD_VAR 0 2
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: PUSH
47388: LD_VAR 0 1
47392: PUSH
47393: LD_VAR 0 2
47397: PUSH
47398: LD_INT 3
47400: PLUS
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: PUSH
47410: LD_VAR 0 1
47414: PUSH
47415: LD_INT 4
47417: PLUS
47418: PUSH
47419: LD_VAR 0 2
47423: PUSH
47424: LD_INT 4
47426: PLUS
47427: PUSH
47428: LD_INT 5
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// end ; 2 :
47443: GO 48002
47445: LD_INT 2
47447: DOUBLE
47448: EQUAL
47449: IFTRUE 47453
47451: GO 47582
47453: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47454: LD_ADDR_VAR 0 5
47458: PUSH
47459: LD_VAR 0 1
47463: PUSH
47464: LD_VAR 0 2
47468: PUSH
47469: LD_INT 3
47471: MINUS
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: PUSH
47481: LD_VAR 0 1
47485: PUSH
47486: LD_INT 4
47488: PLUS
47489: PUSH
47490: LD_VAR 0 2
47494: PUSH
47495: LD_INT 4
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: PUSH
47503: LD_VAR 0 1
47507: PUSH
47508: LD_VAR 0 2
47512: PUSH
47513: LD_INT 4
47515: PLUS
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: PUSH
47525: LD_VAR 0 1
47529: PUSH
47530: LD_INT 3
47532: MINUS
47533: PUSH
47534: LD_VAR 0 2
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: PUSH
47547: LD_VAR 0 1
47551: PUSH
47552: LD_INT 4
47554: MINUS
47555: PUSH
47556: LD_VAR 0 2
47560: PUSH
47561: LD_INT 4
47563: MINUS
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// end ; 3 :
47580: GO 48002
47582: LD_INT 3
47584: DOUBLE
47585: EQUAL
47586: IFTRUE 47590
47588: GO 47723
47590: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47591: LD_ADDR_VAR 0 5
47595: PUSH
47596: LD_VAR 0 1
47600: PUSH
47601: LD_INT 3
47603: PLUS
47604: PUSH
47605: LD_VAR 0 2
47609: PUSH
47610: LD_INT 4
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: PUSH
47618: LD_VAR 0 1
47622: PUSH
47623: LD_INT 4
47625: PLUS
47626: PUSH
47627: LD_VAR 0 2
47631: PUSH
47632: LD_INT 4
47634: PLUS
47635: PUSH
47636: LD_INT 5
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: PUSH
47644: LD_VAR 0 1
47648: PUSH
47649: LD_INT 4
47651: MINUS
47652: PUSH
47653: LD_VAR 0 2
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: PUSH
47666: LD_VAR 0 1
47670: PUSH
47671: LD_VAR 0 2
47675: PUSH
47676: LD_INT 4
47678: MINUS
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: PUSH
47688: LD_VAR 0 1
47692: PUSH
47693: LD_INT 3
47695: MINUS
47696: PUSH
47697: LD_VAR 0 2
47701: PUSH
47702: LD_INT 3
47704: MINUS
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// end ; 4 :
47721: GO 48002
47723: LD_INT 4
47725: DOUBLE
47726: EQUAL
47727: IFTRUE 47731
47729: GO 47864
47731: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47732: LD_ADDR_VAR 0 5
47736: PUSH
47737: LD_VAR 0 1
47741: PUSH
47742: LD_VAR 0 2
47746: PUSH
47747: LD_INT 4
47749: PLUS
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: LD_VAR 0 1
47763: PUSH
47764: LD_INT 3
47766: PLUS
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: LD_INT 3
47775: PLUS
47776: PUSH
47777: LD_INT 5
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: PUSH
47785: LD_VAR 0 1
47789: PUSH
47790: LD_INT 4
47792: PLUS
47793: PUSH
47794: LD_VAR 0 2
47798: PUSH
47799: LD_INT 4
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: PUSH
47807: LD_VAR 0 1
47811: PUSH
47812: LD_VAR 0 2
47816: PUSH
47817: LD_INT 3
47819: MINUS
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: PUSH
47829: LD_VAR 0 1
47833: PUSH
47834: LD_INT 4
47836: MINUS
47837: PUSH
47838: LD_VAR 0 2
47842: PUSH
47843: LD_INT 4
47845: MINUS
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// end ; 5 :
47862: GO 48002
47864: LD_INT 5
47866: DOUBLE
47867: EQUAL
47868: IFTRUE 47872
47870: GO 48001
47872: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47873: LD_ADDR_VAR 0 5
47877: PUSH
47878: LD_VAR 0 1
47882: PUSH
47883: LD_INT 4
47885: MINUS
47886: PUSH
47887: LD_VAR 0 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PUSH
47900: LD_VAR 0 1
47904: PUSH
47905: LD_VAR 0 2
47909: PUSH
47910: LD_INT 4
47912: MINUS
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: PUSH
47922: LD_VAR 0 1
47926: PUSH
47927: LD_INT 4
47929: PLUS
47930: PUSH
47931: LD_VAR 0 2
47935: PUSH
47936: LD_INT 4
47938: PLUS
47939: PUSH
47940: LD_INT 5
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: PUSH
47948: LD_VAR 0 1
47952: PUSH
47953: LD_INT 3
47955: PLUS
47956: PUSH
47957: LD_VAR 0 2
47961: PUSH
47962: LD_INT 4
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: PUSH
47970: LD_VAR 0 1
47974: PUSH
47975: LD_VAR 0 2
47979: PUSH
47980: LD_INT 3
47982: PLUS
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// end ; end ;
47999: GO 48002
48001: POP
// result := list ;
48002: LD_ADDR_VAR 0 4
48006: PUSH
48007: LD_VAR 0 5
48011: ST_TO_ADDR
// end ;
48012: LD_VAR 0 4
48016: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48017: LD_INT 0
48019: PPUSH
48020: PPUSH
48021: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48022: LD_VAR 0 1
48026: NOT
48027: PUSH
48028: LD_VAR 0 2
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: LD_INT 4
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: IN
48051: NOT
48052: OR
48053: IFFALSE 48057
// exit ;
48055: GO 48149
// tmp := [ ] ;
48057: LD_ADDR_VAR 0 5
48061: PUSH
48062: EMPTY
48063: ST_TO_ADDR
// for i in units do
48064: LD_ADDR_VAR 0 4
48068: PUSH
48069: LD_VAR 0 1
48073: PUSH
48074: FOR_IN
48075: IFFALSE 48118
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48077: LD_ADDR_VAR 0 5
48081: PUSH
48082: LD_VAR 0 5
48086: PPUSH
48087: LD_VAR 0 5
48091: PUSH
48092: LD_INT 1
48094: PLUS
48095: PPUSH
48096: LD_VAR 0 4
48100: PPUSH
48101: LD_VAR 0 2
48105: PPUSH
48106: CALL_OW 259
48110: PPUSH
48111: CALL_OW 2
48115: ST_TO_ADDR
48116: GO 48074
48118: POP
48119: POP
// if not tmp then
48120: LD_VAR 0 5
48124: NOT
48125: IFFALSE 48129
// exit ;
48127: GO 48149
// result := SortListByListDesc ( units , tmp ) ;
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_VAR 0 1
48138: PPUSH
48139: LD_VAR 0 5
48143: PPUSH
48144: CALL_OW 77
48148: ST_TO_ADDR
// end ;
48149: LD_VAR 0 3
48153: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48154: LD_INT 0
48156: PPUSH
48157: PPUSH
48158: PPUSH
// result := false ;
48159: LD_ADDR_VAR 0 3
48163: PUSH
48164: LD_INT 0
48166: ST_TO_ADDR
// x := GetX ( building ) ;
48167: LD_ADDR_VAR 0 4
48171: PUSH
48172: LD_VAR 0 2
48176: PPUSH
48177: CALL_OW 250
48181: ST_TO_ADDR
// y := GetY ( building ) ;
48182: LD_ADDR_VAR 0 5
48186: PUSH
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 251
48196: ST_TO_ADDR
// if not building or not x or not y then
48197: LD_VAR 0 2
48201: NOT
48202: PUSH
48203: LD_VAR 0 4
48207: NOT
48208: OR
48209: PUSH
48210: LD_VAR 0 5
48214: NOT
48215: OR
48216: IFFALSE 48220
// exit ;
48218: GO 48312
// if GetTaskList ( unit ) then
48220: LD_VAR 0 1
48224: PPUSH
48225: CALL_OW 437
48229: IFFALSE 48312
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48231: LD_STRING e
48233: PUSH
48234: LD_VAR 0 1
48238: PPUSH
48239: CALL_OW 437
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: EQUAL
48252: PUSH
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: CALL_OW 437
48267: PUSH
48268: LD_INT 1
48270: ARRAY
48271: PUSH
48272: LD_INT 2
48274: ARRAY
48275: EQUAL
48276: AND
48277: PUSH
48278: LD_VAR 0 5
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 437
48292: PUSH
48293: LD_INT 1
48295: ARRAY
48296: PUSH
48297: LD_INT 3
48299: ARRAY
48300: EQUAL
48301: AND
48302: IFFALSE 48312
// result := true end ;
48304: LD_ADDR_VAR 0 3
48308: PUSH
48309: LD_INT 1
48311: ST_TO_ADDR
// end ;
48312: LD_VAR 0 3
48316: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48317: LD_INT 0
48319: PPUSH
// result := false ;
48320: LD_ADDR_VAR 0 4
48324: PUSH
48325: LD_INT 0
48327: ST_TO_ADDR
// if GetTaskList ( unit ) then
48328: LD_VAR 0 1
48332: PPUSH
48333: CALL_OW 437
48337: IFFALSE 48420
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48339: LD_STRING M
48341: PUSH
48342: LD_VAR 0 1
48346: PPUSH
48347: CALL_OW 437
48351: PUSH
48352: LD_INT 1
48354: ARRAY
48355: PUSH
48356: LD_INT 1
48358: ARRAY
48359: EQUAL
48360: PUSH
48361: LD_VAR 0 2
48365: PUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 437
48375: PUSH
48376: LD_INT 1
48378: ARRAY
48379: PUSH
48380: LD_INT 2
48382: ARRAY
48383: EQUAL
48384: AND
48385: PUSH
48386: LD_VAR 0 3
48390: PUSH
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 437
48400: PUSH
48401: LD_INT 1
48403: ARRAY
48404: PUSH
48405: LD_INT 3
48407: ARRAY
48408: EQUAL
48409: AND
48410: IFFALSE 48420
// result := true ;
48412: LD_ADDR_VAR 0 4
48416: PUSH
48417: LD_INT 1
48419: ST_TO_ADDR
// end ; end ;
48420: LD_VAR 0 4
48424: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48425: LD_INT 0
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
// if not unit or not area then
48431: LD_VAR 0 1
48435: NOT
48436: PUSH
48437: LD_VAR 0 2
48441: NOT
48442: OR
48443: IFFALSE 48447
// exit ;
48445: GO 48611
// tmp := AreaToList ( area , i ) ;
48447: LD_ADDR_VAR 0 6
48451: PUSH
48452: LD_VAR 0 2
48456: PPUSH
48457: LD_VAR 0 5
48461: PPUSH
48462: CALL_OW 517
48466: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48467: LD_ADDR_VAR 0 5
48471: PUSH
48472: DOUBLE
48473: LD_INT 1
48475: DEC
48476: ST_TO_ADDR
48477: LD_VAR 0 6
48481: PUSH
48482: LD_INT 1
48484: ARRAY
48485: PUSH
48486: FOR_TO
48487: IFFALSE 48609
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48489: LD_ADDR_VAR 0 7
48493: PUSH
48494: LD_VAR 0 6
48498: PUSH
48499: LD_INT 1
48501: ARRAY
48502: PUSH
48503: LD_VAR 0 5
48507: ARRAY
48508: PUSH
48509: LD_VAR 0 6
48513: PUSH
48514: LD_INT 2
48516: ARRAY
48517: PUSH
48518: LD_VAR 0 5
48522: ARRAY
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48528: LD_VAR 0 7
48532: PUSH
48533: LD_INT 1
48535: ARRAY
48536: PPUSH
48537: LD_VAR 0 7
48541: PUSH
48542: LD_INT 2
48544: ARRAY
48545: PPUSH
48546: CALL_OW 428
48550: PUSH
48551: LD_INT 0
48553: EQUAL
48554: IFFALSE 48607
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48556: LD_VAR 0 1
48560: PPUSH
48561: LD_VAR 0 7
48565: PUSH
48566: LD_INT 1
48568: ARRAY
48569: PPUSH
48570: LD_VAR 0 7
48574: PUSH
48575: LD_INT 2
48577: ARRAY
48578: PPUSH
48579: LD_VAR 0 3
48583: PPUSH
48584: CALL_OW 48
// result := IsPlaced ( unit ) ;
48588: LD_ADDR_VAR 0 4
48592: PUSH
48593: LD_VAR 0 1
48597: PPUSH
48598: CALL_OW 305
48602: ST_TO_ADDR
// exit ;
48603: POP
48604: POP
48605: GO 48611
// end ; end ;
48607: GO 48486
48609: POP
48610: POP
// end ;
48611: LD_VAR 0 4
48615: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48616: LD_INT 0
48618: PPUSH
48619: PPUSH
48620: PPUSH
// if not side or side > 8 then
48621: LD_VAR 0 1
48625: NOT
48626: PUSH
48627: LD_VAR 0 1
48631: PUSH
48632: LD_INT 8
48634: GREATER
48635: OR
48636: IFFALSE 48640
// exit ;
48638: GO 48827
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48640: LD_ADDR_VAR 0 4
48644: PUSH
48645: LD_INT 22
48647: PUSH
48648: LD_VAR 0 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 21
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PPUSH
48671: CALL_OW 69
48675: ST_TO_ADDR
// if not tmp then
48676: LD_VAR 0 4
48680: NOT
48681: IFFALSE 48685
// exit ;
48683: GO 48827
// enable_addtolog := true ;
48685: LD_ADDR_OWVAR 81
48689: PUSH
48690: LD_INT 1
48692: ST_TO_ADDR
// AddToLog ( [ ) ;
48693: LD_STRING [
48695: PPUSH
48696: CALL_OW 561
// for i in tmp do
48700: LD_ADDR_VAR 0 3
48704: PUSH
48705: LD_VAR 0 4
48709: PUSH
48710: FOR_IN
48711: IFFALSE 48818
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48713: LD_STRING [
48715: PUSH
48716: LD_VAR 0 3
48720: PPUSH
48721: CALL_OW 266
48725: STR
48726: PUSH
48727: LD_STRING , 
48729: STR
48730: PUSH
48731: LD_VAR 0 3
48735: PPUSH
48736: CALL_OW 250
48740: STR
48741: PUSH
48742: LD_STRING , 
48744: STR
48745: PUSH
48746: LD_VAR 0 3
48750: PPUSH
48751: CALL_OW 251
48755: STR
48756: PUSH
48757: LD_STRING , 
48759: STR
48760: PUSH
48761: LD_VAR 0 3
48765: PPUSH
48766: CALL_OW 254
48770: STR
48771: PUSH
48772: LD_STRING , 
48774: STR
48775: PUSH
48776: LD_VAR 0 3
48780: PPUSH
48781: LD_INT 1
48783: PPUSH
48784: CALL_OW 268
48788: STR
48789: PUSH
48790: LD_STRING , 
48792: STR
48793: PUSH
48794: LD_VAR 0 3
48798: PPUSH
48799: LD_INT 2
48801: PPUSH
48802: CALL_OW 268
48806: STR
48807: PUSH
48808: LD_STRING ],
48810: STR
48811: PPUSH
48812: CALL_OW 561
// end ;
48816: GO 48710
48818: POP
48819: POP
// AddToLog ( ]; ) ;
48820: LD_STRING ];
48822: PPUSH
48823: CALL_OW 561
// end ;
48827: LD_VAR 0 2
48831: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48832: LD_INT 0
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
48838: PPUSH
// if not area or not rate or not max then
48839: LD_VAR 0 1
48843: NOT
48844: PUSH
48845: LD_VAR 0 2
48849: NOT
48850: OR
48851: PUSH
48852: LD_VAR 0 4
48856: NOT
48857: OR
48858: IFFALSE 48862
// exit ;
48860: GO 49051
// while 1 do
48862: LD_INT 1
48864: IFFALSE 49051
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: LD_INT 1
48878: PPUSH
48879: CALL_OW 287
48883: PUSH
48884: LD_INT 10
48886: MUL
48887: ST_TO_ADDR
// r := rate / 10 ;
48888: LD_ADDR_VAR 0 7
48892: PUSH
48893: LD_VAR 0 2
48897: PUSH
48898: LD_INT 10
48900: DIVREAL
48901: ST_TO_ADDR
// time := 1 1$00 ;
48902: LD_ADDR_VAR 0 8
48906: PUSH
48907: LD_INT 2100
48909: ST_TO_ADDR
// if amount < min then
48910: LD_VAR 0 9
48914: PUSH
48915: LD_VAR 0 3
48919: LESS
48920: IFFALSE 48938
// r := r * 2 else
48922: LD_ADDR_VAR 0 7
48926: PUSH
48927: LD_VAR 0 7
48931: PUSH
48932: LD_INT 2
48934: MUL
48935: ST_TO_ADDR
48936: GO 48964
// if amount > max then
48938: LD_VAR 0 9
48942: PUSH
48943: LD_VAR 0 4
48947: GREATER
48948: IFFALSE 48964
// r := r / 2 ;
48950: LD_ADDR_VAR 0 7
48954: PUSH
48955: LD_VAR 0 7
48959: PUSH
48960: LD_INT 2
48962: DIVREAL
48963: ST_TO_ADDR
// time := time / r ;
48964: LD_ADDR_VAR 0 8
48968: PUSH
48969: LD_VAR 0 8
48973: PUSH
48974: LD_VAR 0 7
48978: DIVREAL
48979: ST_TO_ADDR
// if time < 0 then
48980: LD_VAR 0 8
48984: PUSH
48985: LD_INT 0
48987: LESS
48988: IFFALSE 49005
// time := time * - 1 ;
48990: LD_ADDR_VAR 0 8
48994: PUSH
48995: LD_VAR 0 8
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: MUL
49004: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49005: LD_VAR 0 8
49009: PUSH
49010: LD_INT 35
49012: PPUSH
49013: LD_INT 875
49015: PPUSH
49016: CALL_OW 12
49020: PLUS
49021: PPUSH
49022: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49026: LD_INT 1
49028: PPUSH
49029: LD_INT 5
49031: PPUSH
49032: CALL_OW 12
49036: PPUSH
49037: LD_VAR 0 1
49041: PPUSH
49042: LD_INT 1
49044: PPUSH
49045: CALL_OW 55
// end ;
49049: GO 48862
// end ;
49051: LD_VAR 0 5
49055: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49056: LD_INT 0
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
// if not turrets or not factories then
49066: LD_VAR 0 1
49070: NOT
49071: PUSH
49072: LD_VAR 0 2
49076: NOT
49077: OR
49078: IFFALSE 49082
// exit ;
49080: GO 49389
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49082: LD_ADDR_VAR 0 10
49086: PUSH
49087: LD_INT 5
49089: PUSH
49090: LD_INT 6
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 4
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 5
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 24
49124: PUSH
49125: LD_INT 25
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 23
49134: PUSH
49135: LD_INT 27
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 42
49148: PUSH
49149: LD_INT 43
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 44
49158: PUSH
49159: LD_INT 46
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 45
49168: PUSH
49169: LD_INT 47
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: ST_TO_ADDR
// result := [ ] ;
49186: LD_ADDR_VAR 0 3
49190: PUSH
49191: EMPTY
49192: ST_TO_ADDR
// for i in turrets do
49193: LD_ADDR_VAR 0 4
49197: PUSH
49198: LD_VAR 0 1
49202: PUSH
49203: FOR_IN
49204: IFFALSE 49387
// begin nat := GetNation ( i ) ;
49206: LD_ADDR_VAR 0 7
49210: PUSH
49211: LD_VAR 0 4
49215: PPUSH
49216: CALL_OW 248
49220: ST_TO_ADDR
// weapon := 0 ;
49221: LD_ADDR_VAR 0 8
49225: PUSH
49226: LD_INT 0
49228: ST_TO_ADDR
// if not nat then
49229: LD_VAR 0 7
49233: NOT
49234: IFFALSE 49238
// continue ;
49236: GO 49203
// for j in list [ nat ] do
49238: LD_ADDR_VAR 0 5
49242: PUSH
49243: LD_VAR 0 10
49247: PUSH
49248: LD_VAR 0 7
49252: ARRAY
49253: PUSH
49254: FOR_IN
49255: IFFALSE 49296
// if GetBWeapon ( i ) = j [ 1 ] then
49257: LD_VAR 0 4
49261: PPUSH
49262: CALL_OW 269
49266: PUSH
49267: LD_VAR 0 5
49271: PUSH
49272: LD_INT 1
49274: ARRAY
49275: EQUAL
49276: IFFALSE 49294
// begin weapon := j [ 2 ] ;
49278: LD_ADDR_VAR 0 8
49282: PUSH
49283: LD_VAR 0 5
49287: PUSH
49288: LD_INT 2
49290: ARRAY
49291: ST_TO_ADDR
// break ;
49292: GO 49296
// end ;
49294: GO 49254
49296: POP
49297: POP
// if not weapon then
49298: LD_VAR 0 8
49302: NOT
49303: IFFALSE 49307
// continue ;
49305: GO 49203
// for k in factories do
49307: LD_ADDR_VAR 0 6
49311: PUSH
49312: LD_VAR 0 2
49316: PUSH
49317: FOR_IN
49318: IFFALSE 49383
// begin weapons := AvailableWeaponList ( k ) ;
49320: LD_ADDR_VAR 0 9
49324: PUSH
49325: LD_VAR 0 6
49329: PPUSH
49330: CALL_OW 478
49334: ST_TO_ADDR
// if not weapons then
49335: LD_VAR 0 9
49339: NOT
49340: IFFALSE 49344
// continue ;
49342: GO 49317
// if weapon in weapons then
49344: LD_VAR 0 8
49348: PUSH
49349: LD_VAR 0 9
49353: IN
49354: IFFALSE 49381
// begin result := [ i , weapon ] ;
49356: LD_ADDR_VAR 0 3
49360: PUSH
49361: LD_VAR 0 4
49365: PUSH
49366: LD_VAR 0 8
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// exit ;
49375: POP
49376: POP
49377: POP
49378: POP
49379: GO 49389
// end ; end ;
49381: GO 49317
49383: POP
49384: POP
// end ;
49385: GO 49203
49387: POP
49388: POP
// end ;
49389: LD_VAR 0 3
49393: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49394: LD_INT 0
49396: PPUSH
// if not side or side > 8 then
49397: LD_VAR 0 3
49401: NOT
49402: PUSH
49403: LD_VAR 0 3
49407: PUSH
49408: LD_INT 8
49410: GREATER
49411: OR
49412: IFFALSE 49416
// exit ;
49414: GO 49475
// if not range then
49416: LD_VAR 0 4
49420: NOT
49421: IFFALSE 49432
// range := - 12 ;
49423: LD_ADDR_VAR 0 4
49427: PUSH
49428: LD_INT 12
49430: NEG
49431: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49432: LD_VAR 0 1
49436: PPUSH
49437: LD_VAR 0 2
49441: PPUSH
49442: LD_VAR 0 3
49446: PPUSH
49447: LD_VAR 0 4
49451: PPUSH
49452: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49456: LD_VAR 0 1
49460: PPUSH
49461: LD_VAR 0 2
49465: PPUSH
49466: LD_VAR 0 3
49470: PPUSH
49471: CALL_OW 331
// end ;
49475: LD_VAR 0 5
49479: RET
// export function Video ( mode ) ; begin
49480: LD_INT 0
49482: PPUSH
// ingame_video = mode ;
49483: LD_ADDR_OWVAR 52
49487: PUSH
49488: LD_VAR 0 1
49492: ST_TO_ADDR
// interface_hidden = mode ;
49493: LD_ADDR_OWVAR 54
49497: PUSH
49498: LD_VAR 0 1
49502: ST_TO_ADDR
// end ;
49503: LD_VAR 0 2
49507: RET
// export function Join ( array , element ) ; begin
49508: LD_INT 0
49510: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49511: LD_ADDR_VAR 0 3
49515: PUSH
49516: LD_VAR 0 1
49520: PPUSH
49521: LD_VAR 0 1
49525: PUSH
49526: LD_INT 1
49528: PLUS
49529: PPUSH
49530: LD_VAR 0 2
49534: PPUSH
49535: CALL_OW 1
49539: ST_TO_ADDR
// end ;
49540: LD_VAR 0 3
49544: RET
// export function JoinUnion ( array , element ) ; begin
49545: LD_INT 0
49547: PPUSH
// result := array union element ;
49548: LD_ADDR_VAR 0 3
49552: PUSH
49553: LD_VAR 0 1
49557: PUSH
49558: LD_VAR 0 2
49562: UNION
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 3
49568: RET
// export function GetBehemoths ( side ) ; begin
49569: LD_INT 0
49571: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49572: LD_ADDR_VAR 0 2
49576: PUSH
49577: LD_INT 22
49579: PUSH
49580: LD_VAR 0 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 31
49591: PUSH
49592: LD_INT 25
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PPUSH
49603: CALL_OW 69
49607: ST_TO_ADDR
// end ;
49608: LD_VAR 0 2
49612: RET
// export function Shuffle ( array ) ; var i , index ; begin
49613: LD_INT 0
49615: PPUSH
49616: PPUSH
49617: PPUSH
// result := [ ] ;
49618: LD_ADDR_VAR 0 2
49622: PUSH
49623: EMPTY
49624: ST_TO_ADDR
// if not array then
49625: LD_VAR 0 1
49629: NOT
49630: IFFALSE 49634
// exit ;
49632: GO 49733
// Randomize ;
49634: CALL_OW 10
// for i = array downto 1 do
49638: LD_ADDR_VAR 0 3
49642: PUSH
49643: DOUBLE
49644: LD_VAR 0 1
49648: INC
49649: ST_TO_ADDR
49650: LD_INT 1
49652: PUSH
49653: FOR_DOWNTO
49654: IFFALSE 49731
// begin index := rand ( 1 , array ) ;
49656: LD_ADDR_VAR 0 4
49660: PUSH
49661: LD_INT 1
49663: PPUSH
49664: LD_VAR 0 1
49668: PPUSH
49669: CALL_OW 12
49673: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49674: LD_ADDR_VAR 0 2
49678: PUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: LD_VAR 0 2
49688: PUSH
49689: LD_INT 1
49691: PLUS
49692: PPUSH
49693: LD_VAR 0 1
49697: PUSH
49698: LD_VAR 0 4
49702: ARRAY
49703: PPUSH
49704: CALL_OW 2
49708: ST_TO_ADDR
// array := Delete ( array , index ) ;
49709: LD_ADDR_VAR 0 1
49713: PUSH
49714: LD_VAR 0 1
49718: PPUSH
49719: LD_VAR 0 4
49723: PPUSH
49724: CALL_OW 3
49728: ST_TO_ADDR
// end ;
49729: GO 49653
49731: POP
49732: POP
// end ;
49733: LD_VAR 0 2
49737: RET
// export function GetBaseMaterials ( base ) ; begin
49738: LD_INT 0
49740: PPUSH
// result := [ 0 , 0 , 0 ] ;
49741: LD_ADDR_VAR 0 2
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// if not base then
49760: LD_VAR 0 1
49764: NOT
49765: IFFALSE 49769
// exit ;
49767: GO 49818
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49769: LD_ADDR_VAR 0 2
49773: PUSH
49774: LD_VAR 0 1
49778: PPUSH
49779: LD_INT 1
49781: PPUSH
49782: CALL_OW 275
49786: PUSH
49787: LD_VAR 0 1
49791: PPUSH
49792: LD_INT 2
49794: PPUSH
49795: CALL_OW 275
49799: PUSH
49800: LD_VAR 0 1
49804: PPUSH
49805: LD_INT 3
49807: PPUSH
49808: CALL_OW 275
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: ST_TO_ADDR
// end ;
49818: LD_VAR 0 2
49822: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49823: LD_INT 0
49825: PPUSH
49826: PPUSH
// result := array ;
49827: LD_ADDR_VAR 0 3
49831: PUSH
49832: LD_VAR 0 1
49836: ST_TO_ADDR
// if size > 0 then
49837: LD_VAR 0 2
49841: PUSH
49842: LD_INT 0
49844: GREATER
49845: IFFALSE 49891
// for i := array downto size do
49847: LD_ADDR_VAR 0 4
49851: PUSH
49852: DOUBLE
49853: LD_VAR 0 1
49857: INC
49858: ST_TO_ADDR
49859: LD_VAR 0 2
49863: PUSH
49864: FOR_DOWNTO
49865: IFFALSE 49889
// result := Delete ( result , result ) ;
49867: LD_ADDR_VAR 0 3
49871: PUSH
49872: LD_VAR 0 3
49876: PPUSH
49877: LD_VAR 0 3
49881: PPUSH
49882: CALL_OW 3
49886: ST_TO_ADDR
49887: GO 49864
49889: POP
49890: POP
// end ;
49891: LD_VAR 0 3
49895: RET
// export function ComExit ( unit ) ; var tmp ; begin
49896: LD_INT 0
49898: PPUSH
49899: PPUSH
// if not IsInUnit ( unit ) then
49900: LD_VAR 0 1
49904: PPUSH
49905: CALL_OW 310
49909: NOT
49910: IFFALSE 49914
// exit ;
49912: GO 49974
// tmp := IsInUnit ( unit ) ;
49914: LD_ADDR_VAR 0 3
49918: PUSH
49919: LD_VAR 0 1
49923: PPUSH
49924: CALL_OW 310
49928: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49929: LD_VAR 0 3
49933: PPUSH
49934: CALL_OW 247
49938: PUSH
49939: LD_INT 2
49941: EQUAL
49942: IFFALSE 49955
// ComExitVehicle ( unit ) else
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 121
49953: GO 49964
// ComExitBuilding ( unit ) ;
49955: LD_VAR 0 1
49959: PPUSH
49960: CALL_OW 122
// result := tmp ;
49964: LD_ADDR_VAR 0 2
49968: PUSH
49969: LD_VAR 0 3
49973: ST_TO_ADDR
// end ;
49974: LD_VAR 0 2
49978: RET
// export function ComExitAll ( units ) ; var i ; begin
49979: LD_INT 0
49981: PPUSH
49982: PPUSH
// if not units then
49983: LD_VAR 0 1
49987: NOT
49988: IFFALSE 49992
// exit ;
49990: GO 50018
// for i in units do
49992: LD_ADDR_VAR 0 3
49996: PUSH
49997: LD_VAR 0 1
50001: PUSH
50002: FOR_IN
50003: IFFALSE 50016
// ComExit ( i ) ;
50005: LD_VAR 0 3
50009: PPUSH
50010: CALL 49896 0 1
50014: GO 50002
50016: POP
50017: POP
// end ;
50018: LD_VAR 0 2
50022: RET
// export function ResetHc ; begin
50023: LD_INT 0
50025: PPUSH
// InitHc ;
50026: CALL_OW 19
// hc_importance := 0 ;
50030: LD_ADDR_OWVAR 32
50034: PUSH
50035: LD_INT 0
50037: ST_TO_ADDR
// end ;
50038: LD_VAR 0 1
50042: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50043: LD_INT 0
50045: PPUSH
50046: PPUSH
50047: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50048: LD_ADDR_VAR 0 6
50052: PUSH
50053: LD_VAR 0 1
50057: PUSH
50058: LD_VAR 0 3
50062: PLUS
50063: PUSH
50064: LD_INT 2
50066: DIV
50067: ST_TO_ADDR
// if _x < 0 then
50068: LD_VAR 0 6
50072: PUSH
50073: LD_INT 0
50075: LESS
50076: IFFALSE 50093
// _x := _x * - 1 ;
50078: LD_ADDR_VAR 0 6
50082: PUSH
50083: LD_VAR 0 6
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: MUL
50092: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50093: LD_ADDR_VAR 0 7
50097: PUSH
50098: LD_VAR 0 2
50102: PUSH
50103: LD_VAR 0 4
50107: PLUS
50108: PUSH
50109: LD_INT 2
50111: DIV
50112: ST_TO_ADDR
// if _y < 0 then
50113: LD_VAR 0 7
50117: PUSH
50118: LD_INT 0
50120: LESS
50121: IFFALSE 50138
// _y := _y * - 1 ;
50123: LD_ADDR_VAR 0 7
50127: PUSH
50128: LD_VAR 0 7
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: MUL
50137: ST_TO_ADDR
// result := [ _x , _y ] ;
50138: LD_ADDR_VAR 0 5
50142: PUSH
50143: LD_VAR 0 6
50147: PUSH
50148: LD_VAR 0 7
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// end ;
50157: LD_VAR 0 5
50161: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50162: LD_INT 0
50164: PPUSH
50165: PPUSH
50166: PPUSH
50167: PPUSH
// task := GetTaskList ( unit ) ;
50168: LD_ADDR_VAR 0 7
50172: PUSH
50173: LD_VAR 0 1
50177: PPUSH
50178: CALL_OW 437
50182: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50183: LD_VAR 0 7
50187: NOT
50188: PUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: LD_VAR 0 2
50198: PPUSH
50199: CALL_OW 308
50203: NOT
50204: AND
50205: IFFALSE 50209
// exit ;
50207: GO 50327
// if IsInArea ( unit , area ) then
50209: LD_VAR 0 1
50213: PPUSH
50214: LD_VAR 0 2
50218: PPUSH
50219: CALL_OW 308
50223: IFFALSE 50241
// begin ComMoveToArea ( unit , goAway ) ;
50225: LD_VAR 0 1
50229: PPUSH
50230: LD_VAR 0 3
50234: PPUSH
50235: CALL_OW 113
// exit ;
50239: GO 50327
// end ; if task [ 1 ] [ 1 ] <> M then
50241: LD_VAR 0 7
50245: PUSH
50246: LD_INT 1
50248: ARRAY
50249: PUSH
50250: LD_INT 1
50252: ARRAY
50253: PUSH
50254: LD_STRING M
50256: NONEQUAL
50257: IFFALSE 50261
// exit ;
50259: GO 50327
// x := task [ 1 ] [ 2 ] ;
50261: LD_ADDR_VAR 0 5
50265: PUSH
50266: LD_VAR 0 7
50270: PUSH
50271: LD_INT 1
50273: ARRAY
50274: PUSH
50275: LD_INT 2
50277: ARRAY
50278: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50279: LD_ADDR_VAR 0 6
50283: PUSH
50284: LD_VAR 0 7
50288: PUSH
50289: LD_INT 1
50291: ARRAY
50292: PUSH
50293: LD_INT 3
50295: ARRAY
50296: ST_TO_ADDR
// if InArea ( x , y , area ) then
50297: LD_VAR 0 5
50301: PPUSH
50302: LD_VAR 0 6
50306: PPUSH
50307: LD_VAR 0 2
50311: PPUSH
50312: CALL_OW 309
50316: IFFALSE 50327
// ComStop ( unit ) ;
50318: LD_VAR 0 1
50322: PPUSH
50323: CALL_OW 141
// end ;
50327: LD_VAR 0 4
50331: RET
// export function Abs ( value ) ; begin
50332: LD_INT 0
50334: PPUSH
// result := value ;
50335: LD_ADDR_VAR 0 2
50339: PUSH
50340: LD_VAR 0 1
50344: ST_TO_ADDR
// if value < 0 then
50345: LD_VAR 0 1
50349: PUSH
50350: LD_INT 0
50352: LESS
50353: IFFALSE 50370
// result := value * - 1 ;
50355: LD_ADDR_VAR 0 2
50359: PUSH
50360: LD_VAR 0 1
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: MUL
50369: ST_TO_ADDR
// end ;
50370: LD_VAR 0 2
50374: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50375: LD_INT 0
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
// if not unit or not building then
50385: LD_VAR 0 1
50389: NOT
50390: PUSH
50391: LD_VAR 0 2
50395: NOT
50396: OR
50397: IFFALSE 50401
// exit ;
50399: GO 50627
// x := GetX ( building ) ;
50401: LD_ADDR_VAR 0 4
50405: PUSH
50406: LD_VAR 0 2
50410: PPUSH
50411: CALL_OW 250
50415: ST_TO_ADDR
// y := GetY ( building ) ;
50416: LD_ADDR_VAR 0 6
50420: PUSH
50421: LD_VAR 0 2
50425: PPUSH
50426: CALL_OW 251
50430: ST_TO_ADDR
// d := GetDir ( building ) ;
50431: LD_ADDR_VAR 0 8
50435: PUSH
50436: LD_VAR 0 2
50440: PPUSH
50441: CALL_OW 254
50445: ST_TO_ADDR
// r := 4 ;
50446: LD_ADDR_VAR 0 9
50450: PUSH
50451: LD_INT 4
50453: ST_TO_ADDR
// for i := 1 to 5 do
50454: LD_ADDR_VAR 0 10
50458: PUSH
50459: DOUBLE
50460: LD_INT 1
50462: DEC
50463: ST_TO_ADDR
50464: LD_INT 5
50466: PUSH
50467: FOR_TO
50468: IFFALSE 50625
// begin _x := ShiftX ( x , d , r + i ) ;
50470: LD_ADDR_VAR 0 5
50474: PUSH
50475: LD_VAR 0 4
50479: PPUSH
50480: LD_VAR 0 8
50484: PPUSH
50485: LD_VAR 0 9
50489: PUSH
50490: LD_VAR 0 10
50494: PLUS
50495: PPUSH
50496: CALL_OW 272
50500: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50501: LD_ADDR_VAR 0 7
50505: PUSH
50506: LD_VAR 0 6
50510: PPUSH
50511: LD_VAR 0 8
50515: PPUSH
50516: LD_VAR 0 9
50520: PUSH
50521: LD_VAR 0 10
50525: PLUS
50526: PPUSH
50527: CALL_OW 273
50531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50532: LD_VAR 0 5
50536: PPUSH
50537: LD_VAR 0 7
50541: PPUSH
50542: CALL_OW 488
50546: PUSH
50547: LD_VAR 0 5
50551: PPUSH
50552: LD_VAR 0 7
50556: PPUSH
50557: CALL_OW 428
50561: PPUSH
50562: CALL_OW 247
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: IN
50577: NOT
50578: AND
50579: IFFALSE 50623
// begin ComMoveXY ( unit , _x , _y ) ;
50581: LD_VAR 0 1
50585: PPUSH
50586: LD_VAR 0 5
50590: PPUSH
50591: LD_VAR 0 7
50595: PPUSH
50596: CALL_OW 111
// result := [ _x , _y ] ;
50600: LD_ADDR_VAR 0 3
50604: PUSH
50605: LD_VAR 0 5
50609: PUSH
50610: LD_VAR 0 7
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// exit ;
50619: POP
50620: POP
50621: GO 50627
// end ; end ;
50623: GO 50467
50625: POP
50626: POP
// end ;
50627: LD_VAR 0 3
50631: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50632: LD_INT 0
50634: PPUSH
50635: PPUSH
50636: PPUSH
// result := 0 ;
50637: LD_ADDR_VAR 0 3
50641: PUSH
50642: LD_INT 0
50644: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50645: LD_VAR 0 1
50649: PUSH
50650: LD_INT 0
50652: LESS
50653: PUSH
50654: LD_VAR 0 1
50658: PUSH
50659: LD_INT 8
50661: GREATER
50662: OR
50663: PUSH
50664: LD_VAR 0 2
50668: PUSH
50669: LD_INT 0
50671: LESS
50672: OR
50673: PUSH
50674: LD_VAR 0 2
50678: PUSH
50679: LD_INT 8
50681: GREATER
50682: OR
50683: IFFALSE 50687
// exit ;
50685: GO 50762
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50687: LD_ADDR_VAR 0 4
50691: PUSH
50692: LD_INT 22
50694: PUSH
50695: LD_VAR 0 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PPUSH
50704: CALL_OW 69
50708: PUSH
50709: FOR_IN
50710: IFFALSE 50760
// begin un := UnitShoot ( i ) ;
50712: LD_ADDR_VAR 0 5
50716: PUSH
50717: LD_VAR 0 4
50721: PPUSH
50722: CALL_OW 504
50726: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50727: LD_VAR 0 5
50731: PPUSH
50732: CALL_OW 255
50736: PUSH
50737: LD_VAR 0 1
50741: EQUAL
50742: IFFALSE 50758
// begin result := un ;
50744: LD_ADDR_VAR 0 3
50748: PUSH
50749: LD_VAR 0 5
50753: ST_TO_ADDR
// exit ;
50754: POP
50755: POP
50756: GO 50762
// end ; end ;
50758: GO 50709
50760: POP
50761: POP
// end ;
50762: LD_VAR 0 3
50766: RET
// export function GetCargoBay ( units ) ; begin
50767: LD_INT 0
50769: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50770: LD_ADDR_VAR 0 2
50774: PUSH
50775: LD_VAR 0 1
50779: PPUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 34
50785: PUSH
50786: LD_INT 12
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 34
50795: PUSH
50796: LD_INT 51
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 34
50805: PUSH
50806: LD_INT 32
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 34
50815: PUSH
50816: LD_EXP 96
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: PPUSH
50832: CALL_OW 72
50836: ST_TO_ADDR
// end ;
50837: LD_VAR 0 2
50841: RET
// export function Negate ( value ) ; begin
50842: LD_INT 0
50844: PPUSH
// result := not value ;
50845: LD_ADDR_VAR 0 2
50849: PUSH
50850: LD_VAR 0 1
50854: NOT
50855: ST_TO_ADDR
// end ;
50856: LD_VAR 0 2
50860: RET
// export function Inc ( value ) ; begin
50861: LD_INT 0
50863: PPUSH
// result := value + 1 ;
50864: LD_ADDR_VAR 0 2
50868: PUSH
50869: LD_VAR 0 1
50873: PUSH
50874: LD_INT 1
50876: PLUS
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 2
50882: RET
// export function Dec ( value ) ; begin
50883: LD_INT 0
50885: PPUSH
// result := value - 1 ;
50886: LD_ADDR_VAR 0 2
50890: PUSH
50891: LD_VAR 0 1
50895: PUSH
50896: LD_INT 1
50898: MINUS
50899: ST_TO_ADDR
// end ;
50900: LD_VAR 0 2
50904: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50905: LD_INT 0
50907: PPUSH
50908: PPUSH
50909: PPUSH
50910: PPUSH
50911: PPUSH
50912: PPUSH
50913: PPUSH
50914: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50915: LD_VAR 0 1
50919: PPUSH
50920: LD_VAR 0 2
50924: PPUSH
50925: CALL_OW 488
50929: NOT
50930: PUSH
50931: LD_VAR 0 3
50935: PPUSH
50936: LD_VAR 0 4
50940: PPUSH
50941: CALL_OW 488
50945: NOT
50946: OR
50947: IFFALSE 50960
// begin result := - 1 ;
50949: LD_ADDR_VAR 0 5
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: ST_TO_ADDR
// exit ;
50958: GO 51195
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50960: LD_ADDR_VAR 0 12
50964: PUSH
50965: LD_VAR 0 1
50969: PPUSH
50970: LD_VAR 0 2
50974: PPUSH
50975: LD_VAR 0 3
50979: PPUSH
50980: LD_VAR 0 4
50984: PPUSH
50985: CALL 50043 0 4
50989: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50990: LD_ADDR_VAR 0 11
50994: PUSH
50995: LD_VAR 0 1
50999: PPUSH
51000: LD_VAR 0 2
51004: PPUSH
51005: LD_VAR 0 12
51009: PUSH
51010: LD_INT 1
51012: ARRAY
51013: PPUSH
51014: LD_VAR 0 12
51018: PUSH
51019: LD_INT 2
51021: ARRAY
51022: PPUSH
51023: CALL_OW 298
51027: ST_TO_ADDR
// distance := 9999 ;
51028: LD_ADDR_VAR 0 10
51032: PUSH
51033: LD_INT 9999
51035: ST_TO_ADDR
// for i := 0 to 5 do
51036: LD_ADDR_VAR 0 6
51040: PUSH
51041: DOUBLE
51042: LD_INT 0
51044: DEC
51045: ST_TO_ADDR
51046: LD_INT 5
51048: PUSH
51049: FOR_TO
51050: IFFALSE 51193
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51052: LD_ADDR_VAR 0 7
51056: PUSH
51057: LD_VAR 0 1
51061: PPUSH
51062: LD_VAR 0 6
51066: PPUSH
51067: LD_VAR 0 11
51071: PPUSH
51072: CALL_OW 272
51076: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51077: LD_ADDR_VAR 0 8
51081: PUSH
51082: LD_VAR 0 2
51086: PPUSH
51087: LD_VAR 0 6
51091: PPUSH
51092: LD_VAR 0 11
51096: PPUSH
51097: CALL_OW 273
51101: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51102: LD_VAR 0 7
51106: PPUSH
51107: LD_VAR 0 8
51111: PPUSH
51112: CALL_OW 488
51116: NOT
51117: IFFALSE 51121
// continue ;
51119: GO 51049
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51121: LD_ADDR_VAR 0 9
51125: PUSH
51126: LD_VAR 0 12
51130: PUSH
51131: LD_INT 1
51133: ARRAY
51134: PPUSH
51135: LD_VAR 0 12
51139: PUSH
51140: LD_INT 2
51142: ARRAY
51143: PPUSH
51144: LD_VAR 0 7
51148: PPUSH
51149: LD_VAR 0 8
51153: PPUSH
51154: CALL_OW 298
51158: ST_TO_ADDR
// if tmp < distance then
51159: LD_VAR 0 9
51163: PUSH
51164: LD_VAR 0 10
51168: LESS
51169: IFFALSE 51191
// begin result := i ;
51171: LD_ADDR_VAR 0 5
51175: PUSH
51176: LD_VAR 0 6
51180: ST_TO_ADDR
// distance := tmp ;
51181: LD_ADDR_VAR 0 10
51185: PUSH
51186: LD_VAR 0 9
51190: ST_TO_ADDR
// end ; end ;
51191: GO 51049
51193: POP
51194: POP
// end ;
51195: LD_VAR 0 5
51199: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51200: LD_INT 0
51202: PPUSH
51203: PPUSH
// if not driver or not IsInUnit ( driver ) then
51204: LD_VAR 0 1
51208: NOT
51209: PUSH
51210: LD_VAR 0 1
51214: PPUSH
51215: CALL_OW 310
51219: NOT
51220: OR
51221: IFFALSE 51225
// exit ;
51223: GO 51315
// vehicle := IsInUnit ( driver ) ;
51225: LD_ADDR_VAR 0 3
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 310
51239: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51240: LD_VAR 0 1
51244: PPUSH
51245: LD_STRING \
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: PUSH
51275: LD_STRING E
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_VAR 0 3
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PPUSH
51311: CALL_OW 446
// end ;
51315: LD_VAR 0 2
51319: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51320: LD_INT 0
51322: PPUSH
51323: PPUSH
// if not driver or not IsInUnit ( driver ) then
51324: LD_VAR 0 1
51328: NOT
51329: PUSH
51330: LD_VAR 0 1
51334: PPUSH
51335: CALL_OW 310
51339: NOT
51340: OR
51341: IFFALSE 51345
// exit ;
51343: GO 51435
// vehicle := IsInUnit ( driver ) ;
51345: LD_ADDR_VAR 0 3
51349: PUSH
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 310
51359: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51360: LD_VAR 0 1
51364: PPUSH
51365: LD_STRING \
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: PUSH
51395: LD_STRING E
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_VAR 0 3
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PPUSH
51431: CALL_OW 447
// end ;
51435: LD_VAR 0 2
51439: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51440: LD_INT 0
51442: PPUSH
51443: PPUSH
51444: PPUSH
// tmp := [ ] ;
51445: LD_ADDR_VAR 0 5
51449: PUSH
51450: EMPTY
51451: ST_TO_ADDR
// for i in units do
51452: LD_ADDR_VAR 0 4
51456: PUSH
51457: LD_VAR 0 1
51461: PUSH
51462: FOR_IN
51463: IFFALSE 51501
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51465: LD_ADDR_VAR 0 5
51469: PUSH
51470: LD_VAR 0 5
51474: PPUSH
51475: LD_VAR 0 5
51479: PUSH
51480: LD_INT 1
51482: PLUS
51483: PPUSH
51484: LD_VAR 0 4
51488: PPUSH
51489: CALL_OW 256
51493: PPUSH
51494: CALL_OW 2
51498: ST_TO_ADDR
51499: GO 51462
51501: POP
51502: POP
// if not tmp then
51503: LD_VAR 0 5
51507: NOT
51508: IFFALSE 51512
// exit ;
51510: GO 51560
// if asc then
51512: LD_VAR 0 2
51516: IFFALSE 51540
// result := SortListByListAsc ( units , tmp ) else
51518: LD_ADDR_VAR 0 3
51522: PUSH
51523: LD_VAR 0 1
51527: PPUSH
51528: LD_VAR 0 5
51532: PPUSH
51533: CALL_OW 76
51537: ST_TO_ADDR
51538: GO 51560
// result := SortListByListDesc ( units , tmp ) ;
51540: LD_ADDR_VAR 0 3
51544: PUSH
51545: LD_VAR 0 1
51549: PPUSH
51550: LD_VAR 0 5
51554: PPUSH
51555: CALL_OW 77
51559: ST_TO_ADDR
// end ;
51560: LD_VAR 0 3
51564: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51565: LD_INT 0
51567: PPUSH
51568: PPUSH
// task := GetTaskList ( mech ) ;
51569: LD_ADDR_VAR 0 4
51573: PUSH
51574: LD_VAR 0 1
51578: PPUSH
51579: CALL_OW 437
51583: ST_TO_ADDR
// if not task then
51584: LD_VAR 0 4
51588: NOT
51589: IFFALSE 51593
// exit ;
51591: GO 51635
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_VAR 0 4
51602: PUSH
51603: LD_INT 1
51605: ARRAY
51606: PUSH
51607: LD_INT 1
51609: ARRAY
51610: PUSH
51611: LD_STRING r
51613: EQUAL
51614: PUSH
51615: LD_VAR 0 4
51619: PUSH
51620: LD_INT 1
51622: ARRAY
51623: PUSH
51624: LD_INT 4
51626: ARRAY
51627: PUSH
51628: LD_VAR 0 2
51632: EQUAL
51633: AND
51634: ST_TO_ADDR
// end ;
51635: LD_VAR 0 3
51639: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51640: LD_INT 0
51642: PPUSH
// SetDir ( unit , d ) ;
51643: LD_VAR 0 1
51647: PPUSH
51648: LD_VAR 0 4
51652: PPUSH
51653: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
51657: LD_VAR 0 1
51661: PPUSH
51662: LD_VAR 0 2
51666: PPUSH
51667: LD_VAR 0 3
51671: PPUSH
51672: LD_VAR 0 5
51676: PPUSH
51677: CALL_OW 48
// end ;
51681: LD_VAR 0 6
51685: RET
// export function ToNaturalNumber ( number ) ; begin
51686: LD_INT 0
51688: PPUSH
// result := number div 1 ;
51689: LD_ADDR_VAR 0 2
51693: PUSH
51694: LD_VAR 0 1
51698: PUSH
51699: LD_INT 1
51701: DIV
51702: ST_TO_ADDR
// if number < 0 then
51703: LD_VAR 0 1
51707: PUSH
51708: LD_INT 0
51710: LESS
51711: IFFALSE 51721
// result := 0 ;
51713: LD_ADDR_VAR 0 2
51717: PUSH
51718: LD_INT 0
51720: ST_TO_ADDR
// end ;
51721: LD_VAR 0 2
51725: RET
// export function SortByClass ( units , class ) ; var un ; begin
51726: LD_INT 0
51728: PPUSH
51729: PPUSH
// if not units or not class then
51730: LD_VAR 0 1
51734: NOT
51735: PUSH
51736: LD_VAR 0 2
51740: NOT
51741: OR
51742: IFFALSE 51746
// exit ;
51744: GO 51841
// result := [ ] ;
51746: LD_ADDR_VAR 0 3
51750: PUSH
51751: EMPTY
51752: ST_TO_ADDR
// for un in units do
51753: LD_ADDR_VAR 0 4
51757: PUSH
51758: LD_VAR 0 1
51762: PUSH
51763: FOR_IN
51764: IFFALSE 51839
// if GetClass ( un ) = class then
51766: LD_VAR 0 4
51770: PPUSH
51771: CALL_OW 257
51775: PUSH
51776: LD_VAR 0 2
51780: EQUAL
51781: IFFALSE 51808
// result := Insert ( result , 1 , un ) else
51783: LD_ADDR_VAR 0 3
51787: PUSH
51788: LD_VAR 0 3
51792: PPUSH
51793: LD_INT 1
51795: PPUSH
51796: LD_VAR 0 4
51800: PPUSH
51801: CALL_OW 2
51805: ST_TO_ADDR
51806: GO 51837
// result := Replace ( result , result + 1 , un ) ;
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_VAR 0 3
51817: PPUSH
51818: LD_VAR 0 3
51822: PUSH
51823: LD_INT 1
51825: PLUS
51826: PPUSH
51827: LD_VAR 0 4
51831: PPUSH
51832: CALL_OW 1
51836: ST_TO_ADDR
51837: GO 51763
51839: POP
51840: POP
// end ;
51841: LD_VAR 0 3
51845: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51846: LD_INT 0
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
// result := [ ] ;
51855: LD_ADDR_VAR 0 4
51859: PUSH
51860: EMPTY
51861: ST_TO_ADDR
// if x - r < 0 then
51862: LD_VAR 0 1
51866: PUSH
51867: LD_VAR 0 3
51871: MINUS
51872: PUSH
51873: LD_INT 0
51875: LESS
51876: IFFALSE 51888
// min_x := 0 else
51878: LD_ADDR_VAR 0 8
51882: PUSH
51883: LD_INT 0
51885: ST_TO_ADDR
51886: GO 51904
// min_x := x - r ;
51888: LD_ADDR_VAR 0 8
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: LD_VAR 0 3
51902: MINUS
51903: ST_TO_ADDR
// if y - r < 0 then
51904: LD_VAR 0 2
51908: PUSH
51909: LD_VAR 0 3
51913: MINUS
51914: PUSH
51915: LD_INT 0
51917: LESS
51918: IFFALSE 51930
// min_y := 0 else
51920: LD_ADDR_VAR 0 7
51924: PUSH
51925: LD_INT 0
51927: ST_TO_ADDR
51928: GO 51946
// min_y := y - r ;
51930: LD_ADDR_VAR 0 7
51934: PUSH
51935: LD_VAR 0 2
51939: PUSH
51940: LD_VAR 0 3
51944: MINUS
51945: ST_TO_ADDR
// max_x := x + r ;
51946: LD_ADDR_VAR 0 9
51950: PUSH
51951: LD_VAR 0 1
51955: PUSH
51956: LD_VAR 0 3
51960: PLUS
51961: ST_TO_ADDR
// max_y := y + r ;
51962: LD_ADDR_VAR 0 10
51966: PUSH
51967: LD_VAR 0 2
51971: PUSH
51972: LD_VAR 0 3
51976: PLUS
51977: ST_TO_ADDR
// for _x = min_x to max_x do
51978: LD_ADDR_VAR 0 5
51982: PUSH
51983: DOUBLE
51984: LD_VAR 0 8
51988: DEC
51989: ST_TO_ADDR
51990: LD_VAR 0 9
51994: PUSH
51995: FOR_TO
51996: IFFALSE 52097
// for _y = min_y to max_y do
51998: LD_ADDR_VAR 0 6
52002: PUSH
52003: DOUBLE
52004: LD_VAR 0 7
52008: DEC
52009: ST_TO_ADDR
52010: LD_VAR 0 10
52014: PUSH
52015: FOR_TO
52016: IFFALSE 52093
// begin if not ValidHex ( _x , _y ) then
52018: LD_VAR 0 5
52022: PPUSH
52023: LD_VAR 0 6
52027: PPUSH
52028: CALL_OW 488
52032: NOT
52033: IFFALSE 52037
// continue ;
52035: GO 52015
// if GetResourceTypeXY ( _x , _y ) then
52037: LD_VAR 0 5
52041: PPUSH
52042: LD_VAR 0 6
52046: PPUSH
52047: CALL_OW 283
52051: IFFALSE 52091
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52053: LD_ADDR_VAR 0 4
52057: PUSH
52058: LD_VAR 0 4
52062: PPUSH
52063: LD_VAR 0 4
52067: PUSH
52068: LD_INT 1
52070: PLUS
52071: PPUSH
52072: LD_VAR 0 5
52076: PUSH
52077: LD_VAR 0 6
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PPUSH
52086: CALL_OW 1
52090: ST_TO_ADDR
// end ;
52091: GO 52015
52093: POP
52094: POP
52095: GO 51995
52097: POP
52098: POP
// end ;
52099: LD_VAR 0 4
52103: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52104: LD_INT 0
52106: PPUSH
52107: PPUSH
52108: PPUSH
52109: PPUSH
52110: PPUSH
52111: PPUSH
52112: PPUSH
52113: PPUSH
// if not units then
52114: LD_VAR 0 1
52118: NOT
52119: IFFALSE 52123
// exit ;
52121: GO 52634
// result := UnitFilter ( units , [ f_ok ] ) ;
52123: LD_ADDR_VAR 0 3
52127: PUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: LD_INT 50
52135: PUSH
52136: EMPTY
52137: LIST
52138: PPUSH
52139: CALL_OW 72
52143: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52144: LD_ADDR_VAR 0 8
52148: PUSH
52149: LD_VAR 0 1
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: PPUSH
52158: CALL_OW 255
52162: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52163: LD_ADDR_VAR 0 10
52167: PUSH
52168: LD_INT 29
52170: PUSH
52171: LD_EXP 99
52175: PUSH
52176: LD_INT 49
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// if not result then
52184: LD_VAR 0 3
52188: NOT
52189: IFFALSE 52193
// exit ;
52191: GO 52634
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52193: LD_ADDR_VAR 0 5
52197: PUSH
52198: LD_INT 81
52200: PUSH
52201: LD_VAR 0 8
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PPUSH
52210: CALL_OW 69
52214: ST_TO_ADDR
// for i in result do
52215: LD_ADDR_VAR 0 4
52219: PUSH
52220: LD_VAR 0 3
52224: PUSH
52225: FOR_IN
52226: IFFALSE 52632
// begin tag := GetTag ( i ) + 1 ;
52228: LD_ADDR_VAR 0 9
52232: PUSH
52233: LD_VAR 0 4
52237: PPUSH
52238: CALL_OW 110
52242: PUSH
52243: LD_INT 1
52245: PLUS
52246: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52247: LD_ADDR_VAR 0 7
52251: PUSH
52252: LD_VAR 0 4
52256: PPUSH
52257: CALL_OW 250
52261: PPUSH
52262: LD_VAR 0 4
52266: PPUSH
52267: CALL_OW 251
52271: PPUSH
52272: LD_INT 6
52274: PPUSH
52275: CALL 51846 0 3
52279: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52280: LD_VAR 0 7
52284: PUSH
52285: LD_VAR 0 4
52289: PPUSH
52290: CALL_OW 264
52294: PUSH
52295: LD_VAR 0 10
52299: IN
52300: NOT
52301: AND
52302: IFFALSE 52341
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52304: LD_VAR 0 4
52308: PPUSH
52309: LD_VAR 0 7
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PUSH
52318: LD_INT 1
52320: ARRAY
52321: PPUSH
52322: LD_VAR 0 7
52326: PUSH
52327: LD_INT 1
52329: ARRAY
52330: PUSH
52331: LD_INT 2
52333: ARRAY
52334: PPUSH
52335: CALL_OW 116
52339: GO 52630
// if path > tag then
52341: LD_VAR 0 2
52345: PUSH
52346: LD_VAR 0 9
52350: GREATER
52351: IFFALSE 52559
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
52353: LD_ADDR_VAR 0 6
52357: PUSH
52358: LD_VAR 0 5
52362: PPUSH
52363: LD_INT 91
52365: PUSH
52366: LD_VAR 0 4
52370: PUSH
52371: LD_INT 12
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: PPUSH
52379: CALL_OW 72
52383: ST_TO_ADDR
// if nearEnemy then
52384: LD_VAR 0 6
52388: IFFALSE 52457
// begin if GetWeapon ( i ) = ru_time_lapser then
52390: LD_VAR 0 4
52394: PPUSH
52395: CALL_OW 264
52399: PUSH
52400: LD_INT 49
52402: EQUAL
52403: IFFALSE 52431
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52405: LD_VAR 0 4
52409: PPUSH
52410: LD_VAR 0 6
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: CALL_OW 74
52424: PPUSH
52425: CALL_OW 112
52429: GO 52455
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52431: LD_VAR 0 4
52435: PPUSH
52436: LD_VAR 0 6
52440: PPUSH
52441: LD_VAR 0 4
52445: PPUSH
52446: CALL_OW 74
52450: PPUSH
52451: CALL_OW 115
// end else
52455: GO 52557
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52457: LD_VAR 0 4
52461: PPUSH
52462: LD_VAR 0 2
52466: PUSH
52467: LD_VAR 0 9
52471: ARRAY
52472: PUSH
52473: LD_INT 1
52475: ARRAY
52476: PPUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_VAR 0 9
52486: ARRAY
52487: PUSH
52488: LD_INT 2
52490: ARRAY
52491: PPUSH
52492: CALL_OW 297
52496: PUSH
52497: LD_INT 6
52499: GREATER
52500: IFFALSE 52543
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52502: LD_VAR 0 4
52506: PPUSH
52507: LD_VAR 0 2
52511: PUSH
52512: LD_VAR 0 9
52516: ARRAY
52517: PUSH
52518: LD_INT 1
52520: ARRAY
52521: PPUSH
52522: LD_VAR 0 2
52526: PUSH
52527: LD_VAR 0 9
52531: ARRAY
52532: PUSH
52533: LD_INT 2
52535: ARRAY
52536: PPUSH
52537: CALL_OW 114
52541: GO 52557
// SetTag ( i , tag ) ;
52543: LD_VAR 0 4
52547: PPUSH
52548: LD_VAR 0 9
52552: PPUSH
52553: CALL_OW 109
// end else
52557: GO 52630
// if enemy then
52559: LD_VAR 0 5
52563: IFFALSE 52630
// begin if GetWeapon ( i ) = ru_time_lapser then
52565: LD_VAR 0 4
52569: PPUSH
52570: CALL_OW 264
52574: PUSH
52575: LD_INT 49
52577: EQUAL
52578: IFFALSE 52606
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52580: LD_VAR 0 4
52584: PPUSH
52585: LD_VAR 0 5
52589: PPUSH
52590: LD_VAR 0 4
52594: PPUSH
52595: CALL_OW 74
52599: PPUSH
52600: CALL_OW 112
52604: GO 52630
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52606: LD_VAR 0 4
52610: PPUSH
52611: LD_VAR 0 5
52615: PPUSH
52616: LD_VAR 0 4
52620: PPUSH
52621: CALL_OW 74
52625: PPUSH
52626: CALL_OW 115
// end ; end ;
52630: GO 52225
52632: POP
52633: POP
// end ;
52634: LD_VAR 0 3
52638: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52639: LD_INT 0
52641: PPUSH
52642: PPUSH
52643: PPUSH
// if not unit or IsInUnit ( unit ) then
52644: LD_VAR 0 1
52648: NOT
52649: PUSH
52650: LD_VAR 0 1
52654: PPUSH
52655: CALL_OW 310
52659: OR
52660: IFFALSE 52664
// exit ;
52662: GO 52755
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52664: LD_ADDR_VAR 0 4
52668: PUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: CALL_OW 250
52678: PPUSH
52679: LD_VAR 0 2
52683: PPUSH
52684: LD_INT 1
52686: PPUSH
52687: CALL_OW 272
52691: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52692: LD_ADDR_VAR 0 5
52696: PUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 251
52706: PPUSH
52707: LD_VAR 0 2
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: CALL_OW 273
52719: ST_TO_ADDR
// if ValidHex ( x , y ) then
52720: LD_VAR 0 4
52724: PPUSH
52725: LD_VAR 0 5
52729: PPUSH
52730: CALL_OW 488
52734: IFFALSE 52755
// ComTurnXY ( unit , x , y ) ;
52736: LD_VAR 0 1
52740: PPUSH
52741: LD_VAR 0 4
52745: PPUSH
52746: LD_VAR 0 5
52750: PPUSH
52751: CALL_OW 118
// end ;
52755: LD_VAR 0 3
52759: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52760: LD_INT 0
52762: PPUSH
52763: PPUSH
// result := false ;
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: LD_INT 0
52771: ST_TO_ADDR
// if not units then
52772: LD_VAR 0 2
52776: NOT
52777: IFFALSE 52781
// exit ;
52779: GO 52826
// for i in units do
52781: LD_ADDR_VAR 0 4
52785: PUSH
52786: LD_VAR 0 2
52790: PUSH
52791: FOR_IN
52792: IFFALSE 52824
// if See ( side , i ) then
52794: LD_VAR 0 1
52798: PPUSH
52799: LD_VAR 0 4
52803: PPUSH
52804: CALL_OW 292
52808: IFFALSE 52822
// begin result := true ;
52810: LD_ADDR_VAR 0 3
52814: PUSH
52815: LD_INT 1
52817: ST_TO_ADDR
// exit ;
52818: POP
52819: POP
52820: GO 52826
// end ;
52822: GO 52791
52824: POP
52825: POP
// end ;
52826: LD_VAR 0 3
52830: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52831: LD_INT 0
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
// if not unit or not points then
52837: LD_VAR 0 1
52841: NOT
52842: PUSH
52843: LD_VAR 0 2
52847: NOT
52848: OR
52849: IFFALSE 52853
// exit ;
52851: GO 52943
// dist := 99999 ;
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: LD_INT 99999
52860: ST_TO_ADDR
// for i in points do
52861: LD_ADDR_VAR 0 4
52865: PUSH
52866: LD_VAR 0 2
52870: PUSH
52871: FOR_IN
52872: IFFALSE 52941
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52874: LD_ADDR_VAR 0 6
52878: PUSH
52879: LD_VAR 0 1
52883: PPUSH
52884: LD_VAR 0 4
52888: PUSH
52889: LD_INT 1
52891: ARRAY
52892: PPUSH
52893: LD_VAR 0 4
52897: PUSH
52898: LD_INT 2
52900: ARRAY
52901: PPUSH
52902: CALL_OW 297
52906: ST_TO_ADDR
// if tmpDist < dist then
52907: LD_VAR 0 6
52911: PUSH
52912: LD_VAR 0 5
52916: LESS
52917: IFFALSE 52939
// begin result := i ;
52919: LD_ADDR_VAR 0 3
52923: PUSH
52924: LD_VAR 0 4
52928: ST_TO_ADDR
// dist := tmpDist ;
52929: LD_ADDR_VAR 0 5
52933: PUSH
52934: LD_VAR 0 6
52938: ST_TO_ADDR
// end ; end ;
52939: GO 52871
52941: POP
52942: POP
// end ;
52943: LD_VAR 0 3
52947: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52948: LD_INT 0
52950: PPUSH
// uc_side := side ;
52951: LD_ADDR_OWVAR 20
52955: PUSH
52956: LD_VAR 0 1
52960: ST_TO_ADDR
// uc_nation := 3 ;
52961: LD_ADDR_OWVAR 21
52965: PUSH
52966: LD_INT 3
52968: ST_TO_ADDR
// vc_chassis := 25 ;
52969: LD_ADDR_OWVAR 37
52973: PUSH
52974: LD_INT 25
52976: ST_TO_ADDR
// vc_engine := engine_siberite ;
52977: LD_ADDR_OWVAR 39
52981: PUSH
52982: LD_INT 3
52984: ST_TO_ADDR
// vc_control := control_computer ;
52985: LD_ADDR_OWVAR 38
52989: PUSH
52990: LD_INT 3
52992: ST_TO_ADDR
// vc_weapon := 59 ;
52993: LD_ADDR_OWVAR 40
52997: PUSH
52998: LD_INT 59
53000: ST_TO_ADDR
// result := CreateVehicle ;
53001: LD_ADDR_VAR 0 5
53005: PUSH
53006: CALL_OW 45
53010: ST_TO_ADDR
// SetDir ( result , d ) ;
53011: LD_VAR 0 5
53015: PPUSH
53016: LD_VAR 0 4
53020: PPUSH
53021: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53025: LD_VAR 0 5
53029: PPUSH
53030: LD_VAR 0 2
53034: PPUSH
53035: LD_VAR 0 3
53039: PPUSH
53040: LD_INT 0
53042: PPUSH
53043: CALL_OW 48
// end ;
53047: LD_VAR 0 5
53051: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53052: LD_INT 0
53054: PPUSH
53055: PPUSH
53056: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53057: LD_ADDR_VAR 0 2
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53080: LD_VAR 0 1
53084: NOT
53085: PUSH
53086: LD_VAR 0 1
53090: PPUSH
53091: CALL_OW 264
53095: PUSH
53096: LD_INT 12
53098: PUSH
53099: LD_INT 51
53101: PUSH
53102: LD_INT 32
53104: PUSH
53105: LD_EXP 96
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: IN
53116: NOT
53117: OR
53118: IFFALSE 53122
// exit ;
53120: GO 53220
// for i := 1 to 3 do
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: DOUBLE
53128: LD_INT 1
53130: DEC
53131: ST_TO_ADDR
53132: LD_INT 3
53134: PUSH
53135: FOR_TO
53136: IFFALSE 53218
// begin tmp := GetCargo ( cargo , i ) ;
53138: LD_ADDR_VAR 0 4
53142: PUSH
53143: LD_VAR 0 1
53147: PPUSH
53148: LD_VAR 0 3
53152: PPUSH
53153: CALL_OW 289
53157: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53158: LD_ADDR_VAR 0 2
53162: PUSH
53163: LD_VAR 0 2
53167: PPUSH
53168: LD_VAR 0 3
53172: PPUSH
53173: LD_VAR 0 4
53177: PPUSH
53178: CALL_OW 1
53182: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_VAR 0 2
53192: PPUSH
53193: LD_INT 4
53195: PPUSH
53196: LD_VAR 0 2
53200: PUSH
53201: LD_INT 4
53203: ARRAY
53204: PUSH
53205: LD_VAR 0 4
53209: PLUS
53210: PPUSH
53211: CALL_OW 1
53215: ST_TO_ADDR
// end ;
53216: GO 53135
53218: POP
53219: POP
// end ;
53220: LD_VAR 0 2
53224: RET
// export function Length ( array ) ; begin
53225: LD_INT 0
53227: PPUSH
// result := array + 0 ;
53228: LD_ADDR_VAR 0 2
53232: PUSH
53233: LD_VAR 0 1
53237: PUSH
53238: LD_INT 0
53240: PLUS
53241: ST_TO_ADDR
// end ;
53242: LD_VAR 0 2
53246: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
53247: LD_INT 0
53249: PPUSH
// uc_side := side ;
53250: LD_ADDR_OWVAR 20
53254: PUSH
53255: LD_VAR 0 1
53259: ST_TO_ADDR
// uc_nation := nation ;
53260: LD_ADDR_OWVAR 21
53264: PUSH
53265: LD_VAR 0 2
53269: ST_TO_ADDR
// bc_level := level ;
53270: LD_ADDR_OWVAR 43
53274: PUSH
53275: LD_VAR 0 3
53279: ST_TO_ADDR
// bc_type := typ ;
53280: LD_ADDR_OWVAR 42
53284: PUSH
53285: LD_VAR 0 4
53289: ST_TO_ADDR
// bc_kind1 := - 1 ;
53290: LD_ADDR_OWVAR 44
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: ST_TO_ADDR
// bc_kind2 := - 1 ;
53299: LD_ADDR_OWVAR 45
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
53308: LD_ADDR_VAR 0 9
53312: PUSH
53313: LD_VAR 0 5
53317: PPUSH
53318: LD_VAR 0 6
53322: PPUSH
53323: LD_VAR 0 7
53327: PPUSH
53328: CALL_OW 47
53332: ST_TO_ADDR
// if isInBuildingStage then
53333: LD_VAR 0 8
53337: IFFALSE 53348
// SetBuildingStage ( result ) ;
53339: LD_VAR 0 9
53343: PPUSH
53344: CALL_OW 593
// end ;
53348: LD_VAR 0 9
53352: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
53353: LD_INT 0
53355: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
53356: LD_VAR 0 1
53360: PPUSH
53361: LD_VAR 0 2
53365: PPUSH
53366: LD_INT 0
53368: PPUSH
53369: LD_INT 1
53371: PPUSH
53372: LD_INT 1
53374: PPUSH
53375: LD_INT 0
53377: PPUSH
53378: CALL_OW 587
// end ; end_of_file
53382: LD_VAR 0 3
53386: RET
// every 0 0$1 do
53387: GO 53389
53389: DISABLE
// begin enable ;
53390: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53391: LD_STRING updateTimer(
53393: PUSH
53394: LD_OWVAR 1
53398: STR
53399: PUSH
53400: LD_STRING );
53402: STR
53403: PPUSH
53404: CALL_OW 559
// end ;
53408: END
// export function SOS_MapStart ( ) ; begin
53409: LD_INT 0
53411: PPUSH
// if streamModeActive then
53412: LD_EXP 115
53416: IFFALSE 53425
// DefineStreamItems ( true ) ;
53418: LD_INT 1
53420: PPUSH
53421: CALL 55075 0 1
// UpdateFactoryWaypoints ( ) ;
53425: CALL 68659 0 0
// end ;
53429: LD_VAR 0 1
53433: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53434: LD_INT 0
53436: PPUSH
// if p2 = 100 then
53437: LD_VAR 0 2
53441: PUSH
53442: LD_INT 100
53444: EQUAL
53445: IFFALSE 54448
// begin if not StreamModeActive then
53447: LD_EXP 115
53451: NOT
53452: IFFALSE 53462
// StreamModeActive := true ;
53454: LD_ADDR_EXP 115
53458: PUSH
53459: LD_INT 1
53461: ST_TO_ADDR
// if p3 = 0 then
53462: LD_VAR 0 3
53466: PUSH
53467: LD_INT 0
53469: EQUAL
53470: IFFALSE 53476
// InitStreamMode ;
53472: CALL 54611 0 0
// if p3 = 1 then
53476: LD_VAR 0 3
53480: PUSH
53481: LD_INT 1
53483: EQUAL
53484: IFFALSE 53494
// sRocket := true ;
53486: LD_ADDR_EXP 120
53490: PUSH
53491: LD_INT 1
53493: ST_TO_ADDR
// if p3 = 2 then
53494: LD_VAR 0 3
53498: PUSH
53499: LD_INT 2
53501: EQUAL
53502: IFFALSE 53512
// sSpeed := true ;
53504: LD_ADDR_EXP 119
53508: PUSH
53509: LD_INT 1
53511: ST_TO_ADDR
// if p3 = 3 then
53512: LD_VAR 0 3
53516: PUSH
53517: LD_INT 3
53519: EQUAL
53520: IFFALSE 53530
// sEngine := true ;
53522: LD_ADDR_EXP 121
53526: PUSH
53527: LD_INT 1
53529: ST_TO_ADDR
// if p3 = 4 then
53530: LD_VAR 0 3
53534: PUSH
53535: LD_INT 4
53537: EQUAL
53538: IFFALSE 53548
// sSpec := true ;
53540: LD_ADDR_EXP 118
53544: PUSH
53545: LD_INT 1
53547: ST_TO_ADDR
// if p3 = 5 then
53548: LD_VAR 0 3
53552: PUSH
53553: LD_INT 5
53555: EQUAL
53556: IFFALSE 53566
// sLevel := true ;
53558: LD_ADDR_EXP 122
53562: PUSH
53563: LD_INT 1
53565: ST_TO_ADDR
// if p3 = 6 then
53566: LD_VAR 0 3
53570: PUSH
53571: LD_INT 6
53573: EQUAL
53574: IFFALSE 53584
// sArmoury := true ;
53576: LD_ADDR_EXP 123
53580: PUSH
53581: LD_INT 1
53583: ST_TO_ADDR
// if p3 = 7 then
53584: LD_VAR 0 3
53588: PUSH
53589: LD_INT 7
53591: EQUAL
53592: IFFALSE 53602
// sRadar := true ;
53594: LD_ADDR_EXP 124
53598: PUSH
53599: LD_INT 1
53601: ST_TO_ADDR
// if p3 = 8 then
53602: LD_VAR 0 3
53606: PUSH
53607: LD_INT 8
53609: EQUAL
53610: IFFALSE 53620
// sBunker := true ;
53612: LD_ADDR_EXP 125
53616: PUSH
53617: LD_INT 1
53619: ST_TO_ADDR
// if p3 = 9 then
53620: LD_VAR 0 3
53624: PUSH
53625: LD_INT 9
53627: EQUAL
53628: IFFALSE 53638
// sHack := true ;
53630: LD_ADDR_EXP 126
53634: PUSH
53635: LD_INT 1
53637: ST_TO_ADDR
// if p3 = 10 then
53638: LD_VAR 0 3
53642: PUSH
53643: LD_INT 10
53645: EQUAL
53646: IFFALSE 53656
// sFire := true ;
53648: LD_ADDR_EXP 127
53652: PUSH
53653: LD_INT 1
53655: ST_TO_ADDR
// if p3 = 11 then
53656: LD_VAR 0 3
53660: PUSH
53661: LD_INT 11
53663: EQUAL
53664: IFFALSE 53674
// sRefresh := true ;
53666: LD_ADDR_EXP 128
53670: PUSH
53671: LD_INT 1
53673: ST_TO_ADDR
// if p3 = 12 then
53674: LD_VAR 0 3
53678: PUSH
53679: LD_INT 12
53681: EQUAL
53682: IFFALSE 53692
// sExp := true ;
53684: LD_ADDR_EXP 129
53688: PUSH
53689: LD_INT 1
53691: ST_TO_ADDR
// if p3 = 13 then
53692: LD_VAR 0 3
53696: PUSH
53697: LD_INT 13
53699: EQUAL
53700: IFFALSE 53710
// sDepot := true ;
53702: LD_ADDR_EXP 130
53706: PUSH
53707: LD_INT 1
53709: ST_TO_ADDR
// if p3 = 14 then
53710: LD_VAR 0 3
53714: PUSH
53715: LD_INT 14
53717: EQUAL
53718: IFFALSE 53728
// sFlag := true ;
53720: LD_ADDR_EXP 131
53724: PUSH
53725: LD_INT 1
53727: ST_TO_ADDR
// if p3 = 15 then
53728: LD_VAR 0 3
53732: PUSH
53733: LD_INT 15
53735: EQUAL
53736: IFFALSE 53746
// sKamikadze := true ;
53738: LD_ADDR_EXP 139
53742: PUSH
53743: LD_INT 1
53745: ST_TO_ADDR
// if p3 = 16 then
53746: LD_VAR 0 3
53750: PUSH
53751: LD_INT 16
53753: EQUAL
53754: IFFALSE 53764
// sTroll := true ;
53756: LD_ADDR_EXP 140
53760: PUSH
53761: LD_INT 1
53763: ST_TO_ADDR
// if p3 = 17 then
53764: LD_VAR 0 3
53768: PUSH
53769: LD_INT 17
53771: EQUAL
53772: IFFALSE 53782
// sSlow := true ;
53774: LD_ADDR_EXP 141
53778: PUSH
53779: LD_INT 1
53781: ST_TO_ADDR
// if p3 = 18 then
53782: LD_VAR 0 3
53786: PUSH
53787: LD_INT 18
53789: EQUAL
53790: IFFALSE 53800
// sLack := true ;
53792: LD_ADDR_EXP 142
53796: PUSH
53797: LD_INT 1
53799: ST_TO_ADDR
// if p3 = 19 then
53800: LD_VAR 0 3
53804: PUSH
53805: LD_INT 19
53807: EQUAL
53808: IFFALSE 53818
// sTank := true ;
53810: LD_ADDR_EXP 144
53814: PUSH
53815: LD_INT 1
53817: ST_TO_ADDR
// if p3 = 20 then
53818: LD_VAR 0 3
53822: PUSH
53823: LD_INT 20
53825: EQUAL
53826: IFFALSE 53836
// sRemote := true ;
53828: LD_ADDR_EXP 145
53832: PUSH
53833: LD_INT 1
53835: ST_TO_ADDR
// if p3 = 21 then
53836: LD_VAR 0 3
53840: PUSH
53841: LD_INT 21
53843: EQUAL
53844: IFFALSE 53854
// sPowell := true ;
53846: LD_ADDR_EXP 146
53850: PUSH
53851: LD_INT 1
53853: ST_TO_ADDR
// if p3 = 22 then
53854: LD_VAR 0 3
53858: PUSH
53859: LD_INT 22
53861: EQUAL
53862: IFFALSE 53872
// sTeleport := true ;
53864: LD_ADDR_EXP 149
53868: PUSH
53869: LD_INT 1
53871: ST_TO_ADDR
// if p3 = 23 then
53872: LD_VAR 0 3
53876: PUSH
53877: LD_INT 23
53879: EQUAL
53880: IFFALSE 53890
// sOilTower := true ;
53882: LD_ADDR_EXP 151
53886: PUSH
53887: LD_INT 1
53889: ST_TO_ADDR
// if p3 = 24 then
53890: LD_VAR 0 3
53894: PUSH
53895: LD_INT 24
53897: EQUAL
53898: IFFALSE 53908
// sShovel := true ;
53900: LD_ADDR_EXP 152
53904: PUSH
53905: LD_INT 1
53907: ST_TO_ADDR
// if p3 = 25 then
53908: LD_VAR 0 3
53912: PUSH
53913: LD_INT 25
53915: EQUAL
53916: IFFALSE 53926
// sSheik := true ;
53918: LD_ADDR_EXP 153
53922: PUSH
53923: LD_INT 1
53925: ST_TO_ADDR
// if p3 = 26 then
53926: LD_VAR 0 3
53930: PUSH
53931: LD_INT 26
53933: EQUAL
53934: IFFALSE 53944
// sEarthquake := true ;
53936: LD_ADDR_EXP 155
53940: PUSH
53941: LD_INT 1
53943: ST_TO_ADDR
// if p3 = 27 then
53944: LD_VAR 0 3
53948: PUSH
53949: LD_INT 27
53951: EQUAL
53952: IFFALSE 53962
// sAI := true ;
53954: LD_ADDR_EXP 156
53958: PUSH
53959: LD_INT 1
53961: ST_TO_ADDR
// if p3 = 28 then
53962: LD_VAR 0 3
53966: PUSH
53967: LD_INT 28
53969: EQUAL
53970: IFFALSE 53980
// sCargo := true ;
53972: LD_ADDR_EXP 159
53976: PUSH
53977: LD_INT 1
53979: ST_TO_ADDR
// if p3 = 29 then
53980: LD_VAR 0 3
53984: PUSH
53985: LD_INT 29
53987: EQUAL
53988: IFFALSE 53998
// sDLaser := true ;
53990: LD_ADDR_EXP 160
53994: PUSH
53995: LD_INT 1
53997: ST_TO_ADDR
// if p3 = 30 then
53998: LD_VAR 0 3
54002: PUSH
54003: LD_INT 30
54005: EQUAL
54006: IFFALSE 54016
// sExchange := true ;
54008: LD_ADDR_EXP 161
54012: PUSH
54013: LD_INT 1
54015: ST_TO_ADDR
// if p3 = 31 then
54016: LD_VAR 0 3
54020: PUSH
54021: LD_INT 31
54023: EQUAL
54024: IFFALSE 54034
// sFac := true ;
54026: LD_ADDR_EXP 162
54030: PUSH
54031: LD_INT 1
54033: ST_TO_ADDR
// if p3 = 32 then
54034: LD_VAR 0 3
54038: PUSH
54039: LD_INT 32
54041: EQUAL
54042: IFFALSE 54052
// sPower := true ;
54044: LD_ADDR_EXP 163
54048: PUSH
54049: LD_INT 1
54051: ST_TO_ADDR
// if p3 = 33 then
54052: LD_VAR 0 3
54056: PUSH
54057: LD_INT 33
54059: EQUAL
54060: IFFALSE 54070
// sRandom := true ;
54062: LD_ADDR_EXP 164
54066: PUSH
54067: LD_INT 1
54069: ST_TO_ADDR
// if p3 = 34 then
54070: LD_VAR 0 3
54074: PUSH
54075: LD_INT 34
54077: EQUAL
54078: IFFALSE 54088
// sShield := true ;
54080: LD_ADDR_EXP 165
54084: PUSH
54085: LD_INT 1
54087: ST_TO_ADDR
// if p3 = 35 then
54088: LD_VAR 0 3
54092: PUSH
54093: LD_INT 35
54095: EQUAL
54096: IFFALSE 54106
// sTime := true ;
54098: LD_ADDR_EXP 166
54102: PUSH
54103: LD_INT 1
54105: ST_TO_ADDR
// if p3 = 36 then
54106: LD_VAR 0 3
54110: PUSH
54111: LD_INT 36
54113: EQUAL
54114: IFFALSE 54124
// sTools := true ;
54116: LD_ADDR_EXP 167
54120: PUSH
54121: LD_INT 1
54123: ST_TO_ADDR
// if p3 = 101 then
54124: LD_VAR 0 3
54128: PUSH
54129: LD_INT 101
54131: EQUAL
54132: IFFALSE 54142
// sSold := true ;
54134: LD_ADDR_EXP 132
54138: PUSH
54139: LD_INT 1
54141: ST_TO_ADDR
// if p3 = 102 then
54142: LD_VAR 0 3
54146: PUSH
54147: LD_INT 102
54149: EQUAL
54150: IFFALSE 54160
// sDiff := true ;
54152: LD_ADDR_EXP 133
54156: PUSH
54157: LD_INT 1
54159: ST_TO_ADDR
// if p3 = 103 then
54160: LD_VAR 0 3
54164: PUSH
54165: LD_INT 103
54167: EQUAL
54168: IFFALSE 54178
// sFog := true ;
54170: LD_ADDR_EXP 136
54174: PUSH
54175: LD_INT 1
54177: ST_TO_ADDR
// if p3 = 104 then
54178: LD_VAR 0 3
54182: PUSH
54183: LD_INT 104
54185: EQUAL
54186: IFFALSE 54196
// sReset := true ;
54188: LD_ADDR_EXP 137
54192: PUSH
54193: LD_INT 1
54195: ST_TO_ADDR
// if p3 = 105 then
54196: LD_VAR 0 3
54200: PUSH
54201: LD_INT 105
54203: EQUAL
54204: IFFALSE 54214
// sSun := true ;
54206: LD_ADDR_EXP 138
54210: PUSH
54211: LD_INT 1
54213: ST_TO_ADDR
// if p3 = 106 then
54214: LD_VAR 0 3
54218: PUSH
54219: LD_INT 106
54221: EQUAL
54222: IFFALSE 54232
// sTiger := true ;
54224: LD_ADDR_EXP 134
54228: PUSH
54229: LD_INT 1
54231: ST_TO_ADDR
// if p3 = 107 then
54232: LD_VAR 0 3
54236: PUSH
54237: LD_INT 107
54239: EQUAL
54240: IFFALSE 54250
// sBomb := true ;
54242: LD_ADDR_EXP 135
54246: PUSH
54247: LD_INT 1
54249: ST_TO_ADDR
// if p3 = 108 then
54250: LD_VAR 0 3
54254: PUSH
54255: LD_INT 108
54257: EQUAL
54258: IFFALSE 54268
// sWound := true ;
54260: LD_ADDR_EXP 143
54264: PUSH
54265: LD_INT 1
54267: ST_TO_ADDR
// if p3 = 109 then
54268: LD_VAR 0 3
54272: PUSH
54273: LD_INT 109
54275: EQUAL
54276: IFFALSE 54286
// sBetray := true ;
54278: LD_ADDR_EXP 147
54282: PUSH
54283: LD_INT 1
54285: ST_TO_ADDR
// if p3 = 110 then
54286: LD_VAR 0 3
54290: PUSH
54291: LD_INT 110
54293: EQUAL
54294: IFFALSE 54304
// sContamin := true ;
54296: LD_ADDR_EXP 148
54300: PUSH
54301: LD_INT 1
54303: ST_TO_ADDR
// if p3 = 111 then
54304: LD_VAR 0 3
54308: PUSH
54309: LD_INT 111
54311: EQUAL
54312: IFFALSE 54322
// sOil := true ;
54314: LD_ADDR_EXP 150
54318: PUSH
54319: LD_INT 1
54321: ST_TO_ADDR
// if p3 = 112 then
54322: LD_VAR 0 3
54326: PUSH
54327: LD_INT 112
54329: EQUAL
54330: IFFALSE 54340
// sStu := true ;
54332: LD_ADDR_EXP 154
54336: PUSH
54337: LD_INT 1
54339: ST_TO_ADDR
// if p3 = 113 then
54340: LD_VAR 0 3
54344: PUSH
54345: LD_INT 113
54347: EQUAL
54348: IFFALSE 54358
// sBazooka := true ;
54350: LD_ADDR_EXP 157
54354: PUSH
54355: LD_INT 1
54357: ST_TO_ADDR
// if p3 = 114 then
54358: LD_VAR 0 3
54362: PUSH
54363: LD_INT 114
54365: EQUAL
54366: IFFALSE 54376
// sMortar := true ;
54368: LD_ADDR_EXP 158
54372: PUSH
54373: LD_INT 1
54375: ST_TO_ADDR
// if p3 = 115 then
54376: LD_VAR 0 3
54380: PUSH
54381: LD_INT 115
54383: EQUAL
54384: IFFALSE 54394
// sRanger := true ;
54386: LD_ADDR_EXP 168
54390: PUSH
54391: LD_INT 1
54393: ST_TO_ADDR
// if p3 = 116 then
54394: LD_VAR 0 3
54398: PUSH
54399: LD_INT 116
54401: EQUAL
54402: IFFALSE 54412
// sComputer := true ;
54404: LD_ADDR_EXP 169
54408: PUSH
54409: LD_INT 1
54411: ST_TO_ADDR
// if p3 = 117 then
54412: LD_VAR 0 3
54416: PUSH
54417: LD_INT 117
54419: EQUAL
54420: IFFALSE 54430
// s30 := true ;
54422: LD_ADDR_EXP 170
54426: PUSH
54427: LD_INT 1
54429: ST_TO_ADDR
// if p3 = 118 then
54430: LD_VAR 0 3
54434: PUSH
54435: LD_INT 118
54437: EQUAL
54438: IFFALSE 54448
// s60 := true ;
54440: LD_ADDR_EXP 171
54444: PUSH
54445: LD_INT 1
54447: ST_TO_ADDR
// end ; if p2 = 101 then
54448: LD_VAR 0 2
54452: PUSH
54453: LD_INT 101
54455: EQUAL
54456: IFFALSE 54584
// begin case p3 of 1 :
54458: LD_VAR 0 3
54462: PUSH
54463: LD_INT 1
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54471
54469: GO 54478
54471: POP
// hHackUnlimitedResources ; 2 :
54472: CALL 66682 0 0
54476: GO 54584
54478: LD_INT 2
54480: DOUBLE
54481: EQUAL
54482: IFTRUE 54486
54484: GO 54493
54486: POP
// hHackSetLevel10 ; 3 :
54487: CALL 66815 0 0
54491: GO 54584
54493: LD_INT 3
54495: DOUBLE
54496: EQUAL
54497: IFTRUE 54501
54499: GO 54508
54501: POP
// hHackSetLevel10YourUnits ; 4 :
54502: CALL 66900 0 0
54506: GO 54584
54508: LD_INT 4
54510: DOUBLE
54511: EQUAL
54512: IFTRUE 54516
54514: GO 54523
54516: POP
// hHackInvincible ; 5 :
54517: CALL 67348 0 0
54521: GO 54584
54523: LD_INT 5
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54538
54531: POP
// hHackInvisible ; 6 :
54532: CALL 67459 0 0
54536: GO 54584
54538: LD_INT 6
54540: DOUBLE
54541: EQUAL
54542: IFTRUE 54546
54544: GO 54553
54546: POP
// hHackChangeYourSide ; 7 :
54547: CALL 67516 0 0
54551: GO 54584
54553: LD_INT 7
54555: DOUBLE
54556: EQUAL
54557: IFTRUE 54561
54559: GO 54568
54561: POP
// hHackChangeUnitSide ; 8 :
54562: CALL 67558 0 0
54566: GO 54584
54568: LD_INT 8
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 54583
54576: POP
// hHackFog ; end ;
54577: CALL 67659 0 0
54581: GO 54584
54583: POP
// end ; end ;
54584: LD_VAR 0 7
54588: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
54589: GO 54591
54591: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
54592: LD_STRING initStreamRollete();
54594: PPUSH
54595: CALL_OW 559
// InitStreamMode ;
54599: CALL 54611 0 0
// DefineStreamItems ( false ) ;
54603: LD_INT 0
54605: PPUSH
54606: CALL 55075 0 1
// end ;
54610: END
// function InitStreamMode ; begin
54611: LD_INT 0
54613: PPUSH
// streamModeActive := false ;
54614: LD_ADDR_EXP 115
54618: PUSH
54619: LD_INT 0
54621: ST_TO_ADDR
// normalCounter := 36 ;
54622: LD_ADDR_EXP 116
54626: PUSH
54627: LD_INT 36
54629: ST_TO_ADDR
// hardcoreCounter := 18 ;
54630: LD_ADDR_EXP 117
54634: PUSH
54635: LD_INT 18
54637: ST_TO_ADDR
// sRocket := false ;
54638: LD_ADDR_EXP 120
54642: PUSH
54643: LD_INT 0
54645: ST_TO_ADDR
// sSpeed := false ;
54646: LD_ADDR_EXP 119
54650: PUSH
54651: LD_INT 0
54653: ST_TO_ADDR
// sEngine := false ;
54654: LD_ADDR_EXP 121
54658: PUSH
54659: LD_INT 0
54661: ST_TO_ADDR
// sSpec := false ;
54662: LD_ADDR_EXP 118
54666: PUSH
54667: LD_INT 0
54669: ST_TO_ADDR
// sLevel := false ;
54670: LD_ADDR_EXP 122
54674: PUSH
54675: LD_INT 0
54677: ST_TO_ADDR
// sArmoury := false ;
54678: LD_ADDR_EXP 123
54682: PUSH
54683: LD_INT 0
54685: ST_TO_ADDR
// sRadar := false ;
54686: LD_ADDR_EXP 124
54690: PUSH
54691: LD_INT 0
54693: ST_TO_ADDR
// sBunker := false ;
54694: LD_ADDR_EXP 125
54698: PUSH
54699: LD_INT 0
54701: ST_TO_ADDR
// sHack := false ;
54702: LD_ADDR_EXP 126
54706: PUSH
54707: LD_INT 0
54709: ST_TO_ADDR
// sFire := false ;
54710: LD_ADDR_EXP 127
54714: PUSH
54715: LD_INT 0
54717: ST_TO_ADDR
// sRefresh := false ;
54718: LD_ADDR_EXP 128
54722: PUSH
54723: LD_INT 0
54725: ST_TO_ADDR
// sExp := false ;
54726: LD_ADDR_EXP 129
54730: PUSH
54731: LD_INT 0
54733: ST_TO_ADDR
// sDepot := false ;
54734: LD_ADDR_EXP 130
54738: PUSH
54739: LD_INT 0
54741: ST_TO_ADDR
// sFlag := false ;
54742: LD_ADDR_EXP 131
54746: PUSH
54747: LD_INT 0
54749: ST_TO_ADDR
// sKamikadze := false ;
54750: LD_ADDR_EXP 139
54754: PUSH
54755: LD_INT 0
54757: ST_TO_ADDR
// sTroll := false ;
54758: LD_ADDR_EXP 140
54762: PUSH
54763: LD_INT 0
54765: ST_TO_ADDR
// sSlow := false ;
54766: LD_ADDR_EXP 141
54770: PUSH
54771: LD_INT 0
54773: ST_TO_ADDR
// sLack := false ;
54774: LD_ADDR_EXP 142
54778: PUSH
54779: LD_INT 0
54781: ST_TO_ADDR
// sTank := false ;
54782: LD_ADDR_EXP 144
54786: PUSH
54787: LD_INT 0
54789: ST_TO_ADDR
// sRemote := false ;
54790: LD_ADDR_EXP 145
54794: PUSH
54795: LD_INT 0
54797: ST_TO_ADDR
// sPowell := false ;
54798: LD_ADDR_EXP 146
54802: PUSH
54803: LD_INT 0
54805: ST_TO_ADDR
// sTeleport := false ;
54806: LD_ADDR_EXP 149
54810: PUSH
54811: LD_INT 0
54813: ST_TO_ADDR
// sOilTower := false ;
54814: LD_ADDR_EXP 151
54818: PUSH
54819: LD_INT 0
54821: ST_TO_ADDR
// sShovel := false ;
54822: LD_ADDR_EXP 152
54826: PUSH
54827: LD_INT 0
54829: ST_TO_ADDR
// sSheik := false ;
54830: LD_ADDR_EXP 153
54834: PUSH
54835: LD_INT 0
54837: ST_TO_ADDR
// sEarthquake := false ;
54838: LD_ADDR_EXP 155
54842: PUSH
54843: LD_INT 0
54845: ST_TO_ADDR
// sAI := false ;
54846: LD_ADDR_EXP 156
54850: PUSH
54851: LD_INT 0
54853: ST_TO_ADDR
// sCargo := false ;
54854: LD_ADDR_EXP 159
54858: PUSH
54859: LD_INT 0
54861: ST_TO_ADDR
// sDLaser := false ;
54862: LD_ADDR_EXP 160
54866: PUSH
54867: LD_INT 0
54869: ST_TO_ADDR
// sExchange := false ;
54870: LD_ADDR_EXP 161
54874: PUSH
54875: LD_INT 0
54877: ST_TO_ADDR
// sFac := false ;
54878: LD_ADDR_EXP 162
54882: PUSH
54883: LD_INT 0
54885: ST_TO_ADDR
// sPower := false ;
54886: LD_ADDR_EXP 163
54890: PUSH
54891: LD_INT 0
54893: ST_TO_ADDR
// sRandom := false ;
54894: LD_ADDR_EXP 164
54898: PUSH
54899: LD_INT 0
54901: ST_TO_ADDR
// sShield := false ;
54902: LD_ADDR_EXP 165
54906: PUSH
54907: LD_INT 0
54909: ST_TO_ADDR
// sTime := false ;
54910: LD_ADDR_EXP 166
54914: PUSH
54915: LD_INT 0
54917: ST_TO_ADDR
// sTools := false ;
54918: LD_ADDR_EXP 167
54922: PUSH
54923: LD_INT 0
54925: ST_TO_ADDR
// sSold := false ;
54926: LD_ADDR_EXP 132
54930: PUSH
54931: LD_INT 0
54933: ST_TO_ADDR
// sDiff := false ;
54934: LD_ADDR_EXP 133
54938: PUSH
54939: LD_INT 0
54941: ST_TO_ADDR
// sFog := false ;
54942: LD_ADDR_EXP 136
54946: PUSH
54947: LD_INT 0
54949: ST_TO_ADDR
// sReset := false ;
54950: LD_ADDR_EXP 137
54954: PUSH
54955: LD_INT 0
54957: ST_TO_ADDR
// sSun := false ;
54958: LD_ADDR_EXP 138
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
// sTiger := false ;
54966: LD_ADDR_EXP 134
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
// sBomb := false ;
54974: LD_ADDR_EXP 135
54978: PUSH
54979: LD_INT 0
54981: ST_TO_ADDR
// sWound := false ;
54982: LD_ADDR_EXP 143
54986: PUSH
54987: LD_INT 0
54989: ST_TO_ADDR
// sBetray := false ;
54990: LD_ADDR_EXP 147
54994: PUSH
54995: LD_INT 0
54997: ST_TO_ADDR
// sContamin := false ;
54998: LD_ADDR_EXP 148
55002: PUSH
55003: LD_INT 0
55005: ST_TO_ADDR
// sOil := false ;
55006: LD_ADDR_EXP 150
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
// sStu := false ;
55014: LD_ADDR_EXP 154
55018: PUSH
55019: LD_INT 0
55021: ST_TO_ADDR
// sBazooka := false ;
55022: LD_ADDR_EXP 157
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// sMortar := false ;
55030: LD_ADDR_EXP 158
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// sRanger := false ;
55038: LD_ADDR_EXP 168
55042: PUSH
55043: LD_INT 0
55045: ST_TO_ADDR
// sComputer := false ;
55046: LD_ADDR_EXP 169
55050: PUSH
55051: LD_INT 0
55053: ST_TO_ADDR
// s30 := false ;
55054: LD_ADDR_EXP 170
55058: PUSH
55059: LD_INT 0
55061: ST_TO_ADDR
// s60 := false ;
55062: LD_ADDR_EXP 171
55066: PUSH
55067: LD_INT 0
55069: ST_TO_ADDR
// end ;
55070: LD_VAR 0 1
55074: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55075: LD_INT 0
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
// result := [ ] ;
55084: LD_ADDR_VAR 0 2
55088: PUSH
55089: EMPTY
55090: ST_TO_ADDR
// if campaign_id = 1 then
55091: LD_OWVAR 69
55095: PUSH
55096: LD_INT 1
55098: EQUAL
55099: IFFALSE 58265
// begin case mission_number of 1 :
55101: LD_OWVAR 70
55105: PUSH
55106: LD_INT 1
55108: DOUBLE
55109: EQUAL
55110: IFTRUE 55114
55112: GO 55190
55114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55115: LD_ADDR_VAR 0 2
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: LD_INT 11
55128: PUSH
55129: LD_INT 12
55131: PUSH
55132: LD_INT 15
55134: PUSH
55135: LD_INT 16
55137: PUSH
55138: LD_INT 22
55140: PUSH
55141: LD_INT 23
55143: PUSH
55144: LD_INT 26
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 101
55160: PUSH
55161: LD_INT 102
55163: PUSH
55164: LD_INT 106
55166: PUSH
55167: LD_INT 116
55169: PUSH
55170: LD_INT 117
55172: PUSH
55173: LD_INT 118
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: ST_TO_ADDR
55188: GO 58263
55190: LD_INT 2
55192: DOUBLE
55193: EQUAL
55194: IFTRUE 55198
55196: GO 55282
55198: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55199: LD_ADDR_VAR 0 2
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 4
55209: PUSH
55210: LD_INT 11
55212: PUSH
55213: LD_INT 12
55215: PUSH
55216: LD_INT 15
55218: PUSH
55219: LD_INT 16
55221: PUSH
55222: LD_INT 22
55224: PUSH
55225: LD_INT 23
55227: PUSH
55228: LD_INT 26
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 101
55244: PUSH
55245: LD_INT 102
55247: PUSH
55248: LD_INT 105
55250: PUSH
55251: LD_INT 106
55253: PUSH
55254: LD_INT 108
55256: PUSH
55257: LD_INT 116
55259: PUSH
55260: LD_INT 117
55262: PUSH
55263: LD_INT 118
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: ST_TO_ADDR
55280: GO 58263
55282: LD_INT 3
55284: DOUBLE
55285: EQUAL
55286: IFTRUE 55290
55288: GO 55378
55290: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55291: LD_ADDR_VAR 0 2
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 4
55301: PUSH
55302: LD_INT 5
55304: PUSH
55305: LD_INT 11
55307: PUSH
55308: LD_INT 12
55310: PUSH
55311: LD_INT 15
55313: PUSH
55314: LD_INT 16
55316: PUSH
55317: LD_INT 22
55319: PUSH
55320: LD_INT 26
55322: PUSH
55323: LD_INT 36
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 101
55340: PUSH
55341: LD_INT 102
55343: PUSH
55344: LD_INT 105
55346: PUSH
55347: LD_INT 106
55349: PUSH
55350: LD_INT 108
55352: PUSH
55353: LD_INT 116
55355: PUSH
55356: LD_INT 117
55358: PUSH
55359: LD_INT 118
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: ST_TO_ADDR
55376: GO 58263
55378: LD_INT 4
55380: DOUBLE
55381: EQUAL
55382: IFTRUE 55386
55384: GO 55482
55386: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55387: LD_ADDR_VAR 0 2
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 4
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: LD_INT 8
55403: PUSH
55404: LD_INT 11
55406: PUSH
55407: LD_INT 12
55409: PUSH
55410: LD_INT 15
55412: PUSH
55413: LD_INT 16
55415: PUSH
55416: LD_INT 22
55418: PUSH
55419: LD_INT 23
55421: PUSH
55422: LD_INT 26
55424: PUSH
55425: LD_INT 36
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 101
55444: PUSH
55445: LD_INT 102
55447: PUSH
55448: LD_INT 105
55450: PUSH
55451: LD_INT 106
55453: PUSH
55454: LD_INT 108
55456: PUSH
55457: LD_INT 116
55459: PUSH
55460: LD_INT 117
55462: PUSH
55463: LD_INT 118
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: ST_TO_ADDR
55480: GO 58263
55482: LD_INT 5
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55490
55488: GO 55602
55490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55491: LD_ADDR_VAR 0 2
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: LD_INT 5
55504: PUSH
55505: LD_INT 6
55507: PUSH
55508: LD_INT 8
55510: PUSH
55511: LD_INT 11
55513: PUSH
55514: LD_INT 12
55516: PUSH
55517: LD_INT 15
55519: PUSH
55520: LD_INT 16
55522: PUSH
55523: LD_INT 22
55525: PUSH
55526: LD_INT 23
55528: PUSH
55529: LD_INT 25
55531: PUSH
55532: LD_INT 26
55534: PUSH
55535: LD_INT 36
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 101
55556: PUSH
55557: LD_INT 102
55559: PUSH
55560: LD_INT 105
55562: PUSH
55563: LD_INT 106
55565: PUSH
55566: LD_INT 108
55568: PUSH
55569: LD_INT 109
55571: PUSH
55572: LD_INT 112
55574: PUSH
55575: LD_INT 116
55577: PUSH
55578: LD_INT 117
55580: PUSH
55581: LD_INT 118
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: ST_TO_ADDR
55600: GO 58263
55602: LD_INT 6
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55610
55608: GO 55742
55610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55611: LD_ADDR_VAR 0 2
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: LD_INT 5
55624: PUSH
55625: LD_INT 6
55627: PUSH
55628: LD_INT 8
55630: PUSH
55631: LD_INT 11
55633: PUSH
55634: LD_INT 12
55636: PUSH
55637: LD_INT 15
55639: PUSH
55640: LD_INT 16
55642: PUSH
55643: LD_INT 20
55645: PUSH
55646: LD_INT 21
55648: PUSH
55649: LD_INT 22
55651: PUSH
55652: LD_INT 23
55654: PUSH
55655: LD_INT 25
55657: PUSH
55658: LD_INT 26
55660: PUSH
55661: LD_INT 30
55663: PUSH
55664: LD_INT 31
55666: PUSH
55667: LD_INT 32
55669: PUSH
55670: LD_INT 36
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 101
55696: PUSH
55697: LD_INT 102
55699: PUSH
55700: LD_INT 105
55702: PUSH
55703: LD_INT 106
55705: PUSH
55706: LD_INT 108
55708: PUSH
55709: LD_INT 109
55711: PUSH
55712: LD_INT 112
55714: PUSH
55715: LD_INT 116
55717: PUSH
55718: LD_INT 117
55720: PUSH
55721: LD_INT 118
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: ST_TO_ADDR
55740: GO 58263
55742: LD_INT 7
55744: DOUBLE
55745: EQUAL
55746: IFTRUE 55750
55748: GO 55862
55750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55751: LD_ADDR_VAR 0 2
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: LD_INT 5
55764: PUSH
55765: LD_INT 7
55767: PUSH
55768: LD_INT 11
55770: PUSH
55771: LD_INT 12
55773: PUSH
55774: LD_INT 15
55776: PUSH
55777: LD_INT 16
55779: PUSH
55780: LD_INT 20
55782: PUSH
55783: LD_INT 21
55785: PUSH
55786: LD_INT 22
55788: PUSH
55789: LD_INT 23
55791: PUSH
55792: LD_INT 25
55794: PUSH
55795: LD_INT 26
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 101
55816: PUSH
55817: LD_INT 102
55819: PUSH
55820: LD_INT 103
55822: PUSH
55823: LD_INT 105
55825: PUSH
55826: LD_INT 106
55828: PUSH
55829: LD_INT 108
55831: PUSH
55832: LD_INT 112
55834: PUSH
55835: LD_INT 116
55837: PUSH
55838: LD_INT 117
55840: PUSH
55841: LD_INT 118
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: ST_TO_ADDR
55860: GO 58263
55862: LD_INT 8
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 56010
55870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55871: LD_ADDR_VAR 0 2
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 4
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: LD_INT 6
55887: PUSH
55888: LD_INT 7
55890: PUSH
55891: LD_INT 8
55893: PUSH
55894: LD_INT 11
55896: PUSH
55897: LD_INT 12
55899: PUSH
55900: LD_INT 15
55902: PUSH
55903: LD_INT 16
55905: PUSH
55906: LD_INT 20
55908: PUSH
55909: LD_INT 21
55911: PUSH
55912: LD_INT 22
55914: PUSH
55915: LD_INT 23
55917: PUSH
55918: LD_INT 25
55920: PUSH
55921: LD_INT 26
55923: PUSH
55924: LD_INT 30
55926: PUSH
55927: LD_INT 31
55929: PUSH
55930: LD_INT 32
55932: PUSH
55933: LD_INT 36
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 101
55960: PUSH
55961: LD_INT 102
55963: PUSH
55964: LD_INT 103
55966: PUSH
55967: LD_INT 105
55969: PUSH
55970: LD_INT 106
55972: PUSH
55973: LD_INT 108
55975: PUSH
55976: LD_INT 109
55978: PUSH
55979: LD_INT 112
55981: PUSH
55982: LD_INT 116
55984: PUSH
55985: LD_INT 117
55987: PUSH
55988: LD_INT 118
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: ST_TO_ADDR
56008: GO 58263
56010: LD_INT 9
56012: DOUBLE
56013: EQUAL
56014: IFTRUE 56018
56016: GO 56166
56018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56019: LD_ADDR_VAR 0 2
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: LD_INT 6
56035: PUSH
56036: LD_INT 7
56038: PUSH
56039: LD_INT 8
56041: PUSH
56042: LD_INT 11
56044: PUSH
56045: LD_INT 12
56047: PUSH
56048: LD_INT 15
56050: PUSH
56051: LD_INT 16
56053: PUSH
56054: LD_INT 20
56056: PUSH
56057: LD_INT 21
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_INT 23
56065: PUSH
56066: LD_INT 25
56068: PUSH
56069: LD_INT 26
56071: PUSH
56072: LD_INT 28
56074: PUSH
56075: LD_INT 30
56077: PUSH
56078: LD_INT 31
56080: PUSH
56081: LD_INT 32
56083: PUSH
56084: LD_INT 36
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 101
56112: PUSH
56113: LD_INT 102
56115: PUSH
56116: LD_INT 103
56118: PUSH
56119: LD_INT 105
56121: PUSH
56122: LD_INT 106
56124: PUSH
56125: LD_INT 108
56127: PUSH
56128: LD_INT 109
56130: PUSH
56131: LD_INT 112
56133: PUSH
56134: LD_INT 114
56136: PUSH
56137: LD_INT 116
56139: PUSH
56140: LD_INT 117
56142: PUSH
56143: LD_INT 118
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: ST_TO_ADDR
56164: GO 58263
56166: LD_INT 10
56168: DOUBLE
56169: EQUAL
56170: IFTRUE 56174
56172: GO 56370
56174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56175: LD_ADDR_VAR 0 2
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 4
56185: PUSH
56186: LD_INT 5
56188: PUSH
56189: LD_INT 6
56191: PUSH
56192: LD_INT 7
56194: PUSH
56195: LD_INT 8
56197: PUSH
56198: LD_INT 9
56200: PUSH
56201: LD_INT 10
56203: PUSH
56204: LD_INT 11
56206: PUSH
56207: LD_INT 12
56209: PUSH
56210: LD_INT 13
56212: PUSH
56213: LD_INT 14
56215: PUSH
56216: LD_INT 15
56218: PUSH
56219: LD_INT 16
56221: PUSH
56222: LD_INT 17
56224: PUSH
56225: LD_INT 18
56227: PUSH
56228: LD_INT 19
56230: PUSH
56231: LD_INT 20
56233: PUSH
56234: LD_INT 21
56236: PUSH
56237: LD_INT 22
56239: PUSH
56240: LD_INT 23
56242: PUSH
56243: LD_INT 24
56245: PUSH
56246: LD_INT 25
56248: PUSH
56249: LD_INT 26
56251: PUSH
56252: LD_INT 28
56254: PUSH
56255: LD_INT 30
56257: PUSH
56258: LD_INT 31
56260: PUSH
56261: LD_INT 32
56263: PUSH
56264: LD_INT 36
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 101
56300: PUSH
56301: LD_INT 102
56303: PUSH
56304: LD_INT 103
56306: PUSH
56307: LD_INT 104
56309: PUSH
56310: LD_INT 105
56312: PUSH
56313: LD_INT 106
56315: PUSH
56316: LD_INT 107
56318: PUSH
56319: LD_INT 108
56321: PUSH
56322: LD_INT 109
56324: PUSH
56325: LD_INT 110
56327: PUSH
56328: LD_INT 111
56330: PUSH
56331: LD_INT 112
56333: PUSH
56334: LD_INT 114
56336: PUSH
56337: LD_INT 116
56339: PUSH
56340: LD_INT 117
56342: PUSH
56343: LD_INT 118
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: ST_TO_ADDR
56368: GO 58263
56370: LD_INT 11
56372: DOUBLE
56373: EQUAL
56374: IFTRUE 56378
56376: GO 56582
56378: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56379: LD_ADDR_VAR 0 2
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 4
56392: PUSH
56393: LD_INT 5
56395: PUSH
56396: LD_INT 6
56398: PUSH
56399: LD_INT 7
56401: PUSH
56402: LD_INT 8
56404: PUSH
56405: LD_INT 9
56407: PUSH
56408: LD_INT 10
56410: PUSH
56411: LD_INT 11
56413: PUSH
56414: LD_INT 12
56416: PUSH
56417: LD_INT 13
56419: PUSH
56420: LD_INT 14
56422: PUSH
56423: LD_INT 15
56425: PUSH
56426: LD_INT 16
56428: PUSH
56429: LD_INT 17
56431: PUSH
56432: LD_INT 18
56434: PUSH
56435: LD_INT 19
56437: PUSH
56438: LD_INT 20
56440: PUSH
56441: LD_INT 21
56443: PUSH
56444: LD_INT 22
56446: PUSH
56447: LD_INT 23
56449: PUSH
56450: LD_INT 24
56452: PUSH
56453: LD_INT 25
56455: PUSH
56456: LD_INT 26
56458: PUSH
56459: LD_INT 28
56461: PUSH
56462: LD_INT 30
56464: PUSH
56465: LD_INT 31
56467: PUSH
56468: LD_INT 32
56470: PUSH
56471: LD_INT 34
56473: PUSH
56474: LD_INT 36
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 101
56512: PUSH
56513: LD_INT 102
56515: PUSH
56516: LD_INT 103
56518: PUSH
56519: LD_INT 104
56521: PUSH
56522: LD_INT 105
56524: PUSH
56525: LD_INT 106
56527: PUSH
56528: LD_INT 107
56530: PUSH
56531: LD_INT 108
56533: PUSH
56534: LD_INT 109
56536: PUSH
56537: LD_INT 110
56539: PUSH
56540: LD_INT 111
56542: PUSH
56543: LD_INT 112
56545: PUSH
56546: LD_INT 114
56548: PUSH
56549: LD_INT 116
56551: PUSH
56552: LD_INT 117
56554: PUSH
56555: LD_INT 118
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: ST_TO_ADDR
56580: GO 58263
56582: LD_INT 12
56584: DOUBLE
56585: EQUAL
56586: IFTRUE 56590
56588: GO 56810
56590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: LD_INT 6
56613: PUSH
56614: LD_INT 7
56616: PUSH
56617: LD_INT 8
56619: PUSH
56620: LD_INT 9
56622: PUSH
56623: LD_INT 10
56625: PUSH
56626: LD_INT 11
56628: PUSH
56629: LD_INT 12
56631: PUSH
56632: LD_INT 13
56634: PUSH
56635: LD_INT 14
56637: PUSH
56638: LD_INT 15
56640: PUSH
56641: LD_INT 16
56643: PUSH
56644: LD_INT 17
56646: PUSH
56647: LD_INT 18
56649: PUSH
56650: LD_INT 19
56652: PUSH
56653: LD_INT 20
56655: PUSH
56656: LD_INT 21
56658: PUSH
56659: LD_INT 22
56661: PUSH
56662: LD_INT 23
56664: PUSH
56665: LD_INT 24
56667: PUSH
56668: LD_INT 25
56670: PUSH
56671: LD_INT 26
56673: PUSH
56674: LD_INT 27
56676: PUSH
56677: LD_INT 28
56679: PUSH
56680: LD_INT 30
56682: PUSH
56683: LD_INT 31
56685: PUSH
56686: LD_INT 32
56688: PUSH
56689: LD_INT 33
56691: PUSH
56692: LD_INT 34
56694: PUSH
56695: LD_INT 36
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 101
56736: PUSH
56737: LD_INT 102
56739: PUSH
56740: LD_INT 103
56742: PUSH
56743: LD_INT 104
56745: PUSH
56746: LD_INT 105
56748: PUSH
56749: LD_INT 106
56751: PUSH
56752: LD_INT 107
56754: PUSH
56755: LD_INT 108
56757: PUSH
56758: LD_INT 109
56760: PUSH
56761: LD_INT 110
56763: PUSH
56764: LD_INT 111
56766: PUSH
56767: LD_INT 112
56769: PUSH
56770: LD_INT 113
56772: PUSH
56773: LD_INT 114
56775: PUSH
56776: LD_INT 116
56778: PUSH
56779: LD_INT 117
56781: PUSH
56782: LD_INT 118
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: ST_TO_ADDR
56808: GO 58263
56810: LD_INT 13
56812: DOUBLE
56813: EQUAL
56814: IFTRUE 56818
56816: GO 57026
56818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56819: LD_ADDR_VAR 0 2
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: LD_INT 4
56835: PUSH
56836: LD_INT 5
56838: PUSH
56839: LD_INT 8
56841: PUSH
56842: LD_INT 9
56844: PUSH
56845: LD_INT 10
56847: PUSH
56848: LD_INT 11
56850: PUSH
56851: LD_INT 12
56853: PUSH
56854: LD_INT 14
56856: PUSH
56857: LD_INT 15
56859: PUSH
56860: LD_INT 16
56862: PUSH
56863: LD_INT 17
56865: PUSH
56866: LD_INT 18
56868: PUSH
56869: LD_INT 19
56871: PUSH
56872: LD_INT 20
56874: PUSH
56875: LD_INT 21
56877: PUSH
56878: LD_INT 22
56880: PUSH
56881: LD_INT 23
56883: PUSH
56884: LD_INT 24
56886: PUSH
56887: LD_INT 25
56889: PUSH
56890: LD_INT 26
56892: PUSH
56893: LD_INT 27
56895: PUSH
56896: LD_INT 28
56898: PUSH
56899: LD_INT 30
56901: PUSH
56902: LD_INT 31
56904: PUSH
56905: LD_INT 32
56907: PUSH
56908: LD_INT 33
56910: PUSH
56911: LD_INT 34
56913: PUSH
56914: LD_INT 36
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 101
56952: PUSH
56953: LD_INT 102
56955: PUSH
56956: LD_INT 103
56958: PUSH
56959: LD_INT 104
56961: PUSH
56962: LD_INT 105
56964: PUSH
56965: LD_INT 106
56967: PUSH
56968: LD_INT 107
56970: PUSH
56971: LD_INT 108
56973: PUSH
56974: LD_INT 109
56976: PUSH
56977: LD_INT 110
56979: PUSH
56980: LD_INT 111
56982: PUSH
56983: LD_INT 112
56985: PUSH
56986: LD_INT 113
56988: PUSH
56989: LD_INT 114
56991: PUSH
56992: LD_INT 116
56994: PUSH
56995: LD_INT 117
56997: PUSH
56998: LD_INT 118
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: ST_TO_ADDR
57024: GO 58263
57026: LD_INT 14
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57034
57032: GO 57258
57034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57035: LD_ADDR_VAR 0 2
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: LD_INT 6
57057: PUSH
57058: LD_INT 7
57060: PUSH
57061: LD_INT 8
57063: PUSH
57064: LD_INT 9
57066: PUSH
57067: LD_INT 10
57069: PUSH
57070: LD_INT 11
57072: PUSH
57073: LD_INT 12
57075: PUSH
57076: LD_INT 13
57078: PUSH
57079: LD_INT 14
57081: PUSH
57082: LD_INT 15
57084: PUSH
57085: LD_INT 16
57087: PUSH
57088: LD_INT 17
57090: PUSH
57091: LD_INT 18
57093: PUSH
57094: LD_INT 19
57096: PUSH
57097: LD_INT 20
57099: PUSH
57100: LD_INT 21
57102: PUSH
57103: LD_INT 22
57105: PUSH
57106: LD_INT 23
57108: PUSH
57109: LD_INT 24
57111: PUSH
57112: LD_INT 25
57114: PUSH
57115: LD_INT 26
57117: PUSH
57118: LD_INT 27
57120: PUSH
57121: LD_INT 28
57123: PUSH
57124: LD_INT 29
57126: PUSH
57127: LD_INT 30
57129: PUSH
57130: LD_INT 31
57132: PUSH
57133: LD_INT 32
57135: PUSH
57136: LD_INT 33
57138: PUSH
57139: LD_INT 34
57141: PUSH
57142: LD_INT 36
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 101
57184: PUSH
57185: LD_INT 102
57187: PUSH
57188: LD_INT 103
57190: PUSH
57191: LD_INT 104
57193: PUSH
57194: LD_INT 105
57196: PUSH
57197: LD_INT 106
57199: PUSH
57200: LD_INT 107
57202: PUSH
57203: LD_INT 108
57205: PUSH
57206: LD_INT 109
57208: PUSH
57209: LD_INT 110
57211: PUSH
57212: LD_INT 111
57214: PUSH
57215: LD_INT 112
57217: PUSH
57218: LD_INT 113
57220: PUSH
57221: LD_INT 114
57223: PUSH
57224: LD_INT 116
57226: PUSH
57227: LD_INT 117
57229: PUSH
57230: LD_INT 118
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: ST_TO_ADDR
57256: GO 58263
57258: LD_INT 15
57260: DOUBLE
57261: EQUAL
57262: IFTRUE 57266
57264: GO 57490
57266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57267: LD_ADDR_VAR 0 2
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: LD_INT 5
57286: PUSH
57287: LD_INT 6
57289: PUSH
57290: LD_INT 7
57292: PUSH
57293: LD_INT 8
57295: PUSH
57296: LD_INT 9
57298: PUSH
57299: LD_INT 10
57301: PUSH
57302: LD_INT 11
57304: PUSH
57305: LD_INT 12
57307: PUSH
57308: LD_INT 13
57310: PUSH
57311: LD_INT 14
57313: PUSH
57314: LD_INT 15
57316: PUSH
57317: LD_INT 16
57319: PUSH
57320: LD_INT 17
57322: PUSH
57323: LD_INT 18
57325: PUSH
57326: LD_INT 19
57328: PUSH
57329: LD_INT 20
57331: PUSH
57332: LD_INT 21
57334: PUSH
57335: LD_INT 22
57337: PUSH
57338: LD_INT 23
57340: PUSH
57341: LD_INT 24
57343: PUSH
57344: LD_INT 25
57346: PUSH
57347: LD_INT 26
57349: PUSH
57350: LD_INT 27
57352: PUSH
57353: LD_INT 28
57355: PUSH
57356: LD_INT 29
57358: PUSH
57359: LD_INT 30
57361: PUSH
57362: LD_INT 31
57364: PUSH
57365: LD_INT 32
57367: PUSH
57368: LD_INT 33
57370: PUSH
57371: LD_INT 34
57373: PUSH
57374: LD_INT 36
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 101
57416: PUSH
57417: LD_INT 102
57419: PUSH
57420: LD_INT 103
57422: PUSH
57423: LD_INT 104
57425: PUSH
57426: LD_INT 105
57428: PUSH
57429: LD_INT 106
57431: PUSH
57432: LD_INT 107
57434: PUSH
57435: LD_INT 108
57437: PUSH
57438: LD_INT 109
57440: PUSH
57441: LD_INT 110
57443: PUSH
57444: LD_INT 111
57446: PUSH
57447: LD_INT 112
57449: PUSH
57450: LD_INT 113
57452: PUSH
57453: LD_INT 114
57455: PUSH
57456: LD_INT 116
57458: PUSH
57459: LD_INT 117
57461: PUSH
57462: LD_INT 118
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: ST_TO_ADDR
57488: GO 58263
57490: LD_INT 16
57492: DOUBLE
57493: EQUAL
57494: IFTRUE 57498
57496: GO 57634
57498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57499: LD_ADDR_VAR 0 2
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: LD_INT 5
57512: PUSH
57513: LD_INT 7
57515: PUSH
57516: LD_INT 11
57518: PUSH
57519: LD_INT 12
57521: PUSH
57522: LD_INT 15
57524: PUSH
57525: LD_INT 16
57527: PUSH
57528: LD_INT 20
57530: PUSH
57531: LD_INT 21
57533: PUSH
57534: LD_INT 22
57536: PUSH
57537: LD_INT 23
57539: PUSH
57540: LD_INT 25
57542: PUSH
57543: LD_INT 26
57545: PUSH
57546: LD_INT 30
57548: PUSH
57549: LD_INT 31
57551: PUSH
57552: LD_INT 32
57554: PUSH
57555: LD_INT 33
57557: PUSH
57558: LD_INT 34
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 101
57584: PUSH
57585: LD_INT 102
57587: PUSH
57588: LD_INT 103
57590: PUSH
57591: LD_INT 106
57593: PUSH
57594: LD_INT 108
57596: PUSH
57597: LD_INT 112
57599: PUSH
57600: LD_INT 113
57602: PUSH
57603: LD_INT 114
57605: PUSH
57606: LD_INT 116
57608: PUSH
57609: LD_INT 117
57611: PUSH
57612: LD_INT 118
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: ST_TO_ADDR
57632: GO 58263
57634: LD_INT 17
57636: DOUBLE
57637: EQUAL
57638: IFTRUE 57642
57640: GO 57866
57642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57643: LD_ADDR_VAR 0 2
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 4
57659: PUSH
57660: LD_INT 5
57662: PUSH
57663: LD_INT 6
57665: PUSH
57666: LD_INT 7
57668: PUSH
57669: LD_INT 8
57671: PUSH
57672: LD_INT 9
57674: PUSH
57675: LD_INT 10
57677: PUSH
57678: LD_INT 11
57680: PUSH
57681: LD_INT 12
57683: PUSH
57684: LD_INT 13
57686: PUSH
57687: LD_INT 14
57689: PUSH
57690: LD_INT 15
57692: PUSH
57693: LD_INT 16
57695: PUSH
57696: LD_INT 17
57698: PUSH
57699: LD_INT 18
57701: PUSH
57702: LD_INT 19
57704: PUSH
57705: LD_INT 20
57707: PUSH
57708: LD_INT 21
57710: PUSH
57711: LD_INT 22
57713: PUSH
57714: LD_INT 23
57716: PUSH
57717: LD_INT 24
57719: PUSH
57720: LD_INT 25
57722: PUSH
57723: LD_INT 26
57725: PUSH
57726: LD_INT 27
57728: PUSH
57729: LD_INT 28
57731: PUSH
57732: LD_INT 29
57734: PUSH
57735: LD_INT 30
57737: PUSH
57738: LD_INT 31
57740: PUSH
57741: LD_INT 32
57743: PUSH
57744: LD_INT 33
57746: PUSH
57747: LD_INT 34
57749: PUSH
57750: LD_INT 36
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 101
57792: PUSH
57793: LD_INT 102
57795: PUSH
57796: LD_INT 103
57798: PUSH
57799: LD_INT 104
57801: PUSH
57802: LD_INT 105
57804: PUSH
57805: LD_INT 106
57807: PUSH
57808: LD_INT 107
57810: PUSH
57811: LD_INT 108
57813: PUSH
57814: LD_INT 109
57816: PUSH
57817: LD_INT 110
57819: PUSH
57820: LD_INT 111
57822: PUSH
57823: LD_INT 112
57825: PUSH
57826: LD_INT 113
57828: PUSH
57829: LD_INT 114
57831: PUSH
57832: LD_INT 116
57834: PUSH
57835: LD_INT 117
57837: PUSH
57838: LD_INT 118
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: ST_TO_ADDR
57864: GO 58263
57866: LD_INT 18
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57874
57872: GO 58022
57874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57875: LD_ADDR_VAR 0 2
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 4
57885: PUSH
57886: LD_INT 5
57888: PUSH
57889: LD_INT 7
57891: PUSH
57892: LD_INT 11
57894: PUSH
57895: LD_INT 12
57897: PUSH
57898: LD_INT 15
57900: PUSH
57901: LD_INT 16
57903: PUSH
57904: LD_INT 20
57906: PUSH
57907: LD_INT 21
57909: PUSH
57910: LD_INT 22
57912: PUSH
57913: LD_INT 23
57915: PUSH
57916: LD_INT 25
57918: PUSH
57919: LD_INT 26
57921: PUSH
57922: LD_INT 30
57924: PUSH
57925: LD_INT 31
57927: PUSH
57928: LD_INT 32
57930: PUSH
57931: LD_INT 33
57933: PUSH
57934: LD_INT 34
57936: PUSH
57937: LD_INT 35
57939: PUSH
57940: LD_INT 36
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 101
57968: PUSH
57969: LD_INT 102
57971: PUSH
57972: LD_INT 103
57974: PUSH
57975: LD_INT 106
57977: PUSH
57978: LD_INT 108
57980: PUSH
57981: LD_INT 112
57983: PUSH
57984: LD_INT 113
57986: PUSH
57987: LD_INT 114
57989: PUSH
57990: LD_INT 115
57992: PUSH
57993: LD_INT 116
57995: PUSH
57996: LD_INT 117
57998: PUSH
57999: LD_INT 118
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: ST_TO_ADDR
58020: GO 58263
58022: LD_INT 19
58024: DOUBLE
58025: EQUAL
58026: IFTRUE 58030
58028: GO 58262
58030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58031: LD_ADDR_VAR 0 2
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: LD_INT 5
58050: PUSH
58051: LD_INT 6
58053: PUSH
58054: LD_INT 7
58056: PUSH
58057: LD_INT 8
58059: PUSH
58060: LD_INT 9
58062: PUSH
58063: LD_INT 10
58065: PUSH
58066: LD_INT 11
58068: PUSH
58069: LD_INT 12
58071: PUSH
58072: LD_INT 13
58074: PUSH
58075: LD_INT 14
58077: PUSH
58078: LD_INT 15
58080: PUSH
58081: LD_INT 16
58083: PUSH
58084: LD_INT 17
58086: PUSH
58087: LD_INT 18
58089: PUSH
58090: LD_INT 19
58092: PUSH
58093: LD_INT 20
58095: PUSH
58096: LD_INT 21
58098: PUSH
58099: LD_INT 22
58101: PUSH
58102: LD_INT 23
58104: PUSH
58105: LD_INT 24
58107: PUSH
58108: LD_INT 25
58110: PUSH
58111: LD_INT 26
58113: PUSH
58114: LD_INT 27
58116: PUSH
58117: LD_INT 28
58119: PUSH
58120: LD_INT 29
58122: PUSH
58123: LD_INT 30
58125: PUSH
58126: LD_INT 31
58128: PUSH
58129: LD_INT 32
58131: PUSH
58132: LD_INT 33
58134: PUSH
58135: LD_INT 34
58137: PUSH
58138: LD_INT 35
58140: PUSH
58141: LD_INT 36
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 101
58184: PUSH
58185: LD_INT 102
58187: PUSH
58188: LD_INT 103
58190: PUSH
58191: LD_INT 104
58193: PUSH
58194: LD_INT 105
58196: PUSH
58197: LD_INT 106
58199: PUSH
58200: LD_INT 107
58202: PUSH
58203: LD_INT 108
58205: PUSH
58206: LD_INT 109
58208: PUSH
58209: LD_INT 110
58211: PUSH
58212: LD_INT 111
58214: PUSH
58215: LD_INT 112
58217: PUSH
58218: LD_INT 113
58220: PUSH
58221: LD_INT 114
58223: PUSH
58224: LD_INT 115
58226: PUSH
58227: LD_INT 116
58229: PUSH
58230: LD_INT 117
58232: PUSH
58233: LD_INT 118
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: ST_TO_ADDR
58260: GO 58263
58262: POP
// end else
58263: GO 58494
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58265: LD_ADDR_VAR 0 2
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: LD_INT 5
58284: PUSH
58285: LD_INT 6
58287: PUSH
58288: LD_INT 7
58290: PUSH
58291: LD_INT 8
58293: PUSH
58294: LD_INT 9
58296: PUSH
58297: LD_INT 10
58299: PUSH
58300: LD_INT 11
58302: PUSH
58303: LD_INT 12
58305: PUSH
58306: LD_INT 13
58308: PUSH
58309: LD_INT 14
58311: PUSH
58312: LD_INT 15
58314: PUSH
58315: LD_INT 16
58317: PUSH
58318: LD_INT 17
58320: PUSH
58321: LD_INT 18
58323: PUSH
58324: LD_INT 19
58326: PUSH
58327: LD_INT 20
58329: PUSH
58330: LD_INT 21
58332: PUSH
58333: LD_INT 22
58335: PUSH
58336: LD_INT 23
58338: PUSH
58339: LD_INT 24
58341: PUSH
58342: LD_INT 25
58344: PUSH
58345: LD_INT 26
58347: PUSH
58348: LD_INT 27
58350: PUSH
58351: LD_INT 28
58353: PUSH
58354: LD_INT 29
58356: PUSH
58357: LD_INT 30
58359: PUSH
58360: LD_INT 31
58362: PUSH
58363: LD_INT 32
58365: PUSH
58366: LD_INT 33
58368: PUSH
58369: LD_INT 34
58371: PUSH
58372: LD_INT 35
58374: PUSH
58375: LD_INT 36
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 101
58418: PUSH
58419: LD_INT 102
58421: PUSH
58422: LD_INT 103
58424: PUSH
58425: LD_INT 104
58427: PUSH
58428: LD_INT 105
58430: PUSH
58431: LD_INT 106
58433: PUSH
58434: LD_INT 107
58436: PUSH
58437: LD_INT 108
58439: PUSH
58440: LD_INT 109
58442: PUSH
58443: LD_INT 110
58445: PUSH
58446: LD_INT 111
58448: PUSH
58449: LD_INT 112
58451: PUSH
58452: LD_INT 113
58454: PUSH
58455: LD_INT 114
58457: PUSH
58458: LD_INT 115
58460: PUSH
58461: LD_INT 116
58463: PUSH
58464: LD_INT 117
58466: PUSH
58467: LD_INT 118
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: ST_TO_ADDR
// if result then
58494: LD_VAR 0 2
58498: IFFALSE 59284
// begin normal :=  ;
58500: LD_ADDR_VAR 0 5
58504: PUSH
58505: LD_STRING 
58507: ST_TO_ADDR
// hardcore :=  ;
58508: LD_ADDR_VAR 0 6
58512: PUSH
58513: LD_STRING 
58515: ST_TO_ADDR
// active :=  ;
58516: LD_ADDR_VAR 0 7
58520: PUSH
58521: LD_STRING 
58523: ST_TO_ADDR
// for i = 1 to normalCounter do
58524: LD_ADDR_VAR 0 8
58528: PUSH
58529: DOUBLE
58530: LD_INT 1
58532: DEC
58533: ST_TO_ADDR
58534: LD_EXP 116
58538: PUSH
58539: FOR_TO
58540: IFFALSE 58641
// begin tmp := 0 ;
58542: LD_ADDR_VAR 0 3
58546: PUSH
58547: LD_STRING 0
58549: ST_TO_ADDR
// if result [ 1 ] then
58550: LD_VAR 0 2
58554: PUSH
58555: LD_INT 1
58557: ARRAY
58558: IFFALSE 58623
// if result [ 1 ] [ 1 ] = i then
58560: LD_VAR 0 2
58564: PUSH
58565: LD_INT 1
58567: ARRAY
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_VAR 0 8
58577: EQUAL
58578: IFFALSE 58623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58580: LD_ADDR_VAR 0 2
58584: PUSH
58585: LD_VAR 0 2
58589: PPUSH
58590: LD_INT 1
58592: PPUSH
58593: LD_VAR 0 2
58597: PUSH
58598: LD_INT 1
58600: ARRAY
58601: PPUSH
58602: LD_INT 1
58604: PPUSH
58605: CALL_OW 3
58609: PPUSH
58610: CALL_OW 1
58614: ST_TO_ADDR
// tmp := 1 ;
58615: LD_ADDR_VAR 0 3
58619: PUSH
58620: LD_STRING 1
58622: ST_TO_ADDR
// end ; normal := normal & tmp ;
58623: LD_ADDR_VAR 0 5
58627: PUSH
58628: LD_VAR 0 5
58632: PUSH
58633: LD_VAR 0 3
58637: STR
58638: ST_TO_ADDR
// end ;
58639: GO 58539
58641: POP
58642: POP
// for i = 1 to hardcoreCounter do
58643: LD_ADDR_VAR 0 8
58647: PUSH
58648: DOUBLE
58649: LD_INT 1
58651: DEC
58652: ST_TO_ADDR
58653: LD_EXP 117
58657: PUSH
58658: FOR_TO
58659: IFFALSE 58764
// begin tmp := 0 ;
58661: LD_ADDR_VAR 0 3
58665: PUSH
58666: LD_STRING 0
58668: ST_TO_ADDR
// if result [ 2 ] then
58669: LD_VAR 0 2
58673: PUSH
58674: LD_INT 2
58676: ARRAY
58677: IFFALSE 58746
// if result [ 2 ] [ 1 ] = 100 + i then
58679: LD_VAR 0 2
58683: PUSH
58684: LD_INT 2
58686: ARRAY
58687: PUSH
58688: LD_INT 1
58690: ARRAY
58691: PUSH
58692: LD_INT 100
58694: PUSH
58695: LD_VAR 0 8
58699: PLUS
58700: EQUAL
58701: IFFALSE 58746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58703: LD_ADDR_VAR 0 2
58707: PUSH
58708: LD_VAR 0 2
58712: PPUSH
58713: LD_INT 2
58715: PPUSH
58716: LD_VAR 0 2
58720: PUSH
58721: LD_INT 2
58723: ARRAY
58724: PPUSH
58725: LD_INT 1
58727: PPUSH
58728: CALL_OW 3
58732: PPUSH
58733: CALL_OW 1
58737: ST_TO_ADDR
// tmp := 1 ;
58738: LD_ADDR_VAR 0 3
58742: PUSH
58743: LD_STRING 1
58745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58746: LD_ADDR_VAR 0 6
58750: PUSH
58751: LD_VAR 0 6
58755: PUSH
58756: LD_VAR 0 3
58760: STR
58761: ST_TO_ADDR
// end ;
58762: GO 58658
58764: POP
58765: POP
// if isGameLoad then
58766: LD_VAR 0 1
58770: IFFALSE 59245
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58772: LD_ADDR_VAR 0 4
58776: PUSH
58777: LD_EXP 120
58781: PUSH
58782: LD_EXP 119
58786: PUSH
58787: LD_EXP 121
58791: PUSH
58792: LD_EXP 118
58796: PUSH
58797: LD_EXP 122
58801: PUSH
58802: LD_EXP 123
58806: PUSH
58807: LD_EXP 124
58811: PUSH
58812: LD_EXP 125
58816: PUSH
58817: LD_EXP 126
58821: PUSH
58822: LD_EXP 127
58826: PUSH
58827: LD_EXP 128
58831: PUSH
58832: LD_EXP 129
58836: PUSH
58837: LD_EXP 130
58841: PUSH
58842: LD_EXP 131
58846: PUSH
58847: LD_EXP 139
58851: PUSH
58852: LD_EXP 140
58856: PUSH
58857: LD_EXP 141
58861: PUSH
58862: LD_EXP 142
58866: PUSH
58867: LD_EXP 144
58871: PUSH
58872: LD_EXP 145
58876: PUSH
58877: LD_EXP 146
58881: PUSH
58882: LD_EXP 149
58886: PUSH
58887: LD_EXP 151
58891: PUSH
58892: LD_EXP 152
58896: PUSH
58897: LD_EXP 153
58901: PUSH
58902: LD_EXP 155
58906: PUSH
58907: LD_EXP 156
58911: PUSH
58912: LD_EXP 159
58916: PUSH
58917: LD_EXP 160
58921: PUSH
58922: LD_EXP 161
58926: PUSH
58927: LD_EXP 162
58931: PUSH
58932: LD_EXP 163
58936: PUSH
58937: LD_EXP 164
58941: PUSH
58942: LD_EXP 165
58946: PUSH
58947: LD_EXP 166
58951: PUSH
58952: LD_EXP 167
58956: PUSH
58957: LD_EXP 132
58961: PUSH
58962: LD_EXP 133
58966: PUSH
58967: LD_EXP 136
58971: PUSH
58972: LD_EXP 137
58976: PUSH
58977: LD_EXP 138
58981: PUSH
58982: LD_EXP 134
58986: PUSH
58987: LD_EXP 135
58991: PUSH
58992: LD_EXP 143
58996: PUSH
58997: LD_EXP 147
59001: PUSH
59002: LD_EXP 148
59006: PUSH
59007: LD_EXP 150
59011: PUSH
59012: LD_EXP 154
59016: PUSH
59017: LD_EXP 157
59021: PUSH
59022: LD_EXP 158
59026: PUSH
59027: LD_EXP 168
59031: PUSH
59032: LD_EXP 169
59036: PUSH
59037: LD_EXP 170
59041: PUSH
59042: LD_EXP 171
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// tmp :=  ;
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: LD_STRING 
59110: ST_TO_ADDR
// for i = 1 to normalCounter do
59111: LD_ADDR_VAR 0 8
59115: PUSH
59116: DOUBLE
59117: LD_INT 1
59119: DEC
59120: ST_TO_ADDR
59121: LD_EXP 116
59125: PUSH
59126: FOR_TO
59127: IFFALSE 59163
// begin if flags [ i ] then
59129: LD_VAR 0 4
59133: PUSH
59134: LD_VAR 0 8
59138: ARRAY
59139: IFFALSE 59161
// tmp := tmp & i & ; ;
59141: LD_ADDR_VAR 0 3
59145: PUSH
59146: LD_VAR 0 3
59150: PUSH
59151: LD_VAR 0 8
59155: STR
59156: PUSH
59157: LD_STRING ;
59159: STR
59160: ST_TO_ADDR
// end ;
59161: GO 59126
59163: POP
59164: POP
// for i = 1 to hardcoreCounter do
59165: LD_ADDR_VAR 0 8
59169: PUSH
59170: DOUBLE
59171: LD_INT 1
59173: DEC
59174: ST_TO_ADDR
59175: LD_EXP 117
59179: PUSH
59180: FOR_TO
59181: IFFALSE 59227
// begin if flags [ normalCounter + i ] then
59183: LD_VAR 0 4
59187: PUSH
59188: LD_EXP 116
59192: PUSH
59193: LD_VAR 0 8
59197: PLUS
59198: ARRAY
59199: IFFALSE 59225
// tmp := tmp & ( 100 + i ) & ; ;
59201: LD_ADDR_VAR 0 3
59205: PUSH
59206: LD_VAR 0 3
59210: PUSH
59211: LD_INT 100
59213: PUSH
59214: LD_VAR 0 8
59218: PLUS
59219: STR
59220: PUSH
59221: LD_STRING ;
59223: STR
59224: ST_TO_ADDR
// end ;
59225: GO 59180
59227: POP
59228: POP
// if tmp then
59229: LD_VAR 0 3
59233: IFFALSE 59245
// active := tmp ;
59235: LD_ADDR_VAR 0 7
59239: PUSH
59240: LD_VAR 0 3
59244: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59245: LD_STRING getStreamItemsFromMission("
59247: PUSH
59248: LD_VAR 0 5
59252: STR
59253: PUSH
59254: LD_STRING ","
59256: STR
59257: PUSH
59258: LD_VAR 0 6
59262: STR
59263: PUSH
59264: LD_STRING ","
59266: STR
59267: PUSH
59268: LD_VAR 0 7
59272: STR
59273: PUSH
59274: LD_STRING ")
59276: STR
59277: PPUSH
59278: CALL_OW 559
// end else
59282: GO 59291
// ToLua ( getStreamItemsFromMission("","","") ) ;
59284: LD_STRING getStreamItemsFromMission("","","")
59286: PPUSH
59287: CALL_OW 559
// end ;
59291: LD_VAR 0 2
59295: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59296: LD_EXP 115
59300: PUSH
59301: LD_EXP 120
59305: AND
59306: IFFALSE 59430
59308: GO 59310
59310: DISABLE
59311: LD_INT 0
59313: PPUSH
59314: PPUSH
// begin enable ;
59315: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59316: LD_ADDR_VAR 0 2
59320: PUSH
59321: LD_INT 22
59323: PUSH
59324: LD_OWVAR 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 34
59338: PUSH
59339: LD_INT 7
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 34
59348: PUSH
59349: LD_INT 45
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 34
59358: PUSH
59359: LD_INT 28
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 34
59368: PUSH
59369: LD_INT 47
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PPUSH
59387: CALL_OW 69
59391: ST_TO_ADDR
// if not tmp then
59392: LD_VAR 0 2
59396: NOT
59397: IFFALSE 59401
// exit ;
59399: GO 59430
// for i in tmp do
59401: LD_ADDR_VAR 0 1
59405: PUSH
59406: LD_VAR 0 2
59410: PUSH
59411: FOR_IN
59412: IFFALSE 59428
// begin SetLives ( i , 0 ) ;
59414: LD_VAR 0 1
59418: PPUSH
59419: LD_INT 0
59421: PPUSH
59422: CALL_OW 234
// end ;
59426: GO 59411
59428: POP
59429: POP
// end ;
59430: PPOPN 2
59432: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59433: LD_EXP 115
59437: PUSH
59438: LD_EXP 121
59442: AND
59443: IFFALSE 59527
59445: GO 59447
59447: DISABLE
59448: LD_INT 0
59450: PPUSH
59451: PPUSH
// begin enable ;
59452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59453: LD_ADDR_VAR 0 2
59457: PUSH
59458: LD_INT 22
59460: PUSH
59461: LD_OWVAR 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 32
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PPUSH
59484: CALL_OW 69
59488: ST_TO_ADDR
// if not tmp then
59489: LD_VAR 0 2
59493: NOT
59494: IFFALSE 59498
// exit ;
59496: GO 59527
// for i in tmp do
59498: LD_ADDR_VAR 0 1
59502: PUSH
59503: LD_VAR 0 2
59507: PUSH
59508: FOR_IN
59509: IFFALSE 59525
// begin SetLives ( i , 0 ) ;
59511: LD_VAR 0 1
59515: PPUSH
59516: LD_INT 0
59518: PPUSH
59519: CALL_OW 234
// end ;
59523: GO 59508
59525: POP
59526: POP
// end ;
59527: PPOPN 2
59529: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59530: LD_EXP 115
59534: PUSH
59535: LD_EXP 118
59539: AND
59540: IFFALSE 59633
59542: GO 59544
59544: DISABLE
59545: LD_INT 0
59547: PPUSH
// begin enable ;
59548: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59549: LD_ADDR_VAR 0 1
59553: PUSH
59554: LD_INT 22
59556: PUSH
59557: LD_OWVAR 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 25
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 25
59581: PUSH
59582: LD_INT 9
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 25
59591: PUSH
59592: LD_INT 8
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PPUSH
59609: CALL_OW 69
59613: PUSH
59614: FOR_IN
59615: IFFALSE 59631
// begin SetClass ( i , 1 ) ;
59617: LD_VAR 0 1
59621: PPUSH
59622: LD_INT 1
59624: PPUSH
59625: CALL_OW 336
// end ;
59629: GO 59614
59631: POP
59632: POP
// end ;
59633: PPOPN 1
59635: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59636: LD_EXP 115
59640: PUSH
59641: LD_EXP 119
59645: AND
59646: PUSH
59647: LD_OWVAR 65
59651: PUSH
59652: LD_INT 7
59654: LESS
59655: AND
59656: IFFALSE 59670
59658: GO 59660
59660: DISABLE
// begin enable ;
59661: ENABLE
// game_speed := 7 ;
59662: LD_ADDR_OWVAR 65
59666: PUSH
59667: LD_INT 7
59669: ST_TO_ADDR
// end ;
59670: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59671: LD_EXP 115
59675: PUSH
59676: LD_EXP 122
59680: AND
59681: IFFALSE 59883
59683: GO 59685
59685: DISABLE
59686: LD_INT 0
59688: PPUSH
59689: PPUSH
59690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59691: LD_ADDR_VAR 0 3
59695: PUSH
59696: LD_INT 81
59698: PUSH
59699: LD_OWVAR 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 21
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PPUSH
59722: CALL_OW 69
59726: ST_TO_ADDR
// if not tmp then
59727: LD_VAR 0 3
59731: NOT
59732: IFFALSE 59736
// exit ;
59734: GO 59883
// if tmp > 5 then
59736: LD_VAR 0 3
59740: PUSH
59741: LD_INT 5
59743: GREATER
59744: IFFALSE 59756
// k := 5 else
59746: LD_ADDR_VAR 0 2
59750: PUSH
59751: LD_INT 5
59753: ST_TO_ADDR
59754: GO 59766
// k := tmp ;
59756: LD_ADDR_VAR 0 2
59760: PUSH
59761: LD_VAR 0 3
59765: ST_TO_ADDR
// for i := 1 to k do
59766: LD_ADDR_VAR 0 1
59770: PUSH
59771: DOUBLE
59772: LD_INT 1
59774: DEC
59775: ST_TO_ADDR
59776: LD_VAR 0 2
59780: PUSH
59781: FOR_TO
59782: IFFALSE 59881
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59784: LD_VAR 0 3
59788: PUSH
59789: LD_VAR 0 1
59793: ARRAY
59794: PPUSH
59795: LD_VAR 0 1
59799: PUSH
59800: LD_INT 4
59802: MOD
59803: PUSH
59804: LD_INT 1
59806: PLUS
59807: PPUSH
59808: CALL_OW 259
59812: PUSH
59813: LD_INT 10
59815: LESS
59816: IFFALSE 59879
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59818: LD_VAR 0 3
59822: PUSH
59823: LD_VAR 0 1
59827: ARRAY
59828: PPUSH
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 4
59836: MOD
59837: PUSH
59838: LD_INT 1
59840: PLUS
59841: PPUSH
59842: LD_VAR 0 3
59846: PUSH
59847: LD_VAR 0 1
59851: ARRAY
59852: PPUSH
59853: LD_VAR 0 1
59857: PUSH
59858: LD_INT 4
59860: MOD
59861: PUSH
59862: LD_INT 1
59864: PLUS
59865: PPUSH
59866: CALL_OW 259
59870: PUSH
59871: LD_INT 1
59873: PLUS
59874: PPUSH
59875: CALL_OW 237
59879: GO 59781
59881: POP
59882: POP
// end ;
59883: PPOPN 3
59885: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59886: LD_EXP 115
59890: PUSH
59891: LD_EXP 123
59895: AND
59896: IFFALSE 59916
59898: GO 59900
59900: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59901: LD_INT 4
59903: PPUSH
59904: LD_OWVAR 2
59908: PPUSH
59909: LD_INT 0
59911: PPUSH
59912: CALL_OW 324
59916: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59917: LD_EXP 115
59921: PUSH
59922: LD_EXP 152
59926: AND
59927: IFFALSE 59947
59929: GO 59931
59931: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59932: LD_INT 19
59934: PPUSH
59935: LD_OWVAR 2
59939: PPUSH
59940: LD_INT 0
59942: PPUSH
59943: CALL_OW 324
59947: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59948: LD_EXP 115
59952: PUSH
59953: LD_EXP 124
59957: AND
59958: IFFALSE 60060
59960: GO 59962
59962: DISABLE
59963: LD_INT 0
59965: PPUSH
59966: PPUSH
// begin enable ;
59967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59968: LD_ADDR_VAR 0 2
59972: PUSH
59973: LD_INT 22
59975: PUSH
59976: LD_OWVAR 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 34
59990: PUSH
59991: LD_INT 11
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 34
60000: PUSH
60001: LD_INT 30
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PPUSH
60017: CALL_OW 69
60021: ST_TO_ADDR
// if not tmp then
60022: LD_VAR 0 2
60026: NOT
60027: IFFALSE 60031
// exit ;
60029: GO 60060
// for i in tmp do
60031: LD_ADDR_VAR 0 1
60035: PUSH
60036: LD_VAR 0 2
60040: PUSH
60041: FOR_IN
60042: IFFALSE 60058
// begin SetLives ( i , 0 ) ;
60044: LD_VAR 0 1
60048: PPUSH
60049: LD_INT 0
60051: PPUSH
60052: CALL_OW 234
// end ;
60056: GO 60041
60058: POP
60059: POP
// end ;
60060: PPOPN 2
60062: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60063: LD_EXP 115
60067: PUSH
60068: LD_EXP 125
60072: AND
60073: IFFALSE 60093
60075: GO 60077
60077: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60078: LD_INT 32
60080: PPUSH
60081: LD_OWVAR 2
60085: PPUSH
60086: LD_INT 0
60088: PPUSH
60089: CALL_OW 324
60093: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60094: LD_EXP 115
60098: PUSH
60099: LD_EXP 126
60103: AND
60104: IFFALSE 60285
60106: GO 60108
60108: DISABLE
60109: LD_INT 0
60111: PPUSH
60112: PPUSH
60113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60114: LD_ADDR_VAR 0 2
60118: PUSH
60119: LD_INT 22
60121: PUSH
60122: LD_OWVAR 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 33
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 69
60149: ST_TO_ADDR
// if not tmp then
60150: LD_VAR 0 2
60154: NOT
60155: IFFALSE 60159
// exit ;
60157: GO 60285
// side := 0 ;
60159: LD_ADDR_VAR 0 3
60163: PUSH
60164: LD_INT 0
60166: ST_TO_ADDR
// for i := 1 to 8 do
60167: LD_ADDR_VAR 0 1
60171: PUSH
60172: DOUBLE
60173: LD_INT 1
60175: DEC
60176: ST_TO_ADDR
60177: LD_INT 8
60179: PUSH
60180: FOR_TO
60181: IFFALSE 60229
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60183: LD_OWVAR 2
60187: PUSH
60188: LD_VAR 0 1
60192: NONEQUAL
60193: PUSH
60194: LD_OWVAR 2
60198: PPUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: CALL_OW 81
60208: PUSH
60209: LD_INT 2
60211: EQUAL
60212: AND
60213: IFFALSE 60227
// begin side := i ;
60215: LD_ADDR_VAR 0 3
60219: PUSH
60220: LD_VAR 0 1
60224: ST_TO_ADDR
// break ;
60225: GO 60229
// end ;
60227: GO 60180
60229: POP
60230: POP
// if not side then
60231: LD_VAR 0 3
60235: NOT
60236: IFFALSE 60240
// exit ;
60238: GO 60285
// for i := 1 to tmp do
60240: LD_ADDR_VAR 0 1
60244: PUSH
60245: DOUBLE
60246: LD_INT 1
60248: DEC
60249: ST_TO_ADDR
60250: LD_VAR 0 2
60254: PUSH
60255: FOR_TO
60256: IFFALSE 60283
// if Prob ( 60 ) then
60258: LD_INT 60
60260: PPUSH
60261: CALL_OW 13
60265: IFFALSE 60281
// SetSide ( i , side ) ;
60267: LD_VAR 0 1
60271: PPUSH
60272: LD_VAR 0 3
60276: PPUSH
60277: CALL_OW 235
60281: GO 60255
60283: POP
60284: POP
// end ;
60285: PPOPN 3
60287: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60288: LD_EXP 115
60292: PUSH
60293: LD_EXP 128
60297: AND
60298: IFFALSE 60417
60300: GO 60302
60302: DISABLE
60303: LD_INT 0
60305: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60306: LD_ADDR_VAR 0 1
60310: PUSH
60311: LD_INT 22
60313: PUSH
60314: LD_OWVAR 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 21
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: LD_INT 23
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PPUSH
60355: CALL_OW 69
60359: PUSH
60360: FOR_IN
60361: IFFALSE 60415
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 257
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 4
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: IN
60391: IFFALSE 60413
// SetClass ( un , rand ( 1 , 4 ) ) ;
60393: LD_VAR 0 1
60397: PPUSH
60398: LD_INT 1
60400: PPUSH
60401: LD_INT 4
60403: PPUSH
60404: CALL_OW 12
60408: PPUSH
60409: CALL_OW 336
60413: GO 60360
60415: POP
60416: POP
// end ;
60417: PPOPN 1
60419: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60420: LD_EXP 115
60424: PUSH
60425: LD_EXP 127
60429: AND
60430: IFFALSE 60509
60432: GO 60434
60434: DISABLE
60435: LD_INT 0
60437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60438: LD_ADDR_VAR 0 1
60442: PUSH
60443: LD_INT 22
60445: PUSH
60446: LD_OWVAR 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 21
60457: PUSH
60458: LD_INT 3
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PPUSH
60469: CALL_OW 69
60473: ST_TO_ADDR
// if not tmp then
60474: LD_VAR 0 1
60478: NOT
60479: IFFALSE 60483
// exit ;
60481: GO 60509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60483: LD_VAR 0 1
60487: PUSH
60488: LD_INT 1
60490: PPUSH
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 12
60500: ARRAY
60501: PPUSH
60502: LD_INT 100
60504: PPUSH
60505: CALL_OW 234
// end ;
60509: PPOPN 1
60511: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60512: LD_EXP 115
60516: PUSH
60517: LD_EXP 129
60521: AND
60522: IFFALSE 60620
60524: GO 60526
60526: DISABLE
60527: LD_INT 0
60529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60530: LD_ADDR_VAR 0 1
60534: PUSH
60535: LD_INT 22
60537: PUSH
60538: LD_OWVAR 2
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 21
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PPUSH
60561: CALL_OW 69
60565: ST_TO_ADDR
// if not tmp then
60566: LD_VAR 0 1
60570: NOT
60571: IFFALSE 60575
// exit ;
60573: GO 60620
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60575: LD_VAR 0 1
60579: PUSH
60580: LD_INT 1
60582: PPUSH
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL_OW 12
60592: ARRAY
60593: PPUSH
60594: LD_INT 1
60596: PPUSH
60597: LD_INT 4
60599: PPUSH
60600: CALL_OW 12
60604: PPUSH
60605: LD_INT 3000
60607: PPUSH
60608: LD_INT 9000
60610: PPUSH
60611: CALL_OW 12
60615: PPUSH
60616: CALL_OW 492
// end ;
60620: PPOPN 1
60622: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60623: LD_EXP 115
60627: PUSH
60628: LD_EXP 130
60632: AND
60633: IFFALSE 60653
60635: GO 60637
60637: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60638: LD_INT 1
60640: PPUSH
60641: LD_OWVAR 2
60645: PPUSH
60646: LD_INT 0
60648: PPUSH
60649: CALL_OW 324
60653: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60654: LD_EXP 115
60658: PUSH
60659: LD_EXP 131
60663: AND
60664: IFFALSE 60747
60666: GO 60668
60668: DISABLE
60669: LD_INT 0
60671: PPUSH
60672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60673: LD_ADDR_VAR 0 2
60677: PUSH
60678: LD_INT 22
60680: PUSH
60681: LD_OWVAR 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 21
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PPUSH
60704: CALL_OW 69
60708: ST_TO_ADDR
// if not tmp then
60709: LD_VAR 0 2
60713: NOT
60714: IFFALSE 60718
// exit ;
60716: GO 60747
// for i in tmp do
60718: LD_ADDR_VAR 0 1
60722: PUSH
60723: LD_VAR 0 2
60727: PUSH
60728: FOR_IN
60729: IFFALSE 60745
// SetBLevel ( i , 10 ) ;
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_INT 10
60738: PPUSH
60739: CALL_OW 241
60743: GO 60728
60745: POP
60746: POP
// end ;
60747: PPOPN 2
60749: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60750: LD_EXP 115
60754: PUSH
60755: LD_EXP 132
60759: AND
60760: IFFALSE 60871
60762: GO 60764
60764: DISABLE
60765: LD_INT 0
60767: PPUSH
60768: PPUSH
60769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60770: LD_ADDR_VAR 0 3
60774: PUSH
60775: LD_INT 22
60777: PUSH
60778: LD_OWVAR 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 25
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PPUSH
60801: CALL_OW 69
60805: ST_TO_ADDR
// if not tmp then
60806: LD_VAR 0 3
60810: NOT
60811: IFFALSE 60815
// exit ;
60813: GO 60871
// un := tmp [ rand ( 1 , tmp ) ] ;
60815: LD_ADDR_VAR 0 2
60819: PUSH
60820: LD_VAR 0 3
60824: PUSH
60825: LD_INT 1
60827: PPUSH
60828: LD_VAR 0 3
60832: PPUSH
60833: CALL_OW 12
60837: ARRAY
60838: ST_TO_ADDR
// if Crawls ( un ) then
60839: LD_VAR 0 2
60843: PPUSH
60844: CALL_OW 318
60848: IFFALSE 60859
// ComWalk ( un ) ;
60850: LD_VAR 0 2
60854: PPUSH
60855: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60859: LD_VAR 0 2
60863: PPUSH
60864: LD_INT 5
60866: PPUSH
60867: CALL_OW 336
// end ;
60871: PPOPN 3
60873: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60874: LD_EXP 115
60878: PUSH
60879: LD_EXP 133
60883: AND
60884: PUSH
60885: LD_OWVAR 67
60889: PUSH
60890: LD_INT 4
60892: LESS
60893: AND
60894: IFFALSE 60913
60896: GO 60898
60898: DISABLE
// begin Difficulty := Difficulty + 1 ;
60899: LD_ADDR_OWVAR 67
60903: PUSH
60904: LD_OWVAR 67
60908: PUSH
60909: LD_INT 1
60911: PLUS
60912: ST_TO_ADDR
// end ;
60913: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60914: LD_EXP 115
60918: PUSH
60919: LD_EXP 134
60923: AND
60924: IFFALSE 61027
60926: GO 60928
60928: DISABLE
60929: LD_INT 0
60931: PPUSH
// begin for i := 1 to 5 do
60932: LD_ADDR_VAR 0 1
60936: PUSH
60937: DOUBLE
60938: LD_INT 1
60940: DEC
60941: ST_TO_ADDR
60942: LD_INT 5
60944: PUSH
60945: FOR_TO
60946: IFFALSE 61025
// begin uc_nation := nation_nature ;
60948: LD_ADDR_OWVAR 21
60952: PUSH
60953: LD_INT 0
60955: ST_TO_ADDR
// uc_side := 0 ;
60956: LD_ADDR_OWVAR 20
60960: PUSH
60961: LD_INT 0
60963: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60964: LD_ADDR_OWVAR 29
60968: PUSH
60969: LD_INT 12
60971: PUSH
60972: LD_INT 12
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// hc_agressivity := 20 ;
60979: LD_ADDR_OWVAR 35
60983: PUSH
60984: LD_INT 20
60986: ST_TO_ADDR
// hc_class := class_tiger ;
60987: LD_ADDR_OWVAR 28
60991: PUSH
60992: LD_INT 14
60994: ST_TO_ADDR
// hc_gallery :=  ;
60995: LD_ADDR_OWVAR 33
60999: PUSH
61000: LD_STRING 
61002: ST_TO_ADDR
// hc_name :=  ;
61003: LD_ADDR_OWVAR 26
61007: PUSH
61008: LD_STRING 
61010: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61011: CALL_OW 44
61015: PPUSH
61016: LD_INT 0
61018: PPUSH
61019: CALL_OW 51
// end ;
61023: GO 60945
61025: POP
61026: POP
// end ;
61027: PPOPN 1
61029: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61030: LD_EXP 115
61034: PUSH
61035: LD_EXP 135
61039: AND
61040: IFFALSE 61049
61042: GO 61044
61044: DISABLE
// StreamSibBomb ;
61045: CALL 61050 0 0
61049: END
// export function StreamSibBomb ; var i , x , y ; begin
61050: LD_INT 0
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
// result := false ;
61056: LD_ADDR_VAR 0 1
61060: PUSH
61061: LD_INT 0
61063: ST_TO_ADDR
// for i := 1 to 16 do
61064: LD_ADDR_VAR 0 2
61068: PUSH
61069: DOUBLE
61070: LD_INT 1
61072: DEC
61073: ST_TO_ADDR
61074: LD_INT 16
61076: PUSH
61077: FOR_TO
61078: IFFALSE 61277
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_INT 10
61087: PUSH
61088: LD_INT 20
61090: PUSH
61091: LD_INT 30
61093: PUSH
61094: LD_INT 40
61096: PUSH
61097: LD_INT 50
61099: PUSH
61100: LD_INT 60
61102: PUSH
61103: LD_INT 70
61105: PUSH
61106: LD_INT 80
61108: PUSH
61109: LD_INT 90
61111: PUSH
61112: LD_INT 100
61114: PUSH
61115: LD_INT 110
61117: PUSH
61118: LD_INT 120
61120: PUSH
61121: LD_INT 130
61123: PUSH
61124: LD_INT 140
61126: PUSH
61127: LD_INT 150
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PPUSH
61150: LD_INT 15
61152: PPUSH
61153: CALL_OW 12
61157: ARRAY
61158: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61159: LD_ADDR_VAR 0 4
61163: PUSH
61164: LD_INT 10
61166: PUSH
61167: LD_INT 20
61169: PUSH
61170: LD_INT 30
61172: PUSH
61173: LD_INT 40
61175: PUSH
61176: LD_INT 50
61178: PUSH
61179: LD_INT 60
61181: PUSH
61182: LD_INT 70
61184: PUSH
61185: LD_INT 80
61187: PUSH
61188: LD_INT 90
61190: PUSH
61191: LD_INT 100
61193: PUSH
61194: LD_INT 110
61196: PUSH
61197: LD_INT 120
61199: PUSH
61200: LD_INT 130
61202: PUSH
61203: LD_INT 140
61205: PUSH
61206: LD_INT 150
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PPUSH
61229: LD_INT 15
61231: PPUSH
61232: CALL_OW 12
61236: ARRAY
61237: ST_TO_ADDR
// if ValidHex ( x , y ) then
61238: LD_VAR 0 3
61242: PPUSH
61243: LD_VAR 0 4
61247: PPUSH
61248: CALL_OW 488
61252: IFFALSE 61275
// begin result := [ x , y ] ;
61254: LD_ADDR_VAR 0 1
61258: PUSH
61259: LD_VAR 0 3
61263: PUSH
61264: LD_VAR 0 4
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: ST_TO_ADDR
// break ;
61273: GO 61277
// end ; end ;
61275: GO 61077
61277: POP
61278: POP
// if result then
61279: LD_VAR 0 1
61283: IFFALSE 61343
// begin ToLua ( playSibBomb() ) ;
61285: LD_STRING playSibBomb()
61287: PPUSH
61288: CALL_OW 559
// wait ( 0 0$14 ) ;
61292: LD_INT 490
61294: PPUSH
61295: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61299: LD_VAR 0 1
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PPUSH
61308: LD_VAR 0 1
61312: PUSH
61313: LD_INT 2
61315: ARRAY
61316: PPUSH
61317: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61321: LD_VAR 0 1
61325: PUSH
61326: LD_INT 1
61328: ARRAY
61329: PPUSH
61330: LD_VAR 0 1
61334: PUSH
61335: LD_INT 2
61337: ARRAY
61338: PPUSH
61339: CALL_OW 429
// end ; end ;
61343: LD_VAR 0 1
61347: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61348: LD_EXP 115
61352: PUSH
61353: LD_EXP 137
61357: AND
61358: IFFALSE 61370
61360: GO 61362
61362: DISABLE
// YouLost (  ) ;
61363: LD_STRING 
61365: PPUSH
61366: CALL_OW 104
61370: END
// every 0 0$1 trigger StreamModeActive and sFog do
61371: LD_EXP 115
61375: PUSH
61376: LD_EXP 136
61380: AND
61381: IFFALSE 61395
61383: GO 61385
61385: DISABLE
// FogOff ( your_side ) ;
61386: LD_OWVAR 2
61390: PPUSH
61391: CALL_OW 344
61395: END
// every 0 0$1 trigger StreamModeActive and sSun do
61396: LD_EXP 115
61400: PUSH
61401: LD_EXP 138
61405: AND
61406: IFFALSE 61434
61408: GO 61410
61410: DISABLE
// begin solar_recharge_percent := 0 ;
61411: LD_ADDR_OWVAR 79
61415: PUSH
61416: LD_INT 0
61418: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61419: LD_INT 10500
61421: PPUSH
61422: CALL_OW 67
// solar_recharge_percent := 100 ;
61426: LD_ADDR_OWVAR 79
61430: PUSH
61431: LD_INT 100
61433: ST_TO_ADDR
// end ;
61434: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61435: LD_EXP 115
61439: PUSH
61440: LD_EXP 139
61444: AND
61445: IFFALSE 61684
61447: GO 61449
61449: DISABLE
61450: LD_INT 0
61452: PPUSH
61453: PPUSH
61454: PPUSH
// begin tmp := [ ] ;
61455: LD_ADDR_VAR 0 3
61459: PUSH
61460: EMPTY
61461: ST_TO_ADDR
// for i := 1 to 6 do
61462: LD_ADDR_VAR 0 1
61466: PUSH
61467: DOUBLE
61468: LD_INT 1
61470: DEC
61471: ST_TO_ADDR
61472: LD_INT 6
61474: PUSH
61475: FOR_TO
61476: IFFALSE 61581
// begin uc_nation := nation_nature ;
61478: LD_ADDR_OWVAR 21
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
// uc_side := 0 ;
61486: LD_ADDR_OWVAR 20
61490: PUSH
61491: LD_INT 0
61493: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61494: LD_ADDR_OWVAR 29
61498: PUSH
61499: LD_INT 12
61501: PUSH
61502: LD_INT 12
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: ST_TO_ADDR
// hc_agressivity := 20 ;
61509: LD_ADDR_OWVAR 35
61513: PUSH
61514: LD_INT 20
61516: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61517: LD_ADDR_OWVAR 28
61521: PUSH
61522: LD_INT 17
61524: ST_TO_ADDR
// hc_gallery :=  ;
61525: LD_ADDR_OWVAR 33
61529: PUSH
61530: LD_STRING 
61532: ST_TO_ADDR
// hc_name :=  ;
61533: LD_ADDR_OWVAR 26
61537: PUSH
61538: LD_STRING 
61540: ST_TO_ADDR
// un := CreateHuman ;
61541: LD_ADDR_VAR 0 2
61545: PUSH
61546: CALL_OW 44
61550: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61551: LD_VAR 0 2
61555: PPUSH
61556: LD_INT 1
61558: PPUSH
61559: CALL_OW 51
// tmp := tmp ^ un ;
61563: LD_ADDR_VAR 0 3
61567: PUSH
61568: LD_VAR 0 3
61572: PUSH
61573: LD_VAR 0 2
61577: ADD
61578: ST_TO_ADDR
// end ;
61579: GO 61475
61581: POP
61582: POP
// repeat wait ( 0 0$1 ) ;
61583: LD_INT 35
61585: PPUSH
61586: CALL_OW 67
// for un in tmp do
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_VAR 0 3
61599: PUSH
61600: FOR_IN
61601: IFFALSE 61675
// begin if IsDead ( un ) then
61603: LD_VAR 0 2
61607: PPUSH
61608: CALL_OW 301
61612: IFFALSE 61632
// begin tmp := tmp diff un ;
61614: LD_ADDR_VAR 0 3
61618: PUSH
61619: LD_VAR 0 3
61623: PUSH
61624: LD_VAR 0 2
61628: DIFF
61629: ST_TO_ADDR
// continue ;
61630: GO 61600
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61632: LD_VAR 0 2
61636: PPUSH
61637: LD_INT 3
61639: PUSH
61640: LD_INT 22
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PPUSH
61654: CALL_OW 69
61658: PPUSH
61659: LD_VAR 0 2
61663: PPUSH
61664: CALL_OW 74
61668: PPUSH
61669: CALL_OW 115
// end ;
61673: GO 61600
61675: POP
61676: POP
// until not tmp ;
61677: LD_VAR 0 3
61681: NOT
61682: IFFALSE 61583
// end ;
61684: PPOPN 3
61686: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61687: LD_EXP 115
61691: PUSH
61692: LD_EXP 140
61696: AND
61697: IFFALSE 61751
61699: GO 61701
61701: DISABLE
// begin ToLua ( displayTroll(); ) ;
61702: LD_STRING displayTroll();
61704: PPUSH
61705: CALL_OW 559
// wait ( 3 3$00 ) ;
61709: LD_INT 6300
61711: PPUSH
61712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61716: LD_STRING hideTroll();
61718: PPUSH
61719: CALL_OW 559
// wait ( 1 1$00 ) ;
61723: LD_INT 2100
61725: PPUSH
61726: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61730: LD_STRING displayTroll();
61732: PPUSH
61733: CALL_OW 559
// wait ( 1 1$00 ) ;
61737: LD_INT 2100
61739: PPUSH
61740: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61744: LD_STRING hideTroll();
61746: PPUSH
61747: CALL_OW 559
// end ;
61751: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61752: LD_EXP 115
61756: PUSH
61757: LD_EXP 141
61761: AND
61762: IFFALSE 61825
61764: GO 61766
61766: DISABLE
61767: LD_INT 0
61769: PPUSH
// begin p := 0 ;
61770: LD_ADDR_VAR 0 1
61774: PUSH
61775: LD_INT 0
61777: ST_TO_ADDR
// repeat game_speed := 1 ;
61778: LD_ADDR_OWVAR 65
61782: PUSH
61783: LD_INT 1
61785: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61786: LD_INT 35
61788: PPUSH
61789: CALL_OW 67
// p := p + 1 ;
61793: LD_ADDR_VAR 0 1
61797: PUSH
61798: LD_VAR 0 1
61802: PUSH
61803: LD_INT 1
61805: PLUS
61806: ST_TO_ADDR
// until p >= 60 ;
61807: LD_VAR 0 1
61811: PUSH
61812: LD_INT 60
61814: GREATEREQUAL
61815: IFFALSE 61778
// game_speed := 4 ;
61817: LD_ADDR_OWVAR 65
61821: PUSH
61822: LD_INT 4
61824: ST_TO_ADDR
// end ;
61825: PPOPN 1
61827: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61828: LD_EXP 115
61832: PUSH
61833: LD_EXP 142
61837: AND
61838: IFFALSE 61984
61840: GO 61842
61842: DISABLE
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61847: LD_ADDR_VAR 0 1
61851: PUSH
61852: LD_INT 22
61854: PUSH
61855: LD_OWVAR 2
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 30
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 30
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PPUSH
61896: CALL_OW 69
61900: ST_TO_ADDR
// if not depot then
61901: LD_VAR 0 1
61905: NOT
61906: IFFALSE 61910
// exit ;
61908: GO 61984
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61910: LD_ADDR_VAR 0 2
61914: PUSH
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 1
61922: PPUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: CALL_OW 12
61932: ARRAY
61933: PPUSH
61934: CALL_OW 274
61938: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61939: LD_VAR 0 2
61943: PPUSH
61944: LD_INT 1
61946: PPUSH
61947: LD_INT 0
61949: PPUSH
61950: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61954: LD_VAR 0 2
61958: PPUSH
61959: LD_INT 2
61961: PPUSH
61962: LD_INT 0
61964: PPUSH
61965: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61969: LD_VAR 0 2
61973: PPUSH
61974: LD_INT 3
61976: PPUSH
61977: LD_INT 0
61979: PPUSH
61980: CALL_OW 277
// end ;
61984: PPOPN 2
61986: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61987: LD_EXP 115
61991: PUSH
61992: LD_EXP 143
61996: AND
61997: IFFALSE 62094
61999: GO 62001
62001: DISABLE
62002: LD_INT 0
62004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62005: LD_ADDR_VAR 0 1
62009: PUSH
62010: LD_INT 22
62012: PUSH
62013: LD_OWVAR 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 21
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 23
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: PPUSH
62054: CALL_OW 69
62058: ST_TO_ADDR
// if not tmp then
62059: LD_VAR 0 1
62063: NOT
62064: IFFALSE 62068
// exit ;
62066: GO 62094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62068: LD_VAR 0 1
62072: PUSH
62073: LD_INT 1
62075: PPUSH
62076: LD_VAR 0 1
62080: PPUSH
62081: CALL_OW 12
62085: ARRAY
62086: PPUSH
62087: LD_INT 200
62089: PPUSH
62090: CALL_OW 234
// end ;
62094: PPOPN 1
62096: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62097: LD_EXP 115
62101: PUSH
62102: LD_EXP 144
62106: AND
62107: IFFALSE 62186
62109: GO 62111
62111: DISABLE
62112: LD_INT 0
62114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62115: LD_ADDR_VAR 0 1
62119: PUSH
62120: LD_INT 22
62122: PUSH
62123: LD_OWVAR 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 21
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PPUSH
62146: CALL_OW 69
62150: ST_TO_ADDR
// if not tmp then
62151: LD_VAR 0 1
62155: NOT
62156: IFFALSE 62160
// exit ;
62158: GO 62186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62160: LD_VAR 0 1
62164: PUSH
62165: LD_INT 1
62167: PPUSH
62168: LD_VAR 0 1
62172: PPUSH
62173: CALL_OW 12
62177: ARRAY
62178: PPUSH
62179: LD_INT 60
62181: PPUSH
62182: CALL_OW 234
// end ;
62186: PPOPN 1
62188: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62189: LD_EXP 115
62193: PUSH
62194: LD_EXP 145
62198: AND
62199: IFFALSE 62298
62201: GO 62203
62203: DISABLE
62204: LD_INT 0
62206: PPUSH
62207: PPUSH
// begin enable ;
62208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62209: LD_ADDR_VAR 0 1
62213: PUSH
62214: LD_INT 22
62216: PUSH
62217: LD_OWVAR 2
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 61
62228: PUSH
62229: EMPTY
62230: LIST
62231: PUSH
62232: LD_INT 33
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: PPUSH
62247: CALL_OW 69
62251: ST_TO_ADDR
// if not tmp then
62252: LD_VAR 0 1
62256: NOT
62257: IFFALSE 62261
// exit ;
62259: GO 62298
// for i in tmp do
62261: LD_ADDR_VAR 0 2
62265: PUSH
62266: LD_VAR 0 1
62270: PUSH
62271: FOR_IN
62272: IFFALSE 62296
// if IsControledBy ( i ) then
62274: LD_VAR 0 2
62278: PPUSH
62279: CALL_OW 312
62283: IFFALSE 62294
// ComUnlink ( i ) ;
62285: LD_VAR 0 2
62289: PPUSH
62290: CALL_OW 136
62294: GO 62271
62296: POP
62297: POP
// end ;
62298: PPOPN 2
62300: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62301: LD_EXP 115
62305: PUSH
62306: LD_EXP 146
62310: AND
62311: IFFALSE 62451
62313: GO 62315
62315: DISABLE
62316: LD_INT 0
62318: PPUSH
62319: PPUSH
// begin ToLua ( displayPowell(); ) ;
62320: LD_STRING displayPowell();
62322: PPUSH
62323: CALL_OW 559
// uc_side := 0 ;
62327: LD_ADDR_OWVAR 20
62331: PUSH
62332: LD_INT 0
62334: ST_TO_ADDR
// uc_nation := 2 ;
62335: LD_ADDR_OWVAR 21
62339: PUSH
62340: LD_INT 2
62342: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62343: LD_ADDR_OWVAR 37
62347: PUSH
62348: LD_INT 14
62350: ST_TO_ADDR
// vc_engine := engine_siberite ;
62351: LD_ADDR_OWVAR 39
62355: PUSH
62356: LD_INT 3
62358: ST_TO_ADDR
// vc_control := control_apeman ;
62359: LD_ADDR_OWVAR 38
62363: PUSH
62364: LD_INT 5
62366: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62367: LD_ADDR_OWVAR 40
62371: PUSH
62372: LD_INT 29
62374: ST_TO_ADDR
// un := CreateVehicle ;
62375: LD_ADDR_VAR 0 2
62379: PUSH
62380: CALL_OW 45
62384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62385: LD_VAR 0 2
62389: PPUSH
62390: LD_INT 1
62392: PPUSH
62393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62397: LD_INT 35
62399: PPUSH
62400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62404: LD_VAR 0 2
62408: PPUSH
62409: LD_INT 22
62411: PUSH
62412: LD_OWVAR 2
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PPUSH
62421: CALL_OW 69
62425: PPUSH
62426: LD_VAR 0 2
62430: PPUSH
62431: CALL_OW 74
62435: PPUSH
62436: CALL_OW 115
// until IsDead ( un ) ;
62440: LD_VAR 0 2
62444: PPUSH
62445: CALL_OW 301
62449: IFFALSE 62397
// end ;
62451: PPOPN 2
62453: END
// every 0 0$1 trigger StreamModeActive and sStu do
62454: LD_EXP 115
62458: PUSH
62459: LD_EXP 154
62463: AND
62464: IFFALSE 62480
62466: GO 62468
62468: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62469: LD_STRING displayStucuk();
62471: PPUSH
62472: CALL_OW 559
// ResetFog ;
62476: CALL_OW 335
// end ;
62480: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62481: LD_EXP 115
62485: PUSH
62486: LD_EXP 147
62490: AND
62491: IFFALSE 62632
62493: GO 62495
62495: DISABLE
62496: LD_INT 0
62498: PPUSH
62499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62500: LD_ADDR_VAR 0 2
62504: PUSH
62505: LD_INT 22
62507: PUSH
62508: LD_OWVAR 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 21
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PPUSH
62531: CALL_OW 69
62535: ST_TO_ADDR
// if not tmp then
62536: LD_VAR 0 2
62540: NOT
62541: IFFALSE 62545
// exit ;
62543: GO 62632
// un := tmp [ rand ( 1 , tmp ) ] ;
62545: LD_ADDR_VAR 0 1
62549: PUSH
62550: LD_VAR 0 2
62554: PUSH
62555: LD_INT 1
62557: PPUSH
62558: LD_VAR 0 2
62562: PPUSH
62563: CALL_OW 12
62567: ARRAY
62568: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62569: LD_VAR 0 1
62573: PPUSH
62574: LD_INT 0
62576: PPUSH
62577: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62581: LD_VAR 0 1
62585: PPUSH
62586: LD_OWVAR 3
62590: PUSH
62591: LD_VAR 0 1
62595: DIFF
62596: PPUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: CALL_OW 74
62606: PPUSH
62607: CALL_OW 115
// wait ( 0 0$20 ) ;
62611: LD_INT 700
62613: PPUSH
62614: CALL_OW 67
// SetSide ( un , your_side ) ;
62618: LD_VAR 0 1
62622: PPUSH
62623: LD_OWVAR 2
62627: PPUSH
62628: CALL_OW 235
// end ;
62632: PPOPN 2
62634: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62635: LD_EXP 115
62639: PUSH
62640: LD_EXP 148
62644: AND
62645: IFFALSE 62751
62647: GO 62649
62649: DISABLE
62650: LD_INT 0
62652: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62653: LD_ADDR_VAR 0 1
62657: PUSH
62658: LD_INT 22
62660: PUSH
62661: LD_OWVAR 2
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: LD_INT 30
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 30
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PPUSH
62702: CALL_OW 69
62706: ST_TO_ADDR
// if not depot then
62707: LD_VAR 0 1
62711: NOT
62712: IFFALSE 62716
// exit ;
62714: GO 62751
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62716: LD_VAR 0 1
62720: PUSH
62721: LD_INT 1
62723: ARRAY
62724: PPUSH
62725: CALL_OW 250
62729: PPUSH
62730: LD_VAR 0 1
62734: PUSH
62735: LD_INT 1
62737: ARRAY
62738: PPUSH
62739: CALL_OW 251
62743: PPUSH
62744: LD_INT 70
62746: PPUSH
62747: CALL_OW 495
// end ;
62751: PPOPN 1
62753: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62754: LD_EXP 115
62758: PUSH
62759: LD_EXP 149
62763: AND
62764: IFFALSE 62975
62766: GO 62768
62768: DISABLE
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62776: LD_ADDR_VAR 0 5
62780: PUSH
62781: LD_INT 22
62783: PUSH
62784: LD_OWVAR 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 21
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PPUSH
62807: CALL_OW 69
62811: ST_TO_ADDR
// if not tmp then
62812: LD_VAR 0 5
62816: NOT
62817: IFFALSE 62821
// exit ;
62819: GO 62975
// for i in tmp do
62821: LD_ADDR_VAR 0 1
62825: PUSH
62826: LD_VAR 0 5
62830: PUSH
62831: FOR_IN
62832: IFFALSE 62973
// begin d := rand ( 0 , 5 ) ;
62834: LD_ADDR_VAR 0 4
62838: PUSH
62839: LD_INT 0
62841: PPUSH
62842: LD_INT 5
62844: PPUSH
62845: CALL_OW 12
62849: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62850: LD_ADDR_VAR 0 2
62854: PUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 250
62864: PPUSH
62865: LD_VAR 0 4
62869: PPUSH
62870: LD_INT 3
62872: PPUSH
62873: LD_INT 12
62875: PPUSH
62876: CALL_OW 12
62880: PPUSH
62881: CALL_OW 272
62885: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62886: LD_ADDR_VAR 0 3
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 251
62900: PPUSH
62901: LD_VAR 0 4
62905: PPUSH
62906: LD_INT 3
62908: PPUSH
62909: LD_INT 12
62911: PPUSH
62912: CALL_OW 12
62916: PPUSH
62917: CALL_OW 273
62921: ST_TO_ADDR
// if ValidHex ( x , y ) then
62922: LD_VAR 0 2
62926: PPUSH
62927: LD_VAR 0 3
62931: PPUSH
62932: CALL_OW 488
62936: IFFALSE 62971
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62938: LD_VAR 0 1
62942: PPUSH
62943: LD_VAR 0 2
62947: PPUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: LD_INT 3
62955: PPUSH
62956: LD_INT 6
62958: PPUSH
62959: CALL_OW 12
62963: PPUSH
62964: LD_INT 1
62966: PPUSH
62967: CALL_OW 483
// end ;
62971: GO 62831
62973: POP
62974: POP
// end ;
62975: PPOPN 5
62977: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62978: LD_EXP 115
62982: PUSH
62983: LD_EXP 150
62987: AND
62988: IFFALSE 63082
62990: GO 62992
62992: DISABLE
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62997: LD_ADDR_VAR 0 2
63001: PUSH
63002: LD_INT 22
63004: PUSH
63005: LD_OWVAR 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 32
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 21
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: PPUSH
63039: CALL_OW 69
63043: ST_TO_ADDR
// if not tmp then
63044: LD_VAR 0 2
63048: NOT
63049: IFFALSE 63053
// exit ;
63051: GO 63082
// for i in tmp do
63053: LD_ADDR_VAR 0 1
63057: PUSH
63058: LD_VAR 0 2
63062: PUSH
63063: FOR_IN
63064: IFFALSE 63080
// SetFuel ( i , 0 ) ;
63066: LD_VAR 0 1
63070: PPUSH
63071: LD_INT 0
63073: PPUSH
63074: CALL_OW 240
63078: GO 63063
63080: POP
63081: POP
// end ;
63082: PPOPN 2
63084: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63085: LD_EXP 115
63089: PUSH
63090: LD_EXP 151
63094: AND
63095: IFFALSE 63161
63097: GO 63099
63099: DISABLE
63100: LD_INT 0
63102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63103: LD_ADDR_VAR 0 1
63107: PUSH
63108: LD_INT 22
63110: PUSH
63111: LD_OWVAR 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 30
63122: PUSH
63123: LD_INT 29
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PPUSH
63134: CALL_OW 69
63138: ST_TO_ADDR
// if not tmp then
63139: LD_VAR 0 1
63143: NOT
63144: IFFALSE 63148
// exit ;
63146: GO 63161
// DestroyUnit ( tmp [ 1 ] ) ;
63148: LD_VAR 0 1
63152: PUSH
63153: LD_INT 1
63155: ARRAY
63156: PPUSH
63157: CALL_OW 65
// end ;
63161: PPOPN 1
63163: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63164: LD_EXP 115
63168: PUSH
63169: LD_EXP 153
63173: AND
63174: IFFALSE 63303
63176: GO 63178
63178: DISABLE
63179: LD_INT 0
63181: PPUSH
// begin uc_side := 0 ;
63182: LD_ADDR_OWVAR 20
63186: PUSH
63187: LD_INT 0
63189: ST_TO_ADDR
// uc_nation := nation_arabian ;
63190: LD_ADDR_OWVAR 21
63194: PUSH
63195: LD_INT 2
63197: ST_TO_ADDR
// hc_gallery :=  ;
63198: LD_ADDR_OWVAR 33
63202: PUSH
63203: LD_STRING 
63205: ST_TO_ADDR
// hc_name :=  ;
63206: LD_ADDR_OWVAR 26
63210: PUSH
63211: LD_STRING 
63213: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63214: LD_INT 1
63216: PPUSH
63217: LD_INT 11
63219: PPUSH
63220: LD_INT 10
63222: PPUSH
63223: CALL_OW 380
// un := CreateHuman ;
63227: LD_ADDR_VAR 0 1
63231: PUSH
63232: CALL_OW 44
63236: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63237: LD_VAR 0 1
63241: PPUSH
63242: LD_INT 1
63244: PPUSH
63245: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63249: LD_INT 35
63251: PPUSH
63252: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63256: LD_VAR 0 1
63260: PPUSH
63261: LD_INT 22
63263: PUSH
63264: LD_OWVAR 2
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PPUSH
63273: CALL_OW 69
63277: PPUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL_OW 74
63287: PPUSH
63288: CALL_OW 115
// until IsDead ( un ) ;
63292: LD_VAR 0 1
63296: PPUSH
63297: CALL_OW 301
63301: IFFALSE 63249
// end ;
63303: PPOPN 1
63305: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63306: LD_EXP 115
63310: PUSH
63311: LD_EXP 155
63315: AND
63316: IFFALSE 63328
63318: GO 63320
63320: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63321: LD_STRING earthquake(getX(game), 0, 32)
63323: PPUSH
63324: CALL_OW 559
63328: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63329: LD_EXP 115
63333: PUSH
63334: LD_EXP 156
63338: AND
63339: IFFALSE 63430
63341: GO 63343
63343: DISABLE
63344: LD_INT 0
63346: PPUSH
// begin enable ;
63347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63348: LD_ADDR_VAR 0 1
63352: PUSH
63353: LD_INT 22
63355: PUSH
63356: LD_OWVAR 2
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 21
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 33
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: PPUSH
63390: CALL_OW 69
63394: ST_TO_ADDR
// if not tmp then
63395: LD_VAR 0 1
63399: NOT
63400: IFFALSE 63404
// exit ;
63402: GO 63430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63404: LD_VAR 0 1
63408: PUSH
63409: LD_INT 1
63411: PPUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: CALL_OW 12
63421: ARRAY
63422: PPUSH
63423: LD_INT 1
63425: PPUSH
63426: CALL_OW 234
// end ;
63430: PPOPN 1
63432: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63433: LD_EXP 115
63437: PUSH
63438: LD_EXP 157
63442: AND
63443: IFFALSE 63584
63445: GO 63447
63447: DISABLE
63448: LD_INT 0
63450: PPUSH
63451: PPUSH
63452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63453: LD_ADDR_VAR 0 3
63457: PUSH
63458: LD_INT 22
63460: PUSH
63461: LD_OWVAR 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 25
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PPUSH
63484: CALL_OW 69
63488: ST_TO_ADDR
// if not tmp then
63489: LD_VAR 0 3
63493: NOT
63494: IFFALSE 63498
// exit ;
63496: GO 63584
// un := tmp [ rand ( 1 , tmp ) ] ;
63498: LD_ADDR_VAR 0 2
63502: PUSH
63503: LD_VAR 0 3
63507: PUSH
63508: LD_INT 1
63510: PPUSH
63511: LD_VAR 0 3
63515: PPUSH
63516: CALL_OW 12
63520: ARRAY
63521: ST_TO_ADDR
// if Crawls ( un ) then
63522: LD_VAR 0 2
63526: PPUSH
63527: CALL_OW 318
63531: IFFALSE 63542
// ComWalk ( un ) ;
63533: LD_VAR 0 2
63537: PPUSH
63538: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63542: LD_VAR 0 2
63546: PPUSH
63547: LD_INT 9
63549: PPUSH
63550: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63554: LD_INT 28
63556: PPUSH
63557: LD_OWVAR 2
63561: PPUSH
63562: LD_INT 2
63564: PPUSH
63565: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63569: LD_INT 29
63571: PPUSH
63572: LD_OWVAR 2
63576: PPUSH
63577: LD_INT 2
63579: PPUSH
63580: CALL_OW 322
// end ;
63584: PPOPN 3
63586: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63587: LD_EXP 115
63591: PUSH
63592: LD_EXP 158
63596: AND
63597: IFFALSE 63708
63599: GO 63601
63601: DISABLE
63602: LD_INT 0
63604: PPUSH
63605: PPUSH
63606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63607: LD_ADDR_VAR 0 3
63611: PUSH
63612: LD_INT 22
63614: PUSH
63615: LD_OWVAR 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 25
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PPUSH
63638: CALL_OW 69
63642: ST_TO_ADDR
// if not tmp then
63643: LD_VAR 0 3
63647: NOT
63648: IFFALSE 63652
// exit ;
63650: GO 63708
// un := tmp [ rand ( 1 , tmp ) ] ;
63652: LD_ADDR_VAR 0 2
63656: PUSH
63657: LD_VAR 0 3
63661: PUSH
63662: LD_INT 1
63664: PPUSH
63665: LD_VAR 0 3
63669: PPUSH
63670: CALL_OW 12
63674: ARRAY
63675: ST_TO_ADDR
// if Crawls ( un ) then
63676: LD_VAR 0 2
63680: PPUSH
63681: CALL_OW 318
63685: IFFALSE 63696
// ComWalk ( un ) ;
63687: LD_VAR 0 2
63691: PPUSH
63692: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63696: LD_VAR 0 2
63700: PPUSH
63701: LD_INT 8
63703: PPUSH
63704: CALL_OW 336
// end ;
63708: PPOPN 3
63710: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63711: LD_EXP 115
63715: PUSH
63716: LD_EXP 159
63720: AND
63721: IFFALSE 63865
63723: GO 63725
63725: DISABLE
63726: LD_INT 0
63728: PPUSH
63729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63730: LD_ADDR_VAR 0 2
63734: PUSH
63735: LD_INT 22
63737: PUSH
63738: LD_OWVAR 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 21
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 34
63762: PUSH
63763: LD_INT 12
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 34
63772: PUSH
63773: LD_INT 51
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 34
63782: PUSH
63783: LD_INT 32
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: PPUSH
63801: CALL_OW 69
63805: ST_TO_ADDR
// if not tmp then
63806: LD_VAR 0 2
63810: NOT
63811: IFFALSE 63815
// exit ;
63813: GO 63865
// for i in tmp do
63815: LD_ADDR_VAR 0 1
63819: PUSH
63820: LD_VAR 0 2
63824: PUSH
63825: FOR_IN
63826: IFFALSE 63863
// if GetCargo ( i , mat_artifact ) = 0 then
63828: LD_VAR 0 1
63832: PPUSH
63833: LD_INT 4
63835: PPUSH
63836: CALL_OW 289
63840: PUSH
63841: LD_INT 0
63843: EQUAL
63844: IFFALSE 63861
// SetCargo ( i , mat_siberit , 100 ) ;
63846: LD_VAR 0 1
63850: PPUSH
63851: LD_INT 3
63853: PPUSH
63854: LD_INT 100
63856: PPUSH
63857: CALL_OW 290
63861: GO 63825
63863: POP
63864: POP
// end ;
63865: PPOPN 2
63867: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63868: LD_EXP 115
63872: PUSH
63873: LD_EXP 160
63877: AND
63878: IFFALSE 64061
63880: GO 63882
63882: DISABLE
63883: LD_INT 0
63885: PPUSH
63886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63887: LD_ADDR_VAR 0 2
63891: PUSH
63892: LD_INT 22
63894: PUSH
63895: LD_OWVAR 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PPUSH
63904: CALL_OW 69
63908: ST_TO_ADDR
// if not tmp then
63909: LD_VAR 0 2
63913: NOT
63914: IFFALSE 63918
// exit ;
63916: GO 64061
// for i := 1 to 2 do
63918: LD_ADDR_VAR 0 1
63922: PUSH
63923: DOUBLE
63924: LD_INT 1
63926: DEC
63927: ST_TO_ADDR
63928: LD_INT 2
63930: PUSH
63931: FOR_TO
63932: IFFALSE 64059
// begin uc_side := your_side ;
63934: LD_ADDR_OWVAR 20
63938: PUSH
63939: LD_OWVAR 2
63943: ST_TO_ADDR
// uc_nation := nation_american ;
63944: LD_ADDR_OWVAR 21
63948: PUSH
63949: LD_INT 1
63951: ST_TO_ADDR
// vc_chassis := us_morphling ;
63952: LD_ADDR_OWVAR 37
63956: PUSH
63957: LD_INT 5
63959: ST_TO_ADDR
// vc_engine := engine_siberite ;
63960: LD_ADDR_OWVAR 39
63964: PUSH
63965: LD_INT 3
63967: ST_TO_ADDR
// vc_control := control_computer ;
63968: LD_ADDR_OWVAR 38
63972: PUSH
63973: LD_INT 3
63975: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63976: LD_ADDR_OWVAR 40
63980: PUSH
63981: LD_INT 10
63983: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63984: LD_VAR 0 2
63988: PUSH
63989: LD_INT 1
63991: ARRAY
63992: PPUSH
63993: CALL_OW 310
63997: NOT
63998: IFFALSE 64045
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64000: CALL_OW 45
64004: PPUSH
64005: LD_VAR 0 2
64009: PUSH
64010: LD_INT 1
64012: ARRAY
64013: PPUSH
64014: CALL_OW 250
64018: PPUSH
64019: LD_VAR 0 2
64023: PUSH
64024: LD_INT 1
64026: ARRAY
64027: PPUSH
64028: CALL_OW 251
64032: PPUSH
64033: LD_INT 12
64035: PPUSH
64036: LD_INT 1
64038: PPUSH
64039: CALL_OW 50
64043: GO 64057
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64045: CALL_OW 45
64049: PPUSH
64050: LD_INT 1
64052: PPUSH
64053: CALL_OW 51
// end ;
64057: GO 63931
64059: POP
64060: POP
// end ;
64061: PPOPN 2
64063: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64064: LD_EXP 115
64068: PUSH
64069: LD_EXP 161
64073: AND
64074: IFFALSE 64296
64076: GO 64078
64078: DISABLE
64079: LD_INT 0
64081: PPUSH
64082: PPUSH
64083: PPUSH
64084: PPUSH
64085: PPUSH
64086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64087: LD_ADDR_VAR 0 6
64091: PUSH
64092: LD_INT 22
64094: PUSH
64095: LD_OWVAR 2
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 21
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: LD_INT 23
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: PPUSH
64136: CALL_OW 69
64140: ST_TO_ADDR
// if not tmp then
64141: LD_VAR 0 6
64145: NOT
64146: IFFALSE 64150
// exit ;
64148: GO 64296
// s1 := rand ( 1 , 4 ) ;
64150: LD_ADDR_VAR 0 2
64154: PUSH
64155: LD_INT 1
64157: PPUSH
64158: LD_INT 4
64160: PPUSH
64161: CALL_OW 12
64165: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64166: LD_ADDR_VAR 0 4
64170: PUSH
64171: LD_VAR 0 6
64175: PUSH
64176: LD_INT 1
64178: ARRAY
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: CALL_OW 259
64189: ST_TO_ADDR
// if s1 = 1 then
64190: LD_VAR 0 2
64194: PUSH
64195: LD_INT 1
64197: EQUAL
64198: IFFALSE 64218
// s2 := rand ( 2 , 4 ) else
64200: LD_ADDR_VAR 0 3
64204: PUSH
64205: LD_INT 2
64207: PPUSH
64208: LD_INT 4
64210: PPUSH
64211: CALL_OW 12
64215: ST_TO_ADDR
64216: GO 64226
// s2 := 1 ;
64218: LD_ADDR_VAR 0 3
64222: PUSH
64223: LD_INT 1
64225: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64226: LD_ADDR_VAR 0 5
64230: PUSH
64231: LD_VAR 0 6
64235: PUSH
64236: LD_INT 1
64238: ARRAY
64239: PPUSH
64240: LD_VAR 0 3
64244: PPUSH
64245: CALL_OW 259
64249: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64250: LD_VAR 0 6
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: PPUSH
64259: LD_VAR 0 2
64263: PPUSH
64264: LD_VAR 0 5
64268: PPUSH
64269: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64273: LD_VAR 0 6
64277: PUSH
64278: LD_INT 1
64280: ARRAY
64281: PPUSH
64282: LD_VAR 0 3
64286: PPUSH
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 237
// end ;
64296: PPOPN 6
64298: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64299: LD_EXP 115
64303: PUSH
64304: LD_EXP 162
64308: AND
64309: IFFALSE 64388
64311: GO 64313
64313: DISABLE
64314: LD_INT 0
64316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64317: LD_ADDR_VAR 0 1
64321: PUSH
64322: LD_INT 22
64324: PUSH
64325: LD_OWVAR 2
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 30
64336: PUSH
64337: LD_INT 3
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PPUSH
64348: CALL_OW 69
64352: ST_TO_ADDR
// if not tmp then
64353: LD_VAR 0 1
64357: NOT
64358: IFFALSE 64362
// exit ;
64360: GO 64388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64362: LD_VAR 0 1
64366: PUSH
64367: LD_INT 1
64369: PPUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: CALL_OW 12
64379: ARRAY
64380: PPUSH
64381: LD_INT 1
64383: PPUSH
64384: CALL_OW 234
// end ;
64388: PPOPN 1
64390: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64391: LD_EXP 115
64395: PUSH
64396: LD_EXP 163
64400: AND
64401: IFFALSE 64513
64403: GO 64405
64405: DISABLE
64406: LD_INT 0
64408: PPUSH
64409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64410: LD_ADDR_VAR 0 2
64414: PUSH
64415: LD_INT 22
64417: PUSH
64418: LD_OWVAR 2
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: LD_INT 30
64432: PUSH
64433: LD_INT 27
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 30
64442: PUSH
64443: LD_INT 26
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 30
64452: PUSH
64453: LD_INT 28
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PPUSH
64470: CALL_OW 69
64474: ST_TO_ADDR
// if not tmp then
64475: LD_VAR 0 2
64479: NOT
64480: IFFALSE 64484
// exit ;
64482: GO 64513
// for i in tmp do
64484: LD_ADDR_VAR 0 1
64488: PUSH
64489: LD_VAR 0 2
64493: PUSH
64494: FOR_IN
64495: IFFALSE 64511
// SetLives ( i , 1 ) ;
64497: LD_VAR 0 1
64501: PPUSH
64502: LD_INT 1
64504: PPUSH
64505: CALL_OW 234
64509: GO 64494
64511: POP
64512: POP
// end ;
64513: PPOPN 2
64515: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64516: LD_EXP 115
64520: PUSH
64521: LD_EXP 164
64525: AND
64526: IFFALSE 64813
64528: GO 64530
64530: DISABLE
64531: LD_INT 0
64533: PPUSH
64534: PPUSH
64535: PPUSH
// begin i := rand ( 1 , 7 ) ;
64536: LD_ADDR_VAR 0 1
64540: PUSH
64541: LD_INT 1
64543: PPUSH
64544: LD_INT 7
64546: PPUSH
64547: CALL_OW 12
64551: ST_TO_ADDR
// case i of 1 :
64552: LD_VAR 0 1
64556: PUSH
64557: LD_INT 1
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64565
64563: GO 64575
64565: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64566: LD_STRING earthquake(getX(game), 0, 32)
64568: PPUSH
64569: CALL_OW 559
64573: GO 64813
64575: LD_INT 2
64577: DOUBLE
64578: EQUAL
64579: IFTRUE 64583
64581: GO 64597
64583: POP
// begin ToLua ( displayStucuk(); ) ;
64584: LD_STRING displayStucuk();
64586: PPUSH
64587: CALL_OW 559
// ResetFog ;
64591: CALL_OW 335
// end ; 3 :
64595: GO 64813
64597: LD_INT 3
64599: DOUBLE
64600: EQUAL
64601: IFTRUE 64605
64603: GO 64709
64605: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64606: LD_ADDR_VAR 0 2
64610: PUSH
64611: LD_INT 22
64613: PUSH
64614: LD_OWVAR 2
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 25
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PPUSH
64637: CALL_OW 69
64641: ST_TO_ADDR
// if not tmp then
64642: LD_VAR 0 2
64646: NOT
64647: IFFALSE 64651
// exit ;
64649: GO 64813
// un := tmp [ rand ( 1 , tmp ) ] ;
64651: LD_ADDR_VAR 0 3
64655: PUSH
64656: LD_VAR 0 2
64660: PUSH
64661: LD_INT 1
64663: PPUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: CALL_OW 12
64673: ARRAY
64674: ST_TO_ADDR
// if Crawls ( un ) then
64675: LD_VAR 0 3
64679: PPUSH
64680: CALL_OW 318
64684: IFFALSE 64695
// ComWalk ( un ) ;
64686: LD_VAR 0 3
64690: PPUSH
64691: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64695: LD_VAR 0 3
64699: PPUSH
64700: LD_INT 8
64702: PPUSH
64703: CALL_OW 336
// end ; 4 :
64707: GO 64813
64709: LD_INT 4
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64717
64715: GO 64791
64717: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64718: LD_ADDR_VAR 0 2
64722: PUSH
64723: LD_INT 22
64725: PUSH
64726: LD_OWVAR 2
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 30
64737: PUSH
64738: LD_INT 29
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PPUSH
64749: CALL_OW 69
64753: ST_TO_ADDR
// if not tmp then
64754: LD_VAR 0 2
64758: NOT
64759: IFFALSE 64763
// exit ;
64761: GO 64813
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PPUSH
64772: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64776: LD_VAR 0 2
64780: PUSH
64781: LD_INT 1
64783: ARRAY
64784: PPUSH
64785: CALL_OW 65
// end ; 5 .. 7 :
64789: GO 64813
64791: LD_INT 5
64793: DOUBLE
64794: GREATEREQUAL
64795: IFFALSE 64803
64797: LD_INT 7
64799: DOUBLE
64800: LESSEQUAL
64801: IFTRUE 64805
64803: GO 64812
64805: POP
// StreamSibBomb ; end ;
64806: CALL 61050 0 0
64810: GO 64813
64812: POP
// end ;
64813: PPOPN 3
64815: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64816: LD_EXP 115
64820: PUSH
64821: LD_EXP 165
64825: AND
64826: IFFALSE 64982
64828: GO 64830
64830: DISABLE
64831: LD_INT 0
64833: PPUSH
64834: PPUSH
64835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: LD_INT 81
64843: PUSH
64844: LD_OWVAR 2
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 21
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 21
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PPUSH
64885: CALL_OW 69
64889: ST_TO_ADDR
// if not tmp then
64890: LD_VAR 0 2
64894: NOT
64895: IFFALSE 64899
// exit ;
64897: GO 64982
// p := 0 ;
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: LD_INT 0
64906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64907: LD_INT 35
64909: PPUSH
64910: CALL_OW 67
// p := p + 1 ;
64914: LD_ADDR_VAR 0 3
64918: PUSH
64919: LD_VAR 0 3
64923: PUSH
64924: LD_INT 1
64926: PLUS
64927: ST_TO_ADDR
// for i in tmp do
64928: LD_ADDR_VAR 0 1
64932: PUSH
64933: LD_VAR 0 2
64937: PUSH
64938: FOR_IN
64939: IFFALSE 64970
// if GetLives ( i ) < 1000 then
64941: LD_VAR 0 1
64945: PPUSH
64946: CALL_OW 256
64950: PUSH
64951: LD_INT 1000
64953: LESS
64954: IFFALSE 64968
// SetLives ( i , 1000 ) ;
64956: LD_VAR 0 1
64960: PPUSH
64961: LD_INT 1000
64963: PPUSH
64964: CALL_OW 234
64968: GO 64938
64970: POP
64971: POP
// until p > 20 ;
64972: LD_VAR 0 3
64976: PUSH
64977: LD_INT 20
64979: GREATER
64980: IFFALSE 64907
// end ;
64982: PPOPN 3
64984: END
// every 0 0$1 trigger StreamModeActive and sTime do
64985: LD_EXP 115
64989: PUSH
64990: LD_EXP 166
64994: AND
64995: IFFALSE 65030
64997: GO 64999
64999: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65000: LD_INT 28
65002: PPUSH
65003: LD_OWVAR 2
65007: PPUSH
65008: LD_INT 2
65010: PPUSH
65011: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65015: LD_INT 30
65017: PPUSH
65018: LD_OWVAR 2
65022: PPUSH
65023: LD_INT 2
65025: PPUSH
65026: CALL_OW 322
// end ;
65030: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65031: LD_EXP 115
65035: PUSH
65036: LD_EXP 167
65040: AND
65041: IFFALSE 65162
65043: GO 65045
65045: DISABLE
65046: LD_INT 0
65048: PPUSH
65049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65050: LD_ADDR_VAR 0 2
65054: PUSH
65055: LD_INT 22
65057: PUSH
65058: LD_OWVAR 2
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 21
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: LD_INT 23
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: PPUSH
65099: CALL_OW 69
65103: ST_TO_ADDR
// if not tmp then
65104: LD_VAR 0 2
65108: NOT
65109: IFFALSE 65113
// exit ;
65111: GO 65162
// for i in tmp do
65113: LD_ADDR_VAR 0 1
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: FOR_IN
65124: IFFALSE 65160
// begin if Crawls ( i ) then
65126: LD_VAR 0 1
65130: PPUSH
65131: CALL_OW 318
65135: IFFALSE 65146
// ComWalk ( i ) ;
65137: LD_VAR 0 1
65141: PPUSH
65142: CALL_OW 138
// SetClass ( i , 2 ) ;
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_INT 2
65153: PPUSH
65154: CALL_OW 336
// end ;
65158: GO 65123
65160: POP
65161: POP
// end ;
65162: PPOPN 2
65164: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65165: LD_EXP 115
65169: PUSH
65170: LD_EXP 168
65174: AND
65175: IFFALSE 65463
65177: GO 65179
65179: DISABLE
65180: LD_INT 0
65182: PPUSH
65183: PPUSH
65184: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65185: LD_OWVAR 2
65189: PPUSH
65190: LD_INT 9
65192: PPUSH
65193: LD_INT 1
65195: PPUSH
65196: LD_INT 1
65198: PPUSH
65199: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65203: LD_INT 9
65205: PPUSH
65206: LD_OWVAR 2
65210: PPUSH
65211: CALL_OW 343
// uc_side := 9 ;
65215: LD_ADDR_OWVAR 20
65219: PUSH
65220: LD_INT 9
65222: ST_TO_ADDR
// uc_nation := 2 ;
65223: LD_ADDR_OWVAR 21
65227: PUSH
65228: LD_INT 2
65230: ST_TO_ADDR
// hc_name := Dark Warrior ;
65231: LD_ADDR_OWVAR 26
65235: PUSH
65236: LD_STRING Dark Warrior
65238: ST_TO_ADDR
// hc_gallery :=  ;
65239: LD_ADDR_OWVAR 33
65243: PUSH
65244: LD_STRING 
65246: ST_TO_ADDR
// hc_noskilllimit := true ;
65247: LD_ADDR_OWVAR 76
65251: PUSH
65252: LD_INT 1
65254: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65255: LD_ADDR_OWVAR 31
65259: PUSH
65260: LD_INT 30
65262: PUSH
65263: LD_INT 30
65265: PUSH
65266: LD_INT 30
65268: PUSH
65269: LD_INT 30
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: ST_TO_ADDR
// un := CreateHuman ;
65278: LD_ADDR_VAR 0 3
65282: PUSH
65283: CALL_OW 44
65287: ST_TO_ADDR
// hc_noskilllimit := false ;
65288: LD_ADDR_OWVAR 76
65292: PUSH
65293: LD_INT 0
65295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65296: LD_VAR 0 3
65300: PPUSH
65301: LD_INT 1
65303: PPUSH
65304: CALL_OW 51
// ToLua ( playRanger() ) ;
65308: LD_STRING playRanger()
65310: PPUSH
65311: CALL_OW 559
// p := 0 ;
65315: LD_ADDR_VAR 0 2
65319: PUSH
65320: LD_INT 0
65322: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65323: LD_INT 35
65325: PPUSH
65326: CALL_OW 67
// p := p + 1 ;
65330: LD_ADDR_VAR 0 2
65334: PUSH
65335: LD_VAR 0 2
65339: PUSH
65340: LD_INT 1
65342: PLUS
65343: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65344: LD_VAR 0 3
65348: PPUSH
65349: CALL_OW 256
65353: PUSH
65354: LD_INT 1000
65356: LESS
65357: IFFALSE 65371
// SetLives ( un , 1000 ) ;
65359: LD_VAR 0 3
65363: PPUSH
65364: LD_INT 1000
65366: PPUSH
65367: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65371: LD_VAR 0 3
65375: PPUSH
65376: LD_INT 81
65378: PUSH
65379: LD_OWVAR 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 91
65390: PUSH
65391: LD_VAR 0 3
65395: PUSH
65396: LD_INT 30
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PPUSH
65408: CALL_OW 69
65412: PPUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: CALL_OW 74
65422: PPUSH
65423: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65427: LD_VAR 0 2
65431: PUSH
65432: LD_INT 80
65434: GREATER
65435: PUSH
65436: LD_VAR 0 3
65440: PPUSH
65441: CALL_OW 301
65445: OR
65446: IFFALSE 65323
// if un then
65448: LD_VAR 0 3
65452: IFFALSE 65463
// RemoveUnit ( un ) ;
65454: LD_VAR 0 3
65458: PPUSH
65459: CALL_OW 64
// end ;
65463: PPOPN 3
65465: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65466: LD_EXP 169
65470: IFFALSE 65586
65472: GO 65474
65474: DISABLE
65475: LD_INT 0
65477: PPUSH
65478: PPUSH
65479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_INT 81
65487: PUSH
65488: LD_OWVAR 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 21
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PPUSH
65511: CALL_OW 69
65515: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65516: LD_STRING playComputer()
65518: PPUSH
65519: CALL_OW 559
// if not tmp then
65523: LD_VAR 0 2
65527: NOT
65528: IFFALSE 65532
// exit ;
65530: GO 65586
// for i in tmp do
65532: LD_ADDR_VAR 0 1
65536: PUSH
65537: LD_VAR 0 2
65541: PUSH
65542: FOR_IN
65543: IFFALSE 65584
// for j := 1 to 4 do
65545: LD_ADDR_VAR 0 3
65549: PUSH
65550: DOUBLE
65551: LD_INT 1
65553: DEC
65554: ST_TO_ADDR
65555: LD_INT 4
65557: PUSH
65558: FOR_TO
65559: IFFALSE 65580
// SetSkill ( i , j , 10 ) ;
65561: LD_VAR 0 1
65565: PPUSH
65566: LD_VAR 0 3
65570: PPUSH
65571: LD_INT 10
65573: PPUSH
65574: CALL_OW 237
65578: GO 65558
65580: POP
65581: POP
65582: GO 65542
65584: POP
65585: POP
// end ;
65586: PPOPN 3
65588: END
// every 0 0$1 trigger s30 do var i , tmp ;
65589: LD_EXP 170
65593: IFFALSE 65662
65595: GO 65597
65597: DISABLE
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65602: LD_ADDR_VAR 0 2
65606: PUSH
65607: LD_INT 22
65609: PUSH
65610: LD_OWVAR 2
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PPUSH
65619: CALL_OW 69
65623: ST_TO_ADDR
// if not tmp then
65624: LD_VAR 0 2
65628: NOT
65629: IFFALSE 65633
// exit ;
65631: GO 65662
// for i in tmp do
65633: LD_ADDR_VAR 0 1
65637: PUSH
65638: LD_VAR 0 2
65642: PUSH
65643: FOR_IN
65644: IFFALSE 65660
// SetLives ( i , 300 ) ;
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_INT 300
65653: PPUSH
65654: CALL_OW 234
65658: GO 65643
65660: POP
65661: POP
// end ;
65662: PPOPN 2
65664: END
// every 0 0$1 trigger s60 do var i , tmp ;
65665: LD_EXP 171
65669: IFFALSE 65738
65671: GO 65673
65673: DISABLE
65674: LD_INT 0
65676: PPUSH
65677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65678: LD_ADDR_VAR 0 2
65682: PUSH
65683: LD_INT 22
65685: PUSH
65686: LD_OWVAR 2
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PPUSH
65695: CALL_OW 69
65699: ST_TO_ADDR
// if not tmp then
65700: LD_VAR 0 2
65704: NOT
65705: IFFALSE 65709
// exit ;
65707: GO 65738
// for i in tmp do
65709: LD_ADDR_VAR 0 1
65713: PUSH
65714: LD_VAR 0 2
65718: PUSH
65719: FOR_IN
65720: IFFALSE 65736
// SetLives ( i , 600 ) ;
65722: LD_VAR 0 1
65726: PPUSH
65727: LD_INT 600
65729: PPUSH
65730: CALL_OW 234
65734: GO 65719
65736: POP
65737: POP
// end ;
65738: PPOPN 2
65740: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65741: LD_INT 0
65743: PPUSH
// case cmd of 301 :
65744: LD_VAR 0 1
65748: PUSH
65749: LD_INT 301
65751: DOUBLE
65752: EQUAL
65753: IFTRUE 65757
65755: GO 65789
65757: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65758: LD_VAR 0 6
65762: PPUSH
65763: LD_VAR 0 7
65767: PPUSH
65768: LD_VAR 0 8
65772: PPUSH
65773: LD_VAR 0 4
65777: PPUSH
65778: LD_VAR 0 5
65782: PPUSH
65783: CALL 66990 0 5
65787: GO 65910
65789: LD_INT 302
65791: DOUBLE
65792: EQUAL
65793: IFTRUE 65797
65795: GO 65834
65797: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65798: LD_VAR 0 6
65802: PPUSH
65803: LD_VAR 0 7
65807: PPUSH
65808: LD_VAR 0 8
65812: PPUSH
65813: LD_VAR 0 9
65817: PPUSH
65818: LD_VAR 0 4
65822: PPUSH
65823: LD_VAR 0 5
65827: PPUSH
65828: CALL 67081 0 6
65832: GO 65910
65834: LD_INT 303
65836: DOUBLE
65837: EQUAL
65838: IFTRUE 65842
65840: GO 65879
65842: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65843: LD_VAR 0 6
65847: PPUSH
65848: LD_VAR 0 7
65852: PPUSH
65853: LD_VAR 0 8
65857: PPUSH
65858: LD_VAR 0 9
65862: PPUSH
65863: LD_VAR 0 4
65867: PPUSH
65868: LD_VAR 0 5
65872: PPUSH
65873: CALL 65915 0 6
65877: GO 65910
65879: LD_INT 304
65881: DOUBLE
65882: EQUAL
65883: IFTRUE 65887
65885: GO 65909
65887: POP
// hHackTeleport ( unit , x , y ) ; end ;
65888: LD_VAR 0 2
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: LD_VAR 0 5
65902: PPUSH
65903: CALL 67674 0 3
65907: GO 65910
65909: POP
// end ;
65910: LD_VAR 0 12
65914: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65915: LD_INT 0
65917: PPUSH
65918: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65919: LD_VAR 0 1
65923: PUSH
65924: LD_INT 1
65926: LESS
65927: PUSH
65928: LD_VAR 0 1
65932: PUSH
65933: LD_INT 3
65935: GREATER
65936: OR
65937: PUSH
65938: LD_VAR 0 5
65942: PPUSH
65943: LD_VAR 0 6
65947: PPUSH
65948: CALL_OW 428
65952: OR
65953: IFFALSE 65957
// exit ;
65955: GO 66677
// uc_side := your_side ;
65957: LD_ADDR_OWVAR 20
65961: PUSH
65962: LD_OWVAR 2
65966: ST_TO_ADDR
// uc_nation := nation ;
65967: LD_ADDR_OWVAR 21
65971: PUSH
65972: LD_VAR 0 1
65976: ST_TO_ADDR
// bc_level = 1 ;
65977: LD_ADDR_OWVAR 43
65981: PUSH
65982: LD_INT 1
65984: ST_TO_ADDR
// case btype of 1 :
65985: LD_VAR 0 2
65989: PUSH
65990: LD_INT 1
65992: DOUBLE
65993: EQUAL
65994: IFTRUE 65998
65996: GO 66009
65998: POP
// bc_type := b_depot ; 2 :
65999: LD_ADDR_OWVAR 42
66003: PUSH
66004: LD_INT 0
66006: ST_TO_ADDR
66007: GO 66621
66009: LD_INT 2
66011: DOUBLE
66012: EQUAL
66013: IFTRUE 66017
66015: GO 66028
66017: POP
// bc_type := b_warehouse ; 3 :
66018: LD_ADDR_OWVAR 42
66022: PUSH
66023: LD_INT 1
66025: ST_TO_ADDR
66026: GO 66621
66028: LD_INT 3
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66036
66034: GO 66047
66036: POP
// bc_type := b_lab ; 4 .. 9 :
66037: LD_ADDR_OWVAR 42
66041: PUSH
66042: LD_INT 6
66044: ST_TO_ADDR
66045: GO 66621
66047: LD_INT 4
66049: DOUBLE
66050: GREATEREQUAL
66051: IFFALSE 66059
66053: LD_INT 9
66055: DOUBLE
66056: LESSEQUAL
66057: IFTRUE 66061
66059: GO 66113
66061: POP
// begin bc_type := b_lab_half ;
66062: LD_ADDR_OWVAR 42
66066: PUSH
66067: LD_INT 7
66069: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66070: LD_ADDR_OWVAR 44
66074: PUSH
66075: LD_INT 10
66077: PUSH
66078: LD_INT 11
66080: PUSH
66081: LD_INT 12
66083: PUSH
66084: LD_INT 15
66086: PUSH
66087: LD_INT 14
66089: PUSH
66090: LD_INT 13
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: PUSH
66101: LD_VAR 0 2
66105: PUSH
66106: LD_INT 3
66108: MINUS
66109: ARRAY
66110: ST_TO_ADDR
// end ; 10 .. 13 :
66111: GO 66621
66113: LD_INT 10
66115: DOUBLE
66116: GREATEREQUAL
66117: IFFALSE 66125
66119: LD_INT 13
66121: DOUBLE
66122: LESSEQUAL
66123: IFTRUE 66127
66125: GO 66204
66127: POP
// begin bc_type := b_lab_full ;
66128: LD_ADDR_OWVAR 42
66132: PUSH
66133: LD_INT 8
66135: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66136: LD_ADDR_OWVAR 44
66140: PUSH
66141: LD_INT 10
66143: PUSH
66144: LD_INT 12
66146: PUSH
66147: LD_INT 14
66149: PUSH
66150: LD_INT 13
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 9
66166: MINUS
66167: ARRAY
66168: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66169: LD_ADDR_OWVAR 45
66173: PUSH
66174: LD_INT 11
66176: PUSH
66177: LD_INT 15
66179: PUSH
66180: LD_INT 12
66182: PUSH
66183: LD_INT 15
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: PUSH
66192: LD_VAR 0 2
66196: PUSH
66197: LD_INT 9
66199: MINUS
66200: ARRAY
66201: ST_TO_ADDR
// end ; 14 :
66202: GO 66621
66204: LD_INT 14
66206: DOUBLE
66207: EQUAL
66208: IFTRUE 66212
66210: GO 66223
66212: POP
// bc_type := b_workshop ; 15 :
66213: LD_ADDR_OWVAR 42
66217: PUSH
66218: LD_INT 2
66220: ST_TO_ADDR
66221: GO 66621
66223: LD_INT 15
66225: DOUBLE
66226: EQUAL
66227: IFTRUE 66231
66229: GO 66242
66231: POP
// bc_type := b_factory ; 16 :
66232: LD_ADDR_OWVAR 42
66236: PUSH
66237: LD_INT 3
66239: ST_TO_ADDR
66240: GO 66621
66242: LD_INT 16
66244: DOUBLE
66245: EQUAL
66246: IFTRUE 66250
66248: GO 66261
66250: POP
// bc_type := b_ext_gun ; 17 :
66251: LD_ADDR_OWVAR 42
66255: PUSH
66256: LD_INT 17
66258: ST_TO_ADDR
66259: GO 66621
66261: LD_INT 17
66263: DOUBLE
66264: EQUAL
66265: IFTRUE 66269
66267: GO 66297
66269: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66270: LD_ADDR_OWVAR 42
66274: PUSH
66275: LD_INT 19
66277: PUSH
66278: LD_INT 23
66280: PUSH
66281: LD_INT 19
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: PUSH
66289: LD_VAR 0 1
66293: ARRAY
66294: ST_TO_ADDR
66295: GO 66621
66297: LD_INT 18
66299: DOUBLE
66300: EQUAL
66301: IFTRUE 66305
66303: GO 66316
66305: POP
// bc_type := b_ext_radar ; 19 :
66306: LD_ADDR_OWVAR 42
66310: PUSH
66311: LD_INT 20
66313: ST_TO_ADDR
66314: GO 66621
66316: LD_INT 19
66318: DOUBLE
66319: EQUAL
66320: IFTRUE 66324
66322: GO 66335
66324: POP
// bc_type := b_ext_radio ; 20 :
66325: LD_ADDR_OWVAR 42
66329: PUSH
66330: LD_INT 22
66332: ST_TO_ADDR
66333: GO 66621
66335: LD_INT 20
66337: DOUBLE
66338: EQUAL
66339: IFTRUE 66343
66341: GO 66354
66343: POP
// bc_type := b_ext_siberium ; 21 :
66344: LD_ADDR_OWVAR 42
66348: PUSH
66349: LD_INT 21
66351: ST_TO_ADDR
66352: GO 66621
66354: LD_INT 21
66356: DOUBLE
66357: EQUAL
66358: IFTRUE 66362
66360: GO 66373
66362: POP
// bc_type := b_ext_computer ; 22 :
66363: LD_ADDR_OWVAR 42
66367: PUSH
66368: LD_INT 24
66370: ST_TO_ADDR
66371: GO 66621
66373: LD_INT 22
66375: DOUBLE
66376: EQUAL
66377: IFTRUE 66381
66379: GO 66392
66381: POP
// bc_type := b_ext_track ; 23 :
66382: LD_ADDR_OWVAR 42
66386: PUSH
66387: LD_INT 16
66389: ST_TO_ADDR
66390: GO 66621
66392: LD_INT 23
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66400
66398: GO 66411
66400: POP
// bc_type := b_ext_laser ; 24 :
66401: LD_ADDR_OWVAR 42
66405: PUSH
66406: LD_INT 25
66408: ST_TO_ADDR
66409: GO 66621
66411: LD_INT 24
66413: DOUBLE
66414: EQUAL
66415: IFTRUE 66419
66417: GO 66430
66419: POP
// bc_type := b_control_tower ; 25 :
66420: LD_ADDR_OWVAR 42
66424: PUSH
66425: LD_INT 36
66427: ST_TO_ADDR
66428: GO 66621
66430: LD_INT 25
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66449
66438: POP
// bc_type := b_breastwork ; 26 :
66439: LD_ADDR_OWVAR 42
66443: PUSH
66444: LD_INT 31
66446: ST_TO_ADDR
66447: GO 66621
66449: LD_INT 26
66451: DOUBLE
66452: EQUAL
66453: IFTRUE 66457
66455: GO 66468
66457: POP
// bc_type := b_bunker ; 27 :
66458: LD_ADDR_OWVAR 42
66462: PUSH
66463: LD_INT 32
66465: ST_TO_ADDR
66466: GO 66621
66468: LD_INT 27
66470: DOUBLE
66471: EQUAL
66472: IFTRUE 66476
66474: GO 66487
66476: POP
// bc_type := b_turret ; 28 :
66477: LD_ADDR_OWVAR 42
66481: PUSH
66482: LD_INT 33
66484: ST_TO_ADDR
66485: GO 66621
66487: LD_INT 28
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66495
66493: GO 66506
66495: POP
// bc_type := b_armoury ; 29 :
66496: LD_ADDR_OWVAR 42
66500: PUSH
66501: LD_INT 4
66503: ST_TO_ADDR
66504: GO 66621
66506: LD_INT 29
66508: DOUBLE
66509: EQUAL
66510: IFTRUE 66514
66512: GO 66525
66514: POP
// bc_type := b_barracks ; 30 :
66515: LD_ADDR_OWVAR 42
66519: PUSH
66520: LD_INT 5
66522: ST_TO_ADDR
66523: GO 66621
66525: LD_INT 30
66527: DOUBLE
66528: EQUAL
66529: IFTRUE 66533
66531: GO 66544
66533: POP
// bc_type := b_solar_power ; 31 :
66534: LD_ADDR_OWVAR 42
66538: PUSH
66539: LD_INT 27
66541: ST_TO_ADDR
66542: GO 66621
66544: LD_INT 31
66546: DOUBLE
66547: EQUAL
66548: IFTRUE 66552
66550: GO 66563
66552: POP
// bc_type := b_oil_power ; 32 :
66553: LD_ADDR_OWVAR 42
66557: PUSH
66558: LD_INT 26
66560: ST_TO_ADDR
66561: GO 66621
66563: LD_INT 32
66565: DOUBLE
66566: EQUAL
66567: IFTRUE 66571
66569: GO 66582
66571: POP
// bc_type := b_siberite_power ; 33 :
66572: LD_ADDR_OWVAR 42
66576: PUSH
66577: LD_INT 28
66579: ST_TO_ADDR
66580: GO 66621
66582: LD_INT 33
66584: DOUBLE
66585: EQUAL
66586: IFTRUE 66590
66588: GO 66601
66590: POP
// bc_type := b_oil_mine ; 34 :
66591: LD_ADDR_OWVAR 42
66595: PUSH
66596: LD_INT 29
66598: ST_TO_ADDR
66599: GO 66621
66601: LD_INT 34
66603: DOUBLE
66604: EQUAL
66605: IFTRUE 66609
66607: GO 66620
66609: POP
// bc_type := b_siberite_mine ; end ;
66610: LD_ADDR_OWVAR 42
66614: PUSH
66615: LD_INT 30
66617: ST_TO_ADDR
66618: GO 66621
66620: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66621: LD_ADDR_VAR 0 8
66625: PUSH
66626: LD_VAR 0 5
66630: PPUSH
66631: LD_VAR 0 6
66635: PPUSH
66636: LD_VAR 0 3
66640: PPUSH
66641: CALL_OW 47
66645: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66646: LD_OWVAR 42
66650: PUSH
66651: LD_INT 32
66653: PUSH
66654: LD_INT 33
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: IN
66661: IFFALSE 66677
// PlaceWeaponTurret ( b , weapon ) ;
66663: LD_VAR 0 8
66667: PPUSH
66668: LD_VAR 0 4
66672: PPUSH
66673: CALL_OW 431
// end ;
66677: LD_VAR 0 7
66681: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66682: LD_INT 0
66684: PPUSH
66685: PPUSH
66686: PPUSH
66687: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66688: LD_ADDR_VAR 0 4
66692: PUSH
66693: LD_INT 22
66695: PUSH
66696: LD_OWVAR 2
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 30
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 30
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PPUSH
66737: CALL_OW 69
66741: ST_TO_ADDR
// if not tmp then
66742: LD_VAR 0 4
66746: NOT
66747: IFFALSE 66751
// exit ;
66749: GO 66810
// for i in tmp do
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 4
66760: PUSH
66761: FOR_IN
66762: IFFALSE 66808
// for j = 1 to 3 do
66764: LD_ADDR_VAR 0 3
66768: PUSH
66769: DOUBLE
66770: LD_INT 1
66772: DEC
66773: ST_TO_ADDR
66774: LD_INT 3
66776: PUSH
66777: FOR_TO
66778: IFFALSE 66804
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66780: LD_VAR 0 2
66784: PPUSH
66785: CALL_OW 274
66789: PPUSH
66790: LD_VAR 0 3
66794: PPUSH
66795: LD_INT 99999
66797: PPUSH
66798: CALL_OW 277
66802: GO 66777
66804: POP
66805: POP
66806: GO 66761
66808: POP
66809: POP
// end ;
66810: LD_VAR 0 1
66814: RET
// export function hHackSetLevel10 ; var i , j ; begin
66815: LD_INT 0
66817: PPUSH
66818: PPUSH
66819: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66820: LD_ADDR_VAR 0 2
66824: PUSH
66825: LD_INT 21
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PPUSH
66835: CALL_OW 69
66839: PUSH
66840: FOR_IN
66841: IFFALSE 66893
// if IsSelected ( i ) then
66843: LD_VAR 0 2
66847: PPUSH
66848: CALL_OW 306
66852: IFFALSE 66891
// begin for j := 1 to 4 do
66854: LD_ADDR_VAR 0 3
66858: PUSH
66859: DOUBLE
66860: LD_INT 1
66862: DEC
66863: ST_TO_ADDR
66864: LD_INT 4
66866: PUSH
66867: FOR_TO
66868: IFFALSE 66889
// SetSkill ( i , j , 10 ) ;
66870: LD_VAR 0 2
66874: PPUSH
66875: LD_VAR 0 3
66879: PPUSH
66880: LD_INT 10
66882: PPUSH
66883: CALL_OW 237
66887: GO 66867
66889: POP
66890: POP
// end ;
66891: GO 66840
66893: POP
66894: POP
// end ;
66895: LD_VAR 0 1
66899: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66900: LD_INT 0
66902: PPUSH
66903: PPUSH
66904: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66905: LD_ADDR_VAR 0 2
66909: PUSH
66910: LD_INT 22
66912: PUSH
66913: LD_OWVAR 2
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 21
66924: PUSH
66925: LD_INT 1
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PPUSH
66936: CALL_OW 69
66940: PUSH
66941: FOR_IN
66942: IFFALSE 66983
// begin for j := 1 to 4 do
66944: LD_ADDR_VAR 0 3
66948: PUSH
66949: DOUBLE
66950: LD_INT 1
66952: DEC
66953: ST_TO_ADDR
66954: LD_INT 4
66956: PUSH
66957: FOR_TO
66958: IFFALSE 66979
// SetSkill ( i , j , 10 ) ;
66960: LD_VAR 0 2
66964: PPUSH
66965: LD_VAR 0 3
66969: PPUSH
66970: LD_INT 10
66972: PPUSH
66973: CALL_OW 237
66977: GO 66957
66979: POP
66980: POP
// end ;
66981: GO 66941
66983: POP
66984: POP
// end ;
66985: LD_VAR 0 1
66989: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66990: LD_INT 0
66992: PPUSH
// uc_side := your_side ;
66993: LD_ADDR_OWVAR 20
66997: PUSH
66998: LD_OWVAR 2
67002: ST_TO_ADDR
// uc_nation := nation ;
67003: LD_ADDR_OWVAR 21
67007: PUSH
67008: LD_VAR 0 1
67012: ST_TO_ADDR
// InitHc ;
67013: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67017: LD_INT 0
67019: PPUSH
67020: LD_VAR 0 2
67024: PPUSH
67025: LD_VAR 0 3
67029: PPUSH
67030: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67034: LD_VAR 0 4
67038: PPUSH
67039: LD_VAR 0 5
67043: PPUSH
67044: CALL_OW 428
67048: PUSH
67049: LD_INT 0
67051: EQUAL
67052: IFFALSE 67076
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67054: CALL_OW 44
67058: PPUSH
67059: LD_VAR 0 4
67063: PPUSH
67064: LD_VAR 0 5
67068: PPUSH
67069: LD_INT 1
67071: PPUSH
67072: CALL_OW 48
// end ;
67076: LD_VAR 0 6
67080: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67081: LD_INT 0
67083: PPUSH
67084: PPUSH
// uc_side := your_side ;
67085: LD_ADDR_OWVAR 20
67089: PUSH
67090: LD_OWVAR 2
67094: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: LD_INT 4
67111: PUSH
67112: LD_INT 5
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: IN
67122: IFFALSE 67134
// uc_nation := nation_american else
67124: LD_ADDR_OWVAR 21
67128: PUSH
67129: LD_INT 1
67131: ST_TO_ADDR
67132: GO 67177
// if chassis in [ 11 , 12 , 13 , 14 ] then
67134: LD_VAR 0 1
67138: PUSH
67139: LD_INT 11
67141: PUSH
67142: LD_INT 12
67144: PUSH
67145: LD_INT 13
67147: PUSH
67148: LD_INT 14
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: IN
67157: IFFALSE 67169
// uc_nation := nation_arabian else
67159: LD_ADDR_OWVAR 21
67163: PUSH
67164: LD_INT 2
67166: ST_TO_ADDR
67167: GO 67177
// uc_nation := nation_russian ;
67169: LD_ADDR_OWVAR 21
67173: PUSH
67174: LD_INT 3
67176: ST_TO_ADDR
// vc_chassis := chassis ;
67177: LD_ADDR_OWVAR 37
67181: PUSH
67182: LD_VAR 0 1
67186: ST_TO_ADDR
// vc_engine := engine ;
67187: LD_ADDR_OWVAR 39
67191: PUSH
67192: LD_VAR 0 2
67196: ST_TO_ADDR
// vc_control := control ;
67197: LD_ADDR_OWVAR 38
67201: PUSH
67202: LD_VAR 0 3
67206: ST_TO_ADDR
// vc_weapon := weapon ;
67207: LD_ADDR_OWVAR 40
67211: PUSH
67212: LD_VAR 0 4
67216: ST_TO_ADDR
// un := CreateVehicle ;
67217: LD_ADDR_VAR 0 8
67221: PUSH
67222: CALL_OW 45
67226: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67227: LD_VAR 0 8
67231: PPUSH
67232: LD_INT 0
67234: PPUSH
67235: LD_INT 5
67237: PPUSH
67238: CALL_OW 12
67242: PPUSH
67243: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67247: LD_VAR 0 8
67251: PPUSH
67252: LD_VAR 0 5
67256: PPUSH
67257: LD_VAR 0 6
67261: PPUSH
67262: LD_INT 1
67264: PPUSH
67265: CALL_OW 48
// end ;
67269: LD_VAR 0 7
67273: RET
// export hInvincible ; every 1 do
67274: GO 67276
67276: DISABLE
// hInvincible := [ ] ;
67277: LD_ADDR_EXP 172
67281: PUSH
67282: EMPTY
67283: ST_TO_ADDR
67284: END
// every 10 do var i ;
67285: GO 67287
67287: DISABLE
67288: LD_INT 0
67290: PPUSH
// begin enable ;
67291: ENABLE
// if not hInvincible then
67292: LD_EXP 172
67296: NOT
67297: IFFALSE 67301
// exit ;
67299: GO 67345
// for i in hInvincible do
67301: LD_ADDR_VAR 0 1
67305: PUSH
67306: LD_EXP 172
67310: PUSH
67311: FOR_IN
67312: IFFALSE 67343
// if GetLives ( i ) < 1000 then
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 256
67323: PUSH
67324: LD_INT 1000
67326: LESS
67327: IFFALSE 67341
// SetLives ( i , 1000 ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: LD_INT 1000
67336: PPUSH
67337: CALL_OW 234
67341: GO 67311
67343: POP
67344: POP
// end ;
67345: PPOPN 1
67347: END
// export function hHackInvincible ; var i ; begin
67348: LD_INT 0
67350: PPUSH
67351: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67352: LD_ADDR_VAR 0 2
67356: PUSH
67357: LD_INT 2
67359: PUSH
67360: LD_INT 21
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 21
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: PPUSH
67385: CALL_OW 69
67389: PUSH
67390: FOR_IN
67391: IFFALSE 67452
// if IsSelected ( i ) then
67393: LD_VAR 0 2
67397: PPUSH
67398: CALL_OW 306
67402: IFFALSE 67450
// begin if i in hInvincible then
67404: LD_VAR 0 2
67408: PUSH
67409: LD_EXP 172
67413: IN
67414: IFFALSE 67434
// hInvincible := hInvincible diff i else
67416: LD_ADDR_EXP 172
67420: PUSH
67421: LD_EXP 172
67425: PUSH
67426: LD_VAR 0 2
67430: DIFF
67431: ST_TO_ADDR
67432: GO 67450
// hInvincible := hInvincible union i ;
67434: LD_ADDR_EXP 172
67438: PUSH
67439: LD_EXP 172
67443: PUSH
67444: LD_VAR 0 2
67448: UNION
67449: ST_TO_ADDR
// end ;
67450: GO 67390
67452: POP
67453: POP
// end ;
67454: LD_VAR 0 1
67458: RET
// export function hHackInvisible ; var i , j ; begin
67459: LD_INT 0
67461: PPUSH
67462: PPUSH
67463: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67464: LD_ADDR_VAR 0 2
67468: PUSH
67469: LD_INT 21
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 69
67483: PUSH
67484: FOR_IN
67485: IFFALSE 67509
// if IsSelected ( i ) then
67487: LD_VAR 0 2
67491: PPUSH
67492: CALL_OW 306
67496: IFFALSE 67507
// ComForceInvisible ( i ) ;
67498: LD_VAR 0 2
67502: PPUSH
67503: CALL_OW 496
67507: GO 67484
67509: POP
67510: POP
// end ;
67511: LD_VAR 0 1
67515: RET
// export function hHackChangeYourSide ; begin
67516: LD_INT 0
67518: PPUSH
// if your_side = 8 then
67519: LD_OWVAR 2
67523: PUSH
67524: LD_INT 8
67526: EQUAL
67527: IFFALSE 67539
// your_side := 0 else
67529: LD_ADDR_OWVAR 2
67533: PUSH
67534: LD_INT 0
67536: ST_TO_ADDR
67537: GO 67553
// your_side := your_side + 1 ;
67539: LD_ADDR_OWVAR 2
67543: PUSH
67544: LD_OWVAR 2
67548: PUSH
67549: LD_INT 1
67551: PLUS
67552: ST_TO_ADDR
// end ;
67553: LD_VAR 0 1
67557: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67558: LD_INT 0
67560: PPUSH
67561: PPUSH
67562: PPUSH
// for i in all_units do
67563: LD_ADDR_VAR 0 2
67567: PUSH
67568: LD_OWVAR 3
67572: PUSH
67573: FOR_IN
67574: IFFALSE 67652
// if IsSelected ( i ) then
67576: LD_VAR 0 2
67580: PPUSH
67581: CALL_OW 306
67585: IFFALSE 67650
// begin j := GetSide ( i ) ;
67587: LD_ADDR_VAR 0 3
67591: PUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: CALL_OW 255
67601: ST_TO_ADDR
// if j = 8 then
67602: LD_VAR 0 3
67606: PUSH
67607: LD_INT 8
67609: EQUAL
67610: IFFALSE 67622
// j := 0 else
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_INT 0
67619: ST_TO_ADDR
67620: GO 67636
// j := j + 1 ;
67622: LD_ADDR_VAR 0 3
67626: PUSH
67627: LD_VAR 0 3
67631: PUSH
67632: LD_INT 1
67634: PLUS
67635: ST_TO_ADDR
// SetSide ( i , j ) ;
67636: LD_VAR 0 2
67640: PPUSH
67641: LD_VAR 0 3
67645: PPUSH
67646: CALL_OW 235
// end ;
67650: GO 67573
67652: POP
67653: POP
// end ;
67654: LD_VAR 0 1
67658: RET
// export function hHackFog ; begin
67659: LD_INT 0
67661: PPUSH
// FogOff ( true ) ;
67662: LD_INT 1
67664: PPUSH
67665: CALL_OW 344
// end ;
67669: LD_VAR 0 1
67673: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67674: LD_INT 0
67676: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67677: LD_VAR 0 1
67681: PPUSH
67682: LD_VAR 0 2
67686: PPUSH
67687: LD_VAR 0 3
67691: PPUSH
67692: LD_INT 1
67694: PPUSH
67695: LD_INT 1
67697: PPUSH
67698: CALL_OW 483
// CenterOnXY ( x , y ) ;
67702: LD_VAR 0 2
67706: PPUSH
67707: LD_VAR 0 3
67711: PPUSH
67712: CALL_OW 84
// end ; end_of_file
67716: LD_VAR 0 4
67720: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
67721: LD_INT 0
67723: PPUSH
67724: PPUSH
67725: PPUSH
67726: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
67727: LD_VAR 0 1
67731: PPUSH
67732: CALL_OW 264
67736: PUSH
67737: LD_EXP 99
67741: EQUAL
67742: IFFALSE 67814
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67744: LD_INT 68
67746: PPUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: CALL_OW 255
67756: PPUSH
67757: CALL_OW 321
67761: PUSH
67762: LD_INT 2
67764: EQUAL
67765: IFFALSE 67777
// eff := 70 else
67767: LD_ADDR_VAR 0 4
67771: PUSH
67772: LD_INT 70
67774: ST_TO_ADDR
67775: GO 67785
// eff := 30 ;
67777: LD_ADDR_VAR 0 4
67781: PUSH
67782: LD_INT 30
67784: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67785: LD_VAR 0 1
67789: PPUSH
67790: CALL_OW 250
67794: PPUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: CALL_OW 251
67804: PPUSH
67805: LD_VAR 0 4
67809: PPUSH
67810: CALL_OW 495
// end ; end ;
67814: LD_VAR 0 2
67818: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67819: LD_INT 0
67821: PPUSH
// end ;
67822: LD_VAR 0 4
67826: RET
// export function SOS_Command ( cmd ) ; begin
67827: LD_INT 0
67829: PPUSH
// end ;
67830: LD_VAR 0 2
67834: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67835: LD_INT 0
67837: PPUSH
// end ;
67838: LD_VAR 0 6
67842: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67843: LD_INT 0
67845: PPUSH
67846: PPUSH
// if not vehicle or not factory then
67847: LD_VAR 0 1
67851: NOT
67852: PUSH
67853: LD_VAR 0 2
67857: NOT
67858: OR
67859: IFFALSE 67863
// exit ;
67861: GO 68094
// if factoryWaypoints >= factory then
67863: LD_EXP 173
67867: PUSH
67868: LD_VAR 0 2
67872: GREATEREQUAL
67873: IFFALSE 68094
// if factoryWaypoints [ factory ] then
67875: LD_EXP 173
67879: PUSH
67880: LD_VAR 0 2
67884: ARRAY
67885: IFFALSE 68094
// begin if GetControl ( vehicle ) = control_manual then
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 263
67896: PUSH
67897: LD_INT 1
67899: EQUAL
67900: IFFALSE 67981
// begin driver := IsDrivenBy ( vehicle ) ;
67902: LD_ADDR_VAR 0 4
67906: PUSH
67907: LD_VAR 0 1
67911: PPUSH
67912: CALL_OW 311
67916: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67917: LD_VAR 0 4
67921: PPUSH
67922: LD_EXP 173
67926: PUSH
67927: LD_VAR 0 2
67931: ARRAY
67932: PUSH
67933: LD_INT 3
67935: ARRAY
67936: PPUSH
67937: LD_EXP 173
67941: PUSH
67942: LD_VAR 0 2
67946: ARRAY
67947: PUSH
67948: LD_INT 4
67950: ARRAY
67951: PPUSH
67952: CALL_OW 171
// AddComExitVehicle ( driver ) ;
67956: LD_VAR 0 4
67960: PPUSH
67961: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67965: LD_VAR 0 4
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: CALL_OW 180
// end else
67979: GO 68094
// if GetControl ( vehicle ) = control_remote then
67981: LD_VAR 0 1
67985: PPUSH
67986: CALL_OW 263
67990: PUSH
67991: LD_INT 2
67993: EQUAL
67994: IFFALSE 68055
// begin wait ( 0 0$2 ) ;
67996: LD_INT 70
67998: PPUSH
67999: CALL_OW 67
// if Connect ( vehicle ) then
68003: LD_VAR 0 1
68007: PPUSH
68008: CALL 20784 0 1
68012: IFFALSE 68053
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68014: LD_VAR 0 1
68018: PPUSH
68019: LD_EXP 173
68023: PUSH
68024: LD_VAR 0 2
68028: ARRAY
68029: PUSH
68030: LD_INT 3
68032: ARRAY
68033: PPUSH
68034: LD_EXP 173
68038: PUSH
68039: LD_VAR 0 2
68043: ARRAY
68044: PUSH
68045: LD_INT 4
68047: ARRAY
68048: PPUSH
68049: CALL_OW 171
// end else
68053: GO 68094
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68055: LD_VAR 0 1
68059: PPUSH
68060: LD_EXP 173
68064: PUSH
68065: LD_VAR 0 2
68069: ARRAY
68070: PUSH
68071: LD_INT 3
68073: ARRAY
68074: PPUSH
68075: LD_EXP 173
68079: PUSH
68080: LD_VAR 0 2
68084: ARRAY
68085: PUSH
68086: LD_INT 4
68088: ARRAY
68089: PPUSH
68090: CALL_OW 171
// end ; end ;
68094: LD_VAR 0 3
68098: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68099: LD_INT 0
68101: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68102: LD_VAR 0 1
68106: PUSH
68107: LD_INT 250
68109: EQUAL
68110: PUSH
68111: LD_VAR 0 2
68115: PPUSH
68116: CALL_OW 264
68120: PUSH
68121: LD_EXP 102
68125: EQUAL
68126: AND
68127: IFFALSE 68148
// MinerPlaceMine ( unit , x , y ) ;
68129: LD_VAR 0 2
68133: PPUSH
68134: LD_VAR 0 4
68138: PPUSH
68139: LD_VAR 0 5
68143: PPUSH
68144: CALL 70876 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68148: LD_VAR 0 1
68152: PUSH
68153: LD_INT 251
68155: EQUAL
68156: PUSH
68157: LD_VAR 0 2
68161: PPUSH
68162: CALL_OW 264
68166: PUSH
68167: LD_EXP 102
68171: EQUAL
68172: AND
68173: IFFALSE 68194
// MinerDetonateMine ( unit , x , y ) ;
68175: LD_VAR 0 2
68179: PPUSH
68180: LD_VAR 0 4
68184: PPUSH
68185: LD_VAR 0 5
68189: PPUSH
68190: CALL 71153 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68194: LD_VAR 0 1
68198: PUSH
68199: LD_INT 252
68201: EQUAL
68202: PUSH
68203: LD_VAR 0 2
68207: PPUSH
68208: CALL_OW 264
68212: PUSH
68213: LD_EXP 102
68217: EQUAL
68218: AND
68219: IFFALSE 68240
// MinerCreateMinefield ( unit , x , y ) ;
68221: LD_VAR 0 2
68225: PPUSH
68226: LD_VAR 0 4
68230: PPUSH
68231: LD_VAR 0 5
68235: PPUSH
68236: CALL 71570 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68240: LD_VAR 0 1
68244: PUSH
68245: LD_INT 253
68247: EQUAL
68248: PUSH
68249: LD_VAR 0 2
68253: PPUSH
68254: CALL_OW 257
68258: PUSH
68259: LD_INT 5
68261: EQUAL
68262: AND
68263: IFFALSE 68284
// ComBinocular ( unit , x , y ) ;
68265: LD_VAR 0 2
68269: PPUSH
68270: LD_VAR 0 4
68274: PPUSH
68275: LD_VAR 0 5
68279: PPUSH
68280: CALL 71941 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68284: LD_VAR 0 1
68288: PUSH
68289: LD_INT 254
68291: EQUAL
68292: PUSH
68293: LD_VAR 0 2
68297: PPUSH
68298: CALL_OW 264
68302: PUSH
68303: LD_EXP 97
68307: EQUAL
68308: AND
68309: PUSH
68310: LD_VAR 0 3
68314: PPUSH
68315: CALL_OW 263
68319: PUSH
68320: LD_INT 3
68322: EQUAL
68323: AND
68324: IFFALSE 68340
// HackDestroyVehicle ( unit , selectedUnit ) ;
68326: LD_VAR 0 2
68330: PPUSH
68331: LD_VAR 0 3
68335: PPUSH
68336: CALL 70236 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68340: LD_VAR 0 1
68344: PUSH
68345: LD_INT 255
68347: EQUAL
68348: PUSH
68349: LD_VAR 0 2
68353: PPUSH
68354: CALL_OW 264
68358: PUSH
68359: LD_INT 14
68361: PUSH
68362: LD_INT 53
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: IN
68369: AND
68370: PUSH
68371: LD_VAR 0 4
68375: PPUSH
68376: LD_VAR 0 5
68380: PPUSH
68381: CALL_OW 488
68385: AND
68386: IFFALSE 68410
// CutTreeXYR ( unit , x , y , 12 ) ;
68388: LD_VAR 0 2
68392: PPUSH
68393: LD_VAR 0 4
68397: PPUSH
68398: LD_VAR 0 5
68402: PPUSH
68403: LD_INT 12
68405: PPUSH
68406: CALL 68802 0 4
// if cmd = 256 then
68410: LD_VAR 0 1
68414: PUSH
68415: LD_INT 256
68417: EQUAL
68418: IFFALSE 68439
// SetFactoryWaypoint ( unit , x , y ) ;
68420: LD_VAR 0 2
68424: PPUSH
68425: LD_VAR 0 4
68429: PPUSH
68430: LD_VAR 0 5
68434: PPUSH
68435: CALL 68444 0 3
// end ;
68439: LD_VAR 0 6
68443: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68448: LD_VAR 0 1
68452: NOT
68453: PUSH
68454: LD_VAR 0 2
68458: PPUSH
68459: LD_VAR 0 3
68463: PPUSH
68464: CALL_OW 488
68468: NOT
68469: OR
68470: PUSH
68471: LD_VAR 0 1
68475: PPUSH
68476: CALL_OW 266
68480: PUSH
68481: LD_INT 3
68483: NONEQUAL
68484: PUSH
68485: LD_VAR 0 1
68489: PPUSH
68490: CALL_OW 247
68494: PUSH
68495: LD_INT 1
68497: EQUAL
68498: NOT
68499: AND
68500: OR
68501: IFFALSE 68505
// exit ;
68503: GO 68654
// if GetType ( factory ) = unit_human then
68505: LD_VAR 0 1
68509: PPUSH
68510: CALL_OW 247
68514: PUSH
68515: LD_INT 1
68517: EQUAL
68518: IFFALSE 68535
// factory := IsInUnit ( factory ) ;
68520: LD_ADDR_VAR 0 1
68524: PUSH
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 310
68534: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68535: LD_VAR 0 1
68539: PPUSH
68540: CALL_OW 266
68544: PUSH
68545: LD_INT 3
68547: NONEQUAL
68548: IFFALSE 68552
// exit ;
68550: GO 68654
// if HexInfo ( x , y ) = factory then
68552: LD_VAR 0 2
68556: PPUSH
68557: LD_VAR 0 3
68561: PPUSH
68562: CALL_OW 428
68566: PUSH
68567: LD_VAR 0 1
68571: EQUAL
68572: IFFALSE 68599
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68574: LD_ADDR_EXP 173
68578: PUSH
68579: LD_EXP 173
68583: PPUSH
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_INT 0
68591: PPUSH
68592: CALL_OW 1
68596: ST_TO_ADDR
68597: GO 68650
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68599: LD_ADDR_EXP 173
68603: PUSH
68604: LD_EXP 173
68608: PPUSH
68609: LD_VAR 0 1
68613: PPUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: CALL_OW 255
68623: PUSH
68624: LD_VAR 0 1
68628: PUSH
68629: LD_VAR 0 2
68633: PUSH
68634: LD_VAR 0 3
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: PPUSH
68645: CALL_OW 1
68649: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68650: CALL 68659 0 0
// end ;
68654: LD_VAR 0 4
68658: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
68659: LD_INT 0
68661: PPUSH
68662: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68663: LD_STRING resetFactoryWaypoint();
68665: PPUSH
68666: CALL_OW 559
// if factoryWaypoints then
68670: LD_EXP 173
68674: IFFALSE 68797
// begin for i := 1 to factoryWaypoints do
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: DOUBLE
68682: LD_INT 1
68684: DEC
68685: ST_TO_ADDR
68686: LD_EXP 173
68690: PUSH
68691: FOR_TO
68692: IFFALSE 68795
// if factoryWaypoints [ i ] then
68694: LD_EXP 173
68698: PUSH
68699: LD_VAR 0 2
68703: ARRAY
68704: IFFALSE 68793
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
68706: LD_STRING setFactoryWaypointXY(
68708: PUSH
68709: LD_EXP 173
68713: PUSH
68714: LD_VAR 0 2
68718: ARRAY
68719: PUSH
68720: LD_INT 1
68722: ARRAY
68723: STR
68724: PUSH
68725: LD_STRING ,
68727: STR
68728: PUSH
68729: LD_EXP 173
68733: PUSH
68734: LD_VAR 0 2
68738: ARRAY
68739: PUSH
68740: LD_INT 2
68742: ARRAY
68743: STR
68744: PUSH
68745: LD_STRING ,
68747: STR
68748: PUSH
68749: LD_EXP 173
68753: PUSH
68754: LD_VAR 0 2
68758: ARRAY
68759: PUSH
68760: LD_INT 3
68762: ARRAY
68763: STR
68764: PUSH
68765: LD_STRING ,
68767: STR
68768: PUSH
68769: LD_EXP 173
68773: PUSH
68774: LD_VAR 0 2
68778: ARRAY
68779: PUSH
68780: LD_INT 4
68782: ARRAY
68783: STR
68784: PUSH
68785: LD_STRING )
68787: STR
68788: PPUSH
68789: CALL_OW 559
68793: GO 68691
68795: POP
68796: POP
// end ; end ;
68797: LD_VAR 0 1
68801: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68802: LD_INT 0
68804: PPUSH
68805: PPUSH
68806: PPUSH
68807: PPUSH
68808: PPUSH
68809: PPUSH
68810: PPUSH
68811: PPUSH
68812: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
68813: LD_VAR 0 1
68817: NOT
68818: PUSH
68819: LD_VAR 0 2
68823: PPUSH
68824: LD_VAR 0 3
68828: PPUSH
68829: CALL_OW 488
68833: NOT
68834: OR
68835: PUSH
68836: LD_VAR 0 4
68840: NOT
68841: OR
68842: IFFALSE 68846
// exit ;
68844: GO 69186
// list := [ ] ;
68846: LD_ADDR_VAR 0 13
68850: PUSH
68851: EMPTY
68852: ST_TO_ADDR
// if x - r < 0 then
68853: LD_VAR 0 2
68857: PUSH
68858: LD_VAR 0 4
68862: MINUS
68863: PUSH
68864: LD_INT 0
68866: LESS
68867: IFFALSE 68879
// min_x := 0 else
68869: LD_ADDR_VAR 0 7
68873: PUSH
68874: LD_INT 0
68876: ST_TO_ADDR
68877: GO 68895
// min_x := x - r ;
68879: LD_ADDR_VAR 0 7
68883: PUSH
68884: LD_VAR 0 2
68888: PUSH
68889: LD_VAR 0 4
68893: MINUS
68894: ST_TO_ADDR
// if y - r < 0 then
68895: LD_VAR 0 3
68899: PUSH
68900: LD_VAR 0 4
68904: MINUS
68905: PUSH
68906: LD_INT 0
68908: LESS
68909: IFFALSE 68921
// min_y := 0 else
68911: LD_ADDR_VAR 0 8
68915: PUSH
68916: LD_INT 0
68918: ST_TO_ADDR
68919: GO 68937
// min_y := y - r ;
68921: LD_ADDR_VAR 0 8
68925: PUSH
68926: LD_VAR 0 3
68930: PUSH
68931: LD_VAR 0 4
68935: MINUS
68936: ST_TO_ADDR
// max_x := x + r ;
68937: LD_ADDR_VAR 0 9
68941: PUSH
68942: LD_VAR 0 2
68946: PUSH
68947: LD_VAR 0 4
68951: PLUS
68952: ST_TO_ADDR
// max_y := y + r ;
68953: LD_ADDR_VAR 0 10
68957: PUSH
68958: LD_VAR 0 3
68962: PUSH
68963: LD_VAR 0 4
68967: PLUS
68968: ST_TO_ADDR
// for _x = min_x to max_x do
68969: LD_ADDR_VAR 0 11
68973: PUSH
68974: DOUBLE
68975: LD_VAR 0 7
68979: DEC
68980: ST_TO_ADDR
68981: LD_VAR 0 9
68985: PUSH
68986: FOR_TO
68987: IFFALSE 69104
// for _y = min_y to max_y do
68989: LD_ADDR_VAR 0 12
68993: PUSH
68994: DOUBLE
68995: LD_VAR 0 8
68999: DEC
69000: ST_TO_ADDR
69001: LD_VAR 0 10
69005: PUSH
69006: FOR_TO
69007: IFFALSE 69100
// begin if not ValidHex ( _x , _y ) then
69009: LD_VAR 0 11
69013: PPUSH
69014: LD_VAR 0 12
69018: PPUSH
69019: CALL_OW 488
69023: NOT
69024: IFFALSE 69028
// continue ;
69026: GO 69006
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69028: LD_VAR 0 11
69032: PPUSH
69033: LD_VAR 0 12
69037: PPUSH
69038: CALL_OW 351
69042: PUSH
69043: LD_VAR 0 11
69047: PPUSH
69048: LD_VAR 0 12
69052: PPUSH
69053: CALL_OW 554
69057: AND
69058: IFFALSE 69098
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69060: LD_ADDR_VAR 0 13
69064: PUSH
69065: LD_VAR 0 13
69069: PPUSH
69070: LD_VAR 0 13
69074: PUSH
69075: LD_INT 1
69077: PLUS
69078: PPUSH
69079: LD_VAR 0 11
69083: PUSH
69084: LD_VAR 0 12
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PPUSH
69093: CALL_OW 2
69097: ST_TO_ADDR
// end ;
69098: GO 69006
69100: POP
69101: POP
69102: GO 68986
69104: POP
69105: POP
// if not list then
69106: LD_VAR 0 13
69110: NOT
69111: IFFALSE 69115
// exit ;
69113: GO 69186
// for i in list do
69115: LD_ADDR_VAR 0 6
69119: PUSH
69120: LD_VAR 0 13
69124: PUSH
69125: FOR_IN
69126: IFFALSE 69184
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69128: LD_VAR 0 1
69132: PPUSH
69133: LD_STRING M
69135: PUSH
69136: LD_VAR 0 6
69140: PUSH
69141: LD_INT 1
69143: ARRAY
69144: PUSH
69145: LD_VAR 0 6
69149: PUSH
69150: LD_INT 2
69152: ARRAY
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: PPUSH
69178: CALL_OW 447
69182: GO 69125
69184: POP
69185: POP
// end ;
69186: LD_VAR 0 5
69190: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69191: LD_EXP 174
69195: NOT
69196: IFFALSE 69246
69198: GO 69200
69200: DISABLE
// begin initHack := true ;
69201: LD_ADDR_EXP 174
69205: PUSH
69206: LD_INT 1
69208: ST_TO_ADDR
// hackTanks := [ ] ;
69209: LD_ADDR_EXP 175
69213: PUSH
69214: EMPTY
69215: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69216: LD_ADDR_EXP 176
69220: PUSH
69221: EMPTY
69222: ST_TO_ADDR
// hackLimit := 3 ;
69223: LD_ADDR_EXP 177
69227: PUSH
69228: LD_INT 3
69230: ST_TO_ADDR
// hackDist := 12 ;
69231: LD_ADDR_EXP 178
69235: PUSH
69236: LD_INT 12
69238: ST_TO_ADDR
// hackCounter := [ ] ;
69239: LD_ADDR_EXP 179
69243: PUSH
69244: EMPTY
69245: ST_TO_ADDR
// end ;
69246: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69247: LD_EXP 174
69251: PUSH
69252: LD_INT 34
69254: PUSH
69255: LD_EXP 97
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PPUSH
69264: CALL_OW 69
69268: AND
69269: IFFALSE 69524
69271: GO 69273
69273: DISABLE
69274: LD_INT 0
69276: PPUSH
69277: PPUSH
// begin enable ;
69278: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69279: LD_ADDR_VAR 0 1
69283: PUSH
69284: LD_INT 34
69286: PUSH
69287: LD_EXP 97
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PPUSH
69296: CALL_OW 69
69300: PUSH
69301: FOR_IN
69302: IFFALSE 69522
// begin if not i in hackTanks then
69304: LD_VAR 0 1
69308: PUSH
69309: LD_EXP 175
69313: IN
69314: NOT
69315: IFFALSE 69398
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69317: LD_ADDR_EXP 175
69321: PUSH
69322: LD_EXP 175
69326: PPUSH
69327: LD_EXP 175
69331: PUSH
69332: LD_INT 1
69334: PLUS
69335: PPUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: CALL_OW 1
69345: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69346: LD_ADDR_EXP 176
69350: PUSH
69351: LD_EXP 176
69355: PPUSH
69356: LD_EXP 176
69360: PUSH
69361: LD_INT 1
69363: PLUS
69364: PPUSH
69365: EMPTY
69366: PPUSH
69367: CALL_OW 1
69371: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69372: LD_ADDR_EXP 179
69376: PUSH
69377: LD_EXP 179
69381: PPUSH
69382: LD_EXP 179
69386: PUSH
69387: LD_INT 1
69389: PLUS
69390: PPUSH
69391: EMPTY
69392: PPUSH
69393: CALL_OW 1
69397: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69398: LD_VAR 0 1
69402: PPUSH
69403: CALL_OW 302
69407: NOT
69408: IFFALSE 69421
// begin HackUnlinkAll ( i ) ;
69410: LD_VAR 0 1
69414: PPUSH
69415: CALL 69527 0 1
// continue ;
69419: GO 69301
// end ; HackCheckCapturedStatus ( i ) ;
69421: LD_VAR 0 1
69425: PPUSH
69426: CALL 69970 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69430: LD_ADDR_VAR 0 2
69434: PUSH
69435: LD_INT 81
69437: PUSH
69438: LD_VAR 0 1
69442: PPUSH
69443: CALL_OW 255
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 33
69454: PUSH
69455: LD_INT 3
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 91
69464: PUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_EXP 178
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 50
69482: PUSH
69483: EMPTY
69484: LIST
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: PPUSH
69492: CALL_OW 69
69496: ST_TO_ADDR
// if not tmp then
69497: LD_VAR 0 2
69501: NOT
69502: IFFALSE 69506
// continue ;
69504: GO 69301
// HackLink ( i , tmp ) ;
69506: LD_VAR 0 1
69510: PPUSH
69511: LD_VAR 0 2
69515: PPUSH
69516: CALL 69663 0 2
// end ;
69520: GO 69301
69522: POP
69523: POP
// end ;
69524: PPOPN 2
69526: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69527: LD_INT 0
69529: PPUSH
69530: PPUSH
69531: PPUSH
// if not hack in hackTanks then
69532: LD_VAR 0 1
69536: PUSH
69537: LD_EXP 175
69541: IN
69542: NOT
69543: IFFALSE 69547
// exit ;
69545: GO 69658
// index := GetElementIndex ( hackTanks , hack ) ;
69547: LD_ADDR_VAR 0 4
69551: PUSH
69552: LD_EXP 175
69556: PPUSH
69557: LD_VAR 0 1
69561: PPUSH
69562: CALL 17490 0 2
69566: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69567: LD_EXP 176
69571: PUSH
69572: LD_VAR 0 4
69576: ARRAY
69577: IFFALSE 69658
// begin for i in hackTanksCaptured [ index ] do
69579: LD_ADDR_VAR 0 3
69583: PUSH
69584: LD_EXP 176
69588: PUSH
69589: LD_VAR 0 4
69593: ARRAY
69594: PUSH
69595: FOR_IN
69596: IFFALSE 69622
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69598: LD_VAR 0 3
69602: PUSH
69603: LD_INT 1
69605: ARRAY
69606: PPUSH
69607: LD_VAR 0 3
69611: PUSH
69612: LD_INT 2
69614: ARRAY
69615: PPUSH
69616: CALL_OW 235
69620: GO 69595
69622: POP
69623: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69624: LD_ADDR_EXP 176
69628: PUSH
69629: LD_EXP 176
69633: PPUSH
69634: LD_VAR 0 4
69638: PPUSH
69639: EMPTY
69640: PPUSH
69641: CALL_OW 1
69645: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69646: LD_VAR 0 1
69650: PPUSH
69651: LD_INT 0
69653: PPUSH
69654: CALL_OW 505
// end ; end ;
69658: LD_VAR 0 2
69662: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69663: LD_INT 0
69665: PPUSH
69666: PPUSH
69667: PPUSH
// if not hack in hackTanks or not vehicles then
69668: LD_VAR 0 1
69672: PUSH
69673: LD_EXP 175
69677: IN
69678: NOT
69679: PUSH
69680: LD_VAR 0 2
69684: NOT
69685: OR
69686: IFFALSE 69690
// exit ;
69688: GO 69965
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69690: LD_ADDR_VAR 0 2
69694: PUSH
69695: LD_VAR 0 1
69699: PPUSH
69700: LD_VAR 0 2
69704: PPUSH
69705: LD_INT 1
69707: PPUSH
69708: LD_INT 1
69710: PPUSH
69711: CALL 18140 0 4
69715: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69716: LD_ADDR_VAR 0 5
69720: PUSH
69721: LD_EXP 175
69725: PPUSH
69726: LD_VAR 0 1
69730: PPUSH
69731: CALL 17490 0 2
69735: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69736: LD_EXP 176
69740: PUSH
69741: LD_VAR 0 5
69745: ARRAY
69746: PUSH
69747: LD_EXP 177
69751: LESS
69752: IFFALSE 69941
// begin for i := 1 to vehicles do
69754: LD_ADDR_VAR 0 4
69758: PUSH
69759: DOUBLE
69760: LD_INT 1
69762: DEC
69763: ST_TO_ADDR
69764: LD_VAR 0 2
69768: PUSH
69769: FOR_TO
69770: IFFALSE 69939
// begin if hackTanksCaptured [ index ] = hackLimit then
69772: LD_EXP 176
69776: PUSH
69777: LD_VAR 0 5
69781: ARRAY
69782: PUSH
69783: LD_EXP 177
69787: EQUAL
69788: IFFALSE 69792
// break ;
69790: GO 69939
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69792: LD_ADDR_EXP 179
69796: PUSH
69797: LD_EXP 179
69801: PPUSH
69802: LD_VAR 0 5
69806: PPUSH
69807: LD_EXP 179
69811: PUSH
69812: LD_VAR 0 5
69816: ARRAY
69817: PUSH
69818: LD_INT 1
69820: PLUS
69821: PPUSH
69822: CALL_OW 1
69826: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69827: LD_ADDR_EXP 176
69831: PUSH
69832: LD_EXP 176
69836: PPUSH
69837: LD_VAR 0 5
69841: PUSH
69842: LD_EXP 176
69846: PUSH
69847: LD_VAR 0 5
69851: ARRAY
69852: PUSH
69853: LD_INT 1
69855: PLUS
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PPUSH
69861: LD_VAR 0 2
69865: PUSH
69866: LD_VAR 0 4
69870: ARRAY
69871: PUSH
69872: LD_VAR 0 2
69876: PUSH
69877: LD_VAR 0 4
69881: ARRAY
69882: PPUSH
69883: CALL_OW 255
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PPUSH
69892: CALL 17705 0 3
69896: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69897: LD_VAR 0 2
69901: PUSH
69902: LD_VAR 0 4
69906: ARRAY
69907: PPUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: CALL_OW 255
69917: PPUSH
69918: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69922: LD_VAR 0 2
69926: PUSH
69927: LD_VAR 0 4
69931: ARRAY
69932: PPUSH
69933: CALL_OW 141
// end ;
69937: GO 69769
69939: POP
69940: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69941: LD_VAR 0 1
69945: PPUSH
69946: LD_EXP 176
69950: PUSH
69951: LD_VAR 0 5
69955: ARRAY
69956: PUSH
69957: LD_INT 0
69959: PLUS
69960: PPUSH
69961: CALL_OW 505
// end ;
69965: LD_VAR 0 3
69969: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69970: LD_INT 0
69972: PPUSH
69973: PPUSH
69974: PPUSH
69975: PPUSH
// if not hack in hackTanks then
69976: LD_VAR 0 1
69980: PUSH
69981: LD_EXP 175
69985: IN
69986: NOT
69987: IFFALSE 69991
// exit ;
69989: GO 70231
// index := GetElementIndex ( hackTanks , hack ) ;
69991: LD_ADDR_VAR 0 4
69995: PUSH
69996: LD_EXP 175
70000: PPUSH
70001: LD_VAR 0 1
70005: PPUSH
70006: CALL 17490 0 2
70010: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70011: LD_ADDR_VAR 0 3
70015: PUSH
70016: DOUBLE
70017: LD_EXP 176
70021: PUSH
70022: LD_VAR 0 4
70026: ARRAY
70027: INC
70028: ST_TO_ADDR
70029: LD_INT 1
70031: PUSH
70032: FOR_DOWNTO
70033: IFFALSE 70205
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70035: LD_ADDR_VAR 0 5
70039: PUSH
70040: LD_EXP 176
70044: PUSH
70045: LD_VAR 0 4
70049: ARRAY
70050: PUSH
70051: LD_VAR 0 3
70055: ARRAY
70056: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70057: LD_VAR 0 5
70061: PUSH
70062: LD_INT 1
70064: ARRAY
70065: PPUSH
70066: CALL_OW 302
70070: NOT
70071: PUSH
70072: LD_VAR 0 5
70076: PUSH
70077: LD_INT 1
70079: ARRAY
70080: PPUSH
70081: CALL_OW 255
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: CALL_OW 255
70095: NONEQUAL
70096: OR
70097: IFFALSE 70203
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70099: LD_VAR 0 5
70103: PUSH
70104: LD_INT 1
70106: ARRAY
70107: PPUSH
70108: CALL_OW 305
70112: PUSH
70113: LD_VAR 0 5
70117: PUSH
70118: LD_INT 1
70120: ARRAY
70121: PPUSH
70122: CALL_OW 255
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: CALL_OW 255
70136: EQUAL
70137: AND
70138: IFFALSE 70162
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70140: LD_VAR 0 5
70144: PUSH
70145: LD_INT 1
70147: ARRAY
70148: PPUSH
70149: LD_VAR 0 5
70153: PUSH
70154: LD_INT 2
70156: ARRAY
70157: PPUSH
70158: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70162: LD_ADDR_EXP 176
70166: PUSH
70167: LD_EXP 176
70171: PPUSH
70172: LD_VAR 0 4
70176: PPUSH
70177: LD_EXP 176
70181: PUSH
70182: LD_VAR 0 4
70186: ARRAY
70187: PPUSH
70188: LD_VAR 0 3
70192: PPUSH
70193: CALL_OW 3
70197: PPUSH
70198: CALL_OW 1
70202: ST_TO_ADDR
// end ; end ;
70203: GO 70032
70205: POP
70206: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70207: LD_VAR 0 1
70211: PPUSH
70212: LD_EXP 176
70216: PUSH
70217: LD_VAR 0 4
70221: ARRAY
70222: PUSH
70223: LD_INT 0
70225: PLUS
70226: PPUSH
70227: CALL_OW 505
// end ;
70231: LD_VAR 0 2
70235: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70236: LD_INT 0
70238: PPUSH
70239: PPUSH
70240: PPUSH
70241: PPUSH
// if not hack in hackTanks then
70242: LD_VAR 0 1
70246: PUSH
70247: LD_EXP 175
70251: IN
70252: NOT
70253: IFFALSE 70257
// exit ;
70255: GO 70342
// index := GetElementIndex ( hackTanks , hack ) ;
70257: LD_ADDR_VAR 0 5
70261: PUSH
70262: LD_EXP 175
70266: PPUSH
70267: LD_VAR 0 1
70271: PPUSH
70272: CALL 17490 0 2
70276: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70277: LD_ADDR_VAR 0 4
70281: PUSH
70282: DOUBLE
70283: LD_INT 1
70285: DEC
70286: ST_TO_ADDR
70287: LD_EXP 176
70291: PUSH
70292: LD_VAR 0 5
70296: ARRAY
70297: PUSH
70298: FOR_TO
70299: IFFALSE 70340
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70301: LD_EXP 176
70305: PUSH
70306: LD_VAR 0 5
70310: ARRAY
70311: PUSH
70312: LD_VAR 0 4
70316: ARRAY
70317: PUSH
70318: LD_INT 1
70320: ARRAY
70321: PUSH
70322: LD_VAR 0 2
70326: EQUAL
70327: IFFALSE 70338
// KillUnit ( vehicle ) ;
70329: LD_VAR 0 2
70333: PPUSH
70334: CALL_OW 66
70338: GO 70298
70340: POP
70341: POP
// end ;
70342: LD_VAR 0 3
70346: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70347: LD_EXP 180
70351: NOT
70352: IFFALSE 70387
70354: GO 70356
70356: DISABLE
// begin initMiner := true ;
70357: LD_ADDR_EXP 180
70361: PUSH
70362: LD_INT 1
70364: ST_TO_ADDR
// minersList := [ ] ;
70365: LD_ADDR_EXP 181
70369: PUSH
70370: EMPTY
70371: ST_TO_ADDR
// minerMinesList := [ ] ;
70372: LD_ADDR_EXP 182
70376: PUSH
70377: EMPTY
70378: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70379: LD_ADDR_EXP 183
70383: PUSH
70384: LD_INT 5
70386: ST_TO_ADDR
// end ;
70387: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70388: LD_EXP 180
70392: PUSH
70393: LD_INT 34
70395: PUSH
70396: LD_EXP 102
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PPUSH
70405: CALL_OW 69
70409: AND
70410: IFFALSE 70873
70412: GO 70414
70414: DISABLE
70415: LD_INT 0
70417: PPUSH
70418: PPUSH
70419: PPUSH
70420: PPUSH
// begin enable ;
70421: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70422: LD_ADDR_VAR 0 1
70426: PUSH
70427: LD_INT 34
70429: PUSH
70430: LD_EXP 102
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PPUSH
70439: CALL_OW 69
70443: PUSH
70444: FOR_IN
70445: IFFALSE 70517
// begin if not i in minersList then
70447: LD_VAR 0 1
70451: PUSH
70452: LD_EXP 181
70456: IN
70457: NOT
70458: IFFALSE 70515
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70460: LD_ADDR_EXP 181
70464: PUSH
70465: LD_EXP 181
70469: PPUSH
70470: LD_EXP 181
70474: PUSH
70475: LD_INT 1
70477: PLUS
70478: PPUSH
70479: LD_VAR 0 1
70483: PPUSH
70484: CALL_OW 1
70488: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70489: LD_ADDR_EXP 182
70493: PUSH
70494: LD_EXP 182
70498: PPUSH
70499: LD_EXP 182
70503: PUSH
70504: LD_INT 1
70506: PLUS
70507: PPUSH
70508: EMPTY
70509: PPUSH
70510: CALL_OW 1
70514: ST_TO_ADDR
// end end ;
70515: GO 70444
70517: POP
70518: POP
// for i := minerMinesList downto 1 do
70519: LD_ADDR_VAR 0 1
70523: PUSH
70524: DOUBLE
70525: LD_EXP 182
70529: INC
70530: ST_TO_ADDR
70531: LD_INT 1
70533: PUSH
70534: FOR_DOWNTO
70535: IFFALSE 70871
// begin if IsLive ( minersList [ i ] ) then
70537: LD_EXP 181
70541: PUSH
70542: LD_VAR 0 1
70546: ARRAY
70547: PPUSH
70548: CALL_OW 300
70552: IFFALSE 70580
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70554: LD_EXP 181
70558: PUSH
70559: LD_VAR 0 1
70563: ARRAY
70564: PPUSH
70565: LD_EXP 182
70569: PUSH
70570: LD_VAR 0 1
70574: ARRAY
70575: PPUSH
70576: CALL_OW 505
// if not minerMinesList [ i ] then
70580: LD_EXP 182
70584: PUSH
70585: LD_VAR 0 1
70589: ARRAY
70590: NOT
70591: IFFALSE 70595
// continue ;
70593: GO 70534
// for j := minerMinesList [ i ] downto 1 do
70595: LD_ADDR_VAR 0 2
70599: PUSH
70600: DOUBLE
70601: LD_EXP 182
70605: PUSH
70606: LD_VAR 0 1
70610: ARRAY
70611: INC
70612: ST_TO_ADDR
70613: LD_INT 1
70615: PUSH
70616: FOR_DOWNTO
70617: IFFALSE 70867
// begin side := GetSide ( minersList [ i ] ) ;
70619: LD_ADDR_VAR 0 3
70623: PUSH
70624: LD_EXP 181
70628: PUSH
70629: LD_VAR 0 1
70633: ARRAY
70634: PPUSH
70635: CALL_OW 255
70639: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70640: LD_ADDR_VAR 0 4
70644: PUSH
70645: LD_EXP 182
70649: PUSH
70650: LD_VAR 0 1
70654: ARRAY
70655: PUSH
70656: LD_VAR 0 2
70660: ARRAY
70661: PUSH
70662: LD_INT 1
70664: ARRAY
70665: PPUSH
70666: LD_EXP 182
70670: PUSH
70671: LD_VAR 0 1
70675: ARRAY
70676: PUSH
70677: LD_VAR 0 2
70681: ARRAY
70682: PUSH
70683: LD_INT 2
70685: ARRAY
70686: PPUSH
70687: CALL_OW 428
70691: ST_TO_ADDR
// if not tmp then
70692: LD_VAR 0 4
70696: NOT
70697: IFFALSE 70701
// continue ;
70699: GO 70616
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70701: LD_VAR 0 4
70705: PUSH
70706: LD_INT 81
70708: PUSH
70709: LD_VAR 0 3
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PPUSH
70718: CALL_OW 69
70722: IN
70723: PUSH
70724: LD_EXP 182
70728: PUSH
70729: LD_VAR 0 1
70733: ARRAY
70734: PUSH
70735: LD_VAR 0 2
70739: ARRAY
70740: PUSH
70741: LD_INT 1
70743: ARRAY
70744: PPUSH
70745: LD_EXP 182
70749: PUSH
70750: LD_VAR 0 1
70754: ARRAY
70755: PUSH
70756: LD_VAR 0 2
70760: ARRAY
70761: PUSH
70762: LD_INT 2
70764: ARRAY
70765: PPUSH
70766: CALL_OW 458
70770: AND
70771: IFFALSE 70865
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70773: LD_EXP 182
70777: PUSH
70778: LD_VAR 0 1
70782: ARRAY
70783: PUSH
70784: LD_VAR 0 2
70788: ARRAY
70789: PUSH
70790: LD_INT 1
70792: ARRAY
70793: PPUSH
70794: LD_EXP 182
70798: PUSH
70799: LD_VAR 0 1
70803: ARRAY
70804: PUSH
70805: LD_VAR 0 2
70809: ARRAY
70810: PUSH
70811: LD_INT 2
70813: ARRAY
70814: PPUSH
70815: LD_VAR 0 3
70819: PPUSH
70820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70824: LD_ADDR_EXP 182
70828: PUSH
70829: LD_EXP 182
70833: PPUSH
70834: LD_VAR 0 1
70838: PPUSH
70839: LD_EXP 182
70843: PUSH
70844: LD_VAR 0 1
70848: ARRAY
70849: PPUSH
70850: LD_VAR 0 2
70854: PPUSH
70855: CALL_OW 3
70859: PPUSH
70860: CALL_OW 1
70864: ST_TO_ADDR
// end ; end ;
70865: GO 70616
70867: POP
70868: POP
// end ;
70869: GO 70534
70871: POP
70872: POP
// end ;
70873: PPOPN 4
70875: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70876: LD_INT 0
70878: PPUSH
70879: PPUSH
// result := false ;
70880: LD_ADDR_VAR 0 4
70884: PUSH
70885: LD_INT 0
70887: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70888: LD_VAR 0 1
70892: PPUSH
70893: CALL_OW 264
70897: PUSH
70898: LD_EXP 102
70902: EQUAL
70903: NOT
70904: IFFALSE 70908
// exit ;
70906: GO 71148
// index := GetElementIndex ( minersList , unit ) ;
70908: LD_ADDR_VAR 0 5
70912: PUSH
70913: LD_EXP 181
70917: PPUSH
70918: LD_VAR 0 1
70922: PPUSH
70923: CALL 17490 0 2
70927: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70928: LD_EXP 182
70932: PUSH
70933: LD_VAR 0 5
70937: ARRAY
70938: PUSH
70939: LD_EXP 183
70943: GREATEREQUAL
70944: IFFALSE 70948
// exit ;
70946: GO 71148
// ComMoveXY ( unit , x , y ) ;
70948: LD_VAR 0 1
70952: PPUSH
70953: LD_VAR 0 2
70957: PPUSH
70958: LD_VAR 0 3
70962: PPUSH
70963: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70967: LD_INT 35
70969: PPUSH
70970: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70974: LD_VAR 0 1
70978: PPUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: LD_VAR 0 3
70988: PPUSH
70989: CALL 48317 0 3
70993: NOT
70994: PUSH
70995: LD_VAR 0 1
70999: PPUSH
71000: CALL_OW 314
71004: AND
71005: IFFALSE 71009
// exit ;
71007: GO 71148
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71009: LD_VAR 0 2
71013: PPUSH
71014: LD_VAR 0 3
71018: PPUSH
71019: CALL_OW 428
71023: PUSH
71024: LD_VAR 0 1
71028: EQUAL
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: CALL_OW 314
71039: NOT
71040: AND
71041: IFFALSE 70967
// PlaySoundXY ( x , y , PlantMine ) ;
71043: LD_VAR 0 2
71047: PPUSH
71048: LD_VAR 0 3
71052: PPUSH
71053: LD_STRING PlantMine
71055: PPUSH
71056: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71060: LD_VAR 0 2
71064: PPUSH
71065: LD_VAR 0 3
71069: PPUSH
71070: LD_VAR 0 1
71074: PPUSH
71075: CALL_OW 255
71079: PPUSH
71080: LD_INT 0
71082: PPUSH
71083: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71087: LD_ADDR_EXP 182
71091: PUSH
71092: LD_EXP 182
71096: PPUSH
71097: LD_VAR 0 5
71101: PUSH
71102: LD_EXP 182
71106: PUSH
71107: LD_VAR 0 5
71111: ARRAY
71112: PUSH
71113: LD_INT 1
71115: PLUS
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PPUSH
71121: LD_VAR 0 2
71125: PUSH
71126: LD_VAR 0 3
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PPUSH
71135: CALL 17705 0 3
71139: ST_TO_ADDR
// result := true ;
71140: LD_ADDR_VAR 0 4
71144: PUSH
71145: LD_INT 1
71147: ST_TO_ADDR
// end ;
71148: LD_VAR 0 4
71152: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71153: LD_INT 0
71155: PPUSH
71156: PPUSH
71157: PPUSH
// if not unit in minersList then
71158: LD_VAR 0 1
71162: PUSH
71163: LD_EXP 181
71167: IN
71168: NOT
71169: IFFALSE 71173
// exit ;
71171: GO 71565
// index := GetElementIndex ( minersList , unit ) ;
71173: LD_ADDR_VAR 0 6
71177: PUSH
71178: LD_EXP 181
71182: PPUSH
71183: LD_VAR 0 1
71187: PPUSH
71188: CALL 17490 0 2
71192: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71193: LD_ADDR_VAR 0 5
71197: PUSH
71198: DOUBLE
71199: LD_EXP 182
71203: PUSH
71204: LD_VAR 0 6
71208: ARRAY
71209: INC
71210: ST_TO_ADDR
71211: LD_INT 1
71213: PUSH
71214: FOR_DOWNTO
71215: IFFALSE 71376
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71217: LD_EXP 182
71221: PUSH
71222: LD_VAR 0 6
71226: ARRAY
71227: PUSH
71228: LD_VAR 0 5
71232: ARRAY
71233: PUSH
71234: LD_INT 1
71236: ARRAY
71237: PUSH
71238: LD_VAR 0 2
71242: EQUAL
71243: PUSH
71244: LD_EXP 182
71248: PUSH
71249: LD_VAR 0 6
71253: ARRAY
71254: PUSH
71255: LD_VAR 0 5
71259: ARRAY
71260: PUSH
71261: LD_INT 2
71263: ARRAY
71264: PUSH
71265: LD_VAR 0 3
71269: EQUAL
71270: AND
71271: IFFALSE 71374
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71273: LD_EXP 182
71277: PUSH
71278: LD_VAR 0 6
71282: ARRAY
71283: PUSH
71284: LD_VAR 0 5
71288: ARRAY
71289: PUSH
71290: LD_INT 1
71292: ARRAY
71293: PPUSH
71294: LD_EXP 182
71298: PUSH
71299: LD_VAR 0 6
71303: ARRAY
71304: PUSH
71305: LD_VAR 0 5
71309: ARRAY
71310: PUSH
71311: LD_INT 2
71313: ARRAY
71314: PPUSH
71315: LD_VAR 0 1
71319: PPUSH
71320: CALL_OW 255
71324: PPUSH
71325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71329: LD_ADDR_EXP 182
71333: PUSH
71334: LD_EXP 182
71338: PPUSH
71339: LD_VAR 0 6
71343: PPUSH
71344: LD_EXP 182
71348: PUSH
71349: LD_VAR 0 6
71353: ARRAY
71354: PPUSH
71355: LD_VAR 0 5
71359: PPUSH
71360: CALL_OW 3
71364: PPUSH
71365: CALL_OW 1
71369: ST_TO_ADDR
// exit ;
71370: POP
71371: POP
71372: GO 71565
// end ; end ;
71374: GO 71214
71376: POP
71377: POP
// for i := minerMinesList [ index ] downto 1 do
71378: LD_ADDR_VAR 0 5
71382: PUSH
71383: DOUBLE
71384: LD_EXP 182
71388: PUSH
71389: LD_VAR 0 6
71393: ARRAY
71394: INC
71395: ST_TO_ADDR
71396: LD_INT 1
71398: PUSH
71399: FOR_DOWNTO
71400: IFFALSE 71563
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71402: LD_EXP 182
71406: PUSH
71407: LD_VAR 0 6
71411: ARRAY
71412: PUSH
71413: LD_VAR 0 5
71417: ARRAY
71418: PUSH
71419: LD_INT 1
71421: ARRAY
71422: PPUSH
71423: LD_EXP 182
71427: PUSH
71428: LD_VAR 0 6
71432: ARRAY
71433: PUSH
71434: LD_VAR 0 5
71438: ARRAY
71439: PUSH
71440: LD_INT 2
71442: ARRAY
71443: PPUSH
71444: LD_VAR 0 2
71448: PPUSH
71449: LD_VAR 0 3
71453: PPUSH
71454: CALL_OW 298
71458: PUSH
71459: LD_INT 6
71461: LESS
71462: IFFALSE 71561
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71464: LD_EXP 182
71468: PUSH
71469: LD_VAR 0 6
71473: ARRAY
71474: PUSH
71475: LD_VAR 0 5
71479: ARRAY
71480: PUSH
71481: LD_INT 1
71483: ARRAY
71484: PPUSH
71485: LD_EXP 182
71489: PUSH
71490: LD_VAR 0 6
71494: ARRAY
71495: PUSH
71496: LD_VAR 0 5
71500: ARRAY
71501: PUSH
71502: LD_INT 2
71504: ARRAY
71505: PPUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: CALL_OW 255
71515: PPUSH
71516: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71520: LD_ADDR_EXP 182
71524: PUSH
71525: LD_EXP 182
71529: PPUSH
71530: LD_VAR 0 6
71534: PPUSH
71535: LD_EXP 182
71539: PUSH
71540: LD_VAR 0 6
71544: ARRAY
71545: PPUSH
71546: LD_VAR 0 5
71550: PPUSH
71551: CALL_OW 3
71555: PPUSH
71556: CALL_OW 1
71560: ST_TO_ADDR
// end ; end ;
71561: GO 71399
71563: POP
71564: POP
// end ;
71565: LD_VAR 0 4
71569: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71570: LD_INT 0
71572: PPUSH
71573: PPUSH
71574: PPUSH
71575: PPUSH
71576: PPUSH
71577: PPUSH
71578: PPUSH
71579: PPUSH
71580: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71581: LD_VAR 0 1
71585: PPUSH
71586: CALL_OW 264
71590: PUSH
71591: LD_EXP 102
71595: EQUAL
71596: NOT
71597: PUSH
71598: LD_VAR 0 1
71602: PUSH
71603: LD_EXP 181
71607: IN
71608: NOT
71609: OR
71610: IFFALSE 71614
// exit ;
71612: GO 71936
// index := GetElementIndex ( minersList , unit ) ;
71614: LD_ADDR_VAR 0 6
71618: PUSH
71619: LD_EXP 181
71623: PPUSH
71624: LD_VAR 0 1
71628: PPUSH
71629: CALL 17490 0 2
71633: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71634: LD_ADDR_VAR 0 8
71638: PUSH
71639: LD_EXP 183
71643: PUSH
71644: LD_EXP 182
71648: PUSH
71649: LD_VAR 0 6
71653: ARRAY
71654: MINUS
71655: ST_TO_ADDR
// if not minesFreeAmount then
71656: LD_VAR 0 8
71660: NOT
71661: IFFALSE 71665
// exit ;
71663: GO 71936
// tmp := [ ] ;
71665: LD_ADDR_VAR 0 7
71669: PUSH
71670: EMPTY
71671: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71672: LD_ADDR_VAR 0 5
71676: PUSH
71677: DOUBLE
71678: LD_INT 1
71680: DEC
71681: ST_TO_ADDR
71682: LD_VAR 0 8
71686: PUSH
71687: FOR_TO
71688: IFFALSE 71883
// begin _d := rand ( 0 , 5 ) ;
71690: LD_ADDR_VAR 0 11
71694: PUSH
71695: LD_INT 0
71697: PPUSH
71698: LD_INT 5
71700: PPUSH
71701: CALL_OW 12
71705: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71706: LD_ADDR_VAR 0 12
71710: PUSH
71711: LD_INT 2
71713: PPUSH
71714: LD_INT 6
71716: PPUSH
71717: CALL_OW 12
71721: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71722: LD_ADDR_VAR 0 9
71726: PUSH
71727: LD_VAR 0 2
71731: PPUSH
71732: LD_VAR 0 11
71736: PPUSH
71737: LD_VAR 0 12
71741: PPUSH
71742: CALL_OW 272
71746: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71747: LD_ADDR_VAR 0 10
71751: PUSH
71752: LD_VAR 0 3
71756: PPUSH
71757: LD_VAR 0 11
71761: PPUSH
71762: LD_VAR 0 12
71766: PPUSH
71767: CALL_OW 273
71771: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71772: LD_VAR 0 9
71776: PPUSH
71777: LD_VAR 0 10
71781: PPUSH
71782: CALL_OW 488
71786: PUSH
71787: LD_VAR 0 9
71791: PUSH
71792: LD_VAR 0 10
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_VAR 0 7
71805: IN
71806: NOT
71807: AND
71808: PUSH
71809: LD_VAR 0 9
71813: PPUSH
71814: LD_VAR 0 10
71818: PPUSH
71819: CALL_OW 458
71823: NOT
71824: AND
71825: IFFALSE 71867
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71827: LD_ADDR_VAR 0 7
71831: PUSH
71832: LD_VAR 0 7
71836: PPUSH
71837: LD_VAR 0 7
71841: PUSH
71842: LD_INT 1
71844: PLUS
71845: PPUSH
71846: LD_VAR 0 9
71850: PUSH
71851: LD_VAR 0 10
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PPUSH
71860: CALL_OW 1
71864: ST_TO_ADDR
71865: GO 71881
// i := i - 1 ;
71867: LD_ADDR_VAR 0 5
71871: PUSH
71872: LD_VAR 0 5
71876: PUSH
71877: LD_INT 1
71879: MINUS
71880: ST_TO_ADDR
// end ;
71881: GO 71687
71883: POP
71884: POP
// for i in tmp do
71885: LD_ADDR_VAR 0 5
71889: PUSH
71890: LD_VAR 0 7
71894: PUSH
71895: FOR_IN
71896: IFFALSE 71934
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 5
71907: PUSH
71908: LD_INT 1
71910: ARRAY
71911: PPUSH
71912: LD_VAR 0 5
71916: PUSH
71917: LD_INT 2
71919: ARRAY
71920: PPUSH
71921: CALL 70876 0 3
71925: NOT
71926: IFFALSE 71932
// exit ;
71928: POP
71929: POP
71930: GO 71936
71932: GO 71895
71934: POP
71935: POP
// end ;
71936: LD_VAR 0 4
71940: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71941: LD_INT 0
71943: PPUSH
71944: PPUSH
71945: PPUSH
71946: PPUSH
71947: PPUSH
71948: PPUSH
71949: PPUSH
// if not GetClass ( unit ) = class_sniper then
71950: LD_VAR 0 1
71954: PPUSH
71955: CALL_OW 257
71959: PUSH
71960: LD_INT 5
71962: EQUAL
71963: NOT
71964: IFFALSE 71968
// exit ;
71966: GO 72356
// dist := 8 ;
71968: LD_ADDR_VAR 0 5
71972: PUSH
71973: LD_INT 8
71975: ST_TO_ADDR
// viewRange := 12 ;
71976: LD_ADDR_VAR 0 7
71980: PUSH
71981: LD_INT 12
71983: ST_TO_ADDR
// side := GetSide ( unit ) ;
71984: LD_ADDR_VAR 0 6
71988: PUSH
71989: LD_VAR 0 1
71993: PPUSH
71994: CALL_OW 255
71998: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71999: LD_INT 61
72001: PPUSH
72002: LD_VAR 0 6
72006: PPUSH
72007: CALL_OW 321
72011: PUSH
72012: LD_INT 2
72014: EQUAL
72015: IFFALSE 72025
// viewRange := 16 ;
72017: LD_ADDR_VAR 0 7
72021: PUSH
72022: LD_INT 16
72024: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72025: LD_VAR 0 1
72029: PPUSH
72030: LD_VAR 0 2
72034: PPUSH
72035: LD_VAR 0 3
72039: PPUSH
72040: CALL_OW 297
72044: PUSH
72045: LD_VAR 0 5
72049: GREATER
72050: IFFALSE 72129
// begin ComMoveXY ( unit , x , y ) ;
72052: LD_VAR 0 1
72056: PPUSH
72057: LD_VAR 0 2
72061: PPUSH
72062: LD_VAR 0 3
72066: PPUSH
72067: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72071: LD_INT 35
72073: PPUSH
72074: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72078: LD_VAR 0 1
72082: PPUSH
72083: LD_VAR 0 2
72087: PPUSH
72088: LD_VAR 0 3
72092: PPUSH
72093: CALL 48317 0 3
72097: NOT
72098: IFFALSE 72102
// exit ;
72100: GO 72356
// until GetDistUnitXY ( unit , x , y ) < dist ;
72102: LD_VAR 0 1
72106: PPUSH
72107: LD_VAR 0 2
72111: PPUSH
72112: LD_VAR 0 3
72116: PPUSH
72117: CALL_OW 297
72121: PUSH
72122: LD_VAR 0 5
72126: LESS
72127: IFFALSE 72071
// end ; ComTurnXY ( unit , x , y ) ;
72129: LD_VAR 0 1
72133: PPUSH
72134: LD_VAR 0 2
72138: PPUSH
72139: LD_VAR 0 3
72143: PPUSH
72144: CALL_OW 118
// wait ( 5 ) ;
72148: LD_INT 5
72150: PPUSH
72151: CALL_OW 67
// _d := GetDir ( unit ) ;
72155: LD_ADDR_VAR 0 10
72159: PUSH
72160: LD_VAR 0 1
72164: PPUSH
72165: CALL_OW 254
72169: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72170: LD_ADDR_VAR 0 8
72174: PUSH
72175: LD_VAR 0 1
72179: PPUSH
72180: CALL_OW 250
72184: PPUSH
72185: LD_VAR 0 10
72189: PPUSH
72190: LD_VAR 0 5
72194: PPUSH
72195: CALL_OW 272
72199: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72200: LD_ADDR_VAR 0 9
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: CALL_OW 251
72214: PPUSH
72215: LD_VAR 0 10
72219: PPUSH
72220: LD_VAR 0 5
72224: PPUSH
72225: CALL_OW 273
72229: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72230: LD_VAR 0 8
72234: PPUSH
72235: LD_VAR 0 9
72239: PPUSH
72240: CALL_OW 488
72244: NOT
72245: IFFALSE 72249
// exit ;
72247: GO 72356
// ComAnimCustom ( unit , 1 ) ;
72249: LD_VAR 0 1
72253: PPUSH
72254: LD_INT 1
72256: PPUSH
72257: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72261: LD_VAR 0 8
72265: PPUSH
72266: LD_VAR 0 9
72270: PPUSH
72271: LD_VAR 0 6
72275: PPUSH
72276: LD_VAR 0 7
72280: PPUSH
72281: CALL_OW 330
// repeat wait ( 1 ) ;
72285: LD_INT 1
72287: PPUSH
72288: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 316
72301: PUSH
72302: LD_VAR 0 1
72306: PPUSH
72307: CALL_OW 314
72311: OR
72312: PUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 302
72322: NOT
72323: OR
72324: PUSH
72325: LD_VAR 0 1
72329: PPUSH
72330: CALL_OW 301
72334: OR
72335: IFFALSE 72285
// RemoveSeeing ( _x , _y , side ) ;
72337: LD_VAR 0 8
72341: PPUSH
72342: LD_VAR 0 9
72346: PPUSH
72347: LD_VAR 0 6
72351: PPUSH
72352: CALL_OW 331
// end ; end_of_file
72356: LD_VAR 0 4
72360: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72361: LD_VAR 0 1
72365: PUSH
72366: LD_INT 200
72368: DOUBLE
72369: GREATEREQUAL
72370: IFFALSE 72378
72372: LD_INT 299
72374: DOUBLE
72375: LESSEQUAL
72376: IFTRUE 72380
72378: GO 72412
72380: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72381: LD_VAR 0 1
72385: PPUSH
72386: LD_VAR 0 2
72390: PPUSH
72391: LD_VAR 0 3
72395: PPUSH
72396: LD_VAR 0 4
72400: PPUSH
72401: LD_VAR 0 5
72405: PPUSH
72406: CALL 68099 0 5
72410: GO 72489
72412: LD_INT 300
72414: DOUBLE
72415: GREATEREQUAL
72416: IFFALSE 72424
72418: LD_INT 399
72420: DOUBLE
72421: LESSEQUAL
72422: IFTRUE 72426
72424: GO 72488
72426: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72427: LD_VAR 0 1
72431: PPUSH
72432: LD_VAR 0 2
72436: PPUSH
72437: LD_VAR 0 3
72441: PPUSH
72442: LD_VAR 0 4
72446: PPUSH
72447: LD_VAR 0 5
72451: PPUSH
72452: LD_VAR 0 6
72456: PPUSH
72457: LD_VAR 0 7
72461: PPUSH
72462: LD_VAR 0 8
72466: PPUSH
72467: LD_VAR 0 9
72471: PPUSH
72472: LD_VAR 0 10
72476: PPUSH
72477: LD_VAR 0 11
72481: PPUSH
72482: CALL 65741 0 11
72486: GO 72489
72488: POP
// end ;
72489: PPOPN 11
72491: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72492: LD_VAR 0 1
72496: PPUSH
72497: LD_VAR 0 2
72501: PPUSH
72502: LD_VAR 0 3
72506: PPUSH
72507: LD_VAR 0 4
72511: PPUSH
72512: LD_VAR 0 5
72516: PPUSH
72517: CALL 67835 0 5
// end ;
72521: PPOPN 5
72523: END
