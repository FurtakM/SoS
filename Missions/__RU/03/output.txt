// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export kurinOpinion , platonovOpinion ; export vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 324 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 5
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// vehiclesToSave = [ ] ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: EMPTY
 119: ST_TO_ADDR
// scholtzeSpawned = false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// scholtzeSaved = false ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 136: LD_ADDR_EXP 15
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// spawnCrates = true ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 1
 151: ST_TO_ADDR
// dialog_track = false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dialog_workshop = false ;
 160: LD_ADDR_EXP 11
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dialog_stop = false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// counterEnable = false ;
 176: LD_ADDR_EXP 90
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// extraTime = 7 7$00 ;
 184: LD_ADDR_EXP 17
 188: PUSH
 189: LD_INT 14700
 191: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 192: LD_ADDR_EXP 16
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 200: LD_ADDR_EXP 18
 204: PUSH
 205: LD_INT 4200
 207: ST_TO_ADDR
// produceOnlyForYou = false ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// produceMoreVehicles = false ;
 216: LD_ADDR_EXP 19
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// kurinCheckVehicles = false ;
 224: LD_ADDR_EXP 21
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// omicronSurrender = false ;
 232: LD_ADDR_EXP 26
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// canExitBattlefield = true ;
 240: LD_ADDR_EXP 27
 244: PUSH
 245: LD_INT 1
 247: ST_TO_ADDR
// immortalSurvivors = false ;
 248: LD_ADDR_EXP 28
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 256: LD_ADDR_EXP 29
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// endCutscene = false ;
 264: LD_ADDR_EXP 32
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 272: LD_ADDR_EXP 31
 276: PUSH
 277: EMPTY
 278: ST_TO_ADDR
// kirovFactory = 0 ;
 279: LD_ADDR_EXP 24
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// kirovCompleteFactory = false ;
 287: LD_ADDR_EXP 25
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// enableOmicronAI = true ;
 295: LD_ADDR_EXP 30
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// PrepareRussians ;
 303: CALL 1048 0 0
// PrepareAmericans ;
 307: CALL 5537 0 0
// Nef_PrepareNature ;
 311: CALL 31554 0 0
// MissionIntro ;
 315: CALL 21917 0 0
// end ; end_of_file
 319: LD_VAR 0 1
 323: RET
// export function InitMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// BaseMapConfig ;
 327: CALL 340 0 0
// MissionMapConfig ;
 331: CALL 442 0 0
// end ;
 335: LD_VAR 0 1
 339: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 340: LD_INT 0
 342: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 343: LD_ADDR_EXP 33
 347: PUSH
 348: LD_INT 8
 350: PUSH
 351: LD_INT 12
 353: PUSH
 354: LD_INT 6
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 370: LD_ADDR_EXP 34
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 2
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 393: LD_ADDR_EXP 35
 397: PUSH
 398: LD_INT 5
 400: NEG
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL_OW 12
 409: PUSH
 410: EMPTY
 411: LIST
 412: ST_TO_ADDR
// debugMode = 0 ;
 413: LD_ADDR_EXP 38
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// missionPrefix = 03_ ;
 421: LD_ADDR_EXP 36
 425: PUSH
 426: LD_STRING 03_
 428: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 429: LD_ADDR_EXP 37
 433: PUSH
 434: LD_STRING 02_
 436: ST_TO_ADDR
// end ;
 437: LD_VAR 0 1
 441: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 442: LD_INT 0
 444: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 , 6 ] [ Difficulty ] ;
 445: LD_ADDR_EXP 39
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: LD_INT 6
 458: PUSH
 459: LD_INT 6
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: LD_OWVAR 67
 472: ARRAY
 473: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 , 25 25$0 ] [ Difficulty ] ;
 474: LD_ADDR_EXP 41
 478: PUSH
 479: LD_INT 84000
 481: PUSH
 482: LD_INT 73500
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: LD_INT 52500
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_OWVAR 67
 501: ARRAY
 502: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 503: LD_ADDR_EXP 42
 507: PUSH
 508: LD_INT 150
 510: PUSH
 511: LD_INT 100
 513: PUSH
 514: LD_INT 50
 516: PUSH
 517: LD_INT 30
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: PUSH
 526: LD_OWVAR 67
 530: ARRAY
 531: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 , 0 ] [ Difficulty ] ;
 532: LD_ADDR_EXP 43
 536: PUSH
 537: LD_INT 100
 539: PUSH
 540: LD_INT 50
 542: PUSH
 543: LD_INT 0
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 , 3 ] [ Difficulty ] ;
 561: LD_ADDR_EXP 44
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_EXP 47
 594: PUSH
 595: LD_INT 8
 597: PUSH
 598: LD_INT 6
 600: PUSH
 601: LD_INT 5
 603: PUSH
 604: LD_INT 4
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: LD_OWVAR 67
 617: ARRAY
 618: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 , 7 7$00 ] [ Difficulty ] ;
 619: LD_ADDR_EXP 48
 623: PUSH
 624: LD_INT 17850
 626: PUSH
 627: LD_INT 16800
 629: PUSH
 630: LD_INT 15750
 632: PUSH
 633: LD_INT 14700
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: PUSH
 642: LD_OWVAR 67
 646: ARRAY
 647: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 648: LD_ADDR_EXP 49
 652: PUSH
 653: LD_INT 47
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 57
 665: PUSH
 666: LD_INT 39
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 61
 675: PUSH
 676: LD_INT 60
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 44
 685: PUSH
 686: LD_INT 76
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: LD_INT 44
 695: PUSH
 696: LD_INT 4
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 55
 705: PUSH
 706: LD_INT 29
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: ST_TO_ADDR
// end ;
 721: LD_VAR 0 1
 725: RET
// every 0 0$1 trigger debugMode do var i ;
 726: LD_EXP 38
 730: IFFALSE 1045
 732: GO 734
 734: DISABLE
 735: LD_INT 0
 737: PPUSH
// begin enable ;
 738: ENABLE
// FogOff ( your_side ) ;
 739: LD_OWVAR 2
 743: PPUSH
 744: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 748: LD_ADDR_VAR 0 1
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_OWVAR 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 21
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 21
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: PUSH
 802: FOR_IN
 803: IFFALSE 819
// SetLives ( i , 1000 ) ;
 805: LD_VAR 0 1
 809: PPUSH
 810: LD_INT 1000
 812: PPUSH
 813: CALL_OW 234
 817: GO 802
 819: POP
 820: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 821: LD_ADDR_VAR 0 1
 825: PUSH
 826: LD_INT 22
 828: PUSH
 829: LD_OWVAR 2
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 21
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PPUSH
 852: CALL_OW 69
 856: PUSH
 857: FOR_IN
 858: IFFALSE 922
// begin SetSkill ( i , skill_combat , 10 ) ;
 860: LD_VAR 0 1
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 10
 870: PPUSH
 871: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 875: LD_VAR 0 1
 879: PPUSH
 880: LD_INT 2
 882: PPUSH
 883: LD_INT 10
 885: PPUSH
 886: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PPUSH
 898: LD_INT 10
 900: PPUSH
 901: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 905: LD_VAR 0 1
 909: PPUSH
 910: LD_INT 4
 912: PPUSH
 913: LD_INT 10
 915: PPUSH
 916: CALL_OW 237
// end ;
 920: GO 857
 922: POP
 923: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 924: LD_ADDR_VAR 0 1
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_OWVAR 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 30
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 30
 956: PUSH
 957: LD_INT 1
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PPUSH
 973: CALL_OW 69
 977: PUSH
 978: FOR_IN
 979: IFFALSE 1043
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 981: LD_VAR 0 1
 985: PPUSH
 986: CALL_OW 274
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: LD_INT 9999
 996: PPUSH
 997: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1001: LD_VAR 0 1
1005: PPUSH
1006: CALL_OW 274
1010: PPUSH
1011: LD_INT 2
1013: PPUSH
1014: LD_INT 9999
1016: PPUSH
1017: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1021: LD_VAR 0 1
1025: PPUSH
1026: CALL_OW 274
1030: PPUSH
1031: LD_INT 3
1033: PPUSH
1034: LD_INT 9999
1036: PPUSH
1037: CALL_OW 277
// end ;
1041: GO 978
1043: POP
1044: POP
// end ; end_of_file
1045: PPOPN 1
1047: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1048: LD_INT 0
1050: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1051: LD_ADDR_EXP 82
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: LD_INT 0
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1074: LD_ADDR_EXP 76
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// PrepareKirovBase ;
1081: CALL 2137 0 0
// PrepareHeroes ;
1085: CALL 1118 0 0
// PrepareKirovPersonel ;
1089: CALL 2902 0 0
// PrepareBeriaBase ;
1093: CALL 1539 0 0
// PrepareSecondBaseTeam ;
1097: CALL 4065 0 0
// PrepareGrishko ;
1101: CALL 3230 0 0
// PrepareOtherBuildings ;
1105: CALL 3499 0 0
// PrepareVehicles ;
1109: CALL 3303 0 0
// end ;
1113: LD_VAR 0 1
1117: RET
// function PrepareHeroes ; begin
1118: LD_INT 0
1120: PPUSH
// uc_side = 3 ;
1121: LD_ADDR_OWVAR 20
1125: PUSH
1126: LD_INT 3
1128: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1129: LD_ADDR_EXP 50
1133: PUSH
1134: LD_STRING Burlak
1136: PPUSH
1137: LD_INT 1
1139: PPUSH
1140: CALL 7009 0 2
1144: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1145: LD_ADDR_EXP 51
1149: PUSH
1150: LD_STRING Gnyevko
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL 7009 0 2
1160: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1161: LD_ADDR_EXP 53
1165: PUSH
1166: LD_STRING Kovalyuk
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: CALL 7009 0 2
1176: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1177: LD_ADDR_EXP 52
1181: PUSH
1182: LD_STRING Kirilenkova
1184: PPUSH
1185: LD_INT 1
1187: PPUSH
1188: CALL 7009 0 2
1192: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1193: LD_EXP 50
1197: PUSH
1198: LD_EXP 51
1202: PUSH
1203: LD_EXP 53
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1220: LD_EXP 52
1224: PPUSH
1225: LD_INT 4
1227: PPUSH
1228: CALL_OW 336
// uc_side = 6 ;
1232: LD_ADDR_OWVAR 20
1236: PUSH
1237: LD_INT 6
1239: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1240: LD_EXP 1
1244: NOT
1245: PUSH
1246: LD_STRING 02_Belkov
1248: PPUSH
1249: CALL_OW 28
1253: AND
1254: IFFALSE 1355
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1256: LD_ADDR_EXP 54
1260: PUSH
1261: LD_STRING Belkov
1263: PPUSH
1264: LD_INT 1
1266: PPUSH
1267: CALL 7009 0 2
1271: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1272: LD_STRING 02_Belkov2
1274: PPUSH
1275: CALL_OW 28
1279: IFFALSE 1318
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1281: LD_ADDR_EXP 55
1285: PUSH
1286: LD_STRING Belkov2
1288: PPUSH
1289: LD_INT 1
1291: PPUSH
1292: CALL 7009 0 2
1296: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1297: LD_EXP 55
1301: PPUSH
1302: LD_INT 159
1304: PPUSH
1305: LD_INT 107
1307: PPUSH
1308: LD_INT 5
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1318: LD_ADDR_EXP 64
1322: PUSH
1323: LD_EXP 54
1327: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1328: LD_EXP 54
1332: PPUSH
1333: LD_INT 165
1335: PPUSH
1336: LD_INT 110
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 48
// ComHold ( Belkov ) ;
1346: LD_EXP 54
1350: PPUSH
1351: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1355: LD_EXP 1
1359: PUSH
1360: LD_STRING 02_Belkov2
1362: PPUSH
1363: CALL_OW 28
1367: AND
1368: IFFALSE 1423
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1370: LD_ADDR_EXP 55
1374: PUSH
1375: LD_STRING Belkov2
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: CALL 7009 0 2
1385: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1386: LD_ADDR_EXP 64
1390: PUSH
1391: LD_EXP 55
1395: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1396: LD_EXP 55
1400: PPUSH
1401: LD_INT 165
1403: PPUSH
1404: LD_INT 110
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 48
// ComHold ( Belkov2 ) ;
1414: LD_EXP 55
1418: PPUSH
1419: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1423: LD_EXP 54
1427: PUSH
1428: LD_EXP 55
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1444: LD_EXP 50
1448: PPUSH
1449: LD_INT 164
1451: PPUSH
1452: LD_INT 108
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 48
// ComHold ( Burlak ) ;
1462: LD_EXP 50
1466: PPUSH
1467: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1471: LD_EXP 51
1475: PPUSH
1476: LD_INT 159
1478: PPUSH
1479: LD_INT 107
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1492: LD_EXP 53
1496: PPUSH
1497: LD_INT 159
1499: PPUSH
1500: LD_INT 107
1502: PPUSH
1503: LD_INT 5
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1513: LD_EXP 52
1517: PPUSH
1518: LD_INT 159
1520: PPUSH
1521: LD_INT 107
1523: PPUSH
1524: LD_INT 5
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 50
// end ;
1534: LD_VAR 0 1
1538: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1539: LD_INT 0
1541: PPUSH
1542: PPUSH
1543: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1544: LD_ADDR_EXP 60
1548: PUSH
1549: LD_STRING 02_BeriaBase_2
1551: PPUSH
1552: EMPTY
1553: PPUSH
1554: CALL_OW 30
1558: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1559: LD_ADDR_EXP 59
1563: PUSH
1564: LD_STRING 02_other_beria
1566: PPUSH
1567: CALL_OW 31
1571: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1572: LD_ADDR_EXP 57
1576: PUSH
1577: LD_STRING 02_other_survivors
1579: PPUSH
1580: CALL_OW 31
1584: ST_TO_ADDR
// uc_side = 3 ;
1585: LD_ADDR_OWVAR 20
1589: PUSH
1590: LD_INT 3
1592: ST_TO_ADDR
// uc_nation = 3 ;
1593: LD_ADDR_OWVAR 21
1597: PUSH
1598: LD_INT 3
1600: ST_TO_ADDR
// for i := 1 to beriaBase do
1601: LD_ADDR_VAR 0 2
1605: PUSH
1606: DOUBLE
1607: LD_INT 1
1609: DEC
1610: ST_TO_ADDR
1611: LD_EXP 60
1615: PUSH
1616: FOR_TO
1617: IFFALSE 1870
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1619: LD_ADDR_OWVAR 42
1623: PUSH
1624: LD_EXP 60
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PUSH
1635: LD_INT 1
1637: ARRAY
1638: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1639: LD_ADDR_OWVAR 43
1643: PUSH
1644: LD_EXP 60
1648: PUSH
1649: LD_VAR 0 2
1653: ARRAY
1654: PUSH
1655: LD_INT 5
1657: ARRAY
1658: ST_TO_ADDR
// if bc_type = b_lab then
1659: LD_OWVAR 42
1663: PUSH
1664: LD_INT 6
1666: EQUAL
1667: IFFALSE 1685
// begin bc_kind1 = b_lab_basic ;
1669: LD_ADDR_OWVAR 44
1673: PUSH
1674: LD_INT 9
1676: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1677: LD_ADDR_OWVAR 45
1681: PUSH
1682: LD_INT 9
1684: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1685: LD_OWVAR 42
1689: PUSH
1690: LD_INT 7
1692: EQUAL
1693: PUSH
1694: LD_OWVAR 42
1698: PUSH
1699: LD_INT 8
1701: EQUAL
1702: OR
1703: IFFALSE 1819
// begin if beriaBase [ i ] [ 7 ] then
1705: LD_EXP 60
1709: PUSH
1710: LD_VAR 0 2
1714: ARRAY
1715: PUSH
1716: LD_INT 7
1718: ARRAY
1719: IFFALSE 1741
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1721: LD_ADDR_OWVAR 44
1725: PUSH
1726: LD_EXP 60
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 7
1739: ARRAY
1740: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1741: LD_EXP 60
1745: PUSH
1746: LD_VAR 0 2
1750: ARRAY
1751: PUSH
1752: LD_INT 8
1754: ARRAY
1755: IFFALSE 1777
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1757: LD_ADDR_OWVAR 45
1761: PUSH
1762: LD_EXP 60
1766: PUSH
1767: LD_VAR 0 2
1771: ARRAY
1772: PUSH
1773: LD_INT 8
1775: ARRAY
1776: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1777: LD_EXP 60
1781: PUSH
1782: LD_VAR 0 2
1786: ARRAY
1787: PUSH
1788: LD_INT 7
1790: ARRAY
1791: NOT
1792: PUSH
1793: LD_EXP 60
1797: PUSH
1798: LD_VAR 0 2
1802: ARRAY
1803: PUSH
1804: LD_INT 8
1806: ARRAY
1807: NOT
1808: AND
1809: IFFALSE 1819
// bc_type := b_lab ;
1811: LD_ADDR_OWVAR 42
1815: PUSH
1816: LD_INT 6
1818: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1819: LD_EXP 60
1823: PUSH
1824: LD_VAR 0 2
1828: ARRAY
1829: PUSH
1830: LD_INT 2
1832: ARRAY
1833: PPUSH
1834: LD_EXP 60
1838: PUSH
1839: LD_VAR 0 2
1843: ARRAY
1844: PUSH
1845: LD_INT 3
1847: ARRAY
1848: PPUSH
1849: LD_EXP 60
1853: PUSH
1854: LD_VAR 0 2
1858: ARRAY
1859: PUSH
1860: LD_INT 4
1862: ARRAY
1863: PPUSH
1864: CALL_OW 47
// end ;
1868: GO 1616
1870: POP
1871: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1872: LD_ADDR_EXP 61
1876: PUSH
1877: LD_INT 22
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PPUSH
1901: CALL_OW 69
1905: PUSH
1906: LD_INT 1
1908: ARRAY
1909: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1910: LD_EXP 61
1914: PPUSH
1915: LD_STRING beria
1917: PPUSH
1918: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1922: LD_EXP 61
1926: PPUSH
1927: CALL_OW 274
1931: PPUSH
1932: LD_INT 1
1934: PPUSH
1935: LD_EXP 2
1939: PPUSH
1940: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1944: LD_EXP 61
1948: PPUSH
1949: CALL_OW 274
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: LD_EXP 3
1961: PPUSH
1962: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1966: LD_EXP 61
1970: PPUSH
1971: CALL_OW 274
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_EXP 61
1983: PPUSH
1984: CALL_OW 274
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: CALL_OW 275
1996: PUSH
1997: LD_EXP 42
2001: PLUS
2002: PPUSH
2003: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
2007: LD_EXP 61
2011: PPUSH
2012: CALL_OW 274
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_EXP 61
2024: PPUSH
2025: CALL_OW 274
2029: PPUSH
2030: LD_INT 2
2032: PPUSH
2033: CALL_OW 275
2037: PUSH
2038: LD_EXP 43
2042: PLUS
2043: PPUSH
2044: CALL_OW 277
// uc_side = 6 ;
2048: LD_ADDR_OWVAR 20
2052: PUSH
2053: LD_INT 6
2055: ST_TO_ADDR
// for i in otherBeriaUnits do
2056: LD_ADDR_VAR 0 2
2060: PUSH
2061: LD_EXP 59
2065: PUSH
2066: FOR_IN
2067: IFFALSE 2092
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2069: LD_VAR 0 2
2073: PPUSH
2074: LD_INT 159
2076: PPUSH
2077: LD_INT 107
2079: PPUSH
2080: LD_INT 10
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL_OW 50
2090: GO 2066
2092: POP
2093: POP
// for i in other_survivors do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 57
2103: PUSH
2104: FOR_IN
2105: IFFALSE 2130
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: LD_INT 159
2114: PPUSH
2115: LD_INT 107
2117: PPUSH
2118: LD_INT 10
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 50
2128: GO 2104
2130: POP
2131: POP
// end ;
2132: LD_VAR 0 1
2136: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2137: LD_INT 0
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2143: LD_ADDR_EXP 67
2147: PUSH
2148: LD_STRING 02_KirovBase_3
2150: PPUSH
2151: EMPTY
2152: PPUSH
2153: CALL_OW 30
2157: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2158: LD_ADDR_EXP 66
2162: PUSH
2163: LD_STRING 02_other_kirov
2165: PPUSH
2166: CALL_OW 31
2170: ST_TO_ADDR
// uc_side = 6 ;
2171: LD_ADDR_OWVAR 20
2175: PUSH
2176: LD_INT 6
2178: ST_TO_ADDR
// uc_nation = 3 ;
2179: LD_ADDR_OWVAR 21
2183: PUSH
2184: LD_INT 3
2186: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2187: LD_ADDR_EXP 62
2191: PUSH
2192: LD_STRING Kurin
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: CALL 7009 0 2
2202: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2203: LD_EXP 62
2207: PPUSH
2208: LD_INT 166
2210: PPUSH
2211: LD_INT 109
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 48
// ComHold ( Kurin ) ;
2221: LD_EXP 62
2225: PPUSH
2226: CALL_OW 140
// for i := 1 to kirovBase do
2230: LD_ADDR_VAR 0 2
2234: PUSH
2235: DOUBLE
2236: LD_INT 1
2238: DEC
2239: ST_TO_ADDR
2240: LD_EXP 67
2244: PUSH
2245: FOR_TO
2246: IFFALSE 2684
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2248: LD_ADDR_OWVAR 42
2252: PUSH
2253: LD_EXP 67
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2268: LD_ADDR_OWVAR 43
2272: PUSH
2273: LD_EXP 67
2277: PUSH
2278: LD_VAR 0 2
2282: ARRAY
2283: PUSH
2284: LD_INT 5
2286: ARRAY
2287: ST_TO_ADDR
// if bc_type = b_depot then
2288: LD_OWVAR 42
2292: PUSH
2293: LD_INT 0
2295: EQUAL
2296: IFFALSE 2306
// bc_type = b_warehouse ;
2298: LD_ADDR_OWVAR 42
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// if bc_type = b_armoury then
2306: LD_OWVAR 42
2310: PUSH
2311: LD_INT 4
2313: EQUAL
2314: IFFALSE 2324
// bc_type = b_barracks ;
2316: LD_ADDR_OWVAR 42
2320: PUSH
2321: LD_INT 5
2323: ST_TO_ADDR
// if bc_type = b_lab then
2324: LD_OWVAR 42
2328: PUSH
2329: LD_INT 6
2331: EQUAL
2332: IFFALSE 2350
// begin bc_kind1 = b_lab_weapon ;
2334: LD_ADDR_OWVAR 44
2338: PUSH
2339: LD_INT 10
2341: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2342: LD_ADDR_OWVAR 45
2346: PUSH
2347: LD_INT 9
2349: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2350: LD_OWVAR 42
2354: PUSH
2355: LD_INT 2
2357: EQUAL
2358: IFFALSE 2368
// bc_type = b_factory ;
2360: LD_ADDR_OWVAR 42
2364: PUSH
2365: LD_INT 3
2367: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2368: LD_OWVAR 42
2372: PUSH
2373: LD_INT 7
2375: EQUAL
2376: PUSH
2377: LD_OWVAR 42
2381: PUSH
2382: LD_INT 8
2384: EQUAL
2385: OR
2386: IFFALSE 2502
// begin if kirovBase [ i ] [ 7 ] then
2388: LD_EXP 67
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: PUSH
2399: LD_INT 7
2401: ARRAY
2402: IFFALSE 2424
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2404: LD_ADDR_OWVAR 44
2408: PUSH
2409: LD_EXP 67
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PUSH
2420: LD_INT 7
2422: ARRAY
2423: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2424: LD_EXP 67
2428: PUSH
2429: LD_VAR 0 2
2433: ARRAY
2434: PUSH
2435: LD_INT 8
2437: ARRAY
2438: IFFALSE 2460
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2440: LD_ADDR_OWVAR 45
2444: PUSH
2445: LD_EXP 67
2449: PUSH
2450: LD_VAR 0 2
2454: ARRAY
2455: PUSH
2456: LD_INT 8
2458: ARRAY
2459: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2460: LD_EXP 67
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: PUSH
2471: LD_INT 7
2473: ARRAY
2474: NOT
2475: PUSH
2476: LD_EXP 67
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PUSH
2487: LD_INT 8
2489: ARRAY
2490: NOT
2491: AND
2492: IFFALSE 2502
// bc_type := b_lab ;
2494: LD_ADDR_OWVAR 42
2498: PUSH
2499: LD_INT 6
2501: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2502: LD_OWVAR 42
2506: PUSH
2507: LD_INT 31
2509: EQUAL
2510: IFFALSE 2534
// begin bc_type = b_bunker ;
2512: LD_ADDR_OWVAR 42
2516: PUSH
2517: LD_INT 32
2519: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2520: LD_ADDR_EXP 78
2524: PUSH
2525: LD_EXP 78
2529: PUSH
2530: LD_INT 1
2532: PLUS
2533: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_EXP 67
2543: PUSH
2544: LD_VAR 0 2
2548: ARRAY
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: LD_EXP 67
2558: PUSH
2559: LD_VAR 0 2
2563: ARRAY
2564: PUSH
2565: LD_INT 3
2567: ARRAY
2568: PPUSH
2569: LD_EXP 67
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_INT 4
2582: ARRAY
2583: PPUSH
2584: CALL_OW 47
2588: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 4
2596: LESS
2597: PUSH
2598: LD_OWVAR 42
2602: PUSH
2603: LD_INT 32
2605: EQUAL
2606: AND
2607: IFFALSE 2656
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2609: LD_VAR 0 4
2613: PPUSH
2614: LD_INT 42
2616: PUSH
2617: LD_INT 43
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 1
2626: PPUSH
2627: LD_INT 2
2629: PPUSH
2630: CALL_OW 12
2634: ARRAY
2635: PPUSH
2636: CALL_OW 431
// tmp = tmp + 1 ;
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: LD_VAR 0 3
2649: PUSH
2650: LD_INT 1
2652: PLUS
2653: ST_TO_ADDR
// end else
2654: GO 2682
// if bc_type = b_bunker then
2656: LD_OWVAR 42
2660: PUSH
2661: LD_INT 32
2663: EQUAL
2664: IFFALSE 2682
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2666: LD_ADDR_EXP 73
2670: PUSH
2671: LD_EXP 73
2675: PUSH
2676: LD_VAR 0 4
2680: ADD
2681: ST_TO_ADDR
// end ;
2682: GO 2245
2684: POP
2685: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2686: LD_ADDR_EXP 68
2690: PUSH
2691: LD_INT 22
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 30
2703: PUSH
2704: LD_INT 1
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PPUSH
2715: CALL_OW 69
2719: PUSH
2720: LD_INT 1
2722: ARRAY
2723: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2724: LD_EXP 68
2728: PPUSH
2729: LD_STRING kirov
2731: PPUSH
2732: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2736: LD_EXP 68
2740: PPUSH
2741: CALL_OW 274
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 5000
2751: PPUSH
2752: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2756: LD_EXP 68
2760: PPUSH
2761: CALL_OW 274
2765: PPUSH
2766: LD_INT 2
2768: PPUSH
2769: LD_INT 2000
2771: PPUSH
2772: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2776: LD_ADDR_EXP 70
2780: PUSH
2781: LD_INT 22
2783: PUSH
2784: LD_INT 6
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 21
2793: PUSH
2794: LD_INT 3
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: LD_INT 30
2803: PUSH
2804: LD_INT 5
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PPUSH
2821: LD_INT 145
2823: PPUSH
2824: LD_INT 102
2826: PPUSH
2827: CALL_OW 73
2831: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2832: LD_ADDR_EXP 71
2836: PUSH
2837: LD_INT 22
2839: PUSH
2840: LD_INT 6
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: PUSH
2847: LD_INT 21
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 5
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: LIST
2871: PPUSH
2872: CALL_OW 69
2876: PUSH
2877: LD_EXP 70
2881: DIFF
2882: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2883: LD_ADDR_EXP 71
2887: PUSH
2888: LD_EXP 71
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: ST_TO_ADDR
// end ;
2897: LD_VAR 0 1
2901: RET
// export function PrepareKirovPersonel ; var i ; begin
2902: LD_INT 0
2904: PPUSH
2905: PPUSH
// PrepareEngineer ( false , 7 ) ;
2906: LD_INT 0
2908: PPUSH
2909: LD_INT 7
2911: PPUSH
2912: CALL_OW 382
// kirovEng = CreateHuman ;
2916: LD_ADDR_EXP 72
2920: PUSH
2921: CALL_OW 44
2925: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2926: LD_EXP 72
2930: PPUSH
2931: LD_INT 159
2933: PPUSH
2934: LD_INT 107
2936: PPUSH
2937: LD_INT 10
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2947: LD_ADDR_EXP 63
2951: PUSH
2952: LD_STRING Popov
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 7009 0 2
2962: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2963: LD_EXP 63
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 0
2973: PPUSH
2974: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2978: LD_EXP 63
2982: PPUSH
2983: LD_INT 98
2985: PPUSH
2986: LD_INT 36
2988: PPUSH
2989: CALL_OW 118
// hc_name :=  ;
2993: LD_ADDR_OWVAR 26
2997: PUSH
2998: LD_STRING 
3000: ST_TO_ADDR
// hc_gallery :=  ;
3001: LD_ADDR_OWVAR 33
3005: PUSH
3006: LD_STRING 
3008: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
3009: LD_INT 0
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 381
// ruScout = CreateHuman ;
3019: LD_ADDR_EXP 65
3023: PUSH
3024: CALL_OW 44
3028: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
3029: LD_EXP 65
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// ComCrawl ( ruScout ) ;
3044: LD_EXP 65
3048: PPUSH
3049: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3053: LD_EXP 65
3057: PPUSH
3058: LD_INT 98
3060: PPUSH
3061: LD_INT 36
3063: PPUSH
3064: CALL_OW 178
// uc_side = 6 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 6
3075: ST_TO_ADDR
// for i in otherKirovUnits do
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: LD_EXP 66
3085: PUSH
3086: FOR_IN
3087: IFFALSE 3223
// begin SetSide ( i , 6 ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 6
3096: PPUSH
3097: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 257
3110: PUSH
3111: LD_INT 1
3113: EQUAL
3114: PUSH
3115: LD_EXP 78
3119: PUSH
3120: LD_INT 0
3122: GREATER
3123: AND
3124: IFFALSE 3200
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_INT 18
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 6
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 32
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: PPUSH
3169: CALL_OW 70
3173: PUSH
3174: LD_EXP 78
3178: ARRAY
3179: PPUSH
3180: CALL 8553 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3184: LD_ADDR_EXP 78
3188: PUSH
3189: LD_EXP 78
3193: PUSH
3194: LD_INT 1
3196: MINUS
3197: ST_TO_ADDR
// end else
3198: GO 3221
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3200: LD_VAR 0 2
3204: PPUSH
3205: LD_INT 159
3207: PPUSH
3208: LD_INT 107
3210: PPUSH
3211: LD_INT 10
3213: PPUSH
3214: LD_INT 0
3216: PPUSH
3217: CALL_OW 50
// end ; end ;
3221: GO 3086
3223: POP
3224: POP
// end ;
3225: LD_VAR 0 1
3229: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3230: LD_INT 0
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
// uc_side = 6 ;
3236: LD_ADDR_OWVAR 20
3240: PUSH
3241: LD_INT 6
3243: ST_TO_ADDR
// uc_nation = 3 ;
3244: LD_ADDR_OWVAR 21
3248: PUSH
3249: LD_INT 3
3251: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3252: LD_ADDR_EXP 83
3256: PUSH
3257: LD_STRING Grishko
3259: PPUSH
3260: LD_INT 0
3262: PPUSH
3263: CALL 7009 0 2
3267: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3268: LD_EXP 83
3272: PPUSH
3273: LD_INT 218
3275: PPUSH
3276: LD_INT 108
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
// ComHold ( Grishko ) ;
3289: LD_EXP 83
3293: PPUSH
3294: CALL_OW 140
// end ;
3298: LD_VAR 0 1
3302: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
// uc_side = 3 ;
3308: LD_ADDR_OWVAR 20
3312: PUSH
3313: LD_INT 3
3315: ST_TO_ADDR
// uc_nation = 3 ;
3316: LD_ADDR_OWVAR 21
3320: PUSH
3321: LD_INT 3
3323: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3324: LD_ADDR_VAR 0 2
3328: PUSH
3329: DOUBLE
3330: LD_INT 1
3332: DEC
3333: ST_TO_ADDR
3334: LD_EXP 4
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3492
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3342: LD_EXP 4
3346: PUSH
3347: LD_VAR 0 2
3351: ARRAY
3352: PUSH
3353: LD_INT 1
3355: ARRAY
3356: PPUSH
3357: LD_EXP 4
3361: PUSH
3362: LD_VAR 0 2
3366: ARRAY
3367: PUSH
3368: LD_INT 2
3370: ARRAY
3371: PPUSH
3372: LD_EXP 4
3376: PUSH
3377: LD_VAR 0 2
3381: ARRAY
3382: PUSH
3383: LD_INT 3
3385: ARRAY
3386: PPUSH
3387: LD_EXP 4
3391: PUSH
3392: LD_VAR 0 2
3396: ARRAY
3397: PUSH
3398: LD_INT 4
3400: ARRAY
3401: PPUSH
3402: LD_EXP 4
3406: PUSH
3407: LD_VAR 0 2
3411: ARRAY
3412: PUSH
3413: LD_INT 5
3415: ARRAY
3416: PPUSH
3417: CALL 37269 0 5
// vehicle = CreateVehicle ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 45
3430: ST_TO_ADDR
// SetDir ( vehicle , rand ( 0 , 5 ) ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: LD_INT 5
3441: PPUSH
3442: CALL_OW 12
3446: PPUSH
3447: CALL_OW 233
// PlaceUnitArea ( vehicle , BeriaParkingArea , false ) ;
3451: LD_VAR 0 3
3455: PPUSH
3456: LD_INT 33
3458: PPUSH
3459: LD_INT 0
3461: PPUSH
3462: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_EXP 4
3475: PUSH
3476: LD_VAR 0 2
3480: ARRAY
3481: PUSH
3482: LD_INT 6
3484: ARRAY
3485: PPUSH
3486: CALL_OW 234
// end ;
3490: GO 3339
3492: POP
3493: POP
// end ;
3494: LD_VAR 0 1
3498: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
3503: PPUSH
3504: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_STRING 02_OtherBuildings_4
3512: PPUSH
3513: EMPTY
3514: PPUSH
3515: CALL_OW 30
3519: ST_TO_ADDR
// uc_side = 3 ;
3520: LD_ADDR_OWVAR 20
3524: PUSH
3525: LD_INT 3
3527: ST_TO_ADDR
// for i := 1 to otherBuildings do
3528: LD_ADDR_VAR 0 2
3532: PUSH
3533: DOUBLE
3534: LD_INT 1
3536: DEC
3537: ST_TO_ADDR
3538: LD_VAR 0 3
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3805
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3546: LD_ADDR_OWVAR 21
3550: PUSH
3551: LD_VAR 0 3
3555: PUSH
3556: LD_VAR 0 2
3560: ARRAY
3561: PUSH
3562: LD_INT 6
3564: ARRAY
3565: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3566: LD_ADDR_OWVAR 42
3570: PUSH
3571: LD_VAR 0 3
3575: PUSH
3576: LD_VAR 0 2
3580: ARRAY
3581: PUSH
3582: LD_INT 1
3584: ARRAY
3585: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3586: LD_ADDR_OWVAR 43
3590: PUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_VAR 0 2
3600: ARRAY
3601: PUSH
3602: LD_INT 5
3604: ARRAY
3605: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_VAR 0 3
3615: PUSH
3616: LD_VAR 0 2
3620: ARRAY
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: LD_VAR 0 3
3630: PUSH
3631: LD_VAR 0 2
3635: ARRAY
3636: PUSH
3637: LD_INT 3
3639: ARRAY
3640: PPUSH
3641: LD_VAR 0 3
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PUSH
3652: LD_INT 4
3654: ARRAY
3655: PPUSH
3656: CALL_OW 47
3660: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 3
3670: PUSH
3671: LD_VAR 0 2
3675: ARRAY
3676: PUSH
3677: LD_INT 7
3679: ARRAY
3680: PPUSH
3681: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3685: LD_VAR 0 4
3689: PPUSH
3690: CALL_OW 266
3694: PUSH
3695: LD_INT 0
3697: PUSH
3698: LD_INT 1
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: IN
3705: IFFALSE 3803
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3707: LD_VAR 0 4
3711: PPUSH
3712: CALL_OW 274
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: LD_VAR 0 3
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PUSH
3731: LD_INT 8
3733: ARRAY
3734: PPUSH
3735: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3739: LD_VAR 0 4
3743: PPUSH
3744: CALL_OW 274
3748: PPUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_VAR 0 3
3756: PUSH
3757: LD_VAR 0 2
3761: ARRAY
3762: PUSH
3763: LD_INT 9
3765: ARRAY
3766: PPUSH
3767: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3771: LD_VAR 0 4
3775: PPUSH
3776: CALL_OW 274
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_VAR 0 3
3788: PUSH
3789: LD_VAR 0 2
3793: ARRAY
3794: PUSH
3795: LD_INT 10
3797: ARRAY
3798: PPUSH
3799: CALL_OW 277
// end ; end ;
3803: GO 3543
3805: POP
3806: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: LD_STRING 02_AmericanBuildings_5
3814: PPUSH
3815: EMPTY
3816: PPUSH
3817: CALL_OW 30
3821: ST_TO_ADDR
// uc_side = 1 ;
3822: LD_ADDR_OWVAR 20
3826: PUSH
3827: LD_INT 1
3829: ST_TO_ADDR
// uc_nation = 1 ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_INT 1
3837: ST_TO_ADDR
// for i := 1 to otherBuildings do
3838: LD_ADDR_VAR 0 2
3842: PUSH
3843: DOUBLE
3844: LD_INT 1
3846: DEC
3847: ST_TO_ADDR
3848: LD_VAR 0 3
3852: PUSH
3853: FOR_TO
3854: IFFALSE 4058
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3856: LD_ADDR_OWVAR 42
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: LD_VAR 0 2
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3876: LD_ADDR_OWVAR 43
3880: PUSH
3881: LD_VAR 0 3
3885: PUSH
3886: LD_VAR 0 2
3890: ARRAY
3891: PUSH
3892: LD_INT 5
3894: ARRAY
3895: ST_TO_ADDR
// if bc_type = b_breastwork then
3896: LD_OWVAR 42
3900: PUSH
3901: LD_INT 31
3903: EQUAL
3904: IFFALSE 3977
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3906: LD_ADDR_VAR 0 4
3910: PUSH
3911: LD_VAR 0 3
3915: PUSH
3916: LD_VAR 0 2
3920: ARRAY
3921: PUSH
3922: LD_INT 2
3924: ARRAY
3925: PPUSH
3926: LD_VAR 0 3
3930: PUSH
3931: LD_VAR 0 2
3935: ARRAY
3936: PUSH
3937: LD_INT 3
3939: ARRAY
3940: PPUSH
3941: LD_VAR 0 3
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: LD_INT 4
3954: ARRAY
3955: PPUSH
3956: CALL_OW 47
3960: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3961: LD_EXP 44
3965: PPUSH
3966: LD_VAR 0 4
3970: PPUSH
3971: CALL 8643 0 2
// end else
3975: GO 4032
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3977: LD_ADDR_VAR 0 4
3981: PUSH
3982: LD_VAR 0 3
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: PUSH
3993: LD_INT 2
3995: ARRAY
3996: PPUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 3
4016: PUSH
4017: LD_VAR 0 2
4021: ARRAY
4022: PUSH
4023: LD_INT 4
4025: ARRAY
4026: PPUSH
4027: CALL_OW 47
4031: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
4032: LD_VAR 0 4
4036: PPUSH
4037: LD_VAR 0 3
4041: PUSH
4042: LD_VAR 0 2
4046: ARRAY
4047: PUSH
4048: LD_INT 7
4050: ARRAY
4051: PPUSH
4052: CALL_OW 234
// end ;
4056: GO 3853
4058: POP
4059: POP
// end ;
4060: LD_VAR 0 1
4064: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
// secondBaseTeam = [ ] ;
4069: LD_ADDR_EXP 79
4073: PUSH
4074: EMPTY
4075: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4076: LD_INT 226
4078: PPUSH
4079: LD_INT 109
4081: PPUSH
4082: LD_INT 6
4084: PPUSH
4085: CALL_OW 441
// uc_side = 6 ;
4089: LD_ADDR_OWVAR 20
4093: PUSH
4094: LD_INT 6
4096: ST_TO_ADDR
// uc_nation = 3 ;
4097: LD_ADDR_OWVAR 21
4101: PUSH
4102: LD_INT 3
4104: ST_TO_ADDR
// hc_name =  ;
4105: LD_ADDR_OWVAR 26
4109: PUSH
4110: LD_STRING 
4112: ST_TO_ADDR
// hc_gallery =  ;
4113: LD_ADDR_OWVAR 33
4117: PUSH
4118: LD_STRING 
4120: ST_TO_ADDR
// for i := 1 to 3 do
4121: LD_ADDR_VAR 0 2
4125: PUSH
4126: DOUBLE
4127: LD_INT 1
4129: DEC
4130: ST_TO_ADDR
4131: LD_INT 3
4133: PUSH
4134: FOR_TO
4135: IFFALSE 4188
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4137: LD_INT 0
4139: PPUSH
4140: LD_EXP 44
4144: PPUSH
4145: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4149: LD_ADDR_EXP 79
4153: PUSH
4154: LD_EXP 79
4158: PUSH
4159: CALL_OW 44
4163: ADD
4164: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4165: LD_EXP 79
4169: PUSH
4170: LD_VAR 0 2
4174: ARRAY
4175: PPUSH
4176: LD_INT 19
4178: PPUSH
4179: LD_INT 0
4181: PPUSH
4182: CALL_OW 49
// end ;
4186: GO 4134
4188: POP
4189: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4190: LD_INT 0
4192: PPUSH
4193: LD_EXP 44
4197: PPUSH
4198: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4202: LD_ADDR_EXP 79
4206: PUSH
4207: LD_EXP 79
4211: PUSH
4212: CALL_OW 44
4216: ADD
4217: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4218: LD_EXP 79
4222: PUSH
4223: LD_INT 4
4225: ARRAY
4226: PPUSH
4227: LD_INT 19
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4237: LD_INT 0
4239: PPUSH
4240: LD_EXP 44
4244: PPUSH
4245: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4249: LD_ADDR_EXP 79
4253: PUSH
4254: LD_EXP 79
4258: PUSH
4259: CALL_OW 44
4263: ADD
4264: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4265: LD_EXP 79
4269: PUSH
4270: LD_INT 5
4272: ARRAY
4273: PPUSH
4274: LD_INT 19
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4284: LD_EXP 79
4288: PPUSH
4289: LD_INT 214
4291: PPUSH
4292: LD_INT 105
4294: PPUSH
4295: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4299: LD_EXP 79
4303: PPUSH
4304: LD_INT 25
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 72
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: LD_INT 222
4324: PPUSH
4325: LD_INT 115
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4335: LD_EXP 79
4339: PPUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PPUSH
4350: CALL_OW 72
4354: PPUSH
4355: LD_INT 224
4357: PPUSH
4358: LD_INT 107
4360: PPUSH
4361: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4365: LD_EXP 79
4369: PPUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PPUSH
4380: CALL_OW 72
4384: PPUSH
4385: LD_INT 228
4387: PPUSH
4388: LD_INT 110
4390: PPUSH
4391: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4395: LD_EXP 79
4399: PPUSH
4400: LD_INT 25
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PPUSH
4410: CALL_OW 72
4414: PPUSH
4415: LD_INT 29
4417: PPUSH
4418: LD_INT 226
4420: PPUSH
4421: LD_INT 109
4423: PPUSH
4424: LD_INT 3
4426: PPUSH
4427: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4431: LD_EXP 79
4435: PPUSH
4436: LD_INT 25
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PPUSH
4446: CALL_OW 72
4450: PPUSH
4451: LD_INT 4
4453: PPUSH
4454: LD_INT 216
4456: PPUSH
4457: LD_INT 114
4459: PPUSH
4460: LD_INT 0
4462: PPUSH
4463: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4467: LD_EXP 79
4471: PPUSH
4472: LD_INT 25
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PPUSH
4482: CALL_OW 72
4486: PPUSH
4487: LD_INT 31
4489: PPUSH
4490: LD_INT 215
4492: PPUSH
4493: LD_INT 103
4495: PPUSH
4496: LD_INT 3
4498: PPUSH
4499: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4503: LD_EXP 79
4507: PPUSH
4508: LD_INT 25
4510: PUSH
4511: LD_INT 2
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 72
4522: PPUSH
4523: LD_INT 31
4525: PPUSH
4526: LD_INT 227
4528: PPUSH
4529: LD_INT 116
4531: PPUSH
4532: LD_INT 5
4534: PPUSH
4535: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4539: LD_EXP 79
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 2
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: PPUSH
4559: LD_INT 208
4561: PPUSH
4562: LD_INT 106
4564: PPUSH
4565: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4569: LD_EXP 79
4573: PPUSH
4574: LD_INT 25
4576: PUSH
4577: LD_INT 2
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 72
4588: PPUSH
4589: LD_INT 209
4591: PPUSH
4592: LD_INT 105
4594: PPUSH
4595: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4599: LD_EXP 79
4603: PUSH
4604: LD_INT 5
4606: ARRAY
4607: PPUSH
4608: LD_INT 209
4610: PPUSH
4611: LD_INT 105
4613: PPUSH
4614: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4618: LD_EXP 79
4622: PUSH
4623: LD_INT 5
4625: ARRAY
4626: PPUSH
4627: LD_INT 208
4629: PPUSH
4630: LD_INT 106
4632: PPUSH
4633: CALL_OW 178
// end ;
4637: LD_VAR 0 1
4641: RET
// export function SpawnKirovSupport ; var i , un ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
// uc_side = 6 ;
4647: LD_ADDR_OWVAR 20
4651: PUSH
4652: LD_INT 6
4654: ST_TO_ADDR
// uc_nation = 3 ;
4655: LD_ADDR_OWVAR 21
4659: PUSH
4660: LD_INT 3
4662: ST_TO_ADDR
// hc_name =  ;
4663: LD_ADDR_OWVAR 26
4667: PUSH
4668: LD_STRING 
4670: ST_TO_ADDR
// hc_gallery :=  ;
4671: LD_ADDR_OWVAR 33
4675: PUSH
4676: LD_STRING 
4678: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: DOUBLE
4685: LD_INT 1
4687: DEC
4688: ST_TO_ADDR
4689: LD_EXP 81
4693: PUSH
4694: FOR_TO
4695: IFFALSE 4783
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_INT 4
4705: PPUSH
4706: CALL_OW 12
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: CALL_OW 12
4721: PPUSH
4722: CALL_OW 380
// un = CreateHuman ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: CALL_OW 44
4735: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4736: LD_ADDR_EXP 80
4740: PUSH
4741: LD_EXP 80
4745: PUSH
4746: LD_VAR 0 3
4750: ADD
4751: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4752: LD_VAR 0 3
4756: PPUSH
4757: LD_INT 19
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4767: LD_VAR 0 3
4771: PPUSH
4772: LD_EXP 68
4776: PPUSH
4777: CALL_OW 120
// end ;
4781: GO 4694
4783: POP
4784: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_EXP 82
4799: PUSH
4800: LD_INT 1
4802: ARRAY
4803: PUSH
4804: LD_INT 4
4806: PLUS
4807: PUSH
4808: FOR_TO
4809: IFFALSE 4907
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4811: LD_INT 0
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 3
4822: PPUSH
4823: CALL_OW 12
4827: PPUSH
4828: CALL_OW 380
// un = CreateHuman ;
4832: LD_ADDR_VAR 0 3
4836: PUSH
4837: CALL_OW 44
4841: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 19
4849: PPUSH
4850: LD_INT 0
4852: PPUSH
4853: CALL_OW 49
// if i > kirovBunkersToOccupy then
4857: LD_VAR 0 2
4861: PUSH
4862: LD_EXP 74
4866: GREATER
4867: IFFALSE 4885
// ComEnterUnit ( un , ru2_bar2 ) else
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_EXP 71
4878: PPUSH
4879: CALL_OW 120
4883: GO 4905
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4885: LD_VAR 0 3
4889: PPUSH
4890: LD_EXP 74
4894: PUSH
4895: LD_VAR 0 2
4899: ARRAY
4900: PPUSH
4901: CALL_OW 120
// end ;
4905: GO 4808
4907: POP
4908: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4909: LD_ADDR_VAR 0 2
4913: PUSH
4914: DOUBLE
4915: LD_INT 1
4917: DEC
4918: ST_TO_ADDR
4919: LD_EXP 82
4923: PUSH
4924: LD_INT 3
4926: ARRAY
4927: PUSH
4928: FOR_TO
4929: IFFALSE 5032
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4931: LD_INT 0
4933: PPUSH
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: LD_INT 3
4942: PPUSH
4943: CALL_OW 12
4947: PPUSH
4948: CALL_OW 380
// un = CreateHuman ;
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4962: LD_VAR 0 3
4966: PPUSH
4967: LD_INT 19
4969: PPUSH
4970: LD_INT 0
4972: PPUSH
4973: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 6
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 21
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 3
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: CALL_OW 120
// end ;
5030: GO 4928
5032: POP
5033: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: DOUBLE
5040: LD_INT 1
5042: DEC
5043: ST_TO_ADDR
5044: LD_EXP 82
5048: PUSH
5049: LD_INT 4
5051: ARRAY
5052: PUSH
5053: LD_INT 2
5055: PLUS
5056: PUSH
5057: FOR_TO
5058: IFFALSE 5164
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5060: LD_INT 0
5062: PPUSH
5063: LD_INT 4
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: LD_INT 3
5071: PPUSH
5072: CALL_OW 12
5076: PPUSH
5077: CALL_OW 380
// un = CreateHuman ;
5081: LD_ADDR_VAR 0 3
5085: PUSH
5086: CALL_OW 44
5090: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5091: LD_VAR 0 3
5095: PPUSH
5096: LD_INT 19
5098: PPUSH
5099: LD_INT 0
5101: PPUSH
5102: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5106: LD_VAR 0 3
5110: PPUSH
5111: LD_INT 18
5113: PPUSH
5114: LD_INT 22
5116: PUSH
5117: LD_INT 6
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 3
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 30
5136: PUSH
5137: LD_INT 6
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 120
// end ;
5162: GO 5057
5164: POP
5165: POP
// end ;
5166: LD_VAR 0 1
5170: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5171: LD_INT 0
5173: PPUSH
5174: PPUSH
5175: PPUSH
// survivorsArabianAttack = [ ] ;
5176: LD_ADDR_EXP 80
5180: PUSH
5181: EMPTY
5182: ST_TO_ADDR
// limit = 9 ;
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: LD_INT 9
5190: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5191: LD_ADDR_EXP 80
5195: PUSH
5196: LD_EXP 80
5200: PUSH
5201: LD_EXP 63
5205: ADD
5206: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5207: LD_EXP 54
5211: PPUSH
5212: CALL_OW 302
5216: PUSH
5217: LD_EXP 54
5221: PPUSH
5222: CALL_OW 255
5226: PUSH
5227: LD_INT 6
5229: EQUAL
5230: AND
5231: IFFALSE 5263
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5233: LD_ADDR_EXP 80
5237: PUSH
5238: LD_EXP 80
5242: PUSH
5243: LD_EXP 54
5247: ADD
5248: ST_TO_ADDR
// limit = limit - 1 ;
5249: LD_ADDR_VAR 0 2
5253: PUSH
5254: LD_VAR 0 2
5258: PUSH
5259: LD_INT 1
5261: MINUS
5262: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5263: LD_EXP 55
5267: PPUSH
5268: CALL_OW 302
5272: PUSH
5273: LD_EXP 55
5277: PPUSH
5278: CALL_OW 255
5282: PUSH
5283: LD_INT 6
5285: EQUAL
5286: AND
5287: IFFALSE 5319
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5289: LD_ADDR_EXP 80
5293: PUSH
5294: LD_EXP 80
5298: PUSH
5299: LD_EXP 55
5303: ADD
5304: ST_TO_ADDR
// limit = limit - 1 ;
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_VAR 0 2
5314: PUSH
5315: LD_INT 1
5317: MINUS
5318: ST_TO_ADDR
// end ; for unit in other_survivors do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_EXP 57
5328: PUSH
5329: FOR_IN
5330: IFFALSE 5390
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5332: LD_VAR 0 3
5336: PPUSH
5337: CALL_OW 302
5341: PUSH
5342: LD_VAR 0 3
5346: PPUSH
5347: CALL_OW 255
5351: PUSH
5352: LD_INT 6
5354: EQUAL
5355: AND
5356: IFFALSE 5388
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5358: LD_ADDR_EXP 80
5362: PUSH
5363: LD_EXP 80
5367: PUSH
5368: LD_VAR 0 3
5372: ADD
5373: ST_TO_ADDR
// limit = limit - 1 ;
5374: LD_ADDR_VAR 0 2
5378: PUSH
5379: LD_VAR 0 2
5383: PUSH
5384: LD_INT 1
5386: MINUS
5387: ST_TO_ADDR
// end ; end ;
5388: GO 5329
5390: POP
5391: POP
// for unit in otherBeriaUnits do
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_EXP 59
5401: PUSH
5402: FOR_IN
5403: IFFALSE 5463
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 302
5414: PUSH
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 255
5424: PUSH
5425: LD_INT 6
5427: EQUAL
5428: AND
5429: IFFALSE 5461
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5431: LD_ADDR_EXP 80
5435: PUSH
5436: LD_EXP 80
5440: PUSH
5441: LD_VAR 0 3
5445: ADD
5446: ST_TO_ADDR
// limit = limit - 1 ;
5447: LD_ADDR_VAR 0 2
5451: PUSH
5452: LD_VAR 0 2
5456: PUSH
5457: LD_INT 1
5459: MINUS
5460: ST_TO_ADDR
// end ; end ;
5461: GO 5402
5463: POP
5464: POP
// if limit > 0 then
5465: LD_VAR 0 2
5469: PUSH
5470: LD_INT 0
5472: GREATER
5473: IFFALSE 5485
// survivorsToSpawn = limit ;
5475: LD_ADDR_EXP 81
5479: PUSH
5480: LD_VAR 0 2
5484: ST_TO_ADDR
// end ;
5485: LD_VAR 0 1
5489: RET
// export function PrepareScholtze ; begin
5490: LD_INT 0
5492: PPUSH
// uc_side = 8 ;
5493: LD_ADDR_OWVAR 20
5497: PUSH
5498: LD_INT 8
5500: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5501: LD_ADDR_EXP 56
5505: PUSH
5506: LD_STRING Scholtze
5508: PPUSH
5509: LD_INT 0
5511: PPUSH
5512: CALL 7009 0 2
5516: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5517: LD_EXP 56
5521: PPUSH
5522: LD_INT 30
5524: PPUSH
5525: LD_INT 1
5527: PPUSH
5528: CALL_OW 49
// end ; end_of_file
5532: LD_VAR 0 1
5536: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5537: LD_INT 0
5539: PPUSH
// amSupportTroops = [ ] ;
5540: LD_ADDR_EXP 85
5544: PUSH
5545: EMPTY
5546: ST_TO_ADDR
// PrepareOmicronBase ;
5547: CALL 5556 0 0
// end ;
5551: LD_VAR 0 1
5555: RET
// function PrepareOmicronBase ; var base ; begin
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5560: LD_ADDR_EXP 87
5564: PUSH
5565: LD_INT 64
5567: PPUSH
5568: LD_INT 13
5570: PPUSH
5571: LD_STRING omikron
5573: PPUSH
5574: LD_INT 1
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: LD_INT 2
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_OWVAR 67
5596: ARRAY
5597: PPUSH
5598: LD_INT 3000
5600: PUSH
5601: LD_INT 3000
5603: PUSH
5604: LD_INT 0
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: PPUSH
5612: LD_INT 7
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PPUSH
5630: CALL 40715 0 6
5634: ST_TO_ADDR
// case Difficulty of 2 :
5635: LD_OWVAR 67
5639: PUSH
5640: LD_INT 2
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5648
5646: GO 5664
5648: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5649: LD_INT 51
5651: PPUSH
5652: LD_INT 1
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 322
// end ; 3 .. 4 :
5662: GO 5708
5664: LD_INT 3
5666: DOUBLE
5667: GREATEREQUAL
5668: IFFALSE 5676
5670: LD_INT 4
5672: DOUBLE
5673: LESSEQUAL
5674: IFTRUE 5678
5676: GO 5707
5678: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5679: LD_INT 49
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5692: LD_INT 51
5694: PPUSH
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 1
5700: PPUSH
5701: CALL_OW 322
// end ; end ;
5705: GO 5708
5707: POP
// end ;
5708: LD_VAR 0 1
5712: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5713: LD_INT 0
5715: PPUSH
5716: PPUSH
5717: PPUSH
5718: PPUSH
// amIntroUnits = [ ] ;
5719: LD_ADDR_EXP 84
5723: PUSH
5724: EMPTY
5725: ST_TO_ADDR
// uc_side = 1 ;
5726: LD_ADDR_OWVAR 20
5730: PUSH
5731: LD_INT 1
5733: ST_TO_ADDR
// uc_nation = nation_american ;
5734: LD_ADDR_OWVAR 21
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5742: LD_ADDR_OWVAR 37
5746: PUSH
5747: LD_INT 3
5749: ST_TO_ADDR
// vc_control = control_manual ;
5750: LD_ADDR_OWVAR 38
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// vc_engine = engine_combustion ;
5758: LD_ADDR_OWVAR 39
5762: PUSH
5763: LD_INT 1
5765: ST_TO_ADDR
// vc_weapon = us_light_gun ;
5766: LD_ADDR_OWVAR 40
5770: PUSH
5771: LD_INT 3
5773: ST_TO_ADDR
// vc_fuel_battery = 100 ;
5774: LD_ADDR_OWVAR 41
5778: PUSH
5779: LD_INT 100
5781: ST_TO_ADDR
// veh = CreateVehicle ;
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: CALL_OW 45
5791: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 4
5799: PPUSH
5800: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5804: LD_ADDR_EXP 84
5808: PUSH
5809: LD_EXP 84
5813: PUSH
5814: LD_VAR 0 3
5818: ADD
5819: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_INT 5
5827: PPUSH
5828: LD_INT 0
5830: PPUSH
5831: CALL_OW 49
// for i := 1 to 3 do
5835: LD_ADDR_VAR 0 2
5839: PUSH
5840: DOUBLE
5841: LD_INT 1
5843: DEC
5844: ST_TO_ADDR
5845: LD_INT 3
5847: PUSH
5848: FOR_TO
5849: IFFALSE 5970
// begin hc_name :=  ;
5851: LD_ADDR_OWVAR 26
5855: PUSH
5856: LD_STRING 
5858: ST_TO_ADDR
// hc_gallery :=  ;
5859: LD_ADDR_OWVAR 33
5863: PUSH
5864: LD_STRING 
5866: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
5867: LD_INT 0
5869: PPUSH
5870: LD_EXP 44
5874: PPUSH
5875: CALL_OW 381
// human = CreateHuman ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: CALL_OW 44
5888: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5889: LD_ADDR_EXP 84
5893: PUSH
5894: LD_EXP 84
5898: PUSH
5899: LD_VAR 0 4
5903: ADD
5904: ST_TO_ADDR
// if i < 3 then
5905: LD_VAR 0 2
5909: PUSH
5910: LD_INT 3
5912: LESS
5913: IFFALSE 5932
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5915: LD_VAR 0 4
5919: PPUSH
5920: LD_INT 5
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: CALL_OW 49
5930: GO 5968
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5932: LD_INT 0
5934: PPUSH
5935: LD_EXP 44
5939: PPUSH
5940: CALL_OW 383
// human = CreateHuman ;
5944: LD_ADDR_VAR 0 4
5948: PUSH
5949: CALL_OW 44
5953: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
5954: LD_VAR 0 4
5958: PPUSH
5959: LD_VAR 0 3
5963: PPUSH
5964: CALL_OW 52
// end ; end ;
5968: GO 5848
5970: POP
5971: POP
// end ;
5972: LD_VAR 0 1
5976: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
5983: PPUSH
// uc_side := 1 ;
5984: LD_ADDR_OWVAR 20
5988: PUSH
5989: LD_INT 1
5991: ST_TO_ADDR
// uc_nation := 1 ;
5992: LD_ADDR_OWVAR 21
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// hc_name :=  ;
6000: LD_ADDR_OWVAR 26
6004: PUSH
6005: LD_STRING 
6007: ST_TO_ADDR
// hc_gallery :=  ;
6008: LD_ADDR_OWVAR 33
6012: PUSH
6013: LD_STRING 
6015: ST_TO_ADDR
// for i := 1 to soldiersAmount do
6016: LD_ADDR_VAR 0 6
6020: PUSH
6021: DOUBLE
6022: LD_INT 1
6024: DEC
6025: ST_TO_ADDR
6026: LD_VAR 0 1
6030: PUSH
6031: FOR_TO
6032: IFFALSE 6091
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6034: LD_INT 0
6036: PPUSH
6037: LD_EXP 44
6041: PPUSH
6042: CALL_OW 381
// un = CreateHuman ;
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: CALL_OW 44
6055: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6056: LD_ADDR_EXP 85
6060: PUSH
6061: LD_EXP 85
6065: PUSH
6066: LD_VAR 0 7
6070: ADD
6071: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6072: LD_VAR 0 7
6076: PPUSH
6077: LD_VAR 0 4
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// end ;
6089: GO 6031
6091: POP
6092: POP
// for i := 1 to scientistsAmount do
6093: LD_ADDR_VAR 0 6
6097: PUSH
6098: DOUBLE
6099: LD_INT 1
6101: DEC
6102: ST_TO_ADDR
6103: LD_VAR 0 2
6107: PUSH
6108: FOR_TO
6109: IFFALSE 6168
// begin PrepareScientist ( false , enemySkillLevel ) ;
6111: LD_INT 0
6113: PPUSH
6114: LD_EXP 44
6118: PPUSH
6119: CALL_OW 384
// un = CreateHuman ;
6123: LD_ADDR_VAR 0 7
6127: PUSH
6128: CALL_OW 44
6132: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6133: LD_ADDR_EXP 85
6137: PUSH
6138: LD_EXP 85
6142: PUSH
6143: LD_VAR 0 7
6147: ADD
6148: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6149: LD_VAR 0 7
6153: PPUSH
6154: LD_VAR 0 4
6158: PPUSH
6159: LD_INT 0
6161: PPUSH
6162: CALL_OW 49
// end ;
6166: GO 6108
6168: POP
6169: POP
// for i := 1 to vehiclesAmount do
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: DOUBLE
6176: LD_INT 1
6178: DEC
6179: ST_TO_ADDR
6180: LD_VAR 0 3
6184: PUSH
6185: FOR_TO
6186: IFFALSE 6352
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6188: LD_ADDR_OWVAR 40
6192: PUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 1
6209: PPUSH
6210: LD_INT 3
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6219: LD_ADDR_OWVAR 37
6223: PUSH
6224: LD_INT 3
6226: ST_TO_ADDR
// vc_control = control_manual ;
6227: LD_ADDR_OWVAR 38
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// vc_engine = engine_combustion ;
6235: LD_ADDR_OWVAR 39
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// veh = CreateVehicle ;
6243: LD_ADDR_VAR 0 8
6247: PUSH
6248: CALL_OW 45
6252: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6253: LD_ADDR_EXP 85
6257: PUSH
6258: LD_EXP 85
6262: PUSH
6263: LD_VAR 0 8
6267: ADD
6268: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6269: LD_VAR 0 8
6273: PPUSH
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 0
6281: PPUSH
6282: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6286: LD_INT 0
6288: PPUSH
6289: LD_EXP 44
6293: PPUSH
6294: CALL_OW 383
// un = CreateHuman ;
6298: LD_ADDR_VAR 0 7
6302: PUSH
6303: CALL_OW 44
6307: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6308: LD_ADDR_EXP 85
6312: PUSH
6313: LD_EXP 85
6317: PUSH
6318: LD_VAR 0 7
6322: ADD
6323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6324: LD_VAR 0 7
6328: PPUSH
6329: LD_VAR 0 8
6333: PPUSH
6334: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6338: LD_VAR 0 8
6342: PPUSH
6343: LD_INT 100
6345: PPUSH
6346: CALL_OW 240
// end ;
6350: GO 6185
6352: POP
6353: POP
// case area of NorthAmericanSpawnArea :
6354: LD_VAR 0 4
6358: PUSH
6359: LD_INT 7
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6378
6367: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6368: LD_ADDR_VAR 0 9
6372: PUSH
6373: LD_INT 10
6375: ST_TO_ADDR
6376: GO 6417
6378: LD_INT 9
6380: DOUBLE
6381: EQUAL
6382: IFTRUE 6386
6384: GO 6397
6386: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6387: LD_ADDR_VAR 0 9
6391: PUSH
6392: LD_INT 11
6394: ST_TO_ADDR
6395: GO 6417
6397: LD_INT 8
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6416
6405: POP
// road = SouthRoadArea2 ; end ;
6406: LD_ADDR_VAR 0 9
6410: PUSH
6411: LD_INT 12
6413: ST_TO_ADDR
6414: GO 6417
6416: POP
// MoveToBase ( amSupportTroops , road ) ;
6417: LD_EXP 85
6421: PPUSH
6422: LD_VAR 0 9
6426: PPUSH
6427: CALL 19023 0 2
// end ;
6431: LD_VAR 0 5
6435: RET
// export function PrepareAmericanPatrol ; var un ; begin
6436: LD_INT 0
6438: PPUSH
6439: PPUSH
// amPatrol = [ ] ;
6440: LD_ADDR_EXP 86
6444: PUSH
6445: EMPTY
6446: ST_TO_ADDR
// uc_side = 1 ;
6447: LD_ADDR_OWVAR 20
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// uc_nation = 1 ;
6455: LD_ADDR_OWVAR 21
6459: PUSH
6460: LD_INT 1
6462: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6463: LD_ADDR_VAR 0 2
6467: PUSH
6468: LD_STRING Campell
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL 7009 0 2
6478: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6479: LD_ADDR_EXP 86
6483: PUSH
6484: LD_EXP 86
6488: PUSH
6489: LD_VAR 0 2
6493: ADD
6494: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6495: LD_VAR 0 2
6499: PPUSH
6500: LD_INT 14
6502: PPUSH
6503: LD_INT 0
6505: PPUSH
6506: CALL_OW 49
// SetClass ( un , 1 ) ;
6510: LD_VAR 0 2
6514: PPUSH
6515: LD_INT 1
6517: PPUSH
6518: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6522: LD_INT 1
6524: PPUSH
6525: LD_EXP 44
6529: PPUSH
6530: CALL_OW 381
// un = CreateHuman ;
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: CALL_OW 44
6543: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6544: LD_ADDR_EXP 86
6548: PUSH
6549: LD_EXP 86
6553: PUSH
6554: LD_VAR 0 2
6558: ADD
6559: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6560: LD_VAR 0 2
6564: PPUSH
6565: LD_INT 14
6567: PPUSH
6568: LD_INT 0
6570: PPUSH
6571: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6575: LD_EXP 86
6579: PPUSH
6580: LD_EXP 56
6584: PPUSH
6585: CALL_OW 115
// end ; end_of_file
6589: LD_VAR 0 1
6593: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// northGroup = [ ] ;
6600: LD_ADDR_EXP 88
6604: PUSH
6605: EMPTY
6606: ST_TO_ADDR
// southGroup = [ ] ;
6607: LD_ADDR_EXP 89
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// uc_side = 2 ;
6614: LD_ADDR_OWVAR 20
6618: PUSH
6619: LD_INT 2
6621: ST_TO_ADDR
// uc_nation = 2 ;
6622: LD_ADDR_OWVAR 21
6626: PUSH
6627: LD_INT 2
6629: ST_TO_ADDR
// hc_name :=  ;
6630: LD_ADDR_OWVAR 26
6634: PUSH
6635: LD_STRING 
6637: ST_TO_ADDR
// hc_gallery :=  ;
6638: LD_ADDR_OWVAR 33
6642: PUSH
6643: LD_STRING 
6645: ST_TO_ADDR
// for i := 1 to 5 do
6646: LD_ADDR_VAR 0 2
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_INT 5
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6774
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6662: LD_INT 13
6664: PPUSH
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: LD_INT 26
6673: PPUSH
6674: LD_INT 100
6676: PPUSH
6677: CALL 37269 0 5
// veh = CreateVehicle ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: CALL_OW 45
6690: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6691: LD_ADDR_EXP 89
6695: PUSH
6696: LD_EXP 89
6700: PUSH
6701: LD_VAR 0 4
6705: ADD
6706: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6707: LD_VAR 0 4
6711: PPUSH
6712: LD_INT 23
6714: PPUSH
6715: LD_INT 0
6717: PPUSH
6718: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6722: LD_INT 0
6724: PPUSH
6725: LD_INT 8
6727: PPUSH
6728: CALL_OW 383
// un = CreateHuman ;
6732: LD_ADDR_VAR 0 3
6736: PUSH
6737: CALL_OW 44
6741: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6742: LD_ADDR_EXP 89
6746: PUSH
6747: LD_EXP 89
6751: PUSH
6752: LD_VAR 0 3
6756: ADD
6757: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6758: LD_VAR 0 3
6762: PPUSH
6763: LD_VAR 0 4
6767: PPUSH
6768: CALL_OW 52
// end ;
6772: GO 6659
6774: POP
6775: POP
// for i := 1 to 5 do
6776: LD_ADDR_VAR 0 2
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 5
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6845
// begin PrepareSoldier ( false , 8 ) ;
6792: LD_INT 0
6794: PPUSH
6795: LD_INT 8
6797: PPUSH
6798: CALL_OW 381
// un = CreateHuman ;
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: CALL_OW 44
6811: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6812: LD_ADDR_EXP 89
6816: PUSH
6817: LD_EXP 89
6821: PUSH
6822: LD_VAR 0 3
6826: ADD
6827: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6828: LD_VAR 0 3
6832: PPUSH
6833: LD_INT 23
6835: PPUSH
6836: LD_INT 0
6838: PPUSH
6839: CALL_OW 49
// end ;
6843: GO 6789
6845: POP
6846: POP
// for i := 1 to 10 do
6847: LD_ADDR_VAR 0 2
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_INT 10
6859: PUSH
6860: FOR_TO
6861: IFFALSE 7002
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6863: LD_INT 13
6865: PPUSH
6866: LD_INT 1
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: LD_INT 25
6874: PUSH
6875: LD_INT 27
6877: PUSH
6878: LD_INT 23
6880: PUSH
6881: LD_INT 26
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 4
6895: PPUSH
6896: CALL_OW 12
6900: ARRAY
6901: PPUSH
6902: LD_INT 100
6904: PPUSH
6905: CALL 37269 0 5
// veh = CreateVehicle ;
6909: LD_ADDR_VAR 0 4
6913: PUSH
6914: CALL_OW 45
6918: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6919: LD_ADDR_EXP 88
6923: PUSH
6924: LD_EXP 88
6928: PUSH
6929: LD_VAR 0 4
6933: ADD
6934: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 22
6942: PPUSH
6943: LD_INT 0
6945: PPUSH
6946: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6950: LD_INT 0
6952: PPUSH
6953: LD_INT 8
6955: PPUSH
6956: CALL_OW 383
// un = CreateHuman ;
6960: LD_ADDR_VAR 0 3
6964: PUSH
6965: CALL_OW 44
6969: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6970: LD_ADDR_EXP 88
6974: PUSH
6975: LD_EXP 88
6979: PUSH
6980: LD_VAR 0 3
6984: ADD
6985: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6986: LD_VAR 0 3
6990: PPUSH
6991: LD_VAR 0 4
6995: PPUSH
6996: CALL_OW 52
// end ;
7000: GO 6860
7002: POP
7003: POP
// end ; end_of_file
7004: LD_VAR 0 1
7008: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
7009: LD_INT 0
7011: PPUSH
7012: PPUSH
// if exist_mode then
7013: LD_VAR 0 2
7017: IFFALSE 7042
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: LD_EXP 37
7028: PUSH
7029: LD_VAR 0 1
7033: STR
7034: PPUSH
7035: CALL_OW 34
7039: ST_TO_ADDR
7040: GO 7057
// unit := NewCharacter ( ident ) ;
7042: LD_ADDR_VAR 0 4
7046: PUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 25
7056: ST_TO_ADDR
// result := unit ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_VAR 0 4
7066: ST_TO_ADDR
// end ;
7067: LD_VAR 0 3
7071: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
7072: LD_INT 0
7074: PPUSH
7075: PPUSH
7076: PPUSH
7077: PPUSH
// units = characters ;
7078: LD_ADDR_VAR 0 9
7082: PUSH
7083: LD_VAR 0 1
7087: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_VAR 0 9
7097: PUSH
7098: LD_EXP 50
7102: PUSH
7103: LD_EXP 51
7107: PUSH
7108: LD_EXP 52
7112: PUSH
7113: LD_EXP 53
7117: PUSH
7118: LD_EXP 54
7122: PUSH
7123: LD_EXP 55
7127: PUSH
7128: LD_EXP 56
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: DIFF
7142: ST_TO_ADDR
// if not units and not canTalkHero then
7143: LD_VAR 0 9
7147: NOT
7148: PUSH
7149: LD_VAR 0 5
7153: NOT
7154: AND
7155: IFFALSE 7159
// exit ;
7157: GO 7332
// if not units then
7159: LD_VAR 0 9
7163: NOT
7164: IFFALSE 7185
// units = characters diff [ Burlak ] ;
7166: LD_ADDR_VAR 0 9
7170: PUSH
7171: LD_VAR 0 1
7175: PUSH
7176: LD_EXP 50
7180: PUSH
7181: EMPTY
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not units and canTalkHero then
7185: LD_VAR 0 9
7189: NOT
7190: PUSH
7191: LD_VAR 0 5
7195: AND
7196: IFFALSE 7200
// exit ;
7198: GO 7332
// speaker := units [ rand ( 1 , units ) ] ;
7200: LD_ADDR_VAR 0 8
7204: PUSH
7205: LD_VAR 0 9
7209: PUSH
7210: LD_INT 1
7212: PPUSH
7213: LD_VAR 0 9
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: ST_TO_ADDR
// if radio then
7224: LD_VAR 0 4
7228: IFFALSE 7277
// begin if GetSex ( speaker ) = sex_male then
7230: LD_VAR 0 8
7234: PPUSH
7235: CALL_OW 258
7239: PUSH
7240: LD_INT 1
7242: EQUAL
7243: IFFALSE 7261
// SayRadio ( speaker , dialogMID ) else
7245: LD_VAR 0 8
7249: PPUSH
7250: LD_VAR 0 2
7254: PPUSH
7255: CALL_OW 94
7259: GO 7275
// SayRadio ( speaker , dialogFID ) ;
7261: LD_VAR 0 8
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL_OW 94
// end else
7275: GO 7322
// begin if GetSex ( speaker ) = sex_male then
7277: LD_VAR 0 8
7281: PPUSH
7282: CALL_OW 258
7286: PUSH
7287: LD_INT 1
7289: EQUAL
7290: IFFALSE 7308
// Say ( speaker , dialogMID ) else
7292: LD_VAR 0 8
7296: PPUSH
7297: LD_VAR 0 2
7301: PPUSH
7302: CALL_OW 88
7306: GO 7322
// Say ( speaker , dialogFID ) ;
7308: LD_VAR 0 8
7312: PPUSH
7313: LD_VAR 0 3
7317: PPUSH
7318: CALL_OW 88
// end ; result := speaker ;
7322: LD_ADDR_VAR 0 6
7326: PUSH
7327: LD_VAR 0 8
7331: ST_TO_ADDR
// end ;
7332: LD_VAR 0 6
7336: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7337: LD_INT 0
7339: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7340: LD_VAR 0 1
7344: PPUSH
7345: CALL_OW 255
7349: PUSH
7350: LD_VAR 0 3
7354: EQUAL
7355: PUSH
7356: LD_VAR 0 1
7360: PPUSH
7361: CALL_OW 302
7365: AND
7366: IFFALSE 7388
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7368: LD_VAR 0 1
7372: PPUSH
7373: LD_EXP 36
7377: PUSH
7378: LD_VAR 0 2
7382: STR
7383: PPUSH
7384: CALL_OW 38
// end ;
7388: LD_VAR 0 4
7392: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
// resultCharactersToSave = [ ] ;
7398: LD_ADDR_VAR 0 6
7402: PUSH
7403: EMPTY
7404: ST_TO_ADDR
// for unit in characters do
7405: LD_ADDR_VAR 0 5
7409: PUSH
7410: LD_VAR 0 1
7414: PUSH
7415: FOR_IN
7416: IFFALSE 7464
// if GetSide ( unit ) = side and IsOK ( unit ) then
7418: LD_VAR 0 5
7422: PPUSH
7423: CALL_OW 255
7427: PUSH
7428: LD_VAR 0 3
7432: EQUAL
7433: PUSH
7434: LD_VAR 0 5
7438: PPUSH
7439: CALL_OW 302
7443: AND
7444: IFFALSE 7462
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7446: LD_ADDR_VAR 0 6
7450: PUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_VAR 0 5
7460: ADD
7461: ST_TO_ADDR
7462: GO 7415
7464: POP
7465: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7466: LD_VAR 0 6
7470: PPUSH
7471: LD_EXP 36
7475: PUSH
7476: LD_VAR 0 2
7480: STR
7481: PPUSH
7482: CALL_OW 38
// end ;
7486: LD_VAR 0 4
7490: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
7495: PPUSH
7496: PPUSH
// charsToChoose = otherKirovUnits ;
7497: LD_ADDR_VAR 0 4
7501: PUSH
7502: LD_EXP 66
7506: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7507: LD_ADDR_VAR 0 4
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_EXP 59
7521: ADD
7522: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7523: LD_ADDR_VAR 0 4
7527: PUSH
7528: LD_VAR 0 4
7532: PUSH
7533: LD_EXP 57
7537: ADD
7538: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: LD_VAR 0 4
7548: PUSH
7549: LD_EXP 54
7553: ADD
7554: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7555: LD_ADDR_VAR 0 4
7559: PUSH
7560: LD_VAR 0 4
7564: PUSH
7565: LD_EXP 55
7569: ADD
7570: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7571: LD_ADDR_VAR 0 5
7575: PUSH
7576: LD_STRING text
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: LD_INT -5
7591: PUSH
7592: LD_EXP 50
7596: PUSH
7597: LD_EXP 51
7601: PUSH
7602: LD_EXP 53
7606: PUSH
7607: LD_EXP 52
7611: PUSH
7612: LD_INT -6
7614: PUSH
7615: LD_INT -2
7617: PUSH
7618: LD_INT -3
7620: PUSH
7621: LD_INT -5
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: PUSH
7635: LD_VAR 0 4
7639: ADD
7640: PUSH
7641: LD_INT -6
7643: PUSH
7644: LD_INT -4
7646: PUSH
7647: LD_EXP 62
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: ADD
7657: PPUSH
7658: LD_INT 1
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 4
7676: PUSH
7677: LD_INT 1
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 42
7694: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7695: LD_VAR 0 4
7699: PPUSH
7700: LD_INT 6
7702: PPUSH
7703: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7707: LD_VAR 0 5
7711: PPUSH
7712: LD_INT 3
7714: PPUSH
7715: CALL_OW 235
// SetSurvivorsArabianAttack ;
7719: CALL 5171 0 0
// MoveKurinUnitsToBuildings ;
7723: CALL 9261 0 0
// end ;
7727: LD_VAR 0 2
7731: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7732: LD_INT 0
7734: PPUSH
7735: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7736: LD_ADDR_VAR 0 5
7740: PUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 22
7748: PUSH
7749: LD_VAR 0 2
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 30
7770: PUSH
7771: LD_VAR 0 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 70
7789: PUSH
7790: FOR_IN
7791: IFFALSE 7824
// begin if UnitsInside ( building ) < 6 then
7793: LD_VAR 0 5
7797: PPUSH
7798: CALL_OW 313
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: IFFALSE 7822
// begin result = building ;
7808: LD_ADDR_VAR 0 4
7812: PUSH
7813: LD_VAR 0 5
7817: ST_TO_ADDR
// exit ;
7818: POP
7819: POP
7820: GO 7834
// end ; end ;
7822: GO 7790
7824: POP
7825: POP
// result = 0 ;
7826: LD_ADDR_VAR 0 4
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// end ;
7834: LD_VAR 0 4
7838: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7839: LD_INT 0
7841: PPUSH
7842: PPUSH
7843: PPUSH
7844: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 34
7852: PUSH
7853: LD_INT 71
7855: PUSH
7856: LD_INT 70
7858: PUSH
7859: LD_INT 69
7861: PUSH
7862: LD_INT 39
7864: PUSH
7865: LD_INT 31
7867: PUSH
7868: LD_INT 14
7870: PUSH
7871: LD_INT 10
7873: PUSH
7874: LD_INT 40
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: ST_TO_ADDR
// resultWeapons = [ ] ;
7888: LD_ADDR_VAR 0 5
7892: PUSH
7893: EMPTY
7894: ST_TO_ADDR
// for i := 1 to weaponTechs do
7895: LD_ADDR_VAR 0 4
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_VAR 0 6
7909: PUSH
7910: FOR_TO
7911: IFFALSE 8098
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7913: LD_VAR 0 6
7917: PUSH
7918: LD_VAR 0 4
7922: ARRAY
7923: PPUSH
7924: LD_VAR 0 2
7928: PPUSH
7929: CALL_OW 482
7933: PUSH
7934: LD_VAR 0 6
7938: PUSH
7939: LD_VAR 0 4
7943: ARRAY
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 321
7954: PUSH
7955: LD_INT 2
7957: EQUAL
7958: AND
7959: IFFALSE 8096
// case nation of nation_american :
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 1
7968: DOUBLE
7969: EQUAL
7970: IFTRUE 7974
7972: GO 8009
7974: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7975: LD_ADDR_VAR 0 5
7979: PUSH
7980: LD_VAR 0 5
7984: PUSH
7985: LD_VAR 0 6
7989: PUSH
7990: LD_VAR 0 4
7994: ARRAY
7995: PPUSH
7996: LD_VAR 0 2
8000: PPUSH
8001: CALL 8115 0 2
8005: ADD
8006: ST_TO_ADDR
8007: GO 8096
8009: LD_INT 2
8011: DOUBLE
8012: EQUAL
8013: IFTRUE 8017
8015: GO 8052
8017: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
8018: LD_ADDR_VAR 0 5
8022: PUSH
8023: LD_VAR 0 5
8027: PUSH
8028: LD_VAR 0 6
8032: PUSH
8033: LD_VAR 0 4
8037: ARRAY
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL 8115 0 2
8048: ADD
8049: ST_TO_ADDR
8050: GO 8096
8052: LD_INT 3
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8095
8060: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
8061: LD_ADDR_VAR 0 5
8065: PUSH
8066: LD_VAR 0 5
8070: PUSH
8071: LD_VAR 0 6
8075: PUSH
8076: LD_VAR 0 4
8080: ARRAY
8081: PPUSH
8082: LD_VAR 0 2
8086: PPUSH
8087: CALL 8115 0 2
8091: ADD
8092: ST_TO_ADDR
8093: GO 8096
8095: POP
// end ;
8096: GO 7910
8098: POP
8099: POP
// result = resultWeapons ;
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_VAR 0 5
8109: ST_TO_ADDR
// end ;
8110: LD_VAR 0 3
8114: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8115: LD_INT 0
8117: PPUSH
// case tech of tech_AdvMet :
8118: LD_VAR 0 1
8122: PUSH
8123: LD_INT 34
8125: DOUBLE
8126: EQUAL
8127: IFTRUE 8131
8129: GO 8159
8131: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8132: LD_ADDR_VAR 0 3
8136: PUSH
8137: LD_INT 6
8139: PUSH
8140: LD_STRING 
8142: PUSH
8143: LD_INT 46
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: PUSH
8151: LD_VAR 0 2
8155: ARRAY
8156: ST_TO_ADDR
8157: GO 8448
8159: LD_INT 71
8161: DOUBLE
8162: EQUAL
8163: IFTRUE 8167
8165: GO 8195
8167: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8168: LD_ADDR_VAR 0 3
8172: PUSH
8173: LD_STRING 
8175: PUSH
8176: LD_STRING 
8178: PUSH
8179: LD_INT 47
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: LD_VAR 0 2
8191: ARRAY
8192: ST_TO_ADDR
8193: GO 8448
8195: LD_INT 70
8197: DOUBLE
8198: EQUAL
8199: IFTRUE 8203
8201: GO 8231
8203: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8204: LD_ADDR_VAR 0 3
8208: PUSH
8209: LD_STRING 
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_STRING 
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: LD_VAR 0 2
8227: ARRAY
8228: ST_TO_ADDR
8229: GO 8448
8231: LD_INT 69
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8267
8239: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: LD_INT 4
8247: PUSH
8248: LD_INT 25
8250: PUSH
8251: LD_INT 43
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PUSH
8259: LD_VAR 0 2
8263: ARRAY
8264: ST_TO_ADDR
8265: GO 8448
8267: LD_INT 39
8269: DOUBLE
8270: EQUAL
8271: IFTRUE 8275
8273: GO 8303
8275: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 5
8283: PUSH
8284: LD_INT 27
8286: PUSH
8287: LD_INT 44
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: PUSH
8295: LD_VAR 0 2
8299: ARRAY
8300: ST_TO_ADDR
8301: GO 8448
8303: LD_INT 31
8305: DOUBLE
8306: EQUAL
8307: IFTRUE 8311
8309: GO 8339
8311: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8312: LD_ADDR_VAR 0 3
8316: PUSH
8317: LD_STRING 
8319: PUSH
8320: LD_STRING 
8322: PUSH
8323: LD_INT 49
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: PUSH
8331: LD_VAR 0 2
8335: ARRAY
8336: ST_TO_ADDR
8337: GO 8448
8339: LD_INT 14
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8375
8347: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8348: LD_ADDR_VAR 0 3
8352: PUSH
8353: LD_INT 10
8355: PUSH
8356: LD_STRING 
8358: PUSH
8359: LD_STRING 
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: LD_VAR 0 2
8371: ARRAY
8372: ST_TO_ADDR
8373: GO 8448
8375: LD_INT 10
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8411
8383: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8384: LD_ADDR_VAR 0 3
8388: PUSH
8389: LD_INT 9
8391: PUSH
8392: LD_STRING 
8394: PUSH
8395: LD_STRING 
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: PUSH
8403: LD_VAR 0 2
8407: ARRAY
8408: ST_TO_ADDR
8409: GO 8448
8411: LD_INT 40
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8447
8419: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8420: LD_ADDR_VAR 0 3
8424: PUSH
8425: LD_INT 7
8427: PUSH
8428: LD_INT 28
8430: PUSH
8431: LD_INT 45
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: LIST
8438: PUSH
8439: LD_VAR 0 2
8443: ARRAY
8444: ST_TO_ADDR
8445: GO 8448
8447: POP
// end ;
8448: LD_VAR 0 3
8452: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8453: LD_INT 0
8455: PPUSH
8456: PPUSH
// for veh in units do
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_VAR 0 1
8466: PUSH
8467: FOR_IN
8468: IFFALSE 8546
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8470: LD_VAR 0 4
8474: PPUSH
8475: CALL_OW 247
8479: PUSH
8480: LD_INT 2
8482: EQUAL
8483: PUSH
8484: LD_VAR 0 4
8488: PPUSH
8489: CALL_OW 261
8493: PUSH
8494: LD_INT 100
8496: LESS
8497: AND
8498: IFFALSE 8544
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8500: LD_VAR 0 4
8504: PPUSH
8505: LD_STRING X
8507: PUSH
8508: LD_INT 0
8510: PUSH
8511: LD_INT 0
8513: PUSH
8514: LD_VAR 0 2
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: LD_INT 0
8524: PUSH
8525: LD_INT 0
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: PPUSH
8540: CALL_OW 446
// end ;
8544: GO 8467
8546: POP
8547: POP
// end ;
8548: LD_VAR 0 3
8552: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8553: LD_INT 0
8555: PPUSH
8556: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8557: LD_ADDR_VAR 0 4
8561: PUSH
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 254
8571: PUSH
8572: LD_INT 3
8574: MINUS
8575: ST_TO_ADDR
// if dir < 0 then
8576: LD_VAR 0 4
8580: PUSH
8581: LD_INT 0
8583: LESS
8584: IFFALSE 8600
// dir := 6 + dir ;
8586: LD_ADDR_VAR 0 4
8590: PUSH
8591: LD_INT 6
8593: PUSH
8594: LD_VAR 0 4
8598: PLUS
8599: ST_TO_ADDR
// SetDir ( un , dir ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_VAR 0 4
8609: PPUSH
8610: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_VAR 0 2
8623: PPUSH
8624: CALL_OW 52
// result = un ;
8628: LD_ADDR_VAR 0 3
8632: PUSH
8633: LD_VAR 0 1
8637: ST_TO_ADDR
// end ;
8638: LD_VAR 0 3
8642: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
8647: PPUSH
// uc_side := GetSide ( b ) ;
8648: LD_ADDR_OWVAR 20
8652: PUSH
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 255
8662: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 248
8677: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8678: LD_INT 0
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: CALL_OW 380
// un = CreateHuman ;
8693: LD_ADDR_VAR 0 4
8697: PUSH
8698: CALL_OW 44
8702: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8703: LD_ADDR_VAR 0 5
8707: PUSH
8708: LD_VAR 0 2
8712: PPUSH
8713: CALL_OW 254
8717: PUSH
8718: LD_INT 3
8720: MINUS
8721: ST_TO_ADDR
// if dir < 0 then
8722: LD_VAR 0 5
8726: PUSH
8727: LD_INT 0
8729: LESS
8730: IFFALSE 8746
// dir := 6 + dir ;
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_INT 6
8739: PUSH
8740: LD_VAR 0 5
8744: PLUS
8745: ST_TO_ADDR
// SetDir ( un , dir ) ;
8746: LD_VAR 0 4
8750: PPUSH
8751: LD_VAR 0 5
8755: PPUSH
8756: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8760: LD_VAR 0 4
8764: PPUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 52
// result = un ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_VAR 0 4
8783: ST_TO_ADDR
// end ;
8784: LD_VAR 0 3
8788: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8789: LD_INT 0
8791: PPUSH
8792: PPUSH
8793: PPUSH
8794: PPUSH
8795: PPUSH
// for building in buildings do
8796: LD_ADDR_VAR 0 5
8800: PUSH
8801: LD_VAR 0 2
8805: PUSH
8806: FOR_IN
8807: IFFALSE 8899
// begin x = GetX ( building ) ;
8809: LD_ADDR_VAR 0 6
8813: PUSH
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL_OW 250
8823: ST_TO_ADDR
// y = GetY ( building ) ;
8824: LD_ADDR_VAR 0 7
8828: PUSH
8829: LD_VAR 0 5
8833: PPUSH
8834: CALL_OW 251
8838: ST_TO_ADDR
// dir = GetDir ( building ) ;
8839: LD_ADDR_VAR 0 8
8843: PUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: CALL_OW 254
8853: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8868: LD_VAR 0 1
8872: PPUSH
8873: LD_VAR 0 3
8877: PPUSH
8878: LD_VAR 0 6
8882: PPUSH
8883: LD_VAR 0 7
8887: PPUSH
8888: LD_VAR 0 8
8892: PPUSH
8893: CALL_OW 205
// end ;
8897: GO 8806
8899: POP
8900: POP
// end ;
8901: LD_VAR 0 4
8905: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8906: LD_INT 0
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 48
8921: PUSH
8922: LD_INT 49
8924: PUSH
8925: LD_INT 50
8927: PUSH
8928: LD_INT 20
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: LD_INT 51
8936: PUSH
8937: LD_INT 52
8939: PUSH
8940: LD_INT 69
8942: PUSH
8943: LD_INT 39
8945: PUSH
8946: LD_INT 34
8948: PUSH
8949: LD_INT 40
8951: PUSH
8952: LD_INT 53
8954: PUSH
8955: LD_INT 71
8957: PUSH
8958: LD_INT 57
8960: PUSH
8961: LD_INT 58
8963: PUSH
8964: LD_INT 44
8966: PUSH
8967: LD_INT 32
8969: PUSH
8970: LD_INT 27
8972: PUSH
8973: LD_INT 23
8975: PUSH
8976: LD_INT 33
8978: PUSH
8979: LD_INT 59
8981: PUSH
8982: LD_INT 54
8984: PUSH
8985: LD_INT 55
8987: PUSH
8988: LD_INT 56
8990: PUSH
8991: LD_INT 63
8993: PUSH
8994: LD_INT 64
8996: PUSH
8997: LD_INT 65
8999: PUSH
9000: LD_INT 30
9002: PUSH
9003: LD_INT 31
9005: PUSH
9006: LD_INT 21
9008: PUSH
9009: LD_INT 22
9011: PUSH
9012: LD_INT 25
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
9049: LD_ADDR_VAR 0 9
9053: PUSH
9054: LD_INT 1
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: CALL 32468 0 3
9067: ST_TO_ADDR
// for i = 1 to ru_tech_list do
9068: LD_ADDR_VAR 0 5
9072: PUSH
9073: DOUBLE
9074: LD_INT 1
9076: DEC
9077: ST_TO_ADDR
9078: LD_VAR 0 8
9082: PUSH
9083: FOR_TO
9084: IFFALSE 9160
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
9086: LD_VAR 0 8
9090: PUSH
9091: LD_VAR 0 5
9095: ARRAY
9096: PPUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 321
9106: PUSH
9107: LD_INT 1
9109: EQUAL
9110: PUSH
9111: LD_VAR 0 8
9115: PUSH
9116: LD_VAR 0 5
9120: ARRAY
9121: PPUSH
9122: LD_VAR 0 3
9126: PPUSH
9127: CALL_OW 482
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: IFFALSE 9158
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9138: LD_VAR 0 2
9142: PPUSH
9143: LD_VAR 0 8
9147: PUSH
9148: LD_VAR 0 5
9152: ARRAY
9153: PPUSH
9154: CALL_OW 184
9158: GO 9083
9160: POP
9161: POP
// for i = 1 to am_tech_list do
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: DOUBLE
9168: LD_INT 1
9170: DEC
9171: ST_TO_ADDR
9172: LD_VAR 0 9
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9254
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9180: LD_VAR 0 9
9184: PUSH
9185: LD_VAR 0 5
9189: ARRAY
9190: PPUSH
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL_OW 321
9200: PUSH
9201: LD_INT 1
9203: EQUAL
9204: PUSH
9205: LD_VAR 0 9
9209: PUSH
9210: LD_VAR 0 5
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 3
9220: PPUSH
9221: CALL_OW 482
9225: PUSH
9226: LD_INT 1
9228: EQUAL
9229: AND
9230: IFFALSE 9252
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9232: LD_VAR 0 2
9236: PPUSH
9237: LD_VAR 0 9
9241: PUSH
9242: LD_VAR 0 5
9246: ARRAY
9247: PPUSH
9248: CALL_OW 184
9252: GO 9177
9254: POP
9255: POP
// end ;
9256: LD_VAR 0 4
9260: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9261: LD_INT 0
9263: PPUSH
9264: PPUSH
9265: PPUSH
9266: PPUSH
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9272: LD_ADDR_VAR 0 3
9276: PUSH
9277: LD_INT 22
9279: PUSH
9280: LD_INT 6
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 3
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 30
9299: PUSH
9300: LD_INT 6
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PUSH
9317: LD_INT 1
9319: ARRAY
9320: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9321: LD_ADDR_VAR 0 4
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 6
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 3
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 30
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: PUSH
9366: LD_INT 1
9368: ARRAY
9369: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9370: LD_ADDR_VAR 0 9
9374: PUSH
9375: LD_VAR 0 9
9379: PUSH
9380: LD_EXP 62
9384: ADD
9385: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9386: LD_ADDR_VAR 0 9
9390: PUSH
9391: LD_VAR 0 9
9395: PUSH
9396: LD_EXP 80
9400: ADD
9401: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9402: LD_ADDR_VAR 0 9
9406: PUSH
9407: LD_VAR 0 9
9411: PUSH
9412: LD_EXP 72
9416: ADD
9417: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9418: LD_ADDR_VAR 0 8
9422: PUSH
9423: LD_INT 18
9425: PPUSH
9426: LD_INT 22
9428: PUSH
9429: LD_INT 6
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: LD_INT 60
9451: PUSH
9452: EMPTY
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: PPUSH
9464: CALL_OW 70
9468: PUSH
9469: LD_VAR 0 9
9473: DIFF
9474: ST_TO_ADDR
// if not canTakeUnits then
9475: LD_VAR 0 8
9479: NOT
9480: IFFALSE 9513
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9482: LD_ADDR_EXP 82
9486: PUSH
9487: LD_EXP 82
9491: PPUSH
9492: LD_INT 4
9494: PPUSH
9495: LD_EXP 82
9499: PUSH
9500: LD_INT 3
9502: ARRAY
9503: PUSH
9504: LD_INT 2
9506: PLUS
9507: PPUSH
9508: CALL_OW 1
9512: ST_TO_ADDR
// if canTakeUnits > 2 then
9513: LD_VAR 0 8
9517: PUSH
9518: LD_INT 2
9520: GREATER
9521: IFFALSE 9591
// begin for i := 1 to rand ( 1 , 2 ) do
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: DOUBLE
9529: LD_INT 1
9531: DEC
9532: ST_TO_ADDR
9533: LD_INT 1
9535: PPUSH
9536: LD_INT 2
9538: PPUSH
9539: CALL_OW 12
9543: PUSH
9544: FOR_TO
9545: IFFALSE 9587
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9547: LD_VAR 0 8
9551: PUSH
9552: LD_VAR 0 2
9556: ARRAY
9557: PPUSH
9558: LD_VAR 0 3
9562: PPUSH
9563: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9567: LD_VAR 0 8
9571: PUSH
9572: LD_VAR 0 2
9576: ARRAY
9577: PPUSH
9578: LD_INT 4
9580: PPUSH
9581: CALL_OW 183
// end ;
9585: GO 9544
9587: POP
9588: POP
// end else
9589: GO 9659
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 1
9603: PPUSH
9604: LD_VAR 0 8
9608: PPUSH
9609: CALL_OW 12
9613: PUSH
9614: FOR_TO
9615: IFFALSE 9657
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9617: LD_VAR 0 8
9621: PUSH
9622: LD_VAR 0 2
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 3
9632: PPUSH
9633: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9637: LD_VAR 0 8
9641: PUSH
9642: LD_VAR 0 2
9646: ARRAY
9647: PPUSH
9648: LD_INT 4
9650: PPUSH
9651: CALL_OW 183
// end ;
9655: GO 9614
9657: POP
9658: POP
// end ; wait ( 0 0$01 ) ;
9659: LD_INT 35
9661: PPUSH
9662: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9666: LD_ADDR_VAR 0 8
9670: PUSH
9671: LD_INT 18
9673: PPUSH
9674: LD_INT 22
9676: PUSH
9677: LD_INT 6
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: LD_INT 60
9699: PUSH
9700: EMPTY
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: PUSH
9717: LD_VAR 0 9
9721: DIFF
9722: ST_TO_ADDR
// pom = 6 ;
9723: LD_ADDR_VAR 0 7
9727: PUSH
9728: LD_INT 6
9730: ST_TO_ADDR
// if canTakeUnits then
9731: LD_VAR 0 8
9735: IFFALSE 9852
// for i = 1 to canTakeUnits do
9737: LD_ADDR_VAR 0 2
9741: PUSH
9742: DOUBLE
9743: LD_INT 1
9745: DEC
9746: ST_TO_ADDR
9747: LD_VAR 0 8
9751: PUSH
9752: FOR_TO
9753: IFFALSE 9850
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9755: LD_VAR 0 8
9759: PUSH
9760: LD_VAR 0 2
9764: ARRAY
9765: PPUSH
9766: CALL_OW 257
9770: PUSH
9771: LD_INT 3
9773: NONEQUAL
9774: IFFALSE 9814
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9776: LD_VAR 0 8
9780: PUSH
9781: LD_VAR 0 2
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9796: LD_VAR 0 8
9800: PUSH
9801: LD_VAR 0 2
9805: ARRAY
9806: PPUSH
9807: LD_INT 3
9809: PPUSH
9810: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9814: LD_VAR 0 8
9818: PUSH
9819: LD_VAR 0 2
9823: ARRAY
9824: PPUSH
9825: LD_VAR 0 4
9829: PPUSH
9830: CALL_OW 120
// pom = pom - 1 ;
9834: LD_ADDR_VAR 0 7
9838: PUSH
9839: LD_VAR 0 7
9843: PUSH
9844: LD_INT 1
9846: MINUS
9847: ST_TO_ADDR
// end ;
9848: GO 9752
9850: POP
9851: POP
// if pom > 0 then
9852: LD_VAR 0 7
9856: PUSH
9857: LD_INT 0
9859: GREATER
9860: IFFALSE 9885
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9862: LD_ADDR_EXP 82
9866: PUSH
9867: LD_EXP 82
9871: PPUSH
9872: LD_INT 3
9874: PPUSH
9875: LD_VAR 0 7
9879: PPUSH
9880: CALL_OW 1
9884: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9885: LD_INT 35
9887: PPUSH
9888: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9892: LD_ADDR_VAR 0 5
9896: PUSH
9897: LD_INT 22
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 32
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 3
9929: PUSH
9930: LD_INT 59
9932: PUSH
9933: EMPTY
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: PPUSH
9946: CALL_OW 69
9950: PUSH
9951: FOR_IN
9952: IFFALSE 10198
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9954: LD_ADDR_VAR 0 8
9958: PUSH
9959: LD_INT 18
9961: PPUSH
9962: LD_INT 22
9964: PUSH
9965: LD_INT 6
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 3
9984: PUSH
9985: LD_INT 60
9987: PUSH
9988: EMPTY
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 70
10004: PUSH
10005: LD_VAR 0 9
10009: DIFF
10010: ST_TO_ADDR
// if canTakeUnits then
10011: LD_VAR 0 8
10015: IFFALSE 10149
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
10017: LD_VAR 0 8
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: PPUSH
10026: CALL_OW 257
10030: PUSH
10031: LD_INT 1
10033: NONEQUAL
10034: IFFALSE 10129
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
10036: LD_VAR 0 8
10040: PUSH
10041: LD_INT 1
10043: ARRAY
10044: PPUSH
10045: LD_INT 22
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 3
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 30
10067: PUSH
10068: LD_INT 5
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: PUSH
10085: LD_INT 1
10087: ARRAY
10088: PPUSH
10089: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
10093: LD_VAR 0 8
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10109: LD_VAR 0 8
10113: PUSH
10114: LD_INT 1
10116: ARRAY
10117: PPUSH
10118: CALL_OW 182
// wait ( 0 0$1 ) ;
10122: LD_INT 35
10124: PPUSH
10125: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10129: LD_VAR 0 8
10133: PUSH
10134: LD_INT 1
10136: ARRAY
10137: PPUSH
10138: LD_VAR 0 5
10142: PPUSH
10143: CALL_OW 120
// end else
10147: GO 10196
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10149: LD_ADDR_EXP 74
10153: PUSH
10154: LD_EXP 74
10158: PUSH
10159: LD_VAR 0 5
10163: ADD
10164: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10165: LD_ADDR_EXP 82
10169: PUSH
10170: LD_EXP 82
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: LD_EXP 82
10182: PUSH
10183: LD_INT 1
10185: ARRAY
10186: PUSH
10187: LD_INT 1
10189: PLUS
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
// end ; end ;
10196: GO 9951
10198: POP
10199: POP
// end ;
10200: LD_VAR 0 1
10204: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10205: LD_INT 0
10207: PPUSH
10208: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_VAR 0 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 50
10228: PUSH
10229: EMPTY
10230: LIST
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: LD_INT 21
10237: PUSH
10238: LD_INT 1
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 21
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: PPUSH
10270: LD_VAR 0 1
10274: PPUSH
10275: CALL_OW 74
10279: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_VAR 0 1
10289: PPUSH
10290: CALL_OW 296
10294: PUSH
10295: LD_INT 13
10297: LESS
10298: IFFALSE 10310
// begin result = true ;
10300: LD_ADDR_VAR 0 3
10304: PUSH
10305: LD_INT 1
10307: ST_TO_ADDR
// exit ;
10308: GO 10318
// end ; result = false ;
10310: LD_ADDR_VAR 0 3
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// end ;
10318: LD_VAR 0 3
10322: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10323: LD_INT 0
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10337: LD_VAR 0 1
10341: PPUSH
10342: CALL_OW 302
10346: NOT
10347: PUSH
10348: LD_VAR 0 4
10352: PUSH
10353: LD_INT 1
10355: EQUAL
10356: OR
10357: PUSH
10358: LD_VAR 0 2
10362: PPUSH
10363: LD_VAR 0 3
10367: PPUSH
10368: CALL_OW 488
10372: NOT
10373: OR
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: LD_VAR 0 2
10384: PPUSH
10385: LD_VAR 0 3
10389: PPUSH
10390: CALL_OW 297
10394: PUSH
10395: LD_VAR 0 4
10399: GREATEREQUAL
10400: OR
10401: PUSH
10402: LD_VAR 0 5
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 0
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: IN
10417: NOT
10418: OR
10419: IFFALSE 10423
// exit ;
10421: GO 11980
// attempts = 0 ;
10423: LD_ADDR_VAR 0 17
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10431: LD_ADDR_VAR 0 7
10435: PUSH
10436: EMPTY
10437: ST_TO_ADDR
// list_coords = [ ] ;
10438: LD_ADDR_VAR 0 8
10442: PUSH
10443: EMPTY
10444: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 2
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_VAR 0 1
10464: PPUSH
10465: CALL_OW 250
10469: PPUSH
10470: LD_VAR 0 1
10474: PPUSH
10475: CALL_OW 251
10479: PPUSH
10480: CALL 11985 0 4
10484: ST_TO_ADDR
// if attempts = 0 then
10485: LD_VAR 0 17
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: IFFALSE 10601
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10495: LD_ADDR_VAR 0 10
10499: PUSH
10500: LD_VAR 0 9
10504: PUSH
10505: LD_VAR 0 9
10509: PUSH
10510: LD_INT 1
10512: PLUS
10513: PUSH
10514: LD_VAR 0 9
10518: PUSH
10519: LD_INT 1
10521: MINUS
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10528: LD_VAR 0 10
10532: PUSH
10533: LD_INT 2
10535: ARRAY
10536: PUSH
10537: LD_INT 6
10539: EQUAL
10540: IFFALSE 10563
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10542: LD_ADDR_VAR 0 10
10546: PUSH
10547: LD_VAR 0 10
10551: PPUSH
10552: LD_INT 2
10554: PPUSH
10555: LD_INT 0
10557: PPUSH
10558: CALL_OW 1
10562: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10563: LD_VAR 0 10
10567: PUSH
10568: LD_INT 3
10570: ARRAY
10571: PUSH
10572: LD_INT 1
10574: NEG
10575: EQUAL
10576: IFFALSE 10599
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10578: LD_ADDR_VAR 0 10
10582: PUSH
10583: LD_VAR 0 10
10587: PPUSH
10588: LD_INT 3
10590: PPUSH
10591: LD_INT 5
10593: PPUSH
10594: CALL_OW 1
10598: ST_TO_ADDR
// end else
10599: GO 10638
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10601: LD_ADDR_VAR 0 10
10605: PUSH
10606: LD_INT 0
10608: PUSH
10609: LD_INT 1
10611: PUSH
10612: LD_INT 2
10614: PUSH
10615: LD_INT 3
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: LD_INT 5
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: PUSH
10632: LD_VAR 0 9
10636: DIFF
10637: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10638: LD_ADDR_VAR 0 14
10642: PUSH
10643: DOUBLE
10644: LD_INT 1
10646: DEC
10647: ST_TO_ADDR
10648: LD_VAR 0 10
10652: PUSH
10653: LD_INT 0
10655: PLUS
10656: PUSH
10657: FOR_TO
10658: IFFALSE 10980
// case dir_list [ c ] of 0 :
10660: LD_VAR 0 10
10664: PUSH
10665: LD_VAR 0 14
10669: ARRAY
10670: PUSH
10671: LD_INT 0
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10720
10679: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10680: LD_ADDR_VAR 0 8
10684: PUSH
10685: LD_VAR 0 8
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_VAR 0 2
10697: PUSH
10698: LD_VAR 0 3
10702: PUSH
10703: LD_VAR 0 4
10707: MINUS
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 2
10717: ST_TO_ADDR
10718: GO 10978
10720: LD_INT 1
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10769
10728: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10729: LD_ADDR_VAR 0 8
10733: PUSH
10734: LD_VAR 0 8
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: LD_VAR 0 2
10746: PUSH
10747: LD_VAR 0 4
10751: PLUS
10752: PUSH
10753: LD_VAR 0 3
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 2
10766: ST_TO_ADDR
10767: GO 10978
10769: LD_INT 2
10771: DOUBLE
10772: EQUAL
10773: IFTRUE 10777
10775: GO 10824
10777: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10778: LD_ADDR_VAR 0 8
10782: PUSH
10783: LD_VAR 0 8
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: LD_VAR 0 2
10795: PUSH
10796: LD_VAR 0 4
10800: PLUS
10801: PUSH
10802: LD_VAR 0 3
10806: PUSH
10807: LD_VAR 0 4
10811: PLUS
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 2
10821: ST_TO_ADDR
10822: GO 10978
10824: LD_INT 3
10826: DOUBLE
10827: EQUAL
10828: IFTRUE 10832
10830: GO 10873
10832: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10833: LD_ADDR_VAR 0 8
10837: PUSH
10838: LD_VAR 0 8
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: LD_VAR 0 2
10850: PUSH
10851: LD_VAR 0 3
10855: PUSH
10856: LD_VAR 0 4
10860: PLUS
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PPUSH
10866: CALL_OW 2
10870: ST_TO_ADDR
10871: GO 10978
10873: LD_INT 4
10875: DOUBLE
10876: EQUAL
10877: IFTRUE 10881
10879: GO 10922
10881: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10882: LD_ADDR_VAR 0 8
10886: PUSH
10887: LD_VAR 0 8
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: LD_VAR 0 2
10899: PUSH
10900: LD_VAR 0 4
10904: MINUS
10905: PUSH
10906: LD_VAR 0 3
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 2
10919: ST_TO_ADDR
10920: GO 10978
10922: LD_INT 5
10924: DOUBLE
10925: EQUAL
10926: IFTRUE 10930
10928: GO 10977
10930: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10931: LD_ADDR_VAR 0 8
10935: PUSH
10936: LD_VAR 0 8
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: LD_VAR 0 2
10948: PUSH
10949: LD_VAR 0 4
10953: MINUS
10954: PUSH
10955: LD_VAR 0 3
10959: PUSH
10960: LD_VAR 0 4
10964: MINUS
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PPUSH
10970: CALL_OW 2
10974: ST_TO_ADDR
10975: GO 10978
10977: POP
10978: GO 10657
10980: POP
10981: POP
// if dist < 30 then
10982: LD_VAR 0 4
10986: PUSH
10987: LD_INT 30
10989: LESS
10990: IFFALSE 11002
// c = 1 else
10992: LD_ADDR_VAR 0 14
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
11000: GO 11010
// c = 2 ;
11002: LD_ADDR_VAR 0 14
11006: PUSH
11007: LD_INT 2
11009: ST_TO_ADDR
// b = 1 ;
11010: LD_ADDR_VAR 0 11
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// while b <= ( dist - 1 ) do
11018: LD_VAR 0 11
11022: PUSH
11023: LD_VAR 0 4
11027: PUSH
11028: LD_INT 1
11030: MINUS
11031: LESSEQUAL
11032: IFFALSE 11460
// begin if 0 in dir_list and 1 in dir_list then
11034: LD_INT 0
11036: PUSH
11037: LD_VAR 0 10
11041: IN
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: LD_VAR 0 10
11050: IN
11051: AND
11052: IFFALSE 11104
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
11054: LD_ADDR_VAR 0 8
11058: PUSH
11059: LD_VAR 0 8
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: LD_VAR 0 2
11071: PUSH
11072: LD_VAR 0 11
11076: PLUS
11077: PUSH
11078: LD_VAR 0 3
11082: PUSH
11083: LD_VAR 0 4
11087: MINUS
11088: PUSH
11089: LD_VAR 0 11
11093: PLUS
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 2
11103: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11104: LD_INT 1
11106: PUSH
11107: LD_VAR 0 10
11111: IN
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: LD_VAR 0 10
11120: IN
11121: AND
11122: IFFALSE 11168
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11124: LD_ADDR_VAR 0 8
11128: PUSH
11129: LD_VAR 0 8
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: LD_VAR 0 2
11141: PUSH
11142: LD_VAR 0 4
11146: PLUS
11147: PUSH
11148: LD_VAR 0 3
11152: PUSH
11153: LD_VAR 0 11
11157: PLUS
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 2
11167: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11168: LD_INT 2
11170: PUSH
11171: LD_VAR 0 10
11175: IN
11176: PUSH
11177: LD_INT 3
11179: PUSH
11180: LD_VAR 0 10
11184: IN
11185: AND
11186: IFFALSE 11238
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11188: LD_ADDR_VAR 0 8
11192: PUSH
11193: LD_VAR 0 8
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: LD_VAR 0 2
11205: PUSH
11206: LD_VAR 0 4
11210: PLUS
11211: PUSH
11212: LD_VAR 0 11
11216: MINUS
11217: PUSH
11218: LD_VAR 0 3
11222: PUSH
11223: LD_VAR 0 4
11227: PLUS
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 2
11237: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11238: LD_INT 3
11240: PUSH
11241: LD_VAR 0 10
11245: IN
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_VAR 0 10
11254: IN
11255: AND
11256: IFFALSE 11308
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11258: LD_ADDR_VAR 0 8
11262: PUSH
11263: LD_VAR 0 8
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: LD_VAR 0 2
11275: PUSH
11276: LD_VAR 0 11
11280: MINUS
11281: PUSH
11282: LD_VAR 0 3
11286: PUSH
11287: LD_VAR 0 4
11291: PLUS
11292: PUSH
11293: LD_VAR 0 11
11297: MINUS
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 2
11307: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11308: LD_INT 4
11310: PUSH
11311: LD_VAR 0 10
11315: IN
11316: PUSH
11317: LD_INT 5
11319: PUSH
11320: LD_VAR 0 10
11324: IN
11325: AND
11326: IFFALSE 11372
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11328: LD_ADDR_VAR 0 8
11332: PUSH
11333: LD_VAR 0 8
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_VAR 0 2
11345: PUSH
11346: LD_VAR 0 4
11350: MINUS
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 11
11361: MINUS
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PPUSH
11367: CALL_OW 2
11371: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11372: LD_INT 5
11374: PUSH
11375: LD_VAR 0 10
11379: IN
11380: PUSH
11381: LD_INT 0
11383: PUSH
11384: LD_VAR 0 10
11388: IN
11389: AND
11390: IFFALSE 11442
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11392: LD_ADDR_VAR 0 8
11396: PUSH
11397: LD_VAR 0 8
11401: PPUSH
11402: LD_INT 1
11404: PPUSH
11405: LD_VAR 0 2
11409: PUSH
11410: LD_VAR 0 4
11414: MINUS
11415: PUSH
11416: LD_VAR 0 11
11420: PLUS
11421: PUSH
11422: LD_VAR 0 3
11426: PUSH
11427: LD_VAR 0 4
11431: MINUS
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 2
11441: ST_TO_ADDR
// b = b + c end ;
11442: LD_ADDR_VAR 0 11
11446: PUSH
11447: LD_VAR 0 11
11451: PUSH
11452: LD_VAR 0 14
11456: PLUS
11457: ST_TO_ADDR
11458: GO 11018
// if list_coords = 0 then
11460: LD_VAR 0 8
11464: PUSH
11465: LD_INT 0
11467: EQUAL
11468: IFFALSE 11472
// exit ;
11470: GO 11980
// repeat min_dist = 5000 ;
11472: LD_ADDR_VAR 0 12
11476: PUSH
11477: LD_INT 5000
11479: ST_TO_ADDR
// for b in list_coords do
11480: LD_ADDR_VAR 0 11
11484: PUSH
11485: LD_VAR 0 8
11489: PUSH
11490: FOR_IN
11491: IFFALSE 11550
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11493: LD_ADDR_VAR 0 13
11497: PUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: LD_VAR 0 11
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: PPUSH
11512: LD_VAR 0 11
11516: PUSH
11517: LD_INT 2
11519: ARRAY
11520: PPUSH
11521: CALL_OW 297
11525: ST_TO_ADDR
// if temp_dist < min_dist then
11526: LD_VAR 0 13
11530: PUSH
11531: LD_VAR 0 12
11535: LESS
11536: IFFALSE 11548
// min_dist = temp_dist ;
11538: LD_ADDR_VAR 0 12
11542: PUSH
11543: LD_VAR 0 13
11547: ST_TO_ADDR
// end ;
11548: GO 11490
11550: POP
11551: POP
// c = 0 ;
11552: LD_ADDR_VAR 0 14
11556: PUSH
11557: LD_INT 0
11559: ST_TO_ADDR
// repeat c = c + 1 ;
11560: LD_ADDR_VAR 0 14
11564: PUSH
11565: LD_VAR 0 14
11569: PUSH
11570: LD_INT 1
11572: PLUS
11573: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11574: LD_VAR 0 1
11578: PPUSH
11579: LD_VAR 0 8
11583: PUSH
11584: LD_VAR 0 14
11588: ARRAY
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 8
11598: PUSH
11599: LD_VAR 0 14
11603: ARRAY
11604: PUSH
11605: LD_INT 2
11607: ARRAY
11608: PPUSH
11609: CALL_OW 297
11613: PUSH
11614: LD_VAR 0 12
11618: EQUAL
11619: IFFALSE 11684
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11621: LD_ADDR_VAR 0 7
11625: PUSH
11626: LD_VAR 0 7
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: LD_VAR 0 8
11638: PUSH
11639: LD_VAR 0 14
11643: ARRAY
11644: PPUSH
11645: CALL_OW 2
11649: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11650: LD_ADDR_VAR 0 8
11654: PUSH
11655: LD_VAR 0 8
11659: PPUSH
11660: LD_VAR 0 14
11664: PPUSH
11665: CALL_OW 3
11669: ST_TO_ADDR
// c = c - 1 ;
11670: LD_ADDR_VAR 0 14
11674: PUSH
11675: LD_VAR 0 14
11679: PUSH
11680: LD_INT 1
11682: MINUS
11683: ST_TO_ADDR
// end ; until c = list_coords ;
11684: LD_VAR 0 14
11688: PUSH
11689: LD_VAR 0 8
11693: EQUAL
11694: IFFALSE 11560
// c = 0 ;
11696: LD_ADDR_VAR 0 14
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// if list_nearest > 0 then
11704: LD_VAR 0 7
11708: PUSH
11709: LD_INT 0
11711: GREATER
11712: IFFALSE 11854
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11714: LD_ADDR_VAR 0 15
11718: PUSH
11719: LD_INT 1
11721: PPUSH
11722: LD_VAR 0 7
11726: PPUSH
11727: CALL_OW 12
11731: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11732: LD_ADDR_VAR 0 16
11736: PUSH
11737: LD_VAR 0 7
11741: PUSH
11742: LD_VAR 0 15
11746: ARRAY
11747: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11748: LD_VAR 0 16
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PPUSH
11757: LD_VAR 0 16
11761: PUSH
11762: LD_INT 2
11764: ARRAY
11765: PPUSH
11766: CALL_OW 488
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: PUSH
11775: LD_VAR 0 16
11779: PUSH
11780: LD_INT 1
11782: ARRAY
11783: PPUSH
11784: LD_VAR 0 16
11788: PUSH
11789: LD_INT 2
11791: ARRAY
11792: PPUSH
11793: CALL_OW 428
11797: PUSH
11798: LD_INT 0
11800: EQUAL
11801: AND
11802: IFFALSE 11814
// c = 1 else
11804: LD_ADDR_VAR 0 14
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
11812: GO 11834
// list_nearest = Delete ( list_nearest , rand_num ) ;
11814: LD_ADDR_VAR 0 7
11818: PUSH
11819: LD_VAR 0 7
11823: PPUSH
11824: LD_VAR 0 15
11828: PPUSH
11829: CALL_OW 3
11833: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11834: LD_VAR 0 14
11838: PUSH
11839: LD_INT 1
11841: EQUAL
11842: PUSH
11843: LD_VAR 0 7
11847: PUSH
11848: LD_INT 0
11850: EQUAL
11851: OR
11852: IFFALSE 11714
// end ; until c = 1 or list_coords = 0 ;
11854: LD_VAR 0 14
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: PUSH
11863: LD_VAR 0 8
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: OR
11872: IFFALSE 11472
// attempts = attempts + 1 ;
11874: LD_ADDR_VAR 0 17
11878: PUSH
11879: LD_VAR 0 17
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11888: LD_VAR 0 14
11892: PUSH
11893: LD_INT 1
11895: EQUAL
11896: PUSH
11897: LD_VAR 0 17
11901: PUSH
11902: LD_INT 1
11904: GREATER
11905: OR
11906: IFFALSE 10431
// if c = 1 then
11908: LD_VAR 0 14
11912: PUSH
11913: LD_INT 1
11915: EQUAL
11916: IFFALSE 11980
// if add then
11918: LD_VAR 0 5
11922: IFFALSE 11953
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 16
11933: PUSH
11934: LD_INT 1
11936: ARRAY
11937: PPUSH
11938: LD_VAR 0 16
11942: PUSH
11943: LD_INT 2
11945: ARRAY
11946: PPUSH
11947: CALL_OW 171
11951: GO 11980
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11953: LD_VAR 0 1
11957: PPUSH
11958: LD_VAR 0 16
11962: PUSH
11963: LD_INT 1
11965: ARRAY
11966: PPUSH
11967: LD_VAR 0 16
11971: PUSH
11972: LD_INT 2
11974: ARRAY
11975: PPUSH
11976: CALL_OW 111
// end ;
11980: LD_VAR 0 6
11984: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11985: LD_INT 0
11987: PPUSH
11988: PPUSH
11989: PPUSH
11990: PPUSH
11991: PPUSH
11992: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11993: LD_VAR 0 1
11997: PPUSH
11998: LD_VAR 0 2
12002: PPUSH
12003: CALL_OW 488
12007: NOT
12008: PUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_VAR 0 4
12018: PPUSH
12019: CALL_OW 488
12023: NOT
12024: OR
12025: IFFALSE 12038
// begin result = - 1 ;
12027: LD_ADDR_VAR 0 5
12031: PUSH
12032: LD_INT 1
12034: NEG
12035: ST_TO_ADDR
// exit ;
12036: GO 12198
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
12038: LD_ADDR_VAR 0 6
12042: PUSH
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_VAR 0 3
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: CALL_OW 298
12067: ST_TO_ADDR
// dist_2 = 99999 ;
12068: LD_ADDR_VAR 0 7
12072: PUSH
12073: LD_INT 99999
12075: ST_TO_ADDR
// for b = 0 to 5 do
12076: LD_ADDR_VAR 0 8
12080: PUSH
12081: DOUBLE
12082: LD_INT 0
12084: DEC
12085: ST_TO_ADDR
12086: LD_INT 5
12088: PUSH
12089: FOR_TO
12090: IFFALSE 12186
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
12092: LD_ADDR_VAR 0 9
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_VAR 0 8
12106: PPUSH
12107: LD_VAR 0 6
12111: PPUSH
12112: CALL_OW 272
12116: PPUSH
12117: LD_VAR 0 2
12121: PPUSH
12122: LD_VAR 0 8
12126: PPUSH
12127: LD_VAR 0 6
12131: PPUSH
12132: CALL_OW 273
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_VAR 0 4
12146: PPUSH
12147: CALL_OW 298
12151: ST_TO_ADDR
// if temp_dist < dist_2 then
12152: LD_VAR 0 9
12156: PUSH
12157: LD_VAR 0 7
12161: LESS
12162: IFFALSE 12184
// begin dist_2 = temp_dist ;
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 9
12173: ST_TO_ADDR
// dir = b ;
12174: LD_ADDR_VAR 0 10
12178: PUSH
12179: LD_VAR 0 8
12183: ST_TO_ADDR
// end ; end ;
12184: GO 12089
12186: POP
12187: POP
// result = dir ;
12188: LD_ADDR_VAR 0 5
12192: PUSH
12193: LD_VAR 0 10
12197: ST_TO_ADDR
// end ; end_of_file
12198: LD_VAR 0 5
12202: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
12218: PPUSH
12219: PPUSH
12220: PPUSH
12221: PPUSH
12222: PPUSH
12223: PPUSH
12224: PPUSH
12225: PPUSH
12226: PPUSH
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// personel = [ ] ;
12233: LD_ADDR_VAR 0 18
12237: PUSH
12238: EMPTY
12239: ST_TO_ADDR
// vehicles = [ ] ;
12240: LD_ADDR_VAR 0 24
12244: PUSH
12245: EMPTY
12246: ST_TO_ADDR
// for unit in basePersonel do
12247: LD_ADDR_VAR 0 17
12251: PUSH
12252: LD_VAR 0 3
12256: PUSH
12257: FOR_IN
12258: IFFALSE 12306
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12260: LD_ADDR_VAR 0 18
12264: PUSH
12265: LD_VAR 0 18
12269: PUSH
12270: LD_VAR 0 17
12274: PUSH
12275: LD_VAR 0 17
12279: PPUSH
12280: CALL_OW 310
12284: PUSH
12285: LD_VAR 0 17
12289: PPUSH
12290: CALL_OW 302
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: ADD
12303: ST_TO_ADDR
12304: GO 12257
12306: POP
12307: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12308: LD_ADDR_VAR 0 23
12312: PUSH
12313: LD_VAR 0 4
12317: PPUSH
12318: LD_INT 22
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 21
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 50
12342: PUSH
12343: EMPTY
12344: LIST
12345: PUSH
12346: LD_INT 3
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: LD_INT 34
12354: PUSH
12355: LD_INT 12
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 34
12364: PUSH
12365: LD_INT 51
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 34
12374: PUSH
12375: LD_INT 32
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 70
12402: PUSH
12403: FOR_IN
12404: IFFALSE 12452
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12406: LD_ADDR_VAR 0 24
12410: PUSH
12411: LD_VAR 0 24
12415: PUSH
12416: LD_VAR 0 23
12420: PUSH
12421: LD_VAR 0 23
12425: PPUSH
12426: CALL_OW 310
12430: PUSH
12431: LD_VAR 0 23
12435: PPUSH
12436: CALL_OW 302
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: ADD
12449: ST_TO_ADDR
12450: GO 12403
12452: POP
12453: POP
// repeat soldiers = [ ] ;
12454: LD_ADDR_VAR 0 19
12458: PUSH
12459: EMPTY
12460: ST_TO_ADDR
// engineers = [ ] ;
12461: LD_ADDR_VAR 0 20
12465: PUSH
12466: EMPTY
12467: ST_TO_ADDR
// mechanics = [ ] ;
12468: LD_ADDR_VAR 0 21
12472: PUSH
12473: EMPTY
12474: ST_TO_ADDR
// scientists = [ ] ;
12475: LD_ADDR_VAR 0 22
12479: PUSH
12480: EMPTY
12481: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12482: LD_ADDR_VAR 0 29
12486: PUSH
12487: LD_VAR 0 4
12491: PPUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 21
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 50
12516: PUSH
12517: EMPTY
12518: LIST
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 30
12525: PUSH
12526: LD_INT 0
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 70
12558: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12559: LD_ADDR_VAR 0 30
12563: PUSH
12564: LD_VAR 0 4
12568: PPUSH
12569: LD_INT 22
12571: PUSH
12572: LD_VAR 0 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 3
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 50
12593: PUSH
12594: EMPTY
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 2
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 3
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 70
12635: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12636: LD_ADDR_VAR 0 31
12640: PUSH
12641: LD_VAR 0 4
12645: PPUSH
12646: LD_INT 22
12648: PUSH
12649: LD_VAR 0 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 50
12670: PUSH
12671: EMPTY
12672: LIST
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 30
12679: PUSH
12680: LD_INT 6
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 30
12689: PUSH
12690: LD_INT 7
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 30
12699: PUSH
12700: LD_INT 8
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 70
12723: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12724: LD_ADDR_VAR 0 32
12728: PUSH
12729: LD_VAR 0 4
12733: PPUSH
12734: LD_INT 22
12736: PUSH
12737: LD_VAR 0 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 3
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 50
12758: PUSH
12759: EMPTY
12760: LIST
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 30
12767: PUSH
12768: LD_INT 31
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 30
12777: PUSH
12778: LD_INT 32
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 70
12800: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12801: LD_ADDR_VAR 0 33
12805: PUSH
12806: LD_VAR 0 4
12810: PPUSH
12811: LD_INT 22
12813: PUSH
12814: LD_VAR 0 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 21
12825: PUSH
12826: LD_INT 3
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 50
12835: PUSH
12836: EMPTY
12837: LIST
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 30
12854: PUSH
12855: LD_INT 5
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: PPUSH
12873: CALL_OW 70
12877: ST_TO_ADDR
// for i := 1 to personel do
12878: LD_ADDR_VAR 0 13
12882: PUSH
12883: DOUBLE
12884: LD_INT 1
12886: DEC
12887: ST_TO_ADDR
12888: LD_VAR 0 18
12892: PUSH
12893: FOR_TO
12894: IFFALSE 13100
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12896: LD_VAR 0 18
12900: PUSH
12901: LD_VAR 0 13
12905: ARRAY
12906: PUSH
12907: LD_INT 1
12909: ARRAY
12910: PPUSH
12911: CALL_OW 256
12915: PUSH
12916: LD_INT 1000
12918: EQUAL
12919: IFFALSE 12961
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12921: LD_ADDR_VAR 0 18
12925: PUSH
12926: LD_VAR 0 18
12930: PPUSH
12931: LD_VAR 0 13
12935: PUSH
12936: LD_VAR 0 18
12940: PUSH
12941: LD_VAR 0 13
12945: ARRAY
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL 37391 0 3
12958: ST_TO_ADDR
// end else
12959: GO 13048
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12961: LD_VAR 0 18
12965: PUSH
12966: LD_VAR 0 13
12970: ARRAY
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: CALL_OW 256
12980: PUSH
12981: LD_INT 950
12983: LESSEQUAL
12984: IFFALSE 13048
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12986: LD_ADDR_VAR 0 18
12990: PUSH
12991: LD_VAR 0 18
12995: PPUSH
12996: LD_VAR 0 13
13000: PUSH
13001: LD_VAR 0 18
13005: PUSH
13006: LD_VAR 0 13
13010: ARRAY
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL 37391 0 3
13023: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
13024: LD_VAR 0 18
13028: PUSH
13029: LD_VAR 0 13
13033: ARRAY
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: LD_VAR 0 5
13043: PPUSH
13044: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
13048: LD_VAR 0 18
13052: PUSH
13053: LD_VAR 0 13
13057: ARRAY
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: CALL_OW 256
13067: PUSH
13068: LD_INT 250
13070: LESS
13071: IFFALSE 13098
// personel = personel diff [ personel [ i ] ] ;
13073: LD_ADDR_VAR 0 18
13077: PUSH
13078: LD_VAR 0 18
13082: PUSH
13083: LD_VAR 0 18
13087: PUSH
13088: LD_VAR 0 13
13092: ARRAY
13093: PUSH
13094: EMPTY
13095: LIST
13096: DIFF
13097: ST_TO_ADDR
// end ;
13098: GO 12893
13100: POP
13101: POP
// for i := 1 to vehicles do
13102: LD_ADDR_VAR 0 13
13106: PUSH
13107: DOUBLE
13108: LD_INT 1
13110: DEC
13111: ST_TO_ADDR
13112: LD_VAR 0 24
13116: PUSH
13117: FOR_TO
13118: IFFALSE 13504
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13120: LD_VAR 0 24
13124: PUSH
13125: LD_VAR 0 13
13129: ARRAY
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: CALL_OW 261
13139: PUSH
13140: LD_INT 50
13142: LESS
13143: IFFALSE 13167
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13145: LD_VAR 0 24
13149: PUSH
13150: LD_VAR 0 13
13154: ARRAY
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PPUSH
13160: LD_INT 100
13162: PPUSH
13163: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13167: LD_VAR 0 24
13171: PUSH
13172: LD_VAR 0 13
13176: ARRAY
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PPUSH
13182: CALL_OW 256
13186: PUSH
13187: LD_INT 1000
13189: EQUAL
13190: IFFALSE 13365
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13192: LD_VAR 0 24
13196: PUSH
13197: LD_VAR 0 13
13201: ARRAY
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PPUSH
13207: CALL_OW 263
13211: PUSH
13212: LD_INT 1
13214: EQUAL
13215: IFFALSE 13273
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13217: LD_VAR 0 24
13221: PUSH
13222: LD_VAR 0 13
13226: ARRAY
13227: PUSH
13228: LD_INT 2
13230: ARRAY
13231: PPUSH
13232: CALL_OW 310
13236: NOT
13237: IFFALSE 13273
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13239: LD_VAR 0 24
13243: PUSH
13244: LD_VAR 0 13
13248: ARRAY
13249: PUSH
13250: LD_INT 2
13252: ARRAY
13253: PPUSH
13254: LD_VAR 0 24
13258: PUSH
13259: LD_VAR 0 13
13263: ARRAY
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PPUSH
13269: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13273: LD_VAR 0 24
13277: PUSH
13278: LD_VAR 0 10
13282: LESS
13283: IFFALSE 13325
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13285: LD_ADDR_VAR 0 24
13289: PUSH
13290: LD_VAR 0 24
13294: PPUSH
13295: LD_VAR 0 13
13299: PUSH
13300: LD_VAR 0 24
13304: PUSH
13305: LD_VAR 0 13
13309: ARRAY
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL 37391 0 3
13322: ST_TO_ADDR
13323: GO 13363
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13325: LD_ADDR_VAR 0 24
13329: PUSH
13330: LD_VAR 0 24
13334: PPUSH
13335: LD_VAR 0 13
13339: PUSH
13340: LD_VAR 0 24
13344: PUSH
13345: LD_VAR 0 13
13349: ARRAY
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PPUSH
13355: LD_INT 2
13357: PPUSH
13358: CALL 37391 0 3
13362: ST_TO_ADDR
// end else
13363: GO 13452
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13365: LD_VAR 0 24
13369: PUSH
13370: LD_VAR 0 13
13374: ARRAY
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PPUSH
13380: CALL_OW 256
13384: PUSH
13385: LD_INT 650
13387: LESSEQUAL
13388: IFFALSE 13452
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13390: LD_ADDR_VAR 0 24
13394: PUSH
13395: LD_VAR 0 24
13399: PPUSH
13400: LD_VAR 0 13
13404: PUSH
13405: LD_VAR 0 24
13409: PUSH
13410: LD_VAR 0 13
13414: ARRAY
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: LD_INT 0
13422: PPUSH
13423: CALL 37391 0 3
13427: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13428: LD_VAR 0 24
13432: PUSH
13433: LD_VAR 0 13
13437: ARRAY
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: LD_VAR 0 6
13447: PPUSH
13448: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13452: LD_VAR 0 24
13456: PUSH
13457: LD_VAR 0 13
13461: ARRAY
13462: PUSH
13463: LD_INT 1
13465: ARRAY
13466: PPUSH
13467: CALL_OW 256
13471: PUSH
13472: LD_INT 250
13474: LESS
13475: IFFALSE 13502
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13477: LD_ADDR_VAR 0 24
13481: PUSH
13482: LD_VAR 0 24
13486: PUSH
13487: LD_VAR 0 24
13491: PUSH
13492: LD_VAR 0 13
13496: ARRAY
13497: PUSH
13498: EMPTY
13499: LIST
13500: DIFF
13501: ST_TO_ADDR
// end ;
13502: GO 13117
13504: POP
13505: POP
// for i := 1 to personel do
13506: LD_ADDR_VAR 0 13
13510: PUSH
13511: DOUBLE
13512: LD_INT 1
13514: DEC
13515: ST_TO_ADDR
13516: LD_VAR 0 18
13520: PUSH
13521: FOR_TO
13522: IFFALSE 13563
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13524: LD_ADDR_VAR 0 19
13528: PUSH
13529: LD_VAR 0 19
13533: PUSH
13534: LD_VAR 0 18
13538: PUSH
13539: LD_VAR 0 13
13543: ARRAY
13544: PPUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 1
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 72
13559: ADD
13560: ST_TO_ADDR
13561: GO 13521
13563: POP
13564: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13565: LD_VAR 0 19
13569: PUSH
13570: LD_VAR 0 32
13574: PPUSH
13575: LD_INT 3
13577: PUSH
13578: LD_INT 59
13580: PUSH
13581: EMPTY
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 72
13592: AND
13593: IFFALSE 13881
// begin for i := 1 to personel do
13595: LD_ADDR_VAR 0 13
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 18
13609: PUSH
13610: FOR_TO
13611: IFFALSE 13877
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13613: LD_VAR 0 18
13617: PUSH
13618: LD_VAR 0 13
13622: ARRAY
13623: PUSH
13624: LD_INT 1
13626: ARRAY
13627: PPUSH
13628: CALL_OW 257
13632: PUSH
13633: LD_INT 1
13635: EQUAL
13636: PUSH
13637: LD_VAR 0 18
13641: PUSH
13642: LD_VAR 0 13
13646: ARRAY
13647: PUSH
13648: LD_INT 3
13650: ARRAY
13651: PUSH
13652: LD_INT 1
13654: EQUAL
13655: AND
13656: IFFALSE 13875
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13658: LD_VAR 0 18
13662: PUSH
13663: LD_VAR 0 13
13667: ARRAY
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: CALL_OW 437
13677: IFFALSE 13778
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13679: LD_VAR 0 18
13683: PUSH
13684: LD_VAR 0 13
13688: ARRAY
13689: PUSH
13690: LD_INT 1
13692: ARRAY
13693: PPUSH
13694: CALL_OW 437
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PUSH
13703: LD_INT 1
13705: ARRAY
13706: PUSH
13707: LD_STRING e
13709: EQUAL
13710: PUSH
13711: LD_VAR 0 18
13715: PUSH
13716: LD_VAR 0 13
13720: ARRAY
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: CALL_OW 437
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PUSH
13735: LD_INT 4
13737: ARRAY
13738: PPUSH
13739: CALL_OW 266
13743: PUSH
13744: LD_INT 4
13746: PUSH
13747: LD_INT 5
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: IN
13754: AND
13755: IFFALSE 13778
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13757: LD_VAR 0 18
13761: PUSH
13762: LD_VAR 0 13
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: EMPTY
13773: PPUSH
13774: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13778: LD_ADDR_VAR 0 36
13782: PUSH
13783: LD_VAR 0 32
13787: PPUSH
13788: LD_INT 3
13790: PUSH
13791: LD_INT 59
13793: PUSH
13794: EMPTY
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 72
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13873
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13809: LD_VAR 0 18
13813: PUSH
13814: LD_VAR 0 13
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: CALL_OW 310
13828: PPUSH
13829: CALL_OW 266
13833: PUSH
13834: LD_INT 31
13836: PUSH
13837: LD_INT 32
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: IN
13844: NOT
13845: IFFALSE 13871
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13847: LD_VAR 0 18
13851: PUSH
13852: LD_VAR 0 13
13856: ARRAY
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: LD_VAR 0 36
13866: PPUSH
13867: CALL_OW 120
13871: GO 13806
13873: POP
13874: POP
// end ; end ;
13875: GO 13610
13877: POP
13878: POP
// end else
13879: GO 14096
// if soldiers and barracks then
13881: LD_VAR 0 19
13885: PUSH
13886: LD_VAR 0 33
13890: AND
13891: IFFALSE 14096
// for i := 1 to personel do
13893: LD_ADDR_VAR 0 13
13897: PUSH
13898: DOUBLE
13899: LD_INT 1
13901: DEC
13902: ST_TO_ADDR
13903: LD_VAR 0 18
13907: PUSH
13908: FOR_TO
13909: IFFALSE 14094
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13911: LD_VAR 0 18
13915: PUSH
13916: LD_VAR 0 13
13920: ARRAY
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: PPUSH
13926: CALL_OW 257
13930: PUSH
13931: LD_INT 1
13933: EQUAL
13934: PUSH
13935: LD_VAR 0 18
13939: PUSH
13940: LD_VAR 0 13
13944: ARRAY
13945: PUSH
13946: LD_INT 3
13948: ARRAY
13949: PUSH
13950: LD_INT 1
13952: EQUAL
13953: AND
13954: PUSH
13955: LD_VAR 0 18
13959: PUSH
13960: LD_VAR 0 13
13964: ARRAY
13965: PUSH
13966: LD_INT 1
13968: ARRAY
13969: PPUSH
13970: LD_INT 56
13972: PUSH
13973: EMPTY
13974: LIST
13975: PPUSH
13976: CALL_OW 72
13980: AND
13981: IFFALSE 14092
// begin if not personel [ i ] [ 2 ] then
13983: LD_VAR 0 18
13987: PUSH
13988: LD_VAR 0 13
13992: ARRAY
13993: PUSH
13994: LD_INT 2
13996: ARRAY
13997: NOT
13998: IFFALSE 14058
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
14000: LD_ADDR_VAR 0 18
14004: PUSH
14005: LD_VAR 0 18
14009: PPUSH
14010: LD_VAR 0 13
14014: PUSH
14015: LD_VAR 0 18
14019: PUSH
14020: LD_VAR 0 13
14024: ARRAY
14025: PUSH
14026: LD_INT 1
14028: MINUS
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: LD_VAR 0 33
14038: PUSH
14039: LD_INT 1
14041: PPUSH
14042: LD_VAR 0 33
14046: PPUSH
14047: CALL_OW 12
14051: ARRAY
14052: PPUSH
14053: CALL 37391 0 3
14057: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14058: LD_VAR 0 18
14062: PUSH
14063: LD_VAR 0 13
14067: ARRAY
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_VAR 0 18
14077: PUSH
14078: LD_VAR 0 13
14082: ARRAY
14083: PUSH
14084: LD_INT 2
14086: ARRAY
14087: PPUSH
14088: CALL_OW 120
// end ;
14092: GO 13908
14094: POP
14095: POP
// for i := 1 to personel do
14096: LD_ADDR_VAR 0 13
14100: PUSH
14101: DOUBLE
14102: LD_INT 1
14104: DEC
14105: ST_TO_ADDR
14106: LD_VAR 0 18
14110: PUSH
14111: FOR_TO
14112: IFFALSE 14153
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14114: LD_ADDR_VAR 0 20
14118: PUSH
14119: LD_VAR 0 20
14123: PUSH
14124: LD_VAR 0 18
14128: PUSH
14129: LD_VAR 0 13
14133: ARRAY
14134: PPUSH
14135: LD_INT 25
14137: PUSH
14138: LD_INT 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PPUSH
14145: CALL_OW 72
14149: ADD
14150: ST_TO_ADDR
14151: GO 14111
14153: POP
14154: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14155: LD_VAR 0 20
14159: PUSH
14160: LD_VAR 0 4
14164: PPUSH
14165: LD_INT 22
14167: PUSH
14168: LD_VAR 0 1
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 21
14179: PUSH
14180: LD_INT 3
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 24
14192: PUSH
14193: LD_INT 1000
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 70
14213: AND
14214: IFFALSE 14490
// begin for i := 1 to personel do
14216: LD_ADDR_VAR 0 13
14220: PUSH
14221: DOUBLE
14222: LD_INT 1
14224: DEC
14225: ST_TO_ADDR
14226: LD_VAR 0 18
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14486
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14234: LD_VAR 0 18
14238: PUSH
14239: LD_VAR 0 13
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: PPUSH
14249: CALL_OW 257
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: PUSH
14258: LD_VAR 0 18
14262: PUSH
14263: LD_VAR 0 13
14267: ARRAY
14268: PUSH
14269: LD_INT 3
14271: ARRAY
14272: PUSH
14273: LD_INT 1
14275: EQUAL
14276: AND
14277: IFFALSE 14484
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14279: LD_VAR 0 18
14283: PUSH
14284: LD_VAR 0 13
14288: ARRAY
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 437
14298: IFFALSE 14354
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14300: LD_VAR 0 18
14304: PUSH
14305: LD_VAR 0 13
14309: ARRAY
14310: PUSH
14311: LD_INT 1
14313: ARRAY
14314: PPUSH
14315: CALL_OW 437
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PUSH
14324: LD_INT 1
14326: ARRAY
14327: PUSH
14328: LD_STRING e
14330: EQUAL
14331: IFFALSE 14354
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14333: LD_VAR 0 18
14337: PUSH
14338: LD_VAR 0 13
14342: ARRAY
14343: PUSH
14344: LD_INT 1
14346: ARRAY
14347: PPUSH
14348: EMPTY
14349: PPUSH
14350: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14354: LD_VAR 0 18
14358: PUSH
14359: LD_VAR 0 13
14363: ARRAY
14364: PUSH
14365: LD_INT 1
14367: ARRAY
14368: PPUSH
14369: CALL_OW 310
14373: IFFALSE 14394
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14375: LD_VAR 0 18
14379: PUSH
14380: LD_VAR 0 13
14384: ARRAY
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: PPUSH
14390: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14394: LD_ADDR_VAR 0 34
14398: PUSH
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 22
14406: PUSH
14407: LD_VAR 0 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 1000
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 70
14452: PUSH
14453: FOR_IN
14454: IFFALSE 14482
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14456: LD_VAR 0 18
14460: PUSH
14461: LD_VAR 0 13
14465: ARRAY
14466: PUSH
14467: LD_INT 1
14469: ARRAY
14470: PPUSH
14471: LD_VAR 0 34
14475: PPUSH
14476: CALL_OW 190
14480: GO 14453
14482: POP
14483: POP
// end ;
14484: GO 14231
14486: POP
14487: POP
// end else
14488: GO 14752
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14490: LD_VAR 0 20
14494: PUSH
14495: LD_VAR 0 20
14499: PPUSH
14500: LD_INT 56
14502: PUSH
14503: EMPTY
14504: LIST
14505: PPUSH
14506: CALL_OW 72
14510: AND
14511: PUSH
14512: LD_VAR 0 29
14516: AND
14517: IFFALSE 14752
// for i := 1 to personel do
14519: LD_ADDR_VAR 0 13
14523: PUSH
14524: DOUBLE
14525: LD_INT 1
14527: DEC
14528: ST_TO_ADDR
14529: LD_VAR 0 18
14533: PUSH
14534: FOR_TO
14535: IFFALSE 14750
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14537: LD_VAR 0 18
14541: PUSH
14542: LD_VAR 0 13
14546: ARRAY
14547: PUSH
14548: LD_INT 1
14550: ARRAY
14551: PPUSH
14552: CALL_OW 257
14556: PUSH
14557: LD_INT 2
14559: EQUAL
14560: PUSH
14561: LD_VAR 0 18
14565: PUSH
14566: LD_VAR 0 13
14570: ARRAY
14571: PUSH
14572: LD_INT 3
14574: ARRAY
14575: PUSH
14576: LD_INT 1
14578: EQUAL
14579: AND
14580: IFFALSE 14748
// begin if not personel [ i ] [ 2 ] then
14582: LD_VAR 0 18
14586: PUSH
14587: LD_VAR 0 13
14591: ARRAY
14592: PUSH
14593: LD_INT 2
14595: ARRAY
14596: NOT
14597: IFFALSE 14714
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14599: LD_ADDR_VAR 0 18
14603: PUSH
14604: LD_VAR 0 18
14608: PPUSH
14609: LD_VAR 0 13
14613: PUSH
14614: LD_VAR 0 18
14618: PUSH
14619: LD_VAR 0 13
14623: ARRAY
14624: PUSH
14625: LD_INT 1
14627: MINUS
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PPUSH
14633: LD_VAR 0 4
14637: PPUSH
14638: LD_INT 22
14640: PUSH
14641: LD_VAR 0 1
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 21
14652: PUSH
14653: LD_INT 3
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 50
14662: PUSH
14663: EMPTY
14664: LIST
14665: PUSH
14666: LD_INT 2
14668: PUSH
14669: LD_INT 30
14671: PUSH
14672: LD_INT 0
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 30
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 70
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL 37391 0 3
14713: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14714: LD_VAR 0 18
14718: PUSH
14719: LD_VAR 0 13
14723: ARRAY
14724: PUSH
14725: LD_INT 1
14727: ARRAY
14728: PPUSH
14729: LD_VAR 0 18
14733: PUSH
14734: LD_VAR 0 13
14738: ARRAY
14739: PUSH
14740: LD_INT 2
14742: ARRAY
14743: PPUSH
14744: CALL_OW 120
// end ; end ;
14748: GO 14534
14750: POP
14751: POP
// for i := 1 to personel do
14752: LD_ADDR_VAR 0 13
14756: PUSH
14757: DOUBLE
14758: LD_INT 1
14760: DEC
14761: ST_TO_ADDR
14762: LD_VAR 0 18
14766: PUSH
14767: FOR_TO
14768: IFFALSE 14809
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14770: LD_ADDR_VAR 0 21
14774: PUSH
14775: LD_VAR 0 21
14779: PUSH
14780: LD_VAR 0 18
14784: PUSH
14785: LD_VAR 0 13
14789: ARRAY
14790: PPUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 3
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 72
14805: ADD
14806: ST_TO_ADDR
14807: GO 14767
14809: POP
14810: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14811: LD_VAR 0 21
14815: PUSH
14816: LD_VAR 0 4
14820: PPUSH
14821: LD_INT 22
14823: PUSH
14824: LD_VAR 0 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 21
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 1000
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 70
14869: AND
14870: IFFALSE 15474
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14872: LD_ADDR_VAR 0 35
14876: PUSH
14877: LD_VAR 0 4
14881: PPUSH
14882: LD_INT 22
14884: PUSH
14885: LD_VAR 0 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 21
14896: PUSH
14897: LD_INT 2
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 3
14906: PUSH
14907: LD_INT 24
14909: PUSH
14910: LD_INT 1000
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 70
14930: PUSH
14931: FOR_IN
14932: IFFALSE 15470
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14934: LD_VAR 0 35
14938: PPUSH
14939: LD_VAR 0 6
14943: PPUSH
14944: CALL_OW 299
14948: PUSH
14949: LD_INT 5
14951: LESS
14952: IFFALSE 15247
// begin for i := 1 to vehicles do
14954: LD_ADDR_VAR 0 13
14958: PUSH
14959: DOUBLE
14960: LD_INT 1
14962: DEC
14963: ST_TO_ADDR
14964: LD_VAR 0 24
14968: PUSH
14969: FOR_TO
14970: IFFALSE 15039
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14972: LD_VAR 0 24
14976: PUSH
14977: LD_VAR 0 13
14981: ARRAY
14982: PUSH
14983: LD_INT 1
14985: ARRAY
14986: PUSH
14987: LD_VAR 0 35
14991: EQUAL
14992: IFFALSE 15013
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14994: LD_VAR 0 24
14998: PUSH
14999: LD_VAR 0 13
15003: ARRAY
15004: PUSH
15005: LD_INT 2
15007: ARRAY
15008: PPUSH
15009: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
15013: LD_VAR 0 24
15017: PUSH
15018: LD_VAR 0 13
15022: ARRAY
15023: PUSH
15024: LD_INT 2
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 35
15032: PPUSH
15033: CALL_OW 189
// end ;
15037: GO 14969
15039: POP
15040: POP
// for i := 1 to personel do
15041: LD_ADDR_VAR 0 13
15045: PUSH
15046: DOUBLE
15047: LD_INT 1
15049: DEC
15050: ST_TO_ADDR
15051: LD_VAR 0 18
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15245
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15059: LD_VAR 0 18
15063: PUSH
15064: LD_VAR 0 13
15068: ARRAY
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PPUSH
15074: CALL_OW 257
15078: PUSH
15079: LD_INT 3
15081: EQUAL
15082: PUSH
15083: LD_VAR 0 18
15087: PUSH
15088: LD_VAR 0 13
15092: ARRAY
15093: PUSH
15094: LD_INT 3
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: EQUAL
15101: AND
15102: IFFALSE 15243
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15104: LD_VAR 0 18
15108: PUSH
15109: LD_VAR 0 13
15113: ARRAY
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: CALL_OW 437
15123: IFFALSE 15179
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15125: LD_VAR 0 18
15129: PUSH
15130: LD_VAR 0 13
15134: ARRAY
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: CALL_OW 437
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PUSH
15149: LD_INT 1
15151: ARRAY
15152: PUSH
15153: LD_STRING e
15155: EQUAL
15156: IFFALSE 15179
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15158: LD_VAR 0 18
15162: PUSH
15163: LD_VAR 0 13
15167: ARRAY
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: EMPTY
15174: PPUSH
15175: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15179: LD_VAR 0 18
15183: PUSH
15184: LD_VAR 0 13
15188: ARRAY
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: CALL_OW 310
15198: IFFALSE 15219
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15200: LD_VAR 0 18
15204: PUSH
15205: LD_VAR 0 13
15209: ARRAY
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: PPUSH
15215: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15219: LD_VAR 0 18
15223: PUSH
15224: LD_VAR 0 13
15228: ARRAY
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_VAR 0 35
15238: PPUSH
15239: CALL_OW 189
// end ;
15243: GO 15056
15245: POP
15246: POP
// end ; if GetLives ( damageUnit ) < 250 then
15247: LD_VAR 0 35
15251: PPUSH
15252: CALL_OW 256
15256: PUSH
15257: LD_INT 250
15259: LESS
15260: IFFALSE 15468
// for i := 1 to personel do
15262: LD_ADDR_VAR 0 13
15266: PUSH
15267: DOUBLE
15268: LD_INT 1
15270: DEC
15271: ST_TO_ADDR
15272: LD_VAR 0 18
15276: PUSH
15277: FOR_TO
15278: IFFALSE 15466
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15280: LD_VAR 0 18
15284: PUSH
15285: LD_VAR 0 13
15289: ARRAY
15290: PUSH
15291: LD_INT 1
15293: ARRAY
15294: PPUSH
15295: CALL_OW 257
15299: PUSH
15300: LD_INT 3
15302: EQUAL
15303: PUSH
15304: LD_VAR 0 18
15308: PUSH
15309: LD_VAR 0 13
15313: ARRAY
15314: PUSH
15315: LD_INT 3
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: EQUAL
15322: AND
15323: IFFALSE 15464
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15325: LD_VAR 0 18
15329: PUSH
15330: LD_VAR 0 13
15334: ARRAY
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: CALL_OW 437
15344: IFFALSE 15400
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15346: LD_VAR 0 18
15350: PUSH
15351: LD_VAR 0 13
15355: ARRAY
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: CALL_OW 437
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: PUSH
15374: LD_STRING e
15376: EQUAL
15377: IFFALSE 15400
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15379: LD_VAR 0 18
15383: PUSH
15384: LD_VAR 0 13
15388: ARRAY
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: EMPTY
15395: PPUSH
15396: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15400: LD_VAR 0 18
15404: PUSH
15405: LD_VAR 0 13
15409: ARRAY
15410: PUSH
15411: LD_INT 1
15413: ARRAY
15414: PPUSH
15415: CALL_OW 310
15419: IFFALSE 15440
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15421: LD_VAR 0 18
15425: PUSH
15426: LD_VAR 0 13
15430: ARRAY
15431: PUSH
15432: LD_INT 1
15434: ARRAY
15435: PPUSH
15436: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15440: LD_VAR 0 18
15444: PUSH
15445: LD_VAR 0 13
15449: ARRAY
15450: PUSH
15451: LD_INT 1
15453: ARRAY
15454: PPUSH
15455: LD_VAR 0 35
15459: PPUSH
15460: CALL_OW 189
// end ;
15464: GO 15277
15466: POP
15467: POP
// end ;
15468: GO 14931
15470: POP
15471: POP
// end else
15472: GO 15679
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15474: LD_VAR 0 21
15478: PUSH
15479: LD_VAR 0 21
15483: PPUSH
15484: LD_INT 56
15486: PUSH
15487: EMPTY
15488: LIST
15489: PPUSH
15490: CALL_OW 72
15494: AND
15495: PUSH
15496: LD_VAR 0 30
15500: AND
15501: IFFALSE 15679
// for i := 1 to personel do
15503: LD_ADDR_VAR 0 13
15507: PUSH
15508: DOUBLE
15509: LD_INT 1
15511: DEC
15512: ST_TO_ADDR
15513: LD_VAR 0 18
15517: PUSH
15518: FOR_TO
15519: IFFALSE 15677
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15521: LD_VAR 0 18
15525: PUSH
15526: LD_VAR 0 13
15530: ARRAY
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: CALL_OW 257
15540: PUSH
15541: LD_INT 3
15543: EQUAL
15544: PUSH
15545: LD_VAR 0 18
15549: PUSH
15550: LD_VAR 0 13
15554: ARRAY
15555: PUSH
15556: LD_INT 3
15558: ARRAY
15559: PUSH
15560: LD_INT 1
15562: EQUAL
15563: AND
15564: IFFALSE 15675
// begin if not personel [ i ] [ 2 ] then
15566: LD_VAR 0 18
15570: PUSH
15571: LD_VAR 0 13
15575: ARRAY
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: NOT
15581: IFFALSE 15641
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15583: LD_ADDR_VAR 0 18
15587: PUSH
15588: LD_VAR 0 18
15592: PPUSH
15593: LD_VAR 0 13
15597: PUSH
15598: LD_VAR 0 18
15602: PUSH
15603: LD_VAR 0 13
15607: ARRAY
15608: PUSH
15609: LD_INT 1
15611: MINUS
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PPUSH
15617: LD_VAR 0 30
15621: PUSH
15622: LD_INT 1
15624: PPUSH
15625: LD_VAR 0 30
15629: PPUSH
15630: CALL_OW 12
15634: ARRAY
15635: PPUSH
15636: CALL 37391 0 3
15640: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15641: LD_VAR 0 18
15645: PUSH
15646: LD_VAR 0 13
15650: ARRAY
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PPUSH
15656: LD_VAR 0 18
15660: PUSH
15661: LD_VAR 0 13
15665: ARRAY
15666: PUSH
15667: LD_INT 2
15669: ARRAY
15670: PPUSH
15671: CALL_OW 120
// end ;
15675: GO 15518
15677: POP
15678: POP
// for i := 1 to personel do
15679: LD_ADDR_VAR 0 13
15683: PUSH
15684: DOUBLE
15685: LD_INT 1
15687: DEC
15688: ST_TO_ADDR
15689: LD_VAR 0 18
15693: PUSH
15694: FOR_TO
15695: IFFALSE 15736
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15697: LD_ADDR_VAR 0 22
15701: PUSH
15702: LD_VAR 0 22
15706: PUSH
15707: LD_VAR 0 18
15711: PUSH
15712: LD_VAR 0 13
15716: ARRAY
15717: PPUSH
15718: LD_INT 25
15720: PUSH
15721: LD_INT 4
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 72
15732: ADD
15733: ST_TO_ADDR
15734: GO 15694
15736: POP
15737: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15738: LD_VAR 0 22
15742: PUSH
15743: LD_VAR 0 4
15747: PPUSH
15748: LD_INT 22
15750: PUSH
15751: LD_VAR 0 1
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 21
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 24
15775: PUSH
15776: LD_INT 1000
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: LIST
15791: PPUSH
15792: CALL_OW 70
15796: AND
15797: IFFALSE 16314
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15799: LD_ADDR_VAR 0 35
15803: PUSH
15804: LD_VAR 0 4
15808: PPUSH
15809: LD_INT 22
15811: PUSH
15812: LD_VAR 0 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 21
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 24
15836: PUSH
15837: LD_INT 1000
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: PPUSH
15853: CALL_OW 70
15857: PUSH
15858: FOR_IN
15859: IFFALSE 16310
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15861: LD_VAR 0 35
15865: PPUSH
15866: LD_VAR 0 5
15870: PPUSH
15871: CALL_OW 299
15875: PUSH
15876: LD_INT 5
15878: LESS
15879: IFFALSE 16087
// for i := 1 to personel do
15881: LD_ADDR_VAR 0 13
15885: PUSH
15886: DOUBLE
15887: LD_INT 1
15889: DEC
15890: ST_TO_ADDR
15891: LD_VAR 0 18
15895: PUSH
15896: FOR_TO
15897: IFFALSE 16085
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15899: LD_VAR 0 18
15903: PUSH
15904: LD_VAR 0 13
15908: ARRAY
15909: PUSH
15910: LD_INT 1
15912: ARRAY
15913: PPUSH
15914: CALL_OW 257
15918: PUSH
15919: LD_INT 4
15921: EQUAL
15922: PUSH
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 13
15932: ARRAY
15933: PUSH
15934: LD_INT 3
15936: ARRAY
15937: PUSH
15938: LD_INT 1
15940: EQUAL
15941: AND
15942: IFFALSE 16083
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15944: LD_VAR 0 18
15948: PUSH
15949: LD_VAR 0 13
15953: ARRAY
15954: PUSH
15955: LD_INT 1
15957: ARRAY
15958: PPUSH
15959: CALL_OW 437
15963: IFFALSE 16019
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15965: LD_VAR 0 18
15969: PUSH
15970: LD_VAR 0 13
15974: ARRAY
15975: PUSH
15976: LD_INT 1
15978: ARRAY
15979: PPUSH
15980: CALL_OW 437
15984: PUSH
15985: LD_INT 1
15987: ARRAY
15988: PUSH
15989: LD_INT 1
15991: ARRAY
15992: PUSH
15993: LD_STRING e
15995: EQUAL
15996: IFFALSE 16019
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15998: LD_VAR 0 18
16002: PUSH
16003: LD_VAR 0 13
16007: ARRAY
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PPUSH
16013: EMPTY
16014: PPUSH
16015: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16019: LD_VAR 0 18
16023: PUSH
16024: LD_VAR 0 13
16028: ARRAY
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 310
16038: IFFALSE 16059
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16040: LD_VAR 0 18
16044: PUSH
16045: LD_VAR 0 13
16049: ARRAY
16050: PUSH
16051: LD_INT 1
16053: ARRAY
16054: PPUSH
16055: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16059: LD_VAR 0 18
16063: PUSH
16064: LD_VAR 0 13
16068: ARRAY
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: LD_VAR 0 35
16078: PPUSH
16079: CALL_OW 188
// end ;
16083: GO 15896
16085: POP
16086: POP
// if GetLives ( damageUnit ) < 250 then
16087: LD_VAR 0 35
16091: PPUSH
16092: CALL_OW 256
16096: PUSH
16097: LD_INT 250
16099: LESS
16100: IFFALSE 16308
// for i := 1 to personel do
16102: LD_ADDR_VAR 0 13
16106: PUSH
16107: DOUBLE
16108: LD_INT 1
16110: DEC
16111: ST_TO_ADDR
16112: LD_VAR 0 18
16116: PUSH
16117: FOR_TO
16118: IFFALSE 16306
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16120: LD_VAR 0 18
16124: PUSH
16125: LD_VAR 0 13
16129: ARRAY
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: PPUSH
16135: CALL_OW 257
16139: PUSH
16140: LD_INT 4
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 18
16148: PUSH
16149: LD_VAR 0 13
16153: ARRAY
16154: PUSH
16155: LD_INT 3
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: EQUAL
16162: AND
16163: IFFALSE 16304
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16165: LD_VAR 0 18
16169: PUSH
16170: LD_VAR 0 13
16174: ARRAY
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 437
16184: IFFALSE 16240
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16186: LD_VAR 0 18
16190: PUSH
16191: LD_VAR 0 13
16195: ARRAY
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: PPUSH
16201: CALL_OW 437
16205: PUSH
16206: LD_INT 1
16208: ARRAY
16209: PUSH
16210: LD_INT 1
16212: ARRAY
16213: PUSH
16214: LD_STRING e
16216: EQUAL
16217: IFFALSE 16240
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16219: LD_VAR 0 18
16223: PUSH
16224: LD_VAR 0 13
16228: ARRAY
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: EMPTY
16235: PPUSH
16236: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16240: LD_VAR 0 18
16244: PUSH
16245: LD_VAR 0 13
16249: ARRAY
16250: PUSH
16251: LD_INT 1
16253: ARRAY
16254: PPUSH
16255: CALL_OW 310
16259: IFFALSE 16280
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16261: LD_VAR 0 18
16265: PUSH
16266: LD_VAR 0 13
16270: ARRAY
16271: PUSH
16272: LD_INT 1
16274: ARRAY
16275: PPUSH
16276: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16280: LD_VAR 0 18
16284: PUSH
16285: LD_VAR 0 13
16289: ARRAY
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: PPUSH
16295: LD_VAR 0 35
16299: PPUSH
16300: CALL_OW 188
// end ;
16304: GO 16117
16306: POP
16307: POP
// end ;
16308: GO 15858
16310: POP
16311: POP
// end else
16312: GO 16519
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16314: LD_VAR 0 22
16318: PUSH
16319: LD_VAR 0 22
16323: PPUSH
16324: LD_INT 56
16326: PUSH
16327: EMPTY
16328: LIST
16329: PPUSH
16330: CALL_OW 72
16334: AND
16335: PUSH
16336: LD_VAR 0 31
16340: AND
16341: IFFALSE 16519
// for i := 1 to personel do
16343: LD_ADDR_VAR 0 13
16347: PUSH
16348: DOUBLE
16349: LD_INT 1
16351: DEC
16352: ST_TO_ADDR
16353: LD_VAR 0 18
16357: PUSH
16358: FOR_TO
16359: IFFALSE 16517
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16361: LD_VAR 0 18
16365: PUSH
16366: LD_VAR 0 13
16370: ARRAY
16371: PUSH
16372: LD_INT 1
16374: ARRAY
16375: PPUSH
16376: CALL_OW 257
16380: PUSH
16381: LD_INT 4
16383: EQUAL
16384: PUSH
16385: LD_VAR 0 18
16389: PUSH
16390: LD_VAR 0 13
16394: ARRAY
16395: PUSH
16396: LD_INT 3
16398: ARRAY
16399: PUSH
16400: LD_INT 1
16402: EQUAL
16403: AND
16404: IFFALSE 16515
// begin if not personel [ i ] [ 2 ] then
16406: LD_VAR 0 18
16410: PUSH
16411: LD_VAR 0 13
16415: ARRAY
16416: PUSH
16417: LD_INT 2
16419: ARRAY
16420: NOT
16421: IFFALSE 16481
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16423: LD_ADDR_VAR 0 18
16427: PUSH
16428: LD_VAR 0 18
16432: PPUSH
16433: LD_VAR 0 13
16437: PUSH
16438: LD_VAR 0 18
16442: PUSH
16443: LD_VAR 0 13
16447: ARRAY
16448: PUSH
16449: LD_INT 1
16451: MINUS
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: LD_VAR 0 31
16461: PUSH
16462: LD_INT 1
16464: PPUSH
16465: LD_VAR 0 31
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: PPUSH
16476: CALL 37391 0 3
16480: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16481: LD_VAR 0 18
16485: PUSH
16486: LD_VAR 0 13
16490: ARRAY
16491: PUSH
16492: LD_INT 1
16494: ARRAY
16495: PPUSH
16496: LD_VAR 0 18
16500: PUSH
16501: LD_VAR 0 13
16505: ARRAY
16506: PUSH
16507: LD_INT 2
16509: ARRAY
16510: PPUSH
16511: CALL_OW 120
// end ;
16515: GO 16358
16517: POP
16518: POP
// wait ( 0 0$01 ) ;
16519: LD_INT 35
16521: PPUSH
16522: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16526: LD_VAR 0 24
16530: PUSH
16531: LD_VAR 0 8
16535: LESS
16536: PUSH
16537: LD_VAR 0 30
16541: AND
16542: IFFALSE 16792
// begin tmp = vehiclesAmount - vehicles ;
16544: LD_ADDR_VAR 0 15
16548: PUSH
16549: LD_VAR 0 8
16553: PUSH
16554: LD_VAR 0 24
16558: MINUS
16559: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16560: LD_ADDR_VAR 0 27
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_VAR 0 2
16574: PPUSH
16575: CALL 7839 0 2
16579: ST_TO_ADDR
// for i := 1 to tmp do
16580: LD_ADDR_VAR 0 13
16584: PUSH
16585: DOUBLE
16586: LD_INT 1
16588: DEC
16589: ST_TO_ADDR
16590: LD_VAR 0 15
16594: PUSH
16595: FOR_TO
16596: IFFALSE 16788
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16598: LD_ADDR_VAR 0 15
16602: PUSH
16603: LD_VAR 0 27
16607: PUSH
16608: LD_INT 1
16610: PPUSH
16611: LD_VAR 0 27
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// if tmp then
16622: LD_VAR 0 15
16626: IFFALSE 16786
// begin if tmp in [ 34 , 14 , 71 ] then
16628: LD_VAR 0 15
16632: PUSH
16633: LD_INT 34
16635: PUSH
16636: LD_INT 14
16638: PUSH
16639: LD_INT 71
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: IN
16647: IFFALSE 16685
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16649: LD_ADDR_VAR 0 28
16653: PUSH
16654: LD_INT 4
16656: PUSH
16657: EMPTY
16658: LIST
16659: PUSH
16660: LD_INT 14
16662: PUSH
16663: EMPTY
16664: LIST
16665: PUSH
16666: LD_INT 24
16668: PUSH
16669: EMPTY
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: LD_VAR 0 2
16681: ARRAY
16682: ST_TO_ADDR
16683: GO 16743
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16685: LD_ADDR_VAR 0 28
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: LD_INT 4
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 13
16706: PUSH
16707: LD_INT 14
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: LD_INT 24
16722: PUSH
16723: LD_INT 22
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_VAR 0 2
16741: ARRAY
16742: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16743: LD_VAR 0 30
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: LD_VAR 0 28
16756: PUSH
16757: LD_INT 1
16759: PPUSH
16760: LD_VAR 0 28
16764: PPUSH
16765: CALL_OW 12
16769: ARRAY
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: LD_VAR 0 15
16781: PPUSH
16782: CALL_OW 185
// end ; end ;
16786: GO 16595
16788: POP
16789: POP
// end else
16790: GO 16805
// ComCancel ( factory [ 1 ] ) ;
16792: LD_VAR 0 30
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16805: LD_ADDR_VAR 0 23
16809: PUSH
16810: LD_VAR 0 4
16814: PPUSH
16815: LD_INT 22
16817: PUSH
16818: LD_VAR 0 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 21
16829: PUSH
16830: LD_INT 2
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 70
16845: PUSH
16846: FOR_IN
16847: IFFALSE 17017
// begin vehicleInList = false ;
16849: LD_ADDR_VAR 0 25
16853: PUSH
16854: LD_INT 0
16856: ST_TO_ADDR
// for i := 1 to vehicles do
16857: LD_ADDR_VAR 0 13
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_VAR 0 24
16871: PUSH
16872: FOR_TO
16873: IFFALSE 16903
// begin if vehicle in vehicles [ i ] then
16875: LD_VAR 0 23
16879: PUSH
16880: LD_VAR 0 24
16884: PUSH
16885: LD_VAR 0 13
16889: ARRAY
16890: IN
16891: IFFALSE 16901
// vehicleInList = true ;
16893: LD_ADDR_VAR 0 25
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// end ;
16901: GO 16872
16903: POP
16904: POP
// if not vehicleInList then
16905: LD_VAR 0 25
16909: NOT
16910: IFFALSE 17015
// if vehicles < vehiclesToAttackAmount then
16912: LD_VAR 0 24
16916: PUSH
16917: LD_VAR 0 10
16921: LESS
16922: IFFALSE 16974
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16924: LD_ADDR_VAR 0 24
16928: PUSH
16929: LD_VAR 0 24
16933: PUSH
16934: LD_VAR 0 23
16938: PUSH
16939: LD_VAR 0 23
16943: PPUSH
16944: CALL_OW 313
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PUSH
16953: LD_VAR 0 23
16957: PPUSH
16958: CALL_OW 302
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: ADD
16971: ST_TO_ADDR
16972: GO 17015
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16974: LD_ADDR_VAR 0 24
16978: PUSH
16979: LD_VAR 0 24
16983: PUSH
16984: LD_VAR 0 23
16988: PUSH
16989: LD_VAR 0 23
16993: PPUSH
16994: CALL_OW 313
16998: PUSH
16999: LD_INT 1
17001: ARRAY
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: ADD
17014: ST_TO_ADDR
// end ;
17015: GO 16846
17017: POP
17018: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
17019: LD_ADDR_VAR 0 37
17023: PUSH
17024: LD_VAR 0 7
17028: PPUSH
17029: LD_INT 81
17031: PUSH
17032: LD_VAR 0 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PPUSH
17041: CALL_OW 70
17045: PUSH
17046: FOR_IN
17047: IFFALSE 17226
// begin defenceUnits = [ ] ;
17049: LD_ADDR_VAR 0 26
17053: PUSH
17054: EMPTY
17055: ST_TO_ADDR
// for i := 1 to personel do
17056: LD_ADDR_VAR 0 13
17060: PUSH
17061: DOUBLE
17062: LD_INT 1
17064: DEC
17065: ST_TO_ADDR
17066: LD_VAR 0 18
17070: PUSH
17071: FOR_TO
17072: IFFALSE 17122
// if personel [ i ] [ 3 ] = 2 then
17074: LD_VAR 0 18
17078: PUSH
17079: LD_VAR 0 13
17083: ARRAY
17084: PUSH
17085: LD_INT 3
17087: ARRAY
17088: PUSH
17089: LD_INT 2
17091: EQUAL
17092: IFFALSE 17120
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
17094: LD_ADDR_VAR 0 26
17098: PUSH
17099: LD_VAR 0 26
17103: PUSH
17104: LD_VAR 0 18
17108: PUSH
17109: LD_VAR 0 13
17113: ARRAY
17114: PUSH
17115: LD_INT 1
17117: ARRAY
17118: ADD
17119: ST_TO_ADDR
17120: GO 17071
17122: POP
17123: POP
// for i := 1 to vehicles do
17124: LD_ADDR_VAR 0 13
17128: PUSH
17129: DOUBLE
17130: LD_INT 1
17132: DEC
17133: ST_TO_ADDR
17134: LD_VAR 0 24
17138: PUSH
17139: FOR_TO
17140: IFFALSE 17190
// if vehicles [ i ] [ 3 ] = 2 then
17142: LD_VAR 0 24
17146: PUSH
17147: LD_VAR 0 13
17151: ARRAY
17152: PUSH
17153: LD_INT 3
17155: ARRAY
17156: PUSH
17157: LD_INT 2
17159: EQUAL
17160: IFFALSE 17188
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17162: LD_ADDR_VAR 0 26
17166: PUSH
17167: LD_VAR 0 26
17171: PUSH
17172: LD_VAR 0 24
17176: PUSH
17177: LD_VAR 0 13
17181: ARRAY
17182: PUSH
17183: LD_INT 1
17185: ARRAY
17186: ADD
17187: ST_TO_ADDR
17188: GO 17139
17190: POP
17191: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17192: LD_VAR 0 26
17196: PPUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 60
17202: PUSH
17203: EMPTY
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 72
17214: PPUSH
17215: LD_VAR 0 37
17219: PPUSH
17220: CALL_OW 175
// end ;
17224: GO 17046
17226: POP
17227: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17228: LD_ADDR_VAR 0 38
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_VAR 0 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 30
17250: PUSH
17251: LD_INT 31
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 32
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 30
17270: PUSH
17271: LD_INT 33
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 30
17280: PUSH
17281: LD_INT 4
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: LD_INT 5
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17315: LD_ADDR_VAR 0 39
17319: PUSH
17320: LD_INT 81
17322: PUSH
17323: LD_VAR 0 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 21
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 58
17344: PUSH
17345: EMPTY
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17358: LD_VAR 0 38
17362: PUSH
17363: LD_VAR 0 39
17367: AND
17368: IFFALSE 17438
// for i in attackBuildings do
17370: LD_ADDR_VAR 0 13
17374: PUSH
17375: LD_VAR 0 38
17379: PUSH
17380: FOR_IN
17381: IFFALSE 17436
// for j in enemyBuildings do
17383: LD_ADDR_VAR 0 14
17387: PUSH
17388: LD_VAR 0 39
17392: PUSH
17393: FOR_IN
17394: IFFALSE 17432
// if GetDistUnits ( i , j ) < 12 then
17396: LD_VAR 0 13
17400: PPUSH
17401: LD_VAR 0 14
17405: PPUSH
17406: CALL_OW 296
17410: PUSH
17411: LD_INT 12
17413: LESS
17414: IFFALSE 17430
// ComAttackUnit ( i , j ) ;
17416: LD_VAR 0 13
17420: PPUSH
17421: LD_VAR 0 14
17425: PPUSH
17426: CALL_OW 115
17430: GO 17393
17432: POP
17433: POP
17434: GO 17380
17436: POP
17437: POP
// until not personel or not enableOmicronAI ;
17438: LD_VAR 0 18
17442: NOT
17443: PUSH
17444: LD_EXP 30
17448: NOT
17449: OR
17450: IFFALSE 12454
// end ;
17452: LD_VAR 0 12
17456: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
17461: PPUSH
// weapons = [ ru_gun ] ;
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: LD_INT 44
17469: PUSH
17470: EMPTY
17471: LIST
17472: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_EXP 73
17482: PUSH
17483: FOR_IN
17484: IFFALSE 17516
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_VAR 0 3
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_VAR 0 3
17503: PPUSH
17504: CALL_OW 12
17508: ARRAY
17509: PPUSH
17510: CALL_OW 208
17514: GO 17483
17516: POP
17517: POP
// end ;
17518: LD_VAR 0 1
17522: RET
// export function KirovProduceVehicles ( factory ) ; begin
17523: LD_INT 0
17525: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_INT 21
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_INT 51
17542: PPUSH
17543: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 21
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: LD_INT 51
17563: PPUSH
17564: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: LD_INT 21
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 1
17581: PPUSH
17582: LD_INT 51
17584: PPUSH
17585: CALL_OW 185
// case Difficulty of 1 :
17589: LD_OWVAR 67
17593: PUSH
17594: LD_INT 1
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17725
17602: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17603: LD_VAR 0 1
17607: PPUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 23
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 2
17623: PPUSH
17624: CALL_OW 12
17628: ARRAY
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: LD_INT 43
17638: PPUSH
17639: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_INT 21
17650: PUSH
17651: LD_INT 23
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 1
17660: PPUSH
17661: LD_INT 2
17663: PPUSH
17664: CALL_OW 12
17668: ARRAY
17669: PPUSH
17670: LD_INT 1
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: LD_INT 43
17678: PPUSH
17679: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17683: LD_VAR 0 1
17687: PPUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 23
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 1
17700: PPUSH
17701: LD_INT 2
17703: PPUSH
17704: CALL_OW 12
17708: ARRAY
17709: PPUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: LD_INT 44
17718: PPUSH
17719: CALL_OW 185
// end ; 2 :
17723: GO 17994
17725: LD_INT 2
17727: DOUBLE
17728: EQUAL
17729: IFTRUE 17733
17731: GO 17856
17733: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17734: LD_VAR 0 1
17738: PPUSH
17739: LD_INT 21
17741: PUSH
17742: LD_INT 23
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_INT 2
17754: PPUSH
17755: CALL_OW 12
17759: ARRAY
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: LD_INT 42
17769: PPUSH
17770: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17774: LD_VAR 0 1
17778: PPUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 12
17799: ARRAY
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_INT 43
17809: PPUSH
17810: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17814: LD_VAR 0 1
17818: PPUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 23
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 1
17831: PPUSH
17832: LD_INT 2
17834: PPUSH
17835: CALL_OW 12
17839: ARRAY
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 1
17846: PPUSH
17847: LD_INT 44
17849: PPUSH
17850: CALL_OW 185
// end ; 3 .. 4 :
17854: GO 17994
17856: LD_INT 3
17858: DOUBLE
17859: GREATEREQUAL
17860: IFFALSE 17868
17862: LD_INT 4
17864: DOUBLE
17865: LESSEQUAL
17866: IFTRUE 17870
17868: GO 17993
17870: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17871: LD_VAR 0 1
17875: PPUSH
17876: LD_INT 21
17878: PUSH
17879: LD_INT 23
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 1
17888: PPUSH
17889: LD_INT 2
17891: PPUSH
17892: CALL_OW 12
17896: ARRAY
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: LD_INT 42
17906: PPUSH
17907: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17911: LD_VAR 0 1
17915: PPUSH
17916: LD_INT 21
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 1
17928: PPUSH
17929: LD_INT 2
17931: PPUSH
17932: CALL_OW 12
17936: ARRAY
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: LD_INT 42
17946: PPUSH
17947: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17951: LD_VAR 0 1
17955: PPUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 23
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_INT 2
17971: PPUSH
17972: CALL_OW 12
17976: ARRAY
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: LD_INT 44
17986: PPUSH
17987: CALL_OW 185
// end ; end ;
17991: GO 17994
17993: POP
// end ;
17994: LD_VAR 0 2
17998: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
// vehicles = [ ] ;
18008: LD_ADDR_VAR 0 3
18012: PUSH
18013: EMPTY
18014: ST_TO_ADDR
// cargoRefuel = [ ] ;
18015: LD_ADDR_VAR 0 7
18019: PUSH
18020: EMPTY
18021: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
18022: LD_ADDR_VAR 0 4
18026: PUSH
18027: LD_EXP 77
18031: PUSH
18032: FOR_IN
18033: IFFALSE 18082
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: LD_VAR 0 4
18052: PUSH
18053: LD_VAR 0 4
18057: PPUSH
18058: CALL_OW 313
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PPUSH
18075: CALL_OW 2
18079: ST_TO_ADDR
18080: GO 18032
18082: POP
18083: POP
// repeat for i := 1 to vehicles do
18084: LD_ADDR_VAR 0 2
18088: PUSH
18089: DOUBLE
18090: LD_INT 1
18092: DEC
18093: ST_TO_ADDR
18094: LD_VAR 0 3
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18138
// if vehicles [ i ] [ 3 ] = 1 then
18102: LD_VAR 0 3
18106: PUSH
18107: LD_VAR 0 2
18111: ARRAY
18112: PUSH
18113: LD_INT 3
18115: ARRAY
18116: PUSH
18117: LD_INT 1
18119: EQUAL
18120: IFFALSE 18136
// goodVehs = goodVehs + 1 ;
18122: LD_ADDR_VAR 0 5
18126: PUSH
18127: LD_VAR 0 5
18131: PUSH
18132: LD_INT 1
18134: PLUS
18135: ST_TO_ADDR
18136: GO 18099
18138: POP
18139: POP
// if goodVehs = vehicles then
18140: LD_VAR 0 5
18144: PUSH
18145: LD_VAR 0 3
18149: EQUAL
18150: IFFALSE 18373
// for i := 1 to vehicles do
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: DOUBLE
18158: LD_INT 1
18160: DEC
18161: ST_TO_ADDR
18162: LD_VAR 0 3
18166: PUSH
18167: FOR_TO
18168: IFFALSE 18371
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18170: LD_VAR 0 3
18174: PUSH
18175: LD_VAR 0 2
18179: ARRAY
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: CALL_OW 314
18189: NOT
18190: IFFALSE 18369
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18192: LD_VAR 0 3
18196: PUSH
18197: LD_VAR 0 2
18201: ARRAY
18202: PUSH
18203: LD_INT 1
18205: ARRAY
18206: PPUSH
18207: CALL_OW 261
18211: PUSH
18212: LD_INT 50
18214: LESS
18215: IFFALSE 18344
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18217: LD_ADDR_VAR 0 6
18221: PUSH
18222: LD_INT 22
18224: PUSH
18225: LD_INT 6
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 34
18244: PUSH
18245: LD_INT 51
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 50
18254: PUSH
18255: EMPTY
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: CALL_OW 69
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18308
// if GetCargo ( cargo , mat_oil ) > 0 then
18272: LD_VAR 0 6
18276: PPUSH
18277: LD_INT 2
18279: PPUSH
18280: CALL_OW 289
18284: PUSH
18285: LD_INT 0
18287: GREATER
18288: IFFALSE 18306
// cargoRefuel = cargoRefuel ^ cargo ;
18290: LD_ADDR_VAR 0 7
18294: PUSH
18295: LD_VAR 0 7
18299: PUSH
18300: LD_VAR 0 6
18304: ADD
18305: ST_TO_ADDR
18306: GO 18269
18308: POP
18309: POP
// if cargo then
18310: LD_VAR 0 6
18314: IFFALSE 18344
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18316: LD_VAR 0 3
18320: PUSH
18321: LD_VAR 0 2
18325: ARRAY
18326: PUSH
18327: LD_INT 1
18329: ARRAY
18330: PPUSH
18331: LD_VAR 0 6
18335: PUSH
18336: LD_INT 1
18338: ARRAY
18339: PPUSH
18340: CALL 8453 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18344: LD_VAR 0 3
18348: PUSH
18349: LD_VAR 0 2
18353: ARRAY
18354: PUSH
18355: LD_INT 1
18357: ARRAY
18358: PPUSH
18359: LD_INT 26
18361: PPUSH
18362: LD_INT 35
18364: PPUSH
18365: CALL_OW 174
// end ; end ;
18369: GO 18167
18371: POP
18372: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18373: LD_VAR 0 3
18377: PUSH
18378: LD_VAR 0 2
18382: ARRAY
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL 10205 0 2
18395: PUSH
18396: LD_VAR 0 3
18400: PUSH
18401: LD_VAR 0 2
18405: ARRAY
18406: PUSH
18407: LD_INT 2
18409: ARRAY
18410: PPUSH
18411: CALL_OW 310
18415: NOT
18416: AND
18417: IFFALSE 18453
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18419: LD_VAR 0 3
18423: PUSH
18424: LD_VAR 0 2
18428: ARRAY
18429: PUSH
18430: LD_INT 2
18432: ARRAY
18433: PPUSH
18434: LD_VAR 0 3
18438: PUSH
18439: LD_VAR 0 2
18443: ARRAY
18444: PUSH
18445: LD_INT 1
18447: ARRAY
18448: PPUSH
18449: CALL_OW 120
// goodVehs = 0 ;
18453: LD_ADDR_VAR 0 5
18457: PUSH
18458: LD_INT 0
18460: ST_TO_ADDR
// for i := 1 to vehicles do
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: DOUBLE
18467: LD_INT 1
18469: DEC
18470: ST_TO_ADDR
18471: LD_VAR 0 3
18475: PUSH
18476: FOR_TO
18477: IFFALSE 19003
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18479: LD_VAR 0 3
18483: PUSH
18484: LD_VAR 0 2
18488: ARRAY
18489: PUSH
18490: LD_INT 1
18492: ARRAY
18493: PPUSH
18494: CALL_OW 256
18498: PUSH
18499: LD_INT 500
18501: LESS
18502: PUSH
18503: LD_VAR 0 3
18507: PUSH
18508: LD_VAR 0 2
18512: ARRAY
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: LD_INT 78
18520: PPUSH
18521: LD_INT 39
18523: PPUSH
18524: CALL_OW 297
18528: PUSH
18529: LD_INT 9
18531: LESS
18532: NOT
18533: AND
18534: IFFALSE 18599
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18536: LD_ADDR_VAR 0 3
18540: PUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_VAR 0 2
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_VAR 0 2
18560: ARRAY
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: LD_INT 2
18568: PPUSH
18569: CALL 37391 0 3
18573: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18574: LD_VAR 0 3
18578: PUSH
18579: LD_VAR 0 2
18583: ARRAY
18584: PUSH
18585: LD_INT 1
18587: ARRAY
18588: PPUSH
18589: LD_INT 78
18591: PPUSH
18592: LD_INT 39
18594: PPUSH
18595: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18599: LD_VAR 0 3
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PUSH
18610: LD_INT 1
18612: ARRAY
18613: PPUSH
18614: CALL_OW 256
18618: PUSH
18619: LD_INT 500
18621: LESS
18622: PUSH
18623: LD_VAR 0 3
18627: PUSH
18628: LD_VAR 0 2
18632: ARRAY
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_INT 78
18640: PPUSH
18641: LD_INT 39
18643: PPUSH
18644: CALL_OW 297
18648: PUSH
18649: LD_INT 9
18651: LESS
18652: AND
18653: PUSH
18654: LD_VAR 0 3
18658: PUSH
18659: LD_VAR 0 2
18663: ARRAY
18664: PUSH
18665: LD_INT 1
18667: ARRAY
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL 10205 0 2
18676: NOT
18677: AND
18678: IFFALSE 18733
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18680: LD_VAR 0 3
18684: PUSH
18685: LD_VAR 0 2
18689: ARRAY
18690: PUSH
18691: LD_INT 2
18693: ARRAY
18694: PPUSH
18695: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18699: LD_VAR 0 3
18703: PUSH
18704: LD_VAR 0 2
18708: ARRAY
18709: PUSH
18710: LD_INT 2
18712: ARRAY
18713: PPUSH
18714: LD_VAR 0 3
18718: PUSH
18719: LD_VAR 0 2
18723: ARRAY
18724: PUSH
18725: LD_INT 1
18727: ARRAY
18728: PPUSH
18729: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18733: LD_VAR 0 3
18737: PUSH
18738: LD_VAR 0 2
18742: ARRAY
18743: PUSH
18744: LD_INT 1
18746: ARRAY
18747: PPUSH
18748: CALL_OW 256
18752: PUSH
18753: LD_INT 1000
18755: EQUAL
18756: PUSH
18757: LD_VAR 0 3
18761: PUSH
18762: LD_VAR 0 2
18766: ARRAY
18767: PUSH
18768: LD_INT 3
18770: ARRAY
18771: PUSH
18772: LD_INT 2
18774: EQUAL
18775: AND
18776: IFFALSE 18850
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_VAR 0 3
18787: PPUSH
18788: LD_VAR 0 2
18792: PUSH
18793: LD_VAR 0 3
18797: PUSH
18798: LD_VAR 0 2
18802: ARRAY
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL 37391 0 3
18815: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18816: LD_VAR 0 3
18820: PUSH
18821: LD_VAR 0 2
18825: ARRAY
18826: PUSH
18827: LD_INT 2
18829: ARRAY
18830: PPUSH
18831: LD_VAR 0 3
18835: PUSH
18836: LD_VAR 0 2
18840: ARRAY
18841: PUSH
18842: LD_INT 1
18844: ARRAY
18845: PPUSH
18846: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_VAR 0 2
18859: ARRAY
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: CALL_OW 256
18869: PUSH
18870: LD_INT 250
18872: LESS
18873: IFFALSE 18900
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 3
18889: PUSH
18890: LD_VAR 0 2
18894: ARRAY
18895: PUSH
18896: EMPTY
18897: LIST
18898: DIFF
18899: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_VAR 0 2
18909: ARRAY
18910: PUSH
18911: LD_INT 2
18913: ARRAY
18914: PPUSH
18915: CALL_OW 256
18919: PUSH
18920: LD_INT 250
18922: LESS
18923: PUSH
18924: LD_VAR 0 3
18928: PUSH
18929: LD_VAR 0 2
18933: ARRAY
18934: PUSH
18935: LD_INT 1
18937: ARRAY
18938: PPUSH
18939: CALL_OW 256
18943: PUSH
18944: LD_INT 250
18946: GREATER
18947: AND
18948: IFFALSE 19001
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18950: LD_ADDR_EXP 31
18954: PUSH
18955: LD_EXP 31
18959: PUSH
18960: LD_VAR 0 3
18964: PUSH
18965: LD_VAR 0 2
18969: ARRAY
18970: PUSH
18971: LD_INT 1
18973: ARRAY
18974: ADD
18975: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18976: LD_ADDR_VAR 0 3
18980: PUSH
18981: LD_VAR 0 3
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: LD_VAR 0 2
18995: ARRAY
18996: PUSH
18997: EMPTY
18998: LIST
18999: DIFF
19000: ST_TO_ADDR
// end ; end ;
19001: GO 18476
19003: POP
19004: POP
// wait ( 0 0$1 ) ;
19005: LD_INT 35
19007: PPUSH
19008: CALL_OW 67
// until omicronSurrender ;
19012: LD_EXP 26
19016: IFFALSE 18084
// end ;
19018: LD_VAR 0 1
19022: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
19032: PPUSH
19033: PPUSH
19034: PPUSH
19035: PPUSH
19036: PPUSH
19037: PPUSH
19038: PPUSH
// inBase = false ;
19039: LD_ADDR_VAR 0 15
19043: PUSH
19044: LD_INT 0
19046: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
19047: LD_ADDR_VAR 0 8
19051: PUSH
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_INT 22
19059: PUSH
19060: LD_INT 3
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: PPUSH
19070: CALL_OW 70
19074: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
19075: LD_ADDR_VAR 0 9
19079: PUSH
19080: LD_VAR 0 2
19084: PPUSH
19085: CALL_OW 435
19089: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
19090: LD_ADDR_VAR 0 12
19094: PUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: LD_INT 50
19102: PUSH
19103: EMPTY
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 72
19153: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19154: LD_ADDR_VAR 0 13
19158: PUSH
19159: LD_VAR 0 1
19163: PPUSH
19164: LD_INT 50
19166: PUSH
19167: EMPTY
19168: LIST
19169: PUSH
19170: LD_INT 25
19172: PUSH
19173: LD_INT 4
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 72
19188: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19189: LD_ADDR_VAR 0 14
19193: PUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: LD_INT 3
19201: PUSH
19202: LD_INT 24
19204: PUSH
19205: LD_INT 1000
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 72
19220: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19221: LD_ADDR_VAR 0 6
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_INT 3
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19244: LD_ADDR_VAR 0 5
19248: PUSH
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 50
19256: PUSH
19257: EMPTY
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: PPUSH
19263: CALL_OW 72
19267: PUSH
19268: FOR_IN
19269: IFFALSE 20016
// begin if attackUnits and medics then
19271: LD_VAR 0 12
19275: PUSH
19276: LD_VAR 0 13
19280: AND
19281: IFFALSE 19348
// begin if damageUnits then
19283: LD_VAR 0 14
19287: IFFALSE 19309
// ComHeal ( medics , damageUnits [ 1 ] ) else
19289: LD_VAR 0 13
19293: PPUSH
19294: LD_VAR 0 14
19298: PUSH
19299: LD_INT 1
19301: ARRAY
19302: PPUSH
19303: CALL_OW 128
19307: GO 19346
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19309: LD_VAR 0 13
19313: PPUSH
19314: LD_VAR 0 12
19318: PUSH
19319: LD_INT 1
19321: ARRAY
19322: PPUSH
19323: CALL_OW 250
19327: PPUSH
19328: LD_VAR 0 12
19332: PUSH
19333: LD_INT 1
19335: ARRAY
19336: PPUSH
19337: CALL_OW 251
19341: PPUSH
19342: CALL_OW 111
// end else
19346: GO 19377
// begin if not attackUnits and medics then
19348: LD_VAR 0 12
19352: NOT
19353: PUSH
19354: LD_VAR 0 13
19358: AND
19359: IFFALSE 19377
// attackUnits = attackUnits ^ medics ;
19361: LD_ADDR_VAR 0 12
19365: PUSH
19366: LD_VAR 0 12
19370: PUSH
19371: LD_VAR 0 13
19375: ADD
19376: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19377: LD_ADDR_VAR 0 4
19381: PUSH
19382: DOUBLE
19383: LD_INT 1
19385: DEC
19386: ST_TO_ADDR
19387: LD_VAR 0 9
19391: PUSH
19392: LD_INT 2
19394: DIVREAL
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19436
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19399: LD_VAR 0 12
19403: PPUSH
19404: LD_VAR 0 9
19408: PUSH
19409: LD_VAR 0 4
19413: ARRAY
19414: PPUSH
19415: LD_VAR 0 9
19419: PUSH
19420: LD_VAR 0 4
19424: PUSH
19425: LD_INT 1
19427: PLUS
19428: ARRAY
19429: PPUSH
19430: CALL_OW 176
19434: GO 19396
19436: POP
19437: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19438: LD_VAR 0 12
19442: PPUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 3
19455: PUSH
19456: LD_INT 60
19458: PUSH
19459: EMPTY
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 72
19474: PPUSH
19475: LD_INT 27
19477: PPUSH
19478: LD_INT 34
19480: PPUSH
19481: CALL_OW 111
// wait ( 0 0$01 ) ;
19485: LD_INT 35
19487: PPUSH
19488: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19492: LD_VAR 0 8
19496: PUSH
19497: LD_VAR 0 12
19501: PPUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 3
19514: PUSH
19515: LD_INT 60
19517: PUSH
19518: EMPTY
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 72
19533: AND
19534: IFFALSE 19717
// begin for playerUnit in playerUnits do
19536: LD_ADDR_VAR 0 7
19540: PUSH
19541: LD_VAR 0 6
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19713
// begin if Attacks ( playerUnit ) then
19549: LD_VAR 0 7
19553: PPUSH
19554: CALL_OW 320
19558: IFFALSE 19645
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19560: LD_VAR 0 7
19564: PPUSH
19565: CALL_OW 320
19569: PUSH
19570: LD_VAR 0 1
19574: IN
19575: PUSH
19576: LD_VAR 0 7
19580: PPUSH
19581: LD_VAR 0 5
19585: PPUSH
19586: CALL_OW 296
19590: PUSH
19591: LD_INT 13
19593: LESS
19594: AND
19595: IFFALSE 19643
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19597: LD_VAR 0 12
19601: PPUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 3
19614: PUSH
19615: LD_INT 60
19617: PUSH
19618: EMPTY
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PPUSH
19629: CALL_OW 72
19633: PPUSH
19634: LD_VAR 0 7
19638: PPUSH
19639: CALL_OW 115
19643: GO 19711
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19645: LD_ADDR_VAR 0 10
19649: PUSH
19650: LD_VAR 0 8
19654: PPUSH
19655: LD_VAR 0 5
19659: PPUSH
19660: CALL_OW 74
19664: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19665: LD_VAR 0 12
19669: PPUSH
19670: LD_INT 21
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 60
19685: PUSH
19686: EMPTY
19687: LIST
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 72
19701: PPUSH
19702: LD_VAR 0 10
19706: PPUSH
19707: CALL_OW 115
// end ; end ;
19711: GO 19546
19713: POP
19714: POP
// end else
19715: GO 19764
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19717: LD_VAR 0 12
19721: PPUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: LD_INT 60
19737: PUSH
19738: EMPTY
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PPUSH
19749: CALL_OW 72
19753: PPUSH
19754: LD_INT 27
19756: PPUSH
19757: LD_INT 34
19759: PPUSH
19760: CALL_OW 111
// if enemyUnitsOnRoad then
19764: LD_VAR 0 8
19768: IFFALSE 19952
// begin for playerUnit in playerUnits do
19770: LD_ADDR_VAR 0 7
19774: PUSH
19775: LD_VAR 0 6
19779: PUSH
19780: FOR_IN
19781: IFFALSE 19948
// begin if Attacks ( playerUnit ) then
19783: LD_VAR 0 7
19787: PPUSH
19788: CALL_OW 320
19792: IFFALSE 19865
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19794: LD_VAR 0 7
19798: PPUSH
19799: CALL_OW 320
19803: PUSH
19804: LD_VAR 0 1
19808: IN
19809: PUSH
19810: LD_VAR 0 7
19814: PPUSH
19815: LD_VAR 0 5
19819: PPUSH
19820: CALL_OW 296
19824: PUSH
19825: LD_INT 13
19827: LESS
19828: AND
19829: IFFALSE 19863
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19831: LD_VAR 0 12
19835: PPUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: PPUSH
19849: CALL_OW 72
19853: PPUSH
19854: LD_VAR 0 7
19858: PPUSH
19859: CALL_OW 115
19863: GO 19946
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19865: LD_ADDR_VAR 0 10
19869: PUSH
19870: LD_VAR 0 8
19874: PPUSH
19875: LD_VAR 0 12
19879: PPUSH
19880: LD_INT 21
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 50
19892: PUSH
19893: EMPTY
19894: LIST
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 72
19904: PUSH
19905: LD_INT 1
19907: ARRAY
19908: PPUSH
19909: CALL_OW 74
19913: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19914: LD_VAR 0 12
19918: PPUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: PPUSH
19932: CALL_OW 72
19936: PPUSH
19937: LD_VAR 0 10
19941: PPUSH
19942: CALL_OW 115
// end ; end ;
19946: GO 19780
19948: POP
19949: POP
// end else
19950: GO 19985
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19952: LD_VAR 0 12
19956: PPUSH
19957: LD_INT 21
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: PPUSH
19970: CALL_OW 72
19974: PPUSH
19975: LD_INT 27
19977: PPUSH
19978: LD_INT 34
19980: PPUSH
19981: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19985: LD_VAR 0 5
19989: PPUSH
19990: LD_INT 27
19992: PPUSH
19993: LD_INT 34
19995: PPUSH
19996: CALL_OW 297
20000: PUSH
20001: LD_INT 5
20003: LESS
20004: IFFALSE 20014
// inBase = true ;
20006: LD_ADDR_VAR 0 15
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// end ;
20014: GO 19268
20016: POP
20017: POP
// wait ( 0 0$1 ) ;
20018: LD_INT 35
20020: PPUSH
20021: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
20025: LD_VAR 0 1
20029: PPUSH
20030: LD_INT 50
20032: PUSH
20033: EMPTY
20034: LIST
20035: PPUSH
20036: CALL_OW 72
20040: PUSH
20041: LD_INT 0
20043: EQUAL
20044: PUSH
20045: LD_VAR 0 15
20049: OR
20050: IFFALSE 19047
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
20052: LD_VAR 0 1
20056: PPUSH
20057: LD_INT 21
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 50
20069: PUSH
20070: EMPTY
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 72
20081: PPUSH
20082: LD_INT 27
20084: PPUSH
20085: LD_INT 34
20087: PPUSH
20088: CALL_OW 111
// for i := 1 to units do
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: DOUBLE
20098: LD_INT 1
20100: DEC
20101: ST_TO_ADDR
20102: LD_VAR 0 1
20106: PUSH
20107: FOR_TO
20108: IFFALSE 20143
// if IsOk ( units [ i ] ) then
20110: LD_VAR 0 1
20114: PUSH
20115: LD_VAR 0 4
20119: ARRAY
20120: PPUSH
20121: CALL_OW 302
20125: IFFALSE 20141
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20127: LD_ADDR_EXP 15
20131: PUSH
20132: LD_EXP 15
20136: PUSH
20137: LD_INT 1
20139: PLUS
20140: ST_TO_ADDR
20141: GO 20107
20143: POP
20144: POP
// amSupportTroops = amSupportTroops diff units ;
20145: LD_ADDR_EXP 85
20149: PUSH
20150: LD_EXP 85
20154: PUSH
20155: LD_VAR 0 1
20159: DIFF
20160: ST_TO_ADDR
// newBase = amBase ;
20161: LD_ADDR_VAR 0 16
20165: PUSH
20166: LD_EXP 87
20170: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20171: LD_ADDR_VAR 0 16
20175: PUSH
20176: LD_VAR 0 16
20180: PUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: LD_INT 50
20188: PUSH
20189: EMPTY
20190: LIST
20191: PPUSH
20192: CALL_OW 72
20196: ADD
20197: ST_TO_ADDR
// amBase = newBase ;
20198: LD_ADDR_EXP 87
20202: PUSH
20203: LD_VAR 0 16
20207: ST_TO_ADDR
// end ; end_of_file
20208: LD_VAR 0 3
20212: RET
// export function Lose_Burlak ; begin
20213: LD_INT 0
20215: PPUSH
// YouLost ( Burlak ) ;
20216: LD_STRING Burlak
20218: PPUSH
20219: CALL_OW 104
// end ;
20223: LD_VAR 0 1
20227: RET
// export function Lose_Omicron ; begin
20228: LD_INT 0
20230: PPUSH
// YouLost ( Omicron ) ;
20231: LD_STRING Omicron
20233: PPUSH
20234: CALL_OW 104
// end ;
20238: LD_VAR 0 1
20242: RET
// export function Lose_Vehicles ; begin
20243: LD_INT 0
20245: PPUSH
// YouLost ( Vehicles ) ;
20246: LD_STRING Vehicles
20248: PPUSH
20249: CALL_OW 104
// end ;
20253: LD_VAR 0 1
20257: RET
// export function Lose_SelfAttack ; begin
20258: LD_INT 0
20260: PPUSH
// YouLost ( SelfAttack ) ;
20261: LD_STRING SelfAttack
20263: PPUSH
20264: CALL_OW 104
// end ;
20268: LD_VAR 0 1
20272: RET
// export function Lose_Delay ; begin
20273: LD_INT 0
20275: PPUSH
// YouLost ( Delay ) ;
20276: LD_STRING Delay
20278: PPUSH
20279: CALL_OW 104
// end ; end_of_file
20283: LD_VAR 0 1
20287: RET
// export function FinishMission ; begin
20288: LD_INT 0
20290: PPUSH
// SetRewards ;
20291: CALL 20312 0 0
// SavePlayerCharacters ;
20295: CALL 20526 0 0
// SaveGlobalVariables ;
20299: CALL 20855 0 0
// YouWin ;
20303: CALL_OW 103
// end ;
20307: LD_VAR 0 1
20311: RET
// function SetRewards ; var unitsToReward ; begin
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
// if produceMoreVehicles then
20316: LD_EXP 19
20320: IFFALSE 20334
// AddMedal ( Surplus , 1 ) else
20322: LD_STRING Surplus
20324: PPUSH
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 101
20332: GO 20364
// if produceOnlyForYou then
20334: LD_EXP 20
20338: IFFALSE 20353
// AddMedal ( Surplus , - 1 ) else
20340: LD_STRING Surplus
20342: PPUSH
20343: LD_INT 1
20345: NEG
20346: PPUSH
20347: CALL_OW 101
20351: GO 20364
// AddMedal ( Surplus , - 2 ) ;
20353: LD_STRING Surplus
20355: PPUSH
20356: LD_INT 2
20358: NEG
20359: PPUSH
20360: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20364: LD_EXP 15
20368: PUSH
20369: LD_EXP 47
20373: LESS
20374: IFFALSE 20388
// AddMedal ( PreventReinforcements , 1 ) else
20376: LD_STRING PreventReinforcements
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: CALL_OW 101
20386: GO 20399
// AddMedal ( PreventReinforcements , - 1 ) ;
20388: LD_STRING PreventReinforcements
20390: PPUSH
20391: LD_INT 1
20393: NEG
20394: PPUSH
20395: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20399: LD_EXP 10
20403: PUSH
20404: LD_EXP 56
20408: PPUSH
20409: CALL_OW 302
20413: AND
20414: IFFALSE 20428
// AddMedal ( Scholtze , 1 ) else
20416: LD_STRING Scholtze
20418: PPUSH
20419: LD_INT 1
20421: PPUSH
20422: CALL_OW 101
20426: GO 20439
// AddMedal ( Scholtze , - 1 ) ;
20428: LD_STRING Scholtze
20430: PPUSH
20431: LD_INT 1
20433: NEG
20434: PPUSH
20435: CALL_OW 101
// GiveMedals ( Main ) ;
20439: LD_STRING Main
20441: PPUSH
20442: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20446: LD_ADDR_VAR 0 2
20450: PUSH
20451: LD_INT 22
20453: PUSH
20454: LD_INT 3
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 21
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PPUSH
20475: CALL_OW 69
20479: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20480: LD_ADDR_VAR 0 2
20484: PUSH
20485: LD_VAR 0 2
20489: PUSH
20490: LD_EXP 80
20494: ADD
20495: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20496: LD_ADDR_VAR 0 2
20500: PUSH
20501: LD_VAR 0 2
20505: PUSH
20506: LD_EXP 63
20510: DIFF
20511: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20512: LD_VAR 0 2
20516: PPUSH
20517: CALL_OW 43
// end ;
20521: LD_VAR 0 1
20525: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20526: LD_INT 0
20528: PPUSH
20529: PPUSH
20530: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20531: LD_EXP 50
20535: PPUSH
20536: LD_STRING Burlak
20538: PPUSH
20539: LD_INT 3
20541: PPUSH
20542: CALL 7337 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20546: LD_EXP 51
20550: PPUSH
20551: LD_STRING Gnyevko
20553: PPUSH
20554: LD_INT 3
20556: PPUSH
20557: CALL 7337 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20561: LD_EXP 53
20565: PPUSH
20566: LD_STRING Kovalyuk
20568: PPUSH
20569: LD_INT 3
20571: PPUSH
20572: CALL 7337 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20576: LD_EXP 52
20580: PPUSH
20581: LD_STRING Kirilenkova
20583: PPUSH
20584: LD_INT 3
20586: PPUSH
20587: CALL 7337 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20591: LD_EXP 56
20595: PPUSH
20596: LD_STRING Scholtze
20598: PPUSH
20599: LD_INT 3
20601: PPUSH
20602: CALL 7337 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20606: LD_EXP 54
20610: PPUSH
20611: LD_STRING Belkov
20613: PPUSH
20614: LD_INT 3
20616: PPUSH
20617: CALL 7337 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20621: LD_EXP 55
20625: PPUSH
20626: LD_STRING Belkov2
20628: PPUSH
20629: LD_INT 3
20631: PPUSH
20632: CALL 7337 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20636: LD_EXP 54
20640: PPUSH
20641: LD_STRING Belkov
20643: PPUSH
20644: LD_INT 6
20646: PPUSH
20647: CALL 7337 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20651: LD_EXP 55
20655: PPUSH
20656: LD_STRING Belkov2
20658: PPUSH
20659: LD_INT 6
20661: PPUSH
20662: CALL 7337 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20666: LD_ADDR_VAR 0 2
20670: PUSH
20671: LD_INT 22
20673: PUSH
20674: LD_INT 3
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 21
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 50
20693: PUSH
20694: EMPTY
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: PUSH
20707: LD_EXP 50
20711: PUSH
20712: LD_EXP 51
20716: PUSH
20717: LD_EXP 54
20721: PUSH
20722: LD_EXP 55
20726: PUSH
20727: LD_EXP 53
20731: PUSH
20732: LD_EXP 52
20736: PUSH
20737: LD_EXP 56
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: DIFF
20751: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20752: LD_VAR 0 2
20756: PPUSH
20757: LD_STRING other_survivors
20759: PPUSH
20760: LD_INT 3
20762: PPUSH
20763: CALL 7393 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 6
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 21
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 50
20794: PUSH
20795: EMPTY
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: PPUSH
20803: CALL_OW 69
20807: PUSH
20808: LD_EXP 62
20812: PUSH
20813: LD_EXP 63
20817: PUSH
20818: LD_EXP 54
20822: PUSH
20823: LD_EXP 55
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: DIFF
20834: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20835: LD_VAR 0 3
20839: PPUSH
20840: LD_STRING other_kirov
20842: PPUSH
20843: LD_INT 6
20845: PPUSH
20846: CALL 7393 0 3
// end ;
20850: LD_VAR 0 1
20854: RET
// function SaveGlobalVariables ; begin
20855: LD_INT 0
20857: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20858: LD_EXP 5
20862: PPUSH
20863: LD_STRING 03_KurinOpinion_1
20865: PPUSH
20866: CALL_OW 39
// SaveVariable ( vehiclesToSave , 03_SavedVehicles_2 ) ;
20870: LD_EXP 7
20874: PPUSH
20875: LD_STRING 03_SavedVehicles_2
20877: PPUSH
20878: CALL_OW 39
// end ; end_of_file
20882: LD_VAR 0 1
20886: RET
// export function CustomEvent ( event ) ; begin
20887: LD_INT 0
20889: PPUSH
// end ;
20890: LD_VAR 0 2
20894: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
20899: PPUSH
20900: PPUSH
20901: PPUSH
20902: PPUSH
20903: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_INT 22
20911: PUSH
20912: LD_INT 3
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: PUSH
20938: FOR_IN
20939: IFFALSE 21136
// if GetTaskList ( i ) > 0 then
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 437
20950: PUSH
20951: LD_INT 0
20953: GREATER
20954: IFFALSE 21134
// for j = 1 to GetTaskList ( i ) do
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: DOUBLE
20962: LD_INT 1
20964: DEC
20965: ST_TO_ADDR
20966: LD_VAR 0 2
20970: PPUSH
20971: CALL_OW 437
20975: PUSH
20976: FOR_TO
20977: IFFALSE 21132
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20979: LD_ADDR_VAR 0 4
20983: PUSH
20984: LD_VAR 0 2
20988: PPUSH
20989: CALL_OW 437
20993: PUSH
20994: LD_VAR 0 3
20998: ARRAY
20999: PUSH
21000: LD_INT 4
21002: ARRAY
21003: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
21004: LD_ADDR_VAR 0 8
21008: PUSH
21009: LD_VAR 0 2
21013: PPUSH
21014: CALL_OW 437
21018: PUSH
21019: LD_VAR 0 3
21023: ARRAY
21024: PUSH
21025: LD_INT 5
21027: ARRAY
21028: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
21029: LD_ADDR_VAR 0 6
21033: PUSH
21034: LD_VAR 0 2
21038: PPUSH
21039: CALL_OW 437
21043: PUSH
21044: LD_VAR 0 3
21048: ARRAY
21049: PUSH
21050: LD_INT 2
21052: ARRAY
21053: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
21054: LD_ADDR_VAR 0 7
21058: PUSH
21059: LD_VAR 0 2
21063: PPUSH
21064: CALL_OW 437
21068: PUSH
21069: LD_VAR 0 3
21073: ARRAY
21074: PUSH
21075: LD_INT 3
21077: ARRAY
21078: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
21079: LD_VAR 0 4
21083: PPUSH
21084: CALL_OW 255
21088: PUSH
21089: LD_INT 6
21091: EQUAL
21092: PUSH
21093: LD_VAR 0 2
21097: PPUSH
21098: CALL_OW 437
21102: PUSH
21103: LD_VAR 0 3
21107: ARRAY
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: PUSH
21113: LD_STRING <
21115: EQUAL
21116: AND
21117: IFFALSE 21130
// SetTaskList ( i , [ ] ) ;
21119: LD_VAR 0 2
21123: PPUSH
21124: EMPTY
21125: PPUSH
21126: CALL_OW 446
// end ;
21130: GO 20976
21132: POP
21133: POP
21134: GO 20938
21136: POP
21137: POP
// end ;
21138: PPOPN 8
21140: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21141: LD_VAR 0 2
21145: PUSH
21146: LD_INT 6
21148: EQUAL
21149: IFFALSE 21163
// SetSide ( building , 6 ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_INT 6
21158: PPUSH
21159: CALL_OW 235
// end ;
21163: PPOPN 3
21165: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
// begin diffUnits = [ ] ;
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: EMPTY
21176: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 255
21186: PUSH
21187: LD_INT 3
21189: EQUAL
21190: PUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 266
21200: PUSH
21201: LD_INT 0
21203: EQUAL
21204: AND
21205: PUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: LD_INT 21
21213: PPUSH
21214: CALL_OW 308
21218: AND
21219: IFFALSE 21233
// SetBName ( building , kagan ) ;
21221: LD_VAR 0 1
21225: PPUSH
21226: LD_STRING kagan
21228: PPUSH
21229: CALL_OW 500
// if GetSide ( building ) = 6 then
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 255
21242: PUSH
21243: LD_INT 6
21245: EQUAL
21246: IFFALSE 21427
// begin if GetBType ( building ) = b_ext_noncombat then
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 266
21257: PUSH
21258: LD_INT 19
21260: EQUAL
21261: IFFALSE 21267
// begin SpawnKirovSupport ;
21263: CALL 4642 0 0
// end ; if GetBType ( building ) = b_depot then
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 266
21276: PUSH
21277: LD_INT 0
21279: EQUAL
21280: IFFALSE 21326
// begin kirovOilDepot = building ;
21282: LD_ADDR_EXP 69
21286: PUSH
21287: LD_VAR 0 1
21291: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21292: LD_EXP 69
21296: PPUSH
21297: CALL_OW 274
21301: PPUSH
21302: LD_INT 2
21304: PPUSH
21305: LD_INT 3000
21307: PPUSH
21308: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21312: LD_EXP 83
21316: PPUSH
21317: LD_VAR 0 1
21321: PPUSH
21322: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21326: LD_VAR 0 1
21330: PPUSH
21331: CALL_OW 266
21335: PUSH
21336: LD_INT 31
21338: EQUAL
21339: PUSH
21340: LD_VAR 0 1
21344: PPUSH
21345: CALL_OW 266
21349: PUSH
21350: LD_INT 4
21352: EQUAL
21353: OR
21354: PUSH
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 20
21362: PPUSH
21363: CALL_OW 308
21367: AND
21368: IFFALSE 21427
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21370: LD_EXP 79
21374: PPUSH
21375: LD_INT 25
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 56
21387: PUSH
21388: EMPTY
21389: LIST
21390: PUSH
21391: LD_INT 3
21393: PUSH
21394: LD_INT 60
21396: PUSH
21397: EMPTY
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: PPUSH
21409: CALL_OW 72
21413: PUSH
21414: LD_INT 1
21416: ARRAY
21417: PPUSH
21418: LD_VAR 0 1
21422: PPUSH
21423: CALL_OW 120
// end ; end ;
21427: PPOPN 3
21429: END
// on UpgradeComplete ( building ) do var i , tmp ;
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21434: LD_VAR 0 1
21438: PPUSH
21439: CALL_OW 255
21443: PUSH
21444: LD_INT 3
21446: EQUAL
21447: PUSH
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 266
21457: PUSH
21458: LD_INT 3
21460: EQUAL
21461: AND
21462: PUSH
21463: LD_EXP 11
21467: NOT
21468: AND
21469: IFFALSE 21480
// Dial_UpgradeWorkshop ( building ) ;
21471: LD_VAR 0 1
21475: PPUSH
21476: CALL 24620 0 1
// end ;
21480: PPOPN 3
21482: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21483: LD_VAR 0 1
21487: PUSH
21488: LD_EXP 50
21492: EQUAL
21493: IFFALSE 21499
// Lose_Burlak ;
21495: CALL 20213 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21499: LD_VAR 0 1
21503: PUSH
21504: LD_EXP 61
21508: EQUAL
21509: PUSH
21510: LD_EXP 29
21514: NOT
21515: AND
21516: IFFALSE 21522
// Lose_Omicron ;
21518: CALL 20228 0 0
// end ;
21522: PPOPN 1
21524: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21525: LD_VAR 0 1
21529: PUSH
21530: LD_INT 3
21532: EQUAL
21533: PUSH
21534: LD_VAR 0 2
21538: PUSH
21539: LD_INT 6
21541: EQUAL
21542: AND
21543: IFFALSE 21549
// Lose_SelfAttack ;
21545: CALL 20258 0 0
// end ;
21549: PPOPN 2
21551: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21552: LD_VAR 0 1
21556: PPUSH
21557: CALL_OW 255
21561: PUSH
21562: LD_INT 6
21564: EQUAL
21565: IFFALSE 21730
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 264
21576: PUSH
21577: LD_INT 51
21579: EQUAL
21580: PUSH
21581: LD_EXP 75
21585: NOT
21586: AND
21587: IFFALSE 21601
// kirovTransportCargo = vehicle else
21589: LD_ADDR_EXP 75
21593: PUSH
21594: LD_VAR 0 1
21598: ST_TO_ADDR
21599: GO 21673
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 264
21610: PUSH
21611: LD_INT 51
21613: EQUAL
21614: IFFALSE 21673
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21616: LD_VAR 0 1
21620: PPUSH
21621: LD_EXP 69
21625: PPUSH
21626: LD_INT 2
21628: PPUSH
21629: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21633: LD_VAR 0 1
21637: PPUSH
21638: LD_INT 137
21640: PPUSH
21641: LD_INT 99
21643: PPUSH
21644: CALL_OW 171
// AddComHold ( vehicle ) ;
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21657: LD_ADDR_EXP 76
21661: PUSH
21662: LD_EXP 76
21666: PUSH
21667: LD_VAR 0 1
21671: ADD
21672: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 264
21682: PUSH
21683: LD_INT 42
21685: PUSH
21686: LD_INT 43
21688: PUSH
21689: LD_INT 44
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: IN
21697: IFFALSE 21730
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21699: LD_ADDR_EXP 77
21703: PUSH
21704: LD_EXP 77
21708: PUSH
21709: LD_VAR 0 1
21713: ADD
21714: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_INT 137
21722: PPUSH
21723: LD_INT 99
21725: PPUSH
21726: CALL_OW 111
// end ; end ; end ;
21730: PPOPN 2
21732: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21733: LD_VAR 0 3
21737: PUSH
21738: LD_INT 6
21740: EQUAL
21741: PUSH
21742: LD_VAR 0 2
21746: PUSH
21747: LD_EXP 31
21751: IN
21752: NOT
21753: AND
21754: IFFALSE 21777
// begin ComExitVehicle ( capturing_unit ) ;
21756: LD_VAR 0 4
21760: PPUSH
21761: CALL_OW 121
// SetSide ( new , 6 ) ;
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 6
21772: PPUSH
21773: CALL_OW 235
// end ; end ;
21777: PPOPN 4
21779: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 255
21789: PUSH
21790: LD_INT 6
21792: EQUAL
21793: PUSH
21794: LD_EXP 22
21798: AND
21799: IFFALSE 21827
// begin wait ( 0 0$2 ) ;
21801: LD_INT 70
21803: PPUSH
21804: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 78
21815: PPUSH
21816: LD_INT 39
21818: PPUSH
21819: CALL_OW 174
// KirovAttackOmicron ;
21823: CALL 17999 0 0
// end ; end ;
21827: PPOPN 2
21829: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21830: LD_VAR 0 2
21834: PPUSH
21835: CALL_OW 255
21839: PUSH
21840: LD_INT 6
21842: EQUAL
21843: PUSH
21844: LD_VAR 0 1
21848: PUSH
21849: LD_INT 39
21851: EQUAL
21852: AND
21853: IFFALSE 21914
// begin MountWeaponTurrent ;
21855: CALL 17457 0 0
// wait ( 3 3$30 ) ;
21859: LD_INT 7350
21861: PPUSH
21862: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21866: LD_INT 22
21868: PUSH
21869: LD_INT 6
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 21
21878: PUSH
21879: LD_INT 3
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 30
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: PPUSH
21901: CALL_OW 69
21905: PUSH
21906: LD_INT 1
21908: ARRAY
21909: PPUSH
21910: CALL 17523 0 1
// end ; end ; end_of_file
21914: PPOPN 2
21916: END
// export function MissionIntro ; var i , unit , freeSlots , tmp , timer ; begin
21917: LD_INT 0
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21925: LD_EXP 50
21929: PUSH
21930: LD_EXP 62
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PPUSH
21939: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21943: LD_EXP 50
21947: PUSH
21948: LD_EXP 64
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PPUSH
21957: LD_EXP 62
21961: PPUSH
21962: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21966: LD_EXP 62
21970: PPUSH
21971: LD_EXP 50
21975: PPUSH
21976: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21980: LD_INT 3
21982: PPUSH
21983: LD_INT 24
21985: PPUSH
21986: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21990: LD_EXP 54
21994: PPUSH
21995: CALL_OW 305
21999: NOT
22000: PUSH
22001: LD_EXP 55
22005: PPUSH
22006: CALL_OW 305
22010: NOT
22011: AND
22012: IFFALSE 22100
// begin Say ( Kurin , D1a-Kur-1 ) ;
22014: LD_EXP 62
22018: PPUSH
22019: LD_STRING D1a-Kur-1
22021: PPUSH
22022: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
22026: LD_EXP 50
22030: PPUSH
22031: LD_STRING D1a-Bur-1
22033: PPUSH
22034: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
22038: LD_EXP 62
22042: PPUSH
22043: LD_STRING D1a-Kur-2
22045: PPUSH
22046: CALL_OW 88
// if platonovOpinion <= 1 then
22050: LD_EXP 6
22054: PUSH
22055: LD_INT 1
22057: LESSEQUAL
22058: IFFALSE 22074
// Say ( Kurin , D1a-Kur-2a ) else
22060: LD_EXP 62
22064: PPUSH
22065: LD_STRING D1a-Kur-2a
22067: PPUSH
22068: CALL_OW 88
22072: GO 22086
// Say ( Kurin , D1a-Kur-2b ) ;
22074: LD_EXP 62
22078: PPUSH
22079: LD_STRING D1a-Kur-2b
22081: PPUSH
22082: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
22086: LD_EXP 50
22090: PPUSH
22091: LD_STRING D1a-Bur-2
22093: PPUSH
22094: CALL_OW 88
// end else
22098: GO 22136
// begin Say ( Kurin , D1b-Kur-1 ) ;
22100: LD_EXP 62
22104: PPUSH
22105: LD_STRING D1b-Kur-1
22107: PPUSH
22108: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
22112: LD_EXP 64
22116: PPUSH
22117: LD_STRING D1b-Bel-1
22119: PPUSH
22120: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22124: LD_EXP 62
22128: PPUSH
22129: LD_STRING D1b-Kur-2
22131: PPUSH
22132: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22136: LD_EXP 62
22140: PPUSH
22141: LD_STRING D2-Kur-1
22143: PPUSH
22144: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22148: LD_EXP 50
22152: PPUSH
22153: LD_STRING D2-Bur-1
22155: PPUSH
22156: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22160: LD_EXP 62
22164: PPUSH
22165: LD_STRING D2-Kur-2
22167: PPUSH
22168: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22172: LD_EXP 50
22176: PPUSH
22177: LD_STRING D2-Bur-2
22179: PPUSH
22180: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22184: LD_EXP 62
22188: PPUSH
22189: LD_STRING D2-Kur-3
22191: PPUSH
22192: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22196: LD_INT 1
22198: PPUSH
22199: LD_INT 6
22201: PPUSH
22202: LD_INT 1
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: CALL_OW 80
// PrepareAmericansMissionIntro ;
22212: CALL 5713 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22216: LD_EXP 84
22220: PPUSH
22221: LD_INT 28
22223: PPUSH
22224: LD_INT 35
22226: PPUSH
22227: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22231: LD_INT 93
22233: PPUSH
22234: LD_INT 36
22236: PPUSH
22237: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22241: LD_INT 93
22243: PPUSH
22244: LD_INT 36
22246: PPUSH
22247: LD_INT 3
22249: PPUSH
22250: LD_INT 9
22252: NEG
22253: PPUSH
22254: CALL_OW 330
// wait ( 0 0$6 ) ;
22258: LD_INT 210
22260: PPUSH
22261: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22265: LD_EXP 63
22269: PPUSH
22270: CALL_OW 85
// wait ( 0 0$1 ) ;
22274: LD_INT 35
22276: PPUSH
22277: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22281: LD_EXP 63
22285: PPUSH
22286: LD_STRING D2-Pop-3
22288: PPUSH
22289: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22293: LD_EXP 50
22297: PUSH
22298: LD_EXP 62
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 87
// wait ( 0 0$1 ) ;
22311: LD_INT 35
22313: PPUSH
22314: CALL_OW 67
// Say ( Kurin , D2-Kur-4 ) ;
22318: LD_EXP 62
22322: PPUSH
22323: LD_STRING D2-Kur-4
22325: PPUSH
22326: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22330: LD_EXP 50
22334: PPUSH
22335: LD_STRING D2-Bur-4
22337: PPUSH
22338: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22342: LD_EXP 62
22346: PPUSH
22347: LD_STRING D2-Kur-5
22349: PPUSH
22350: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22354: LD_EXP 50
22358: PPUSH
22359: LD_STRING D2-Bur-5
22361: PPUSH
22362: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22366: LD_EXP 62
22370: PPUSH
22371: LD_STRING D2-Kur-6
22373: PPUSH
22374: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22378: LD_EXP 51
22382: PPUSH
22383: CALL_OW 305
22387: IFFALSE 22403
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22389: LD_ADDR_EXP 39
22393: PUSH
22394: LD_EXP 39
22398: PUSH
22399: LD_INT 1
22401: MINUS
22402: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22403: LD_EXP 53
22407: PPUSH
22408: CALL_OW 305
22412: IFFALSE 22428
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22414: LD_ADDR_EXP 39
22418: PUSH
22419: LD_EXP 39
22423: PUSH
22424: LD_INT 1
22426: MINUS
22427: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22428: LD_EXP 52
22432: PPUSH
22433: CALL_OW 305
22437: IFFALSE 22453
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22439: LD_ADDR_EXP 39
22443: PUSH
22444: LD_EXP 39
22448: PUSH
22449: LD_INT 1
22451: MINUS
22452: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22453: LD_EXP 39
22457: PPUSH
22458: CALL 7491 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22462: LD_INT 93
22464: PPUSH
22465: LD_INT 36
22467: PPUSH
22468: LD_INT 3
22470: PPUSH
22471: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22475: LD_INT 3
22477: PPUSH
22478: LD_INT 24
22480: PPUSH
22481: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22485: LD_INT 22
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 21
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PPUSH
22509: CALL_OW 69
22513: PPUSH
22514: CALL_OW 122
// wait ( 0 0$1 ) ;
22518: LD_INT 35
22520: PPUSH
22521: CALL_OW 67
// AddComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22525: LD_INT 22
22527: PUSH
22528: LD_INT 3
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 21
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PPUSH
22549: CALL_OW 69
22553: PPUSH
22554: LD_EXP 61
22558: PPUSH
22559: CALL_OW 172
// timer := 0 ;
22563: LD_ADDR_VAR 0 6
22567: PUSH
22568: LD_INT 0
22570: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22571: LD_INT 35
22573: PPUSH
22574: CALL_OW 67
// timer := timer + 1 ;
22578: LD_ADDR_VAR 0 6
22582: PUSH
22583: LD_VAR 0 6
22587: PUSH
22588: LD_INT 1
22590: PLUS
22591: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
22592: LD_EXP 50
22596: PPUSH
22597: CALL_OW 87
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22601: LD_INT 22
22603: PUSH
22604: LD_INT 3
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 21
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PPUSH
22625: CALL_OW 69
22629: PPUSH
22630: LD_EXP 61
22634: PPUSH
22635: CALL_OW 112
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) or timer > 10 ;
22639: LD_EXP 50
22643: PPUSH
22644: LD_EXP 61
22648: PPUSH
22649: CALL_OW 296
22653: PUSH
22654: LD_INT 6
22656: LESS
22657: PUSH
22658: LD_EXP 50
22662: PPUSH
22663: CALL_OW 314
22667: NOT
22668: OR
22669: PUSH
22670: LD_VAR 0 6
22674: PUSH
22675: LD_INT 10
22677: GREATER
22678: OR
22679: IFFALSE 22571
// InGameOff ;
22681: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22685: LD_STRING M1
22687: PPUSH
22688: CALL_OW 337
// SaveForQuickRestart ;
22692: CALL_OW 22
// counterEnable = true ;
22696: LD_ADDR_EXP 90
22700: PUSH
22701: LD_INT 1
22703: ST_TO_ADDR
// counterIndex = 1 ;
22704: LD_ADDR_EXP 91
22708: PUSH
22709: LD_INT 1
22711: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22712: LD_INT 3
22714: PPUSH
22715: LD_INT 24
22717: PPUSH
22718: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22722: LD_INT 6
22724: PPUSH
22725: LD_INT 22
22727: PUSH
22728: LD_INT 6
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 21
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 30
22747: PUSH
22748: LD_INT 6
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: PPUSH
22760: CALL_OW 69
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PPUSH
22769: LD_INT 3
22771: PPUSH
22772: CALL 8906 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22776: LD_INT 1
22778: PPUSH
22779: LD_INT 22
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 21
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 30
22801: PUSH
22802: LD_INT 7
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PPUSH
22814: CALL_OW 69
22818: PUSH
22819: LD_INT 1
22821: ARRAY
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: CALL 8906 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22830: LD_INT 18
22832: PPUSH
22833: LD_INT 22
22835: PUSH
22836: LD_INT 6
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 25
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 70
22872: PPUSH
22873: LD_INT 17
22875: PPUSH
22876: LD_INT 159
22878: PPUSH
22879: LD_INT 116
22881: PPUSH
22882: LD_INT 0
22884: PPUSH
22885: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22889: LD_INT 18
22891: PPUSH
22892: LD_INT 22
22894: PUSH
22895: LD_INT 6
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 21
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 70
22931: PPUSH
22932: LD_INT 19
22934: PPUSH
22935: LD_INT 161
22937: PPUSH
22938: LD_INT 115
22940: PPUSH
22941: LD_INT 5
22943: PPUSH
22944: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22948: LD_INT 18
22950: PPUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 21
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 25
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PPUSH
22986: CALL_OW 70
22990: PPUSH
22991: LD_EXP 68
22995: PPUSH
22996: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
23000: LD_EXP 80
23004: PPUSH
23005: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
23009: LD_ADDR_VAR 0 5
23013: PUSH
23014: LD_EXP 80
23018: PUSH
23019: LD_EXP 63
23023: DIFF
23024: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
23025: LD_ADDR_VAR 0 4
23029: PUSH
23030: LD_INT 6
23032: PUSH
23033: LD_EXP 70
23037: PPUSH
23038: CALL_OW 313
23042: MINUS
23043: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
23044: LD_EXP 80
23048: PUSH
23049: LD_EXP 63
23053: DIFF
23054: PPUSH
23055: LD_EXP 70
23059: PPUSH
23060: CALL_OW 180
// for i = 1 to tmp do
23064: LD_ADDR_VAR 0 2
23068: PUSH
23069: DOUBLE
23070: LD_INT 1
23072: DEC
23073: ST_TO_ADDR
23074: LD_VAR 0 5
23078: PUSH
23079: FOR_TO
23080: IFFALSE 23132
// begin if freeSlots > 0 then
23082: LD_VAR 0 4
23086: PUSH
23087: LD_INT 0
23089: GREATER
23090: IFFALSE 23128
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23092: LD_VAR 0 5
23096: PUSH
23097: LD_VAR 0 2
23101: ARRAY
23102: PPUSH
23103: LD_EXP 70
23107: PPUSH
23108: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23112: LD_ADDR_VAR 0 4
23116: PUSH
23117: LD_VAR 0 4
23121: PUSH
23122: LD_INT 1
23124: MINUS
23125: ST_TO_ADDR
// end else
23126: GO 23130
// break ;
23128: GO 23132
// end ;
23130: GO 23079
23132: POP
23133: POP
// wait ( 0 0$1 ) ;
23134: LD_INT 35
23136: PPUSH
23137: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23141: LD_VAR 0 5
23145: PPUSH
23146: LD_INT 56
23148: PUSH
23149: EMPTY
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 60
23157: PUSH
23158: EMPTY
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 72
23173: PPUSH
23174: LD_EXP 68
23178: PPUSH
23179: CALL_OW 120
// ComWalk ( ruScout ) ;
23183: LD_EXP 65
23187: PPUSH
23188: CALL_OW 138
// wait ( 0 0$1 ) ;
23192: LD_INT 35
23194: PPUSH
23195: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23199: LD_EXP 65
23203: PUSH
23204: LD_EXP 63
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PPUSH
23213: LD_INT 99
23215: PPUSH
23216: LD_INT 37
23218: PPUSH
23219: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23223: LD_EXP 65
23227: PUSH
23228: LD_EXP 63
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PPUSH
23237: LD_INT 88
23239: PPUSH
23240: LD_INT 60
23242: PPUSH
23243: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23247: LD_EXP 65
23251: PUSH
23252: LD_EXP 63
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PPUSH
23261: LD_INT 129
23263: PPUSH
23264: LD_INT 99
23266: PPUSH
23267: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23271: LD_EXP 63
23275: PUSH
23276: LD_EXP 65
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PPUSH
23285: LD_EXP 68
23289: PPUSH
23290: CALL_OW 180
// end ;
23294: LD_VAR 0 1
23298: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23299: LD_EXP 25
23303: IFFALSE 23575
23305: GO 23307
23307: DISABLE
23308: LD_INT 0
23310: PPUSH
23311: PPUSH
23312: PPUSH
23313: PPUSH
23314: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23315: LD_ADDR_VAR 0 4
23319: PUSH
23320: LD_VAR 0 4
23324: PUSH
23325: LD_EXP 62
23329: ADD
23330: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23331: LD_ADDR_VAR 0 4
23335: PUSH
23336: LD_VAR 0 4
23340: PUSH
23341: LD_EXP 80
23345: ADD
23346: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23347: LD_ADDR_VAR 0 4
23351: PUSH
23352: LD_VAR 0 4
23356: PUSH
23357: LD_EXP 72
23361: ADD
23362: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23363: LD_ADDR_VAR 0 5
23367: PUSH
23368: LD_INT 18
23370: PPUSH
23371: LD_INT 22
23373: PUSH
23374: LD_INT 6
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 21
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PPUSH
23395: CALL_OW 70
23399: PUSH
23400: LD_VAR 0 4
23404: DIFF
23405: ST_TO_ADDR
// pom = 6 ;
23406: LD_ADDR_VAR 0 3
23410: PUSH
23411: LD_INT 6
23413: ST_TO_ADDR
// if canTakeUnits then
23414: LD_VAR 0 5
23418: IFFALSE 23542
// for i = 1 to canTakeUnits do
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: DOUBLE
23426: LD_INT 1
23428: DEC
23429: ST_TO_ADDR
23430: LD_VAR 0 5
23434: PUSH
23435: FOR_TO
23436: IFFALSE 23540
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23438: LD_VAR 0 5
23442: PUSH
23443: LD_VAR 0 1
23447: ARRAY
23448: PPUSH
23449: CALL_OW 257
23453: PUSH
23454: LD_INT 3
23456: NONEQUAL
23457: IFFALSE 23504
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23459: LD_VAR 0 5
23463: PUSH
23464: LD_VAR 0 1
23468: ARRAY
23469: PPUSH
23470: LD_EXP 24
23474: PPUSH
23475: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23479: LD_VAR 0 5
23483: PUSH
23484: LD_VAR 0 1
23488: ARRAY
23489: PPUSH
23490: LD_INT 1
23492: PPUSH
23493: CALL_OW 183
// wait ( 0 0$1 ) ;
23497: LD_INT 35
23499: PPUSH
23500: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23504: LD_VAR 0 5
23508: PUSH
23509: LD_VAR 0 1
23513: ARRAY
23514: PPUSH
23515: LD_EXP 24
23519: PPUSH
23520: CALL_OW 120
// pom = pom - 1 ;
23524: LD_ADDR_VAR 0 3
23528: PUSH
23529: LD_VAR 0 3
23533: PUSH
23534: LD_INT 1
23536: MINUS
23537: ST_TO_ADDR
// end ;
23538: GO 23435
23540: POP
23541: POP
// if pom > 0 then
23542: LD_VAR 0 3
23546: PUSH
23547: LD_INT 0
23549: GREATER
23550: IFFALSE 23575
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23552: LD_ADDR_EXP 82
23556: PUSH
23557: LD_EXP 82
23561: PPUSH
23562: LD_INT 3
23564: PPUSH
23565: LD_VAR 0 3
23569: PPUSH
23570: CALL_OW 1
23574: ST_TO_ADDR
// end ;
23575: PPOPN 5
23577: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23578: LD_EXP 75
23582: PUSH
23583: LD_EXP 32
23587: NOT
23588: AND
23589: IFFALSE 23638
23591: GO 23593
23593: DISABLE
// begin enable ;
23594: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23595: LD_EXP 75
23599: PPUSH
23600: LD_EXP 69
23604: PPUSH
23605: LD_INT 2
23607: PPUSH
23608: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23612: LD_EXP 75
23616: PPUSH
23617: LD_EXP 68
23621: PPUSH
23622: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23626: LD_EXP 75
23630: PPUSH
23631: LD_INT 100
23633: PPUSH
23634: CALL_OW 240
// end ;
23638: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23639: LD_INT 78
23641: PPUSH
23642: LD_INT 112
23644: PPUSH
23645: LD_INT 3
23647: PPUSH
23648: CALL_OW 440
23652: IFFALSE 23706
23654: GO 23656
23656: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23657: LD_INT 78
23659: PPUSH
23660: LD_INT 112
23662: PPUSH
23663: CALL_OW 84
// DialogueOn ;
23667: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23671: LD_EXP 50
23675: PPUSH
23676: LD_STRING D2a-Bur-1
23678: PPUSH
23679: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23683: LD_EXP 62
23687: PPUSH
23688: LD_STRING D2a-Kur-1
23690: PPUSH
23691: CALL_OW 94
// DialogueOff ;
23695: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23699: LD_STRING M2
23701: PPUSH
23702: CALL_OW 337
// end ;
23706: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23707: LD_EXP 13
23711: NOT
23712: IFFALSE 23920
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
// begin enable ;
23720: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23721: LD_ADDR_VAR 0 1
23725: PUSH
23726: LD_INT 22
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 23
23748: PUSH
23749: LD_INT 3
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: PUSH
23759: LD_INT 31
23761: PUSH
23762: LD_INT 21
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 31
23771: PUSH
23772: LD_INT 23
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PPUSH
23790: CALL_OW 69
23794: PUSH
23795: FOR_IN
23796: IFFALSE 23918
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23798: LD_VAR 0 1
23802: PPUSH
23803: LD_INT 48
23805: PPUSH
23806: LD_INT 81
23808: PPUSH
23809: CALL_OW 297
23813: PUSH
23814: LD_INT 7
23816: LESS
23817: IFFALSE 23916
// begin dialog_track = true ;
23819: LD_ADDR_EXP 13
23823: PUSH
23824: LD_INT 1
23826: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23827: LD_INT 48
23829: PPUSH
23830: LD_INT 81
23832: PPUSH
23833: CALL_OW 86
// DialogueOn ;
23837: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23841: LD_EXP 50
23845: PPUSH
23846: LD_STRING D5a-Bur-1
23848: PPUSH
23849: CALL_OW 88
// DialogueOff ;
23853: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23857: LD_INT 82
23859: PPUSH
23860: LD_INT 3
23862: PPUSH
23863: CALL_OW 321
23867: PUSH
23868: LD_INT 0
23870: EQUAL
23871: IFFALSE 23886
// SetTech ( 82 , 3 , state_enabled ) ;
23873: LD_INT 82
23875: PPUSH
23876: LD_INT 3
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23886: LD_INT 84
23888: PPUSH
23889: LD_INT 3
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23899: LD_INT 16
23901: PPUSH
23902: LD_INT 3
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: CALL_OW 324
// exit ;
23912: POP
23913: POP
23914: GO 23920
// end ;
23916: GO 23795
23918: POP
23919: POP
// end ;
23920: PPOPN 1
23922: END
// every 5 5$30 do
23923: GO 23925
23925: DISABLE
// begin PrepareScholtze ;
23926: CALL 5490 0 0
// wait ( 0 0$2 ) ;
23930: LD_INT 70
23932: PPUSH
23933: CALL_OW 67
// DialogueOn ;
23937: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23941: LD_EXP 56
23945: PPUSH
23946: LD_STRING D4-Sch-1
23948: PPUSH
23949: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23953: LD_EXP 50
23957: PPUSH
23958: LD_STRING D4-Bur-1
23960: PPUSH
23961: CALL_OW 88
// DialogueOff ;
23965: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23969: LD_STRING M4
23971: PPUSH
23972: CALL_OW 337
// ComHold ( Scholtze ) ;
23976: LD_EXP 56
23980: PPUSH
23981: CALL_OW 140
// scholtzeSpawned = true ;
23985: LD_ADDR_EXP 9
23989: PUSH
23990: LD_INT 1
23992: ST_TO_ADDR
// end ;
23993: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23994: LD_INT 3
23996: PPUSH
23997: LD_EXP 56
24001: PPUSH
24002: CALL_OW 292
24006: PUSH
24007: LD_EXP 9
24011: AND
24012: PUSH
24013: LD_EXP 10
24017: NOT
24018: AND
24019: IFFALSE 24200
24021: GO 24023
24023: DISABLE
// begin scholtzeSaved = true ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 1
24031: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
24032: LD_EXP 56
24036: PPUSH
24037: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
24041: LD_EXP 56
24045: PPUSH
24046: LD_INT 3
24048: PPUSH
24049: CALL_OW 235
// DialogueOn ;
24053: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
24057: LD_EXP 56
24061: PPUSH
24062: LD_STRING D4a-Sch-1
24064: PPUSH
24065: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
24069: LD_EXP 50
24073: PPUSH
24074: LD_STRING D4a-Bur-1
24076: PPUSH
24077: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
24081: LD_EXP 56
24085: PPUSH
24086: LD_STRING D4a-Sch-2
24088: PPUSH
24089: CALL_OW 88
// DialogueOff ;
24093: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24097: LD_EXP 86
24101: PPUSH
24102: LD_INT 28
24104: PPUSH
24105: LD_INT 36
24107: PPUSH
24108: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24112: LD_STRING MScholtzeOut
24114: PPUSH
24115: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24119: LD_INT 49
24121: PPUSH
24122: LD_INT 3
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24132: LD_INT 51
24134: PPUSH
24135: LD_INT 3
24137: PPUSH
24138: LD_INT 1
24140: PPUSH
24141: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24145: LD_INT 82
24147: PPUSH
24148: LD_INT 3
24150: PPUSH
24151: CALL_OW 321
24155: PUSH
24156: LD_INT 0
24158: EQUAL
24159: IFFALSE 24174
// SetTech ( 82 , 3 , state_enabled ) ;
24161: LD_INT 82
24163: PPUSH
24164: LD_INT 3
24166: PPUSH
24167: LD_INT 1
24169: PPUSH
24170: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24174: LD_INT 83
24176: PPUSH
24177: LD_INT 3
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24187: LD_INT 19
24189: PPUSH
24190: LD_INT 3
24192: PPUSH
24193: LD_INT 1
24195: PPUSH
24196: CALL_OW 324
// end ;
24200: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24201: LD_EXP 56
24205: PPUSH
24206: CALL_OW 305
24210: PUSH
24211: LD_EXP 10
24215: NOT
24216: AND
24217: IFFALSE 24226
24219: GO 24221
24221: DISABLE
// PrepareAmericanPatrol ;
24222: CALL 6436 0 0
24226: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24227: LD_EXP 56
24231: PPUSH
24232: CALL_OW 305
24236: PUSH
24237: LD_EXP 56
24241: PPUSH
24242: CALL_OW 255
24246: PUSH
24247: LD_INT 8
24249: EQUAL
24250: AND
24251: PUSH
24252: LD_EXP 48
24256: PUSH
24257: LD_INT 35
24259: GREATER
24260: AND
24261: IFFALSE 24437
24263: GO 24265
24265: DISABLE
24266: LD_INT 0
24268: PPUSH
24269: PPUSH
// begin enable ;
24270: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24271: LD_ADDR_EXP 48
24275: PUSH
24276: LD_EXP 48
24280: PUSH
24281: LD_INT 35
24283: MINUS
24284: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24285: LD_ADDR_VAR 0 1
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 25
24302: PUSH
24303: LD_INT 12
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PPUSH
24314: CALL_OW 69
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24359
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24322: LD_VAR 0 1
24326: PPUSH
24327: LD_EXP 56
24331: PPUSH
24332: CALL_OW 250
24336: PPUSH
24337: LD_EXP 56
24341: PPUSH
24342: CALL_OW 251
24346: PPUSH
24347: LD_INT 12
24349: PPUSH
24350: LD_INT 0
24352: PPUSH
24353: CALL 10323 0 5
24357: GO 24319
24359: POP
24360: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24361: LD_ADDR_VAR 0 2
24365: PUSH
24366: LD_INT 22
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 25
24378: PUSH
24379: LD_INT 14
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PPUSH
24390: CALL_OW 69
24394: PUSH
24395: FOR_IN
24396: IFFALSE 24435
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24398: LD_VAR 0 2
24402: PPUSH
24403: LD_EXP 56
24407: PPUSH
24408: CALL_OW 250
24412: PPUSH
24413: LD_EXP 56
24417: PPUSH
24418: CALL_OW 251
24422: PPUSH
24423: LD_INT 12
24425: PPUSH
24426: LD_INT 0
24428: PPUSH
24429: CALL 10323 0 5
24433: GO 24395
24435: POP
24436: POP
// end ;
24437: PPOPN 2
24439: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24440: LD_INT 1
24442: PPUSH
24443: LD_EXP 56
24447: PPUSH
24448: CALL_OW 292
24452: PUSH
24453: LD_EXP 86
24457: AND
24458: PUSH
24459: LD_EXP 10
24463: NOT
24464: AND
24465: IFFALSE 24619
24467: GO 24469
24469: DISABLE
// begin enable ;
24470: ENABLE
// if not IsPlaced ( Scholtze ) then
24471: LD_EXP 56
24475: PPUSH
24476: CALL_OW 305
24480: NOT
24481: IFFALSE 24485
// exit ;
24483: GO 24619
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24485: LD_EXP 86
24489: PUSH
24490: LD_INT 1
24492: ARRAY
24493: PPUSH
24494: CALL_OW 320
24498: PUSH
24499: LD_EXP 56
24503: EQUAL
24504: PUSH
24505: LD_EXP 86
24509: PUSH
24510: LD_INT 2
24512: ARRAY
24513: PPUSH
24514: CALL_OW 320
24518: PUSH
24519: LD_EXP 56
24523: EQUAL
24524: OR
24525: IFFALSE 24619
// begin DialogueOn ;
24527: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24531: LD_EXP 56
24535: PPUSH
24536: LD_STRING D4b-Sch-1
24538: PPUSH
24539: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24543: LD_EXP 86
24547: PUSH
24548: LD_INT 2
24550: ARRAY
24551: PPUSH
24552: LD_STRING D4b-Sol1-1
24554: PPUSH
24555: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24559: LD_EXP 86
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: PPUSH
24568: LD_STRING D4b-Sol2-1
24570: PPUSH
24571: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24575: LD_EXP 56
24579: PPUSH
24580: LD_STRING D4b-Sch-2
24582: PPUSH
24583: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24587: LD_EXP 50
24591: PPUSH
24592: LD_STRING D4b-Bur-2
24594: PPUSH
24595: CALL_OW 88
// DialogueOff ;
24599: CALL_OW 7
// Killunit ( Scholtze ) ;
24603: LD_EXP 56
24607: PPUSH
24608: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24612: LD_STRING MScholtzeDel
24614: PPUSH
24615: CALL_OW 337
// end ; end ;
24619: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
24624: PPUSH
// dialog_workshop = true ;
24625: LD_ADDR_EXP 11
24629: PUSH
24630: LD_INT 1
24632: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24633: LD_INT 22
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 30
24645: PUSH
24646: LD_INT 26
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 69
24661: NOT
24662: IFFALSE 25051
// begin CenterNowOnUnits ( building ) ;
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 87
// DialogueOn ;
24673: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24677: LD_EXP 50
24681: PPUSH
24682: LD_STRING D3aa-Bur-1
24684: PPUSH
24685: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24689: LD_EXP 56
24693: PPUSH
24694: CALL_OW 302
24698: PUSH
24699: LD_EXP 56
24703: PPUSH
24704: CALL_OW 255
24708: PUSH
24709: LD_INT 3
24711: EQUAL
24712: AND
24713: IFFALSE 24729
// Say ( Scholtze , D3aa-Sch-1 ) else
24715: LD_EXP 56
24719: PPUSH
24720: LD_STRING D3aa-Sch-1
24722: PPUSH
24723: CALL_OW 88
24727: GO 25035
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24729: LD_ADDR_VAR 0 3
24733: PUSH
24734: LD_INT 22
24736: PUSH
24737: LD_INT 3
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 21
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 25
24756: PUSH
24757: LD_INT 4
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 26
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 50
24776: PUSH
24777: EMPTY
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: PPUSH
24787: CALL_OW 69
24791: PUSH
24792: LD_EXP 50
24796: PUSH
24797: LD_EXP 51
24801: PUSH
24802: LD_EXP 53
24806: PUSH
24807: LD_EXP 54
24811: PUSH
24812: LD_EXP 55
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: DIFF
24824: ST_TO_ADDR
// if maleSci then
24825: LD_VAR 0 3
24829: IFFALSE 24849
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24831: LD_VAR 0 3
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PPUSH
24840: LD_STRING D3aa-Sci1-1
24842: PPUSH
24843: CALL_OW 88
24847: GO 25035
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24849: LD_ADDR_VAR 0 4
24853: PUSH
24854: LD_INT 22
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 21
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 26
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 50
24886: PUSH
24887: EMPTY
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: PPUSH
24896: CALL_OW 69
24900: PUSH
24901: LD_EXP 50
24905: PUSH
24906: LD_EXP 51
24910: PUSH
24911: LD_EXP 53
24915: PUSH
24916: LD_EXP 54
24920: PUSH
24921: LD_EXP 55
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: DIFF
24933: ST_TO_ADDR
// if maleOthers then
24934: LD_VAR 0 4
24938: IFFALSE 24958
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24940: LD_VAR 0 4
24944: PUSH
24945: LD_INT 1
24947: ARRAY
24948: PPUSH
24949: LD_STRING D3aa-Sci1-1
24951: PPUSH
24952: CALL_OW 88
24956: GO 25035
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24958: LD_ADDR_VAR 0 4
24962: PUSH
24963: LD_INT 22
24965: PUSH
24966: LD_INT 3
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 21
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 26
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 50
24995: PUSH
24996: EMPTY
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: PPUSH
25005: CALL_OW 69
25009: PUSH
25010: LD_EXP 50
25014: PUSH
25015: EMPTY
25016: LIST
25017: DIFF
25018: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
25019: LD_VAR 0 4
25023: PUSH
25024: LD_INT 1
25026: ARRAY
25027: PPUSH
25028: LD_STRING D3aa-Sci1-1
25030: PPUSH
25031: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
25035: LD_EXP 50
25039: PPUSH
25040: LD_STRING D3aa-Bur-2
25042: PPUSH
25043: CALL_OW 88
// DialogueOff ;
25047: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
25051: LD_STRING M3
25053: PPUSH
25054: CALL_OW 337
// end ;
25058: LD_VAR 0 2
25062: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
25063: LD_EXP 12
25067: NOT
25068: IFFALSE 25406
25070: GO 25072
25072: DISABLE
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
// begin enable ;
25077: ENABLE
// for amUnit in amSupportTroops do
25078: LD_ADDR_VAR 0 1
25082: PUSH
25083: LD_EXP 85
25087: PUSH
25088: FOR_IN
25089: IFFALSE 25404
// begin if See ( 3 , amUnit ) then
25091: LD_INT 3
25093: PPUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 292
25103: IFFALSE 25402
// begin dialog_amSupportTroops = true ;
25105: LD_ADDR_EXP 12
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL_OW 87
// DialogueOn ;
25122: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25126: LD_ADDR_VAR 0 2
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 3
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 26
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 50
25163: PUSH
25164: EMPTY
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: LD_EXP 50
25182: PUSH
25183: LD_EXP 51
25187: PUSH
25188: LD_EXP 53
25192: PUSH
25193: LD_EXP 54
25197: PUSH
25198: LD_EXP 55
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: DIFF
25210: ST_TO_ADDR
// if randomMale then
25211: LD_VAR 0 2
25215: IFFALSE 25282
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25217: LD_INT 22
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 21
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 26
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 50
25249: PUSH
25250: EMPTY
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PPUSH
25264: LD_STRING D3b-RSol1-1
25266: PPUSH
25267: LD_STRING 
25269: PPUSH
25270: LD_INT 0
25272: PPUSH
25273: LD_INT 1
25275: PPUSH
25276: CALL 7072 0 5
25280: GO 25359
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25282: LD_ADDR_VAR 0 2
25286: PUSH
25287: LD_INT 22
25289: PUSH
25290: LD_INT 3
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 21
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 26
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 50
25319: PUSH
25320: EMPTY
25321: LIST
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: PUSH
25334: LD_EXP 50
25338: PUSH
25339: EMPTY
25340: LIST
25341: DIFF
25342: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25343: LD_VAR 0 2
25347: PUSH
25348: LD_INT 1
25350: ARRAY
25351: PPUSH
25352: LD_STRING D3b-RSol1-1
25354: PPUSH
25355: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25359: LD_EXP 51
25363: PPUSH
25364: CALL_OW 302
25368: IFFALSE 25382
// Say ( Gnyevko , D3b-Gny-1 ) ;
25370: LD_EXP 51
25374: PPUSH
25375: LD_STRING D3b-Gny-1
25377: PPUSH
25378: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25382: LD_EXP 50
25386: PPUSH
25387: LD_STRING D3b-Bur-1
25389: PPUSH
25390: CALL_OW 88
// DialogueOff ;
25394: CALL_OW 7
// exit ;
25398: POP
25399: POP
25400: GO 25406
// end ; end ;
25402: GO 25088
25404: POP
25405: POP
// end ;
25406: PPOPN 2
25408: END
// every 2 2$0 trigger dialog_amSupportTroops do
25409: LD_EXP 12
25413: IFFALSE 25497
25415: GO 25417
25417: DISABLE
// begin if IsOK ( Kovalyuk ) then
25418: LD_EXP 53
25422: PPUSH
25423: CALL_OW 302
25427: IFFALSE 25441
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25429: LD_EXP 53
25433: PPUSH
25434: LD_STRING D3b-Kov-1
25436: PPUSH
25437: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25441: LD_INT 22
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 21
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 26
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 69
25480: PPUSH
25481: LD_STRING D3b-RSol1-2
25483: PPUSH
25484: LD_STRING 
25486: PPUSH
25487: LD_INT 0
25489: PPUSH
25490: LD_INT 0
25492: PPUSH
25493: CALL 7072 0 5
// end ;
25497: END
// every 1 trigger not endCutscene do
25498: LD_EXP 32
25502: NOT
25503: IFFALSE 25521
25505: GO 25507
25507: DISABLE
// begin enable ;
25508: ENABLE
// SetLives ( Kurin , 1000 ) ;
25509: LD_EXP 62
25513: PPUSH
25514: LD_INT 1000
25516: PPUSH
25517: CALL_OW 234
// end ;
25521: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25522: LD_EXP 41
25526: PUSH
25527: LD_INT 35
25529: LESS
25530: IFFALSE 25758
25532: GO 25534
25534: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25535: LD_EXP 62
25539: PPUSH
25540: CALL_OW 87
// InGameOn ;
25544: CALL_OW 8
// DialogueOn ;
25548: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25552: LD_EXP 62
25556: PPUSH
25557: LD_STRING D5-Kur-1
25559: PPUSH
25560: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25564: LD_STRING QVehicles
25566: PPUSH
25567: CALL_OW 97
25571: PUSH
25572: LD_INT 1
25574: DOUBLE
25575: EQUAL
25576: IFTRUE 25580
25578: GO 25623
25580: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25581: LD_EXP 50
25585: PPUSH
25586: LD_STRING D6a-Bur-1
25588: PPUSH
25589: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25593: LD_EXP 62
25597: PPUSH
25598: LD_STRING D6a-Kur-1
25600: PPUSH
25601: CALL_OW 94
// meetNearOmicronBase = true ;
25605: LD_ADDR_EXP 22
25609: PUSH
25610: LD_INT 1
25612: ST_TO_ADDR
// kurinCheckVehicles = true ;
25613: LD_ADDR_EXP 21
25617: PUSH
25618: LD_INT 1
25620: ST_TO_ADDR
// end ; 2 :
25621: GO 25750
25623: LD_INT 2
25625: DOUBLE
25626: EQUAL
25627: IFTRUE 25631
25629: GO 25678
25631: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25632: LD_EXP 50
25636: PPUSH
25637: LD_STRING D6b-Bur-1
25639: PPUSH
25640: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25644: LD_EXP 62
25648: PPUSH
25649: LD_STRING D6b-Kur-1
25651: PPUSH
25652: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25656: LD_EXP 50
25660: PPUSH
25661: LD_STRING D6b-Bur-2
25663: PPUSH
25664: CALL_OW 88
// meetNearOmicronBase = true ;
25668: LD_ADDR_EXP 22
25672: PUSH
25673: LD_INT 1
25675: ST_TO_ADDR
// end ; 3 :
25676: GO 25750
25678: LD_INT 3
25680: DOUBLE
25681: EQUAL
25682: IFTRUE 25686
25684: GO 25749
25686: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25687: LD_EXP 50
25691: PPUSH
25692: LD_STRING D6c-Bur-1
25694: PPUSH
25695: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25699: LD_EXP 62
25703: PPUSH
25704: LD_STRING D6c-Kur-1
25706: PPUSH
25707: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25711: LD_EXP 50
25715: PPUSH
25716: LD_STRING D6c-Bur-2
25718: PPUSH
25719: CALL_OW 88
// kurinGiveMoreTime = true ;
25723: LD_ADDR_EXP 16
25727: PUSH
25728: LD_INT 1
25730: ST_TO_ADDR
// kurinOpinion = 0 ;
25731: LD_ADDR_EXP 5
25735: PUSH
25736: LD_INT 0
25738: ST_TO_ADDR
// counterIndex = 4 ;
25739: LD_ADDR_EXP 91
25743: PUSH
25744: LD_INT 4
25746: ST_TO_ADDR
// end ; end ;
25747: GO 25750
25749: POP
// InGameOff ;
25750: CALL_OW 9
// DialogueOff ;
25754: CALL_OW 7
// end ;
25758: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25759: LD_EXP 17
25763: PUSH
25764: LD_INT 35
25766: LESS
25767: PUSH
25768: LD_EXP 16
25772: AND
25773: IFFALSE 25806
25775: GO 25777
25777: DISABLE
// begin DialogueOn ;
25778: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25782: LD_EXP 62
25786: PPUSH
25787: LD_STRING D6c-Kur-2
25789: PPUSH
25790: CALL_OW 94
// DialogueOff ;
25794: CALL_OW 7
// meetNearOmicronBase = true ;
25798: LD_ADDR_EXP 22
25802: PUSH
25803: LD_INT 1
25805: ST_TO_ADDR
// end ;
25806: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25807: LD_EXP 22
25811: IFFALSE 26466
25813: GO 25815
25815: DISABLE
25816: LD_INT 0
25818: PPUSH
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
// begin mechs = [ ] ;
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: EMPTY
25829: ST_TO_ADDR
// vehs = [ ] ;
25830: LD_ADDR_VAR 0 4
25834: PUSH
25835: EMPTY
25836: ST_TO_ADDR
// haveVehs = 0 ;
25837: LD_ADDR_VAR 0 5
25841: PUSH
25842: LD_INT 0
25844: ST_TO_ADDR
// uc_side = 6 ;
25845: LD_ADDR_OWVAR 20
25849: PUSH
25850: LD_INT 6
25852: ST_TO_ADDR
// uc_nation = 3 ;
25853: LD_ADDR_OWVAR 21
25857: PUSH
25858: LD_INT 3
25860: ST_TO_ADDR
// for i := 1 to 2 do
25861: LD_ADDR_VAR 0 1
25865: PUSH
25866: DOUBLE
25867: LD_INT 1
25869: DEC
25870: ST_TO_ADDR
25871: LD_INT 2
25873: PUSH
25874: FOR_TO
25875: IFFALSE 25974
// begin PrepareMechanic ( false , 2 ) ;
25877: LD_INT 0
25879: PPUSH
25880: LD_INT 2
25882: PPUSH
25883: CALL_OW 383
// mech = CreateHuman ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: CALL_OW 44
25896: ST_TO_ADDR
// mechs = mechs ^ mech ;
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_VAR 0 3
25906: PUSH
25907: LD_VAR 0 2
25911: ADD
25912: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25913: LD_VAR 0 2
25917: PPUSH
25918: LD_EXP 68
25922: PPUSH
25923: CALL_OW 52
// ComExitBuilding ( mech ) ;
25927: LD_VAR 0 2
25931: PPUSH
25932: CALL_OW 122
// wait ( 0 0$1 ) ;
25936: LD_INT 35
25938: PPUSH
25939: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25943: LD_VAR 0 2
25947: PPUSH
25948: LD_EXP 61
25952: PPUSH
25953: CALL_OW 250
25957: PPUSH
25958: LD_EXP 61
25962: PPUSH
25963: CALL_OW 251
25967: PPUSH
25968: CALL_OW 171
// end ;
25972: GO 25874
25974: POP
25975: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25976: LD_INT 22
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 21
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 23
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 69
26015: PUSH
26016: LD_INT 22
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 21
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PPUSH
26040: CALL_OW 69
26044: EQUAL
26045: IFFALSE 26055
// produceOnlyForYou = true ;
26047: LD_ADDR_EXP 20
26051: PUSH
26052: LD_INT 1
26054: ST_TO_ADDR
// wait ( 0 0$20 ) ;
26055: LD_INT 700
26057: PPUSH
26058: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
26062: LD_INT 22
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 21
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 23
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 3
26094: PUSH
26095: LD_INT 34
26097: PUSH
26098: LD_INT 51
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 69
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 21
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 69
26148: PUSH
26149: LD_INT 2
26151: PLUS
26152: GREATEREQUAL
26153: IFFALSE 26436
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26155: LD_ADDR_VAR 0 4
26159: PUSH
26160: LD_VAR 0 4
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 21
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 23
26187: PUSH
26188: LD_INT 3
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: LD_INT 34
26200: PUSH
26201: LD_INT 51
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: PUSH
26215: LD_INT 59
26217: PUSH
26218: EMPTY
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: PUSH
26237: LD_INT 1
26239: ARRAY
26240: ADD
26241: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_VAR 0 4
26251: PUSH
26252: LD_INT 22
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 21
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 23
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 3
26284: PUSH
26285: LD_INT 34
26287: PUSH
26288: LD_INT 51
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: LD_INT 59
26304: PUSH
26305: EMPTY
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: PPUSH
26319: CALL_OW 69
26323: PUSH
26324: LD_INT 2
26326: ARRAY
26327: ADD
26328: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26329: LD_ADDR_EXP 77
26333: PUSH
26334: LD_EXP 77
26338: PUSH
26339: LD_VAR 0 4
26343: ADD
26344: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26345: LD_VAR 0 4
26349: PPUSH
26350: LD_INT 6
26352: PPUSH
26353: CALL_OW 235
// produceMoreVehicles = true ;
26357: LD_ADDR_EXP 19
26361: PUSH
26362: LD_INT 1
26364: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26365: LD_VAR 0 3
26369: PUSH
26370: LD_INT 1
26372: ARRAY
26373: PPUSH
26374: LD_VAR 0 4
26378: PUSH
26379: LD_INT 1
26381: ARRAY
26382: PPUSH
26383: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26387: LD_VAR 0 3
26391: PUSH
26392: LD_INT 2
26394: ARRAY
26395: PPUSH
26396: LD_VAR 0 4
26400: PUSH
26401: LD_INT 2
26403: ARRAY
26404: PPUSH
26405: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26409: LD_EXP 21
26413: PUSH
26414: LD_EXP 5
26418: PUSH
26419: LD_INT 0
26421: EQUAL
26422: NOT
26423: AND
26424: IFFALSE 26434
// kurinOpinion = 1 ;
26426: LD_ADDR_EXP 5
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// end else
26434: GO 26466
// begin if kurinCheckVehicles then
26436: LD_EXP 21
26440: IFFALSE 26466
// begin DialogueOn ;
26442: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26446: LD_EXP 62
26450: PPUSH
26451: LD_STRING D6d-Kur-1
26453: PPUSH
26454: CALL_OW 94
// DialogueOff ;
26458: CALL_OW 7
// Lose_Vehicles ;
26462: CALL 20243 0 0
// end ; end ; end ;
26466: PPOPN 5
26468: END
// every 0 0$1 trigger meetNearOmicronBase do
26469: LD_EXP 22
26473: IFFALSE 26701
26475: GO 26477
26477: DISABLE
// begin spawnCrates = false ;
26478: LD_ADDR_EXP 8
26482: PUSH
26483: LD_INT 0
26485: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26486: LD_INT 6
26488: PPUSH
26489: LD_INT 1
26491: PPUSH
26492: LD_INT 2
26494: PPUSH
26495: LD_INT 1
26497: PPUSH
26498: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26502: LD_INT 0
26504: PPUSH
26505: LD_INT 3
26507: PPUSH
26508: LD_INT 0
26510: PPUSH
26511: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26515: LD_STRING M3a
26517: PPUSH
26518: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26522: LD_STRING M5
26524: PPUSH
26525: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26529: LD_INT 15
26531: PPUSH
26532: LD_INT 1
26534: PPUSH
26535: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26539: LD_EXP 77
26543: PPUSH
26544: LD_INT 75
26546: PPUSH
26547: LD_INT 38
26549: PPUSH
26550: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26554: LD_EXP 76
26558: PPUSH
26559: LD_INT 75
26561: PPUSH
26562: LD_INT 38
26564: PPUSH
26565: CALL_OW 111
// counterIndex = 2 ;
26569: LD_ADDR_EXP 91
26573: PUSH
26574: LD_INT 2
26576: ST_TO_ADDR
// if not kurinOpinion = 0 then
26577: LD_EXP 5
26581: PUSH
26582: LD_INT 0
26584: EQUAL
26585: NOT
26586: IFFALSE 26596
// kurinOpinion = 1 ;
26588: LD_ADDR_EXP 5
26592: PUSH
26593: LD_INT 1
26595: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , false ) ;
26596: LD_INT 1
26598: PPUSH
26599: LD_INT 1
26601: PPUSH
26602: LD_INT 22
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 21
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: PPUSH
26631: LD_INT 13
26633: PPUSH
26634: LD_INT 28
26636: PPUSH
26637: LD_INT 17
26639: PPUSH
26640: LD_INT 29
26642: PPUSH
26643: LD_INT 2
26645: PUSH
26646: LD_INT 3
26648: PUSH
26649: LD_INT 4
26651: PUSH
26652: LD_INT 4
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: PUSH
26661: LD_OWVAR 67
26665: ARRAY
26666: PPUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: LD_INT 4
26675: PUSH
26676: LD_INT 4
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: PUSH
26685: LD_OWVAR 67
26689: ARRAY
26690: PPUSH
26691: LD_INT 0
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL 12203 0 11
// end ;
26701: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26702: LD_EXP 18
26706: PUSH
26707: LD_INT 35
26709: LESS
26710: PUSH
26711: LD_EXP 91
26715: PUSH
26716: LD_INT 2
26718: EQUAL
26719: AND
26720: IFFALSE 26769
26722: GO 26724
26724: DISABLE
// begin DialogueOn ;
26725: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26729: LD_EXP 62
26733: PPUSH
26734: LD_STRING D7a-Kur-1
26736: PPUSH
26737: CALL_OW 94
// DialogueOff ;
26741: CALL_OW 7
// counterIndex = 3 ;
26745: LD_ADDR_EXP 91
26749: PUSH
26750: LD_INT 3
26752: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26753: LD_ADDR_EXP 18
26757: PUSH
26758: LD_INT 4200
26760: ST_TO_ADDR
// kurinOpinion = 0 ;
26761: LD_ADDR_EXP 5
26765: PUSH
26766: LD_INT 0
26768: ST_TO_ADDR
// end ;
26769: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26770: LD_EXP 18
26774: PUSH
26775: LD_INT 35
26777: LESS
26778: PUSH
26779: LD_EXP 91
26783: PUSH
26784: LD_INT 3
26786: EQUAL
26787: AND
26788: IFFALSE 26797
26790: GO 26792
26792: DISABLE
// Lose_Delay ;
26793: CALL 20273 0 0
26797: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26798: LD_EXP 22
26802: PUSH
26803: LD_INT 15
26805: PPUSH
26806: LD_INT 22
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 21
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 71
26834: PUSH
26835: LD_INT 0
26837: EQUAL
26838: AND
26839: IFFALSE 26927
26841: GO 26843
26843: DISABLE
// begin counterEnable = false ;
26844: LD_ADDR_EXP 90
26848: PUSH
26849: LD_INT 0
26851: ST_TO_ADDR
// Display_strings = [ ] ;
26852: LD_ADDR_OWVAR 47
26856: PUSH
26857: EMPTY
26858: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26859: LD_INT 15
26861: PPUSH
26862: LD_INT 0
26864: PPUSH
26865: CALL_OW 424
// canExitBattlefield = false ;
26869: LD_ADDR_EXP 27
26873: PUSH
26874: LD_INT 0
26876: ST_TO_ADDR
// DialogueOn ;
26877: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26881: LD_EXP 50
26885: PPUSH
26886: LD_STRING D7-Bur-1
26888: PPUSH
26889: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26893: LD_EXP 62
26897: PPUSH
26898: LD_STRING D7-Kur-1
26900: PPUSH
26901: CALL_OW 94
// DialogueOff ;
26905: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26909: LD_STRING M5a
26911: PPUSH
26912: CALL_OW 337
// Query ( QRefuel ) ;
26916: LD_STRING QRefuel
26918: PPUSH
26919: CALL_OW 97
// KirovAttackOmicron ;
26923: CALL 17999 0 0
// end ;
26927: END
// every 1 trigger not canExitBattlefield do var unit ;
26928: LD_EXP 27
26932: NOT
26933: IFFALSE 27102
26935: GO 26937
26937: DISABLE
26938: LD_INT 0
26940: PPUSH
// begin enable ;
26941: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 2
26959: PUSH
26960: LD_INT 21
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 21
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PPUSH
26989: CALL_OW 69
26993: PUSH
26994: FOR_IN
26995: IFFALSE 27100
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26997: LD_VAR 0 1
27001: PPUSH
27002: LD_INT 26
27004: PPUSH
27005: CALL_OW 308
27009: NOT
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_INT 21
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 72
27030: PUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 313
27040: OR
27041: AND
27042: IFFALSE 27098
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
27044: LD_VAR 0 1
27048: PPUSH
27049: LD_INT 26
27051: PPUSH
27052: CALL_OW 113
// if not dialog_stop then
27056: LD_EXP 14
27060: NOT
27061: IFFALSE 27098
// begin dialog_stop = true ;
27063: LD_ADDR_EXP 14
27067: PUSH
27068: LD_INT 1
27070: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27071: LD_EXP 62
27075: PPUSH
27076: LD_STRING D12-Kur-1
27078: PPUSH
27079: CALL_OW 88
// wait ( 0 0$5 ) ;
27083: LD_INT 175
27085: PPUSH
27086: CALL_OW 67
// dialog_stop = false ;
27090: LD_ADDR_EXP 14
27094: PUSH
27095: LD_INT 0
27097: ST_TO_ADDR
// end ; end ;
27098: GO 26994
27100: POP
27101: POP
// end ;
27102: PPOPN 1
27104: END
// every 1 do var unit ;
27105: GO 27107
27107: DISABLE
27108: LD_INT 0
27110: PPUSH
// begin enable ;
27111: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: LD_INT 22
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 21
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 21
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 69
27163: PUSH
27164: FOR_IN
27165: IFFALSE 27240
// if IsInArea ( unit , SecondKurinBase ) then
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_INT 20
27174: PPUSH
27175: CALL_OW 308
27179: IFFALSE 27238
// begin ComMoveXY ( unit , 200 , 114 ) ;
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_INT 200
27188: PPUSH
27189: LD_INT 114
27191: PPUSH
27192: CALL_OW 111
// if not dialog_stop then
27196: LD_EXP 14
27200: NOT
27201: IFFALSE 27238
// begin dialog_stop = true ;
27203: LD_ADDR_EXP 14
27207: PUSH
27208: LD_INT 1
27210: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27211: LD_EXP 62
27215: PPUSH
27216: LD_STRING D12-Kur-1
27218: PPUSH
27219: CALL_OW 88
// wait ( 0 0$5 ) ;
27223: LD_INT 175
27225: PPUSH
27226: CALL_OW 67
// dialog_stop = false ;
27230: LD_ADDR_EXP 14
27234: PUSH
27235: LD_INT 0
27237: ST_TO_ADDR
// end ; end ;
27238: GO 27164
27240: POP
27241: POP
// end ;
27242: PPOPN 1
27244: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27245: LD_EXP 22
27249: NOT
27250: PUSH
27251: LD_INT 290
27253: PPUSH
27254: CALL_OW 302
27258: AND
27259: IFFALSE 27769
27261: GO 27263
27263: DISABLE
27264: LD_INT 0
27266: PPUSH
27267: PPUSH
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
// begin enable ;
27273: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27274: LD_ADDR_VAR 0 2
27278: PUSH
27279: LD_INT 13
27281: PPUSH
27282: LD_INT 22
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: LD_INT 21
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 21
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 21
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 70
27339: PUSH
27340: FOR_IN
27341: IFFALSE 27767
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27343: LD_VAR 0 2
27347: PPUSH
27348: LD_INT 22
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 21
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 21
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 69
27394: PPUSH
27395: LD_VAR 0 2
27399: PPUSH
27400: CALL_OW 74
27404: PPUSH
27405: CALL_OW 296
27409: PUSH
27410: LD_INT 17
27412: LESS
27413: IFFALSE 27765
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27415: LD_ADDR_VAR 0 6
27419: PUSH
27420: LD_INT 22
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 50
27432: PUSH
27433: EMPTY
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 21
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 21
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: PPUSH
27474: LD_VAR 0 2
27478: PPUSH
27479: CALL_OW 74
27483: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27484: LD_ADDR_VAR 0 4
27488: PUSH
27489: LD_VAR 0 6
27493: PPUSH
27494: LD_EXP 49
27498: PUSH
27499: LD_INT 1
27501: ARRAY
27502: PUSH
27503: LD_INT 1
27505: ARRAY
27506: PPUSH
27507: LD_EXP 49
27511: PUSH
27512: LD_INT 1
27514: ARRAY
27515: PUSH
27516: LD_INT 2
27518: ARRAY
27519: PPUSH
27520: CALL_OW 297
27524: ST_TO_ADDR
// index = 1 ;
27525: LD_ADDR_VAR 0 7
27529: PUSH
27530: LD_INT 1
27532: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27533: LD_ADDR_VAR 0 1
27537: PUSH
27538: DOUBLE
27539: LD_INT 2
27541: DEC
27542: ST_TO_ADDR
27543: LD_EXP 49
27547: PUSH
27548: FOR_TO
27549: IFFALSE 27630
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27551: LD_ADDR_VAR 0 5
27555: PUSH
27556: LD_VAR 0 6
27560: PPUSH
27561: LD_EXP 49
27565: PUSH
27566: LD_VAR 0 1
27570: ARRAY
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: PPUSH
27576: LD_EXP 49
27580: PUSH
27581: LD_VAR 0 1
27585: ARRAY
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: PPUSH
27591: CALL_OW 297
27595: ST_TO_ADDR
// if tmpDist < currentDist then
27596: LD_VAR 0 5
27600: PUSH
27601: LD_VAR 0 4
27605: LESS
27606: IFFALSE 27628
// begin index = i ;
27608: LD_ADDR_VAR 0 7
27612: PUSH
27613: LD_VAR 0 1
27617: ST_TO_ADDR
// currentDist = tmpDist ;
27618: LD_ADDR_VAR 0 4
27622: PUSH
27623: LD_VAR 0 5
27627: ST_TO_ADDR
// end ; end ;
27628: GO 27548
27630: POP
27631: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27632: LD_VAR 0 6
27636: PPUSH
27637: LD_EXP 49
27641: PUSH
27642: LD_VAR 0 7
27646: ARRAY
27647: PUSH
27648: LD_INT 1
27650: ARRAY
27651: PPUSH
27652: LD_EXP 49
27656: PUSH
27657: LD_VAR 0 7
27661: ARRAY
27662: PUSH
27663: LD_INT 2
27665: ARRAY
27666: PPUSH
27667: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27671: LD_ADDR_VAR 0 3
27675: PUSH
27676: LD_INT 1
27678: PPUSH
27679: LD_INT 2
27681: PPUSH
27682: CALL_OW 12
27686: ST_TO_ADDR
// if not dialog_stop then
27687: LD_EXP 14
27691: NOT
27692: IFFALSE 27765
// begin dialog_stop = true ;
27694: LD_ADDR_EXP 14
27698: PUSH
27699: LD_INT 1
27701: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27702: LD_VAR 0 3
27706: PUSH
27707: LD_INT 1
27709: EQUAL
27710: PUSH
27711: LD_EXP 51
27715: PPUSH
27716: CALL_OW 302
27720: NOT
27721: OR
27722: IFFALSE 27738
// SayRadio ( Kurin , D11-Kur-1 ) else
27724: LD_EXP 62
27728: PPUSH
27729: LD_STRING D11-Kur-1
27731: PPUSH
27732: CALL_OW 94
27736: GO 27750
// Say ( Gnyevko , D11-Gny-1 ) ;
27738: LD_EXP 51
27742: PPUSH
27743: LD_STRING D11-Gny-1
27745: PPUSH
27746: CALL_OW 88
// wait ( 0 0$5 ) ;
27750: LD_INT 175
27752: PPUSH
27753: CALL_OW 67
// dialog_stop = false ;
27757: LD_ADDR_EXP 14
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// end ; end ;
27765: GO 27340
27767: POP
27768: POP
// end ;
27769: PPOPN 7
27771: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
27772: LD_INT 290
27774: PPUSH
27775: CALL_OW 301
27779: PUSH
27780: LD_INT 22
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 21
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: PUSH
27809: LD_INT 5
27811: LESS
27812: AND
27813: IFFALSE 31110
27815: GO 27817
27817: DISABLE
27818: LD_INT 0
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
27826: PPUSH
27827: PPUSH
27828: PPUSH
// begin omicronSurrender = true ;
27829: LD_ADDR_EXP 26
27833: PUSH
27834: LD_INT 1
27836: ST_TO_ADDR
// canExitBattlefield = true ;
27837: LD_ADDR_EXP 27
27841: PUSH
27842: LD_INT 1
27844: ST_TO_ADDR
// enableOmicronAI = false ;
27845: LD_ADDR_EXP 30
27849: PUSH
27850: LD_INT 0
27852: ST_TO_ADDR
// endCutscene = true ;
27853: LD_ADDR_EXP 32
27857: PUSH
27858: LD_INT 1
27860: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27861: LD_INT 1
27863: PPUSH
27864: LD_INT 3
27866: PPUSH
27867: LD_INT 1
27869: PPUSH
27870: LD_INT 0
27872: PPUSH
27873: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27877: LD_INT 2
27879: PPUSH
27880: LD_INT 3
27882: PPUSH
27883: LD_INT 1
27885: PPUSH
27886: LD_INT 1
27888: PPUSH
27889: CALL_OW 80
// if not IsOk ( beriaBase ) or not beriaBase then
27893: LD_EXP 60
27897: PPUSH
27898: CALL_OW 302
27902: NOT
27903: PUSH
27904: LD_EXP 60
27908: NOT
27909: OR
27910: IFFALSE 27978
// beriaBase = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ b_warehouse ] ] ] ) [ 1 ] ;
27912: LD_ADDR_EXP 60
27916: PUSH
27917: LD_INT 25
27919: PPUSH
27920: LD_INT 22
27922: PUSH
27923: LD_INT 3
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 21
27932: PUSH
27933: LD_INT 3
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 70
27973: PUSH
27974: LD_INT 1
27976: ARRAY
27977: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
27978: LD_EXP 50
27982: PPUSH
27983: CALL_OW 87
// uc_side = 1 ;
27987: LD_ADDR_OWVAR 20
27991: PUSH
27992: LD_INT 1
27994: ST_TO_ADDR
// uc_nation = 1 ;
27995: LD_ADDR_OWVAR 21
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// hc_name :=  ;
28003: LD_ADDR_OWVAR 26
28007: PUSH
28008: LD_STRING 
28010: ST_TO_ADDR
// hc_gallery =  ;
28011: LD_ADDR_OWVAR 33
28015: PUSH
28016: LD_STRING 
28018: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
28019: LD_INT 1
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: CALL_OW 381
// tmpUs = CreateHuman ;
28029: LD_ADDR_VAR 0 2
28033: PUSH
28034: CALL_OW 44
28038: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
28039: LD_INT 22
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: PPUSH
28054: CALL_OW 141
// InGameOn ;
28058: CALL_OW 8
// DialogueOn ;
28062: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
28066: LD_INT 26
28068: PPUSH
28069: LD_INT 33
28071: PPUSH
28072: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
28076: LD_VAR 0 2
28080: PPUSH
28081: LD_STRING D8-Sol1-1
28083: PPUSH
28084: CALL_OW 94
// if IsOk ( Kovalyuk ) then
28088: LD_EXP 53
28092: PPUSH
28093: CALL_OW 302
28097: IFFALSE 28111
// Say ( Kovalyuk , D8-Kov-1 ) ;
28099: LD_EXP 53
28103: PPUSH
28104: LD_STRING D8-Kov-1
28106: PPUSH
28107: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
28111: LD_ADDR_VAR 0 3
28115: PUSH
28116: LD_INT 22
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 21
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 26
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: PPUSH
28151: CALL_OW 69
28155: PPUSH
28156: LD_STRING D8-RSol1-1
28158: PPUSH
28159: LD_STRING 
28161: PPUSH
28162: LD_INT 0
28164: PPUSH
28165: LD_INT 0
28167: PPUSH
28168: CALL 7072 0 5
28172: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
28173: LD_EXP 51
28177: PPUSH
28178: CALL_OW 302
28182: IFFALSE 28196
// Say ( Gnyevko , D8-Gny-1 ) ;
28184: LD_EXP 51
28188: PPUSH
28189: LD_STRING D8-Gny-1
28191: PPUSH
28192: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28196: LD_INT 22
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 26
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: PUSH
28236: LD_VAR 0 3
28240: DIFF
28241: PPUSH
28242: LD_STRING D8-RSol2-1
28244: PPUSH
28245: LD_STRING 
28247: PPUSH
28248: LD_INT 0
28250: PPUSH
28251: LD_INT 0
28253: PPUSH
28254: CALL 7072 0 5
// DialogueOff ;
28258: CALL_OW 7
// PrepareArabian ;
28262: CALL 6594 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28266: LD_INT 234
28268: PPUSH
28269: LD_INT 122
28271: PPUSH
28272: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28276: LD_EXP 88
28280: PPUSH
28281: LD_INT 221
28283: PPUSH
28284: LD_INT 110
28286: PPUSH
28287: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28291: LD_EXP 89
28295: PPUSH
28296: LD_INT 21
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PPUSH
28306: CALL_OW 72
28310: PPUSH
28311: LD_INT 221
28313: PPUSH
28314: LD_INT 110
28316: PPUSH
28317: CALL_OW 114
// wait ( 0 0$7 ) ;
28321: LD_INT 245
28323: PPUSH
28324: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28328: LD_EXP 89
28332: PPUSH
28333: LD_INT 221
28335: PPUSH
28336: LD_INT 110
28338: PPUSH
28339: CALL_OW 174
// wait ( 0 0$8 ) ;
28343: LD_INT 280
28345: PPUSH
28346: CALL_OW 67
// music_nat = nation_arabian ;
28350: LD_ADDR_OWVAR 71
28354: PUSH
28355: LD_INT 2
28357: ST_TO_ADDR
// music_class = music_combat ;
28358: LD_ADDR_OWVAR 72
28362: PUSH
28363: LD_INT 1
28365: ST_TO_ADDR
// game_speed = 4 ;
28366: LD_ADDR_OWVAR 65
28370: PUSH
28371: LD_INT 4
28373: ST_TO_ADDR
// DialogueOn ;
28374: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28378: LD_EXP 83
28382: PPUSH
28383: LD_STRING D9-Gri-1
28385: PPUSH
28386: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28390: LD_EXP 62
28394: PPUSH
28395: LD_STRING D9-Kur-1
28397: PPUSH
28398: CALL_OW 94
// DialogueOff ;
28402: CALL_OW 7
// CenterOnXY ( 221 , 109 ) ;
28406: LD_INT 221
28408: PPUSH
28409: LD_INT 109
28411: PPUSH
28412: CALL_OW 84
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28416: LD_EXP 79
28420: PPUSH
28421: LD_INT 25
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 72
28435: PPUSH
28436: LD_INT 158
28438: PPUSH
28439: LD_INT 105
28441: PPUSH
28442: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28446: LD_EXP 79
28450: PPUSH
28451: LD_INT 25
28453: PUSH
28454: LD_INT 4
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: PPUSH
28466: LD_INT 158
28468: PPUSH
28469: LD_INT 105
28471: PPUSH
28472: CALL_OW 111
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28476: LD_EXP 75
28480: PPUSH
28481: LD_INT 158
28483: PPUSH
28484: LD_INT 105
28486: PPUSH
28487: CALL_OW 111
// if not beriaDepot then
28491: LD_EXP 61
28495: NOT
28496: IFFALSE 28566
// begin AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , EndMissionMeetArea ) ;
28498: LD_EXP 79
28502: PPUSH
28503: LD_INT 25
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PPUSH
28513: CALL_OW 72
28517: PPUSH
28518: LD_INT 32
28520: PPUSH
28521: CALL_OW 173
// AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , EndMissionMeetArea ) ;
28525: LD_EXP 79
28529: PPUSH
28530: LD_INT 25
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PPUSH
28540: CALL_OW 72
28544: PPUSH
28545: LD_INT 32
28547: PPUSH
28548: CALL_OW 173
// AddComMoveToArea ( kirovTransportCargo , EndMissionMeetArea ) ;
28552: LD_EXP 75
28556: PPUSH
28557: LD_INT 32
28559: PPUSH
28560: CALL_OW 173
// end else
28564: GO 28683
// begin AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28566: LD_EXP 79
28570: PPUSH
28571: LD_INT 25
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL_OW 72
28585: PPUSH
28586: LD_EXP 61
28590: PPUSH
28591: CALL_OW 250
28595: PPUSH
28596: LD_EXP 61
28600: PPUSH
28601: CALL_OW 251
28605: PPUSH
28606: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28610: LD_EXP 79
28614: PPUSH
28615: LD_INT 25
28617: PUSH
28618: LD_INT 4
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PPUSH
28625: CALL_OW 72
28629: PPUSH
28630: LD_EXP 61
28634: PPUSH
28635: CALL_OW 250
28639: PPUSH
28640: LD_EXP 61
28644: PPUSH
28645: CALL_OW 251
28649: PPUSH
28650: CALL_OW 171
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28654: LD_EXP 75
28658: PPUSH
28659: LD_EXP 61
28663: PPUSH
28664: CALL_OW 250
28668: PPUSH
28669: LD_EXP 61
28673: PPUSH
28674: CALL_OW 251
28678: PPUSH
28679: CALL_OW 171
// end ; wait ( 0 0$2.5 ) ;
28683: LD_INT 88
28685: PPUSH
28686: CALL_OW 67
// DialogueOn ;
28690: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28694: LD_EXP 83
28698: PPUSH
28699: LD_STRING D9-Gri-2
28701: PPUSH
28702: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28706: LD_EXP 62
28710: PPUSH
28711: LD_STRING D9-Kur-2
28713: PPUSH
28714: CALL_OW 94
// DialogueOff ;
28718: CALL_OW 7
// repeat wait ( 1 ) ;
28722: LD_INT 1
28724: PPUSH
28725: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28729: LD_EXP 83
28733: PPUSH
28734: CALL_OW 256
28738: PUSH
28739: LD_INT 1000
28741: LESS
28742: IFFALSE 28722
// DialogueOn ;
28744: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28748: LD_EXP 83
28752: PPUSH
28753: LD_STRING D9-Gri-3
28755: PPUSH
28756: CALL_OW 94
// DialogueOff ;
28760: CALL_OW 7
// KillUnit ( Grishko ) ;
28764: LD_EXP 83
28768: PPUSH
28769: CALL_OW 66
// wait ( 0 0$12 ) ;
28773: LD_INT 420
28775: PPUSH
28776: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28780: LD_EXP 62
28784: PPUSH
28785: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28789: LD_EXP 62
28793: PPUSH
28794: LD_STRING D9-Kur-3
28796: PPUSH
28797: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28801: LD_INT 176
28803: PPUSH
28804: LD_INT 110
28806: PPUSH
28807: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28811: LD_EXP 89
28815: PPUSH
28816: LD_INT 21
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 72
28830: PPUSH
28831: LD_INT 221
28833: PPUSH
28834: LD_INT 110
28836: PPUSH
28837: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28841: LD_EXP 88
28845: PPUSH
28846: LD_INT 161
28848: PPUSH
28849: LD_INT 109
28851: PPUSH
28852: CALL_OW 114
// wait ( 0 0$7 ) ;
28856: LD_INT 245
28858: PPUSH
28859: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28863: LD_EXP 89
28867: PPUSH
28868: LD_INT 161
28870: PPUSH
28871: LD_INT 109
28873: PPUSH
28874: CALL_OW 114
// wait ( 0 0$11 ) ;
28878: LD_INT 385
28880: PPUSH
28881: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28885: LD_EXP 62
28889: PPUSH
28890: LD_EXP 68
28894: PPUSH
28895: CALL_OW 120
// DialogueOn ;
28899: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28903: LD_EXP 62
28907: PPUSH
28908: LD_STRING D9a-Kur-1
28910: PPUSH
28911: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28915: LD_EXP 50
28919: PPUSH
28920: LD_STRING D9a-Bur-1
28922: PPUSH
28923: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28927: LD_EXP 62
28931: PPUSH
28932: LD_STRING D9a-Kur-2
28934: PPUSH
28935: CALL_OW 94
// DialogueOff ;
28939: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28943: LD_EXP 80
28947: PPUSH
28948: CALL_OW 122
// wait ( 0 0$1 ) ;
28952: LD_INT 35
28954: PPUSH
28955: CALL_OW 67
// if not beriaBase then
28959: LD_EXP 60
28963: NOT
28964: IFFALSE 28980
// ComMoveToArea ( survivorsArabianAttack , EndMissionMeetArea ) else
28966: LD_EXP 80
28970: PPUSH
28971: LD_INT 32
28973: PPUSH
28974: CALL_OW 113
28978: GO 29009
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28980: LD_EXP 80
28984: PPUSH
28985: LD_EXP 61
28989: PPUSH
28990: CALL_OW 250
28994: PPUSH
28995: LD_EXP 61
28999: PPUSH
29000: CALL_OW 251
29004: PPUSH
29005: CALL_OW 111
// immortalSurvivors = true ;
29009: LD_ADDR_EXP 28
29013: PUSH
29014: LD_INT 1
29016: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
29017: LD_ADDR_VAR 0 2
29021: PUSH
29022: LD_INT 22
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 21
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 50
29044: PUSH
29045: EMPTY
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: PPUSH
29053: CALL_OW 69
29057: PUSH
29058: FOR_IN
29059: IFFALSE 29072
// RemoveUnit ( tmpUS ) ;
29061: LD_VAR 0 2
29065: PPUSH
29066: CALL_OW 64
29070: GO 29058
29072: POP
29073: POP
// repeat wait ( 0 0$1 ) ;
29074: LD_INT 35
29076: PPUSH
29077: CALL_OW 67
// until IsDead ( Kurin ) ;
29081: LD_EXP 62
29085: PPUSH
29086: CALL_OW 301
29090: IFFALSE 29074
// wait ( 0 0$1 ) ;
29092: LD_INT 35
29094: PPUSH
29095: CALL_OW 67
// nearTurrets = [ ] ;
29099: LD_ADDR_VAR 0 8
29103: PUSH
29104: EMPTY
29105: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
29106: LD_ADDR_VAR 0 7
29110: PUSH
29111: LD_INT 22
29113: PUSH
29114: LD_INT 6
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 30
29123: PUSH
29124: LD_INT 32
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 50
29133: PUSH
29134: EMPTY
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: ST_TO_ADDR
// for i = 1 to 2 do
29147: LD_ADDR_VAR 0 1
29151: PUSH
29152: DOUBLE
29153: LD_INT 1
29155: DEC
29156: ST_TO_ADDR
29157: LD_INT 2
29159: PUSH
29160: FOR_TO
29161: IFFALSE 29292
// begin nearTurrets = nearTurrets ^ NearestUnitToXY ( turrets , 129 , 99 ) ;
29163: LD_ADDR_VAR 0 8
29167: PUSH
29168: LD_VAR 0 8
29172: PUSH
29173: LD_VAR 0 7
29177: PPUSH
29178: LD_INT 129
29180: PPUSH
29181: LD_INT 99
29183: PPUSH
29184: CALL_OW 73
29188: ADD
29189: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
29190: LD_ADDR_VAR 0 7
29194: PUSH
29195: LD_VAR 0 7
29199: PUSH
29200: LD_VAR 0 8
29204: DIFF
29205: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_VAR 0 8
29215: PUSH
29216: LD_VAR 0 1
29220: ARRAY
29221: PPUSH
29222: CALL_OW 313
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29231: LD_VAR 0 3
29235: PPUSH
29236: CALL_OW 122
// if not beriaDepot then
29240: LD_EXP 61
29244: NOT
29245: IFFALSE 29261
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29247: LD_VAR 0 3
29251: PPUSH
29252: LD_INT 32
29254: PPUSH
29255: CALL_OW 173
29259: GO 29290
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29261: LD_VAR 0 3
29265: PPUSH
29266: LD_EXP 61
29270: PPUSH
29271: CALL_OW 250
29275: PPUSH
29276: LD_EXP 61
29280: PPUSH
29281: CALL_OW 251
29285: PPUSH
29286: CALL_OW 171
// end ;
29290: GO 29160
29292: POP
29293: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
29294: LD_ADDR_VAR 0 3
29298: PUSH
29299: LD_INT 22
29301: PUSH
29302: LD_INT 6
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 30
29324: PUSH
29325: LD_INT 6
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 30
29334: PUSH
29335: LD_INT 7
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: LIST
29351: PPUSH
29352: CALL_OW 69
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: CALL_OW 313
29365: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29366: LD_VAR 0 3
29370: PPUSH
29371: CALL_OW 122
// if not beriaDepot then
29375: LD_EXP 61
29379: NOT
29380: IFFALSE 29396
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29382: LD_VAR 0 3
29386: PPUSH
29387: LD_INT 32
29389: PPUSH
29390: CALL_OW 173
29394: GO 29425
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29396: LD_VAR 0 3
29400: PPUSH
29401: LD_EXP 61
29405: PPUSH
29406: CALL_OW 250
29410: PPUSH
29411: LD_EXP 61
29415: PPUSH
29416: CALL_OW 251
29420: PPUSH
29421: CALL_OW 171
// wait ( 0 0$14 ) ;
29425: LD_INT 490
29427: PPUSH
29428: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29432: LD_INT 26
29434: PPUSH
29435: LD_INT 22
29437: PUSH
29438: LD_INT 6
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PPUSH
29459: CALL_OW 70
29463: PPUSH
29464: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29468: LD_ADDR_VAR 0 1
29472: PUSH
29473: LD_INT 26
29475: PPUSH
29476: LD_INT 22
29478: PUSH
29479: LD_INT 6
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 21
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PPUSH
29500: CALL_OW 70
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29617
// begin if GetLives ( i ) < 15 then
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 256
29517: PUSH
29518: LD_INT 15
29520: LESS
29521: IFFALSE 29586
// begin tmpRu = UnitsInside ( i ) ;
29523: LD_ADDR_VAR 0 3
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 313
29537: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29538: LD_VAR 0 3
29542: PUSH
29543: LD_INT 1
29545: ARRAY
29546: PPUSH
29547: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29551: LD_VAR 0 3
29555: PUSH
29556: LD_INT 1
29558: ARRAY
29559: PPUSH
29560: LD_EXP 61
29564: PPUSH
29565: CALL_OW 250
29569: PPUSH
29570: LD_EXP 61
29574: PPUSH
29575: CALL_OW 251
29579: PPUSH
29580: CALL_OW 171
// end else
29584: GO 29615
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29586: LD_VAR 0 1
29590: PPUSH
29591: LD_EXP 61
29595: PPUSH
29596: CALL_OW 250
29600: PPUSH
29601: LD_EXP 61
29605: PPUSH
29606: CALL_OW 251
29610: PPUSH
29611: CALL_OW 171
// end ;
29615: GO 29505
29617: POP
29618: POP
// wait ( 0 0$1 ) ;
29619: LD_INT 35
29621: PPUSH
29622: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29626: LD_INT 26
29628: PPUSH
29629: LD_INT 22
29631: PUSH
29632: LD_INT 6
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 21
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PPUSH
29653: CALL_OW 70
29657: PPUSH
29658: LD_EXP 61
29662: PPUSH
29663: CALL_OW 250
29667: PPUSH
29668: LD_EXP 61
29672: PPUSH
29673: CALL_OW 251
29677: PPUSH
29678: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29682: LD_EXP 75
29686: PPUSH
29687: CALL_OW 313
29691: PUSH
29692: LD_INT 1
29694: ARRAY
29695: PPUSH
29696: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29700: LD_ADDR_VAR 0 1
29704: PUSH
29705: LD_INT 26
29707: PPUSH
29708: LD_INT 22
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 21
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PPUSH
29732: CALL_OW 70
29736: PUSH
29737: FOR_IN
29738: IFFALSE 29895
// begin if GetLives ( i ) < 15 then
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 256
29749: PUSH
29750: LD_INT 15
29752: LESS
29753: IFFALSE 29843
// begin tmpRu = UnitsInside ( i ) ;
29755: LD_ADDR_VAR 0 3
29759: PUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 313
29769: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29770: LD_VAR 0 3
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: PPUSH
29779: CALL_OW 121
// if not beriaDepot then
29783: LD_EXP 61
29787: NOT
29788: IFFALSE 29808
// AddComMoveToArea ( tmpRu [ 1 ] , EndMissionMeetArea ) else
29790: LD_VAR 0 3
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: LD_INT 32
29801: PPUSH
29802: CALL_OW 173
29806: GO 29841
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29808: LD_VAR 0 3
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: PPUSH
29817: LD_EXP 61
29821: PPUSH
29822: CALL_OW 250
29826: PPUSH
29827: LD_EXP 61
29831: PPUSH
29832: CALL_OW 251
29836: PPUSH
29837: CALL_OW 171
// end else
29841: GO 29893
// if not beriaDepot then
29843: LD_EXP 61
29847: NOT
29848: IFFALSE 29864
// AddComMoveToArea ( i , EndMissionMeetArea ) else
29850: LD_VAR 0 1
29854: PPUSH
29855: LD_INT 32
29857: PPUSH
29858: CALL_OW 173
29862: GO 29893
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29864: LD_VAR 0 1
29868: PPUSH
29869: LD_EXP 61
29873: PPUSH
29874: CALL_OW 250
29878: PPUSH
29879: LD_EXP 61
29883: PPUSH
29884: CALL_OW 251
29888: PPUSH
29889: CALL_OW 171
// end ;
29893: GO 29737
29895: POP
29896: POP
// wait ( 0 0$1 ) ;
29897: LD_INT 35
29899: PPUSH
29900: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29904: LD_INT 22
29906: PUSH
29907: LD_INT 3
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 21
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PPUSH
29928: CALL_OW 69
29932: PPUSH
29933: LD_EXP 63
29937: PPUSH
29938: CALL_OW 250
29942: PPUSH
29943: LD_EXP 63
29947: PPUSH
29948: CALL_OW 251
29952: PPUSH
29953: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29957: LD_INT 22
29959: PUSH
29960: LD_INT 3
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 21
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PPUSH
29981: CALL_OW 69
29985: PPUSH
29986: LD_EXP 63
29990: PPUSH
29991: CALL_OW 250
29995: PPUSH
29996: LD_EXP 63
30000: PPUSH
30001: CALL_OW 251
30005: PPUSH
30006: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
30010: LD_EXP 50
30014: PPUSH
30015: CALL_OW 310
30019: PPUSH
30020: LD_EXP 63
30024: PPUSH
30025: CALL_OW 250
30029: PPUSH
30030: LD_EXP 63
30034: PPUSH
30035: CALL_OW 251
30039: PPUSH
30040: CALL_OW 111
// if IsInUnit ( Burlak ) then
30044: LD_EXP 50
30048: PPUSH
30049: CALL_OW 310
30053: IFFALSE 30071
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
30055: LD_EXP 50
30059: PPUSH
30060: CALL_OW 310
30064: PPUSH
30065: CALL_OW 87
30069: GO 30080
// CenterNowOnUnits ( Burlak ) ;
30071: LD_EXP 50
30075: PPUSH
30076: CALL_OW 87
// wait ( 0 0$1 ) ;
30080: LD_INT 35
30082: PPUSH
30083: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
30087: LD_EXP 50
30091: PPUSH
30092: LD_EXP 63
30096: PPUSH
30097: CALL_OW 296
30101: PUSH
30102: LD_INT 8
30104: LESS
30105: PUSH
30106: LD_EXP 50
30110: PPUSH
30111: CALL_OW 310
30115: PUSH
30116: LD_INT 8
30118: LESS
30119: PUSH
30120: LD_EXP 50
30124: PPUSH
30125: CALL_OW 310
30129: AND
30130: OR
30131: IFFALSE 29957
// if IsInUnit ( Burlak ) then
30133: LD_EXP 50
30137: PPUSH
30138: CALL_OW 310
30142: IFFALSE 30160
// begin ComExitVehicle ( Burlak ) ;
30144: LD_EXP 50
30148: PPUSH
30149: CALL_OW 121
// wait ( 0 0$1 ) ;
30153: LD_INT 35
30155: PPUSH
30156: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
30160: LD_EXP 50
30164: PUSH
30165: LD_EXP 63
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
30178: LD_EXP 50
30182: PPUSH
30183: LD_EXP 63
30187: PPUSH
30188: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
30192: LD_EXP 63
30196: PPUSH
30197: LD_EXP 50
30201: PPUSH
30202: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
30206: LD_EXP 50
30210: PPUSH
30211: LD_STRING D10a-Bur-1
30213: PPUSH
30214: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
30218: LD_EXP 63
30222: PPUSH
30223: LD_STRING D10a-Pop-1
30225: PPUSH
30226: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
30230: LD_EXP 50
30234: PPUSH
30235: LD_STRING D10a-Bur-2
30237: PPUSH
30238: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
30242: LD_EXP 63
30246: PPUSH
30247: LD_STRING D10a-Pop-2
30249: PPUSH
30250: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
30254: LD_EXP 50
30258: PPUSH
30259: LD_STRING D10a-Bur-3
30261: PPUSH
30262: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
30266: LD_EXP 63
30270: PPUSH
30271: LD_STRING D10a-Pop-3
30273: PPUSH
30274: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
30278: LD_EXP 50
30282: PPUSH
30283: LD_STRING D10a-Bur-4
30285: PPUSH
30286: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
30290: LD_EXP 63
30294: PPUSH
30295: LD_STRING D10a-Pop-4
30297: PPUSH
30298: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
30302: LD_EXP 50
30306: PPUSH
30307: LD_STRING D10a-Bur-5
30309: PPUSH
30310: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
30314: LD_EXP 63
30318: PPUSH
30319: LD_STRING D10a-Pop-5
30321: PPUSH
30322: CALL_OW 88
// survivorsArabianAttack = [ ] ;
30326: LD_ADDR_EXP 80
30330: PUSH
30331: EMPTY
30332: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
30333: LD_ADDR_EXP 80
30337: PUSH
30338: LD_INT 22
30340: PUSH
30341: LD_INT 6
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 50
30350: PUSH
30351: EMPTY
30352: LIST
30353: PUSH
30354: LD_INT 21
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: PPUSH
30369: CALL_OW 69
30373: ST_TO_ADDR
// emptyVehicles = [ ] ;
30374: LD_ADDR_VAR 0 9
30378: PUSH
30379: EMPTY
30380: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30381: LD_ADDR_VAR 0 1
30385: PUSH
30386: LD_INT 22
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 21
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 50
30408: PUSH
30409: EMPTY
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: PPUSH
30417: CALL_OW 69
30421: PUSH
30422: FOR_IN
30423: IFFALSE 30458
// if GetFuel ( i ) >= 50 then
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 261
30434: PUSH
30435: LD_INT 50
30437: GREATEREQUAL
30438: IFFALSE 30456
// emptyVehicles = emptyVehicles ^ i ;
30440: LD_ADDR_VAR 0 9
30444: PUSH
30445: LD_VAR 0 9
30449: PUSH
30450: LD_VAR 0 1
30454: ADD
30455: ST_TO_ADDR
30456: GO 30422
30458: POP
30459: POP
// if emptyVehicles then
30460: LD_VAR 0 9
30464: IFFALSE 30657
// for i = 1 to emptyVehicles do
30466: LD_ADDR_VAR 0 1
30470: PUSH
30471: DOUBLE
30472: LD_INT 1
30474: DEC
30475: ST_TO_ADDR
30476: LD_VAR 0 9
30480: PUSH
30481: FOR_TO
30482: IFFALSE 30655
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) [ i ] , emptyVehicles [ i ] ) ;
30484: LD_INT 22
30486: PUSH
30487: LD_INT 3
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 21
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: LD_INT 60
30509: PUSH
30510: EMPTY
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: PPUSH
30522: CALL_OW 69
30526: PUSH
30527: LD_VAR 0 1
30531: ARRAY
30532: PPUSH
30533: LD_VAR 0 9
30537: PUSH
30538: LD_VAR 0 1
30542: ARRAY
30543: PPUSH
30544: CALL_OW 180
// if GetFuel ( emptyVehicles [ i ] ) >= 65 then
30548: LD_VAR 0 9
30552: PUSH
30553: LD_VAR 0 1
30557: ARRAY
30558: PPUSH
30559: CALL_OW 261
30563: PUSH
30564: LD_INT 65
30566: GREATEREQUAL
30567: IFFALSE 30653
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( emptyVehicles [ i ] ) , GetEngine ( emptyVehicles [ i ] ) , GetControl ( emptyVehicles [ i ] ) , GetWeapon ( emptyVehicles [ i ] ) ] ] ;
30569: LD_ADDR_EXP 7
30573: PUSH
30574: LD_EXP 7
30578: PUSH
30579: LD_VAR 0 9
30583: PUSH
30584: LD_VAR 0 1
30588: ARRAY
30589: PPUSH
30590: CALL_OW 265
30594: PUSH
30595: LD_VAR 0 9
30599: PUSH
30600: LD_VAR 0 1
30604: ARRAY
30605: PPUSH
30606: CALL_OW 262
30610: PUSH
30611: LD_VAR 0 9
30615: PUSH
30616: LD_VAR 0 1
30620: ARRAY
30621: PPUSH
30622: CALL_OW 263
30626: PUSH
30627: LD_VAR 0 9
30631: PUSH
30632: LD_VAR 0 1
30636: ARRAY
30637: PPUSH
30638: CALL_OW 264
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: ADD
30652: ST_TO_ADDR
// end ;
30653: GO 30481
30655: POP
30656: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30657: LD_ADDR_VAR 0 1
30661: PUSH
30662: LD_INT 22
30664: PUSH
30665: LD_INT 6
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 50
30684: PUSH
30685: EMPTY
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: PPUSH
30693: CALL_OW 69
30697: PUSH
30698: FOR_IN
30699: IFFALSE 30778
// if GetFuel ( i ) >= 65 then
30701: LD_VAR 0 1
30705: PPUSH
30706: CALL_OW 261
30710: PUSH
30711: LD_INT 65
30713: GREATEREQUAL
30714: IFFALSE 30776
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
30716: LD_ADDR_EXP 7
30720: PUSH
30721: LD_EXP 7
30725: PUSH
30726: LD_VAR 0 1
30730: PPUSH
30731: CALL_OW 265
30735: PUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 262
30745: PUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 263
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 264
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: ADD
30775: ST_TO_ADDR
30776: GO 30698
30778: POP
30779: POP
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
30780: LD_INT 22
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 21
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 21
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 69
30826: PPUSH
30827: LD_INT 83
30829: PPUSH
30830: LD_INT 157
30832: PPUSH
30833: CALL_OW 171
// AddComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30837: LD_EXP 80
30841: PPUSH
30842: LD_INT 83
30844: PPUSH
30845: LD_INT 157
30847: PPUSH
30848: CALL_OW 171
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30852: LD_INT 22
30854: PUSH
30855: LD_INT 6
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PPUSH
30876: CALL_OW 69
30880: PPUSH
30881: LD_INT 83
30883: PPUSH
30884: LD_INT 157
30886: PPUSH
30887: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30891: LD_EXP 50
30895: PPUSH
30896: CALL_OW 87
// wait ( 0 0$1 ) ;
30900: LD_INT 35
30902: PPUSH
30903: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30907: LD_EXP 50
30911: PPUSH
30912: LD_EXP 61
30916: PPUSH
30917: CALL_OW 296
30921: PUSH
30922: LD_INT 23
30924: GREATER
30925: IFFALSE 30852
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30927: LD_INT 113
30929: PPUSH
30930: LD_INT 96
30932: PPUSH
30933: LD_INT 3
30935: PPUSH
30936: LD_INT 12
30938: NEG
30939: PPUSH
30940: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30944: LD_INT 113
30946: PPUSH
30947: LD_INT 96
30949: PPUSH
30950: CALL_OW 86
// canDestroyBeriaBase = true ;
30954: LD_ADDR_EXP 29
30958: PUSH
30959: LD_INT 1
30961: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30962: LD_ADDR_VAR 0 5
30966: PUSH
30967: LD_INT 25
30969: PPUSH
30970: LD_INT 22
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 21
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PPUSH
30994: CALL_OW 70
30998: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30999: LD_ADDR_VAR 0 1
31003: PUSH
31004: DOUBLE
31005: LD_INT 1
31007: DEC
31008: ST_TO_ADDR
31009: LD_VAR 0 5
31013: PUSH
31014: FOR_TO
31015: IFFALSE 31097
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
31017: LD_ADDR_VAR 0 6
31021: PUSH
31022: LD_VAR 0 5
31026: PPUSH
31027: LD_INT 22
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PPUSH
31037: CALL_OW 69
31041: PUSH
31042: LD_INT 1
31044: ARRAY
31045: PPUSH
31046: CALL_OW 74
31050: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
31051: LD_ADDR_VAR 0 5
31055: PUSH
31056: LD_VAR 0 5
31060: PUSH
31061: LD_VAR 0 6
31065: DIFF
31066: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
31067: LD_EXP 88
31071: PPUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
31081: LD_EXP 89
31085: PPUSH
31086: LD_VAR 0 6
31090: PPUSH
31091: CALL_OW 175
// end ;
31095: GO 31014
31097: POP
31098: POP
// wait ( 0 0$35 ) ;
31099: LD_INT 1225
31101: PPUSH
31102: CALL_OW 67
// FinishMission ;
31106: CALL 20288 0 0
// end ;
31110: PPOPN 9
31112: END
// every 1 trigger immortalSurvivors do var unit ;
31113: LD_EXP 28
31117: IFFALSE 31155
31119: GO 31121
31121: DISABLE
31122: LD_INT 0
31124: PPUSH
// begin enable ;
31125: ENABLE
// for unit in survivorsArabianAttack do
31126: LD_ADDR_VAR 0 1
31130: PUSH
31131: LD_EXP 80
31135: PUSH
31136: FOR_IN
31137: IFFALSE 31153
// SetLives ( unit , 1000 ) ;
31139: LD_VAR 0 1
31143: PPUSH
31144: LD_INT 1000
31146: PPUSH
31147: CALL_OW 234
31151: GO 31136
31153: POP
31154: POP
// end ; end_of_file
31155: PPOPN 1
31157: END
// every 0 0$30 do
31158: GO 31160
31160: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
31161: LD_INT 3
31163: PPUSH
31164: LD_INT 5
31166: PPUSH
31167: CALL_OW 12
31171: PPUSH
31172: LD_INT 76
31174: PPUSH
31175: LD_INT 111
31177: PPUSH
31178: LD_INT 5
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: CALL_OW 56
31188: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
31189: LD_EXP 8
31193: IFFALSE 31265
31195: GO 31197
31197: DISABLE
31198: LD_INT 0
31200: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
31201: LD_INT 50
31203: PPUSH
31204: LD_INT 4200
31206: PPUSH
31207: CALL_OW 12
31211: PPUSH
31212: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
31216: LD_VAR 0 1
31220: PUSH
31221: LD_INT 175
31223: MUL
31224: PPUSH
31225: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
31229: LD_ADDR_VAR 0 1
31233: PUSH
31234: LD_VAR 0 1
31238: PUSH
31239: LD_INT 1
31241: PLUS
31242: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
31243: LD_INT 3
31245: PPUSH
31246: LD_INT 5
31248: PPUSH
31249: CALL_OW 12
31253: PPUSH
31254: LD_INT 6
31256: PPUSH
31257: LD_INT 1
31259: PPUSH
31260: CALL_OW 55
// enable ;
31264: ENABLE
// end ; end_of_file
31265: PPOPN 1
31267: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
31268: LD_EXP 90
31272: IFFALSE 31435
31274: GO 31276
31276: DISABLE
// begin enable ;
31277: ENABLE
// case counterIndex of 1 :
31278: LD_EXP 91
31282: PUSH
31283: LD_INT 1
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31308
31291: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
31292: LD_ADDR_EXP 41
31296: PUSH
31297: LD_EXP 41
31301: PUSH
31302: LD_INT 35
31304: MINUS
31305: ST_TO_ADDR
31306: GO 31435
31308: LD_INT 2
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31350
31316: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
31317: LD_ADDR_OWVAR 47
31321: PUSH
31322: LD_STRING #Ru03-1
31324: PUSH
31325: LD_EXP 18
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31334: LD_ADDR_EXP 18
31338: PUSH
31339: LD_EXP 18
31343: PUSH
31344: LD_INT 35
31346: MINUS
31347: ST_TO_ADDR
// end ; 3 :
31348: GO 31435
31350: LD_INT 3
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31392
31358: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
31359: LD_ADDR_OWVAR 47
31363: PUSH
31364: LD_STRING #Ru03-2
31366: PUSH
31367: LD_EXP 18
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31376: LD_ADDR_EXP 18
31380: PUSH
31381: LD_EXP 18
31385: PUSH
31386: LD_INT 35
31388: MINUS
31389: ST_TO_ADDR
// end ; 4 :
31390: GO 31435
31392: LD_INT 4
31394: DOUBLE
31395: EQUAL
31396: IFTRUE 31400
31398: GO 31434
31400: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
31401: LD_ADDR_OWVAR 47
31405: PUSH
31406: LD_STRING #Ru03-3
31408: PUSH
31409: LD_EXP 17
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
31418: LD_ADDR_EXP 17
31422: PUSH
31423: LD_EXP 17
31427: PUSH
31428: LD_INT 35
31430: MINUS
31431: ST_TO_ADDR
// end ; end ;
31432: GO 31435
31434: POP
// end ; end_of_file
31435: END
// every 7 7$0 do
31436: GO 31438
31438: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
31439: LD_INT 3
31441: PPUSH
31442: LD_INT 1
31444: PPUSH
31445: LD_INT 0
31447: PPUSH
31448: LD_INT 7
31450: PPUSH
31451: CALL 5977 0 4
31455: END
// every 12 12$0 do
31456: GO 31458
31458: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
31459: LD_INT 2
31461: PPUSH
31462: LD_INT 2
31464: PPUSH
31465: LD_INT 1
31467: PPUSH
31468: LD_INT 9
31470: PUSH
31471: LD_INT 8
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PPUSH
31481: LD_INT 2
31483: PPUSH
31484: CALL_OW 12
31488: ARRAY
31489: PPUSH
31490: CALL 5977 0 4
31494: END
// every 20 20$0 do
31495: GO 31497
31497: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
31498: LD_INT 4
31500: PPUSH
31501: LD_INT 2
31503: PPUSH
31504: LD_INT 0
31506: PPUSH
31507: LD_INT 7
31509: PPUSH
31510: CALL 5977 0 4
31514: END
// every 23 23$0 do
31515: GO 31517
31517: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
31518: LD_INT 3
31520: PPUSH
31521: LD_INT 1
31523: PPUSH
31524: LD_INT 2
31526: PPUSH
31527: LD_INT 9
31529: PUSH
31530: LD_INT 8
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PPUSH
31540: LD_INT 2
31542: PPUSH
31543: CALL_OW 12
31547: ARRAY
31548: PPUSH
31549: CALL 5977 0 4
31553: END
// export function Nef_PrepareNature ; var i , un ; begin
31554: LD_INT 0
31556: PPUSH
31557: PPUSH
31558: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
31559: LD_ADDR_VAR 0 2
31563: PUSH
31564: DOUBLE
31565: LD_INT 1
31567: DEC
31568: ST_TO_ADDR
31569: LD_EXP 33
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PUSH
31578: FOR_TO
31579: IFFALSE 31689
// begin uc_side = 0 ;
31581: LD_ADDR_OWVAR 20
31585: PUSH
31586: LD_INT 0
31588: ST_TO_ADDR
// uc_nation = nation_nature ;
31589: LD_ADDR_OWVAR 21
31593: PUSH
31594: LD_INT 0
31596: ST_TO_ADDR
// hc_class = class_apeman ;
31597: LD_ADDR_OWVAR 28
31601: PUSH
31602: LD_INT 12
31604: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31605: LD_ADDR_OWVAR 31
31609: PUSH
31610: LD_EXP 34
31614: PUSH
31615: LD_INT 1
31617: ARRAY
31618: PUSH
31619: LD_EXP 34
31623: PUSH
31624: LD_INT 2
31626: ARRAY
31627: PUSH
31628: LD_EXP 34
31632: PUSH
31633: LD_INT 3
31635: ARRAY
31636: PUSH
31637: LD_EXP 34
31641: PUSH
31642: LD_INT 4
31644: ARRAY
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31652: LD_ADDR_OWVAR 35
31656: PUSH
31657: LD_EXP 35
31661: ST_TO_ADDR
// un = CreateHuman ;
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: CALL_OW 44
31671: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31672: LD_VAR 0 3
31676: PPUSH
31677: LD_INT 27
31679: PPUSH
31680: LD_INT 0
31682: PPUSH
31683: CALL_OW 49
// end ;
31687: GO 31578
31689: POP
31690: POP
// for i := 1 to animalsAmount [ 2 ] do
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_EXP 33
31705: PUSH
31706: LD_INT 2
31708: ARRAY
31709: PUSH
31710: FOR_TO
31711: IFFALSE 31821
// begin uc_side = 0 ;
31713: LD_ADDR_OWVAR 20
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
// uc_nation = nation_nature ;
31721: LD_ADDR_OWVAR 21
31725: PUSH
31726: LD_INT 0
31728: ST_TO_ADDR
// hc_class = class_phororhacos ;
31729: LD_ADDR_OWVAR 28
31733: PUSH
31734: LD_INT 18
31736: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31737: LD_ADDR_OWVAR 31
31741: PUSH
31742: LD_EXP 34
31746: PUSH
31747: LD_INT 1
31749: ARRAY
31750: PUSH
31751: LD_EXP 34
31755: PUSH
31756: LD_INT 2
31758: ARRAY
31759: PUSH
31760: LD_EXP 34
31764: PUSH
31765: LD_INT 3
31767: ARRAY
31768: PUSH
31769: LD_EXP 34
31773: PUSH
31774: LD_INT 4
31776: ARRAY
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31784: LD_ADDR_OWVAR 35
31788: PUSH
31789: LD_EXP 35
31793: ST_TO_ADDR
// un = CreateHuman ;
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: CALL_OW 44
31803: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31804: LD_VAR 0 3
31808: PPUSH
31809: LD_INT 27
31811: PPUSH
31812: LD_INT 0
31814: PPUSH
31815: CALL_OW 49
// end ;
31819: GO 31710
31821: POP
31822: POP
// for i := 1 to animalsAmount [ 3 ] do
31823: LD_ADDR_VAR 0 2
31827: PUSH
31828: DOUBLE
31829: LD_INT 1
31831: DEC
31832: ST_TO_ADDR
31833: LD_EXP 33
31837: PUSH
31838: LD_INT 3
31840: ARRAY
31841: PUSH
31842: FOR_TO
31843: IFFALSE 31953
// begin uc_side = 0 ;
31845: LD_ADDR_OWVAR 20
31849: PUSH
31850: LD_INT 0
31852: ST_TO_ADDR
// uc_nation = nation_nature ;
31853: LD_ADDR_OWVAR 21
31857: PUSH
31858: LD_INT 0
31860: ST_TO_ADDR
// hc_class = class_tiger ;
31861: LD_ADDR_OWVAR 28
31865: PUSH
31866: LD_INT 14
31868: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31869: LD_ADDR_OWVAR 31
31873: PUSH
31874: LD_EXP 34
31878: PUSH
31879: LD_INT 1
31881: ARRAY
31882: PUSH
31883: LD_EXP 34
31887: PUSH
31888: LD_INT 2
31890: ARRAY
31891: PUSH
31892: LD_EXP 34
31896: PUSH
31897: LD_INT 3
31899: ARRAY
31900: PUSH
31901: LD_EXP 34
31905: PUSH
31906: LD_INT 4
31908: ARRAY
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31916: LD_ADDR_OWVAR 35
31920: PUSH
31921: LD_EXP 35
31925: ST_TO_ADDR
// un = CreateHuman ;
31926: LD_ADDR_VAR 0 3
31930: PUSH
31931: CALL_OW 44
31935: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31936: LD_VAR 0 3
31940: PPUSH
31941: LD_INT 27
31943: PPUSH
31944: LD_INT 0
31946: PPUSH
31947: CALL_OW 49
// end ;
31951: GO 31842
31953: POP
31954: POP
// for i := 1 to animalsAmount [ 4 ] do
31955: LD_ADDR_VAR 0 2
31959: PUSH
31960: DOUBLE
31961: LD_INT 1
31963: DEC
31964: ST_TO_ADDR
31965: LD_EXP 33
31969: PUSH
31970: LD_INT 4
31972: ARRAY
31973: PUSH
31974: FOR_TO
31975: IFFALSE 32085
// begin uc_side = 0 ;
31977: LD_ADDR_OWVAR 20
31981: PUSH
31982: LD_INT 0
31984: ST_TO_ADDR
// uc_nation = nation_nature ;
31985: LD_ADDR_OWVAR 21
31989: PUSH
31990: LD_INT 0
31992: ST_TO_ADDR
// hc_class = 21 ;
31993: LD_ADDR_OWVAR 28
31997: PUSH
31998: LD_INT 21
32000: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
32001: LD_ADDR_OWVAR 31
32005: PUSH
32006: LD_EXP 34
32010: PUSH
32011: LD_INT 1
32013: ARRAY
32014: PUSH
32015: LD_EXP 34
32019: PUSH
32020: LD_INT 2
32022: ARRAY
32023: PUSH
32024: LD_EXP 34
32028: PUSH
32029: LD_INT 3
32031: ARRAY
32032: PUSH
32033: LD_EXP 34
32037: PUSH
32038: LD_INT 4
32040: ARRAY
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
32048: LD_ADDR_OWVAR 35
32052: PUSH
32053: LD_EXP 35
32057: ST_TO_ADDR
// un = CreateHuman ;
32058: LD_ADDR_VAR 0 3
32062: PUSH
32063: CALL_OW 44
32067: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32068: LD_VAR 0 3
32072: PPUSH
32073: LD_INT 27
32075: PPUSH
32076: LD_INT 0
32078: PPUSH
32079: CALL_OW 49
// end ;
32083: GO 31974
32085: POP
32086: POP
// for i := 1 to animalsAmount [ 5 ] do
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: DOUBLE
32093: LD_INT 1
32095: DEC
32096: ST_TO_ADDR
32097: LD_EXP 33
32101: PUSH
32102: LD_INT 5
32104: ARRAY
32105: PUSH
32106: FOR_TO
32107: IFFALSE 32168
// begin uc_side = 0 ;
32109: LD_ADDR_OWVAR 20
32113: PUSH
32114: LD_INT 0
32116: ST_TO_ADDR
// uc_nation = nation_nature ;
32117: LD_ADDR_OWVAR 21
32121: PUSH
32122: LD_INT 0
32124: ST_TO_ADDR
// vc_chassis := 31 ;
32125: LD_ADDR_OWVAR 37
32129: PUSH
32130: LD_INT 31
32132: ST_TO_ADDR
// vc_control := control_rider ;
32133: LD_ADDR_OWVAR 38
32137: PUSH
32138: LD_INT 4
32140: ST_TO_ADDR
// un := CreateVehicle ;
32141: LD_ADDR_VAR 0 3
32145: PUSH
32146: CALL_OW 45
32150: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32151: LD_VAR 0 3
32155: PPUSH
32156: LD_INT 27
32158: PPUSH
32159: LD_INT 0
32161: PPUSH
32162: CALL_OW 49
// end ;
32166: GO 32106
32168: POP
32169: POP
// end ; end_of_file
32170: LD_VAR 0 1
32174: RET
// every 1 trigger scholtzeSaved do
32175: LD_EXP 10
32179: IFFALSE 32191
32181: GO 32183
32183: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
32184: LD_STRING ACH_PROFESSOR
32186: PPUSH
32187: CALL_OW 543
32191: END
// every 1 trigger IsDead ( Sikorski ) do
32192: LD_INT 290
32194: PPUSH
32195: CALL_OW 301
32199: IFFALSE 32211
32201: GO 32203
32203: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
32204: LD_STRING ACH_SIKORSKI
32206: PPUSH
32207: CALL_OW 543
32211: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
32212: LD_EXP 15
32216: NOT
32217: PUSH
32218: LD_EXP 27
32222: NOT
32223: AND
32224: IFFALSE 32236
32226: GO 32228
32228: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
32229: LD_STRING ACH_REINFORCE
32231: PPUSH
32232: CALL_OW 543
32236: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
32237: LD_INT 0
32239: PPUSH
// ar_miner := 81 ;
32240: LD_ADDR_EXP 99
32244: PUSH
32245: LD_INT 81
32247: ST_TO_ADDR
// ar_crane := 88 ;
32248: LD_ADDR_EXP 98
32252: PUSH
32253: LD_INT 88
32255: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32256: LD_ADDR_EXP 93
32260: PUSH
32261: LD_INT 89
32263: ST_TO_ADDR
// us_hack := 99 ;
32264: LD_ADDR_EXP 94
32268: PUSH
32269: LD_INT 99
32271: ST_TO_ADDR
// us_artillery := 97 ;
32272: LD_ADDR_EXP 95
32276: PUSH
32277: LD_INT 97
32279: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32280: LD_ADDR_EXP 96
32284: PUSH
32285: LD_INT 91
32287: ST_TO_ADDR
// ar_mortar := 92 ;
32288: LD_ADDR_EXP 97
32292: PUSH
32293: LD_INT 92
32295: ST_TO_ADDR
// ru_radar := 98 ;
32296: LD_ADDR_EXP 92
32300: PUSH
32301: LD_INT 98
32303: ST_TO_ADDR
// tech_Artillery := 80 ;
32304: LD_ADDR_EXP 100
32308: PUSH
32309: LD_INT 80
32311: ST_TO_ADDR
// tech_RadMat := 81 ;
32312: LD_ADDR_EXP 101
32316: PUSH
32317: LD_INT 81
32319: ST_TO_ADDR
// tech_BasicTools := 82 ;
32320: LD_ADDR_EXP 102
32324: PUSH
32325: LD_INT 82
32327: ST_TO_ADDR
// tech_Cargo := 83 ;
32328: LD_ADDR_EXP 103
32332: PUSH
32333: LD_INT 83
32335: ST_TO_ADDR
// tech_Track := 84 ;
32336: LD_ADDR_EXP 104
32340: PUSH
32341: LD_INT 84
32343: ST_TO_ADDR
// tech_Crane := 85 ;
32344: LD_ADDR_EXP 105
32348: PUSH
32349: LD_INT 85
32351: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32352: LD_ADDR_EXP 106
32356: PUSH
32357: LD_INT 86
32359: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32360: LD_ADDR_EXP 107
32364: PUSH
32365: LD_INT 87
32367: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
32368: LD_ADDR_EXP 108
32372: PUSH
32373: LD_INT 88
32375: ST_TO_ADDR
// class_mastodont := 31 ;
32376: LD_ADDR_EXP 109
32380: PUSH
32381: LD_INT 31
32383: ST_TO_ADDR
// class_horse := 21 ;
32384: LD_ADDR_EXP 110
32388: PUSH
32389: LD_INT 21
32391: ST_TO_ADDR
// end ;
32392: LD_VAR 0 1
32396: RET
// every 1 do
32397: GO 32399
32399: DISABLE
// InitGlobalVariables ; end_of_file
32400: CALL 32237 0 0
32404: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32405: LD_INT 0
32407: PPUSH
32408: PPUSH
// if exist_mode then
32409: LD_VAR 0 2
32413: IFFALSE 32438
// unit := CreateCharacter ( prefix & ident ) else
32415: LD_ADDR_VAR 0 5
32419: PUSH
32420: LD_VAR 0 3
32424: PUSH
32425: LD_VAR 0 1
32429: STR
32430: PPUSH
32431: CALL_OW 34
32435: ST_TO_ADDR
32436: GO 32453
// unit := NewCharacter ( ident ) ;
32438: LD_ADDR_VAR 0 5
32442: PUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: CALL_OW 25
32452: ST_TO_ADDR
// result := unit ;
32453: LD_ADDR_VAR 0 4
32457: PUSH
32458: LD_VAR 0 5
32462: ST_TO_ADDR
// end ;
32463: LD_VAR 0 4
32467: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32468: LD_INT 0
32470: PPUSH
32471: PPUSH
// if not side or not nation then
32472: LD_VAR 0 1
32476: NOT
32477: PUSH
32478: LD_VAR 0 2
32482: NOT
32483: OR
32484: IFFALSE 32488
// exit ;
32486: GO 33256
// case nation of nation_american :
32488: LD_VAR 0 2
32492: PUSH
32493: LD_INT 1
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32715
32501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_INT 35
32509: PUSH
32510: LD_INT 45
32512: PUSH
32513: LD_INT 46
32515: PUSH
32516: LD_INT 47
32518: PUSH
32519: LD_INT 82
32521: PUSH
32522: LD_INT 83
32524: PUSH
32525: LD_INT 84
32527: PUSH
32528: LD_INT 85
32530: PUSH
32531: LD_INT 86
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 6
32542: PUSH
32543: LD_INT 15
32545: PUSH
32546: LD_INT 16
32548: PUSH
32549: LD_INT 7
32551: PUSH
32552: LD_INT 12
32554: PUSH
32555: LD_INT 13
32557: PUSH
32558: LD_INT 10
32560: PUSH
32561: LD_INT 14
32563: PUSH
32564: LD_INT 20
32566: PUSH
32567: LD_INT 21
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_INT 25
32575: PUSH
32576: LD_INT 32
32578: PUSH
32579: LD_INT 27
32581: PUSH
32582: LD_INT 36
32584: PUSH
32585: LD_INT 69
32587: PUSH
32588: LD_INT 39
32590: PUSH
32591: LD_INT 34
32593: PUSH
32594: LD_INT 40
32596: PUSH
32597: LD_INT 48
32599: PUSH
32600: LD_INT 49
32602: PUSH
32603: LD_INT 50
32605: PUSH
32606: LD_INT 51
32608: PUSH
32609: LD_INT 52
32611: PUSH
32612: LD_INT 53
32614: PUSH
32615: LD_INT 54
32617: PUSH
32618: LD_INT 55
32620: PUSH
32621: LD_INT 56
32623: PUSH
32624: LD_INT 57
32626: PUSH
32627: LD_INT 58
32629: PUSH
32630: LD_INT 59
32632: PUSH
32633: LD_INT 60
32635: PUSH
32636: LD_INT 61
32638: PUSH
32639: LD_INT 62
32641: PUSH
32642: LD_INT 80
32644: PUSH
32645: LD_INT 82
32647: PUSH
32648: LD_INT 83
32650: PUSH
32651: LD_INT 84
32653: PUSH
32654: LD_INT 85
32656: PUSH
32657: LD_INT 86
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: ST_TO_ADDR
32713: GO 33180
32715: LD_INT 2
32717: DOUBLE
32718: EQUAL
32719: IFTRUE 32723
32721: GO 32949
32723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32724: LD_ADDR_VAR 0 4
32728: PUSH
32729: LD_INT 35
32731: PUSH
32732: LD_INT 45
32734: PUSH
32735: LD_INT 46
32737: PUSH
32738: LD_INT 47
32740: PUSH
32741: LD_INT 82
32743: PUSH
32744: LD_INT 83
32746: PUSH
32747: LD_INT 84
32749: PUSH
32750: LD_INT 85
32752: PUSH
32753: LD_INT 87
32755: PUSH
32756: LD_INT 70
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 11
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: LD_INT 5
32773: PUSH
32774: LD_INT 6
32776: PUSH
32777: LD_INT 15
32779: PUSH
32780: LD_INT 18
32782: PUSH
32783: LD_INT 7
32785: PUSH
32786: LD_INT 17
32788: PUSH
32789: LD_INT 8
32791: PUSH
32792: LD_INT 20
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 22
32800: PUSH
32801: LD_INT 72
32803: PUSH
32804: LD_INT 26
32806: PUSH
32807: LD_INT 69
32809: PUSH
32810: LD_INT 39
32812: PUSH
32813: LD_INT 40
32815: PUSH
32816: LD_INT 41
32818: PUSH
32819: LD_INT 42
32821: PUSH
32822: LD_INT 43
32824: PUSH
32825: LD_INT 48
32827: PUSH
32828: LD_INT 49
32830: PUSH
32831: LD_INT 50
32833: PUSH
32834: LD_INT 51
32836: PUSH
32837: LD_INT 52
32839: PUSH
32840: LD_INT 53
32842: PUSH
32843: LD_INT 54
32845: PUSH
32846: LD_INT 55
32848: PUSH
32849: LD_INT 56
32851: PUSH
32852: LD_INT 60
32854: PUSH
32855: LD_INT 61
32857: PUSH
32858: LD_INT 62
32860: PUSH
32861: LD_INT 66
32863: PUSH
32864: LD_INT 67
32866: PUSH
32867: LD_INT 68
32869: PUSH
32870: LD_INT 81
32872: PUSH
32873: LD_INT 82
32875: PUSH
32876: LD_INT 83
32878: PUSH
32879: LD_INT 84
32881: PUSH
32882: LD_INT 85
32884: PUSH
32885: LD_INT 87
32887: PUSH
32888: LD_INT 88
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: ST_TO_ADDR
32947: GO 33180
32949: LD_INT 3
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 33179
32957: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32958: LD_ADDR_VAR 0 4
32962: PUSH
32963: LD_INT 46
32965: PUSH
32966: LD_INT 47
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 82
32977: PUSH
32978: LD_INT 83
32980: PUSH
32981: LD_INT 84
32983: PUSH
32984: LD_INT 85
32986: PUSH
32987: LD_INT 86
32989: PUSH
32990: LD_INT 11
32992: PUSH
32993: LD_INT 9
32995: PUSH
32996: LD_INT 20
32998: PUSH
32999: LD_INT 19
33001: PUSH
33002: LD_INT 21
33004: PUSH
33005: LD_INT 24
33007: PUSH
33008: LD_INT 22
33010: PUSH
33011: LD_INT 25
33013: PUSH
33014: LD_INT 28
33016: PUSH
33017: LD_INT 29
33019: PUSH
33020: LD_INT 30
33022: PUSH
33023: LD_INT 31
33025: PUSH
33026: LD_INT 37
33028: PUSH
33029: LD_INT 38
33031: PUSH
33032: LD_INT 32
33034: PUSH
33035: LD_INT 27
33037: PUSH
33038: LD_INT 33
33040: PUSH
33041: LD_INT 69
33043: PUSH
33044: LD_INT 39
33046: PUSH
33047: LD_INT 34
33049: PUSH
33050: LD_INT 40
33052: PUSH
33053: LD_INT 71
33055: PUSH
33056: LD_INT 23
33058: PUSH
33059: LD_INT 44
33061: PUSH
33062: LD_INT 48
33064: PUSH
33065: LD_INT 49
33067: PUSH
33068: LD_INT 50
33070: PUSH
33071: LD_INT 51
33073: PUSH
33074: LD_INT 52
33076: PUSH
33077: LD_INT 53
33079: PUSH
33080: LD_INT 54
33082: PUSH
33083: LD_INT 55
33085: PUSH
33086: LD_INT 56
33088: PUSH
33089: LD_INT 57
33091: PUSH
33092: LD_INT 58
33094: PUSH
33095: LD_INT 59
33097: PUSH
33098: LD_INT 63
33100: PUSH
33101: LD_INT 64
33103: PUSH
33104: LD_INT 65
33106: PUSH
33107: LD_INT 82
33109: PUSH
33110: LD_INT 83
33112: PUSH
33113: LD_INT 84
33115: PUSH
33116: LD_INT 85
33118: PUSH
33119: LD_INT 86
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
33177: GO 33180
33179: POP
// if state > - 1 and state < 3 then
33180: LD_VAR 0 3
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: GREATER
33189: PUSH
33190: LD_VAR 0 3
33194: PUSH
33195: LD_INT 3
33197: LESS
33198: AND
33199: IFFALSE 33256
// for i in result do
33201: LD_ADDR_VAR 0 5
33205: PUSH
33206: LD_VAR 0 4
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33254
// if GetTech ( i , side ) <> state then
33214: LD_VAR 0 5
33218: PPUSH
33219: LD_VAR 0 1
33223: PPUSH
33224: CALL_OW 321
33228: PUSH
33229: LD_VAR 0 3
33233: NONEQUAL
33234: IFFALSE 33252
// result := result diff i ;
33236: LD_ADDR_VAR 0 4
33240: PUSH
33241: LD_VAR 0 4
33245: PUSH
33246: LD_VAR 0 5
33250: DIFF
33251: ST_TO_ADDR
33252: GO 33211
33254: POP
33255: POP
// end ;
33256: LD_VAR 0 4
33260: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33261: LD_INT 0
33263: PPUSH
33264: PPUSH
33265: PPUSH
// result := true ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 1
33273: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33274: LD_ADDR_VAR 0 5
33278: PUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: CALL_OW 480
33288: ST_TO_ADDR
// if not tmp then
33289: LD_VAR 0 5
33293: NOT
33294: IFFALSE 33298
// exit ;
33296: GO 33347
// for i in tmp do
33298: LD_ADDR_VAR 0 4
33302: PUSH
33303: LD_VAR 0 5
33307: PUSH
33308: FOR_IN
33309: IFFALSE 33345
// if GetTech ( i , side ) <> state_researched then
33311: LD_VAR 0 4
33315: PPUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 321
33325: PUSH
33326: LD_INT 2
33328: NONEQUAL
33329: IFFALSE 33343
// begin result := false ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_INT 0
33338: ST_TO_ADDR
// exit ;
33339: POP
33340: POP
33341: GO 33347
// end ;
33343: GO 33308
33345: POP
33346: POP
// end ;
33347: LD_VAR 0 3
33351: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33352: LD_INT 0
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33367: LD_VAR 0 1
33371: NOT
33372: PUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 257
33382: PUSH
33383: LD_INT 9
33385: NONEQUAL
33386: OR
33387: IFFALSE 33391
// exit ;
33389: GO 33964
// side := GetSide ( unit ) ;
33391: LD_ADDR_VAR 0 9
33395: PUSH
33396: LD_VAR 0 1
33400: PPUSH
33401: CALL_OW 255
33405: ST_TO_ADDR
// tech_space := tech_spacanom ;
33406: LD_ADDR_VAR 0 12
33410: PUSH
33411: LD_INT 29
33413: ST_TO_ADDR
// tech_time := tech_taurad ;
33414: LD_ADDR_VAR 0 13
33418: PUSH
33419: LD_INT 28
33421: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33422: LD_ADDR_VAR 0 11
33426: PUSH
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 310
33436: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33437: LD_VAR 0 11
33441: PPUSH
33442: CALL_OW 247
33446: PUSH
33447: LD_INT 2
33449: EQUAL
33450: IFFALSE 33454
// exit ;
33452: GO 33964
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33454: LD_ADDR_VAR 0 8
33458: PUSH
33459: LD_INT 81
33461: PUSH
33462: LD_VAR 0 9
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 21
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PPUSH
33492: CALL_OW 69
33496: ST_TO_ADDR
// if not tmp then
33497: LD_VAR 0 8
33501: NOT
33502: IFFALSE 33506
// exit ;
33504: GO 33964
// if in_unit then
33506: LD_VAR 0 11
33510: IFFALSE 33534
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33512: LD_ADDR_VAR 0 10
33516: PUSH
33517: LD_VAR 0 8
33521: PPUSH
33522: LD_VAR 0 11
33526: PPUSH
33527: CALL_OW 74
33531: ST_TO_ADDR
33532: GO 33554
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33534: LD_ADDR_VAR 0 10
33538: PUSH
33539: LD_VAR 0 8
33543: PPUSH
33544: LD_VAR 0 1
33548: PPUSH
33549: CALL_OW 74
33553: ST_TO_ADDR
// if not enemy then
33554: LD_VAR 0 10
33558: NOT
33559: IFFALSE 33563
// exit ;
33561: GO 33964
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33563: LD_VAR 0 11
33567: PUSH
33568: LD_VAR 0 11
33572: PPUSH
33573: LD_VAR 0 10
33577: PPUSH
33578: CALL_OW 296
33582: PUSH
33583: LD_INT 13
33585: GREATER
33586: AND
33587: PUSH
33588: LD_VAR 0 1
33592: PPUSH
33593: LD_VAR 0 10
33597: PPUSH
33598: CALL_OW 296
33602: PUSH
33603: LD_INT 12
33605: GREATER
33606: OR
33607: IFFALSE 33611
// exit ;
33609: GO 33964
// missile := [ 1 ] ;
33611: LD_ADDR_VAR 0 14
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33622: LD_VAR 0 9
33626: PPUSH
33627: LD_VAR 0 12
33631: PPUSH
33632: CALL_OW 325
33636: IFFALSE 33665
// missile := Insert ( missile , missile + 1 , 2 ) ;
33638: LD_ADDR_VAR 0 14
33642: PUSH
33643: LD_VAR 0 14
33647: PPUSH
33648: LD_VAR 0 14
33652: PUSH
33653: LD_INT 1
33655: PLUS
33656: PPUSH
33657: LD_INT 2
33659: PPUSH
33660: CALL_OW 2
33664: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33665: LD_VAR 0 9
33669: PPUSH
33670: LD_VAR 0 13
33674: PPUSH
33675: CALL_OW 325
33679: PUSH
33680: LD_VAR 0 10
33684: PPUSH
33685: CALL_OW 255
33689: PPUSH
33690: LD_VAR 0 13
33694: PPUSH
33695: CALL_OW 325
33699: NOT
33700: AND
33701: IFFALSE 33730
// missile := Insert ( missile , missile + 1 , 3 ) ;
33703: LD_ADDR_VAR 0 14
33707: PUSH
33708: LD_VAR 0 14
33712: PPUSH
33713: LD_VAR 0 14
33717: PUSH
33718: LD_INT 1
33720: PLUS
33721: PPUSH
33722: LD_INT 3
33724: PPUSH
33725: CALL_OW 2
33729: ST_TO_ADDR
// if missile < 2 then
33730: LD_VAR 0 14
33734: PUSH
33735: LD_INT 2
33737: LESS
33738: IFFALSE 33742
// exit ;
33740: GO 33964
// x := GetX ( enemy ) ;
33742: LD_ADDR_VAR 0 4
33746: PUSH
33747: LD_VAR 0 10
33751: PPUSH
33752: CALL_OW 250
33756: ST_TO_ADDR
// y := GetY ( enemy ) ;
33757: LD_ADDR_VAR 0 5
33761: PUSH
33762: LD_VAR 0 10
33766: PPUSH
33767: CALL_OW 251
33771: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33772: LD_ADDR_VAR 0 6
33776: PUSH
33777: LD_VAR 0 4
33781: PUSH
33782: LD_INT 1
33784: NEG
33785: PPUSH
33786: LD_INT 1
33788: PPUSH
33789: CALL_OW 12
33793: PLUS
33794: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33795: LD_ADDR_VAR 0 7
33799: PUSH
33800: LD_VAR 0 5
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PPUSH
33809: LD_INT 1
33811: PPUSH
33812: CALL_OW 12
33816: PLUS
33817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33818: LD_VAR 0 6
33822: PPUSH
33823: LD_VAR 0 7
33827: PPUSH
33828: CALL_OW 488
33832: NOT
33833: IFFALSE 33855
// begin _x := x ;
33835: LD_ADDR_VAR 0 6
33839: PUSH
33840: LD_VAR 0 4
33844: ST_TO_ADDR
// _y := y ;
33845: LD_ADDR_VAR 0 7
33849: PUSH
33850: LD_VAR 0 5
33854: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 1
33862: PPUSH
33863: LD_VAR 0 14
33867: PPUSH
33868: CALL_OW 12
33872: ST_TO_ADDR
// case i of 1 :
33873: LD_VAR 0 3
33877: PUSH
33878: LD_INT 1
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33903
33886: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33887: LD_VAR 0 1
33891: PPUSH
33892: LD_VAR 0 10
33896: PPUSH
33897: CALL_OW 115
33901: GO 33964
33903: LD_INT 2
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33911
33909: GO 33933
33911: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 6
33921: PPUSH
33922: LD_VAR 0 7
33926: PPUSH
33927: CALL_OW 153
33931: GO 33964
33933: LD_INT 3
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33963
33941: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33942: LD_VAR 0 1
33946: PPUSH
33947: LD_VAR 0 6
33951: PPUSH
33952: LD_VAR 0 7
33956: PPUSH
33957: CALL_OW 154
33961: GO 33964
33963: POP
// end ;
33964: LD_VAR 0 2
33968: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33969: LD_INT 0
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
// if not unit or not building then
33977: LD_VAR 0 1
33981: NOT
33982: PUSH
33983: LD_VAR 0 2
33987: NOT
33988: OR
33989: IFFALSE 33993
// exit ;
33991: GO 34151
// x := GetX ( building ) ;
33993: LD_ADDR_VAR 0 5
33997: PUSH
33998: LD_VAR 0 2
34002: PPUSH
34003: CALL_OW 250
34007: ST_TO_ADDR
// y := GetY ( building ) ;
34008: LD_ADDR_VAR 0 6
34012: PUSH
34013: LD_VAR 0 2
34017: PPUSH
34018: CALL_OW 251
34022: ST_TO_ADDR
// for i = 0 to 5 do
34023: LD_ADDR_VAR 0 4
34027: PUSH
34028: DOUBLE
34029: LD_INT 0
34031: DEC
34032: ST_TO_ADDR
34033: LD_INT 5
34035: PUSH
34036: FOR_TO
34037: IFFALSE 34149
// begin _x := ShiftX ( x , i , 3 ) ;
34039: LD_ADDR_VAR 0 7
34043: PUSH
34044: LD_VAR 0 5
34048: PPUSH
34049: LD_VAR 0 4
34053: PPUSH
34054: LD_INT 3
34056: PPUSH
34057: CALL_OW 272
34061: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34062: LD_ADDR_VAR 0 8
34066: PUSH
34067: LD_VAR 0 6
34071: PPUSH
34072: LD_VAR 0 4
34076: PPUSH
34077: LD_INT 3
34079: PPUSH
34080: CALL_OW 273
34084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34085: LD_VAR 0 7
34089: PPUSH
34090: LD_VAR 0 8
34094: PPUSH
34095: CALL_OW 488
34099: NOT
34100: IFFALSE 34104
// continue ;
34102: GO 34036
// if HexInfo ( _x , _y ) = 0 then
34104: LD_VAR 0 7
34108: PPUSH
34109: LD_VAR 0 8
34113: PPUSH
34114: CALL_OW 428
34118: PUSH
34119: LD_INT 0
34121: EQUAL
34122: IFFALSE 34147
// begin ComMoveXY ( unit , _x , _y ) ;
34124: LD_VAR 0 1
34128: PPUSH
34129: LD_VAR 0 7
34133: PPUSH
34134: LD_VAR 0 8
34138: PPUSH
34139: CALL_OW 111
// exit ;
34143: POP
34144: POP
34145: GO 34151
// end ; end ;
34147: GO 34036
34149: POP
34150: POP
// end ;
34151: LD_VAR 0 3
34155: RET
// export function ScanBase ( side , base_area ) ; begin
34156: LD_INT 0
34158: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_INT 81
34171: PUSH
34172: LD_VAR 0 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: CALL_OW 70
34185: ST_TO_ADDR
// end ;
34186: LD_VAR 0 3
34190: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34191: LD_INT 0
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
// result := false ;
34197: LD_ADDR_VAR 0 2
34201: PUSH
34202: LD_INT 0
34204: ST_TO_ADDR
// side := GetSide ( unit ) ;
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 255
34219: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34220: LD_ADDR_VAR 0 4
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 248
34234: ST_TO_ADDR
// case nat of 1 :
34235: LD_VAR 0 4
34239: PUSH
34240: LD_INT 1
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34248
34246: GO 34259
34248: POP
// tech := tech_lassight ; 2 :
34249: LD_ADDR_VAR 0 5
34253: PUSH
34254: LD_INT 12
34256: ST_TO_ADDR
34257: GO 34298
34259: LD_INT 2
34261: DOUBLE
34262: EQUAL
34263: IFTRUE 34267
34265: GO 34278
34267: POP
// tech := tech_mortar ; 3 :
34268: LD_ADDR_VAR 0 5
34272: PUSH
34273: LD_INT 41
34275: ST_TO_ADDR
34276: GO 34298
34278: LD_INT 3
34280: DOUBLE
34281: EQUAL
34282: IFTRUE 34286
34284: GO 34297
34286: POP
// tech := tech_bazooka ; end ;
34287: LD_ADDR_VAR 0 5
34291: PUSH
34292: LD_INT 44
34294: ST_TO_ADDR
34295: GO 34298
34297: POP
// if Researched ( side , tech ) then
34298: LD_VAR 0 3
34302: PPUSH
34303: LD_VAR 0 5
34307: PPUSH
34308: CALL_OW 325
34312: IFFALSE 34339
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34314: LD_ADDR_VAR 0 2
34318: PUSH
34319: LD_INT 5
34321: PUSH
34322: LD_INT 8
34324: PUSH
34325: LD_INT 9
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: LD_VAR 0 4
34337: ARRAY
34338: ST_TO_ADDR
// end ;
34339: LD_VAR 0 2
34343: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
34348: PPUSH
// if not mines then
34349: LD_VAR 0 2
34353: NOT
34354: IFFALSE 34358
// exit ;
34356: GO 34502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34358: LD_ADDR_VAR 0 5
34362: PUSH
34363: LD_INT 81
34365: PUSH
34366: LD_VAR 0 1
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: LD_INT 21
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL_OW 69
34400: ST_TO_ADDR
// for i in mines do
34401: LD_ADDR_VAR 0 4
34405: PUSH
34406: LD_VAR 0 2
34410: PUSH
34411: FOR_IN
34412: IFFALSE 34500
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34414: LD_VAR 0 4
34418: PUSH
34419: LD_INT 1
34421: ARRAY
34422: PPUSH
34423: LD_VAR 0 4
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: PPUSH
34432: CALL_OW 458
34436: NOT
34437: IFFALSE 34441
// continue ;
34439: GO 34411
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34441: LD_VAR 0 4
34445: PUSH
34446: LD_INT 1
34448: ARRAY
34449: PPUSH
34450: LD_VAR 0 4
34454: PUSH
34455: LD_INT 2
34457: ARRAY
34458: PPUSH
34459: CALL_OW 428
34463: PUSH
34464: LD_VAR 0 5
34468: IN
34469: IFFALSE 34498
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34471: LD_VAR 0 4
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: PPUSH
34480: LD_VAR 0 4
34484: PUSH
34485: LD_INT 2
34487: ARRAY
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 456
// end ;
34498: GO 34411
34500: POP
34501: POP
// end ;
34502: LD_VAR 0 3
34506: RET
// export function Count ( array ) ; var i ; begin
34507: LD_INT 0
34509: PPUSH
34510: PPUSH
// result := 0 ;
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: LD_INT 0
34518: ST_TO_ADDR
// for i in array do
34519: LD_ADDR_VAR 0 3
34523: PUSH
34524: LD_VAR 0 1
34528: PUSH
34529: FOR_IN
34530: IFFALSE 34554
// if i then
34532: LD_VAR 0 3
34536: IFFALSE 34552
// result := result + 1 ;
34538: LD_ADDR_VAR 0 2
34542: PUSH
34543: LD_VAR 0 2
34547: PUSH
34548: LD_INT 1
34550: PLUS
34551: ST_TO_ADDR
34552: GO 34529
34554: POP
34555: POP
// end ;
34556: LD_VAR 0 2
34560: RET
// export function IsEmpty ( building ) ; begin
34561: LD_INT 0
34563: PPUSH
// if not building then
34564: LD_VAR 0 1
34568: NOT
34569: IFFALSE 34573
// exit ;
34571: GO 34616
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34573: LD_ADDR_VAR 0 2
34577: PUSH
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 22
34585: PUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 255
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 58
34602: PUSH
34603: EMPTY
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PPUSH
34610: CALL_OW 69
34614: IN
34615: ST_TO_ADDR
// end ;
34616: LD_VAR 0 2
34620: RET
// export function IsNotFull ( building ) ; begin
34621: LD_INT 0
34623: PPUSH
// if not building then
34624: LD_VAR 0 1
34628: NOT
34629: IFFALSE 34633
// exit ;
34631: GO 34652
// result := UnitsInside ( building ) < 6 ;
34633: LD_ADDR_VAR 0 2
34637: PUSH
34638: LD_VAR 0 1
34642: PPUSH
34643: CALL_OW 313
34647: PUSH
34648: LD_INT 6
34650: LESS
34651: ST_TO_ADDR
// end ;
34652: LD_VAR 0 2
34656: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34657: LD_INT 0
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
// tmp := [ ] ;
34663: LD_ADDR_VAR 0 3
34667: PUSH
34668: EMPTY
34669: ST_TO_ADDR
// list := [ ] ;
34670: LD_ADDR_VAR 0 5
34674: PUSH
34675: EMPTY
34676: ST_TO_ADDR
// for i = 16 to 25 do
34677: LD_ADDR_VAR 0 4
34681: PUSH
34682: DOUBLE
34683: LD_INT 16
34685: DEC
34686: ST_TO_ADDR
34687: LD_INT 25
34689: PUSH
34690: FOR_TO
34691: IFFALSE 34764
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_VAR 0 3
34702: PUSH
34703: LD_INT 22
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 255
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 91
34722: PUSH
34723: LD_VAR 0 1
34727: PUSH
34728: LD_INT 6
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 30
34738: PUSH
34739: LD_VAR 0 4
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: PPUSH
34756: CALL_OW 69
34760: ADD
34761: ST_TO_ADDR
34762: GO 34690
34764: POP
34765: POP
// for i = 1 to tmp do
34766: LD_ADDR_VAR 0 4
34770: PUSH
34771: DOUBLE
34772: LD_INT 1
34774: DEC
34775: ST_TO_ADDR
34776: LD_VAR 0 3
34780: PUSH
34781: FOR_TO
34782: IFFALSE 34870
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34784: LD_ADDR_VAR 0 5
34788: PUSH
34789: LD_VAR 0 5
34793: PUSH
34794: LD_VAR 0 3
34798: PUSH
34799: LD_VAR 0 4
34803: ARRAY
34804: PPUSH
34805: CALL_OW 266
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 4
34819: ARRAY
34820: PPUSH
34821: CALL_OW 250
34825: PUSH
34826: LD_VAR 0 3
34830: PUSH
34831: LD_VAR 0 4
34835: ARRAY
34836: PPUSH
34837: CALL_OW 251
34841: PUSH
34842: LD_VAR 0 3
34846: PUSH
34847: LD_VAR 0 4
34851: ARRAY
34852: PPUSH
34853: CALL_OW 254
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: PUSH
34864: EMPTY
34865: LIST
34866: ADD
34867: ST_TO_ADDR
34868: GO 34781
34870: POP
34871: POP
// result := list ;
34872: LD_ADDR_VAR 0 2
34876: PUSH
34877: LD_VAR 0 5
34881: ST_TO_ADDR
// end ;
34882: LD_VAR 0 2
34886: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34887: LD_INT 0
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
34893: PPUSH
34894: PPUSH
34895: PPUSH
// if not factory then
34896: LD_VAR 0 1
34900: NOT
34901: IFFALSE 34905
// exit ;
34903: GO 35498
// if control = control_apeman then
34905: LD_VAR 0 4
34909: PUSH
34910: LD_INT 5
34912: EQUAL
34913: IFFALSE 35022
// begin tmp := UnitsInside ( factory ) ;
34915: LD_ADDR_VAR 0 8
34919: PUSH
34920: LD_VAR 0 1
34924: PPUSH
34925: CALL_OW 313
34929: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34930: LD_VAR 0 8
34934: PPUSH
34935: LD_INT 25
34937: PUSH
34938: LD_INT 12
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PPUSH
34945: CALL_OW 72
34949: NOT
34950: IFFALSE 34960
// control := control_manual ;
34952: LD_ADDR_VAR 0 4
34956: PUSH
34957: LD_INT 1
34959: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34960: LD_ADDR_VAR 0 8
34964: PUSH
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL 34657 0 1
34974: ST_TO_ADDR
// if tmp then
34975: LD_VAR 0 8
34979: IFFALSE 35022
// begin for i in tmp do
34981: LD_ADDR_VAR 0 7
34985: PUSH
34986: LD_VAR 0 8
34990: PUSH
34991: FOR_IN
34992: IFFALSE 35020
// if i [ 1 ] = b_ext_radio then
34994: LD_VAR 0 7
34998: PUSH
34999: LD_INT 1
35001: ARRAY
35002: PUSH
35003: LD_INT 22
35005: EQUAL
35006: IFFALSE 35018
// begin control := control_remote ;
35008: LD_ADDR_VAR 0 4
35012: PUSH
35013: LD_INT 2
35015: ST_TO_ADDR
// break ;
35016: GO 35020
// end ;
35018: GO 34991
35020: POP
35021: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: LD_VAR 0 3
35036: PPUSH
35037: LD_VAR 0 4
35041: PPUSH
35042: LD_VAR 0 5
35046: PPUSH
35047: CALL_OW 448
35051: IFFALSE 35086
// begin result := [ chassis , engine , control , weapon ] ;
35053: LD_ADDR_VAR 0 6
35057: PUSH
35058: LD_VAR 0 2
35062: PUSH
35063: LD_VAR 0 3
35067: PUSH
35068: LD_VAR 0 4
35072: PUSH
35073: LD_VAR 0 5
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
// exit ;
35084: GO 35498
// end ; _chassis := AvailableChassisList ( factory ) ;
35086: LD_ADDR_VAR 0 9
35090: PUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: CALL_OW 475
35100: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35101: LD_ADDR_VAR 0 11
35105: PUSH
35106: LD_VAR 0 1
35110: PPUSH
35111: CALL_OW 476
35115: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35116: LD_ADDR_VAR 0 12
35120: PUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 477
35130: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35131: LD_ADDR_VAR 0 10
35135: PUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 478
35145: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35146: LD_VAR 0 9
35150: NOT
35151: PUSH
35152: LD_VAR 0 11
35156: NOT
35157: OR
35158: PUSH
35159: LD_VAR 0 12
35163: NOT
35164: OR
35165: PUSH
35166: LD_VAR 0 10
35170: NOT
35171: OR
35172: IFFALSE 35207
// begin result := [ chassis , engine , control , weapon ] ;
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: LD_VAR 0 2
35183: PUSH
35184: LD_VAR 0 3
35188: PUSH
35189: LD_VAR 0 4
35193: PUSH
35194: LD_VAR 0 5
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// exit ;
35205: GO 35498
// end ; if not chassis in _chassis then
35207: LD_VAR 0 2
35211: PUSH
35212: LD_VAR 0 9
35216: IN
35217: NOT
35218: IFFALSE 35244
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35220: LD_ADDR_VAR 0 2
35224: PUSH
35225: LD_VAR 0 9
35229: PUSH
35230: LD_INT 1
35232: PPUSH
35233: LD_VAR 0 9
35237: PPUSH
35238: CALL_OW 12
35242: ARRAY
35243: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 3
35253: PPUSH
35254: CALL 35503 0 2
35258: NOT
35259: IFFALSE 35318
// repeat engine := _engine [ 1 ] ;
35261: LD_ADDR_VAR 0 3
35265: PUSH
35266: LD_VAR 0 11
35270: PUSH
35271: LD_INT 1
35273: ARRAY
35274: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35275: LD_ADDR_VAR 0 11
35279: PUSH
35280: LD_VAR 0 11
35284: PPUSH
35285: LD_INT 1
35287: PPUSH
35288: CALL_OW 3
35292: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35293: LD_VAR 0 2
35297: PPUSH
35298: LD_VAR 0 3
35302: PPUSH
35303: CALL 35503 0 2
35307: PUSH
35308: LD_VAR 0 11
35312: PUSH
35313: EMPTY
35314: EQUAL
35315: OR
35316: IFFALSE 35261
// if not control in _control then
35318: LD_VAR 0 4
35322: PUSH
35323: LD_VAR 0 12
35327: IN
35328: NOT
35329: IFFALSE 35355
// control := _control [ rand ( 1 , _control ) ] ;
35331: LD_ADDR_VAR 0 4
35335: PUSH
35336: LD_VAR 0 12
35340: PUSH
35341: LD_INT 1
35343: PPUSH
35344: LD_VAR 0 12
35348: PPUSH
35349: CALL_OW 12
35353: ARRAY
35354: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35355: LD_VAR 0 2
35359: PPUSH
35360: LD_VAR 0 5
35364: PPUSH
35365: CALL 35723 0 2
35369: NOT
35370: IFFALSE 35429
// repeat weapon := _weapon [ 1 ] ;
35372: LD_ADDR_VAR 0 5
35376: PUSH
35377: LD_VAR 0 10
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35386: LD_ADDR_VAR 0 10
35390: PUSH
35391: LD_VAR 0 10
35395: PPUSH
35396: LD_INT 1
35398: PPUSH
35399: CALL_OW 3
35403: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35404: LD_VAR 0 2
35408: PPUSH
35409: LD_VAR 0 5
35413: PPUSH
35414: CALL 35723 0 2
35418: PUSH
35419: LD_VAR 0 10
35423: PUSH
35424: EMPTY
35425: EQUAL
35426: OR
35427: IFFALSE 35372
// result := [ ] ;
35429: LD_ADDR_VAR 0 6
35433: PUSH
35434: EMPTY
35435: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35436: LD_VAR 0 1
35440: PPUSH
35441: LD_VAR 0 2
35445: PPUSH
35446: LD_VAR 0 3
35450: PPUSH
35451: LD_VAR 0 4
35455: PPUSH
35456: LD_VAR 0 5
35460: PPUSH
35461: CALL_OW 448
35465: IFFALSE 35498
// result := [ chassis , engine , control , weapon ] ;
35467: LD_ADDR_VAR 0 6
35471: PUSH
35472: LD_VAR 0 2
35476: PUSH
35477: LD_VAR 0 3
35481: PUSH
35482: LD_VAR 0 4
35486: PUSH
35487: LD_VAR 0 5
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
// end ;
35498: LD_VAR 0 6
35502: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35503: LD_INT 0
35505: PPUSH
// if not chassis or not engine then
35506: LD_VAR 0 1
35510: NOT
35511: PUSH
35512: LD_VAR 0 2
35516: NOT
35517: OR
35518: IFFALSE 35522
// exit ;
35520: GO 35718
// case engine of engine_solar :
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 2
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35573
35535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 11
35543: PUSH
35544: LD_INT 12
35546: PUSH
35547: LD_INT 13
35549: PUSH
35550: LD_INT 14
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 35702
35573: LD_INT 1
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35643
35581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 11
35589: PUSH
35590: LD_INT 12
35592: PUSH
35593: LD_INT 13
35595: PUSH
35596: LD_INT 14
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: LD_INT 5
35613: PUSH
35614: LD_INT 21
35616: PUSH
35617: LD_INT 23
35619: PUSH
35620: LD_INT 22
35622: PUSH
35623: LD_INT 24
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
35641: GO 35702
35643: LD_INT 3
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35701
35651: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35652: LD_ADDR_VAR 0 3
35656: PUSH
35657: LD_INT 13
35659: PUSH
35660: LD_INT 14
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: LD_INT 4
35671: PUSH
35672: LD_INT 5
35674: PUSH
35675: LD_INT 21
35677: PUSH
35678: LD_INT 22
35680: PUSH
35681: LD_INT 23
35683: PUSH
35684: LD_INT 24
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
35699: GO 35702
35701: POP
// result := ( chassis in result ) ;
35702: LD_ADDR_VAR 0 3
35706: PUSH
35707: LD_VAR 0 1
35711: PUSH
35712: LD_VAR 0 3
35716: IN
35717: ST_TO_ADDR
// end ;
35718: LD_VAR 0 3
35722: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35723: LD_INT 0
35725: PPUSH
// if not chassis or not weapon then
35726: LD_VAR 0 1
35730: NOT
35731: PUSH
35732: LD_VAR 0 2
35736: NOT
35737: OR
35738: IFFALSE 35742
// exit ;
35740: GO 36804
// case weapon of us_machine_gun :
35742: LD_VAR 0 2
35746: PUSH
35747: LD_INT 2
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35755
35753: GO 35785
35755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: LD_INT 3
35769: PUSH
35770: LD_INT 4
35772: PUSH
35773: LD_INT 5
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: ST_TO_ADDR
35783: GO 36788
35785: LD_INT 3
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35793
35791: GO 35823
35793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 4
35810: PUSH
35811: LD_INT 5
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
35821: GO 36788
35823: LD_INT 11
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35861
35831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35832: LD_ADDR_VAR 0 3
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: LD_INT 4
35848: PUSH
35849: LD_INT 5
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
35859: GO 36788
35861: LD_INT 4
35863: DOUBLE
35864: EQUAL
35865: IFTRUE 35869
35867: GO 35895
35869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35870: LD_ADDR_VAR 0 3
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: LD_INT 5
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
35893: GO 36788
35895: LD_INT 5
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35903
35901: GO 35929
35903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 3
35914: PUSH
35915: LD_INT 4
35917: PUSH
35918: LD_INT 5
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 36788
35929: LD_INT 9
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 35963
35937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35938: LD_ADDR_VAR 0 3
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 3
35948: PUSH
35949: LD_INT 4
35951: PUSH
35952: LD_INT 5
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 36788
35963: LD_INT 7
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 35997
35971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35972: LD_ADDR_VAR 0 3
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 4
35985: PUSH
35986: LD_INT 5
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
35995: GO 36788
35997: LD_INT 12
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36005
36003: GO 36031
36005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36006: LD_ADDR_VAR 0 3
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: LD_INT 4
36019: PUSH
36020: LD_INT 5
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: ST_TO_ADDR
36029: GO 36788
36031: LD_INT 13
36033: DOUBLE
36034: EQUAL
36035: IFTRUE 36039
36037: GO 36065
36039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 4
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
36063: GO 36788
36065: LD_INT 14
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36073
36071: GO 36091
36073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36074: LD_ADDR_VAR 0 3
36078: PUSH
36079: LD_INT 4
36081: PUSH
36082: LD_INT 5
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: ST_TO_ADDR
36089: GO 36788
36091: LD_INT 6
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36117
36099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 4
36107: PUSH
36108: LD_INT 5
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: ST_TO_ADDR
36115: GO 36788
36117: LD_INT 10
36119: DOUBLE
36120: EQUAL
36121: IFTRUE 36125
36123: GO 36143
36125: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36126: LD_ADDR_VAR 0 3
36130: PUSH
36131: LD_INT 4
36133: PUSH
36134: LD_INT 5
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: ST_TO_ADDR
36141: GO 36788
36143: LD_INT 22
36145: DOUBLE
36146: EQUAL
36147: IFTRUE 36151
36149: GO 36177
36151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36152: LD_ADDR_VAR 0 3
36156: PUSH
36157: LD_INT 11
36159: PUSH
36160: LD_INT 12
36162: PUSH
36163: LD_INT 13
36165: PUSH
36166: LD_INT 14
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: ST_TO_ADDR
36175: GO 36788
36177: LD_INT 23
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36185
36183: GO 36211
36185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36186: LD_ADDR_VAR 0 3
36190: PUSH
36191: LD_INT 11
36193: PUSH
36194: LD_INT 12
36196: PUSH
36197: LD_INT 13
36199: PUSH
36200: LD_INT 14
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
36209: GO 36788
36211: LD_INT 24
36213: DOUBLE
36214: EQUAL
36215: IFTRUE 36219
36217: GO 36245
36219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36220: LD_ADDR_VAR 0 3
36224: PUSH
36225: LD_INT 11
36227: PUSH
36228: LD_INT 12
36230: PUSH
36231: LD_INT 13
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
36243: GO 36788
36245: LD_INT 30
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36253
36251: GO 36279
36253: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 11
36261: PUSH
36262: LD_INT 12
36264: PUSH
36265: LD_INT 13
36267: PUSH
36268: LD_INT 14
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
36277: GO 36788
36279: LD_INT 25
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36305
36287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 13
36295: PUSH
36296: LD_INT 14
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: ST_TO_ADDR
36303: GO 36788
36305: LD_INT 27
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36331
36313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_INT 13
36321: PUSH
36322: LD_INT 14
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: ST_TO_ADDR
36329: GO 36788
36331: LD_EXP 97
36335: DOUBLE
36336: EQUAL
36337: IFTRUE 36341
36339: GO 36367
36341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36342: LD_ADDR_VAR 0 3
36346: PUSH
36347: LD_INT 11
36349: PUSH
36350: LD_INT 12
36352: PUSH
36353: LD_INT 13
36355: PUSH
36356: LD_INT 14
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: ST_TO_ADDR
36365: GO 36788
36367: LD_INT 28
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36375
36373: GO 36393
36375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_INT 13
36383: PUSH
36384: LD_INT 14
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: ST_TO_ADDR
36391: GO 36788
36393: LD_INT 29
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36401
36399: GO 36419
36401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_INT 13
36409: PUSH
36410: LD_INT 14
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: ST_TO_ADDR
36417: GO 36788
36419: LD_INT 31
36421: DOUBLE
36422: EQUAL
36423: IFTRUE 36427
36425: GO 36445
36427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36428: LD_ADDR_VAR 0 3
36432: PUSH
36433: LD_INT 13
36435: PUSH
36436: LD_INT 14
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: ST_TO_ADDR
36443: GO 36788
36445: LD_INT 26
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36471
36453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36454: LD_ADDR_VAR 0 3
36458: PUSH
36459: LD_INT 13
36461: PUSH
36462: LD_INT 14
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: ST_TO_ADDR
36469: GO 36788
36471: LD_INT 42
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 36505
36479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_INT 21
36487: PUSH
36488: LD_INT 22
36490: PUSH
36491: LD_INT 23
36493: PUSH
36494: LD_INT 24
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
36503: GO 36788
36505: LD_INT 43
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36513
36511: GO 36539
36513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: LD_INT 21
36521: PUSH
36522: LD_INT 22
36524: PUSH
36525: LD_INT 23
36527: PUSH
36528: LD_INT 24
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
36537: GO 36788
36539: LD_INT 44
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36547
36545: GO 36573
36547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_INT 21
36555: PUSH
36556: LD_INT 22
36558: PUSH
36559: LD_INT 23
36561: PUSH
36562: LD_INT 24
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
36571: GO 36788
36573: LD_INT 45
36575: DOUBLE
36576: EQUAL
36577: IFTRUE 36581
36579: GO 36607
36581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36582: LD_ADDR_VAR 0 3
36586: PUSH
36587: LD_INT 21
36589: PUSH
36590: LD_INT 22
36592: PUSH
36593: LD_INT 23
36595: PUSH
36596: LD_INT 24
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
36605: GO 36788
36607: LD_INT 49
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36641
36615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_INT 21
36623: PUSH
36624: LD_INT 22
36626: PUSH
36627: LD_INT 23
36629: PUSH
36630: LD_INT 24
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
36639: GO 36788
36641: LD_INT 51
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36675
36649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: LD_INT 21
36657: PUSH
36658: LD_INT 22
36660: PUSH
36661: LD_INT 23
36663: PUSH
36664: LD_INT 24
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
36673: GO 36788
36675: LD_INT 52
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36683
36681: GO 36709
36683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 21
36691: PUSH
36692: LD_INT 22
36694: PUSH
36695: LD_INT 23
36697: PUSH
36698: LD_INT 24
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
36707: GO 36788
36709: LD_INT 53
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36735
36717: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_INT 23
36725: PUSH
36726: LD_INT 24
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: ST_TO_ADDR
36733: GO 36788
36735: LD_INT 46
36737: DOUBLE
36738: EQUAL
36739: IFTRUE 36743
36741: GO 36761
36743: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_INT 23
36751: PUSH
36752: LD_INT 24
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: ST_TO_ADDR
36759: GO 36788
36761: LD_INT 47
36763: DOUBLE
36764: EQUAL
36765: IFTRUE 36769
36767: GO 36787
36769: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36770: LD_ADDR_VAR 0 3
36774: PUSH
36775: LD_INT 23
36777: PUSH
36778: LD_INT 24
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: ST_TO_ADDR
36785: GO 36788
36787: POP
// result := ( chassis in result ) ;
36788: LD_ADDR_VAR 0 3
36792: PUSH
36793: LD_VAR 0 1
36797: PUSH
36798: LD_VAR 0 3
36802: IN
36803: ST_TO_ADDR
// end ;
36804: LD_VAR 0 3
36808: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36809: LD_INT 0
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
// result := array ;
36818: LD_ADDR_VAR 0 5
36822: PUSH
36823: LD_VAR 0 1
36827: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36828: LD_VAR 0 1
36832: NOT
36833: PUSH
36834: LD_VAR 0 2
36838: NOT
36839: OR
36840: PUSH
36841: LD_VAR 0 3
36845: NOT
36846: OR
36847: PUSH
36848: LD_VAR 0 2
36852: PUSH
36853: LD_VAR 0 1
36857: GREATER
36858: OR
36859: PUSH
36860: LD_VAR 0 3
36864: PUSH
36865: LD_VAR 0 1
36869: GREATER
36870: OR
36871: IFFALSE 36875
// exit ;
36873: GO 37171
// if direction then
36875: LD_VAR 0 4
36879: IFFALSE 36943
// begin d := 1 ;
36881: LD_ADDR_VAR 0 9
36885: PUSH
36886: LD_INT 1
36888: ST_TO_ADDR
// if i_from > i_to then
36889: LD_VAR 0 2
36893: PUSH
36894: LD_VAR 0 3
36898: GREATER
36899: IFFALSE 36925
// length := ( array - i_from ) + i_to else
36901: LD_ADDR_VAR 0 11
36905: PUSH
36906: LD_VAR 0 1
36910: PUSH
36911: LD_VAR 0 2
36915: MINUS
36916: PUSH
36917: LD_VAR 0 3
36921: PLUS
36922: ST_TO_ADDR
36923: GO 36941
// length := i_to - i_from ;
36925: LD_ADDR_VAR 0 11
36929: PUSH
36930: LD_VAR 0 3
36934: PUSH
36935: LD_VAR 0 2
36939: MINUS
36940: ST_TO_ADDR
// end else
36941: GO 37004
// begin d := - 1 ;
36943: LD_ADDR_VAR 0 9
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: ST_TO_ADDR
// if i_from > i_to then
36952: LD_VAR 0 2
36956: PUSH
36957: LD_VAR 0 3
36961: GREATER
36962: IFFALSE 36982
// length := i_from - i_to else
36964: LD_ADDR_VAR 0 11
36968: PUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_VAR 0 3
36978: MINUS
36979: ST_TO_ADDR
36980: GO 37004
// length := ( array - i_to ) + i_from ;
36982: LD_ADDR_VAR 0 11
36986: PUSH
36987: LD_VAR 0 1
36991: PUSH
36992: LD_VAR 0 3
36996: MINUS
36997: PUSH
36998: LD_VAR 0 2
37002: PLUS
37003: ST_TO_ADDR
// end ; if not length then
37004: LD_VAR 0 11
37008: NOT
37009: IFFALSE 37013
// exit ;
37011: GO 37171
// tmp := array ;
37013: LD_ADDR_VAR 0 10
37017: PUSH
37018: LD_VAR 0 1
37022: ST_TO_ADDR
// for i = 1 to length do
37023: LD_ADDR_VAR 0 6
37027: PUSH
37028: DOUBLE
37029: LD_INT 1
37031: DEC
37032: ST_TO_ADDR
37033: LD_VAR 0 11
37037: PUSH
37038: FOR_TO
37039: IFFALSE 37159
// begin for j = 1 to array do
37041: LD_ADDR_VAR 0 7
37045: PUSH
37046: DOUBLE
37047: LD_INT 1
37049: DEC
37050: ST_TO_ADDR
37051: LD_VAR 0 1
37055: PUSH
37056: FOR_TO
37057: IFFALSE 37145
// begin k := j + d ;
37059: LD_ADDR_VAR 0 8
37063: PUSH
37064: LD_VAR 0 7
37068: PUSH
37069: LD_VAR 0 9
37073: PLUS
37074: ST_TO_ADDR
// if k > array then
37075: LD_VAR 0 8
37079: PUSH
37080: LD_VAR 0 1
37084: GREATER
37085: IFFALSE 37095
// k := 1 ;
37087: LD_ADDR_VAR 0 8
37091: PUSH
37092: LD_INT 1
37094: ST_TO_ADDR
// if not k then
37095: LD_VAR 0 8
37099: NOT
37100: IFFALSE 37112
// k := array ;
37102: LD_ADDR_VAR 0 8
37106: PUSH
37107: LD_VAR 0 1
37111: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37112: LD_ADDR_VAR 0 10
37116: PUSH
37117: LD_VAR 0 10
37121: PPUSH
37122: LD_VAR 0 8
37126: PPUSH
37127: LD_VAR 0 1
37131: PUSH
37132: LD_VAR 0 7
37136: ARRAY
37137: PPUSH
37138: CALL_OW 1
37142: ST_TO_ADDR
// end ;
37143: GO 37056
37145: POP
37146: POP
// array := tmp ;
37147: LD_ADDR_VAR 0 1
37151: PUSH
37152: LD_VAR 0 10
37156: ST_TO_ADDR
// end ;
37157: GO 37038
37159: POP
37160: POP
// result := array ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_VAR 0 1
37170: ST_TO_ADDR
// end ;
37171: LD_VAR 0 5
37175: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
// result := 0 ;
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// if not array or not value in array then
37188: LD_VAR 0 1
37192: NOT
37193: PUSH
37194: LD_VAR 0 2
37198: PUSH
37199: LD_VAR 0 1
37203: IN
37204: NOT
37205: OR
37206: IFFALSE 37210
// exit ;
37208: GO 37264
// for i = 1 to array do
37210: LD_ADDR_VAR 0 4
37214: PUSH
37215: DOUBLE
37216: LD_INT 1
37218: DEC
37219: ST_TO_ADDR
37220: LD_VAR 0 1
37224: PUSH
37225: FOR_TO
37226: IFFALSE 37262
// if value = array [ i ] then
37228: LD_VAR 0 2
37232: PUSH
37233: LD_VAR 0 1
37237: PUSH
37238: LD_VAR 0 4
37242: ARRAY
37243: EQUAL
37244: IFFALSE 37260
// begin result := i ;
37246: LD_ADDR_VAR 0 3
37250: PUSH
37251: LD_VAR 0 4
37255: ST_TO_ADDR
// exit ;
37256: POP
37257: POP
37258: GO 37264
// end ;
37260: GO 37225
37262: POP
37263: POP
// end ;
37264: LD_VAR 0 3
37268: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37269: LD_INT 0
37271: PPUSH
// vc_chassis := chassis ;
37272: LD_ADDR_OWVAR 37
37276: PUSH
37277: LD_VAR 0 1
37281: ST_TO_ADDR
// vc_engine := engine ;
37282: LD_ADDR_OWVAR 39
37286: PUSH
37287: LD_VAR 0 2
37291: ST_TO_ADDR
// vc_control := control ;
37292: LD_ADDR_OWVAR 38
37296: PUSH
37297: LD_VAR 0 3
37301: ST_TO_ADDR
// vc_weapon := weapon ;
37302: LD_ADDR_OWVAR 40
37306: PUSH
37307: LD_VAR 0 4
37311: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37312: LD_ADDR_OWVAR 41
37316: PUSH
37317: LD_VAR 0 5
37321: ST_TO_ADDR
// end ;
37322: LD_VAR 0 6
37326: RET
// export function WantPlant ( unit ) ; var task ; begin
37327: LD_INT 0
37329: PPUSH
37330: PPUSH
// result := false ;
37331: LD_ADDR_VAR 0 2
37335: PUSH
37336: LD_INT 0
37338: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37339: LD_ADDR_VAR 0 3
37343: PUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 437
37353: ST_TO_ADDR
// if task then
37354: LD_VAR 0 3
37358: IFFALSE 37386
// if task [ 1 ] [ 1 ] = p then
37360: LD_VAR 0 3
37364: PUSH
37365: LD_INT 1
37367: ARRAY
37368: PUSH
37369: LD_INT 1
37371: ARRAY
37372: PUSH
37373: LD_STRING p
37375: EQUAL
37376: IFFALSE 37386
// result := true ;
37378: LD_ADDR_VAR 0 2
37382: PUSH
37383: LD_INT 1
37385: ST_TO_ADDR
// end ;
37386: LD_VAR 0 2
37390: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37391: LD_INT 0
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
// if pos < 1 then
37397: LD_VAR 0 2
37401: PUSH
37402: LD_INT 1
37404: LESS
37405: IFFALSE 37409
// exit ;
37407: GO 37712
// if pos = 1 then
37409: LD_VAR 0 2
37413: PUSH
37414: LD_INT 1
37416: EQUAL
37417: IFFALSE 37450
// result := Replace ( arr , pos [ 1 ] , value ) else
37419: LD_ADDR_VAR 0 4
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_VAR 0 2
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: LD_VAR 0 3
37442: PPUSH
37443: CALL_OW 1
37447: ST_TO_ADDR
37448: GO 37712
// begin tmp := arr ;
37450: LD_ADDR_VAR 0 6
37454: PUSH
37455: LD_VAR 0 1
37459: ST_TO_ADDR
// s_arr := [ tmp ] ;
37460: LD_ADDR_VAR 0 7
37464: PUSH
37465: LD_VAR 0 6
37469: PUSH
37470: EMPTY
37471: LIST
37472: ST_TO_ADDR
// for i = 1 to pos - 1 do
37473: LD_ADDR_VAR 0 5
37477: PUSH
37478: DOUBLE
37479: LD_INT 1
37481: DEC
37482: ST_TO_ADDR
37483: LD_VAR 0 2
37487: PUSH
37488: LD_INT 1
37490: MINUS
37491: PUSH
37492: FOR_TO
37493: IFFALSE 37538
// begin tmp := tmp [ pos [ i ] ] ;
37495: LD_ADDR_VAR 0 6
37499: PUSH
37500: LD_VAR 0 6
37504: PUSH
37505: LD_VAR 0 2
37509: PUSH
37510: LD_VAR 0 5
37514: ARRAY
37515: ARRAY
37516: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37517: LD_ADDR_VAR 0 7
37521: PUSH
37522: LD_VAR 0 7
37526: PUSH
37527: LD_VAR 0 6
37531: PUSH
37532: EMPTY
37533: LIST
37534: ADD
37535: ST_TO_ADDR
// end ;
37536: GO 37492
37538: POP
37539: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37540: LD_ADDR_VAR 0 6
37544: PUSH
37545: LD_VAR 0 6
37549: PPUSH
37550: LD_VAR 0 2
37554: PUSH
37555: LD_VAR 0 2
37559: ARRAY
37560: PPUSH
37561: LD_VAR 0 3
37565: PPUSH
37566: CALL_OW 1
37570: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37571: LD_ADDR_VAR 0 7
37575: PUSH
37576: LD_VAR 0 7
37580: PPUSH
37581: LD_VAR 0 7
37585: PPUSH
37586: LD_VAR 0 6
37590: PPUSH
37591: CALL_OW 1
37595: ST_TO_ADDR
// for i = s_arr downto 2 do
37596: LD_ADDR_VAR 0 5
37600: PUSH
37601: DOUBLE
37602: LD_VAR 0 7
37606: INC
37607: ST_TO_ADDR
37608: LD_INT 2
37610: PUSH
37611: FOR_DOWNTO
37612: IFFALSE 37696
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37614: LD_ADDR_VAR 0 6
37618: PUSH
37619: LD_VAR 0 7
37623: PUSH
37624: LD_VAR 0 5
37628: PUSH
37629: LD_INT 1
37631: MINUS
37632: ARRAY
37633: PPUSH
37634: LD_VAR 0 2
37638: PUSH
37639: LD_VAR 0 5
37643: PUSH
37644: LD_INT 1
37646: MINUS
37647: ARRAY
37648: PPUSH
37649: LD_VAR 0 7
37653: PUSH
37654: LD_VAR 0 5
37658: ARRAY
37659: PPUSH
37660: CALL_OW 1
37664: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37665: LD_ADDR_VAR 0 7
37669: PUSH
37670: LD_VAR 0 7
37674: PPUSH
37675: LD_VAR 0 5
37679: PUSH
37680: LD_INT 1
37682: MINUS
37683: PPUSH
37684: LD_VAR 0 6
37688: PPUSH
37689: CALL_OW 1
37693: ST_TO_ADDR
// end ;
37694: GO 37611
37696: POP
37697: POP
// result := s_arr [ 1 ] ;
37698: LD_ADDR_VAR 0 4
37702: PUSH
37703: LD_VAR 0 7
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: ST_TO_ADDR
// end ; end ;
37712: LD_VAR 0 4
37716: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37717: LD_INT 0
37719: PPUSH
37720: PPUSH
// if not list then
37721: LD_VAR 0 1
37725: NOT
37726: IFFALSE 37730
// exit ;
37728: GO 37821
// i := list [ pos1 ] ;
37730: LD_ADDR_VAR 0 5
37734: PUSH
37735: LD_VAR 0 1
37739: PUSH
37740: LD_VAR 0 2
37744: ARRAY
37745: ST_TO_ADDR
// if not i then
37746: LD_VAR 0 5
37750: NOT
37751: IFFALSE 37755
// exit ;
37753: GO 37821
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37755: LD_ADDR_VAR 0 1
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: LD_VAR 0 2
37769: PPUSH
37770: LD_VAR 0 1
37774: PUSH
37775: LD_VAR 0 3
37779: ARRAY
37780: PPUSH
37781: CALL_OW 1
37785: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37786: LD_ADDR_VAR 0 1
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: LD_VAR 0 3
37800: PPUSH
37801: LD_VAR 0 5
37805: PPUSH
37806: CALL_OW 1
37810: ST_TO_ADDR
// result := list ;
37811: LD_ADDR_VAR 0 4
37815: PUSH
37816: LD_VAR 0 1
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 4
37825: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37826: LD_INT 0
37828: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37829: LD_ADDR_VAR 0 5
37833: PUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 250
37843: PPUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL_OW 251
37853: PPUSH
37854: LD_VAR 0 2
37858: PPUSH
37859: LD_VAR 0 3
37863: PPUSH
37864: LD_VAR 0 4
37868: PPUSH
37869: CALL 37879 0 5
37873: ST_TO_ADDR
// end ;
37874: LD_VAR 0 5
37878: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37879: LD_INT 0
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
// if not list then
37885: LD_VAR 0 3
37889: NOT
37890: IFFALSE 37894
// exit ;
37892: GO 38282
// result := [ ] ;
37894: LD_ADDR_VAR 0 6
37898: PUSH
37899: EMPTY
37900: ST_TO_ADDR
// for i in list do
37901: LD_ADDR_VAR 0 7
37905: PUSH
37906: LD_VAR 0 3
37910: PUSH
37911: FOR_IN
37912: IFFALSE 38114
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_VAR 0 7
37923: PPUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: LD_VAR 0 2
37933: PPUSH
37934: CALL_OW 297
37938: ST_TO_ADDR
// if not result then
37939: LD_VAR 0 6
37943: NOT
37944: IFFALSE 37970
// result := [ [ i , tmp ] ] else
37946: LD_ADDR_VAR 0 6
37950: PUSH
37951: LD_VAR 0 7
37955: PUSH
37956: LD_VAR 0 9
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: EMPTY
37966: LIST
37967: ST_TO_ADDR
37968: GO 38112
// begin if result [ result ] [ 2 ] < tmp then
37970: LD_VAR 0 6
37974: PUSH
37975: LD_VAR 0 6
37979: ARRAY
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PUSH
37985: LD_VAR 0 9
37989: LESS
37990: IFFALSE 38032
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37992: LD_ADDR_VAR 0 6
37996: PUSH
37997: LD_VAR 0 6
38001: PPUSH
38002: LD_VAR 0 6
38006: PUSH
38007: LD_INT 1
38009: PLUS
38010: PPUSH
38011: LD_VAR 0 7
38015: PUSH
38016: LD_VAR 0 9
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PPUSH
38025: CALL_OW 2
38029: ST_TO_ADDR
38030: GO 38112
// for j = 1 to result do
38032: LD_ADDR_VAR 0 8
38036: PUSH
38037: DOUBLE
38038: LD_INT 1
38040: DEC
38041: ST_TO_ADDR
38042: LD_VAR 0 6
38046: PUSH
38047: FOR_TO
38048: IFFALSE 38110
// begin if tmp < result [ j ] [ 2 ] then
38050: LD_VAR 0 9
38054: PUSH
38055: LD_VAR 0 6
38059: PUSH
38060: LD_VAR 0 8
38064: ARRAY
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: LESS
38070: IFFALSE 38108
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38072: LD_ADDR_VAR 0 6
38076: PUSH
38077: LD_VAR 0 6
38081: PPUSH
38082: LD_VAR 0 8
38086: PPUSH
38087: LD_VAR 0 7
38091: PUSH
38092: LD_VAR 0 9
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 2
38105: ST_TO_ADDR
// break ;
38106: GO 38110
// end ; end ;
38108: GO 38047
38110: POP
38111: POP
// end ; end ;
38112: GO 37911
38114: POP
38115: POP
// if result and not asc then
38116: LD_VAR 0 6
38120: PUSH
38121: LD_VAR 0 4
38125: NOT
38126: AND
38127: IFFALSE 38202
// begin tmp := result ;
38129: LD_ADDR_VAR 0 9
38133: PUSH
38134: LD_VAR 0 6
38138: ST_TO_ADDR
// for i = tmp downto 1 do
38139: LD_ADDR_VAR 0 7
38143: PUSH
38144: DOUBLE
38145: LD_VAR 0 9
38149: INC
38150: ST_TO_ADDR
38151: LD_INT 1
38153: PUSH
38154: FOR_DOWNTO
38155: IFFALSE 38200
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38157: LD_ADDR_VAR 0 6
38161: PUSH
38162: LD_VAR 0 6
38166: PPUSH
38167: LD_VAR 0 9
38171: PUSH
38172: LD_VAR 0 7
38176: MINUS
38177: PUSH
38178: LD_INT 1
38180: PLUS
38181: PPUSH
38182: LD_VAR 0 9
38186: PUSH
38187: LD_VAR 0 7
38191: ARRAY
38192: PPUSH
38193: CALL_OW 1
38197: ST_TO_ADDR
38198: GO 38154
38200: POP
38201: POP
// end ; tmp := [ ] ;
38202: LD_ADDR_VAR 0 9
38206: PUSH
38207: EMPTY
38208: ST_TO_ADDR
// if mode then
38209: LD_VAR 0 5
38213: IFFALSE 38282
// begin for i = 1 to result do
38215: LD_ADDR_VAR 0 7
38219: PUSH
38220: DOUBLE
38221: LD_INT 1
38223: DEC
38224: ST_TO_ADDR
38225: LD_VAR 0 6
38229: PUSH
38230: FOR_TO
38231: IFFALSE 38270
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38233: LD_ADDR_VAR 0 9
38237: PUSH
38238: LD_VAR 0 9
38242: PPUSH
38243: LD_VAR 0 7
38247: PPUSH
38248: LD_VAR 0 6
38252: PUSH
38253: LD_VAR 0 7
38257: ARRAY
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PPUSH
38263: CALL_OW 1
38267: ST_TO_ADDR
38268: GO 38230
38270: POP
38271: POP
// result := tmp ;
38272: LD_ADDR_VAR 0 6
38276: PUSH
38277: LD_VAR 0 9
38281: ST_TO_ADDR
// end ; end ;
38282: LD_VAR 0 6
38286: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38287: LD_INT 0
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38295: LD_ADDR_VAR 0 5
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// if not x or not y then
38317: LD_VAR 0 2
38321: NOT
38322: PUSH
38323: LD_VAR 0 3
38327: NOT
38328: OR
38329: IFFALSE 38333
// exit ;
38331: GO 39985
// if not range then
38333: LD_VAR 0 4
38337: NOT
38338: IFFALSE 38348
// range := 10 ;
38340: LD_ADDR_VAR 0 4
38344: PUSH
38345: LD_INT 10
38347: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38348: LD_ADDR_VAR 0 8
38352: PUSH
38353: LD_INT 81
38355: PUSH
38356: LD_VAR 0 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 92
38367: PUSH
38368: LD_VAR 0 2
38372: PUSH
38373: LD_VAR 0 3
38377: PUSH
38378: LD_VAR 0 4
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 3
38391: PUSH
38392: LD_INT 21
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PPUSH
38411: CALL_OW 69
38415: ST_TO_ADDR
// if not tmp then
38416: LD_VAR 0 8
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 39985
// for i in tmp do
38425: LD_ADDR_VAR 0 6
38429: PUSH
38430: LD_VAR 0 8
38434: PUSH
38435: FOR_IN
38436: IFFALSE 39960
// begin points := [ 0 , 0 , 0 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// bpoints := 1 ;
38457: LD_ADDR_VAR 0 10
38461: PUSH
38462: LD_INT 1
38464: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38465: LD_VAR 0 6
38469: PPUSH
38470: CALL_OW 247
38474: PUSH
38475: LD_INT 1
38477: DOUBLE
38478: EQUAL
38479: IFTRUE 38483
38481: GO 39061
38483: POP
// begin if GetClass ( i ) = 1 then
38484: LD_VAR 0 6
38488: PPUSH
38489: CALL_OW 257
38493: PUSH
38494: LD_INT 1
38496: EQUAL
38497: IFFALSE 38518
// points := [ 10 , 5 , 3 ] ;
38499: LD_ADDR_VAR 0 9
38503: PUSH
38504: LD_INT 10
38506: PUSH
38507: LD_INT 5
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38518: LD_VAR 0 6
38522: PPUSH
38523: CALL_OW 257
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: LD_INT 4
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: IN
38542: IFFALSE 38563
// points := [ 3 , 2 , 1 ] ;
38544: LD_ADDR_VAR 0 9
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 257
38572: PUSH
38573: LD_INT 5
38575: EQUAL
38576: IFFALSE 38597
// points := [ 130 , 5 , 2 ] ;
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: LD_INT 130
38585: PUSH
38586: LD_INT 5
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38597: LD_VAR 0 6
38601: PPUSH
38602: CALL_OW 257
38606: PUSH
38607: LD_INT 8
38609: EQUAL
38610: IFFALSE 38631
// points := [ 35 , 35 , 30 ] ;
38612: LD_ADDR_VAR 0 9
38616: PUSH
38617: LD_INT 35
38619: PUSH
38620: LD_INT 35
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38631: LD_VAR 0 6
38635: PPUSH
38636: CALL_OW 257
38640: PUSH
38641: LD_INT 9
38643: EQUAL
38644: IFFALSE 38665
// points := [ 20 , 55 , 40 ] ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_INT 20
38653: PUSH
38654: LD_INT 55
38656: PUSH
38657: LD_INT 40
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38665: LD_VAR 0 6
38669: PPUSH
38670: CALL_OW 257
38674: PUSH
38675: LD_INT 12
38677: PUSH
38678: LD_INT 16
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: IN
38685: IFFALSE 38706
// points := [ 5 , 3 , 2 ] ;
38687: LD_ADDR_VAR 0 9
38691: PUSH
38692: LD_INT 5
38694: PUSH
38695: LD_INT 3
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38706: LD_VAR 0 6
38710: PPUSH
38711: CALL_OW 257
38715: PUSH
38716: LD_INT 17
38718: EQUAL
38719: IFFALSE 38740
// points := [ 100 , 50 , 75 ] ;
38721: LD_ADDR_VAR 0 9
38725: PUSH
38726: LD_INT 100
38728: PUSH
38729: LD_INT 50
38731: PUSH
38732: LD_INT 75
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38740: LD_VAR 0 6
38744: PPUSH
38745: CALL_OW 257
38749: PUSH
38750: LD_INT 15
38752: EQUAL
38753: IFFALSE 38774
// points := [ 10 , 5 , 3 ] ;
38755: LD_ADDR_VAR 0 9
38759: PUSH
38760: LD_INT 10
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 257
38783: PUSH
38784: LD_INT 14
38786: EQUAL
38787: IFFALSE 38808
// points := [ 10 , 0 , 0 ] ;
38789: LD_ADDR_VAR 0 9
38793: PUSH
38794: LD_INT 10
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38808: LD_VAR 0 6
38812: PPUSH
38813: CALL_OW 257
38817: PUSH
38818: LD_INT 11
38820: EQUAL
38821: IFFALSE 38842
// points := [ 30 , 10 , 5 ] ;
38823: LD_ADDR_VAR 0 9
38827: PUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 10
38833: PUSH
38834: LD_INT 5
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38842: LD_VAR 0 1
38846: PPUSH
38847: LD_INT 5
38849: PPUSH
38850: CALL_OW 321
38854: PUSH
38855: LD_INT 2
38857: EQUAL
38858: IFFALSE 38875
// bpoints := bpoints * 1.8 ;
38860: LD_ADDR_VAR 0 10
38864: PUSH
38865: LD_VAR 0 10
38869: PUSH
38870: LD_REAL  1.80000000000000E+0000
38873: MUL
38874: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38875: LD_VAR 0 6
38879: PPUSH
38880: CALL_OW 257
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 4
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: IN
38903: PUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: LD_INT 51
38911: PPUSH
38912: CALL_OW 321
38916: PUSH
38917: LD_INT 2
38919: EQUAL
38920: AND
38921: IFFALSE 38938
// bpoints := bpoints * 1.2 ;
38923: LD_ADDR_VAR 0 10
38927: PUSH
38928: LD_VAR 0 10
38932: PUSH
38933: LD_REAL  1.20000000000000E+0000
38936: MUL
38937: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38938: LD_VAR 0 6
38942: PPUSH
38943: CALL_OW 257
38947: PUSH
38948: LD_INT 5
38950: PUSH
38951: LD_INT 7
38953: PUSH
38954: LD_INT 9
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: IN
38962: PUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_INT 52
38970: PPUSH
38971: CALL_OW 321
38975: PUSH
38976: LD_INT 2
38978: EQUAL
38979: AND
38980: IFFALSE 38997
// bpoints := bpoints * 1.5 ;
38982: LD_ADDR_VAR 0 10
38986: PUSH
38987: LD_VAR 0 10
38991: PUSH
38992: LD_REAL  1.50000000000000E+0000
38995: MUL
38996: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38997: LD_VAR 0 1
39001: PPUSH
39002: LD_INT 66
39004: PPUSH
39005: CALL_OW 321
39009: PUSH
39010: LD_INT 2
39012: EQUAL
39013: IFFALSE 39030
// bpoints := bpoints * 1.1 ;
39015: LD_ADDR_VAR 0 10
39019: PUSH
39020: LD_VAR 0 10
39024: PUSH
39025: LD_REAL  1.10000000000000E+0000
39028: MUL
39029: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39030: LD_ADDR_VAR 0 10
39034: PUSH
39035: LD_VAR 0 10
39039: PUSH
39040: LD_VAR 0 6
39044: PPUSH
39045: LD_INT 1
39047: PPUSH
39048: CALL_OW 259
39052: PUSH
39053: LD_REAL  1.15000000000000E+0000
39056: MUL
39057: MUL
39058: ST_TO_ADDR
// end ; unit_vehicle :
39059: GO 39889
39061: LD_INT 2
39063: DOUBLE
39064: EQUAL
39065: IFTRUE 39069
39067: GO 39877
39069: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39070: LD_VAR 0 6
39074: PPUSH
39075: CALL_OW 264
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 42
39085: PUSH
39086: LD_INT 24
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: IN
39094: IFFALSE 39115
// points := [ 25 , 5 , 3 ] ;
39096: LD_ADDR_VAR 0 9
39100: PUSH
39101: LD_INT 25
39103: PUSH
39104: LD_INT 5
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39115: LD_VAR 0 6
39119: PPUSH
39120: CALL_OW 264
39124: PUSH
39125: LD_INT 4
39127: PUSH
39128: LD_INT 43
39130: PUSH
39131: LD_INT 25
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: IN
39139: IFFALSE 39160
// points := [ 40 , 15 , 5 ] ;
39141: LD_ADDR_VAR 0 9
39145: PUSH
39146: LD_INT 40
39148: PUSH
39149: LD_INT 15
39151: PUSH
39152: LD_INT 5
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39160: LD_VAR 0 6
39164: PPUSH
39165: CALL_OW 264
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: LD_INT 23
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: IN
39180: IFFALSE 39201
// points := [ 7 , 25 , 8 ] ;
39182: LD_ADDR_VAR 0 9
39186: PUSH
39187: LD_INT 7
39189: PUSH
39190: LD_INT 25
39192: PUSH
39193: LD_INT 8
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39201: LD_VAR 0 6
39205: PPUSH
39206: CALL_OW 264
39210: PUSH
39211: LD_INT 5
39213: PUSH
39214: LD_INT 27
39216: PUSH
39217: LD_INT 44
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: IN
39225: IFFALSE 39246
// points := [ 14 , 50 , 16 ] ;
39227: LD_ADDR_VAR 0 9
39231: PUSH
39232: LD_INT 14
39234: PUSH
39235: LD_INT 50
39237: PUSH
39238: LD_INT 16
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39246: LD_VAR 0 6
39250: PPUSH
39251: CALL_OW 264
39255: PUSH
39256: LD_INT 6
39258: PUSH
39259: LD_INT 46
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: IN
39266: IFFALSE 39287
// points := [ 32 , 120 , 70 ] ;
39268: LD_ADDR_VAR 0 9
39272: PUSH
39273: LD_INT 32
39275: PUSH
39276: LD_INT 120
39278: PUSH
39279: LD_INT 70
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39287: LD_VAR 0 6
39291: PPUSH
39292: CALL_OW 264
39296: PUSH
39297: LD_INT 7
39299: PUSH
39300: LD_INT 28
39302: PUSH
39303: LD_INT 45
39305: PUSH
39306: LD_EXP 97
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: IN
39317: IFFALSE 39338
// points := [ 35 , 20 , 45 ] ;
39319: LD_ADDR_VAR 0 9
39323: PUSH
39324: LD_INT 35
39326: PUSH
39327: LD_INT 20
39329: PUSH
39330: LD_INT 45
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39338: LD_VAR 0 6
39342: PPUSH
39343: CALL_OW 264
39347: PUSH
39348: LD_INT 47
39350: PUSH
39351: EMPTY
39352: LIST
39353: IN
39354: IFFALSE 39375
// points := [ 67 , 45 , 75 ] ;
39356: LD_ADDR_VAR 0 9
39360: PUSH
39361: LD_INT 67
39363: PUSH
39364: LD_INT 45
39366: PUSH
39367: LD_INT 75
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39375: LD_VAR 0 6
39379: PPUSH
39380: CALL_OW 264
39384: PUSH
39385: LD_INT 26
39387: PUSH
39388: EMPTY
39389: LIST
39390: IN
39391: IFFALSE 39412
// points := [ 120 , 30 , 80 ] ;
39393: LD_ADDR_VAR 0 9
39397: PUSH
39398: LD_INT 120
39400: PUSH
39401: LD_INT 30
39403: PUSH
39404: LD_INT 80
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 264
39421: PUSH
39422: LD_INT 22
39424: PUSH
39425: EMPTY
39426: LIST
39427: IN
39428: IFFALSE 39449
// points := [ 40 , 1 , 1 ] ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_INT 40
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39449: LD_VAR 0 6
39453: PPUSH
39454: CALL_OW 264
39458: PUSH
39459: LD_INT 29
39461: PUSH
39462: EMPTY
39463: LIST
39464: IN
39465: IFFALSE 39486
// points := [ 70 , 200 , 400 ] ;
39467: LD_ADDR_VAR 0 9
39471: PUSH
39472: LD_INT 70
39474: PUSH
39475: LD_INT 200
39477: PUSH
39478: LD_INT 400
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39486: LD_VAR 0 6
39490: PPUSH
39491: CALL_OW 264
39495: PUSH
39496: LD_INT 14
39498: PUSH
39499: LD_INT 53
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: IN
39506: IFFALSE 39527
// points := [ 40 , 10 , 20 ] ;
39508: LD_ADDR_VAR 0 9
39512: PUSH
39513: LD_INT 40
39515: PUSH
39516: LD_INT 10
39518: PUSH
39519: LD_INT 20
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39527: LD_VAR 0 6
39531: PPUSH
39532: CALL_OW 264
39536: PUSH
39537: LD_INT 9
39539: PUSH
39540: EMPTY
39541: LIST
39542: IN
39543: IFFALSE 39564
// points := [ 5 , 70 , 20 ] ;
39545: LD_ADDR_VAR 0 9
39549: PUSH
39550: LD_INT 5
39552: PUSH
39553: LD_INT 70
39555: PUSH
39556: LD_INT 20
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39564: LD_VAR 0 6
39568: PPUSH
39569: CALL_OW 264
39573: PUSH
39574: LD_INT 10
39576: PUSH
39577: EMPTY
39578: LIST
39579: IN
39580: IFFALSE 39601
// points := [ 35 , 110 , 70 ] ;
39582: LD_ADDR_VAR 0 9
39586: PUSH
39587: LD_INT 35
39589: PUSH
39590: LD_INT 110
39592: PUSH
39593: LD_INT 70
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39601: LD_VAR 0 6
39605: PPUSH
39606: CALL_OW 265
39610: PUSH
39611: LD_INT 25
39613: EQUAL
39614: IFFALSE 39635
// points := [ 80 , 65 , 100 ] ;
39616: LD_ADDR_VAR 0 9
39620: PUSH
39621: LD_INT 80
39623: PUSH
39624: LD_INT 65
39626: PUSH
39627: LD_INT 100
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39635: LD_VAR 0 6
39639: PPUSH
39640: CALL_OW 263
39644: PUSH
39645: LD_INT 1
39647: EQUAL
39648: IFFALSE 39683
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_VAR 0 10
39659: PUSH
39660: LD_VAR 0 6
39664: PPUSH
39665: CALL_OW 311
39669: PPUSH
39670: LD_INT 3
39672: PPUSH
39673: CALL_OW 259
39677: PUSH
39678: LD_INT 4
39680: MUL
39681: MUL
39682: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39683: LD_VAR 0 6
39687: PPUSH
39688: CALL_OW 263
39692: PUSH
39693: LD_INT 2
39695: EQUAL
39696: IFFALSE 39747
// begin j := IsControledBy ( i ) ;
39698: LD_ADDR_VAR 0 7
39702: PUSH
39703: LD_VAR 0 6
39707: PPUSH
39708: CALL_OW 312
39712: ST_TO_ADDR
// if j then
39713: LD_VAR 0 7
39717: IFFALSE 39747
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39719: LD_ADDR_VAR 0 10
39723: PUSH
39724: LD_VAR 0 10
39728: PUSH
39729: LD_VAR 0 7
39733: PPUSH
39734: LD_INT 3
39736: PPUSH
39737: CALL_OW 259
39741: PUSH
39742: LD_INT 3
39744: MUL
39745: MUL
39746: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39747: LD_VAR 0 6
39751: PPUSH
39752: CALL_OW 264
39756: PUSH
39757: LD_INT 5
39759: PUSH
39760: LD_INT 6
39762: PUSH
39763: LD_INT 46
39765: PUSH
39766: LD_INT 44
39768: PUSH
39769: LD_INT 47
39771: PUSH
39772: LD_INT 45
39774: PUSH
39775: LD_INT 28
39777: PUSH
39778: LD_INT 7
39780: PUSH
39781: LD_INT 27
39783: PUSH
39784: LD_INT 29
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: IN
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_INT 52
39807: PPUSH
39808: CALL_OW 321
39812: PUSH
39813: LD_INT 2
39815: EQUAL
39816: AND
39817: IFFALSE 39834
// bpoints := bpoints * 1.2 ;
39819: LD_ADDR_VAR 0 10
39823: PUSH
39824: LD_VAR 0 10
39828: PUSH
39829: LD_REAL  1.20000000000000E+0000
39832: MUL
39833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39834: LD_VAR 0 6
39838: PPUSH
39839: CALL_OW 264
39843: PUSH
39844: LD_INT 6
39846: PUSH
39847: LD_INT 46
39849: PUSH
39850: LD_INT 47
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: IN
39858: IFFALSE 39875
// bpoints := bpoints * 1.2 ;
39860: LD_ADDR_VAR 0 10
39864: PUSH
39865: LD_VAR 0 10
39869: PUSH
39870: LD_REAL  1.20000000000000E+0000
39873: MUL
39874: ST_TO_ADDR
// end ; unit_building :
39875: GO 39889
39877: LD_INT 3
39879: DOUBLE
39880: EQUAL
39881: IFTRUE 39885
39883: GO 39888
39885: POP
// ; end ;
39886: GO 39889
39888: POP
// for j = 1 to 3 do
39889: LD_ADDR_VAR 0 7
39893: PUSH
39894: DOUBLE
39895: LD_INT 1
39897: DEC
39898: ST_TO_ADDR
39899: LD_INT 3
39901: PUSH
39902: FOR_TO
39903: IFFALSE 39956
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_VAR 0 5
39914: PPUSH
39915: LD_VAR 0 7
39919: PPUSH
39920: LD_VAR 0 5
39924: PUSH
39925: LD_VAR 0 7
39929: ARRAY
39930: PUSH
39931: LD_VAR 0 9
39935: PUSH
39936: LD_VAR 0 7
39940: ARRAY
39941: PUSH
39942: LD_VAR 0 10
39946: MUL
39947: PLUS
39948: PPUSH
39949: CALL_OW 1
39953: ST_TO_ADDR
39954: GO 39902
39956: POP
39957: POP
// end ;
39958: GO 38435
39960: POP
39961: POP
// result := Replace ( result , 4 , tmp ) ;
39962: LD_ADDR_VAR 0 5
39966: PUSH
39967: LD_VAR 0 5
39971: PPUSH
39972: LD_INT 4
39974: PPUSH
39975: LD_VAR 0 8
39979: PPUSH
39980: CALL_OW 1
39984: ST_TO_ADDR
// end ;
39985: LD_VAR 0 5
39989: RET
// export function DangerAtRange ( unit , range ) ; begin
39990: LD_INT 0
39992: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 255
40007: PPUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: CALL_OW 250
40017: PPUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 251
40027: PPUSH
40028: LD_VAR 0 2
40032: PPUSH
40033: CALL 38287 0 4
40037: ST_TO_ADDR
// end ;
40038: LD_VAR 0 3
40042: RET
// export function DangerInArea ( side , area ) ; begin
40043: LD_INT 0
40045: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40046: LD_ADDR_VAR 0 3
40050: PUSH
40051: LD_VAR 0 2
40055: PPUSH
40056: LD_INT 81
40058: PUSH
40059: LD_VAR 0 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 70
40072: ST_TO_ADDR
// end ;
40073: LD_VAR 0 3
40077: RET
// export function IsExtension ( b ) ; begin
40078: LD_INT 0
40080: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40081: LD_ADDR_VAR 0 2
40085: PUSH
40086: LD_VAR 0 1
40090: PUSH
40091: LD_INT 23
40093: PUSH
40094: LD_INT 20
40096: PUSH
40097: LD_INT 22
40099: PUSH
40100: LD_INT 17
40102: PUSH
40103: LD_INT 24
40105: PUSH
40106: LD_INT 21
40108: PUSH
40109: LD_INT 19
40111: PUSH
40112: LD_INT 16
40114: PUSH
40115: LD_INT 25
40117: PUSH
40118: LD_INT 18
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: IN
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 2
40138: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
// result := [ ] ;
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: EMPTY
40150: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40151: LD_ADDR_VAR 0 5
40155: PUSH
40156: LD_VAR 0 2
40160: PPUSH
40161: LD_INT 21
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PPUSH
40171: CALL_OW 70
40175: ST_TO_ADDR
// if not tmp then
40176: LD_VAR 0 5
40180: NOT
40181: IFFALSE 40185
// exit ;
40183: GO 40249
// if checkLink then
40185: LD_VAR 0 3
40189: IFFALSE 40239
// begin for i in tmp do
40191: LD_ADDR_VAR 0 6
40195: PUSH
40196: LD_VAR 0 5
40200: PUSH
40201: FOR_IN
40202: IFFALSE 40237
// if GetBase ( i ) <> base then
40204: LD_VAR 0 6
40208: PPUSH
40209: CALL_OW 274
40213: PUSH
40214: LD_VAR 0 1
40218: NONEQUAL
40219: IFFALSE 40235
// ComLinkToBase ( base , i ) ;
40221: LD_VAR 0 1
40225: PPUSH
40226: LD_VAR 0 6
40230: PPUSH
40231: CALL_OW 169
40235: GO 40201
40237: POP
40238: POP
// end ; result := tmp ;
40239: LD_ADDR_VAR 0 4
40243: PUSH
40244: LD_VAR 0 5
40248: ST_TO_ADDR
// end ;
40249: LD_VAR 0 4
40253: RET
// export function ComComplete ( units , b ) ; var i ; begin
40254: LD_INT 0
40256: PPUSH
40257: PPUSH
// if not units then
40258: LD_VAR 0 1
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40357
// for i in units do
40267: LD_ADDR_VAR 0 4
40271: PUSH
40272: LD_VAR 0 1
40276: PUSH
40277: FOR_IN
40278: IFFALSE 40355
// if BuildingStatus ( b ) = bs_build then
40280: LD_VAR 0 2
40284: PPUSH
40285: CALL_OW 461
40289: PUSH
40290: LD_INT 1
40292: EQUAL
40293: IFFALSE 40353
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40295: LD_VAR 0 4
40299: PPUSH
40300: LD_STRING h
40302: PUSH
40303: LD_VAR 0 2
40307: PPUSH
40308: CALL_OW 250
40312: PUSH
40313: LD_VAR 0 2
40317: PPUSH
40318: CALL_OW 251
40322: PUSH
40323: LD_VAR 0 2
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: PPUSH
40349: CALL_OW 446
40353: GO 40277
40355: POP
40356: POP
// end ;
40357: LD_VAR 0 3
40361: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40362: LD_INT 0
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40370: LD_VAR 0 1
40374: NOT
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 263
40385: PUSH
40386: LD_INT 2
40388: NONEQUAL
40389: OR
40390: IFFALSE 40394
// exit ;
40392: GO 40710
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40394: LD_ADDR_VAR 0 6
40398: PUSH
40399: LD_INT 22
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 255
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 30
40421: PUSH
40422: LD_INT 36
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 34
40431: PUSH
40432: LD_INT 31
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PPUSH
40448: CALL_OW 69
40452: ST_TO_ADDR
// if not tmp then
40453: LD_VAR 0 6
40457: NOT
40458: IFFALSE 40462
// exit ;
40460: GO 40710
// result := [ ] ;
40462: LD_ADDR_VAR 0 2
40466: PUSH
40467: EMPTY
40468: ST_TO_ADDR
// for i in tmp do
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_VAR 0 6
40478: PUSH
40479: FOR_IN
40480: IFFALSE 40551
// begin t := UnitsInside ( i ) ;
40482: LD_ADDR_VAR 0 4
40486: PUSH
40487: LD_VAR 0 3
40491: PPUSH
40492: CALL_OW 313
40496: ST_TO_ADDR
// if t then
40497: LD_VAR 0 4
40501: IFFALSE 40549
// for j in t do
40503: LD_ADDR_VAR 0 7
40507: PUSH
40508: LD_VAR 0 4
40512: PUSH
40513: FOR_IN
40514: IFFALSE 40547
// result := Replace ( result , result + 1 , j ) ;
40516: LD_ADDR_VAR 0 2
40520: PUSH
40521: LD_VAR 0 2
40525: PPUSH
40526: LD_VAR 0 2
40530: PUSH
40531: LD_INT 1
40533: PLUS
40534: PPUSH
40535: LD_VAR 0 7
40539: PPUSH
40540: CALL_OW 1
40544: ST_TO_ADDR
40545: GO 40513
40547: POP
40548: POP
// end ;
40549: GO 40479
40551: POP
40552: POP
// if not result then
40553: LD_VAR 0 2
40557: NOT
40558: IFFALSE 40562
// exit ;
40560: GO 40710
// mech := result [ 1 ] ;
40562: LD_ADDR_VAR 0 5
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_INT 1
40574: ARRAY
40575: ST_TO_ADDR
// if result > 1 then
40576: LD_VAR 0 2
40580: PUSH
40581: LD_INT 1
40583: GREATER
40584: IFFALSE 40696
// begin for i = 2 to result do
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: DOUBLE
40592: LD_INT 2
40594: DEC
40595: ST_TO_ADDR
40596: LD_VAR 0 2
40600: PUSH
40601: FOR_TO
40602: IFFALSE 40694
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40604: LD_ADDR_VAR 0 4
40608: PUSH
40609: LD_VAR 0 2
40613: PUSH
40614: LD_VAR 0 3
40618: ARRAY
40619: PPUSH
40620: LD_INT 3
40622: PPUSH
40623: CALL_OW 259
40627: PUSH
40628: LD_VAR 0 2
40632: PUSH
40633: LD_VAR 0 3
40637: ARRAY
40638: PPUSH
40639: CALL_OW 432
40643: MINUS
40644: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40645: LD_VAR 0 4
40649: PUSH
40650: LD_VAR 0 5
40654: PPUSH
40655: LD_INT 3
40657: PPUSH
40658: CALL_OW 259
40662: PUSH
40663: LD_VAR 0 5
40667: PPUSH
40668: CALL_OW 432
40672: MINUS
40673: GREATEREQUAL
40674: IFFALSE 40692
// mech := result [ i ] ;
40676: LD_ADDR_VAR 0 5
40680: PUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 3
40690: ARRAY
40691: ST_TO_ADDR
// end ;
40692: GO 40601
40694: POP
40695: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40696: LD_VAR 0 1
40700: PPUSH
40701: LD_VAR 0 5
40705: PPUSH
40706: CALL_OW 135
// end ;
40710: LD_VAR 0 2
40714: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40715: LD_INT 0
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
// result := [ ] ;
40730: LD_ADDR_VAR 0 7
40734: PUSH
40735: EMPTY
40736: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40737: LD_VAR 0 1
40741: PPUSH
40742: CALL_OW 266
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: IN
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 42396
// if name then
40762: LD_VAR 0 3
40766: IFFALSE 40782
// SetBName ( base_dep , name ) ;
40768: LD_VAR 0 1
40772: PPUSH
40773: LD_VAR 0 3
40777: PPUSH
40778: CALL_OW 500
// base := GetBase ( base_dep ) ;
40782: LD_ADDR_VAR 0 15
40786: PUSH
40787: LD_VAR 0 1
40791: PPUSH
40792: CALL_OW 274
40796: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40797: LD_ADDR_VAR 0 16
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: CALL_OW 255
40811: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40812: LD_ADDR_VAR 0 17
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 248
40826: ST_TO_ADDR
// if sources then
40827: LD_VAR 0 5
40831: IFFALSE 40878
// for i = 1 to 3 do
40833: LD_ADDR_VAR 0 8
40837: PUSH
40838: DOUBLE
40839: LD_INT 1
40841: DEC
40842: ST_TO_ADDR
40843: LD_INT 3
40845: PUSH
40846: FOR_TO
40847: IFFALSE 40876
// AddResourceType ( base , i , sources [ i ] ) ;
40849: LD_VAR 0 15
40853: PPUSH
40854: LD_VAR 0 8
40858: PPUSH
40859: LD_VAR 0 5
40863: PUSH
40864: LD_VAR 0 8
40868: ARRAY
40869: PPUSH
40870: CALL_OW 276
40874: GO 40846
40876: POP
40877: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40878: LD_ADDR_VAR 0 18
40882: PUSH
40883: LD_VAR 0 15
40887: PPUSH
40888: LD_VAR 0 2
40892: PPUSH
40893: LD_INT 1
40895: PPUSH
40896: CALL 40139 0 3
40900: ST_TO_ADDR
// InitHc ;
40901: CALL_OW 19
// InitUc ;
40905: CALL_OW 18
// uc_side := side ;
40909: LD_ADDR_OWVAR 20
40913: PUSH
40914: LD_VAR 0 16
40918: ST_TO_ADDR
// uc_nation := nation ;
40919: LD_ADDR_OWVAR 21
40923: PUSH
40924: LD_VAR 0 17
40928: ST_TO_ADDR
// if buildings then
40929: LD_VAR 0 18
40933: IFFALSE 42255
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40935: LD_ADDR_VAR 0 19
40939: PUSH
40940: LD_VAR 0 18
40944: PPUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 30
40950: PUSH
40951: LD_INT 29
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 30
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: PPUSH
40973: CALL_OW 72
40977: ST_TO_ADDR
// if tmp then
40978: LD_VAR 0 19
40982: IFFALSE 41030
// for i in tmp do
40984: LD_ADDR_VAR 0 8
40988: PUSH
40989: LD_VAR 0 19
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41028
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40997: LD_VAR 0 8
41001: PPUSH
41002: CALL_OW 250
41006: PPUSH
41007: LD_VAR 0 8
41011: PPUSH
41012: CALL_OW 251
41016: PPUSH
41017: LD_VAR 0 16
41021: PPUSH
41022: CALL_OW 441
41026: GO 40994
41028: POP
41029: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41030: LD_VAR 0 18
41034: PPUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 30
41040: PUSH
41041: LD_INT 32
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 30
41050: PUSH
41051: LD_INT 33
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: PPUSH
41063: CALL_OW 72
41067: IFFALSE 41155
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41069: LD_ADDR_VAR 0 8
41073: PUSH
41074: LD_VAR 0 18
41078: PPUSH
41079: LD_INT 2
41081: PUSH
41082: LD_INT 30
41084: PUSH
41085: LD_INT 32
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 30
41094: PUSH
41095: LD_INT 33
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: PPUSH
41107: CALL_OW 72
41111: PUSH
41112: FOR_IN
41113: IFFALSE 41153
// begin if not GetBWeapon ( i ) then
41115: LD_VAR 0 8
41119: PPUSH
41120: CALL_OW 269
41124: NOT
41125: IFFALSE 41151
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41127: LD_VAR 0 8
41131: PPUSH
41132: LD_VAR 0 8
41136: PPUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: CALL 42401 0 2
41146: PPUSH
41147: CALL_OW 431
// end ;
41151: GO 41112
41153: POP
41154: POP
// end ; for i = 1 to personel do
41155: LD_ADDR_VAR 0 8
41159: PUSH
41160: DOUBLE
41161: LD_INT 1
41163: DEC
41164: ST_TO_ADDR
41165: LD_VAR 0 6
41169: PUSH
41170: FOR_TO
41171: IFFALSE 42235
// begin if i > 4 then
41173: LD_VAR 0 8
41177: PUSH
41178: LD_INT 4
41180: GREATER
41181: IFFALSE 41185
// break ;
41183: GO 42235
// case i of 1 :
41185: LD_VAR 0 8
41189: PUSH
41190: LD_INT 1
41192: DOUBLE
41193: EQUAL
41194: IFTRUE 41198
41196: GO 41278
41198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41199: LD_ADDR_VAR 0 12
41203: PUSH
41204: LD_VAR 0 18
41208: PPUSH
41209: LD_INT 22
41211: PUSH
41212: LD_VAR 0 16
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 58
41223: PUSH
41224: EMPTY
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 30
41232: PUSH
41233: LD_INT 32
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 30
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 30
41252: PUSH
41253: LD_INT 5
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: PPUSH
41271: CALL_OW 72
41275: ST_TO_ADDR
41276: GO 41500
41278: LD_INT 2
41280: DOUBLE
41281: EQUAL
41282: IFTRUE 41286
41284: GO 41348
41286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41287: LD_ADDR_VAR 0 12
41291: PUSH
41292: LD_VAR 0 18
41296: PPUSH
41297: LD_INT 22
41299: PUSH
41300: LD_VAR 0 16
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 30
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 30
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 72
41345: ST_TO_ADDR
41346: GO 41500
41348: LD_INT 3
41350: DOUBLE
41351: EQUAL
41352: IFTRUE 41356
41354: GO 41418
41356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41357: LD_ADDR_VAR 0 12
41361: PUSH
41362: LD_VAR 0 18
41366: PPUSH
41367: LD_INT 22
41369: PUSH
41370: LD_VAR 0 16
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 30
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 30
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PPUSH
41411: CALL_OW 72
41415: ST_TO_ADDR
41416: GO 41500
41418: LD_INT 4
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 41499
41426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41427: LD_ADDR_VAR 0 12
41431: PUSH
41432: LD_VAR 0 18
41436: PPUSH
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 16
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 30
41454: PUSH
41455: LD_INT 6
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 30
41464: PUSH
41465: LD_INT 7
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 30
41474: PUSH
41475: LD_INT 8
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PPUSH
41492: CALL_OW 72
41496: ST_TO_ADDR
41497: GO 41500
41499: POP
// if i = 1 then
41500: LD_VAR 0 8
41504: PUSH
41505: LD_INT 1
41507: EQUAL
41508: IFFALSE 41619
// begin tmp := [ ] ;
41510: LD_ADDR_VAR 0 19
41514: PUSH
41515: EMPTY
41516: ST_TO_ADDR
// for j in f do
41517: LD_ADDR_VAR 0 9
41521: PUSH
41522: LD_VAR 0 12
41526: PUSH
41527: FOR_IN
41528: IFFALSE 41601
// if GetBType ( j ) = b_bunker then
41530: LD_VAR 0 9
41534: PPUSH
41535: CALL_OW 266
41539: PUSH
41540: LD_INT 32
41542: EQUAL
41543: IFFALSE 41570
// tmp := Insert ( tmp , 1 , j ) else
41545: LD_ADDR_VAR 0 19
41549: PUSH
41550: LD_VAR 0 19
41554: PPUSH
41555: LD_INT 1
41557: PPUSH
41558: LD_VAR 0 9
41562: PPUSH
41563: CALL_OW 2
41567: ST_TO_ADDR
41568: GO 41599
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41570: LD_ADDR_VAR 0 19
41574: PUSH
41575: LD_VAR 0 19
41579: PPUSH
41580: LD_VAR 0 19
41584: PUSH
41585: LD_INT 1
41587: PLUS
41588: PPUSH
41589: LD_VAR 0 9
41593: PPUSH
41594: CALL_OW 2
41598: ST_TO_ADDR
41599: GO 41527
41601: POP
41602: POP
// if tmp then
41603: LD_VAR 0 19
41607: IFFALSE 41619
// f := tmp ;
41609: LD_ADDR_VAR 0 12
41613: PUSH
41614: LD_VAR 0 19
41618: ST_TO_ADDR
// end ; x := personel [ i ] ;
41619: LD_ADDR_VAR 0 13
41623: PUSH
41624: LD_VAR 0 6
41628: PUSH
41629: LD_VAR 0 8
41633: ARRAY
41634: ST_TO_ADDR
// if x = - 1 then
41635: LD_VAR 0 13
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: EQUAL
41644: IFFALSE 41853
// begin for j in f do
41646: LD_ADDR_VAR 0 9
41650: PUSH
41651: LD_VAR 0 12
41655: PUSH
41656: FOR_IN
41657: IFFALSE 41849
// repeat InitHc ;
41659: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41663: LD_VAR 0 9
41667: PPUSH
41668: CALL_OW 266
41672: PUSH
41673: LD_INT 5
41675: EQUAL
41676: IFFALSE 41746
// begin if UnitsInside ( j ) < 3 then
41678: LD_VAR 0 9
41682: PPUSH
41683: CALL_OW 313
41687: PUSH
41688: LD_INT 3
41690: LESS
41691: IFFALSE 41727
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41693: LD_INT 0
41695: PPUSH
41696: LD_INT 5
41698: PUSH
41699: LD_INT 8
41701: PUSH
41702: LD_INT 9
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: PUSH
41710: LD_VAR 0 17
41714: ARRAY
41715: PPUSH
41716: LD_VAR 0 4
41720: PPUSH
41721: CALL_OW 380
41725: GO 41744
// PrepareHuman ( false , i , skill ) ;
41727: LD_INT 0
41729: PPUSH
41730: LD_VAR 0 8
41734: PPUSH
41735: LD_VAR 0 4
41739: PPUSH
41740: CALL_OW 380
// end else
41744: GO 41763
// PrepareHuman ( false , i , skill ) ;
41746: LD_INT 0
41748: PPUSH
41749: LD_VAR 0 8
41753: PPUSH
41754: LD_VAR 0 4
41758: PPUSH
41759: CALL_OW 380
// un := CreateHuman ;
41763: LD_ADDR_VAR 0 14
41767: PUSH
41768: CALL_OW 44
41772: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41773: LD_ADDR_VAR 0 7
41777: PUSH
41778: LD_VAR 0 7
41782: PPUSH
41783: LD_INT 1
41785: PPUSH
41786: LD_VAR 0 14
41790: PPUSH
41791: CALL_OW 2
41795: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41796: LD_VAR 0 14
41800: PPUSH
41801: LD_VAR 0 9
41805: PPUSH
41806: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41810: LD_VAR 0 9
41814: PPUSH
41815: CALL_OW 313
41819: PUSH
41820: LD_INT 6
41822: EQUAL
41823: PUSH
41824: LD_VAR 0 9
41828: PPUSH
41829: CALL_OW 266
41833: PUSH
41834: LD_INT 32
41836: PUSH
41837: LD_INT 31
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: IN
41844: OR
41845: IFFALSE 41659
41847: GO 41656
41849: POP
41850: POP
// end else
41851: GO 42233
// for j = 1 to x do
41853: LD_ADDR_VAR 0 9
41857: PUSH
41858: DOUBLE
41859: LD_INT 1
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 13
41867: PUSH
41868: FOR_TO
41869: IFFALSE 42231
// begin InitHc ;
41871: CALL_OW 19
// if not f then
41875: LD_VAR 0 12
41879: NOT
41880: IFFALSE 41969
// begin PrepareHuman ( false , i , skill ) ;
41882: LD_INT 0
41884: PPUSH
41885: LD_VAR 0 8
41889: PPUSH
41890: LD_VAR 0 4
41894: PPUSH
41895: CALL_OW 380
// un := CreateHuman ;
41899: LD_ADDR_VAR 0 14
41903: PUSH
41904: CALL_OW 44
41908: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41909: LD_ADDR_VAR 0 7
41913: PUSH
41914: LD_VAR 0 7
41918: PPUSH
41919: LD_INT 1
41921: PPUSH
41922: LD_VAR 0 14
41926: PPUSH
41927: CALL_OW 2
41931: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41932: LD_VAR 0 14
41936: PPUSH
41937: LD_VAR 0 1
41941: PPUSH
41942: CALL_OW 250
41946: PPUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 251
41956: PPUSH
41957: LD_INT 10
41959: PPUSH
41960: LD_INT 0
41962: PPUSH
41963: CALL_OW 50
// continue ;
41967: GO 41868
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41969: LD_VAR 0 12
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PPUSH
41978: CALL_OW 313
41982: PUSH
41983: LD_VAR 0 12
41987: PUSH
41988: LD_INT 1
41990: ARRAY
41991: PPUSH
41992: CALL_OW 266
41996: PUSH
41997: LD_INT 32
41999: PUSH
42000: LD_INT 31
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: IN
42007: AND
42008: PUSH
42009: LD_VAR 0 12
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: PPUSH
42018: CALL_OW 313
42022: PUSH
42023: LD_INT 6
42025: EQUAL
42026: OR
42027: IFFALSE 42047
// f := Delete ( f , 1 ) ;
42029: LD_ADDR_VAR 0 12
42033: PUSH
42034: LD_VAR 0 12
42038: PPUSH
42039: LD_INT 1
42041: PPUSH
42042: CALL_OW 3
42046: ST_TO_ADDR
// if not f then
42047: LD_VAR 0 12
42051: NOT
42052: IFFALSE 42070
// begin x := x + 2 ;
42054: LD_ADDR_VAR 0 13
42058: PUSH
42059: LD_VAR 0 13
42063: PUSH
42064: LD_INT 2
42066: PLUS
42067: ST_TO_ADDR
// continue ;
42068: GO 41868
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42070: LD_VAR 0 12
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: PPUSH
42079: CALL_OW 266
42083: PUSH
42084: LD_INT 5
42086: EQUAL
42087: IFFALSE 42161
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42089: LD_VAR 0 12
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: PPUSH
42098: CALL_OW 313
42102: PUSH
42103: LD_INT 3
42105: LESS
42106: IFFALSE 42142
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42108: LD_INT 0
42110: PPUSH
42111: LD_INT 5
42113: PUSH
42114: LD_INT 8
42116: PUSH
42117: LD_INT 9
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: PUSH
42125: LD_VAR 0 17
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 4
42135: PPUSH
42136: CALL_OW 380
42140: GO 42159
// PrepareHuman ( false , i , skill ) ;
42142: LD_INT 0
42144: PPUSH
42145: LD_VAR 0 8
42149: PPUSH
42150: LD_VAR 0 4
42154: PPUSH
42155: CALL_OW 380
// end else
42159: GO 42178
// PrepareHuman ( false , i , skill ) ;
42161: LD_INT 0
42163: PPUSH
42164: LD_VAR 0 8
42168: PPUSH
42169: LD_VAR 0 4
42173: PPUSH
42174: CALL_OW 380
// un := CreateHuman ;
42178: LD_ADDR_VAR 0 14
42182: PUSH
42183: CALL_OW 44
42187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42188: LD_ADDR_VAR 0 7
42192: PUSH
42193: LD_VAR 0 7
42197: PPUSH
42198: LD_INT 1
42200: PPUSH
42201: LD_VAR 0 14
42205: PPUSH
42206: CALL_OW 2
42210: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42211: LD_VAR 0 14
42215: PPUSH
42216: LD_VAR 0 12
42220: PUSH
42221: LD_INT 1
42223: ARRAY
42224: PPUSH
42225: CALL_OW 52
// end ;
42229: GO 41868
42231: POP
42232: POP
// end ;
42233: GO 41170
42235: POP
42236: POP
// result := result ^ buildings ;
42237: LD_ADDR_VAR 0 7
42241: PUSH
42242: LD_VAR 0 7
42246: PUSH
42247: LD_VAR 0 18
42251: ADD
42252: ST_TO_ADDR
// end else
42253: GO 42396
// begin for i = 1 to personel do
42255: LD_ADDR_VAR 0 8
42259: PUSH
42260: DOUBLE
42261: LD_INT 1
42263: DEC
42264: ST_TO_ADDR
42265: LD_VAR 0 6
42269: PUSH
42270: FOR_TO
42271: IFFALSE 42394
// begin if i > 4 then
42273: LD_VAR 0 8
42277: PUSH
42278: LD_INT 4
42280: GREATER
42281: IFFALSE 42285
// break ;
42283: GO 42394
// x := personel [ i ] ;
42285: LD_ADDR_VAR 0 13
42289: PUSH
42290: LD_VAR 0 6
42294: PUSH
42295: LD_VAR 0 8
42299: ARRAY
42300: ST_TO_ADDR
// if x = - 1 then
42301: LD_VAR 0 13
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: EQUAL
42310: IFFALSE 42314
// continue ;
42312: GO 42270
// PrepareHuman ( false , i , skill ) ;
42314: LD_INT 0
42316: PPUSH
42317: LD_VAR 0 8
42321: PPUSH
42322: LD_VAR 0 4
42326: PPUSH
42327: CALL_OW 380
// un := CreateHuman ;
42331: LD_ADDR_VAR 0 14
42335: PUSH
42336: CALL_OW 44
42340: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42341: LD_VAR 0 14
42345: PPUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: CALL_OW 250
42355: PPUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 251
42365: PPUSH
42366: LD_INT 10
42368: PPUSH
42369: LD_INT 0
42371: PPUSH
42372: CALL_OW 50
// result := result ^ un ;
42376: LD_ADDR_VAR 0 7
42380: PUSH
42381: LD_VAR 0 7
42385: PUSH
42386: LD_VAR 0 14
42390: ADD
42391: ST_TO_ADDR
// end ;
42392: GO 42270
42394: POP
42395: POP
// end ; end ;
42396: LD_VAR 0 7
42400: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42401: LD_INT 0
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
// result := false ;
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_INT 0
42426: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42427: LD_VAR 0 1
42431: NOT
42432: PUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 266
42442: PUSH
42443: LD_INT 32
42445: PUSH
42446: LD_INT 33
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: IN
42453: NOT
42454: OR
42455: IFFALSE 42459
// exit ;
42457: GO 43568
// nat := GetNation ( tower ) ;
42459: LD_ADDR_VAR 0 12
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 248
42473: ST_TO_ADDR
// side := GetSide ( tower ) ;
42474: LD_ADDR_VAR 0 16
42478: PUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 255
42488: ST_TO_ADDR
// x := GetX ( tower ) ;
42489: LD_ADDR_VAR 0 10
42493: PUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: CALL_OW 250
42503: ST_TO_ADDR
// y := GetY ( tower ) ;
42504: LD_ADDR_VAR 0 11
42508: PUSH
42509: LD_VAR 0 1
42513: PPUSH
42514: CALL_OW 251
42518: ST_TO_ADDR
// if not x or not y then
42519: LD_VAR 0 10
42523: NOT
42524: PUSH
42525: LD_VAR 0 11
42529: NOT
42530: OR
42531: IFFALSE 42535
// exit ;
42533: GO 43568
// weapon := 0 ;
42535: LD_ADDR_VAR 0 18
42539: PUSH
42540: LD_INT 0
42542: ST_TO_ADDR
// fac_list := [ ] ;
42543: LD_ADDR_VAR 0 17
42547: PUSH
42548: EMPTY
42549: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42550: LD_ADDR_VAR 0 6
42554: PUSH
42555: LD_VAR 0 1
42559: PPUSH
42560: CALL_OW 274
42564: PPUSH
42565: LD_VAR 0 2
42569: PPUSH
42570: LD_INT 0
42572: PPUSH
42573: CALL 40139 0 3
42577: PPUSH
42578: LD_INT 30
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PPUSH
42588: CALL_OW 72
42592: ST_TO_ADDR
// if not factories then
42593: LD_VAR 0 6
42597: NOT
42598: IFFALSE 42602
// exit ;
42600: GO 43568
// for i in factories do
42602: LD_ADDR_VAR 0 8
42606: PUSH
42607: LD_VAR 0 6
42611: PUSH
42612: FOR_IN
42613: IFFALSE 42638
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42615: LD_ADDR_VAR 0 17
42619: PUSH
42620: LD_VAR 0 17
42624: PUSH
42625: LD_VAR 0 8
42629: PPUSH
42630: CALL_OW 478
42634: UNION
42635: ST_TO_ADDR
42636: GO 42612
42638: POP
42639: POP
// if not fac_list then
42640: LD_VAR 0 17
42644: NOT
42645: IFFALSE 42649
// exit ;
42647: GO 43568
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42649: LD_ADDR_VAR 0 5
42653: PUSH
42654: LD_INT 4
42656: PUSH
42657: LD_INT 5
42659: PUSH
42660: LD_INT 9
42662: PUSH
42663: LD_INT 10
42665: PUSH
42666: LD_INT 6
42668: PUSH
42669: LD_INT 7
42671: PUSH
42672: LD_INT 11
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 27
42686: PUSH
42687: LD_INT 28
42689: PUSH
42690: LD_INT 26
42692: PUSH
42693: LD_INT 30
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 43
42704: PUSH
42705: LD_INT 44
42707: PUSH
42708: LD_INT 46
42710: PUSH
42711: LD_INT 45
42713: PUSH
42714: LD_INT 47
42716: PUSH
42717: LD_INT 49
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: PUSH
42733: LD_VAR 0 12
42737: ARRAY
42738: ST_TO_ADDR
// list := list isect fac_list ;
42739: LD_ADDR_VAR 0 5
42743: PUSH
42744: LD_VAR 0 5
42748: PUSH
42749: LD_VAR 0 17
42753: ISECT
42754: ST_TO_ADDR
// if not list then
42755: LD_VAR 0 5
42759: NOT
42760: IFFALSE 42764
// exit ;
42762: GO 43568
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42764: LD_VAR 0 12
42768: PUSH
42769: LD_INT 3
42771: EQUAL
42772: PUSH
42773: LD_INT 49
42775: PUSH
42776: LD_VAR 0 5
42780: IN
42781: AND
42782: PUSH
42783: LD_INT 31
42785: PPUSH
42786: LD_VAR 0 16
42790: PPUSH
42791: CALL_OW 321
42795: PUSH
42796: LD_INT 2
42798: EQUAL
42799: AND
42800: IFFALSE 42860
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42802: LD_INT 22
42804: PUSH
42805: LD_VAR 0 16
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 35
42816: PUSH
42817: LD_INT 49
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 91
42826: PUSH
42827: LD_VAR 0 1
42831: PUSH
42832: LD_INT 10
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: PPUSH
42845: CALL_OW 69
42849: NOT
42850: IFFALSE 42860
// weapon := ru_time_lapser ;
42852: LD_ADDR_VAR 0 18
42856: PUSH
42857: LD_INT 49
42859: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42860: LD_VAR 0 12
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: IN
42875: PUSH
42876: LD_INT 11
42878: PUSH
42879: LD_VAR 0 5
42883: IN
42884: PUSH
42885: LD_INT 30
42887: PUSH
42888: LD_VAR 0 5
42892: IN
42893: OR
42894: AND
42895: PUSH
42896: LD_INT 6
42898: PPUSH
42899: LD_VAR 0 16
42903: PPUSH
42904: CALL_OW 321
42908: PUSH
42909: LD_INT 2
42911: EQUAL
42912: AND
42913: IFFALSE 43078
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42915: LD_INT 22
42917: PUSH
42918: LD_VAR 0 16
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 35
42932: PUSH
42933: LD_INT 11
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 35
42942: PUSH
42943: LD_INT 30
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 91
42957: PUSH
42958: LD_VAR 0 1
42962: PUSH
42963: LD_INT 18
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: PPUSH
42976: CALL_OW 69
42980: NOT
42981: PUSH
42982: LD_INT 22
42984: PUSH
42985: LD_VAR 0 16
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 30
42999: PUSH
43000: LD_INT 32
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 30
43009: PUSH
43010: LD_INT 33
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 91
43024: PUSH
43025: LD_VAR 0 1
43029: PUSH
43030: LD_INT 12
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: PPUSH
43046: CALL_OW 69
43050: PUSH
43051: LD_INT 2
43053: GREATER
43054: AND
43055: IFFALSE 43078
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43057: LD_ADDR_VAR 0 18
43061: PUSH
43062: LD_INT 11
43064: PUSH
43065: LD_INT 30
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_VAR 0 12
43076: ARRAY
43077: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43078: LD_VAR 0 18
43082: NOT
43083: PUSH
43084: LD_INT 40
43086: PPUSH
43087: LD_VAR 0 16
43091: PPUSH
43092: CALL_OW 321
43096: PUSH
43097: LD_INT 2
43099: EQUAL
43100: AND
43101: PUSH
43102: LD_INT 7
43104: PUSH
43105: LD_VAR 0 5
43109: IN
43110: PUSH
43111: LD_INT 28
43113: PUSH
43114: LD_VAR 0 5
43118: IN
43119: OR
43120: PUSH
43121: LD_INT 45
43123: PUSH
43124: LD_VAR 0 5
43128: IN
43129: OR
43130: AND
43131: IFFALSE 43385
// begin hex := GetHexInfo ( x , y ) ;
43133: LD_ADDR_VAR 0 4
43137: PUSH
43138: LD_VAR 0 10
43142: PPUSH
43143: LD_VAR 0 11
43147: PPUSH
43148: CALL_OW 546
43152: ST_TO_ADDR
// if hex [ 1 ] then
43153: LD_VAR 0 4
43157: PUSH
43158: LD_INT 1
43160: ARRAY
43161: IFFALSE 43165
// exit ;
43163: GO 43568
// height := hex [ 2 ] ;
43165: LD_ADDR_VAR 0 15
43169: PUSH
43170: LD_VAR 0 4
43174: PUSH
43175: LD_INT 2
43177: ARRAY
43178: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43179: LD_ADDR_VAR 0 14
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 5
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: ST_TO_ADDR
// for i in tmp do
43202: LD_ADDR_VAR 0 8
43206: PUSH
43207: LD_VAR 0 14
43211: PUSH
43212: FOR_IN
43213: IFFALSE 43383
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43215: LD_ADDR_VAR 0 9
43219: PUSH
43220: LD_VAR 0 10
43224: PPUSH
43225: LD_VAR 0 8
43229: PPUSH
43230: LD_INT 5
43232: PPUSH
43233: CALL_OW 272
43237: PUSH
43238: LD_VAR 0 11
43242: PPUSH
43243: LD_VAR 0 8
43247: PPUSH
43248: LD_INT 5
43250: PPUSH
43251: CALL_OW 273
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43260: LD_VAR 0 9
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PPUSH
43269: LD_VAR 0 9
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: PPUSH
43278: CALL_OW 488
43282: IFFALSE 43381
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43284: LD_ADDR_VAR 0 4
43288: PUSH
43289: LD_VAR 0 9
43293: PUSH
43294: LD_INT 1
43296: ARRAY
43297: PPUSH
43298: LD_VAR 0 9
43302: PUSH
43303: LD_INT 2
43305: ARRAY
43306: PPUSH
43307: CALL_OW 546
43311: ST_TO_ADDR
// if hex [ 1 ] then
43312: LD_VAR 0 4
43316: PUSH
43317: LD_INT 1
43319: ARRAY
43320: IFFALSE 43324
// continue ;
43322: GO 43212
// h := hex [ 2 ] ;
43324: LD_ADDR_VAR 0 13
43328: PUSH
43329: LD_VAR 0 4
43333: PUSH
43334: LD_INT 2
43336: ARRAY
43337: ST_TO_ADDR
// if h + 7 < height then
43338: LD_VAR 0 13
43342: PUSH
43343: LD_INT 7
43345: PLUS
43346: PUSH
43347: LD_VAR 0 15
43351: LESS
43352: IFFALSE 43381
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43354: LD_ADDR_VAR 0 18
43358: PUSH
43359: LD_INT 7
43361: PUSH
43362: LD_INT 28
43364: PUSH
43365: LD_INT 45
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: PUSH
43373: LD_VAR 0 12
43377: ARRAY
43378: ST_TO_ADDR
// break ;
43379: GO 43383
// end ; end ; end ;
43381: GO 43212
43383: POP
43384: POP
// end ; if not weapon then
43385: LD_VAR 0 18
43389: NOT
43390: IFFALSE 43450
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43392: LD_ADDR_VAR 0 5
43396: PUSH
43397: LD_VAR 0 5
43401: PUSH
43402: LD_INT 11
43404: PUSH
43405: LD_INT 30
43407: PUSH
43408: LD_INT 49
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: DIFF
43416: ST_TO_ADDR
// if not list then
43417: LD_VAR 0 5
43421: NOT
43422: IFFALSE 43426
// exit ;
43424: GO 43568
// weapon := list [ rand ( 1 , list ) ] ;
43426: LD_ADDR_VAR 0 18
43430: PUSH
43431: LD_VAR 0 5
43435: PUSH
43436: LD_INT 1
43438: PPUSH
43439: LD_VAR 0 5
43443: PPUSH
43444: CALL_OW 12
43448: ARRAY
43449: ST_TO_ADDR
// end ; if weapon then
43450: LD_VAR 0 18
43454: IFFALSE 43568
// begin tmp := CostOfWeapon ( weapon ) ;
43456: LD_ADDR_VAR 0 14
43460: PUSH
43461: LD_VAR 0 18
43465: PPUSH
43466: CALL_OW 451
43470: ST_TO_ADDR
// j := GetBase ( tower ) ;
43471: LD_ADDR_VAR 0 9
43475: PUSH
43476: LD_VAR 0 1
43480: PPUSH
43481: CALL_OW 274
43485: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43486: LD_VAR 0 9
43490: PPUSH
43491: LD_INT 1
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 14
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: GREATEREQUAL
43508: PUSH
43509: LD_VAR 0 9
43513: PPUSH
43514: LD_INT 2
43516: PPUSH
43517: CALL_OW 275
43521: PUSH
43522: LD_VAR 0 14
43526: PUSH
43527: LD_INT 2
43529: ARRAY
43530: GREATEREQUAL
43531: AND
43532: PUSH
43533: LD_VAR 0 9
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: CALL_OW 275
43545: PUSH
43546: LD_VAR 0 14
43550: PUSH
43551: LD_INT 3
43553: ARRAY
43554: GREATEREQUAL
43555: AND
43556: IFFALSE 43568
// result := weapon ;
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_VAR 0 18
43567: ST_TO_ADDR
// end ; end ;
43568: LD_VAR 0 3
43572: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43573: LD_INT 0
43575: PPUSH
43576: PPUSH
// result := true ;
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 1
43584: ST_TO_ADDR
// if array1 = array2 then
43585: LD_VAR 0 1
43589: PUSH
43590: LD_VAR 0 2
43594: EQUAL
43595: IFFALSE 43655
// begin for i = 1 to array1 do
43597: LD_ADDR_VAR 0 4
43601: PUSH
43602: DOUBLE
43603: LD_INT 1
43605: DEC
43606: ST_TO_ADDR
43607: LD_VAR 0 1
43611: PUSH
43612: FOR_TO
43613: IFFALSE 43651
// if array1 [ i ] <> array2 [ i ] then
43615: LD_VAR 0 1
43619: PUSH
43620: LD_VAR 0 4
43624: ARRAY
43625: PUSH
43626: LD_VAR 0 2
43630: PUSH
43631: LD_VAR 0 4
43635: ARRAY
43636: NONEQUAL
43637: IFFALSE 43649
// begin result := false ;
43639: LD_ADDR_VAR 0 3
43643: PUSH
43644: LD_INT 0
43646: ST_TO_ADDR
// break ;
43647: GO 43651
// end ;
43649: GO 43612
43651: POP
43652: POP
// end else
43653: GO 43663
// result := false ;
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 0
43662: ST_TO_ADDR
// end ;
43663: LD_VAR 0 3
43667: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43668: LD_INT 0
43670: PPUSH
43671: PPUSH
// if not array1 or not array2 then
43672: LD_VAR 0 1
43676: NOT
43677: PUSH
43678: LD_VAR 0 2
43682: NOT
43683: OR
43684: IFFALSE 43688
// exit ;
43686: GO 43752
// result := true ;
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_INT 1
43695: ST_TO_ADDR
// for i = 1 to array1 do
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: DOUBLE
43702: LD_INT 1
43704: DEC
43705: ST_TO_ADDR
43706: LD_VAR 0 1
43710: PUSH
43711: FOR_TO
43712: IFFALSE 43750
// if array1 [ i ] <> array2 [ i ] then
43714: LD_VAR 0 1
43718: PUSH
43719: LD_VAR 0 4
43723: ARRAY
43724: PUSH
43725: LD_VAR 0 2
43729: PUSH
43730: LD_VAR 0 4
43734: ARRAY
43735: NONEQUAL
43736: IFFALSE 43748
// begin result := false ;
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_INT 0
43745: ST_TO_ADDR
// break ;
43746: GO 43750
// end ;
43748: GO 43711
43750: POP
43751: POP
// end ;
43752: LD_VAR 0 3
43756: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43757: LD_INT 0
43759: PPUSH
43760: PPUSH
43761: PPUSH
// pom := GetBase ( fac ) ;
43762: LD_ADDR_VAR 0 5
43766: PUSH
43767: LD_VAR 0 1
43771: PPUSH
43772: CALL_OW 274
43776: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_VAR 0 2
43786: PUSH
43787: LD_INT 1
43789: ARRAY
43790: PPUSH
43791: LD_VAR 0 2
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: PPUSH
43800: LD_VAR 0 2
43804: PUSH
43805: LD_INT 3
43807: ARRAY
43808: PPUSH
43809: LD_VAR 0 2
43813: PUSH
43814: LD_INT 4
43816: ARRAY
43817: PPUSH
43818: CALL_OW 449
43822: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_VAR 0 5
43832: PPUSH
43833: LD_INT 1
43835: PPUSH
43836: CALL_OW 275
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: LD_INT 1
43848: ARRAY
43849: GREATEREQUAL
43850: PUSH
43851: LD_VAR 0 5
43855: PPUSH
43856: LD_INT 2
43858: PPUSH
43859: CALL_OW 275
43863: PUSH
43864: LD_VAR 0 4
43868: PUSH
43869: LD_INT 2
43871: ARRAY
43872: GREATEREQUAL
43873: AND
43874: PUSH
43875: LD_VAR 0 5
43879: PPUSH
43880: LD_INT 3
43882: PPUSH
43883: CALL_OW 275
43887: PUSH
43888: LD_VAR 0 4
43892: PUSH
43893: LD_INT 3
43895: ARRAY
43896: GREATEREQUAL
43897: AND
43898: ST_TO_ADDR
// end ;
43899: LD_VAR 0 3
43903: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43904: LD_INT 0
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
// pom := GetBase ( building ) ;
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: CALL_OW 274
43924: ST_TO_ADDR
// if not pom then
43925: LD_VAR 0 3
43929: NOT
43930: IFFALSE 43934
// exit ;
43932: GO 44104
// btype := GetBType ( building ) ;
43934: LD_ADDR_VAR 0 5
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 266
43948: ST_TO_ADDR
// if btype = b_armoury then
43949: LD_VAR 0 5
43953: PUSH
43954: LD_INT 4
43956: EQUAL
43957: IFFALSE 43967
// btype := b_barracks ;
43959: LD_ADDR_VAR 0 5
43963: PUSH
43964: LD_INT 5
43966: ST_TO_ADDR
// if btype = b_depot then
43967: LD_VAR 0 5
43971: PUSH
43972: LD_INT 0
43974: EQUAL
43975: IFFALSE 43985
// btype := b_warehouse ;
43977: LD_ADDR_VAR 0 5
43981: PUSH
43982: LD_INT 1
43984: ST_TO_ADDR
// if btype = b_workshop then
43985: LD_VAR 0 5
43989: PUSH
43990: LD_INT 2
43992: EQUAL
43993: IFFALSE 44003
// btype := b_factory ;
43995: LD_ADDR_VAR 0 5
43999: PUSH
44000: LD_INT 3
44002: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44003: LD_ADDR_VAR 0 4
44007: PUSH
44008: LD_VAR 0 5
44012: PPUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 248
44022: PPUSH
44023: CALL_OW 450
44027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44028: LD_ADDR_VAR 0 2
44032: PUSH
44033: LD_VAR 0 3
44037: PPUSH
44038: LD_INT 1
44040: PPUSH
44041: CALL_OW 275
44045: PUSH
44046: LD_VAR 0 4
44050: PUSH
44051: LD_INT 1
44053: ARRAY
44054: GREATEREQUAL
44055: PUSH
44056: LD_VAR 0 3
44060: PPUSH
44061: LD_INT 2
44063: PPUSH
44064: CALL_OW 275
44068: PUSH
44069: LD_VAR 0 4
44073: PUSH
44074: LD_INT 2
44076: ARRAY
44077: GREATEREQUAL
44078: AND
44079: PUSH
44080: LD_VAR 0 3
44084: PPUSH
44085: LD_INT 3
44087: PPUSH
44088: CALL_OW 275
44092: PUSH
44093: LD_VAR 0 4
44097: PUSH
44098: LD_INT 3
44100: ARRAY
44101: GREATEREQUAL
44102: AND
44103: ST_TO_ADDR
// end ;
44104: LD_VAR 0 2
44108: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44109: LD_INT 0
44111: PPUSH
44112: PPUSH
44113: PPUSH
// pom := GetBase ( building ) ;
44114: LD_ADDR_VAR 0 4
44118: PUSH
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 274
44128: ST_TO_ADDR
// if not pom then
44129: LD_VAR 0 4
44133: NOT
44134: IFFALSE 44138
// exit ;
44136: GO 44239
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44138: LD_ADDR_VAR 0 5
44142: PUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: LD_VAR 0 1
44152: PPUSH
44153: CALL_OW 248
44157: PPUSH
44158: CALL_OW 450
44162: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_VAR 0 4
44172: PPUSH
44173: LD_INT 1
44175: PPUSH
44176: CALL_OW 275
44180: PUSH
44181: LD_VAR 0 5
44185: PUSH
44186: LD_INT 1
44188: ARRAY
44189: GREATEREQUAL
44190: PUSH
44191: LD_VAR 0 4
44195: PPUSH
44196: LD_INT 2
44198: PPUSH
44199: CALL_OW 275
44203: PUSH
44204: LD_VAR 0 5
44208: PUSH
44209: LD_INT 2
44211: ARRAY
44212: GREATEREQUAL
44213: AND
44214: PUSH
44215: LD_VAR 0 4
44219: PPUSH
44220: LD_INT 3
44222: PPUSH
44223: CALL_OW 275
44227: PUSH
44228: LD_VAR 0 5
44232: PUSH
44233: LD_INT 3
44235: ARRAY
44236: GREATEREQUAL
44237: AND
44238: ST_TO_ADDR
// end ;
44239: LD_VAR 0 3
44243: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44244: LD_INT 0
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
// result := false ;
44257: LD_ADDR_VAR 0 8
44261: PUSH
44262: LD_INT 0
44264: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44265: LD_VAR 0 5
44269: NOT
44270: PUSH
44271: LD_VAR 0 1
44275: NOT
44276: OR
44277: PUSH
44278: LD_VAR 0 2
44282: NOT
44283: OR
44284: PUSH
44285: LD_VAR 0 3
44289: NOT
44290: OR
44291: IFFALSE 44295
// exit ;
44293: GO 45109
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44295: LD_ADDR_VAR 0 14
44299: PUSH
44300: LD_VAR 0 1
44304: PPUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: LD_VAR 0 3
44314: PPUSH
44315: LD_VAR 0 4
44319: PPUSH
44320: LD_VAR 0 5
44324: PUSH
44325: LD_INT 1
44327: ARRAY
44328: PPUSH
44329: CALL_OW 248
44333: PPUSH
44334: LD_INT 0
44336: PPUSH
44337: CALL 46346 0 6
44341: ST_TO_ADDR
// if not hexes then
44342: LD_VAR 0 14
44346: NOT
44347: IFFALSE 44351
// exit ;
44349: GO 45109
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44351: LD_ADDR_VAR 0 17
44355: PUSH
44356: LD_VAR 0 5
44360: PPUSH
44361: LD_INT 22
44363: PUSH
44364: LD_VAR 0 13
44368: PPUSH
44369: CALL_OW 255
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 30
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 30
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PPUSH
44410: CALL_OW 72
44414: ST_TO_ADDR
// for i = 1 to hexes do
44415: LD_ADDR_VAR 0 9
44419: PUSH
44420: DOUBLE
44421: LD_INT 1
44423: DEC
44424: ST_TO_ADDR
44425: LD_VAR 0 14
44429: PUSH
44430: FOR_TO
44431: IFFALSE 45107
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44433: LD_ADDR_VAR 0 13
44437: PUSH
44438: LD_VAR 0 14
44442: PUSH
44443: LD_VAR 0 9
44447: ARRAY
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PPUSH
44453: LD_VAR 0 14
44457: PUSH
44458: LD_VAR 0 9
44462: ARRAY
44463: PUSH
44464: LD_INT 2
44466: ARRAY
44467: PPUSH
44468: CALL_OW 428
44472: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44473: LD_VAR 0 14
44477: PUSH
44478: LD_VAR 0 9
44482: ARRAY
44483: PUSH
44484: LD_INT 1
44486: ARRAY
44487: PPUSH
44488: LD_VAR 0 14
44492: PUSH
44493: LD_VAR 0 9
44497: ARRAY
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: PPUSH
44503: CALL_OW 351
44507: PUSH
44508: LD_VAR 0 14
44512: PUSH
44513: LD_VAR 0 9
44517: ARRAY
44518: PUSH
44519: LD_INT 1
44521: ARRAY
44522: PPUSH
44523: LD_VAR 0 14
44527: PUSH
44528: LD_VAR 0 9
44532: ARRAY
44533: PUSH
44534: LD_INT 2
44536: ARRAY
44537: PPUSH
44538: CALL_OW 488
44542: NOT
44543: OR
44544: PUSH
44545: LD_VAR 0 13
44549: PPUSH
44550: CALL_OW 247
44554: PUSH
44555: LD_INT 3
44557: EQUAL
44558: OR
44559: IFFALSE 44565
// exit ;
44561: POP
44562: POP
44563: GO 45109
// if not tmp then
44565: LD_VAR 0 13
44569: NOT
44570: IFFALSE 44574
// continue ;
44572: GO 44430
// result := true ;
44574: LD_ADDR_VAR 0 8
44578: PUSH
44579: LD_INT 1
44581: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44582: LD_VAR 0 6
44586: PUSH
44587: LD_VAR 0 13
44591: PPUSH
44592: CALL_OW 247
44596: PUSH
44597: LD_INT 2
44599: EQUAL
44600: AND
44601: PUSH
44602: LD_VAR 0 13
44606: PPUSH
44607: CALL_OW 263
44611: PUSH
44612: LD_INT 1
44614: EQUAL
44615: AND
44616: IFFALSE 44780
// begin if IsDrivenBy ( tmp ) then
44618: LD_VAR 0 13
44622: PPUSH
44623: CALL_OW 311
44627: IFFALSE 44631
// continue ;
44629: GO 44430
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44631: LD_VAR 0 6
44635: PPUSH
44636: LD_INT 3
44638: PUSH
44639: LD_INT 60
44641: PUSH
44642: EMPTY
44643: LIST
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: LD_INT 55
44654: PUSH
44655: EMPTY
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PPUSH
44666: CALL_OW 72
44670: IFFALSE 44778
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44672: LD_ADDR_VAR 0 18
44676: PUSH
44677: LD_VAR 0 6
44681: PPUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 60
44687: PUSH
44688: EMPTY
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 55
44700: PUSH
44701: EMPTY
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PPUSH
44712: CALL_OW 72
44716: PUSH
44717: LD_INT 1
44719: ARRAY
44720: ST_TO_ADDR
// if IsInUnit ( driver ) then
44721: LD_VAR 0 18
44725: PPUSH
44726: CALL_OW 310
44730: IFFALSE 44741
// ComExit ( driver ) ;
44732: LD_VAR 0 18
44736: PPUSH
44737: CALL 69530 0 1
// AddComEnterUnit ( driver , tmp ) ;
44741: LD_VAR 0 18
44745: PPUSH
44746: LD_VAR 0 13
44750: PPUSH
44751: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44755: LD_VAR 0 18
44759: PPUSH
44760: LD_VAR 0 7
44764: PPUSH
44765: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44769: LD_VAR 0 18
44773: PPUSH
44774: CALL_OW 181
// end ; continue ;
44778: GO 44430
// end ; if not cleaners or not tmp in cleaners then
44780: LD_VAR 0 6
44784: NOT
44785: PUSH
44786: LD_VAR 0 13
44790: PUSH
44791: LD_VAR 0 6
44795: IN
44796: NOT
44797: OR
44798: IFFALSE 45105
// begin if dep then
44800: LD_VAR 0 17
44804: IFFALSE 44940
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44806: LD_ADDR_VAR 0 16
44810: PUSH
44811: LD_VAR 0 17
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: CALL_OW 250
44824: PPUSH
44825: LD_VAR 0 17
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PPUSH
44834: CALL_OW 254
44838: PPUSH
44839: LD_INT 5
44841: PPUSH
44842: CALL_OW 272
44846: PUSH
44847: LD_VAR 0 17
44851: PUSH
44852: LD_INT 1
44854: ARRAY
44855: PPUSH
44856: CALL_OW 251
44860: PPUSH
44861: LD_VAR 0 17
44865: PUSH
44866: LD_INT 1
44868: ARRAY
44869: PPUSH
44870: CALL_OW 254
44874: PPUSH
44875: LD_INT 5
44877: PPUSH
44878: CALL_OW 273
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44887: LD_VAR 0 16
44891: PUSH
44892: LD_INT 1
44894: ARRAY
44895: PPUSH
44896: LD_VAR 0 16
44900: PUSH
44901: LD_INT 2
44903: ARRAY
44904: PPUSH
44905: CALL_OW 488
44909: IFFALSE 44940
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44911: LD_VAR 0 13
44915: PPUSH
44916: LD_VAR 0 16
44920: PUSH
44921: LD_INT 1
44923: ARRAY
44924: PPUSH
44925: LD_VAR 0 16
44929: PUSH
44930: LD_INT 2
44932: ARRAY
44933: PPUSH
44934: CALL_OW 111
// continue ;
44938: GO 44430
// end ; end ; r := GetDir ( tmp ) ;
44940: LD_ADDR_VAR 0 15
44944: PUSH
44945: LD_VAR 0 13
44949: PPUSH
44950: CALL_OW 254
44954: ST_TO_ADDR
// if r = 5 then
44955: LD_VAR 0 15
44959: PUSH
44960: LD_INT 5
44962: EQUAL
44963: IFFALSE 44973
// r := 0 ;
44965: LD_ADDR_VAR 0 15
44969: PUSH
44970: LD_INT 0
44972: ST_TO_ADDR
// for j = r to 5 do
44973: LD_ADDR_VAR 0 10
44977: PUSH
44978: DOUBLE
44979: LD_VAR 0 15
44983: DEC
44984: ST_TO_ADDR
44985: LD_INT 5
44987: PUSH
44988: FOR_TO
44989: IFFALSE 45103
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44991: LD_ADDR_VAR 0 11
44995: PUSH
44996: LD_VAR 0 13
45000: PPUSH
45001: CALL_OW 250
45005: PPUSH
45006: LD_VAR 0 10
45010: PPUSH
45011: LD_INT 2
45013: PPUSH
45014: CALL_OW 272
45018: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45019: LD_ADDR_VAR 0 12
45023: PUSH
45024: LD_VAR 0 13
45028: PPUSH
45029: CALL_OW 251
45033: PPUSH
45034: LD_VAR 0 10
45038: PPUSH
45039: LD_INT 2
45041: PPUSH
45042: CALL_OW 273
45046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45047: LD_VAR 0 11
45051: PPUSH
45052: LD_VAR 0 12
45056: PPUSH
45057: CALL_OW 488
45061: PUSH
45062: LD_VAR 0 11
45066: PPUSH
45067: LD_VAR 0 12
45071: PPUSH
45072: CALL_OW 428
45076: NOT
45077: AND
45078: IFFALSE 45101
// begin ComMoveXY ( tmp , _x , _y ) ;
45080: LD_VAR 0 13
45084: PPUSH
45085: LD_VAR 0 11
45089: PPUSH
45090: LD_VAR 0 12
45094: PPUSH
45095: CALL_OW 111
// break ;
45099: GO 45103
// end ; end ;
45101: GO 44988
45103: POP
45104: POP
// end ; end ;
45105: GO 44430
45107: POP
45108: POP
// end ;
45109: LD_VAR 0 8
45113: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45114: LD_INT 0
45116: PPUSH
// result := true ;
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: LD_INT 1
45124: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45125: LD_VAR 0 2
45129: PUSH
45130: LD_INT 24
45132: DOUBLE
45133: EQUAL
45134: IFTRUE 45144
45136: LD_INT 33
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45169
45144: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45145: LD_ADDR_VAR 0 3
45149: PUSH
45150: LD_INT 32
45152: PPUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: CALL_OW 321
45162: PUSH
45163: LD_INT 2
45165: EQUAL
45166: ST_TO_ADDR
45167: GO 45489
45169: LD_INT 20
45171: DOUBLE
45172: EQUAL
45173: IFTRUE 45177
45175: GO 45202
45177: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45178: LD_ADDR_VAR 0 3
45182: PUSH
45183: LD_INT 6
45185: PPUSH
45186: LD_VAR 0 1
45190: PPUSH
45191: CALL_OW 321
45195: PUSH
45196: LD_INT 2
45198: EQUAL
45199: ST_TO_ADDR
45200: GO 45489
45202: LD_INT 22
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45216
45208: LD_INT 36
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45241
45216: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_INT 15
45224: PPUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 321
45234: PUSH
45235: LD_INT 2
45237: EQUAL
45238: ST_TO_ADDR
45239: GO 45489
45241: LD_INT 30
45243: DOUBLE
45244: EQUAL
45245: IFTRUE 45249
45247: GO 45274
45249: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45250: LD_ADDR_VAR 0 3
45254: PUSH
45255: LD_INT 20
45257: PPUSH
45258: LD_VAR 0 1
45262: PPUSH
45263: CALL_OW 321
45267: PUSH
45268: LD_INT 2
45270: EQUAL
45271: ST_TO_ADDR
45272: GO 45489
45274: LD_INT 28
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45288
45280: LD_INT 21
45282: DOUBLE
45283: EQUAL
45284: IFTRUE 45288
45286: GO 45313
45288: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45289: LD_ADDR_VAR 0 3
45293: PUSH
45294: LD_INT 21
45296: PPUSH
45297: LD_VAR 0 1
45301: PPUSH
45302: CALL_OW 321
45306: PUSH
45307: LD_INT 2
45309: EQUAL
45310: ST_TO_ADDR
45311: GO 45489
45313: LD_INT 16
45315: DOUBLE
45316: EQUAL
45317: IFTRUE 45321
45319: GO 45348
45321: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45322: LD_ADDR_VAR 0 3
45326: PUSH
45327: LD_EXP 104
45331: PPUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: CALL_OW 321
45341: PUSH
45342: LD_INT 2
45344: EQUAL
45345: ST_TO_ADDR
45346: GO 45489
45348: LD_INT 19
45350: DOUBLE
45351: EQUAL
45352: IFTRUE 45362
45354: LD_INT 23
45356: DOUBLE
45357: EQUAL
45358: IFTRUE 45362
45360: GO 45389
45362: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45363: LD_ADDR_VAR 0 3
45367: PUSH
45368: LD_EXP 103
45372: PPUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 321
45382: PUSH
45383: LD_INT 2
45385: EQUAL
45386: ST_TO_ADDR
45387: GO 45489
45389: LD_INT 17
45391: DOUBLE
45392: EQUAL
45393: IFTRUE 45397
45395: GO 45422
45397: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45398: LD_ADDR_VAR 0 3
45402: PUSH
45403: LD_INT 39
45405: PPUSH
45406: LD_VAR 0 1
45410: PPUSH
45411: CALL_OW 321
45415: PUSH
45416: LD_INT 2
45418: EQUAL
45419: ST_TO_ADDR
45420: GO 45489
45422: LD_INT 18
45424: DOUBLE
45425: EQUAL
45426: IFTRUE 45430
45428: GO 45455
45430: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45431: LD_ADDR_VAR 0 3
45435: PUSH
45436: LD_INT 40
45438: PPUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: CALL_OW 321
45448: PUSH
45449: LD_INT 2
45451: EQUAL
45452: ST_TO_ADDR
45453: GO 45489
45455: LD_INT 27
45457: DOUBLE
45458: EQUAL
45459: IFTRUE 45463
45461: GO 45488
45463: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_INT 35
45471: PPUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL_OW 321
45481: PUSH
45482: LD_INT 2
45484: EQUAL
45485: ST_TO_ADDR
45486: GO 45489
45488: POP
// end ;
45489: LD_VAR 0 3
45493: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45494: LD_INT 0
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
// result := false ;
45507: LD_ADDR_VAR 0 6
45511: PUSH
45512: LD_INT 0
45514: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45515: LD_VAR 0 1
45519: NOT
45520: PUSH
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 266
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: IN
45541: NOT
45542: OR
45543: PUSH
45544: LD_VAR 0 2
45548: NOT
45549: OR
45550: PUSH
45551: LD_VAR 0 5
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 4
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: IN
45582: NOT
45583: OR
45584: PUSH
45585: LD_VAR 0 3
45589: PPUSH
45590: LD_VAR 0 4
45594: PPUSH
45595: CALL_OW 488
45599: NOT
45600: OR
45601: IFFALSE 45605
// exit ;
45603: GO 46341
// side := GetSide ( depot ) ;
45605: LD_ADDR_VAR 0 9
45609: PUSH
45610: LD_VAR 0 1
45614: PPUSH
45615: CALL_OW 255
45619: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45620: LD_VAR 0 9
45624: PPUSH
45625: LD_VAR 0 2
45629: PPUSH
45630: CALL 45114 0 2
45634: NOT
45635: IFFALSE 45639
// exit ;
45637: GO 46341
// pom := GetBase ( depot ) ;
45639: LD_ADDR_VAR 0 10
45643: PUSH
45644: LD_VAR 0 1
45648: PPUSH
45649: CALL_OW 274
45653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45654: LD_ADDR_VAR 0 11
45658: PUSH
45659: LD_VAR 0 2
45663: PPUSH
45664: LD_VAR 0 1
45668: PPUSH
45669: CALL_OW 248
45673: PPUSH
45674: CALL_OW 450
45678: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45679: LD_VAR 0 10
45683: PPUSH
45684: LD_INT 1
45686: PPUSH
45687: CALL_OW 275
45691: PUSH
45692: LD_VAR 0 11
45696: PUSH
45697: LD_INT 1
45699: ARRAY
45700: GREATEREQUAL
45701: PUSH
45702: LD_VAR 0 10
45706: PPUSH
45707: LD_INT 2
45709: PPUSH
45710: CALL_OW 275
45714: PUSH
45715: LD_VAR 0 11
45719: PUSH
45720: LD_INT 2
45722: ARRAY
45723: GREATEREQUAL
45724: AND
45725: PUSH
45726: LD_VAR 0 10
45730: PPUSH
45731: LD_INT 3
45733: PPUSH
45734: CALL_OW 275
45738: PUSH
45739: LD_VAR 0 11
45743: PUSH
45744: LD_INT 3
45746: ARRAY
45747: GREATEREQUAL
45748: AND
45749: NOT
45750: IFFALSE 45754
// exit ;
45752: GO 46341
// if GetBType ( depot ) = b_depot then
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 266
45763: PUSH
45764: LD_INT 0
45766: EQUAL
45767: IFFALSE 45779
// dist := 28 else
45769: LD_ADDR_VAR 0 14
45773: PUSH
45774: LD_INT 28
45776: ST_TO_ADDR
45777: GO 45787
// dist := 36 ;
45779: LD_ADDR_VAR 0 14
45783: PUSH
45784: LD_INT 36
45786: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45787: LD_VAR 0 1
45791: PPUSH
45792: LD_VAR 0 3
45796: PPUSH
45797: LD_VAR 0 4
45801: PPUSH
45802: CALL_OW 297
45806: PUSH
45807: LD_VAR 0 14
45811: GREATER
45812: IFFALSE 45816
// exit ;
45814: GO 46341
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45816: LD_ADDR_VAR 0 12
45820: PUSH
45821: LD_VAR 0 2
45825: PPUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: LD_VAR 0 4
45835: PPUSH
45836: LD_VAR 0 5
45840: PPUSH
45841: LD_VAR 0 1
45845: PPUSH
45846: CALL_OW 248
45850: PPUSH
45851: LD_INT 0
45853: PPUSH
45854: CALL 46346 0 6
45858: ST_TO_ADDR
// if not hexes then
45859: LD_VAR 0 12
45863: NOT
45864: IFFALSE 45868
// exit ;
45866: GO 46341
// hex := GetHexInfo ( x , y ) ;
45868: LD_ADDR_VAR 0 15
45872: PUSH
45873: LD_VAR 0 3
45877: PPUSH
45878: LD_VAR 0 4
45882: PPUSH
45883: CALL_OW 546
45887: ST_TO_ADDR
// if hex [ 1 ] then
45888: LD_VAR 0 15
45892: PUSH
45893: LD_INT 1
45895: ARRAY
45896: IFFALSE 45900
// exit ;
45898: GO 46341
// height := hex [ 2 ] ;
45900: LD_ADDR_VAR 0 13
45904: PUSH
45905: LD_VAR 0 15
45909: PUSH
45910: LD_INT 2
45912: ARRAY
45913: ST_TO_ADDR
// for i = 1 to hexes do
45914: LD_ADDR_VAR 0 7
45918: PUSH
45919: DOUBLE
45920: LD_INT 1
45922: DEC
45923: ST_TO_ADDR
45924: LD_VAR 0 12
45928: PUSH
45929: FOR_TO
45930: IFFALSE 46260
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45932: LD_VAR 0 12
45936: PUSH
45937: LD_VAR 0 7
45941: ARRAY
45942: PUSH
45943: LD_INT 1
45945: ARRAY
45946: PPUSH
45947: LD_VAR 0 12
45951: PUSH
45952: LD_VAR 0 7
45956: ARRAY
45957: PUSH
45958: LD_INT 2
45960: ARRAY
45961: PPUSH
45962: CALL_OW 488
45966: NOT
45967: PUSH
45968: LD_VAR 0 12
45972: PUSH
45973: LD_VAR 0 7
45977: ARRAY
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: PPUSH
45983: LD_VAR 0 12
45987: PUSH
45988: LD_VAR 0 7
45992: ARRAY
45993: PUSH
45994: LD_INT 2
45996: ARRAY
45997: PPUSH
45998: CALL_OW 428
46002: PUSH
46003: LD_INT 0
46005: GREATER
46006: OR
46007: PUSH
46008: LD_VAR 0 12
46012: PUSH
46013: LD_VAR 0 7
46017: ARRAY
46018: PUSH
46019: LD_INT 1
46021: ARRAY
46022: PPUSH
46023: LD_VAR 0 12
46027: PUSH
46028: LD_VAR 0 7
46032: ARRAY
46033: PUSH
46034: LD_INT 2
46036: ARRAY
46037: PPUSH
46038: CALL_OW 351
46042: OR
46043: IFFALSE 46049
// exit ;
46045: POP
46046: POP
46047: GO 46341
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46049: LD_ADDR_VAR 0 8
46053: PUSH
46054: LD_VAR 0 12
46058: PUSH
46059: LD_VAR 0 7
46063: ARRAY
46064: PUSH
46065: LD_INT 1
46067: ARRAY
46068: PPUSH
46069: LD_VAR 0 12
46073: PUSH
46074: LD_VAR 0 7
46078: ARRAY
46079: PUSH
46080: LD_INT 2
46082: ARRAY
46083: PPUSH
46084: CALL_OW 546
46088: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46089: LD_VAR 0 8
46093: PUSH
46094: LD_INT 1
46096: ARRAY
46097: PUSH
46098: LD_VAR 0 8
46102: PUSH
46103: LD_INT 2
46105: ARRAY
46106: PUSH
46107: LD_VAR 0 13
46111: PUSH
46112: LD_INT 2
46114: PLUS
46115: GREATER
46116: OR
46117: PUSH
46118: LD_VAR 0 8
46122: PUSH
46123: LD_INT 2
46125: ARRAY
46126: PUSH
46127: LD_VAR 0 13
46131: PUSH
46132: LD_INT 2
46134: MINUS
46135: LESS
46136: OR
46137: PUSH
46138: LD_VAR 0 8
46142: PUSH
46143: LD_INT 3
46145: ARRAY
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 8
46152: PUSH
46153: LD_INT 9
46155: PUSH
46156: LD_INT 10
46158: PUSH
46159: LD_INT 11
46161: PUSH
46162: LD_INT 12
46164: PUSH
46165: LD_INT 13
46167: PUSH
46168: LD_INT 16
46170: PUSH
46171: LD_INT 17
46173: PUSH
46174: LD_INT 18
46176: PUSH
46177: LD_INT 19
46179: PUSH
46180: LD_INT 20
46182: PUSH
46183: LD_INT 21
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: IN
46201: NOT
46202: OR
46203: PUSH
46204: LD_VAR 0 8
46208: PUSH
46209: LD_INT 5
46211: ARRAY
46212: NOT
46213: OR
46214: PUSH
46215: LD_VAR 0 8
46219: PUSH
46220: LD_INT 6
46222: ARRAY
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 7
46232: PUSH
46233: LD_INT 9
46235: PUSH
46236: LD_INT 10
46238: PUSH
46239: LD_INT 11
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: IN
46250: NOT
46251: OR
46252: IFFALSE 46258
// exit ;
46254: POP
46255: POP
46256: GO 46341
// end ;
46258: GO 45929
46260: POP
46261: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46262: LD_VAR 0 9
46266: PPUSH
46267: LD_VAR 0 3
46271: PPUSH
46272: LD_VAR 0 4
46276: PPUSH
46277: LD_INT 20
46279: PPUSH
46280: CALL 38287 0 4
46284: PUSH
46285: LD_INT 4
46287: ARRAY
46288: IFFALSE 46292
// exit ;
46290: GO 46341
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46292: LD_VAR 0 2
46296: PUSH
46297: LD_INT 29
46299: PUSH
46300: LD_INT 30
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: IN
46307: PUSH
46308: LD_VAR 0 3
46312: PPUSH
46313: LD_VAR 0 4
46317: PPUSH
46318: LD_VAR 0 9
46322: PPUSH
46323: CALL_OW 440
46327: NOT
46328: AND
46329: IFFALSE 46333
// exit ;
46331: GO 46341
// result := true ;
46333: LD_ADDR_VAR 0 6
46337: PUSH
46338: LD_INT 1
46340: ST_TO_ADDR
// end ;
46341: LD_VAR 0 6
46345: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46346: LD_INT 0
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
46357: PPUSH
46358: PPUSH
46359: PPUSH
46360: PPUSH
46361: PPUSH
46362: PPUSH
46363: PPUSH
46364: PPUSH
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
// result = [ ] ;
46406: LD_ADDR_VAR 0 7
46410: PUSH
46411: EMPTY
46412: ST_TO_ADDR
// temp_list = [ ] ;
46413: LD_ADDR_VAR 0 9
46417: PUSH
46418: EMPTY
46419: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46420: LD_VAR 0 4
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: LD_INT 4
46439: PUSH
46440: LD_INT 5
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: IN
46451: NOT
46452: PUSH
46453: LD_VAR 0 1
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: IN
46468: PUSH
46469: LD_VAR 0 5
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: IN
46488: NOT
46489: AND
46490: OR
46491: IFFALSE 46495
// exit ;
46493: GO 64886
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46495: LD_VAR 0 1
46499: PUSH
46500: LD_INT 6
46502: PUSH
46503: LD_INT 7
46505: PUSH
46506: LD_INT 8
46508: PUSH
46509: LD_INT 13
46511: PUSH
46512: LD_INT 12
46514: PUSH
46515: LD_INT 15
46517: PUSH
46518: LD_INT 11
46520: PUSH
46521: LD_INT 14
46523: PUSH
46524: LD_INT 10
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: IN
46538: IFFALSE 46548
// btype = b_lab ;
46540: LD_ADDR_VAR 0 1
46544: PUSH
46545: LD_INT 6
46547: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46548: LD_VAR 0 6
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: IN
46567: NOT
46568: PUSH
46569: LD_VAR 0 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 6
46588: PUSH
46589: LD_INT 36
46591: PUSH
46592: LD_INT 4
46594: PUSH
46595: LD_INT 5
46597: PUSH
46598: LD_INT 31
46600: PUSH
46601: LD_INT 32
46603: PUSH
46604: LD_INT 33
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: IN
46620: NOT
46621: PUSH
46622: LD_VAR 0 6
46626: PUSH
46627: LD_INT 1
46629: EQUAL
46630: AND
46631: OR
46632: PUSH
46633: LD_VAR 0 1
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: IN
46648: NOT
46649: PUSH
46650: LD_VAR 0 6
46654: PUSH
46655: LD_INT 2
46657: EQUAL
46658: AND
46659: OR
46660: IFFALSE 46670
// mode = 0 ;
46662: LD_ADDR_VAR 0 6
46666: PUSH
46667: LD_INT 0
46669: ST_TO_ADDR
// case mode of 0 :
46670: LD_VAR 0 6
46674: PUSH
46675: LD_INT 0
46677: DOUBLE
46678: EQUAL
46679: IFTRUE 46683
46681: GO 58136
46683: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46684: LD_ADDR_VAR 0 11
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46877: LD_ADDR_VAR 0 12
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 3
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47073: LD_ADDR_VAR 0 13
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47272: LD_ADDR_VAR 0 14
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 3
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47468: LD_ADDR_VAR 0 15
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47661: LD_ADDR_VAR 0 16
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47854: LD_ADDR_VAR 0 17
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48084: LD_ADDR_VAR 0 18
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48314: LD_ADDR_VAR 0 19
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48544: LD_ADDR_VAR 0 20
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48774: LD_ADDR_VAR 0 21
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49004: LD_ADDR_VAR 0 22
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49234: LD_ADDR_VAR 0 23
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49514: LD_ADDR_VAR 0 24
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49790: LD_ADDR_VAR 0 25
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50064: LD_ADDR_VAR 0 26
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 3
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50340: LD_ADDR_VAR 0 27
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50620: LD_ADDR_VAR 0 28
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50902: LD_ADDR_VAR 0 29
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51181: LD_ADDR_VAR 0 30
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51459: LD_ADDR_VAR 0 31
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51737: LD_ADDR_VAR 0 32
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52015: LD_ADDR_VAR 0 33
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52294: LD_ADDR_VAR 0 34
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52574: LD_ADDR_VAR 0 35
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52686: LD_ADDR_VAR 0 36
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52798: LD_ADDR_VAR 0 37
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52910: LD_ADDR_VAR 0 38
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53022: LD_ADDR_VAR 0 39
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53134: LD_ADDR_VAR 0 40
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53246: LD_ADDR_VAR 0 41
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 3
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53596: LD_ADDR_VAR 0 42
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53946: LD_ADDR_VAR 0 43
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54294: LD_ADDR_VAR 0 44
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54644: LD_ADDR_VAR 0 45
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 3
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54994: LD_ADDR_VAR 0 46
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55342: LD_ADDR_VAR 0 47
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55493: LD_ADDR_VAR 0 48
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55640: LD_ADDR_VAR 0 49
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55784: LD_ADDR_VAR 0 50
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55928: LD_ADDR_VAR 0 51
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56075: LD_ADDR_VAR 0 52
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56226: LD_ADDR_VAR 0 53
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56456: LD_ADDR_VAR 0 54
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56686: LD_ADDR_VAR 0 55
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56916: LD_ADDR_VAR 0 56
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57146: LD_ADDR_VAR 0 57
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57376: LD_ADDR_VAR 0 58
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57606: LD_ADDR_VAR 0 59
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57694: LD_ADDR_VAR 0 60
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57782: LD_ADDR_VAR 0 61
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57870: LD_ADDR_VAR 0 62
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57958: LD_ADDR_VAR 0 63
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58046: LD_ADDR_VAR 0 64
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// end ; 1 :
58134: GO 64031
58136: LD_INT 1
58138: DOUBLE
58139: EQUAL
58140: IFTRUE 58144
58142: GO 60767
58144: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58145: LD_ADDR_VAR 0 11
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58189: LD_ADDR_VAR 0 12
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58230: LD_ADDR_VAR 0 13
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58270: LD_ADDR_VAR 0 14
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58311: LD_ADDR_VAR 0 15
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58355: LD_ADDR_VAR 0 16
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58401: LD_ADDR_VAR 0 17
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58445: LD_ADDR_VAR 0 18
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58486: LD_ADDR_VAR 0 19
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58526: LD_ADDR_VAR 0 20
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58567: LD_ADDR_VAR 0 21
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58611: LD_ADDR_VAR 0 22
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58657: LD_ADDR_VAR 0 23
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58701: LD_ADDR_VAR 0 24
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 4
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58742: LD_ADDR_VAR 0 25
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: LD_INT 4
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58782: LD_ADDR_VAR 0 26
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 4
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58823: LD_ADDR_VAR 0 27
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58867: LD_ADDR_VAR 0 28
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58913: LD_ADDR_VAR 0 29
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 5
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 5
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 6
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 6
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 5
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59068: LD_ADDR_VAR 0 30
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 4
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 5
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 6
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 6
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59211: LD_ADDR_VAR 0 31
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 5
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: LD_INT 5
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: LD_INT 5
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 6
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 6
59318: PUSH
59319: LD_INT 6
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 5
59328: PUSH
59329: LD_INT 6
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59350: LD_ADDR_VAR 0 32
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 5
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 5
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 6
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 6
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59493: LD_ADDR_VAR 0 33
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 5
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 5
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 5
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 6
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 6
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59648: LD_ADDR_VAR 0 34
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 3
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: LD_INT 4
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 4
59703: NEG
59704: PUSH
59705: LD_INT 3
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: NEG
59728: PUSH
59729: LD_INT 5
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 5
59739: NEG
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 5
59751: NEG
59752: PUSH
59753: LD_INT 5
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 5
59763: NEG
59764: PUSH
59765: LD_INT 6
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 6
59775: NEG
59776: PUSH
59777: LD_INT 5
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 6
59787: NEG
59788: PUSH
59789: LD_INT 6
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59811: LD_ADDR_VAR 0 41
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59855: LD_ADDR_VAR 0 42
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59896: LD_ADDR_VAR 0 43
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 3
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59936: LD_ADDR_VAR 0 44
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59977: LD_ADDR_VAR 0 45
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60021: LD_ADDR_VAR 0 46
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60067: LD_ADDR_VAR 0 47
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60100: LD_ADDR_VAR 0 48
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60131: LD_ADDR_VAR 0 49
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60160: LD_ADDR_VAR 0 50
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60189: LD_ADDR_VAR 0 51
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60220: LD_ADDR_VAR 0 52
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60253: LD_ADDR_VAR 0 53
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60297: LD_ADDR_VAR 0 54
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60338: LD_ADDR_VAR 0 55
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 3
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60378: LD_ADDR_VAR 0 56
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60419: LD_ADDR_VAR 0 57
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60463: LD_ADDR_VAR 0 58
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60509: LD_ADDR_VAR 0 59
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60553: LD_ADDR_VAR 0 60
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60594: LD_ADDR_VAR 0 61
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60634: LD_ADDR_VAR 0 62
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60675: LD_ADDR_VAR 0 63
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60719: LD_ADDR_VAR 0 64
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// end ; 2 :
60765: GO 64031
60767: LD_INT 2
60769: DOUBLE
60770: EQUAL
60771: IFTRUE 60775
60773: GO 64030
60775: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60776: LD_ADDR_VAR 0 29
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 4
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 4
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 4
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 3
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 5
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 5
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 5
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 4
61161: NEG
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: LD_INT 5
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 4
61209: NEG
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: NEG
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: LD_INT 5
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 5
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 5
61257: NEG
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61314: LD_ADDR_VAR 0 30
61318: PUSH
61319: LD_INT 4
61321: PUSH
61322: LD_INT 4
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 4
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 5
61341: PUSH
61342: LD_INT 4
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 5
61351: PUSH
61352: LD_INT 5
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: LD_INT 5
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: LD_INT 4
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 5
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: NEG
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 5
61560: NEG
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 5
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 5
61583: NEG
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: LD_INT 4
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: NEG
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: LD_INT 4
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 4
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 4
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 5
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 5
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 5
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61861: LD_ADDR_VAR 0 31
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 4
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 5
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 5
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 5
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 4
62017: NEG
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: NEG
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 4
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 4
62063: NEG
62064: PUSH
62065: LD_INT 4
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: LD_INT 5
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: LD_INT 3
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 5
62123: NEG
62124: PUSH
62125: LD_INT 4
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 5
62135: NEG
62136: PUSH
62137: LD_INT 5
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: LD_INT 5
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 5
62159: NEG
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 3
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 4
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: LD_INT 4
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 4
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 5
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 5
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 5
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62411: LD_ADDR_VAR 0 32
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 4
62429: NEG
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: NEG
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 4
62463: NEG
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 5
62474: NEG
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 5
62485: NEG
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 5
62497: NEG
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: LD_INT 4
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 4
62592: NEG
62593: PUSH
62594: LD_INT 4
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: LD_INT 4
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 4
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 5
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 4
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 3
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 4
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 5
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: LD_INT 5
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 3
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 4
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 4
62823: PUSH
62824: LD_INT 4
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 4
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 5
62843: PUSH
62844: LD_INT 4
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 5
62853: PUSH
62854: LD_INT 5
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 4
62863: PUSH
62864: LD_INT 5
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 3
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 3
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 5
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: LD_INT 5
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62958: LD_ADDR_VAR 0 33
62962: PUSH
62963: LD_INT 4
62965: NEG
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 4
62977: NEG
62978: PUSH
62979: LD_INT 5
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: LD_INT 4
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: NEG
63002: PUSH
63003: LD_INT 3
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 4
63013: NEG
63014: PUSH
63015: LD_INT 3
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 5
63025: NEG
63026: PUSH
63027: LD_INT 4
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 5
63037: NEG
63038: PUSH
63039: LD_INT 5
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 3
63049: NEG
63050: PUSH
63051: LD_INT 5
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 5
63061: NEG
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 4
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 3
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 4
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 4
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 5
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 4
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 4
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 5
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 4
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63496: LD_ADDR_VAR 0 34
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 4
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 5
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: LD_INT 4
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 4
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 5
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 5
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 4
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: LD_INT 4
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 4
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 5
63718: PUSH
63719: LD_INT 4
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 5
63728: PUSH
63729: LD_INT 5
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: LD_INT 5
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: LD_INT 4
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: LD_INT 5
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 3
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 4
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 4
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 4
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 4
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 4
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 5
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 5
63960: NEG
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: ST_TO_ADDR
// end ; end ;
64028: GO 64031
64030: POP
// case btype of b_depot , b_warehouse :
64031: LD_VAR 0 1
64035: PUSH
64036: LD_INT 0
64038: DOUBLE
64039: EQUAL
64040: IFTRUE 64050
64042: LD_INT 1
64044: DOUBLE
64045: EQUAL
64046: IFTRUE 64050
64048: GO 64251
64050: POP
// case nation of nation_american :
64051: LD_VAR 0 5
64055: PUSH
64056: LD_INT 1
64058: DOUBLE
64059: EQUAL
64060: IFTRUE 64064
64062: GO 64120
64064: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64065: LD_ADDR_VAR 0 9
64069: PUSH
64070: LD_VAR 0 11
64074: PUSH
64075: LD_VAR 0 12
64079: PUSH
64080: LD_VAR 0 13
64084: PUSH
64085: LD_VAR 0 14
64089: PUSH
64090: LD_VAR 0 15
64094: PUSH
64095: LD_VAR 0 16
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: PUSH
64108: LD_VAR 0 4
64112: PUSH
64113: LD_INT 1
64115: PLUS
64116: ARRAY
64117: ST_TO_ADDR
64118: GO 64249
64120: LD_INT 2
64122: DOUBLE
64123: EQUAL
64124: IFTRUE 64128
64126: GO 64184
64128: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64129: LD_ADDR_VAR 0 9
64133: PUSH
64134: LD_VAR 0 17
64138: PUSH
64139: LD_VAR 0 18
64143: PUSH
64144: LD_VAR 0 19
64148: PUSH
64149: LD_VAR 0 20
64153: PUSH
64154: LD_VAR 0 21
64158: PUSH
64159: LD_VAR 0 22
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: PUSH
64172: LD_VAR 0 4
64176: PUSH
64177: LD_INT 1
64179: PLUS
64180: ARRAY
64181: ST_TO_ADDR
64182: GO 64249
64184: LD_INT 3
64186: DOUBLE
64187: EQUAL
64188: IFTRUE 64192
64190: GO 64248
64192: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64193: LD_ADDR_VAR 0 9
64197: PUSH
64198: LD_VAR 0 23
64202: PUSH
64203: LD_VAR 0 24
64207: PUSH
64208: LD_VAR 0 25
64212: PUSH
64213: LD_VAR 0 26
64217: PUSH
64218: LD_VAR 0 27
64222: PUSH
64223: LD_VAR 0 28
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: PUSH
64236: LD_VAR 0 4
64240: PUSH
64241: LD_INT 1
64243: PLUS
64244: ARRAY
64245: ST_TO_ADDR
64246: GO 64249
64248: POP
64249: GO 64804
64251: LD_INT 2
64253: DOUBLE
64254: EQUAL
64255: IFTRUE 64265
64257: LD_INT 3
64259: DOUBLE
64260: EQUAL
64261: IFTRUE 64265
64263: GO 64321
64265: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64266: LD_ADDR_VAR 0 9
64270: PUSH
64271: LD_VAR 0 29
64275: PUSH
64276: LD_VAR 0 30
64280: PUSH
64281: LD_VAR 0 31
64285: PUSH
64286: LD_VAR 0 32
64290: PUSH
64291: LD_VAR 0 33
64295: PUSH
64296: LD_VAR 0 34
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: PUSH
64309: LD_VAR 0 4
64313: PUSH
64314: LD_INT 1
64316: PLUS
64317: ARRAY
64318: ST_TO_ADDR
64319: GO 64804
64321: LD_INT 16
64323: DOUBLE
64324: EQUAL
64325: IFTRUE 64383
64327: LD_INT 17
64329: DOUBLE
64330: EQUAL
64331: IFTRUE 64383
64333: LD_INT 18
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64383
64339: LD_INT 19
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64383
64345: LD_INT 22
64347: DOUBLE
64348: EQUAL
64349: IFTRUE 64383
64351: LD_INT 20
64353: DOUBLE
64354: EQUAL
64355: IFTRUE 64383
64357: LD_INT 21
64359: DOUBLE
64360: EQUAL
64361: IFTRUE 64383
64363: LD_INT 23
64365: DOUBLE
64366: EQUAL
64367: IFTRUE 64383
64369: LD_INT 24
64371: DOUBLE
64372: EQUAL
64373: IFTRUE 64383
64375: LD_INT 25
64377: DOUBLE
64378: EQUAL
64379: IFTRUE 64383
64381: GO 64439
64383: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64384: LD_ADDR_VAR 0 9
64388: PUSH
64389: LD_VAR 0 35
64393: PUSH
64394: LD_VAR 0 36
64398: PUSH
64399: LD_VAR 0 37
64403: PUSH
64404: LD_VAR 0 38
64408: PUSH
64409: LD_VAR 0 39
64413: PUSH
64414: LD_VAR 0 40
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: PUSH
64427: LD_VAR 0 4
64431: PUSH
64432: LD_INT 1
64434: PLUS
64435: ARRAY
64436: ST_TO_ADDR
64437: GO 64804
64439: LD_INT 6
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64495
64445: LD_INT 7
64447: DOUBLE
64448: EQUAL
64449: IFTRUE 64495
64451: LD_INT 8
64453: DOUBLE
64454: EQUAL
64455: IFTRUE 64495
64457: LD_INT 13
64459: DOUBLE
64460: EQUAL
64461: IFTRUE 64495
64463: LD_INT 12
64465: DOUBLE
64466: EQUAL
64467: IFTRUE 64495
64469: LD_INT 15
64471: DOUBLE
64472: EQUAL
64473: IFTRUE 64495
64475: LD_INT 11
64477: DOUBLE
64478: EQUAL
64479: IFTRUE 64495
64481: LD_INT 14
64483: DOUBLE
64484: EQUAL
64485: IFTRUE 64495
64487: LD_INT 10
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 64551
64495: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64496: LD_ADDR_VAR 0 9
64500: PUSH
64501: LD_VAR 0 41
64505: PUSH
64506: LD_VAR 0 42
64510: PUSH
64511: LD_VAR 0 43
64515: PUSH
64516: LD_VAR 0 44
64520: PUSH
64521: LD_VAR 0 45
64525: PUSH
64526: LD_VAR 0 46
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: PUSH
64539: LD_VAR 0 4
64543: PUSH
64544: LD_INT 1
64546: PLUS
64547: ARRAY
64548: ST_TO_ADDR
64549: GO 64804
64551: LD_INT 36
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64559
64557: GO 64615
64559: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64560: LD_ADDR_VAR 0 9
64564: PUSH
64565: LD_VAR 0 47
64569: PUSH
64570: LD_VAR 0 48
64574: PUSH
64575: LD_VAR 0 49
64579: PUSH
64580: LD_VAR 0 50
64584: PUSH
64585: LD_VAR 0 51
64589: PUSH
64590: LD_VAR 0 52
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: PUSH
64603: LD_VAR 0 4
64607: PUSH
64608: LD_INT 1
64610: PLUS
64611: ARRAY
64612: ST_TO_ADDR
64613: GO 64804
64615: LD_INT 4
64617: DOUBLE
64618: EQUAL
64619: IFTRUE 64641
64621: LD_INT 5
64623: DOUBLE
64624: EQUAL
64625: IFTRUE 64641
64627: LD_INT 34
64629: DOUBLE
64630: EQUAL
64631: IFTRUE 64641
64633: LD_INT 37
64635: DOUBLE
64636: EQUAL
64637: IFTRUE 64641
64639: GO 64697
64641: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64642: LD_ADDR_VAR 0 9
64646: PUSH
64647: LD_VAR 0 53
64651: PUSH
64652: LD_VAR 0 54
64656: PUSH
64657: LD_VAR 0 55
64661: PUSH
64662: LD_VAR 0 56
64666: PUSH
64667: LD_VAR 0 57
64671: PUSH
64672: LD_VAR 0 58
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 4
64689: PUSH
64690: LD_INT 1
64692: PLUS
64693: ARRAY
64694: ST_TO_ADDR
64695: GO 64804
64697: LD_INT 31
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64747
64703: LD_INT 32
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64747
64709: LD_INT 33
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64747
64715: LD_INT 27
64717: DOUBLE
64718: EQUAL
64719: IFTRUE 64747
64721: LD_INT 26
64723: DOUBLE
64724: EQUAL
64725: IFTRUE 64747
64727: LD_INT 28
64729: DOUBLE
64730: EQUAL
64731: IFTRUE 64747
64733: LD_INT 29
64735: DOUBLE
64736: EQUAL
64737: IFTRUE 64747
64739: LD_INT 30
64741: DOUBLE
64742: EQUAL
64743: IFTRUE 64747
64745: GO 64803
64747: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64748: LD_ADDR_VAR 0 9
64752: PUSH
64753: LD_VAR 0 59
64757: PUSH
64758: LD_VAR 0 60
64762: PUSH
64763: LD_VAR 0 61
64767: PUSH
64768: LD_VAR 0 62
64772: PUSH
64773: LD_VAR 0 63
64777: PUSH
64778: LD_VAR 0 64
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: PUSH
64791: LD_VAR 0 4
64795: PUSH
64796: LD_INT 1
64798: PLUS
64799: ARRAY
64800: ST_TO_ADDR
64801: GO 64804
64803: POP
// temp_list2 = [ ] ;
64804: LD_ADDR_VAR 0 10
64808: PUSH
64809: EMPTY
64810: ST_TO_ADDR
// for i in temp_list do
64811: LD_ADDR_VAR 0 8
64815: PUSH
64816: LD_VAR 0 9
64820: PUSH
64821: FOR_IN
64822: IFFALSE 64874
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64824: LD_ADDR_VAR 0 10
64828: PUSH
64829: LD_VAR 0 10
64833: PUSH
64834: LD_VAR 0 8
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: PUSH
64843: LD_VAR 0 2
64847: PLUS
64848: PUSH
64849: LD_VAR 0 8
64853: PUSH
64854: LD_INT 2
64856: ARRAY
64857: PUSH
64858: LD_VAR 0 3
64862: PLUS
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: ADD
64871: ST_TO_ADDR
64872: GO 64821
64874: POP
64875: POP
// result = temp_list2 ;
64876: LD_ADDR_VAR 0 7
64880: PUSH
64881: LD_VAR 0 10
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 7
64890: RET
// export function EnemyInRange ( unit , dist ) ; begin
64891: LD_INT 0
64893: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64894: LD_ADDR_VAR 0 3
64898: PUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: CALL_OW 255
64908: PPUSH
64909: LD_VAR 0 1
64913: PPUSH
64914: CALL_OW 250
64918: PPUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 251
64928: PPUSH
64929: LD_VAR 0 2
64933: PPUSH
64934: CALL 38287 0 4
64938: PUSH
64939: LD_INT 4
64941: ARRAY
64942: ST_TO_ADDR
// end ;
64943: LD_VAR 0 3
64947: RET
// export function PlayerSeeMe ( unit ) ; begin
64948: LD_INT 0
64950: PPUSH
// result := See ( your_side , unit ) ;
64951: LD_ADDR_VAR 0 2
64955: PUSH
64956: LD_OWVAR 2
64960: PPUSH
64961: LD_VAR 0 1
64965: PPUSH
64966: CALL_OW 292
64970: ST_TO_ADDR
// end ;
64971: LD_VAR 0 2
64975: RET
// export function ReverseDir ( unit ) ; begin
64976: LD_INT 0
64978: PPUSH
// if not unit then
64979: LD_VAR 0 1
64983: NOT
64984: IFFALSE 64988
// exit ;
64986: GO 65011
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_VAR 0 1
64997: PPUSH
64998: CALL_OW 254
65002: PUSH
65003: LD_INT 3
65005: PLUS
65006: PUSH
65007: LD_INT 6
65009: MOD
65010: ST_TO_ADDR
// end ;
65011: LD_VAR 0 2
65015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65016: LD_INT 0
65018: PPUSH
65019: PPUSH
65020: PPUSH
65021: PPUSH
65022: PPUSH
// if not hexes then
65023: LD_VAR 0 2
65027: NOT
65028: IFFALSE 65032
// exit ;
65030: GO 65180
// dist := 9999 ;
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: LD_INT 9999
65039: ST_TO_ADDR
// for i = 1 to hexes do
65040: LD_ADDR_VAR 0 4
65044: PUSH
65045: DOUBLE
65046: LD_INT 1
65048: DEC
65049: ST_TO_ADDR
65050: LD_VAR 0 2
65054: PUSH
65055: FOR_TO
65056: IFFALSE 65168
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65058: LD_VAR 0 1
65062: PPUSH
65063: LD_VAR 0 2
65067: PUSH
65068: LD_VAR 0 4
65072: ARRAY
65073: PUSH
65074: LD_INT 1
65076: ARRAY
65077: PPUSH
65078: LD_VAR 0 2
65082: PUSH
65083: LD_VAR 0 4
65087: ARRAY
65088: PUSH
65089: LD_INT 2
65091: ARRAY
65092: PPUSH
65093: CALL_OW 297
65097: PUSH
65098: LD_VAR 0 5
65102: LESS
65103: IFFALSE 65166
// begin hex := hexes [ i ] ;
65105: LD_ADDR_VAR 0 7
65109: PUSH
65110: LD_VAR 0 2
65114: PUSH
65115: LD_VAR 0 4
65119: ARRAY
65120: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65121: LD_ADDR_VAR 0 5
65125: PUSH
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_VAR 0 4
65140: ARRAY
65141: PUSH
65142: LD_INT 1
65144: ARRAY
65145: PPUSH
65146: LD_VAR 0 2
65150: PUSH
65151: LD_VAR 0 4
65155: ARRAY
65156: PUSH
65157: LD_INT 2
65159: ARRAY
65160: PPUSH
65161: CALL_OW 297
65165: ST_TO_ADDR
// end ; end ;
65166: GO 65055
65168: POP
65169: POP
// result := hex ;
65170: LD_ADDR_VAR 0 3
65174: PUSH
65175: LD_VAR 0 7
65179: ST_TO_ADDR
// end ;
65180: LD_VAR 0 3
65184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65185: LD_INT 0
65187: PPUSH
65188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65189: LD_VAR 0 1
65193: NOT
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_INT 21
65202: PUSH
65203: LD_INT 2
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 23
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PPUSH
65224: CALL_OW 69
65228: IN
65229: NOT
65230: OR
65231: IFFALSE 65235
// exit ;
65233: GO 65282
// for i = 1 to 3 do
65235: LD_ADDR_VAR 0 3
65239: PUSH
65240: DOUBLE
65241: LD_INT 1
65243: DEC
65244: ST_TO_ADDR
65245: LD_INT 3
65247: PUSH
65248: FOR_TO
65249: IFFALSE 65280
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65251: LD_VAR 0 1
65255: PPUSH
65256: CALL_OW 250
65260: PPUSH
65261: LD_VAR 0 1
65265: PPUSH
65266: CALL_OW 251
65270: PPUSH
65271: LD_INT 1
65273: PPUSH
65274: CALL_OW 453
65278: GO 65248
65280: POP
65281: POP
// end ;
65282: LD_VAR 0 2
65286: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65287: LD_INT 0
65289: PPUSH
65290: PPUSH
65291: PPUSH
65292: PPUSH
65293: PPUSH
65294: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65295: LD_VAR 0 1
65299: NOT
65300: PUSH
65301: LD_VAR 0 2
65305: NOT
65306: OR
65307: PUSH
65308: LD_VAR 0 1
65312: PPUSH
65313: CALL_OW 314
65317: OR
65318: IFFALSE 65322
// exit ;
65320: GO 65763
// x := GetX ( enemy_unit ) ;
65322: LD_ADDR_VAR 0 7
65326: PUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: CALL_OW 250
65336: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65337: LD_ADDR_VAR 0 8
65341: PUSH
65342: LD_VAR 0 2
65346: PPUSH
65347: CALL_OW 251
65351: ST_TO_ADDR
// if not x or not y then
65352: LD_VAR 0 7
65356: NOT
65357: PUSH
65358: LD_VAR 0 8
65362: NOT
65363: OR
65364: IFFALSE 65368
// exit ;
65366: GO 65763
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65368: LD_ADDR_VAR 0 6
65372: PUSH
65373: LD_VAR 0 7
65377: PPUSH
65378: LD_INT 0
65380: PPUSH
65381: LD_INT 4
65383: PPUSH
65384: CALL_OW 272
65388: PUSH
65389: LD_VAR 0 8
65393: PPUSH
65394: LD_INT 0
65396: PPUSH
65397: LD_INT 4
65399: PPUSH
65400: CALL_OW 273
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_VAR 0 7
65413: PPUSH
65414: LD_INT 1
65416: PPUSH
65417: LD_INT 4
65419: PPUSH
65420: CALL_OW 272
65424: PUSH
65425: LD_VAR 0 8
65429: PPUSH
65430: LD_INT 1
65432: PPUSH
65433: LD_INT 4
65435: PPUSH
65436: CALL_OW 273
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_VAR 0 7
65449: PPUSH
65450: LD_INT 2
65452: PPUSH
65453: LD_INT 4
65455: PPUSH
65456: CALL_OW 272
65460: PUSH
65461: LD_VAR 0 8
65465: PPUSH
65466: LD_INT 2
65468: PPUSH
65469: LD_INT 4
65471: PPUSH
65472: CALL_OW 273
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_VAR 0 7
65485: PPUSH
65486: LD_INT 3
65488: PPUSH
65489: LD_INT 4
65491: PPUSH
65492: CALL_OW 272
65496: PUSH
65497: LD_VAR 0 8
65501: PPUSH
65502: LD_INT 3
65504: PPUSH
65505: LD_INT 4
65507: PPUSH
65508: CALL_OW 273
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_VAR 0 7
65521: PPUSH
65522: LD_INT 4
65524: PPUSH
65525: LD_INT 4
65527: PPUSH
65528: CALL_OW 272
65532: PUSH
65533: LD_VAR 0 8
65537: PPUSH
65538: LD_INT 4
65540: PPUSH
65541: LD_INT 4
65543: PPUSH
65544: CALL_OW 273
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_VAR 0 7
65557: PPUSH
65558: LD_INT 5
65560: PPUSH
65561: LD_INT 4
65563: PPUSH
65564: CALL_OW 272
65568: PUSH
65569: LD_VAR 0 8
65573: PPUSH
65574: LD_INT 5
65576: PPUSH
65577: LD_INT 4
65579: PPUSH
65580: CALL_OW 273
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// for i = tmp downto 1 do
65597: LD_ADDR_VAR 0 4
65601: PUSH
65602: DOUBLE
65603: LD_VAR 0 6
65607: INC
65608: ST_TO_ADDR
65609: LD_INT 1
65611: PUSH
65612: FOR_DOWNTO
65613: IFFALSE 65714
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65615: LD_VAR 0 6
65619: PUSH
65620: LD_VAR 0 4
65624: ARRAY
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 6
65634: PUSH
65635: LD_VAR 0 4
65639: ARRAY
65640: PUSH
65641: LD_INT 2
65643: ARRAY
65644: PPUSH
65645: CALL_OW 488
65649: NOT
65650: PUSH
65651: LD_VAR 0 6
65655: PUSH
65656: LD_VAR 0 4
65660: ARRAY
65661: PUSH
65662: LD_INT 1
65664: ARRAY
65665: PPUSH
65666: LD_VAR 0 6
65670: PUSH
65671: LD_VAR 0 4
65675: ARRAY
65676: PUSH
65677: LD_INT 2
65679: ARRAY
65680: PPUSH
65681: CALL_OW 428
65685: PUSH
65686: LD_INT 0
65688: NONEQUAL
65689: OR
65690: IFFALSE 65712
// tmp := Delete ( tmp , i ) ;
65692: LD_ADDR_VAR 0 6
65696: PUSH
65697: LD_VAR 0 6
65701: PPUSH
65702: LD_VAR 0 4
65706: PPUSH
65707: CALL_OW 3
65711: ST_TO_ADDR
65712: GO 65612
65714: POP
65715: POP
// j := GetClosestHex ( unit , tmp ) ;
65716: LD_ADDR_VAR 0 5
65720: PUSH
65721: LD_VAR 0 1
65725: PPUSH
65726: LD_VAR 0 6
65730: PPUSH
65731: CALL 65016 0 2
65735: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65736: LD_VAR 0 1
65740: PPUSH
65741: LD_VAR 0 5
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PPUSH
65750: LD_VAR 0 5
65754: PUSH
65755: LD_INT 2
65757: ARRAY
65758: PPUSH
65759: CALL_OW 111
// end ;
65763: LD_VAR 0 3
65767: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65768: LD_INT 0
65770: PPUSH
65771: PPUSH
65772: PPUSH
// uc_side = 0 ;
65773: LD_ADDR_OWVAR 20
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// uc_nation = 0 ;
65781: LD_ADDR_OWVAR 21
65785: PUSH
65786: LD_INT 0
65788: ST_TO_ADDR
// InitHc_All ( ) ;
65789: CALL_OW 584
// InitVc ;
65793: CALL_OW 20
// if mastodonts then
65797: LD_VAR 0 6
65801: IFFALSE 65868
// for i = 1 to mastodonts do
65803: LD_ADDR_VAR 0 11
65807: PUSH
65808: DOUBLE
65809: LD_INT 1
65811: DEC
65812: ST_TO_ADDR
65813: LD_VAR 0 6
65817: PUSH
65818: FOR_TO
65819: IFFALSE 65866
// begin vc_chassis := 31 ;
65821: LD_ADDR_OWVAR 37
65825: PUSH
65826: LD_INT 31
65828: ST_TO_ADDR
// vc_control := control_rider ;
65829: LD_ADDR_OWVAR 38
65833: PUSH
65834: LD_INT 4
65836: ST_TO_ADDR
// animal := CreateVehicle ;
65837: LD_ADDR_VAR 0 12
65841: PUSH
65842: CALL_OW 45
65846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65847: LD_VAR 0 12
65851: PPUSH
65852: LD_VAR 0 8
65856: PPUSH
65857: LD_INT 0
65859: PPUSH
65860: CALL 68056 0 3
// end ;
65864: GO 65818
65866: POP
65867: POP
// if horses then
65868: LD_VAR 0 5
65872: IFFALSE 65939
// for i = 1 to horses do
65874: LD_ADDR_VAR 0 11
65878: PUSH
65879: DOUBLE
65880: LD_INT 1
65882: DEC
65883: ST_TO_ADDR
65884: LD_VAR 0 5
65888: PUSH
65889: FOR_TO
65890: IFFALSE 65937
// begin hc_class := 21 ;
65892: LD_ADDR_OWVAR 28
65896: PUSH
65897: LD_INT 21
65899: ST_TO_ADDR
// hc_gallery :=  ;
65900: LD_ADDR_OWVAR 33
65904: PUSH
65905: LD_STRING 
65907: ST_TO_ADDR
// animal := CreateHuman ;
65908: LD_ADDR_VAR 0 12
65912: PUSH
65913: CALL_OW 44
65917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65918: LD_VAR 0 12
65922: PPUSH
65923: LD_VAR 0 8
65927: PPUSH
65928: LD_INT 0
65930: PPUSH
65931: CALL 68056 0 3
// end ;
65935: GO 65889
65937: POP
65938: POP
// if birds then
65939: LD_VAR 0 1
65943: IFFALSE 66010
// for i = 1 to birds do
65945: LD_ADDR_VAR 0 11
65949: PUSH
65950: DOUBLE
65951: LD_INT 1
65953: DEC
65954: ST_TO_ADDR
65955: LD_VAR 0 1
65959: PUSH
65960: FOR_TO
65961: IFFALSE 66008
// begin hc_class = 18 ;
65963: LD_ADDR_OWVAR 28
65967: PUSH
65968: LD_INT 18
65970: ST_TO_ADDR
// hc_gallery =  ;
65971: LD_ADDR_OWVAR 33
65975: PUSH
65976: LD_STRING 
65978: ST_TO_ADDR
// animal := CreateHuman ;
65979: LD_ADDR_VAR 0 12
65983: PUSH
65984: CALL_OW 44
65988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65989: LD_VAR 0 12
65993: PPUSH
65994: LD_VAR 0 8
65998: PPUSH
65999: LD_INT 0
66001: PPUSH
66002: CALL 68056 0 3
// end ;
66006: GO 65960
66008: POP
66009: POP
// if tigers then
66010: LD_VAR 0 2
66014: IFFALSE 66098
// for i = 1 to tigers do
66016: LD_ADDR_VAR 0 11
66020: PUSH
66021: DOUBLE
66022: LD_INT 1
66024: DEC
66025: ST_TO_ADDR
66026: LD_VAR 0 2
66030: PUSH
66031: FOR_TO
66032: IFFALSE 66096
// begin hc_class = class_tiger ;
66034: LD_ADDR_OWVAR 28
66038: PUSH
66039: LD_INT 14
66041: ST_TO_ADDR
// hc_gallery =  ;
66042: LD_ADDR_OWVAR 33
66046: PUSH
66047: LD_STRING 
66049: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66050: LD_ADDR_OWVAR 35
66054: PUSH
66055: LD_INT 7
66057: NEG
66058: PPUSH
66059: LD_INT 7
66061: PPUSH
66062: CALL_OW 12
66066: ST_TO_ADDR
// animal := CreateHuman ;
66067: LD_ADDR_VAR 0 12
66071: PUSH
66072: CALL_OW 44
66076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66077: LD_VAR 0 12
66081: PPUSH
66082: LD_VAR 0 8
66086: PPUSH
66087: LD_INT 0
66089: PPUSH
66090: CALL 68056 0 3
// end ;
66094: GO 66031
66096: POP
66097: POP
// if apemans then
66098: LD_VAR 0 3
66102: IFFALSE 66225
// for i = 1 to apemans do
66104: LD_ADDR_VAR 0 11
66108: PUSH
66109: DOUBLE
66110: LD_INT 1
66112: DEC
66113: ST_TO_ADDR
66114: LD_VAR 0 3
66118: PUSH
66119: FOR_TO
66120: IFFALSE 66223
// begin hc_class = class_apeman ;
66122: LD_ADDR_OWVAR 28
66126: PUSH
66127: LD_INT 12
66129: ST_TO_ADDR
// hc_gallery =  ;
66130: LD_ADDR_OWVAR 33
66134: PUSH
66135: LD_STRING 
66137: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66138: LD_ADDR_OWVAR 35
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PPUSH
66147: LD_INT 2
66149: PPUSH
66150: CALL_OW 12
66154: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66155: LD_ADDR_OWVAR 31
66159: PUSH
66160: LD_INT 1
66162: PPUSH
66163: LD_INT 3
66165: PPUSH
66166: CALL_OW 12
66170: PUSH
66171: LD_INT 1
66173: PPUSH
66174: LD_INT 3
66176: PPUSH
66177: CALL_OW 12
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: ST_TO_ADDR
// animal := CreateHuman ;
66194: LD_ADDR_VAR 0 12
66198: PUSH
66199: CALL_OW 44
66203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66204: LD_VAR 0 12
66208: PPUSH
66209: LD_VAR 0 8
66213: PPUSH
66214: LD_INT 0
66216: PPUSH
66217: CALL 68056 0 3
// end ;
66221: GO 66119
66223: POP
66224: POP
// if enchidnas then
66225: LD_VAR 0 4
66229: IFFALSE 66296
// for i = 1 to enchidnas do
66231: LD_ADDR_VAR 0 11
66235: PUSH
66236: DOUBLE
66237: LD_INT 1
66239: DEC
66240: ST_TO_ADDR
66241: LD_VAR 0 4
66245: PUSH
66246: FOR_TO
66247: IFFALSE 66294
// begin hc_class = 13 ;
66249: LD_ADDR_OWVAR 28
66253: PUSH
66254: LD_INT 13
66256: ST_TO_ADDR
// hc_gallery =  ;
66257: LD_ADDR_OWVAR 33
66261: PUSH
66262: LD_STRING 
66264: ST_TO_ADDR
// animal := CreateHuman ;
66265: LD_ADDR_VAR 0 12
66269: PUSH
66270: CALL_OW 44
66274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66275: LD_VAR 0 12
66279: PPUSH
66280: LD_VAR 0 8
66284: PPUSH
66285: LD_INT 0
66287: PPUSH
66288: CALL 68056 0 3
// end ;
66292: GO 66246
66294: POP
66295: POP
// if fishes then
66296: LD_VAR 0 7
66300: IFFALSE 66367
// for i = 1 to fishes do
66302: LD_ADDR_VAR 0 11
66306: PUSH
66307: DOUBLE
66308: LD_INT 1
66310: DEC
66311: ST_TO_ADDR
66312: LD_VAR 0 7
66316: PUSH
66317: FOR_TO
66318: IFFALSE 66365
// begin hc_class = 20 ;
66320: LD_ADDR_OWVAR 28
66324: PUSH
66325: LD_INT 20
66327: ST_TO_ADDR
// hc_gallery =  ;
66328: LD_ADDR_OWVAR 33
66332: PUSH
66333: LD_STRING 
66335: ST_TO_ADDR
// animal := CreateHuman ;
66336: LD_ADDR_VAR 0 12
66340: PUSH
66341: CALL_OW 44
66345: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66346: LD_VAR 0 12
66350: PPUSH
66351: LD_VAR 0 9
66355: PPUSH
66356: LD_INT 0
66358: PPUSH
66359: CALL 68056 0 3
// end ;
66363: GO 66317
66365: POP
66366: POP
// end ;
66367: LD_VAR 0 10
66371: RET
// export function WantHeal ( sci , unit ) ; begin
66372: LD_INT 0
66374: PPUSH
// if GetTaskList ( sci ) > 0 then
66375: LD_VAR 0 1
66379: PPUSH
66380: CALL_OW 437
66384: PUSH
66385: LD_INT 0
66387: GREATER
66388: IFFALSE 66458
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66390: LD_VAR 0 1
66394: PPUSH
66395: CALL_OW 437
66399: PUSH
66400: LD_INT 1
66402: ARRAY
66403: PUSH
66404: LD_INT 1
66406: ARRAY
66407: PUSH
66408: LD_STRING l
66410: EQUAL
66411: PUSH
66412: LD_VAR 0 1
66416: PPUSH
66417: CALL_OW 437
66421: PUSH
66422: LD_INT 1
66424: ARRAY
66425: PUSH
66426: LD_INT 4
66428: ARRAY
66429: PUSH
66430: LD_VAR 0 2
66434: EQUAL
66435: AND
66436: IFFALSE 66448
// result := true else
66438: LD_ADDR_VAR 0 3
66442: PUSH
66443: LD_INT 1
66445: ST_TO_ADDR
66446: GO 66456
// result := false ;
66448: LD_ADDR_VAR 0 3
66452: PUSH
66453: LD_INT 0
66455: ST_TO_ADDR
// end else
66456: GO 66466
// result := false ;
66458: LD_ADDR_VAR 0 3
66462: PUSH
66463: LD_INT 0
66465: ST_TO_ADDR
// end ;
66466: LD_VAR 0 3
66470: RET
// export function HealTarget ( sci ) ; begin
66471: LD_INT 0
66473: PPUSH
// if not sci then
66474: LD_VAR 0 1
66478: NOT
66479: IFFALSE 66483
// exit ;
66481: GO 66548
// result := 0 ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: LD_INT 0
66490: ST_TO_ADDR
// if GetTaskList ( sci ) then
66491: LD_VAR 0 1
66495: PPUSH
66496: CALL_OW 437
66500: IFFALSE 66548
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66502: LD_VAR 0 1
66506: PPUSH
66507: CALL_OW 437
66511: PUSH
66512: LD_INT 1
66514: ARRAY
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: PUSH
66520: LD_STRING l
66522: EQUAL
66523: IFFALSE 66548
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66525: LD_ADDR_VAR 0 2
66529: PUSH
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 437
66539: PUSH
66540: LD_INT 1
66542: ARRAY
66543: PUSH
66544: LD_INT 4
66546: ARRAY
66547: ST_TO_ADDR
// end ;
66548: LD_VAR 0 2
66552: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66553: LD_INT 0
66555: PPUSH
66556: PPUSH
66557: PPUSH
66558: PPUSH
// if not base_units then
66559: LD_VAR 0 1
66563: NOT
66564: IFFALSE 66568
// exit ;
66566: GO 66655
// result := false ;
66568: LD_ADDR_VAR 0 2
66572: PUSH
66573: LD_INT 0
66575: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66576: LD_ADDR_VAR 0 5
66580: PUSH
66581: LD_VAR 0 1
66585: PPUSH
66586: LD_INT 21
66588: PUSH
66589: LD_INT 3
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PPUSH
66596: CALL_OW 72
66600: ST_TO_ADDR
// if not tmp then
66601: LD_VAR 0 5
66605: NOT
66606: IFFALSE 66610
// exit ;
66608: GO 66655
// for i in tmp do
66610: LD_ADDR_VAR 0 3
66614: PUSH
66615: LD_VAR 0 5
66619: PUSH
66620: FOR_IN
66621: IFFALSE 66653
// begin result := EnemyInRange ( i , 22 ) ;
66623: LD_ADDR_VAR 0 2
66627: PUSH
66628: LD_VAR 0 3
66632: PPUSH
66633: LD_INT 22
66635: PPUSH
66636: CALL 64891 0 2
66640: ST_TO_ADDR
// if result then
66641: LD_VAR 0 2
66645: IFFALSE 66651
// exit ;
66647: POP
66648: POP
66649: GO 66655
// end ;
66651: GO 66620
66653: POP
66654: POP
// end ;
66655: LD_VAR 0 2
66659: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66660: LD_INT 0
66662: PPUSH
66663: PPUSH
// if not units then
66664: LD_VAR 0 1
66668: NOT
66669: IFFALSE 66673
// exit ;
66671: GO 66743
// result := [ ] ;
66673: LD_ADDR_VAR 0 3
66677: PUSH
66678: EMPTY
66679: ST_TO_ADDR
// for i in units do
66680: LD_ADDR_VAR 0 4
66684: PUSH
66685: LD_VAR 0 1
66689: PUSH
66690: FOR_IN
66691: IFFALSE 66741
// if GetTag ( i ) = tag then
66693: LD_VAR 0 4
66697: PPUSH
66698: CALL_OW 110
66702: PUSH
66703: LD_VAR 0 2
66707: EQUAL
66708: IFFALSE 66739
// result := Replace ( result , result + 1 , i ) ;
66710: LD_ADDR_VAR 0 3
66714: PUSH
66715: LD_VAR 0 3
66719: PPUSH
66720: LD_VAR 0 3
66724: PUSH
66725: LD_INT 1
66727: PLUS
66728: PPUSH
66729: LD_VAR 0 4
66733: PPUSH
66734: CALL_OW 1
66738: ST_TO_ADDR
66739: GO 66690
66741: POP
66742: POP
// end ;
66743: LD_VAR 0 3
66747: RET
// export function IsDriver ( un ) ; begin
66748: LD_INT 0
66750: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 1
66760: PUSH
66761: LD_INT 55
66763: PUSH
66764: EMPTY
66765: LIST
66766: PPUSH
66767: CALL_OW 69
66771: IN
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 2
66777: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
// list := [ ] ;
66782: LD_ADDR_VAR 0 5
66786: PUSH
66787: EMPTY
66788: ST_TO_ADDR
// case d of 0 :
66789: LD_VAR 0 3
66793: PUSH
66794: LD_INT 0
66796: DOUBLE
66797: EQUAL
66798: IFTRUE 66802
66800: GO 66935
66802: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66803: LD_ADDR_VAR 0 5
66807: PUSH
66808: LD_VAR 0 1
66812: PUSH
66813: LD_INT 4
66815: MINUS
66816: PUSH
66817: LD_VAR 0 2
66821: PUSH
66822: LD_INT 4
66824: MINUS
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_INT 3
66841: MINUS
66842: PUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 4
66863: PLUS
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: PUSH
66878: LD_VAR 0 1
66882: PUSH
66883: LD_INT 3
66885: PLUS
66886: PUSH
66887: LD_VAR 0 2
66891: PUSH
66892: LD_INT 3
66894: PLUS
66895: PUSH
66896: LD_INT 5
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: PUSH
66904: LD_VAR 0 1
66908: PUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_INT 4
66916: PLUS
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: ST_TO_ADDR
// end ; 1 :
66933: GO 67633
66935: LD_INT 1
66937: DOUBLE
66938: EQUAL
66939: IFTRUE 66943
66941: GO 67076
66943: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66944: LD_ADDR_VAR 0 5
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_INT 4
66961: MINUS
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: PUSH
66971: LD_VAR 0 1
66975: PUSH
66976: LD_INT 3
66978: MINUS
66979: PUSH
66980: LD_VAR 0 2
66984: PUSH
66985: LD_INT 3
66987: MINUS
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 1
67001: PUSH
67002: LD_INT 4
67004: MINUS
67005: PUSH
67006: LD_VAR 0 2
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: PUSH
67019: LD_VAR 0 1
67023: PUSH
67024: LD_VAR 0 2
67028: PUSH
67029: LD_INT 3
67031: PLUS
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: LIST
67040: PUSH
67041: LD_VAR 0 1
67045: PUSH
67046: LD_INT 4
67048: PLUS
67049: PUSH
67050: LD_VAR 0 2
67054: PUSH
67055: LD_INT 4
67057: PLUS
67058: PUSH
67059: LD_INT 5
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: LIST
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// end ; 2 :
67074: GO 67633
67076: LD_INT 2
67078: DOUBLE
67079: EQUAL
67080: IFTRUE 67084
67082: GO 67213
67084: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67085: LD_ADDR_VAR 0 5
67089: PUSH
67090: LD_VAR 0 1
67094: PUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 3
67102: MINUS
67103: PUSH
67104: LD_INT 3
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: PUSH
67112: LD_VAR 0 1
67116: PUSH
67117: LD_INT 4
67119: PLUS
67120: PUSH
67121: LD_VAR 0 2
67125: PUSH
67126: LD_INT 4
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_VAR 0 2
67143: PUSH
67144: LD_INT 4
67146: PLUS
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_INT 3
67163: MINUS
67164: PUSH
67165: LD_VAR 0 2
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: PUSH
67178: LD_VAR 0 1
67182: PUSH
67183: LD_INT 4
67185: MINUS
67186: PUSH
67187: LD_VAR 0 2
67191: PUSH
67192: LD_INT 4
67194: MINUS
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// end ; 3 :
67211: GO 67633
67213: LD_INT 3
67215: DOUBLE
67216: EQUAL
67217: IFTRUE 67221
67219: GO 67354
67221: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67222: LD_ADDR_VAR 0 5
67226: PUSH
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 3
67234: PLUS
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: LD_INT 4
67256: PLUS
67257: PUSH
67258: LD_VAR 0 2
67262: PUSH
67263: LD_INT 4
67265: PLUS
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: PUSH
67275: LD_VAR 0 1
67279: PUSH
67280: LD_INT 4
67282: MINUS
67283: PUSH
67284: LD_VAR 0 2
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: PUSH
67297: LD_VAR 0 1
67301: PUSH
67302: LD_VAR 0 2
67306: PUSH
67307: LD_INT 4
67309: MINUS
67310: PUSH
67311: LD_INT 3
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: LD_INT 3
67326: MINUS
67327: PUSH
67328: LD_VAR 0 2
67332: PUSH
67333: LD_INT 3
67335: MINUS
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: ST_TO_ADDR
// end ; 4 :
67352: GO 67633
67354: LD_INT 4
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67362
67360: GO 67495
67362: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67363: LD_ADDR_VAR 0 5
67367: PUSH
67368: LD_VAR 0 1
67372: PUSH
67373: LD_VAR 0 2
67377: PUSH
67378: LD_INT 4
67380: PLUS
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: PUSH
67390: LD_VAR 0 1
67394: PUSH
67395: LD_INT 3
67397: PLUS
67398: PUSH
67399: LD_VAR 0 2
67403: PUSH
67404: LD_INT 3
67406: PLUS
67407: PUSH
67408: LD_INT 5
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: LD_INT 4
67423: PLUS
67424: PUSH
67425: LD_VAR 0 2
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: PUSH
67438: LD_VAR 0 1
67442: PUSH
67443: LD_VAR 0 2
67447: PUSH
67448: LD_INT 3
67450: MINUS
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: PUSH
67460: LD_VAR 0 1
67464: PUSH
67465: LD_INT 4
67467: MINUS
67468: PUSH
67469: LD_VAR 0 2
67473: PUSH
67474: LD_INT 4
67476: MINUS
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// end ; 5 :
67493: GO 67633
67495: LD_INT 5
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67503
67501: GO 67632
67503: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67504: LD_ADDR_VAR 0 5
67508: PUSH
67509: LD_VAR 0 1
67513: PUSH
67514: LD_INT 4
67516: MINUS
67517: PUSH
67518: LD_VAR 0 2
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: LIST
67530: PUSH
67531: LD_VAR 0 1
67535: PUSH
67536: LD_VAR 0 2
67540: PUSH
67541: LD_INT 4
67543: MINUS
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: PUSH
67553: LD_VAR 0 1
67557: PUSH
67558: LD_INT 4
67560: PLUS
67561: PUSH
67562: LD_VAR 0 2
67566: PUSH
67567: LD_INT 4
67569: PLUS
67570: PUSH
67571: LD_INT 5
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: PUSH
67579: LD_VAR 0 1
67583: PUSH
67584: LD_INT 3
67586: PLUS
67587: PUSH
67588: LD_VAR 0 2
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_VAR 0 1
67605: PUSH
67606: LD_VAR 0 2
67610: PUSH
67611: LD_INT 3
67613: PLUS
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// end ; end ;
67630: GO 67633
67632: POP
// result := list ;
67633: LD_ADDR_VAR 0 4
67637: PUSH
67638: LD_VAR 0 5
67642: ST_TO_ADDR
// end ;
67643: LD_VAR 0 4
67647: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67648: LD_INT 0
67650: PPUSH
67651: PPUSH
67652: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67653: LD_VAR 0 1
67657: NOT
67658: PUSH
67659: LD_VAR 0 2
67663: PUSH
67664: LD_INT 1
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: LD_INT 4
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: IN
67682: NOT
67683: OR
67684: IFFALSE 67688
// exit ;
67686: GO 67780
// tmp := [ ] ;
67688: LD_ADDR_VAR 0 5
67692: PUSH
67693: EMPTY
67694: ST_TO_ADDR
// for i in units do
67695: LD_ADDR_VAR 0 4
67699: PUSH
67700: LD_VAR 0 1
67704: PUSH
67705: FOR_IN
67706: IFFALSE 67749
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67708: LD_ADDR_VAR 0 5
67712: PUSH
67713: LD_VAR 0 5
67717: PPUSH
67718: LD_VAR 0 5
67722: PUSH
67723: LD_INT 1
67725: PLUS
67726: PPUSH
67727: LD_VAR 0 4
67731: PPUSH
67732: LD_VAR 0 2
67736: PPUSH
67737: CALL_OW 259
67741: PPUSH
67742: CALL_OW 2
67746: ST_TO_ADDR
67747: GO 67705
67749: POP
67750: POP
// if not tmp then
67751: LD_VAR 0 5
67755: NOT
67756: IFFALSE 67760
// exit ;
67758: GO 67780
// result := SortListByListDesc ( units , tmp ) ;
67760: LD_ADDR_VAR 0 3
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: LD_VAR 0 5
67774: PPUSH
67775: CALL_OW 77
67779: ST_TO_ADDR
// end ;
67780: LD_VAR 0 3
67784: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67785: LD_INT 0
67787: PPUSH
67788: PPUSH
67789: PPUSH
// result := false ;
67790: LD_ADDR_VAR 0 3
67794: PUSH
67795: LD_INT 0
67797: ST_TO_ADDR
// x := GetX ( building ) ;
67798: LD_ADDR_VAR 0 4
67802: PUSH
67803: LD_VAR 0 2
67807: PPUSH
67808: CALL_OW 250
67812: ST_TO_ADDR
// y := GetY ( building ) ;
67813: LD_ADDR_VAR 0 5
67817: PUSH
67818: LD_VAR 0 2
67822: PPUSH
67823: CALL_OW 251
67827: ST_TO_ADDR
// if not building or not x or not y then
67828: LD_VAR 0 2
67832: NOT
67833: PUSH
67834: LD_VAR 0 4
67838: NOT
67839: OR
67840: PUSH
67841: LD_VAR 0 5
67845: NOT
67846: OR
67847: IFFALSE 67851
// exit ;
67849: GO 67943
// if GetTaskList ( unit ) then
67851: LD_VAR 0 1
67855: PPUSH
67856: CALL_OW 437
67860: IFFALSE 67943
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67862: LD_STRING e
67864: PUSH
67865: LD_VAR 0 1
67869: PPUSH
67870: CALL_OW 437
67874: PUSH
67875: LD_INT 1
67877: ARRAY
67878: PUSH
67879: LD_INT 1
67881: ARRAY
67882: EQUAL
67883: PUSH
67884: LD_VAR 0 4
67888: PUSH
67889: LD_VAR 0 1
67893: PPUSH
67894: CALL_OW 437
67898: PUSH
67899: LD_INT 1
67901: ARRAY
67902: PUSH
67903: LD_INT 2
67905: ARRAY
67906: EQUAL
67907: AND
67908: PUSH
67909: LD_VAR 0 5
67913: PUSH
67914: LD_VAR 0 1
67918: PPUSH
67919: CALL_OW 437
67923: PUSH
67924: LD_INT 1
67926: ARRAY
67927: PUSH
67928: LD_INT 3
67930: ARRAY
67931: EQUAL
67932: AND
67933: IFFALSE 67943
// result := true end ;
67935: LD_ADDR_VAR 0 3
67939: PUSH
67940: LD_INT 1
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 3
67947: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67948: LD_INT 0
67950: PPUSH
// result := false ;
67951: LD_ADDR_VAR 0 4
67955: PUSH
67956: LD_INT 0
67958: ST_TO_ADDR
// if GetTaskList ( unit ) then
67959: LD_VAR 0 1
67963: PPUSH
67964: CALL_OW 437
67968: IFFALSE 68051
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67970: LD_STRING M
67972: PUSH
67973: LD_VAR 0 1
67977: PPUSH
67978: CALL_OW 437
67982: PUSH
67983: LD_INT 1
67985: ARRAY
67986: PUSH
67987: LD_INT 1
67989: ARRAY
67990: EQUAL
67991: PUSH
67992: LD_VAR 0 2
67996: PUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: CALL_OW 437
68006: PUSH
68007: LD_INT 1
68009: ARRAY
68010: PUSH
68011: LD_INT 2
68013: ARRAY
68014: EQUAL
68015: AND
68016: PUSH
68017: LD_VAR 0 3
68021: PUSH
68022: LD_VAR 0 1
68026: PPUSH
68027: CALL_OW 437
68031: PUSH
68032: LD_INT 1
68034: ARRAY
68035: PUSH
68036: LD_INT 3
68038: ARRAY
68039: EQUAL
68040: AND
68041: IFFALSE 68051
// result := true ;
68043: LD_ADDR_VAR 0 4
68047: PUSH
68048: LD_INT 1
68050: ST_TO_ADDR
// end ; end ;
68051: LD_VAR 0 4
68055: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68056: LD_INT 0
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
// if not unit or not area then
68062: LD_VAR 0 1
68066: NOT
68067: PUSH
68068: LD_VAR 0 2
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68242
// tmp := AreaToList ( area , i ) ;
68078: LD_ADDR_VAR 0 6
68082: PUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: LD_VAR 0 5
68092: PPUSH
68093: CALL_OW 517
68097: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68098: LD_ADDR_VAR 0 5
68102: PUSH
68103: DOUBLE
68104: LD_INT 1
68106: DEC
68107: ST_TO_ADDR
68108: LD_VAR 0 6
68112: PUSH
68113: LD_INT 1
68115: ARRAY
68116: PUSH
68117: FOR_TO
68118: IFFALSE 68240
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68120: LD_ADDR_VAR 0 7
68124: PUSH
68125: LD_VAR 0 6
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PUSH
68134: LD_VAR 0 5
68138: ARRAY
68139: PUSH
68140: LD_VAR 0 6
68144: PUSH
68145: LD_INT 2
68147: ARRAY
68148: PUSH
68149: LD_VAR 0 5
68153: ARRAY
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68159: LD_VAR 0 7
68163: PUSH
68164: LD_INT 1
68166: ARRAY
68167: PPUSH
68168: LD_VAR 0 7
68172: PUSH
68173: LD_INT 2
68175: ARRAY
68176: PPUSH
68177: CALL_OW 428
68181: PUSH
68182: LD_INT 0
68184: EQUAL
68185: IFFALSE 68238
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68187: LD_VAR 0 1
68191: PPUSH
68192: LD_VAR 0 7
68196: PUSH
68197: LD_INT 1
68199: ARRAY
68200: PPUSH
68201: LD_VAR 0 7
68205: PUSH
68206: LD_INT 2
68208: ARRAY
68209: PPUSH
68210: LD_VAR 0 3
68214: PPUSH
68215: CALL_OW 48
// result := IsPlaced ( unit ) ;
68219: LD_ADDR_VAR 0 4
68223: PUSH
68224: LD_VAR 0 1
68228: PPUSH
68229: CALL_OW 305
68233: ST_TO_ADDR
// exit ;
68234: POP
68235: POP
68236: GO 68242
// end ; end ;
68238: GO 68117
68240: POP
68241: POP
// end ;
68242: LD_VAR 0 4
68246: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68247: LD_INT 0
68249: PPUSH
68250: PPUSH
68251: PPUSH
// if not side or side > 8 then
68252: LD_VAR 0 1
68256: NOT
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 8
68265: GREATER
68266: OR
68267: IFFALSE 68271
// exit ;
68269: GO 68458
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68271: LD_ADDR_VAR 0 4
68275: PUSH
68276: LD_INT 22
68278: PUSH
68279: LD_VAR 0 1
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 21
68290: PUSH
68291: LD_INT 3
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PPUSH
68302: CALL_OW 69
68306: ST_TO_ADDR
// if not tmp then
68307: LD_VAR 0 4
68311: NOT
68312: IFFALSE 68316
// exit ;
68314: GO 68458
// enable_addtolog := true ;
68316: LD_ADDR_OWVAR 81
68320: PUSH
68321: LD_INT 1
68323: ST_TO_ADDR
// AddToLog ( [ ) ;
68324: LD_STRING [
68326: PPUSH
68327: CALL_OW 561
// for i in tmp do
68331: LD_ADDR_VAR 0 3
68335: PUSH
68336: LD_VAR 0 4
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68449
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68344: LD_STRING [
68346: PUSH
68347: LD_VAR 0 3
68351: PPUSH
68352: CALL_OW 266
68356: STR
68357: PUSH
68358: LD_STRING , 
68360: STR
68361: PUSH
68362: LD_VAR 0 3
68366: PPUSH
68367: CALL_OW 250
68371: STR
68372: PUSH
68373: LD_STRING , 
68375: STR
68376: PUSH
68377: LD_VAR 0 3
68381: PPUSH
68382: CALL_OW 251
68386: STR
68387: PUSH
68388: LD_STRING , 
68390: STR
68391: PUSH
68392: LD_VAR 0 3
68396: PPUSH
68397: CALL_OW 254
68401: STR
68402: PUSH
68403: LD_STRING , 
68405: STR
68406: PUSH
68407: LD_VAR 0 3
68411: PPUSH
68412: LD_INT 1
68414: PPUSH
68415: CALL_OW 268
68419: STR
68420: PUSH
68421: LD_STRING , 
68423: STR
68424: PUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: LD_INT 2
68432: PPUSH
68433: CALL_OW 268
68437: STR
68438: PUSH
68439: LD_STRING ],
68441: STR
68442: PPUSH
68443: CALL_OW 561
// end ;
68447: GO 68341
68449: POP
68450: POP
// AddToLog ( ]; ) ;
68451: LD_STRING ];
68453: PPUSH
68454: CALL_OW 561
// end ;
68458: LD_VAR 0 2
68462: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68463: LD_INT 0
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
// if not area or not rate or not max then
68470: LD_VAR 0 1
68474: NOT
68475: PUSH
68476: LD_VAR 0 2
68480: NOT
68481: OR
68482: PUSH
68483: LD_VAR 0 4
68487: NOT
68488: OR
68489: IFFALSE 68493
// exit ;
68491: GO 68685
// while 1 do
68493: LD_INT 1
68495: IFFALSE 68685
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68497: LD_ADDR_VAR 0 9
68501: PUSH
68502: LD_VAR 0 1
68506: PPUSH
68507: LD_INT 1
68509: PPUSH
68510: CALL_OW 287
68514: PUSH
68515: LD_INT 10
68517: MUL
68518: ST_TO_ADDR
// r := rate / 10 ;
68519: LD_ADDR_VAR 0 7
68523: PUSH
68524: LD_VAR 0 2
68528: PUSH
68529: LD_INT 10
68531: DIVREAL
68532: ST_TO_ADDR
// time := 1 1$00 ;
68533: LD_ADDR_VAR 0 8
68537: PUSH
68538: LD_INT 2100
68540: ST_TO_ADDR
// if amount < min then
68541: LD_VAR 0 9
68545: PUSH
68546: LD_VAR 0 3
68550: LESS
68551: IFFALSE 68569
// r := r * 2 else
68553: LD_ADDR_VAR 0 7
68557: PUSH
68558: LD_VAR 0 7
68562: PUSH
68563: LD_INT 2
68565: MUL
68566: ST_TO_ADDR
68567: GO 68595
// if amount > max then
68569: LD_VAR 0 9
68573: PUSH
68574: LD_VAR 0 4
68578: GREATER
68579: IFFALSE 68595
// r := r / 2 ;
68581: LD_ADDR_VAR 0 7
68585: PUSH
68586: LD_VAR 0 7
68590: PUSH
68591: LD_INT 2
68593: DIVREAL
68594: ST_TO_ADDR
// time := time / r ;
68595: LD_ADDR_VAR 0 8
68599: PUSH
68600: LD_VAR 0 8
68604: PUSH
68605: LD_VAR 0 7
68609: DIVREAL
68610: ST_TO_ADDR
// if time < 0 then
68611: LD_VAR 0 8
68615: PUSH
68616: LD_INT 0
68618: LESS
68619: IFFALSE 68636
// time := time * - 1 ;
68621: LD_ADDR_VAR 0 8
68625: PUSH
68626: LD_VAR 0 8
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: MUL
68635: ST_TO_ADDR
// wait ( time ) ;
68636: LD_VAR 0 8
68640: PPUSH
68641: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68645: LD_INT 35
68647: PPUSH
68648: LD_INT 875
68650: PPUSH
68651: CALL_OW 12
68655: PPUSH
68656: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68660: LD_INT 1
68662: PPUSH
68663: LD_INT 5
68665: PPUSH
68666: CALL_OW 12
68670: PPUSH
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_INT 1
68678: PPUSH
68679: CALL_OW 55
// end ;
68683: GO 68493
// end ;
68685: LD_VAR 0 5
68689: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68690: LD_INT 0
68692: PPUSH
68693: PPUSH
68694: PPUSH
68695: PPUSH
68696: PPUSH
68697: PPUSH
68698: PPUSH
68699: PPUSH
// if not turrets or not factories then
68700: LD_VAR 0 1
68704: NOT
68705: PUSH
68706: LD_VAR 0 2
68710: NOT
68711: OR
68712: IFFALSE 68716
// exit ;
68714: GO 69023
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68716: LD_ADDR_VAR 0 10
68720: PUSH
68721: LD_INT 5
68723: PUSH
68724: LD_INT 6
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 2
68733: PUSH
68734: LD_INT 4
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: LD_INT 5
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 24
68758: PUSH
68759: LD_INT 25
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 23
68768: PUSH
68769: LD_INT 27
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 42
68782: PUSH
68783: LD_INT 43
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 44
68792: PUSH
68793: LD_INT 46
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 45
68802: PUSH
68803: LD_INT 47
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// result := [ ] ;
68820: LD_ADDR_VAR 0 3
68824: PUSH
68825: EMPTY
68826: ST_TO_ADDR
// for i in turrets do
68827: LD_ADDR_VAR 0 4
68831: PUSH
68832: LD_VAR 0 1
68836: PUSH
68837: FOR_IN
68838: IFFALSE 69021
// begin nat := GetNation ( i ) ;
68840: LD_ADDR_VAR 0 7
68844: PUSH
68845: LD_VAR 0 4
68849: PPUSH
68850: CALL_OW 248
68854: ST_TO_ADDR
// weapon := 0 ;
68855: LD_ADDR_VAR 0 8
68859: PUSH
68860: LD_INT 0
68862: ST_TO_ADDR
// if not nat then
68863: LD_VAR 0 7
68867: NOT
68868: IFFALSE 68872
// continue ;
68870: GO 68837
// for j in list [ nat ] do
68872: LD_ADDR_VAR 0 5
68876: PUSH
68877: LD_VAR 0 10
68881: PUSH
68882: LD_VAR 0 7
68886: ARRAY
68887: PUSH
68888: FOR_IN
68889: IFFALSE 68930
// if GetBWeapon ( i ) = j [ 1 ] then
68891: LD_VAR 0 4
68895: PPUSH
68896: CALL_OW 269
68900: PUSH
68901: LD_VAR 0 5
68905: PUSH
68906: LD_INT 1
68908: ARRAY
68909: EQUAL
68910: IFFALSE 68928
// begin weapon := j [ 2 ] ;
68912: LD_ADDR_VAR 0 8
68916: PUSH
68917: LD_VAR 0 5
68921: PUSH
68922: LD_INT 2
68924: ARRAY
68925: ST_TO_ADDR
// break ;
68926: GO 68930
// end ;
68928: GO 68888
68930: POP
68931: POP
// if not weapon then
68932: LD_VAR 0 8
68936: NOT
68937: IFFALSE 68941
// continue ;
68939: GO 68837
// for k in factories do
68941: LD_ADDR_VAR 0 6
68945: PUSH
68946: LD_VAR 0 2
68950: PUSH
68951: FOR_IN
68952: IFFALSE 69017
// begin weapons := AvailableWeaponList ( k ) ;
68954: LD_ADDR_VAR 0 9
68958: PUSH
68959: LD_VAR 0 6
68963: PPUSH
68964: CALL_OW 478
68968: ST_TO_ADDR
// if not weapons then
68969: LD_VAR 0 9
68973: NOT
68974: IFFALSE 68978
// continue ;
68976: GO 68951
// if weapon in weapons then
68978: LD_VAR 0 8
68982: PUSH
68983: LD_VAR 0 9
68987: IN
68988: IFFALSE 69015
// begin result := [ i , weapon ] ;
68990: LD_ADDR_VAR 0 3
68994: PUSH
68995: LD_VAR 0 4
68999: PUSH
69000: LD_VAR 0 8
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// exit ;
69009: POP
69010: POP
69011: POP
69012: POP
69013: GO 69023
// end ; end ;
69015: GO 68951
69017: POP
69018: POP
// end ;
69019: GO 68837
69021: POP
69022: POP
// end ;
69023: LD_VAR 0 3
69027: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69028: LD_INT 0
69030: PPUSH
// if not side or side > 8 then
69031: LD_VAR 0 3
69035: NOT
69036: PUSH
69037: LD_VAR 0 3
69041: PUSH
69042: LD_INT 8
69044: GREATER
69045: OR
69046: IFFALSE 69050
// exit ;
69048: GO 69109
// if not range then
69050: LD_VAR 0 4
69054: NOT
69055: IFFALSE 69066
// range := - 12 ;
69057: LD_ADDR_VAR 0 4
69061: PUSH
69062: LD_INT 12
69064: NEG
69065: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69066: LD_VAR 0 1
69070: PPUSH
69071: LD_VAR 0 2
69075: PPUSH
69076: LD_VAR 0 3
69080: PPUSH
69081: LD_VAR 0 4
69085: PPUSH
69086: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69090: LD_VAR 0 1
69094: PPUSH
69095: LD_VAR 0 2
69099: PPUSH
69100: LD_VAR 0 3
69104: PPUSH
69105: CALL_OW 331
// end ;
69109: LD_VAR 0 5
69113: RET
// export function Video ( mode ) ; begin
69114: LD_INT 0
69116: PPUSH
// ingame_video = mode ;
69117: LD_ADDR_OWVAR 52
69121: PUSH
69122: LD_VAR 0 1
69126: ST_TO_ADDR
// interface_hidden = mode ;
69127: LD_ADDR_OWVAR 54
69131: PUSH
69132: LD_VAR 0 1
69136: ST_TO_ADDR
// end ;
69137: LD_VAR 0 2
69141: RET
// export function Join ( array , element ) ; begin
69142: LD_INT 0
69144: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69145: LD_ADDR_VAR 0 3
69149: PUSH
69150: LD_VAR 0 1
69154: PPUSH
69155: LD_VAR 0 1
69159: PUSH
69160: LD_INT 1
69162: PLUS
69163: PPUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: CALL_OW 1
69173: ST_TO_ADDR
// end ;
69174: LD_VAR 0 3
69178: RET
// export function JoinUnion ( array , element ) ; begin
69179: LD_INT 0
69181: PPUSH
// result := array union element ;
69182: LD_ADDR_VAR 0 3
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: LD_VAR 0 2
69196: UNION
69197: ST_TO_ADDR
// end ;
69198: LD_VAR 0 3
69202: RET
// export function GetBehemoths ( side ) ; begin
69203: LD_INT 0
69205: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69206: LD_ADDR_VAR 0 2
69210: PUSH
69211: LD_INT 22
69213: PUSH
69214: LD_VAR 0 1
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 31
69225: PUSH
69226: LD_INT 25
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PPUSH
69237: CALL_OW 69
69241: ST_TO_ADDR
// end ;
69242: LD_VAR 0 2
69246: RET
// export function Shuffle ( array ) ; var i , index ; begin
69247: LD_INT 0
69249: PPUSH
69250: PPUSH
69251: PPUSH
// result := [ ] ;
69252: LD_ADDR_VAR 0 2
69256: PUSH
69257: EMPTY
69258: ST_TO_ADDR
// if not array then
69259: LD_VAR 0 1
69263: NOT
69264: IFFALSE 69268
// exit ;
69266: GO 69367
// Randomize ;
69268: CALL_OW 10
// for i = array downto 1 do
69272: LD_ADDR_VAR 0 3
69276: PUSH
69277: DOUBLE
69278: LD_VAR 0 1
69282: INC
69283: ST_TO_ADDR
69284: LD_INT 1
69286: PUSH
69287: FOR_DOWNTO
69288: IFFALSE 69365
// begin index := rand ( 1 , array ) ;
69290: LD_ADDR_VAR 0 4
69294: PUSH
69295: LD_INT 1
69297: PPUSH
69298: LD_VAR 0 1
69302: PPUSH
69303: CALL_OW 12
69307: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69308: LD_ADDR_VAR 0 2
69312: PUSH
69313: LD_VAR 0 2
69317: PPUSH
69318: LD_VAR 0 2
69322: PUSH
69323: LD_INT 1
69325: PLUS
69326: PPUSH
69327: LD_VAR 0 1
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PPUSH
69338: CALL_OW 2
69342: ST_TO_ADDR
// array := Delete ( array , index ) ;
69343: LD_ADDR_VAR 0 1
69347: PUSH
69348: LD_VAR 0 1
69352: PPUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: CALL_OW 3
69362: ST_TO_ADDR
// end ;
69363: GO 69287
69365: POP
69366: POP
// end ;
69367: LD_VAR 0 2
69371: RET
// export function GetBaseMaterials ( base ) ; begin
69372: LD_INT 0
69374: PPUSH
// result := [ 0 , 0 , 0 ] ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: LIST
69393: ST_TO_ADDR
// if not base then
69394: LD_VAR 0 1
69398: NOT
69399: IFFALSE 69403
// exit ;
69401: GO 69452
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69403: LD_ADDR_VAR 0 2
69407: PUSH
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_INT 1
69415: PPUSH
69416: CALL_OW 275
69420: PUSH
69421: LD_VAR 0 1
69425: PPUSH
69426: LD_INT 2
69428: PPUSH
69429: CALL_OW 275
69433: PUSH
69434: LD_VAR 0 1
69438: PPUSH
69439: LD_INT 3
69441: PPUSH
69442: CALL_OW 275
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: ST_TO_ADDR
// end ;
69452: LD_VAR 0 2
69456: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69457: LD_INT 0
69459: PPUSH
69460: PPUSH
// result := array ;
69461: LD_ADDR_VAR 0 3
69465: PUSH
69466: LD_VAR 0 1
69470: ST_TO_ADDR
// if size > 0 then
69471: LD_VAR 0 2
69475: PUSH
69476: LD_INT 0
69478: GREATER
69479: IFFALSE 69525
// for i := array downto size do
69481: LD_ADDR_VAR 0 4
69485: PUSH
69486: DOUBLE
69487: LD_VAR 0 1
69491: INC
69492: ST_TO_ADDR
69493: LD_VAR 0 2
69497: PUSH
69498: FOR_DOWNTO
69499: IFFALSE 69523
// result := Delete ( result , result ) ;
69501: LD_ADDR_VAR 0 3
69505: PUSH
69506: LD_VAR 0 3
69510: PPUSH
69511: LD_VAR 0 3
69515: PPUSH
69516: CALL_OW 3
69520: ST_TO_ADDR
69521: GO 69498
69523: POP
69524: POP
// end ;
69525: LD_VAR 0 3
69529: RET
// export function ComExit ( unit ) ; var tmp ; begin
69530: LD_INT 0
69532: PPUSH
69533: PPUSH
// if not IsInUnit ( unit ) then
69534: LD_VAR 0 1
69538: PPUSH
69539: CALL_OW 310
69543: NOT
69544: IFFALSE 69548
// exit ;
69546: GO 69608
// tmp := IsInUnit ( unit ) ;
69548: LD_ADDR_VAR 0 3
69552: PUSH
69553: LD_VAR 0 1
69557: PPUSH
69558: CALL_OW 310
69562: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69563: LD_VAR 0 3
69567: PPUSH
69568: CALL_OW 247
69572: PUSH
69573: LD_INT 2
69575: EQUAL
69576: IFFALSE 69589
// ComExitVehicle ( unit ) else
69578: LD_VAR 0 1
69582: PPUSH
69583: CALL_OW 121
69587: GO 69598
// ComExitBuilding ( unit ) ;
69589: LD_VAR 0 1
69593: PPUSH
69594: CALL_OW 122
// result := tmp ;
69598: LD_ADDR_VAR 0 2
69602: PUSH
69603: LD_VAR 0 3
69607: ST_TO_ADDR
// end ;
69608: LD_VAR 0 2
69612: RET
// export function ComExitAll ( units ) ; var i ; begin
69613: LD_INT 0
69615: PPUSH
69616: PPUSH
// if not units then
69617: LD_VAR 0 1
69621: NOT
69622: IFFALSE 69626
// exit ;
69624: GO 69652
// for i in units do
69626: LD_ADDR_VAR 0 3
69630: PUSH
69631: LD_VAR 0 1
69635: PUSH
69636: FOR_IN
69637: IFFALSE 69650
// ComExit ( i ) ;
69639: LD_VAR 0 3
69643: PPUSH
69644: CALL 69530 0 1
69648: GO 69636
69650: POP
69651: POP
// end ;
69652: LD_VAR 0 2
69656: RET
// export function ResetHc ; begin
69657: LD_INT 0
69659: PPUSH
// InitHc ;
69660: CALL_OW 19
// hc_importance := 0 ;
69664: LD_ADDR_OWVAR 32
69668: PUSH
69669: LD_INT 0
69671: ST_TO_ADDR
// end ;
69672: LD_VAR 0 1
69676: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69677: LD_INT 0
69679: PPUSH
69680: PPUSH
69681: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69682: LD_ADDR_VAR 0 6
69686: PUSH
69687: LD_VAR 0 1
69691: PUSH
69692: LD_VAR 0 3
69696: PLUS
69697: PUSH
69698: LD_INT 2
69700: DIV
69701: ST_TO_ADDR
// if _x < 0 then
69702: LD_VAR 0 6
69706: PUSH
69707: LD_INT 0
69709: LESS
69710: IFFALSE 69727
// _x := _x * - 1 ;
69712: LD_ADDR_VAR 0 6
69716: PUSH
69717: LD_VAR 0 6
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: MUL
69726: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69727: LD_ADDR_VAR 0 7
69731: PUSH
69732: LD_VAR 0 2
69736: PUSH
69737: LD_VAR 0 4
69741: PLUS
69742: PUSH
69743: LD_INT 2
69745: DIV
69746: ST_TO_ADDR
// if _y < 0 then
69747: LD_VAR 0 7
69751: PUSH
69752: LD_INT 0
69754: LESS
69755: IFFALSE 69772
// _y := _y * - 1 ;
69757: LD_ADDR_VAR 0 7
69761: PUSH
69762: LD_VAR 0 7
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: MUL
69771: ST_TO_ADDR
// result := [ _x , _y ] ;
69772: LD_ADDR_VAR 0 5
69776: PUSH
69777: LD_VAR 0 6
69781: PUSH
69782: LD_VAR 0 7
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: ST_TO_ADDR
// end ;
69791: LD_VAR 0 5
69795: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69796: LD_INT 0
69798: PPUSH
69799: PPUSH
69800: PPUSH
69801: PPUSH
// task := GetTaskList ( unit ) ;
69802: LD_ADDR_VAR 0 7
69806: PUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: CALL_OW 437
69816: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69817: LD_VAR 0 7
69821: NOT
69822: PUSH
69823: LD_VAR 0 1
69827: PPUSH
69828: LD_VAR 0 2
69832: PPUSH
69833: CALL_OW 308
69837: NOT
69838: AND
69839: IFFALSE 69843
// exit ;
69841: GO 69961
// if IsInArea ( unit , area ) then
69843: LD_VAR 0 1
69847: PPUSH
69848: LD_VAR 0 2
69852: PPUSH
69853: CALL_OW 308
69857: IFFALSE 69875
// begin ComMoveToArea ( unit , goAway ) ;
69859: LD_VAR 0 1
69863: PPUSH
69864: LD_VAR 0 3
69868: PPUSH
69869: CALL_OW 113
// exit ;
69873: GO 69961
// end ; if task [ 1 ] [ 1 ] <> M then
69875: LD_VAR 0 7
69879: PUSH
69880: LD_INT 1
69882: ARRAY
69883: PUSH
69884: LD_INT 1
69886: ARRAY
69887: PUSH
69888: LD_STRING M
69890: NONEQUAL
69891: IFFALSE 69895
// exit ;
69893: GO 69961
// x := task [ 1 ] [ 2 ] ;
69895: LD_ADDR_VAR 0 5
69899: PUSH
69900: LD_VAR 0 7
69904: PUSH
69905: LD_INT 1
69907: ARRAY
69908: PUSH
69909: LD_INT 2
69911: ARRAY
69912: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69913: LD_ADDR_VAR 0 6
69917: PUSH
69918: LD_VAR 0 7
69922: PUSH
69923: LD_INT 1
69925: ARRAY
69926: PUSH
69927: LD_INT 3
69929: ARRAY
69930: ST_TO_ADDR
// if InArea ( x , y , area ) then
69931: LD_VAR 0 5
69935: PPUSH
69936: LD_VAR 0 6
69940: PPUSH
69941: LD_VAR 0 2
69945: PPUSH
69946: CALL_OW 309
69950: IFFALSE 69961
// ComStop ( unit ) ;
69952: LD_VAR 0 1
69956: PPUSH
69957: CALL_OW 141
// end ;
69961: LD_VAR 0 4
69965: RET
// export function Abs ( value ) ; begin
69966: LD_INT 0
69968: PPUSH
// result := value ;
69969: LD_ADDR_VAR 0 2
69973: PUSH
69974: LD_VAR 0 1
69978: ST_TO_ADDR
// if value < 0 then
69979: LD_VAR 0 1
69983: PUSH
69984: LD_INT 0
69986: LESS
69987: IFFALSE 70004
// result := value * - 1 ;
69989: LD_ADDR_VAR 0 2
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: MUL
70003: ST_TO_ADDR
// end ;
70004: LD_VAR 0 2
70008: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70009: LD_INT 0
70011: PPUSH
70012: PPUSH
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
70017: PPUSH
70018: PPUSH
// if not unit or not building then
70019: LD_VAR 0 1
70023: NOT
70024: PUSH
70025: LD_VAR 0 2
70029: NOT
70030: OR
70031: IFFALSE 70035
// exit ;
70033: GO 70261
// x := GetX ( building ) ;
70035: LD_ADDR_VAR 0 4
70039: PUSH
70040: LD_VAR 0 2
70044: PPUSH
70045: CALL_OW 250
70049: ST_TO_ADDR
// y := GetY ( building ) ;
70050: LD_ADDR_VAR 0 6
70054: PUSH
70055: LD_VAR 0 2
70059: PPUSH
70060: CALL_OW 251
70064: ST_TO_ADDR
// d := GetDir ( building ) ;
70065: LD_ADDR_VAR 0 8
70069: PUSH
70070: LD_VAR 0 2
70074: PPUSH
70075: CALL_OW 254
70079: ST_TO_ADDR
// r := 4 ;
70080: LD_ADDR_VAR 0 9
70084: PUSH
70085: LD_INT 4
70087: ST_TO_ADDR
// for i := 1 to 5 do
70088: LD_ADDR_VAR 0 10
70092: PUSH
70093: DOUBLE
70094: LD_INT 1
70096: DEC
70097: ST_TO_ADDR
70098: LD_INT 5
70100: PUSH
70101: FOR_TO
70102: IFFALSE 70259
// begin _x := ShiftX ( x , d , r + i ) ;
70104: LD_ADDR_VAR 0 5
70108: PUSH
70109: LD_VAR 0 4
70113: PPUSH
70114: LD_VAR 0 8
70118: PPUSH
70119: LD_VAR 0 9
70123: PUSH
70124: LD_VAR 0 10
70128: PLUS
70129: PPUSH
70130: CALL_OW 272
70134: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70135: LD_ADDR_VAR 0 7
70139: PUSH
70140: LD_VAR 0 6
70144: PPUSH
70145: LD_VAR 0 8
70149: PPUSH
70150: LD_VAR 0 9
70154: PUSH
70155: LD_VAR 0 10
70159: PLUS
70160: PPUSH
70161: CALL_OW 273
70165: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70166: LD_VAR 0 5
70170: PPUSH
70171: LD_VAR 0 7
70175: PPUSH
70176: CALL_OW 488
70180: PUSH
70181: LD_VAR 0 5
70185: PPUSH
70186: LD_VAR 0 7
70190: PPUSH
70191: CALL_OW 428
70195: PPUSH
70196: CALL_OW 247
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: LD_INT 2
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: IN
70211: NOT
70212: AND
70213: IFFALSE 70257
// begin ComMoveXY ( unit , _x , _y ) ;
70215: LD_VAR 0 1
70219: PPUSH
70220: LD_VAR 0 5
70224: PPUSH
70225: LD_VAR 0 7
70229: PPUSH
70230: CALL_OW 111
// result := [ _x , _y ] ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 5
70243: PUSH
70244: LD_VAR 0 7
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: ST_TO_ADDR
// exit ;
70253: POP
70254: POP
70255: GO 70261
// end ; end ;
70257: GO 70101
70259: POP
70260: POP
// end ;
70261: LD_VAR 0 3
70265: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70266: LD_INT 0
70268: PPUSH
70269: PPUSH
70270: PPUSH
// result := 0 ;
70271: LD_ADDR_VAR 0 3
70275: PUSH
70276: LD_INT 0
70278: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70279: LD_VAR 0 1
70283: PUSH
70284: LD_INT 0
70286: LESS
70287: PUSH
70288: LD_VAR 0 1
70292: PUSH
70293: LD_INT 8
70295: GREATER
70296: OR
70297: PUSH
70298: LD_VAR 0 2
70302: PUSH
70303: LD_INT 0
70305: LESS
70306: OR
70307: PUSH
70308: LD_VAR 0 2
70312: PUSH
70313: LD_INT 8
70315: GREATER
70316: OR
70317: IFFALSE 70321
// exit ;
70319: GO 70396
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70321: LD_ADDR_VAR 0 4
70325: PUSH
70326: LD_INT 22
70328: PUSH
70329: LD_VAR 0 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PPUSH
70338: CALL_OW 69
70342: PUSH
70343: FOR_IN
70344: IFFALSE 70394
// begin un := UnitShoot ( i ) ;
70346: LD_ADDR_VAR 0 5
70350: PUSH
70351: LD_VAR 0 4
70355: PPUSH
70356: CALL_OW 504
70360: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70361: LD_VAR 0 5
70365: PPUSH
70366: CALL_OW 255
70370: PUSH
70371: LD_VAR 0 1
70375: EQUAL
70376: IFFALSE 70392
// begin result := un ;
70378: LD_ADDR_VAR 0 3
70382: PUSH
70383: LD_VAR 0 5
70387: ST_TO_ADDR
// exit ;
70388: POP
70389: POP
70390: GO 70396
// end ; end ;
70392: GO 70343
70394: POP
70395: POP
// end ;
70396: LD_VAR 0 3
70400: RET
// export function GetCargoBay ( units ) ; begin
70401: LD_INT 0
70403: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70404: LD_ADDR_VAR 0 2
70408: PUSH
70409: LD_VAR 0 1
70413: PPUSH
70414: LD_INT 2
70416: PUSH
70417: LD_INT 34
70419: PUSH
70420: LD_INT 12
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 34
70429: PUSH
70430: LD_INT 51
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 34
70439: PUSH
70440: LD_INT 32
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 34
70449: PUSH
70450: LD_EXP 93
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: PPUSH
70466: CALL_OW 72
70470: ST_TO_ADDR
// end ;
70471: LD_VAR 0 2
70475: RET
// export function Negate ( value ) ; begin
70476: LD_INT 0
70478: PPUSH
// result := not value ;
70479: LD_ADDR_VAR 0 2
70483: PUSH
70484: LD_VAR 0 1
70488: NOT
70489: ST_TO_ADDR
// end ;
70490: LD_VAR 0 2
70494: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
70495: LD_INT 0
70497: PPUSH
// if x1 = x2 then
70498: LD_VAR 0 1
70502: PUSH
70503: LD_VAR 0 3
70507: EQUAL
70508: IFFALSE 70542
// begin if y1 > y2 then
70510: LD_VAR 0 2
70514: PUSH
70515: LD_VAR 0 4
70519: GREATER
70520: IFFALSE 70532
// result := 0 else
70522: LD_ADDR_VAR 0 5
70526: PUSH
70527: LD_INT 0
70529: ST_TO_ADDR
70530: GO 70540
// result := 3 ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: LD_INT 3
70539: ST_TO_ADDR
// exit ;
70540: GO 70628
// end ; if y1 = y2 then
70542: LD_VAR 0 2
70546: PUSH
70547: LD_VAR 0 4
70551: EQUAL
70552: IFFALSE 70586
// begin if x1 > x2 then
70554: LD_VAR 0 1
70558: PUSH
70559: LD_VAR 0 3
70563: GREATER
70564: IFFALSE 70576
// result := 1 else
70566: LD_ADDR_VAR 0 5
70570: PUSH
70571: LD_INT 1
70573: ST_TO_ADDR
70574: GO 70584
// result := 4 ;
70576: LD_ADDR_VAR 0 5
70580: PUSH
70581: LD_INT 4
70583: ST_TO_ADDR
// exit ;
70584: GO 70628
// end ; if x1 > x2 and y1 > y2 then
70586: LD_VAR 0 1
70590: PUSH
70591: LD_VAR 0 3
70595: GREATER
70596: PUSH
70597: LD_VAR 0 2
70601: PUSH
70602: LD_VAR 0 4
70606: GREATER
70607: AND
70608: IFFALSE 70620
// result := 2 else
70610: LD_ADDR_VAR 0 5
70614: PUSH
70615: LD_INT 2
70617: ST_TO_ADDR
70618: GO 70628
// result := 5 ;
70620: LD_ADDR_VAR 0 5
70624: PUSH
70625: LD_INT 5
70627: ST_TO_ADDR
// end ;
70628: LD_VAR 0 5
70632: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
// if not driver or not IsInUnit ( driver ) then
70637: LD_VAR 0 1
70641: NOT
70642: PUSH
70643: LD_VAR 0 1
70647: PPUSH
70648: CALL_OW 310
70652: NOT
70653: OR
70654: IFFALSE 70658
// exit ;
70656: GO 70748
// vehicle := IsInUnit ( driver ) ;
70658: LD_ADDR_VAR 0 3
70662: PUSH
70663: LD_VAR 0 1
70667: PPUSH
70668: CALL_OW 310
70672: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70673: LD_VAR 0 1
70677: PPUSH
70678: LD_STRING \
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: PUSH
70708: LD_STRING E
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_VAR 0 3
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: LD_INT 0
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PPUSH
70744: CALL_OW 446
// end ;
70748: LD_VAR 0 2
70752: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70753: LD_INT 0
70755: PPUSH
70756: PPUSH
// if not driver or not IsInUnit ( driver ) then
70757: LD_VAR 0 1
70761: NOT
70762: PUSH
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 310
70772: NOT
70773: OR
70774: IFFALSE 70778
// exit ;
70776: GO 70868
// vehicle := IsInUnit ( driver ) ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_VAR 0 1
70787: PPUSH
70788: CALL_OW 310
70792: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_STRING \
70800: PUSH
70801: LD_INT 0
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: LD_INT 0
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: LD_INT 0
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: PUSH
70828: LD_STRING E
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_VAR 0 3
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 0
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PPUSH
70864: CALL_OW 447
// end ;
70868: LD_VAR 0 2
70872: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70873: LD_INT 0
70875: PPUSH
70876: PPUSH
70877: PPUSH
// tmp := [ ] ;
70878: LD_ADDR_VAR 0 5
70882: PUSH
70883: EMPTY
70884: ST_TO_ADDR
// for i in units do
70885: LD_ADDR_VAR 0 4
70889: PUSH
70890: LD_VAR 0 1
70894: PUSH
70895: FOR_IN
70896: IFFALSE 70934
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_VAR 0 5
70907: PPUSH
70908: LD_VAR 0 5
70912: PUSH
70913: LD_INT 1
70915: PLUS
70916: PPUSH
70917: LD_VAR 0 4
70921: PPUSH
70922: CALL_OW 256
70926: PPUSH
70927: CALL_OW 2
70931: ST_TO_ADDR
70932: GO 70895
70934: POP
70935: POP
// if not tmp then
70936: LD_VAR 0 5
70940: NOT
70941: IFFALSE 70945
// exit ;
70943: GO 70993
// if asc then
70945: LD_VAR 0 2
70949: IFFALSE 70973
// result := SortListByListAsc ( units , tmp ) else
70951: LD_ADDR_VAR 0 3
70955: PUSH
70956: LD_VAR 0 1
70960: PPUSH
70961: LD_VAR 0 5
70965: PPUSH
70966: CALL_OW 76
70970: ST_TO_ADDR
70971: GO 70993
// result := SortListByListDesc ( units , tmp ) ;
70973: LD_ADDR_VAR 0 3
70977: PUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: LD_VAR 0 5
70987: PPUSH
70988: CALL_OW 77
70992: ST_TO_ADDR
// end ;
70993: LD_VAR 0 3
70997: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70998: LD_INT 0
71000: PPUSH
71001: PPUSH
// task := GetTaskList ( mech ) ;
71002: LD_ADDR_VAR 0 4
71006: PUSH
71007: LD_VAR 0 1
71011: PPUSH
71012: CALL_OW 437
71016: ST_TO_ADDR
// if not task then
71017: LD_VAR 0 4
71021: NOT
71022: IFFALSE 71026
// exit ;
71024: GO 71068
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71026: LD_ADDR_VAR 0 3
71030: PUSH
71031: LD_VAR 0 4
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PUSH
71044: LD_STRING r
71046: EQUAL
71047: PUSH
71048: LD_VAR 0 4
71052: PUSH
71053: LD_INT 1
71055: ARRAY
71056: PUSH
71057: LD_INT 4
71059: ARRAY
71060: PUSH
71061: LD_VAR 0 2
71065: EQUAL
71066: AND
71067: ST_TO_ADDR
// end ;
71068: LD_VAR 0 3
71072: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71073: LD_INT 0
71075: PPUSH
// SetDir ( unit , d ) ;
71076: LD_VAR 0 1
71080: PPUSH
71081: LD_VAR 0 4
71085: PPUSH
71086: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71090: LD_VAR 0 1
71094: PPUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: LD_VAR 0 3
71104: PPUSH
71105: LD_VAR 0 5
71109: PPUSH
71110: CALL_OW 48
// end ;
71114: LD_VAR 0 6
71118: RET
// export function ToNaturalNumber ( number ) ; begin
71119: LD_INT 0
71121: PPUSH
// result := number div 1 ;
71122: LD_ADDR_VAR 0 2
71126: PUSH
71127: LD_VAR 0 1
71131: PUSH
71132: LD_INT 1
71134: DIV
71135: ST_TO_ADDR
// if number < 0 then
71136: LD_VAR 0 1
71140: PUSH
71141: LD_INT 0
71143: LESS
71144: IFFALSE 71154
// result := 0 ;
71146: LD_ADDR_VAR 0 2
71150: PUSH
71151: LD_INT 0
71153: ST_TO_ADDR
// end ;
71154: LD_VAR 0 2
71158: RET
// export function SortByClass ( units , class ) ; var un ; begin
71159: LD_INT 0
71161: PPUSH
71162: PPUSH
// if not units or not class then
71163: LD_VAR 0 1
71167: NOT
71168: PUSH
71169: LD_VAR 0 2
71173: NOT
71174: OR
71175: IFFALSE 71179
// exit ;
71177: GO 71274
// result := [ ] ;
71179: LD_ADDR_VAR 0 3
71183: PUSH
71184: EMPTY
71185: ST_TO_ADDR
// for un in units do
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: FOR_IN
71197: IFFALSE 71272
// if GetClass ( un ) = class then
71199: LD_VAR 0 4
71203: PPUSH
71204: CALL_OW 257
71208: PUSH
71209: LD_VAR 0 2
71213: EQUAL
71214: IFFALSE 71241
// result := Insert ( result , 1 , un ) else
71216: LD_ADDR_VAR 0 3
71220: PUSH
71221: LD_VAR 0 3
71225: PPUSH
71226: LD_INT 1
71228: PPUSH
71229: LD_VAR 0 4
71233: PPUSH
71234: CALL_OW 2
71238: ST_TO_ADDR
71239: GO 71270
// result := Replace ( result , result + 1 , un ) ;
71241: LD_ADDR_VAR 0 3
71245: PUSH
71246: LD_VAR 0 3
71250: PPUSH
71251: LD_VAR 0 3
71255: PUSH
71256: LD_INT 1
71258: PLUS
71259: PPUSH
71260: LD_VAR 0 4
71264: PPUSH
71265: CALL_OW 1
71269: ST_TO_ADDR
71270: GO 71196
71272: POP
71273: POP
// end ;
71274: LD_VAR 0 3
71278: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71279: LD_INT 0
71281: PPUSH
71282: PPUSH
71283: PPUSH
71284: PPUSH
71285: PPUSH
71286: PPUSH
71287: PPUSH
// result := [ ] ;
71288: LD_ADDR_VAR 0 4
71292: PUSH
71293: EMPTY
71294: ST_TO_ADDR
// if x - r < 0 then
71295: LD_VAR 0 1
71299: PUSH
71300: LD_VAR 0 3
71304: MINUS
71305: PUSH
71306: LD_INT 0
71308: LESS
71309: IFFALSE 71321
// min_x := 0 else
71311: LD_ADDR_VAR 0 8
71315: PUSH
71316: LD_INT 0
71318: ST_TO_ADDR
71319: GO 71337
// min_x := x - r ;
71321: LD_ADDR_VAR 0 8
71325: PUSH
71326: LD_VAR 0 1
71330: PUSH
71331: LD_VAR 0 3
71335: MINUS
71336: ST_TO_ADDR
// if y - r < 0 then
71337: LD_VAR 0 2
71341: PUSH
71342: LD_VAR 0 3
71346: MINUS
71347: PUSH
71348: LD_INT 0
71350: LESS
71351: IFFALSE 71363
// min_y := 0 else
71353: LD_ADDR_VAR 0 7
71357: PUSH
71358: LD_INT 0
71360: ST_TO_ADDR
71361: GO 71379
// min_y := y - r ;
71363: LD_ADDR_VAR 0 7
71367: PUSH
71368: LD_VAR 0 2
71372: PUSH
71373: LD_VAR 0 3
71377: MINUS
71378: ST_TO_ADDR
// max_x := x + r ;
71379: LD_ADDR_VAR 0 9
71383: PUSH
71384: LD_VAR 0 1
71388: PUSH
71389: LD_VAR 0 3
71393: PLUS
71394: ST_TO_ADDR
// max_y := y + r ;
71395: LD_ADDR_VAR 0 10
71399: PUSH
71400: LD_VAR 0 2
71404: PUSH
71405: LD_VAR 0 3
71409: PLUS
71410: ST_TO_ADDR
// for _x = min_x to max_x do
71411: LD_ADDR_VAR 0 5
71415: PUSH
71416: DOUBLE
71417: LD_VAR 0 8
71421: DEC
71422: ST_TO_ADDR
71423: LD_VAR 0 9
71427: PUSH
71428: FOR_TO
71429: IFFALSE 71530
// for _y = min_y to max_y do
71431: LD_ADDR_VAR 0 6
71435: PUSH
71436: DOUBLE
71437: LD_VAR 0 7
71441: DEC
71442: ST_TO_ADDR
71443: LD_VAR 0 10
71447: PUSH
71448: FOR_TO
71449: IFFALSE 71526
// begin if not ValidHex ( _x , _y ) then
71451: LD_VAR 0 5
71455: PPUSH
71456: LD_VAR 0 6
71460: PPUSH
71461: CALL_OW 488
71465: NOT
71466: IFFALSE 71470
// continue ;
71468: GO 71448
// if GetResourceTypeXY ( _x , _y ) then
71470: LD_VAR 0 5
71474: PPUSH
71475: LD_VAR 0 6
71479: PPUSH
71480: CALL_OW 283
71484: IFFALSE 71524
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71486: LD_ADDR_VAR 0 4
71490: PUSH
71491: LD_VAR 0 4
71495: PPUSH
71496: LD_VAR 0 4
71500: PUSH
71501: LD_INT 1
71503: PLUS
71504: PPUSH
71505: LD_VAR 0 5
71509: PUSH
71510: LD_VAR 0 6
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PPUSH
71519: CALL_OW 1
71523: ST_TO_ADDR
// end ;
71524: GO 71448
71526: POP
71527: POP
71528: GO 71428
71530: POP
71531: POP
// end ;
71532: LD_VAR 0 4
71536: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
71537: LD_INT 0
71539: PPUSH
71540: PPUSH
71541: PPUSH
71542: PPUSH
71543: PPUSH
71544: PPUSH
// if not units then
71545: LD_VAR 0 1
71549: NOT
71550: IFFALSE 71554
// exit ;
71552: GO 71955
// result := UnitFilter ( units , [ f_ok ] ) ;
71554: LD_ADDR_VAR 0 3
71558: PUSH
71559: LD_VAR 0 1
71563: PPUSH
71564: LD_INT 50
71566: PUSH
71567: EMPTY
71568: LIST
71569: PPUSH
71570: CALL_OW 72
71574: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71575: LD_ADDR_VAR 0 7
71579: PUSH
71580: LD_VAR 0 1
71584: PUSH
71585: LD_INT 1
71587: ARRAY
71588: PPUSH
71589: CALL_OW 255
71593: ST_TO_ADDR
// if not result then
71594: LD_VAR 0 3
71598: NOT
71599: IFFALSE 71603
// exit ;
71601: GO 71955
// for i in result do
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_VAR 0 3
71612: PUSH
71613: FOR_IN
71614: IFFALSE 71953
// begin tag := GetTag ( i ) + 1 ;
71616: LD_ADDR_VAR 0 8
71620: PUSH
71621: LD_VAR 0 4
71625: PPUSH
71626: CALL_OW 110
71630: PUSH
71631: LD_INT 1
71633: PLUS
71634: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71635: LD_ADDR_VAR 0 6
71639: PUSH
71640: LD_VAR 0 4
71644: PPUSH
71645: CALL_OW 250
71649: PPUSH
71650: LD_VAR 0 4
71654: PPUSH
71655: CALL_OW 251
71659: PPUSH
71660: LD_INT 6
71662: PPUSH
71663: CALL 71279 0 3
71667: ST_TO_ADDR
// if cr then
71668: LD_VAR 0 6
71672: IFFALSE 71711
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71674: LD_VAR 0 4
71678: PPUSH
71679: LD_VAR 0 6
71683: PUSH
71684: LD_INT 1
71686: ARRAY
71687: PUSH
71688: LD_INT 1
71690: ARRAY
71691: PPUSH
71692: LD_VAR 0 6
71696: PUSH
71697: LD_INT 1
71699: ARRAY
71700: PUSH
71701: LD_INT 2
71703: ARRAY
71704: PPUSH
71705: CALL_OW 116
71709: GO 71951
// if path > tag then
71711: LD_VAR 0 2
71715: PUSH
71716: LD_VAR 0 8
71720: GREATER
71721: IFFALSE 71899
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71723: LD_ADDR_VAR 0 5
71727: PUSH
71728: LD_INT 81
71730: PUSH
71731: LD_VAR 0 7
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 91
71742: PUSH
71743: LD_VAR 0 4
71747: PUSH
71748: LD_INT 12
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PPUSH
71760: CALL_OW 69
71764: ST_TO_ADDR
// if enemy then
71765: LD_VAR 0 5
71769: IFFALSE 71797
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71771: LD_VAR 0 4
71775: PPUSH
71776: LD_VAR 0 5
71780: PPUSH
71781: LD_VAR 0 4
71785: PPUSH
71786: CALL_OW 74
71790: PPUSH
71791: CALL_OW 115
71795: GO 71897
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71797: LD_VAR 0 4
71801: PPUSH
71802: LD_VAR 0 2
71806: PUSH
71807: LD_VAR 0 8
71811: ARRAY
71812: PUSH
71813: LD_INT 1
71815: ARRAY
71816: PPUSH
71817: LD_VAR 0 2
71821: PUSH
71822: LD_VAR 0 8
71826: ARRAY
71827: PUSH
71828: LD_INT 2
71830: ARRAY
71831: PPUSH
71832: CALL_OW 297
71836: PUSH
71837: LD_INT 6
71839: GREATER
71840: IFFALSE 71883
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71842: LD_VAR 0 4
71846: PPUSH
71847: LD_VAR 0 2
71851: PUSH
71852: LD_VAR 0 8
71856: ARRAY
71857: PUSH
71858: LD_INT 1
71860: ARRAY
71861: PPUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_VAR 0 8
71871: ARRAY
71872: PUSH
71873: LD_INT 2
71875: ARRAY
71876: PPUSH
71877: CALL_OW 114
71881: GO 71897
// SetTag ( i , tag ) ;
71883: LD_VAR 0 4
71887: PPUSH
71888: LD_VAR 0 8
71892: PPUSH
71893: CALL_OW 109
// end else
71897: GO 71951
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71899: LD_ADDR_VAR 0 5
71903: PUSH
71904: LD_INT 81
71906: PUSH
71907: LD_VAR 0 7
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PPUSH
71916: CALL_OW 69
71920: ST_TO_ADDR
// if enemy then
71921: LD_VAR 0 5
71925: IFFALSE 71951
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71927: LD_VAR 0 4
71931: PPUSH
71932: LD_VAR 0 5
71936: PPUSH
71937: LD_VAR 0 4
71941: PPUSH
71942: CALL_OW 74
71946: PPUSH
71947: CALL_OW 115
// end ; end ;
71951: GO 71613
71953: POP
71954: POP
// end ; end_of_file
71955: LD_VAR 0 3
71959: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71960: LD_INT 0
71962: PPUSH
// if p2 = 100 then
71963: LD_VAR 0 2
71967: PUSH
71968: LD_INT 100
71970: EQUAL
71971: IFFALSE 72920
// begin if not StreamModeActive then
71973: LD_EXP 111
71977: NOT
71978: IFFALSE 71988
// StreamModeActive := true ;
71980: LD_ADDR_EXP 111
71984: PUSH
71985: LD_INT 1
71987: ST_TO_ADDR
// if p3 = 0 then
71988: LD_VAR 0 3
71992: PUSH
71993: LD_INT 0
71995: EQUAL
71996: IFFALSE 72002
// InitStreamMode ;
71998: CALL 73080 0 0
// if p3 = 1 then
72002: LD_VAR 0 3
72006: PUSH
72007: LD_INT 1
72009: EQUAL
72010: IFFALSE 72020
// sRocket := true ;
72012: LD_ADDR_EXP 116
72016: PUSH
72017: LD_INT 1
72019: ST_TO_ADDR
// if p3 = 2 then
72020: LD_VAR 0 3
72024: PUSH
72025: LD_INT 2
72027: EQUAL
72028: IFFALSE 72038
// sSpeed := true ;
72030: LD_ADDR_EXP 115
72034: PUSH
72035: LD_INT 1
72037: ST_TO_ADDR
// if p3 = 3 then
72038: LD_VAR 0 3
72042: PUSH
72043: LD_INT 3
72045: EQUAL
72046: IFFALSE 72056
// sEngine := true ;
72048: LD_ADDR_EXP 117
72052: PUSH
72053: LD_INT 1
72055: ST_TO_ADDR
// if p3 = 4 then
72056: LD_VAR 0 3
72060: PUSH
72061: LD_INT 4
72063: EQUAL
72064: IFFALSE 72074
// sSpec := true ;
72066: LD_ADDR_EXP 114
72070: PUSH
72071: LD_INT 1
72073: ST_TO_ADDR
// if p3 = 5 then
72074: LD_VAR 0 3
72078: PUSH
72079: LD_INT 5
72081: EQUAL
72082: IFFALSE 72092
// sLevel := true ;
72084: LD_ADDR_EXP 118
72088: PUSH
72089: LD_INT 1
72091: ST_TO_ADDR
// if p3 = 6 then
72092: LD_VAR 0 3
72096: PUSH
72097: LD_INT 6
72099: EQUAL
72100: IFFALSE 72110
// sArmoury := true ;
72102: LD_ADDR_EXP 119
72106: PUSH
72107: LD_INT 1
72109: ST_TO_ADDR
// if p3 = 7 then
72110: LD_VAR 0 3
72114: PUSH
72115: LD_INT 7
72117: EQUAL
72118: IFFALSE 72128
// sRadar := true ;
72120: LD_ADDR_EXP 120
72124: PUSH
72125: LD_INT 1
72127: ST_TO_ADDR
// if p3 = 8 then
72128: LD_VAR 0 3
72132: PUSH
72133: LD_INT 8
72135: EQUAL
72136: IFFALSE 72146
// sBunker := true ;
72138: LD_ADDR_EXP 121
72142: PUSH
72143: LD_INT 1
72145: ST_TO_ADDR
// if p3 = 9 then
72146: LD_VAR 0 3
72150: PUSH
72151: LD_INT 9
72153: EQUAL
72154: IFFALSE 72164
// sHack := true ;
72156: LD_ADDR_EXP 122
72160: PUSH
72161: LD_INT 1
72163: ST_TO_ADDR
// if p3 = 10 then
72164: LD_VAR 0 3
72168: PUSH
72169: LD_INT 10
72171: EQUAL
72172: IFFALSE 72182
// sFire := true ;
72174: LD_ADDR_EXP 123
72178: PUSH
72179: LD_INT 1
72181: ST_TO_ADDR
// if p3 = 11 then
72182: LD_VAR 0 3
72186: PUSH
72187: LD_INT 11
72189: EQUAL
72190: IFFALSE 72200
// sRefresh := true ;
72192: LD_ADDR_EXP 124
72196: PUSH
72197: LD_INT 1
72199: ST_TO_ADDR
// if p3 = 12 then
72200: LD_VAR 0 3
72204: PUSH
72205: LD_INT 12
72207: EQUAL
72208: IFFALSE 72218
// sExp := true ;
72210: LD_ADDR_EXP 125
72214: PUSH
72215: LD_INT 1
72217: ST_TO_ADDR
// if p3 = 13 then
72218: LD_VAR 0 3
72222: PUSH
72223: LD_INT 13
72225: EQUAL
72226: IFFALSE 72236
// sDepot := true ;
72228: LD_ADDR_EXP 126
72232: PUSH
72233: LD_INT 1
72235: ST_TO_ADDR
// if p3 = 14 then
72236: LD_VAR 0 3
72240: PUSH
72241: LD_INT 14
72243: EQUAL
72244: IFFALSE 72254
// sFlag := true ;
72246: LD_ADDR_EXP 127
72250: PUSH
72251: LD_INT 1
72253: ST_TO_ADDR
// if p3 = 15 then
72254: LD_VAR 0 3
72258: PUSH
72259: LD_INT 15
72261: EQUAL
72262: IFFALSE 72272
// sKamikadze := true ;
72264: LD_ADDR_EXP 135
72268: PUSH
72269: LD_INT 1
72271: ST_TO_ADDR
// if p3 = 16 then
72272: LD_VAR 0 3
72276: PUSH
72277: LD_INT 16
72279: EQUAL
72280: IFFALSE 72290
// sTroll := true ;
72282: LD_ADDR_EXP 136
72286: PUSH
72287: LD_INT 1
72289: ST_TO_ADDR
// if p3 = 17 then
72290: LD_VAR 0 3
72294: PUSH
72295: LD_INT 17
72297: EQUAL
72298: IFFALSE 72308
// sSlow := true ;
72300: LD_ADDR_EXP 137
72304: PUSH
72305: LD_INT 1
72307: ST_TO_ADDR
// if p3 = 18 then
72308: LD_VAR 0 3
72312: PUSH
72313: LD_INT 18
72315: EQUAL
72316: IFFALSE 72326
// sLack := true ;
72318: LD_ADDR_EXP 138
72322: PUSH
72323: LD_INT 1
72325: ST_TO_ADDR
// if p3 = 19 then
72326: LD_VAR 0 3
72330: PUSH
72331: LD_INT 19
72333: EQUAL
72334: IFFALSE 72344
// sTank := true ;
72336: LD_ADDR_EXP 140
72340: PUSH
72341: LD_INT 1
72343: ST_TO_ADDR
// if p3 = 20 then
72344: LD_VAR 0 3
72348: PUSH
72349: LD_INT 20
72351: EQUAL
72352: IFFALSE 72362
// sRemote := true ;
72354: LD_ADDR_EXP 141
72358: PUSH
72359: LD_INT 1
72361: ST_TO_ADDR
// if p3 = 21 then
72362: LD_VAR 0 3
72366: PUSH
72367: LD_INT 21
72369: EQUAL
72370: IFFALSE 72380
// sPowell := true ;
72372: LD_ADDR_EXP 142
72376: PUSH
72377: LD_INT 1
72379: ST_TO_ADDR
// if p3 = 22 then
72380: LD_VAR 0 3
72384: PUSH
72385: LD_INT 22
72387: EQUAL
72388: IFFALSE 72398
// sTeleport := true ;
72390: LD_ADDR_EXP 145
72394: PUSH
72395: LD_INT 1
72397: ST_TO_ADDR
// if p3 = 23 then
72398: LD_VAR 0 3
72402: PUSH
72403: LD_INT 23
72405: EQUAL
72406: IFFALSE 72416
// sOilTower := true ;
72408: LD_ADDR_EXP 147
72412: PUSH
72413: LD_INT 1
72415: ST_TO_ADDR
// if p3 = 24 then
72416: LD_VAR 0 3
72420: PUSH
72421: LD_INT 24
72423: EQUAL
72424: IFFALSE 72434
// sShovel := true ;
72426: LD_ADDR_EXP 148
72430: PUSH
72431: LD_INT 1
72433: ST_TO_ADDR
// if p3 = 25 then
72434: LD_VAR 0 3
72438: PUSH
72439: LD_INT 25
72441: EQUAL
72442: IFFALSE 72452
// sSheik := true ;
72444: LD_ADDR_EXP 149
72448: PUSH
72449: LD_INT 1
72451: ST_TO_ADDR
// if p3 = 26 then
72452: LD_VAR 0 3
72456: PUSH
72457: LD_INT 26
72459: EQUAL
72460: IFFALSE 72470
// sEarthquake := true ;
72462: LD_ADDR_EXP 151
72466: PUSH
72467: LD_INT 1
72469: ST_TO_ADDR
// if p3 = 27 then
72470: LD_VAR 0 3
72474: PUSH
72475: LD_INT 27
72477: EQUAL
72478: IFFALSE 72488
// sAI := true ;
72480: LD_ADDR_EXP 152
72484: PUSH
72485: LD_INT 1
72487: ST_TO_ADDR
// if p3 = 28 then
72488: LD_VAR 0 3
72492: PUSH
72493: LD_INT 28
72495: EQUAL
72496: IFFALSE 72506
// sCargo := true ;
72498: LD_ADDR_EXP 155
72502: PUSH
72503: LD_INT 1
72505: ST_TO_ADDR
// if p3 = 29 then
72506: LD_VAR 0 3
72510: PUSH
72511: LD_INT 29
72513: EQUAL
72514: IFFALSE 72524
// sDLaser := true ;
72516: LD_ADDR_EXP 156
72520: PUSH
72521: LD_INT 1
72523: ST_TO_ADDR
// if p3 = 30 then
72524: LD_VAR 0 3
72528: PUSH
72529: LD_INT 30
72531: EQUAL
72532: IFFALSE 72542
// sExchange := true ;
72534: LD_ADDR_EXP 157
72538: PUSH
72539: LD_INT 1
72541: ST_TO_ADDR
// if p3 = 31 then
72542: LD_VAR 0 3
72546: PUSH
72547: LD_INT 31
72549: EQUAL
72550: IFFALSE 72560
// sFac := true ;
72552: LD_ADDR_EXP 158
72556: PUSH
72557: LD_INT 1
72559: ST_TO_ADDR
// if p3 = 32 then
72560: LD_VAR 0 3
72564: PUSH
72565: LD_INT 32
72567: EQUAL
72568: IFFALSE 72578
// sPower := true ;
72570: LD_ADDR_EXP 159
72574: PUSH
72575: LD_INT 1
72577: ST_TO_ADDR
// if p3 = 33 then
72578: LD_VAR 0 3
72582: PUSH
72583: LD_INT 33
72585: EQUAL
72586: IFFALSE 72596
// sRandom := true ;
72588: LD_ADDR_EXP 160
72592: PUSH
72593: LD_INT 1
72595: ST_TO_ADDR
// if p3 = 34 then
72596: LD_VAR 0 3
72600: PUSH
72601: LD_INT 34
72603: EQUAL
72604: IFFALSE 72614
// sShield := true ;
72606: LD_ADDR_EXP 161
72610: PUSH
72611: LD_INT 1
72613: ST_TO_ADDR
// if p3 = 35 then
72614: LD_VAR 0 3
72618: PUSH
72619: LD_INT 35
72621: EQUAL
72622: IFFALSE 72632
// sTime := true ;
72624: LD_ADDR_EXP 162
72628: PUSH
72629: LD_INT 1
72631: ST_TO_ADDR
// if p3 = 36 then
72632: LD_VAR 0 3
72636: PUSH
72637: LD_INT 36
72639: EQUAL
72640: IFFALSE 72650
// sTools := true ;
72642: LD_ADDR_EXP 163
72646: PUSH
72647: LD_INT 1
72649: ST_TO_ADDR
// if p3 = 101 then
72650: LD_VAR 0 3
72654: PUSH
72655: LD_INT 101
72657: EQUAL
72658: IFFALSE 72668
// sSold := true ;
72660: LD_ADDR_EXP 128
72664: PUSH
72665: LD_INT 1
72667: ST_TO_ADDR
// if p3 = 102 then
72668: LD_VAR 0 3
72672: PUSH
72673: LD_INT 102
72675: EQUAL
72676: IFFALSE 72686
// sDiff := true ;
72678: LD_ADDR_EXP 129
72682: PUSH
72683: LD_INT 1
72685: ST_TO_ADDR
// if p3 = 103 then
72686: LD_VAR 0 3
72690: PUSH
72691: LD_INT 103
72693: EQUAL
72694: IFFALSE 72704
// sFog := true ;
72696: LD_ADDR_EXP 132
72700: PUSH
72701: LD_INT 1
72703: ST_TO_ADDR
// if p3 = 104 then
72704: LD_VAR 0 3
72708: PUSH
72709: LD_INT 104
72711: EQUAL
72712: IFFALSE 72722
// sReset := true ;
72714: LD_ADDR_EXP 133
72718: PUSH
72719: LD_INT 1
72721: ST_TO_ADDR
// if p3 = 105 then
72722: LD_VAR 0 3
72726: PUSH
72727: LD_INT 105
72729: EQUAL
72730: IFFALSE 72740
// sSun := true ;
72732: LD_ADDR_EXP 134
72736: PUSH
72737: LD_INT 1
72739: ST_TO_ADDR
// if p3 = 106 then
72740: LD_VAR 0 3
72744: PUSH
72745: LD_INT 106
72747: EQUAL
72748: IFFALSE 72758
// sTiger := true ;
72750: LD_ADDR_EXP 130
72754: PUSH
72755: LD_INT 1
72757: ST_TO_ADDR
// if p3 = 107 then
72758: LD_VAR 0 3
72762: PUSH
72763: LD_INT 107
72765: EQUAL
72766: IFFALSE 72776
// sBomb := true ;
72768: LD_ADDR_EXP 131
72772: PUSH
72773: LD_INT 1
72775: ST_TO_ADDR
// if p3 = 108 then
72776: LD_VAR 0 3
72780: PUSH
72781: LD_INT 108
72783: EQUAL
72784: IFFALSE 72794
// sWound := true ;
72786: LD_ADDR_EXP 139
72790: PUSH
72791: LD_INT 1
72793: ST_TO_ADDR
// if p3 = 109 then
72794: LD_VAR 0 3
72798: PUSH
72799: LD_INT 109
72801: EQUAL
72802: IFFALSE 72812
// sBetray := true ;
72804: LD_ADDR_EXP 143
72808: PUSH
72809: LD_INT 1
72811: ST_TO_ADDR
// if p3 = 110 then
72812: LD_VAR 0 3
72816: PUSH
72817: LD_INT 110
72819: EQUAL
72820: IFFALSE 72830
// sContamin := true ;
72822: LD_ADDR_EXP 144
72826: PUSH
72827: LD_INT 1
72829: ST_TO_ADDR
// if p3 = 111 then
72830: LD_VAR 0 3
72834: PUSH
72835: LD_INT 111
72837: EQUAL
72838: IFFALSE 72848
// sOil := true ;
72840: LD_ADDR_EXP 146
72844: PUSH
72845: LD_INT 1
72847: ST_TO_ADDR
// if p3 = 112 then
72848: LD_VAR 0 3
72852: PUSH
72853: LD_INT 112
72855: EQUAL
72856: IFFALSE 72866
// sStu := true ;
72858: LD_ADDR_EXP 150
72862: PUSH
72863: LD_INT 1
72865: ST_TO_ADDR
// if p3 = 113 then
72866: LD_VAR 0 3
72870: PUSH
72871: LD_INT 113
72873: EQUAL
72874: IFFALSE 72884
// sBazooka := true ;
72876: LD_ADDR_EXP 153
72880: PUSH
72881: LD_INT 1
72883: ST_TO_ADDR
// if p3 = 114 then
72884: LD_VAR 0 3
72888: PUSH
72889: LD_INT 114
72891: EQUAL
72892: IFFALSE 72902
// sMortar := true ;
72894: LD_ADDR_EXP 154
72898: PUSH
72899: LD_INT 1
72901: ST_TO_ADDR
// if p3 = 115 then
72902: LD_VAR 0 3
72906: PUSH
72907: LD_INT 115
72909: EQUAL
72910: IFFALSE 72920
// sRanger := true ;
72912: LD_ADDR_EXP 164
72916: PUSH
72917: LD_INT 1
72919: ST_TO_ADDR
// end ; if p2 = 101 then
72920: LD_VAR 0 2
72924: PUSH
72925: LD_INT 101
72927: EQUAL
72928: IFFALSE 73056
// begin case p3 of 1 :
72930: LD_VAR 0 3
72934: PUSH
72935: LD_INT 1
72937: DOUBLE
72938: EQUAL
72939: IFTRUE 72943
72941: GO 72950
72943: POP
// hHackUnlimitedResources ; 2 :
72944: CALL 84093 0 0
72948: GO 73056
72950: LD_INT 2
72952: DOUBLE
72953: EQUAL
72954: IFTRUE 72958
72956: GO 72965
72958: POP
// hHackSetLevel10 ; 3 :
72959: CALL 84226 0 0
72963: GO 73056
72965: LD_INT 3
72967: DOUBLE
72968: EQUAL
72969: IFTRUE 72973
72971: GO 72980
72973: POP
// hHackSetLevel10YourUnits ; 4 :
72974: CALL 84311 0 0
72978: GO 73056
72980: LD_INT 4
72982: DOUBLE
72983: EQUAL
72984: IFTRUE 72988
72986: GO 72995
72988: POP
// hHackInvincible ; 5 :
72989: CALL 84759 0 0
72993: GO 73056
72995: LD_INT 5
72997: DOUBLE
72998: EQUAL
72999: IFTRUE 73003
73001: GO 73010
73003: POP
// hHackInvisible ; 6 :
73004: CALL 84870 0 0
73008: GO 73056
73010: LD_INT 6
73012: DOUBLE
73013: EQUAL
73014: IFTRUE 73018
73016: GO 73025
73018: POP
// hHackChangeYourSide ; 7 :
73019: CALL 84927 0 0
73023: GO 73056
73025: LD_INT 7
73027: DOUBLE
73028: EQUAL
73029: IFTRUE 73033
73031: GO 73040
73033: POP
// hHackChangeUnitSide ; 8 :
73034: CALL 84969 0 0
73038: GO 73056
73040: LD_INT 8
73042: DOUBLE
73043: EQUAL
73044: IFTRUE 73048
73046: GO 73055
73048: POP
// hHackFog ; end ;
73049: CALL 85070 0 0
73053: GO 73056
73055: POP
// end ; end ;
73056: LD_VAR 0 7
73060: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
73061: GO 73063
73063: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
73064: LD_STRING initStreamRollete();
73066: PPUSH
73067: CALL_OW 559
// InitStreamMode ;
73071: CALL 73080 0 0
// DefineStreamItems ( ) ;
73075: CALL 73520 0 0
// end ;
73079: END
// function InitStreamMode ; begin
73080: LD_INT 0
73082: PPUSH
// streamModeActive := false ;
73083: LD_ADDR_EXP 111
73087: PUSH
73088: LD_INT 0
73090: ST_TO_ADDR
// normalCounter := 36 ;
73091: LD_ADDR_EXP 112
73095: PUSH
73096: LD_INT 36
73098: ST_TO_ADDR
// hardcoreCounter := 16 ;
73099: LD_ADDR_EXP 113
73103: PUSH
73104: LD_INT 16
73106: ST_TO_ADDR
// sRocket := false ;
73107: LD_ADDR_EXP 116
73111: PUSH
73112: LD_INT 0
73114: ST_TO_ADDR
// sSpeed := false ;
73115: LD_ADDR_EXP 115
73119: PUSH
73120: LD_INT 0
73122: ST_TO_ADDR
// sEngine := false ;
73123: LD_ADDR_EXP 117
73127: PUSH
73128: LD_INT 0
73130: ST_TO_ADDR
// sSpec := false ;
73131: LD_ADDR_EXP 114
73135: PUSH
73136: LD_INT 0
73138: ST_TO_ADDR
// sLevel := false ;
73139: LD_ADDR_EXP 118
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
// sArmoury := false ;
73147: LD_ADDR_EXP 119
73151: PUSH
73152: LD_INT 0
73154: ST_TO_ADDR
// sRadar := false ;
73155: LD_ADDR_EXP 120
73159: PUSH
73160: LD_INT 0
73162: ST_TO_ADDR
// sBunker := false ;
73163: LD_ADDR_EXP 121
73167: PUSH
73168: LD_INT 0
73170: ST_TO_ADDR
// sHack := false ;
73171: LD_ADDR_EXP 122
73175: PUSH
73176: LD_INT 0
73178: ST_TO_ADDR
// sFire := false ;
73179: LD_ADDR_EXP 123
73183: PUSH
73184: LD_INT 0
73186: ST_TO_ADDR
// sRefresh := false ;
73187: LD_ADDR_EXP 124
73191: PUSH
73192: LD_INT 0
73194: ST_TO_ADDR
// sExp := false ;
73195: LD_ADDR_EXP 125
73199: PUSH
73200: LD_INT 0
73202: ST_TO_ADDR
// sDepot := false ;
73203: LD_ADDR_EXP 126
73207: PUSH
73208: LD_INT 0
73210: ST_TO_ADDR
// sFlag := false ;
73211: LD_ADDR_EXP 127
73215: PUSH
73216: LD_INT 0
73218: ST_TO_ADDR
// sKamikadze := false ;
73219: LD_ADDR_EXP 135
73223: PUSH
73224: LD_INT 0
73226: ST_TO_ADDR
// sTroll := false ;
73227: LD_ADDR_EXP 136
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// sSlow := false ;
73235: LD_ADDR_EXP 137
73239: PUSH
73240: LD_INT 0
73242: ST_TO_ADDR
// sLack := false ;
73243: LD_ADDR_EXP 138
73247: PUSH
73248: LD_INT 0
73250: ST_TO_ADDR
// sTank := false ;
73251: LD_ADDR_EXP 140
73255: PUSH
73256: LD_INT 0
73258: ST_TO_ADDR
// sRemote := false ;
73259: LD_ADDR_EXP 141
73263: PUSH
73264: LD_INT 0
73266: ST_TO_ADDR
// sPowell := false ;
73267: LD_ADDR_EXP 142
73271: PUSH
73272: LD_INT 0
73274: ST_TO_ADDR
// sTeleport := false ;
73275: LD_ADDR_EXP 145
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
// sOilTower := false ;
73283: LD_ADDR_EXP 147
73287: PUSH
73288: LD_INT 0
73290: ST_TO_ADDR
// sShovel := false ;
73291: LD_ADDR_EXP 148
73295: PUSH
73296: LD_INT 0
73298: ST_TO_ADDR
// sSheik := false ;
73299: LD_ADDR_EXP 149
73303: PUSH
73304: LD_INT 0
73306: ST_TO_ADDR
// sEarthquake := false ;
73307: LD_ADDR_EXP 151
73311: PUSH
73312: LD_INT 0
73314: ST_TO_ADDR
// sAI := false ;
73315: LD_ADDR_EXP 152
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
// sCargo := false ;
73323: LD_ADDR_EXP 155
73327: PUSH
73328: LD_INT 0
73330: ST_TO_ADDR
// sDLaser := false ;
73331: LD_ADDR_EXP 156
73335: PUSH
73336: LD_INT 0
73338: ST_TO_ADDR
// sExchange := false ;
73339: LD_ADDR_EXP 157
73343: PUSH
73344: LD_INT 0
73346: ST_TO_ADDR
// sFac := false ;
73347: LD_ADDR_EXP 158
73351: PUSH
73352: LD_INT 0
73354: ST_TO_ADDR
// sPower := false ;
73355: LD_ADDR_EXP 159
73359: PUSH
73360: LD_INT 0
73362: ST_TO_ADDR
// sRandom := false ;
73363: LD_ADDR_EXP 160
73367: PUSH
73368: LD_INT 0
73370: ST_TO_ADDR
// sShield := false ;
73371: LD_ADDR_EXP 161
73375: PUSH
73376: LD_INT 0
73378: ST_TO_ADDR
// sTime := false ;
73379: LD_ADDR_EXP 162
73383: PUSH
73384: LD_INT 0
73386: ST_TO_ADDR
// sTools := false ;
73387: LD_ADDR_EXP 163
73391: PUSH
73392: LD_INT 0
73394: ST_TO_ADDR
// sSold := false ;
73395: LD_ADDR_EXP 128
73399: PUSH
73400: LD_INT 0
73402: ST_TO_ADDR
// sDiff := false ;
73403: LD_ADDR_EXP 129
73407: PUSH
73408: LD_INT 0
73410: ST_TO_ADDR
// sFog := false ;
73411: LD_ADDR_EXP 132
73415: PUSH
73416: LD_INT 0
73418: ST_TO_ADDR
// sReset := false ;
73419: LD_ADDR_EXP 133
73423: PUSH
73424: LD_INT 0
73426: ST_TO_ADDR
// sSun := false ;
73427: LD_ADDR_EXP 134
73431: PUSH
73432: LD_INT 0
73434: ST_TO_ADDR
// sTiger := false ;
73435: LD_ADDR_EXP 130
73439: PUSH
73440: LD_INT 0
73442: ST_TO_ADDR
// sBomb := false ;
73443: LD_ADDR_EXP 131
73447: PUSH
73448: LD_INT 0
73450: ST_TO_ADDR
// sWound := false ;
73451: LD_ADDR_EXP 139
73455: PUSH
73456: LD_INT 0
73458: ST_TO_ADDR
// sBetray := false ;
73459: LD_ADDR_EXP 143
73463: PUSH
73464: LD_INT 0
73466: ST_TO_ADDR
// sContamin := false ;
73467: LD_ADDR_EXP 144
73471: PUSH
73472: LD_INT 0
73474: ST_TO_ADDR
// sOil := false ;
73475: LD_ADDR_EXP 146
73479: PUSH
73480: LD_INT 0
73482: ST_TO_ADDR
// sStu := false ;
73483: LD_ADDR_EXP 150
73487: PUSH
73488: LD_INT 0
73490: ST_TO_ADDR
// sBazooka := false ;
73491: LD_ADDR_EXP 153
73495: PUSH
73496: LD_INT 0
73498: ST_TO_ADDR
// sMortar := false ;
73499: LD_ADDR_EXP 154
73503: PUSH
73504: LD_INT 0
73506: ST_TO_ADDR
// sRanger := false ;
73507: LD_ADDR_EXP 164
73511: PUSH
73512: LD_INT 0
73514: ST_TO_ADDR
// end ;
73515: LD_VAR 0 1
73519: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
73520: LD_INT 0
73522: PPUSH
73523: PPUSH
73524: PPUSH
73525: PPUSH
73526: PPUSH
// result := [ ] ;
73527: LD_ADDR_VAR 0 1
73531: PUSH
73532: EMPTY
73533: ST_TO_ADDR
// if campaign_id = 1 then
73534: LD_OWVAR 69
73538: PUSH
73539: LD_INT 1
73541: EQUAL
73542: IFFALSE 76480
// begin case mission_number of 1 :
73544: LD_OWVAR 70
73548: PUSH
73549: LD_INT 1
73551: DOUBLE
73552: EQUAL
73553: IFTRUE 73557
73555: GO 73621
73557: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
73558: LD_ADDR_VAR 0 1
73562: PUSH
73563: LD_INT 2
73565: PUSH
73566: LD_INT 4
73568: PUSH
73569: LD_INT 11
73571: PUSH
73572: LD_INT 12
73574: PUSH
73575: LD_INT 15
73577: PUSH
73578: LD_INT 16
73580: PUSH
73581: LD_INT 22
73583: PUSH
73584: LD_INT 23
73586: PUSH
73587: LD_INT 26
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 101
73603: PUSH
73604: LD_INT 102
73606: PUSH
73607: LD_INT 106
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: ST_TO_ADDR
73619: GO 76478
73621: LD_INT 2
73623: DOUBLE
73624: EQUAL
73625: IFTRUE 73629
73627: GO 73701
73629: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
73630: LD_ADDR_VAR 0 1
73634: PUSH
73635: LD_INT 2
73637: PUSH
73638: LD_INT 4
73640: PUSH
73641: LD_INT 11
73643: PUSH
73644: LD_INT 12
73646: PUSH
73647: LD_INT 15
73649: PUSH
73650: LD_INT 16
73652: PUSH
73653: LD_INT 22
73655: PUSH
73656: LD_INT 23
73658: PUSH
73659: LD_INT 26
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 101
73675: PUSH
73676: LD_INT 102
73678: PUSH
73679: LD_INT 105
73681: PUSH
73682: LD_INT 106
73684: PUSH
73685: LD_INT 108
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: ST_TO_ADDR
73699: GO 76478
73701: LD_INT 3
73703: DOUBLE
73704: EQUAL
73705: IFTRUE 73709
73707: GO 73785
73709: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
73710: LD_ADDR_VAR 0 1
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: LD_INT 4
73720: PUSH
73721: LD_INT 5
73723: PUSH
73724: LD_INT 11
73726: PUSH
73727: LD_INT 12
73729: PUSH
73730: LD_INT 15
73732: PUSH
73733: LD_INT 16
73735: PUSH
73736: LD_INT 22
73738: PUSH
73739: LD_INT 26
73741: PUSH
73742: LD_INT 36
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 101
73759: PUSH
73760: LD_INT 102
73762: PUSH
73763: LD_INT 105
73765: PUSH
73766: LD_INT 106
73768: PUSH
73769: LD_INT 108
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: ST_TO_ADDR
73783: GO 76478
73785: LD_INT 4
73787: DOUBLE
73788: EQUAL
73789: IFTRUE 73793
73791: GO 73877
73793: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
73794: LD_ADDR_VAR 0 1
73798: PUSH
73799: LD_INT 2
73801: PUSH
73802: LD_INT 4
73804: PUSH
73805: LD_INT 5
73807: PUSH
73808: LD_INT 8
73810: PUSH
73811: LD_INT 11
73813: PUSH
73814: LD_INT 12
73816: PUSH
73817: LD_INT 15
73819: PUSH
73820: LD_INT 16
73822: PUSH
73823: LD_INT 22
73825: PUSH
73826: LD_INT 23
73828: PUSH
73829: LD_INT 26
73831: PUSH
73832: LD_INT 36
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 101
73851: PUSH
73852: LD_INT 102
73854: PUSH
73855: LD_INT 105
73857: PUSH
73858: LD_INT 106
73860: PUSH
73861: LD_INT 108
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: ST_TO_ADDR
73875: GO 76478
73877: LD_INT 5
73879: DOUBLE
73880: EQUAL
73881: IFTRUE 73885
73883: GO 73985
73885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
73886: LD_ADDR_VAR 0 1
73890: PUSH
73891: LD_INT 2
73893: PUSH
73894: LD_INT 4
73896: PUSH
73897: LD_INT 5
73899: PUSH
73900: LD_INT 6
73902: PUSH
73903: LD_INT 8
73905: PUSH
73906: LD_INT 11
73908: PUSH
73909: LD_INT 12
73911: PUSH
73912: LD_INT 15
73914: PUSH
73915: LD_INT 16
73917: PUSH
73918: LD_INT 22
73920: PUSH
73921: LD_INT 23
73923: PUSH
73924: LD_INT 25
73926: PUSH
73927: LD_INT 26
73929: PUSH
73930: LD_INT 36
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 101
73951: PUSH
73952: LD_INT 102
73954: PUSH
73955: LD_INT 105
73957: PUSH
73958: LD_INT 106
73960: PUSH
73961: LD_INT 108
73963: PUSH
73964: LD_INT 109
73966: PUSH
73967: LD_INT 112
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: ST_TO_ADDR
73983: GO 76478
73985: LD_INT 6
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 73993
73991: GO 74113
73993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
73994: LD_ADDR_VAR 0 1
73998: PUSH
73999: LD_INT 2
74001: PUSH
74002: LD_INT 4
74004: PUSH
74005: LD_INT 5
74007: PUSH
74008: LD_INT 6
74010: PUSH
74011: LD_INT 8
74013: PUSH
74014: LD_INT 11
74016: PUSH
74017: LD_INT 12
74019: PUSH
74020: LD_INT 15
74022: PUSH
74023: LD_INT 16
74025: PUSH
74026: LD_INT 20
74028: PUSH
74029: LD_INT 21
74031: PUSH
74032: LD_INT 22
74034: PUSH
74035: LD_INT 23
74037: PUSH
74038: LD_INT 25
74040: PUSH
74041: LD_INT 26
74043: PUSH
74044: LD_INT 30
74046: PUSH
74047: LD_INT 31
74049: PUSH
74050: LD_INT 32
74052: PUSH
74053: LD_INT 36
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 101
74079: PUSH
74080: LD_INT 102
74082: PUSH
74083: LD_INT 105
74085: PUSH
74086: LD_INT 106
74088: PUSH
74089: LD_INT 108
74091: PUSH
74092: LD_INT 109
74094: PUSH
74095: LD_INT 112
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: ST_TO_ADDR
74111: GO 76478
74113: LD_INT 7
74115: DOUBLE
74116: EQUAL
74117: IFTRUE 74121
74119: GO 74221
74121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
74122: LD_ADDR_VAR 0 1
74126: PUSH
74127: LD_INT 2
74129: PUSH
74130: LD_INT 4
74132: PUSH
74133: LD_INT 5
74135: PUSH
74136: LD_INT 7
74138: PUSH
74139: LD_INT 11
74141: PUSH
74142: LD_INT 12
74144: PUSH
74145: LD_INT 15
74147: PUSH
74148: LD_INT 16
74150: PUSH
74151: LD_INT 20
74153: PUSH
74154: LD_INT 21
74156: PUSH
74157: LD_INT 22
74159: PUSH
74160: LD_INT 23
74162: PUSH
74163: LD_INT 25
74165: PUSH
74166: LD_INT 26
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 101
74187: PUSH
74188: LD_INT 102
74190: PUSH
74191: LD_INT 103
74193: PUSH
74194: LD_INT 105
74196: PUSH
74197: LD_INT 106
74199: PUSH
74200: LD_INT 108
74202: PUSH
74203: LD_INT 112
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: ST_TO_ADDR
74219: GO 76478
74221: LD_INT 8
74223: DOUBLE
74224: EQUAL
74225: IFTRUE 74229
74227: GO 74357
74229: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
74230: LD_ADDR_VAR 0 1
74234: PUSH
74235: LD_INT 2
74237: PUSH
74238: LD_INT 4
74240: PUSH
74241: LD_INT 5
74243: PUSH
74244: LD_INT 6
74246: PUSH
74247: LD_INT 7
74249: PUSH
74250: LD_INT 8
74252: PUSH
74253: LD_INT 11
74255: PUSH
74256: LD_INT 12
74258: PUSH
74259: LD_INT 15
74261: PUSH
74262: LD_INT 16
74264: PUSH
74265: LD_INT 20
74267: PUSH
74268: LD_INT 21
74270: PUSH
74271: LD_INT 22
74273: PUSH
74274: LD_INT 23
74276: PUSH
74277: LD_INT 25
74279: PUSH
74280: LD_INT 26
74282: PUSH
74283: LD_INT 30
74285: PUSH
74286: LD_INT 31
74288: PUSH
74289: LD_INT 32
74291: PUSH
74292: LD_INT 36
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 101
74319: PUSH
74320: LD_INT 102
74322: PUSH
74323: LD_INT 103
74325: PUSH
74326: LD_INT 105
74328: PUSH
74329: LD_INT 106
74331: PUSH
74332: LD_INT 108
74334: PUSH
74335: LD_INT 109
74337: PUSH
74338: LD_INT 112
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: ST_TO_ADDR
74355: GO 76478
74357: LD_INT 9
74359: DOUBLE
74360: EQUAL
74361: IFTRUE 74365
74363: GO 74501
74365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
74366: LD_ADDR_VAR 0 1
74370: PUSH
74371: LD_INT 2
74373: PUSH
74374: LD_INT 4
74376: PUSH
74377: LD_INT 5
74379: PUSH
74380: LD_INT 6
74382: PUSH
74383: LD_INT 7
74385: PUSH
74386: LD_INT 8
74388: PUSH
74389: LD_INT 11
74391: PUSH
74392: LD_INT 12
74394: PUSH
74395: LD_INT 15
74397: PUSH
74398: LD_INT 16
74400: PUSH
74401: LD_INT 20
74403: PUSH
74404: LD_INT 21
74406: PUSH
74407: LD_INT 22
74409: PUSH
74410: LD_INT 23
74412: PUSH
74413: LD_INT 25
74415: PUSH
74416: LD_INT 26
74418: PUSH
74419: LD_INT 28
74421: PUSH
74422: LD_INT 30
74424: PUSH
74425: LD_INT 31
74427: PUSH
74428: LD_INT 32
74430: PUSH
74431: LD_INT 36
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 101
74459: PUSH
74460: LD_INT 102
74462: PUSH
74463: LD_INT 103
74465: PUSH
74466: LD_INT 105
74468: PUSH
74469: LD_INT 106
74471: PUSH
74472: LD_INT 108
74474: PUSH
74475: LD_INT 109
74477: PUSH
74478: LD_INT 112
74480: PUSH
74481: LD_INT 114
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: ST_TO_ADDR
74499: GO 76478
74501: LD_INT 10
74503: DOUBLE
74504: EQUAL
74505: IFTRUE 74509
74507: GO 74693
74509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
74510: LD_ADDR_VAR 0 1
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: LD_INT 4
74520: PUSH
74521: LD_INT 5
74523: PUSH
74524: LD_INT 6
74526: PUSH
74527: LD_INT 7
74529: PUSH
74530: LD_INT 8
74532: PUSH
74533: LD_INT 9
74535: PUSH
74536: LD_INT 10
74538: PUSH
74539: LD_INT 11
74541: PUSH
74542: LD_INT 12
74544: PUSH
74545: LD_INT 13
74547: PUSH
74548: LD_INT 14
74550: PUSH
74551: LD_INT 15
74553: PUSH
74554: LD_INT 16
74556: PUSH
74557: LD_INT 17
74559: PUSH
74560: LD_INT 18
74562: PUSH
74563: LD_INT 19
74565: PUSH
74566: LD_INT 20
74568: PUSH
74569: LD_INT 21
74571: PUSH
74572: LD_INT 22
74574: PUSH
74575: LD_INT 23
74577: PUSH
74578: LD_INT 24
74580: PUSH
74581: LD_INT 25
74583: PUSH
74584: LD_INT 26
74586: PUSH
74587: LD_INT 28
74589: PUSH
74590: LD_INT 30
74592: PUSH
74593: LD_INT 31
74595: PUSH
74596: LD_INT 32
74598: PUSH
74599: LD_INT 36
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 101
74635: PUSH
74636: LD_INT 102
74638: PUSH
74639: LD_INT 103
74641: PUSH
74642: LD_INT 104
74644: PUSH
74645: LD_INT 105
74647: PUSH
74648: LD_INT 106
74650: PUSH
74651: LD_INT 107
74653: PUSH
74654: LD_INT 108
74656: PUSH
74657: LD_INT 109
74659: PUSH
74660: LD_INT 110
74662: PUSH
74663: LD_INT 111
74665: PUSH
74666: LD_INT 112
74668: PUSH
74669: LD_INT 114
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: ST_TO_ADDR
74691: GO 76478
74693: LD_INT 11
74695: DOUBLE
74696: EQUAL
74697: IFTRUE 74701
74699: GO 74893
74701: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
74702: LD_ADDR_VAR 0 1
74706: PUSH
74707: LD_INT 2
74709: PUSH
74710: LD_INT 3
74712: PUSH
74713: LD_INT 4
74715: PUSH
74716: LD_INT 5
74718: PUSH
74719: LD_INT 6
74721: PUSH
74722: LD_INT 7
74724: PUSH
74725: LD_INT 8
74727: PUSH
74728: LD_INT 9
74730: PUSH
74731: LD_INT 10
74733: PUSH
74734: LD_INT 11
74736: PUSH
74737: LD_INT 12
74739: PUSH
74740: LD_INT 13
74742: PUSH
74743: LD_INT 14
74745: PUSH
74746: LD_INT 15
74748: PUSH
74749: LD_INT 16
74751: PUSH
74752: LD_INT 17
74754: PUSH
74755: LD_INT 18
74757: PUSH
74758: LD_INT 19
74760: PUSH
74761: LD_INT 20
74763: PUSH
74764: LD_INT 21
74766: PUSH
74767: LD_INT 22
74769: PUSH
74770: LD_INT 23
74772: PUSH
74773: LD_INT 24
74775: PUSH
74776: LD_INT 25
74778: PUSH
74779: LD_INT 26
74781: PUSH
74782: LD_INT 28
74784: PUSH
74785: LD_INT 30
74787: PUSH
74788: LD_INT 31
74790: PUSH
74791: LD_INT 32
74793: PUSH
74794: LD_INT 34
74796: PUSH
74797: LD_INT 36
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 101
74835: PUSH
74836: LD_INT 102
74838: PUSH
74839: LD_INT 103
74841: PUSH
74842: LD_INT 104
74844: PUSH
74845: LD_INT 105
74847: PUSH
74848: LD_INT 106
74850: PUSH
74851: LD_INT 107
74853: PUSH
74854: LD_INT 108
74856: PUSH
74857: LD_INT 109
74859: PUSH
74860: LD_INT 110
74862: PUSH
74863: LD_INT 111
74865: PUSH
74866: LD_INT 112
74868: PUSH
74869: LD_INT 114
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: ST_TO_ADDR
74891: GO 76478
74893: LD_INT 12
74895: DOUBLE
74896: EQUAL
74897: IFTRUE 74901
74899: GO 75109
74901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
74902: LD_ADDR_VAR 0 1
74906: PUSH
74907: LD_INT 1
74909: PUSH
74910: LD_INT 2
74912: PUSH
74913: LD_INT 3
74915: PUSH
74916: LD_INT 4
74918: PUSH
74919: LD_INT 5
74921: PUSH
74922: LD_INT 6
74924: PUSH
74925: LD_INT 7
74927: PUSH
74928: LD_INT 8
74930: PUSH
74931: LD_INT 9
74933: PUSH
74934: LD_INT 10
74936: PUSH
74937: LD_INT 11
74939: PUSH
74940: LD_INT 12
74942: PUSH
74943: LD_INT 13
74945: PUSH
74946: LD_INT 14
74948: PUSH
74949: LD_INT 15
74951: PUSH
74952: LD_INT 16
74954: PUSH
74955: LD_INT 17
74957: PUSH
74958: LD_INT 18
74960: PUSH
74961: LD_INT 19
74963: PUSH
74964: LD_INT 20
74966: PUSH
74967: LD_INT 21
74969: PUSH
74970: LD_INT 22
74972: PUSH
74973: LD_INT 23
74975: PUSH
74976: LD_INT 24
74978: PUSH
74979: LD_INT 25
74981: PUSH
74982: LD_INT 26
74984: PUSH
74985: LD_INT 27
74987: PUSH
74988: LD_INT 28
74990: PUSH
74991: LD_INT 30
74993: PUSH
74994: LD_INT 31
74996: PUSH
74997: LD_INT 32
74999: PUSH
75000: LD_INT 33
75002: PUSH
75003: LD_INT 34
75005: PUSH
75006: LD_INT 36
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 101
75047: PUSH
75048: LD_INT 102
75050: PUSH
75051: LD_INT 103
75053: PUSH
75054: LD_INT 104
75056: PUSH
75057: LD_INT 105
75059: PUSH
75060: LD_INT 106
75062: PUSH
75063: LD_INT 107
75065: PUSH
75066: LD_INT 108
75068: PUSH
75069: LD_INT 109
75071: PUSH
75072: LD_INT 110
75074: PUSH
75075: LD_INT 111
75077: PUSH
75078: LD_INT 112
75080: PUSH
75081: LD_INT 113
75083: PUSH
75084: LD_INT 114
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: ST_TO_ADDR
75107: GO 76478
75109: LD_INT 13
75111: DOUBLE
75112: EQUAL
75113: IFTRUE 75117
75115: GO 75313
75117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
75118: LD_ADDR_VAR 0 1
75122: PUSH
75123: LD_INT 1
75125: PUSH
75126: LD_INT 2
75128: PUSH
75129: LD_INT 3
75131: PUSH
75132: LD_INT 4
75134: PUSH
75135: LD_INT 5
75137: PUSH
75138: LD_INT 8
75140: PUSH
75141: LD_INT 9
75143: PUSH
75144: LD_INT 10
75146: PUSH
75147: LD_INT 11
75149: PUSH
75150: LD_INT 12
75152: PUSH
75153: LD_INT 14
75155: PUSH
75156: LD_INT 15
75158: PUSH
75159: LD_INT 16
75161: PUSH
75162: LD_INT 17
75164: PUSH
75165: LD_INT 18
75167: PUSH
75168: LD_INT 19
75170: PUSH
75171: LD_INT 20
75173: PUSH
75174: LD_INT 21
75176: PUSH
75177: LD_INT 22
75179: PUSH
75180: LD_INT 23
75182: PUSH
75183: LD_INT 24
75185: PUSH
75186: LD_INT 25
75188: PUSH
75189: LD_INT 26
75191: PUSH
75192: LD_INT 27
75194: PUSH
75195: LD_INT 28
75197: PUSH
75198: LD_INT 30
75200: PUSH
75201: LD_INT 31
75203: PUSH
75204: LD_INT 32
75206: PUSH
75207: LD_INT 33
75209: PUSH
75210: LD_INT 34
75212: PUSH
75213: LD_INT 36
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 101
75251: PUSH
75252: LD_INT 102
75254: PUSH
75255: LD_INT 103
75257: PUSH
75258: LD_INT 104
75260: PUSH
75261: LD_INT 105
75263: PUSH
75264: LD_INT 106
75266: PUSH
75267: LD_INT 107
75269: PUSH
75270: LD_INT 108
75272: PUSH
75273: LD_INT 109
75275: PUSH
75276: LD_INT 110
75278: PUSH
75279: LD_INT 111
75281: PUSH
75282: LD_INT 112
75284: PUSH
75285: LD_INT 113
75287: PUSH
75288: LD_INT 114
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: ST_TO_ADDR
75311: GO 76478
75313: LD_INT 14
75315: DOUBLE
75316: EQUAL
75317: IFTRUE 75321
75319: GO 75533
75321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
75322: LD_ADDR_VAR 0 1
75326: PUSH
75327: LD_INT 1
75329: PUSH
75330: LD_INT 2
75332: PUSH
75333: LD_INT 3
75335: PUSH
75336: LD_INT 4
75338: PUSH
75339: LD_INT 5
75341: PUSH
75342: LD_INT 6
75344: PUSH
75345: LD_INT 7
75347: PUSH
75348: LD_INT 8
75350: PUSH
75351: LD_INT 9
75353: PUSH
75354: LD_INT 10
75356: PUSH
75357: LD_INT 11
75359: PUSH
75360: LD_INT 12
75362: PUSH
75363: LD_INT 13
75365: PUSH
75366: LD_INT 14
75368: PUSH
75369: LD_INT 15
75371: PUSH
75372: LD_INT 16
75374: PUSH
75375: LD_INT 17
75377: PUSH
75378: LD_INT 18
75380: PUSH
75381: LD_INT 19
75383: PUSH
75384: LD_INT 20
75386: PUSH
75387: LD_INT 21
75389: PUSH
75390: LD_INT 22
75392: PUSH
75393: LD_INT 23
75395: PUSH
75396: LD_INT 24
75398: PUSH
75399: LD_INT 25
75401: PUSH
75402: LD_INT 26
75404: PUSH
75405: LD_INT 27
75407: PUSH
75408: LD_INT 28
75410: PUSH
75411: LD_INT 29
75413: PUSH
75414: LD_INT 30
75416: PUSH
75417: LD_INT 31
75419: PUSH
75420: LD_INT 32
75422: PUSH
75423: LD_INT 33
75425: PUSH
75426: LD_INT 34
75428: PUSH
75429: LD_INT 36
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: PUSH
75469: LD_INT 101
75471: PUSH
75472: LD_INT 102
75474: PUSH
75475: LD_INT 103
75477: PUSH
75478: LD_INT 104
75480: PUSH
75481: LD_INT 105
75483: PUSH
75484: LD_INT 106
75486: PUSH
75487: LD_INT 107
75489: PUSH
75490: LD_INT 108
75492: PUSH
75493: LD_INT 109
75495: PUSH
75496: LD_INT 110
75498: PUSH
75499: LD_INT 111
75501: PUSH
75502: LD_INT 112
75504: PUSH
75505: LD_INT 113
75507: PUSH
75508: LD_INT 114
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: ST_TO_ADDR
75531: GO 76478
75533: LD_INT 15
75535: DOUBLE
75536: EQUAL
75537: IFTRUE 75541
75539: GO 75753
75541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
75542: LD_ADDR_VAR 0 1
75546: PUSH
75547: LD_INT 1
75549: PUSH
75550: LD_INT 2
75552: PUSH
75553: LD_INT 3
75555: PUSH
75556: LD_INT 4
75558: PUSH
75559: LD_INT 5
75561: PUSH
75562: LD_INT 6
75564: PUSH
75565: LD_INT 7
75567: PUSH
75568: LD_INT 8
75570: PUSH
75571: LD_INT 9
75573: PUSH
75574: LD_INT 10
75576: PUSH
75577: LD_INT 11
75579: PUSH
75580: LD_INT 12
75582: PUSH
75583: LD_INT 13
75585: PUSH
75586: LD_INT 14
75588: PUSH
75589: LD_INT 15
75591: PUSH
75592: LD_INT 16
75594: PUSH
75595: LD_INT 17
75597: PUSH
75598: LD_INT 18
75600: PUSH
75601: LD_INT 19
75603: PUSH
75604: LD_INT 20
75606: PUSH
75607: LD_INT 21
75609: PUSH
75610: LD_INT 22
75612: PUSH
75613: LD_INT 23
75615: PUSH
75616: LD_INT 24
75618: PUSH
75619: LD_INT 25
75621: PUSH
75622: LD_INT 26
75624: PUSH
75625: LD_INT 27
75627: PUSH
75628: LD_INT 28
75630: PUSH
75631: LD_INT 29
75633: PUSH
75634: LD_INT 30
75636: PUSH
75637: LD_INT 31
75639: PUSH
75640: LD_INT 32
75642: PUSH
75643: LD_INT 33
75645: PUSH
75646: LD_INT 34
75648: PUSH
75649: LD_INT 36
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 101
75691: PUSH
75692: LD_INT 102
75694: PUSH
75695: LD_INT 103
75697: PUSH
75698: LD_INT 104
75700: PUSH
75701: LD_INT 105
75703: PUSH
75704: LD_INT 106
75706: PUSH
75707: LD_INT 107
75709: PUSH
75710: LD_INT 108
75712: PUSH
75713: LD_INT 109
75715: PUSH
75716: LD_INT 110
75718: PUSH
75719: LD_INT 111
75721: PUSH
75722: LD_INT 112
75724: PUSH
75725: LD_INT 113
75727: PUSH
75728: LD_INT 114
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: ST_TO_ADDR
75751: GO 76478
75753: LD_INT 16
75755: DOUBLE
75756: EQUAL
75757: IFTRUE 75761
75759: GO 75885
75761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
75762: LD_ADDR_VAR 0 1
75766: PUSH
75767: LD_INT 2
75769: PUSH
75770: LD_INT 4
75772: PUSH
75773: LD_INT 5
75775: PUSH
75776: LD_INT 7
75778: PUSH
75779: LD_INT 11
75781: PUSH
75782: LD_INT 12
75784: PUSH
75785: LD_INT 15
75787: PUSH
75788: LD_INT 16
75790: PUSH
75791: LD_INT 20
75793: PUSH
75794: LD_INT 21
75796: PUSH
75797: LD_INT 22
75799: PUSH
75800: LD_INT 23
75802: PUSH
75803: LD_INT 25
75805: PUSH
75806: LD_INT 26
75808: PUSH
75809: LD_INT 30
75811: PUSH
75812: LD_INT 31
75814: PUSH
75815: LD_INT 32
75817: PUSH
75818: LD_INT 33
75820: PUSH
75821: LD_INT 34
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 101
75847: PUSH
75848: LD_INT 102
75850: PUSH
75851: LD_INT 103
75853: PUSH
75854: LD_INT 106
75856: PUSH
75857: LD_INT 108
75859: PUSH
75860: LD_INT 112
75862: PUSH
75863: LD_INT 113
75865: PUSH
75866: LD_INT 114
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: ST_TO_ADDR
75883: GO 76478
75885: LD_INT 17
75887: DOUBLE
75888: EQUAL
75889: IFTRUE 75893
75891: GO 76105
75893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
75894: LD_ADDR_VAR 0 1
75898: PUSH
75899: LD_INT 1
75901: PUSH
75902: LD_INT 2
75904: PUSH
75905: LD_INT 3
75907: PUSH
75908: LD_INT 4
75910: PUSH
75911: LD_INT 5
75913: PUSH
75914: LD_INT 6
75916: PUSH
75917: LD_INT 7
75919: PUSH
75920: LD_INT 8
75922: PUSH
75923: LD_INT 9
75925: PUSH
75926: LD_INT 10
75928: PUSH
75929: LD_INT 11
75931: PUSH
75932: LD_INT 12
75934: PUSH
75935: LD_INT 13
75937: PUSH
75938: LD_INT 14
75940: PUSH
75941: LD_INT 15
75943: PUSH
75944: LD_INT 16
75946: PUSH
75947: LD_INT 17
75949: PUSH
75950: LD_INT 18
75952: PUSH
75953: LD_INT 19
75955: PUSH
75956: LD_INT 20
75958: PUSH
75959: LD_INT 21
75961: PUSH
75962: LD_INT 22
75964: PUSH
75965: LD_INT 23
75967: PUSH
75968: LD_INT 24
75970: PUSH
75971: LD_INT 25
75973: PUSH
75974: LD_INT 26
75976: PUSH
75977: LD_INT 27
75979: PUSH
75980: LD_INT 28
75982: PUSH
75983: LD_INT 29
75985: PUSH
75986: LD_INT 30
75988: PUSH
75989: LD_INT 31
75991: PUSH
75992: LD_INT 32
75994: PUSH
75995: LD_INT 33
75997: PUSH
75998: LD_INT 34
76000: PUSH
76001: LD_INT 36
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: PUSH
76041: LD_INT 101
76043: PUSH
76044: LD_INT 102
76046: PUSH
76047: LD_INT 103
76049: PUSH
76050: LD_INT 104
76052: PUSH
76053: LD_INT 105
76055: PUSH
76056: LD_INT 106
76058: PUSH
76059: LD_INT 107
76061: PUSH
76062: LD_INT 108
76064: PUSH
76065: LD_INT 109
76067: PUSH
76068: LD_INT 110
76070: PUSH
76071: LD_INT 111
76073: PUSH
76074: LD_INT 112
76076: PUSH
76077: LD_INT 113
76079: PUSH
76080: LD_INT 114
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: ST_TO_ADDR
76103: GO 76478
76105: LD_INT 18
76107: DOUBLE
76108: EQUAL
76109: IFTRUE 76113
76111: GO 76249
76113: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
76114: LD_ADDR_VAR 0 1
76118: PUSH
76119: LD_INT 2
76121: PUSH
76122: LD_INT 4
76124: PUSH
76125: LD_INT 5
76127: PUSH
76128: LD_INT 7
76130: PUSH
76131: LD_INT 11
76133: PUSH
76134: LD_INT 12
76136: PUSH
76137: LD_INT 15
76139: PUSH
76140: LD_INT 16
76142: PUSH
76143: LD_INT 20
76145: PUSH
76146: LD_INT 21
76148: PUSH
76149: LD_INT 22
76151: PUSH
76152: LD_INT 23
76154: PUSH
76155: LD_INT 25
76157: PUSH
76158: LD_INT 26
76160: PUSH
76161: LD_INT 30
76163: PUSH
76164: LD_INT 31
76166: PUSH
76167: LD_INT 32
76169: PUSH
76170: LD_INT 33
76172: PUSH
76173: LD_INT 34
76175: PUSH
76176: LD_INT 35
76178: PUSH
76179: LD_INT 36
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 101
76207: PUSH
76208: LD_INT 102
76210: PUSH
76211: LD_INT 103
76213: PUSH
76214: LD_INT 106
76216: PUSH
76217: LD_INT 108
76219: PUSH
76220: LD_INT 112
76222: PUSH
76223: LD_INT 113
76225: PUSH
76226: LD_INT 114
76228: PUSH
76229: LD_INT 115
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: ST_TO_ADDR
76247: GO 76478
76249: LD_INT 19
76251: DOUBLE
76252: EQUAL
76253: IFTRUE 76257
76255: GO 76477
76257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
76258: LD_ADDR_VAR 0 1
76262: PUSH
76263: LD_INT 1
76265: PUSH
76266: LD_INT 2
76268: PUSH
76269: LD_INT 3
76271: PUSH
76272: LD_INT 4
76274: PUSH
76275: LD_INT 5
76277: PUSH
76278: LD_INT 6
76280: PUSH
76281: LD_INT 7
76283: PUSH
76284: LD_INT 8
76286: PUSH
76287: LD_INT 9
76289: PUSH
76290: LD_INT 10
76292: PUSH
76293: LD_INT 11
76295: PUSH
76296: LD_INT 12
76298: PUSH
76299: LD_INT 13
76301: PUSH
76302: LD_INT 14
76304: PUSH
76305: LD_INT 15
76307: PUSH
76308: LD_INT 16
76310: PUSH
76311: LD_INT 17
76313: PUSH
76314: LD_INT 18
76316: PUSH
76317: LD_INT 19
76319: PUSH
76320: LD_INT 20
76322: PUSH
76323: LD_INT 21
76325: PUSH
76326: LD_INT 22
76328: PUSH
76329: LD_INT 23
76331: PUSH
76332: LD_INT 24
76334: PUSH
76335: LD_INT 25
76337: PUSH
76338: LD_INT 26
76340: PUSH
76341: LD_INT 27
76343: PUSH
76344: LD_INT 28
76346: PUSH
76347: LD_INT 29
76349: PUSH
76350: LD_INT 30
76352: PUSH
76353: LD_INT 31
76355: PUSH
76356: LD_INT 32
76358: PUSH
76359: LD_INT 33
76361: PUSH
76362: LD_INT 34
76364: PUSH
76365: LD_INT 35
76367: PUSH
76368: LD_INT 36
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 101
76411: PUSH
76412: LD_INT 102
76414: PUSH
76415: LD_INT 103
76417: PUSH
76418: LD_INT 104
76420: PUSH
76421: LD_INT 105
76423: PUSH
76424: LD_INT 106
76426: PUSH
76427: LD_INT 107
76429: PUSH
76430: LD_INT 108
76432: PUSH
76433: LD_INT 109
76435: PUSH
76436: LD_INT 110
76438: PUSH
76439: LD_INT 111
76441: PUSH
76442: LD_INT 112
76444: PUSH
76445: LD_INT 113
76447: PUSH
76448: LD_INT 114
76450: PUSH
76451: LD_INT 115
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: ST_TO_ADDR
76475: GO 76478
76477: POP
// end else
76478: GO 76697
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
76480: LD_ADDR_VAR 0 1
76484: PUSH
76485: LD_INT 1
76487: PUSH
76488: LD_INT 2
76490: PUSH
76491: LD_INT 3
76493: PUSH
76494: LD_INT 4
76496: PUSH
76497: LD_INT 5
76499: PUSH
76500: LD_INT 6
76502: PUSH
76503: LD_INT 7
76505: PUSH
76506: LD_INT 8
76508: PUSH
76509: LD_INT 9
76511: PUSH
76512: LD_INT 10
76514: PUSH
76515: LD_INT 11
76517: PUSH
76518: LD_INT 12
76520: PUSH
76521: LD_INT 13
76523: PUSH
76524: LD_INT 14
76526: PUSH
76527: LD_INT 15
76529: PUSH
76530: LD_INT 16
76532: PUSH
76533: LD_INT 17
76535: PUSH
76536: LD_INT 18
76538: PUSH
76539: LD_INT 19
76541: PUSH
76542: LD_INT 20
76544: PUSH
76545: LD_INT 21
76547: PUSH
76548: LD_INT 22
76550: PUSH
76551: LD_INT 23
76553: PUSH
76554: LD_INT 24
76556: PUSH
76557: LD_INT 25
76559: PUSH
76560: LD_INT 26
76562: PUSH
76563: LD_INT 27
76565: PUSH
76566: LD_INT 28
76568: PUSH
76569: LD_INT 29
76571: PUSH
76572: LD_INT 30
76574: PUSH
76575: LD_INT 31
76577: PUSH
76578: LD_INT 32
76580: PUSH
76581: LD_INT 33
76583: PUSH
76584: LD_INT 34
76586: PUSH
76587: LD_INT 35
76589: PUSH
76590: LD_INT 36
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: PUSH
76631: LD_INT 101
76633: PUSH
76634: LD_INT 102
76636: PUSH
76637: LD_INT 103
76639: PUSH
76640: LD_INT 104
76642: PUSH
76643: LD_INT 105
76645: PUSH
76646: LD_INT 106
76648: PUSH
76649: LD_INT 107
76651: PUSH
76652: LD_INT 108
76654: PUSH
76655: LD_INT 109
76657: PUSH
76658: LD_INT 110
76660: PUSH
76661: LD_INT 111
76663: PUSH
76664: LD_INT 112
76666: PUSH
76667: LD_INT 113
76669: PUSH
76670: LD_INT 114
76672: PUSH
76673: LD_INT 115
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: ST_TO_ADDR
// if result then
76697: LD_VAR 0 1
76701: IFFALSE 76990
// begin normal :=  ;
76703: LD_ADDR_VAR 0 3
76707: PUSH
76708: LD_STRING 
76710: ST_TO_ADDR
// hardcore :=  ;
76711: LD_ADDR_VAR 0 4
76715: PUSH
76716: LD_STRING 
76718: ST_TO_ADDR
// for i = 1 to normalCounter do
76719: LD_ADDR_VAR 0 5
76723: PUSH
76724: DOUBLE
76725: LD_INT 1
76727: DEC
76728: ST_TO_ADDR
76729: LD_EXP 112
76733: PUSH
76734: FOR_TO
76735: IFFALSE 76836
// begin tmp := 0 ;
76737: LD_ADDR_VAR 0 2
76741: PUSH
76742: LD_STRING 0
76744: ST_TO_ADDR
// if result [ 1 ] then
76745: LD_VAR 0 1
76749: PUSH
76750: LD_INT 1
76752: ARRAY
76753: IFFALSE 76818
// if result [ 1 ] [ 1 ] = i then
76755: LD_VAR 0 1
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PUSH
76764: LD_INT 1
76766: ARRAY
76767: PUSH
76768: LD_VAR 0 5
76772: EQUAL
76773: IFFALSE 76818
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76775: LD_ADDR_VAR 0 1
76779: PUSH
76780: LD_VAR 0 1
76784: PPUSH
76785: LD_INT 1
76787: PPUSH
76788: LD_VAR 0 1
76792: PUSH
76793: LD_INT 1
76795: ARRAY
76796: PPUSH
76797: LD_INT 1
76799: PPUSH
76800: CALL_OW 3
76804: PPUSH
76805: CALL_OW 1
76809: ST_TO_ADDR
// tmp := 1 ;
76810: LD_ADDR_VAR 0 2
76814: PUSH
76815: LD_STRING 1
76817: ST_TO_ADDR
// end ; normal := normal & tmp ;
76818: LD_ADDR_VAR 0 3
76822: PUSH
76823: LD_VAR 0 3
76827: PUSH
76828: LD_VAR 0 2
76832: STR
76833: ST_TO_ADDR
// end ;
76834: GO 76734
76836: POP
76837: POP
// for i = 1 to hardcoreCounter do
76838: LD_ADDR_VAR 0 5
76842: PUSH
76843: DOUBLE
76844: LD_INT 1
76846: DEC
76847: ST_TO_ADDR
76848: LD_EXP 113
76852: PUSH
76853: FOR_TO
76854: IFFALSE 76959
// begin tmp := 0 ;
76856: LD_ADDR_VAR 0 2
76860: PUSH
76861: LD_STRING 0
76863: ST_TO_ADDR
// if result [ 2 ] then
76864: LD_VAR 0 1
76868: PUSH
76869: LD_INT 2
76871: ARRAY
76872: IFFALSE 76941
// if result [ 2 ] [ 1 ] = 100 + i then
76874: LD_VAR 0 1
76878: PUSH
76879: LD_INT 2
76881: ARRAY
76882: PUSH
76883: LD_INT 1
76885: ARRAY
76886: PUSH
76887: LD_INT 100
76889: PUSH
76890: LD_VAR 0 5
76894: PLUS
76895: EQUAL
76896: IFFALSE 76941
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76898: LD_ADDR_VAR 0 1
76902: PUSH
76903: LD_VAR 0 1
76907: PPUSH
76908: LD_INT 2
76910: PPUSH
76911: LD_VAR 0 1
76915: PUSH
76916: LD_INT 2
76918: ARRAY
76919: PPUSH
76920: LD_INT 1
76922: PPUSH
76923: CALL_OW 3
76927: PPUSH
76928: CALL_OW 1
76932: ST_TO_ADDR
// tmp := 1 ;
76933: LD_ADDR_VAR 0 2
76937: PUSH
76938: LD_STRING 1
76940: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76941: LD_ADDR_VAR 0 4
76945: PUSH
76946: LD_VAR 0 4
76950: PUSH
76951: LD_VAR 0 2
76955: STR
76956: ST_TO_ADDR
// end ;
76957: GO 76853
76959: POP
76960: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
76961: LD_STRING getStreamItemsFromMission("
76963: PUSH
76964: LD_VAR 0 3
76968: STR
76969: PUSH
76970: LD_STRING ","
76972: STR
76973: PUSH
76974: LD_VAR 0 4
76978: STR
76979: PUSH
76980: LD_STRING ")
76982: STR
76983: PPUSH
76984: CALL_OW 559
// end else
76988: GO 76997
// ToLua ( getStreamItemsFromMission("","") ) ;
76990: LD_STRING getStreamItemsFromMission("","")
76992: PPUSH
76993: CALL_OW 559
// end ;
76997: LD_VAR 0 1
77001: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77002: LD_EXP 111
77006: PUSH
77007: LD_EXP 116
77011: AND
77012: IFFALSE 77136
77014: GO 77016
77016: DISABLE
77017: LD_INT 0
77019: PPUSH
77020: PPUSH
// begin enable ;
77021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77022: LD_ADDR_VAR 0 2
77026: PUSH
77027: LD_INT 22
77029: PUSH
77030: LD_OWVAR 2
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 2
77041: PUSH
77042: LD_INT 34
77044: PUSH
77045: LD_INT 7
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 34
77054: PUSH
77055: LD_INT 45
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 34
77064: PUSH
77065: LD_INT 28
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: LD_INT 34
77074: PUSH
77075: LD_INT 47
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PPUSH
77093: CALL_OW 69
77097: ST_TO_ADDR
// if not tmp then
77098: LD_VAR 0 2
77102: NOT
77103: IFFALSE 77107
// exit ;
77105: GO 77136
// for i in tmp do
77107: LD_ADDR_VAR 0 1
77111: PUSH
77112: LD_VAR 0 2
77116: PUSH
77117: FOR_IN
77118: IFFALSE 77134
// begin SetLives ( i , 0 ) ;
77120: LD_VAR 0 1
77124: PPUSH
77125: LD_INT 0
77127: PPUSH
77128: CALL_OW 234
// end ;
77132: GO 77117
77134: POP
77135: POP
// end ;
77136: PPOPN 2
77138: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77139: LD_EXP 111
77143: PUSH
77144: LD_EXP 117
77148: AND
77149: IFFALSE 77233
77151: GO 77153
77153: DISABLE
77154: LD_INT 0
77156: PPUSH
77157: PPUSH
// begin enable ;
77158: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77159: LD_ADDR_VAR 0 2
77163: PUSH
77164: LD_INT 22
77166: PUSH
77167: LD_OWVAR 2
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: PUSH
77176: LD_INT 32
77178: PUSH
77179: LD_INT 3
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: PPUSH
77190: CALL_OW 69
77194: ST_TO_ADDR
// if not tmp then
77195: LD_VAR 0 2
77199: NOT
77200: IFFALSE 77204
// exit ;
77202: GO 77233
// for i in tmp do
77204: LD_ADDR_VAR 0 1
77208: PUSH
77209: LD_VAR 0 2
77213: PUSH
77214: FOR_IN
77215: IFFALSE 77231
// begin SetLives ( i , 0 ) ;
77217: LD_VAR 0 1
77221: PPUSH
77222: LD_INT 0
77224: PPUSH
77225: CALL_OW 234
// end ;
77229: GO 77214
77231: POP
77232: POP
// end ;
77233: PPOPN 2
77235: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77236: LD_EXP 111
77240: PUSH
77241: LD_EXP 114
77245: AND
77246: IFFALSE 77339
77248: GO 77250
77250: DISABLE
77251: LD_INT 0
77253: PPUSH
// begin enable ;
77254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77255: LD_ADDR_VAR 0 1
77259: PUSH
77260: LD_INT 22
77262: PUSH
77263: LD_OWVAR 2
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 2
77274: PUSH
77275: LD_INT 25
77277: PUSH
77278: LD_INT 5
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PUSH
77285: LD_INT 25
77287: PUSH
77288: LD_INT 9
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 25
77297: PUSH
77298: LD_INT 8
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PPUSH
77315: CALL_OW 69
77319: PUSH
77320: FOR_IN
77321: IFFALSE 77337
// begin SetClass ( i , 1 ) ;
77323: LD_VAR 0 1
77327: PPUSH
77328: LD_INT 1
77330: PPUSH
77331: CALL_OW 336
// end ;
77335: GO 77320
77337: POP
77338: POP
// end ;
77339: PPOPN 1
77341: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77342: LD_EXP 111
77346: PUSH
77347: LD_EXP 115
77351: AND
77352: PUSH
77353: LD_OWVAR 65
77357: PUSH
77358: LD_INT 7
77360: LESS
77361: AND
77362: IFFALSE 77376
77364: GO 77366
77366: DISABLE
// begin enable ;
77367: ENABLE
// game_speed := 7 ;
77368: LD_ADDR_OWVAR 65
77372: PUSH
77373: LD_INT 7
77375: ST_TO_ADDR
// end ;
77376: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77377: LD_EXP 111
77381: PUSH
77382: LD_EXP 118
77386: AND
77387: IFFALSE 77589
77389: GO 77391
77391: DISABLE
77392: LD_INT 0
77394: PPUSH
77395: PPUSH
77396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77397: LD_ADDR_VAR 0 3
77401: PUSH
77402: LD_INT 81
77404: PUSH
77405: LD_OWVAR 2
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: PUSH
77414: LD_INT 21
77416: PUSH
77417: LD_INT 1
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PPUSH
77428: CALL_OW 69
77432: ST_TO_ADDR
// if not tmp then
77433: LD_VAR 0 3
77437: NOT
77438: IFFALSE 77442
// exit ;
77440: GO 77589
// if tmp > 5 then
77442: LD_VAR 0 3
77446: PUSH
77447: LD_INT 5
77449: GREATER
77450: IFFALSE 77462
// k := 5 else
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_INT 5
77459: ST_TO_ADDR
77460: GO 77472
// k := tmp ;
77462: LD_ADDR_VAR 0 2
77466: PUSH
77467: LD_VAR 0 3
77471: ST_TO_ADDR
// for i := 1 to k do
77472: LD_ADDR_VAR 0 1
77476: PUSH
77477: DOUBLE
77478: LD_INT 1
77480: DEC
77481: ST_TO_ADDR
77482: LD_VAR 0 2
77486: PUSH
77487: FOR_TO
77488: IFFALSE 77587
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77490: LD_VAR 0 3
77494: PUSH
77495: LD_VAR 0 1
77499: ARRAY
77500: PPUSH
77501: LD_VAR 0 1
77505: PUSH
77506: LD_INT 4
77508: MOD
77509: PUSH
77510: LD_INT 1
77512: PLUS
77513: PPUSH
77514: CALL_OW 259
77518: PUSH
77519: LD_INT 10
77521: LESS
77522: IFFALSE 77585
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77524: LD_VAR 0 3
77528: PUSH
77529: LD_VAR 0 1
77533: ARRAY
77534: PPUSH
77535: LD_VAR 0 1
77539: PUSH
77540: LD_INT 4
77542: MOD
77543: PUSH
77544: LD_INT 1
77546: PLUS
77547: PPUSH
77548: LD_VAR 0 3
77552: PUSH
77553: LD_VAR 0 1
77557: ARRAY
77558: PPUSH
77559: LD_VAR 0 1
77563: PUSH
77564: LD_INT 4
77566: MOD
77567: PUSH
77568: LD_INT 1
77570: PLUS
77571: PPUSH
77572: CALL_OW 259
77576: PUSH
77577: LD_INT 1
77579: PLUS
77580: PPUSH
77581: CALL_OW 237
77585: GO 77487
77587: POP
77588: POP
// end ;
77589: PPOPN 3
77591: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77592: LD_EXP 111
77596: PUSH
77597: LD_EXP 119
77601: AND
77602: IFFALSE 77622
77604: GO 77606
77606: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77607: LD_INT 4
77609: PPUSH
77610: LD_OWVAR 2
77614: PPUSH
77615: LD_INT 0
77617: PPUSH
77618: CALL_OW 324
77622: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77623: LD_EXP 111
77627: PUSH
77628: LD_EXP 148
77632: AND
77633: IFFALSE 77653
77635: GO 77637
77637: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77638: LD_INT 19
77640: PPUSH
77641: LD_OWVAR 2
77645: PPUSH
77646: LD_INT 0
77648: PPUSH
77649: CALL_OW 324
77653: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77654: LD_EXP 111
77658: PUSH
77659: LD_EXP 120
77663: AND
77664: IFFALSE 77766
77666: GO 77668
77668: DISABLE
77669: LD_INT 0
77671: PPUSH
77672: PPUSH
// begin enable ;
77673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77674: LD_ADDR_VAR 0 2
77678: PUSH
77679: LD_INT 22
77681: PUSH
77682: LD_OWVAR 2
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: LD_INT 2
77693: PUSH
77694: LD_INT 34
77696: PUSH
77697: LD_INT 11
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PUSH
77704: LD_INT 34
77706: PUSH
77707: LD_INT 30
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: LIST
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PPUSH
77723: CALL_OW 69
77727: ST_TO_ADDR
// if not tmp then
77728: LD_VAR 0 2
77732: NOT
77733: IFFALSE 77737
// exit ;
77735: GO 77766
// for i in tmp do
77737: LD_ADDR_VAR 0 1
77741: PUSH
77742: LD_VAR 0 2
77746: PUSH
77747: FOR_IN
77748: IFFALSE 77764
// begin SetLives ( i , 0 ) ;
77750: LD_VAR 0 1
77754: PPUSH
77755: LD_INT 0
77757: PPUSH
77758: CALL_OW 234
// end ;
77762: GO 77747
77764: POP
77765: POP
// end ;
77766: PPOPN 2
77768: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77769: LD_EXP 111
77773: PUSH
77774: LD_EXP 121
77778: AND
77779: IFFALSE 77799
77781: GO 77783
77783: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77784: LD_INT 32
77786: PPUSH
77787: LD_OWVAR 2
77791: PPUSH
77792: LD_INT 0
77794: PPUSH
77795: CALL_OW 324
77799: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77800: LD_EXP 111
77804: PUSH
77805: LD_EXP 122
77809: AND
77810: IFFALSE 77991
77812: GO 77814
77814: DISABLE
77815: LD_INT 0
77817: PPUSH
77818: PPUSH
77819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_INT 22
77827: PUSH
77828: LD_OWVAR 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 33
77839: PUSH
77840: LD_INT 3
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PPUSH
77851: CALL_OW 69
77855: ST_TO_ADDR
// if not tmp then
77856: LD_VAR 0 2
77860: NOT
77861: IFFALSE 77865
// exit ;
77863: GO 77991
// side := 0 ;
77865: LD_ADDR_VAR 0 3
77869: PUSH
77870: LD_INT 0
77872: ST_TO_ADDR
// for i := 1 to 8 do
77873: LD_ADDR_VAR 0 1
77877: PUSH
77878: DOUBLE
77879: LD_INT 1
77881: DEC
77882: ST_TO_ADDR
77883: LD_INT 8
77885: PUSH
77886: FOR_TO
77887: IFFALSE 77935
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77889: LD_OWVAR 2
77893: PUSH
77894: LD_VAR 0 1
77898: NONEQUAL
77899: PUSH
77900: LD_OWVAR 2
77904: PPUSH
77905: LD_VAR 0 1
77909: PPUSH
77910: CALL_OW 81
77914: PUSH
77915: LD_INT 2
77917: EQUAL
77918: AND
77919: IFFALSE 77933
// begin side := i ;
77921: LD_ADDR_VAR 0 3
77925: PUSH
77926: LD_VAR 0 1
77930: ST_TO_ADDR
// break ;
77931: GO 77935
// end ;
77933: GO 77886
77935: POP
77936: POP
// if not side then
77937: LD_VAR 0 3
77941: NOT
77942: IFFALSE 77946
// exit ;
77944: GO 77991
// for i := 1 to tmp do
77946: LD_ADDR_VAR 0 1
77950: PUSH
77951: DOUBLE
77952: LD_INT 1
77954: DEC
77955: ST_TO_ADDR
77956: LD_VAR 0 2
77960: PUSH
77961: FOR_TO
77962: IFFALSE 77989
// if Prob ( 60 ) then
77964: LD_INT 60
77966: PPUSH
77967: CALL_OW 13
77971: IFFALSE 77987
// SetSide ( i , side ) ;
77973: LD_VAR 0 1
77977: PPUSH
77978: LD_VAR 0 3
77982: PPUSH
77983: CALL_OW 235
77987: GO 77961
77989: POP
77990: POP
// end ;
77991: PPOPN 3
77993: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77994: LD_EXP 111
77998: PUSH
77999: LD_EXP 124
78003: AND
78004: IFFALSE 78123
78006: GO 78008
78008: DISABLE
78009: LD_INT 0
78011: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78012: LD_ADDR_VAR 0 1
78016: PUSH
78017: LD_INT 22
78019: PUSH
78020: LD_OWVAR 2
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 21
78031: PUSH
78032: LD_INT 1
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 3
78041: PUSH
78042: LD_INT 23
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: PPUSH
78061: CALL_OW 69
78065: PUSH
78066: FOR_IN
78067: IFFALSE 78121
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78069: LD_VAR 0 1
78073: PPUSH
78074: CALL_OW 257
78078: PUSH
78079: LD_INT 1
78081: PUSH
78082: LD_INT 2
78084: PUSH
78085: LD_INT 3
78087: PUSH
78088: LD_INT 4
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: IN
78097: IFFALSE 78119
// SetClass ( un , rand ( 1 , 4 ) ) ;
78099: LD_VAR 0 1
78103: PPUSH
78104: LD_INT 1
78106: PPUSH
78107: LD_INT 4
78109: PPUSH
78110: CALL_OW 12
78114: PPUSH
78115: CALL_OW 336
78119: GO 78066
78121: POP
78122: POP
// end ;
78123: PPOPN 1
78125: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78126: LD_EXP 111
78130: PUSH
78131: LD_EXP 123
78135: AND
78136: IFFALSE 78215
78138: GO 78140
78140: DISABLE
78141: LD_INT 0
78143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78144: LD_ADDR_VAR 0 1
78148: PUSH
78149: LD_INT 22
78151: PUSH
78152: LD_OWVAR 2
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PUSH
78161: LD_INT 21
78163: PUSH
78164: LD_INT 3
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PPUSH
78175: CALL_OW 69
78179: ST_TO_ADDR
// if not tmp then
78180: LD_VAR 0 1
78184: NOT
78185: IFFALSE 78189
// exit ;
78187: GO 78215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78189: LD_VAR 0 1
78193: PUSH
78194: LD_INT 1
78196: PPUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 12
78206: ARRAY
78207: PPUSH
78208: LD_INT 100
78210: PPUSH
78211: CALL_OW 234
// end ;
78215: PPOPN 1
78217: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78218: LD_EXP 111
78222: PUSH
78223: LD_EXP 125
78227: AND
78228: IFFALSE 78326
78230: GO 78232
78232: DISABLE
78233: LD_INT 0
78235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78236: LD_ADDR_VAR 0 1
78240: PUSH
78241: LD_INT 22
78243: PUSH
78244: LD_OWVAR 2
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 21
78255: PUSH
78256: LD_INT 1
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: PPUSH
78267: CALL_OW 69
78271: ST_TO_ADDR
// if not tmp then
78272: LD_VAR 0 1
78276: NOT
78277: IFFALSE 78281
// exit ;
78279: GO 78326
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78281: LD_VAR 0 1
78285: PUSH
78286: LD_INT 1
78288: PPUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: CALL_OW 12
78298: ARRAY
78299: PPUSH
78300: LD_INT 1
78302: PPUSH
78303: LD_INT 4
78305: PPUSH
78306: CALL_OW 12
78310: PPUSH
78311: LD_INT 3000
78313: PPUSH
78314: LD_INT 9000
78316: PPUSH
78317: CALL_OW 12
78321: PPUSH
78322: CALL_OW 492
// end ;
78326: PPOPN 1
78328: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78329: LD_EXP 111
78333: PUSH
78334: LD_EXP 126
78338: AND
78339: IFFALSE 78359
78341: GO 78343
78343: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78344: LD_INT 1
78346: PPUSH
78347: LD_OWVAR 2
78351: PPUSH
78352: LD_INT 0
78354: PPUSH
78355: CALL_OW 324
78359: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78360: LD_EXP 111
78364: PUSH
78365: LD_EXP 127
78369: AND
78370: IFFALSE 78453
78372: GO 78374
78374: DISABLE
78375: LD_INT 0
78377: PPUSH
78378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78379: LD_ADDR_VAR 0 2
78383: PUSH
78384: LD_INT 22
78386: PUSH
78387: LD_OWVAR 2
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 21
78398: PUSH
78399: LD_INT 3
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PPUSH
78410: CALL_OW 69
78414: ST_TO_ADDR
// if not tmp then
78415: LD_VAR 0 2
78419: NOT
78420: IFFALSE 78424
// exit ;
78422: GO 78453
// for i in tmp do
78424: LD_ADDR_VAR 0 1
78428: PUSH
78429: LD_VAR 0 2
78433: PUSH
78434: FOR_IN
78435: IFFALSE 78451
// SetBLevel ( i , 10 ) ;
78437: LD_VAR 0 1
78441: PPUSH
78442: LD_INT 10
78444: PPUSH
78445: CALL_OW 241
78449: GO 78434
78451: POP
78452: POP
// end ;
78453: PPOPN 2
78455: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78456: LD_EXP 111
78460: PUSH
78461: LD_EXP 128
78465: AND
78466: IFFALSE 78577
78468: GO 78470
78470: DISABLE
78471: LD_INT 0
78473: PPUSH
78474: PPUSH
78475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78476: LD_ADDR_VAR 0 3
78480: PUSH
78481: LD_INT 22
78483: PUSH
78484: LD_OWVAR 2
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: LD_INT 25
78495: PUSH
78496: LD_INT 1
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PPUSH
78507: CALL_OW 69
78511: ST_TO_ADDR
// if not tmp then
78512: LD_VAR 0 3
78516: NOT
78517: IFFALSE 78521
// exit ;
78519: GO 78577
// un := tmp [ rand ( 1 , tmp ) ] ;
78521: LD_ADDR_VAR 0 2
78525: PUSH
78526: LD_VAR 0 3
78530: PUSH
78531: LD_INT 1
78533: PPUSH
78534: LD_VAR 0 3
78538: PPUSH
78539: CALL_OW 12
78543: ARRAY
78544: ST_TO_ADDR
// if Crawls ( un ) then
78545: LD_VAR 0 2
78549: PPUSH
78550: CALL_OW 318
78554: IFFALSE 78565
// ComWalk ( un ) ;
78556: LD_VAR 0 2
78560: PPUSH
78561: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78565: LD_VAR 0 2
78569: PPUSH
78570: LD_INT 5
78572: PPUSH
78573: CALL_OW 336
// end ;
78577: PPOPN 3
78579: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
78580: LD_EXP 111
78584: PUSH
78585: LD_EXP 129
78589: AND
78590: PUSH
78591: LD_OWVAR 67
78595: PUSH
78596: LD_INT 3
78598: LESS
78599: AND
78600: IFFALSE 78619
78602: GO 78604
78604: DISABLE
// Difficulty := Difficulty + 1 ;
78605: LD_ADDR_OWVAR 67
78609: PUSH
78610: LD_OWVAR 67
78614: PUSH
78615: LD_INT 1
78617: PLUS
78618: ST_TO_ADDR
78619: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78620: LD_EXP 111
78624: PUSH
78625: LD_EXP 130
78629: AND
78630: IFFALSE 78733
78632: GO 78634
78634: DISABLE
78635: LD_INT 0
78637: PPUSH
// begin for i := 1 to 5 do
78638: LD_ADDR_VAR 0 1
78642: PUSH
78643: DOUBLE
78644: LD_INT 1
78646: DEC
78647: ST_TO_ADDR
78648: LD_INT 5
78650: PUSH
78651: FOR_TO
78652: IFFALSE 78731
// begin uc_nation := nation_nature ;
78654: LD_ADDR_OWVAR 21
78658: PUSH
78659: LD_INT 0
78661: ST_TO_ADDR
// uc_side := 0 ;
78662: LD_ADDR_OWVAR 20
78666: PUSH
78667: LD_INT 0
78669: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78670: LD_ADDR_OWVAR 29
78674: PUSH
78675: LD_INT 12
78677: PUSH
78678: LD_INT 12
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: ST_TO_ADDR
// hc_agressivity := 20 ;
78685: LD_ADDR_OWVAR 35
78689: PUSH
78690: LD_INT 20
78692: ST_TO_ADDR
// hc_class := class_tiger ;
78693: LD_ADDR_OWVAR 28
78697: PUSH
78698: LD_INT 14
78700: ST_TO_ADDR
// hc_gallery :=  ;
78701: LD_ADDR_OWVAR 33
78705: PUSH
78706: LD_STRING 
78708: ST_TO_ADDR
// hc_name :=  ;
78709: LD_ADDR_OWVAR 26
78713: PUSH
78714: LD_STRING 
78716: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78717: CALL_OW 44
78721: PPUSH
78722: LD_INT 0
78724: PPUSH
78725: CALL_OW 51
// end ;
78729: GO 78651
78731: POP
78732: POP
// end ;
78733: PPOPN 1
78735: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78736: LD_EXP 111
78740: PUSH
78741: LD_EXP 131
78745: AND
78746: IFFALSE 78755
78748: GO 78750
78750: DISABLE
// StreamSibBomb ;
78751: CALL 78756 0 0
78755: END
// export function StreamSibBomb ; var i , x , y ; begin
78756: LD_INT 0
78758: PPUSH
78759: PPUSH
78760: PPUSH
78761: PPUSH
// result := false ;
78762: LD_ADDR_VAR 0 1
78766: PUSH
78767: LD_INT 0
78769: ST_TO_ADDR
// for i := 1 to 16 do
78770: LD_ADDR_VAR 0 2
78774: PUSH
78775: DOUBLE
78776: LD_INT 1
78778: DEC
78779: ST_TO_ADDR
78780: LD_INT 16
78782: PUSH
78783: FOR_TO
78784: IFFALSE 78983
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78786: LD_ADDR_VAR 0 3
78790: PUSH
78791: LD_INT 10
78793: PUSH
78794: LD_INT 20
78796: PUSH
78797: LD_INT 30
78799: PUSH
78800: LD_INT 40
78802: PUSH
78803: LD_INT 50
78805: PUSH
78806: LD_INT 60
78808: PUSH
78809: LD_INT 70
78811: PUSH
78812: LD_INT 80
78814: PUSH
78815: LD_INT 90
78817: PUSH
78818: LD_INT 100
78820: PUSH
78821: LD_INT 110
78823: PUSH
78824: LD_INT 120
78826: PUSH
78827: LD_INT 130
78829: PUSH
78830: LD_INT 140
78832: PUSH
78833: LD_INT 150
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: LIST
78851: LIST
78852: PUSH
78853: LD_INT 1
78855: PPUSH
78856: LD_INT 15
78858: PPUSH
78859: CALL_OW 12
78863: ARRAY
78864: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78865: LD_ADDR_VAR 0 4
78869: PUSH
78870: LD_INT 10
78872: PUSH
78873: LD_INT 20
78875: PUSH
78876: LD_INT 30
78878: PUSH
78879: LD_INT 40
78881: PUSH
78882: LD_INT 50
78884: PUSH
78885: LD_INT 60
78887: PUSH
78888: LD_INT 70
78890: PUSH
78891: LD_INT 80
78893: PUSH
78894: LD_INT 90
78896: PUSH
78897: LD_INT 100
78899: PUSH
78900: LD_INT 110
78902: PUSH
78903: LD_INT 120
78905: PUSH
78906: LD_INT 130
78908: PUSH
78909: LD_INT 140
78911: PUSH
78912: LD_INT 150
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: LIST
78919: LIST
78920: LIST
78921: LIST
78922: LIST
78923: LIST
78924: LIST
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: PUSH
78932: LD_INT 1
78934: PPUSH
78935: LD_INT 15
78937: PPUSH
78938: CALL_OW 12
78942: ARRAY
78943: ST_TO_ADDR
// if ValidHex ( x , y ) then
78944: LD_VAR 0 3
78948: PPUSH
78949: LD_VAR 0 4
78953: PPUSH
78954: CALL_OW 488
78958: IFFALSE 78981
// begin result := [ x , y ] ;
78960: LD_ADDR_VAR 0 1
78964: PUSH
78965: LD_VAR 0 3
78969: PUSH
78970: LD_VAR 0 4
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: ST_TO_ADDR
// break ;
78979: GO 78983
// end ; end ;
78981: GO 78783
78983: POP
78984: POP
// if result then
78985: LD_VAR 0 1
78989: IFFALSE 79049
// begin ToLua ( playSibBomb() ) ;
78991: LD_STRING playSibBomb()
78993: PPUSH
78994: CALL_OW 559
// wait ( 0 0$14 ) ;
78998: LD_INT 490
79000: PPUSH
79001: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79005: LD_VAR 0 1
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PPUSH
79014: LD_VAR 0 1
79018: PUSH
79019: LD_INT 2
79021: ARRAY
79022: PPUSH
79023: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79027: LD_VAR 0 1
79031: PUSH
79032: LD_INT 1
79034: ARRAY
79035: PPUSH
79036: LD_VAR 0 1
79040: PUSH
79041: LD_INT 2
79043: ARRAY
79044: PPUSH
79045: CALL_OW 429
// end ; end ;
79049: LD_VAR 0 1
79053: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79054: LD_EXP 111
79058: PUSH
79059: LD_EXP 133
79063: AND
79064: IFFALSE 79076
79066: GO 79068
79068: DISABLE
// YouLost (  ) ;
79069: LD_STRING 
79071: PPUSH
79072: CALL_OW 104
79076: END
// every 0 0$1 trigger StreamModeActive and sFog do
79077: LD_EXP 111
79081: PUSH
79082: LD_EXP 132
79086: AND
79087: IFFALSE 79101
79089: GO 79091
79091: DISABLE
// FogOff ( your_side ) ;
79092: LD_OWVAR 2
79096: PPUSH
79097: CALL_OW 344
79101: END
// every 0 0$1 trigger StreamModeActive and sSun do
79102: LD_EXP 111
79106: PUSH
79107: LD_EXP 134
79111: AND
79112: IFFALSE 79140
79114: GO 79116
79116: DISABLE
// begin solar_recharge_percent := 0 ;
79117: LD_ADDR_OWVAR 79
79121: PUSH
79122: LD_INT 0
79124: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79125: LD_INT 10500
79127: PPUSH
79128: CALL_OW 67
// solar_recharge_percent := 100 ;
79132: LD_ADDR_OWVAR 79
79136: PUSH
79137: LD_INT 100
79139: ST_TO_ADDR
// end ;
79140: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79141: LD_EXP 111
79145: PUSH
79146: LD_EXP 135
79150: AND
79151: IFFALSE 79390
79153: GO 79155
79155: DISABLE
79156: LD_INT 0
79158: PPUSH
79159: PPUSH
79160: PPUSH
// begin tmp := [ ] ;
79161: LD_ADDR_VAR 0 3
79165: PUSH
79166: EMPTY
79167: ST_TO_ADDR
// for i := 1 to 6 do
79168: LD_ADDR_VAR 0 1
79172: PUSH
79173: DOUBLE
79174: LD_INT 1
79176: DEC
79177: ST_TO_ADDR
79178: LD_INT 6
79180: PUSH
79181: FOR_TO
79182: IFFALSE 79287
// begin uc_nation := nation_nature ;
79184: LD_ADDR_OWVAR 21
79188: PUSH
79189: LD_INT 0
79191: ST_TO_ADDR
// uc_side := 0 ;
79192: LD_ADDR_OWVAR 20
79196: PUSH
79197: LD_INT 0
79199: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79200: LD_ADDR_OWVAR 29
79204: PUSH
79205: LD_INT 12
79207: PUSH
79208: LD_INT 12
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: ST_TO_ADDR
// hc_agressivity := 20 ;
79215: LD_ADDR_OWVAR 35
79219: PUSH
79220: LD_INT 20
79222: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79223: LD_ADDR_OWVAR 28
79227: PUSH
79228: LD_INT 17
79230: ST_TO_ADDR
// hc_gallery :=  ;
79231: LD_ADDR_OWVAR 33
79235: PUSH
79236: LD_STRING 
79238: ST_TO_ADDR
// hc_name :=  ;
79239: LD_ADDR_OWVAR 26
79243: PUSH
79244: LD_STRING 
79246: ST_TO_ADDR
// un := CreateHuman ;
79247: LD_ADDR_VAR 0 2
79251: PUSH
79252: CALL_OW 44
79256: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79257: LD_VAR 0 2
79261: PPUSH
79262: LD_INT 1
79264: PPUSH
79265: CALL_OW 51
// tmp := tmp ^ un ;
79269: LD_ADDR_VAR 0 3
79273: PUSH
79274: LD_VAR 0 3
79278: PUSH
79279: LD_VAR 0 2
79283: ADD
79284: ST_TO_ADDR
// end ;
79285: GO 79181
79287: POP
79288: POP
// repeat wait ( 0 0$1 ) ;
79289: LD_INT 35
79291: PPUSH
79292: CALL_OW 67
// for un in tmp do
79296: LD_ADDR_VAR 0 2
79300: PUSH
79301: LD_VAR 0 3
79305: PUSH
79306: FOR_IN
79307: IFFALSE 79381
// begin if IsDead ( un ) then
79309: LD_VAR 0 2
79313: PPUSH
79314: CALL_OW 301
79318: IFFALSE 79338
// begin tmp := tmp diff un ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_VAR 0 3
79329: PUSH
79330: LD_VAR 0 2
79334: DIFF
79335: ST_TO_ADDR
// continue ;
79336: GO 79306
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79338: LD_VAR 0 2
79342: PPUSH
79343: LD_INT 3
79345: PUSH
79346: LD_INT 22
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PPUSH
79360: CALL_OW 69
79364: PPUSH
79365: LD_VAR 0 2
79369: PPUSH
79370: CALL_OW 74
79374: PPUSH
79375: CALL_OW 115
// end ;
79379: GO 79306
79381: POP
79382: POP
// until not tmp ;
79383: LD_VAR 0 3
79387: NOT
79388: IFFALSE 79289
// end ;
79390: PPOPN 3
79392: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79393: LD_EXP 111
79397: PUSH
79398: LD_EXP 136
79402: AND
79403: IFFALSE 79457
79405: GO 79407
79407: DISABLE
// begin ToLua ( displayTroll(); ) ;
79408: LD_STRING displayTroll();
79410: PPUSH
79411: CALL_OW 559
// wait ( 3 3$00 ) ;
79415: LD_INT 6300
79417: PPUSH
79418: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79422: LD_STRING hideTroll();
79424: PPUSH
79425: CALL_OW 559
// wait ( 1 1$00 ) ;
79429: LD_INT 2100
79431: PPUSH
79432: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79436: LD_STRING displayTroll();
79438: PPUSH
79439: CALL_OW 559
// wait ( 1 1$00 ) ;
79443: LD_INT 2100
79445: PPUSH
79446: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79450: LD_STRING hideTroll();
79452: PPUSH
79453: CALL_OW 559
// end ;
79457: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79458: LD_EXP 111
79462: PUSH
79463: LD_EXP 137
79467: AND
79468: IFFALSE 79531
79470: GO 79472
79472: DISABLE
79473: LD_INT 0
79475: PPUSH
// begin p := 0 ;
79476: LD_ADDR_VAR 0 1
79480: PUSH
79481: LD_INT 0
79483: ST_TO_ADDR
// repeat game_speed := 1 ;
79484: LD_ADDR_OWVAR 65
79488: PUSH
79489: LD_INT 1
79491: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79492: LD_INT 35
79494: PPUSH
79495: CALL_OW 67
// p := p + 1 ;
79499: LD_ADDR_VAR 0 1
79503: PUSH
79504: LD_VAR 0 1
79508: PUSH
79509: LD_INT 1
79511: PLUS
79512: ST_TO_ADDR
// until p >= 60 ;
79513: LD_VAR 0 1
79517: PUSH
79518: LD_INT 60
79520: GREATEREQUAL
79521: IFFALSE 79484
// game_speed := 4 ;
79523: LD_ADDR_OWVAR 65
79527: PUSH
79528: LD_INT 4
79530: ST_TO_ADDR
// end ;
79531: PPOPN 1
79533: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79534: LD_EXP 111
79538: PUSH
79539: LD_EXP 138
79543: AND
79544: IFFALSE 79690
79546: GO 79548
79548: DISABLE
79549: LD_INT 0
79551: PPUSH
79552: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79553: LD_ADDR_VAR 0 1
79557: PUSH
79558: LD_INT 22
79560: PUSH
79561: LD_OWVAR 2
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 2
79572: PUSH
79573: LD_INT 30
79575: PUSH
79576: LD_INT 0
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: LD_INT 30
79585: PUSH
79586: LD_INT 1
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PPUSH
79602: CALL_OW 69
79606: ST_TO_ADDR
// if not depot then
79607: LD_VAR 0 1
79611: NOT
79612: IFFALSE 79616
// exit ;
79614: GO 79690
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79616: LD_ADDR_VAR 0 2
79620: PUSH
79621: LD_VAR 0 1
79625: PUSH
79626: LD_INT 1
79628: PPUSH
79629: LD_VAR 0 1
79633: PPUSH
79634: CALL_OW 12
79638: ARRAY
79639: PPUSH
79640: CALL_OW 274
79644: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79645: LD_VAR 0 2
79649: PPUSH
79650: LD_INT 1
79652: PPUSH
79653: LD_INT 0
79655: PPUSH
79656: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79660: LD_VAR 0 2
79664: PPUSH
79665: LD_INT 2
79667: PPUSH
79668: LD_INT 0
79670: PPUSH
79671: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79675: LD_VAR 0 2
79679: PPUSH
79680: LD_INT 3
79682: PPUSH
79683: LD_INT 0
79685: PPUSH
79686: CALL_OW 277
// end ;
79690: PPOPN 2
79692: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79693: LD_EXP 111
79697: PUSH
79698: LD_EXP 139
79702: AND
79703: IFFALSE 79800
79705: GO 79707
79707: DISABLE
79708: LD_INT 0
79710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79711: LD_ADDR_VAR 0 1
79715: PUSH
79716: LD_INT 22
79718: PUSH
79719: LD_OWVAR 2
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 21
79730: PUSH
79731: LD_INT 1
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 3
79740: PUSH
79741: LD_INT 23
79743: PUSH
79744: LD_INT 0
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: EMPTY
79752: LIST
79753: LIST
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: LIST
79759: PPUSH
79760: CALL_OW 69
79764: ST_TO_ADDR
// if not tmp then
79765: LD_VAR 0 1
79769: NOT
79770: IFFALSE 79774
// exit ;
79772: GO 79800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79774: LD_VAR 0 1
79778: PUSH
79779: LD_INT 1
79781: PPUSH
79782: LD_VAR 0 1
79786: PPUSH
79787: CALL_OW 12
79791: ARRAY
79792: PPUSH
79793: LD_INT 200
79795: PPUSH
79796: CALL_OW 234
// end ;
79800: PPOPN 1
79802: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79803: LD_EXP 111
79807: PUSH
79808: LD_EXP 140
79812: AND
79813: IFFALSE 79892
79815: GO 79817
79817: DISABLE
79818: LD_INT 0
79820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79821: LD_ADDR_VAR 0 1
79825: PUSH
79826: LD_INT 22
79828: PUSH
79829: LD_OWVAR 2
79833: PUSH
79834: EMPTY
79835: LIST
79836: LIST
79837: PUSH
79838: LD_INT 21
79840: PUSH
79841: LD_INT 2
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: PPUSH
79852: CALL_OW 69
79856: ST_TO_ADDR
// if not tmp then
79857: LD_VAR 0 1
79861: NOT
79862: IFFALSE 79866
// exit ;
79864: GO 79892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79866: LD_VAR 0 1
79870: PUSH
79871: LD_INT 1
79873: PPUSH
79874: LD_VAR 0 1
79878: PPUSH
79879: CALL_OW 12
79883: ARRAY
79884: PPUSH
79885: LD_INT 60
79887: PPUSH
79888: CALL_OW 234
// end ;
79892: PPOPN 1
79894: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79895: LD_EXP 111
79899: PUSH
79900: LD_EXP 141
79904: AND
79905: IFFALSE 80004
79907: GO 79909
79909: DISABLE
79910: LD_INT 0
79912: PPUSH
79913: PPUSH
// begin enable ;
79914: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79915: LD_ADDR_VAR 0 1
79919: PUSH
79920: LD_INT 22
79922: PUSH
79923: LD_OWVAR 2
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 61
79934: PUSH
79935: EMPTY
79936: LIST
79937: PUSH
79938: LD_INT 33
79940: PUSH
79941: LD_INT 2
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: LIST
79952: PPUSH
79953: CALL_OW 69
79957: ST_TO_ADDR
// if not tmp then
79958: LD_VAR 0 1
79962: NOT
79963: IFFALSE 79967
// exit ;
79965: GO 80004
// for i in tmp do
79967: LD_ADDR_VAR 0 2
79971: PUSH
79972: LD_VAR 0 1
79976: PUSH
79977: FOR_IN
79978: IFFALSE 80002
// if IsControledBy ( i ) then
79980: LD_VAR 0 2
79984: PPUSH
79985: CALL_OW 312
79989: IFFALSE 80000
// ComUnlink ( i ) ;
79991: LD_VAR 0 2
79995: PPUSH
79996: CALL_OW 136
80000: GO 79977
80002: POP
80003: POP
// end ;
80004: PPOPN 2
80006: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80007: LD_EXP 111
80011: PUSH
80012: LD_EXP 142
80016: AND
80017: IFFALSE 80157
80019: GO 80021
80021: DISABLE
80022: LD_INT 0
80024: PPUSH
80025: PPUSH
// begin ToLua ( displayPowell(); ) ;
80026: LD_STRING displayPowell();
80028: PPUSH
80029: CALL_OW 559
// uc_side := 0 ;
80033: LD_ADDR_OWVAR 20
80037: PUSH
80038: LD_INT 0
80040: ST_TO_ADDR
// uc_nation := 2 ;
80041: LD_ADDR_OWVAR 21
80045: PUSH
80046: LD_INT 2
80048: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80049: LD_ADDR_OWVAR 37
80053: PUSH
80054: LD_INT 14
80056: ST_TO_ADDR
// vc_engine := engine_siberite ;
80057: LD_ADDR_OWVAR 39
80061: PUSH
80062: LD_INT 3
80064: ST_TO_ADDR
// vc_control := control_apeman ;
80065: LD_ADDR_OWVAR 38
80069: PUSH
80070: LD_INT 5
80072: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80073: LD_ADDR_OWVAR 40
80077: PUSH
80078: LD_INT 29
80080: ST_TO_ADDR
// un := CreateVehicle ;
80081: LD_ADDR_VAR 0 2
80085: PUSH
80086: CALL_OW 45
80090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80091: LD_VAR 0 2
80095: PPUSH
80096: LD_INT 1
80098: PPUSH
80099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80103: LD_INT 35
80105: PPUSH
80106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80110: LD_VAR 0 2
80114: PPUSH
80115: LD_INT 22
80117: PUSH
80118: LD_OWVAR 2
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PPUSH
80127: CALL_OW 69
80131: PPUSH
80132: LD_VAR 0 2
80136: PPUSH
80137: CALL_OW 74
80141: PPUSH
80142: CALL_OW 115
// until IsDead ( un ) ;
80146: LD_VAR 0 2
80150: PPUSH
80151: CALL_OW 301
80155: IFFALSE 80103
// end ;
80157: PPOPN 2
80159: END
// every 0 0$1 trigger StreamModeActive and sStu do
80160: LD_EXP 111
80164: PUSH
80165: LD_EXP 150
80169: AND
80170: IFFALSE 80186
80172: GO 80174
80174: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80175: LD_STRING displayStucuk();
80177: PPUSH
80178: CALL_OW 559
// ResetFog ;
80182: CALL_OW 335
// end ;
80186: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80187: LD_EXP 111
80191: PUSH
80192: LD_EXP 143
80196: AND
80197: IFFALSE 80338
80199: GO 80201
80201: DISABLE
80202: LD_INT 0
80204: PPUSH
80205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80206: LD_ADDR_VAR 0 2
80210: PUSH
80211: LD_INT 22
80213: PUSH
80214: LD_OWVAR 2
80218: PUSH
80219: EMPTY
80220: LIST
80221: LIST
80222: PUSH
80223: LD_INT 21
80225: PUSH
80226: LD_INT 1
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PPUSH
80237: CALL_OW 69
80241: ST_TO_ADDR
// if not tmp then
80242: LD_VAR 0 2
80246: NOT
80247: IFFALSE 80251
// exit ;
80249: GO 80338
// un := tmp [ rand ( 1 , tmp ) ] ;
80251: LD_ADDR_VAR 0 1
80255: PUSH
80256: LD_VAR 0 2
80260: PUSH
80261: LD_INT 1
80263: PPUSH
80264: LD_VAR 0 2
80268: PPUSH
80269: CALL_OW 12
80273: ARRAY
80274: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80275: LD_VAR 0 1
80279: PPUSH
80280: LD_INT 0
80282: PPUSH
80283: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80287: LD_VAR 0 1
80291: PPUSH
80292: LD_OWVAR 3
80296: PUSH
80297: LD_VAR 0 1
80301: DIFF
80302: PPUSH
80303: LD_VAR 0 1
80307: PPUSH
80308: CALL_OW 74
80312: PPUSH
80313: CALL_OW 115
// wait ( 0 0$20 ) ;
80317: LD_INT 700
80319: PPUSH
80320: CALL_OW 67
// SetSide ( un , your_side ) ;
80324: LD_VAR 0 1
80328: PPUSH
80329: LD_OWVAR 2
80333: PPUSH
80334: CALL_OW 235
// end ;
80338: PPOPN 2
80340: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80341: LD_EXP 111
80345: PUSH
80346: LD_EXP 144
80350: AND
80351: IFFALSE 80457
80353: GO 80355
80355: DISABLE
80356: LD_INT 0
80358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80359: LD_ADDR_VAR 0 1
80363: PUSH
80364: LD_INT 22
80366: PUSH
80367: LD_OWVAR 2
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: LD_INT 2
80378: PUSH
80379: LD_INT 30
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: LD_INT 30
80391: PUSH
80392: LD_INT 1
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: LIST
80403: PUSH
80404: EMPTY
80405: LIST
80406: LIST
80407: PPUSH
80408: CALL_OW 69
80412: ST_TO_ADDR
// if not depot then
80413: LD_VAR 0 1
80417: NOT
80418: IFFALSE 80422
// exit ;
80420: GO 80457
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80422: LD_VAR 0 1
80426: PUSH
80427: LD_INT 1
80429: ARRAY
80430: PPUSH
80431: CALL_OW 250
80435: PPUSH
80436: LD_VAR 0 1
80440: PUSH
80441: LD_INT 1
80443: ARRAY
80444: PPUSH
80445: CALL_OW 251
80449: PPUSH
80450: LD_INT 70
80452: PPUSH
80453: CALL_OW 495
// end ;
80457: PPOPN 1
80459: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80460: LD_EXP 111
80464: PUSH
80465: LD_EXP 145
80469: AND
80470: IFFALSE 80681
80472: GO 80474
80474: DISABLE
80475: LD_INT 0
80477: PPUSH
80478: PPUSH
80479: PPUSH
80480: PPUSH
80481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80482: LD_ADDR_VAR 0 5
80486: PUSH
80487: LD_INT 22
80489: PUSH
80490: LD_OWVAR 2
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: PUSH
80499: LD_INT 21
80501: PUSH
80502: LD_INT 1
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: PUSH
80509: EMPTY
80510: LIST
80511: LIST
80512: PPUSH
80513: CALL_OW 69
80517: ST_TO_ADDR
// if not tmp then
80518: LD_VAR 0 5
80522: NOT
80523: IFFALSE 80527
// exit ;
80525: GO 80681
// for i in tmp do
80527: LD_ADDR_VAR 0 1
80531: PUSH
80532: LD_VAR 0 5
80536: PUSH
80537: FOR_IN
80538: IFFALSE 80679
// begin d := rand ( 0 , 5 ) ;
80540: LD_ADDR_VAR 0 4
80544: PUSH
80545: LD_INT 0
80547: PPUSH
80548: LD_INT 5
80550: PPUSH
80551: CALL_OW 12
80555: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80556: LD_ADDR_VAR 0 2
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: CALL_OW 250
80570: PPUSH
80571: LD_VAR 0 4
80575: PPUSH
80576: LD_INT 3
80578: PPUSH
80579: LD_INT 12
80581: PPUSH
80582: CALL_OW 12
80586: PPUSH
80587: CALL_OW 272
80591: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80592: LD_ADDR_VAR 0 3
80596: PUSH
80597: LD_VAR 0 1
80601: PPUSH
80602: CALL_OW 251
80606: PPUSH
80607: LD_VAR 0 4
80611: PPUSH
80612: LD_INT 3
80614: PPUSH
80615: LD_INT 12
80617: PPUSH
80618: CALL_OW 12
80622: PPUSH
80623: CALL_OW 273
80627: ST_TO_ADDR
// if ValidHex ( x , y ) then
80628: LD_VAR 0 2
80632: PPUSH
80633: LD_VAR 0 3
80637: PPUSH
80638: CALL_OW 488
80642: IFFALSE 80677
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80644: LD_VAR 0 1
80648: PPUSH
80649: LD_VAR 0 2
80653: PPUSH
80654: LD_VAR 0 3
80658: PPUSH
80659: LD_INT 3
80661: PPUSH
80662: LD_INT 6
80664: PPUSH
80665: CALL_OW 12
80669: PPUSH
80670: LD_INT 1
80672: PPUSH
80673: CALL_OW 483
// end ;
80677: GO 80537
80679: POP
80680: POP
// end ;
80681: PPOPN 5
80683: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80684: LD_EXP 111
80688: PUSH
80689: LD_EXP 146
80693: AND
80694: IFFALSE 80788
80696: GO 80698
80698: DISABLE
80699: LD_INT 0
80701: PPUSH
80702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80703: LD_ADDR_VAR 0 2
80707: PUSH
80708: LD_INT 22
80710: PUSH
80711: LD_OWVAR 2
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 32
80722: PUSH
80723: LD_INT 1
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 21
80732: PUSH
80733: LD_INT 2
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: LIST
80744: PPUSH
80745: CALL_OW 69
80749: ST_TO_ADDR
// if not tmp then
80750: LD_VAR 0 2
80754: NOT
80755: IFFALSE 80759
// exit ;
80757: GO 80788
// for i in tmp do
80759: LD_ADDR_VAR 0 1
80763: PUSH
80764: LD_VAR 0 2
80768: PUSH
80769: FOR_IN
80770: IFFALSE 80786
// SetFuel ( i , 0 ) ;
80772: LD_VAR 0 1
80776: PPUSH
80777: LD_INT 0
80779: PPUSH
80780: CALL_OW 240
80784: GO 80769
80786: POP
80787: POP
// end ;
80788: PPOPN 2
80790: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80791: LD_EXP 111
80795: PUSH
80796: LD_EXP 147
80800: AND
80801: IFFALSE 80867
80803: GO 80805
80805: DISABLE
80806: LD_INT 0
80808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80809: LD_ADDR_VAR 0 1
80813: PUSH
80814: LD_INT 22
80816: PUSH
80817: LD_OWVAR 2
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: PUSH
80826: LD_INT 30
80828: PUSH
80829: LD_INT 29
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PPUSH
80840: CALL_OW 69
80844: ST_TO_ADDR
// if not tmp then
80845: LD_VAR 0 1
80849: NOT
80850: IFFALSE 80854
// exit ;
80852: GO 80867
// DestroyUnit ( tmp [ 1 ] ) ;
80854: LD_VAR 0 1
80858: PUSH
80859: LD_INT 1
80861: ARRAY
80862: PPUSH
80863: CALL_OW 65
// end ;
80867: PPOPN 1
80869: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80870: LD_EXP 111
80874: PUSH
80875: LD_EXP 149
80879: AND
80880: IFFALSE 81009
80882: GO 80884
80884: DISABLE
80885: LD_INT 0
80887: PPUSH
// begin uc_side := 0 ;
80888: LD_ADDR_OWVAR 20
80892: PUSH
80893: LD_INT 0
80895: ST_TO_ADDR
// uc_nation := nation_arabian ;
80896: LD_ADDR_OWVAR 21
80900: PUSH
80901: LD_INT 2
80903: ST_TO_ADDR
// hc_gallery :=  ;
80904: LD_ADDR_OWVAR 33
80908: PUSH
80909: LD_STRING 
80911: ST_TO_ADDR
// hc_name :=  ;
80912: LD_ADDR_OWVAR 26
80916: PUSH
80917: LD_STRING 
80919: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80920: LD_INT 1
80922: PPUSH
80923: LD_INT 11
80925: PPUSH
80926: LD_INT 10
80928: PPUSH
80929: CALL_OW 380
// un := CreateHuman ;
80933: LD_ADDR_VAR 0 1
80937: PUSH
80938: CALL_OW 44
80942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80943: LD_VAR 0 1
80947: PPUSH
80948: LD_INT 1
80950: PPUSH
80951: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80955: LD_INT 35
80957: PPUSH
80958: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80962: LD_VAR 0 1
80966: PPUSH
80967: LD_INT 22
80969: PUSH
80970: LD_OWVAR 2
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PPUSH
80979: CALL_OW 69
80983: PPUSH
80984: LD_VAR 0 1
80988: PPUSH
80989: CALL_OW 74
80993: PPUSH
80994: CALL_OW 115
// until IsDead ( un ) ;
80998: LD_VAR 0 1
81002: PPUSH
81003: CALL_OW 301
81007: IFFALSE 80955
// end ;
81009: PPOPN 1
81011: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81012: LD_EXP 111
81016: PUSH
81017: LD_EXP 151
81021: AND
81022: IFFALSE 81034
81024: GO 81026
81026: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81027: LD_STRING earthquake(getX(game), 0, 32)
81029: PPUSH
81030: CALL_OW 559
81034: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81035: LD_EXP 111
81039: PUSH
81040: LD_EXP 152
81044: AND
81045: IFFALSE 81136
81047: GO 81049
81049: DISABLE
81050: LD_INT 0
81052: PPUSH
// begin enable ;
81053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81054: LD_ADDR_VAR 0 1
81058: PUSH
81059: LD_INT 22
81061: PUSH
81062: LD_OWVAR 2
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 21
81073: PUSH
81074: LD_INT 2
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 33
81083: PUSH
81084: LD_INT 3
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: LIST
81095: PPUSH
81096: CALL_OW 69
81100: ST_TO_ADDR
// if not tmp then
81101: LD_VAR 0 1
81105: NOT
81106: IFFALSE 81110
// exit ;
81108: GO 81136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81110: LD_VAR 0 1
81114: PUSH
81115: LD_INT 1
81117: PPUSH
81118: LD_VAR 0 1
81122: PPUSH
81123: CALL_OW 12
81127: ARRAY
81128: PPUSH
81129: LD_INT 1
81131: PPUSH
81132: CALL_OW 234
// end ;
81136: PPOPN 1
81138: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81139: LD_EXP 111
81143: PUSH
81144: LD_EXP 153
81148: AND
81149: IFFALSE 81290
81151: GO 81153
81153: DISABLE
81154: LD_INT 0
81156: PPUSH
81157: PPUSH
81158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81159: LD_ADDR_VAR 0 3
81163: PUSH
81164: LD_INT 22
81166: PUSH
81167: LD_OWVAR 2
81171: PUSH
81172: EMPTY
81173: LIST
81174: LIST
81175: PUSH
81176: LD_INT 25
81178: PUSH
81179: LD_INT 1
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: PPUSH
81190: CALL_OW 69
81194: ST_TO_ADDR
// if not tmp then
81195: LD_VAR 0 3
81199: NOT
81200: IFFALSE 81204
// exit ;
81202: GO 81290
// un := tmp [ rand ( 1 , tmp ) ] ;
81204: LD_ADDR_VAR 0 2
81208: PUSH
81209: LD_VAR 0 3
81213: PUSH
81214: LD_INT 1
81216: PPUSH
81217: LD_VAR 0 3
81221: PPUSH
81222: CALL_OW 12
81226: ARRAY
81227: ST_TO_ADDR
// if Crawls ( un ) then
81228: LD_VAR 0 2
81232: PPUSH
81233: CALL_OW 318
81237: IFFALSE 81248
// ComWalk ( un ) ;
81239: LD_VAR 0 2
81243: PPUSH
81244: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81248: LD_VAR 0 2
81252: PPUSH
81253: LD_INT 9
81255: PPUSH
81256: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81260: LD_INT 28
81262: PPUSH
81263: LD_OWVAR 2
81267: PPUSH
81268: LD_INT 2
81270: PPUSH
81271: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81275: LD_INT 29
81277: PPUSH
81278: LD_OWVAR 2
81282: PPUSH
81283: LD_INT 2
81285: PPUSH
81286: CALL_OW 322
// end ;
81290: PPOPN 3
81292: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81293: LD_EXP 111
81297: PUSH
81298: LD_EXP 154
81302: AND
81303: IFFALSE 81414
81305: GO 81307
81307: DISABLE
81308: LD_INT 0
81310: PPUSH
81311: PPUSH
81312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81313: LD_ADDR_VAR 0 3
81317: PUSH
81318: LD_INT 22
81320: PUSH
81321: LD_OWVAR 2
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: PUSH
81330: LD_INT 25
81332: PUSH
81333: LD_INT 1
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: PPUSH
81344: CALL_OW 69
81348: ST_TO_ADDR
// if not tmp then
81349: LD_VAR 0 3
81353: NOT
81354: IFFALSE 81358
// exit ;
81356: GO 81414
// un := tmp [ rand ( 1 , tmp ) ] ;
81358: LD_ADDR_VAR 0 2
81362: PUSH
81363: LD_VAR 0 3
81367: PUSH
81368: LD_INT 1
81370: PPUSH
81371: LD_VAR 0 3
81375: PPUSH
81376: CALL_OW 12
81380: ARRAY
81381: ST_TO_ADDR
// if Crawls ( un ) then
81382: LD_VAR 0 2
81386: PPUSH
81387: CALL_OW 318
81391: IFFALSE 81402
// ComWalk ( un ) ;
81393: LD_VAR 0 2
81397: PPUSH
81398: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81402: LD_VAR 0 2
81406: PPUSH
81407: LD_INT 8
81409: PPUSH
81410: CALL_OW 336
// end ;
81414: PPOPN 3
81416: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81417: LD_EXP 111
81421: PUSH
81422: LD_EXP 155
81426: AND
81427: IFFALSE 81571
81429: GO 81431
81431: DISABLE
81432: LD_INT 0
81434: PPUSH
81435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81436: LD_ADDR_VAR 0 2
81440: PUSH
81441: LD_INT 22
81443: PUSH
81444: LD_OWVAR 2
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: PUSH
81453: LD_INT 21
81455: PUSH
81456: LD_INT 2
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: PUSH
81463: LD_INT 2
81465: PUSH
81466: LD_INT 34
81468: PUSH
81469: LD_INT 12
81471: PUSH
81472: EMPTY
81473: LIST
81474: LIST
81475: PUSH
81476: LD_INT 34
81478: PUSH
81479: LD_INT 51
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: PUSH
81486: LD_INT 34
81488: PUSH
81489: LD_INT 32
81491: PUSH
81492: EMPTY
81493: LIST
81494: LIST
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: LIST
81506: PPUSH
81507: CALL_OW 69
81511: ST_TO_ADDR
// if not tmp then
81512: LD_VAR 0 2
81516: NOT
81517: IFFALSE 81521
// exit ;
81519: GO 81571
// for i in tmp do
81521: LD_ADDR_VAR 0 1
81525: PUSH
81526: LD_VAR 0 2
81530: PUSH
81531: FOR_IN
81532: IFFALSE 81569
// if GetCargo ( i , mat_artifact ) = 0 then
81534: LD_VAR 0 1
81538: PPUSH
81539: LD_INT 4
81541: PPUSH
81542: CALL_OW 289
81546: PUSH
81547: LD_INT 0
81549: EQUAL
81550: IFFALSE 81567
// SetCargo ( i , mat_siberit , 100 ) ;
81552: LD_VAR 0 1
81556: PPUSH
81557: LD_INT 3
81559: PPUSH
81560: LD_INT 100
81562: PPUSH
81563: CALL_OW 290
81567: GO 81531
81569: POP
81570: POP
// end ;
81571: PPOPN 2
81573: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81574: LD_EXP 111
81578: PUSH
81579: LD_EXP 156
81583: AND
81584: IFFALSE 81767
81586: GO 81588
81588: DISABLE
81589: LD_INT 0
81591: PPUSH
81592: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81593: LD_ADDR_VAR 0 2
81597: PUSH
81598: LD_INT 22
81600: PUSH
81601: LD_OWVAR 2
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: PPUSH
81610: CALL_OW 69
81614: ST_TO_ADDR
// if not tmp then
81615: LD_VAR 0 2
81619: NOT
81620: IFFALSE 81624
// exit ;
81622: GO 81767
// for i := 1 to 2 do
81624: LD_ADDR_VAR 0 1
81628: PUSH
81629: DOUBLE
81630: LD_INT 1
81632: DEC
81633: ST_TO_ADDR
81634: LD_INT 2
81636: PUSH
81637: FOR_TO
81638: IFFALSE 81765
// begin uc_side := your_side ;
81640: LD_ADDR_OWVAR 20
81644: PUSH
81645: LD_OWVAR 2
81649: ST_TO_ADDR
// uc_nation := nation_american ;
81650: LD_ADDR_OWVAR 21
81654: PUSH
81655: LD_INT 1
81657: ST_TO_ADDR
// vc_chassis := us_morphling ;
81658: LD_ADDR_OWVAR 37
81662: PUSH
81663: LD_INT 5
81665: ST_TO_ADDR
// vc_engine := engine_siberite ;
81666: LD_ADDR_OWVAR 39
81670: PUSH
81671: LD_INT 3
81673: ST_TO_ADDR
// vc_control := control_computer ;
81674: LD_ADDR_OWVAR 38
81678: PUSH
81679: LD_INT 3
81681: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81682: LD_ADDR_OWVAR 40
81686: PUSH
81687: LD_INT 10
81689: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81690: LD_VAR 0 2
81694: PUSH
81695: LD_INT 1
81697: ARRAY
81698: PPUSH
81699: CALL_OW 310
81703: NOT
81704: IFFALSE 81751
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81706: CALL_OW 45
81710: PPUSH
81711: LD_VAR 0 2
81715: PUSH
81716: LD_INT 1
81718: ARRAY
81719: PPUSH
81720: CALL_OW 250
81724: PPUSH
81725: LD_VAR 0 2
81729: PUSH
81730: LD_INT 1
81732: ARRAY
81733: PPUSH
81734: CALL_OW 251
81738: PPUSH
81739: LD_INT 12
81741: PPUSH
81742: LD_INT 1
81744: PPUSH
81745: CALL_OW 50
81749: GO 81763
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81751: CALL_OW 45
81755: PPUSH
81756: LD_INT 1
81758: PPUSH
81759: CALL_OW 51
// end ;
81763: GO 81637
81765: POP
81766: POP
// end ;
81767: PPOPN 2
81769: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81770: LD_EXP 111
81774: PUSH
81775: LD_EXP 157
81779: AND
81780: IFFALSE 82002
81782: GO 81784
81784: DISABLE
81785: LD_INT 0
81787: PPUSH
81788: PPUSH
81789: PPUSH
81790: PPUSH
81791: PPUSH
81792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81793: LD_ADDR_VAR 0 6
81797: PUSH
81798: LD_INT 22
81800: PUSH
81801: LD_OWVAR 2
81805: PUSH
81806: EMPTY
81807: LIST
81808: LIST
81809: PUSH
81810: LD_INT 21
81812: PUSH
81813: LD_INT 1
81815: PUSH
81816: EMPTY
81817: LIST
81818: LIST
81819: PUSH
81820: LD_INT 3
81822: PUSH
81823: LD_INT 23
81825: PUSH
81826: LD_INT 0
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: LIST
81841: PPUSH
81842: CALL_OW 69
81846: ST_TO_ADDR
// if not tmp then
81847: LD_VAR 0 6
81851: NOT
81852: IFFALSE 81856
// exit ;
81854: GO 82002
// s1 := rand ( 1 , 4 ) ;
81856: LD_ADDR_VAR 0 2
81860: PUSH
81861: LD_INT 1
81863: PPUSH
81864: LD_INT 4
81866: PPUSH
81867: CALL_OW 12
81871: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81872: LD_ADDR_VAR 0 4
81876: PUSH
81877: LD_VAR 0 6
81881: PUSH
81882: LD_INT 1
81884: ARRAY
81885: PPUSH
81886: LD_VAR 0 2
81890: PPUSH
81891: CALL_OW 259
81895: ST_TO_ADDR
// if s1 = 1 then
81896: LD_VAR 0 2
81900: PUSH
81901: LD_INT 1
81903: EQUAL
81904: IFFALSE 81924
// s2 := rand ( 2 , 4 ) else
81906: LD_ADDR_VAR 0 3
81910: PUSH
81911: LD_INT 2
81913: PPUSH
81914: LD_INT 4
81916: PPUSH
81917: CALL_OW 12
81921: ST_TO_ADDR
81922: GO 81932
// s2 := 1 ;
81924: LD_ADDR_VAR 0 3
81928: PUSH
81929: LD_INT 1
81931: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81932: LD_ADDR_VAR 0 5
81936: PUSH
81937: LD_VAR 0 6
81941: PUSH
81942: LD_INT 1
81944: ARRAY
81945: PPUSH
81946: LD_VAR 0 3
81950: PPUSH
81951: CALL_OW 259
81955: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81956: LD_VAR 0 6
81960: PUSH
81961: LD_INT 1
81963: ARRAY
81964: PPUSH
81965: LD_VAR 0 2
81969: PPUSH
81970: LD_VAR 0 5
81974: PPUSH
81975: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81979: LD_VAR 0 6
81983: PUSH
81984: LD_INT 1
81986: ARRAY
81987: PPUSH
81988: LD_VAR 0 3
81992: PPUSH
81993: LD_VAR 0 4
81997: PPUSH
81998: CALL_OW 237
// end ;
82002: PPOPN 6
82004: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82005: LD_EXP 111
82009: PUSH
82010: LD_EXP 158
82014: AND
82015: IFFALSE 82094
82017: GO 82019
82019: DISABLE
82020: LD_INT 0
82022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82023: LD_ADDR_VAR 0 1
82027: PUSH
82028: LD_INT 22
82030: PUSH
82031: LD_OWVAR 2
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PUSH
82040: LD_INT 30
82042: PUSH
82043: LD_INT 3
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PPUSH
82054: CALL_OW 69
82058: ST_TO_ADDR
// if not tmp then
82059: LD_VAR 0 1
82063: NOT
82064: IFFALSE 82068
// exit ;
82066: GO 82094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82068: LD_VAR 0 1
82072: PUSH
82073: LD_INT 1
82075: PPUSH
82076: LD_VAR 0 1
82080: PPUSH
82081: CALL_OW 12
82085: ARRAY
82086: PPUSH
82087: LD_INT 1
82089: PPUSH
82090: CALL_OW 234
// end ;
82094: PPOPN 1
82096: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82097: LD_EXP 111
82101: PUSH
82102: LD_EXP 159
82106: AND
82107: IFFALSE 82219
82109: GO 82111
82111: DISABLE
82112: LD_INT 0
82114: PPUSH
82115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82116: LD_ADDR_VAR 0 2
82120: PUSH
82121: LD_INT 22
82123: PUSH
82124: LD_OWVAR 2
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: PUSH
82133: LD_INT 2
82135: PUSH
82136: LD_INT 30
82138: PUSH
82139: LD_INT 27
82141: PUSH
82142: EMPTY
82143: LIST
82144: LIST
82145: PUSH
82146: LD_INT 30
82148: PUSH
82149: LD_INT 26
82151: PUSH
82152: EMPTY
82153: LIST
82154: LIST
82155: PUSH
82156: LD_INT 30
82158: PUSH
82159: LD_INT 28
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: LIST
82170: LIST
82171: PUSH
82172: EMPTY
82173: LIST
82174: LIST
82175: PPUSH
82176: CALL_OW 69
82180: ST_TO_ADDR
// if not tmp then
82181: LD_VAR 0 2
82185: NOT
82186: IFFALSE 82190
// exit ;
82188: GO 82219
// for i in tmp do
82190: LD_ADDR_VAR 0 1
82194: PUSH
82195: LD_VAR 0 2
82199: PUSH
82200: FOR_IN
82201: IFFALSE 82217
// SetLives ( i , 1 ) ;
82203: LD_VAR 0 1
82207: PPUSH
82208: LD_INT 1
82210: PPUSH
82211: CALL_OW 234
82215: GO 82200
82217: POP
82218: POP
// end ;
82219: PPOPN 2
82221: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82222: LD_EXP 111
82226: PUSH
82227: LD_EXP 160
82231: AND
82232: IFFALSE 82506
82234: GO 82236
82236: DISABLE
82237: LD_INT 0
82239: PPUSH
82240: PPUSH
82241: PPUSH
// begin i := rand ( 1 , 7 ) ;
82242: LD_ADDR_VAR 0 1
82246: PUSH
82247: LD_INT 1
82249: PPUSH
82250: LD_INT 7
82252: PPUSH
82253: CALL_OW 12
82257: ST_TO_ADDR
// case i of 1 :
82258: LD_VAR 0 1
82262: PUSH
82263: LD_INT 1
82265: DOUBLE
82266: EQUAL
82267: IFTRUE 82271
82269: GO 82281
82271: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82272: LD_STRING earthquake(getX(game), 0, 32)
82274: PPUSH
82275: CALL_OW 559
82279: GO 82506
82281: LD_INT 2
82283: DOUBLE
82284: EQUAL
82285: IFTRUE 82289
82287: GO 82303
82289: POP
// begin ToLua ( displayStucuk(); ) ;
82290: LD_STRING displayStucuk();
82292: PPUSH
82293: CALL_OW 559
// ResetFog ;
82297: CALL_OW 335
// end ; 3 :
82301: GO 82506
82303: LD_INT 3
82305: DOUBLE
82306: EQUAL
82307: IFTRUE 82311
82309: GO 82415
82311: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82312: LD_ADDR_VAR 0 2
82316: PUSH
82317: LD_INT 22
82319: PUSH
82320: LD_OWVAR 2
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PUSH
82329: LD_INT 25
82331: PUSH
82332: LD_INT 1
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: PPUSH
82343: CALL_OW 69
82347: ST_TO_ADDR
// if not tmp then
82348: LD_VAR 0 2
82352: NOT
82353: IFFALSE 82357
// exit ;
82355: GO 82506
// un := tmp [ rand ( 1 , tmp ) ] ;
82357: LD_ADDR_VAR 0 3
82361: PUSH
82362: LD_VAR 0 2
82366: PUSH
82367: LD_INT 1
82369: PPUSH
82370: LD_VAR 0 2
82374: PPUSH
82375: CALL_OW 12
82379: ARRAY
82380: ST_TO_ADDR
// if Crawls ( un ) then
82381: LD_VAR 0 3
82385: PPUSH
82386: CALL_OW 318
82390: IFFALSE 82401
// ComWalk ( un ) ;
82392: LD_VAR 0 3
82396: PPUSH
82397: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82401: LD_VAR 0 3
82405: PPUSH
82406: LD_INT 8
82408: PPUSH
82409: CALL_OW 336
// end ; 4 :
82413: GO 82506
82415: LD_INT 4
82417: DOUBLE
82418: EQUAL
82419: IFTRUE 82423
82421: GO 82484
82423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82424: LD_ADDR_VAR 0 2
82428: PUSH
82429: LD_INT 22
82431: PUSH
82432: LD_OWVAR 2
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: LD_INT 30
82443: PUSH
82444: LD_INT 29
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: PPUSH
82455: CALL_OW 69
82459: ST_TO_ADDR
// if not tmp then
82460: LD_VAR 0 2
82464: NOT
82465: IFFALSE 82469
// exit ;
82467: GO 82506
// DestroyUnit ( tmp [ 1 ] ) ;
82469: LD_VAR 0 2
82473: PUSH
82474: LD_INT 1
82476: ARRAY
82477: PPUSH
82478: CALL_OW 65
// end ; 5 .. 7 :
82482: GO 82506
82484: LD_INT 5
82486: DOUBLE
82487: GREATEREQUAL
82488: IFFALSE 82496
82490: LD_INT 7
82492: DOUBLE
82493: LESSEQUAL
82494: IFTRUE 82498
82496: GO 82505
82498: POP
// StreamSibBomb ; end ;
82499: CALL 78756 0 0
82503: GO 82506
82505: POP
// end ;
82506: PPOPN 3
82508: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82509: LD_EXP 111
82513: PUSH
82514: LD_EXP 161
82518: AND
82519: IFFALSE 82675
82521: GO 82523
82523: DISABLE
82524: LD_INT 0
82526: PPUSH
82527: PPUSH
82528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82529: LD_ADDR_VAR 0 2
82533: PUSH
82534: LD_INT 81
82536: PUSH
82537: LD_OWVAR 2
82541: PUSH
82542: EMPTY
82543: LIST
82544: LIST
82545: PUSH
82546: LD_INT 2
82548: PUSH
82549: LD_INT 21
82551: PUSH
82552: LD_INT 1
82554: PUSH
82555: EMPTY
82556: LIST
82557: LIST
82558: PUSH
82559: LD_INT 21
82561: PUSH
82562: LD_INT 2
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: LIST
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PPUSH
82578: CALL_OW 69
82582: ST_TO_ADDR
// if not tmp then
82583: LD_VAR 0 2
82587: NOT
82588: IFFALSE 82592
// exit ;
82590: GO 82675
// p := 0 ;
82592: LD_ADDR_VAR 0 3
82596: PUSH
82597: LD_INT 0
82599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82600: LD_INT 35
82602: PPUSH
82603: CALL_OW 67
// p := p + 1 ;
82607: LD_ADDR_VAR 0 3
82611: PUSH
82612: LD_VAR 0 3
82616: PUSH
82617: LD_INT 1
82619: PLUS
82620: ST_TO_ADDR
// for i in tmp do
82621: LD_ADDR_VAR 0 1
82625: PUSH
82626: LD_VAR 0 2
82630: PUSH
82631: FOR_IN
82632: IFFALSE 82663
// if GetLives ( i ) < 1000 then
82634: LD_VAR 0 1
82638: PPUSH
82639: CALL_OW 256
82643: PUSH
82644: LD_INT 1000
82646: LESS
82647: IFFALSE 82661
// SetLives ( i , 1000 ) ;
82649: LD_VAR 0 1
82653: PPUSH
82654: LD_INT 1000
82656: PPUSH
82657: CALL_OW 234
82661: GO 82631
82663: POP
82664: POP
// until p > 20 ;
82665: LD_VAR 0 3
82669: PUSH
82670: LD_INT 20
82672: GREATER
82673: IFFALSE 82600
// end ;
82675: PPOPN 3
82677: END
// every 0 0$1 trigger StreamModeActive and sTime do
82678: LD_EXP 111
82682: PUSH
82683: LD_EXP 162
82687: AND
82688: IFFALSE 82723
82690: GO 82692
82692: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82693: LD_INT 28
82695: PPUSH
82696: LD_OWVAR 2
82700: PPUSH
82701: LD_INT 2
82703: PPUSH
82704: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82708: LD_INT 30
82710: PPUSH
82711: LD_OWVAR 2
82715: PPUSH
82716: LD_INT 2
82718: PPUSH
82719: CALL_OW 322
// end ;
82723: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82724: LD_EXP 111
82728: PUSH
82729: LD_EXP 163
82733: AND
82734: IFFALSE 82855
82736: GO 82738
82738: DISABLE
82739: LD_INT 0
82741: PPUSH
82742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82743: LD_ADDR_VAR 0 2
82747: PUSH
82748: LD_INT 22
82750: PUSH
82751: LD_OWVAR 2
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PUSH
82760: LD_INT 21
82762: PUSH
82763: LD_INT 1
82765: PUSH
82766: EMPTY
82767: LIST
82768: LIST
82769: PUSH
82770: LD_INT 3
82772: PUSH
82773: LD_INT 23
82775: PUSH
82776: LD_INT 0
82778: PUSH
82779: EMPTY
82780: LIST
82781: LIST
82782: PUSH
82783: EMPTY
82784: LIST
82785: LIST
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: LIST
82791: PPUSH
82792: CALL_OW 69
82796: ST_TO_ADDR
// if not tmp then
82797: LD_VAR 0 2
82801: NOT
82802: IFFALSE 82806
// exit ;
82804: GO 82855
// for i in tmp do
82806: LD_ADDR_VAR 0 1
82810: PUSH
82811: LD_VAR 0 2
82815: PUSH
82816: FOR_IN
82817: IFFALSE 82853
// begin if Crawls ( i ) then
82819: LD_VAR 0 1
82823: PPUSH
82824: CALL_OW 318
82828: IFFALSE 82839
// ComWalk ( i ) ;
82830: LD_VAR 0 1
82834: PPUSH
82835: CALL_OW 138
// SetClass ( i , 2 ) ;
82839: LD_VAR 0 1
82843: PPUSH
82844: LD_INT 2
82846: PPUSH
82847: CALL_OW 336
// end ;
82851: GO 82816
82853: POP
82854: POP
// end ;
82855: PPOPN 2
82857: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82858: LD_EXP 111
82862: PUSH
82863: LD_EXP 164
82867: AND
82868: IFFALSE 83149
82870: GO 82872
82872: DISABLE
82873: LD_INT 0
82875: PPUSH
82876: PPUSH
82877: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82878: LD_OWVAR 2
82882: PPUSH
82883: LD_INT 9
82885: PPUSH
82886: LD_INT 1
82888: PPUSH
82889: LD_INT 1
82891: PPUSH
82892: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82896: LD_INT 9
82898: PPUSH
82899: LD_OWVAR 2
82903: PPUSH
82904: CALL_OW 343
// uc_side := 9 ;
82908: LD_ADDR_OWVAR 20
82912: PUSH
82913: LD_INT 9
82915: ST_TO_ADDR
// uc_nation := 2 ;
82916: LD_ADDR_OWVAR 21
82920: PUSH
82921: LD_INT 2
82923: ST_TO_ADDR
// hc_name := Dark Warrior ;
82924: LD_ADDR_OWVAR 26
82928: PUSH
82929: LD_STRING Dark Warrior
82931: ST_TO_ADDR
// hc_gallery :=  ;
82932: LD_ADDR_OWVAR 33
82936: PUSH
82937: LD_STRING 
82939: ST_TO_ADDR
// hc_noskilllimit := true ;
82940: LD_ADDR_OWVAR 76
82944: PUSH
82945: LD_INT 1
82947: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82948: LD_ADDR_OWVAR 31
82952: PUSH
82953: LD_INT 30
82955: PUSH
82956: LD_INT 30
82958: PUSH
82959: LD_INT 30
82961: PUSH
82962: LD_INT 30
82964: PUSH
82965: EMPTY
82966: LIST
82967: LIST
82968: LIST
82969: LIST
82970: ST_TO_ADDR
// un := CreateHuman ;
82971: LD_ADDR_VAR 0 3
82975: PUSH
82976: CALL_OW 44
82980: ST_TO_ADDR
// hc_noskilllimit := false ;
82981: LD_ADDR_OWVAR 76
82985: PUSH
82986: LD_INT 0
82988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82989: LD_VAR 0 3
82993: PPUSH
82994: LD_INT 1
82996: PPUSH
82997: CALL_OW 51
// p := 0 ;
83001: LD_ADDR_VAR 0 2
83005: PUSH
83006: LD_INT 0
83008: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83009: LD_INT 35
83011: PPUSH
83012: CALL_OW 67
// p := p + 1 ;
83016: LD_ADDR_VAR 0 2
83020: PUSH
83021: LD_VAR 0 2
83025: PUSH
83026: LD_INT 1
83028: PLUS
83029: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83030: LD_VAR 0 3
83034: PPUSH
83035: CALL_OW 256
83039: PUSH
83040: LD_INT 1000
83042: LESS
83043: IFFALSE 83057
// SetLives ( un , 1000 ) ;
83045: LD_VAR 0 3
83049: PPUSH
83050: LD_INT 1000
83052: PPUSH
83053: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83057: LD_VAR 0 3
83061: PPUSH
83062: LD_INT 81
83064: PUSH
83065: LD_OWVAR 2
83069: PUSH
83070: EMPTY
83071: LIST
83072: LIST
83073: PUSH
83074: LD_INT 91
83076: PUSH
83077: LD_VAR 0 3
83081: PUSH
83082: LD_INT 30
83084: PUSH
83085: EMPTY
83086: LIST
83087: LIST
83088: LIST
83089: PUSH
83090: EMPTY
83091: LIST
83092: LIST
83093: PPUSH
83094: CALL_OW 69
83098: PPUSH
83099: LD_VAR 0 3
83103: PPUSH
83104: CALL_OW 74
83108: PPUSH
83109: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
83113: LD_VAR 0 2
83117: PUSH
83118: LD_INT 60
83120: GREATER
83121: PUSH
83122: LD_VAR 0 3
83126: PPUSH
83127: CALL_OW 301
83131: OR
83132: IFFALSE 83009
// if un then
83134: LD_VAR 0 3
83138: IFFALSE 83149
// RemoveUnit ( un ) ;
83140: LD_VAR 0 3
83144: PPUSH
83145: CALL_OW 64
// end ;
83149: PPOPN 3
83151: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83152: LD_INT 0
83154: PPUSH
// case cmd of 301 :
83155: LD_VAR 0 1
83159: PUSH
83160: LD_INT 301
83162: DOUBLE
83163: EQUAL
83164: IFTRUE 83168
83166: GO 83200
83168: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83169: LD_VAR 0 6
83173: PPUSH
83174: LD_VAR 0 7
83178: PPUSH
83179: LD_VAR 0 8
83183: PPUSH
83184: LD_VAR 0 4
83188: PPUSH
83189: LD_VAR 0 5
83193: PPUSH
83194: CALL 84401 0 5
83198: GO 83321
83200: LD_INT 302
83202: DOUBLE
83203: EQUAL
83204: IFTRUE 83208
83206: GO 83245
83208: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83209: LD_VAR 0 6
83213: PPUSH
83214: LD_VAR 0 7
83218: PPUSH
83219: LD_VAR 0 8
83223: PPUSH
83224: LD_VAR 0 9
83228: PPUSH
83229: LD_VAR 0 4
83233: PPUSH
83234: LD_VAR 0 5
83238: PPUSH
83239: CALL 84492 0 6
83243: GO 83321
83245: LD_INT 303
83247: DOUBLE
83248: EQUAL
83249: IFTRUE 83253
83251: GO 83290
83253: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83254: LD_VAR 0 6
83258: PPUSH
83259: LD_VAR 0 7
83263: PPUSH
83264: LD_VAR 0 8
83268: PPUSH
83269: LD_VAR 0 9
83273: PPUSH
83274: LD_VAR 0 4
83278: PPUSH
83279: LD_VAR 0 5
83283: PPUSH
83284: CALL 83326 0 6
83288: GO 83321
83290: LD_INT 304
83292: DOUBLE
83293: EQUAL
83294: IFTRUE 83298
83296: GO 83320
83298: POP
// hHackTeleport ( unit , x , y ) ; end ;
83299: LD_VAR 0 2
83303: PPUSH
83304: LD_VAR 0 4
83308: PPUSH
83309: LD_VAR 0 5
83313: PPUSH
83314: CALL 85085 0 3
83318: GO 83321
83320: POP
// end ;
83321: LD_VAR 0 12
83325: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83326: LD_INT 0
83328: PPUSH
83329: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83330: LD_VAR 0 1
83334: PUSH
83335: LD_INT 1
83337: LESS
83338: PUSH
83339: LD_VAR 0 1
83343: PUSH
83344: LD_INT 3
83346: GREATER
83347: OR
83348: PUSH
83349: LD_VAR 0 5
83353: PPUSH
83354: LD_VAR 0 6
83358: PPUSH
83359: CALL_OW 428
83363: OR
83364: IFFALSE 83368
// exit ;
83366: GO 84088
// uc_side := your_side ;
83368: LD_ADDR_OWVAR 20
83372: PUSH
83373: LD_OWVAR 2
83377: ST_TO_ADDR
// uc_nation := nation ;
83378: LD_ADDR_OWVAR 21
83382: PUSH
83383: LD_VAR 0 1
83387: ST_TO_ADDR
// bc_level = 1 ;
83388: LD_ADDR_OWVAR 43
83392: PUSH
83393: LD_INT 1
83395: ST_TO_ADDR
// case btype of 1 :
83396: LD_VAR 0 2
83400: PUSH
83401: LD_INT 1
83403: DOUBLE
83404: EQUAL
83405: IFTRUE 83409
83407: GO 83420
83409: POP
// bc_type := b_depot ; 2 :
83410: LD_ADDR_OWVAR 42
83414: PUSH
83415: LD_INT 0
83417: ST_TO_ADDR
83418: GO 84032
83420: LD_INT 2
83422: DOUBLE
83423: EQUAL
83424: IFTRUE 83428
83426: GO 83439
83428: POP
// bc_type := b_warehouse ; 3 :
83429: LD_ADDR_OWVAR 42
83433: PUSH
83434: LD_INT 1
83436: ST_TO_ADDR
83437: GO 84032
83439: LD_INT 3
83441: DOUBLE
83442: EQUAL
83443: IFTRUE 83447
83445: GO 83458
83447: POP
// bc_type := b_lab ; 4 .. 9 :
83448: LD_ADDR_OWVAR 42
83452: PUSH
83453: LD_INT 6
83455: ST_TO_ADDR
83456: GO 84032
83458: LD_INT 4
83460: DOUBLE
83461: GREATEREQUAL
83462: IFFALSE 83470
83464: LD_INT 9
83466: DOUBLE
83467: LESSEQUAL
83468: IFTRUE 83472
83470: GO 83524
83472: POP
// begin bc_type := b_lab_half ;
83473: LD_ADDR_OWVAR 42
83477: PUSH
83478: LD_INT 7
83480: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83481: LD_ADDR_OWVAR 44
83485: PUSH
83486: LD_INT 10
83488: PUSH
83489: LD_INT 11
83491: PUSH
83492: LD_INT 12
83494: PUSH
83495: LD_INT 15
83497: PUSH
83498: LD_INT 14
83500: PUSH
83501: LD_INT 13
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: LIST
83508: LIST
83509: LIST
83510: LIST
83511: PUSH
83512: LD_VAR 0 2
83516: PUSH
83517: LD_INT 3
83519: MINUS
83520: ARRAY
83521: ST_TO_ADDR
// end ; 10 .. 13 :
83522: GO 84032
83524: LD_INT 10
83526: DOUBLE
83527: GREATEREQUAL
83528: IFFALSE 83536
83530: LD_INT 13
83532: DOUBLE
83533: LESSEQUAL
83534: IFTRUE 83538
83536: GO 83615
83538: POP
// begin bc_type := b_lab_full ;
83539: LD_ADDR_OWVAR 42
83543: PUSH
83544: LD_INT 8
83546: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83547: LD_ADDR_OWVAR 44
83551: PUSH
83552: LD_INT 10
83554: PUSH
83555: LD_INT 12
83557: PUSH
83558: LD_INT 14
83560: PUSH
83561: LD_INT 13
83563: PUSH
83564: EMPTY
83565: LIST
83566: LIST
83567: LIST
83568: LIST
83569: PUSH
83570: LD_VAR 0 2
83574: PUSH
83575: LD_INT 9
83577: MINUS
83578: ARRAY
83579: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83580: LD_ADDR_OWVAR 45
83584: PUSH
83585: LD_INT 11
83587: PUSH
83588: LD_INT 15
83590: PUSH
83591: LD_INT 12
83593: PUSH
83594: LD_INT 15
83596: PUSH
83597: EMPTY
83598: LIST
83599: LIST
83600: LIST
83601: LIST
83602: PUSH
83603: LD_VAR 0 2
83607: PUSH
83608: LD_INT 9
83610: MINUS
83611: ARRAY
83612: ST_TO_ADDR
// end ; 14 :
83613: GO 84032
83615: LD_INT 14
83617: DOUBLE
83618: EQUAL
83619: IFTRUE 83623
83621: GO 83634
83623: POP
// bc_type := b_workshop ; 15 :
83624: LD_ADDR_OWVAR 42
83628: PUSH
83629: LD_INT 2
83631: ST_TO_ADDR
83632: GO 84032
83634: LD_INT 15
83636: DOUBLE
83637: EQUAL
83638: IFTRUE 83642
83640: GO 83653
83642: POP
// bc_type := b_factory ; 16 :
83643: LD_ADDR_OWVAR 42
83647: PUSH
83648: LD_INT 3
83650: ST_TO_ADDR
83651: GO 84032
83653: LD_INT 16
83655: DOUBLE
83656: EQUAL
83657: IFTRUE 83661
83659: GO 83672
83661: POP
// bc_type := b_ext_gun ; 17 :
83662: LD_ADDR_OWVAR 42
83666: PUSH
83667: LD_INT 17
83669: ST_TO_ADDR
83670: GO 84032
83672: LD_INT 17
83674: DOUBLE
83675: EQUAL
83676: IFTRUE 83680
83678: GO 83708
83680: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83681: LD_ADDR_OWVAR 42
83685: PUSH
83686: LD_INT 19
83688: PUSH
83689: LD_INT 23
83691: PUSH
83692: LD_INT 19
83694: PUSH
83695: EMPTY
83696: LIST
83697: LIST
83698: LIST
83699: PUSH
83700: LD_VAR 0 1
83704: ARRAY
83705: ST_TO_ADDR
83706: GO 84032
83708: LD_INT 18
83710: DOUBLE
83711: EQUAL
83712: IFTRUE 83716
83714: GO 83727
83716: POP
// bc_type := b_ext_radar ; 19 :
83717: LD_ADDR_OWVAR 42
83721: PUSH
83722: LD_INT 20
83724: ST_TO_ADDR
83725: GO 84032
83727: LD_INT 19
83729: DOUBLE
83730: EQUAL
83731: IFTRUE 83735
83733: GO 83746
83735: POP
// bc_type := b_ext_radio ; 20 :
83736: LD_ADDR_OWVAR 42
83740: PUSH
83741: LD_INT 22
83743: ST_TO_ADDR
83744: GO 84032
83746: LD_INT 20
83748: DOUBLE
83749: EQUAL
83750: IFTRUE 83754
83752: GO 83765
83754: POP
// bc_type := b_ext_siberium ; 21 :
83755: LD_ADDR_OWVAR 42
83759: PUSH
83760: LD_INT 21
83762: ST_TO_ADDR
83763: GO 84032
83765: LD_INT 21
83767: DOUBLE
83768: EQUAL
83769: IFTRUE 83773
83771: GO 83784
83773: POP
// bc_type := b_ext_computer ; 22 :
83774: LD_ADDR_OWVAR 42
83778: PUSH
83779: LD_INT 24
83781: ST_TO_ADDR
83782: GO 84032
83784: LD_INT 22
83786: DOUBLE
83787: EQUAL
83788: IFTRUE 83792
83790: GO 83803
83792: POP
// bc_type := b_ext_track ; 23 :
83793: LD_ADDR_OWVAR 42
83797: PUSH
83798: LD_INT 16
83800: ST_TO_ADDR
83801: GO 84032
83803: LD_INT 23
83805: DOUBLE
83806: EQUAL
83807: IFTRUE 83811
83809: GO 83822
83811: POP
// bc_type := b_ext_laser ; 24 :
83812: LD_ADDR_OWVAR 42
83816: PUSH
83817: LD_INT 25
83819: ST_TO_ADDR
83820: GO 84032
83822: LD_INT 24
83824: DOUBLE
83825: EQUAL
83826: IFTRUE 83830
83828: GO 83841
83830: POP
// bc_type := b_control_tower ; 25 :
83831: LD_ADDR_OWVAR 42
83835: PUSH
83836: LD_INT 36
83838: ST_TO_ADDR
83839: GO 84032
83841: LD_INT 25
83843: DOUBLE
83844: EQUAL
83845: IFTRUE 83849
83847: GO 83860
83849: POP
// bc_type := b_breastwork ; 26 :
83850: LD_ADDR_OWVAR 42
83854: PUSH
83855: LD_INT 31
83857: ST_TO_ADDR
83858: GO 84032
83860: LD_INT 26
83862: DOUBLE
83863: EQUAL
83864: IFTRUE 83868
83866: GO 83879
83868: POP
// bc_type := b_bunker ; 27 :
83869: LD_ADDR_OWVAR 42
83873: PUSH
83874: LD_INT 32
83876: ST_TO_ADDR
83877: GO 84032
83879: LD_INT 27
83881: DOUBLE
83882: EQUAL
83883: IFTRUE 83887
83885: GO 83898
83887: POP
// bc_type := b_turret ; 28 :
83888: LD_ADDR_OWVAR 42
83892: PUSH
83893: LD_INT 33
83895: ST_TO_ADDR
83896: GO 84032
83898: LD_INT 28
83900: DOUBLE
83901: EQUAL
83902: IFTRUE 83906
83904: GO 83917
83906: POP
// bc_type := b_armoury ; 29 :
83907: LD_ADDR_OWVAR 42
83911: PUSH
83912: LD_INT 4
83914: ST_TO_ADDR
83915: GO 84032
83917: LD_INT 29
83919: DOUBLE
83920: EQUAL
83921: IFTRUE 83925
83923: GO 83936
83925: POP
// bc_type := b_barracks ; 30 :
83926: LD_ADDR_OWVAR 42
83930: PUSH
83931: LD_INT 5
83933: ST_TO_ADDR
83934: GO 84032
83936: LD_INT 30
83938: DOUBLE
83939: EQUAL
83940: IFTRUE 83944
83942: GO 83955
83944: POP
// bc_type := b_solar_power ; 31 :
83945: LD_ADDR_OWVAR 42
83949: PUSH
83950: LD_INT 27
83952: ST_TO_ADDR
83953: GO 84032
83955: LD_INT 31
83957: DOUBLE
83958: EQUAL
83959: IFTRUE 83963
83961: GO 83974
83963: POP
// bc_type := b_oil_power ; 32 :
83964: LD_ADDR_OWVAR 42
83968: PUSH
83969: LD_INT 26
83971: ST_TO_ADDR
83972: GO 84032
83974: LD_INT 32
83976: DOUBLE
83977: EQUAL
83978: IFTRUE 83982
83980: GO 83993
83982: POP
// bc_type := b_siberite_power ; 33 :
83983: LD_ADDR_OWVAR 42
83987: PUSH
83988: LD_INT 28
83990: ST_TO_ADDR
83991: GO 84032
83993: LD_INT 33
83995: DOUBLE
83996: EQUAL
83997: IFTRUE 84001
83999: GO 84012
84001: POP
// bc_type := b_oil_mine ; 34 :
84002: LD_ADDR_OWVAR 42
84006: PUSH
84007: LD_INT 29
84009: ST_TO_ADDR
84010: GO 84032
84012: LD_INT 34
84014: DOUBLE
84015: EQUAL
84016: IFTRUE 84020
84018: GO 84031
84020: POP
// bc_type := b_siberite_mine ; end ;
84021: LD_ADDR_OWVAR 42
84025: PUSH
84026: LD_INT 30
84028: ST_TO_ADDR
84029: GO 84032
84031: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84032: LD_ADDR_VAR 0 8
84036: PUSH
84037: LD_VAR 0 5
84041: PPUSH
84042: LD_VAR 0 6
84046: PPUSH
84047: LD_VAR 0 3
84051: PPUSH
84052: CALL_OW 47
84056: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84057: LD_OWVAR 42
84061: PUSH
84062: LD_INT 32
84064: PUSH
84065: LD_INT 33
84067: PUSH
84068: EMPTY
84069: LIST
84070: LIST
84071: IN
84072: IFFALSE 84088
// PlaceWeaponTurret ( b , weapon ) ;
84074: LD_VAR 0 8
84078: PPUSH
84079: LD_VAR 0 4
84083: PPUSH
84084: CALL_OW 431
// end ;
84088: LD_VAR 0 7
84092: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84093: LD_INT 0
84095: PPUSH
84096: PPUSH
84097: PPUSH
84098: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84099: LD_ADDR_VAR 0 4
84103: PUSH
84104: LD_INT 22
84106: PUSH
84107: LD_OWVAR 2
84111: PUSH
84112: EMPTY
84113: LIST
84114: LIST
84115: PUSH
84116: LD_INT 2
84118: PUSH
84119: LD_INT 30
84121: PUSH
84122: LD_INT 0
84124: PUSH
84125: EMPTY
84126: LIST
84127: LIST
84128: PUSH
84129: LD_INT 30
84131: PUSH
84132: LD_INT 1
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: LIST
84143: PUSH
84144: EMPTY
84145: LIST
84146: LIST
84147: PPUSH
84148: CALL_OW 69
84152: ST_TO_ADDR
// if not tmp then
84153: LD_VAR 0 4
84157: NOT
84158: IFFALSE 84162
// exit ;
84160: GO 84221
// for i in tmp do
84162: LD_ADDR_VAR 0 2
84166: PUSH
84167: LD_VAR 0 4
84171: PUSH
84172: FOR_IN
84173: IFFALSE 84219
// for j = 1 to 3 do
84175: LD_ADDR_VAR 0 3
84179: PUSH
84180: DOUBLE
84181: LD_INT 1
84183: DEC
84184: ST_TO_ADDR
84185: LD_INT 3
84187: PUSH
84188: FOR_TO
84189: IFFALSE 84215
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84191: LD_VAR 0 2
84195: PPUSH
84196: CALL_OW 274
84200: PPUSH
84201: LD_VAR 0 3
84205: PPUSH
84206: LD_INT 99999
84208: PPUSH
84209: CALL_OW 277
84213: GO 84188
84215: POP
84216: POP
84217: GO 84172
84219: POP
84220: POP
// end ;
84221: LD_VAR 0 1
84225: RET
// export function hHackSetLevel10 ; var i , j ; begin
84226: LD_INT 0
84228: PPUSH
84229: PPUSH
84230: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84231: LD_ADDR_VAR 0 2
84235: PUSH
84236: LD_INT 21
84238: PUSH
84239: LD_INT 1
84241: PUSH
84242: EMPTY
84243: LIST
84244: LIST
84245: PPUSH
84246: CALL_OW 69
84250: PUSH
84251: FOR_IN
84252: IFFALSE 84304
// if IsSelected ( i ) then
84254: LD_VAR 0 2
84258: PPUSH
84259: CALL_OW 306
84263: IFFALSE 84302
// begin for j := 1 to 4 do
84265: LD_ADDR_VAR 0 3
84269: PUSH
84270: DOUBLE
84271: LD_INT 1
84273: DEC
84274: ST_TO_ADDR
84275: LD_INT 4
84277: PUSH
84278: FOR_TO
84279: IFFALSE 84300
// SetSkill ( i , j , 10 ) ;
84281: LD_VAR 0 2
84285: PPUSH
84286: LD_VAR 0 3
84290: PPUSH
84291: LD_INT 10
84293: PPUSH
84294: CALL_OW 237
84298: GO 84278
84300: POP
84301: POP
// end ;
84302: GO 84251
84304: POP
84305: POP
// end ;
84306: LD_VAR 0 1
84310: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84311: LD_INT 0
84313: PPUSH
84314: PPUSH
84315: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84316: LD_ADDR_VAR 0 2
84320: PUSH
84321: LD_INT 22
84323: PUSH
84324: LD_OWVAR 2
84328: PUSH
84329: EMPTY
84330: LIST
84331: LIST
84332: PUSH
84333: LD_INT 21
84335: PUSH
84336: LD_INT 1
84338: PUSH
84339: EMPTY
84340: LIST
84341: LIST
84342: PUSH
84343: EMPTY
84344: LIST
84345: LIST
84346: PPUSH
84347: CALL_OW 69
84351: PUSH
84352: FOR_IN
84353: IFFALSE 84394
// begin for j := 1 to 4 do
84355: LD_ADDR_VAR 0 3
84359: PUSH
84360: DOUBLE
84361: LD_INT 1
84363: DEC
84364: ST_TO_ADDR
84365: LD_INT 4
84367: PUSH
84368: FOR_TO
84369: IFFALSE 84390
// SetSkill ( i , j , 10 ) ;
84371: LD_VAR 0 2
84375: PPUSH
84376: LD_VAR 0 3
84380: PPUSH
84381: LD_INT 10
84383: PPUSH
84384: CALL_OW 237
84388: GO 84368
84390: POP
84391: POP
// end ;
84392: GO 84352
84394: POP
84395: POP
// end ;
84396: LD_VAR 0 1
84400: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84401: LD_INT 0
84403: PPUSH
// uc_side := your_side ;
84404: LD_ADDR_OWVAR 20
84408: PUSH
84409: LD_OWVAR 2
84413: ST_TO_ADDR
// uc_nation := nation ;
84414: LD_ADDR_OWVAR 21
84418: PUSH
84419: LD_VAR 0 1
84423: ST_TO_ADDR
// InitHc ;
84424: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84428: LD_INT 0
84430: PPUSH
84431: LD_VAR 0 2
84435: PPUSH
84436: LD_VAR 0 3
84440: PPUSH
84441: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84445: LD_VAR 0 4
84449: PPUSH
84450: LD_VAR 0 5
84454: PPUSH
84455: CALL_OW 428
84459: PUSH
84460: LD_INT 0
84462: EQUAL
84463: IFFALSE 84487
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84465: CALL_OW 44
84469: PPUSH
84470: LD_VAR 0 4
84474: PPUSH
84475: LD_VAR 0 5
84479: PPUSH
84480: LD_INT 1
84482: PPUSH
84483: CALL_OW 48
// end ;
84487: LD_VAR 0 6
84491: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84492: LD_INT 0
84494: PPUSH
84495: PPUSH
// uc_side := your_side ;
84496: LD_ADDR_OWVAR 20
84500: PUSH
84501: LD_OWVAR 2
84505: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84506: LD_VAR 0 1
84510: PUSH
84511: LD_INT 1
84513: PUSH
84514: LD_INT 2
84516: PUSH
84517: LD_INT 3
84519: PUSH
84520: LD_INT 4
84522: PUSH
84523: LD_INT 5
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: LIST
84530: LIST
84531: LIST
84532: IN
84533: IFFALSE 84545
// uc_nation := nation_american else
84535: LD_ADDR_OWVAR 21
84539: PUSH
84540: LD_INT 1
84542: ST_TO_ADDR
84543: GO 84588
// if chassis in [ 11 , 12 , 13 , 14 ] then
84545: LD_VAR 0 1
84549: PUSH
84550: LD_INT 11
84552: PUSH
84553: LD_INT 12
84555: PUSH
84556: LD_INT 13
84558: PUSH
84559: LD_INT 14
84561: PUSH
84562: EMPTY
84563: LIST
84564: LIST
84565: LIST
84566: LIST
84567: IN
84568: IFFALSE 84580
// uc_nation := nation_arabian else
84570: LD_ADDR_OWVAR 21
84574: PUSH
84575: LD_INT 2
84577: ST_TO_ADDR
84578: GO 84588
// uc_nation := nation_russian ;
84580: LD_ADDR_OWVAR 21
84584: PUSH
84585: LD_INT 3
84587: ST_TO_ADDR
// vc_chassis := chassis ;
84588: LD_ADDR_OWVAR 37
84592: PUSH
84593: LD_VAR 0 1
84597: ST_TO_ADDR
// vc_engine := engine ;
84598: LD_ADDR_OWVAR 39
84602: PUSH
84603: LD_VAR 0 2
84607: ST_TO_ADDR
// vc_control := control ;
84608: LD_ADDR_OWVAR 38
84612: PUSH
84613: LD_VAR 0 3
84617: ST_TO_ADDR
// vc_weapon := weapon ;
84618: LD_ADDR_OWVAR 40
84622: PUSH
84623: LD_VAR 0 4
84627: ST_TO_ADDR
// un := CreateVehicle ;
84628: LD_ADDR_VAR 0 8
84632: PUSH
84633: CALL_OW 45
84637: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84638: LD_VAR 0 8
84642: PPUSH
84643: LD_INT 0
84645: PPUSH
84646: LD_INT 5
84648: PPUSH
84649: CALL_OW 12
84653: PPUSH
84654: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84658: LD_VAR 0 8
84662: PPUSH
84663: LD_VAR 0 5
84667: PPUSH
84668: LD_VAR 0 6
84672: PPUSH
84673: LD_INT 1
84675: PPUSH
84676: CALL_OW 48
// end ;
84680: LD_VAR 0 7
84684: RET
// export hInvincible ; every 1 do
84685: GO 84687
84687: DISABLE
// hInvincible := [ ] ;
84688: LD_ADDR_EXP 165
84692: PUSH
84693: EMPTY
84694: ST_TO_ADDR
84695: END
// every 10 do var i ;
84696: GO 84698
84698: DISABLE
84699: LD_INT 0
84701: PPUSH
// begin enable ;
84702: ENABLE
// if not hInvincible then
84703: LD_EXP 165
84707: NOT
84708: IFFALSE 84712
// exit ;
84710: GO 84756
// for i in hInvincible do
84712: LD_ADDR_VAR 0 1
84716: PUSH
84717: LD_EXP 165
84721: PUSH
84722: FOR_IN
84723: IFFALSE 84754
// if GetLives ( i ) < 1000 then
84725: LD_VAR 0 1
84729: PPUSH
84730: CALL_OW 256
84734: PUSH
84735: LD_INT 1000
84737: LESS
84738: IFFALSE 84752
// SetLives ( i , 1000 ) ;
84740: LD_VAR 0 1
84744: PPUSH
84745: LD_INT 1000
84747: PPUSH
84748: CALL_OW 234
84752: GO 84722
84754: POP
84755: POP
// end ;
84756: PPOPN 1
84758: END
// export function hHackInvincible ; var i ; begin
84759: LD_INT 0
84761: PPUSH
84762: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84763: LD_ADDR_VAR 0 2
84767: PUSH
84768: LD_INT 2
84770: PUSH
84771: LD_INT 21
84773: PUSH
84774: LD_INT 1
84776: PUSH
84777: EMPTY
84778: LIST
84779: LIST
84780: PUSH
84781: LD_INT 21
84783: PUSH
84784: LD_INT 2
84786: PUSH
84787: EMPTY
84788: LIST
84789: LIST
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: LIST
84795: PPUSH
84796: CALL_OW 69
84800: PUSH
84801: FOR_IN
84802: IFFALSE 84863
// if IsSelected ( i ) then
84804: LD_VAR 0 2
84808: PPUSH
84809: CALL_OW 306
84813: IFFALSE 84861
// begin if i in hInvincible then
84815: LD_VAR 0 2
84819: PUSH
84820: LD_EXP 165
84824: IN
84825: IFFALSE 84845
// hInvincible := hInvincible diff i else
84827: LD_ADDR_EXP 165
84831: PUSH
84832: LD_EXP 165
84836: PUSH
84837: LD_VAR 0 2
84841: DIFF
84842: ST_TO_ADDR
84843: GO 84861
// hInvincible := hInvincible union i ;
84845: LD_ADDR_EXP 165
84849: PUSH
84850: LD_EXP 165
84854: PUSH
84855: LD_VAR 0 2
84859: UNION
84860: ST_TO_ADDR
// end ;
84861: GO 84801
84863: POP
84864: POP
// end ;
84865: LD_VAR 0 1
84869: RET
// export function hHackInvisible ; var i , j ; begin
84870: LD_INT 0
84872: PPUSH
84873: PPUSH
84874: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84875: LD_ADDR_VAR 0 2
84879: PUSH
84880: LD_INT 21
84882: PUSH
84883: LD_INT 1
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PPUSH
84890: CALL_OW 69
84894: PUSH
84895: FOR_IN
84896: IFFALSE 84920
// if IsSelected ( i ) then
84898: LD_VAR 0 2
84902: PPUSH
84903: CALL_OW 306
84907: IFFALSE 84918
// ComForceInvisible ( i ) ;
84909: LD_VAR 0 2
84913: PPUSH
84914: CALL_OW 496
84918: GO 84895
84920: POP
84921: POP
// end ;
84922: LD_VAR 0 1
84926: RET
// export function hHackChangeYourSide ; begin
84927: LD_INT 0
84929: PPUSH
// if your_side = 8 then
84930: LD_OWVAR 2
84934: PUSH
84935: LD_INT 8
84937: EQUAL
84938: IFFALSE 84950
// your_side := 0 else
84940: LD_ADDR_OWVAR 2
84944: PUSH
84945: LD_INT 0
84947: ST_TO_ADDR
84948: GO 84964
// your_side := your_side + 1 ;
84950: LD_ADDR_OWVAR 2
84954: PUSH
84955: LD_OWVAR 2
84959: PUSH
84960: LD_INT 1
84962: PLUS
84963: ST_TO_ADDR
// end ;
84964: LD_VAR 0 1
84968: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84969: LD_INT 0
84971: PPUSH
84972: PPUSH
84973: PPUSH
// for i in all_units do
84974: LD_ADDR_VAR 0 2
84978: PUSH
84979: LD_OWVAR 3
84983: PUSH
84984: FOR_IN
84985: IFFALSE 85063
// if IsSelected ( i ) then
84987: LD_VAR 0 2
84991: PPUSH
84992: CALL_OW 306
84996: IFFALSE 85061
// begin j := GetSide ( i ) ;
84998: LD_ADDR_VAR 0 3
85002: PUSH
85003: LD_VAR 0 2
85007: PPUSH
85008: CALL_OW 255
85012: ST_TO_ADDR
// if j = 8 then
85013: LD_VAR 0 3
85017: PUSH
85018: LD_INT 8
85020: EQUAL
85021: IFFALSE 85033
// j := 0 else
85023: LD_ADDR_VAR 0 3
85027: PUSH
85028: LD_INT 0
85030: ST_TO_ADDR
85031: GO 85047
// j := j + 1 ;
85033: LD_ADDR_VAR 0 3
85037: PUSH
85038: LD_VAR 0 3
85042: PUSH
85043: LD_INT 1
85045: PLUS
85046: ST_TO_ADDR
// SetSide ( i , j ) ;
85047: LD_VAR 0 2
85051: PPUSH
85052: LD_VAR 0 3
85056: PPUSH
85057: CALL_OW 235
// end ;
85061: GO 84984
85063: POP
85064: POP
// end ;
85065: LD_VAR 0 1
85069: RET
// export function hHackFog ; begin
85070: LD_INT 0
85072: PPUSH
// FogOff ( true ) ;
85073: LD_INT 1
85075: PPUSH
85076: CALL_OW 344
// end ;
85080: LD_VAR 0 1
85084: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85085: LD_INT 0
85087: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85088: LD_VAR 0 1
85092: PPUSH
85093: LD_VAR 0 2
85097: PPUSH
85098: LD_VAR 0 3
85102: PPUSH
85103: LD_INT 1
85105: PPUSH
85106: LD_INT 1
85108: PPUSH
85109: CALL_OW 483
// CenterOnXY ( x , y ) ;
85113: LD_VAR 0 2
85117: PPUSH
85118: LD_VAR 0 3
85122: PPUSH
85123: CALL_OW 84
// end ; end_of_file
85127: LD_VAR 0 4
85131: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
85132: LD_INT 0
85134: PPUSH
85135: PPUSH
85136: PPUSH
85137: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
85138: LD_VAR 0 1
85142: PPUSH
85143: CALL_OW 264
85147: PUSH
85148: LD_EXP 96
85152: EQUAL
85153: IFFALSE 85225
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
85155: LD_INT 68
85157: PPUSH
85158: LD_VAR 0 1
85162: PPUSH
85163: CALL_OW 255
85167: PPUSH
85168: CALL_OW 321
85172: PUSH
85173: LD_INT 2
85175: EQUAL
85176: IFFALSE 85188
// eff := 70 else
85178: LD_ADDR_VAR 0 4
85182: PUSH
85183: LD_INT 70
85185: ST_TO_ADDR
85186: GO 85196
// eff := 30 ;
85188: LD_ADDR_VAR 0 4
85192: PUSH
85193: LD_INT 30
85195: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
85196: LD_VAR 0 1
85200: PPUSH
85201: CALL_OW 250
85205: PPUSH
85206: LD_VAR 0 1
85210: PPUSH
85211: CALL_OW 251
85215: PPUSH
85216: LD_VAR 0 4
85220: PPUSH
85221: CALL_OW 495
// end ; end ;
85225: LD_VAR 0 2
85229: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
85230: LD_INT 0
85232: PPUSH
// end ;
85233: LD_VAR 0 4
85237: RET
// export function SOS_Command ( cmd ) ; begin
85238: LD_INT 0
85240: PPUSH
// end ;
85241: LD_VAR 0 2
85245: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
85246: LD_INT 0
85248: PPUSH
// if cmd = 121 then
85249: LD_VAR 0 1
85253: PUSH
85254: LD_INT 121
85256: EQUAL
85257: IFFALSE 85259
// end ;
85259: LD_VAR 0 6
85263: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
85264: LD_INT 0
85266: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85267: LD_VAR 0 1
85271: PUSH
85272: LD_INT 250
85274: EQUAL
85275: PUSH
85276: LD_VAR 0 2
85280: PPUSH
85281: CALL_OW 264
85285: PUSH
85286: LD_EXP 99
85290: EQUAL
85291: AND
85292: IFFALSE 85313
// MinerPlaceMine ( unit , x , y ) ;
85294: LD_VAR 0 2
85298: PPUSH
85299: LD_VAR 0 4
85303: PPUSH
85304: LD_VAR 0 5
85308: PPUSH
85309: CALL 87662 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85313: LD_VAR 0 1
85317: PUSH
85318: LD_INT 251
85320: EQUAL
85321: PUSH
85322: LD_VAR 0 2
85326: PPUSH
85327: CALL_OW 264
85331: PUSH
85332: LD_EXP 99
85336: EQUAL
85337: AND
85338: IFFALSE 85359
// MinerDetonateMine ( unit , x , y ) ;
85340: LD_VAR 0 2
85344: PPUSH
85345: LD_VAR 0 4
85349: PPUSH
85350: LD_VAR 0 5
85354: PPUSH
85355: CALL 87939 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85359: LD_VAR 0 1
85363: PUSH
85364: LD_INT 252
85366: EQUAL
85367: PUSH
85368: LD_VAR 0 2
85372: PPUSH
85373: CALL_OW 264
85377: PUSH
85378: LD_EXP 99
85382: EQUAL
85383: AND
85384: IFFALSE 85405
// MinerCreateMinefield ( unit , x , y ) ;
85386: LD_VAR 0 2
85390: PPUSH
85391: LD_VAR 0 4
85395: PPUSH
85396: LD_VAR 0 5
85400: PPUSH
85401: CALL 88356 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85405: LD_VAR 0 1
85409: PUSH
85410: LD_INT 253
85412: EQUAL
85413: PUSH
85414: LD_VAR 0 2
85418: PPUSH
85419: CALL_OW 257
85423: PUSH
85424: LD_INT 5
85426: EQUAL
85427: AND
85428: IFFALSE 85449
// ComBinocular ( unit , x , y ) ;
85430: LD_VAR 0 2
85434: PPUSH
85435: LD_VAR 0 4
85439: PPUSH
85440: LD_VAR 0 5
85444: PPUSH
85445: CALL 88727 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85449: LD_VAR 0 1
85453: PUSH
85454: LD_INT 254
85456: EQUAL
85457: PUSH
85458: LD_VAR 0 2
85462: PPUSH
85463: CALL_OW 264
85467: PUSH
85468: LD_EXP 94
85472: EQUAL
85473: AND
85474: PUSH
85475: LD_VAR 0 3
85479: PPUSH
85480: CALL_OW 263
85484: PUSH
85485: LD_INT 3
85487: EQUAL
85488: AND
85489: IFFALSE 85505
// HackDestroyVehicle ( unit , selectedUnit ) ;
85491: LD_VAR 0 2
85495: PPUSH
85496: LD_VAR 0 3
85500: PPUSH
85501: CALL 87022 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85505: LD_VAR 0 1
85509: PUSH
85510: LD_INT 255
85512: EQUAL
85513: PUSH
85514: LD_VAR 0 2
85518: PPUSH
85519: CALL_OW 264
85523: PUSH
85524: LD_INT 14
85526: PUSH
85527: LD_INT 53
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: IN
85534: AND
85535: PUSH
85536: LD_VAR 0 4
85540: PPUSH
85541: LD_VAR 0 5
85545: PPUSH
85546: CALL_OW 488
85550: AND
85551: IFFALSE 85575
// CutTreeXYR ( unit , x , y , 12 ) ;
85553: LD_VAR 0 2
85557: PPUSH
85558: LD_VAR 0 4
85562: PPUSH
85563: LD_VAR 0 5
85567: PPUSH
85568: LD_INT 12
85570: PPUSH
85571: CALL 85588 0 4
// end ;
85575: LD_VAR 0 6
85579: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
85580: LD_INT 0
85582: PPUSH
// end ;
85583: LD_VAR 0 4
85587: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85588: LD_INT 0
85590: PPUSH
85591: PPUSH
85592: PPUSH
85593: PPUSH
85594: PPUSH
85595: PPUSH
85596: PPUSH
85597: PPUSH
85598: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85599: LD_VAR 0 1
85603: NOT
85604: PUSH
85605: LD_VAR 0 2
85609: PPUSH
85610: LD_VAR 0 3
85614: PPUSH
85615: CALL_OW 488
85619: NOT
85620: OR
85621: PUSH
85622: LD_VAR 0 4
85626: NOT
85627: OR
85628: IFFALSE 85632
// exit ;
85630: GO 85972
// list := [ ] ;
85632: LD_ADDR_VAR 0 13
85636: PUSH
85637: EMPTY
85638: ST_TO_ADDR
// if x - r < 0 then
85639: LD_VAR 0 2
85643: PUSH
85644: LD_VAR 0 4
85648: MINUS
85649: PUSH
85650: LD_INT 0
85652: LESS
85653: IFFALSE 85665
// min_x := 0 else
85655: LD_ADDR_VAR 0 7
85659: PUSH
85660: LD_INT 0
85662: ST_TO_ADDR
85663: GO 85681
// min_x := x - r ;
85665: LD_ADDR_VAR 0 7
85669: PUSH
85670: LD_VAR 0 2
85674: PUSH
85675: LD_VAR 0 4
85679: MINUS
85680: ST_TO_ADDR
// if y - r < 0 then
85681: LD_VAR 0 3
85685: PUSH
85686: LD_VAR 0 4
85690: MINUS
85691: PUSH
85692: LD_INT 0
85694: LESS
85695: IFFALSE 85707
// min_y := 0 else
85697: LD_ADDR_VAR 0 8
85701: PUSH
85702: LD_INT 0
85704: ST_TO_ADDR
85705: GO 85723
// min_y := y - r ;
85707: LD_ADDR_VAR 0 8
85711: PUSH
85712: LD_VAR 0 3
85716: PUSH
85717: LD_VAR 0 4
85721: MINUS
85722: ST_TO_ADDR
// max_x := x + r ;
85723: LD_ADDR_VAR 0 9
85727: PUSH
85728: LD_VAR 0 2
85732: PUSH
85733: LD_VAR 0 4
85737: PLUS
85738: ST_TO_ADDR
// max_y := y + r ;
85739: LD_ADDR_VAR 0 10
85743: PUSH
85744: LD_VAR 0 3
85748: PUSH
85749: LD_VAR 0 4
85753: PLUS
85754: ST_TO_ADDR
// for _x = min_x to max_x do
85755: LD_ADDR_VAR 0 11
85759: PUSH
85760: DOUBLE
85761: LD_VAR 0 7
85765: DEC
85766: ST_TO_ADDR
85767: LD_VAR 0 9
85771: PUSH
85772: FOR_TO
85773: IFFALSE 85890
// for _y = min_y to max_y do
85775: LD_ADDR_VAR 0 12
85779: PUSH
85780: DOUBLE
85781: LD_VAR 0 8
85785: DEC
85786: ST_TO_ADDR
85787: LD_VAR 0 10
85791: PUSH
85792: FOR_TO
85793: IFFALSE 85886
// begin if not ValidHex ( _x , _y ) then
85795: LD_VAR 0 11
85799: PPUSH
85800: LD_VAR 0 12
85804: PPUSH
85805: CALL_OW 488
85809: NOT
85810: IFFALSE 85814
// continue ;
85812: GO 85792
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85814: LD_VAR 0 11
85818: PPUSH
85819: LD_VAR 0 12
85823: PPUSH
85824: CALL_OW 351
85828: PUSH
85829: LD_VAR 0 11
85833: PPUSH
85834: LD_VAR 0 12
85838: PPUSH
85839: CALL_OW 554
85843: AND
85844: IFFALSE 85884
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85846: LD_ADDR_VAR 0 13
85850: PUSH
85851: LD_VAR 0 13
85855: PPUSH
85856: LD_VAR 0 13
85860: PUSH
85861: LD_INT 1
85863: PLUS
85864: PPUSH
85865: LD_VAR 0 11
85869: PUSH
85870: LD_VAR 0 12
85874: PUSH
85875: EMPTY
85876: LIST
85877: LIST
85878: PPUSH
85879: CALL_OW 2
85883: ST_TO_ADDR
// end ;
85884: GO 85792
85886: POP
85887: POP
85888: GO 85772
85890: POP
85891: POP
// if not list then
85892: LD_VAR 0 13
85896: NOT
85897: IFFALSE 85901
// exit ;
85899: GO 85972
// for i in list do
85901: LD_ADDR_VAR 0 6
85905: PUSH
85906: LD_VAR 0 13
85910: PUSH
85911: FOR_IN
85912: IFFALSE 85970
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85914: LD_VAR 0 1
85918: PPUSH
85919: LD_STRING M
85921: PUSH
85922: LD_VAR 0 6
85926: PUSH
85927: LD_INT 1
85929: ARRAY
85930: PUSH
85931: LD_VAR 0 6
85935: PUSH
85936: LD_INT 2
85938: ARRAY
85939: PUSH
85940: LD_INT 0
85942: PUSH
85943: LD_INT 0
85945: PUSH
85946: LD_INT 0
85948: PUSH
85949: LD_INT 0
85951: PUSH
85952: EMPTY
85953: LIST
85954: LIST
85955: LIST
85956: LIST
85957: LIST
85958: LIST
85959: LIST
85960: PUSH
85961: EMPTY
85962: LIST
85963: PPUSH
85964: CALL_OW 447
85968: GO 85911
85970: POP
85971: POP
// end ;
85972: LD_VAR 0 5
85976: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85977: LD_EXP 168
85981: NOT
85982: IFFALSE 86032
85984: GO 85986
85986: DISABLE
// begin initHack := true ;
85987: LD_ADDR_EXP 168
85991: PUSH
85992: LD_INT 1
85994: ST_TO_ADDR
// hackTanks := [ ] ;
85995: LD_ADDR_EXP 169
85999: PUSH
86000: EMPTY
86001: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
86002: LD_ADDR_EXP 170
86006: PUSH
86007: EMPTY
86008: ST_TO_ADDR
// hackLimit := 3 ;
86009: LD_ADDR_EXP 171
86013: PUSH
86014: LD_INT 3
86016: ST_TO_ADDR
// hackDist := 12 ;
86017: LD_ADDR_EXP 172
86021: PUSH
86022: LD_INT 12
86024: ST_TO_ADDR
// hackCounter := [ ] ;
86025: LD_ADDR_EXP 173
86029: PUSH
86030: EMPTY
86031: ST_TO_ADDR
// end ;
86032: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
86033: LD_EXP 168
86037: PUSH
86038: LD_INT 34
86040: PUSH
86041: LD_EXP 94
86045: PUSH
86046: EMPTY
86047: LIST
86048: LIST
86049: PPUSH
86050: CALL_OW 69
86054: AND
86055: IFFALSE 86310
86057: GO 86059
86059: DISABLE
86060: LD_INT 0
86062: PPUSH
86063: PPUSH
// begin enable ;
86064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
86065: LD_ADDR_VAR 0 1
86069: PUSH
86070: LD_INT 34
86072: PUSH
86073: LD_EXP 94
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: PPUSH
86082: CALL_OW 69
86086: PUSH
86087: FOR_IN
86088: IFFALSE 86308
// begin if not i in hackTanks then
86090: LD_VAR 0 1
86094: PUSH
86095: LD_EXP 169
86099: IN
86100: NOT
86101: IFFALSE 86184
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
86103: LD_ADDR_EXP 169
86107: PUSH
86108: LD_EXP 169
86112: PPUSH
86113: LD_EXP 169
86117: PUSH
86118: LD_INT 1
86120: PLUS
86121: PPUSH
86122: LD_VAR 0 1
86126: PPUSH
86127: CALL_OW 1
86131: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
86132: LD_ADDR_EXP 170
86136: PUSH
86137: LD_EXP 170
86141: PPUSH
86142: LD_EXP 170
86146: PUSH
86147: LD_INT 1
86149: PLUS
86150: PPUSH
86151: EMPTY
86152: PPUSH
86153: CALL_OW 1
86157: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
86158: LD_ADDR_EXP 173
86162: PUSH
86163: LD_EXP 173
86167: PPUSH
86168: LD_EXP 173
86172: PUSH
86173: LD_INT 1
86175: PLUS
86176: PPUSH
86177: EMPTY
86178: PPUSH
86179: CALL_OW 1
86183: ST_TO_ADDR
// end ; if not IsOk ( i ) then
86184: LD_VAR 0 1
86188: PPUSH
86189: CALL_OW 302
86193: NOT
86194: IFFALSE 86207
// begin HackUnlinkAll ( i ) ;
86196: LD_VAR 0 1
86200: PPUSH
86201: CALL 86313 0 1
// continue ;
86205: GO 86087
// end ; HackCheckCapturedStatus ( i ) ;
86207: LD_VAR 0 1
86211: PPUSH
86212: CALL 86756 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
86216: LD_ADDR_VAR 0 2
86220: PUSH
86221: LD_INT 81
86223: PUSH
86224: LD_VAR 0 1
86228: PPUSH
86229: CALL_OW 255
86233: PUSH
86234: EMPTY
86235: LIST
86236: LIST
86237: PUSH
86238: LD_INT 33
86240: PUSH
86241: LD_INT 3
86243: PUSH
86244: EMPTY
86245: LIST
86246: LIST
86247: PUSH
86248: LD_INT 91
86250: PUSH
86251: LD_VAR 0 1
86255: PUSH
86256: LD_EXP 172
86260: PUSH
86261: EMPTY
86262: LIST
86263: LIST
86264: LIST
86265: PUSH
86266: LD_INT 50
86268: PUSH
86269: EMPTY
86270: LIST
86271: PUSH
86272: EMPTY
86273: LIST
86274: LIST
86275: LIST
86276: LIST
86277: PPUSH
86278: CALL_OW 69
86282: ST_TO_ADDR
// if not tmp then
86283: LD_VAR 0 2
86287: NOT
86288: IFFALSE 86292
// continue ;
86290: GO 86087
// HackLink ( i , tmp ) ;
86292: LD_VAR 0 1
86296: PPUSH
86297: LD_VAR 0 2
86301: PPUSH
86302: CALL 86449 0 2
// end ;
86306: GO 86087
86308: POP
86309: POP
// end ;
86310: PPOPN 2
86312: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86313: LD_INT 0
86315: PPUSH
86316: PPUSH
86317: PPUSH
// if not hack in hackTanks then
86318: LD_VAR 0 1
86322: PUSH
86323: LD_EXP 169
86327: IN
86328: NOT
86329: IFFALSE 86333
// exit ;
86331: GO 86444
// index := GetElementIndex ( hackTanks , hack ) ;
86333: LD_ADDR_VAR 0 4
86337: PUSH
86338: LD_EXP 169
86342: PPUSH
86343: LD_VAR 0 1
86347: PPUSH
86348: CALL 37176 0 2
86352: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86353: LD_EXP 170
86357: PUSH
86358: LD_VAR 0 4
86362: ARRAY
86363: IFFALSE 86444
// begin for i in hackTanksCaptured [ index ] do
86365: LD_ADDR_VAR 0 3
86369: PUSH
86370: LD_EXP 170
86374: PUSH
86375: LD_VAR 0 4
86379: ARRAY
86380: PUSH
86381: FOR_IN
86382: IFFALSE 86408
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86384: LD_VAR 0 3
86388: PUSH
86389: LD_INT 1
86391: ARRAY
86392: PPUSH
86393: LD_VAR 0 3
86397: PUSH
86398: LD_INT 2
86400: ARRAY
86401: PPUSH
86402: CALL_OW 235
86406: GO 86381
86408: POP
86409: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86410: LD_ADDR_EXP 170
86414: PUSH
86415: LD_EXP 170
86419: PPUSH
86420: LD_VAR 0 4
86424: PPUSH
86425: EMPTY
86426: PPUSH
86427: CALL_OW 1
86431: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86432: LD_VAR 0 1
86436: PPUSH
86437: LD_INT 0
86439: PPUSH
86440: CALL_OW 505
// end ; end ;
86444: LD_VAR 0 2
86448: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86449: LD_INT 0
86451: PPUSH
86452: PPUSH
86453: PPUSH
// if not hack in hackTanks or not vehicles then
86454: LD_VAR 0 1
86458: PUSH
86459: LD_EXP 169
86463: IN
86464: NOT
86465: PUSH
86466: LD_VAR 0 2
86470: NOT
86471: OR
86472: IFFALSE 86476
// exit ;
86474: GO 86751
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86476: LD_ADDR_VAR 0 2
86480: PUSH
86481: LD_VAR 0 1
86485: PPUSH
86486: LD_VAR 0 2
86490: PPUSH
86491: LD_INT 1
86493: PPUSH
86494: LD_INT 1
86496: PPUSH
86497: CALL 37826 0 4
86501: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86502: LD_ADDR_VAR 0 5
86506: PUSH
86507: LD_EXP 169
86511: PPUSH
86512: LD_VAR 0 1
86516: PPUSH
86517: CALL 37176 0 2
86521: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86522: LD_EXP 170
86526: PUSH
86527: LD_VAR 0 5
86531: ARRAY
86532: PUSH
86533: LD_EXP 171
86537: LESS
86538: IFFALSE 86727
// begin for i := 1 to vehicles do
86540: LD_ADDR_VAR 0 4
86544: PUSH
86545: DOUBLE
86546: LD_INT 1
86548: DEC
86549: ST_TO_ADDR
86550: LD_VAR 0 2
86554: PUSH
86555: FOR_TO
86556: IFFALSE 86725
// begin if hackTanksCaptured [ index ] = hackLimit then
86558: LD_EXP 170
86562: PUSH
86563: LD_VAR 0 5
86567: ARRAY
86568: PUSH
86569: LD_EXP 171
86573: EQUAL
86574: IFFALSE 86578
// break ;
86576: GO 86725
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86578: LD_ADDR_EXP 173
86582: PUSH
86583: LD_EXP 173
86587: PPUSH
86588: LD_VAR 0 5
86592: PPUSH
86593: LD_EXP 173
86597: PUSH
86598: LD_VAR 0 5
86602: ARRAY
86603: PUSH
86604: LD_INT 1
86606: PLUS
86607: PPUSH
86608: CALL_OW 1
86612: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86613: LD_ADDR_EXP 170
86617: PUSH
86618: LD_EXP 170
86622: PPUSH
86623: LD_VAR 0 5
86627: PUSH
86628: LD_EXP 170
86632: PUSH
86633: LD_VAR 0 5
86637: ARRAY
86638: PUSH
86639: LD_INT 1
86641: PLUS
86642: PUSH
86643: EMPTY
86644: LIST
86645: LIST
86646: PPUSH
86647: LD_VAR 0 2
86651: PUSH
86652: LD_VAR 0 4
86656: ARRAY
86657: PUSH
86658: LD_VAR 0 2
86662: PUSH
86663: LD_VAR 0 4
86667: ARRAY
86668: PPUSH
86669: CALL_OW 255
86673: PUSH
86674: EMPTY
86675: LIST
86676: LIST
86677: PPUSH
86678: CALL 37391 0 3
86682: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86683: LD_VAR 0 2
86687: PUSH
86688: LD_VAR 0 4
86692: ARRAY
86693: PPUSH
86694: LD_VAR 0 1
86698: PPUSH
86699: CALL_OW 255
86703: PPUSH
86704: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86708: LD_VAR 0 2
86712: PUSH
86713: LD_VAR 0 4
86717: ARRAY
86718: PPUSH
86719: CALL_OW 141
// end ;
86723: GO 86555
86725: POP
86726: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86727: LD_VAR 0 1
86731: PPUSH
86732: LD_EXP 170
86736: PUSH
86737: LD_VAR 0 5
86741: ARRAY
86742: PUSH
86743: LD_INT 0
86745: PLUS
86746: PPUSH
86747: CALL_OW 505
// end ;
86751: LD_VAR 0 3
86755: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86756: LD_INT 0
86758: PPUSH
86759: PPUSH
86760: PPUSH
86761: PPUSH
// if not hack in hackTanks then
86762: LD_VAR 0 1
86766: PUSH
86767: LD_EXP 169
86771: IN
86772: NOT
86773: IFFALSE 86777
// exit ;
86775: GO 87017
// index := GetElementIndex ( hackTanks , hack ) ;
86777: LD_ADDR_VAR 0 4
86781: PUSH
86782: LD_EXP 169
86786: PPUSH
86787: LD_VAR 0 1
86791: PPUSH
86792: CALL 37176 0 2
86796: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86797: LD_ADDR_VAR 0 3
86801: PUSH
86802: DOUBLE
86803: LD_EXP 170
86807: PUSH
86808: LD_VAR 0 4
86812: ARRAY
86813: INC
86814: ST_TO_ADDR
86815: LD_INT 1
86817: PUSH
86818: FOR_DOWNTO
86819: IFFALSE 86991
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86821: LD_ADDR_VAR 0 5
86825: PUSH
86826: LD_EXP 170
86830: PUSH
86831: LD_VAR 0 4
86835: ARRAY
86836: PUSH
86837: LD_VAR 0 3
86841: ARRAY
86842: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86843: LD_VAR 0 5
86847: PUSH
86848: LD_INT 1
86850: ARRAY
86851: PPUSH
86852: CALL_OW 302
86856: NOT
86857: PUSH
86858: LD_VAR 0 5
86862: PUSH
86863: LD_INT 1
86865: ARRAY
86866: PPUSH
86867: CALL_OW 255
86871: PUSH
86872: LD_VAR 0 1
86876: PPUSH
86877: CALL_OW 255
86881: NONEQUAL
86882: OR
86883: IFFALSE 86989
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86885: LD_VAR 0 5
86889: PUSH
86890: LD_INT 1
86892: ARRAY
86893: PPUSH
86894: CALL_OW 305
86898: PUSH
86899: LD_VAR 0 5
86903: PUSH
86904: LD_INT 1
86906: ARRAY
86907: PPUSH
86908: CALL_OW 255
86912: PUSH
86913: LD_VAR 0 1
86917: PPUSH
86918: CALL_OW 255
86922: EQUAL
86923: AND
86924: IFFALSE 86948
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86926: LD_VAR 0 5
86930: PUSH
86931: LD_INT 1
86933: ARRAY
86934: PPUSH
86935: LD_VAR 0 5
86939: PUSH
86940: LD_INT 2
86942: ARRAY
86943: PPUSH
86944: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86948: LD_ADDR_EXP 170
86952: PUSH
86953: LD_EXP 170
86957: PPUSH
86958: LD_VAR 0 4
86962: PPUSH
86963: LD_EXP 170
86967: PUSH
86968: LD_VAR 0 4
86972: ARRAY
86973: PPUSH
86974: LD_VAR 0 3
86978: PPUSH
86979: CALL_OW 3
86983: PPUSH
86984: CALL_OW 1
86988: ST_TO_ADDR
// end ; end ;
86989: GO 86818
86991: POP
86992: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86993: LD_VAR 0 1
86997: PPUSH
86998: LD_EXP 170
87002: PUSH
87003: LD_VAR 0 4
87007: ARRAY
87008: PUSH
87009: LD_INT 0
87011: PLUS
87012: PPUSH
87013: CALL_OW 505
// end ;
87017: LD_VAR 0 2
87021: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
87022: LD_INT 0
87024: PPUSH
87025: PPUSH
87026: PPUSH
87027: PPUSH
// if not hack in hackTanks then
87028: LD_VAR 0 1
87032: PUSH
87033: LD_EXP 169
87037: IN
87038: NOT
87039: IFFALSE 87043
// exit ;
87041: GO 87128
// index := GetElementIndex ( hackTanks , hack ) ;
87043: LD_ADDR_VAR 0 5
87047: PUSH
87048: LD_EXP 169
87052: PPUSH
87053: LD_VAR 0 1
87057: PPUSH
87058: CALL 37176 0 2
87062: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
87063: LD_ADDR_VAR 0 4
87067: PUSH
87068: DOUBLE
87069: LD_INT 1
87071: DEC
87072: ST_TO_ADDR
87073: LD_EXP 170
87077: PUSH
87078: LD_VAR 0 5
87082: ARRAY
87083: PUSH
87084: FOR_TO
87085: IFFALSE 87126
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
87087: LD_EXP 170
87091: PUSH
87092: LD_VAR 0 5
87096: ARRAY
87097: PUSH
87098: LD_VAR 0 4
87102: ARRAY
87103: PUSH
87104: LD_INT 1
87106: ARRAY
87107: PUSH
87108: LD_VAR 0 2
87112: EQUAL
87113: IFFALSE 87124
// KillUnit ( vehicle ) ;
87115: LD_VAR 0 2
87119: PPUSH
87120: CALL_OW 66
87124: GO 87084
87126: POP
87127: POP
// end ;
87128: LD_VAR 0 3
87132: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
87133: LD_EXP 174
87137: NOT
87138: IFFALSE 87173
87140: GO 87142
87142: DISABLE
// begin initMiner := true ;
87143: LD_ADDR_EXP 174
87147: PUSH
87148: LD_INT 1
87150: ST_TO_ADDR
// minersList := [ ] ;
87151: LD_ADDR_EXP 175
87155: PUSH
87156: EMPTY
87157: ST_TO_ADDR
// minerMinesList := [ ] ;
87158: LD_ADDR_EXP 176
87162: PUSH
87163: EMPTY
87164: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
87165: LD_ADDR_EXP 177
87169: PUSH
87170: LD_INT 5
87172: ST_TO_ADDR
// end ;
87173: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
87174: LD_EXP 174
87178: PUSH
87179: LD_INT 34
87181: PUSH
87182: LD_EXP 99
87186: PUSH
87187: EMPTY
87188: LIST
87189: LIST
87190: PPUSH
87191: CALL_OW 69
87195: AND
87196: IFFALSE 87659
87198: GO 87200
87200: DISABLE
87201: LD_INT 0
87203: PPUSH
87204: PPUSH
87205: PPUSH
87206: PPUSH
// begin enable ;
87207: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
87208: LD_ADDR_VAR 0 1
87212: PUSH
87213: LD_INT 34
87215: PUSH
87216: LD_EXP 99
87220: PUSH
87221: EMPTY
87222: LIST
87223: LIST
87224: PPUSH
87225: CALL_OW 69
87229: PUSH
87230: FOR_IN
87231: IFFALSE 87303
// begin if not i in minersList then
87233: LD_VAR 0 1
87237: PUSH
87238: LD_EXP 175
87242: IN
87243: NOT
87244: IFFALSE 87301
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87246: LD_ADDR_EXP 175
87250: PUSH
87251: LD_EXP 175
87255: PPUSH
87256: LD_EXP 175
87260: PUSH
87261: LD_INT 1
87263: PLUS
87264: PPUSH
87265: LD_VAR 0 1
87269: PPUSH
87270: CALL_OW 1
87274: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87275: LD_ADDR_EXP 176
87279: PUSH
87280: LD_EXP 176
87284: PPUSH
87285: LD_EXP 176
87289: PUSH
87290: LD_INT 1
87292: PLUS
87293: PPUSH
87294: EMPTY
87295: PPUSH
87296: CALL_OW 1
87300: ST_TO_ADDR
// end end ;
87301: GO 87230
87303: POP
87304: POP
// for i := minerMinesList downto 1 do
87305: LD_ADDR_VAR 0 1
87309: PUSH
87310: DOUBLE
87311: LD_EXP 176
87315: INC
87316: ST_TO_ADDR
87317: LD_INT 1
87319: PUSH
87320: FOR_DOWNTO
87321: IFFALSE 87657
// begin if IsLive ( minersList [ i ] ) then
87323: LD_EXP 175
87327: PUSH
87328: LD_VAR 0 1
87332: ARRAY
87333: PPUSH
87334: CALL_OW 300
87338: IFFALSE 87366
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87340: LD_EXP 175
87344: PUSH
87345: LD_VAR 0 1
87349: ARRAY
87350: PPUSH
87351: LD_EXP 176
87355: PUSH
87356: LD_VAR 0 1
87360: ARRAY
87361: PPUSH
87362: CALL_OW 505
// if not minerMinesList [ i ] then
87366: LD_EXP 176
87370: PUSH
87371: LD_VAR 0 1
87375: ARRAY
87376: NOT
87377: IFFALSE 87381
// continue ;
87379: GO 87320
// for j := minerMinesList [ i ] downto 1 do
87381: LD_ADDR_VAR 0 2
87385: PUSH
87386: DOUBLE
87387: LD_EXP 176
87391: PUSH
87392: LD_VAR 0 1
87396: ARRAY
87397: INC
87398: ST_TO_ADDR
87399: LD_INT 1
87401: PUSH
87402: FOR_DOWNTO
87403: IFFALSE 87653
// begin side := GetSide ( minersList [ i ] ) ;
87405: LD_ADDR_VAR 0 3
87409: PUSH
87410: LD_EXP 175
87414: PUSH
87415: LD_VAR 0 1
87419: ARRAY
87420: PPUSH
87421: CALL_OW 255
87425: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87426: LD_ADDR_VAR 0 4
87430: PUSH
87431: LD_EXP 176
87435: PUSH
87436: LD_VAR 0 1
87440: ARRAY
87441: PUSH
87442: LD_VAR 0 2
87446: ARRAY
87447: PUSH
87448: LD_INT 1
87450: ARRAY
87451: PPUSH
87452: LD_EXP 176
87456: PUSH
87457: LD_VAR 0 1
87461: ARRAY
87462: PUSH
87463: LD_VAR 0 2
87467: ARRAY
87468: PUSH
87469: LD_INT 2
87471: ARRAY
87472: PPUSH
87473: CALL_OW 428
87477: ST_TO_ADDR
// if not tmp then
87478: LD_VAR 0 4
87482: NOT
87483: IFFALSE 87487
// continue ;
87485: GO 87402
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87487: LD_VAR 0 4
87491: PUSH
87492: LD_INT 81
87494: PUSH
87495: LD_VAR 0 3
87499: PUSH
87500: EMPTY
87501: LIST
87502: LIST
87503: PPUSH
87504: CALL_OW 69
87508: IN
87509: PUSH
87510: LD_EXP 176
87514: PUSH
87515: LD_VAR 0 1
87519: ARRAY
87520: PUSH
87521: LD_VAR 0 2
87525: ARRAY
87526: PUSH
87527: LD_INT 1
87529: ARRAY
87530: PPUSH
87531: LD_EXP 176
87535: PUSH
87536: LD_VAR 0 1
87540: ARRAY
87541: PUSH
87542: LD_VAR 0 2
87546: ARRAY
87547: PUSH
87548: LD_INT 2
87550: ARRAY
87551: PPUSH
87552: CALL_OW 458
87556: AND
87557: IFFALSE 87651
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87559: LD_EXP 176
87563: PUSH
87564: LD_VAR 0 1
87568: ARRAY
87569: PUSH
87570: LD_VAR 0 2
87574: ARRAY
87575: PUSH
87576: LD_INT 1
87578: ARRAY
87579: PPUSH
87580: LD_EXP 176
87584: PUSH
87585: LD_VAR 0 1
87589: ARRAY
87590: PUSH
87591: LD_VAR 0 2
87595: ARRAY
87596: PUSH
87597: LD_INT 2
87599: ARRAY
87600: PPUSH
87601: LD_VAR 0 3
87605: PPUSH
87606: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87610: LD_ADDR_EXP 176
87614: PUSH
87615: LD_EXP 176
87619: PPUSH
87620: LD_VAR 0 1
87624: PPUSH
87625: LD_EXP 176
87629: PUSH
87630: LD_VAR 0 1
87634: ARRAY
87635: PPUSH
87636: LD_VAR 0 2
87640: PPUSH
87641: CALL_OW 3
87645: PPUSH
87646: CALL_OW 1
87650: ST_TO_ADDR
// end ; end ;
87651: GO 87402
87653: POP
87654: POP
// end ;
87655: GO 87320
87657: POP
87658: POP
// end ;
87659: PPOPN 4
87661: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87662: LD_INT 0
87664: PPUSH
87665: PPUSH
// result := false ;
87666: LD_ADDR_VAR 0 4
87670: PUSH
87671: LD_INT 0
87673: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87674: LD_VAR 0 1
87678: PPUSH
87679: CALL_OW 264
87683: PUSH
87684: LD_EXP 99
87688: EQUAL
87689: NOT
87690: IFFALSE 87694
// exit ;
87692: GO 87934
// index := GetElementIndex ( minersList , unit ) ;
87694: LD_ADDR_VAR 0 5
87698: PUSH
87699: LD_EXP 175
87703: PPUSH
87704: LD_VAR 0 1
87708: PPUSH
87709: CALL 37176 0 2
87713: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87714: LD_EXP 176
87718: PUSH
87719: LD_VAR 0 5
87723: ARRAY
87724: PUSH
87725: LD_EXP 177
87729: GREATEREQUAL
87730: IFFALSE 87734
// exit ;
87732: GO 87934
// ComMoveXY ( unit , x , y ) ;
87734: LD_VAR 0 1
87738: PPUSH
87739: LD_VAR 0 2
87743: PPUSH
87744: LD_VAR 0 3
87748: PPUSH
87749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87753: LD_INT 35
87755: PPUSH
87756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87760: LD_VAR 0 1
87764: PPUSH
87765: LD_VAR 0 2
87769: PPUSH
87770: LD_VAR 0 3
87774: PPUSH
87775: CALL 67948 0 3
87779: NOT
87780: PUSH
87781: LD_VAR 0 1
87785: PPUSH
87786: CALL_OW 314
87790: AND
87791: IFFALSE 87795
// exit ;
87793: GO 87934
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87795: LD_VAR 0 2
87799: PPUSH
87800: LD_VAR 0 3
87804: PPUSH
87805: CALL_OW 428
87809: PUSH
87810: LD_VAR 0 1
87814: EQUAL
87815: PUSH
87816: LD_VAR 0 1
87820: PPUSH
87821: CALL_OW 314
87825: NOT
87826: AND
87827: IFFALSE 87753
// PlaySoundXY ( x , y , PlantMine ) ;
87829: LD_VAR 0 2
87833: PPUSH
87834: LD_VAR 0 3
87838: PPUSH
87839: LD_STRING PlantMine
87841: PPUSH
87842: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87846: LD_VAR 0 2
87850: PPUSH
87851: LD_VAR 0 3
87855: PPUSH
87856: LD_VAR 0 1
87860: PPUSH
87861: CALL_OW 255
87865: PPUSH
87866: LD_INT 0
87868: PPUSH
87869: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87873: LD_ADDR_EXP 176
87877: PUSH
87878: LD_EXP 176
87882: PPUSH
87883: LD_VAR 0 5
87887: PUSH
87888: LD_EXP 176
87892: PUSH
87893: LD_VAR 0 5
87897: ARRAY
87898: PUSH
87899: LD_INT 1
87901: PLUS
87902: PUSH
87903: EMPTY
87904: LIST
87905: LIST
87906: PPUSH
87907: LD_VAR 0 2
87911: PUSH
87912: LD_VAR 0 3
87916: PUSH
87917: EMPTY
87918: LIST
87919: LIST
87920: PPUSH
87921: CALL 37391 0 3
87925: ST_TO_ADDR
// result := true ;
87926: LD_ADDR_VAR 0 4
87930: PUSH
87931: LD_INT 1
87933: ST_TO_ADDR
// end ;
87934: LD_VAR 0 4
87938: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87939: LD_INT 0
87941: PPUSH
87942: PPUSH
87943: PPUSH
// if not unit in minersList then
87944: LD_VAR 0 1
87948: PUSH
87949: LD_EXP 175
87953: IN
87954: NOT
87955: IFFALSE 87959
// exit ;
87957: GO 88351
// index := GetElementIndex ( minersList , unit ) ;
87959: LD_ADDR_VAR 0 6
87963: PUSH
87964: LD_EXP 175
87968: PPUSH
87969: LD_VAR 0 1
87973: PPUSH
87974: CALL 37176 0 2
87978: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87979: LD_ADDR_VAR 0 5
87983: PUSH
87984: DOUBLE
87985: LD_EXP 176
87989: PUSH
87990: LD_VAR 0 6
87994: ARRAY
87995: INC
87996: ST_TO_ADDR
87997: LD_INT 1
87999: PUSH
88000: FOR_DOWNTO
88001: IFFALSE 88162
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
88003: LD_EXP 176
88007: PUSH
88008: LD_VAR 0 6
88012: ARRAY
88013: PUSH
88014: LD_VAR 0 5
88018: ARRAY
88019: PUSH
88020: LD_INT 1
88022: ARRAY
88023: PUSH
88024: LD_VAR 0 2
88028: EQUAL
88029: PUSH
88030: LD_EXP 176
88034: PUSH
88035: LD_VAR 0 6
88039: ARRAY
88040: PUSH
88041: LD_VAR 0 5
88045: ARRAY
88046: PUSH
88047: LD_INT 2
88049: ARRAY
88050: PUSH
88051: LD_VAR 0 3
88055: EQUAL
88056: AND
88057: IFFALSE 88160
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88059: LD_EXP 176
88063: PUSH
88064: LD_VAR 0 6
88068: ARRAY
88069: PUSH
88070: LD_VAR 0 5
88074: ARRAY
88075: PUSH
88076: LD_INT 1
88078: ARRAY
88079: PPUSH
88080: LD_EXP 176
88084: PUSH
88085: LD_VAR 0 6
88089: ARRAY
88090: PUSH
88091: LD_VAR 0 5
88095: ARRAY
88096: PUSH
88097: LD_INT 2
88099: ARRAY
88100: PPUSH
88101: LD_VAR 0 1
88105: PPUSH
88106: CALL_OW 255
88110: PPUSH
88111: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88115: LD_ADDR_EXP 176
88119: PUSH
88120: LD_EXP 176
88124: PPUSH
88125: LD_VAR 0 6
88129: PPUSH
88130: LD_EXP 176
88134: PUSH
88135: LD_VAR 0 6
88139: ARRAY
88140: PPUSH
88141: LD_VAR 0 5
88145: PPUSH
88146: CALL_OW 3
88150: PPUSH
88151: CALL_OW 1
88155: ST_TO_ADDR
// exit ;
88156: POP
88157: POP
88158: GO 88351
// end ; end ;
88160: GO 88000
88162: POP
88163: POP
// for i := minerMinesList [ index ] downto 1 do
88164: LD_ADDR_VAR 0 5
88168: PUSH
88169: DOUBLE
88170: LD_EXP 176
88174: PUSH
88175: LD_VAR 0 6
88179: ARRAY
88180: INC
88181: ST_TO_ADDR
88182: LD_INT 1
88184: PUSH
88185: FOR_DOWNTO
88186: IFFALSE 88349
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
88188: LD_EXP 176
88192: PUSH
88193: LD_VAR 0 6
88197: ARRAY
88198: PUSH
88199: LD_VAR 0 5
88203: ARRAY
88204: PUSH
88205: LD_INT 1
88207: ARRAY
88208: PPUSH
88209: LD_EXP 176
88213: PUSH
88214: LD_VAR 0 6
88218: ARRAY
88219: PUSH
88220: LD_VAR 0 5
88224: ARRAY
88225: PUSH
88226: LD_INT 2
88228: ARRAY
88229: PPUSH
88230: LD_VAR 0 2
88234: PPUSH
88235: LD_VAR 0 3
88239: PPUSH
88240: CALL_OW 298
88244: PUSH
88245: LD_INT 6
88247: LESS
88248: IFFALSE 88347
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88250: LD_EXP 176
88254: PUSH
88255: LD_VAR 0 6
88259: ARRAY
88260: PUSH
88261: LD_VAR 0 5
88265: ARRAY
88266: PUSH
88267: LD_INT 1
88269: ARRAY
88270: PPUSH
88271: LD_EXP 176
88275: PUSH
88276: LD_VAR 0 6
88280: ARRAY
88281: PUSH
88282: LD_VAR 0 5
88286: ARRAY
88287: PUSH
88288: LD_INT 2
88290: ARRAY
88291: PPUSH
88292: LD_VAR 0 1
88296: PPUSH
88297: CALL_OW 255
88301: PPUSH
88302: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88306: LD_ADDR_EXP 176
88310: PUSH
88311: LD_EXP 176
88315: PPUSH
88316: LD_VAR 0 6
88320: PPUSH
88321: LD_EXP 176
88325: PUSH
88326: LD_VAR 0 6
88330: ARRAY
88331: PPUSH
88332: LD_VAR 0 5
88336: PPUSH
88337: CALL_OW 3
88341: PPUSH
88342: CALL_OW 1
88346: ST_TO_ADDR
// end ; end ;
88347: GO 88185
88349: POP
88350: POP
// end ;
88351: LD_VAR 0 4
88355: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88356: LD_INT 0
88358: PPUSH
88359: PPUSH
88360: PPUSH
88361: PPUSH
88362: PPUSH
88363: PPUSH
88364: PPUSH
88365: PPUSH
88366: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88367: LD_VAR 0 1
88371: PPUSH
88372: CALL_OW 264
88376: PUSH
88377: LD_EXP 99
88381: EQUAL
88382: NOT
88383: PUSH
88384: LD_VAR 0 1
88388: PUSH
88389: LD_EXP 175
88393: IN
88394: NOT
88395: OR
88396: IFFALSE 88400
// exit ;
88398: GO 88722
// index := GetElementIndex ( minersList , unit ) ;
88400: LD_ADDR_VAR 0 6
88404: PUSH
88405: LD_EXP 175
88409: PPUSH
88410: LD_VAR 0 1
88414: PPUSH
88415: CALL 37176 0 2
88419: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88420: LD_ADDR_VAR 0 8
88424: PUSH
88425: LD_EXP 177
88429: PUSH
88430: LD_EXP 176
88434: PUSH
88435: LD_VAR 0 6
88439: ARRAY
88440: MINUS
88441: ST_TO_ADDR
// if not minesFreeAmount then
88442: LD_VAR 0 8
88446: NOT
88447: IFFALSE 88451
// exit ;
88449: GO 88722
// tmp := [ ] ;
88451: LD_ADDR_VAR 0 7
88455: PUSH
88456: EMPTY
88457: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88458: LD_ADDR_VAR 0 5
88462: PUSH
88463: DOUBLE
88464: LD_INT 1
88466: DEC
88467: ST_TO_ADDR
88468: LD_VAR 0 8
88472: PUSH
88473: FOR_TO
88474: IFFALSE 88669
// begin _d := rand ( 0 , 5 ) ;
88476: LD_ADDR_VAR 0 11
88480: PUSH
88481: LD_INT 0
88483: PPUSH
88484: LD_INT 5
88486: PPUSH
88487: CALL_OW 12
88491: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88492: LD_ADDR_VAR 0 12
88496: PUSH
88497: LD_INT 2
88499: PPUSH
88500: LD_INT 6
88502: PPUSH
88503: CALL_OW 12
88507: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88508: LD_ADDR_VAR 0 9
88512: PUSH
88513: LD_VAR 0 2
88517: PPUSH
88518: LD_VAR 0 11
88522: PPUSH
88523: LD_VAR 0 12
88527: PPUSH
88528: CALL_OW 272
88532: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88533: LD_ADDR_VAR 0 10
88537: PUSH
88538: LD_VAR 0 3
88542: PPUSH
88543: LD_VAR 0 11
88547: PPUSH
88548: LD_VAR 0 12
88552: PPUSH
88553: CALL_OW 273
88557: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88558: LD_VAR 0 9
88562: PPUSH
88563: LD_VAR 0 10
88567: PPUSH
88568: CALL_OW 488
88572: PUSH
88573: LD_VAR 0 9
88577: PUSH
88578: LD_VAR 0 10
88582: PUSH
88583: EMPTY
88584: LIST
88585: LIST
88586: PUSH
88587: LD_VAR 0 7
88591: IN
88592: NOT
88593: AND
88594: PUSH
88595: LD_VAR 0 9
88599: PPUSH
88600: LD_VAR 0 10
88604: PPUSH
88605: CALL_OW 458
88609: NOT
88610: AND
88611: IFFALSE 88653
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88613: LD_ADDR_VAR 0 7
88617: PUSH
88618: LD_VAR 0 7
88622: PPUSH
88623: LD_VAR 0 7
88627: PUSH
88628: LD_INT 1
88630: PLUS
88631: PPUSH
88632: LD_VAR 0 9
88636: PUSH
88637: LD_VAR 0 10
88641: PUSH
88642: EMPTY
88643: LIST
88644: LIST
88645: PPUSH
88646: CALL_OW 1
88650: ST_TO_ADDR
88651: GO 88667
// i := i - 1 ;
88653: LD_ADDR_VAR 0 5
88657: PUSH
88658: LD_VAR 0 5
88662: PUSH
88663: LD_INT 1
88665: MINUS
88666: ST_TO_ADDR
// end ;
88667: GO 88473
88669: POP
88670: POP
// for i in tmp do
88671: LD_ADDR_VAR 0 5
88675: PUSH
88676: LD_VAR 0 7
88680: PUSH
88681: FOR_IN
88682: IFFALSE 88720
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88684: LD_VAR 0 1
88688: PPUSH
88689: LD_VAR 0 5
88693: PUSH
88694: LD_INT 1
88696: ARRAY
88697: PPUSH
88698: LD_VAR 0 5
88702: PUSH
88703: LD_INT 2
88705: ARRAY
88706: PPUSH
88707: CALL 87662 0 3
88711: NOT
88712: IFFALSE 88718
// exit ;
88714: POP
88715: POP
88716: GO 88722
88718: GO 88681
88720: POP
88721: POP
// end ;
88722: LD_VAR 0 4
88726: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88727: LD_INT 0
88729: PPUSH
88730: PPUSH
88731: PPUSH
88732: PPUSH
88733: PPUSH
88734: PPUSH
88735: PPUSH
// if not GetClass ( unit ) = class_sniper then
88736: LD_VAR 0 1
88740: PPUSH
88741: CALL_OW 257
88745: PUSH
88746: LD_INT 5
88748: EQUAL
88749: NOT
88750: IFFALSE 88754
// exit ;
88752: GO 89142
// dist := 8 ;
88754: LD_ADDR_VAR 0 5
88758: PUSH
88759: LD_INT 8
88761: ST_TO_ADDR
// viewRange := 12 ;
88762: LD_ADDR_VAR 0 7
88766: PUSH
88767: LD_INT 12
88769: ST_TO_ADDR
// side := GetSide ( unit ) ;
88770: LD_ADDR_VAR 0 6
88774: PUSH
88775: LD_VAR 0 1
88779: PPUSH
88780: CALL_OW 255
88784: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88785: LD_INT 61
88787: PPUSH
88788: LD_VAR 0 6
88792: PPUSH
88793: CALL_OW 321
88797: PUSH
88798: LD_INT 2
88800: EQUAL
88801: IFFALSE 88811
// viewRange := 16 ;
88803: LD_ADDR_VAR 0 7
88807: PUSH
88808: LD_INT 16
88810: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88811: LD_VAR 0 1
88815: PPUSH
88816: LD_VAR 0 2
88820: PPUSH
88821: LD_VAR 0 3
88825: PPUSH
88826: CALL_OW 297
88830: PUSH
88831: LD_VAR 0 5
88835: GREATER
88836: IFFALSE 88915
// begin ComMoveXY ( unit , x , y ) ;
88838: LD_VAR 0 1
88842: PPUSH
88843: LD_VAR 0 2
88847: PPUSH
88848: LD_VAR 0 3
88852: PPUSH
88853: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88857: LD_INT 35
88859: PPUSH
88860: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88864: LD_VAR 0 1
88868: PPUSH
88869: LD_VAR 0 2
88873: PPUSH
88874: LD_VAR 0 3
88878: PPUSH
88879: CALL 67948 0 3
88883: NOT
88884: IFFALSE 88888
// exit ;
88886: GO 89142
// until GetDistUnitXY ( unit , x , y ) < dist ;
88888: LD_VAR 0 1
88892: PPUSH
88893: LD_VAR 0 2
88897: PPUSH
88898: LD_VAR 0 3
88902: PPUSH
88903: CALL_OW 297
88907: PUSH
88908: LD_VAR 0 5
88912: LESS
88913: IFFALSE 88857
// end ; ComTurnXY ( unit , x , y ) ;
88915: LD_VAR 0 1
88919: PPUSH
88920: LD_VAR 0 2
88924: PPUSH
88925: LD_VAR 0 3
88929: PPUSH
88930: CALL_OW 118
// wait ( 5 ) ;
88934: LD_INT 5
88936: PPUSH
88937: CALL_OW 67
// _d := GetDir ( unit ) ;
88941: LD_ADDR_VAR 0 10
88945: PUSH
88946: LD_VAR 0 1
88950: PPUSH
88951: CALL_OW 254
88955: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88956: LD_ADDR_VAR 0 8
88960: PUSH
88961: LD_VAR 0 1
88965: PPUSH
88966: CALL_OW 250
88970: PPUSH
88971: LD_VAR 0 10
88975: PPUSH
88976: LD_VAR 0 5
88980: PPUSH
88981: CALL_OW 272
88985: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88986: LD_ADDR_VAR 0 9
88990: PUSH
88991: LD_VAR 0 1
88995: PPUSH
88996: CALL_OW 251
89000: PPUSH
89001: LD_VAR 0 10
89005: PPUSH
89006: LD_VAR 0 5
89010: PPUSH
89011: CALL_OW 273
89015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89016: LD_VAR 0 8
89020: PPUSH
89021: LD_VAR 0 9
89025: PPUSH
89026: CALL_OW 488
89030: NOT
89031: IFFALSE 89035
// exit ;
89033: GO 89142
// ComAnimCustom ( unit , 1 ) ;
89035: LD_VAR 0 1
89039: PPUSH
89040: LD_INT 1
89042: PPUSH
89043: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
89047: LD_VAR 0 8
89051: PPUSH
89052: LD_VAR 0 9
89056: PPUSH
89057: LD_VAR 0 6
89061: PPUSH
89062: LD_VAR 0 7
89066: PPUSH
89067: CALL_OW 330
// repeat wait ( 1 ) ;
89071: LD_INT 1
89073: PPUSH
89074: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
89078: LD_VAR 0 1
89082: PPUSH
89083: CALL_OW 316
89087: PUSH
89088: LD_VAR 0 1
89092: PPUSH
89093: CALL_OW 314
89097: OR
89098: PUSH
89099: LD_VAR 0 1
89103: PPUSH
89104: CALL_OW 302
89108: NOT
89109: OR
89110: PUSH
89111: LD_VAR 0 1
89115: PPUSH
89116: CALL_OW 301
89120: OR
89121: IFFALSE 89071
// RemoveSeeing ( _x , _y , side ) ;
89123: LD_VAR 0 8
89127: PPUSH
89128: LD_VAR 0 9
89132: PPUSH
89133: LD_VAR 0 6
89137: PPUSH
89138: CALL_OW 331
// end ; end_of_file
89142: LD_VAR 0 4
89146: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89147: LD_VAR 0 1
89151: PUSH
89152: LD_INT 200
89154: DOUBLE
89155: GREATEREQUAL
89156: IFFALSE 89164
89158: LD_INT 299
89160: DOUBLE
89161: LESSEQUAL
89162: IFTRUE 89166
89164: GO 89198
89166: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89167: LD_VAR 0 1
89171: PPUSH
89172: LD_VAR 0 2
89176: PPUSH
89177: LD_VAR 0 3
89181: PPUSH
89182: LD_VAR 0 4
89186: PPUSH
89187: LD_VAR 0 5
89191: PPUSH
89192: CALL 85264 0 5
89196: GO 89275
89198: LD_INT 300
89200: DOUBLE
89201: GREATEREQUAL
89202: IFFALSE 89210
89204: LD_INT 399
89206: DOUBLE
89207: LESSEQUAL
89208: IFTRUE 89212
89210: GO 89274
89212: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89213: LD_VAR 0 1
89217: PPUSH
89218: LD_VAR 0 2
89222: PPUSH
89223: LD_VAR 0 3
89227: PPUSH
89228: LD_VAR 0 4
89232: PPUSH
89233: LD_VAR 0 5
89237: PPUSH
89238: LD_VAR 0 6
89242: PPUSH
89243: LD_VAR 0 7
89247: PPUSH
89248: LD_VAR 0 8
89252: PPUSH
89253: LD_VAR 0 9
89257: PPUSH
89258: LD_VAR 0 10
89262: PPUSH
89263: LD_VAR 0 11
89267: PPUSH
89268: CALL 83152 0 11
89272: GO 89275
89274: POP
// end ;
89275: PPOPN 11
89277: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89278: LD_VAR 0 1
89282: PPUSH
89283: LD_VAR 0 2
89287: PPUSH
89288: LD_VAR 0 3
89292: PPUSH
89293: LD_VAR 0 4
89297: PPUSH
89298: LD_VAR 0 5
89302: PPUSH
89303: CALL 85246 0 5
// end ;
89307: PPOPN 5
89309: END
